<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.92.0">Hugo</generator><title type="html"><![CDATA[junction on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/junction/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/junction/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/junction/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/junction/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2022-01-23T16:05:49+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/junction/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Junction in Raku]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-03-22-junctions-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2015-03-22-junctions-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-10T00:00:00+00:00</published>
            <updated>2021-07-10T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Junction in Raku</blockquote><p><a href="https://en.wikipedia.org/wiki/Erwin_Schr%C3%B6dinger">薛定谔欧文</a>应该是喜欢 Raku 的, 因为他的著名的<a href="https://en.wikipedia.org/wiki/Schr%C3%B6dinger%27s_cat">薛定谔的猫</a>可以用 Raku 的 <a href="https://docs.raku.org/type/Junction">Junction</a>表达:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$cat</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">dead</span><span class="p">&#39;</span> <span class="o">|</span> <span class="p">&#39;</span><span class="s1">alive</span><span class="p">&#39;;</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">cat is both dead and alive</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$cat</span> <span class="ow">eq</span> <span class="p">&#39;</span><span class="s1">dead</span><span class="p">&#39;</span> <span class="ow">and</span> <span class="nv">$cat</span> <span class="ow">eq</span> <span class="p">&#39;</span><span class="s1">alive</span><span class="p">&#39;;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># cat is both dead and alive</span>
</code></pre></div><p>这里面发生了什么事情? 我会告诉你全部的!</p>
<h2 id="anyone-游戏">Anyone 游戏?</h2>
<p>拿最简单的来说, Junction 允许你把一堆值当作单个值。例如, 你可以使用 <code>any</code> Junction 来测试一个变量是否等于所给定值中的任意一个:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">&#39;</span><span class="s1">it matches!</span><span class="p">&#39;</span> <span class="k">if</span> <span class="p">&#39;</span><span class="s1">foo</span><span class="p">&#39;</span> <span class="ow">eq</span> <span class="p">&#39;</span><span class="s1">foo</span><span class="p">&#39;</span> <span class="o">|</span> <span class="p">&#39;</span><span class="s1">bar</span><span class="p">&#39;</span> <span class="o">|</span> <span class="p">&#39;</span><span class="s1">ber</span><span class="p">&#39;;</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">single-digit prime</span><span class="p">&#39;</span> <span class="k">if</span> <span class="mi">5</span> <span class="o">==</span> <span class="nb">any</span> <span class="o">^</span><span class="mi">9</span><span class="o">.</span><span class="nb">grep</span><span class="o">:</span> <span class="o">*.</span><span class="nb">is-prime</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@values</span> <span class="o">=</span> <span class="o">^</span><span class="mi">100</span><span class="p">;</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">it&#39;s in there!</span><span class="p">&#34;</span> <span class="k">if</span> <span class="mi">42</span> <span class="o">==</span> <span class="nv">@values</span><span class="o">.</span><span class="nb">any</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># it matches!</span>
<span class="c1"># single-digit prime</span>
<span class="c1"># it&#39;s in there!</span>
</code></pre></div><p>要从一堆值中创建一个 <code>any</code> Junction, 你可以使用 <code>|</code> 中缀操作符、调用 <code>any</code> 函数或者使用 <code>.any</code> 方法。上面的条件会返回 True 如果 Junction 中的任意一个(<code>any</code>) 值匹配所给定的值的话。事实上, 没有人能阻止你在两端都使用 Junction:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">@one</span> <span class="o">=</span> <span class="mi">1</span><span class="o">..</span><span class="mi">10</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">@two</span> <span class="o">=</span> <span class="mi">5</span><span class="o">..</span><span class="mi">15</span><span class="p">;</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">There&#39;s overlap!</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">@one</span><span class="o">.</span><span class="nb">any</span> <span class="o">==</span> <span class="nv">@two</span><span class="o">.</span><span class="nb">any</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># there&#39;s overlap!</span>
</code></pre></div><p>运算符会返回 True 如果 <code>@one</code> 中的任意一个值(<code>any</code>) 在数值上等于 <code>@two</code> 中的任意一个值(<code>any</code>)的话。这个语法糖很甜, 但是我们还可以做的更多。</p>
<h2 id="all-for-one-and-any-for-none">All for One and Any for None</h2>
<p><code>any</code> Junction 唯一一个你能获得的 Junction。你还可以选择 <code>all</code>、<code>any</code>、<code>one</code> 和 <code>none</code>。当在布尔上下文中时, 它们的意思就像下面这样; 构建 Junction 的函数/方法名和 Junction 自身的名字一样并且下面还列出了构建 Junction 的中缀操作符:</p>
<ul>
<li><code>all</code> — 所有的值都被计算为 True(使用中缀 <code>&amp;</code>)</li>
<li><code>any</code> — 至少其中的一个值被计算为 True(使用中缀 <code>|</code>)</li>
<li><code>one</code> — 正好其中有一个值被计算为 True(使用中缀 <code>^</code>)</li>
<li><code>none</code> — 没有一个值被计算为 True(没有可用的中缀)</li>
</ul>
<p>使用 <code>all</code> JUnction 时要特别注意:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">@values</span> <span class="o">=</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="p">;</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">all primes</span><span class="p">&#39;</span> <span class="k">if</span> <span class="nv">@values</span><span class="o">.</span><span class="nb">all</span> <span class="o">~~</span> <span class="o">*.</span><span class="nb">is-prime</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@moar-values</span><span class="p">;</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">also all primes</span><span class="p">&#39;</span> <span class="k">if</span> <span class="nv">@moar-values</span><span class="o">.</span><span class="nb">all</span> <span class="o">~~</span> <span class="o">*.</span><span class="nb">is-prime</span><span class="p">;</span>
</code></pre></div><p>即使它没有值的时候也会返回 True, 这可能不是你想要的。在那些情况下, 你可以使用:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">@moar-values</span><span class="p">;</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">also all primes</span><span class="p">&#39;</span> <span class="k">if</span> <span class="nv">@moar-values</span> <span class="ow">and</span> <span class="nv">@moar-values</span><span class="o">.</span><span class="nb">all</span> <span class="o">~~</span> <span class="o">*.</span><span class="nb">is-prime</span><span class="p">;</span>
</code></pre></div><h2 id="call-me-baby">Call Me, Baby</h2>
<p>你可以把 Junction 用作并不期望 Junction 的子例程的参数。那么会发生什么呢? 对于每一个 Junctioned 的值, 那个子例程都会被调用一次, 并且返回值会是一个 Junction：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">caculate-things</span><span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$n</span><span class="s2"> is prime</span><span class="p">&#34;</span>          <span class="k">if</span> <span class="nv">$n</span><span class="o">.</span><span class="nb">is-prime</span><span class="p">;</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$n</span><span class="s2"> is an even number</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$n</span> <span class="nv">%%</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$n</span><span class="s2"> is pretty big</span><span class="p">&#34;</span>     <span class="k">if</span> <span class="nv">$n</span> <span class="o">&gt;</span> <span class="mf">1e6</span><span class="p">;</span>
    <span class="nv">$n</span>²<span class="p">;</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">@values</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">42</span><span class="o">,</span> <span class="mf">1e10</span><span class="o">.</span><span class="nb">Int</span><span class="p">;</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">EXACTLY ONE square is larger than 1e10</span><span class="p">&#39;</span>
    <span class="k">if</span> <span class="mf">1e10</span> <span class="o">&lt;</span> <span class="n">calculate-things</span> <span class="nv">@values</span><span class="o">.</span><span class="nb">one</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># 5 is a prime</span>
<span class="c1"># 42 is an even number</span>
<span class="c1"># 10000000000 is an even number</span>
<span class="c1"># 10000000000 is pretty big</span>
<span class="c1"># EXACTLY ONE square is larger than 1e10</span>
</code></pre></div><p>暴露的副作用可能有点太过神奇并且你可能不想在生产代码中看到它, 但是使用一个子例程来修改原来的 Junctioned 化的值是相当能接受的。执行一个数据库查询来获取&quot;实际的&quot;值并且在之后计算那个条件怎么样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">use</span> <span class="nn">DBIish</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$dbh</span> <span class="o">=</span> <span class="n">DBIish</span><span class="o">.</span><span class="nb">connect</span><span class="o">:</span> <span class="p">&#39;</span><span class="s1">SQLite</span><span class="p">&#39;</span><span class="o">,</span> <span class="p">:</span><span class="s">database</span><span class="p">&lt;</span><span class="s">test.db</span><span class="p">&gt;;</span>

<span class="k">sub</span> <span class="nb">lookup</span> <span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">given</span> <span class="nv">$dbh</span><span class="o">.</span><span class="nf">prepare</span><span class="o">:</span> <span class="p">&#39;</span><span class="s1">SELECT id, text FROM stuff WHERE id = ?</span><span class="p">&#39;</span> <span class="p">{</span>
        <span class="o">.</span><span class="nf">execute</span><span class="o">:</span> <span class="nv">$id</span><span class="p">;</span>
        <span class="o">.</span><span class="nf">allrows</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">//</span> <span class="p">&#39;&#39;;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">@ids</span> <span class="o">=</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="p">;</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">yeah, it got it, bruh</span><span class="p">&#39;</span> <span class="k">if</span> <span class="p">&#39;</span><span class="s1">meow</span><span class="p">&#39;</span> <span class="ow">eq</span> <span class="nb">lookup</span> <span class="nv">@ids</span><span class="o">.</span><span class="nb">any</span><span class="p">;</span>

<span class="c1"># OUTPUT (the database has a row with id = 5 and text = &#39;meow&#39;):</span>
<span class="c1"># yeah, it got it, bruh</span>
</code></pre></div><h2 id="我们一直在期盼你-请坐">我们一直在期盼你, 请坐</h2>
<p>那个游戏变化了当你的子例程正好期望一个 Junction 作为参数的时候。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">do-stuff</span> <span class="p">(</span><span class="nb">Junction</span> <span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">value is even</span><span class="p">&#39;</span>  <span class="k">if</span> <span class="nv">$n</span> <span class="nv">%%</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">value is prime</span><span class="p">&#39;</span> <span class="k">if</span> <span class="nv">$n</span><span class="o">.</span><span class="nb">is-prime</span><span class="p">;</span>
    <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">value is large</span><span class="p">&#39;</span> <span class="k">if</span> <span class="nv">$n</span> <span class="o">&gt;</span> <span class="mf">1e10</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">do-stuff</span> <span class="p">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mf">1e11</span><span class="o">.</span><span class="nb">Int</span><span class="p">)</span><span class="o">.</span><span class="nb">one</span><span class="p">;</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">---</span><span class="p">&#39;;</span>
<span class="n">do-stuff</span> <span class="p">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mf">1e11</span><span class="o">.</span><span class="nb">Int</span><span class="p">)</span><span class="o">.</span><span class="nb">any</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># value is large</span>
<span class="c1"># ---</span>
<span class="c1"># value is even</span>
<span class="c1"># value is prime</span>
<span class="c1"># value is large</span>
</code></pre></div><p>当我们提供了一个 <code>one</code> Junction 时, 只有正好满足给定值中的其中一个条件才会被触发。当我们提供一个 <code>any</code> Junction 时, 满足条件的任何一个给定值都会触发。</p>
<p>但是! 你没有必要非等着世界为你分发 Junction。你自己制造一个怎么样呢, 还能在测试条件时节省代码:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">do-stuff</span> <span class="p">(</span><span class="o">*</span><span class="nv">@v</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$n</span> <span class="o">=</span> <span class="nv">@v</span><span class="o">.</span><span class="nb">one</span><span class="p">;</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$n</span><span class="s2"> is even</span><span class="p">&#34;</span>  <span class="k">if</span> <span class="nv">$n</span> <span class="nv">%%</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$n</span><span class="s2"> is prime</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$n</span><span class="o">.</span><span class="nb">is-prime</span><span class="p">;</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$n</span><span class="s2"> is large</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$n</span> <span class="o">&gt;</span> <span class="mf">1e10</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">do-stuff</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mf">1e11</span><span class="o">.</span><span class="nb">Int</span><span class="p">;</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">---</span><span class="p">&#39;;</span>
<span class="n">do-stuff</span> <span class="mi">42</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># one(2, 3, 100000000000) is large</span>
<span class="c1"># ---</span>
<span class="c1"># one(42) is even</span>
</code></pre></div><h2 id="没有人想过将来吗">没有人想过将来吗?</h2>
<p>还有一个小秘密: Junction 被设计为时<a href="https://en.wikipedia.org/wiki/Automatic_parallelization">自动线程化</a>的(即 auto-threaded)。尽管在写这篇文章的时候它们只会使用仅仅一个线程, 你不应该依赖它们能以任何可预测的顺序被执行。自动线程化会在 2018 年的某个时间被实现, 所以保持关注&hellip; 你不必做任何事情, 你的值得自动线程化的复杂 Junctioned 化的操作可能会在几年之内变得更快。</p>
<h2 id="结论">结论</h2>
<p>Raku 的 Junction 是值的叠加态, 它允许你测试多个值就像它们是一个值一样。除了提供非常短并且易读的语法, Junction 还允许你使用子例程变换叠加值或者使用副作用。</p>
<p>你还可以生成显式操作 Junction 的子例程或者把提供的多个值转换成 Junction 以简化代码。</p>
<p>最后, Junction 被设计为能使用所有你计算机所提供的可用能力并且在不久的将来会做成自动线程化。</p>
<p>Junction 很精彩, 使用它们, 玩的开心!</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/junction" term="junction" label="junction" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[贪婪 Junction 的奇闻异事]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-10-04-the-strange-case-of-the-greedy-junction/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-10-04-reconstructing-raku-junctions/?utm_source=atom_feed" rel="related" type="text/html" title="重构 Raku 的 Junction" />
            
                <id>https://ohmyweekly.github.io/notes/2020-10-04-the-strange-case-of-the-greedy-junction/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-10-04T00:00:00+00:00</published>
            <updated>2020-10-04T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>The Strange Case of the Greedy Junction</blockquote><h2 id="贪婪-junction-的奇闻异事">贪婪 junction 的奇闻异事</h2>
<p>说明 Raku 的 junction 是如何贪婪的设计，以及一个建议。</p>
<p><a href="https://raku.org/">Raku</a> 有一个整洁的功能，叫做 <a href="https://docs.raku.org/type/Junction">Junction</a>。在这篇短文中，我想强调一下 junction 与函数交互的一个特殊后果：它们是贪婪的，我的意思是它们会无意中把函数的其他参数变成 junction。为了说明这种行为，我将使用一个闭包创建一个 <code>pair</code> 数据结构，它可以接受两个不同类型的值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">enum</span> <span class="n">RGB</span> <span class="p">&lt;</span><span class="s">R G B</span><span class="p">&gt;;</span>

<span class="c1"># Pair Constructor: the arguments of pair() are captured</span>
<span class="c1"># in a closure that is returned</span>
<span class="k">sub</span> <span class="nb">pair</span><span class="p">(</span>\<span class="nb">x</span><span class="o">,</span> \<span class="n">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">sub</span> <span class="p">(</span><span class="nv">&amp;p</span><span class="p">){</span> <span class="nf">p</span><span class="p">(</span><span class="nb">x</span><span class="o">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">}</span> 
<span class="p">}</span>
</code></pre></div><p>所以 <code>pair</code> 接受两个任意类型的参数，并返回一个以函数为参数的闭包。我们将使用这个函数来访问存储在 <code>pair</code> 中的值。我将把这些访问(accessor)函数称为 <code>fst</code> 和 <code>snd</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="c1"># Accessors to get the values from the closure</span>
<span class="k">my</span> <span class="k">sub</span> <span class="nf">fst</span> <span class="p">(</span><span class="nv">&amp;p</span><span class="p">)</span> <span class="p">{</span><span class="nf">p</span><span class="p">(</span> <span class="k">sub</span> <span class="p">(</span>\<span class="nb">x</span><span class="o">,</span>\<span class="n">y</span><span class="p">){</span><span class="nb">x</span><span class="p">})}</span>
<span class="k">my</span> <span class="k">sub</span> <span class="nf">snd</span> <span class="p">(</span><span class="nv">&amp;p</span><span class="p">)</span> <span class="p">{</span><span class="nf">p</span><span class="p">(</span> <span class="k">sub</span> <span class="p">(</span>\<span class="nb">x</span><span class="o">,</span>\<span class="n">y</span><span class="p">){</span><span class="n">y</span><span class="p">})}</span>
</code></pre></div><p>做实际选择的函数是由 <code>fst</code> 和 <code>snd</code> 返回的匿名子程序，这纯粹是为了让我可以将它们应用于 <code>pair</code>，而不是必须将它们作为参数传递。让我们看一个例子，一个 <code>Int</code> 和一个 <code>RGB</code> 的 pair。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">\p1</span> <span class="o">=</span> <span class="nb">pair</span> <span class="mi">42</span><span class="o">,</span> <span class="ow">R</span><span class="err">;</span>

<span class="k">if</span> <span class="p">(</span> <span class="mi">42</span> <span class="o">==</span> <span class="n">fst</span> <span class="n">p1</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="n">snd</span> <span class="n">p1</span><span class="p">;</span>	<span class="c1">#=&gt; says &#34;R&#34;</span>
<span class="p">}</span>
</code></pre></div><p>所以我们用两个值调用 <code>pair</code> 来创建一个 pair，并使用 <code>fst</code> 和 <code>snd</code> 来访问 pair 中的值。这是一个不可变的数据结构，所以不可能进行更新。</p>
<p>现在让我们使用 junction 作为其中一个参数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="c1"># Example instance with a &#39;one&#39;-type junction</span>
<span class="k">my</span> <span class="nb">Junction</span> \<span class="n">p1j</span> <span class="o">=</span> <span class="nb">pair</span> <span class="p">(</span><span class="mi">42</span><span class="o">^</span><span class="mi">43</span><span class="p">)</span><span class="o">,</span><span class="ow">R</span><span class="err">;</span>

<span class="k">if</span> <span class="p">(</span> <span class="mi">42</span> <span class="o">==</span> <span class="n">fst</span> <span class="n">p1j</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="n">snd</span> <span class="n">p1j</span><span class="p">;</span> <span class="c1">#=&gt; one(R, R)</span>
<span class="p">}</span>
</code></pre></div><p>这里发生的情况是，原始参数 <code>R</code> 已经不可逆转地变成了与自己的 junction，尽管我们从未明确地在 <code>R</code> 上创建过 junction，但还是发生了这种情况。这是将 junction 类型应用于函数的结果，它不是一个 bug，只是 junction 行为的一个影响。更详细的解释，请看我的文章&quot;<a href="https://gist.github.com/wimvanderbauwhede/19cc1e8d04e9a477f58cfe7288a6172e">重构 Raku 的 Junction</a>&quot;。</p>
<p><a href="https://docs.raku.org/type/Junction">Raku 关于 junction 的文档</a>中说，你不应该真正尝试从 junction 中获取值。</p>
<p>&ldquo;Junction 是用来作为布尔上下文中的匹配器，不支持 junction 的自省。如果你觉得有自省 junction 的冲动，请使用 Set 或相关类型代替。&rdquo;</p>
<p>然而，有一个 FAQ <a href="https://docs.raku.org/language/faq#index-entry-Junction_(FAQ)">勉强地告诉你如何做</a>。FAQ 再次警告不要这样做。</p>
<p>&ldquo;如果你想从 junction 中提取值（特征态），你可能做错了什么，应该用 Set 来代替。&rdquo;</p>
<p>然而，正如我所举的例子所证明的那样，从 junction 中恢复值是有明确的用例的。当然，仅仅因为另一个值恰好是 junction，存储在 pair 中的其中一个值就变得不可访问，这不是我们的本意。</p>
<p>因此，我建议增加一个折叠(<code>collapse</code>)函数，允许将这些无意中出现的 junction 值折叠成它们的原始值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">if</span> <span class="p">(</span> <span class="mi">42</span> <span class="o">==</span> <span class="n">fst</span> <span class="n">p1j</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nf">collapse</span><span class="p">(</span><span class="n">snd</span> <span class="n">p1j</span><span class="p">);</span> <span class="c1">#=&gt; says &#39;R&#39;</span>
<span class="p">}</span>
</code></pre></div><p>该函数的实现取自<a href="https://docs.raku.org/language/faq#index-entry-Junction_(FAQ)">上述常见问题</a>，并增加了一个检查，以确保 junction 上的所有值都相同。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">collapse</span><span class="p">(</span><span class="nb">Junction</span> \<span class="n">j</span><span class="p">)</span> <span class="p">{</span>    
    <span class="k">my</span> <span class="nv">@vvs</span><span class="p">;</span>
    <span class="k">-&gt;</span> <span class="nb">Any</span> \<span class="k">s</span> <span class="p">{</span><span class="sr"> push </span><span class="nv">@vvs</span><span class="sr">, s </span><span class="p">}</span><span class="o">.</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>    
    <span class="k">my</span> <span class="nv">$v</span> <span class="o">=</span>  <span class="nb">shift</span> <span class="nv">@vvs</span><span class="p">;</span>        
    <span class="k">my</span> <span class="nv">@ts</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="o">!</span><span class="p">(</span><span class="nv">$_</span> <span class="o">~~</span> <span class="nv">$v</span><span class="p">)}</span><span class="o">,</span> <span class="nv">@vvs</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">@ts</span><span class="o">.</span><span class="nb">elems</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>  
        <span class="nv">$v</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nb">die</span> <span class="p">&#34;</span><span class="s2">Can&#39;t collapse this Junction: elements are not identical: </span><span class="p">{</span><span class="nv">$v</span><span class="o">,</span><span class="nv">@vvs</span><span class="p">}&#34;;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>如果能把这个功能作为一个 <code>collapse</code> 方法添加到 <code>Junction</code> 类中就更好了。</p>
<p>原文链接: <a href="https://gist.github.com/wimvanderbauwhede/85fb4b88ec53a0b8149e6c05740adcf8">https://gist.github.com/wimvanderbauwhede/85fb4b88ec53a0b8149e6c05740adcf8</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/junction" term="junction" label="Junction" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[重构 Raku 的 Junction]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-10-04-reconstructing-raku-junctions/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-10-04-the-strange-case-of-the-greedy-junction/?utm_source=atom_feed" rel="related" type="text/html" title="贪婪 Junction 的奇闻异事" />
            
                <id>https://ohmyweekly.github.io/notes/2020-10-04-reconstructing-raku-junctions/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-10-04T00:00:00+00:00</published>
            <updated>2020-10-04T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Reconstructing Raku&rsquo;s Junctions</blockquote><h2 id="重构-raku-的-junction">重构 Raku 的 Junction</h2>
<p>Raku 中的 junction 很酷，但乍一看它们并没有遵循静态类型化的规则。我对它们的形式化类型语义很好奇，所以我从功能、静态类型的角度对 junction 进行了解构和重构。</p>
<h3 id="raku-中的-junction">Raku 中的 Junction</h3>
<p><a href="https://docs.raku.org/">Raku</a> 有一个整洁的功能叫做 <a href="https://docs.raku.org/type/Junction">Junction</a>。Junction 是一个无序的复合值。当使用 junction 代替值时，会对每个结点(junction)元素进行操作，结果是所有这些操作符的返回值的结点(junction)。当在布尔上下文中使用 junction 时，结点(junction)会折叠成一个值。Junction 的类型可以是 all(<code>&amp;</code>)、any(<code>|</code>)、one(<code>^</code>) 或 <code>none</code> (空结点)。</p>
<p>例如:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$j</span> <span class="o">=</span> <span class="mi">11</span><span class="o">|</span><span class="mi">22</span><span class="p">;</span> <span class="c1"># short for any(11,22)</span>
<span class="k">if</span> <span class="mi">33</span> <span class="o">==</span> <span class="nv">$j</span> <span class="o">+</span> <span class="mi">11</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">yes</span><span class="p">&#39;;</span>
<span class="p">}</span>

<span class="nb">say</span> <span class="nb">so</span> <span class="mi">3</span> <span class="o">==</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">30</span><span class="p">)</span><span class="o">.</span><span class="nb">one</span><span class="p">;</span>         <span class="c1">#=&gt; True </span>
<span class="nb">say</span> <span class="nb">so</span> <span class="p">(&#34;</span><span class="s2">a</span><span class="p">&#34;</span> <span class="o">^</span> <span class="p">&#34;</span><span class="s2">b</span><span class="p">&#34;</span> <span class="o">^</span> <span class="p">&#34;</span><span class="s2">c</span><span class="p">&#34;)</span> <span class="ow">eq</span> <span class="p">&#34;</span><span class="s2">a</span><span class="p">&#34;;</span> <span class="c1">#=&gt; True</span>
</code></pre></div><p>函数 <code>so</code> 强制使用布尔上下文。</p>
<p>Junction 有 <code>Junction</code> 类型，我很好奇 Junction 的类型规则，因为乍一看有些奇怪。比方说我们有一个函数 <code>sq</code> 从 <code>Int</code> 到 <code>Int</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">sq</span><span class="p">(</span><span class="nb">Int</span> <span class="nv">$x</span> <span class="k">--&gt;</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$x</span><span class="o">*</span><span class="nv">$x</span> <span class="p">}</span>

<span class="k">my</span> <span class="nb">Int</span> <span class="nv">$res</span> <span class="o">=</span> <span class="nf">sq</span><span class="p">(</span><span class="mi">11</span><span class="p">);</span> <span class="c1"># OK</span>
<span class="nb">say</span> <span class="nv">$res</span><span class="p">;</span> <span class="c1">#=&gt; 121</span>
</code></pre></div><p>现在让我们定义一个类型为任何 <code>Int</code> 值的 Junction。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nb">Junction</span> <span class="nv">$j</span> <span class="o">=</span> <span class="mi">11</span> <span class="o">|</span> <span class="mi">22</span><span class="p">;</span> 
</code></pre></div><p>当我们将 <code>sq</code> 应用于 <code>$j</code> 时，我们没有得到一个类型错误，即使函数的类型是 <code>:(Int --&gt; Int)</code>，Junction 的类型是 <code>Junction</code>。相反，我们得到的是一个结果的 Junction。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nf">sq</span><span class="p">(</span><span class="nv">$j</span><span class="p">);</span> <span class="c1">#=&gt; any(121, 484)</span>
</code></pre></div><p>如果我们像之前一样将其赋值给一个类型为 <code>Int</code> 的变量，我们会得到一个类型错误。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nb">Int</span> <span class="nv">$rj</span> <span class="o">=</span> <span class="nf">sq</span><span class="p">(</span><span class="nv">$j</span><span class="p">);</span> <span class="c1">#=&gt; Type check failed in assignment to $rj; expected Int but got Junction (any(121, 484))</span>
</code></pre></div><p>取而代之的是，现在返回值的类型为 <code>Junction</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nb">Junction</span> <span class="nv">$rj</span> <span class="o">=</span> <span class="nf">sq</span><span class="p">(</span><span class="mi">11</span><span class="o">|</span><span class="mi">22</span><span class="p">);</span> <span class="c1"># OK</span>
</code></pre></div><p>所以，Junction 类型可以代替任何其他类型，但这样一来，操作也变成了 Junction。</p>
<p>另一方面，Junction 是由其组成值隐式类型的，尽管它们看起来是不透明的 <code>Junction</code> 类型。例如，如果我们创建了一个由 <code>Str</code> 值组成的 Junction，并试图将这个 Junction 的值传递到 <code>sq</code> 中，我们会得到一个类型错误。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$sj</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">11</span><span class="p">&#39;</span> <span class="o">|</span> <span class="p">&#39;</span><span class="s1">22</span><span class="p">&#39;;</span>
<span class="nb">say</span> <span class="nv">$sj</span><span class="o">.</span><span class="nb">WHAT</span><span class="p">;</span> <span class="c1">#=&gt;(Junction)</span>

<span class="k">my</span> <span class="nb">Junction</span> <span class="nv">$svj</span> <span class="o">=</span> <span class="nf">sq</span><span class="p">(</span><span class="nv">$sj</span><span class="p">);</span> <span class="c1">#=&gt; Type check failed in binding to parameter &#39;x&#39;; expected Int but got Str (&#34;11&#34;)</span>
</code></pre></div><h3 id="junction-不遵循静态类型规则">Junction 不遵循静态类型规则</h3>
<p>虽然这样做是有道理的(如果原始函数期望使用 <code>Int</code>，我们不希望它与 <code>Str</code> 一起工作)，但这确实违背了静态类型化的规则，即使是子类型化。如果一个参数的类型是 <code>Int</code>，那么可以使用类型图中低于它的任何类型来代替。但是 <code>Int</code> 和 <code>Junction</code> 的简化类型图如下。</p>
<pre><code>Int -&gt; Cool -&gt; Any -&gt; Mu &lt;- Junction
</code></pre>
<p>所以 Junction 永远不是 <code>Any</code> 以下任何东西的子类型。因此，将 Junction 放在类型为 <code>Any</code> 或其子类型的槽中应该是一个类型错误。</p>
<p>此外，由于 Junction 类型是不透明的（即它不是一个参数化的类型），它不应该持有任何关于 Junction 内部值的类型的信息。然而它却对这些不可见、不可访问的值进行了类型检查。</p>
<p>那么这里到底发生了什么？</p>
<h3 id="一个工作假设">一个工作假设</h3>
<p>一个工作假设是，Junction 类型并不真正取代任何其他类型：它只是一个语法糖，使它看起来如此。</p>
<h3 id="重构-junction-的第一部分类型">重构 Junction 的第一部分：类型</h3>
<p>让我们试着重建这个。我们的目的是想出一个数据类型和一些动作，以复制观察到的 Raku Junction 的行为。首先我们讨论一下类型，为了清晰起见，使用 Haskell 符号。然后我介绍 Raku 中的实现。这个实现将像 Raku 的原生 Junction 一样，但没有神奇的语法糖。通过这种方式，我证明了 Raku 的 Junction 毕竟遵循了正确的类型规则。</p>
<h4 id="junction-类型">Junction 类型</h4>
<p>Junction 是一个由 Junction 类型 <code>JType</code> 和一组值组成的数据结构。为了方便起见，我将这个值集限制为单一类型，同时也是因为混合类型的 Junction 其实没有什么意义。我使用一个列表来模拟这个集合，同样是为了方便。因为 Junction 可以包含任何类型的值，所以它是一个多态的代数数据类型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="n">data</span> <span class="n">JType</span> <span class="o">=</span> <span class="n">JAny</span> <span class="o">|</span> <span class="n">JAll</span> <span class="o">|</span> <span class="n">JOne</span> <span class="o">|</span> <span class="n">JNone</span>

<span class="n">data</span> <span class="nb">Junction</span> <span class="n">a</span> <span class="o">=</span> <span class="nb">Junction</span> <span class="n">JType</span> <span class="o">[</span><span class="n">a</span><span class="o">]</span>
</code></pre></div><h4 id="应用结点">应用结点</h4>
<p>对一个 Junction 做任何事情都意味着对它应用一个函数。我们可以考虑三种情况，我为每一种情况介绍一个特别定制的操作符。</p>
<ul>
<li>将非 Junction 函数应用于 Junction 表达式</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="p">(</span>•￮<span class="p">)</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="k">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Junction</span> <span class="n">a</span> <span class="k">-&gt;</span>  <span class="nb">Junction</span> <span class="n">b</span>
</code></pre></div><ul>
<li>将 Junction 函数应用于非 Junction 表达式。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="p">(</span>￮•<span class="p">)</span> <span class="o">::</span>  <span class="nb">Junction</span> <span class="p">(</span><span class="n">b</span> <span class="k">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">b</span> <span class="k">-&gt;</span> <span class="nb">Junction</span> <span class="n">c</span>
</code></pre></div><ul>
<li>将 Junction 函数应用于 Junction 表达式，创建一个嵌套 Junction。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="p">(</span>￮￮<span class="p">)</span> <span class="o">::</span>  <span class="nb">Junction</span> <span class="p">(</span><span class="n">b</span> <span class="k">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Junction</span> <span class="n">b</span> <span class="k">-&gt;</span> <span class="nb">Junction</span> <span class="p">(</span><span class="nb">Junction</span> <span class="n">c</span><span class="p">)</span>
</code></pre></div><p>为了方便，我们还可以在 Junction a 和 a 之间创建自定义比较运算符。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="o">--</span> <span class="ow">and</span> <span class="n">similar</span> <span class="k">for</span> <span class="o">/-,</span> <span class="o">&gt;,</span> <span class="o">&lt;,</span> <span class="p">&lt;</span><span class="s">=,</span><span class="p">&gt;</span><span class="o">=</span>
<span class="p">(</span>￮<span class="o">==</span>•<span class="p">)</span> <span class="o">::</span> <span class="nb">Junction</span> <span class="n">a</span> <span class="k">-&gt;</span> <span class="n">a</span> <span class="k">-&gt;</span> <span class="nb">Bool</span>
</code></pre></div><h4 id="折叠-junction">折叠 Junction</h4>
<p>那么我们就有了 <code>so</code>，布尔强制函数。它的作用是将一个布尔的 Junction 折叠成一个布尔。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">so</span> <span class="o">::</span> <span class="nb">Junction</span> <span class="nb">Bool</span> <span class="k">-&gt;</span> <span class="nb">Bool</span>
</code></pre></div><p>最后我们有 <code>collapse</code>，它从一个 Junction 返回值，前提是它是一个 Junction，所有存储的值都是一样的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nf">collapse</span> <span class="o">::</span> <span class="p">(</span><span class="n">Show</span> <span class="n">a</span><span class="o">,</span><span class="n">Eq</span> <span class="n">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Junction</span> <span class="n">a</span> <span class="k">-&gt;</span> <span class="n">a</span>
</code></pre></div><p>这似乎是一个奇怪的函数，但由于 Junction 的行为，它是必要的。正如我们将看到的，上述语义意味着 Junction 是贪婪的：如果一个函数的一个参数是 Junction，那么所有其他参数也会成为 Junction，但 Junction 中的所有值都是相同的。我已经在&quot;<a href="https://gist.github.com/wimvanderbauwhede/85fb4b88ec53a0b8149e6c05740adcf8">贪婪 Junction 的奇怪情况</a>&ldquo;中讨论过这个问题，但我们现在可以将这种行为形式化。</p>
<h4 id="重新审视贪婪-junction-的奇怪情况">重新审视贪婪 Junction 的奇怪情况</h4>
<p>假设我们有一个两个参数的函数 <code>f :: a -&gt; b -&gt; c</code>，我们对第一个参数应用一个结点 <code>j :: Junction</code> a 应用到第一个参数 <code>f •￮ j</code> 上，那么结果是一个部分应用的函数，包裹在一个 Junction 上：<code>fp :: Junction b -&gt; c</code>。如果我们现在想用 <code>fp ￮• v</code> 将这个函数应用于一个非结点的值 <code>v :: b</code>，那么结果就是 <code>Junction c</code> 类型的。</p>
<p>现在，让我们考虑类型 <code>c</code> 是 <code>forall d . (a -&gt; b -&gt; d) -&gt; d</code> 的特殊情况。所以我们有 <code>Junction</code>(<code>forall d . (a-&gt;b-&gt;d) -&gt; d</code>)。这是一个函数，它接受一个函数参数并返回该函数的返回类型的东西。我们使用 <code>forall</code>，所以 <code>d</code> 可以是任何东西，但在实践中我们希望它是 <code>a</code> 或 <code>b</code>。</p>
<p>假设我们将这个函数(称它为 <code>p</code>)应用于 <code>fst :: a-&gt;b-&gt;a</code>，使用 <code>p ￮• fst</code>，那么我们得到 <code>Junction a</code>。但是如果我们将它应用于 <code>snd :: a-&gt;b-&gt;b</code>，使用 <code>p ￮• snd</code>，那么我们得到 <code>Junction b</code>。</p>
<p>这就是形式上基于类型的分析，为什么我们不能从一个 pair 中返回一个非 Junction 的值，在&rdquo;<a href="https://gist.github.com/wimvanderbauwhede/85fb4b88ec53a0b8149e6c05740adcf8">贪婪 Junction 的奇怪情况</a>&ldquo;中已经解释过。而这也是我们需要 <code>collapse</code> 函数的原因。</p>
<h4 id="重构-junction-的第2部分raku-的实现">重构 Junction 的第2部分：Raku 的实现。</h4>
<p>我们从创建 Junction 类型开始，为四种 Junction 类型使用一个枚举，为实际的 Junction 数据类型使用一个角色。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="c1"># The types of Junctions</span>
<span class="k">enum</span> <span class="n">JType</span> <span class="p">&lt;</span><span class="s">JAny  JAll  JOne  JNone </span><span class="p">&gt;;</span>

<span class="c1"># The actual Junction type</span>
<span class="k">role</span> <span class="nb">Junction</span><span class="o">[</span>\<span class="n">jt</span><span class="o">,</span> <span class="nv">@vs</span><span class="o">]</span> <span class="p">{</span>
    <span class="k">has</span> <span class="n">JType</span> <span class="nv">$.junction-type</span><span class="o">=</span><span class="n">jt</span><span class="p">;</span>
    <span class="k">has</span> <span class="nv">@.values</span><span class="o">=</span><span class="nv">@vs</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>接下来是四种类型的 Junction 的构造函数（下划线，避免与内建函数的名称冲突）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">our</span> <span class="k">sub</span> <span class="nf">all_</span><span class="p">(</span><span class="nv">@vs</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">Junction</span><span class="o">[</span> <span class="n">JAll</span><span class="o">,</span> <span class="nv">@vs</span><span class="o">].</span><span class="nb">new</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">our</span> <span class="k">sub</span> <span class="nf">any_</span><span class="p">(</span><span class="nv">@vs</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">Junction</span><span class="o">[</span> <span class="n">JAny</span><span class="o">,</span> <span class="nv">@vs</span><span class="o">].</span><span class="nb">new</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">our</span> <span class="k">sub</span> <span class="nf">one_</span><span class="p">(</span><span class="nv">@vs</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">Junction</span><span class="o">[</span> <span class="n">JOne</span><span class="o">,</span> <span class="nv">@vs</span><span class="o">].</span><span class="nb">new</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">our</span> <span class="k">sub</span> <span class="nf">none_</span><span class="p">(</span><span class="nv">@vs</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">Junction</span><span class="o">[</span> <span class="n">JNone</span><span class="o">,</span> <span class="nv">@vs</span><span class="o">].</span><span class="nb">new</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>将一个（单参数）函数应用于 junction 参数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nb">infix</span><span class="o">:</span><span class="p">&lt;</span><span class="s">●○</span><span class="p">&gt;(</span> <span class="nv">&amp;f</span><span class="o">,</span> \<span class="n">j</span> <span class="p">)</span> <span class="k">is</span> <span class="k">export</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">\jt</span><span class="o">=</span><span class="n">j</span><span class="o">.</span><span class="nf">junction-type</span><span class="p">;</span> 
    <span class="k">my</span> <span class="nv">@vs</span> <span class="o">=</span> <span class="n">j</span><span class="o">.</span><span class="nb">values</span><span class="p">;</span>
  
    <span class="nb">Junction</span><span class="o">[</span> <span class="n">jt</span><span class="o">,</span> <span class="nb">map</span><span class="p">(</span> <span class="p">{</span><span class="nv">&amp;f</span><span class="p">(</span><span class="nv">$_</span><span class="p">)}</span><span class="o">,</span> <span class="nv">@vs</span><span class="p">)</span><span class="o">].</span><span class="nb">new</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>要将 Junction 内的函数应用于非 Junction 的参数:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nb">infix</span><span class="o">:</span><span class="p">&lt;</span><span class="s">○●</span><span class="p">&gt;(</span> \<span class="n">jf</span><span class="o">,</span> \<span class="n">v</span> <span class="p">)</span> <span class="k">is</span> <span class="k">export</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">\jt</span><span class="o">=</span><span class="n">jf</span><span class="o">.</span><span class="nf">junction-type</span><span class="p">;</span> 
    <span class="k">my</span> <span class="nv">@fs</span> <span class="o">=</span> <span class="n">jf</span><span class="o">.</span><span class="nb">values</span><span class="p">;</span>

    <span class="nb">Junction</span><span class="o">[</span> <span class="n">jt</span><span class="o">,</span> <span class="nb">map</span><span class="p">(</span> <span class="p">{</span><span class="nv">$_</span><span class="p">(</span> <span class="n">v</span><span class="p">)}</span><span class="o">,</span> <span class="nv">@fs</span><span class="p">)</span><span class="o">].</span><span class="nb">new</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>将一个函数应用于两个 junction 参数，相当于将一个 junction 内的函数应用于一个 junction。这里有一个复杂的问题。Raku 对嵌套施加了一个排序，即所有的嵌套总是外嵌套。因此，我们必须检查 junction 的类型，如果需要的话，我们必须交换映射。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nb">infix</span><span class="o">:</span><span class="p">&lt;</span><span class="s">○○</span><span class="p">&gt;(</span> \<span class="n">jf</span><span class="o">,</span> \<span class="n">jv</span> <span class="p">)</span> <span class="k">is</span> <span class="k">export</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">\jft</span><span class="o">=</span> <span class="n">jf</span><span class="o">.</span><span class="nf">junction-type</span><span class="p">;</span> 
    <span class="k">my</span> <span class="nv">@fs</span> <span class="o">=</span> <span class="n">jf</span><span class="o">.</span><span class="nb">values</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">\jvt</span> <span class="o">=</span> <span class="n">jv</span><span class="o">.</span><span class="nf">junction-type</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">@vs</span> <span class="o">=</span> <span class="n">jv</span><span class="o">.</span><span class="nb">values</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">jvt</span> <span class="o">==</span> <span class="n">JAll</span> <span class="ow">and</span> <span class="n">jft</span> <span class="o">!=</span> <span class="n">JAll</span><span class="p">)</span> <span class="p">{</span>        
        <span class="nb">Junction</span><span class="o">[</span> <span class="n">jvt</span><span class="o">,</span> <span class="nb">map</span><span class="p">(</span> <span class="k">sub</span> <span class="p">(</span>\<span class="n">v</span><span class="p">){</span><span class="n">jf</span> ○● <span class="n">v</span><span class="p">}</span><span class="o">,</span> <span class="nv">@vs</span><span class="p">)</span><span class="o">].</span><span class="nb">new</span><span class="p">;</span>  
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>        
        <span class="nb">Junction</span><span class="o">[</span> <span class="n">jft</span><span class="o">,</span> <span class="nb">map</span><span class="p">(</span> <span class="k">sub</span> <span class="p">(</span><span class="nv">&amp;f</span><span class="p">){</span> <span class="nv">&amp;f</span> ●○ <span class="n">jv</span><span class="p">}</span><span class="o">,</span> <span class="nv">@fs</span><span class="p">)</span><span class="o">].</span><span class="nb">new</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>为了完整，这里是 <code>○==●</code> 的定义。<code>○!=●</code>、<code>○&gt;●</code> 等的定义是类似的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nb">infix</span><span class="o">:</span><span class="p">&lt;</span><span class="s"> ○==● </span><span class="p">&gt;(</span> \<span class="n">j</span><span class="o">,</span> \<span class="n">v</span> <span class="p">)</span> <span class="k">is</span> <span class="k">export</span> <span class="p">{</span>
    <span class="k">sub</span> <span class="p">(</span>\<span class="nb">x</span><span class="p">){</span><span class="nb">x</span><span class="o">==</span><span class="n">v</span><span class="p">}</span> ●○ <span class="n">j</span>
<span class="p">}</span>
</code></pre></div><p>接下来我们有 <code>so</code>，它把布尔值的 junction 变成了布尔值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">our</span> <span class="k">sub</span> <span class="nb">so</span> <span class="p">(</span>\<span class="n">jv</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">my</span> <span class="nv">@vs</span> <span class="o">=</span> <span class="n">jv</span><span class="o">.</span><span class="nb">values</span><span class="p">;</span>
    <span class="k">given</span> <span class="n">jv</span><span class="o">.</span><span class="nf">junction-type</span> <span class="p">{</span>
        <span class="k">when</span> <span class="n">JAny</span> <span class="p">{</span> <span class="nb">elems</span><span class="p">(</span><span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="p">}</span><span class="o">,</span>  <span class="nv">@vs</span><span class="p">)</span> <span class="o">&gt;</span><span class="mi">0</span><span class="p">}</span>
        <span class="k">when</span> <span class="n">JAll</span> <span class="p">{</span> <span class="nb">elems</span><span class="p">(</span><span class="nb">grep</span> <span class="p">{</span><span class="o">!</span><span class="nv">$_</span><span class="p">}</span><span class="o">,</span> <span class="nv">@vs</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">}</span>
        <span class="k">when</span> <span class="n">JOne</span> <span class="p">{</span> <span class="nb">elems</span><span class="p">(</span><span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="p">}</span><span class="o">,</span>  <span class="nv">@vs</span><span class="p">)</span><span class="o">==</span><span class="mi">1</span><span class="p">}</span>
        <span class="k">when</span> <span class="n">JOne</span> <span class="p">{</span> <span class="nb">elems</span><span class="p">(</span><span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="p">}</span><span class="o">,</span>  <span class="nv">@vs</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>最后我们有 <code>collapse</code>，正如<a href="https://gist.github.com/wimvanderbauwhede/85fb4b88ec53a0b8149e6c05740adcf8">贪婪 Junction 的文章</a>中所定义的那样， <code>collapse</code> 返回 Junction 的值，只要它们都是一样的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">our</span> <span class="k">sub</span> <span class="nf">collapse</span><span class="p">(</span> \<span class="n">j</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">\jt</span><span class="o">=</span><span class="n">j</span><span class="o">.</span><span class="nf">junction-type</span><span class="p">;</span> 
    <span class="k">my</span> <span class="nv">@vvs</span> <span class="o">=</span> <span class="n">j</span><span class="o">.</span><span class="nb">values</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$v</span> <span class="o">=</span>  <span class="nb">shift</span> <span class="nv">@vvs</span><span class="p">;</span>        
    <span class="k">my</span> <span class="nv">@ts</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="o">!</span><span class="p">(</span><span class="nv">$_</span> <span class="o">~~</span> <span class="nv">$v</span><span class="p">)}</span><span class="o">,</span> <span class="nv">@vvs</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">@ts</span><span class="o">.</span><span class="nb">elems</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>  
        <span class="nv">$v</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nb">die</span> <span class="p">&#34;</span><span class="s2">Can&#39;t collapse this Junction: elements are not identical: </span><span class="p">{</span><span class="nv">$v</span><span class="o">,</span><span class="nv">@vvs</span><span class="p">}&#34;;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h3 id="junction-清理">Junction 清理</h3>
<p>现在我们再来看看我们的工作假说，将 Raku 的 Junction 上的动作解释为上述类型和操作符的语法糖。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">sq</span><span class="p">(</span><span class="nb">Int</span> <span class="nv">$x</span> <span class="k">--&gt;</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$x</span><span class="o">*</span><span class="nv">$x</span> <span class="p">}</span>
<span class="k">my</span> <span class="nb">Junction</span> <span class="nv">$j</span> <span class="o">=</span> <span class="mi">11</span> <span class="o">|</span> <span class="mi">22</span><span class="p">;</span> 
<span class="k">my</span> <span class="nb">Junction</span> <span class="nv">$rj</span> <span class="o">=</span> <span class="nf">sq</span><span class="p">(</span><span class="nv">$j</span><span class="p">);</span> 
</code></pre></div><p>去语法塘后这变成了:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nb">Junction</span> <span class="nv">$j</span> <span class="o">=</span> <span class="n">any_</span> <span class="o">[</span><span class="mi">11</span><span class="o">,</span><span class="mi">22</span><span class="o">]</span><span class="p">;</span>
<span class="k">my</span> <span class="nb">Junction</span> <span class="nv">$rj</span> <span class="o">=</span> <span class="nv">&amp;sq</span> ●○ <span class="nv">$j</span><span class="p">;</span>
</code></pre></div><p>类似地,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">if</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">==</span> <span class="mi">42</span><span class="p">)</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span> 
</code></pre></div><p>变成了:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">if</span> <span class="p">(</span><span class="nb">so</span> <span class="p">(</span><span class="nv">$j</span> ○<span class="o">==</span>● <span class="mi">42</span><span class="p">))</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</code></pre></div><p>和其他布尔上下文类似。</p>
<p>如果我们仔细看<a href="https://gist.github.com/wimvanderbauwhede/85fb4b88ec53a0b8149e6c05740adcf8">贪婪 Junction 文章</a>中的 pair 例子，那么将 junction 应用到一个有多个参数的函数上:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nb">Junction</span> \<span class="n">p1j</span> <span class="o">=</span> <span class="nb">pair</span> <span class="ow">R</span><span class="o">,</span><span class="err">(42</span><span class="o">^</span><span class="err">43);</span>
</code></pre></div><p>去语法塘后变为:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nb">Junction</span> \<span class="n">p1j</span> <span class="o">=</span> <span class="nv">&amp;pair</span><span class="o">.</span><span class="nb">assuming</span><span class="p">(</span><span class="ow">R</span><span class="err">)</span> ●○ <span class="n">one_</span> <span class="o">[</span><span class="mi">42</span><span class="o">,</span><span class="mi">43</span><span class="o">]</span><span class="p">;</span>
</code></pre></div><p>我们使用 <code>.assuming()</code> 是因为我们需要部分应用。不管我们是先应用非 Junction 参数还是 Junction 参数，都没有关系。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">\p1jr</span> <span class="o">=</span> <span class="p">(</span> <span class="k">sub</span> <span class="p">(</span><span class="nv">$y</span><span class="p">){</span> <span class="nv">&amp;pair</span><span class="o">.</span><span class="nb">assuming</span><span class="p">(</span><span class="o">*,</span><span class="nv">$y</span><span class="p">)</span> <span class="p">}</span> ●○ <span class="n">one_</span> <span class="o">[</span><span class="mi">42</span><span class="o">,</span><span class="mi">43</span><span class="o">]</span> <span class="p">)</span> ○● <span class="ow">R</span><span class="err">;</span>
</code></pre></div><p>最后，举一个两个参数都是 Junction 的例子。由于 <code>○○</code> 的定义，应用的顺序并不重要。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">m</span><span class="p">(</span>\<span class="nb">x</span><span class="o">,</span>\<span class="n">y</span><span class="p">){</span><span class="nb">x</span><span class="o">*</span><span class="n">y</span><span class="p">}</span>

<span class="k">my</span> <span class="nv">\p4</span> <span class="o">=</span> <span class="p">(</span> <span class="k">sub</span> <span class="p">(</span>\<span class="nb">x</span><span class="p">){</span> <span class="nv">&amp;m</span><span class="o">.</span><span class="nb">assuming</span><span class="p">(</span><span class="nb">x</span><span class="p">)</span> <span class="p">}</span> ●○ <span class="n">any_</span> <span class="o">[</span><span class="mi">11</span><span class="o">,</span><span class="mi">22</span><span class="o">]</span> <span class="p">)</span> ○○ <span class="n">all_</span> <span class="o">[</span><span class="mi">33</span><span class="o">,</span><span class="mi">44</span><span class="o">]</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">\p4r</span> <span class="o">=</span> <span class="p">(</span> <span class="k">sub</span> <span class="p">(</span>\<span class="nb">x</span><span class="p">){</span> <span class="nv">&amp;m</span><span class="o">.</span><span class="nb">assuming</span><span class="p">(</span><span class="o">*,</span><span class="nb">x</span><span class="p">)</span> <span class="p">}</span> ●○ <span class="n">all_</span> <span class="o">[</span><span class="mi">33</span><span class="o">,</span><span class="mi">44</span><span class="o">]</span> <span class="p">)</span> ○○ <span class="n">any_</span> <span class="o">[</span><span class="mi">11</span><span class="o">,</span><span class="mi">22</span><span class="o">]</span><span class="p">;</span>
</code></pre></div><h3 id="结论">结论</h3>
<p>从 Raku 的 junction 的神奇类型行为实际上是语法糖的假设出发，我使用多态代数数据类型重构了 junction 类型和它的动作，并表明 Raku 的行为作为语法糖的解释对于所提出的实现是成立的。换句话说，Raku 的 Junction 确实遵循静态类型规则。</p>
<p>原文链接: <a href="https://gist.github.com/wimvanderbauwhede/19cc1e8d04e9a477f58cfe7288a6172e">https://gist.github.com/wimvanderbauwhede/19cc1e8d04e9a477f58cfe7288a6172e</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/junction" term="junction" label="Junction" />
                            
                        
                    
                
            
        </entry>
    
</feed>
