<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.79.0">Hugo</generator><title type="html"><![CDATA[testing on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/testing/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/testing/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/testing/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/testing/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-02-08T15:20:01+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/testing/</id>
    
        
        <entry>
            <title type="html"><![CDATA[测试]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-22-testing/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-java-lambda-expressions/?utm_source=atom_feed" rel="related" type="text/html" title="Java Lambda 表达式" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-joining/?utm_source=atom_feed" rel="related" type="text/html" title="Joining" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-operators/?utm_source=atom_feed" rel="related" type="text/html" title="Operators" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-scala-api-extensions/?utm_source=atom_feed" rel="related" type="text/html" title="Scala API 扩展" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-side-outputs/?utm_source=atom_feed" rel="related" type="text/html" title="侧输出" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-22-testing/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-22T00:00:00+08:00</published>
            <updated>2020-08-22T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Testing</blockquote><h1 id="测试">测试</h1>
<p>测试是每个软件开发过程中不可缺少的一部分，因此 Apache Flink 提供的工具可以在测试金字塔的多个层次上测试你的应用程序代码。</p>
<h2 id="测试用户自定义函数">测试用户自定义函数</h2>
<p>通常，我们可以假设 Flink 在用户定义的函数之外产生正确的结果。因此，建议尽可能用单元测试来测试那些包含主要业务逻辑的类。</p>
<h3 id="单元测试无状态timeless-udfs">单元测试无状态、Timeless UDFs。</h3>
<p>例如，我们来看看下面的无状态 MapFunction。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">class</span> <span class="nc">IncrementMapFunction</span> <span class="k">extends</span> <span class="nc">MapFunction</span><span class="o">[</span><span class="kt">Long</span>, <span class="kt">Long</span><span class="o">]</span> <span class="o">{</span>

    <span class="k">override</span> <span class="k">def</span> <span class="n">map</span><span class="o">(</span><span class="n">record</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="o">{</span>
        <span class="n">record</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>通过传递合适的参数和验证输出，用你最喜欢的测试框架对这样的函数进行单元测试是非常容易的。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">class</span> <span class="nc">IncrementMapFunctionTest</span> <span class="k">extends</span> <span class="nc">FlatSpec</span> <span class="k">with</span> <span class="nc">Matchers</span> <span class="o">{</span>

    <span class="s">&#34;IncrementMapFunction&#34;</span> <span class="n">should</span> <span class="s">&#34;increment values&#34;</span> <span class="n">in</span> <span class="o">{</span>
        <span class="c1">// instantiate your function
</span><span class="c1"></span>        <span class="k">val</span> <span class="n">incrementer</span><span class="k">:</span> <span class="kt">IncrementMapFunction</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IncrementMapFunction</span><span class="o">()</span>

        <span class="c1">// call the methods that you have implemented
</span><span class="c1"></span>        <span class="n">incremeter</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="n">should</span> <span class="n">be</span> <span class="o">(</span><span class="mi">3</span><span class="o">)</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>同样，使用 org.apache.flink.util.Collector 的用户定义函数（例如 FlatMapFunction 或 ProcessFunction）可以通过提供一个模拟对象而不是真实的 Collector 来轻松测试。一个与 IncrementMapFunction 功能相同的 FlatMapFunction 可以进行如下单元测试。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">class</span> <span class="nc">IncrementFlatMapFunctionTest</span> <span class="k">extends</span> <span class="nc">FlatSpec</span> <span class="k">with</span> <span class="nc">MockFactory</span> <span class="o">{</span>

    <span class="s">&#34;IncrementFlatMapFunction&#34;</span> <span class="n">should</span> <span class="s">&#34;increment values&#34;</span> <span class="n">in</span> <span class="o">{</span>
       <span class="c1">// instantiate your function
</span><span class="c1"></span>      <span class="k">val</span> <span class="n">incrementer</span> <span class="k">:</span> <span class="kt">IncrementFlatMapFunction</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IncrementFlatMapFunction</span><span class="o">()</span>

      <span class="k">val</span> <span class="n">collector</span> <span class="k">=</span> <span class="n">mock</span><span class="o">[</span><span class="kt">Collector</span><span class="o">[</span><span class="kt">Integer</span><span class="o">]]</span>

      <span class="c1">//verify collector was called with the right output
</span><span class="c1"></span>      <span class="o">(</span><span class="n">collector</span><span class="o">.</span><span class="n">collect</span> <span class="k">_</span><span class="o">).</span><span class="n">expects</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>

      <span class="c1">// call the methods that you have implemented
</span><span class="c1"></span>      <span class="n">flattenFunction</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">collector</span><span class="o">)</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="单元测试-有状态或及时的-udf-和自定义操作符">单元测试 有状态或及时的 UDF 和自定义操作符</h3>
<p>测试一个用户定义函数的功能是比较困难的，因为它涉及到测试用户代码和 Flink 运行时之间的交互。为此，Flink 提供了一个所谓的测试线束的集合，它可以用来测试这样的用户定义函数以及自定义操作符。</p>
<ul>
<li>OneInputStreamOperatorTestHarness(用于 DataStreams 上的操作符)</li>
<li>KeyedOneInputStreamOperatorTestHarness(用于 KeyedStreams 上的操作者)</li>
<li>TwoInputStreamOperatorTestHarness (适用于两个 DataStreams 的 ConnectedStreams 操作者)</li>
<li>KeyedTwoInputStreamOperatorTestHarness (用于两个 KeyedStream 的 ConnectedStreams 上的操作员)</li>
</ul>
<p>为了使用测试套件，需要一组额外的依赖关系（测试范围）。</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.apache.flink<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>flink-test-utils_2.11<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>1.11.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.apache.flink<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>flink-runtime_2.11<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>1.11.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
  <span class="nt">&lt;classifier&gt;</span>tests<span class="nt">&lt;/classifier&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.apache.flink<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>flink-streaming-java_2.11<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>1.11.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
  <span class="nt">&lt;classifier&gt;</span>tests<span class="nt">&lt;/classifier&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div><p>现在，测试线束可以用来将记录和水印推送到你的用户定义函数或自定义运算符中，控制处理时间，最后对运算符的输出进行断言（包括侧输出）。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">class</span> <span class="nc">StatefulFlatMapFunctionTest</span> <span class="k">extends</span> <span class="nc">FlatSpec</span> <span class="k">with</span> <span class="nc">Matchers</span> <span class="k">with</span> <span class="nc">BeforeAndAfter</span> <span class="o">{</span>

  <span class="k">private</span> <span class="k">var</span> <span class="n">testHarness</span><span class="k">:</span> <span class="kt">OneInputStreamOperatorTestHarness</span><span class="o">[</span><span class="kt">Long</span>, <span class="kt">Long</span><span class="o">]</span> <span class="k">=</span> <span class="kc">null</span>
  <span class="k">private</span> <span class="k">var</span> <span class="n">statefulFlatMap</span><span class="k">:</span> <span class="kt">StatefulFlatMapFunction</span> <span class="o">=</span> <span class="kc">null</span>

  <span class="n">before</span> <span class="o">{</span>
    <span class="c1">//instantiate user-defined function
</span><span class="c1"></span>    <span class="n">statefulFlatMap</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">StatefulFlatMap</span>

    <span class="c1">// wrap user defined function into a the corresponding operator
</span><span class="c1"></span>    <span class="n">testHarness</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">OneInputStreamOperatorTestHarness</span><span class="o">[</span><span class="kt">Long</span>, <span class="kt">Long</span><span class="o">](</span><span class="k">new</span> <span class="nc">StreamFlatMap</span><span class="o">(</span><span class="n">statefulFlatMap</span><span class="o">))</span>

    <span class="c1">// optionally configured the execution environment
</span><span class="c1"></span>    <span class="n">testHarness</span><span class="o">.</span><span class="n">getExecutionConfig</span><span class="o">().</span><span class="n">setAutoWatermarkInterval</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span>

    <span class="c1">// open the test harness (will also call open() on RichFunctions)
</span><span class="c1"></span>    <span class="n">testHarness</span><span class="o">.</span><span class="n">open</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="s">&#34;StatefulFlatMap&#34;</span> <span class="n">should</span> <span class="s">&#34;do some fancy stuff with timers and state&#34;</span> <span class="n">in</span> <span class="o">{</span>


    <span class="c1">//push (timestamped) elements into the operator (and hence user defined function)
</span><span class="c1"></span>    <span class="n">testHarness</span><span class="o">.</span><span class="n">processElement</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>

    <span class="c1">//trigger event time timers by advancing the event time of the operator with a watermark
</span><span class="c1"></span>    <span class="n">testHarness</span><span class="o">.</span><span class="n">processWatermark</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>

    <span class="c1">//trigger proccesign time timers by advancing the processing time of the operator directly
</span><span class="c1"></span>    <span class="n">testHarness</span><span class="o">.</span><span class="n">setProcessingTime</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>

    <span class="c1">//retrieve list of emitted records for assertions
</span><span class="c1"></span>    <span class="n">testHarness</span><span class="o">.</span><span class="n">getOutput</span> <span class="n">should</span> <span class="n">contain</span> <span class="o">(</span><span class="mi">3</span><span class="o">)</span>

    <span class="c1">//retrieve list of records emitted to a specific side output for assertions (ProcessFunction only)
</span><span class="c1"></span>    <span class="c1">//testHarness.getSideOutput(new OutputTag[Int](&#34;invalidRecords&#34;)) should have size 0
</span><span class="c1"></span>  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>KeyedOneInputStreamOperatorTestHarness 和 KeyedTwoInputStreamOperatorTestHarness 是通过额外提供一个包括键类的 TypeInformation 的 KeySelector 来实例化的。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">class</span> <span class="nc">StatefulFlatMapTest</span> <span class="k">extends</span> <span class="nc">FlatSpec</span> <span class="k">with</span> <span class="nc">Matchers</span> <span class="k">with</span> <span class="nc">BeforeAndAfter</span> <span class="o">{</span>

  <span class="k">private</span> <span class="k">var</span> <span class="n">testHarness</span><span class="k">:</span> <span class="kt">OneInputStreamOperatorTestHarness</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Long</span>, <span class="kt">Long</span><span class="o">]</span> <span class="k">=</span> <span class="kc">null</span>
  <span class="k">private</span> <span class="k">var</span> <span class="n">statefulFlatMapFunction</span><span class="k">:</span> <span class="kt">FlattenFunction</span> <span class="o">=</span> <span class="kc">null</span>

  <span class="n">before</span> <span class="o">{</span>
    <span class="c1">//instantiate user-defined function
</span><span class="c1"></span>    <span class="n">statefulFlatMapFunction</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">StateFulFlatMap</span>

    <span class="c1">// wrap user defined function into a the corresponding operator
</span><span class="c1"></span>    <span class="n">testHarness</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">KeyedOneInputStreamOperatorTestHarness</span><span class="o">(</span><span class="k">new</span> <span class="nc">StreamFlatMap</span><span class="o">(</span><span class="n">statefulFlatMapFunction</span><span class="o">),</span><span class="k">new</span> <span class="nc">MyStringKeySelector</span><span class="o">(),</span> <span class="nc">Types</span><span class="o">.</span><span class="nc">STRING</span><span class="o">())</span>

    <span class="c1">// open the test harness (will also call open() on RichFunctions)
</span><span class="c1"></span>    <span class="n">testHarness</span><span class="o">.</span><span class="n">open</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="c1">//tests
</span><span class="c1"></span>
<span class="o">}</span>
</code></pre></div><p>在 Flink 代码库中还可以找到更多使用这些测试线束的例子，例如。</p>
<ul>
<li>org.apache.flink.streaming.runtime.operators.windowing.WindowOperatorTest 是一个很好的例子，用于测试依赖于处理或事件时间的操作员和用户定义的函数。</li>
<li>org.apache.flink.streaming.api.function.sink.filesystem.LocalStreamingFileSinkTest 展示了如何使用 AbstractStreamOperatorTestHarness 测试自定义的 sink。具体来说，它使用 AbstractStreamOperatorTestHarness.snapshot 和 AbstractStreamOperatorTestHarness.initializeState 来测试它与 Flink 的检查点机制的交互。</li>
</ul>
<p>注意: AbstractStreamOperatorTestHarness 和它的派生类目前不是公共 API 的一部分，可能会发生变化。</p>
<h3 id="单元测试-processfunction">单元测试 ProcessFunction</h3>
<p>鉴于其重要性，除了之前的测试线束可以直接用于测试 ProcessFunction 外，Flink 还提供了一个名为 ProcessFunctionTestHarnesses 的测试线束工厂，可以更方便地进行测试线束实例化。考虑到这个例子。</p>
<p>注意: 要使用这个测试线束，你还需要引入上一节中提到的依赖关系。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">class</span> <span class="nc">PassThroughProcessFunction</span> <span class="k">extends</span> <span class="nc">ProcessFunction</span><span class="o">[</span><span class="kt">Integer</span>, <span class="kt">Integer</span><span class="o">]</span> <span class="o">{</span>

    <span class="nd">@throws</span><span class="o">[</span><span class="kt">Exception</span><span class="o">]</span>
    <span class="k">override</span> <span class="k">def</span> <span class="n">processElement</span><span class="o">(</span><span class="n">value</span><span class="k">:</span> <span class="kt">Integer</span><span class="o">,</span> <span class="n">ctx</span><span class="k">:</span> <span class="kt">ProcessFunction</span><span class="o">[</span><span class="kt">Integer</span>, <span class="kt">Integer</span><span class="o">]</span><span class="k">#</span><span class="nc">Context</span><span class="o">,</span> <span class="n">out</span><span class="k">:</span> <span class="kt">Collector</span><span class="o">[</span><span class="kt">Integer</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
      <span class="n">out</span><span class="o">.</span><span class="n">collect</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>使用 ProcessFunctionTestHarnesses 对这样的函数进行单元测试是非常容易的，通过传递合适的参数并验证输出。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">class</span> <span class="nc">PassThroughProcessFunctionTest</span> <span class="k">extends</span> <span class="nc">FlatSpec</span> <span class="k">with</span> <span class="nc">Matchers</span> <span class="o">{</span>

  <span class="s">&#34;PassThroughProcessFunction&#34;</span> <span class="n">should</span> <span class="s">&#34;forward values&#34;</span> <span class="n">in</span> <span class="o">{</span>

    <span class="c1">//instantiate user-defined function
</span><span class="c1"></span>    <span class="k">val</span> <span class="n">processFunction</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PassThroughProcessFunction</span>

    <span class="c1">// wrap user defined function into a the corresponding operator
</span><span class="c1"></span>    <span class="k">val</span> <span class="n">harness</span> <span class="k">=</span> <span class="nc">ProcessFunctionTestHarnesses</span><span class="o">.</span><span class="n">forProcessFunction</span><span class="o">(</span><span class="n">processFunction</span><span class="o">)</span>

    <span class="c1">//push (timestamped) elements into the operator (and hence user defined function)
</span><span class="c1"></span>    <span class="n">harness</span><span class="o">.</span><span class="n">processElement</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>

    <span class="c1">//retrieve list of emitted records for assertions
</span><span class="c1"></span>    <span class="n">harness</span><span class="o">.</span><span class="n">extractOutputValues</span><span class="o">()</span> <span class="n">should</span> <span class="n">contain</span> <span class="o">(</span><span class="mi">1</span><span class="o">)</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>关于如何使用 ProcessFunctionTestHarnesses 来测试 ProcessFunction 的不同风味，如 KeyedProcessFunction、KeyedCoProcessFunction、BroadcastProcessFunction 等的更多例子，鼓励用户查看 ProcessFunctionTestHarnessesTest。</p>
<h2 id="测试-flink-作业">测试 Flink 作业</h2>
<h3 id="junit-规则-miniclusterwithclientresource">JUnit 规则 MiniClusterWithClientResource</h3>
<p>Apache Flink 提供了一个名为 MiniClusterWithClientResource 的 JUnit 规则，用于针对本地的、嵌入式的迷你集群测试完整的作业，名为 MiniClusterWithClientResource。</p>
<p>要使用 MiniClusterWithClientResource，需要一个额外的依赖（测试范围）。</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.apache.flink<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>flink-test-utils_2.11<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>1.11.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div><p>让我们以前面几节中同样简单的 MapFunction 为例。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">class</span> <span class="nc">IncrementMapFunction</span> <span class="k">extends</span> <span class="nc">MapFunction</span><span class="o">[</span><span class="kt">Long</span>, <span class="kt">Long</span><span class="o">]</span> <span class="o">{</span>

    <span class="k">override</span> <span class="k">def</span> <span class="n">map</span><span class="o">(</span><span class="n">record</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="o">{</span>
        <span class="n">record</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>现在可以在本地 Flink 集群中测试使用该 MapFunction 的简单管道，具体如下。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">class</span> <span class="nc">StreamingJobIntegrationTest</span> <span class="k">extends</span> <span class="nc">FlatSpec</span> <span class="k">with</span> <span class="nc">Matchers</span> <span class="k">with</span> <span class="nc">BeforeAndAfter</span> <span class="o">{</span>

  <span class="k">val</span> <span class="n">flinkCluster</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">MiniClusterWithClientResource</span><span class="o">(</span><span class="k">new</span> <span class="nc">MiniClusterResourceConfiguration</span><span class="o">.</span><span class="nc">Builder</span><span class="o">()</span>
    <span class="o">.</span><span class="n">setNumberSlotsPerTaskManager</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
    <span class="o">.</span><span class="n">setNumberTaskManagers</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
    <span class="o">.</span><span class="n">build</span><span class="o">)</span>

  <span class="n">before</span> <span class="o">{</span>
    <span class="n">flinkCluster</span><span class="o">.</span><span class="n">before</span><span class="o">()</span>
  <span class="o">}</span>

  <span class="n">after</span> <span class="o">{</span>
    <span class="n">flinkCluster</span><span class="o">.</span><span class="n">after</span><span class="o">()</span>
  <span class="o">}</span>


  <span class="s">&#34;IncrementFlatMapFunction pipeline&#34;</span> <span class="n">should</span> <span class="s">&#34;incrementValues&#34;</span> <span class="n">in</span> <span class="o">{</span>

    <span class="k">val</span> <span class="n">env</span> <span class="k">=</span> <span class="nc">StreamExecutionEnvironment</span><span class="o">.</span><span class="n">getExecutionEnvironment</span>

    <span class="c1">// configure your test environment
</span><span class="c1"></span>    <span class="n">env</span><span class="o">.</span><span class="n">setParallelism</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>

    <span class="c1">// values are collected in a static variable
</span><span class="c1"></span>    <span class="nc">CollectSink</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">clear</span><span class="o">()</span>

    <span class="c1">// create a stream of custom elements and apply transformations
</span><span class="c1"></span>    <span class="n">env</span><span class="o">.</span><span class="n">fromElements</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">21</span><span class="o">,</span> <span class="mi">22</span><span class="o">)</span>
       <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">new</span> <span class="nc">IncrementMapFunction</span><span class="o">())</span>
       <span class="o">.</span><span class="n">addSink</span><span class="o">(</span><span class="k">new</span> <span class="nc">CollectSink</span><span class="o">())</span>

    <span class="c1">// execute
</span><span class="c1"></span>    <span class="n">env</span><span class="o">.</span><span class="n">execute</span><span class="o">()</span>

    <span class="c1">// verify your results
</span><span class="c1"></span>    <span class="nc">CollectSink</span><span class="o">.</span><span class="n">values</span> <span class="n">should</span> <span class="n">contain</span> <span class="n">allOf</span> <span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">22</span><span class="o">,</span> <span class="mi">23</span><span class="o">)</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// create a testing sink
</span><span class="c1"></span><span class="k">class</span> <span class="nc">CollectSink</span> <span class="k">extends</span> <span class="nc">SinkFunction</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span> <span class="o">{</span>

  <span class="k">override</span> <span class="k">def</span> <span class="n">invoke</span><span class="o">(</span><span class="n">value</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
    <span class="n">synchronized</span> <span class="o">{</span>
      <span class="nc">CollectSink</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="k">object</span> <span class="nc">CollectSink</span> <span class="o">{</span>
    <span class="c1">// must be static
</span><span class="c1"></span>    <span class="k">val</span> <span class="n">values</span><span class="k">:</span> <span class="kt">util.List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span> <span class="k">=</span> <span class="k">new</span> <span class="n">util</span><span class="o">.</span><span class="nc">ArrayList</span><span class="o">()</span>
<span class="o">}</span>
</code></pre></div><p>关于 MiniClusterWithClientResource 的集成测试的几点说明。</p>
<ul>
<li>
<p>为了不把你的整个流水线代码从生产中复制到测试中，请在你的生产代码中使源和汇可插拔，并在你的测试中注入特殊的测试源和测试汇。</p>
</li>
<li>
<p>这里使用了 CollectSink 中的静态变量，因为 Flink 在将所有操作符分布在集群中之前，会将它们序列化。通过静态变量与本地 Flink 迷你集群实例化的运算符进行通信是解决这个问题的一种方法。另外，你可以将数据写到与你的测试汇的临时目录中的文件中。</p>
</li>
<li>
<p>如果你的作业使用事件时间计时器，你可以实现一个自定义的并行源函数来发射水印。</p>
</li>
<li>
<p>建议始终以并行度 <code>&gt;1</code> 的方式在本地测试你的流水线，以识别只有并行执行的流水线才会出现的错误。</p>
</li>
<li>
<p>优先选择 <code>@ClassRule</code> 而不是 <code>@Rule</code>，这样多个测试可以共享同一个 Flink 集群。这样做可以节省大量的时间，因为 Flink 集群的启动和关闭通常会支配实际测试的执行时间。</p>
</li>
<li>
<p>如果你的管道包含自定义状态处理，你可以通过启用检查点并在迷你集群内重新启动作业来测试其正确性。为此，你需要通过从你的管道中的（仅测试的）用户定义函数中抛出一个异常来触发失败。</p>
</li>
</ul>
<p>原文链接: <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/testing.html">https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/testing.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/flink" term="flink" label="Flink" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink" term="flink" label="Flink" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" term="flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" label="Flink 官方文档" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/datastream-api" term="datastream-api" label="DataStream API" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/testing" term="testing" label="testing" />
                            
                        
                    
                
            
        </entry>
    
</feed>
