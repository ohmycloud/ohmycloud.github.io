{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e这个代码实验室教你如何使用实现 \u003ca href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\"\u003eIterable\u003c/a\u003e类的集合-例如 \u003ca href=\"https://api.dart.dev/stable/dart-core/List-class.html\"\u003eList\u003c/a\u003e和 \u003ca href=\"https://api.dart.dev/stable/dart-core/Set-class.html\"\u003eSet\u003c/a\u003e。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。\u003c/p\u003e\n\u003cp\u003e使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\u003c/p\u003e\n\u003cp\u003e要想从这个 codelab 中获得最大的收获，你应该具备基本的 \u003ca href=\"https://dart.dev/samples\"\u003eDart 语法知识\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e本课程包括以下内容。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如何读取一个 Iterable 的元素。\u003c/li\u003e\n\u003cli\u003e如何检查一个 Iterable 的元素是否满足一个条件。\u003c/li\u003e\n\u003cli\u003e如何过滤一个 Iterable 的内容。\u003c/li\u003e\n\u003cli\u003e如何将一个 Iterable 的内容映射到不同的值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e估计完成这个代码实验所需的时间: 60分钟。\u003c/p\u003e\n\u003ch2 id=\"什么是集合\"\u003e什么是集合?\u003c/h2\u003e\n\u003cp\u003e集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。\u003c/p\u003e\n\u003cp\u003e集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://api.dart.dev/stable/dart-core/List-class.html\"\u003eList\u003c/a\u003e: 用来通过索引读取元素。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://api.dart.dev/stable/dart-core/Set-class.html\"\u003eSet\u003c/a\u003e: 用于包含只能出现一次的元素。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://api.dart.dev/stable/dart-core/Map-class.html\"\u003eMap\u003c/a\u003e：用于通过键来读取元素。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"什么是iterable\"\u003e什么是Iterable?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eIterable\u003c/code\u003e 是一个元素的集合，它可以被依次访问。\u003c/p\u003e\n\u003cp\u003e在 Dart 中，\u003ccode\u003eIterable\u003c/code\u003e 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 \u003ccode\u003eList\u003c/code\u003e 或 \u003ccode\u003eSet\u003c/code\u003e 来创建一个新的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eList\u003c/code\u003e 和 \u003ccode\u003eSet\u003c/code\u003e 都是 \u003ccode\u003eIterable\u003c/code\u003e，所以它们和 \u003ccode\u003eIterable\u003c/code\u003e 类有相同的方法和属性。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMap\u003c/code\u003e 在内部使用不同的数据结构，这取决于它的实现。例如，\u003ca href=\"https://api.dart.dev/stable/dart-collection/HashMap-class.html\"\u003eHashMap\u003c/a\u003e 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 \u003ccode\u003eMap\u003c/code\u003e 的 \u003ccode\u003eentries\u003c/code\u003e 或 \u003ccode\u003evalues\u003c/code\u003e 属性，\u003ccode\u003eMap\u003c/code\u003e 的元素也可以作为 \u003ccode\u003eIterable\u003c/code\u003e 对象读取。\u003c/p\u003e\n\u003cp\u003e这个例子显示了一个 \u003ccode\u003eint\u003c/code\u003e 的 \u003ccode\u003eList\u003c/code\u003e，它也是一个 \u003ccode\u003eint\u003c/code\u003e 的 \u003ccode\u003eIterable\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e与 \u003ccode\u003eList\u003c/code\u003e 的区别在于，使用 \u003ccode\u003eIterable\u003c/code\u003e，你无法保证按索引读取元素的效率。\u003ccode\u003eIterable\u003c/code\u003e 与 \u003ccode\u003eList\u003c/code\u003e 相比，没有 \u003ccode\u003e[]\u003c/code\u003e 操作符。\u003c/p\u003e\n\u003cp\u003e例如，考虑以下代码，这是\u003cstrong\u003e无效的\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你用 \u003ccode\u003e[]\u003c/code\u003e 读取元素，编译器会告诉你 \u003ccode\u003e'[]'\u003c/code\u003e 这个运算符没有为 \u003ccode\u003eIterable\u003c/code\u003e 类定义，这意味着在这种情况下你不能使用 \u003ccode\u003e[index]\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e你可以用 \u003ccode\u003eelementAt()\u003c/code\u003e 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eelementAt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e继续下一节，了解更多关于如何访问 \u003ccode\u003eIterable\u003c/code\u003e 的元素。\u003c/p\u003e\n\u003ch2 id=\"读取元素\"\u003e读取元素\u003c/h2\u003e\n\u003cp\u003e你可以使用 \u003ccode\u003efor-in\u003c/code\u003e 循环，依次读取一个迭代元素。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-for-in-循环\"\u003e例子: 使用 for-in 循环\u003c/h3\u003e\n\u003cp\u003e下面的例子展示了如何使用 \u003ccode\u003efor-in\u003c/code\u003e 循环读取元素。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eSalad\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ePopcorn\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eToast\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在幕后，\u003ccode\u003efor-in\u003c/code\u003e 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 \u003ccode\u003efor-in\u003c/code\u003e 更容易阅读和理解，而且不容易出错。\u003c/p\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIterable\u003c/strong\u003e: Dart \u003ca href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\"\u003eIterable\u003c/a\u003e 类。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIterator\u003c/strong\u003e: \u003ccode\u003efor-in\u003c/code\u003e 用来从一个 Iterable 对象中读取元素的对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efor-in\u003c/code\u003e 循环: 从一个 Iterable 对象中依次读取元素的简单方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"例子使用第一个和最后一个元素\"\u003e例子：使用第一个和最后一个元素\u003c/h3\u003e\n\u003cp\u003e在某些情况下，你只想访问一个 \u003ccode\u003eIterable\u003c/code\u003e 的第一个或最后一个元素。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003eIterable\u003c/code\u003e 类中，你不能直接访问元素，所以你不能调用 \u003ccode\u003eiterable[0]\u003c/code\u003e 来访问第一个元素。相反，你可以使用 \u003ccode\u003efirst\u003c/code\u003e，它可以获取第一个元素。\u003c/p\u003e\n\u003cp\u003e另外，使用 Iterable 类，你不能使用操作符 \u003ccode\u003e[]\u003c/code\u003e 来访问最后一个元素，但是你可以使用 \u003ccode\u003elast\u003c/code\u003e 属性。\u003c/p\u003e\n\u003cp\u003e因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 \u003ccode\u003elast\u003c/code\u003e 可能会很慢。在一个空的 \u003ccode\u003eIterable\u003c/code\u003e 上使用 \u003ccode\u003efirst\u003c/code\u003e 或 \u003ccode\u003elast\u003c/code\u003e 会导致一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIterable\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eSalad\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ePopcorn\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eToast\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eThe first element is \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eThe last element is \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"这个代码实验室教你如何使用实现 Iterable类的集合-例如 List和 Set。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。\n使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\n要想从这个 codelab 中获得最大的收获，你应该具备基本的 Dart 语法知识。\n本课程包括以下内容。\n 如何读取一个 Iterable 的元素。 如何检查一个 Iterable 的元素是否满足一个条件。 如何过滤一个 Iterable 的内容。 如何将一个 Iterable 的内容映射到不同的值。  估计完成这个代码实验所需的时间: 60分钟。\n什么是集合? 集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。\n集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:\n List: 用来通过索引读取元素。 Set: 用于包含只能出现一次的元素。 Map：用于通过键来读取元素。  什么是Iterable? Iterable 是一个元素的集合，它可以被依次访问。\n在 Dart 中，Iterable 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 List 或 Set 来创建一个新的 Iterable。\nList 和 Set 都是 Iterable，所以它们和 Iterable 类有相同的方法和属性。\nMap 在内部使用不同的数据结构，这取决于它的实现。例如，HashMap 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 Map 的 entries 或 values 属性，Map 的元素也可以作为 Iterable 对象读取。\n这个例子显示了一个 int 的 List，它也是一个 int 的 Iterable:\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; 与 List 的区别在于，使用 Iterable，你无法保证按索引读取元素的效率。Iterable 与 List 相比，没有 [] 操作符。\n例如，考虑以下代码，这是无效的:\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; int value = iterable[1]; 如果你用 [] 读取元素，编译器会告诉你 '[]' 这个运算符没有为 Iterable 类定义，这意味着在这种情况下你不能使用 [index]。\n你可以用 elementAt() 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; int value = iterable.elementAt(1); 继续下一节，了解更多关于如何访问 Iterable 的元素。\n读取元素 你可以使用 for-in 循环，依次读取一个迭代元素。\n例子: 使用 for-in 循环 下面的例子展示了如何使用 for-in 循环读取元素。\nvoid main() { var iterable = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; for (var element in iterable) { print(element); } } 在幕后，for-in 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 for-in 更容易阅读和理解，而且不容易出错。\n关键术语:\n Iterable: Dart Iterable 类。 Iterator: for-in 用来从一个 Iterable 对象中读取元素的对象。 for-in 循环: 从一个 Iterable 对象中依次读取元素的简单方法。  例子：使用第一个和最后一个元素 在某些情况下，你只想访问一个 Iterable 的第一个或最后一个元素。\n在 Iterable 类中，你不能直接访问元素，所以你不能调用 iterable[0] 来访问第一个元素。相反，你可以使用 first，它可以获取第一个元素。\n另外，使用 Iterable 类，你不能使用操作符 [] 来访问最后一个元素，但是你可以使用 last 属性。\n因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 last 可能会很慢。在一个空的 Iterable 上使用 first 或 last 会导致一个 StateError。\nvoid main() { Iterable iterable = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; print(\u0026#39;The first element is ${iterable.first}\u0026#39;); print(\u0026#39;The last element is ${iterable.last}\u0026#39;); } "},"name":"Dart 可迭代集合","published":"2020-06-25T00:00:00+08:00","summary":"Dart可迭代集合。","type":"entry","url":"https://ohmyweekly.github.io/notes/dart-iterable-collections/"}],"name":"iterable","type":"feed","url":"https://ohmyweekly.github.io/tags/iterable/"}