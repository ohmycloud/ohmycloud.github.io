<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.92.0">Hugo</generator><title type="html"><![CDATA[but on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/but/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/but/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/but/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/but/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2022-01-23T16:05:49+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/but/</id>
    
        
        <entry>
            <title type="html"><![CDATA[扩展 Raku 中的类型]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-11-25-there-is-more-than-one-way-to-extend-it/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2015-11-25-there-is-more-than-one-way-to-extend-it/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+00:00</published>
            <updated>2021-07-11T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>There Is More Than One Way to Extend It</blockquote><h1 id="扩展-raku-中的类型">扩展 Raku 中的类型</h1>
<h2 id="使用继承">使用继承</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">BetterInt</span> <span class="k">is</span> <span class="nb">Int</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">even</span> <span class="p">{</span> <span class="nb">self</span> <span class="nv">%%</span> <span class="mi">2</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="n">BetterInt</span> <span class="nv">$x</span> <span class="o">.=</span> <span class="nb">new</span><span class="o">:</span> <span class="mi">42</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$x</span><span class="o">.</span><span class="nf">even</span><span class="p">;</span>

<span class="nv">$x</span> <span class="o">.=</span> <span class="nb">new</span><span class="o">:</span> <span class="mi">71</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$x</span><span class="o">.</span><span class="nf">even</span><span class="p">;</span>

<span class="nb">say</span> <span class="nv">$x</span> <span class="o">+</span> <span class="mi">42</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># True</span>
<span class="c1"># False</span>
<span class="c1"># 113</span>
</code></pre></div><p><code>my BetterInt $x</code> 约束 <code>$x</code> 只能包含  <em>BetterInt</em> 或它的子类这种类型的对象。<code>.= new: 42</code> 等价于 <code>= BetterInt.new: 42</code>。
下面的子例程期望接收一个 <em>Int</em> 型的参数，但是你给它传递一个 <em>BetterInt</em> 类型的参数它会很高兴:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">foo</span><span class="p">(</span><span class="nb">Int</span> <span class="nv">$x</span><span class="p">)</span> <span class="p">{</span> <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">\$x is </span><span class="nv">$x</span><span class="p">&#34;}</span>

<span class="k">my</span> <span class="n">BetterInt</span> <span class="nv">$x</span> <span class="o">.=</span> <span class="nb">new</span><span class="o">:</span> <span class="mi">42</span><span class="p">;</span>
<span class="n">foo</span> <span class="nv">$x</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># $x is 42</span>
</code></pre></div><h2 id="but-but-but">But&hellip; But&hellip; But&hellip;</h2>
<p>另外一个选择是掺合进一个角色(role)。<em>but</em> 中缀操作符创建对象的一份拷贝并为该对象添加一个方法:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$x</span> <span class="o">=</span> <span class="mi">42</span> <span class="k">but</span> <span class="k">role</span> <span class="p">{</span> <span class="k">method</span> <span class="nf">even</span> <span class="p">{</span> <span class="nb">self</span> <span class="nv">%%</span> <span class="mi">2</span> <span class="p">}</span> <span class="p">};</span>
<span class="nb">say</span> <span class="nv">$x</span><span class="o">.</span><span class="nf">even</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># True</span>
</code></pre></div><p>当然角色不一定是内联的。这儿有另外一个例子使用了一个预定义的角色并且还展示了我们的对象确实被拷贝了一份：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="nc">Better</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">better</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">Yes, I am better</span><span class="p">&#34;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
    <span class="k">has</span> <span class="nv">$.attr</span> <span class="k">is</span> <span class="k">rw</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$original</span> <span class="o">=</span> <span class="n">Foo</span><span class="o">.</span><span class="nb">new</span><span class="o">:</span> <span class="p">:</span><span class="s">attr</span><span class="p">&lt;</span><span class="s">original</span><span class="p">&gt;;</span>
<span class="k">my</span> <span class="nv">$copy</span>     <span class="o">=</span> <span class="nv">$original</span> <span class="k">but</span> <span class="nc">Better</span><span class="p">;</span>
<span class="nv">$copy</span><span class="o">.</span><span class="nf">attr</span>   <span class="o">=</span> <span class="p">&#39;</span><span class="s1">copy</span><span class="p">&#39;;</span>

<span class="nb">say</span> <span class="nv">$original</span><span class="o">.</span><span class="nf">attr</span><span class="p">;</span>  <span class="c1"># still &#39;original&#39;</span>
<span class="nb">say</span> <span class="nv">$copy</span><span class="o">.</span><span class="nf">attr</span><span class="p">;</span>      <span class="c1"># this one is &#39;copy&#39;</span>

<span class="nb">say</span> <span class="nv">$copy</span><span class="o">.</span><span class="nf">better</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$original</span><span class="o">.</span><span class="nf">better</span><span class="p">;</span> <span class="c1"># fatal error: can&#39;t find method</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># original</span>
<span class="c1"># copy</span>
<span class="c1"># Yes, I am better</span>
<span class="c1"># Method &#39;better&#39; not found for invocant of class &#39;Foo&#39;</span>
<span class="c1">#   in block &lt;unit&gt; at test.p6 line 18</span>
</code></pre></div><p>这看起来挺不错的，但是对于我们原来的目标来说，这个方法还是相当弱的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$x</span> <span class="o">=</span> <span class="mi">42</span> <span class="k">but</span> <span class="k">role</span> <span class="p">{</span> <span class="k">method</span> <span class="nf">even</span> <span class="p">{</span> <span class="nb">self</span> <span class="nv">%%</span> <span class="mi">2</span> <span class="p">}</span> <span class="p">};</span>
<span class="nb">say</span> <span class="nv">$x</span><span class="o">.</span><span class="nf">even</span><span class="p">;</span> <span class="c1"># True</span>
<span class="nv">$x</span> <span class="o">=</span> <span class="mi">72</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$x</span><span class="o">.</span><span class="nf">even</span><span class="p">;</span> <span class="c1"># No such method!</span>
</code></pre></div><p>那个角色被混合进我们容器里面存储的对象中了；所以一旦我们在容器中放进了一个新的值，或高级点的东西，那么 <em>.even</em> 方法就不见了，除非我们再次把那个角色混合进来。</p>
<h2 id="子例程">子例程</h2>
<p>你知道你可以把子例程当做方法用嘛？ 你接收那个对象作为子例程的第一个位置参数并且你甚至能继续使用链式方法调用，但是不能把那些链子分解成多行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">even</span> <span class="p">{</span> <span class="nv">$^a</span> <span class="nv">%%</span> <span class="mi">2</span> <span class="p">};</span>
<span class="nb">say</span> <span class="mi">42</span><span class="o">.&amp;</span><span class="nf">even</span><span class="o">.</span><span class="nb">uc</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># TRUE</span>
</code></pre></div><p>这确实是为核心类型添加额外功能的一种得体方式。我们的子例程定义中的 <code>$^a</code> 引用第一个参数（我们在调用的那个对象）并且整个子例程也可以被写为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="p">(</span><span class="nv">$x</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$x</span> <span class="nv">%%</span> <span class="mi">2</span> <span class="p">}</span>
</code></pre></div><h2 id="飞龙在天">飞龙在天</h2>
<p>不管<a href="http://shop.oreilly.com/product/9780596517748.do">Javaccript 的那些人们怎么跟你说</a>, 然而扩充原生类型是危险的。因为你正影响程序的所有部分。甚至看不到你的扩充的模块也受到影响。</p>
<p>现在我有权告诉你，我跟你说过，你工作的核电厂融化了，让我们看看一些代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="c1"># Foo.pm6</span>
<span class="k">unit</span> <span class="k">module</span> <span class="nn">Foo</span><span class="p">;</span>

<span class="k">sub</span> <span class="n">fob</span> <span class="k">is</span> <span class="k">export</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="mi">42</span><span class="o">.</span><span class="nf">even</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># Bar.pm6</span>
<span class="k">unit</span> <span class="k">module</span> <span class="nn">Bar</span><span class="p">;</span>

<span class="k">use</span> <span class="nb">MONKEY-TYPING</span><span class="p">;</span>

<span class="k">augment</span> <span class="k">class</span> <span class="nb">Int</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">even</span> <span class="p">{</span> <span class="nb">self</span> <span class="nv">%%</span> <span class="mi">2</span> <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># test.p6</span>
<span class="k">use</span> <span class="nn">Foo</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Bar</span><span class="p">;</span>

<span class="nb">say</span> <span class="mi">72</span><span class="o">.</span><span class="nf">even</span><span class="p">;</span>
<span class="n">fob</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># True</span>
<span class="c1"># True</span>
</code></pre></div><p>所有的行为都发生在 <em>Bar.pm6</em> 中。首先，我们写了一行 <em>use MONKEY-TYPING</em> 声明，它告诉我们正在做一些危险的行为。然后我们在类 <strong>class Int</strong> 的前面使用了 <em>augment</em> 关键字以扩充这个已经存在的类。我们的扩充添加了一个叫 <em>even</em> 的方法以告诉我们那个 Int 是否是偶数。</p>
<p>所有的整数都可以使用 <em>even</em> 方法了，这虽然达到了我们的要求但是有点危险。</p>
<h2 id="我邪恶了">我邪恶了</h2>
<p>我们来扩充 <a href="http://docs.raku.org/type/Cool">Cool 类型</a>以涵盖所有的西文排版行长单位：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">use</span> <span class="nb">MONKEY-TYPING</span><span class="p">;</span>

<span class="k">augment</span> <span class="k">class</span> <span class="nb">Cool</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">even</span> <span class="p">{</span> <span class="nb">self</span> <span class="nv">%%</span> <span class="mi">2</span> <span class="p">}</span>
<span class="p">}</span>

<span class="o">.</span><span class="nb">say</span> <span class="k">for</span> <span class="mi">72</span><span class="o">.</span><span class="nf">even</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">72</span><span class="p">&#39;</span><span class="o">.</span><span class="nf">even</span><span class="o">,</span> <span class="no">pi</span><span class="o">.</span><span class="nf">even</span><span class="o">,</span> ½<span class="o">.</span><span class="nf">even</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># Method &#39;even&#39; not found for invocant of class &#39;Int&#39;</span>
<span class="c1"># in block &lt;unit&gt; at test.p6 line 8</span>
</code></pre></div><p>糟糕，程序奔溃了！原因是在我们扩充 <strong>Cool</strong> 类型的时候，派生自 <strong>Cool</strong> 的所有类型已经成型了(composed)。所以为了让它能工作，我们必须使用 <code>.^compose</code> 元对象协议方法来重新构成它们：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">use</span> <span class="nb">MONKEY-TYPING</span><span class="p">;</span>

<span class="k">augment</span> <span class="k">class</span> <span class="nb">Cool</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">even</span> <span class="p">{</span> <span class="nb">self</span> <span class="nv">%%</span> <span class="mi">2</span> <span class="p">}</span>
<span class="p">}</span>

<span class="o">.^</span><span class="nb">compose</span> <span class="k">for</span> <span class="nb">Int</span><span class="o">,</span> <span class="nb">Num</span><span class="o">,</span> <span class="nb">Rat</span><span class="o">,</span> <span class="nb">Str</span><span class="o">,</span> <span class="nb">IntStr</span><span class="o">,</span> <span class="nb">NumStr</span><span class="o">,</span> <span class="nb">RatStr</span><span class="p">;</span>

<span class="o">.</span><span class="nb">say</span> <span class="k">for</span> <span class="mi">72</span><span class="o">.</span><span class="nf">even</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">72</span><span class="p">&#39;</span><span class="o">.</span><span class="nf">even</span><span class="o">,</span> <span class="no">pi</span><span class="o">.</span><span class="nf">even</span><span class="o">,</span> ½<span class="o">.</span><span class="nf">even</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># True</span>
<span class="c1"># True</span>
<span class="c1"># False</span>
<span class="c1"># False</span>
</code></pre></div><p>它现在能工作了！Int, Num, Rat, Str, IntStr, NumStr, RatStr 类型拥有了 <code>.even</code> 方法(注意：这些不是继承自 Cool 的仅有的类型)! 这既邪恶又让人吃惊。</p>
<h2 id="结论">结论</h2>
<p>当扩充 Raku 的核心类型或其它任意类的功能时，你有几种选择。</p>
<ul>
<li>使用 <strong>is Class</strong> 子类</li>
<li>使用 <strong>but Role</strong> 混合一个角色</li>
<li>使用 <code>$objec.&amp;sub</code> 调用子例程作为方法使用</li>
<li>使用  augment（注意安全）</li>
</ul>
<p><a href="http://blogs.perl.org/users/zoffix_znet/2016/04/extra-typical-perl-6.html">http://blogs.perl.org/users/zoffix_znet/2016/04/extra-typical-perl-6.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/but" term="but" label="but" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/compose" term="compose" label="compose" />
                            
                        
                    
                
            
        </entry>
    
</feed>
