<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    ffmpeg on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/tags/ffmpeg/</link>
        <description>Recent content  in ffmpeg
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Sat, 04 Jul 2020 23:22:28 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/tags/ffmpeg/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>FFmpeg</title>
                <link>https://ohmyweekly.github.io/notes/ffmpeg/</link>
                
                
                <description>&lt;blockquote&gt;FFmpeg&lt;/blockquote&gt;&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;global_options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;input_file_options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; -i input_url&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; ... &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;output_file_options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; output_url&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;描述&#34;&gt;描述&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ffmpeg.org/ffmpeg.html&#34;&gt;&lt;code&gt;ffmpeg&lt;/code&gt;&lt;/a&gt; 是一款非常快速的视频和音频转换器，它还可以从实时音频/视频源中抓取。它还可以在任意采样率之间进行转换，并通过高质量的多相滤波器在飞行中调整视频大小。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 从任意数量的输入&amp;quot;文件&amp;rdquo;（可以是常规文件、管道、网络流、抓取设备等）中读取，由 &lt;code&gt;-i&lt;/code&gt; 选项指定，并写入任意数量的输出&amp;quot;文件&amp;rdquo;，由一个普通的输出 url 指定。在命令行中找到的任何不能被解释为选项的东西都被认为是一个输出 url。&lt;/p&gt;
&lt;p&gt;原则上，每个输入或输出 url 可以包含任意数量的不同类型的流（视频/音频/字幕/附件/数据）。允许的流的数量和/或类型可能受到容器格式的限制。选择哪些输入的流将进入哪些输出，可以自动完成，也可以使用 &lt;code&gt;-map&lt;/code&gt; 选项完成（请参见流选择章节）。&lt;/p&gt;
&lt;p&gt;要在选项中引用输入文件，您必须使用它们的索引（基于 &lt;code&gt;0&lt;/code&gt;）。例如，第一个输入文件是 &lt;code&gt;0&lt;/code&gt;，第二个是 &lt;code&gt;1&lt;/code&gt;，等等。同样，一个文件中的流也用它们的索引来表示。例如，&lt;code&gt;2:3&lt;/code&gt; 指的是第三个输入文件中的第四个流。也请参见流指定符一章。&lt;/p&gt;
&lt;p&gt;一般来说，选项会应用到下一个指定的文件。因此，顺序是很重要的，您可以在命令行中多次出现同一个选项。每次出现都会被应用到下一个输入或输出文件。这条规则的例外是全局选项（例如 verbosity level），应该先指定。&lt;/p&gt;
&lt;p&gt;不要混合输入和输出文件-首先指定所有输入文件，然后再指定所有输出文件。也不要混合属于不同文件的选项。所有选项只适用于下一个输入或输出文件，并在文件之间被重置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要将输出文件的视频比特率设置为 64 kbit/s:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.avi -b:v 64k -bufsize 64k output.avi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;要强制输出文件的帧率为24帧/秒:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.avi -r &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; output.avi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;强制输入文件的帧率（仅对原始格式有效）为1帧/秒，输出文件的帧率为24帧/秒:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -r &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -i input.m2v -r &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; output.avi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原始输入文件可能需要格式选项。&lt;/p&gt;
&lt;h2 id=&#34;详情描述&#34;&gt;详情描述&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 中每个输出的转码过程可以用下面的图来描述:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _______              ______________
|       |            |              |
| input |  demuxer   | encoded data |   decoder
| file  | ---------&amp;gt; | packets      | -----+
|_______|            |______________|      |
                                           v
                                       _________
                                      |         |
                                      | decoded |
                                      | frames  |
                                      |_________|
 ________             ______________       |
|        |           |              |      |
| output | &amp;lt;-------- | encoded data | &amp;lt;----+
| file   |   muxer   | packets      |   encoder
|________|           |______________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 调用 libavformat 库（包含 demuxers）来读取输入文件，并从其中获取包含编码数据的数据包。当有多个输入文件时，&lt;code&gt;ffmpeg&lt;/code&gt; 试图通过跟踪任何活动输入流上的最低时间戳来保持它们的同步。&lt;/p&gt;
&lt;p&gt;编码后的数据包会被传递给解码器（除非为流选择了 streamcopy，详见下文）。解码器产生未压缩的帧（原始视频/PCM音频/&amp;hellip;），这些帧可以通过过滤进一步处理（见下一节）。过滤后，这些帧被传给编码器，编码器对它们进行编码并输出编码数据包。最后，这些帧被传给 muxer，muxer 将编码后的数据包写入输出文件。&lt;/p&gt;
&lt;h2 id=&#34;滤波&#34;&gt;滤波&lt;/h2&gt;
&lt;p&gt;在编码之前，&lt;code&gt;ffmpeg&lt;/code&gt; 可以使用 libavfilter 库中的过滤器处理原始音频和视频帧。&lt;code&gt;ffmpeg&lt;/code&gt; 区分了两种类型的滤波图：简单和复杂。&lt;/p&gt;
&lt;h3 id=&#34;简单的滤波图&#34;&gt;简单的滤波图&lt;/h3&gt;
&lt;p&gt;简单的滤波图是指那些只有一个输入和输出的滤波图，两者类型相同。在上图中，它们可以通过简单地在解码和编码之间插入一个额外的步骤来表示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _________                        ______________
|         |                      |              |
| decoded |                      | encoded data |
| frames  |\                   _ | packets      |
|_________| \                  /||______________|
             \   __________   /
  simple     _\||          | /  encoder
  filtergraph   | filtered |/
                | frames   |
                |__________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单的滤波图是用 per-stream &lt;code&gt;-filter&lt;/code&gt; 选项配置的（视频和音频分别用 &lt;code&gt;-vf&lt;/code&gt; 和 &lt;code&gt;-af&lt;/code&gt; 别名）。例如，一个简单的视频滤波图可以是这样的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _______        _____________        _______        ________
|       |      |             |      |       |      |        |
| input | ---&amp;gt; | deinterlace | ---&amp;gt; | scale | ---&amp;gt; | output |
|_______|      |_____________|      |_______|      |________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，有些滤镜会改变帧的属性，但不会改变帧的内容。例如，上面例子中的 &lt;code&gt;fps&lt;/code&gt; 过滤器改变了帧数，但没有触及帧内容。另一个例子是 &lt;code&gt;setpts&lt;/code&gt; 过滤器，它只设置了时间戳，而在其他方面没有改变帧的内容。&lt;/p&gt;
&lt;h3 id=&#34;复杂的滤波图&#34;&gt;复杂的滤波图&lt;/h3&gt;
&lt;p&gt;复杂的滤波图是那些不能简单地描述为应用于一个流的线性处理链的图。例如，当图形有一个以上的输入和/或输出时，或者当输出流类型与输入不同时，就会出现这种情况。它们可以用下图来表示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _________
|         |
| input 0 |\                    __________
|_________| \                  |          |
             \   _________    /| output 0 |
              \ |         |  / |__________|
 _________     \| complex | /
|         |     |         |/
| input 1 |----&amp;gt;| filter  |\
|_________|     |         | \   __________
               /| graph   |  \ |          |
              / |         |   \| output 1 |
 _________   /  |_________|    |__________|
|         | /
| input 2 |/
|_________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复杂的滤波图是用 &lt;code&gt;-filter_complex&lt;/code&gt; 选项配置的。注意这个选项是全局性的，因为复杂的滤波图，就其本质而言，不能明确地与一个单一的流或文件相关联。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-lavfi&lt;/code&gt; 选项相当于 &lt;code&gt;-filter_complex&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;一个简单的例子是 &lt;code&gt;overlay&lt;/code&gt; 滤波器，它有两个视频输入和一个视频输出，其中一个视频叠加在另一个视频上。它的音频对应的是 &lt;code&gt;amix&lt;/code&gt; 滤波器。&lt;/p&gt;
&lt;h2 id=&#34;流复制&#34;&gt;流复制&lt;/h2&gt;
&lt;p&gt;流复制是通过向 &lt;code&gt;-codec&lt;/code&gt; 选项提供 &lt;code&gt;copy&lt;/code&gt; 参数来选择的模式，它使 &lt;code&gt;ffmpeg&lt;/code&gt; 省略了对指定流的解码和编码步骤，因此它只做解复用(demuxing)和混叠(muxing)。它对于改变容器格式或修改容器级元数据非常有用。上面的图，在这种情况下，会简化成这样:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _______              ______________            ________
|       |            |              |          |        |
| input |  demuxer   | encoded data |  muxer   | output |
| file  | ---------&amp;gt; | packets      | -------&amp;gt; | file   |
|_______|            |______________|          |________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于不需要解码或编码，所以速度非常快，而且没有质量损失。但是，由于很多因素的影响，在某些情况下可能无法工作。应用过滤器显然也是不可能的，因为过滤器是在未压缩的数据上工作的。&lt;/p&gt;
&lt;h2 id=&#34;流选择&#34;&gt;流选择&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 提供了 &lt;code&gt;-map&lt;/code&gt; 选项来手动控制每个输出文件的流选择。用户可以跳过 &lt;code&gt;-map&lt;/code&gt; 选项，让 &lt;code&gt;ffmpeg&lt;/code&gt; 执行自动流选择，如下所述。&lt;code&gt;-vn / -an / -sn / -dn&lt;/code&gt; 选项可以分别用来跳过视频、音频、字幕和数据流，无论是手动映射还是自动选择，但那些复杂的滤波图输出的流除外。&lt;/p&gt;
&lt;h3 id=&#34;描述-1&#34;&gt;描述：&lt;/h3&gt;
&lt;p&gt;下面的小节描述了涉及到流选择的各种规则。接下来的例子将展示这些规则是如何在实践中应用的。&lt;/p&gt;
&lt;p&gt;虽然我们尽力准确地反映了程序的行为，但 FFmpeg 仍在不断地开发中，代码可能会在写这篇文章的时候有所改变。&lt;/p&gt;
&lt;h4 id=&#34;自动选择流&#34;&gt;自动选择流&lt;/h4&gt;
&lt;p&gt;在没有任何特定输出文件的映射选项的情况下，&lt;code&gt;ffmpeg&lt;/code&gt; 会检查输出格式，以检查哪些类型的流可以被包含在其中，即视频、音频和/或字幕。对于每一种可接受的流类型，&lt;code&gt;ffmpeg&lt;/code&gt; 将从所有输入中选择一个可用的流。&lt;/p&gt;
&lt;p&gt;它将根据以下标准选择该流:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于视频，它是最高分辨率的流,&lt;/li&gt;
&lt;li&gt;对于音频来说，它是拥有最多通道的流,&lt;/li&gt;
&lt;li&gt;对于字幕，它是第一个找到的字幕流，但有一个注意事项。输出格式的默认字幕编码器可以是基于文本的，也可以是基于图像的，而且只会选择相同类型的字幕流。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在几个相同类型的流速率相同的情况下，会选择指数最低的流。&lt;/p&gt;
&lt;p&gt;数据流或附件流不会被自动选择，只能使用 &lt;code&gt;-map&lt;/code&gt; 来包含。&lt;/p&gt;
&lt;h4 id=&#34;手动选择流&#34;&gt;手动选择流&lt;/h4&gt;
&lt;p&gt;当使用 &lt;code&gt;-map&lt;/code&gt; 时，只有用户映射的流才会被包含在该输出文件中，下面描述的滤波图输出可能是一个例外。&lt;/p&gt;
&lt;h4 id=&#34;复杂的滤波图-1&#34;&gt;复杂的滤波图&lt;/h4&gt;
&lt;p&gt;如果有任何复杂的滤波图输出流带有未标记的填补(pad)，它们将被添加到第一个输出文件中。如果流类型不被输出格式支持，这将导致一个致命的错误。在没有 &lt;code&gt;map&lt;/code&gt; 选项的情况下，包含这些流会导致自动选择流的类型被跳过。如果存在 &lt;code&gt;map&lt;/code&gt; 选项，这些滤波图流会被包含在映射流之外。&lt;/p&gt;
&lt;p&gt;带有标签填补的复杂滤波图输出流必须被映射一次，而且是精确地映射一次。&lt;/p&gt;
&lt;h4 id=&#34;流处理&#34;&gt;流处理&lt;/h4&gt;
&lt;p&gt;流处理是独立于流选择的，下面描述的字幕除外。流处理是通过针对特定输出文件中的流的 &lt;code&gt;-codec&lt;/code&gt; 选项来设置的。特别是，编解码器选项是在流选择过程之后由 &lt;code&gt;ffmpeg&lt;/code&gt; 应用的，因此不会影响后者。如果没有为某个流类型指定 &lt;code&gt;-codec&lt;/code&gt; 选项，&lt;code&gt;ffmpeg&lt;/code&gt; 将选择输出文件 muxer 注册的默认编码器。&lt;/p&gt;
&lt;p&gt;字幕存在一个例外。&lt;code&gt;ffmpeg&lt;/code&gt; 不会验证指定的编码器是否可以转换所选的流，也不会验证转换后的流是否可以在输出格式中接受。这通常也适用于：当用户手动设置编码器时，流选择过程不能检查编码后的流是否能被混入输出文件中。如果不能，&lt;code&gt;ffmpeg&lt;/code&gt; 将中止，所有的输出文件将无法被处理。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;下面的例子说明了 &lt;code&gt;ffmpeg&lt;/code&gt; 流选择方法的行为、怪癖和限制。&lt;/p&gt;
&lt;p&gt;它们假设以下三个输入文件:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;input file &#39;A.avi&#39;
      stream 0: video 640x360
      stream 1: audio 2 channels

input file &#39;B.mp4&#39;
      stream 0: video 1920x1080
      stream 1: audio 2 channels
      stream 2: subtitles (text)
      stream 3: audio 5.1 channels
      stream 4: subtitles (text)

input file &#39;C.mkv&#39;
      stream 0: video 1280x720
      stream 1: audio 2 channels
      stream 2: subtitles (image)
&lt;/code&gt;&lt;/pre&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/ffmpeg">ffmpeg</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/ffmpeg">ffmpeg</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/tiktok">tiktok</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/ffmpeg/</guid>
                <pubDate>Sat, 04 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>使用 FFmpeg 提取抖音短视频中的音乐</title>
                <link>https://ohmyweekly.github.io/notes/ffmpeg-notes/</link>
                
                
                <description>&lt;blockquote&gt;Use FFmpeg to extract music in TikTok&lt;/blockquote&gt;&lt;p&gt;最近看抖音短视频有很多好听的歌想转成 mp3 格式, 使用 &lt;a href=&#34;https://ffmpeg.org/ffmpeg.html&#34;&gt;FFmpeg&lt;/a&gt; 来搞定:&lt;/p&gt;
&lt;h2 id=&#34;从视频中采集音频httpsstackoverflowcomquestions9913032how-can-i-extract-audio-from-video-with-ffmpeg2741382427413824&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/9913032/how-can-i-extract-audio-from-video-with-ffmpeg/27413824#27413824&#34;&gt;从视频中采集音频&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.mp4 -f mp3 -vn output.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.mp4 -q:a &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -map a output.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;去除音频中的静音httpsstackoverflowcomquestions25697596using-ffmpeg-with-silencedetect-to-remove-audio-silence2941197329411973&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/25697596/using-ffmpeg-with-silencedetect-to-remove-audio-silence/29411973#29411973&#34;&gt;去除音频中的静音&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.mp3 -af &lt;span class=&#34;nv&#34;&gt;silenceremove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1:0:-50dB output.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;给视频添加字幕httpsenwikipediaorgwikilist_of_iso_639-2_codes&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-2_codes&#34;&gt;给视频添加字幕&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.mp4 -i SRT文件 -c copy -c:s mov_text -metadata:s:s:0  &lt;span class=&#34;nv&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;language code&amp;gt; output.mp4 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;移除超过1秒的静止画面httpsstackoverflowcomquestions40966394how-to-simply-remove-duplicate-frames-from-a-video-using-ffmpeg4097778640977786&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/40966394/how-to-simply-remove-duplicate-frames-from-a-video-using-ffmpeg/40977786#40977786&#34;&gt;移除超过1秒的静止画面&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i in.mp4 -vf
&lt;span class=&#34;s2&#34;&gt;&amp;#34;select=&amp;#39;if(gt(scene,0.01),st(1,t),lte(t-ld(1),1))&amp;#39;,setpts=N/FRAME_RATE/TB&amp;#34;&lt;/span&gt;
trimmed.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;将图片和音频合成视频&#34;&gt;将图片和音频合成视频&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -loop &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -i &lt;span class=&#34;nv&#34;&gt;$image&lt;/span&gt; -i &lt;span class=&#34;nv&#34;&gt;$audio_file&lt;/span&gt; -q:v &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -c:a copy  -shortest &lt;span class=&#34;nv&#34;&gt;$video_file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;将多个视频合并成一个&#34;&gt;将多个视频合并成一个&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -safe &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -f concat -i &lt;span class=&#34;nv&#34;&gt;$list_file&lt;/span&gt; -c:v libx264 &lt;span class=&#34;nv&#34;&gt;$final&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;list file 的格式是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;file &#39;./data_1.ts&#39;
file &#39;./data_2.ts&#39;
file &#39;./data_3.ts&#39;
&lt;/code&gt;&lt;/pre&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/ffmpeg">ffmpeg</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/ffmpeg">ffmpeg</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/tiktok">tiktok</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/ffmpeg-notes/</guid>
                <pubDate>Sat, 04 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
    </channel>
</rss>


