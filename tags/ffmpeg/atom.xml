<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[ffmpeg on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/ffmpeg/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/ffmpeg/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/ffmpeg/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/ffmpeg/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-11T22:08:29+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/ffmpeg/</id>
    
        
        <entry>
            <title type="html"><![CDATA[FFmpeg]]></title>
            <link href="https://ohmyweekly.github.io/notes/ffmpeg/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/ffmpeg-notes/?utm_source=atom_feed" rel="related" type="text/html" title="使用 FFmpeg 提取抖音短视频中的音乐" />
            
                <id>https://ohmyweekly.github.io/notes/ffmpeg/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-07-04T00:00:00+08:00</published>
            <updated>2020-07-04T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>FFmpeg</blockquote><h2 id="概要">概要</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ffmpeg <span class="o">[</span>global_options<span class="o">]</span> <span class="o">{[</span>input_file_options<span class="o">]</span> -i input_url<span class="o">}</span> ... <span class="o">{[</span>output_file_options<span class="o">]</span> output_url<span class="o">}</span> ...
</code></pre></div><h2 id="描述">描述</h2>
<p><a href="https://ffmpeg.org/ffmpeg.html"><code>ffmpeg</code></a> 是一款非常快速的视频和音频转换器，它还可以从实时音频/视频源中抓取。它还可以在任意采样率之间进行转换，并通过高质量的多相滤波器在飞行中调整视频大小。</p>
<p><code>ffmpeg</code> 从任意数量的输入&quot;文件&quot;（可以是常规文件、管道、网络流、抓取设备等）中读取，由 <code>-i</code> 选项指定，并写入任意数量的输出&quot;文件&quot;，由一个普通的输出 url 指定。在命令行中找到的任何不能被解释为选项的东西都被认为是一个输出 url。</p>
<p>原则上，每个输入或输出 url 可以包含任意数量的不同类型的流（视频/音频/字幕/附件/数据）。允许的流的数量和/或类型可能受到容器格式的限制。选择哪些输入的流将进入哪些输出，可以自动完成，也可以使用 <code>-map</code> 选项完成（请参见流选择章节）。</p>
<p>要在选项中引用输入文件，您必须使用它们的索引（基于 <code>0</code>）。例如，第一个输入文件是 <code>0</code>，第二个是 <code>1</code>，等等。同样，一个文件中的流也用它们的索引来表示。例如，<code>2:3</code> 指的是第三个输入文件中的第四个流。也请参见流指定符一章。</p>
<p>一般来说，选项会应用到下一个指定的文件。因此，顺序是很重要的，您可以在命令行中多次出现同一个选项。每次出现都会被应用到下一个输入或输出文件。这条规则的例外是全局选项（例如 verbosity level），应该先指定。</p>
<p>不要混合输入和输出文件-首先指定所有输入文件，然后再指定所有输出文件。也不要混合属于不同文件的选项。所有选项只适用于下一个输入或输出文件，并在文件之间被重置。</p>
<ul>
<li>要将输出文件的视频比特率设置为 64 kbit/s:</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ffmpeg -i input.avi -b:v 64k -bufsize 64k output.avi
</code></pre></div><ul>
<li>要强制输出文件的帧率为24帧/秒:</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ffmpeg -i input.avi -r <span class="m">24</span> output.avi
</code></pre></div><ul>
<li>强制输入文件的帧率（仅对原始格式有效）为1帧/秒，输出文件的帧率为24帧/秒:</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ffmpeg -r <span class="m">1</span> -i input.m2v -r <span class="m">24</span> output.avi
</code></pre></div><p>原始输入文件可能需要格式选项。</p>
<h2 id="详情描述">详情描述</h2>
<p><code>ffmpeg</code> 中每个输出的转码过程可以用下面的图来描述:</p>
<pre><code> _______              ______________
|       |            |              |
| input |  demuxer   | encoded data |   decoder
| file  | ---------&gt; | packets      | -----+
|_______|            |______________|      |
                                           v
                                       _________
                                      |         |
                                      | decoded |
                                      | frames  |
                                      |_________|
 ________             ______________       |
|        |           |              |      |
| output | &lt;-------- | encoded data | &lt;----+
| file   |   muxer   | packets      |   encoder
|________|           |______________|
</code></pre><p><code>ffmpeg</code> 调用 libavformat 库（包含 demuxers）来读取输入文件，并从其中获取包含编码数据的数据包。当有多个输入文件时，<code>ffmpeg</code> 试图通过跟踪任何活动输入流上的最低时间戳来保持它们的同步。</p>
<p>编码后的数据包会被传递给解码器（除非为流选择了 streamcopy，详见下文）。解码器产生未压缩的帧（原始视频/PCM音频/&hellip;），这些帧可以通过过滤进一步处理（见下一节）。过滤后，这些帧被传给编码器，编码器对它们进行编码并输出编码数据包。最后，这些帧被传给 muxer，muxer 将编码后的数据包写入输出文件。</p>
<h2 id="滤波">滤波</h2>
<p>在编码之前，<code>ffmpeg</code> 可以使用 libavfilter 库中的过滤器处理原始音频和视频帧。<code>ffmpeg</code> 区分了两种类型的滤波图：简单和复杂。</p>
<h3 id="简单的滤波图">简单的滤波图</h3>
<p>简单的滤波图是指那些只有一个输入和输出的滤波图，两者类型相同。在上图中，它们可以通过简单地在解码和编码之间插入一个额外的步骤来表示:</p>
<pre><code> _________                        ______________
|         |                      |              |
| decoded |                      | encoded data |
| frames  |\                   _ | packets      |
|_________| \                  /||______________|
             \   __________   /
  simple     _\||          | /  encoder
  filtergraph   | filtered |/
                | frames   |
                |__________|
</code></pre><p>简单的滤波图是用 per-stream <code>-filter</code> 选项配置的（视频和音频分别用 <code>-vf</code> 和 <code>-af</code> 别名）。例如，一个简单的视频滤波图可以是这样的:</p>
<pre><code> _______        _____________        _______        ________
|       |      |             |      |       |      |        |
| input | ---&gt; | deinterlace | ---&gt; | scale | ---&gt; | output |
|_______|      |_____________|      |_______|      |________|
</code></pre><p>请注意，有些滤镜会改变帧的属性，但不会改变帧的内容。例如，上面例子中的 <code>fps</code> 过滤器改变了帧数，但没有触及帧内容。另一个例子是 <code>setpts</code> 过滤器，它只设置了时间戳，而在其他方面没有改变帧的内容。</p>
<h3 id="复杂的滤波图">复杂的滤波图</h3>
<p>复杂的滤波图是那些不能简单地描述为应用于一个流的线性处理链的图。例如，当图形有一个以上的输入和/或输出时，或者当输出流类型与输入不同时，就会出现这种情况。它们可以用下图来表示:</p>
<pre><code> _________
|         |
| input 0 |\                    __________
|_________| \                  |          |
             \   _________    /| output 0 |
              \ |         |  / |__________|
 _________     \| complex | /
|         |     |         |/
| input 1 |----&gt;| filter  |\
|_________|     |         | \   __________
               /| graph   |  \ |          |
              / |         |   \| output 1 |
 _________   /  |_________|    |__________|
|         | /
| input 2 |/
|_________|
</code></pre><p>复杂的滤波图是用 <code>-filter_complex</code> 选项配置的。注意这个选项是全局性的，因为复杂的滤波图，就其本质而言，不能明确地与一个单一的流或文件相关联。</p>
<p><code>-lavfi</code> 选项相当于 <code>-filter_complex</code>。</p>
<p>一个简单的例子是 <code>overlay</code> 滤波器，它有两个视频输入和一个视频输出，其中一个视频叠加在另一个视频上。它的音频对应的是 <code>amix</code> 滤波器。</p>
<h2 id="流复制">流复制</h2>
<p>流复制是通过向 <code>-codec</code> 选项提供 <code>copy</code> 参数来选择的模式，它使 <code>ffmpeg</code> 省略了对指定流的解码和编码步骤，因此它只做解复用(demuxing)和混叠(muxing)。它对于改变容器格式或修改容器级元数据非常有用。上面的图，在这种情况下，会简化成这样:</p>
<pre><code> _______              ______________            ________
|       |            |              |          |        |
| input |  demuxer   | encoded data |  muxer   | output |
| file  | ---------&gt; | packets      | -------&gt; | file   |
|_______|            |______________|          |________|
</code></pre><p>由于不需要解码或编码，所以速度非常快，而且没有质量损失。但是，由于很多因素的影响，在某些情况下可能无法工作。应用过滤器显然也是不可能的，因为过滤器是在未压缩的数据上工作的。</p>
<h2 id="流选择">流选择</h2>
<p><code>ffmpeg</code> 提供了 <code>-map</code> 选项来手动控制每个输出文件的流选择。用户可以跳过 <code>-map</code> 选项，让 <code>ffmpeg</code> 执行自动流选择，如下所述。<code>-vn / -an / -sn / -dn</code> 选项可以分别用来跳过视频、音频、字幕和数据流，无论是手动映射还是自动选择，但那些复杂的滤波图输出的流除外。</p>
<h3 id="描述-1">描述：</h3>
<p>下面的小节描述了涉及到流选择的各种规则。接下来的例子将展示这些规则是如何在实践中应用的。</p>
<p>虽然我们尽力准确地反映了程序的行为，但 FFmpeg 仍在不断地开发中，代码可能会在写这篇文章的时候有所改变。</p>
<h4 id="自动选择流">自动选择流</h4>
<p>在没有任何特定输出文件的映射选项的情况下，<code>ffmpeg</code> 会检查输出格式，以检查哪些类型的流可以被包含在其中，即视频、音频和/或字幕。对于每一种可接受的流类型，<code>ffmpeg</code> 将从所有输入中选择一个可用的流。</p>
<p>它将根据以下标准选择该流:</p>
<ul>
<li>对于视频，它是最高分辨率的流,</li>
<li>对于音频来说，它是拥有最多通道的流,</li>
<li>对于字幕，它是第一个找到的字幕流，但有一个注意事项。输出格式的默认字幕编码器可以是基于文本的，也可以是基于图像的，而且只会选择相同类型的字幕流。</li>
</ul>
<p>在几个相同类型的流速率相同的情况下，会选择指数最低的流。</p>
<p>数据流或附件流不会被自动选择，只能使用 <code>-map</code> 来包含。</p>
<h4 id="手动选择流">手动选择流</h4>
<p>当使用 <code>-map</code> 时，只有用户映射的流才会被包含在该输出文件中，下面描述的滤波图输出可能是一个例外。</p>
<h4 id="复杂的滤波图-1">复杂的滤波图</h4>
<p>如果有任何复杂的滤波图输出流带有未标记的填补(pad)，它们将被添加到第一个输出文件中。如果流类型不被输出格式支持，这将导致一个致命的错误。在没有 <code>map</code> 选项的情况下，包含这些流会导致自动选择流的类型被跳过。如果存在 <code>map</code> 选项，这些滤波图流会被包含在映射流之外。</p>
<p>带有标签填补的复杂滤波图输出流必须被映射一次，而且是精确地映射一次。</p>
<h4 id="流处理">流处理</h4>
<p>流处理是独立于流选择的，下面描述的字幕除外。流处理是通过针对特定输出文件中的流的 <code>-codec</code> 选项来设置的。特别是，编解码器选项是在流选择过程之后由 <code>ffmpeg</code> 应用的，因此不会影响后者。如果没有为某个流类型指定 <code>-codec</code> 选项，<code>ffmpeg</code> 将选择输出文件 muxer 注册的默认编码器。</p>
<p>字幕存在一个例外。<code>ffmpeg</code> 不会验证指定的编码器是否可以转换所选的流，也不会验证转换后的流是否可以在输出格式中接受。这通常也适用于：当用户手动设置编码器时，流选择过程不能检查编码后的流是否能被混入输出文件中。如果不能，<code>ffmpeg</code> 将中止，所有的输出文件将无法被处理。</p>
<h2 id="示例">示例</h2>
<p>下面的例子说明了 <code>ffmpeg</code> 流选择方法的行为、怪癖和限制。</p>
<p>它们假设以下三个输入文件:</p>
<pre><code>input file 'A.avi'
      stream 0: video 640x360
      stream 1: audio 2 channels

input file 'B.mp4'
      stream 0: video 1920x1080
      stream 1: audio 2 channels
      stream 2: subtitles (text)
      stream 3: audio 5.1 channels
      stream 4: subtitles (text)

input file 'C.mkv'
      stream 0: video 1280x720
      stream 1: audio 2 channels
      stream 2: subtitles (image)
</code></pre>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/ffmpeg" term="ffmpeg" label="ffmpeg" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/ffmpeg" term="ffmpeg" label="ffmpeg" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/tiktok" term="tiktok" label="tiktok" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[使用 FFmpeg 提取抖音短视频中的音乐]]></title>
            <link href="https://ohmyweekly.github.io/notes/ffmpeg-notes/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/ffmpeg/?utm_source=atom_feed" rel="related" type="text/html" title="FFmpeg" />
            
                <id>https://ohmyweekly.github.io/notes/ffmpeg-notes/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-07-04T00:00:00+08:00</published>
            <updated>2020-07-04T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Use FFmpeg to extract music in TikTok</blockquote><p>抖音短视频有很多好听的歌, 网易云音乐、QQ音乐和虾米音乐上都没有, 但是可以把视频转成 mp3 格式。 使用 <a href="https://ffmpeg.org/ffmpeg.html">FFmpeg</a> 来搞定。点击抖音上的转发按钮, 如果「保存本地」的按钮不是灰色的, 表示可以下载到手机上。下载完后, 再转发到电脑上, 下载好 ffmpeg:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">brew install ffmpeg
</code></pre></div><h2 id="从视频中采集音频httpsstackoverflowcomquestions9913032how-can-i-extract-audio-from-video-with-ffmpeg2741382427413824"><a href="https://stackoverflow.com/questions/9913032/how-can-i-extract-audio-from-video-with-ffmpeg/27413824#27413824">从视频中采集音频</a></h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ffmpeg -i input.mp4 -f mp3 -vn output.mp3
</code></pre></div><p>或</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ffmpeg -i input.mp4 -q:a <span class="m">0</span> -map a output.mp3
</code></pre></div><p>或者只截取全部音频中的一小段:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ffmpeg -ss 00:00:03 -t 0:0:14 -i alcastar.mp4 -f mp3 -vn alcastar.mp3
</code></pre></div><p>其中 <code>-ss  00:00:03</code> 用于指定要截取的音频的起始时间, 即从第三秒开始截取; <code>-t 0:0:14</code> 用于指定要截取的音频的持续时长, 即截取 14 秒的音频。<code> -i alcastar.mp4</code> 用于指定输入文件,  即下载好的视频文件; <code>-f mp3</code> 用于指定输出格式为 mp3; <code>-vn</code> 即 no vedio, 即不保留视频; 最后的 alcastar.mp3 是输出文件名。</p>
<h2 id="去除音频中的静音httpsstackoverflowcomquestions25697596using-ffmpeg-with-silencedetect-to-remove-audio-silence2941197329411973"><a href="https://stackoverflow.com/questions/25697596/using-ffmpeg-with-silencedetect-to-remove-audio-silence/29411973#29411973">去除音频中的静音</a></h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ffmpeg -i input.mp3 -af <span class="nv">silenceremove</span><span class="o">=</span>1:0:-50dB output.mp3
</code></pre></div><h2 id="给视频添加字幕httpsenwikipediaorgwikilist_of_iso_639-2_codes"><a href="https://en.wikipedia.org/wiki/List_of_ISO_639-2_codes">给视频添加字幕</a></h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ffmpeg -i input.mp4 -i SRT文件 -c copy -c:s mov_text -metadata:s:s:0  <span class="nv">language</span><span class="o">=</span>&lt;language code&gt; output.mp4 
</code></pre></div><h2 id="移除超过1秒的静止画面httpsstackoverflowcomquestions40966394how-to-simply-remove-duplicate-frames-from-a-video-using-ffmpeg4097778640977786"><a href="https://stackoverflow.com/questions/40966394/how-to-simply-remove-duplicate-frames-from-a-video-using-ffmpeg/40977786#40977786">移除超过1秒的静止画面</a></h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ffmpeg -i in.mp4 -vf
<span class="s2">&#34;select=&#39;if(gt(scene,0.01),st(1,t),lte(t-ld(1),1))&#39;,setpts=N/FRAME_RATE/TB&#34;</span>
trimmed.mp4
</code></pre></div><h2 id="将图片和音频合成视频">将图片和音频合成视频</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ffmpeg -loop <span class="m">1</span> -i <span class="nv">$image</span> -i <span class="nv">$audio_file</span> -q:v <span class="m">1</span> -c:a copy  -shortest <span class="nv">$video_file</span>
</code></pre></div><h2 id="将多个视频合并成一个">将多个视频合并成一个</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ffmpeg -safe <span class="m">0</span> -f concat -i <span class="nv">$list_file</span> -c:v libx264 <span class="nv">$final</span>
</code></pre></div><p>list file 的格式是：</p>
<pre><code>file './data_1.ts'
file './data_2.ts'
file './data_3.ts'
</code></pre>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/ffmpeg" term="ffmpeg" label="ffmpeg" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/ffmpeg" term="ffmpeg" label="ffmpeg" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/tiktok" term="tiktok" label="tiktok" />
                            
                        
                    
                
            
        </entry>
    
</feed>
