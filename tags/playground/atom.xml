<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.63.2">Hugo</generator><title type="html"><![CDATA[Playground on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/playground/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/playground/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/playground/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/playground/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2020-08-19T10:54:04+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/playground/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Flink 操作游乐场]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-17-flink-operations-playground/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-17-python-api-tutorial/?utm_source=atom_feed" rel="related" type="text/html" title="Python API 指南" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-05-connectors-in-flink/?utm_source=atom_feed" rel="related" type="text/html" title="Flink 中的 Connectors" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-17-flink-operations-playground/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-17T00:00:00+08:00</published>
            <updated>2020-08-17T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Flink Operations Playground</blockquote><h2 id="flink-操作游乐场">Flink 操作游乐场</h2>
<p>在各种环境中部署和操作 Apache Flink 的方法有很多。无论这种多样性如何，Flink 集群的基本构件保持不变，类似的操作原则也适用。</p>
<p>在这个操场上，你将学习如何管理和运行 Flink Jobs。您将看到如何部署和监控应用程序，体验 Flink 如何从 Job 故障中恢复，并执行日常操作任务，如升级和重新缩放。</p>
<h3 id="这个游乐场的解剖">这个游乐场的解剖</h3>
<p>这个游乐场由一个持久的 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-session-cluster">Flink Session Cluster</a>和一个 Kafka Cluster 组成。</p>
<p>一个 Flink Cluster 总是由一个 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-jobmanager">JobManager</a> 和一个或多个 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-taskmanager">Flink TaskManager</a> 组成。JobManager 负责处理 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-job">Job</a> 提交，监督 Job 以及资源管理。Flink TaskManager 是 worker 进程，负责执行构成 Flink Job 的实际<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#task">任务</a>。在这个游戏场中，你将从一个单一的 TaskManager 开始，但以后会扩展到更多的 TaskManager。此外，这个游乐场还带有一个专门的客户端容器，我们使用它来提交 Flink Job，并在以后执行各种操作任务。客户端容器不是 Flink Cluster 本身需要的，只是为了方便使用才包含在里面。</p>
<p>Kafka 集群由一个 Zookeeper 服务器和一个 Kafka Broker 组成。</p>
<p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/flink-docker-playground.svg" alt="img"></p>
<p>当游乐场启动时，一个名为 Flink Event Count 的 Flink Job 将被提交给 JobManager。此外，还会创建两个 Kafka 主题 <em>input</em> 和 <em>output</em>。</p>
<p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/click-event-count-example.svg" alt="img"></p>
<p>该作业从 <em>input</em> 主题中消耗点击事件(<strong>ClickEvent</strong>)，每个点击事件(<strong>ClickEvent</strong>)都有一个时间戳(<strong>timestamp</strong>)和一个页面(<strong>page</strong>)。然后按页面对事件进行分组(<strong>keyed by</strong>)，并在 15 秒的<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/windows.html">窗口</a>中进行计数。结果被写入 <em>output</em> 主题。</p>
<p>有6个不同的页面，我们在每个页面和15秒内产生1000个点击事件。因此，Flink 作业的输出应该显示每个页面和窗口有1000个浏览量。</p>
<h3 id="启动游乐场">启动游乐场</h3>
<p>游戏场环境的设置只需几步。我们将引导你完成必要的命令，并展示如何验证一切都在正确运行。</p>
<p>我们假设你的机器上安装了 <a href="https://docs.docker.com/">Docker</a>（1.12+）和 <a href="https://docs.docker.com/compose/">docker-compose</a>（2.1+）。</p>
<p>所需的配置文件可以在 <a href="https://github.com/apache/flink-playgrounds">flink-playgrounds</a> 仓库中找到。检查一下，然后对齐环境。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">git clone --branch release-1.11 https://github.com/apache/flink-playgrounds.git
<span class="nb">cd</span> flink-playgrounds/operations-playground
docker-compose build
docker-compose up -d
</code></pre></div><p>之后，你可以用以下命令检查正在运行的 Docker 容器。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose ps

                    Name                                  Command               State                   Ports                
-----------------------------------------------------------------------------------------------------------------------------
operations-playground_clickevent-generator_1   /docker-entrypoint.sh java ...   Up       6123/tcp, 8081/tcp                  
operations-playground_client_1                 /docker-entrypoint.sh flin ...   Exit <span class="m">0</span>                                       
operations-playground_jobmanager_1             /docker-entrypoint.sh jobm ...   Up       6123/tcp, 0.0.0.0:8081-&gt;8081/tcp    
operations-playground_kafka_1                  start-kafka.sh                   Up       0.0.0.0:9094-&gt;9094/tcp              
operations-playground_taskmanager_1            /docker-entrypoint.sh task ...   Up       6123/tcp, 8081/tcp                  
operations-playground_zookeeper_1              /bin/sh -c /usr/sbin/sshd  ...   Up       2181/tcp, 22/tcp, 2888/tcp, 3888/tcp
</code></pre></div><p>这表明客户端容器已经成功提交了 Flink Job（Exit 0），所有集群组件以及数据生成器都在运行（Up）。</p>
<p>您可以通过调用来停止游乐场环境。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose down -v
</code></pre></div><h3 id="进入游乐场">进入游乐场</h3>
<p>在这个游乐场中，有很多东西你可以尝试和检查。在下面的两节中，我们将向您展示如何与 Flink 集群进行交互，并展示 Flink 的一些关键功能。</p>
<h4 id="flink-webui">Flink WebUI</h4>
<p>观察你的 Flink 集群最自然的出发点是在 <a href="http://localhost:8081/">http://localhost:8081</a> 下暴露的 WebUI。如果一切顺利，你会看到集群最初由一个任务管理器组成，并执行一个名为 Click Event Count 的 Job。</p>
<p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/playground-webui.png" alt="img"></p>
<p>Flink WebUI 包含了很多关于 Flink 集群和它的工作的有用和有趣的信息（JobGraph, Metrics, Checkpointing Statistics, TaskManager Status, &hellip;）。</p>
<h4 id="日志">日志</h4>
<h5 id="jobmanager">JobManager</h5>
<p>可以通过 <code>docker-compose</code> 对 JobManager 日志进行跟踪。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose logs -f jobmanager
</code></pre></div><p>在初始启动后，你应该主要看到每一个检查点完成的日志信息。</p>
<h5 id="taskmanager">TaskManager</h5>
<p>TaskManager 的日志也可以用同样的方式进行 tail。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose logs -f taskmanager
</code></pre></div><p>在初始启动后，你应该主要看到每个检查点完成的日志信息。</p>
<h4 id="flink-cli">Flink CLI</h4>
<p>Flink CLI 可以在客户端容器中使用。例如，要打印 Flink CLI 的帮助信息，你可以运行以下命令</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose run --no-deps client flink --help
</code></pre></div><h4 id="flink-rest-api">Flink REST API</h4>
<p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/rest_api.html#api">Flink REST API</a> 通过主机上的 localhost:8081 或客户端容器中的 jobmanager:8081 暴露出来，例如，要列出所有当前正在运行的作业，你可以运行:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">curl localhost:8081/jobs
</code></pre></div><h4 id="kafka-topics">Kafka Topics</h4>
<p>你可以通过运行以下命令来查看写入 Kafka 主题的记录</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">//input topic <span class="o">(</span><span class="m">1000</span> records/s<span class="o">)</span>
docker-compose <span class="nb">exec</span> kafka kafka-console-consumer.sh <span class="se">\
</span><span class="se"></span>  --bootstrap-server localhost:9092 --topic input

//output topic <span class="o">(</span><span class="m">24</span> records/min<span class="o">)</span>
docker-compose <span class="nb">exec</span> kafka kafka-console-consumer.sh <span class="se">\
</span><span class="se"></span>  --bootstrap-server localhost:9092 --topic output
</code></pre></div><h4 id="time-to-play">Time to Play!</h4>
<p>现在你已经学会了如何与 Flink 和 Docker 容器进行交互，让我们来看看一些常见的操作任务，你可以在我们的游乐场上尝试一下。所有这些任务都是相互独立的，即你可以以任何顺序执行它们。大多数任务可以通过 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#flink-cli">CLI</a> 和 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#flink-rest-api">REST API</a> 来执行。</p>
<h5 id="列出正在运行的-job">列出正在运行的 Job</h5>
<ul>
<li>CLI</li>
</ul>
<p><strong>命令</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose run --no-deps client flink list
</code></pre></div><p><strong>期望的输出</strong></p>
<pre><code>Waiting for response...
------------------ Running/Restarting Jobs -------------------
16.07.2019 16:37:55 : &lt;job-id&gt; : Click Event Count (RUNNING)
--------------------------------------------------------------
No scheduled jobs.
</code></pre><ul>
<li>REST API</li>
</ul>
<p><strong>请求</strong></p>
<pre><code>curl localhost:8081/jobs
</code></pre><p><strong>期待的响应(美化了打印)</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;jobs&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;job-id&gt;&#34;</span><span class="p">,</span>
      <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="s2">&#34;RUNNING&#34;</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div><p>JobID 在提交时被分配给作业(Job)，并且需要通过 CLI 或 REST API 对作业(Job)执行操作。</p>
<h5 id="观察故障和恢复">观察故障和恢复</h5>
<p>Flink 在(部分)失败下提供了精确的一次处理保证。在这个游乐场中，你可以观察并在一定程度上验证这种行为。</p>
<p><strong>步骤1：观察输出</strong></p>
<p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#anatomy-of-this-playground">如上所述</a>，在这个游乐场中的事件是这样生成的，每个窗口正好包含一千条记录。因此，为了验证 Flink 是否成功地从 TaskManager 故障中恢复，而没有数据丢失或重复，你可以跟踪 <em>output</em> 主题，并检查恢复后所有的窗口都存在，而且计数是正确的。</p>
<p>为此，从 <em>output</em> 主题开始读取，并让这个命令运行到恢复后（步骤3）。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose <span class="nb">exec</span> kafka kafka-console-consumer.sh <span class="se">\
</span><span class="se"></span>  --bootstrap-server localhost:9092 --topic output
</code></pre></div><p><strong>第二步：引入故障</strong></p>
<p>为了模拟部分故障，你可以杀死一个 TaskManager，在生产设置中，这可能对应于 TaskManager 进程、TaskManager 机器的丢失，或者仅仅是框架或用户代码抛出的瞬时异常（例如由于暂时不可用）。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose <span class="nb">kill</span> taskmanager
</code></pre></div><p>几秒钟后，JobManager 会注意到 TaskManager 的丢失，取消受影响的 Job，并立即重新提交它进行恢复。当 Job 被重新启动后，其任务仍处于 <strong>SCHEDULED</strong> 状态，由紫色的方块表示（见下面的截图）。</p>
<p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/playground-webui-failure.png" alt="img"></p>
<p>注意：即使作业(Job)的任务(Task)处于 <strong>SCHEDULED</strong> 状态而不是 <strong>RUNNING</strong> 状态，作业(Job)的整体状态也会显示为 <strong>RUNNING</strong>。</p>
<p>此时，Job 的任务(Task)不能从 <strong>SCHEDULED</strong> 状态转为 <strong>RUNNING</strong> 状态，因为没有资源(<strong>TaskManager</strong> 提供的 <strong>TaskSlots</strong>）来运行这些任务。在新的 TaskManager 可用之前，Job 将经历一个取消和重新提交的循环。</p>
<p>同时，数据生成器会不断地将 ClickEvents 推送到 <em>input</em> 主题中。这类似于真正的生产设置，在生产数据的同时，要处理数据的 Job 却宕机了。</p>
<p><strong>步骤3：恢复</strong></p>
<p>一旦你重新启动 TaskManager，它就会重新连接到 JobManager。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose up -d taskmanager
</code></pre></div><p>当 JobManager 被通知到新的 TaskManager 时，它将恢复中的 Job 的任务(tasks)调度到新的可用 TaskSlots。重新启动后，任务会从故障前最后一次成功的<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/fault_tolerance.html">检查点</a>恢复其状态，并切换到 RUNNING 状态。</p>
<p>Job 将快速处理来自 Kafka 的全部积压输入事件(在故障期间积累的)，并以更高的速度(&gt;24条记录/分钟)产生输出，直到到达流的头部。在输出中，你会看到所有的键(页面)都存在于所有的时间窗口中，而且每个计数都是精确的 1000。由于我们是在&quot;至少一次&quot;模式下使用 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/kafka.html#kafka-producers-and-fault-tolerance">FlinkKafkaProducer</a>，所以你有可能会看到一些重复的输出记录。</p>
<p>注意：大多数生产设置依赖于资源管理器(Kubernetes、Yarn、Mesos)来自动重启失败的进程。</p>
<h5 id="升级和重新缩放作业">升级和重新缩放作业</h5>
<p>升级 Flink 作业总是涉及两个步骤。首先，用一个<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/state/savepoints.html">保存点</a>优雅地停止 Flink Job。保存点是在一个明确定义的、全局一致的时间点(类似于检查点)上的完整应用状态的一致快照。其次，升级后的 Flink Job 从 Savepoint 开始。在这种情况下，&ldquo;升级&quot;可以意味着不同的事情，包括以下内容:</p>
<ul>
<li>配置的升级（包括作业的并行性）。</li>
<li>对 Job 的拓扑结构进行升级（增加/删除 Operator）。</li>
<li>对 Job 的用户定义的函数进行升级。</li>
</ul>
<p>在开始升级之前，你可能要开始 tailing <em>output</em> 主题，以观察在升级过程中没有数据丢失或损坏。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose <span class="nb">exec</span> kafka kafka-console-consumer.sh <span class="se">\
</span><span class="se"></span>  --bootstrap-server localhost:9092 --topic output
</code></pre></div><p><strong>第一步：停止工作</strong></p>
<p>要优雅地停止作业，您需要使用 CLI 或 REST API 的 &ldquo;stop&rdquo; 命令。为此，您需要该作业的 JobID，您可以通过<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#listing-running-jobs">列出所有正在运行的 Job</a> 或从 WebUI 中获得。有了 JobID，您就可以继续停止该作业:</p>
<ul>
<li>CLI</li>
</ul>
<p><strong>命令</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose run --no-deps client flink stop &lt;job-id&gt;
</code></pre></div><p><strong>预期的输出</strong></p>
<pre><code>Suspending job &quot;&lt;job-id&gt;&quot; with a savepoint.
Suspended job &quot;&lt;job-id&gt;&quot; with a savepoint.
</code></pre><p>Savepoint 已经被存储到 flink-conf.yaml 中配置的 state.savepoint.dir 中，它被安装在本地机器的 /tmp/flink-savepoints-directory/ 下。在下一步中，你将需要这个 Savepoint 的路径。在 REST API 的情况下，这个路径已经是响应的一部分，你将需要直接查看文件系统。</p>
<p><strong>命令</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ls -lia /tmp/flink-savepoints-directory
</code></pre></div><p><strong>预期的输出</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">total <span class="m">0</span>
  <span class="m">17</span> drwxr-xr-x   <span class="m">3</span> root root   <span class="m">60</span> <span class="m">17</span> jul 17:05 .
   <span class="m">2</span> drwxrwxrwt <span class="m">135</span> root root <span class="m">3420</span> <span class="m">17</span> jul 17:09 ..
<span class="m">1002</span> drwxr-xr-x   <span class="m">2</span> root root  <span class="m">140</span> <span class="m">17</span> jul 17:05 savepoint-&lt;short-job-id&gt;-&lt;uuid&gt;
</code></pre></div><ul>
<li>REST API</li>
</ul>
<p><strong>请求</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># triggering stop</span>
curl -X POST localhost:8081/jobs/&lt;job-id&gt;/stop -d <span class="s1">&#39;{&#34;drain&#34;: false}&#39;</span>
</code></pre></div><p><strong>预期的响应(美化了打印)</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;request-id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;trigger-id&gt;&#34;</span>
<span class="p">}</span>
</code></pre></div><p><strong>请求</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># check status of stop action and retrieve savepoint path</span>
curl localhost:8081/jobs/&lt;job-id&gt;/savepoints/&lt;trigger-id&gt;
</code></pre></div><p><strong>预期的响应(美化了打印)</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;COMPLETED&#34;</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nt">&#34;operation&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;location&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;savepoint-path&gt;&#34;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p><strong>步骤2a: 重启 Job，不做任何改变</strong></p>
<p>现在您可以从该保存点重新启动升级后的作业(Job)。为了简单起见，您可以在不做任何更改的情况下重新启动它。</p>
<ul>
<li>CLI</li>
</ul>
<p><strong>命令</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose run --no-deps client flink run -s &lt;savepoint-path&gt; <span class="se">\
</span><span class="se"></span>  -d /opt/ClickCountJob.jar <span class="se">\
</span><span class="se"></span>  --bootstrap.servers kafka:9092 --checkpointing --event-time
</code></pre></div><p><strong>预期的输出</strong></p>
<pre><code>Starting execution of program
Job has been submitted with JobID &lt;job-id&gt;
</code></pre><ul>
<li>REST API</li>
</ul>
<p><strong>请求</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># Uploading the JAR from the Client container</span>
docker-compose run --no-deps client curl -X POST -H <span class="s2">&#34;Expect:&#34;</span> <span class="se">\
</span><span class="se"></span>  -F <span class="s2">&#34;jarfile=@/opt/ClickCountJob.jar&#34;</span> http://jobmanager:8081/jars/upload
</code></pre></div><p><strong>预期的响应(美化了打印)</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;filename&#34;</span><span class="p">:</span> <span class="s2">&#34;/tmp/flink-web-&lt;uuid&gt;/flink-web-upload/&lt;jar-id&gt;&#34;</span><span class="p">,</span>
  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="s2">&#34;success&#34;</span>
<span class="p">}</span>
</code></pre></div><p><strong>请求</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># Submitting the Job</span>
curl -X POST http://localhost:8081/jars/&lt;jar-id&gt;/run <span class="se">\
</span><span class="se"></span>  -d <span class="s1">&#39;{&#34;programArgs&#34;: &#34;--bootstrap.servers kafka:9092 --checkpointing --event-time&#34;, &#34;savepointPath&#34;: &#34;&lt;savepoint-path&gt;&#34;}&#39;</span>
</code></pre></div><p><strong>预期的输出</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;jobid&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;job-id&gt;&#34;</span>
<span class="p">}</span>
</code></pre></div><p>一旦 Job 再次 RUNNING，你会在 <em>output</em> 主题中看到，当 Job 在处理中断期间积累的积压时，记录以较高的速度产生。此外，你会看到在升级过程中没有丢失任何数据：所有窗口都存在，数量正好是 1000。</p>
<p><strong>步骤2b: 用不同的并行度重新启动作业（重新缩放）</strong></p>
<p>另外，您也可以在重新提交时通过传递不同的并行性，从这个保存点重新缩放作业。</p>
<ul>
<li>CLI</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose run --no-deps client flink run -p <span class="m">3</span> -s &lt;savepoint-path&gt; <span class="se">\
</span><span class="se"></span>  -d /opt/ClickCountJob.jar <span class="se">\
</span><span class="se"></span>  --bootstrap.servers kafka:9092 --checkpointing --event-time
</code></pre></div><p><strong>预期的输出</strong></p>
<pre><code>Starting execution of program
Job has been submitted with JobID &lt;job-id&gt;
</code></pre><ul>
<li>REST API</li>
</ul>
<p><strong>请求</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># Uploading the JAR from the Client container</span>
docker-compose run --no-deps client curl -X POST -H <span class="s2">&#34;Expect:&#34;</span> <span class="se">\
</span><span class="se"></span>  -F <span class="s2">&#34;jarfile=@/opt/ClickCountJob.jar&#34;</span> http://jobmanager:8081/jars/upload
</code></pre></div><p><strong>预期的响应(美化了打印)</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;filename&#34;</span><span class="p">:</span> <span class="s2">&#34;/tmp/flink-web-&lt;uuid&gt;/flink-web-upload/&lt;jar-id&gt;&#34;</span><span class="p">,</span>
  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="s2">&#34;success&#34;</span>
<span class="p">}</span>
</code></pre></div><p><strong>请求</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># Submitting the Job</span>
curl -X POST http://localhost:8081/jars/&lt;jar-id&gt;/run <span class="se">\
</span><span class="se"></span>  -d <span class="s1">&#39;{&#34;parallelism&#34;: 3, &#34;programArgs&#34;: &#34;--bootstrap.servers kafka:9092 --checkpointing --event-time&#34;, &#34;savepointPath&#34;: &#34;&lt;savepoint-path&gt;&#34;}&#39;</span>
</code></pre></div><p><strong>预期的响应(美化了打印)</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;jobid&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;job-id&gt;&#34;</span>
<span class="p">}</span>
</code></pre></div><p>现在，作业(Job)已经被重新提交，但它不会启动，因为没有足够的 TaskSlots 在增加的并行度下执行它（2个可用，需要3个）。使用:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose scale <span class="nv">taskmanager</span><span class="o">=</span><span class="m">2</span>
</code></pre></div><p>你可以在 Flink 集群中添加一个带有两个 TaskSlots 的第二个 TaskManager，它将自动注册到 JobManager 中。添加 TaskManager 后不久，该任务(Job)应该再次开始运行。</p>
<p>一旦 Job 再次 &ldquo;RUNNING&rdquo;，你会在 <em>output</em> Topic 中看到在重新缩放过程中没有丢失数据：所有的窗口都存在，计数正好是 1000。</p>
<h5 id="查询作业job的指标">查询作业(Job)的指标</h5>
<p>JobManager 通过其 REST API 公开系统和用户<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/metrics.html">指标</a>。</p>
<p>端点取决于这些指标的范围。可以通过 <code>jobs/&lt;job-id&gt;/metrics</code> 来列出一个作业的范围内的度量。指标的实际值可以通过 get query 参数进行查询。</p>
<p><strong>请求</strong></p>
<pre><code class="language-shells" data-lang="shells">curl &quot;localhost:8081/jobs/&lt;jod-id&gt;/metrics?get=lastCheckpointSize&quot;
</code></pre><p><strong>预期的响应(美化了打印; 没有占位符)</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span>
  <span class="p">{</span>
    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;lastCheckpointSize&#34;</span><span class="p">,</span>
    <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;9378&#34;</span>
  <span class="p">}</span>
<span class="p">]</span>
</code></pre></div><p>REST API 不仅可以用来查询指标，还可以检索运行中的作业状态的详细信息。</p>
<p><strong>请求</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># find the vertex-id of the vertex of interest</span>
curl localhost:8081/jobs/&lt;jod-id&gt;
</code></pre></div><p><strong>预期的响应(美化了打印)</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;jid&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;job-id&gt;&#34;</span><span class="p">,</span>
  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Click Event Count&#34;</span><span class="p">,</span>
  <span class="nt">&#34;isStoppable&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="nt">&#34;state&#34;</span><span class="p">:</span> <span class="s2">&#34;RUNNING&#34;</span><span class="p">,</span>
  <span class="nt">&#34;start-time&#34;</span><span class="p">:</span> <span class="mi">1564467066026</span><span class="p">,</span>
  <span class="nt">&#34;end-time&#34;</span><span class="p">:</span> <span class="mi">-1</span><span class="p">,</span>
  <span class="nt">&#34;duration&#34;</span><span class="p">:</span> <span class="mi">374793</span><span class="p">,</span>
  <span class="nt">&#34;now&#34;</span><span class="p">:</span> <span class="mi">1564467440819</span><span class="p">,</span>
  <span class="nt">&#34;timestamps&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;CREATED&#34;</span><span class="p">:</span> <span class="mi">1564467066026</span><span class="p">,</span>
    <span class="nt">&#34;FINISHED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;SUSPENDED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;FAILING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;CANCELLING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;CANCELED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;RECONCILING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;RUNNING&#34;</span><span class="p">:</span> <span class="mi">1564467066126</span><span class="p">,</span>
    <span class="nt">&#34;FAILED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;RESTARTING&#34;</span><span class="p">:</span> <span class="mi">0</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nt">&#34;vertices&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;vertex-id&gt;&#34;</span><span class="p">,</span>
      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;ClickEvent Source&#34;</span><span class="p">,</span>
      <span class="nt">&#34;parallelism&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="s2">&#34;RUNNING&#34;</span><span class="p">,</span>
      <span class="nt">&#34;start-time&#34;</span><span class="p">:</span> <span class="mi">1564467066423</span><span class="p">,</span>
      <span class="nt">&#34;end-time&#34;</span><span class="p">:</span> <span class="mi">-1</span><span class="p">,</span>
      <span class="nt">&#34;duration&#34;</span><span class="p">:</span> <span class="mi">374396</span><span class="p">,</span>
      <span class="nt">&#34;tasks&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;CREATED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;FINISHED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;DEPLOYING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;RUNNING&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nt">&#34;CANCELING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;FAILED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;CANCELED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;RECONCILING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;SCHEDULED&#34;</span><span class="p">:</span> <span class="mi">0</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nt">&#34;metrics&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;read-bytes&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;read-bytes-complete&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nt">&#34;write-bytes&#34;</span><span class="p">:</span> <span class="mi">5033461</span><span class="p">,</span>
        <span class="nt">&#34;write-bytes-complete&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nt">&#34;read-records&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;read-records-complete&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nt">&#34;write-records&#34;</span><span class="p">:</span> <span class="mi">166351</span><span class="p">,</span>
        <span class="nt">&#34;write-records-complete&#34;</span><span class="p">:</span> <span class="kc">true</span>
      <span class="p">}</span>
    <span class="p">}</span><span class="p">,</span>
    <span class="p">{</span>
      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;vertex-id&gt;&#34;</span><span class="p">,</span>
      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Timestamps/Watermarks&#34;</span><span class="p">,</span>
      <span class="nt">&#34;parallelism&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="s2">&#34;RUNNING&#34;</span><span class="p">,</span>
      <span class="nt">&#34;start-time&#34;</span><span class="p">:</span> <span class="mi">1564467066441</span><span class="p">,</span>
      <span class="nt">&#34;end-time&#34;</span><span class="p">:</span> <span class="mi">-1</span><span class="p">,</span>
      <span class="nt">&#34;duration&#34;</span><span class="p">:</span> <span class="mi">374378</span><span class="p">,</span>
      <span class="nt">&#34;tasks&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;CREATED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;FINISHED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;DEPLOYING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;RUNNING&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nt">&#34;CANCELING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;FAILED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;CANCELED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;RECONCILING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;SCHEDULED&#34;</span><span class="p">:</span> <span class="mi">0</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nt">&#34;metrics&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;read-bytes&#34;</span><span class="p">:</span> <span class="mi">5066280</span><span class="p">,</span>
        <span class="nt">&#34;read-bytes-complete&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nt">&#34;write-bytes&#34;</span><span class="p">:</span> <span class="mi">5033496</span><span class="p">,</span>
        <span class="nt">&#34;write-bytes-complete&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nt">&#34;read-records&#34;</span><span class="p">:</span> <span class="mi">166349</span><span class="p">,</span>
        <span class="nt">&#34;read-records-complete&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nt">&#34;write-records&#34;</span><span class="p">:</span> <span class="mi">166349</span><span class="p">,</span>
        <span class="nt">&#34;write-records-complete&#34;</span><span class="p">:</span> <span class="kc">true</span>
      <span class="p">}</span>
    <span class="p">}</span><span class="p">,</span>
    <span class="p">{</span>
      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;vertex-id&gt;&#34;</span><span class="p">,</span>
      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;ClickEvent Counter&#34;</span><span class="p">,</span>
      <span class="nt">&#34;parallelism&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="s2">&#34;RUNNING&#34;</span><span class="p">,</span>
      <span class="nt">&#34;start-time&#34;</span><span class="p">:</span> <span class="mi">1564467066469</span><span class="p">,</span>
      <span class="nt">&#34;end-time&#34;</span><span class="p">:</span> <span class="mi">-1</span><span class="p">,</span>
      <span class="nt">&#34;duration&#34;</span><span class="p">:</span> <span class="mi">374350</span><span class="p">,</span>
      <span class="nt">&#34;tasks&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;CREATED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;FINISHED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;DEPLOYING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;RUNNING&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nt">&#34;CANCELING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;FAILED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;CANCELED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;RECONCILING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;SCHEDULED&#34;</span><span class="p">:</span> <span class="mi">0</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nt">&#34;metrics&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;read-bytes&#34;</span><span class="p">:</span> <span class="mi">5085332</span><span class="p">,</span>
        <span class="nt">&#34;read-bytes-complete&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nt">&#34;write-bytes&#34;</span><span class="p">:</span> <span class="mi">316</span><span class="p">,</span>
        <span class="nt">&#34;write-bytes-complete&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nt">&#34;read-records&#34;</span><span class="p">:</span> <span class="mi">166305</span><span class="p">,</span>
        <span class="nt">&#34;read-records-complete&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nt">&#34;write-records&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
        <span class="nt">&#34;write-records-complete&#34;</span><span class="p">:</span> <span class="kc">true</span>
      <span class="p">}</span>
    <span class="p">}</span><span class="p">,</span>
    <span class="p">{</span>
      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;vertex-id&gt;&#34;</span><span class="p">,</span>
      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;ClickEventStatistics Sink&#34;</span><span class="p">,</span>
      <span class="nt">&#34;parallelism&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="s2">&#34;RUNNING&#34;</span><span class="p">,</span>
      <span class="nt">&#34;start-time&#34;</span><span class="p">:</span> <span class="mi">1564467066476</span><span class="p">,</span>
      <span class="nt">&#34;end-time&#34;</span><span class="p">:</span> <span class="mi">-1</span><span class="p">,</span>
      <span class="nt">&#34;duration&#34;</span><span class="p">:</span> <span class="mi">374343</span><span class="p">,</span>
      <span class="nt">&#34;tasks&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;CREATED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;FINISHED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;DEPLOYING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;RUNNING&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nt">&#34;CANCELING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;FAILED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;CANCELED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;RECONCILING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;SCHEDULED&#34;</span><span class="p">:</span> <span class="mi">0</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nt">&#34;metrics&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;read-bytes&#34;</span><span class="p">:</span> <span class="mi">20668</span><span class="p">,</span>
        <span class="nt">&#34;read-bytes-complete&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nt">&#34;write-bytes&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;write-bytes-complete&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nt">&#34;read-records&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
        <span class="nt">&#34;read-records-complete&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nt">&#34;write-records&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;write-records-complete&#34;</span><span class="p">:</span> <span class="kc">true</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">]</span><span class="p">,</span>
  <span class="nt">&#34;status-counts&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;CREATED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;FINISHED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;DEPLOYING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;RUNNING&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&#34;CANCELING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;FAILED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;CANCELED&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;RECONCILING&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;SCHEDULED&#34;</span><span class="p">:</span> <span class="mi">0</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nt">&#34;plan&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;jid&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;job-id&gt;&#34;</span><span class="p">,</span>
    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Click Event Count&#34;</span><span class="p">,</span>
    <span class="nt">&#34;nodes&#34;</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;vertex-id&gt;&#34;</span><span class="p">,</span>
        <span class="nt">&#34;parallelism&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nt">&#34;operator&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="nt">&#34;operator_strategy&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;ClickEventStatistics Sink&#34;</span><span class="p">,</span>
        <span class="nt">&#34;inputs&#34;</span><span class="p">:</span> <span class="p">[</span>
          <span class="p">{</span>
            <span class="nt">&#34;num&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
            <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;vertex-id&gt;&#34;</span><span class="p">,</span>
            <span class="nt">&#34;ship_strategy&#34;</span><span class="p">:</span> <span class="s2">&#34;FORWARD&#34;</span><span class="p">,</span>
            <span class="nt">&#34;exchange&#34;</span><span class="p">:</span> <span class="s2">&#34;pipelined_bounded&#34;</span>
          <span class="p">}</span>
        <span class="p">]</span><span class="p">,</span>
        <span class="nt">&#34;optimizer_properties&#34;</span><span class="p">:</span> <span class="p">{</span><span class="p">}</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;vertex-id&gt;&#34;</span><span class="p">,</span>
        <span class="nt">&#34;parallelism&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nt">&#34;operator&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="nt">&#34;operator_strategy&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;ClickEvent Counter&#34;</span><span class="p">,</span>
        <span class="nt">&#34;inputs&#34;</span><span class="p">:</span> <span class="p">[</span>
          <span class="p">{</span>
            <span class="nt">&#34;num&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
            <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;vertex-id&gt;&#34;</span><span class="p">,</span>
            <span class="nt">&#34;ship_strategy&#34;</span><span class="p">:</span> <span class="s2">&#34;HASH&#34;</span><span class="p">,</span>
            <span class="nt">&#34;exchange&#34;</span><span class="p">:</span> <span class="s2">&#34;pipelined_bounded&#34;</span>
          <span class="p">}</span>
        <span class="p">]</span><span class="p">,</span>
        <span class="nt">&#34;optimizer_properties&#34;</span><span class="p">:</span> <span class="p">{</span><span class="p">}</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;vertex-id&gt;&#34;</span><span class="p">,</span>
        <span class="nt">&#34;parallelism&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nt">&#34;operator&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="nt">&#34;operator_strategy&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;Timestamps/Watermarks&#34;</span><span class="p">,</span>
        <span class="nt">&#34;inputs&#34;</span><span class="p">:</span> <span class="p">[</span>
          <span class="p">{</span>
            <span class="nt">&#34;num&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
            <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;vertex-id&gt;&#34;</span><span class="p">,</span>
            <span class="nt">&#34;ship_strategy&#34;</span><span class="p">:</span> <span class="s2">&#34;FORWARD&#34;</span><span class="p">,</span>
            <span class="nt">&#34;exchange&#34;</span><span class="p">:</span> <span class="s2">&#34;pipelined_bounded&#34;</span>
          <span class="p">}</span>
        <span class="p">]</span><span class="p">,</span>
        <span class="nt">&#34;optimizer_properties&#34;</span><span class="p">:</span> <span class="p">{</span><span class="p">}</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;vertex-id&gt;&#34;</span><span class="p">,</span>
        <span class="nt">&#34;parallelism&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nt">&#34;operator&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="nt">&#34;operator_strategy&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;ClickEvent Source&#34;</span><span class="p">,</span>
        <span class="nt">&#34;optimizer_properties&#34;</span><span class="p">:</span> <span class="p">{</span><span class="p">}</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>请查阅 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/rest_api.html#api">REST API 参考资料</a>，了解可能查询的完整列表，包括如何查询不同作用域的指标（如 TaskManager 指标）。</p>
<h4 id="变体">变体</h4>
<p>你可能已经注意到，Click Event Count 应用程序总是以 <code>--checkpointing</code> 和 <code>--event-time</code> 程序参数启动。通过在 docker-compose.yaml 的客户端容器的命令中省略这些，你可以改变 Job 的行为。</p>
<ul>
<li>
<p><code>--checkpointing</code> 启用了 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/fault_tolerance.html">checkpoint</a>，这是 Flink 的容错机制。如果你在没有它的情况下运行，并通过<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#observing-failure--recovery">故障和恢复</a>，你应该会看到数据实际上已经丢失了。</p>
</li>
<li>
<p><code>--event-time</code> 启用了你的 Job 的<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/event_time.html">事件时间语义</a>。当禁用时，作业将根据挂钟时间而不是 ClickEvent 的时间戳将事件分配给窗口。因此，每个窗口的事件数量将不再是精确的 1000。</p>
</li>
</ul>
<p>Click Event Count 应用程序还有另一个选项，默认情况下是关闭的，你可以启用这个选项来探索这个作业在背压下的行为。你可以在 <code>docker-compose.yaml</code> 的客户端容器的命令中添加这个选项。</p>
<ul>
<li><code>--backpressure</code> 在作业中间增加了一个额外的 operator，在偶数分钟内会造成严重的背压（例如，在10:12期间，但在10:13期间不会）。这可以通过检查各种<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/metrics.html#default-shuffle-service">网络指标</a>（如 outputQueueLength 和 outPoolUsage）和/或使用 WebUI 中的<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/back_pressure.html#monitoring-back-pressure">背压监控</a>来观察。</li>
</ul>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/programming" term="programming" label="programming" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink" term="flink" label="Flink" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/playground" term="playground" label="Playground" />
                            
                        
                    
                
            
        </entry>
    
</feed>
