<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[meta object on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/meta-object/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/meta-object/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/meta-object/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/meta-object/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-13T22:14:20+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/meta-object/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Raku 中的元对象]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-07-16-metaobject-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2015-07-16-metaobject-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Metaobject in Raku</blockquote><h1 id="自省和-raku-的对象系统">自省和 Raku 的对象系统</h1>
<p>Raku 是构建在元对象层上面的。那意味着有些对象(元对象)控制着各种面向对象结构(例如类、roles、方法、属性、枚举…)怎样去表现。</p>
<p>要感受类的元对象, 这儿有一个同样的例子出现2次: 一次一种 Raku中的普通声明, 一次通过元模型来表达:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">A</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nb">x</span><span class="p">()</span> <span class="p">{</span> <span class="nb">say</span> <span class="mi">42</span> <span class="p">}</span>
<span class="p">}</span>

<span class="n">A</span><span class="o">.</span><span class="nb">x</span><span class="p">();</span> <span class="c1"># 42</span>
</code></pre></div><p>对应于:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">constant</span> <span class="no">A</span> <span class="o">:=</span> <span class="nb">Metamodel::ClassHOW</span><span class="o">.</span><span class="nb">new_type</span><span class="p">(</span> <span class="s">name</span> <span class="o">=&gt;</span> <span class="p">&#39;</span><span class="s1">A</span><span class="p">&#39;</span> <span class="p">);</span>  <span class="c1"># class A {</span>
<span class="n">A</span><span class="o">.^</span><span class="nb">add_method</span><span class="p">(&#39;</span><span class="s1">x</span><span class="p">&#39;</span><span class="o">,</span> <span class="k">my</span> <span class="k">method</span> <span class="nb">x</span><span class="p">(</span><span class="n">A:</span><span class="p">)</span> <span class="p">{</span> <span class="nb">say</span> <span class="mi">42</span> <span class="p">});</span>             <span class="c1"># method x() .. .</span>
<span class="n">A</span><span class="o">.^</span><span class="nb">compose</span><span class="p">;</span>                                                 <span class="c1"># }</span>

<span class="n">A</span><span class="o">.</span><span class="nb">x</span><span class="p">();</span> <span class="c1"># 42</span>
</code></pre></div><p>(除了声明形式的运行在编译时, 后面这种形式不是)</p>
<p>对象后面的元对象能使用 <code>$obj.HOW</code> 获取, 这儿的 HOW 代表着 <strong>Higher Order Workings</strong>(或者 HOW the <code>*%@$</code> does this work?)。</p>
<p>这儿, 带有 <code>.^</code> 的调用是元对象的调用, 所以 <code>A.^compose</code> 是 <code>A.HOW.compose(A)</code> 的简写。调用者也被传递到参数列表中, 以使它能够支持原型类型风格的类型系统, 那儿只有一个元对象。</p>
<p>就像上面的例子展示的那样, 所有的面向对象特性对使用者都是可获得的, 而不仅仅是编译器。实际上编译器就是使用元对象的这样的调用的。</p>
<h2 id="元对象metaobjects">元对象(MetaObjects)</h2>
<p>这些是内省的宏, 类似于方法调用。</p>
<p>元对象通常以 ALLCAPS(全大写)命名, 并且避免使用你自己的带有全大写名字的方法被认为是一个好的风格。这会避免和可能出现在未来版本中的任何元对象发生冲突。注意, 如果你必须使用带有全大写名字的方法的话, 把你的这个方法名字用引号引起来来间接安全地调用:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">#| </span><span class="sd">THIS IS A CLASS FOR SHOUTING THINGS
</span><span class="sd"></span><span class="k">class</span> <span class="nc">MY-CLASSES-ARE-ALL-CAPS</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nb">WHY</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">I DON&#39;T KNOW</span><span class="p">&#34;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$c</span> <span class="o">=</span> <span class="n">MY-CLASSES-ARE-ALL-CAPS</span><span class="o">.</span><span class="nb">new</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$c</span><span class="o">.</span><span class="nb">WHY</span>      <span class="c1"># &#34;THIS IS A CLASS FOR SHOUTING THINGS&#34;? 显示这？你在逗我!</span>
<span class="nb">say</span> <span class="nv">$c</span><span class="o">.</span><span class="p">&#34;</span><span class="s2">WHY</span><span class="p">&#34;()</span>  <span class="c1"># &#34;I DON&#39;T KNOW&#34;</span>
</code></pre></div><h2 id="what">WHAT</h2>
<p>类型的类型对象。例如 <code>42.WHAT</code> 返回 <code>Int</code> 类型对象。</p>
<h2 id="which">WHICH</h2>
<p>对象的同一值。这能用于哈希和同一比较, 并且这是 <code>===</code> 中缀操作符的实现方式。</p>
<pre><code>&gt; &quot;a&quot;.WHICH
Str|a
</code></pre><h2 id="who">WHO</h2>
<p>支持对象的包</p>
<pre><code>&gt; &quot;a&quot;.WHO
Str
</code></pre><h2 id="where">WHERE</h2>
<p>对象的内存地址。注意这在移动的/紧凑的垃圾回收实现中是不稳定的。 在稳定的同一指示器中使用 <code>WHERE</code>。</p>
<h2 id="how">HOW</h2>
<p>元类对象(the metaclass object)：“Higher Order Workings”。</p>
<h2 id="why">WHY</h2>
<p>附加的 Pod 值。</p>
<h2 id="definite">DEFINITE</h2>
<p>对象有一个有效的强制表现。</p>
<p>对于实例返回 <code>True</code>, 对于类型对象返回 <code>False</code>。</p>
<pre><code>&gt; 42.DEFINITE
True
&gt; Int.DEFINITE
False
</code></pre><h2 id="var">VAR</h2>
<p>返回底层的 Scalar 对象, 如果有的话。</p>
<h2 id="元对象系统的结构">元对象系统的结构</h2>
<p>对于每个类型声明符关键字, 例如 <code>class</code>、<code>role</code> 、<code>enum</code>、<code>module</code>、<code>package</code>、<code>grammar</code> 或 <code>subset</code>, 就有一个独立的元类在 <code>Matamodel::</code> 命名空间中。(Rakudo 在 <code>Raku::Metamodel::</code> 命名空间中实现了它们, 然后把 <code>Raku::Metamodel</code> 映射到 <code>Metamodel</code>)。</p>
<p>这些元类(meta classes)中的很多都共享公共的功能。例如 roles、grammars 和 classes(类)都能包括方法和属性, 还能遵守 roles。这个共享的功能是在 roles 中实现的, 它被组合进合适的元类中。例如 <a href="http://doc.raku.org/type/Metamodel::RoleContainer">role Metamodel::RoleContainer</a>实现了类型能处理 roles 和 <code>Metamodel::ClassHOW</code> 的功能, 它是在 <code>class</code> 关键字后面的元类, 遵守了这个 role。</p>
<h2 id="bootstrapping-concernshttpdocrakuorglanguagemop___top"><a href="http://doc.raku.org/language/mop#___top">Bootstrapping concerns</a></h2>
<p>你可能想知道为什么 <code>Metamodel::ClassHOW</code> 可以是一个类, 当按照 <code>Metamodel::ClassHOW</code> 作为一个类被定义时, 或者 roles 负责 role 处理的怎么能是 roles。答案是通过魔法。</p>
<p>开玩笑啦。自举是特别实现的。Rakudo 使用语言的对象系统来实现自举, 它恰好(几乎)就是 Raku 的一个子集: NQP, Not Quite Perl。 NQP 有原始的, class-like 叫做 <code>konwhow</code> 的性质, 它用于自举它自己的类和 roles 实现。<code>konwhow</code> 建立在NQP 提供的虚拟机的原始基础上。</p>
<p>因为元对象是根据低级(low-level)类型引导的, 自省有时能返回低级(low-level)类型而非你期望的那个类型, 例如返回一个 NQP-level 的子例程而非普通的 <code>Routine</code> 对象, 或返回一个引导的属性而非<a href="http://doc.raku.org/type/Attribute">Attribute</a>。</p>
<h2 id="组合和静态推理">组合和静态推理</h2>
<p>在 Raku中, 类型是在解析时被构造的, 所以在开始, 它必须是可变的。然而, 如果所有类型一直是可变的, 那么关于类型的所有推断会在任何类型的修改时变得无效。例如父类的列表因此类型检测的结果能在那个时候改变。</p>
<p>所以为了获得这两个世界中最好的东西, 当类型从可变转为不可变时是好时机。这就叫做组合, 并且对于从句法构成上声明的类型, 它发生在类型声明被完全解析时(所以总是在闭合花括号被解析时)。</p>
<p>如果你通过元对象系统直接创建类型, 你必须要在它们身上调用 <code>.^compose</code>, 在它们变得完全起作用之前。</p>
<p>很多元类也使用组合时来计算一些诸如方法解析顺序这样的属性, 发布一个方法缓存, 和其它清扫任务。在它们被组合之后干预类型有时是可能的, 但通常是造成灾难的因素。 不要那样做。</p>
<h2 id="能力和责任">能力和责任</h2>
<p>元对象协议提供了很多常规 Raku 代码故意限制了的能力, 例如调用类中不信任你的私有方法, 窥探私有属性, 和其它通常不能完成的东西。</p>
<p>常规的 Raku 代码有很多就地的安全检测; 元模型中不是这样，它靠近底层的虚拟机, 违反和虚拟机的约定可以导致所有奇怪的行为, 而在正常代码中, 显而易见的会是 bugs。</p>
<p>所以, 在写元类型的时候要格外小心和思考。</p>
<h2 id="能力便利和陷阱">能力、便利和陷阱</h2>
<p>元对象协议被设计的强大到实现 Raku 的对象系统。这种能力间或花费了便利的代价。</p>
<p>例如, 当你写了 <code>my $x = 42</code> 并在 <code>$x</code>上调用方法时, 大部分方法会在整数 42 上起作用, 而不是在存储 42 的标量容器上。这是 Raku中设立的一块便利。元对象协议中的大部分不能提供自动忽略标量容器的便利性, 因为它们也用于实现那些标量容器。 所以, 如果你写了 <code>my $t = MyType; ... $t.^compose</code>, 那么你正组合那个 <code>$</code> 变量表明的标量, 而不是 <code>MyType</code>。</p>
<p>结果就是你需要很详尽的理解 Raku 的底层以避免陷阱, 当使用 MOP 时, 并且不能期望得到和普通 Raku 代码提供的 &ldquo;do what I mean&rdquo; 的便利。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/meta-object" term="meta-object" label="meta object" />
                            
                        
                    
                
            
        </entry>
    
</feed>
