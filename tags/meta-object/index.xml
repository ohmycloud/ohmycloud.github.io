<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    Meta Object on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/tags/meta-object/</link>
        <description>Recent content  in Meta Object
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Sat, 02 Mar 2024 15:19:33 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/tags/meta-object/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>Raku 中的元对象</title>
                <link>https://ohmyweekly.github.io/notes/2015-07-16-metaobject-in-raku/</link>
                
                
                <description>&lt;blockquote&gt;Metaobject in Raku&lt;/blockquote&gt;&lt;h1 id=&#34;自省和-raku-的对象系统&#34;&gt;自省和 Raku 的对象系统&lt;/h1&gt;
&lt;p&gt;Raku 是构建在元对象层上面的。那意味着有些对象(元对象)控制着各种面向对象结构(例如类、roles、方法、属性、枚举…)怎样去表现。&lt;/p&gt;
&lt;p&gt;要感受类的元对象, 这儿有一个同样的例子出现2次: 一次一种 Raku中的普通声明, 一次通过元模型来表达:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 42&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对应于:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;constant&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Metamodel::ClassHOW&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;new_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# class A {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.^&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;add_method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;# method x() .. .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.^&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;compose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                                                 &lt;span class=&#34;c1&#34;&gt;# }&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 42&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(除了声明形式的运行在编译时, 后面这种形式不是)&lt;/p&gt;
&lt;p&gt;对象后面的元对象能使用 &lt;code&gt;$obj.HOW&lt;/code&gt; 获取, 这儿的 HOW 代表着 &lt;strong&gt;Higher Order Workings&lt;/strong&gt;(或者 HOW the &lt;code&gt;*%@$&lt;/code&gt; does this work?)。&lt;/p&gt;
&lt;p&gt;这儿, 带有 &lt;code&gt;.^&lt;/code&gt; 的调用是元对象的调用, 所以 &lt;code&gt;A.^compose&lt;/code&gt; 是 &lt;code&gt;A.HOW.compose(A)&lt;/code&gt; 的简写。调用者也被传递到参数列表中, 以使它能够支持原型类型风格的类型系统, 那儿只有一个元对象。&lt;/p&gt;
&lt;p&gt;就像上面的例子展示的那样, 所有的面向对象特性对使用者都是可获得的, 而不仅仅是编译器。实际上编译器就是使用元对象的这样的调用的。&lt;/p&gt;
&lt;h2 id=&#34;元对象metaobjects&#34;&gt;元对象(MetaObjects)&lt;/h2&gt;
&lt;p&gt;这些是内省的宏, 类似于方法调用。&lt;/p&gt;
&lt;p&gt;元对象通常以 ALLCAPS(全大写)命名, 并且避免使用你自己的带有全大写名字的方法被认为是一个好的风格。这会避免和可能出现在未来版本中的任何元对象发生冲突。注意, 如果你必须使用带有全大写名字的方法的话, 把你的这个方法名字用引号引起来来间接安全地调用:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;#| &lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;THIS IS A CLASS FOR SHOUTING THINGS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MY-CLASSES-ARE-ALL-CAPS&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;WHY&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;I DON&amp;#39;T KNOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MY-CLASSES-ARE-ALL-CAPS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;WHY&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# &amp;#34;THIS IS A CLASS FOR SHOUTING THINGS&amp;#34;? 显示这？你在逗我!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;WHY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#34;()&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;#34;I DON&amp;#39;T KNOW&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;what&#34;&gt;WHAT&lt;/h2&gt;
&lt;p&gt;类型的类型对象。例如 &lt;code&gt;42.WHAT&lt;/code&gt; 返回 &lt;code&gt;Int&lt;/code&gt; 类型对象。&lt;/p&gt;
&lt;h2 id=&#34;which&#34;&gt;WHICH&lt;/h2&gt;
&lt;p&gt;对象的同一值。这能用于哈希和同一比较, 并且这是 &lt;code&gt;===&lt;/code&gt; 中缀操作符的实现方式。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; &amp;#34;a&amp;#34;.WHICH
Str|a
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;who&#34;&gt;WHO&lt;/h2&gt;
&lt;p&gt;支持对象的包&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; &amp;#34;a&amp;#34;.WHO
Str
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;where&#34;&gt;WHERE&lt;/h2&gt;
&lt;p&gt;对象的内存地址。注意这在移动的/紧凑的垃圾回收实现中是不稳定的。 在稳定的同一指示器中使用 &lt;code&gt;WHERE&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;HOW&lt;/h2&gt;
&lt;p&gt;元类对象(the metaclass object)：“Higher Order Workings”。&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;WHY&lt;/h2&gt;
&lt;p&gt;附加的 Pod 值。&lt;/p&gt;
&lt;h2 id=&#34;definite&#34;&gt;DEFINITE&lt;/h2&gt;
&lt;p&gt;对象有一个有效的强制表现。&lt;/p&gt;
&lt;p&gt;对于实例返回 &lt;code&gt;True&lt;/code&gt;, 对于类型对象返回 &lt;code&gt;False&lt;/code&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; 42.DEFINITE
True
&amp;gt; Int.DEFINITE
False
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;var&#34;&gt;VAR&lt;/h2&gt;
&lt;p&gt;返回底层的 Scalar 对象, 如果有的话。&lt;/p&gt;
&lt;h2 id=&#34;元对象系统的结构&#34;&gt;元对象系统的结构&lt;/h2&gt;
&lt;p&gt;对于每个类型声明符关键字, 例如 &lt;code&gt;class&lt;/code&gt;、&lt;code&gt;role&lt;/code&gt; 、&lt;code&gt;enum&lt;/code&gt;、&lt;code&gt;module&lt;/code&gt;、&lt;code&gt;package&lt;/code&gt;、&lt;code&gt;grammar&lt;/code&gt; 或 &lt;code&gt;subset&lt;/code&gt;, 就有一个独立的元类在 &lt;code&gt;Matamodel::&lt;/code&gt; 命名空间中。(Rakudo 在 &lt;code&gt;Raku::Metamodel::&lt;/code&gt; 命名空间中实现了它们, 然后把 &lt;code&gt;Raku::Metamodel&lt;/code&gt; 映射到 &lt;code&gt;Metamodel&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;这些元类(meta classes)中的很多都共享公共的功能。例如 roles、grammars 和 classes(类)都能包括方法和属性, 还能遵守 roles。这个共享的功能是在 roles 中实现的, 它被组合进合适的元类中。例如 &lt;a href=&#34;http://doc.raku.org/type/Metamodel::RoleContainer&#34;&gt;role Metamodel::RoleContainer&lt;/a&gt;实现了类型能处理 roles 和 &lt;code&gt;Metamodel::ClassHOW&lt;/code&gt; 的功能, 它是在 &lt;code&gt;class&lt;/code&gt; 关键字后面的元类, 遵守了这个 role。&lt;/p&gt;
&lt;h2 id=&#34;bootstrapping-concernshttpdocrakuorglanguagemop___top&#34;&gt;&lt;a href=&#34;http://doc.raku.org/language/mop#___top&#34;&gt;Bootstrapping concerns&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;你可能想知道为什么 &lt;code&gt;Metamodel::ClassHOW&lt;/code&gt; 可以是一个类, 当按照 &lt;code&gt;Metamodel::ClassHOW&lt;/code&gt; 作为一个类被定义时, 或者 roles 负责 role 处理的怎么能是 roles。答案是通过魔法。&lt;/p&gt;
&lt;p&gt;开玩笑啦。自举是特别实现的。Rakudo 使用语言的对象系统来实现自举, 它恰好(几乎)就是 Raku 的一个子集: NQP, Not Quite Perl。 NQP 有原始的, class-like 叫做 &lt;code&gt;konwhow&lt;/code&gt; 的性质, 它用于自举它自己的类和 roles 实现。&lt;code&gt;konwhow&lt;/code&gt; 建立在NQP 提供的虚拟机的原始基础上。&lt;/p&gt;
&lt;p&gt;因为元对象是根据低级(low-level)类型引导的, 自省有时能返回低级(low-level)类型而非你期望的那个类型, 例如返回一个 NQP-level 的子例程而非普通的 &lt;code&gt;Routine&lt;/code&gt; 对象, 或返回一个引导的属性而非&lt;a href=&#34;http://doc.raku.org/type/Attribute&#34;&gt;Attribute&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;组合和静态推理&#34;&gt;组合和静态推理&lt;/h2&gt;
&lt;p&gt;在 Raku中, 类型是在解析时被构造的, 所以在开始, 它必须是可变的。然而, 如果所有类型一直是可变的, 那么关于类型的所有推断会在任何类型的修改时变得无效。例如父类的列表因此类型检测的结果能在那个时候改变。&lt;/p&gt;
&lt;p&gt;所以为了获得这两个世界中最好的东西, 当类型从可变转为不可变时是好时机。这就叫做组合, 并且对于从句法构成上声明的类型, 它发生在类型声明被完全解析时(所以总是在闭合花括号被解析时)。&lt;/p&gt;
&lt;p&gt;如果你通过元对象系统直接创建类型, 你必须要在它们身上调用 &lt;code&gt;.^compose&lt;/code&gt;, 在它们变得完全起作用之前。&lt;/p&gt;
&lt;p&gt;很多元类也使用组合时来计算一些诸如方法解析顺序这样的属性, 发布一个方法缓存, 和其它清扫任务。在它们被组合之后干预类型有时是可能的, 但通常是造成灾难的因素。 不要那样做。&lt;/p&gt;
&lt;h2 id=&#34;能力和责任&#34;&gt;能力和责任&lt;/h2&gt;
&lt;p&gt;元对象协议提供了很多常规 Raku 代码故意限制了的能力, 例如调用类中不信任你的私有方法, 窥探私有属性, 和其它通常不能完成的东西。&lt;/p&gt;
&lt;p&gt;常规的 Raku 代码有很多就地的安全检测; 元模型中不是这样，它靠近底层的虚拟机, 违反和虚拟机的约定可以导致所有奇怪的行为, 而在正常代码中, 显而易见的会是 bugs。&lt;/p&gt;
&lt;p&gt;所以, 在写元类型的时候要格外小心和思考。&lt;/p&gt;
&lt;h2 id=&#34;能力便利和陷阱&#34;&gt;能力、便利和陷阱&lt;/h2&gt;
&lt;p&gt;元对象协议被设计的强大到实现 Raku 的对象系统。这种能力间或花费了便利的代价。&lt;/p&gt;
&lt;p&gt;例如, 当你写了 &lt;code&gt;my $x = 42&lt;/code&gt; 并在 &lt;code&gt;$x&lt;/code&gt;上调用方法时, 大部分方法会在整数 42 上起作用, 而不是在存储 42 的标量容器上。这是 Raku中设立的一块便利。元对象协议中的大部分不能提供自动忽略标量容器的便利性, 因为它们也用于实现那些标量容器。 所以, 如果你写了 &lt;code&gt;my $t = MyType; ... $t.^compose&lt;/code&gt;, 那么你正组合那个 &lt;code&gt;$&lt;/code&gt; 变量表明的标量, 而不是 &lt;code&gt;MyType&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;结果就是你需要很详尽的理解 Raku 的底层以避免陷阱, 当使用 MOP 时, 并且不能期望得到和普通 Raku 代码提供的 &amp;ldquo;do what I mean&amp;rdquo; 的便利。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/rakulang">rakulang</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/meta-object">meta object</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2015-07-16-metaobject-in-raku/</guid>
                <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
            </item>
        
    </channel>
</rss>


