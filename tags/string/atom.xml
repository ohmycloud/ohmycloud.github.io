<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.63.2">Hugo</generator><title type="html"><![CDATA[string on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/string/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/string/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/string/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/string/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2020-09-04T09:31:44+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/string/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Dart 语言速查表]]></title>
            <link href="https://ohmyweekly.github.io/notes/dart-cheatsheet-codelab/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/dart/?utm_source=atom_feed" rel="related" type="text/html" title="Dart 入门" />
                <link href="https://ohmyweekly.github.io/notes/dart-iterable-collections/?utm_source=atom_feed" rel="related" type="text/html" title="Dart 可迭代集合" />
            
                <id>https://ohmyweekly.github.io/notes/dart-cheatsheet-codelab/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-06-25T00:00:00+08:00</published>
            <updated>2020-06-25T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote><a href="https://www.dartcn.com/">Dart</a>速查表。</blockquote><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="字符串插值">字符串插值</h2>
<p>使用 <code>${expression}</code> 将表达式的值放到字符串里面。如果表达式是一个标识符, 就可以省略 <code>{}</code>。</p>
<p>下面是字符串插值的例子:</p>
<table>
<thead>
<tr>
<th align="left">字符串</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">&lsquo;${3 + 2}&rsquo;</td>
<td align="left">&lsquo;5&rsquo;</td>
</tr>
<tr>
<td align="left">&lsquo;${&ldquo;word&rdquo;.toUpperCase()}&rsquo;</td>
<td align="left">&lsquo;WORD&rsquo;</td>
</tr>
<tr>
<td align="left">&lsquo;$myObject&rsquo;</td>
<td align="left">The value of myObject.toString()</td>
</tr>
</tbody>
</table>
<h3 id="代码示例">代码示例</h3>
<p>下面的函数接收两个整数作为参数。使其返回一个包含两个整数的字符串，并以空格分隔。例如 <code>stringify(2, 3)</code> 应该返回 &lsquo;2 3&rsquo;。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">String</span> <span class="n">stringify</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s1">&#39;</span><span class="si">$</span><span class="n">x</span><span class="s1"> </span><span class="si">$</span><span class="n">y</span><span class="s1">&#39;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h2 id="null-无感知操作符">Null 无感知操作符</h2>
<p>Dart 提供了一些方便的操作符来处理可能为空的值。其中一个是 <code>??=</code> 赋值运算符，只有当一个变量当前为空时，它才会给这个变量赋值:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">int</span> <span class="n">a</span><span class="p">;</span>    <span class="c1">// a 的初始值为 null
</span><span class="c1"></span><span class="n">a</span> <span class="o">?</span><span class="o">?</span><span class="o">=</span> <span class="m">3</span><span class="p">;</span>
<span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="p">;</span> <span class="c1">// 打印 3
</span><span class="c1"></span>
<span class="n">a</span> <span class="o">?</span><span class="o">?</span><span class="o">=</span> <span class="m">5</span><span class="p">;</span>
<span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="p">;</span> <span class="c1">// 仍然打印 3
</span></code></pre></div><p>另一个 null-aware 操作符是 <code>??</code>，它返回其左边的表达式，除非该表达式的值为 null，在这种情况下，它计算并返回其右边的表达式:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">print</span><span class="p">(</span><span class="m">1</span> <span class="o">?</span><span class="o">?</span> <span class="m">3</span><span class="p">)</span><span class="p">;</span>     <span class="c1">// 打印 1
</span><span class="c1"></span><span class="n">print</span><span class="p">(</span><span class="kc">null</span> <span class="o">?</span><span class="o">?</span> <span class="m">12</span><span class="p">)</span><span class="p">;</span> <span class="c1">// 打印 12 
</span></code></pre></div><h3 id="代码示例-1">代码示例</h3>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">String</span> <span class="n">foo</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s1">a string</span><span class="s1">&#39;</span><span class="p">;</span>
<span class="kt">String</span> <span class="n">bar</span><span class="p">;</span> <span class="c1">// Unassigned objects are null by default.
</span><span class="c1"></span>
<span class="c1">// makes &#39;a string&#39; be assigned to baz.
</span><span class="c1"></span><span class="kt">String</span> <span class="n">baz</span> <span class="o">=</span> <span class="n">foo</span> <span class="o">?</span><span class="o">?</span> <span class="n">bar</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">updateSomeVars</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// makes &#39;a string&#39; be assigned to bar.
</span><span class="c1"></span>  <span class="n">bar</span> <span class="o">?</span><span class="o">?</span><span class="o">=</span> <span class="s1">&#39;</span><span class="s1">a string</span><span class="s1">&#39;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h2 id="有条件的属性访问">有条件的属性访问</h2>
<p>要保护对对象的一个可能为空的属性或方法的访问，请在点(.)前加上一个问号(?):</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">myObject</span><span class="o">?</span><span class="p">.</span><span class="n">someProperty</span>
</code></pre></div><p>上述代码等同于以下代码:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="p">(</span><span class="n">myObject</span> <span class="o">!</span><span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="o">?</span> <span class="n">myObject</span><span class="p">.</span><span class="n">someProperty</span> <span class="o">:</span> <span class="kc">null</span>
</code></pre></div><p>你可以在一个表达式中把 <code>?.</code> 的多个使用链接在一起:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">myObject</span><span class="o">?</span><span class="p">.</span><span class="n">someProperty</span><span class="o">?</span><span class="p">.</span><span class="n">someMethod</span><span class="p">(</span><span class="p">)</span>
</code></pre></div><p>如果 <code>myObject</code> 或 <code>myObject.someProperty</code> 为 null，前面的代码将返回 null(并且从不调用 <code>someMethod()</code>)。</p>
<h3 id="代码示例-2">代码示例</h3>
<p>尝试使用条件属性访问来完成下面的代码片段。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="c1">// This method should return the uppercase version of `str`
</span><span class="c1"></span><span class="c1">// or null if `str` is null.
</span><span class="c1"></span><span class="kt">String</span> <span class="n">upperCaseIt</span><span class="p">(</span><span class="kt">String</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Try conditionally accessing the `toUpperCase` method here.
</span><span class="c1"></span>  <span class="k">return</span> <span class="n">str</span><span class="o">?</span><span class="p">.</span><span class="n">toUpperCase</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h2 id="集合字面量">集合字面量</h2>
<p>Dart 内置了对列表、映射和集合的支持。你可以使用字面量创建它们:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">final</span> <span class="n">aListOfStrings</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;</span><span class="s1">one</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">two</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">three</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">;</span>
<span class="kd">final</span> <span class="n">aSetOfStrings</span>  <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;</span><span class="s1">one</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">two</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">three</span><span class="s1">&#39;</span><span class="p">}</span><span class="p">;</span>
<span class="kd">final</span> <span class="n">aMapOfStringsToInts</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">&#39;</span><span class="s1">one</span><span class="s1">&#39;</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span>
  <span class="s1">&#39;</span><span class="s1">two</span><span class="s1">&#39;</span><span class="o">:</span> <span class="m">2</span><span class="p">,</span>
  <span class="s1">&#39;</span><span class="s1">three</span><span class="s1">&#39;</span><span class="o">:</span> <span class="m">3</span><span class="p">,</span>  
<span class="p">}</span>
</code></pre></div><p>Dart 的类型推理可以为你分配类型给这些变量。在本例中，推断的类型是 <code>List&lt;String&gt;</code>、<code>Set&lt;String&gt;</code> 和 <code>Map&lt;String, int&gt;</code>。</p>
<p>或者你可以自己指定类型:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">final</span> <span class="n">aListOfInts</span> <span class="o">=</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">[</span><span class="p">]</span><span class="p">;</span>
<span class="kd">final</span> <span class="n">aSetOfInts</span>  <span class="o">=</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">{</span><span class="p">}</span><span class="p">;</span>
<span class="kd">final</span> <span class="n">aMapOfIntToDouble</span> <span class="o">=</span> <span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">double</span><span class="o">&gt;</span><span class="p">{</span><span class="p">}</span><span class="p">;</span>
</code></pre></div><p>当你用子类型的内容初始化一个列表，但仍然希望列表是 <code>List&lt;BaseType&gt;</code> 时，指定类型是很方便的:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">final</span> <span class="n">aListOfBaseType</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">BaseType</span><span class="o">&gt;</span><span class="p">[</span><span class="n">SubType</span><span class="p">(</span><span class="p">)</span><span class="p">,</span> <span class="n">SubType</span><span class="p">(</span><span class="p">)</span><span class="p">]</span><span class="p">;</span>
</code></pre></div><h3 id="代码示例-3">代码示例</h3>
<p>尝试将以下变量设置为指定的值。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="c1">// Assign this a list containing &#39;a&#39;, &#39;b&#39;, and &#39;c&#39; in that order:
</span><span class="c1"></span><span class="kd">final</span> <span class="n">aListOfStrings</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;</span><span class="s1">a</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">b</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">c</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">;</span>

<span class="c1">// Assign this a set containing 3, 4, and 5:
</span><span class="c1"></span><span class="kd">final</span> <span class="n">aSetOfInts</span> <span class="o">=</span> <span class="p">{</span><span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">}</span><span class="p">;</span>

<span class="c1">// Assign this a map of String to int so that aMapOfStringsToInts[&#39;myKey&#39;] returns 12:
</span><span class="c1"></span><span class="kd">final</span> <span class="n">aMapOfStringsToInts</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;</span><span class="s1">myKey</span><span class="s1">&#39;</span><span class="o">:</span> <span class="m">12</span><span class="p">}</span><span class="p">;</span>

<span class="c1">// Assign this an empty List&lt;double&gt;:
</span><span class="c1"></span><span class="kd">final</span> <span class="n">anEmptyListOfDouble</span> <span class="o">=</span> <span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">[</span><span class="p">]</span><span class="p">;</span>

<span class="c1">// Assign this an empty Set&lt;String&gt;:
</span><span class="c1"></span><span class="kd">final</span> <span class="n">anEmptySetOfString</span> <span class="o">=</span> <span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">{</span><span class="p">}</span><span class="p">;</span>

<span class="c1">// Assign this an empty Map of double to int:
</span><span class="c1"></span><span class="kd">final</span> <span class="n">anEmptyMapOfDoublesToInts</span> <span class="o">=</span> <span class="o">&lt;</span><span class="kt">double</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">{</span><span class="p">}</span><span class="p">;</span>
</code></pre></div><h2 id="箭头语法">箭头语法</h2>
<p>你可能在 Dart 代码中看到过 <code>=&gt;</code> 符号。这种箭头语法是一种定义函数的方式，该函数执行其右边的表达式并返回其值。</p>
<p>例如，考虑这个对 <code>List</code> 类的 <code>any()</code> 方法的调用:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">bool</span> <span class="n">hasEmpty</span> <span class="o">=</span> <span class="n">aListOfStrings</span><span class="p">.</span><span class="n">any</span><span class="p">(</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>这里有一个更简单的方法来写这个代码:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">bool</span> <span class="n">hasEmpty</span> <span class="o">=</span> <span class="n">aListOfStrings</span><span class="p">.</span><span class="n">any</span><span class="p">(</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><h3 id="代码示例-4">代码示例</h3>
<p>试着完成以下使用箭头语法的语句:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">_value1</span> <span class="o">=</span> <span class="m">2</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">_value2</span> <span class="o">=</span> <span class="m">3</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">_value3</span> <span class="o">=</span> <span class="m">5</span><span class="p">;</span>

  <span class="c1">// Returns the product of the above values:
</span><span class="c1"></span>  <span class="kt">int</span> <span class="kd">get</span> <span class="n">product</span> <span class="o">=</span><span class="o">&gt;</span> <span class="n">_value1</span> <span class="o">*</span> <span class="n">_value2</span> <span class="o">*</span> <span class="n">_value3</span><span class="p">;</span>
  
  <span class="c1">// Adds one to _value1:
</span><span class="c1"></span>  <span class="kt">void</span> <span class="n">incrementValue1</span><span class="p">(</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="n">_value1</span><span class="o">+</span><span class="o">+</span><span class="p">;</span> 
  
  <span class="c1">// Returns a string containing each item in the
</span><span class="c1"></span>  <span class="c1">// list, separated by commas (e.g. &#39;a,b,c&#39;): 
</span><span class="c1"></span>  <span class="kt">String</span> <span class="n">joinWithCommas</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span> <span class="n">strings</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="n">strings</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">,</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h2 id="级联">级联</h2>
<p>要对同一对象进行一系列操作，可以使用级联(<code>...</code>)。我们都见过这样的表达式:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">myObject</span><span class="p">.</span><span class="n">someMethod</span><span class="p">(</span><span class="p">)</span>
</code></pre></div><p>它在 <code>myObject</code> 上调用 <code>someMethod()</code>，表达式的结果是 <code>someMethod()</code> 的返回值。</p>
<p>下面是同样的表达式，有一个级联:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">myObject</span><span class="p">.</span><span class="p">.</span><span class="n">someMethod</span><span class="p">(</span><span class="p">)</span>
</code></pre></div><p>虽然它仍然在 <code>myObject</code> 上调用 <code>someMethod()</code>，但表达式的结果并不是返回值-它是对 <code>myObject</code> 的引用! 使用级联，你可以将原本需要单独语句的操作串联起来。例如，请看以下代码:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">var</span> <span class="n">button</span> <span class="o">=</span> <span class="n">querySelector</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">#confirm</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="n">button</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s1">Confirm</span><span class="s1">&#39;</span><span class="p">;</span>
<span class="n">button</span><span class="p">.</span><span class="n">classes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">important</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="n">button</span><span class="p">.</span><span class="n">onClick</span><span class="p">.</span><span class="n">listen</span><span class="p">(</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="n">window</span><span class="p">.</span><span class="n">alert</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">Confirmed!</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>有了级联，代码就会变得短得多，而且你也不需要 <code>button</code> 变量:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">querySelector</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">#confirm</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="p">.</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s1">Confirm</span><span class="s1">&#39;</span>
<span class="p">.</span><span class="p">.</span><span class="n">class</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">important</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="p">.</span><span class="p">.</span><span class="n">onClick</span><span class="p">.</span><span class="n">listen</span><span class="p">(</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="n">window</span><span class="p">.</span><span class="n">alert</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">Confirmed!</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><h3 id="代码示例-5">代码示例</h3>
<p>使用级联来创建一个单一的语句，将一个 <code>BigObject</code> 的 <code>anInt</code>、<code>aString</code> 和 <code>aList</code> 属性设置为 1、&lsquo;String!&rsquo; 和 <code>[3.0]</code>(分别地)，然后调用 <code>allDone()</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">BigObject</span><span class="p">{</span>
  <span class="kt">int</span> <span class="n">anInt</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
  <span class="kt">String</span> <span class="n">aString</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s1">&#39;</span><span class="p">;</span>
  <span class="n">List</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">aList</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="n">_done</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

  <span class="kt">void</span> <span class="n">allDone</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">_done</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>    
<span class="p">}</span>

<span class="n">BigObject</span> <span class="n">fillBigObject</span><span class="p">(</span><span class="n">BigObject</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">obj</span>
      <span class="p">.</span><span class="p">.</span><span class="n">anInt</span> <span class="o">=</span> <span class="m">1</span>
      <span class="p">.</span><span class="p">.</span><span class="n">aString</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s1">String!</span><span class="s1">&#39;</span>
      <span class="p">.</span><span class="p">.</span><span class="n">aList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="m">3</span><span class="p">)</span>
      <span class="p">.</span><span class="p">.</span><span class="n">allDone</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h2 id="getters-和-setters">getters 和 setters</h2>
<p>当你需要对一个属性进行更多的控制时，你可以定义 getter 和 setter，而不是简单的字段。</p>
<p>例如，你可以确保一个属性的值是有效的:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">_aProperty</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>

  <span class="kt">int</span> <span class="kd">get</span> <span class="n">aProperty</span> <span class="o">=</span><span class="o">&gt;</span> <span class="n">_aProperty</span><span class="p">;</span>

  <span class="kd">set</span> <span class="n">aProperty</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">&gt;</span><span class="o">=</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">_aProperty</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>    
    <span class="p">}</span>    
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>你也可以使用 getter 来定义计算属性:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
  <span class="n">List</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">_values</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span><span class="p">;</span>

  <span class="kt">void</span> <span class="n">addValue</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">_values</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="p">;</span>    
  <span class="p">}</span>

  <span class="c1">// 一个计算属性
</span><span class="c1"></span>  <span class="kt">int</span> <span class="kd">get</span> <span class="n">count</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">_values</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h3 id="代码示例-6">代码示例</h3>
<p>想象一下，你有一个购物车类，它保存了一个私有的 <code>List&lt;double&gt;</code> 的价格。添加以下内容:</p>
<ul>
<li>一个叫做 <code>total</code> 的 getter，返回价格的总和。</li>
<li>用一个新的列表替换列表的 setter，只要新的列表不包含任何负价格(在这种情况下，setter 应该抛出一个 <code>InvalidPriceException</code>)。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">InvalidPriceException</span> <span class="p">{</span><span class="p">}</span>

<span class="kd">class</span> <span class="nc">ShoppingCart</span> <span class="p">{</span>
  <span class="n">List</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">_prices</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span><span class="p">;</span>
  
  <span class="kt">double</span> <span class="kd">get</span> <span class="n">total</span> <span class="o">=</span><span class="o">&gt;</span> <span class="n">_prices</span><span class="p">.</span><span class="n">fold</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">+</span> <span class="n">t</span><span class="p">)</span><span class="p">;</span>
  
  <span class="kd">set</span> <span class="n">prices</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">any</span><span class="p">(</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="m">0</span><span class="p">)</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="n">InvalidPriceException</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="n">_prices</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="可选位置参数">可选位置参数</h2>
<p>Dart 有两种函数参数：位置参数和命名参数。位置参数是你可能熟悉的那种:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">int</span> <span class="n">sumUp</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>  <span class="o">+</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// ...
</span><span class="c1"></span><span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">sumUp</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>在 Dart 中，你可以将这些位置参数用括号包裹起来，使其成为可选的参数:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">int</span> <span class="n">sumUpToFive</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="p">[</span><span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">d</span><span class="p">,</span> <span class="kt">int</span> <span class="n">e</span><span class="p">]</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="o">!</span><span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="n">sum</span> <span class="o">+</span><span class="o">=</span> <span class="n">b</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">!</span><span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="n">sum</span> <span class="o">+</span><span class="o">=</span> <span class="n">c</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">!</span><span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="n">sum</span> <span class="o">+</span><span class="o">=</span> <span class="n">d</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">e</span> <span class="o">!</span><span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="n">sum</span> <span class="o">+</span><span class="o">=</span> <span class="n">e</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// ...
</span><span class="c1"></span><span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">sumUpToFive</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">)</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">otherTotal</span> <span class="o">=</span> <span class="n">sumUpToFive</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>可选的位置参数在函数的参数列表中总是最后一个。它们的默认值是空的，除非你提供了另一个默认值:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">int</span> <span class="n">sumUpToFive</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="p">[</span><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="m">2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="m">3</span><span class="p">,</span> <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="m">4</span><span class="p">,</span> <span class="kt">int</span> <span class="n">e</span> <span class="o">=</span> <span class="m">5</span><span class="p">]</span><span class="p">)</span> <span class="p">{</span>
<span class="c1">// ···
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// ···
</span><span class="c1"></span><span class="kt">int</span> <span class="n">newTotal</span> <span class="o">=</span> <span class="n">sumUpToFive</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="p">;</span>
<span class="n">print</span><span class="p">(</span><span class="n">newTotal</span><span class="p">)</span><span class="p">;</span> <span class="c1">// &lt;-- prints 15
</span></code></pre></div><h3 id="代码示例-7">代码示例</h3>
<p>实现一个名为 <code>joinWithCommas()</code> 的函数，接受 1 到 5 个整数，然后返回一个用逗号分隔的数字字符串。下面是一些函数调用和返回值的例子:</p>
<table>
<thead>
<tr>
<th align="left">函数调用</th>
<th align="left">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">joinWithCommas(1)</td>
<td align="left">&lsquo;1&rsquo;</td>
</tr>
<tr>
<td align="left">joinWithCommas(1, 2, 3)</td>
<td align="left">&lsquo;1,2,3&rsquo;</td>
</tr>
<tr>
<td align="left">joinWithCommas(1, 1, 1, 1, 1)</td>
<td align="left">&lsquo;1,1,1,1,1&rsquo;</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="n">res</span> <span class="o">=</span> <span class="n">joinWithCommas</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">)</span><span class="p">;</span>
  <span class="n">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">String</span> <span class="n">joinWithCommas</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="p">[</span><span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">d</span><span class="p">,</span> <span class="kt">int</span> <span class="n">e</span><span class="p">]</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">List</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sum</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span><span class="p">;</span>
  <span class="n">sum</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="o">!</span><span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="n">sum</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">!</span><span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="n">sum</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">!</span><span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="n">sum</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">e</span> <span class="o">!</span><span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="n">sum</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="p">;</span>

  <span class="k">return</span> <span class="n">sum</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">,</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h2 id="可选命名参数">可选命名参数</h2>
<p>使用大括号语法，你可以定义有名称的可选参数。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="n">printName</span><span class="p">(</span><span class="kt">String</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">String</span> <span class="n">lastName</span><span class="p">,</span> <span class="p">{</span><span class="kt">String</span> <span class="n">suffix</span><span class="p">}</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">$</span><span class="n">firstName</span><span class="s1"> </span><span class="si">$</span><span class="n">lastName</span><span class="s1"> </span><span class="si">${</span><span class="n">suffix</span> <span class="o">?</span><span class="o">?</span> <span class="s1">&#39;</span><span class="s1">&#39;</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// ···
</span><span class="c1"></span><span class="n">printName</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">Avinash</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">Gupta</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="n">printName</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">Poshmeister</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">Moneybuckets</span><span class="s1">&#39;</span><span class="p">,</span> <span class="nl">suffix:</span> <span class="s1">&#39;</span><span class="s1">IV</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>正如你所期望的，这些参数的值默认为空，但你可以提供默认值。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="n">printName</span><span class="p">(</span><span class="kt">String</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">String</span> <span class="n">lastName</span><span class="p">,</span> <span class="p">{</span><span class="kt">String</span> <span class="n">suffix</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s1">&#39;</span><span class="p">}</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">$</span><span class="n">firstName</span><span class="s1"> </span><span class="si">$</span><span class="n">lastName</span><span class="s1"> </span><span class="si">$</span><span class="n">suffix</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>一个函数不能同时拥有可选的位置参数和可选的命名参数。</p>
<h3 id="代码示例-8">代码示例</h3>
<p>为 <code>MyDataObject</code> 类添加一个 <code>copyWith()</code> 实例方法。它应该接受三个命名参数:</p>
<ul>
<li>int newInt</li>
<li>String newString</li>
<li>double newDouble</li>
</ul>
<p>当调用时，<code>copyWith()</code> 应该基于当前实例返回一个新的 <code>MyDataObject</code>，并将前面参数（如果有的话）的数据复制到对象的属性中。例如，如果 <code>newInt</code> 是非空的，那么将其值复制到 <code>anInt</code> 中。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">MyDataObject</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">int</span> <span class="n">anInt</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">aString</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">double</span> <span class="n">aDouble</span><span class="p">;</span>

  <span class="n">MyDataObject</span><span class="p">(</span><span class="p">{</span>
     <span class="k">this</span><span class="p">.</span><span class="n">anInt</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span>
     <span class="k">this</span><span class="p">.</span><span class="n">aString</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s1">Old!</span><span class="s1">&#39;</span><span class="p">,</span>
     <span class="k">this</span><span class="p">.</span><span class="n">aDouble</span> <span class="o">=</span> <span class="m">2.0</span><span class="p">,</span>
  <span class="p">}</span><span class="p">)</span><span class="p">;</span>

  <span class="n">MyDataObject</span> <span class="n">copyWith</span><span class="p">(</span><span class="p">{</span><span class="kt">int</span> <span class="n">newInt</span><span class="p">,</span> <span class="kt">String</span> <span class="n">newString</span><span class="p">,</span> <span class="kt">double</span> <span class="n">newDouble</span><span class="p">}</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">MyDataObject</span><span class="p">(</span>
      <span class="nl">anInt:</span>      <span class="n">newInt</span> <span class="o">?</span><span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="n">anInt</span><span class="p">,</span>
      <span class="nl">aString:</span> <span class="n">newString</span> <span class="o">?</span><span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="n">aString</span><span class="p">,</span>
      <span class="nl">aDouble:</span> <span class="n">newDouble</span> <span class="o">?</span><span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="n">aDouble</span><span class="p">,</span>
    <span class="p">)</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="异常">异常</h2>
<p>Dart 代码可以抛出和捕获异常。与 Java 相比，Dart 的所有异常都是未检查的异常。方法不声明它们可能会抛出哪些异常，你也不需要捕捉任何异常。</p>
<p>Dart 提供了 <code>Exception</code> 和 <code>Error</code> 类型，但你可以抛出任何非空对象:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">Something bad happened.</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="k">throw</span> <span class="s1">&#39;</span><span class="s1">Waaaaaaah!</span><span class="s1">&#39;</span><span class="p">;</span>
</code></pre></div><p>在处理异常时使用 <code>try</code>、<code>on</code> 和 <code>catch</code> 关键字:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="k">try</span> <span class="p">{</span>
  <span class="n">breedMoreLlamas</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span> <span class="n">on</span> <span class="n">OutOfLlamasException</span> <span class="p">{</span>
  <span class="c1">// A specific exception
</span><span class="c1"></span>  <span class="n">buyMoreLlamas</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span> <span class="n">on</span> <span class="n">Exception</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Anything else that is an exception
</span><span class="c1"></span>  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">Unknown exception: </span><span class="si">$</span><span class="n">e</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// No specified type, handles all
</span><span class="c1"></span>  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">Something really unknown: </span><span class="si">$</span><span class="n">e</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p><code>try</code> 关键字的工作原理和其他大多数语言一样。使用 <code>on</code> 关键字按类型过滤特定的异常，使用 <code>catch</code> 关键字获取异常对象的引用。</p>
<p>如果不能完全处理异常，可以使用 <code>rethrow</code> 关键字来传播异常:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="k">try</span> <span class="p">{</span>
  <span class="n">breedMoreLlamas</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">I was just trying to breed llamas!.</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
  <span class="n">rethrow</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>无论是否抛出异常，都要执行代码，使用 <code>final</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="k">try</span> <span class="p">{</span>
  <span class="n">breedMoreLlamas</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ... handle exception ...
</span><span class="c1"></span><span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
  <span class="c1">// Always clean up, even if an exception is thrown.
</span><span class="c1"></span>  <span class="n">cleanLlamaStalls</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h3 id="代码示例-9">代码示例</h3>
<p>实现下面的 <code>tryFunction()</code>。它应该执行一个不可信的方法，然后做如下操作:</p>
<ul>
<li>如果 <code>untrustworthy()</code> 抛出一个 <code>ExceptionWithMessage</code>，调用 <code>logger.logException</code>，并提供异常类型和消息(尝试使用 <code>on</code> 和 <code>catch</code>)。</li>
<li>如果 <code>untrustworthy()</code> 抛出一个 <code>Exceptio</code>n，调用 <code>logger.logException</code>，并注明异常类型(尝试使用 <code>on</code>)。</li>
<li>如果 <code>untrustworthy()</code> 抛出任何其他对象，不要捕获异常。</li>
<li>当所有的东西都被捕获和处理后，调用 <code>logger.doneLogging</code>(尝试使用 <code>finally</code>)。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">typedef</span> <span class="n">VoidFunction</span> <span class="o">=</span> <span class="kt">void</span> <span class="n">Function</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">ExceptionWithMessage</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">message</span><span class="p">;</span>
  <span class="kd">const</span> <span class="n">ExceptionWithMessage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">message</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Logger</span> <span class="p">{</span>
  <span class="kt">void</span> <span class="n">logException</span><span class="p">(</span><span class="n">Type</span> <span class="n">t</span><span class="p">,</span> <span class="p">[</span><span class="kt">String</span> <span class="n">msg</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
  <span class="kt">void</span> <span class="n">doneLogging</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">tryFunction</span><span class="p">(</span><span class="n">VoidFunction</span> <span class="n">untrustworthy</span><span class="p">,</span> <span class="n">Logger</span> <span class="n">logger</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="n">untrustworthy</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
  <span class="p">}</span> <span class="n">on</span> <span class="n">ExceptionWithMessage</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">logger</span><span class="p">.</span><span class="n">logException</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">runtimeType</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">message</span><span class="p">)</span><span class="p">;</span>
  <span class="p">}</span> <span class="n">on</span> <span class="n">Exception</span> <span class="p">{</span>
    <span class="n">logger</span><span class="p">.</span><span class="n">logException</span><span class="p">(</span><span class="n">Exception</span><span class="p">)</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="n">logger</span><span class="p">.</span><span class="n">doneLogging</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="在构造函数中使用-this">在构造函数中使用 <code>this</code></h2>
<p>Dart 提供了一个方便的快捷方式来为构造函数中的属性赋值：在声明构造函数时使用 <code>this.propertyName</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">MyColor</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">red</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">green</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">blue</span><span class="p">;</span>

  <span class="n">MyColor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">red</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">green</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">blue</span><span class="p">)</span>    
<span class="p">}</span>

<span class="kd">final</span> <span class="n">color</span> <span class="o">=</span> <span class="n">MyColor</span><span class="p">(</span><span class="m">80</span><span class="p">,</span> <span class="m">80</span><span class="p">,</span> <span class="m">128</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>这种技术也适用于命名参数。属性名成为参数的名称:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">MyColor</span> <span class="p">{</span>
  <span class="p">.</span><span class="p">.</span><span class="p">.</span>
  <span class="n">MyColor</span><span class="p">(</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="n">red</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">green</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">blue</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>    
<span class="p">}</span>
<span class="kd">final</span> <span class="n">color</span> <span class="o">=</span> <span class="n">MyColor</span><span class="p">(</span><span class="nl">red:</span> <span class="m">80</span><span class="p">,</span> <span class="nl">green:</span> <span class="m">80</span><span class="p">,</span> <span class="nl">blue:</span> <span class="m">80</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>对于可选参数，默认值按预期工作:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">MyColor</span><span class="p">(</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="n">red</span> <span class="o">=</span> <span class="m">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">green</span> <span class="o">=</span> <span class="m">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">blue</span> <span class="o">=</span> <span class="m">0</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
<span class="c1">// or
</span><span class="c1"></span><span class="n">MyColor</span><span class="p">(</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="n">red</span> <span class="o">=</span> <span class="m">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">green</span> <span class="o">=</span> <span class="m">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">blue</span> <span class="o">=</span> <span class="m">0</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><h3 id="代码示例-10">代码示例</h3>
<p>为 <code>MyClass</code> 添加一个单行构造函数，使用 <code>this.</code> 语法来接收和分配类的三个属性的值:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">int</span> <span class="n">anInt</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">aString</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">double</span> <span class="n">aDouble</span><span class="p">;</span>
  
  <span class="n">MyClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">anInt</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">aString</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">aDouble</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h2 id="初始化器列表">初始化器列表</h2>
<p>有时候，当你实现一个构造函数时，你需要在构造函数体执行之前做一些设置。例如，在构造函数体执行之前，<code>final</code> 字段必须有值。在一个初始化器列表中做这些工作，它位于构造函数的签名和它的主体之间。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">Point</span><span class="p">.</span><span class="n">fromJson</span><span class="p">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">num</span><span class="o">&gt;</span> <span class="n">json</span><span class="p">)</span>
    <span class="o">:</span> <span class="n">x</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s1">&#39;</span><span class="s1">x</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span>
      <span class="n">y</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s1">&#39;</span><span class="s1">y</span><span class="s1">&#39;</span><span class="p">]</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">In Point.fromJson(): (</span><span class="si">$</span><span class="n">x</span><span class="s1">, </span><span class="si">$</span><span class="n">y</span><span class="s1">)</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>  
<span class="p">}</span>
</code></pre></div><p>初始化器列表也是一个方便放置断言的地方，它只在开发过程中运行:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">NonNegativePoint</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>
    <span class="o">:</span> <span class="k">assert</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span><span class="o">=</span> <span class="m">0</span><span class="p">)</span><span class="p">,</span>
      <span class="k">assert</span><span class="p">(</span><span class="n">y</span> <span class="o">&gt;</span><span class="o">=</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">I just made a NonNegativePoint: (</span><span class="si">$</span><span class="n">x</span><span class="s1">, </span><span class="si">$</span><span class="n">y</span><span class="s1">)</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>        
<span class="p">}</span>
</code></pre></div><h3 id="代码示例-11">代码示例</h3>
<p>完成下面的 <code>FirstTwoLetters</code> 构造函数。使用初始化器列表将 <code>word</code> 中的前两个字符分配给 <code>letterOne</code> 和 <code>LetterTwo</code> 属性。为了获得额外的积分，可以添加一个断言来捕获少于两个字符的单词。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">FirstTwoLetters</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">letterOne</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">letterTwo</span><span class="p">;</span>

  <span class="c1">// Create a constructor with an initializer list here:
</span><span class="c1"></span>  <span class="n">FirstTwoLetters</span><span class="p">(</span><span class="kt">String</span> <span class="n">word</span><span class="p">)</span>
    <span class="o">:</span> <span class="k">assert</span><span class="p">(</span><span class="n">word</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span><span class="o">=</span><span class="m">2</span><span class="p">)</span><span class="p">,</span>
      <span class="n">letterOne</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="p">,</span>
      <span class="n">letterTwo</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div><h2 id="命名构造器">命名构造器</h2>
<p>为了允许类有多个构造函数，Dart 支持命名构造函数:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>

  <span class="n">Point</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="p">;</span>

  <span class="n">Point</span><span class="p">.</span><span class="n">origin</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">x</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="n">y</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>    
  <span class="p">}</span>    
<span class="p">}</span>
</code></pre></div><p>要使用命名构造函数，请使用它的全名来调用它:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">final</span> <span class="n">myPoint</span> <span class="o">=</span> <span class="n">Point</span><span class="p">.</span><span class="n">origin</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><h3 id="代码示例-12">代码示例</h3>
<p>给 <code>Color</code> 类一个名为 <code>Color.black</code> 的构造函数，将三个属性都设置为 0。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">Color</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">red</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">green</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">blue</span><span class="p">;</span>
  
  <span class="n">Color</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">red</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">green</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">blue</span><span class="p">)</span><span class="p">;</span>

  <span class="n">Color</span><span class="p">.</span><span class="n">black</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">red</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="n">green</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="n">blue</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
  <span class="p">}</span> 
<span class="p">}</span>
</code></pre></div><h2 id="工厂构造函数">工厂构造函数</h2>
<p>Dart 支持工厂构造函数，它可以返回子类型甚至 null。要创建一个工厂构造函数，请使用 <code>factory</code> 关键字:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">Square</span> <span class="kd">extends</span> <span class="n">Shape</span> <span class="p">{</span><span class="p">}</span>

<span class="kd">class</span> <span class="nc">Circle</span> <span class="kd">extends</span> <span class="n">Shape</span> <span class="p">{</span><span class="p">}</span>

<span class="kd">class</span> <span class="nc">Shape</span> <span class="p">{</span>
  <span class="n">Shape</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>

  <span class="kd">factory</span> <span class="n">Shape</span><span class="p">.</span><span class="n">fromTypeName</span><span class="p">(</span><span class="kt">String</span> <span class="n">typeName</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">typeName</span> <span class="o">=</span><span class="o">=</span> <span class="s1">&#39;</span><span class="s1">square</span><span class="s1">&#39;</span><span class="p">)</span> <span class="k">return</span> <span class="n">Square</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">typeName</span> <span class="o">=</span><span class="o">=</span> <span class="s1">&#39;</span><span class="s1">circle</span><span class="s1">&#39;</span><span class="p">)</span> <span class="k">return</span> <span class="n">Circle</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>

    <span class="n">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">I don</span><span class="se">\&#39;</span><span class="s1">t recognize </span><span class="si">$</span><span class="n">typeName</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
    <span class="k">return</span> <span class="kc">null</span>
  <span class="p">}</span>    
<span class="p">}</span>
</code></pre></div><h3 id="代码示例-13">代码示例</h3>
<p>填入名为 <code>IntegerHolder.fromList</code> 的工厂构造函数，使其做以下工作:</p>
<ul>
<li>如果列表有一个值，就用这个值创建一个 <code>IntegerSingle</code>。</li>
<li>如果列表有两个值，则用该值依次创建一个 <code>IntegerDouble</code>。</li>
<li>如果列表有三个值，则按顺序创建一个 <code>IntegerTriple</code>。</li>
<li>否则，返回 null。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">IntegerHolder</span> <span class="p">{</span>
  <span class="n">IntegerHolder</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
  
  <span class="kd">factory</span> <span class="n">IntegerHolder</span><span class="p">.</span><span class="n">fromList</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">?</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span><span class="o">=</span> <span class="m">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">IntegerSingle</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">?</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span><span class="o">=</span> <span class="m">2</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">IntegerDouble</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="p">,</span> <span class="n">list</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">?</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span><span class="o">=</span> <span class="m">3</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">IntegerTriple</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="p">,</span> <span class="n">list</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="p">,</span> <span class="n">list</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span> 
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">IntegerSingle</span> <span class="kd">extends</span> <span class="n">IntegerHolder</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
  <span class="n">IntegerSingle</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">a</span><span class="p">)</span><span class="p">;</span> 
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">IntegerDouble</span> <span class="kd">extends</span> <span class="n">IntegerHolder</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
  <span class="n">IntegerDouble</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">b</span><span class="p">)</span><span class="p">;</span> 
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">IntegerTriple</span> <span class="kd">extends</span> <span class="n">IntegerHolder</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
  <span class="n">IntegerTriple</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">c</span><span class="p">)</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div><h2 id="重定向构造函数">重定向构造函数</h2>
<p>有时，一个构造函数的唯一目的是重定向到同一类中的另一个构造函数。重定向构造函数的主体是空的，构造函数调用出现在冒号(:)之后。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">Automobile</span> <span class="p">{</span>
  <span class="kt">String</span> <span class="n">make</span><span class="p">;</span>
  <span class="kt">String</span> <span class="n">model</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">mpg</span><span class="p">;</span>

  <span class="c1">// 这个类的主构造函数
</span><span class="c1"></span>  <span class="n">Automobile</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">make</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">model</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">mpg</span><span class="p">)</span><span class="p">;</span>

  <span class="c1">// 代理到主构造函数
</span><span class="c1"></span>  <span class="n">Automobile</span><span class="p">.</span><span class="n">hybrid</span><span class="p">(</span><span class="kt">String</span> <span class="n">make</span><span class="p">,</span> <span class="kt">String</span> <span class="n">model</span><span class="p">)</span> <span class="o">:</span> <span class="k">this</span><span class="p">(</span><span class="n">make</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="m">60</span><span class="p">)</span><span class="p">;</span>

  <span class="c1">// 代理到命名构造函数
</span><span class="c1"></span>  <span class="n">Automobile</span><span class="p">.</span><span class="n">fancyHybrid</span><span class="p">(</span><span class="p">)</span> <span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="n">hybrid</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">Futurecar</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">Mark 2</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div><h3 id="代码示例-14">代码示例</h3>
<p>还记得上面的 <code>Color</code> 类吗？创建一个名为 <code>black</code> 的命名构造函数，但不是手动分配属性，而是将其重定向到默认构造函数，参数为 0。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">Color</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">red</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">green</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">blue</span><span class="p">;</span>
  
  <span class="n">Color</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">red</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">green</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">blue</span><span class="p">)</span><span class="p">;</span>

  <span class="n">Color</span><span class="p">.</span><span class="n">black</span><span class="p">(</span><span class="p">)</span> <span class="o">:</span> <span class="k">this</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h2 id="常量构造函数">常量构造函数</h2>
<p>如果你的类产生的对象永远不会改变，你可以让这些对象成为编译时常量。要做到这一点，请定义一个 <code>const</code> 构造函数，并确保所有的实例变量都是最终变量。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">ImmutablePoint</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="n">ImmutablePoint</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="p">;</span>

  <span class="kd">final</span> <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>

  <span class="kd">static</span> <span class="kd">const</span> <span class="n">ImmutablePoint</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">ImmutablePoint</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h3 id="代码示例-15">代码示例</h3>
<p>修改 <code>Recipe</code> 类，使它的实例可以是常量，并创建一个常量构造函数，执行以下操作。</p>
<ul>
<li>有三个参数： <code>ingredients</code>, <code>calories</code> 和 <code>milligramsOfSodium</code>(按顺序)。</li>
<li>使用 <code>this.</code> 语法，自动将参数值分配给同名的对象属性。</li>
<li>是常量，在构造函数声明中，<code>const</code> 关键字就在 <code>Recipe</code> 前面。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">Recipe</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span> <span class="n">ingredients</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">int</span> <span class="n">calories</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">double</span> <span class="n">milligramsOfSodium</span><span class="p">;</span>

  <span class="kd">const</span> <span class="n">Recipe</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">ingredients</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">calories</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">milligramsOfSodium</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h2 id="下一步是什么">下一步是什么？</h2>
<p>我们希望你喜欢使用这个 codelab 来学习或测试你对 Dart 语言一些最有趣的功能的知识。这里有一些关于现在要做什么的建议。</p>
<ul>
<li>试试<a href="https://dart.dev/codelabs">其他的 Dart 代码实验室</a>.</li>
<li>阅读 <a href="https://dart.dev/guides/language/language-tour">Dart 语言之旅</a>。</li>
<li>玩 <a href="https://dartpad.dev/">DartPad</a>。</li>
<li>获取 <a href="https://dart.dev/get-dart">Dart SDK</a>。</li>
</ul>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/programming" term="programming" label="programming" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/string" term="string" label="string" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/cheatsheet" term="cheatsheet" label="cheatsheet" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/dart" term="dart" label="dart" />
                            
                        
                    
                
            
        </entry>
    
</feed>
