{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003ch1 id=\"元编程\"\u003e元编程\u003c/h1\u003e\n\u003cp\u003e在Julia语言中，Lisp最强的遗产是它对元编程的支持。和Lisp一样，Julia也将自己的代码表示为语言本身的数据结构。由于代码是由可以在语言内部创建和操作的对象来表示的，所以程序可以转换和生成自己的代码。这使得复杂的代码生成不需要额外的构建步骤，也允许真正的Lisp式的宏在\u003ca href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\"\u003e抽象语法树\u003c/a\u003e的层次上操作。相比之下，预处理器的 \u0026ldquo;宏 \u0026ldquo;系统，就像C和C++一样，在任何实际的解析或解释发生之前，都会进行文本操作和替换。由于Julia中所有的数据类型和代码都是由Julia数据结构来表示的，因此，强大的\u003ca href=\"https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\"\u003e反射\u003c/a\u003e功能可以像其他数据一样探索程序及其类型的内部。\u003c/p\u003e\n\u003ch2 id=\"程序表示\"\u003e程序表示\u003c/h2\u003e\n\u003cp\u003e每个Julia程序都是以字符串的形式开始的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprog\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;1 + 1\u0026#34;\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;1 + 1\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e接下来会发生什么？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e下一步是将每个字符串\u003ca href=\"https://en.wikipedia.org/wiki/Parsing#Computer_languages\"\u003e解析\u003c/a\u003e成一个对象，称为表达式，用Julia类型 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Core.Expr\"\u003eExpr\u003c/a\u003e 表示。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprog\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eExpr对象包含两部分。\u003c/p\u003e\n\u003cp\u003ea 符号标识表达式的种类。符号是一个内嵌的字符串标识符（下文将详细讨论）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e表达式参数，可以是符号、其他表达式或文字值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e:+\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也可以直接用前缀符号构造表达式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面构造的两个表达式\u0026ndash;通过解析和直接构造\u0026ndash;是等价的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eex2\u003c/span\u003e\n\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里的关键点是，Julia代码在内部被表示为一个数据结构，可以从语言本身访问。\u003c/p\u003e\n\u003cp\u003edump函数提供了Expr对象的缩进和注释显示。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003ecall\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}((\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,))\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eExpr对象也可以被嵌套。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;(4 + 4) / 2\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e另一种查看表达式的方法是使用Meta.show_sexpr，它可以显示给定Expr的S表达式形式，这对于Lisp的用户来说可能看起来非常熟悉。下面是一个例子，说明如何在嵌套的Expr上显示。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshow_sexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:/\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e符号\u003c/p\u003e\n\u003cp\u003e在Julia中，:字符有两种语法用途。第一种形式是创建一个Symbol，一个内部字符串，作为表达式的一个构件。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e符号构造函数接受任何数量的参数，并通过将它们的字符串表示连接在一起来创建一个新的符号。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;func\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003efunc10\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"sc\"\u003e\u0026#39;_\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sym\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003evar_sym\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，要使用 : 语法，符号的名称必须是一个有效的标识符。否则必须使用Symbol(str)构造函数。\u003c/p\u003e\n\u003cp\u003e在表达式的上下文中，符号用于指示对变量的访问；当表达式被评估时，符号会被替换为在适当的作用域中与该符号绑定的值。\u003c/p\u003e\n\u003cp\u003e有时，为了避免在解析时产生歧义，需要在 : 的参数周围加括号。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e表达式和评价\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e引用\u003c/dt\u003e\n\u003cdd\u003e\n\u003cp\u003e字符的第二个语法目的是在不使用显式Expr构造函数的情况下创建表达式对象。这就是所谓的引用。在Julia代码的单条语句周围，用成对的括号跟上 : 字符，就可以根据所附的代码生成一个Expr对象。下面是用于引用一个算术表达式的简短形式的例子。\u003c/p\u003e\n\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e(要查看这个表达式的结构，可以试试ex.head和ex.args，或者使用上面的dump或Meta.@dump)\u003c/p\u003e\n\u003cp\u003e注意，可以使用Meta.parse或直接使用Expr形式构造等价的表达式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e      \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e       \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n       \u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a + b*c + 1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n       \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e解析器提供的表达式一般只有符号、其他表达式和字面值作为其args，而Julia代码构建的表达式可以有任意的运行时值，没有字面形式作为args。在这个具体的例子中，+和a是符号，*(b,c)是一个子表达式，1是一个64位有符号整数的文字形式。\u003c/p\u003e\n\u003cp\u003e对于多个表达式，还有第二种引用的语法形式：用引号\u0026hellip;\u0026hellip;结尾括起来的代码块。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e\n           \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n           \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n           \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:2 =#\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:3 =#\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:4 =#\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e插值\u003c/p\u003e\n\u003cp\u003e用值参数直接构造Expr对象是很强大的，但与 \u0026ldquo;正常的 \u0026ldquo;Julia语法相比，Expr构造函数可能很乏味。作为一种替代方法，Julia允许将字元或表达式插值到引用的表达式中。插值由前缀$表示。\u003c/p\u003e\n\u003cp\u003e在这个例子中，变量a的值被内插了。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e不支持向未引用的表达式插值，并会导致编译时错误。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"n\"\u003eERROR\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esyntax\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;$\u0026#34;\u003c/span\u003e \u003cspan class=\"n\"\u003eexpression\u003c/span\u003e \u003cspan class=\"n\"\u003eoutside\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，元组(1,2,3)作为表达式被内插到一个条件测试中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"kp\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e$:\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"kp\"\u003ein\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在表达式插值中使用$是有意让人联想到字符串插值和命令插值。表达式插值可以方便的、可读的程序化构造复杂的Julia表达式。\u003c/p\u003e\n\u003cp\u003e劈叉插值\u003c/p\u003e\n\u003cp\u003e请注意，$插值语法只允许在一个包围表达式中插入一个表达式。偶尔，你有一个表达式数组，需要它们全部成为包围表达式的参数。这可以用语法$(xs\u0026hellip;)来完成。例如，下面的代码生成了一个函数调用，其中的参数数是通过编程确定的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ez\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ez\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e嵌套引用\u003c/p\u003e\n\u003cp\u003e自然，引号表达式有可能包含其他引号表达式。在这些情况下，理解内插是如何工作的可能有点棘手。考虑一下这个例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:1 =#\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003equote\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:1 =#\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:$\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，结果中包含$x，这意味着x还没有被评估。换句话说，$表达式 \u0026ldquo;属于 \u0026ldquo;内部引号表达式，因此它的参数只有在内部引号表达式时才会被评估。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:1 =#\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但是，外引号表达式能够对内引号中的$内的值进行插值。这是用多个$来完成的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e \u003cspan class=\"o\"\u003e$$\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:1 =#\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003equote\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:1 =#\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:$\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意到(1+2)现在出现在结果中，而不是符号x。对这个表达式进行评估，得到一个内插的3。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:1 =#\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种行为背后的直觉是，x对每个$都会被评估一次：一个$的工作原理类似于eval(:x)，给出x的值，而两个$的工作原理相当于eval(eval(:x))。\u003c/p\u003e\n\u003cp\u003eQuoteNode\u003c/p\u003e\n\u003cp\u003e引号形式在AST中的通常表示是一个带头:quote的Expr。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;:(1+2)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}((\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,))\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003ecall\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}((\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,))\u003c/span\u003e\n        \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n        \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n        \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e正如我们所看到的，这类表达式支持用$进行插值，但是在某些情况下，有必要在不进行插值的情况下引用代码。这种引用还没有语法，但在内部表示为一个类型为QuoteNode的对象。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:$\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))))\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eQuoteNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:$\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:$\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e该解析器产生的QuoteNodes用于简单的引用项目，如符号。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;:x\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eQuoteNode\u003c/span\u003e\n  \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eQuoteNode还可以用于某些高级元编程任务。\u003c/p\u003e\n\u003cp\u003e评估表达式\u003c/p\u003e\n\u003cp\u003e给定一个表达式对象，可以使用eval使Julia在全局范围内对其进行评估（执行）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eERROR\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eUndefVarError\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"n\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003edefined\u003c/span\u003e\n\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e每个模块都有自己的 eval 函数，它可以在全局范围内评估表达式。传递给eval的表达式并不局限于返回值\u0026ndash;它们也可以产生副作用，改变模块环境的状态。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003cspan class=\"n\"\u003eERROR\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eUndefVarError\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"n\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003edefined\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这里，对表达式对象的评价会导致一个值被分配给全局变量x。\u003c/p\u003e\n\u003cp\u003e由于表达式只是Expr对象，可以通过编程构造，然后进行评估，因此可以动态生成任意代码，然后使用eval进行运行。下面是一个简单的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ea的值用于构造表达式ex，该表达式将+函数应用于值1和变量b，注意a和b的使用方式的重要区别。\u003c/p\u003e\n\u003cp\u003e变量a的值在表达式构造时被用作表达式中的即时值。因此，当表达式被评估时，a的值不再重要：表达式中的值已经是1，无论a的值是多少，都是独立的。\n另一方面，在表达式的构造中使用了符号:b，所以变量b的值在那个时候是无关紧要的\u0026ndash;:b只是一个符号，变量b甚至不需要被定义。但在表达式评估时，符号:b的值是通过查找变量b的值来解决的。\n表达式上的函数\u003c/p\u003e\n\u003cp\u003e如上所述，Julia的一个极其有用的特性是在Julia本身内部生成和操作Julia代码的能力。我们已经看到了一个函数返回Expr对象的例子：parse函数，它接收一串Julia代码并返回相应的Expr。一个函数也可以接受一个或多个Expr对象作为参数，并返回另一个Expr。下面是一个简单的、激励性的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003emath_expr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003emath_expr\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e  \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emath_expr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e21\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e作为另一个例子，这里有一个函数，它可以将任何数字参数翻倍，但不考虑表达式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003emake_expr2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopr1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopr2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eopr1f\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopr2f\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"kp\"\u003eisa\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopr1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopr2\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eretexpr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopr1f\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopr2f\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eretexpr\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003emake_expr2\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emake_expr2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emake_expr2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"宏\"\u003e宏\u003c/h2\u003e\n\u003cp\u003e宏提供了一种将生成的代码包含在程序的最后主体中的方法。宏将一个参数元组映射到一个返回的表达式，生成的表达式直接被编译，而不需要运行时 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.eval\"\u003eeval\u003c/a\u003e 调用。宏参数可以包括表达式、字面值和符号。\u003c/p\u003e\n\u003ch3 id=\"基础知识\"\u003e基础知识\u003c/h3\u003e\n\u003cp\u003e这里有一个特别简单的宏。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003esayhello\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, world!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@sayhello\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Julia 的语法中，宏有一个专门的字符：\u003ccode\u003e@\u003c/code\u003e(at 符号)，后面是 \u003ccode\u003emacro NAME ... end\u003c/code\u003e 块中声明的唯一名称\u0026hellip;.。在这个例子中，编译器将用 \u003ccode\u003e@sayhello\u003c/code\u003e 替换所有的实例。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, world!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当在 REPL 中输入 \u003ccode\u003e@sayhello\u003c/code\u003e 时，表达式会立即执行，因此我们只看到求值结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@sayhello\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eworld!\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在，考虑一个稍微复杂的宏。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003esayhello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@sayhello\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个宏只取一个参数：\u003ccode\u003ename\u003c/code\u003e。当遇到 \u003ccode\u003e@sayhello\u003c/code\u003e 时，引用的表达式会被展开，将参数的值内插到最终的表达式中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@sayhello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;human\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehuman\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们可以使用函数 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.macroexpand\"\u003emacroexpand\u003c/a\u003e 查看引用的返回表达式（重要提示：这是调试宏的一个极其有用的工具）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emacroexpand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nd\"\u003e@sayhello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;human\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;human\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们可以看到，\u0026ldquo;human\u0026rdquo; 的字面值已经被插进了表达式中。\u003c/p\u003e\n\u003cp\u003e此外，还存在一个宏 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.@macroexpand\"\u003e@macroexpand\u003c/a\u003e，也许比 \u003ccode\u003emacroexpand\u003c/code\u003e 函数更方便一些。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@macroexpand\u003c/span\u003e \u003cspan class=\"nd\"\u003e@sayhello\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;human\u0026#34;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;human\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"等等为什么是宏\"\u003e等等：为什么是宏？\u003c/h3\u003e\n\u003cp\u003e我们在前一节已经看到了一个函数 \u003ccode\u003ef(::Expr...) -\u0026gt; Expr\u003c/code\u003e。其实，\u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.macroexpand\"\u003emacroexpand\u003c/a\u003e 也是这样一个函数。那么，为什么要有宏的存在呢？\u003c/p\u003e\n\u003cp\u003e宏是必要的，因为它们在代码解析时执行，因此，宏允许程序员在完整程序运行之前生成并包含自定义代码的片段。为了说明两者的区别，请考虑下面的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003etwostep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;I execute at parse time. The argument is: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;I execute at runtime. The argument is: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003earg\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@twostep\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emacroexpand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nd\"\u003e@twostep\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eI\u003c/span\u003e \u003cspan class=\"n\"\u003eexecute\u003c/span\u003e \u003cspan class=\"n\"\u003eat\u003c/span\u003e \u003cspan class=\"n\"\u003eparse\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eThe\u003c/span\u003e \u003cspan class=\"n\"\u003eargument\u003c/span\u003e \u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当调用 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.macroexpand\"\u003emacroexpand\u003c/a\u003e 时，会执行对 \u003ca href=\"https://docs.julialang.org/en/v1/base/io-network/#Base.println\"\u003eprintln\u003c/a\u003e 的第一次调用。结果的表达式只包含第二个 \u003ccode\u003eprintln\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;I execute at runtime. The argument is: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecopyast\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eQuoteNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)))))))))\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eI\u003c/span\u003e \u003cspan class=\"n\"\u003eexecute\u003c/span\u003e \u003cspan class=\"n\"\u003eat\u003c/span\u003e \u003cspan class=\"n\"\u003eruntime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eThe\u003c/span\u003e \u003cspan class=\"n\"\u003eargument\u003c/span\u003e \u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"宏调用\"\u003e宏调用\u003c/h3\u003e\n\u003cp\u003e宏的调用有以下一般语法。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"nd\"\u003e@name\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr1\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr2\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@name\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意在宏名前有区别的 \u003ccode\u003e@\u003c/code\u003e，第一种形式的参数表达式之间没有逗号，第二种形式的 \u003ccode\u003e@\u003c/code\u003e 名后没有空格。两种样式不能混用。例如，下面的语法与上面的例子不同，它将元组 (expr1, expr2, \u0026hellip;) 作为一个参数传递给宏。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"nd\"\u003e@name\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在数组字面量（或解析）上调用宏的另一种方法是将两者并列，而不使用括号。在这种情况下，数组将是唯一输入宏的表达式。下面的语法是等价的（与 \u003ccode\u003e@name [a b] * v\u003c/code\u003e 不同）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"nd\"\u003e@name\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@name\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e需要强调的是，宏以表达式、字面值或符号的形式接收其参数。探索宏参数的一种方法是在宏体中调用 \u003ca href=\"https://docs.julialang.org/en/v1/base/io-network/#Base.show-Tuple%7BIO,Any%7D\"\u003eshow\u003c/a\u003e 函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003eshowarg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eshow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"c\"\u003e# ... remainder of macro, returning an expression\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@showarg\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@showarg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@showarg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@showarg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Yo!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Yo!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e除了给定的参数列表之外，每个宏都会被传递额外的参数 \u003ccode\u003e__source__\u003c/code\u003e 和 \u003ccode\u003e__module__\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e参数 \u003ccode\u003e__source__\u003c/code\u003e 提供了关于来自宏调用的 \u003ccode\u003e@\u003c/code\u003e 符号的解析器位置的信息（以 \u003ccode\u003eLineNumberNode\u003c/code\u003e 对象的形式）。这使得宏能够包含更好的错误诊断信息，并且通常被日志、字符串解析器宏和文档等使用，例如，也被用来实现 \u003ca href=\"https://docs.julialang.org/en/v1/base/file/#Base.@__LINE__\"\u003e@\u003cstrong\u003eLINE\u003c/strong\u003e\u003c/a\u003e、\u003ca href=\"https://docs.julialang.org/en/v1/base/file/#Base.@__FILE__\"\u003e@\u003cstrong\u003eFILE\u003c/strong\u003e\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/base/file/#Base.@__DIR__\"\u003e@\u003cstrong\u003eDIR\u003c/strong\u003e\u003c/a\u003e 宏。\u003c/p\u003e\n\u003cp\u003e位置信息可以通过引用 \u003ccode\u003e__source__.line\u003c/code\u003e 和 \u003ccode\u003e__source__.file\u003c/code\u003e 来访问。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003e__LOCATION__\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kt\"\u003eQuoteNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__source__\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@__LOCATION__\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"nd\"\u003e@__LOCATION__\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n       \u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eLineNumberNode\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003enone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e参数 \u003ccode\u003e__module__\u003c/code\u003e 提供了关于宏调用的扩展上下文的信息（以 \u003ccode\u003eModule\u003c/code\u003e 对象的形式）。这允许宏查找上下文信息，如现有的绑定，或者将该值作为额外的参数插入到在当前模块中做自省的运行时函数调用中。\u003c/p\u003e\n\u003ch3 id=\"构建一个高级宏\"\u003e构建一个高级宏\u003c/h3\u003e\n\u003cp\u003e这里是 Julia 的 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.@assert\"\u003e@assert\u003c/a\u003e 宏的简化定义。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e))))\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@assert\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个宏可以这样使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@assert\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@assert\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003cspan class=\"n\"\u003eERROR\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e宏调用在解析时扩展到它的返回结果。这就相当于写。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;1 == 1.0\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;1 == 0\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也就是说，在第一次调用中，表达式 \u003ccode\u003e:(1 == 1.0)\u003c/code\u003e 被拼接到测试条件槽中，而 \u003ccode\u003estring(:(1 == 1.0))\u003c/code\u003e 的值被拼接到断言消息槽中。这样构造出来的整个表达式，就被放到了发生 \u003ccode\u003e@assert\u003c/code\u003e 宏调用的语法树中。然后在执行时，如果测试表达式评估为真，那么返回 \u003ca href=\"https://docs.julialang.org/en/v1/base/constants/#Core.nothing\"\u003enothing\u003c/a\u003e，而如果测试为假，则会引发一个错误，表明断言表达式是假的。注意，如果把这个写成函数就不行了，因为只有条件的值，不可能在错误信息中显示计算条件的表达式。\u003c/p\u003e\n\u003cp\u003eJulia Base 中 \u003ccode\u003e@assert\u003c/code\u003e 的实际定义比较复杂。它允许用户有选择地指定自己的错误信息，而不是只打印失败的表达式。就像在参数数可变的函数（\u003ca href=\"https://docs.julialang.org/en/v1/manual/functions/#Varargs-Functions\"\u003eVarargs Functions\u003c/a\u003e）中一样，在最后一个参数后面用省略号来指定。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emsgs\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003emsg_body\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eisempty\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsgs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emsgs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n           \u003cspan class=\"n\"\u003emsg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_body\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@assert\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在 \u003ccode\u003e@assert\u003c/code\u003e 有两种操作模式，取决于它接收到的参数数量！如果只有一个参数，那么 \u003ccode\u003emsgs\u003c/code\u003e 捕获的表达式元组将是空的，它的行为和上面的简单定义一样。如果只有一个参数，msgs 捕获的表达式元组将是空的，它的行为与上面的简单定义相同。但现在如果用户指定了第二个参数，它将被打印在消息正文中，而不是失败的表达式。你可以用 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.@macroexpand\"\u003e@macroexpand\u003c/a\u003e 宏来检查宏扩展的结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@macroexpand\u003c/span\u003e \u003cspan class=\"nd\"\u003e@assert\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enothing\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a == b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@macroexpand\u003c/span\u003e \u003cspan class=\"nd\"\u003e@assert\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;a should equal b!\u0026#34;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enothing\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a should equal b!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e实际的 \u003ccode\u003e@assert\u003c/code\u003e 宏还可以处理另一种情况：如果除了打印 \u0026ldquo;a should equal b\u0026rdquo; 之外，我们还想打印它们的值呢？人们可能会天真地尝试在自定义消息中使用字符串插值，例如，\u003ccode\u003e@assert a==b \u0026quot;a ($a) should equal b ($b)!\u0026quot;\u003c/code\u003e，但这在上面的宏中不会像预期的那样工作。你能明白为什么吗？从\u003ca href=\"https://docs.julialang.org/en/v1/manual/strings/#string-interpolation\"\u003e字符串插值\u003c/a\u003e回想一下，插值后的字符串会被改写成对\u003ca href=\"https://docs.julialang.org/en/v1/base/strings/#Base.string\"\u003e字符串\u003c/a\u003e的调用。比较一下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a should equal b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"n\"\u003eString\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a (\u003c/span\u003e\u003cspan class=\"si\"\u003e$a\u003c/span\u003e\u003cspan class=\"s\"\u003e) should equal b (\u003c/span\u003e\u003cspan class=\"si\"\u003e$b\u003c/span\u003e\u003cspan class=\"s\"\u003e)!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a (\u003c/span\u003e\u003cspan class=\"si\"\u003e$a\u003c/span\u003e\u003cspan class=\"s\"\u003e) should equal b (\u003c/span\u003e\u003cspan class=\"si\"\u003e$b\u003c/span\u003e\u003cspan class=\"s\"\u003e)!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}((\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,))\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;a (\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;) should equal b (\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;)!\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因此，现在宏不是在 \u003ccode\u003emsg_body\u003c/code\u003e 中得到一个普通的字符串，而是接收一个完整的表达式，这个表达式需要被评估，以便按照预期的方式显示。这可以直接拼接到返回的表达式中，作为\u003ca href=\"https://docs.julialang.org/en/v1/base/strings/#Base.string\"\u003e字符串\u003c/a\u003e调用的一个参数；完整的实现请参见 \u003ca href=\"https://github.com/JuliaLang/julia/blob/master/base/error.jl\"\u003eerror.jl\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e@assert\u003c/code\u003e 宏很好地利用了拼接成引号的表达式，简化了宏体内部对表达式的操作。\u003c/p\u003e\n\u003ch3 id=\"卫生宏\"\u003e卫生宏\u003c/h3\u003e\n\u003cp\u003e在比较复杂的宏中会出现一个问题，那就是\u003ca href=\"https://en.wikipedia.org/wiki/Hygienic_macro\"\u003e卫生\u003c/a\u003e问题。简而言之，宏必须确保它们在返回的表达式中引入的变量不会意外地与它们扩展到的周围代码中的现有变量发生冲突。相反，作为参数传入宏中的表达式往往要在周围代码的上下文中进行评估，与现有变量进行交互和修改。另一个关注点来自于一个事实，即一个宏可能会在与它被定义的模块不同的地方被调用。在这种情况下，我们需要确保所有的全局变量被解析到正确的模块中。与具有文本宏扩展的语言（如C语言）相比，Julia 已经有了很大的优势，因为它只需要考虑返回的表达式。所有其他的变量（比如上面 \u003ccode\u003e@assert\u003c/code\u003e 中的 \u003ccode\u003emsg\u003c/code\u003e）都遵循\u003ca href=\"https://docs.julialang.org/en/v1/manual/variables-and-scoping/#scope-of-variables\"\u003e正常的作用域块行为\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e为了证明这些问题，让我们考虑写一个 \u003ccode\u003e@time\u003c/code\u003e 宏，它接受一个表达式作为参数，记录时间，评估表达式，再次记录时间，打印前后时间的差值，然后以表达式的值作为其最终值。这个宏可能是这样的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003elocal\u003c/span\u003e \u003cspan class=\"n\"\u003et0\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etime_ns\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003elocal\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003elocal\u003c/span\u003e \u003cspan class=\"n\"\u003et1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etime_ns\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;elapsed time: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003et0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mf\"\u003e1e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; seconds\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eval\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这里，我们希望 \u003ccode\u003et0\u003c/code\u003e、\u003ccode\u003et1\u003c/code\u003e 和 \u003ccode\u003eval\u003c/code\u003e 是私有的临时变量，我们希望 \u003ccode\u003etime\u003c/code\u003e 引用 Julia Base 中的 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.Libc.time-Tuple%7B%7D\"\u003etime\u003c/a\u003e 函数，而不是用户可能拥有的任何 \u003ccode\u003etime\u003c/code\u003e 变量（同样适用于 \u003ccode\u003eprintln\u003c/code\u003e）。想象一下，如果用户表达式 \u003ccode\u003eex\u003c/code\u003e 也包含了对一个叫 \u003ccode\u003et0\u003c/code\u003e 的变量的赋值，或者定义了自己的 \u003ccode\u003etime\u003c/code\u003e 变量，可能会出现的问题。我们可能会得到错误，或者神秘的不正确行为。\u003c/p\u003e\n\u003cp\u003eJulia 的宏扩展器用以下方式解决了这些问题。首先，宏结果中的变量被分为局部或全局。如果一个变量被分配给（而不是声明为全局）、声明为局部，或者被用作函数参数名，那么它被认为是局部的。否则，它被认为是全局变量。局部变量就会被重命名为唯一的（使用 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.gensym\"\u003egensym\u003c/a\u003e 函数，生成新的符号），全局变量则在宏定义环境中解决。因此，上述两个问题都得到了处理；宏的局部变量不会与任何用户变量冲突，\u003ccode\u003etime\u003c/code\u003e 和 \u003ccode\u003eprintln\u003c/code\u003e 将引用 Julia Base 定义。\u003c/p\u003e\n\u003cp\u003e然而，仍然存在一个问题。考虑下面这个宏的使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eMyModule\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nd\"\u003e@time\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"c\"\u003e# compute something\u003c/span\u003e\n\n\u003cspan class=\"nd\"\u003e@time\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里的用户表达式 \u003ccode\u003eex\u003c/code\u003e 是对 \u003ccode\u003etime\u003c/code\u003e 的调用，但不是宏使用的那个 \u003ccode\u003etime\u003c/code\u003e 函数。它显然是指 \u003ccode\u003eMyModule.time\u003c/code\u003e。因此我们必须安排 \u003ccode\u003eex\u003c/code\u003e 中的代码在宏调用环境中进行解析。这可以通过用 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.esc\"\u003eesc\u003c/a\u003e 对表达式进行\u0026quot;转义\u0026quot;来实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003elocal\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eesc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以这种方式包装的表达式，宏扩展器不会管它，只需逐字粘贴到输出中即可。因此它将在宏调用环境中被解析。\u003c/p\u003e\n\u003cp\u003e在必要的时候，可以利用这种转义机制来\u0026quot;违反\u0026quot;卫生，以便引入或操作用户变量。例如，下面的宏在调用环境中将 \u003ccode\u003ex\u003c/code\u003e 设为零。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ezerox\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eesc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@zerox\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n           \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n           \u003cspan class=\"nd\"\u003e@zerox\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"c\"\u003e# is zero\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种对变量的操作应谨慎使用，但偶尔也很方便。\u003c/p\u003e\n\u003cp\u003e掌握正确的卫生规则可能是一个艰巨的挑战。在使用宏之前，你可能需要考虑一个函数闭包是否足够。另一个有用的策略是将尽可能多的工作推迟到运行时。例如，许多宏简单地将其参数包裹在 QuoteNode 或其他类似的 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Core.Expr\"\u003eExpr\u003c/a\u003e 中。一些例子包括 \u003ccode\u003e@task body\u003c/code\u003e，它简单地返回 \u003ccode\u003eschedule(Task(()-\u0026gt; $body))\u003c/code\u003e，以及 \u003ccode\u003e@eval expr\u003c/code\u003e，它简单地返回 \u003ccode\u003eeval(QuoteNode(expr))\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e为了演示，我们可以将上面的 \u003ccode\u003e@time\u003c/code\u003e 例子重写为。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimeit\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eesc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e))))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003etimeit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003et0\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etime_ns\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003et1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etime_ns\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;elapsed time: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003et0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mf\"\u003e1e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; seconds\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然而，我们不这样做是有充分的理由的：将 \u003ccode\u003eexpr\u003c/code\u003e 包装在一个新的作用域块中（匿名函数）也会稍微改变表达式的含义（其中任何变量的作用域），同时我们希望 \u003ccode\u003e@time\u003c/code\u003e 可以使用，而对被包装的代码影响最小。\u003c/p\u003e\n\u003ch3 id=\"宏和调度\"\u003e宏和调度\u003c/h3\u003e\n\u003cp\u003e宏，就像 Julia 函数一样，是通用的。这意味着它们也可以有多个方法定义，这要归功于多重分派。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"n\"\u003emethods\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"s\"\u003e arguments\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Two arguments\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"n\"\u003emethods\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;asd\u0026#34;\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003earguments\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"n\"\u003eTwo\u003c/span\u003e \u003cspan class=\"n\"\u003earguments\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然而我们应该记住，宏调度是基于交给宏的 AST 类型，而不是 AST 在运行时评估的类型。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;An Integer\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"n\"\u003emethods\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"n\"\u003eAn\u003c/span\u003e \u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003earguments\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"代码生成\"\u003e代码生成\u003c/h2\u003e\n\u003cp\u003e当需要大量重复的模板代码时，通常会以编程方式生成，以避免冗余。在大多数语言中，这需要一个额外的构建步骤，以及一个单独的程序来生成重复的代码。在 Julia 中，表达式插值和 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.eval\"\u003eeval\u003c/a\u003e 允许这样的代码生成在程序执行的正常过程中进行。例如，考虑以下自定义类型\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# output\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们想为其添加一些方法。我们可以在下面的循环中以编程的方式进行。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003esin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003etan\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003equote\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.$\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# output\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在我们可以用我们的自定义类型来使用这些函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eπ\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e3.141592653589793\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.2246467991473532e-16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecos\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这样一来，Julia 就像自己的\u003ca href=\"https://en.wikipedia.org/wiki/Preprocessor\"\u003e预处理器\u003c/a\u003e一样，可以从语言内部生成代码。上面的代码可以使用 \u003ccode\u003e:\u003c/code\u003e 前缀引号的形式，写得稍显生硬。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003esin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003etan\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.$\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e))))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e不过，这种使用 \u003ccode\u003eeval(quote(...))\u003c/code\u003e 模式生成的语言内代码很常见，所以 Julia 自带了一个宏来缩写这种模式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003esin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003etan\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nd\"\u003e@eval\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.$\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.@eval\"\u003e@eval\u003c/a\u003e 宏重写了这个调用，使之与上述较长版本的调用完全等同。对于较长的生成代码块，给 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.@eval\"\u003e@eval\u003c/a\u003e 的表达式参数可以是一个块。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-juliaa\" data-lang=\"juliaa\"\u003e@eval begin\n    # multiple lines\nend\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"非标准字符串字面值\"\u003e非标准字符串字面值\u003c/h2\u003e\n\u003cp\u003e从 \u003ca href=\"https://docs.julialang.org/en/v1/manual/strings/#non-standard-string-literals\"\u003eStrings\u003c/a\u003e 中回想一下，以标识符为前缀的字符串字元称为非标准字符串字元，其语义可能与未加前缀的字符串字面值不同。例如\u003c/p\u003e\n\u003cp\u003er\u0026rdquo;^\\s*(?:#|$) \u0026ldquo;产生一个正则表达式对象，而不是一个字符串。\nb \u0026ldquo;DATA\\xff\\u2200 \u0026ldquo;是一个[68,65,84,65,255,226,136,128]的字节数组文字。\n也许令人惊讶的是，这些行为并没有被硬编码到Julia解析器或编译器中。相反，它们是由一个通用机制提供的自定义行为，任何人都可以使用：前缀的字符串字元被解析为对特别命名的宏的调用。例如，正则表达式宏就如下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003er_str\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eRegex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e就是这样。这个宏表示应该将字符串字词r\u0026rdquo;^\\s*(?:#|$) \u0026ldquo;的字面内容传递给@r_str宏，并将扩展的结果放入字符串字词出现的语法树中。换句话说，表达式r\u0026rdquo;^\\s*(?:#|$) \u0026ldquo;相当于将下面的对象直接放入语法树中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"kt\"\u003eRegex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;^\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s\"\u003es*(?:#|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\$\u003c/span\u003e\u003cspan class=\"s\"\u003e)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e字符串形式不仅更短、更方便，而且效率更高：由于正则表达式是编译的，而Regex对象实际上是在代码编译时创建的，所以编译只发生一次，而不是每次执行代码时。考虑一下如果正则表达式发生在循环中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elines\u003c/span\u003e\n    \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ematch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sr\"\u003er\u0026#34;^\\s*(?:#|$)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e# non-comment\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e# comment\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于正则表达式r\u0026rdquo;^/ds*(?:#|$) \u0026ldquo;在解析这段代码时被编译并插入语法树中，所以该表达式只被编译一次，而不是每次循环执行时都被编译。为了在不使用宏的情况下实现这个目标，必须这样写这个循环。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ere\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eRegex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;^\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s\"\u003es*(?:#|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\$\u003c/span\u003e\u003cspan class=\"s\"\u003e)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elines\u003c/span\u003e\n    \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ematch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e# non-comment\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e# comment\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e此外，如果编译器不能确定regex对象在所有循环中都是恒定的，某些优化可能就无法实现，这就使得这个版本的效率仍然不如上面更方便的文字形式。当然，在有些情况下，非字面形式还是比较方便的：如果需要在正则表达式中插入一个变量，就必须采取这种比较啰嗦的方式；在正则表达式模式本身是动态的，有可能在每次循环迭代时发生变化的情况下，必须在每次迭代时构造一个新的正则表达式对象。然而，在绝大多数用例中，正则表达式并不是基于运行时数据来构造的。在这大多数情况下，将正则表达式写成编译时值的能力是非常宝贵的。\u003c/p\u003e\n\u003cp\u003e与非标准字符串字元一样，非标准命令字元也是使用命令字元语法的前缀变体存在的。命令字元custom\u003ccode\u003eliteral\u003c/code\u003e被解析为@custom_cmd \u0026ldquo;literal\u0026rdquo;。Julia本身不包含任何非标准的命令字元，但包可以利用这种语法。除了语法不同和用_cmd后缀代替_str后缀外，非标准命令字元的行为与非标准字符串字元完全相同。\u003c/p\u003e\n\u003cp\u003e如果两个模块提供了名称相同的非标准字符串或命令字元，可以用模块名称来限定字符串或命令字元。例如，如果Foo和Bar都提供了非标准的字符串字元@x_str，那么可以写成Foo.x \u0026ldquo;字元 \u0026ldquo;或Bar.x \u0026ldquo;字元 \u0026ldquo;来区分两者。\u003c/p\u003e\n\u003cp\u003e用户定义字符串字元的机制是深刻的、强大的。不仅Julia的非标准字元用它来实现，而且命令字元语法（\u003ccode\u003eecho \u0026quot;Hello, $person\u0026quot;\u003c/code\u003e）也用下面这个看似无害的宏来实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd_gen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eshell_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当然，这个宏定义中使用的函数中隐藏着大量的复杂性，但它们只是函数，完全是用Julia编写的。你可以阅读它们的源码，并精确地看到它们的作用\u0026ndash;它们所做的只是构造表达式对象，以便插入到你的程序的语法树中。\u003c/p\u003e\n\u003cp\u003e生成的函数\u003c/p\u003e\n\u003cp\u003e一个非常特殊的宏是@generated，它允许你定义所谓的生成函数。这些函数能够根据其参数的类型生成专门的代码，其灵活性和/或代码量比使用多重调度时更少。宏在解析时与表达式一起工作，不能访问其输入的类型，而生成函数在参数类型已知时得到扩展，但函数尚未编译。\u003c/p\u003e\n\u003cp\u003e生成函数声明不是执行一些计算或动作，而是返回一个引号的表达式，然后形成与参数类型相对应的方法的主体。当一个生成函数被调用时，它返回的表达式会被编译，然后运行。为了提高效率，通常会对结果进行缓存。而为了使之可推断，只有有限的语言子集可以使用。因此，生成函数提供了一种灵活的方式，将工作从运行时转移到编译时，但代价是对允许的构造有更大的限制。\u003c/p\u003e\n\u003cp\u003e在定义生成函数时，与普通函数有五个主要区别。\u003c/p\u003e\n\u003cp\u003e你用 @generated 宏来注释函数声明。这在AST中添加了一些信息，让编译器知道这是一个生成函数。\n在生成函数的主体中，你只能访问参数的类型，而不能访问它们的值。\n你不是计算一些东西或执行一些操作，而是返回一个引号的表达式，当它被评估时，就会执行你想要的东西。\n生成函数只允许调用在生成函数定义之前定义的函数。(如果不遵守这一点，可能会得到引用未来世界时代函数的MethodErrors。)\n生成的函数不得突变或观察任何非常态的全局状态（包括，例如，IO、锁、非本地字典或使用hasmethod）。这意味着它们只能读取全局常量，不能有任何副作用。换句话说，它们必须是完全纯粹的。由于实现上的限制，这也意味着它们目前不能定义闭包或生成器。\n用一个例子来说明这一点是最简单的。我们可以将一个生成函数foo声明为\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eCore\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，函数体返回的是一个引号表达式，即:(x * x)，而不仅仅是x * x的值。\u003c/p\u003e\n\u003cp\u003e从调用者的角度来看，这和正则函数是一样的；事实上，你不必知道你调用的是正则函数还是生成函数。让我们来看看foo是如何表现的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c\"\u003e# note: output is from println() statement in the body\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e           \u003cspan class=\"c\"\u003e# now we print x\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eString\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;barbar\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所以，我们看到，在生成函数的主体中，x是传递的参数的类型，而生成函数返回的值，是我们从定义中返回的引用表达式的评估结果，现在的值是x。\u003c/p\u003e\n\u003cp\u003e如果我们用已经使用过的类型再次评估foo，会发生什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，没有打印出Int64的结果。我们可以看到，这里只针对特定的参数类型集执行了一次生成函数的主体，结果被缓存。之后，对于本例来说，第一次调用时生成函数返回的表达式被重新用作方法体。但是，实际的缓存行为是一种实现定义的性能优化，所以过于依赖这种行为是无效的。\u003c/p\u003e\n\u003cp\u003e生成函数的次数可能只有一次，但也可能更频繁，或者看起来根本没有发生。因此，你永远不应该写一个有副作用的生成函数\u0026ndash;副作用何时发生，多久发生一次，都是没有定义的。(这对宏来说也是如此\u0026ndash;就像对宏一样，在生成函数中使用eval是一个标志，表明你做了一些错误的事情。) 然而，与宏不同的是，运行时系统无法正确处理对eval的调用，所以不允许使用它。\u003c/p\u003e\n\u003cp\u003e同样重要的是看@生成函数如何与方法重新定义交互。按照正确的@生成函数不能观察任何可突变的状态或引起任何全局状态的突变的原则，我们看到以下行为。观察生成函数不能调用任何在生成函数本身定义之前没有定义的方法。\u003c/p\u003e\n\u003cp\u003e最初f(x)有一个定义\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;original definition\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e定义其他使用f(x)的操作。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"n\"\u003egen1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"n\"\u003egen2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在我们为f(x)添加一些新的定义。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;definition for Int\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eType\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;definition for Type{Int}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e并比较这些结果有何不同。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;definition for Int\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;definition for Int\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egen1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;original definition\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egen2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;definition for Int\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生成函数的每个方法都有自己的定义函数视图。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"n\"\u003egen1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eReal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egen1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;definition for Type{Int}\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面的生成函数foo例子并没有做任何普通函数foo(x) = x * x不能做的事情（除了在第一次调用时打印类型，并产生较高的开销）。然而，生成函数的强大之处在于它能够根据传递给它的类型计算不同的引号表达式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;:\u003c/span\u003e \u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\n               \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n               \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebar\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;baz\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;baz\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e(当然，这个人为的例子可以更容易地使用多个调度来实现\u0026hellip;)\u003c/p\u003e\n\u003cp\u003e滥用这一点将破坏运行时系统并导致未定义的行为。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ebaz\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e\n               \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n               \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;boo!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebaz\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于生成的函数主体是非确定的，所以它的行为以及所有后续代码的行为都是未定义的。\u003c/p\u003e\n\u003cp\u003e不要抄袭这些例子!\u003c/p\u003e\n\u003cp\u003e这些例子希望对说明生成函数的工作方式有所帮助，包括在定义端和调用端；但是，不要复制它们，原因如下。\u003c/p\u003e\n\u003cp\u003efoo函数有副作用 (对Core.println的调用), 而这些副作用究竟何时发生, 多久发生一次, 或发生多少次, 都是没有定义的\nbar函数解决了一个问题，而这个问题最好用多重调度来解决\u0026ndash;定义bar(x) = x和bar(x::Integer) = x ^ 2会做同样的事情，但它既简单又快速。\nbaz函数是病态的\n请注意，在生成的函数中不应该尝试的操作集是没有限制的，运行时系统目前只能检测到无效操作的一个子集。还有许多其他的操作会在不通知的情况下简单地破坏运行时系统，通常以微妙的方式与坏定义没有明显的联系。因为函数生成器是在推理过程中运行的，它必须尊重该代码的所有限制。\u003c/p\u003e\n\u003cp\u003e一些不应该尝试的操作包括。\u003c/p\u003e\n\u003cp\u003e缓存本地指针\n以任何方式与Core.Compiler的内容或方法进行交互。\n观察任何可变状态。\u003c/p\u003e\n\u003cp\u003e对生成的函数的推理可以在任何时候运行，包括在您的代码试图观察或突变此状态时。\n占用任何锁。你调用的C代码可以在内部使用锁，（例如，调用malloc是没有问题的，即使大多数实现在内部需要锁），但不要试图在执行Julia代码时持有或获取任何锁。\n调用在生成函数主体之后定义的任何函数。对于增量加载的预编译模块，这个条件是放宽的，允许调用模块中的任何函数。\n好了，现在我们对生成函数的工作原理有了更好的理解，让我们用它们来构建一些更高级的（有效的）功能\u0026hellip;\u003c/p\u003e\n\u003cp\u003e一个高级的例子\u003c/p\u003e\n\u003cp\u003e茱莉亚的基础库有一个内部的sub2ind函数，用来计算一个线性索引到n维数组中，基于n个多线性索引的集合，换句话说，就是计算可以用A[i]来索引到数组A中的索引i，而不是A[x,y,z,\u0026hellip;]。一种可能的实现方式如下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_loop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eNTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ewhere\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eind\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n           \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"n\"\u003e👎1\u003c/span\u003e\n               \u003cspan class=\"n\"\u003eind\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eind\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eind\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003esub2ind_loop\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_loop\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e同样的事情也可以用递归来完成。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{})\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{},\u003c/span\u003e \u003cspan class=\"n\"\u003ei1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n           \u003cspan class=\"n\"\u003ei1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eBoundsError\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eVararg\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e}},\u003c/span\u003e \u003cspan class=\"n\"\u003ei1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eVararg\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e}},\u003c/span\u003e \u003cspan class=\"n\"\u003ei1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n           \u003cspan class=\"n\"\u003ei1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etail\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这两种实现虽然不同，但本质上都是一样的：在数组的维度上进行运行时循环，将每个维度的偏移量收集到最后的索引中。\u003c/p\u003e\n\u003cp\u003e然而，我们在循环中所需要的所有信息都嵌入在参数的类型信息中。因此，我们可以利用生成函数将迭代移动到编译时；用编译器的说法，我们使用生成函数手动展开循环。身体变得几乎相同，但我们不是计算线性指数，而是建立一个计算指数的表达式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eNTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ewhere\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003e👎1\u003c/span\u003e\n               \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003esub2ind_gen\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将产生什么代码呢？\u003c/p\u003e\n\u003cp\u003e一个简单的方法是将主体提取到另一个（常规）函数中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eNTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ewhere\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003esub2ind_gen\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eType\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ewhere\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;:\u003c/span\u003e \u003cspan class=\"kt\"\u003eNTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003ewhere\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\n           \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;partial indexing is unsupported\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003e👎1\u003c/span\u003e\n               \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003esub2ind_gen_impl\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在我们可以执行sub2ind_gen_impl并检查它返回的表达式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(((\u003c/span\u003e\u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所以，这里要用到的方法体根本不包含循环\u0026ndash;只是索引到两个元组，乘法和加/减法。所有的循环都是在编译时进行的，我们完全避免了执行过程中的循环。因此，我们对每个类型只进行一次循环，在本例中，每N个类型只循环一次（除非在函数生成一次以上的边缘情况下\u0026ndash;见上面的免责声明）。\u003c/p\u003e\n\u003cp\u003e可选生成的函数\u003c/p\u003e\n\u003cp\u003e生成函数可以在运行时实现高效率，但也有编译时间成本：每一个具体参数类型的组合都必须生成一个新的函数体。通常情况下，Julia能够编译 \u0026ldquo;通用 \u0026ldquo;版本的函数，这些函数将适用于任何参数，但对于生成函数，这是不可能的。这意味着大量使用生成函数的程序可能无法静态编译。\u003c/p\u003e\n\u003cp\u003e为了解决这个问题，语言提供了编写正常的、非生成函数的替代实现的语法。应用到上面的sub2ind例子中，会是这样的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eNTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ewhere\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eArgumentError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Number of dimensions must match number of indices.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003e👎1\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eind\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003e👎1\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eind\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eind\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eind\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在内部，这段代码创建了函数的两个实现：一个是生成的，其中使用了if @generated中的第一个块，另一个是正常的，其中使用了 else块。在if @generated块的then部分内部，代码的语义与其他生成函数相同：参数名指的是类型，代码应该返回一个表达式。可能会出现多个if @生成块，在这种情况下，生成的实现使用所有的then块，而备用的实现使用所有的else块。\u003c/p\u003e\n\u003cp\u003e注意，我们在函数的顶部添加了一个错误检查。这段代码在两个版本中都是通用的，并且在两个版本中都是运行时代码（它将被引用并作为生成版本的表达式返回）。这意味着局部变量的值和类型在代码生成时是不可用的\u0026ndash;代码生成代码只能看到参数的类型。\u003c/p\u003e\n\u003cp\u003e在这种风格的定义中，代码生成功能本质上是一种可选的优化。编译器在方便的情况下会使用它，但其他情况下可能会选择使用正常的实现来代替。这种风格是首选，因为它允许编译器做出更多的决定，并以更多的方式编译程序，而且正常代码比代码生成代码更易读。但是，使用哪种实现取决于编译器的实现细节，所以两种实现的行为必须完全相同。\u003c/p\u003e\n","text":"元编程 在Julia语言中，Lisp最强的遗产是它对元编程的支持。和Lisp一样，Julia也将自己的代码表示为语言本身的数据结构。由于代码是由可以在语言内部创建和操作的对象来表示的，所以程序可以转换和生成自己的代码。这使得复杂的代码生成不需要额外的构建步骤，也允许真正的Lisp式的宏在抽象语法树的层次上操作。相比之下，预处理器的 \u0026ldquo;宏 \u0026ldquo;系统，就像C和C++一样，在任何实际的解析或解释发生之前，都会进行文本操作和替换。由于Julia中所有的数据类型和代码都是由Julia数据结构来表示的，因此，强大的反射功能可以像其他数据一样探索程序及其类型的内部。\n程序表示 每个Julia程序都是以字符串的形式开始的。\njulia\u0026gt; prog = \u0026#34;1 + 1\u0026#34; \u0026#34;1 + 1\u0026#34; 接下来会发生什么？\n下一步是将每个字符串解析成一个对象，称为表达式，用Julia类型 Expr 表示。\njulia\u0026gt; ex1 = Meta.parse(prog) :(1 + 1) julia\u0026gt; typeof(ex1) Expr Expr对象包含两部分。\na 符号标识表达式的种类。符号是一个内嵌的字符串标识符（下文将详细讨论）。\njulia\u0026gt; ex1.head :call 表达式参数，可以是符号、其他表达式或文字值。\njulia\u0026gt; ex1.args 3-element Array{Any,1}: :+ 1 1 也可以直接用前缀符号构造表达式。\njulia\u0026gt; ex2 = Expr(:call, :+, 1, 1) :(1 + 1) 上面构造的两个表达式\u0026ndash;通过解析和直接构造\u0026ndash;是等价的。\njulia\u0026gt; ex1 == ex2 true 这里的关键点是，Julia代码在内部被表示为一个数据结构，可以从语言本身访问。\ndump函数提供了Expr对象的缩进和注释显示。\njulia\u0026gt; dump(ex2) Expr head: Symbol call args: Array{Any}((3,)) 1: Symbol + 2: Int64 1 3: Int64 1 Expr对象也可以被嵌套。\njulia\u0026gt; ex3 = Meta.parse(\u0026#34;(4 + 4) / 2\u0026#34;) :((4 + 4) / 2) 另一种查看表达式的方法是使用Meta.show_sexpr，它可以显示给定Expr的S表达式形式，这对于Lisp的用户来说可能看起来非常熟悉。下面是一个例子，说明如何在嵌套的Expr上显示。\njulia\u0026gt; Meta.show_sexpr(ex3) (:call, :/, (:call, :+, 4, 4), 2) 符号\n在Julia中，:字符有两种语法用途。第一种形式是创建一个Symbol，一个内部字符串，作为表达式的一个构件。\njulia\u0026gt; :foo :foo julia\u0026gt; typeof(ans) Symbol 符号构造函数接受任何数量的参数，并通过将它们的字符串表示连接在一起来创建一个新的符号。\njulia\u0026gt; :foo == Symbol(\u0026#34;foo\u0026#34;) true julia\u0026gt; Symbol(\u0026#34;func\u0026#34;,10) :func10 julia\u0026gt; Symbol(:var,\u0026#39;_\u0026#39;,\u0026#34;sym\u0026#34;) :var_sym 请注意，要使用 : 语法，符号的名称必须是一个有效的标识符。否则必须使用Symbol(str)构造函数。\n在表达式的上下文中，符号用于指示对变量的访问；当表达式被评估时，符号会被替换为在适当的作用域中与该符号绑定的值。\n有时，为了避免在解析时产生歧义，需要在 : 的参数周围加括号。\njulia\u0026gt; :(:) :(:) julia\u0026gt; :(::) :(::) 表达式和评价\n 引用  字符的第二个语法目的是在不使用显式Expr构造函数的情况下创建表达式对象。这就是所谓的引用。在Julia代码的单条语句周围，用成对的括号跟上 : 字符，就可以根据所附的代码生成一个Expr对象。下面是用于引用一个算术表达式的简短形式的例子。\n  julia\u0026gt; ex = :(a+b*c+1) :(a + b * c + 1) julia\u0026gt; typeof(ex) Expr (要查看这个表达式的结构，可以试试ex.head和ex.args，或者使用上面的dump或Meta.@dump)\n注意，可以使用Meta.parse或直接使用Expr形式构造等价的表达式。\njulia\u0026gt; :(a + b*c + 1) == Meta.parse(\u0026#34;a + b*c + 1\u0026#34;) == Expr(:call, :+, :a, Expr(:call, :*, :b, :c), 1) true 解析器提供的表达式一般只有符号、其他表达式和字面值作为其args，而Julia代码构建的表达式可以有任意的运行时值，没有字面形式作为args。在这个具体的例子中，+和a是符号，*(b,c)是一个子表达式，1是一个64位有符号整数的文字形式。\n对于多个表达式，还有第二种引用的语法形式：用引号\u0026hellip;\u0026hellip;结尾括起来的代码块。\njulia\u0026gt; ex = quote x = 1 y = 2 x + y end quote #= none:2 =# x = 1 #= none:3 =# y = 2 #= none:4 =# x + y end julia\u0026gt; typeof(ex) Expr 插值\n用值参数直接构造Expr对象是很强大的，但与 \u0026ldquo;正常的 \u0026ldquo;Julia语法相比，Expr构造函数可能很乏味。作为一种替代方法，Julia允许将字元或表达式插值到引用的表达式中。插值由前缀$表示。\n在这个例子中，变量a的值被内插了。\njulia\u0026gt; a = 1; julia\u0026gt; ex = :($a + b) :(1 + b) 不支持向未引用的表达式插值，并会导致编译时错误。\njulia\u0026gt; $a + b ERROR: syntax: \u0026#34;$\u0026#34; expression outside quote 在这个例子中，元组(1,2,3)作为表达式被内插到一个条件测试中。\njulia\u0026gt; ex = :(a in $:((1,2,3)) ) :(a in (1, 2, 3)) 在表达式插值中使用$是有意让人联想到字符串插值和命令插值。表达式插值可以方便的、可读的程序化构造复杂的Julia表达式。\n劈叉插值\n请注意，$插值语法只允许在一个包围表达式中插入一个表达式。偶尔，你有一个表达式数组，需要它们全部成为包围表达式的参数。这可以用语法$(xs\u0026hellip;)来完成。例如，下面的代码生成了一个函数调用，其中的参数数是通过编程确定的。\njulia\u0026gt; args = [:x, :y, :z]; julia\u0026gt; :(f(1, $(args...))) :(f(1, x, y, z)) 嵌套引用\n自然，引号表达式有可能包含其他引号表达式。在这些情况下，理解内插是如何工作的可能有点棘手。考虑一下这个例子。\njulia\u0026gt; x = :(1 + 2); julia\u0026gt; e = quote quote $x end end quote #= none:1 =# $(Expr(:quote, quote #= none:1 =# $(Expr(:$, :x)) end)) end 注意，结果中包含$x，这意味着x还没有被评估。换句话说，$表达式 \u0026ldquo;属于 \u0026ldquo;内部引号表达式，因此它的参数只有在内部引号表达式时才会被评估。\njulia\u0026gt; eval(e) quote #= none:1 =# 1 + 2 end 但是，外引号表达式能够对内引号中的$内的值进行插值。这是用多个$来完成的。\njulia\u0026gt; e = quote quote $$x end end quote #= none:1 =# $(Expr(:quote, quote #= none:1 =# $(Expr(:$, :(1 + 2))) end)) end 注意到(1+2)现在出现在结果中，而不是符号x。对这个表达式进行评估，得到一个内插的3。\njulia\u0026gt; eval(e) quote #= none:1 =# 3 end 这种行为背后的直觉是，x对每个$都会被评估一次：一个$的工作原理类似于eval(:x)，给出x的值，而两个$的工作原理相当于eval(eval(:x))。\nQuoteNode\n引号形式在AST中的通常表示是一个带头:quote的Expr。\njulia\u0026gt; dump(Meta.parse(\u0026#34;:(1+2)\u0026#34;)) Expr head: Symbol quote args: Array{Any}((1,)) 1: Expr head: Symbol call args: Array{Any}((3,)) 1: Symbol + 2: Int64 1 3: Int64 2 正如我们所看到的，这类表达式支持用$进行插值，但是在某些情况下，有必要在不进行插值的情况下引用代码。这种引用还没有语法，但在内部表示为一个类型为QuoteNode的对象。\njulia\u0026gt; eval(Meta.quot(Expr(:$, :(1+2)))) 3 julia\u0026gt; eval(QuoteNode(Expr(:$, :(1+2)))) :($(Expr(:$, :(1 + 2)))) 该解析器产生的QuoteNodes用于简单的引用项目，如符号。\njulia\u0026gt; dump(Meta.parse(\u0026#34;:x\u0026#34;)) QuoteNode value: Symbol x QuoteNode还可以用于某些高级元编程任务。\n评估表达式\n给定一个表达式对象，可以使用eval使Julia在全局范围内对其进行评估（执行）。\njulia\u0026gt; :(1 + 2) :(1 + 2) julia\u0026gt; eval(ans) 3 julia\u0026gt; ex = :(a + b) :(a + b) julia\u0026gt; eval(ex) ERROR: UndefVarError: b not defined [...] julia\u0026gt; a = 1; b = 2; julia\u0026gt; eval(ex) 3 每个模块都有自己的 eval 函数，它可以在全局范围内评估表达式。传递给eval的表达式并不局限于返回值\u0026ndash;它们也可以产生副作用，改变模块环境的状态。\njulia\u0026gt; ex = :(x = 1) :(x = 1) julia\u0026gt; x ERROR: UndefVarError: x not defined julia\u0026gt; eval(ex) 1 julia\u0026gt; x 1 在这里，对表达式对象的评价会导致一个值被分配给全局变量x。\n由于表达式只是Expr对象，可以通过编程构造，然后进行评估，因此可以动态生成任意代码，然后使用eval进行运行。下面是一个简单的例子。\njulia\u0026gt; a = 1; julia\u0026gt; ex = Expr(:call, :+, a, :b) :(1 + b) julia\u0026gt; a = 0; b = 2; julia\u0026gt; eval(ex) 3 a的值用于构造表达式ex，该表达式将+函数应用于值1和变量b，注意a和b的使用方式的重要区别。\n变量a的值在表达式构造时被用作表达式中的即时值。因此，当表达式被评估时，a的值不再重要：表达式中的值已经是1，无论a的值是多少，都是独立的。 另一方面，在表达式的构造中使用了符号:b，所以变量b的值在那个时候是无关紧要的\u0026ndash;:b只是一个符号，变量b甚至不需要被定义。但在表达式评估时，符号:b的值是通过查找变量b的值来解决的。 表达式上的函数\n如上所述，Julia的一个极其有用的特性是在Julia本身内部生成和操作Julia代码的能力。我们已经看到了一个函数返回Expr对象的例子：parse函数，它接收一串Julia代码并返回相应的Expr。一个函数也可以接受一个或多个Expr对象作为参数，并返回另一个Expr。下面是一个简单的、激励性的例子。\njulia\u0026gt; function math_expr(op, op1, op2) expr = Expr(:call, op, op1, op2) return expr end math_expr (generic function with 1 method) julia\u0026gt; ex = math_expr(:+, 1, Expr(:call, :*, 4, 5)) :(1 + 4 * 5) julia\u0026gt; eval(ex) 21 作为另一个例子，这里有一个函数，它可以将任何数字参数翻倍，但不考虑表达式。\njulia\u0026gt; function make_expr2(op, opr1, opr2) opr1f, opr2f = map(x -\u0026gt; isa(x, Number) ? 2*x : x, (opr1, opr2)) retexpr = Expr(:call, op, opr1f, opr2f) return retexpr end make_expr2 (generic function with 1 method) julia\u0026gt; make_expr2(:+, 1, 2) :(2 + 4) julia\u0026gt; ex = make_expr2(:+, 1, Expr(:call, :*, 5, 8)) :(2 + 5 * 8) julia\u0026gt; eval(ex) 42 宏 宏提供了一种将生成的代码包含在程序的最后主体中的方法。宏将一个参数元组映射到一个返回的表达式，生成的表达式直接被编译，而不需要运行时 eval 调用。宏参数可以包括表达式、字面值和符号。\n基础知识 这里有一个特别简单的宏。\njulia\u0026gt; macro sayhello() return :( println(\u0026#34;Hello, world!\u0026#34;) ) end @sayhello (macro with 1 method) 在 Julia 的语法中，宏有一个专门的字符：@(at 符号)，后面是 macro NAME ... end 块中声明的唯一名称\u0026hellip;.。在这个例子中，编译器将用 @sayhello 替换所有的实例。\n:( println(\u0026#34;Hello, world!\u0026#34;) ) 当在 REPL 中输入 @sayhello 时，表达式会立即执行，因此我们只看到求值结果。\njulia\u0026gt; @sayhello() Hello, world! 现在，考虑一个稍微复杂的宏。\njulia\u0026gt; macro sayhello(name) return :( println(\u0026#34;Hello, \u0026#34;, $name) ) end @sayhello (macro with 1 method) 这个宏只取一个参数：name。当遇到 @sayhello 时，引用的表达式会被展开，将参数的值内插到最终的表达式中。\njulia\u0026gt; @sayhello(\u0026#34;human\u0026#34;) Hello, human 我们可以使用函数 macroexpand 查看引用的返回表达式（重要提示：这是调试宏的一个极其有用的工具）。\njulia\u0026gt; ex = macroexpand(Main, :(@sayhello(\u0026#34;human\u0026#34;)) ) :(Main.println(\u0026#34;Hello, \u0026#34;, \u0026#34;human\u0026#34;)) julia\u0026gt; typeof(ex) Expr 我们可以看到，\u0026ldquo;human\u0026rdquo; 的字面值已经被插进了表达式中。\n此外，还存在一个宏 @macroexpand，也许比 macroexpand 函数更方便一些。\njulia\u0026gt; @macroexpand @sayhello \u0026#34;human\u0026#34; :(println(\u0026#34;Hello, \u0026#34;, \u0026#34;human\u0026#34;)) 等等：为什么是宏？ 我们在前一节已经看到了一个函数 f(::Expr...) -\u0026gt; Expr。其实，macroexpand 也是这样一个函数。那么，为什么要有宏的存在呢？\n宏是必要的，因为它们在代码解析时执行，因此，宏允许程序员在完整程序运行之前生成并包含自定义代码的片段。为了说明两者的区别，请考虑下面的例子。\njulia\u0026gt; macro twostep(arg) println(\u0026#34;I execute at parse time. The argument is: \u0026#34;, arg) return :(println(\u0026#34;I execute at runtime. The argument is: \u0026#34;, $arg)) end @twostep (macro with 1 method) julia\u0026gt; ex = macroexpand(Main, :(@twostep :(1, 2, 3)) ); I execute at parse time. The argument is: :((1, 2, 3)) 当调用 macroexpand 时，会执行对 println 的第一次调用。结果的表达式只包含第二个 println。\njulia\u0026gt; typeof(ex) Expr julia\u0026gt; ex :(println(\u0026#34;I execute at runtime. The argument is: \u0026#34;, $(Expr(:copyast, :($(QuoteNode(:((1, 2, 3))))))))) julia\u0026gt; eval(ex) I execute at runtime. The argument is: (1, 2, 3) 宏调用 宏的调用有以下一般语法。\n@name expr1 expr2 ... @name(expr1, expr2, ...) 注意在宏名前有区别的 @，第一种形式的参数表达式之间没有逗号，第二种形式的 @ 名后没有空格。两种样式不能混用。例如，下面的语法与上面的例子不同，它将元组 (expr1, expr2, \u0026hellip;) 作为一个参数传递给宏。\n@name (expr1, expr2, ...) 在数组字面量（或解析）上调用宏的另一种方法是将两者并列，而不使用括号。在这种情况下，数组将是唯一输入宏的表达式。下面的语法是等价的（与 @name [a b] * v 不同）。\n@name[a b] * v @name([a b]) * v 需要强调的是，宏以表达式、字面值或符号的形式接收其参数。探索宏参数的一种方法是在宏体中调用 show 函数。\njulia\u0026gt; macro showarg(x) show(x) # ... remainder of macro, returning an expression end @showarg (macro with 1 method) julia\u0026gt; @showarg(a) :a julia\u0026gt; @showarg(1+1) :(1 + 1) julia\u0026gt; @showarg(println(\u0026#34;Yo!\u0026#34;)) :(println(\u0026#34;Yo!\u0026#34;)) 除了给定的参数列表之外，每个宏都会被传递额外的参数 __source__ 和 __module__。\n参数 __source__ 提供了关于来自宏调用的 @ 符号的解析器位置的信息（以 LineNumberNode 对象的形式）。这使得宏能够包含更好的错误诊断信息，并且通常被日志、字符串解析器宏和文档等使用，例如，也被用来实现 @LINE、@FILE 和 @DIR 宏。\n位置信息可以通过引用 __source__.line 和 __source__.file 来访问。\njulia\u0026gt; macro __LOCATION__(); return QuoteNode(__source__); end @__LOCATION__ (macro with 1 method) julia\u0026gt; dump( @__LOCATION__( )) LineNumberNode line: Int64 2 file: Symbol none 参数 __module__ 提供了关于宏调用的扩展上下文的信息（以 Module 对象的形式）。这允许宏查找上下文信息，如现有的绑定，或者将该值作为额外的参数插入到在当前模块中做自省的运行时函数调用中。\n构建一个高级宏 这里是 Julia 的 @assert 宏的简化定义。\njulia\u0026gt; macro assert(ex) return :( $ex ? nothing : throw(AssertionError($(string(ex)))) ) end @assert (macro with 1 method) 这个宏可以这样使用。\njulia\u0026gt; @assert 1 == 1.0 julia\u0026gt; @assert 1 == 0 ERROR: AssertionError: 1 == 0 宏调用在解析时扩展到它的返回结果。这就相当于写。\n1 == 1.0 ? nothing : throw(AssertionError(\u0026#34;1 == 1.0\u0026#34;)) 1 == 0 ? nothing : throw(AssertionError(\u0026#34;1 == 0\u0026#34;)) 也就是说，在第一次调用中，表达式 :(1 == 1.0) 被拼接到测试条件槽中，而 string(:(1 == 1.0)) 的值被拼接到断言消息槽中。这样构造出来的整个表达式，就被放到了发生 @assert 宏调用的语法树中。然后在执行时，如果测试表达式评估为真，那么返回 nothing，而如果测试为假，则会引发一个错误，表明断言表达式是假的。注意，如果把这个写成函数就不行了，因为只有条件的值，不可能在错误信息中显示计算条件的表达式。\nJulia Base 中 @assert 的实际定义比较复杂。它允许用户有选择地指定自己的错误信息，而不是只打印失败的表达式。就像在参数数可变的函数（Varargs Functions）中一样，在最后一个参数后面用省略号来指定。\njulia\u0026gt; macro assert(ex, msgs...) msg_body = isempty(msgs) ? ex : msgs[1] msg = string(msg_body) return :($ex ? nothing : throw(AssertionError($msg))) end @assert (macro with 1 method) 现在 @assert 有两种操作模式，取决于它接收到的参数数量！如果只有一个参数，那么 msgs 捕获的表达式元组将是空的，它的行为和上面的简单定义一样。如果只有一个参数，msgs 捕获的表达式元组将是空的，它的行为与上面的简单定义相同。但现在如果用户指定了第二个参数，它将被打印在消息正文中，而不是失败的表达式。你可以用 @macroexpand 宏来检查宏扩展的结果。\njulia\u0026gt; @macroexpand @assert a == b :(if Main.a == Main.b Main.nothing else Main.throw(Main.AssertionError(\u0026#34;a == b\u0026#34;)) end) julia\u0026gt; @macroexpand @assert a==b \u0026#34;a should equal b!\u0026#34; :(if Main.a == Main.b Main.nothing else Main.throw(Main.AssertionError(\u0026#34;a should equal b!\u0026#34;)) end) 实际的 @assert 宏还可以处理另一种情况：如果除了打印 \u0026ldquo;a should equal b\u0026rdquo; 之外，我们还想打印它们的值呢？人们可能会天真地尝试在自定义消息中使用字符串插值，例如，@assert a==b \u0026quot;a ($a) should equal b ($b)!\u0026quot;，但这在上面的宏中不会像预期的那样工作。你能明白为什么吗？从字符串插值回想一下，插值后的字符串会被改写成对字符串的调用。比较一下。\njulia\u0026gt; typeof(:(\u0026#34;a should equal b\u0026#34;)) String julia\u0026gt; typeof(:(\u0026#34;a ($a) should equal b ($b)!\u0026#34;)) Expr julia\u0026gt; dump(:(\u0026#34;a ($a) should equal b ($b)!\u0026#34;)) Expr head: Symbol string args: Array{Any}((5,)) 1: String \u0026#34;a (\u0026#34; 2: Symbol a 3: String \u0026#34;) should equal b (\u0026#34; 4: Symbol b 5: String \u0026#34;)!\u0026#34; 因此，现在宏不是在 msg_body 中得到一个普通的字符串，而是接收一个完整的表达式，这个表达式需要被评估，以便按照预期的方式显示。这可以直接拼接到返回的表达式中，作为字符串调用的一个参数；完整的实现请参见 error.jl。\n@assert 宏很好地利用了拼接成引号的表达式，简化了宏体内部对表达式的操作。\n卫生宏 在比较复杂的宏中会出现一个问题，那就是卫生问题。简而言之，宏必须确保它们在返回的表达式中引入的变量不会意外地与它们扩展到的周围代码中的现有变量发生冲突。相反，作为参数传入宏中的表达式往往要在周围代码的上下文中进行评估，与现有变量进行交互和修改。另一个关注点来自于一个事实，即一个宏可能会在与它被定义的模块不同的地方被调用。在这种情况下，我们需要确保所有的全局变量被解析到正确的模块中。与具有文本宏扩展的语言（如C语言）相比，Julia 已经有了很大的优势，因为它只需要考虑返回的表达式。所有其他的变量（比如上面 @assert 中的 msg）都遵循正常的作用域块行为。\n为了证明这些问题，让我们考虑写一个 @time 宏，它接受一个表达式作为参数，记录时间，评估表达式，再次记录时间，打印前后时间的差值，然后以表达式的值作为其最终值。这个宏可能是这样的。\nmacro time(ex) return quote local t0 = time_ns() local val = $ex local t1 = time_ns() println(\u0026#34;elapsed time: \u0026#34;, (t1-t0)/1e9, \u0026#34; seconds\u0026#34;) val end end 在这里，我们希望 t0、t1 和 val 是私有的临时变量，我们希望 time 引用 Julia Base 中的 time 函数，而不是用户可能拥有的任何 time 变量（同样适用于 println）。想象一下，如果用户表达式 ex 也包含了对一个叫 t0 的变量的赋值，或者定义了自己的 time 变量，可能会出现的问题。我们可能会得到错误，或者神秘的不正确行为。\nJulia 的宏扩展器用以下方式解决了这些问题。首先，宏结果中的变量被分为局部或全局。如果一个变量被分配给（而不是声明为全局）、声明为局部，或者被用作函数参数名，那么它被认为是局部的。否则，它被认为是全局变量。局部变量就会被重命名为唯一的（使用 gensym 函数，生成新的符号），全局变量则在宏定义环境中解决。因此，上述两个问题都得到了处理；宏的局部变量不会与任何用户变量冲突，time 和 println 将引用 Julia Base 定义。\n然而，仍然存在一个问题。考虑下面这个宏的使用。\nmodule MyModule import Base.@time time() = ... # compute something @time time() end 这里的用户表达式 ex 是对 time 的调用，但不是宏使用的那个 time 函数。它显然是指 MyModule.time。因此我们必须安排 ex 中的代码在宏调用环境中进行解析。这可以通过用 esc 对表达式进行\u0026quot;转义\u0026quot;来实现。\nmacro time(ex) ... local val = $(esc(ex)) ... end 以这种方式包装的表达式，宏扩展器不会管它，只需逐字粘贴到输出中即可。因此它将在宏调用环境中被解析。\n在必要的时候，可以利用这种转义机制来\u0026quot;违反\u0026quot;卫生，以便引入或操作用户变量。例如，下面的宏在调用环境中将 x 设为零。\njulia\u0026gt; macro zerox() return esc(:(x = 0)) end @zerox (macro with 1 method) julia\u0026gt; function foo() x = 1 @zerox return x # is zero end foo (generic function with 1 method) julia\u0026gt; foo() 0 这种对变量的操作应谨慎使用，但偶尔也很方便。\n掌握正确的卫生规则可能是一个艰巨的挑战。在使用宏之前，你可能需要考虑一个函数闭包是否足够。另一个有用的策略是将尽可能多的工作推迟到运行时。例如，许多宏简单地将其参数包裹在 QuoteNode 或其他类似的 Expr 中。一些例子包括 @task body，它简单地返回 schedule(Task(()-\u0026gt; $body))，以及 @eval expr，它简单地返回 eval(QuoteNode(expr))。\n为了演示，我们可以将上面的 @time 例子重写为。\nmacro time(expr) return :(timeit(() -\u0026gt; $(esc(expr)))) end function timeit(f) t0 = time_ns() val = f() t1 = time_ns() println(\u0026#34;elapsed time: \u0026#34;, (t1-t0)/1e9, \u0026#34; seconds\u0026#34;) return val end 然而，我们不这样做是有充分的理由的：将 expr 包装在一个新的作用域块中（匿名函数）也会稍微改变表达式的含义（其中任何变量的作用域），同时我们希望 @time 可以使用，而对被包装的代码影响最小。\n宏和调度 宏，就像 Julia 函数一样，是通用的。这意味着它们也可以有多个方法定义，这要归功于多重分派。\njulia\u0026gt; macro m end @m (macro with 0 methods) julia\u0026gt; macro m(args...) println(\u0026#34;$(length(args))arguments\u0026#34;) end @m (macro with 1 method) julia\u0026gt; macro m(x,y) println(\u0026#34;Two arguments\u0026#34;) end @m (macro with 2 methods) julia\u0026gt; @m \u0026#34;asd\u0026#34; 1 arguments julia\u0026gt; @m 1 2 Two arguments 然而我们应该记住，宏调度是基于交给宏的 AST 类型，而不是 AST 在运行时评估的类型。\njulia\u0026gt; macro m(::Int) println(\u0026#34;An Integer\u0026#34;) end @m (macro with 3 methods) julia\u0026gt; @m 2 An Integer julia\u0026gt; x = 2 2 julia\u0026gt; @m x 1 arguments 代码生成 当需要大量重复的模板代码时，通常会以编程方式生成，以避免冗余。在大多数语言中，这需要一个额外的构建步骤，以及一个单独的程序来生成重复的代码。在 Julia 中，表达式插值和 eval 允许这样的代码生成在程序执行的正常过程中进行。例如，考虑以下自定义类型\nstruct MyNumber x::Float64 end # output 我们想为其添加一些方法。我们可以在下面的循环中以编程的方式进行。\nfor op = (:sin, :cos, :tan, :log, :exp) eval(quote Base.$op(a::MyNumber) = MyNumber($op(a.x)) end) end # output 现在我们可以用我们的自定义类型来使用这些函数。\njulia\u0026gt; x = MyNumber(π) MyNumber(3.141592653589793) julia\u0026gt; sin(x) MyNumber(1.2246467991473532e-16) julia\u0026gt; cos(x) MyNumber(-1.0) 这样一来，Julia 就像自己的预处理器一样，可以从语言内部生成代码。上面的代码可以使用 : 前缀引号的形式，写得稍显生硬。\nfor op = (:sin, :cos, :tan, :log, :exp) eval(:(Base.$op(a::MyNumber) = MyNumber($op(a.x)))) end 不过，这种使用 eval(quote(...)) 模式生成的语言内代码很常见，所以 Julia 自带了一个宏来缩写这种模式。\nfor op = (:sin, :cos, :tan, :log, :exp) @eval Base.$op(a::MyNumber) = MyNumber($op(a.x)) end @eval 宏重写了这个调用，使之与上述较长版本的调用完全等同。对于较长的生成代码块，给 @eval 的表达式参数可以是一个块。\n@eval begin # multiple lines end 非标准字符串字面值 从 Strings 中回想一下，以标识符为前缀的字符串字元称为非标准字符串字元，其语义可能与未加前缀的字符串字面值不同。例如\nr\u0026rdquo;^\\s*(?:#|$) \u0026ldquo;产生一个正则表达式对象，而不是一个字符串。 b \u0026ldquo;DATA\\xff\\u2200 \u0026ldquo;是一个[68,65,84,65,255,226,136,128]的字节数组文字。 也许令人惊讶的是，这些行为并没有被硬编码到Julia解析器或编译器中。相反，它们是由一个通用机制提供的自定义行为，任何人都可以使用：前缀的字符串字元被解析为对特别命名的宏的调用。例如，正则表达式宏就如下。\nmacro r_str(p) Regex(p) end 就是这样。这个宏表示应该将字符串字词r\u0026rdquo;^\\s*(?:#|$) \u0026ldquo;的字面内容传递给@r_str宏，并将扩展的结果放入字符串字词出现的语法树中。换句话说，表达式r\u0026rdquo;^\\s*(?:#|$) \u0026ldquo;相当于将下面的对象直接放入语法树中。\nRegex(\u0026#34;^\\\\s*(?:#|\\$)\u0026#34;) 字符串形式不仅更短、更方便，而且效率更高：由于正则表达式是编译的，而Regex对象实际上是在代码编译时创建的，所以编译只发生一次，而不是每次执行代码时。考虑一下如果正则表达式发生在循环中。\nfor line = lines m = match(r\u0026#34;^\\s*(?:#|$)\u0026#34;, line) if m === nothing # non-comment else # comment end end 由于正则表达式r\u0026rdquo;^/ds*(?:#|$) \u0026ldquo;在解析这段代码时被编译并插入语法树中，所以该表达式只被编译一次，而不是每次循环执行时都被编译。为了在不使用宏的情况下实现这个目标，必须这样写这个循环。\nre = Regex(\u0026#34;^\\\\s*(?:#|\\$)\u0026#34;) for line = lines m = match(re, line) if m === nothing # non-comment else # comment end end 此外，如果编译器不能确定regex对象在所有循环中都是恒定的，某些优化可能就无法实现，这就使得这个版本的效率仍然不如上面更方便的文字形式。当然，在有些情况下，非字面形式还是比较方便的：如果需要在正则表达式中插入一个变量，就必须采取这种比较啰嗦的方式；在正则表达式模式本身是动态的，有可能在每次循环迭代时发生变化的情况下，必须在每次迭代时构造一个新的正则表达式对象。然而，在绝大多数用例中，正则表达式并不是基于运行时数据来构造的。在这大多数情况下，将正则表达式写成编译时值的能力是非常宝贵的。\n与非标准字符串字元一样，非标准命令字元也是使用命令字元语法的前缀变体存在的。命令字元customliteral被解析为@custom_cmd \u0026ldquo;literal\u0026rdquo;。Julia本身不包含任何非标准的命令字元，但包可以利用这种语法。除了语法不同和用_cmd后缀代替_str后缀外，非标准命令字元的行为与非标准字符串字元完全相同。\n如果两个模块提供了名称相同的非标准字符串或命令字元，可以用模块名称来限定字符串或命令字元。例如，如果Foo和Bar都提供了非标准的字符串字元@x_str，那么可以写成Foo.x \u0026ldquo;字元 \u0026ldquo;或Bar.x \u0026ldquo;字元 \u0026ldquo;来区分两者。\n用户定义字符串字元的机制是深刻的、强大的。不仅Julia的非标准字元用它来实现，而且命令字元语法（echo \u0026quot;Hello, $person\u0026quot;）也用下面这个看似无害的宏来实现。\nmacro cmd(str) :(cmd_gen($(shell_parse(str)[1]))) end 当然，这个宏定义中使用的函数中隐藏着大量的复杂性，但它们只是函数，完全是用Julia编写的。你可以阅读它们的源码，并精确地看到它们的作用\u0026ndash;它们所做的只是构造表达式对象，以便插入到你的程序的语法树中。\n生成的函数\n一个非常特殊的宏是@generated，它允许你定义所谓的生成函数。这些函数能够根据其参数的类型生成专门的代码，其灵活性和/或代码量比使用多重调度时更少。宏在解析时与表达式一起工作，不能访问其输入的类型，而生成函数在参数类型已知时得到扩展，但函数尚未编译。\n生成函数声明不是执行一些计算或动作，而是返回一个引号的表达式，然后形成与参数类型相对应的方法的主体。当一个生成函数被调用时，它返回的表达式会被编译，然后运行。为了提高效率，通常会对结果进行缓存。而为了使之可推断，只有有限的语言子集可以使用。因此，生成函数提供了一种灵活的方式，将工作从运行时转移到编译时，但代价是对允许的构造有更大的限制。\n在定义生成函数时，与普通函数有五个主要区别。\n你用 @generated 宏来注释函数声明。这在AST中添加了一些信息，让编译器知道这是一个生成函数。 在生成函数的主体中，你只能访问参数的类型，而不能访问它们的值。 你不是计算一些东西或执行一些操作，而是返回一个引号的表达式，当它被评估时，就会执行你想要的东西。 生成函数只允许调用在生成函数定义之前定义的函数。(如果不遵守这一点，可能会得到引用未来世界时代函数的MethodErrors。) 生成的函数不得突变或观察任何非常态的全局状态（包括，例如，IO、锁、非本地字典或使用hasmethod）。这意味着它们只能读取全局常量，不能有任何副作用。换句话说，它们必须是完全纯粹的。由于实现上的限制，这也意味着它们目前不能定义闭包或生成器。 用一个例子来说明这一点是最简单的。我们可以将一个生成函数foo声明为\njulia\u0026gt; @generated function foo(x) Core.println(x) return :(x * x) end foo (generic function with 1 method) 请注意，函数体返回的是一个引号表达式，即:(x * x)，而不仅仅是x * x的值。\n从调用者的角度来看，这和正则函数是一样的；事实上，你不必知道你调用的是正则函数还是生成函数。让我们来看看foo是如何表现的。\njulia\u0026gt; x = foo(2); # note: output is from println() statement in the body Int64 julia\u0026gt; x # now we print x 4 julia\u0026gt; y = foo(\u0026#34;bar\u0026#34;); String julia\u0026gt; y \u0026#34;barbar\u0026#34; 所以，我们看到，在生成函数的主体中，x是传递的参数的类型，而生成函数返回的值，是我们从定义中返回的引用表达式的评估结果，现在的值是x。\n如果我们用已经使用过的类型再次评估foo，会发生什么？\njulia\u0026gt; foo(4) 16 注意，没有打印出Int64的结果。我们可以看到，这里只针对特定的参数类型集执行了一次生成函数的主体，结果被缓存。之后，对于本例来说，第一次调用时生成函数返回的表达式被重新用作方法体。但是，实际的缓存行为是一种实现定义的性能优化，所以过于依赖这种行为是无效的。\n生成函数的次数可能只有一次，但也可能更频繁，或者看起来根本没有发生。因此，你永远不应该写一个有副作用的生成函数\u0026ndash;副作用何时发生，多久发生一次，都是没有定义的。(这对宏来说也是如此\u0026ndash;就像对宏一样，在生成函数中使用eval是一个标志，表明你做了一些错误的事情。) 然而，与宏不同的是，运行时系统无法正确处理对eval的调用，所以不允许使用它。\n同样重要的是看@生成函数如何与方法重新定义交互。按照正确的@生成函数不能观察任何可突变的状态或引起任何全局状态的突变的原则，我们看到以下行为。观察生成函数不能调用任何在生成函数本身定义之前没有定义的方法。\n最初f(x)有一个定义\njulia\u0026gt; f(x) = \u0026#34;original definition\u0026#34;; 定义其他使用f(x)的操作。\njulia\u0026gt; g(x) = f(x); julia\u0026gt; @generated gen1(x) = f(x); julia\u0026gt; @generated gen2(x) = :(f(x)); 现在我们为f(x)添加一些新的定义。\njulia\u0026gt; f(x::Int) = \u0026#34;definition for Int\u0026#34;; julia\u0026gt; f(x::Type{Int}) = \u0026#34;definition for Type{Int}\u0026#34;; 并比较这些结果有何不同。\njulia\u0026gt; f(1) \u0026#34;definition for Int\u0026#34; julia\u0026gt; g(1) \u0026#34;definition for Int\u0026#34; julia\u0026gt; gen1(1) \u0026#34;original definition\u0026#34; julia\u0026gt; gen2(1) \u0026#34;definition for Int\u0026#34; 生成函数的每个方法都有自己的定义函数视图。\njulia\u0026gt; @generated gen1(x::Real) = f(x); julia\u0026gt; gen1(1) \u0026#34;definition for Type{Int}\u0026#34; 上面的生成函数foo例子并没有做任何普通函数foo(x) = x * x不能做的事情（除了在第一次调用时打印类型，并产生较高的开销）。然而，生成函数的强大之处在于它能够根据传递给它的类型计算不同的引号表达式。\njulia\u0026gt; @generated function bar(x) if x \u0026lt;: Integer return :(x ^ 2) else return :(x) end end bar (generic function with 1 method) julia\u0026gt; bar(4) 16 julia\u0026gt; bar(\u0026#34;baz\u0026#34;) \u0026#34;baz\u0026#34; (当然，这个人为的例子可以更容易地使用多个调度来实现\u0026hellip;)\n滥用这一点将破坏运行时系统并导致未定义的行为。\njulia\u0026gt; @generated function baz(x) if rand() \u0026lt; .9 return :(x^2) else return :(\u0026#34;boo!\u0026#34;) end end baz (generic function with 1 method) 由于生成的函数主体是非确定的，所以它的行为以及所有后续代码的行为都是未定义的。\n不要抄袭这些例子!\n这些例子希望对说明生成函数的工作方式有所帮助，包括在定义端和调用端；但是，不要复制它们，原因如下。\nfoo函数有副作用 (对Core.println的调用), 而这些副作用究竟何时发生, 多久发生一次, 或发生多少次, 都是没有定义的 bar函数解决了一个问题，而这个问题最好用多重调度来解决\u0026ndash;定义bar(x) = x和bar(x::Integer) = x ^ 2会做同样的事情，但它既简单又快速。 baz函数是病态的 请注意，在生成的函数中不应该尝试的操作集是没有限制的，运行时系统目前只能检测到无效操作的一个子集。还有许多其他的操作会在不通知的情况下简单地破坏运行时系统，通常以微妙的方式与坏定义没有明显的联系。因为函数生成器是在推理过程中运行的，它必须尊重该代码的所有限制。\n一些不应该尝试的操作包括。\n缓存本地指针 以任何方式与Core.Compiler的内容或方法进行交互。 观察任何可变状态。\n对生成的函数的推理可以在任何时候运行，包括在您的代码试图观察或突变此状态时。 占用任何锁。你调用的C代码可以在内部使用锁，（例如，调用malloc是没有问题的，即使大多数实现在内部需要锁），但不要试图在执行Julia代码时持有或获取任何锁。 调用在生成函数主体之后定义的任何函数。对于增量加载的预编译模块，这个条件是放宽的，允许调用模块中的任何函数。 好了，现在我们对生成函数的工作原理有了更好的理解，让我们用它们来构建一些更高级的（有效的）功能\u0026hellip;\n一个高级的例子\n茱莉亚的基础库有一个内部的sub2ind函数，用来计算一个线性索引到n维数组中，基于n个多线性索引的集合，换句话说，就是计算可以用A[i]来索引到数组A中的索引i，而不是A[x,y,z,\u0026hellip;]。一种可能的实现方式如下。\njulia\u0026gt; function sub2ind_loop(dims::NTuple{N}, I::Integer...) where N ind = I[N] - 1 for i = N-1👎1 ind = I[i]-1 + dims[i]*ind end return ind + 1 end sub2ind_loop (generic function with 1 method) julia\u0026gt; sub2ind_loop((3, 5), 1, 2) 4 同样的事情也可以用递归来完成。\njulia\u0026gt; sub2ind_rec(dims::Tuple{}) = 1; julia\u0026gt; sub2ind_rec(dims::Tuple{}, i1::Integer, I::Integer...) = i1 == 1 ? sub2ind_rec(dims, I...) : throw(BoundsError()); julia\u0026gt; sub2ind_rec(dims::Tuple{Integer, Vararg{Integer}}, i1::Integer) = i1; julia\u0026gt; sub2ind_rec(dims::Tuple{Integer, Vararg{Integer}}, i1::Integer, I::Integer...) = i1 + dims[1] * (sub2ind_rec(Base.tail(dims), I...) - 1); julia\u0026gt; sub2ind_rec((3, 5), 1, 2) 4 这两种实现虽然不同，但本质上都是一样的：在数组的维度上进行运行时循环，将每个维度的偏移量收集到最后的索引中。\n然而，我们在循环中所需要的所有信息都嵌入在参数的类型信息中。因此，我们可以利用生成函数将迭代移动到编译时；用编译器的说法，我们使用生成函数手动展开循环。身体变得几乎相同，但我们不是计算线性指数，而是建立一个计算指数的表达式。\njulia\u0026gt; @generated function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N ex = :(I[$N] - 1) for i = (N - 1)👎1 ex = :(I[$i] - 1 + dims[$i] * $ex) end return :($ex + 1) end sub2ind_gen (generic function with 1 method) julia\u0026gt; sub2ind_gen((3, 5), 1, 2) 4 这将产生什么代码呢？\n一个简单的方法是将主体提取到另一个（常规）函数中。\njulia\u0026gt; @generated function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N return sub2ind_gen_impl(dims, I...) end sub2ind_gen (generic function with 1 method) julia\u0026gt; function sub2ind_gen_impl(dims::Type{T}, I...) where T \u0026lt;: NTuple{N,Any} where N length(I) == N || return :(error(\u0026#34;partial indexing is unsupported\u0026#34;)) ex = :(I[$N] - 1) for i = (N - 1)👎1 ex = :(I[$i] - 1 + dims[$i] * $ex) end return :($ex + 1) end sub2ind_gen_impl (generic function with 1 method) 现在我们可以执行sub2ind_gen_impl并检查它返回的表达式。\njulia\u0026gt; sub2ind_gen_impl(Tuple{Int,Int}, Int, Int) :(((I[1] - 1) + dims[1] * (I[2] - 1)) + 1) 所以，这里要用到的方法体根本不包含循环\u0026ndash;只是索引到两个元组，乘法和加/减法。所有的循环都是在编译时进行的，我们完全避免了执行过程中的循环。因此，我们对每个类型只进行一次循环，在本例中，每N个类型只循环一次（除非在函数生成一次以上的边缘情况下\u0026ndash;见上面的免责声明）。\n可选生成的函数\n生成函数可以在运行时实现高效率，但也有编译时间成本：每一个具体参数类型的组合都必须生成一个新的函数体。通常情况下，Julia能够编译 \u0026ldquo;通用 \u0026ldquo;版本的函数，这些函数将适用于任何参数，但对于生成函数，这是不可能的。这意味着大量使用生成函数的程序可能无法静态编译。\n为了解决这个问题，语言提供了编写正常的、非生成函数的替代实现的语法。应用到上面的sub2ind例子中，会是这样的。\nfunction sub2ind_gen(dims::NTuple{N}, I::Integer...) where N if N != length(I) throw(ArgumentError(\u0026#34;Number of dimensions must match number of indices.\u0026#34;)) end if @generated ex = :(I[$N] - 1) for i = (N - 1)👎1 ex = :(I[$i] - 1 + dims[$i] * $ex) end return :($ex + 1) else ind = I[N] - 1 for i = (N - 1)👎1 ind = I[i] - 1 + dims[i]*ind end return ind + 1 end end 在内部，这段代码创建了函数的两个实现：一个是生成的，其中使用了if @generated中的第一个块，另一个是正常的，其中使用了 else块。在if @generated块的then部分内部，代码的语义与其他生成函数相同：参数名指的是类型，代码应该返回一个表达式。可能会出现多个if @生成块，在这种情况下，生成的实现使用所有的then块，而备用的实现使用所有的else块。\n注意，我们在函数的顶部添加了一个错误检查。这段代码在两个版本中都是通用的，并且在两个版本中都是运行时代码（它将被引用并作为生成版本的表达式返回）。这意味着局部变量的值和类型在代码生成时是不可用的\u0026ndash;代码生成代码只能看到参数的类型。\n在这种风格的定义中，代码生成功能本质上是一种可选的优化。编译器在方便的情况下会使用它，但其他情况下可能会选择使用正常的实现来代替。这种风格是首选，因为它允许编译器做出更多的决定，并以更多的方式编译程序，而且正常代码比代码生成代码更易读。但是，使用哪种实现取决于编译器的实现细节，所以两种实现的行为必须完全相同。\n"},"name":"元编程","published":"2020-12-29T00:00:00+08:00","summary":"Metaprogramming","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-12-29-metaprogramming/"},{"content":{"html":"\u003ch2 id=\"julia-repl\"\u003eJulia REPL\u003c/h2\u003e\n\u003cp\u003eJulia 在 \u003ccode\u003ejulia\u003c/code\u003e 可执行文件中内置了一个功能齐全的交互式命令行 REPL（read-eval-print loop）。除了允许快速、简单地评估 Julia 语句外，它还具有可搜索的历史记录、tab-补全、许多有用的键绑定以及专门的帮助和 \u003ccode\u003eshell\u003c/code\u003e 模式。REPL 可以通过简单地调用 \u003ccode\u003ejulia\u003c/code\u003e 而不使用参数或双击可执行文件来启动。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ julia\n\n               _\n   _       _ _\u003cspan class=\"o\"\u003e(\u003c/span\u003e_\u003cspan class=\"o\"\u003e)\u003c/span\u003e_     \u003cspan class=\"p\"\u003e|\u003c/span\u003e  Documentation: https://docs.julialang.org\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003e_\u003cspan class=\"o\"\u003e)\u003c/span\u003e     \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e_\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e_\u003cspan class=\"o\"\u003e)\u003c/span\u003e    \u003cspan class=\"p\"\u003e|\u003c/span\u003e\n   _ _   _\u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e_  __ _   \u003cspan class=\"p\"\u003e|\u003c/span\u003e  Type \u003cspan class=\"s2\"\u003e\u0026#34;?\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e help, \u003cspan class=\"s2\"\u003e\u0026#34;]?\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e Pkg help.\n  \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e/ _\u003cspan class=\"sb\"\u003e`\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"p\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e_\u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e_\u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"p\"\u003e|\u003c/span\u003e  Version 1.5.0 \u003cspan class=\"o\"\u003e(\u003c/span\u003e2020-08-01\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n _/ \u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e_\u003cspan class=\"s1\"\u003e\u0026#39;_|_|_|\\__\u0026#39;\u003c/span\u003e_\u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"p\"\u003e|\u003c/span\u003e  Official https://julialang.org/ release\n\u003cspan class=\"p\"\u003e|\u003c/span\u003e__/                   \u003cspan class=\"p\"\u003e|\u003c/span\u003e\n\n\njulia\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e要退出交互式会话，请键入 \u003ccode\u003e^D\u003c/code\u003e - 控制键与 \u003ccode\u003ed\u003c/code\u003e 键一起在空行上键入，或键入 \u003ccode\u003eexit()\u003c/code\u003e 后跟回车或回车键。REPL 会用一个横幅和 \u003ccode\u003ejulia\u0026gt;\u003c/code\u003e 提示来欢迎您。\u003c/p\u003e\n\u003ch3 id=\"不同的提示模式\"\u003e不同的提示模式\u003c/h3\u003e\n\u003ch4 id=\"朱利安模式\"\u003e朱利安模式\u003c/h4\u003e\n\u003cp\u003eREPL 有四种主要的操作模式。第一种也是最常见的是 Julian 提示。这是默认的操作模式；每个新行都以 \u003ccode\u003ejulia\u0026gt;\u003c/code\u003e 开始。在这里您可以输入 Julia 表达式。在输入完整的表达式后点击回车或回车将评估该条目并显示最后一个表达式的结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; string\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e + 2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在交互式工作中，有许多独特的有用功能。除了显示结果之外，REPL 还将结果绑定到变量 \u003ccode\u003eans\u003c/code\u003e 上。行上的分号可以作为一个标志来抑制显示结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; string\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e * 4\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; ans\n\u003cspan class=\"s2\"\u003e\u0026#34;12\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Julia 模式下，REPL 支持称为提示粘贴(\u003cem\u003eprompt pasting\u003c/em\u003e)的东西。当把以 \u003ccode\u003ejulia\u0026gt;\u003c/code\u003e 开头的文本粘贴到 REPL 中时，这个功能会被激活。在这种情况下，只有以 \u003ccode\u003ejulia\u0026gt;\u003c/code\u003e 开头的表达式会被解析，其他表达式会被删除。这使得您可以粘贴从 REPL 会话中复制的代码块，而无需清除提示和输出。这个功能默认是启用的，但可以通过 \u003ccode\u003eREPL.enable_promptpaste(::Bool)\u003c/code\u003e 来禁用或启用。如果启用了，您可以直接将本段上面的代码块粘贴到 REPL 中试试。这个功能在标准的 Windows 命令提示符上不起作用，因为它在检测粘贴发生时的局限性。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eusing REPL\nREPL.enable_promptpaste\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 禁用 prompt pasting\u003c/span\u003e\nREPL.enable_promptpaste\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 启用 prompt pasting\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对象在 REPL 中使用带有特定 \u003ca href=\"https://docs.julialang.org/en/v1/base/io-network/#Base.IOContext\"\u003eIOContext\u003c/a\u003e 的 \u003ca href=\"https://docs.julialang.org/en/v1/base/io-network/#Base.show-Tuple%7BIO,Any%7D\"\u003eshow\u003c/a\u003e 函数进行打印。特别是，\u003ccode\u003e:limit\u003c/code\u003e 属性被设置为 true。其他属性可以在某些 \u003ccode\u003eshow\u003c/code\u003e 方法中接收一个默认值，如果它还没有被设置，比如 \u003ccode\u003e:compact\u003c/code\u003e。作为实验性功能，可以通过 \u003ccode\u003eBase.active_repl.options.iocontext\u003c/code\u003e 字典来指定 REPL 使用的属性（将值关联到属性）。例如:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; rand\u003cspan class=\"o\"\u003e(\u003c/span\u003e2, 2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2×2 Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eFloat64,2\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 0.8833    0.329197\n 0.719708  0.59114\n\njulia\u0026gt; show\u003cspan class=\"o\"\u003e(\u003c/span\u003eIOContext\u003cspan class=\"o\"\u003e(\u003c/span\u003estdout, :compact \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;text/plain\u0026#34;\u003c/span\u003e, rand\u003cspan class=\"o\"\u003e(\u003c/span\u003e2, 2\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n 0.43540323669187075  0.15759787870609387\n 0.2540832269192739   0.4597637838786053\njulia\u0026gt; Base.active_repl.options.iocontext\u003cspan class=\"o\"\u003e[\u003c/span\u003e:compact\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e false\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; rand\u003cspan class=\"o\"\u003e(\u003c/span\u003e2, 2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2×2 Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eFloat64,2\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 0.2083967319174056  0.13330606013126012\n 0.6244375177790158  0.9777957560761545\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e为了在启动时自动定义这个字典的值，可以使用 \u003ccode\u003e~/.julia/config/startup.jl\u003c/code\u003e 文件中的 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/REPL/#Base.atreplinit\"\u003e\u003ccode\u003eatreplinit\u003c/code\u003e\u003c/a\u003e 函数，例如:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003eatreplinit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"n\"\u003erepl\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiocontext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecompact\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"帮助模式\"\u003e帮助模式\u003c/h4\u003e\n\u003cp\u003e当光标在行首时，可以通过键入 \u003ccode\u003e?\u003c/code\u003e 来将提示变为帮助模式。Julia 将尝试打印帮助模式下输入的任何内容的帮助或文档。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; ? \u003cspan class=\"c1\"\u003e# upon typing ?, the prompt changes (in place) to: help?\u0026gt;\u003c/span\u003e\n\nhelp?\u0026gt; string\nsearch: string String Cstring Cwstring RevString randstring bytestring SubString\n\n  string\u003cspan class=\"o\"\u003e(\u003c/span\u003exs...\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n  Create a string from any values using the print \u003cspan class=\"k\"\u003efunction\u003c/span\u003e.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也可以查询宏、类型和变量:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ehelp?\u0026gt; @time\n  @time\n\n  A macro to execute an expression, printing the \u003cspan class=\"nb\"\u003etime\u003c/span\u003e it took to execute, the number of allocations,\n  and the total number of bytes its execution caused to be allocated, before returning the value of the\n  expression.\n\n  See also @timev, @timed, @elapsed, and @allocated.\n\nhelp?\u0026gt; Int32\nsearch: Int32 UInt32\n\n  Int32 \u0026lt;: Signed\n\n  32-bit signed integer type.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e按行首的退格键可以退出帮助模式。\u003c/p\u003e\n\u003ch4 id=\"shell-模式\"\u003eShell 模式\u003c/h4\u003e\n\u003cp\u003e就像帮助模式对于快速访问文档很有用一样，另一个常见的任务是使用系统 shell 来执行系统命令。就像 \u003ccode\u003e?\u003c/code\u003e 进入帮助模式时一样, 在行首按下分号(\u003ccode\u003e;\u003c/code\u003e)会进入 shell 模式。而且可以在行首按退格键退出。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# upon typing ;, the prompt changes (in place) to: shell\u0026gt;\u003c/span\u003e\n\nshell\u0026gt; \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e hello\nhello\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意:\u003c/p\u003e\n\u003cp\u003e对于 Windows 用户来说，Julia 的 shell 模式不暴露 windows shell 命令。因此，这将会失败:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# upon typing ;, the prompt changes (in place) to: shell\u0026gt;\u003c/span\u003e\n\nshell\u0026gt; dir\nERROR: IOError: could not spawn \u003cspan class=\"sb\"\u003e`\u003c/span\u003edir\u003cspan class=\"sb\"\u003e`\u003c/span\u003e: no such file or directory \u003cspan class=\"o\"\u003e(\u003c/span\u003eENOENT\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nStacktrace!\n.......\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e不过，你可以像这样访问 PowerShell:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# upon typing ;, the prompt changes (in place) to: shell\u0026gt;\u003c/span\u003e\n\nshell\u0026gt; powershell\nWindows PowerShell\nCopyright \u003cspan class=\"o\"\u003e(\u003c/span\u003eC\u003cspan class=\"o\"\u003e)\u003c/span\u003e Microsoft Corporation. All rights reserved.\nPS C:\u003cspan class=\"se\"\u003e\\U\u003c/span\u003esers\u003cspan class=\"se\"\u003e\\e\u003c/span\u003elm\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u0026hellip;而且对 \u003ccode\u003ecmd.exe\u003c/code\u003e 的访问是这样的（见 \u003ccode\u003edir\u003c/code\u003e 命令）:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# upon typing ;, the prompt changes (in place) to: shell\u0026gt;\u003c/span\u003e\n\nshell\u0026gt; cmd\nMicrosoft Windows \u003cspan class=\"o\"\u003e[\u003c/span\u003eversion 10.0.17763.973\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003ec\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"m\"\u003e2018\u003c/span\u003e Microsoft Corporation. All rights reserved.\nC:\u003cspan class=\"se\"\u003e\\U\u003c/span\u003esers\u003cspan class=\"se\"\u003e\\e\u003c/span\u003elm\u0026gt;dir\n Volume in drive C has no label\n Volume Serial Number is 1643-0CD7\n  Directory of C:\u003cspan class=\"se\"\u003e\\U\u003c/span\u003esers\u003cspan class=\"se\"\u003e\\e\u003c/span\u003elm\n\n29/01/2020  22:15    \u0026lt;DIR\u0026gt;          .\n29/01/2020  22:15    \u0026lt;DIR\u0026gt;          ..\n02/02/2020  08:06    \u0026lt;DIR\u0026gt;          .atom\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"搜索模式\"\u003e搜索模式\u003c/h4\u003e\n\u003cp\u003e在上述所有模式中，执行的行数都会被保存到历史文件中，可以进行搜索。要在以前的历史记录中进行增量搜索，输入 \u003ccode\u003e^R\u003c/code\u003e\u0026ndash;控制键和 \u003ccode\u003er\u003c/code\u003e 键。提示符将变为(\u003ccode\u003ereverse-i-search\u003c/code\u003e):，当你输入搜索查询时，搜索查询将出现在引号中。当你输入更多的内容时，与查询相匹配的最新结果会动态地更新到冒号的右边。如果要使用相同的查询找到一个较早的结果，只需再次输入 \u003ccode\u003e^R\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e就像 \u003ccode\u003e^R\u003c/code\u003e 是反向搜索一样，\u003ccode\u003e^S\u003c/code\u003e 是正向搜索，并提示(\u003ccode\u003ei-search\u003c/code\u003e):。两者可以相互结合使用，分别在上一个或下一个匹配结果中移动。\u003c/p\u003e\n\u003ch3 id=\"键绑定\"\u003e键绑定\u003c/h3\u003e\n\u003cp\u003eJulia REPL 大量使用了键绑定。上面已经介绍了几个控制键绑定（\u003ccode\u003e^D\u003c/code\u003e 用于退出，\u003ccode\u003e^R\u003c/code\u003e 和 \u003ccode\u003e^S\u003c/code\u003e 用于搜索），但还有更多。除了控制键，还有元键绑定。这些因平台不同而变化较大，但大多数终端默认使用 \u003ccode\u003ealt-\u003c/code\u003e 或 \u003ccode\u003eoption-\u003c/code\u003e 按住键发送元键（也可以配置成这样），或者按 \u003ccode\u003eEsc\u003c/code\u003e 键，然后按键。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eKeybinding\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eProgram control\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e^D\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e退出(当缓存为空时)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e^C\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e中断或取消\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e^L\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e清理控制台屏幕\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eReturn/Enter, \u003ccode\u003e^J\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e新行，如果完成了就执行\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003emeta-Return/Enter\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e插入新行而不执行\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e?\u003c/code\u003e 或 \u003ccode\u003e;\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e进入帮助或shell模式(当在行的开头时)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e^R\u003c/code\u003e, \u003ccode\u003e^S\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e递增式历史检索，如上所述\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"自定义键绑定\"\u003e自定义键绑定\u003c/h3\u003e\n\u003cp\u003eJulia 的 REPL 键绑定可以通过向 \u003ccode\u003eREPL.setup_interface\u003c/code\u003e 传递一个字典来完全定制用户的偏好。这个字典的键可以是字符或字符串。键 \u0026lsquo;*\u0026rsquo; 指的是默认操作。控制加字符x的绑定用\u0026quot;^x\u0026quot;表示。Meta 加x可以写成 \u0026ldquo;\\M-x\u0026rdquo; 或 \u0026ldquo;\\ex\u0026rdquo;，Control 加 x 可以写成 \u0026ldquo;\\C-x\u0026rdquo; 或 \u0026ldquo;^x\u0026rdquo;。自定义 keymap 的值必须是 nothing(表示输入应该被忽略)或接受签名的函数(\u003ccode\u003ePromptState\u003c/code\u003e, \u003ccode\u003eAbstractREPL\u003c/code\u003e, \u003ccode\u003eChar\u003c/code\u003e)。\u003ccode\u003eREPL.setup_interface\u003c/code\u003e 函数必须在 REPL 初始化之前被调用，通过在 atreplinit 注册操作。例如，要绑定上下方向键来移动历史记录而不需要前缀搜索，可以在 \u003ccode\u003e~/.julia/config/startup.jl\u003c/code\u003e 中放入以下代码。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003emykeys\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eDict\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}(\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e# Up Arrow\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;\\e[A\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eo\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eedit_move_up\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehistory_prev\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehist\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e# Down Arrow\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;\\e[B\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eo\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eedit_move_down\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehistory_next\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehist\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ecustomize_keys\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einterface\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetup_interface\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eextra_repl_keymap\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emykeys\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eatreplinit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecustomize_keys\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用户应该参考 \u003ccode\u003eLineEdit.jl\u003c/code\u003e 来发现键输入的可用操作。\u003c/p\u003e\n\u003ch3 id=\"tab-补全\"\u003eTab 补全\u003c/h3\u003e\n\u003cp\u003e在 REPL 的 Julian 和帮助模式下，可以输入函数或类型的前几个字符，然后按tab键，得到一个所有匹配的列表:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; stri\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\nstride     strides     string      strip\n\njulia\u0026gt; Stri\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\nStridedArray    StridedMatrix    StridedVecOrMat  StridedVector    String\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003etab 键也可以用来用它们的 Unicode 等价物替代 LaTeX 数学符号，并获得 LaTeX 匹配列表。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"se\"\u003e\\p\u003c/span\u003ei\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\njulia\u0026gt; π\n\u003cspan class=\"nv\"\u003eπ\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 3.1415926535897...\n\njulia\u0026gt; e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e1\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e1,0\u003cspan class=\"o\"\u003e]\u003c/span\u003e\njulia\u0026gt; e₁ \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e1,0\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n2-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eInt64,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\njulia\u0026gt; e\u003cspan class=\"se\"\u003e\\^\u003c/span\u003e1\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e 0\u003cspan class=\"o\"\u003e]\u003c/span\u003e\njulia\u0026gt; e¹ \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e 0\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n1×2 Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eInt64,2\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n \u003cspan class=\"m\"\u003e1\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\njulia\u0026gt; \u003cspan class=\"se\"\u003e\\s\u003c/span\u003eqrt\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# √ is equivalent to the sqrt function\u003c/span\u003e\njulia\u0026gt; √2\n1.4142135623730951\n\njulia\u0026gt; \u003cspan class=\"se\"\u003e\\h\u003c/span\u003ebar\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e](\u003c/span\u003eh\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e h / 2\u003cspan class=\"se\"\u003e\\p\u003c/span\u003ei\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\njulia\u0026gt; ħ\u003cspan class=\"o\"\u003e(\u003c/span\u003eh\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e h / 2π\nħ \u003cspan class=\"o\"\u003e(\u003c/span\u003egeneric \u003cspan class=\"k\"\u003efunction\u003c/span\u003e with \u003cspan class=\"m\"\u003e1\u003c/span\u003e method\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; \u003cspan class=\"se\"\u003e\\h\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"se\"\u003e\\h\u003c/span\u003eat              \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eermitconjmatrix  \u003cspan class=\"se\"\u003e\\h\u003c/span\u003ekswarow          \u003cspan class=\"se\"\u003e\\h\u003c/span\u003erectangle\n\u003cspan class=\"se\"\u003e\\h\u003c/span\u003eatapprox        \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eexagon           \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eookleftarrow     \u003cspan class=\"se\"\u003e\\h\u003c/span\u003erectangleblack\n\u003cspan class=\"se\"\u003e\\h\u003c/span\u003ebar             \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eexagonblack      \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eookrightarrow    \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eslash\n\u003cspan class=\"se\"\u003e\\h\u003c/span\u003eeartsuit        \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eksearow          \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eouse             \u003cspan class=\"se\"\u003e\\h\u003c/span\u003espace\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003eα\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\\alpha[TAB]\u0026#34;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# LaTeX completion also works in strings\u003c/span\u003e\njulia\u0026gt; \u003cspan class=\"nv\"\u003eα\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;α\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e完整的tab-补全列表可以在手册的 \u003ca href=\"https://docs.julialang.org/en/v1/manual/unicode-input/#Unicode-Input-1\"\u003eUnicode 输入\u003c/a\u003e部分找到。\u003c/p\u003e\n\u003cp\u003e路径补全适用于字符串和 julia 的 shell 模式:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/[TAB]\u0026#34;\u003c/span\u003e\n.dockerenv  .juliabox/   boot/        etc/         lib/         media/       opt/         root/        sbin/        sys/         usr/\n.dockerinit bin/         dev/         home/        lib64/       mnt/         proc/        run/         srv/         tmp/         var/\nshell\u0026gt; /\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n.dockerenv  .juliabox/   boot/        etc/         lib/         media/       opt/         root/        sbin/        sys/         usr/\n.dockerinit bin/         dev/         home/        lib64/       mnt/         proc/        run/         srv/         tmp/         var/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTab 补全可以帮助调查匹配输入参数的可用方法。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; max\u003cspan class=\"o\"\u003e([\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"c1\"\u003e# All methods are displayed, not shown here due to size of the list\u003c/span\u003e\n\njulia\u0026gt; max\u003cspan class=\"o\"\u003e([\u003c/span\u003e1, 2\u003cspan class=\"o\"\u003e]\u003c/span\u003e, \u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"c1\"\u003e# All methods where `Vector{Int}` matches as first argument\u003c/span\u003e\nmax\u003cspan class=\"o\"\u003e(\u003c/span\u003ex, y\u003cspan class=\"o\"\u003e)\u003c/span\u003e in Base at operators.jl:215\nmax\u003cspan class=\"o\"\u003e(\u003c/span\u003ea, b, c, xs...\u003cspan class=\"o\"\u003e)\u003c/span\u003e in Base at operators.jl:281\n\njulia\u0026gt; max\u003cspan class=\"o\"\u003e([\u003c/span\u003e1, 2\u003cspan class=\"o\"\u003e]\u003c/span\u003e, max\u003cspan class=\"o\"\u003e(\u003c/span\u003e1, 2\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"c1\"\u003e# All methods matching the arguments.\u003c/span\u003e\nmax\u003cspan class=\"o\"\u003e(\u003c/span\u003ex, y\u003cspan class=\"o\"\u003e)\u003c/span\u003e in Base at operators.jl:215\nmax\u003cspan class=\"o\"\u003e(\u003c/span\u003ea, b, c, xs...\u003cspan class=\"o\"\u003e)\u003c/span\u003e in Base at operators.jl:281\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e关键词也显示在 \u003ccode\u003e;\u003c/code\u003e 后面的建议方法中，见下面一行，其中 \u003ccode\u003elimit\u003c/code\u003e 和 \u003ccode\u003ekeepempty\u003c/code\u003e 是关键词参数:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; split\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;1 1 1\u0026#34;\u003c/span\u003e, \u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\nsplit\u003cspan class=\"o\"\u003e(\u003c/span\u003estr::AbstractString\u003cspan class=\"p\"\u003e;\u003c/span\u003e limit, keepempty\u003cspan class=\"o\"\u003e)\u003c/span\u003e in Base at strings/util.jl:302\nsplit\u003cspan class=\"o\"\u003e(\u003c/span\u003estr::T, splitter\u003cspan class=\"p\"\u003e;\u003c/span\u003e limit, keepempty\u003cspan class=\"o\"\u003e)\u003c/span\u003e where T\u0026lt;:AbstractString in Base at strings/util.jl:277\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e方法的补全使用类型推断，因此即使参数是函数输出的，也能看到参数是否匹配。函数需要类型稳定，完成才能够删除不匹配的方法。\u003c/p\u003e\n\u003cp\u003eTab 补全也可以帮助补全字段:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; import UUIDs\n\njulia\u0026gt; UUIDs.uuid\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\nuuid1        uuid4         uuid_version\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也可以补全函数输出的字段:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-sshell\" data-lang=\"sshell\"\u003ejulia\u0026gt; split(\u0026quot;\u0026quot;,\u0026quot;\u0026quot;)[1].[TAB]\nlastindex  offset  string\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e函数输出的字段完成采用类型推断，只有在函数类型稳定的情况下，它才能建议字段。\u003c/p\u003e\n\u003cp\u003e字典键也可以用 tab 补全:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Dict\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;qwer1\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt;1, \u003cspan class=\"s2\"\u003e\u0026#34;qwer2\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt;2, \u003cspan class=\"s2\"\u003e\u0026#34;asdf\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt;3\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDict\u003cspan class=\"o\"\u003e{\u003c/span\u003eString,Int64\u003cspan class=\"o\"\u003e}\u003c/span\u003e with \u003cspan class=\"m\"\u003e3\u003c/span\u003e entries:\n  \u003cspan class=\"s2\"\u003e\u0026#34;qwer2\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; \u003cspan class=\"m\"\u003e2\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026#34;asdf\u0026#34;\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; \u003cspan class=\"m\"\u003e3\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026#34;qwer1\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\njulia\u0026gt; foo\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;q[TAB]\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003eqwer1\u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003eqwer2\u003cspan class=\"s2\"\u003e\u0026#34;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003ejulia\u0026gt; foo[\u0026#34;\u003c/span\u003eqwer\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"自定义颜色\"\u003e自定义颜色\u003c/h3\u003e\n\u003cp\u003eJulia 和 REPL 所使用的颜色也是可以自定义的。要改变 Julia 提示符的颜色，您可以在您的 \u003ccode\u003e~/.julia/config/startup.jl\u003c/code\u003e 文件中添加以下内容，该文件应放在您的主目录中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ecustomize_colors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprompt_color\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_colors\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecyan\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eatreplinit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecustomize_colors\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可用的颜色键可以通过在 REPL 的帮助模式下输入 \u003ccode\u003eBase.text_colors\u003c/code\u003e 来查看。此外，对于支持 256 色的终端来说，整数 0 到 255 可以用作颜色键。\u003c/p\u003e\n\u003cp\u003e也可以通过在上面的 \u003ccode\u003ecustomize_colors\u003c/code\u003e 函数中设置 \u003ccode\u003erepl\u003c/code\u003e 的相应字段（分别为 \u003ccode\u003ehelp_color\u003c/code\u003e、\u003ccode\u003eshell_color\u003c/code\u003e、\u003ccode\u003einput_color\u003c/code\u003e 和 \u003ccode\u003eanswer_color\u003c/code\u003e）来改变帮助和 shell 提示符以及输入和回答文字的颜色。对于后两者，要确保 \u003ccode\u003eenvcolors\u003c/code\u003e 字段也设置为 false。\u003c/p\u003e\n\u003cp\u003e也可以通过使用 \u003ccode\u003eBase.text_colors[:bold]\u003c/code\u003e 作为颜色来应用粗体格式。例如，要用粗体字打印答案，可以使用下面的 \u003ccode\u003e~/.julia/config/startup.jl\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ecustomize_colors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eenvcolors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eanswer_color\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_colors\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ebold\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eatreplinit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecustomize_colors\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你也可以通过设置适当的环境变量来定制用于渲染警告和信息消息的颜色。例如，要分别用洋红色、黄色和青色来渲染错误、警告和信息消息，你可以在 \u003ccode\u003e~/.julia/config/startup.jl\u003c/code\u003e 文件中添加以下内容:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"nb\"\u003eENV\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;JULIA_ERROR_COLOR\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003emagenta\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eENV\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;JULIA_WARN_COLOR\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eyellow\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eENV\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;JULIA_INFO_COLOR\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecyan\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"terminalmenus\"\u003eTerminalMenus\u003c/h3\u003e\n\u003cp\u003eTerminalMenus 是 Julia REPL 的一个子模块，可以在终端中实现小型、低配的交互式菜单。\u003c/p\u003e\n\u003ch4 id=\"例子\"\u003e例子\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTerminalMenus\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eoptions\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;apple\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;orange\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;grape\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;strawberry\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"s\"\u003e\u0026#34;blueberry\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;peach\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;lemon\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;lime\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"radiomenu\"\u003eRadioMenu\u003c/h4\u003e\n\u003cp\u003eRadioMenu 允许用户从列表中选择一个选项。\u003ccode\u003erequest\u003c/code\u003e 函数显示交互式菜单并返回所选选项的索引。如果用户按 \u0026lsquo;q\u0026rsquo; 或 \u003ccode\u003ectrl-c\u003c/code\u003e，\u003ccode\u003erequest\u003c/code\u003e 将返回 \u003ccode\u003e-1\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"c\"\u003e# `pagesize` is the number of items to be displayed at a time.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#  The UI will scroll if the number of options is greater\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   than the `pagesize`\u003c/span\u003e\n\u003cspan class=\"n\"\u003emenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRadioMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epagesize\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# `request` displays the menu and returns the index after the\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   user has selected a choice\u003c/span\u003e\n\u003cspan class=\"n\"\u003echoice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Choose your favorite fruit:\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emenu\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003echoice\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Your favorite fruit is \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003echoice\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Menu canceled.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eChoose your favorite fruit:\n^  grape\n   strawberry\n \u0026gt; blueberry\nv  peach\nYour favorite fruit is blueberry!\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"multiselectmenu\"\u003eMultiSelectMenu\u003c/h4\u003e\n\u003cp\u003e多重选择菜单（MultiSelectMenu）允许用户从一个列表中选择许多选择。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"c\"\u003e# here we use the default `pagesize` 10\u003c/span\u003e\n\u003cspan class=\"n\"\u003emenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMultiSelectMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# `request` returns a `Set` of selected indices\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# if the menu us canceled (ctrl-c or q), return an empty set\u003c/span\u003e\n\u003cspan class=\"n\"\u003echoices\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Select the fruits you like:\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emenu\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echoices\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;You like the following fruits:\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"kp\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003echoices\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;  - \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Menu canceled.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSelect the fruits you like:\n[press: d=done, a=all, n=none]\n   [ ] apple\n \u0026gt; [X] orange\n   [X] grape\n   [ ] strawberry\n   [ ] blueberry\n   [X] peach\n   [ ] lemon\n   [ ] lime\nYou like the following fruits:\n  - orange\n  - grape\n  - peach\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"customization--configuration\"\u003eCustomization / Configuration\u003c/h4\u003e\n\u003cp\u003e所有的界面定制都是通过关键字 \u003ccode\u003eTerminalMenus.config()\u003c/code\u003e 函数完成的。\u003c/p\u003e\n\u003ch5 id=\"参数\"\u003e参数\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echarset::Symbol=:na\u003c/code\u003e: 要使用的ui字符(\u003ccode\u003e:ascii\u003c/code\u003e 或 \u003ccode\u003e:unicode\u003c/code\u003e); 被其他参数覆盖。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecursor::Char='\u0026gt;'|'→'\u003c/code\u003e: 光标使用的字符。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eup_arrow::Char='^'|'↑'\u003c/code\u003e: 用于向上箭头的字符。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edown_arrow::Char='v'|'↓'\u003c/code\u003e: 用于向下箭头的字符。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003echecked::String=\u0026quot;[X]\u0026quot;|\u0026quot;✓\u0026quot;\u003c/code\u003e：用于检查的字符串。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunchecked::String=\u0026quot;[]\u0026quot;|\u0026quot;⬚\u0026quot;)\u003c/code\u003e：用于未选中的字符串。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escroll::Symbol=:na\u003c/code\u003e: 如果 \u003ccode\u003e:wrap\u003c/code\u003e，则将光标环绕在顶部和底部，如果 \u003ccode\u003e:nowrap\u003c/code\u003e 则不环绕光标。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esupress_output::Bool=false\u003c/code\u003e。用于测试。如果为真，菜单不会被打印到控制台。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ectrl_c_interrupt::Bool=true\u003c/code\u003e: 如果为假，在 \u003ccode\u003e^C\u003c/code\u003e 时返回空，如果为真，在 \u003ccode\u003e^C\u003c/code\u003e 时抛出 InterruptException()。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"例子-1\"\u003e例子\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003emenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e MultiSelectMenu\u003cspan class=\"o\"\u003e(\u003c/span\u003eoptions, \u003cspan class=\"nv\"\u003epagesize\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; request\u003cspan class=\"o\"\u003e(\u003c/span\u003emenu\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# ASCII is used by default\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003epress: \u003cspan class=\"nv\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e, \u003cspan class=\"nv\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eall, \u003cspan class=\"nv\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003enone\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n   \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e apple\n   \u003cspan class=\"o\"\u003e[\u003c/span\u003eX\u003cspan class=\"o\"\u003e]\u003c/span\u003e orange\n   \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e grape\n \u0026gt; \u003cspan class=\"o\"\u003e[\u003c/span\u003eX\u003cspan class=\"o\"\u003e]\u003c/span\u003e strawberry\nv  \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e blueberry\nSet\u003cspan class=\"o\"\u003e([\u003c/span\u003e4, 2\u003cspan class=\"o\"\u003e])\u003c/span\u003e\n\njulia\u0026gt; TerminalMenus.config\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003echarset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e:unicode\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; request\u003cspan class=\"o\"\u003e(\u003c/span\u003emenu\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003epress: \u003cspan class=\"nv\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e, \u003cspan class=\"nv\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eall, \u003cspan class=\"nv\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003enone\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n   ⬚ apple\n   ✓ orange\n   ⬚ grape\n → ✓ strawberry\n↓  ⬚ blueberry\nSet\u003cspan class=\"o\"\u003e([\u003c/span\u003e4, 2\u003cspan class=\"o\"\u003e])\u003c/span\u003e\n\njulia\u0026gt; TerminalMenus.config\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003echecked\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;YEP!\u0026#34;\u003c/span\u003e, \u003cspan class=\"nv\"\u003eunchecked\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;NOPE\u0026#34;\u003c/span\u003e, \u003cspan class=\"nv\"\u003ecursor\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;⧐\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; request\u003cspan class=\"o\"\u003e(\u003c/span\u003emenu\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003epress: \u003cspan class=\"nv\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e, \u003cspan class=\"nv\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eall, \u003cspan class=\"nv\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003enone\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n   NOPE apple\n   YEP! orange\n   NOPE grape\n ⧐ YEP! strawberry\n↓  NOPE blueberry\nSet\u003cspan class=\"o\"\u003e([\u003c/span\u003e4, 2\u003cspan class=\"o\"\u003e])\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"参考\"\u003e参考\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://docs.julialang.org/en/v1/stdlib/REPL/#Base.atreplinit\"\u003eBase.atreplinit\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eatreplinit(f)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e注册一个单参数函数，在交互式会话中，在 REPL 接口初始化之前被调用；这对自定义接口很有用。f 的参数是 REPL 对象。这个函数应该在 \u003ccode\u003e~/.julia/config/startup.jl\u003c/code\u003e 初始化文件中调用。\u003c/p\u003e\n","text":"Julia REPL Julia 在 julia 可执行文件中内置了一个功能齐全的交互式命令行 REPL（read-eval-print loop）。除了允许快速、简单地评估 Julia 语句外，它还具有可搜索的历史记录、tab-补全、许多有用的键绑定以及专门的帮助和 shell 模式。REPL 可以通过简单地调用 julia 而不使用参数或双击可执行文件来启动。\n$ julia _ _ _ _(_)_ | Documentation: https://docs.julialang.org (_) | (_) (_) | _ _ _| |_ __ _ | Type \u0026#34;?\u0026#34; for help, \u0026#34;]?\u0026#34; for Pkg help. | | | | | | |/ _` | | | | |_| | | | (_| | | Version 1.5.0 (2020-08-01) _/ |\\__\u0026#39;_|_|_|\\__\u0026#39;_| | Official https://julialang.org/ release |__/ | julia\u0026gt; 要退出交互式会话，请键入 ^D - 控制键与 d 键一起在空行上键入，或键入 exit() 后跟回车或回车键。REPL 会用一个横幅和 julia\u0026gt; 提示来欢迎您。\n不同的提示模式 朱利安模式 REPL 有四种主要的操作模式。第一种也是最常见的是 Julian 提示。这是默认的操作模式；每个新行都以 julia\u0026gt; 开始。在这里您可以输入 Julia 表达式。在输入完整的表达式后点击回车或回车将评估该条目并显示最后一个表达式的结果。\njulia\u0026gt; string(1 + 2) \u0026#34;3\u0026#34; 在交互式工作中，有许多独特的有用功能。除了显示结果之外，REPL 还将结果绑定到变量 ans 上。行上的分号可以作为一个标志来抑制显示结果。\njulia\u0026gt; string(3 * 4); julia\u0026gt; ans \u0026#34;12\u0026#34; 在 Julia 模式下，REPL 支持称为提示粘贴(prompt pasting)的东西。当把以 julia\u0026gt; 开头的文本粘贴到 REPL 中时，这个功能会被激活。在这种情况下，只有以 julia\u0026gt; 开头的表达式会被解析，其他表达式会被删除。这使得您可以粘贴从 REPL 会话中复制的代码块，而无需清除提示和输出。这个功能默认是启用的，但可以通过 REPL.enable_promptpaste(::Bool) 来禁用或启用。如果启用了，您可以直接将本段上面的代码块粘贴到 REPL 中试试。这个功能在标准的 Windows 命令提示符上不起作用，因为它在检测粘贴发生时的局限性。\nusing REPL REPL.enable_promptpaste(false) # 禁用 prompt pasting REPL.enable_promptpaste(true) # 启用 prompt pasting 对象在 REPL 中使用带有特定 IOContext 的 show 函数进行打印。特别是，:limit 属性被设置为 true。其他属性可以在某些 show 方法中接收一个默认值，如果它还没有被设置，比如 :compact。作为实验性功能，可以通过 Base.active_repl.options.iocontext 字典来指定 REPL 使用的属性（将值关联到属性）。例如:\njulia\u0026gt; rand(2, 2) 2×2 Array{Float64,2}: 0.8833 0.329197 0.719708 0.59114 julia\u0026gt; show(IOContext(stdout, :compact =\u0026gt; false), \u0026#34;text/plain\u0026#34;, rand(2, 2)) 0.43540323669187075 0.15759787870609387 0.2540832269192739 0.4597637838786053 julia\u0026gt; Base.active_repl.options.iocontext[:compact] = false; julia\u0026gt; rand(2, 2) 2×2 Array{Float64,2}: 0.2083967319174056 0.13330606013126012 0.6244375177790158 0.9777957560761545 为了在启动时自动定义这个字典的值，可以使用 ~/.julia/config/startup.jl 文件中的 atreplinit 函数，例如:\natreplinit() do repl repl.options.iocontext[:compact] = false end 帮助模式 当光标在行首时，可以通过键入 ? 来将提示变为帮助模式。Julia 将尝试打印帮助模式下输入的任何内容的帮助或文档。\njulia\u0026gt; ? # upon typing ?, the prompt changes (in place) to: help?\u0026gt; help?\u0026gt; string search: string String Cstring Cwstring RevString randstring bytestring SubString string(xs...) Create a string from any values using the print function. 也可以查询宏、类型和变量:\nhelp?\u0026gt; @time @time A macro to execute an expression, printing the time it took to execute, the number of allocations, and the total number of bytes its execution caused to be allocated, before returning the value of the expression. See also @timev, @timed, @elapsed, and @allocated. help?\u0026gt; Int32 search: Int32 UInt32 Int32 \u0026lt;: Signed 32-bit signed integer type. 按行首的退格键可以退出帮助模式。\nShell 模式 就像帮助模式对于快速访问文档很有用一样，另一个常见的任务是使用系统 shell 来执行系统命令。就像 ? 进入帮助模式时一样, 在行首按下分号(;)会进入 shell 模式。而且可以在行首按退格键退出。\njulia\u0026gt; ; # upon typing ;, the prompt changes (in place) to: shell\u0026gt; shell\u0026gt; echo hello hello 注意:\n对于 Windows 用户来说，Julia 的 shell 模式不暴露 windows shell 命令。因此，这将会失败:\njulia\u0026gt; ; # upon typing ;, the prompt changes (in place) to: shell\u0026gt; shell\u0026gt; dir ERROR: IOError: could not spawn `dir`: no such file or directory (ENOENT) Stacktrace! ....... 不过，你可以像这样访问 PowerShell:\njulia\u0026gt; ; # upon typing ;, the prompt changes (in place) to: shell\u0026gt; shell\u0026gt; powershell Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\elm\u0026gt; \u0026hellip;而且对 cmd.exe 的访问是这样的（见 dir 命令）:\njulia\u0026gt; ; # upon typing ;, the prompt changes (in place) to: shell\u0026gt; shell\u0026gt; cmd Microsoft Windows [version 10.0.17763.973] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Users\\elm\u0026gt;dir Volume in drive C has no label Volume Serial Number is 1643-0CD7 Directory of C:\\Users\\elm 29/01/2020 22:15 \u0026lt;DIR\u0026gt; . 29/01/2020 22:15 \u0026lt;DIR\u0026gt; .. 02/02/2020 08:06 \u0026lt;DIR\u0026gt; .atom 搜索模式 在上述所有模式中，执行的行数都会被保存到历史文件中，可以进行搜索。要在以前的历史记录中进行增量搜索，输入 ^R\u0026ndash;控制键和 r 键。提示符将变为(reverse-i-search):，当你输入搜索查询时，搜索查询将出现在引号中。当你输入更多的内容时，与查询相匹配的最新结果会动态地更新到冒号的右边。如果要使用相同的查询找到一个较早的结果，只需再次输入 ^R。\n就像 ^R 是反向搜索一样，^S 是正向搜索，并提示(i-search):。两者可以相互结合使用，分别在上一个或下一个匹配结果中移动。\n键绑定 Julia REPL 大量使用了键绑定。上面已经介绍了几个控制键绑定（^D 用于退出，^R 和 ^S 用于搜索），但还有更多。除了控制键，还有元键绑定。这些因平台不同而变化较大，但大多数终端默认使用 alt- 或 option- 按住键发送元键（也可以配置成这样），或者按 Esc 键，然后按键。\n   Keybinding Description     Program control    ^D 退出(当缓存为空时)   ^C 中断或取消   ^L 清理控制台屏幕   Return/Enter, ^J 新行，如果完成了就执行   meta-Return/Enter 插入新行而不执行   ? 或 ; 进入帮助或shell模式(当在行的开头时)   ^R, ^S 递增式历史检索，如上所述    自定义键绑定 Julia 的 REPL 键绑定可以通过向 REPL.setup_interface 传递一个字典来完全定制用户的偏好。这个字典的键可以是字符或字符串。键 \u0026lsquo;*\u0026rsquo; 指的是默认操作。控制加字符x的绑定用\u0026quot;^x\u0026quot;表示。Meta 加x可以写成 \u0026ldquo;\\M-x\u0026rdquo; 或 \u0026ldquo;\\ex\u0026rdquo;，Control 加 x 可以写成 \u0026ldquo;\\C-x\u0026rdquo; 或 \u0026ldquo;^x\u0026rdquo;。自定义 keymap 的值必须是 nothing(表示输入应该被忽略)或接受签名的函数(PromptState, AbstractREPL, Char)。REPL.setup_interface 函数必须在 REPL 初始化之前被调用，通过在 atreplinit 注册操作。例如，要绑定上下方向键来移动历史记录而不需要前缀搜索，可以在 ~/.julia/config/startup.jl 中放入以下代码。\nimport REPL import REPL.LineEdit const mykeys = Dict{Any,Any}( # Up Arrow \u0026#34;\\e[A\u0026#34; =\u0026gt; (s,o...)-\u0026gt;(LineEdit.edit_move_up(s) || LineEdit.history_prev(s, LineEdit.mode(s).hist)), # Down Arrow \u0026#34;\\e[B\u0026#34; =\u0026gt; (s,o...)-\u0026gt;(LineEdit.edit_move_down(s) || LineEdit.history_next(s, LineEdit.mode(s).hist)) ) function customize_keys(repl) repl.interface = REPL.setup_interface(repl; extra_repl_keymap = mykeys) end atreplinit(customize_keys) 用户应该参考 LineEdit.jl 来发现键输入的可用操作。\nTab 补全 在 REPL 的 Julian 和帮助模式下，可以输入函数或类型的前几个字符，然后按tab键，得到一个所有匹配的列表:\njulia\u0026gt; stri[TAB] stride strides string strip julia\u0026gt; Stri[TAB] StridedArray StridedMatrix StridedVecOrMat StridedVector String tab 键也可以用来用它们的 Unicode 等价物替代 LaTeX 数学符号，并获得 LaTeX 匹配列表。\njulia\u0026gt; \\pi[TAB] julia\u0026gt; π π = 3.1415926535897... julia\u0026gt; e\\_1[TAB] = [1,0] julia\u0026gt; e₁ = [1,0] 2-element Array{Int64,1}: 1 0 julia\u0026gt; e\\^1[TAB] = [1 0] julia\u0026gt; e¹ = [1 0] 1×2 Array{Int64,2}: 1 0 julia\u0026gt; \\sqrt[TAB]2 # √ is equivalent to the sqrt function julia\u0026gt; √2 1.4142135623730951 julia\u0026gt; \\hbar[TAB](h) = h / 2\\pi[TAB] julia\u0026gt; ħ(h) = h / 2π ħ (generic function with 1 method) julia\u0026gt; \\h[TAB] \\hat \\hermitconjmatrix \\hkswarow \\hrectangle \\hatapprox \\hexagon \\hookleftarrow \\hrectangleblack \\hbar \\hexagonblack \\hookrightarrow \\hslash \\heartsuit \\hksearow \\house \\hspace julia\u0026gt; α=\u0026#34;\\alpha[TAB]\u0026#34; # LaTeX completion also works in strings julia\u0026gt; α=\u0026#34;α\u0026#34; 完整的tab-补全列表可以在手册的 Unicode 输入部分找到。\n路径补全适用于字符串和 julia 的 shell 模式:\njulia\u0026gt; path=\u0026#34;/[TAB]\u0026#34; .dockerenv .juliabox/ boot/ etc/ lib/ media/ opt/ root/ sbin/ sys/ usr/ .dockerinit bin/ dev/ home/ lib64/ mnt/ proc/ run/ srv/ tmp/ var/ shell\u0026gt; /[TAB] .dockerenv .juliabox/ boot/ etc/ lib/ media/ opt/ root/ sbin/ sys/ usr/ .dockerinit bin/ dev/ home/ lib64/ mnt/ proc/ run/ srv/ tmp/ var/ Tab 补全可以帮助调查匹配输入参数的可用方法。\njulia\u0026gt; max([TAB] # All methods are displayed, not shown here due to size of the list julia\u0026gt; max([1, 2], [TAB] # All methods where `Vector{Int}` matches as first argument max(x, y) in Base at operators.jl:215 max(a, b, c, xs...) in Base at operators.jl:281 julia\u0026gt; max([1, 2], max(1, 2), [TAB] # All methods matching the arguments. max(x, y) in Base at operators.jl:215 max(a, b, c, xs...) in Base at operators.jl:281 关键词也显示在 ; 后面的建议方法中，见下面一行，其中 limit 和 keepempty 是关键词参数:\njulia\u0026gt; split(\u0026#34;1 1 1\u0026#34;, [TAB] split(str::AbstractString; limit, keepempty) in Base at strings/util.jl:302 split(str::T, splitter; limit, keepempty) where T\u0026lt;:AbstractString in Base at strings/util.jl:277 方法的补全使用类型推断，因此即使参数是函数输出的，也能看到参数是否匹配。函数需要类型稳定，完成才能够删除不匹配的方法。\nTab 补全也可以帮助补全字段:\njulia\u0026gt; import UUIDs julia\u0026gt; UUIDs.uuid[TAB] uuid1 uuid4 uuid_version 也可以补全函数输出的字段:\njulia\u0026gt; split(\u0026quot;\u0026quot;,\u0026quot;\u0026quot;)[1].[TAB] lastindex offset string 函数输出的字段完成采用类型推断，只有在函数类型稳定的情况下，它才能建议字段。\n字典键也可以用 tab 补全:\njulia\u0026gt; foo = Dict(\u0026#34;qwer1\u0026#34;=\u0026gt;1, \u0026#34;qwer2\u0026#34;=\u0026gt;2, \u0026#34;asdf\u0026#34;=\u0026gt;3) Dict{String,Int64} with 3 entries: \u0026#34;qwer2\u0026#34; =\u0026gt; 2 \u0026#34;asdf\u0026#34; =\u0026gt; 3 \u0026#34;qwer1\u0026#34; =\u0026gt; 1 julia\u0026gt; foo[\u0026#34;q[TAB] \u0026#34;qwer1\u0026#34; \u0026#34;qwer2\u0026#34; julia\u0026gt; foo[\u0026#34;qwer 自定义颜色 Julia 和 REPL 所使用的颜色也是可以自定义的。要改变 Julia 提示符的颜色，您可以在您的 ~/.julia/config/startup.jl 文件中添加以下内容，该文件应放在您的主目录中。\nfunction customize_colors(repl) repl.prompt_color = Base.text_colors[:cyan] end atreplinit(customize_colors) 可用的颜色键可以通过在 REPL 的帮助模式下输入 Base.text_colors 来查看。此外，对于支持 256 色的终端来说，整数 0 到 255 可以用作颜色键。\n也可以通过在上面的 customize_colors 函数中设置 repl 的相应字段（分别为 help_color、shell_color、input_color 和 answer_color）来改变帮助和 shell 提示符以及输入和回答文字的颜色。对于后两者，要确保 envcolors 字段也设置为 false。\n也可以通过使用 Base.text_colors[:bold] 作为颜色来应用粗体格式。例如，要用粗体字打印答案，可以使用下面的 ~/.julia/config/startup.jl:\nfunction customize_colors(repl) repl.envcolors = false repl.answer_color = Base.text_colors[:bold] end atreplinit(customize_colors) 你也可以通过设置适当的环境变量来定制用于渲染警告和信息消息的颜色。例如，要分别用洋红色、黄色和青色来渲染错误、警告和信息消息，你可以在 ~/.julia/config/startup.jl 文件中添加以下内容:\nENV[\u0026#34;JULIA_ERROR_COLOR\u0026#34;] = :magenta ENV[\u0026#34;JULIA_WARN_COLOR\u0026#34;] = :yellow ENV[\u0026#34;JULIA_INFO_COLOR\u0026#34;] = :cyan TerminalMenus TerminalMenus 是 Julia REPL 的一个子模块，可以在终端中实现小型、低配的交互式菜单。\n例子 import REPL using REPL.TerminalMenus options = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;grape\u0026#34;, \u0026#34;strawberry\u0026#34;, \u0026#34;blueberry\u0026#34;, \u0026#34;peach\u0026#34;, \u0026#34;lemon\u0026#34;, \u0026#34;lime\u0026#34;] RadioMenu RadioMenu 允许用户从列表中选择一个选项。request 函数显示交互式菜单并返回所选选项的索引。如果用户按 \u0026lsquo;q\u0026rsquo; 或 ctrl-c，request 将返回 -1。\n# `pagesize` is the number of items to be displayed at a time. # The UI will scroll if the number of options is greater # than the `pagesize` menu = RadioMenu(options, pagesize=4) # `request` displays the menu and returns the index after the # user has selected a choice choice = request(\u0026#34;Choose your favorite fruit:\u0026#34;, menu) if choice != -1 println(\u0026#34;Your favorite fruit is \u0026#34;, options[choice], \u0026#34;!\u0026#34;) else println(\u0026#34;Menu canceled.\u0026#34;) end 输出:\nChoose your favorite fruit: ^ grape strawberry \u0026gt; blueberry v peach Your favorite fruit is blueberry! MultiSelectMenu 多重选择菜单（MultiSelectMenu）允许用户从一个列表中选择许多选择。\n# here we use the default `pagesize` 10 menu = MultiSelectMenu(options) # `request` returns a `Set` of selected indices # if the menu us canceled (ctrl-c or q), return an empty set choices = request(\u0026#34;Select the fruits you like:\u0026#34;, menu) if length(choices) \u0026gt; 0 println(\u0026#34;You like the following fruits:\u0026#34;) for i in choices println(\u0026#34; - \u0026#34;, options[i]) end else println(\u0026#34;Menu canceled.\u0026#34;) end 输出:\nSelect the fruits you like: [press: d=done, a=all, n=none] [ ] apple \u0026gt; [X] orange [X] grape [ ] strawberry [ ] blueberry [X] peach [ ] lemon [ ] lime You like the following fruits: - orange - grape - peach Customization / Configuration 所有的界面定制都是通过关键字 TerminalMenus.config() 函数完成的。\n参数  charset::Symbol=:na: 要使用的ui字符(:ascii 或 :unicode); 被其他参数覆盖。 cursor::Char='\u0026gt;'|'→': 光标使用的字符。 up_arrow::Char='^'|'↑': 用于向上箭头的字符。 down_arrow::Char='v'|'↓': 用于向下箭头的字符。 checked::String=\u0026quot;[X]\u0026quot;|\u0026quot;✓\u0026quot;：用于检查的字符串。 unchecked::String=\u0026quot;[]\u0026quot;|\u0026quot;⬚\u0026quot;)：用于未选中的字符串。 scroll::Symbol=:na: 如果 :wrap，则将光标环绕在顶部和底部，如果 :nowrap 则不环绕光标。 supress_output::Bool=false。用于测试。如果为真，菜单不会被打印到控制台。 ctrl_c_interrupt::Bool=true: 如果为假，在 ^C 时返回空，如果为真，在 ^C 时抛出 InterruptException()。  例子 julia\u0026gt; menu = MultiSelectMenu(options, pagesize=5); julia\u0026gt; request(menu) # ASCII is used by default [press: d=done, a=all, n=none] [ ] apple [X] orange [ ] grape \u0026gt; [X] strawberry v [ ] blueberry Set([4, 2]) julia\u0026gt; TerminalMenus.config(charset=:unicode) julia\u0026gt; request(menu) [press: d=done, a=all, n=none] ⬚ apple ✓ orange ⬚ grape → ✓ strawberry ↓ ⬚ blueberry Set([4, 2]) julia\u0026gt; TerminalMenus.config(checked=\u0026#34;YEP!\u0026#34;, unchecked=\u0026#34;NOPE\u0026#34;, cursor=\u0026#39;⧐\u0026#39;) julia\u0026gt; request(menu) [press: d=done, a=all, n=none] NOPE apple YEP! orange NOPE grape ⧐ YEP! strawberry ↓ NOPE blueberry Set([4, 2]) 参考 Base.atreplinit\n atreplinit(f)\n 注册一个单参数函数，在交互式会话中，在 REPL 接口初始化之前被调用；这对自定义接口很有用。f 的参数是 REPL 对象。这个函数应该在 ~/.julia/config/startup.jl 初始化文件中调用。\n"},"name":"Julia 中的 REPL","published":"2020-08-21T00:00:00+08:00","summary":"REPL in Julia","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-21-repl-in-julia/"},{"content":{"html":"\u003ch1 id=\"模块\"\u003e模块\u003c/h1\u003e\n\u003cp\u003eJulia 中的模块是独立的变量工作空间，即它们引入了一个新的全局作用域。它们在语法上是有分界的，在 \u003ccode\u003emodule Name ... end\u003c/code\u003e 里面。模块允许您创建顶层定义（也就是全局变量），而不用担心您的代码与别人的代码一起使用时的名称冲突。在一个模块中，你可以控制哪些来自其他模块的名字是可见的（通过导入），并指定哪些名字是要公开的（通过导出）。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了模块的主要功能。这个例子并不是为了运行，而是为了说明问题。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eMyModule\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eLib\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eBigLib\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ething1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ething2\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshow\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"n\"\u003eMyType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eMyType\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eMyType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eshow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eMyType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;MyType \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e需要注意的是，这个样式并不是要在模块的正文中缩进，因为这通常会导致整个文件被缩进。\u003c/p\u003e\n\u003cp\u003e这个模块定义了一个 \u003ccode\u003eMyType\u003c/code\u003e 类型和两个函数。函数 \u003ccode\u003efoo\u003c/code\u003e 和 \u003ccode\u003eMyType\u003c/code\u003e 类型是导出的，因此可以导入到其他模块中。函数 \u003ccode\u003ebar\u003c/code\u003e 是 \u003ccode\u003eMyModule\u003c/code\u003e 的私有函数。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eusing Lib\u003c/code\u003e 语句意味着将有一个名为 \u003ccode\u003eLib\u003c/code\u003e 的模块可以根据需要解析名称。当遇到一个全局变量在当前模块中没有定义时，系统会在 \u003ccode\u003eLib\u003c/code\u003e 导出的变量中搜索它，如果在那里找到了，就会导入它。这意味着在当前模块内对该全局的所有使用都将解析为该变量在 \u003ccode\u003eLib\u003c/code\u003e 中的定义。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eusing BigLib: thing1, thing2\u003c/code\u003e 语句，只将标识符 \u003ccode\u003ething1\u003c/code\u003e 和 \u003ccode\u003ething2\u003c/code\u003e 从模块 \u003ccode\u003eBigLib\u003c/code\u003e 中带入作用域。如果这些名称指的是函数，那么将不允许向它们添加方法（你只能 \u0026ldquo;使用 \u0026ldquo;它们，而不是扩展它们）。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eimport\u003c/code\u003e 关键字支持与 \u003ccode\u003eusing\u003c/code\u003e 相同的语法。\u003ccode\u003eimport\u003c/code\u003e 与 \u003ccode\u003eusing\u003c/code\u003e 的不同之处在于，使用 \u003ccode\u003eimport\u003c/code\u003e 导入的函数可以用新的方法进行扩展。\u003c/p\u003e\n\u003cp\u003e在上面的 \u003ccode\u003eMyModule\u003c/code\u003e 中，我们想给标准的 \u003ccode\u003eshow\u003c/code\u003e 函数添加一个方法，所以我们必须写 \u003ccode\u003eimport Base.show\u003c/code\u003e。只有通过 \u003ccode\u003eusing\u003c/code\u003e 才能看到名字的函数不能被扩展。\u003c/p\u003e\n\u003cp\u003e一旦一个变量通过 \u003ccode\u003eusing\u003c/code\u003e 或 \u003ccode\u003eimport\u003c/code\u003e 变得可见，一个模块就不能创建自己的同名变量。导入的变量是只读的，分配给全局变量总是会影响到当前模块所拥有的变量，否则会引发错误。\u003c/p\u003e\n\u003ch2 id=\"模块使用情况概述\"\u003e模块使用情况概述\u003c/h2\u003e\n\u003cp\u003e要加载一个模块，可以使用两个主要的关键词：\u003ccode\u003eusing\u003c/code\u003e 和 \u003ccode\u003eimport\u003c/code\u003e。要了解它们的区别，请看下面的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eMyModule\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;y\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;p\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个模块中，我们导出了 \u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ey\u003c/code\u003e 函数(用关键字 \u003ccode\u003eexport\u003c/code\u003e)，也有非导出的函数 \u003ccode\u003ep\u003c/code\u003e，有几种不同的方法可以将 \u003ccode\u003eModule\u003c/code\u003e 及其内部函数加载到当前的工作空间中。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e导入命令\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e带入带作用域中的东西\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e可用于方法扩展\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eusing MyModule\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e所有导出的名字(\u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ey\u003c/code\u003e), \u003ccode\u003eMyModule.x\u003c/code\u003e, \u003ccode\u003eMyModule.y\u003c/code\u003e 和 \u003ccode\u003eMyModule.p\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eMyModule.x\u003c/code\u003e, \u003ccode\u003eMyModule.y\u003c/code\u003e 和 \u003ccode\u003eMyModule.p\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eusing MyModule: x, p\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ep\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eimport MyModule\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eMyModule.x\u003c/code\u003e, \u003ccode\u003eMyModule.y\u003c/code\u003e 和 \u003ccode\u003eMyModule.p\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eMyModule.x\u003c/code\u003e, \u003ccode\u003eMyModule.y\u003c/code\u003e 和 \u003ccode\u003eMyModule.p\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eimport MyModule.x, MyModule.p\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ep\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ep\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eimport MyModule: x, p\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ep\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ep\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"模块和文件\"\u003e模块和文件\u003c/h2\u003e\n\u003cp\u003e文件和文件名大多与模块无关，模块只与模块表达式有关。一个模块可以有多个文件，一个文件可以有多个模块。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eFoo\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;file1.jl\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;file2.jl\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在不同的模块中包含相同的代码，提供了类似 mixin 的行为。人们可以使用这一点来用不同的基础定义来运行相同的代码，例如，通过使用某些操作符的\u0026quot;安全\u0026quot;版本来测试代码。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eNormal\u003c/span\u003e\n\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;mycode.jl\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eTesting\u003c/span\u003e\n\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;safe_operators.jl\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;mycode.jl\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"标准模块\"\u003e标准模块\u003c/h2\u003e\n\u003cp\u003eThere are three important standard modules:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Core\"\u003eCore\u003c/a\u003e 包含\u0026quot;内置于\u0026quot;语言中的所有功能。\n\u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base\"\u003eBase\u003c/a\u003e 包含几乎在所有情况下都有用的基本功能。\n\u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Main\"\u003eMain\u003c/a\u003e 是当 Julia 被启动时的顶级模块和当前模块。\u003c/p\u003e\n\u003ch2 id=\"默认的顶层定义和裸模块\"\u003e默认的顶层定义和裸模块\u003c/h2\u003e\n\u003cp\u003e除了 \u003ccode\u003eusing Base\u003c/code\u003e 之外，模块还自动包含 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.eval\"\u003eeval\u003c/a\u003e和 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.include\"\u003einclude\u003c/a\u003e 函数的定义，这些函数在该模块的全局作用域内评估表达式/文件。\u003c/p\u003e\n\u003cp\u003e如果不想要这些默认的定义，可以使用关键字 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#baremodule\"\u003ebaremodule\u003c/a\u003e 来代替定义模块（注意： \u003ccode\u003eCore\u003c/code\u003e 仍然是导入的，如上所述）。以 \u003ccode\u003ebaremodule\u003c/code\u003e 来说，一个标准的模块是这样的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003ebaremodule\u003c/span\u003e \u003cspan class=\"n\"\u003eMod\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCore\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"相对和绝对模块路径\"\u003e相对和绝对模块路径\u003c/h2\u003e\n\u003cp\u003e给定 \u003ccode\u003eusing Foo\u003c/code\u003e 语句，系统会查询内部的顶层模块表，寻找一个名为 \u003ccode\u003eFoo\u003c/code\u003e 的模块。如果该模块不存在，系统会尝试 \u003ccode\u003erequire(:Foo)\u003c/code\u003e，这通常会导致从安装的包中加载代码。\u003c/p\u003e\n\u003cp\u003e然而，有些模块包含子模块，这意味着你有时需要访问一个非顶层模块。有两种方法可以做到这一点。第一种是使用绝对路径，例如 \u003ccode\u003eusing Base.Sort\u003c/code\u003e。第二种是使用相对路径，这样可以更容易地导入当前模块的子模块或其任何一个外层模块。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eParent\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eUtils\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUtils\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里模块 \u003ccode\u003eParent\u003c/code\u003e 包含一个子模块 \u003ccode\u003eUtils\u003c/code\u003e，\u003ccode\u003eParent\u003c/code\u003e 中的代码希望 \u003ccode\u003eUtils\u003c/code\u003e 的内容可见。这可以通过在 \u003ccode\u003eusing\u003c/code\u003e 路径中使用点号来实现。添加更多的前导点号会使模块的层次结构上升。例如，\u003ccode\u003eusing ..Utils\u003c/code\u003e 会在 \u003ccode\u003eParent\u003c/code\u003e 的外层模块中查找\u003ccode\u003eUtils\u003c/code\u003e，而不是在 \u003ccode\u003eParent\u003c/code\u003e 本身中查找。\u003c/p\u003e\n\u003cp\u003e注意相对导入限定符只在使用和导入语句中有效。\u003c/p\u003e\n\u003ch2 id=\"命名空间杂项\"\u003e命名空间杂项\u003c/h2\u003e\n\u003cp\u003e如果一个名字是限定的(例如 \u003ccode\u003eBase.sin\u003c/code\u003e)，那么即使它没有被导出，也可以被访问。这在调试时往往很有用。它也可以通过使用限定名作为函数名来添加方法。但是，由于会产生语法上的歧义，如果你想给不同模块中的一个函数添加方法，而这个函数的名称只包含符号，例如一个运算符，\u003ccode\u003eBase.+\u003c/code\u003e，你必须使用 \u003ccode\u003eBase.:+\u003c/code\u003e 来引用它。如果运算符的长度超过一个字符，你必须用括号把它括起来，比如 \u003ccode\u003eBase.:(==)\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在导入和导出语句中，宏的名称用 \u003ccode\u003e@\u003c/code\u003e 书写，例如 \u003ccode\u003eimport Mod.@mac\u003c/code\u003e。其他模块中的宏可以用 \u003ccode\u003eMod.@mac\u003c/code\u003e 或 \u003ccode\u003e@Mod.mac\u003c/code\u003e 来调用。\u003c/p\u003e\n\u003cp\u003e语法 \u003ccode\u003eM.x = y\u003c/code\u003e 不能用于分配其他模块中的全局，全局分配总是模块-局部的。\u003c/p\u003e\n\u003cp\u003e变量名可以通过声明为 \u003ccode\u003eglobal x\u003c/code\u003e 来 \u0026ldquo;保留\u0026quot;而不分配给它，这样可以防止加载后初始化的 globals 的名称冲突。\u003c/p\u003e\n\u003ch2 id=\"模块初始化和预编译\"\u003e模块初始化和预编译\u003c/h2\u003e\n\u003cp\u003e大型模块可能需要几秒钟的时间来加载，因为执行一个模块中的所有语句往往需要编译大量的代码。Julia 创建了模块的预编译缓存来减少这个时间。\u003c/p\u003e\n\u003cp\u003e当使用 \u003ccode\u003eimport\u003c/code\u003e 或 \u003ccode\u003eusing\u003c/code\u003e 加载模块时，会自动创建并使用增量的预编译模块文件。这将导致它在第一次导入时自动编译。另外，您也可以手动调用 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.compilecache\"\u003eBase.compilecache(modulename)\u003c/a\u003e。由此产生的缓存文件将存储在 \u003ccode\u003eDEPOT_PATH[1]/compiled/\u003c/code\u003e 中。随后，只要模块的任何依赖关系发生变化，模块就会在 \u003ccode\u003eusing\u003c/code\u003e 或 \u003ccode\u003eimport\u003c/code\u003e 时自动重新编译；依赖关系是指导入的模块、Julia 构建的模块、包含的文件，或者模块文件中 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.include_dependency\"\u003einclude_dependency(path)\u003c/a\u003e 声明的显式依赖关系。\u003c/p\u003e\n\u003cp\u003e对于文件依赖，通过检查由 \u003ccode\u003einclude\u003c/code\u003e 加载的文件或由 \u003ccode\u003einclude_dependency\u003c/code\u003e 显式添加的文件的修改时间(mtime)是否保持不变，或者是否等于被截断到最接近秒的修改时间(以适应无法以亚秒级精度复制 mtime 的系统)来确定变化。它还考虑到在 \u003ccode\u003erequire\u003c/code\u003e 中搜索逻辑选择的文件路径是否与创建预编译文件的路径匹配。它还会考虑到已经加载到当前进程中的一组依赖关系，即使这些模块的文件发生变化或消失，也不会重新编译这些模块，以避免在运行系统和预编译缓存之间产生不兼容的情况。\u003c/p\u003e\n\u003cp\u003e如果你知道某个模块预编译你的模块是不安全的（例如，出于下面描述的原因之一），你应该在模块文件中加上 \u003ccode\u003e__precompile__(false)\u003c/code\u003e（通常放在顶部）。这将导致 \u003ccode\u003eBase.compilecache\u003c/code\u003e 抛出一个错误，并将导致 \u003ccode\u003eusing\u003c/code\u003e / \u003ccode\u003eimport\u003c/code\u003e 直接将其加载到当前进程中而跳过预编译和缓存。这也因此阻止了该模块被任何其他预编译模块导入。\u003c/p\u003e\n\u003cp\u003e您可能需要注意创建增量共享库时固有的某些行为，在编写模块时可能需要注意。例如，外部状态不会被保存。为了适应这一点，明确地将任何必须在运行时发生的初始化步骤与可以在编译时发生的步骤分开。为此，Julia 允许您在您的模块中定义一个 \u003ccode\u003e__init__()\u003c/code\u003e 函数来执行任何必须在运行时发生的初始化步骤。这个函数在编译时不会被调用（\u003ccode\u003e--output-*\u003c/code\u003e）。实际上，你可以假设它在代码的生命周期中只运行一次。当然，如果有必要的话，你可以手动调用它，但是默认情况下，你可以假设这个函数处理的是本地机器的计算状态，它不需要\u0026ndash;甚至不应该\u0026ndash;在编译后的镜像中捕获。它将在模块被加载到一个进程后被调用，包括如果它被加载到增量编译中(\u003ccode\u003e--output-incremental=yes\u003c/code\u003e)，但如果它被加载到一个完整的编译进程中，则不会被调用。\u003c/p\u003e\n\u003cp\u003e特别是，如果你在一个模块中定义了一个 \u003ccode\u003efunction __init__()\u003c/code\u003e，那么 Julia 将在模块被加载后（例如通过 \u003ccode\u003eimport\u003c/code\u003e、\u003ccode\u003eusing\u003c/code\u003e 或 \u003ccode\u003erequire\u003c/code\u003e）在运行时第一次立即调用 \u003ccode\u003e__init__()\u003c/code\u003e（也就是说，\u003ccode\u003e__init__\u003c/code\u003e 只被调用一次，而且是在模块中的所有语句被执行后才被调用）。因为它是在模块完全导入之后被调用的，所以任何子模块或其它导入的模块都会在外层模块的 \u003ccode\u003e__init__\u003c/code\u003e 之前调用它们的 \u003ccode\u003e__init__\u003c/code\u003e 函数。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e__init__\u003c/code\u003e 的两个典型用途是调用外部 C 库的运行时初始化函数和初始化涉及外部库返回指针的全局常量。例如，假设我们正在调用一个 C 库 \u003ccode\u003elibfoo\u003c/code\u003e，它要求我们在运行时调用 \u003ccode\u003efoo_init()\u003c/code\u003e 初始化函数。假设我们还想定义一个全局常量 \u003ccode\u003efoo_data_ptr\u003c/code\u003e，用来存放 \u003ccode\u003elibfoo\u003c/code\u003e 定义的 \u003ccode\u003evoid *foo_data()\u003c/code\u003e 函数的返回值\u0026ndash;这个常量必须在运行时（而不是在编译时）初始化，因为指针地址会随着运行而改变。你可以通过在你的模块中定义下面的 \u003ccode\u003e__init__\u003c/code\u003e 函数来实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003efoo_data_ptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eRef\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003ePtr\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eCvoid\u003c/span\u003e\u003cspan class=\"p\"\u003e}}(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003e__init__\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eccall\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003efoo_init\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003elibfoo\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eCvoid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efoo_data_ptr\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003eccall\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003efoo_data\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003elibfoo\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"kt\"\u003ePtr\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eCvoid\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，我们完全可以在函数内部定义一个全局，比如 \u003ccode\u003e__init__\u003c/code\u003e；这是使用动态语言的优势之一。但是通过在全局作用域内定义一个常量，我们可以确保编译器知道这个类型，并允许它生成更好的优化代码。显然，你的模块中任何其他依赖于 \u003ccode\u003efoo_data_ptr\u003c/code\u003e 的 globals 也必须在 \u003ccode\u003e__init__\u003c/code\u003e 中初始化。\u003c/p\u003e\n\u003cp\u003e涉及大多数不是由 \u003ca href=\"https://docs.julialang.org/en/v1/base/c/#ccall\"\u003eccall\u003c/a\u003e 产生的 Julia 对象的常量不需要放在 \u003ccode\u003e__init__\u003c/code\u003e 中：它们的定义可以被预编译并从缓存的模块映像中加载。这包括像数组这样复杂的堆分配对象。然而，任何返回原始指针值的例程都必须在运行时调用，以便预编译工作（\u003ca href=\"https://docs.julialang.org/en/v1/base/c/#Core.Ptr\"\u003ePtr\u003c/a\u003e 对象将变成空指针，除非它们被隐藏在 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.isbits\"\u003eisbits\u003c/a\u003e 对象中）。这包括 Julia 函数 \u003ccode\u003ecfunction\u003c/code\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/base/c/#Base.pointer\"\u003epointer\u003c/a\u003e 的返回值。\u003c/p\u003e\n\u003cp\u003e字典和集合类型，或者一般来说任何依赖于 \u003ccode\u003ehash(key)\u003c/code\u003e 方法输出的东西，都是比较棘手的情况。在常见的情况下，键是数字、字符串、符号、范围、\u003ccode\u003eExpr\u003c/code\u003e 或这些类型的组合（通过数组、元组、集合、对等），它们可以安全地进行预编译。然而，对于其他一些关键类型，如 \u003ccode\u003eFunction\u003c/code\u003e 或 \u003ccode\u003eDataType\u003c/code\u003e 和通用的用户定义类型，在这些类型中，你没有定义 \u003ccode\u003ehash\u003c/code\u003e 方法，回退 \u003ccode\u003ehash\u003c/code\u003e 方法取决于对象的内存地址（通过它的 \u003ccode\u003eobjectid\u003c/code\u003e），因此可能会在运行时改变。如果你有这些键类型之一，或者如果你不确定，为了安全起见，你可以在你的 \u003ccode\u003e__init__\u003c/code\u003e 函数中初始化这个字典。或者，你也可以使用 \u003ca href=\"https://docs.julialang.org/en/v1/base/collections/#Base.IdDict\"\u003eIdDict\u003c/a\u003e 字典类型，它由预编译特别处理，所以在编译时初始化是安全的。\u003c/p\u003e\n\u003cp\u003e在使用预编译时，保持对编译阶段和执行阶段的清晰认识很重要。在这种模式下，往往会更清楚地认识到 Julia 是一个允许执行任意 Julia 代码的编译器，而不是一个同时生成编译代码的独立解释器。\u003c/p\u003e\n\u003cp\u003e其他已知的潜在故障情况包括。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e全局计数器（例如，用于试图唯一识别对象）。考虑以下代码片段。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emutable\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eUniquedById\u003c/span\u003e\n    \u003cspan class=\"n\"\u003emyid\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\n    \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"n\"\u003ecounter\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eUniquedById\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecounter\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e虽然这段代码的目的是给每个实例一个唯一的 id，但计数器的值是在编译结束时记录的。这个增量编译模块的所有后续使用将从同一个计数器值开始。\u003c/p\u003e\n\u003cp\u003e请注意，\u003ccode\u003eobjectid\u003c/code\u003e（通过哈希内存指针工作）也有类似的问题（参见下面关于 \u003ccode\u003eDict\u003c/code\u003e 用法的说明）。\u003c/p\u003e\n\u003cp\u003e一种替代方法是使用宏来捕获 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.@__MODULE__\"\u003e@\u003cstrong\u003eMODULE\u003c/strong\u003e\u003c/a\u003e，并将其与当前的计数器值一起单独存储，然而，重新设计代码使其不依赖于这个全局状态可能会更好。\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e\n\u003cp\u003e关联集合(比如 \u003ccode\u003eDict\u003c/code\u003e 和 \u003ccode\u003eSet\u003c/code\u003e)需要在 \u003ccode\u003e__init__\u003c/code\u003e 中重新洗牌(将来可能会提供一个机制来注册一个初始化函数)。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e根据编译时的副作用在加载时持续存在。例如：修改其他 Julia 模块中的数组或其他变量；维护打开的文件或设备的句柄；存储其他系统资源（包括内存）的指针。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e通过直接引用而不是通过它的查找路径，从另一个模块创建意外的全局状态\u0026quot;副本\u0026rdquo;。例如，（在全局作用域内）。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"c\"\u003e#mystdout = Base.stdout #= will not work correctly, since this will copy Base.stdout into this module =#\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# instead use accessor functions:\u003c/span\u003e\n\u003cspan class=\"n\"\u003egetstdout\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e \u003cspan class=\"cm\"\u003e#= best option =#\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# or move the assignment into the runtime:\u003c/span\u003e\n\u003cspan class=\"n\"\u003e__init__\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eglobal\u003c/span\u003e \u003cspan class=\"n\"\u003emystdout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e \u003cspan class=\"cm\"\u003e#= also works =#\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对预编译代码时可以进行的操作进行了一些额外的限制，以帮助用户避免其他错误行为的情况。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e调用 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.eval\"\u003eeval\u003c/a\u003e 引起另一个模块的副作用。当增量预编译标志被设置时，这也会导致发出警告。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在 \u003ccode\u003e__init__()\u003c/code\u003e 被启动后，从本地作用域调用 \u003ccode\u003eglobal const\u003c/code\u003e 语句(参见问题 \u003ccode\u003e#12010\u003c/code\u003e，计划为此增加一个错误)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在进行增量预编译时，替换一个模块是一个运行时错误。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e还有几点需要注意。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e在对源文件本身进行修改之后，不会进行代码重载/缓存无效化（包括通过 \u003ccode\u003ePkg.update\u003c/code\u003e），而且在 \u003ccode\u003ePkg.rm\u003c/code\u003e 之后也不会进行清理。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e预编译不考虑重塑数组的内存共享行为 (每个视图都有自己的副本)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e期待文件系统在编译时和运行时之间保持不变，例如 \u003ca href=\"https://docs.julialang.org/en/v1/base/file/#Base.@__FILE__\"\u003e@\u003cstrong\u003eFILE\u003c/strong\u003e\u003c/a\u003e/\u003ccode\u003esource_path()\u003c/code\u003e 在运行时查找资源，或者 BinDeps 的 \u003ccode\u003e@checked_lib\u003c/code\u003e 宏。有时这是不可避免的。然而，在可能的情况下，在编译时将资源复制到模块中是一个很好的做法，这样它们就不需要在运行时被找到。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eWeakRef\u003c/code\u003e 对象和 finalizers 目前还没有被序列化器正确处理（这将在即将发布的版本中得到修正）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e通常最好避免捕获对内部元数据对象实例的引用，如 \u003ccode\u003eMethod\u003c/code\u003e、\u003ccode\u003eMethodInstance\u003c/code\u003e、\u003ccode\u003eMethodTable\u003c/code\u003e、\u003ccode\u003eTypeMapLevel\u003c/code\u003e、\u003ccode\u003eTypeMapEntry\u003c/code\u003e 以及这些对象的字段，因为这可能会混淆序列化器，可能不会导致你想要的结果。这样做不一定会出错，但你只需要做好准备，系统会尝试复制其中的一些对象，并为其他对象创建一个唯一的实例。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在模块开发过程中，有时关闭增量预编译是很有帮助的。命令行标志 \u003ccode\u003e--compiled-modules={yes|no}\u003c/code\u003e 可以让你开启或关闭模块预编译。当 Julia 以 \u003ccode\u003e--compiled-modules=no\u003c/code\u003e 启动时，当加载模块和模块依赖时，编译缓存中的序列化模块会被忽略。\u003ccode\u003eBase.compilecache\u003c/code\u003e 仍然可以被手动调用。这个命令行标志的状态被传递给 \u003ccode\u003ePkg.build\u003c/code\u003e，以便在安装、更新和显式构建包时禁用自动预编译触发。\u003c/p\u003e\n","text":"模块 Julia 中的模块是独立的变量工作空间，即它们引入了一个新的全局作用域。它们在语法上是有分界的，在 module Name ... end 里面。模块允许您创建顶层定义（也就是全局变量），而不用担心您的代码与别人的代码一起使用时的名称冲突。在一个模块中，你可以控制哪些来自其他模块的名字是可见的（通过导入），并指定哪些名字是要公开的（通过导出）。\n下面的例子展示了模块的主要功能。这个例子并不是为了运行，而是为了说明问题。\nmodule MyModule using Lib using BigLib: thing1, thing2 import Base.show export MyType, foo struct MyType x end bar(x) = 2x foo(a::MyType) = bar(a.x) + 1 show(io::IO, a::MyType) = print(io, \u0026#34;MyType $(a.x)\u0026#34;) end 需要注意的是，这个样式并不是要在模块的正文中缩进，因为这通常会导致整个文件被缩进。\n这个模块定义了一个 MyType 类型和两个函数。函数 foo 和 MyType 类型是导出的，因此可以导入到其他模块中。函数 bar 是 MyModule 的私有函数。\nusing Lib 语句意味着将有一个名为 Lib 的模块可以根据需要解析名称。当遇到一个全局变量在当前模块中没有定义时，系统会在 Lib 导出的变量中搜索它，如果在那里找到了，就会导入它。这意味着在当前模块内对该全局的所有使用都将解析为该变量在 Lib 中的定义。\nusing BigLib: thing1, thing2 语句，只将标识符 thing1 和 thing2 从模块 BigLib 中带入作用域。如果这些名称指的是函数，那么将不允许向它们添加方法（你只能 \u0026ldquo;使用 \u0026ldquo;它们，而不是扩展它们）。\nimport 关键字支持与 using 相同的语法。import 与 using 的不同之处在于，使用 import 导入的函数可以用新的方法进行扩展。\n在上面的 MyModule 中，我们想给标准的 show 函数添加一个方法，所以我们必须写 import Base.show。只有通过 using 才能看到名字的函数不能被扩展。\n一旦一个变量通过 using 或 import 变得可见，一个模块就不能创建自己的同名变量。导入的变量是只读的，分配给全局变量总是会影响到当前模块所拥有的变量，否则会引发错误。\n模块使用情况概述 要加载一个模块，可以使用两个主要的关键词：using 和 import。要了解它们的区别，请看下面的例子。\nmodule MyModule export x, y x() = \u0026#34;x\u0026#34; y() = \u0026#34;y\u0026#34; p() = \u0026#34;p\u0026#34; end 在这个模块中，我们导出了 x 和 y 函数(用关键字 export)，也有非导出的函数 p，有几种不同的方法可以将 Module 及其内部函数加载到当前的工作空间中。\n   导入命令 带入带作用域中的东西 可用于方法扩展     using MyModule 所有导出的名字(x 和 y), MyModule.x, MyModule.y 和 MyModule.p MyModule.x, MyModule.y 和 MyModule.p   using MyModule: x, p x 和 p    import MyModule MyModule.x, MyModule.y 和 MyModule.p MyModule.x, MyModule.y 和 MyModule.p   import MyModule.x, MyModule.p x 和 p x 和 p   import MyModule: x, p x 和 p x 和 p    模块和文件 文件和文件名大多与模块无关，模块只与模块表达式有关。一个模块可以有多个文件，一个文件可以有多个模块。\nmodule Foo include(\u0026#34;file1.jl\u0026#34;) include(\u0026#34;file2.jl\u0026#34;) end 在不同的模块中包含相同的代码，提供了类似 mixin 的行为。人们可以使用这一点来用不同的基础定义来运行相同的代码，例如，通过使用某些操作符的\u0026quot;安全\u0026quot;版本来测试代码。\nmodule Normal include(\u0026#34;mycode.jl\u0026#34;) end module Testing include(\u0026#34;safe_operators.jl\u0026#34;) include(\u0026#34;mycode.jl\u0026#34;) end 标准模块 There are three important standard modules:\nCore 包含\u0026quot;内置于\u0026quot;语言中的所有功能。 Base 包含几乎在所有情况下都有用的基本功能。 Main 是当 Julia 被启动时的顶级模块和当前模块。\n默认的顶层定义和裸模块 除了 using Base 之外，模块还自动包含 eval和 include 函数的定义，这些函数在该模块的全局作用域内评估表达式/文件。\n如果不想要这些默认的定义，可以使用关键字 baremodule 来代替定义模块（注意： Core 仍然是导入的，如上所述）。以 baremodule 来说，一个标准的模块是这样的。\nbaremodule Mod using Base eval(x) = Core.eval(Mod, x) include(p) = Base.include(Mod, p) ... end 相对和绝对模块路径 给定 using Foo 语句，系统会查询内部的顶层模块表，寻找一个名为 Foo 的模块。如果该模块不存在，系统会尝试 require(:Foo)，这通常会导致从安装的包中加载代码。\n然而，有些模块包含子模块，这意味着你有时需要访问一个非顶层模块。有两种方法可以做到这一点。第一种是使用绝对路径，例如 using Base.Sort。第二种是使用相对路径，这样可以更容易地导入当前模块的子模块或其任何一个外层模块。\nmodule Parent module Utils ... end using .Utils ... end 这里模块 Parent 包含一个子模块 Utils，Parent 中的代码希望 Utils 的内容可见。这可以通过在 using 路径中使用点号来实现。添加更多的前导点号会使模块的层次结构上升。例如，using ..Utils 会在 Parent 的外层模块中查找Utils，而不是在 Parent 本身中查找。\n注意相对导入限定符只在使用和导入语句中有效。\n命名空间杂项 如果一个名字是限定的(例如 Base.sin)，那么即使它没有被导出，也可以被访问。这在调试时往往很有用。它也可以通过使用限定名作为函数名来添加方法。但是，由于会产生语法上的歧义，如果你想给不同模块中的一个函数添加方法，而这个函数的名称只包含符号，例如一个运算符，Base.+，你必须使用 Base.:+ 来引用它。如果运算符的长度超过一个字符，你必须用括号把它括起来，比如 Base.:(==)。\n在导入和导出语句中，宏的名称用 @ 书写，例如 import Mod.@mac。其他模块中的宏可以用 Mod.@mac 或 @Mod.mac 来调用。\n语法 M.x = y 不能用于分配其他模块中的全局，全局分配总是模块-局部的。\n变量名可以通过声明为 global x 来 \u0026ldquo;保留\u0026quot;而不分配给它，这样可以防止加载后初始化的 globals 的名称冲突。\n模块初始化和预编译 大型模块可能需要几秒钟的时间来加载，因为执行一个模块中的所有语句往往需要编译大量的代码。Julia 创建了模块的预编译缓存来减少这个时间。\n当使用 import 或 using 加载模块时，会自动创建并使用增量的预编译模块文件。这将导致它在第一次导入时自动编译。另外，您也可以手动调用 Base.compilecache(modulename)。由此产生的缓存文件将存储在 DEPOT_PATH[1]/compiled/ 中。随后，只要模块的任何依赖关系发生变化，模块就会在 using 或 import 时自动重新编译；依赖关系是指导入的模块、Julia 构建的模块、包含的文件，或者模块文件中 include_dependency(path) 声明的显式依赖关系。\n对于文件依赖，通过检查由 include 加载的文件或由 include_dependency 显式添加的文件的修改时间(mtime)是否保持不变，或者是否等于被截断到最接近秒的修改时间(以适应无法以亚秒级精度复制 mtime 的系统)来确定变化。它还考虑到在 require 中搜索逻辑选择的文件路径是否与创建预编译文件的路径匹配。它还会考虑到已经加载到当前进程中的一组依赖关系，即使这些模块的文件发生变化或消失，也不会重新编译这些模块，以避免在运行系统和预编译缓存之间产生不兼容的情况。\n如果你知道某个模块预编译你的模块是不安全的（例如，出于下面描述的原因之一），你应该在模块文件中加上 __precompile__(false)（通常放在顶部）。这将导致 Base.compilecache 抛出一个错误，并将导致 using / import 直接将其加载到当前进程中而跳过预编译和缓存。这也因此阻止了该模块被任何其他预编译模块导入。\n您可能需要注意创建增量共享库时固有的某些行为，在编写模块时可能需要注意。例如，外部状态不会被保存。为了适应这一点，明确地将任何必须在运行时发生的初始化步骤与可以在编译时发生的步骤分开。为此，Julia 允许您在您的模块中定义一个 __init__() 函数来执行任何必须在运行时发生的初始化步骤。这个函数在编译时不会被调用（--output-*）。实际上，你可以假设它在代码的生命周期中只运行一次。当然，如果有必要的话，你可以手动调用它，但是默认情况下，你可以假设这个函数处理的是本地机器的计算状态，它不需要\u0026ndash;甚至不应该\u0026ndash;在编译后的镜像中捕获。它将在模块被加载到一个进程后被调用，包括如果它被加载到增量编译中(--output-incremental=yes)，但如果它被加载到一个完整的编译进程中，则不会被调用。\n特别是，如果你在一个模块中定义了一个 function __init__()，那么 Julia 将在模块被加载后（例如通过 import、using 或 require）在运行时第一次立即调用 __init__()（也就是说，__init__ 只被调用一次，而且是在模块中的所有语句被执行后才被调用）。因为它是在模块完全导入之后被调用的，所以任何子模块或其它导入的模块都会在外层模块的 __init__ 之前调用它们的 __init__ 函数。\n__init__ 的两个典型用途是调用外部 C 库的运行时初始化函数和初始化涉及外部库返回指针的全局常量。例如，假设我们正在调用一个 C 库 libfoo，它要求我们在运行时调用 foo_init() 初始化函数。假设我们还想定义一个全局常量 foo_data_ptr，用来存放 libfoo 定义的 void *foo_data() 函数的返回值\u0026ndash;这个常量必须在运行时（而不是在编译时）初始化，因为指针地址会随着运行而改变。你可以通过在你的模块中定义下面的 __init__ 函数来实现。\nconst foo_data_ptr = Ref{Ptr{Cvoid}}(0) function __init__() ccall((:foo_init, :libfoo), Cvoid, ()) foo_data_ptr[] = ccall((:foo_data, :libfoo), Ptr{Cvoid}, ()) nothing end 请注意，我们完全可以在函数内部定义一个全局，比如 __init__；这是使用动态语言的优势之一。但是通过在全局作用域内定义一个常量，我们可以确保编译器知道这个类型，并允许它生成更好的优化代码。显然，你的模块中任何其他依赖于 foo_data_ptr 的 globals 也必须在 __init__ 中初始化。\n涉及大多数不是由 ccall 产生的 Julia 对象的常量不需要放在 __init__ 中：它们的定义可以被预编译并从缓存的模块映像中加载。这包括像数组这样复杂的堆分配对象。然而，任何返回原始指针值的例程都必须在运行时调用，以便预编译工作（Ptr 对象将变成空指针，除非它们被隐藏在 isbits 对象中）。这包括 Julia 函数 cfunction 和 pointer 的返回值。\n字典和集合类型，或者一般来说任何依赖于 hash(key) 方法输出的东西，都是比较棘手的情况。在常见的情况下，键是数字、字符串、符号、范围、Expr 或这些类型的组合（通过数组、元组、集合、对等），它们可以安全地进行预编译。然而，对于其他一些关键类型，如 Function 或 DataType 和通用的用户定义类型，在这些类型中，你没有定义 hash 方法，回退 hash 方法取决于对象的内存地址（通过它的 objectid），因此可能会在运行时改变。如果你有这些键类型之一，或者如果你不确定，为了安全起见，你可以在你的 __init__ 函数中初始化这个字典。或者，你也可以使用 IdDict 字典类型，它由预编译特别处理，所以在编译时初始化是安全的。\n在使用预编译时，保持对编译阶段和执行阶段的清晰认识很重要。在这种模式下，往往会更清楚地认识到 Julia 是一个允许执行任意 Julia 代码的编译器，而不是一个同时生成编译代码的独立解释器。\n其他已知的潜在故障情况包括。\n 全局计数器（例如，用于试图唯一识别对象）。考虑以下代码片段。  mutable struct UniquedById myid::Int let counter = 0 UniquedById() = new(counter += 1) end end 虽然这段代码的目的是给每个实例一个唯一的 id，但计数器的值是在编译结束时记录的。这个增量编译模块的所有后续使用将从同一个计数器值开始。\n请注意，objectid（通过哈希内存指针工作）也有类似的问题（参见下面关于 Dict 用法的说明）。\n一种替代方法是使用宏来捕获 @MODULE，并将其与当前的计数器值一起单独存储，然而，重新设计代码使其不依赖于这个全局状态可能会更好。\n 关联集合(比如 Dict 和 Set)需要在 __init__ 中重新洗牌(将来可能会提供一个机制来注册一个初始化函数)。\n  根据编译时的副作用在加载时持续存在。例如：修改其他 Julia 模块中的数组或其他变量；维护打开的文件或设备的句柄；存储其他系统资源（包括内存）的指针。\n  通过直接引用而不是通过它的查找路径，从另一个模块创建意外的全局状态\u0026quot;副本\u0026rdquo;。例如，（在全局作用域内）。\n  #mystdout = Base.stdout #= will not work correctly, since this will copy Base.stdout into this module =# # instead use accessor functions: getstdout() = Base.stdout #= best option =# # or move the assignment into the runtime: __init__() = global mystdout = Base.stdout #= also works =# 对预编译代码时可以进行的操作进行了一些额外的限制，以帮助用户避免其他错误行为的情况。\n  调用 eval 引起另一个模块的副作用。当增量预编译标志被设置时，这也会导致发出警告。\n  在 __init__() 被启动后，从本地作用域调用 global const 语句(参见问题 #12010，计划为此增加一个错误)\n  在进行增量预编译时，替换一个模块是一个运行时错误。\n  还有几点需要注意。\n  在对源文件本身进行修改之后，不会进行代码重载/缓存无效化（包括通过 Pkg.update），而且在 Pkg.rm 之后也不会进行清理。\n  预编译不考虑重塑数组的内存共享行为 (每个视图都有自己的副本)\n  期待文件系统在编译时和运行时之间保持不变，例如 @FILE/source_path() 在运行时查找资源，或者 BinDeps 的 @checked_lib 宏。有时这是不可避免的。然而，在可能的情况下，在编译时将资源复制到模块中是一个很好的做法，这样它们就不需要在运行时被找到。\n  WeakRef 对象和 finalizers 目前还没有被序列化器正确处理（这将在即将发布的版本中得到修正）。\n  通常最好避免捕获对内部元数据对象实例的引用，如 Method、MethodInstance、MethodTable、TypeMapLevel、TypeMapEntry 以及这些对象的字段，因为这可能会混淆序列化器，可能不会导致你想要的结果。这样做不一定会出错，但你只需要做好准备，系统会尝试复制其中的一些对象，并为其他对象创建一个唯一的实例。\n  在模块开发过程中，有时关闭增量预编译是很有帮助的。命令行标志 --compiled-modules={yes|no} 可以让你开启或关闭模块预编译。当 Julia 以 --compiled-modules=no 启动时，当加载模块和模块依赖时，编译缓存中的序列化模块会被忽略。Base.compilecache 仍然可以被手动调用。这个命令行标志的状态被传递给 Pkg.build，以便在安装、更新和显式构建包时禁用自动预编译触发。\n"},"name":"Julia 中的 模块","published":"2020-08-05T00:00:00+08:00","summary":"Modules","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-05-modules-in-julia/"},{"content":{"html":"\u003ch2 id=\"进入-pkg-模式\"\u003e进入 Pkg 模式\u003c/h2\u003e\n\u003cp\u003ePkg 是 Julia 中包管理工具。Pkg 来自于 REPL, 在 Julia 的 REPL 中按下 \u003ccode\u003e]\u003c/code\u003e 就进入 Pkg REPL 了。要回到 Julia REPL, 按退格键或 \u003ccode\u003e^C\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"使用-pkg\"\u003e使用 Pkg\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eadd JSON              \u003cspan class=\"c1\"\u003e# 添加一个 package\u003c/span\u003e\nadd JSON StaticArrays \u003cspan class=\"c1\"\u003e# 添加多个 package\u003c/span\u003e\nrm JSON               \u003cspan class=\"c1\"\u003e# 移除一个 package\u003c/span\u003e\nrm JSON StaticArrays  \u003cspan class=\"c1\"\u003e# 移除多个 package\u003c/span\u003e\nadd https://github.com/JuliaLang/Example.jl \u003cspan class=\"c1\"\u003e# 添加一个未注册的 package\u003c/span\u003e\nrm Example            \u003cspan class=\"c1\"\u003e# 按名字移除 package\u003c/span\u003e\nupdate Example        \u003cspan class=\"c1\"\u003e# 升级一个已安装的 package\u003c/span\u003e\nupdate                \u003cspan class=\"c1\"\u003e# 升级所有已安装的 package\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"environments\"\u003eenvironments\u003c/h2\u003e\n\u003cp\u003e你可能已经注意到 Pkg REPL 提示符前面的 \u003ccode\u003e(@v1.5)\u003c/code\u003e 字符串了。这里的  \u003ccode\u003e(@v1.5)\u003c/code\u003e 就是激活环境(\u003cstrong\u003eactive environment\u003c/strong\u003e)。激活环境是能被诸如 \u003ccode\u003eadd\u003c/code\u003e、\u003ccode\u003erm\u003c/code\u003e 和 \u003ccode\u003eupdate\u003c/code\u003e 等 Pkg 命令修改的环境。\u003c/p\u003e\n\u003cp\u003e我们可以设置一个新的激活环境用于实验。要设置激活环境, 使用 \u003ccode\u003eactivate\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e@v1.5\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; activate tutorial\nActivating new environment at \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e~/tutorial/Project.toml\u003c/code\u003e 是激活环境的项目文件。项目文件是 Pkg 存储环境的元数据的地方。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; status\nStatus \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eempty project\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在这个新的环境是空的, 我们添加一个 package 观察下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; add Example\n   Updating registry at \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/.julia/registries/General\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n   Updating git-repo \u003cspan class=\"sb\"\u003e`\u003c/span\u003ehttps://github.com/JuliaRegistries/General.git\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  Resolving package versions...\n    Cloning \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07-990d-54b4-ab0e-23690620f79a\u003cspan class=\"o\"\u003e]\u003c/span\u003e Example from https://github.com/JuliaLang/Example.jl.git\n  Installed Example ─ v0.5.3\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e + Example v0.5.3\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Manifest.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e + Example v0.5.3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用 \u003ccode\u003estatus\u003c/code\u003e 命令查看激活环境的信息:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; status\nStatus \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e Example v0.5.3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用 \u003ccode\u003edevelop\u003c/code\u003e 命令设置 \u003ccode\u003eExample\u003c/code\u003e package 的 一个 \u003ccode\u003egit clone\u003c/code\u003e, 以供我们修改这个本地仓库:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; develop --local Example\n    Cloning git-repo \u003cspan class=\"sb\"\u003e`\u003c/span\u003ehttps://github.com/JuliaLang/Example.jl.git\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  Resolving package versions...\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e ~ Example v0.5.3 ⇒ v0.5.4 \u003cspan class=\"sb\"\u003e`\u003c/span\u003edev/Example\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Manifest.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e ~ Example v0.5.3 ⇒ v0.5.4 \u003cspan class=\"sb\"\u003e`\u003c/span\u003edev/Example\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用 \u003ccode\u003e;\u003c/code\u003e 切换到 shell 模式, 用 vi 修改 \u003ccode\u003e~/tutorial/dev/Example/src/Example.jl\u003c/code\u003e 文件, 增加一个 \u003ccode\u003eplusone\u003c/code\u003e 函数, 保存。\u003c/p\u003e\n\u003cp\u003e在 Julia 的 REPL 中, 导入修改后的 \u003ccode\u003eExample\u003c/code\u003e package:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; import Example\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e Info: Precompiling Example \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07-990d-54b4-ab0e-23690620f79a\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\njulia\u0026gt; Example.plusone\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e2\u003c/span\u003e\n\njulia\u0026gt; Example.plusone\u003cspan class=\"o\"\u003e(\u003c/span\u003e4\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到我们添加的函数生效了, 这样就很方便我们添加测试新功能。如果我们已经不再需要本地的 \u003ccode\u003eExample\u003c/code\u003e 了, 需要使用 \u003ccode\u003efree\u003c/code\u003e 命令以停止使用本地克隆的 package, 转而使用已注册版本代替:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; free Example\n  Resolving package versions...\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e ~ Example v0.5.4 \u003cspan class=\"sb\"\u003e`\u003c/span\u003edev/Example\u003cspan class=\"sb\"\u003e`\u003c/span\u003e ⇒ v0.5.3\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Manifest.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e ~ Example v0.5.4 \u003cspan class=\"sb\"\u003e`\u003c/span\u003edev/Example\u003cspan class=\"sb\"\u003e`\u003c/span\u003e ⇒ v0.5.3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果已经用 \u003ccode\u003etutorial\u003c/code\u003e 做完实验了, 可以使用不带参数的 \u003ccode\u003eactivate\u003c/code\u003e 回到默认环境:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; activate\n Activating environment at \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/.julia/environments/v1.5/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e@v1.5\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"进入 Pkg 模式 Pkg 是 Julia 中包管理工具。Pkg 来自于 REPL, 在 Julia 的 REPL 中按下 ] 就进入 Pkg REPL 了。要回到 Julia REPL, 按退格键或 ^C。\n使用 Pkg add JSON # 添加一个 package add JSON StaticArrays # 添加多个 package rm JSON # 移除一个 package rm JSON StaticArrays # 移除多个 package add https://github.com/JuliaLang/Example.jl # 添加一个未注册的 package rm Example # 按名字移除 package update Example # 升级一个已安装的 package update # 升级所有已安装的 package environments 你可能已经注意到 Pkg REPL 提示符前面的 (@v1.5) 字符串了。这里的 (@v1.5) 就是激活环境(active environment)。激活环境是能被诸如 add、rm 和 update 等 Pkg 命令修改的环境。\n我们可以设置一个新的激活环境用于实验。要设置激活环境, 使用 activate:\n(@v1.5) pkg\u0026gt; activate tutorial Activating new environment at `~/tutorial/Project.toml` ~/tutorial/Project.toml 是激活环境的项目文件。项目文件是 Pkg 存储环境的元数据的地方。\n(tutorial) pkg\u0026gt; status Status `~/tutorial/Project.toml` (empty project) 现在这个新的环境是空的, 我们添加一个 package 观察下:\n(tutorial) pkg\u0026gt; add Example Updating registry at `~/.julia/registries/General` Updating git-repo `https://github.com/JuliaRegistries/General.git` Resolving package versions... Cloning [7876af07-990d-54b4-ab0e-23690620f79a] Example from https://github.com/JuliaLang/Example.jl.git Installed Example ─ v0.5.3 Updating `~/tutorial/Project.toml` [7876af07] + Example v0.5.3 Updating `~/tutorial/Manifest.toml` [7876af07] + Example v0.5.3 用 status 命令查看激活环境的信息:\n(tutorial) pkg\u0026gt; status Status `~/tutorial/Project.toml` [7876af07] Example v0.5.3 使用 develop 命令设置 Example package 的 一个 git clone, 以供我们修改这个本地仓库:\n(tutorial) pkg\u0026gt; develop --local Example Cloning git-repo `https://github.com/JuliaLang/Example.jl.git` Resolving package versions... Updating `~/tutorial/Project.toml` [7876af07] ~ Example v0.5.3 ⇒ v0.5.4 `dev/Example` Updating `~/tutorial/Manifest.toml` [7876af07] ~ Example v0.5.3 ⇒ v0.5.4 `dev/Example` 用 ; 切换到 shell 模式, 用 vi 修改 ~/tutorial/dev/Example/src/Example.jl 文件, 增加一个 plusone 函数, 保存。\n在 Julia 的 REPL 中, 导入修改后的 Example package:\njulia\u0026gt; import Example [ Info: Precompiling Example [7876af07-990d-54b4-ab0e-23690620f79a] julia\u0026gt; Example.plusone(1) 2 julia\u0026gt; Example.plusone(4) 5 可以看到我们添加的函数生效了, 这样就很方便我们添加测试新功能。如果我们已经不再需要本地的 Example 了, 需要使用 free 命令以停止使用本地克隆的 package, 转而使用已注册版本代替:\n(tutorial) pkg\u0026gt; free Example Resolving package versions... Updating `~/tutorial/Project.toml` [7876af07] ~ Example v0.5.4 `dev/Example` ⇒ v0.5.3 Updating `~/tutorial/Manifest.toml` [7876af07] ~ Example v0.5.4 `dev/Example` ⇒ v0.5.3 如果已经用 tutorial 做完实验了, 可以使用不带参数的 activate 回到默认环境:\n(tutorial) pkg\u0026gt; activate Activating environment at `~/.julia/environments/v1.5/Project.toml` (@v1.5) pkg\u0026gt; "},"name":"Julia 中的 Pkg","published":"2020-08-04T00:00:00+08:00","summary":"Pkg","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-04-pkg-in-julia/"},{"content":{"html":"\u003ch1 id=\"dates-模块的加载和使用\"\u003eDates 模块的加载和使用\u003c/h1\u003e\n\u003cp\u003e在 Julia 的 Pkg REPL 中, 输入 \u003ccode\u003eadd Dates\u003c/code\u003e 添加 Dates 模块。回到 Julia 的 REPL 中, 输入:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; using Dates\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-01-01T00:00:00\n\njulia\u0026gt; typeof\u003cspan class=\"o\"\u003e(\u003c/span\u003eDateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020\u003cspan class=\"o\"\u003e))\u003c/span\u003e\nDateTime\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T00:00:00\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1,12\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T12:00:00\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1,12,30\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T12:30:00\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1,12,30,59\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T12:30:59\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1,12,30,59, 999\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T12:30:59.999\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020, 8\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020, 8, 1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003eDates.Year\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020\u003cspan class=\"o\"\u003e)\u003c/span\u003e,Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e8\u003cspan class=\"o\"\u003e)\u003c/span\u003e,Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n2020-08-01\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003eDates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e8\u003cspan class=\"o\"\u003e)\u003c/span\u003e,Dates.Year\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n2020-08-01\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"date-和-datetime-的算术操作\"\u003eDate 和 DateTime 的算术操作\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003edt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2012,2,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2012-02-29\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003edt2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2000,2,1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2000-02-01\n\njulia\u0026gt; dump\u003cspan class=\"o\"\u003e(\u003c/span\u003edt\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\n  instant: Dates.UTInstant\u003cspan class=\"o\"\u003e{\u003c/span\u003eDay\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    periods: Day\n      value: Int64 \u003cspan class=\"m\"\u003e734562\u003c/span\u003e\n\njulia\u0026gt; dump\u003cspan class=\"o\"\u003e(\u003c/span\u003edt2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\n  instant: Dates.UTInstant\u003cspan class=\"o\"\u003e{\u003c/span\u003eDay\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    periods: Day\n      value: Int64 \u003cspan class=\"m\"\u003e730151\u003c/span\u003e\n\njulia\u0026gt; dt \u0026gt; dt2\n\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\njulia\u0026gt; dt !\u003cspan class=\"o\"\u003e=\u003c/span\u003e dt2\n\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\njulia\u0026gt; dt + dt2\nERROR: MethodError: no method matching +\u003cspan class=\"o\"\u003e(\u003c/span\u003e::Date, ::Date\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\njulia\u0026gt; dt * dt2\nERROR: MethodError: no method matching *\u003cspan class=\"o\"\u003e(\u003c/span\u003e::Date, ::Date\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\njulia\u0026gt; dt / dt2\nERROR: MethodError: no method matching /\u003cspan class=\"o\"\u003e(\u003c/span\u003e::Date, ::Date\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; dt - dt2\n\u003cspan class=\"m\"\u003e4411\u003c/span\u003e days\n\njulia\u0026gt; typeof\u003cspan class=\"o\"\u003e(\u003c/span\u003edt - dt2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDay\n\njulia\u0026gt; dt2 - dt\n-4411 days\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003edt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2012,2,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2012-02-29T00:00:00\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003edt2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2000,2,1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2000-02-01T00:00:00\n\njulia\u0026gt; dt - dt2\n\u003cspan class=\"m\"\u003e381110400000\u003c/span\u003e milliseconds\n\njulia\u0026gt; typeof\u003cspan class=\"o\"\u003e(\u003c/span\u003edt - dt2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nMillisecond\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"访问器函数\"\u003e访问器函数\u003c/h1\u003e\n\u003cp\u003e因为 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Date\"\u003eDate\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.DateTime\"\u003eDateTime\u003c/a\u003e 类型被存储为单个 \u003ca href=\"https://docs.julialang.org/en/v1/base/numbers/#Core.Int64\"\u003eInt64\u003c/a\u003e 值，所以日期部分或字段可以通过访问器函数进行检索。小写访问器函数以整数形式返回字段。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014, 1, 31\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-01-31\n\njulia\u0026gt; Dates.year\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e2014\u003c/span\u003e\n\njulia\u0026gt; Dates.month\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\njulia\u0026gt; Dates.week\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\njulia\u0026gt; Dates.day\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e而专有形式返回相应 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Period\"\u003ePeriod\u003c/a\u003e 类型中的相同值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.Year\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e2014\u003c/span\u003e years\n\njulia\u0026gt; Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e days\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eJulia 还提供了复合方法，因为在同时需要多个字段的情况下，这些方法提供了一种效率衡量标准。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.yearmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014, 1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; Dates.monthday\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e1, 31\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; Dates.yearmonthday\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014, 1, 31\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也可以访问底层 \u003ccode\u003eUTInstant\u003c/code\u003e 或整数值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; dump\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\n  instant: Dates.UTInstant\u003cspan class=\"o\"\u003e{\u003c/span\u003eDay\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    periods: Day\n      value: Int64 \u003cspan class=\"m\"\u003e735264\u003c/span\u003e\n\njulia\u0026gt; t.instant\nDates.UTInstant\u003cspan class=\"o\"\u003e{\u003c/span\u003eDay\u003cspan class=\"o\"\u003e}(\u003c/span\u003eDay\u003cspan class=\"o\"\u003e(\u003c/span\u003e735264\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n\njulia\u0026gt; Dates.value\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e735264\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"查询函数\"\u003e查询函数\u003c/h1\u003e\n\u003cp\u003e查询函数提供关于 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 的历法信息。它们包括关于一周中的某一天的信息。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014, 1, 31\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-01-31\n\njulia\u0026gt; Dates.dayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\njulia\u0026gt; Dates.dayname\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;Friday\u0026#34;\u003c/span\u003e\n\njulia\u0026gt; Dates.dayofweekofmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 5th Friday of January\u003c/span\u003e\n\u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\njulia\u0026gt; Dates.monthname\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;January\u0026#34;\u003c/span\u003e\n\njulia\u0026gt; Dates.daysinmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以及 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 的年份和季度信息。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.isleapyear\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\n\njulia\u0026gt; Dates.dayofyear\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\njulia\u0026gt; Dates.quarterofyear\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\njulia\u0026gt; Dates.dayofquarter\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.dayname\"\u003edayname\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.monthname\"\u003emonthname\u003c/a\u003e 方法也可以使用一个可选的 \u003ccode\u003elocale\u003c/code\u003e 关键字，它可以用来返回其他语言/地区的年份或月份的名称。这些函数也有返回缩写名称的版本，即 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.dayabbr\"\u003edayabbr\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.monthabbr\"\u003emonthabbr\u003c/a\u003e。首先将映射加载到 \u003ccode\u003eLOCALES\u003c/code\u003e 变量中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003efrench_months\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;janvier\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;février\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;mars\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;avril\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;mai\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;juin\u0026#34;\u003c/span\u003e,\n                        \u003cspan class=\"s2\"\u003e\u0026#34;juillet\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;août\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;septembre\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;octobre\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;novembre\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;décembre\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003efrench_monts_abbrev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;janv\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;févr\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;mars\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;avril\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;mai\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;juin\u0026#34;\u003c/span\u003e,\n                              \u003cspan class=\"s2\"\u003e\u0026#34;juil\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;août\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;sept\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;oct\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;nov\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;déc\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003efrench_days\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;lundi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;mardi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;mercredi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;jeudi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;vendredi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;samedi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;dimanche\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; Dates.LOCALES\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.DateLocale\u003cspan class=\"o\"\u003e(\u003c/span\u003efrench_months, french_monts_abbrev, french_days, \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e])\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后可以利用上述函数进行查询。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.dayname\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;vendredi\u0026#34;\u003c/span\u003e\n\njulia\u0026gt; Dates.monthname\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;janvier\u0026#34;\u003c/span\u003e\n\njulia\u0026gt; Dates.monthabbr\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;janv\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于没有加载日期的缩写版本，试图使用函数 \u003ccode\u003edayabbr\u003c/code\u003e 会出错。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.dayabbr\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nERROR: BoundsError: attempt to access 1-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eString,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e at index \u003cspan class=\"o\"\u003e[\u003c/span\u003e5\u003cspan class=\"o\"\u003e]\u003c/span\u003e\nStacktrace:\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"时间类型-周期算术\"\u003e时间类型-周期算术\u003c/h1\u003e\n\u003cp\u003e在使用任何语言/日期框架时，熟悉如何处理日期-周期算术是一个很好的做法，因为有一些\u003ca href=\"https://codeblog.jonskeet.uk/2010/12/01/the-joys-of-date-time-arithmetic/\"\u003e棘手的问题\u003c/a\u003e需要处理（尽管对于日-精度类型来说要少得多）。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eDates\u003c/code\u003e 模块的方法试图遵循简单的原则，即在做 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Period\"\u003ePeriod\u003c/a\u003e 算术时尽量少改。这种方法也常被称为历法算术，或者说如果有人在对话中问你同样的计算方法，你可能会猜到。为什么要大惊小怪呢？我们举个经典的例子：把2014年1月31日加1个月。答案是什么？Javascript 会说\u003ca href=\"https://markhneedham.com/blog/2009/01/07/javascript-add-a-month-to-a-date/\"\u003e3月3日\u003c/a\u003e（假设31天）。PHP 会说\u003ca href=\"https://stackoverflow.com/questions/5760262/php-adding-months-to-a-date-while-not-exceeding-the-last-day-of-the-month\"\u003e3月2日\u003c/a\u003e（假设30天）。事实上，没有正确的答案。在 \u003ccode\u003eDates\u003c/code\u003e 模块中，它给出的结果是2月28日。它是如何计算出来的呢？我喜欢想到赌场里经典的 7-7-7 赌博游戏。\u003c/p\u003e\n\u003cp\u003e现在只要想象一下，老虎机不是 7-7-7，而是年-月-日，或者在我们的例子中，2014-01-31。当你要求在这个日期的基础上增加1个月的时候，月份槽就会递增，所以现在我们有 2014-02-31。然后检查日号是否大于新月份的最后有效日，如果大于（如上例），则日号向下调整到最后有效日（28）。这种方法的后果是什么呢？继续在我们的日期上再加一个月，\u003ccode\u003e2014-02-28 + Month(1) == 2014-03-28\u003c/code\u003e。什么？你是在期待3月的最后一天吗？不对，对不起，记得 7-7-7 的档期。尽可能少的槽位要改变，所以我们先把月份槽位递增1，2014-03-28，轰，我们就完成了，因为这是一个有效的日期。另一方面，如果我们要在原来的日期 2014-01-31 的基础上增加2个月，那么我们最终的结果是 2014-03-31，正如预期的那样。这种方法的另一个后果是，当强行进行特定的排序时，关联性会有所损失（即以不同的顺序添加东西会导致不同的结果）。比如说：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e+Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e))\u003c/span\u003e + Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-02-28\n\njulia\u0026gt; \u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e+Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e))\u003c/span\u003e + Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-03-01\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e那是怎么回事呢？在第一行中，我们在1月29日的基础上加1天，结果是 2014-01-30；然后再加1个月，于是得到 2014-02-30，再往下调整为 2014-02-28。在第二个例子中，我们先加1个月，我们得到 2014-02-29，再往下调整为 2014-02-28，然后再加1天，结果是 2014-03-01。在这种情况下，有一个设计原则是有帮助的，那就是在存在多个 Periods 的情况下，操作将按照 Periods 的类型来排序，而不是按照它们的值或位置顺序来排序；这意味着总是先加 \u003ccode\u003eYear\u003c/code\u003e，然后加 \u003ccode\u003eMonth\u003c/code\u003e，再加 \u003ccode\u003eWeek\u003c/code\u003e 等。因此，以下确实会导致关联性并正好有用:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-03-01\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-03-01\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e棘手吗？也许吧。一个无辜的 \u003ccode\u003eDates\u003c/code\u003e 用户该怎么做？最重要的是要注意，当处理月份时，明确地强制执行某种关联性，可能会导致一些意想不到的结果，但除此之外，一切都应该按照预期工作。值得庆幸的是，在 UT 中处理时间时，日期-周期算术中的奇特情况几乎就是这样了（避免了处理夏令时、闰秒等的 \u0026ldquo;乐趣\u0026rdquo;）。\u003c/p\u003e\n\u003cp\u003e作为奖励，所有的周期算术对象都可以直接与范围一起工作。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003edr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,2,3\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2014-01-29\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2014-02-03\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; collect\u003cspan class=\"o\"\u003e(\u003c/span\u003edr\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n6-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eDate,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 2014-01-29\n 2014-01-30\n 2014-01-31\n 2014-02-01\n 2014-02-02\n 2014-02-03\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003edr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,07,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2014-01-29\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2014-07-29\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; collect\u003cspan class=\"o\"\u003e(\u003c/span\u003edr\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n7-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eDate,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 2014-01-29\n 2014-02-28\n 2014-03-29\n 2014-04-29\n 2014-05-29\n 2014-06-29\n 2014-07-29\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003efor i in Date(\u0026quot;2020-08-01\u0026quot;):Day(1):Date(\u0026quot;2020-08-09\u0026quot;)\n           println(i)\nend\n\n2020-08-01\n2020-08-02\n2020-08-03\n2020-08-04\n2020-08-05\n2020-08-06\n2020-08-07\n2020-08-08\n2020-08-09\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"调整器函数\"\u003e调整器函数\u003c/h1\u003e\n\u003cp\u003e尽管日期-周期算术很方便，但经常需要在日期上进行的计算具有日历或时间的性质，而不是固定的周期数。节日就是一个很好的例子，大多数都遵循这样的规则：\u0026ldquo;纪念日 = 五月的最后一个星期一\u0026rdquo;，或者 \u0026ldquo;感恩节 = 十一月的第四个星期四\u0026rdquo;。这类时间表达式处理的是相对于日历的规则，比如本月的第一天或最后一天，下周二，或第一个和第三个星期三等。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eDates\u003c/code\u003e 模块通过几个方便的方法提供了调整器 API，这些方法有助于简单、简洁地表达时间规则。第一组调整器方法处理周、月、季度和年的首尾。它们每个方法都接收一个单一的 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 作为输入，并返回或调整到相对于输入的所需时期的第一个或最后一个。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.firstdayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,16\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Adjusts the input to the Monday of the input\u0026#39;s week\u003c/span\u003e\n2014-07-14\n\njulia\u0026gt; Dates.lastdayofmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,16\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Adjusts to the last day of the input\u0026#39;s month\u003c/span\u003e\n2014-07-31\n\njulia\u0026gt; Dates.lastdayofquarter\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,16\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Adjusts to the last day of the input\u0026#39;s quarter\u003c/span\u003e\n2014-09-30\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来的两个高阶方法 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.tonext-Tuple%7BTimeType,Int64%7D\"\u003etonext\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.toprev-Tuple%7BTimeType,Int64%7D\"\u003etoprev\u003c/a\u003e，通过将一个 \u003ccode\u003eDateFunction\u003c/code\u003e 和一个起始 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 作为第一个参数来概括处理时间表达式。\u003ccode\u003eDateFunction\u003c/code\u003e 只是一个函数，通常是匿名的，它接受一个单一的 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 作为输入，并返回一个 \u003ca href=\"https://docs.julialang.org/en/v1/base/numbers/#Core.Bool\"\u003eBool\u003c/a\u003e，\u003ccode\u003etrue\u003c/code\u003e 表示满足调整标准。例如:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003eistuesday\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e x-\u0026gt;Dates.dayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e Dates.Tuesday\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Returns true if the day of the week of x is Tuesday\u003c/span\u003e\n\njulia\u0026gt; Dates.tonext\u003cspan class=\"o\"\u003e(\u003c/span\u003eistuesday, Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,13\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 2014-07-13 is a Sunday\u003c/span\u003e\n2014-07-15\n\njulia\u0026gt; Dates.tonext\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,13\u003cspan class=\"o\"\u003e)\u003c/span\u003e, Dates.Tuesday\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Convenience method provided for day of the week adjustments\u003c/span\u003e\n2014-07-15\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这对于更复杂的时间表达式的 do-block 语法是很有用的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.tonext\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,13\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e x\n           \u003cspan class=\"c1\"\u003e# Return true on the 4th Thursday of November (Thanksgiving)\u003c/span\u003e\n           Dates.dayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e Dates.Thursday \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n           Dates.dayofweekofmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n           Dates.month\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e Dates.November\n       end\n2014-11-27\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.julialang.org/en/v1/base/collections/#Base.filter\"\u003eBase.filter\u003c/a\u003e 方法可以用来获取指定范围内的所有有效日期/时刻。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# 匹兹堡街道清洁; 从 4月到11月的每第二个周二\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 日期范围从 2014-01-01 到 2015-01-01\u003c/span\u003e\njulia\u0026gt; \u003cspan class=\"nv\"\u003edr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Dates.Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2015\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; filter\u003cspan class=\"o\"\u003e(\u003c/span\u003edr\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e x\n           Dates.dayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e Dates.Tue \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n           Dates.April \u0026lt;\u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.month\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u0026lt;\u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.Nov \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n           Dates.dayofweekofmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\n       end\n8-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eDate,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 2014-04-08\n 2014-05-13\n 2014-06-10\n 2014-07-08\n 2014-08-12\n 2014-09-09\n 2014-10-14\n 2014-11-11\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Raku 中上面的代码可以写成:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003elazy my @dates = Date.new('2014-01-01') ... Date.new('2015-01-01');\n\n.say for @dates.grep: -\u0026gt; $d {\n    $d.day-of-week == 2 \u0026amp;\u0026amp;\n    4  \u0026lt;= $d.month \u0026lt;= 11 \u0026amp;\u0026amp;\n    $d.weekday-of-month == 2\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其他的例子和测试可以在 \u003ca href=\"https://github.com/JuliaLang/julia/blob/master/stdlib/Dates/test/adjusters.jl\"\u003estdlib/Dates/test/adjusters.jl\u003c/a\u003e 中找到。\u003c/p\u003e\n","text":"Dates 模块的加载和使用 在 Julia 的 Pkg REPL 中, 输入 add Dates 添加 Dates 模块。回到 Julia 的 REPL 中, 输入:\njulia\u0026gt; using Dates julia\u0026gt; DateTime(2020) 2020-01-01T00:00:00 julia\u0026gt; typeof(DateTime(2020)) DateTime julia\u0026gt; DateTime(2020,8,1) 2020-08-01T00:00:00 julia\u0026gt; DateTime(2020,8,1,12) 2020-08-01T12:00:00 julia\u0026gt; DateTime(2020,8,1,12,30) 2020-08-01T12:30:00 julia\u0026gt; DateTime(2020,8,1,12,30,59) 2020-08-01T12:30:59 julia\u0026gt; DateTime(2020,8,1,12,30,59, 999) 2020-08-01T12:30:59.999 julia\u0026gt; Date(2020, 8) 2020-08-01 julia\u0026gt; Date(2020, 8, 1) 2020-08-01 julia\u0026gt; Date(Dates.Year(2020),Dates.Month(8),Dates.Day(1)) 2020-08-01 julia\u0026gt; Date(Dates.Month(8),Dates.Year(2020)) 2020-08-01 Date 和 DateTime 的算术操作 julia\u0026gt; dt = Date(2012,2,29) 2012-02-29 julia\u0026gt; dt2 = Date(2000,2,1) 2000-02-01 julia\u0026gt; dump(dt) Date instant: Dates.UTInstant{Day} periods: Day value: Int64 734562 julia\u0026gt; dump(dt2) Date instant: Dates.UTInstant{Day} periods: Day value: Int64 730151 julia\u0026gt; dt \u0026gt; dt2 true julia\u0026gt; dt != dt2 true julia\u0026gt; dt + dt2 ERROR: MethodError: no method matching +(::Date, ::Date) [...] julia\u0026gt; dt * dt2 ERROR: MethodError: no method matching *(::Date, ::Date) [...] julia\u0026gt; dt / dt2 ERROR: MethodError: no method matching /(::Date, ::Date) julia\u0026gt; dt - dt2 4411 days julia\u0026gt; typeof(dt - dt2) Day julia\u0026gt; dt2 - dt -4411 days julia\u0026gt; dt = DateTime(2012,2,29) 2012-02-29T00:00:00 julia\u0026gt; dt2 = DateTime(2000,2,1) 2000-02-01T00:00:00 julia\u0026gt; dt - dt2 381110400000 milliseconds julia\u0026gt; typeof(dt - dt2) Millisecond 访问器函数 因为 Date 和 DateTime 类型被存储为单个 Int64 值，所以日期部分或字段可以通过访问器函数进行检索。小写访问器函数以整数形式返回字段。\njulia\u0026gt; t = Date(2014, 1, 31) 2014-01-31 julia\u0026gt; Dates.year(t) 2014 julia\u0026gt; Dates.month(t) 1 julia\u0026gt; Dates.week(t) 5 julia\u0026gt; Dates.day(t) 31 而专有形式返回相应 Period 类型中的相同值。\njulia\u0026gt; Dates.Year(t) 2014 years julia\u0026gt; Dates.Day(t) 31 days Julia 还提供了复合方法，因为在同时需要多个字段的情况下，这些方法提供了一种效率衡量标准。\njulia\u0026gt; Dates.yearmonth(t) (2014, 1) julia\u0026gt; Dates.monthday(t) (1, 31) julia\u0026gt; Dates.yearmonthday(t) (2014, 1, 31) 也可以访问底层 UTInstant 或整数值。\njulia\u0026gt; dump(t) Date instant: Dates.UTInstant{Day} periods: Day value: Int64 735264 julia\u0026gt; t.instant Dates.UTInstant{Day}(Day(735264)) julia\u0026gt; Dates.value(t) 735264 查询函数 查询函数提供关于 TimeType 的历法信息。它们包括关于一周中的某一天的信息。\njulia\u0026gt; t = Date(2014, 1, 31) 2014-01-31 julia\u0026gt; Dates.dayofweek(t) 5 julia\u0026gt; Dates.dayname(t) \u0026#34;Friday\u0026#34; julia\u0026gt; Dates.dayofweekofmonth(t) # 5th Friday of January 5 julia\u0026gt; Dates.monthname(t) \u0026#34;January\u0026#34; julia\u0026gt; Dates.daysinmonth(t) 31 以及 TimeType 的年份和季度信息。\njulia\u0026gt; Dates.isleapyear(t) false julia\u0026gt; Dates.dayofyear(t) 31 julia\u0026gt; Dates.quarterofyear(t) 1 julia\u0026gt; Dates.dayofquarter(t) 31 dayname 和 monthname 方法也可以使用一个可选的 locale 关键字，它可以用来返回其他语言/地区的年份或月份的名称。这些函数也有返回缩写名称的版本，即 dayabbr 和 monthabbr。首先将映射加载到 LOCALES 变量中。\njulia\u0026gt; french_months = [\u0026#34;janvier\u0026#34;, \u0026#34;février\u0026#34;, \u0026#34;mars\u0026#34;, \u0026#34;avril\u0026#34;, \u0026#34;mai\u0026#34;, \u0026#34;juin\u0026#34;, \u0026#34;juillet\u0026#34;, \u0026#34;août\u0026#34;, \u0026#34;septembre\u0026#34;, \u0026#34;octobre\u0026#34;, \u0026#34;novembre\u0026#34;, \u0026#34;décembre\u0026#34;]; julia\u0026gt; french_monts_abbrev = [\u0026#34;janv\u0026#34;,\u0026#34;févr\u0026#34;,\u0026#34;mars\u0026#34;,\u0026#34;avril\u0026#34;,\u0026#34;mai\u0026#34;,\u0026#34;juin\u0026#34;, \u0026#34;juil\u0026#34;,\u0026#34;août\u0026#34;,\u0026#34;sept\u0026#34;,\u0026#34;oct\u0026#34;,\u0026#34;nov\u0026#34;,\u0026#34;déc\u0026#34;]; julia\u0026gt; french_days = [\u0026#34;lundi\u0026#34;,\u0026#34;mardi\u0026#34;,\u0026#34;mercredi\u0026#34;,\u0026#34;jeudi\u0026#34;,\u0026#34;vendredi\u0026#34;,\u0026#34;samedi\u0026#34;,\u0026#34;dimanche\u0026#34;]; julia\u0026gt; Dates.LOCALES[\u0026#34;french\u0026#34;] = Dates.DateLocale(french_months, french_monts_abbrev, french_days, [\u0026#34;\u0026#34;]); 然后可以利用上述函数进行查询。\njulia\u0026gt; Dates.dayname(t;locale=\u0026#34;french\u0026#34;) \u0026#34;vendredi\u0026#34; julia\u0026gt; Dates.monthname(t;locale=\u0026#34;french\u0026#34;) \u0026#34;janvier\u0026#34; julia\u0026gt; Dates.monthabbr(t;locale=\u0026#34;french\u0026#34;) \u0026#34;janv\u0026#34; 由于没有加载日期的缩写版本，试图使用函数 dayabbr 会出错。\njulia\u0026gt; Dates.dayabbr(t;locale=\u0026#34;french\u0026#34;) ERROR: BoundsError: attempt to access 1-element Array{String,1} at index [5] Stacktrace: [...] 时间类型-周期算术 在使用任何语言/日期框架时，熟悉如何处理日期-周期算术是一个很好的做法，因为有一些棘手的问题需要处理（尽管对于日-精度类型来说要少得多）。\nDates 模块的方法试图遵循简单的原则，即在做 Period 算术时尽量少改。这种方法也常被称为历法算术，或者说如果有人在对话中问你同样的计算方法，你可能会猜到。为什么要大惊小怪呢？我们举个经典的例子：把2014年1月31日加1个月。答案是什么？Javascript 会说3月3日（假设31天）。PHP 会说3月2日（假设30天）。事实上，没有正确的答案。在 Dates 模块中，它给出的结果是2月28日。它是如何计算出来的呢？我喜欢想到赌场里经典的 7-7-7 赌博游戏。\n现在只要想象一下，老虎机不是 7-7-7，而是年-月-日，或者在我们的例子中，2014-01-31。当你要求在这个日期的基础上增加1个月的时候，月份槽就会递增，所以现在我们有 2014-02-31。然后检查日号是否大于新月份的最后有效日，如果大于（如上例），则日号向下调整到最后有效日（28）。这种方法的后果是什么呢？继续在我们的日期上再加一个月，2014-02-28 + Month(1) == 2014-03-28。什么？你是在期待3月的最后一天吗？不对，对不起，记得 7-7-7 的档期。尽可能少的槽位要改变，所以我们先把月份槽位递增1，2014-03-28，轰，我们就完成了，因为这是一个有效的日期。另一方面，如果我们要在原来的日期 2014-01-31 的基础上增加2个月，那么我们最终的结果是 2014-03-31，正如预期的那样。这种方法的另一个后果是，当强行进行特定的排序时，关联性会有所损失（即以不同的顺序添加东西会导致不同的结果）。比如说：\njulia\u0026gt; (Date(2014,1,29)+Dates.Day(1)) + Dates.Month(1) 2014-02-28 julia\u0026gt; (Date(2014,1,29)+Dates.Month(1)) + Dates.Day(1) 2014-03-01 那是怎么回事呢？在第一行中，我们在1月29日的基础上加1天，结果是 2014-01-30；然后再加1个月，于是得到 2014-02-30，再往下调整为 2014-02-28。在第二个例子中，我们先加1个月，我们得到 2014-02-29，再往下调整为 2014-02-28，然后再加1天，结果是 2014-03-01。在这种情况下，有一个设计原则是有帮助的，那就是在存在多个 Periods 的情况下，操作将按照 Periods 的类型来排序，而不是按照它们的值或位置顺序来排序；这意味着总是先加 Year，然后加 Month，再加 Week 等。因此，以下确实会导致关联性并正好有用:\njulia\u0026gt; Date(2014,1,29) + Dates.Day(1) + Dates.Month(1) 2014-03-01 julia\u0026gt; Date(2014,1,29) + Dates.Month(1) + Dates.Day(1) 2014-03-01 棘手吗？也许吧。一个无辜的 Dates 用户该怎么做？最重要的是要注意，当处理月份时，明确地强制执行某种关联性，可能会导致一些意想不到的结果，但除此之外，一切都应该按照预期工作。值得庆幸的是，在 UT 中处理时间时，日期-周期算术中的奇特情况几乎就是这样了（避免了处理夏令时、闰秒等的 \u0026ldquo;乐趣\u0026rdquo;）。\n作为奖励，所有的周期算术对象都可以直接与范围一起工作。\njulia\u0026gt; dr = Date(2014,1,29):Day(1):Date(2014,2,3) Date(\u0026#34;2014-01-29\u0026#34;):Day(1):Date(\u0026#34;2014-02-03\u0026#34;) julia\u0026gt; collect(dr) 6-element Array{Date,1}: 2014-01-29 2014-01-30 2014-01-31 2014-02-01 2014-02-02 2014-02-03 julia\u0026gt; dr = Date(2014,1,29):Dates.Month(1):Date(2014,07,29) Date(\u0026#34;2014-01-29\u0026#34;):Month(1):Date(\u0026#34;2014-07-29\u0026#34;) julia\u0026gt; collect(dr) 7-element Array{Date,1}: 2014-01-29 2014-02-28 2014-03-29 2014-04-29 2014-05-29 2014-06-29 2014-07-29 for i in Date(\u0026quot;2020-08-01\u0026quot;):Day(1):Date(\u0026quot;2020-08-09\u0026quot;) println(i) end 2020-08-01 2020-08-02 2020-08-03 2020-08-04 2020-08-05 2020-08-06 2020-08-07 2020-08-08 2020-08-09 调整器函数 尽管日期-周期算术很方便，但经常需要在日期上进行的计算具有日历或时间的性质，而不是固定的周期数。节日就是一个很好的例子，大多数都遵循这样的规则：\u0026ldquo;纪念日 = 五月的最后一个星期一\u0026rdquo;，或者 \u0026ldquo;感恩节 = 十一月的第四个星期四\u0026rdquo;。这类时间表达式处理的是相对于日历的规则，比如本月的第一天或最后一天，下周二，或第一个和第三个星期三等。\nDates 模块通过几个方便的方法提供了调整器 API，这些方法有助于简单、简洁地表达时间规则。第一组调整器方法处理周、月、季度和年的首尾。它们每个方法都接收一个单一的 TimeType 作为输入，并返回或调整到相对于输入的所需时期的第一个或最后一个。\njulia\u0026gt; Dates.firstdayofweek(Date(2014,7,16)) # Adjusts the input to the Monday of the input\u0026#39;s week 2014-07-14 julia\u0026gt; Dates.lastdayofmonth(Date(2014,7,16)) # Adjusts to the last day of the input\u0026#39;s month 2014-07-31 julia\u0026gt; Dates.lastdayofquarter(Date(2014,7,16)) # Adjusts to the last day of the input\u0026#39;s quarter 2014-09-30 接下来的两个高阶方法 tonext 和 toprev，通过将一个 DateFunction 和一个起始 TimeType 作为第一个参数来概括处理时间表达式。DateFunction 只是一个函数，通常是匿名的，它接受一个单一的 TimeType 作为输入，并返回一个 Bool，true 表示满足调整标准。例如:\njulia\u0026gt; istuesday = x-\u0026gt;Dates.dayofweek(x) == Dates.Tuesday; # Returns true if the day of the week of x is Tuesday julia\u0026gt; Dates.tonext(istuesday, Date(2014,7,13)) # 2014-07-13 is a Sunday 2014-07-15 julia\u0026gt; Dates.tonext(Date(2014,7,13), Dates.Tuesday) # Convenience method provided for day of the week adjustments 2014-07-15 这对于更复杂的时间表达式的 do-block 语法是很有用的。\njulia\u0026gt; Dates.tonext(Date(2014,7,13)) do x # Return true on the 4th Thursday of November (Thanksgiving) Dates.dayofweek(x) == Dates.Thursday \u0026amp;\u0026amp; Dates.dayofweekofmonth(x) == 4 \u0026amp;\u0026amp; Dates.month(x) == Dates.November end 2014-11-27 Base.filter 方法可以用来获取指定范围内的所有有效日期/时刻。\n# 匹兹堡街道清洁; 从 4月到11月的每第二个周二 # 日期范围从 2014-01-01 到 2015-01-01 julia\u0026gt; dr = Dates.Date(2014):Day(1):Dates.Date(2015); julia\u0026gt; filter(dr) do x Dates.dayofweek(x) == Dates.Tue \u0026amp;\u0026amp; Dates.April \u0026lt;= Dates.month(x) \u0026lt;= Dates.Nov \u0026amp;\u0026amp; Dates.dayofweekofmonth(x) == 2 end 8-element Array{Date,1}: 2014-04-08 2014-05-13 2014-06-10 2014-07-08 2014-08-12 2014-09-09 2014-10-14 2014-11-11 在 Raku 中上面的代码可以写成:\nlazy my @dates = Date.new('2014-01-01') ... Date.new('2015-01-01'); .say for @dates.grep: -\u0026gt; $d { $d.day-of-week == 2 \u0026amp;\u0026amp; 4 \u0026lt;= $d.month \u0026lt;= 11 \u0026amp;\u0026amp; $d.weekday-of-month == 2 } 其他的例子和测试可以在 stdlib/Dates/test/adjusters.jl 中找到。\n"},"name":"Julia 中的日期和时间","published":"2020-08-04T00:00:00+08:00","summary":"Dates in Julia","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-04-dates-in-julia/"},{"content":{"html":"\u003ch2 id=\"语法\"\u003e语法\u003c/h2\u003e\n\u003ch3 id=\"数值字面量系数\"\u003e数值字面量系数\u003c/h3\u003e\n\u003cp\u003e在标识符或圆括号前面直接放一个数字, 例如 \u003ccode\u003e2x\u003c/code\u003e 或 \u003ccode\u003e2(x+y)\u003c/code\u003e, 会被认为是把标识符和它前面的数字相乘。这样写多项式就很方便了。\u003c/p\u003e\n\u003ch3 id=\"向量化的点号运算符\"\u003e向量化的点号运算符\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e.+\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e.+\u003c/code\u003e 类似于 Raku 中的 \u003ccode\u003e»+»\u003c/code\u003e 超运算符:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e[1,2,3] »+» 3\n[4 5 6]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e但是 Julia 的 \u003ccode\u003eVectorized \u0026quot;dot\u0026quot;\u003c/code\u003e 语法没有 Raku 的超运算符语法清晰。\u003c/p\u003e\n\u003cp\u003e类似的例子还有:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003esin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# 0.479425538604203\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eA\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.5\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"n\"\u003esin\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e0.479425538604203\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e0.8414709848078965\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e0.9974949866040544\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eA\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mf\"\u003e4.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e5.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e6.0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e13.42477796076938\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e17.42477796076938\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e21.42477796076938\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e15.566370614359172\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e18.566370614359172\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e21.566370614359172\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eB\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e19.0\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e26.0\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e33.0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e等价的 Raku 写法为:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003esub f(\\x, \\y) { 3*x + 4*y};\n\nmy \\A = [1.0, 2.0, 3.0];\nmy \\B = [4.0, 5.0, 6.0];\n\nA».\u0026amp;f(pi)\n[15.566370614359172 18.566370614359172 21.566370614359172]\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"链式比较\"\u003e链式比较\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRaku 同样支持这种链式比较。\u003c/p\u003e\n\u003ch3 id=\"虚数\"\u003e虚数\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ereal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"nb\"\u003eim\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e         \u003cspan class=\"c\"\u003e# 1\u003c/span\u003e\n\u003cspan class=\"n\"\u003eimag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"nb\"\u003eim\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e         \u003cspan class=\"c\"\u003e# 2\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"nb\"\u003eim\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"nb\"\u003eim\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# 5 + 0im\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e(1 + 2i).re         # 1\n(1 + 2i).im         # 2\n(1 + 2i) * (1 - 2i) # 5+0i\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"命名参数\"\u003e命名参数\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003eplot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003estyle\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;solid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewidth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecolor\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;black\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e###\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eplot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewidth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eplot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ewidth\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"函数组合\"\u003e函数组合\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esqrt\u003c/span\u003e \u003cspan class=\"n\"\u003e∘\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# 3.0\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"n\"\u003e∘\u003c/span\u003e \u003cspan class=\"n\"\u003ereverse\u003c/span\u003e \u003cspan class=\"n\"\u003e∘\u003c/span\u003e \u003cspan class=\"n\"\u003euppercase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;you can compose functions like this\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eChar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n \u003cspan class=\"sc\"\u003e\u0026#39;U\u0026#39;\u003c/span\u003e\n \u003cspan class=\"sc\"\u003e\u0026#39;N\u0026#39;\u003c/span\u003e\n \u003cspan class=\"sc\"\u003e\u0026#39;E\u0026#39;\u003c/span\u003e\n \u003cspan class=\"sc\"\u003e\u0026#39;S\u0026#39;\u003c/span\u003e\n \u003cspan class=\"sc\"\u003e\u0026#39;E\u0026#39;\u003c/span\u003e\n \u003cspan class=\"sc\"\u003e\u0026#39;S\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"piping\"\u003ePiping\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esqrt\u003c/span\u003e \u003cspan class=\"c\"\u003e# 7.416198487095663\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# 等价于\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esqrt\u003c/span\u003e \u003cspan class=\"n\"\u003e∘\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c\"\u003e# 7.416198487095663\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"广播和管道一起使用\"\u003e广播和管道一起使用\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;list\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;of\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;strings\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e.|\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003euppercase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etitlecase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;tsil\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;Of\u0026#34;\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"组合类型\"\u003e组合类型\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e不可变组合类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eFoo\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebaz\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\n    \u003cspan class=\"n\"\u003equx\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;rakulang\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# Foo\u003c/span\u003e\n\u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFoo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# DataType\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebar\u003c/span\u003e     \u003cspan class=\"c\"\u003e# rakulang\u003c/span\u003e\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equx\u003c/span\u003e     \u003cspan class=\"c\"\u003e# 1.5\u003c/span\u003e\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"c\"\u003e# ERROR: setfield! immutable struct of type Foo cannot be changed\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e可变组合类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emutable\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eBar\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebaz\u003c/span\u003e\n    \u003cspan class=\"n\"\u003equx\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ebar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;rakudo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e6.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebaz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e//\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"联合类型\"\u003e联合类型\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003eIntOrString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eUnion\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"kt\"\u003eAbstractString\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e::\u003c/span\u003e \u003cspan class=\"n\"\u003eIntOrString\u003c/span\u003e          \u003cspan class=\"c\"\u003e# 1\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;rakulang\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e::\u003c/span\u003e \u003cspan class=\"n\"\u003eIntOrString\u003c/span\u003e \u003cspan class=\"c\"\u003e# rakulang\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"参数化类型\"\u003e参数化类型\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e参数化组合类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003epoint\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e}(\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003epoint\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"c\"\u003e# 1.0\u003c/span\u003e\n\u003cspan class=\"n\"\u003epoint\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"c\"\u003e# 2.0\u003c/span\u003e\n\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eU\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eU\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"kt\"\u003eAbstractString\u003c/span\u003e\u003cspan class=\"p\"\u003e}(\u003c/span\u003e\u003cspan class=\"mf\"\u003e6.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;rakulang\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"c\"\u003e# 6.0\u003c/span\u003e\n\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"c\"\u003e# rakulang\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"多重分派\"\u003e多重分派\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emethods\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# 2 methods for generic function \u0026#34;f\u0026#34;:\u003c/span\u003e\n\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kp\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eMain\u003c/span\u003e \u003cspan class=\"n\"\u003eat\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e33\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kp\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eMain\u003c/span\u003e \u003cspan class=\"n\"\u003eat\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e34\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e2.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# 7\u003c/span\u003e\n\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e   \u003cspan class=\"c\"\u003e# 1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"语法 数值字面量系数 在标识符或圆括号前面直接放一个数字, 例如 2x 或 2(x+y), 会被认为是把标识符和它前面的数字相乘。这样写多项式就很方便了。\n向量化的点号运算符 [1,2,3] .+ 3 3-element Array{Int64,1}: 4 5 6 .+ 类似于 Raku 中的 »+» 超运算符:\n[1,2,3] »+» 3 [4 5 6] 但是 Julia 的 Vectorized \u0026quot;dot\u0026quot; 语法没有 Raku 的超运算符语法清晰。\n类似的例子还有:\nsin(0.5) # 0.479425538604203 A = [0.5, 1.0, 1.5] sin.(A) 3-element Array{Float64,1}: 0.479425538604203 0.8414709848078965 0.9974949866040544 f(x,y) = 3x + 4y; A = [1.0, 2.0, 3.0]; B = [4.0, 5.0, 6.0]; f.(pi, A) 3-element Array{Float64,1}: 13.42477796076938 17.42477796076938 21.42477796076938 f.(A, pi) 3-element Array{Float64,1}: 15.566370614359172 18.566370614359172 21.566370614359172 f.(A,B) 3-element Array{Float64,1}: 19.0 26.0 33.0 等价的 Raku 写法为:\nsub f(\\x, \\y) { 3*x + 4*y}; my \\A = [1.0, 2.0, 3.0]; my \\B = [4.0, 5.0, 6.0]; A».\u0026amp;f(pi) [15.566370614359172 18.566370614359172 21.566370614359172] 链式比较 1 \u0026lt; 2 \u0026lt;= 2 \u0026lt; 3 == 3 \u0026gt; 2 \u0026gt;= 1 == 1 \u0026lt; 3 != 5 true Raku 同样支持这种链式比较。\n虚数 real(1 + 2im) # 1 imag(1 + 2im) # 2 (1 + 2im) * (1 - 2im) # 5 + 0im (1 + 2i).re # 1 (1 + 2i).im # 2 (1 + 2i) * (1 - 2i) # 5+0i 命名参数 function plot(x, y; style=\u0026#34;solid\u0026#34;, width=1, color=\u0026#34;black\u0026#34;) ### end plot(x, y, width=2) plot(x, y, :width =\u0026gt; 2) 函数组合 (sqrt ∘ +)(3,6) # 3.0 map(first ∘ reverse ∘ uppercase, split(\u0026#34;you can compose functions like this\u0026#34;)) 6-element Array{Char,1}: \u0026#39;U\u0026#39; \u0026#39;N\u0026#39; \u0026#39;E\u0026#39; \u0026#39;S\u0026#39; \u0026#39;E\u0026#39; \u0026#39;S\u0026#39; Piping 1:10 |\u0026gt; sum |\u0026gt; sqrt # 7.416198487095663 # 等价于 (sqrt ∘ sum)(1:10) # 7.416198487095663 广播和管道一起使用 [\u0026#34;a\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;of\u0026#34;, \u0026#34;strings\u0026#34;] .|\u0026gt; [uppercase, reverse, titlecase, length] 4-element Array{Any,1}: \u0026#34;A\u0026#34; \u0026#34;tsil\u0026#34; \u0026#34;Of\u0026#34; 7 组合类型  不可变组合类型  struct Foo bar baz::Int qux::Float64 end foo = Foo(\u0026#34;rakulang\u0026#34;, 6, 1.5) typeof(foo) # Foo typeof(Foo) # DataType foo.bar # rakulang foo.qux # 1.5 foo.qux = 1 # ERROR: setfield! immutable struct of type Foo cannot be changed  可变组合类型  mutable struct Bar baz qux::Float64 end bar = Bar(\u0026#34;rakudo\u0026#34;, 6.0) bar.baz = 1//2 bar.qux = 2.0 联合类型 IntOrString = Union{Int,AbstractString} 1 :: IntOrString # 1 \u0026#34;rakulang\u0026#34; :: IntOrString # rakulang 参数化类型  参数化组合类型  struct Point{T} x::T y::T end point=Point{Float64}(1.0, 2.0) point.x # 1.0 point.y # 2.0 struct Circle{T,U} x::T y::U end c = Circle{Float64,AbstractString}(6.0, \u0026#34;rakulang\u0026#34;) c.x # 6.0 c.y # rakulang 多重分派 f(x::Float64, y::Float64) = 2x + y f(x::Number, y::Number) = 2x - y methods(f) # 2 methods for generic function \u0026#34;f\u0026#34;: [1] f(x::Float64, y::Float64) in Main at REPL[33]:1 [2] f(x::Number, y::Number) in Main at REPL[34]:1 f(2.0, 3.0) # 7 f(2, 3.0) # 1 "},"name":"Julia 语言学习笔记","published":"2020-07-26T00:00:00+08:00","summary":"Learning Julia","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-07-27-learning-julialang/"}],"name":"julia","type":"feed","url":"https://ohmyweekly.github.io/tags/julia/"}