<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    julia on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/tags/julia/</link>
        <description>Recent content  in julia
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Wed, 05 Aug 2020 11:46:08 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/tags/julia/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>Julia 中的 模块</title>
                <link>https://ohmyweekly.github.io/notes/2020-08-05-modules-in-julia/</link>
                
                
                <description>&lt;blockquote&gt;Modules&lt;/blockquote&gt;&lt;h1 id=&#34;模块&#34;&gt;模块&lt;/h1&gt;
&lt;p&gt;Julia 中的模块是独立的变量工作空间，即它们引入了一个新的全局作用域。它们在语法上是有分界的，在 &lt;code&gt;module Name ... end&lt;/code&gt; 里面。模块允许您创建顶层定义（也就是全局变量），而不用担心您的代码与别人的代码一起使用时的名称冲突。在一个模块中，你可以控制哪些来自其他模块的名字是可见的（通过导入），并指定哪些名字是要公开的（通过导出）。&lt;/p&gt;
&lt;p&gt;下面的例子展示了模块的主要功能。这个例子并不是为了运行，而是为了说明问题。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyModule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BigLib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thing1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thing2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，这个样式并不是要在模块的正文中缩进，因为这通常会导致整个文件被缩进。&lt;/p&gt;
&lt;p&gt;这个模块定义了一个 &lt;code&gt;MyType&lt;/code&gt; 类型和两个函数。函数 &lt;code&gt;foo&lt;/code&gt; 和 &lt;code&gt;MyType&lt;/code&gt; 类型是导出的，因此可以导入到其他模块中。函数 &lt;code&gt;bar&lt;/code&gt; 是 &lt;code&gt;MyModule&lt;/code&gt; 的私有函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;using Lib&lt;/code&gt; 语句意味着将有一个名为 &lt;code&gt;Lib&lt;/code&gt; 的模块可以根据需要解析名称。当遇到一个全局变量在当前模块中没有定义时，系统会在 &lt;code&gt;Lib&lt;/code&gt; 导出的变量中搜索它，如果在那里找到了，就会导入它。这意味着在当前模块内对该全局的所有使用都将解析为该变量在 &lt;code&gt;Lib&lt;/code&gt; 中的定义。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;using BigLib: thing1, thing2&lt;/code&gt; 语句，只将标识符 &lt;code&gt;thing1&lt;/code&gt; 和 &lt;code&gt;thing2&lt;/code&gt; 从模块 &lt;code&gt;BigLib&lt;/code&gt; 中带入作用域。如果这些名称指的是函数，那么将不允许向它们添加方法（你只能 &amp;ldquo;使用 &amp;ldquo;它们，而不是扩展它们）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import&lt;/code&gt; 关键字支持与 &lt;code&gt;using&lt;/code&gt; 相同的语法。&lt;code&gt;import&lt;/code&gt; 与 &lt;code&gt;using&lt;/code&gt; 的不同之处在于，使用 &lt;code&gt;import&lt;/code&gt; 导入的函数可以用新的方法进行扩展。&lt;/p&gt;
&lt;p&gt;在上面的 &lt;code&gt;MyModule&lt;/code&gt; 中，我们想给标准的 &lt;code&gt;show&lt;/code&gt; 函数添加一个方法，所以我们必须写 &lt;code&gt;import Base.show&lt;/code&gt;。只有通过 &lt;code&gt;using&lt;/code&gt; 才能看到名字的函数不能被扩展。&lt;/p&gt;
&lt;p&gt;一旦一个变量通过 &lt;code&gt;using&lt;/code&gt; 或 &lt;code&gt;import&lt;/code&gt; 变得可见，一个模块就不能创建自己的同名变量。导入的变量是只读的，分配给全局变量总是会影响到当前模块所拥有的变量，否则会引发错误。&lt;/p&gt;
&lt;h2 id=&#34;模块使用情况概述&#34;&gt;模块使用情况概述&lt;/h2&gt;
&lt;p&gt;要加载一个模块，可以使用两个主要的关键词：&lt;code&gt;using&lt;/code&gt; 和 &lt;code&gt;import&lt;/code&gt;。要了解它们的区别，请看下面的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyModule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个模块中，我们导出了 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 函数(用关键字 &lt;code&gt;export&lt;/code&gt;)，也有非导出的函数 &lt;code&gt;p&lt;/code&gt;，有几种不同的方法可以将 &lt;code&gt;Module&lt;/code&gt; 及其内部函数加载到当前的工作空间中。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;导入命令&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;带入带作用域中的东西&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;可用于方法扩展&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;using MyModule&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;所有导出的名字(&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt;), &lt;code&gt;MyModule.x&lt;/code&gt;, &lt;code&gt;MyModule.y&lt;/code&gt; 和 &lt;code&gt;MyModule.p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;MyModule.x&lt;/code&gt;, &lt;code&gt;MyModule.y&lt;/code&gt; 和 &lt;code&gt;MyModule.p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;using MyModule: x, p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;import MyModule&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;MyModule.x&lt;/code&gt;, &lt;code&gt;MyModule.y&lt;/code&gt; 和 &lt;code&gt;MyModule.p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;MyModule.x&lt;/code&gt;, &lt;code&gt;MyModule.y&lt;/code&gt; 和 &lt;code&gt;MyModule.p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;import MyModule.x, MyModule.p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;import MyModule: x, p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;模块和文件&#34;&gt;模块和文件&lt;/h2&gt;
&lt;p&gt;文件和文件名大多与模块无关，模块只与模块表达式有关。一个模块可以有多个文件，一个文件可以有多个模块。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在不同的模块中包含相同的代码，提供了类似 mixin 的行为。人们可以使用这一点来用不同的基础定义来运行相同的代码，例如，通过使用某些操作符的&amp;quot;安全&amp;quot;版本来测试代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Normal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Testing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;标准模块&#34;&gt;标准模块&lt;/h2&gt;
&lt;p&gt;There are three important standard modules:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Core&#34;&gt;Core&lt;/a&gt; 包含&amp;quot;内置于&amp;quot;语言中的所有功能。
&lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base&#34;&gt;Base&lt;/a&gt; 包含几乎在所有情况下都有用的基本功能。
&lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Main&#34;&gt;Main&lt;/a&gt; 是当 Julia 被启动时的顶级模块和当前模块。&lt;/p&gt;
&lt;h2 id=&#34;默认的顶层定义和裸模块&#34;&gt;默认的顶层定义和裸模块&lt;/h2&gt;
&lt;p&gt;除了 &lt;code&gt;using Base&lt;/code&gt; 之外，模块还自动包含 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.eval&#34;&gt;eval&lt;/a&gt;和 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.include&#34;&gt;include&lt;/a&gt; 函数的定义，这些函数在该模块的全局作用域内评估表达式/文件。&lt;/p&gt;
&lt;p&gt;如果不想要这些默认的定义，可以使用关键字 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#baremodule&#34;&gt;baremodule&lt;/a&gt; 来代替定义模块（注意： &lt;code&gt;Core&lt;/code&gt; 仍然是导入的，如上所述）。以 &lt;code&gt;baremodule&lt;/code&gt; 来说，一个标准的模块是这样的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;baremodule&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Mod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Mod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;相对和绝对模块路径&#34;&gt;相对和绝对模块路径&lt;/h2&gt;
&lt;p&gt;给定 &lt;code&gt;using Foo&lt;/code&gt; 语句，系统会查询内部的顶层模块表，寻找一个名为 &lt;code&gt;Foo&lt;/code&gt; 的模块。如果该模块不存在，系统会尝试 &lt;code&gt;require(:Foo)&lt;/code&gt;，这通常会导致从安装的包中加载代码。&lt;/p&gt;
&lt;p&gt;然而，有些模块包含子模块，这意味着你有时需要访问一个非顶层模块。有两种方法可以做到这一点。第一种是使用绝对路径，例如 &lt;code&gt;using Base.Sort&lt;/code&gt;。第二种是使用相对路径，这样可以更容易地导入当前模块的子模块或其任何一个外层模块。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Utils&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Utils&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里模块 &lt;code&gt;Parent&lt;/code&gt; 包含一个子模块 &lt;code&gt;Utils&lt;/code&gt;，&lt;code&gt;Parent&lt;/code&gt; 中的代码希望 &lt;code&gt;Utils&lt;/code&gt; 的内容可见。这可以通过在 &lt;code&gt;using&lt;/code&gt; 路径中使用点号来实现。添加更多的前导点号会使模块的层次结构上升。例如，&lt;code&gt;using ..Utils&lt;/code&gt; 会在 &lt;code&gt;Parent&lt;/code&gt; 的外层模块中查找&lt;code&gt;Utils&lt;/code&gt;，而不是在 &lt;code&gt;Parent&lt;/code&gt; 本身中查找。&lt;/p&gt;
&lt;p&gt;注意相对导入限定符只在使用和导入语句中有效。&lt;/p&gt;
&lt;h2 id=&#34;命名空间杂项&#34;&gt;命名空间杂项&lt;/h2&gt;
&lt;p&gt;如果一个名字是限定的(例如 &lt;code&gt;Base.sin&lt;/code&gt;)，那么即使它没有被导出，也可以被访问。这在调试时往往很有用。它也可以通过使用限定名作为函数名来添加方法。但是，由于会产生语法上的歧义，如果你想给不同模块中的一个函数添加方法，而这个函数的名称只包含符号，例如一个运算符，&lt;code&gt;Base.+&lt;/code&gt;，你必须使用 &lt;code&gt;Base.:+&lt;/code&gt; 来引用它。如果运算符的长度超过一个字符，你必须用括号把它括起来，比如 &lt;code&gt;Base.:(==)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在导入和导出语句中，宏的名称用 &lt;code&gt;@&lt;/code&gt; 书写，例如 &lt;code&gt;import Mod.@mac&lt;/code&gt;。其他模块中的宏可以用 &lt;code&gt;Mod.@mac&lt;/code&gt; 或 &lt;code&gt;@Mod.mac&lt;/code&gt; 来调用。&lt;/p&gt;
&lt;p&gt;语法 &lt;code&gt;M.x = y&lt;/code&gt; 不能用于分配其他模块中的全局，全局分配总是模块-局部的。&lt;/p&gt;
&lt;p&gt;变量名可以通过声明为 &lt;code&gt;global x&lt;/code&gt; 来 &amp;ldquo;保留&amp;quot;而不分配给它，这样可以防止加载后初始化的 globals 的名称冲突。&lt;/p&gt;
&lt;h2 id=&#34;模块初始化和预编译&#34;&gt;模块初始化和预编译&lt;/h2&gt;
&lt;p&gt;大型模块可能需要几秒钟的时间来加载，因为执行一个模块中的所有语句往往需要编译大量的代码。Julia 创建了模块的预编译缓存来减少这个时间。&lt;/p&gt;
&lt;p&gt;当使用 &lt;code&gt;import&lt;/code&gt; 或 &lt;code&gt;using&lt;/code&gt; 加载模块时，会自动创建并使用增量的预编译模块文件。这将导致它在第一次导入时自动编译。另外，您也可以手动调用 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.compilecache&#34;&gt;Base.compilecache(modulename)&lt;/a&gt;。由此产生的缓存文件将存储在 &lt;code&gt;DEPOT_PATH[1]/compiled/&lt;/code&gt; 中。随后，只要模块的任何依赖关系发生变化，模块就会在 &lt;code&gt;using&lt;/code&gt; 或 &lt;code&gt;import&lt;/code&gt; 时自动重新编译；依赖关系是指导入的模块、Julia 构建的模块、包含的文件，或者模块文件中 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.include_dependency&#34;&gt;include_dependency(path)&lt;/a&gt; 声明的显式依赖关系。&lt;/p&gt;
&lt;p&gt;对于文件依赖，通过检查由 &lt;code&gt;include&lt;/code&gt; 加载的文件或由 &lt;code&gt;include_dependency&lt;/code&gt; 显式添加的文件的修改时间(mtime)是否保持不变，或者是否等于被截断到最接近秒的修改时间(以适应无法以亚秒级精度复制 mtime 的系统)来确定变化。它还考虑到在 &lt;code&gt;require&lt;/code&gt; 中搜索逻辑选择的文件路径是否与创建预编译文件的路径匹配。它还会考虑到已经加载到当前进程中的一组依赖关系，即使这些模块的文件发生变化或消失，也不会重新编译这些模块，以避免在运行系统和预编译缓存之间产生不兼容的情况。&lt;/p&gt;
&lt;p&gt;如果你知道某个模块预编译你的模块是不安全的（例如，出于下面描述的原因之一），你应该在模块文件中加上 &lt;code&gt;__precompile__(false)&lt;/code&gt;（通常放在顶部）。这将导致 &lt;code&gt;Base.compilecache&lt;/code&gt; 抛出一个错误，并将导致 &lt;code&gt;using&lt;/code&gt; / &lt;code&gt;import&lt;/code&gt; 直接将其加载到当前进程中而跳过预编译和缓存。这也因此阻止了该模块被任何其他预编译模块导入。&lt;/p&gt;
&lt;p&gt;您可能需要注意创建增量共享库时固有的某些行为，在编写模块时可能需要注意。例如，外部状态不会被保存。为了适应这一点，明确地将任何必须在运行时发生的初始化步骤与可以在编译时发生的步骤分开。为此，Julia 允许您在您的模块中定义一个 &lt;code&gt;__init__()&lt;/code&gt; 函数来执行任何必须在运行时发生的初始化步骤。这个函数在编译时不会被调用（&lt;code&gt;--output-*&lt;/code&gt;）。实际上，你可以假设它在代码的生命周期中只运行一次。当然，如果有必要的话，你可以手动调用它，但是默认情况下，你可以假设这个函数处理的是本地机器的计算状态，它不需要&amp;ndash;甚至不应该&amp;ndash;在编译后的镜像中捕获。它将在模块被加载到一个进程后被调用，包括如果它被加载到增量编译中(&lt;code&gt;--output-incremental=yes&lt;/code&gt;)，但如果它被加载到一个完整的编译进程中，则不会被调用。&lt;/p&gt;
&lt;p&gt;特别是，如果你在一个模块中定义了一个 &lt;code&gt;function __init__()&lt;/code&gt;，那么 Julia 将在模块被加载后（例如通过 &lt;code&gt;import&lt;/code&gt;、&lt;code&gt;using&lt;/code&gt; 或 &lt;code&gt;require&lt;/code&gt;）在运行时第一次立即调用 &lt;code&gt;__init__()&lt;/code&gt;（也就是说，&lt;code&gt;__init__&lt;/code&gt; 只被调用一次，而且是在模块中的所有语句被执行后才被调用）。因为它是在模块完全导入之后被调用的，所以任何子模块或其它导入的模块都会在外层模块的 &lt;code&gt;__init__&lt;/code&gt; 之前调用它们的 &lt;code&gt;__init__&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__init__&lt;/code&gt; 的两个典型用途是调用外部 C 库的运行时初始化函数和初始化涉及外部库返回指针的全局常量。例如，假设我们正在调用一个 C 库 &lt;code&gt;libfoo&lt;/code&gt;，它要求我们在运行时调用 &lt;code&gt;foo_init()&lt;/code&gt; 初始化函数。假设我们还想定义一个全局常量 &lt;code&gt;foo_data_ptr&lt;/code&gt;，用来存放 &lt;code&gt;libfoo&lt;/code&gt; 定义的 &lt;code&gt;void *foo_data()&lt;/code&gt; 函数的返回值&amp;ndash;这个常量必须在运行时（而不是在编译时）初始化，因为指针地址会随着运行而改变。你可以通过在你的模块中定义下面的 &lt;code&gt;__init__&lt;/code&gt; 函数来实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo_data_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cvoid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;ccall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo_init&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libfoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cvoid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;foo_data_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ccall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo_data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libfoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cvoid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;nothing&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，我们完全可以在函数内部定义一个全局，比如 &lt;code&gt;__init__&lt;/code&gt;；这是使用动态语言的优势之一。但是通过在全局作用域内定义一个常量，我们可以确保编译器知道这个类型，并允许它生成更好的优化代码。显然，你的模块中任何其他依赖于 &lt;code&gt;foo_data_ptr&lt;/code&gt; 的 globals 也必须在 &lt;code&gt;__init__&lt;/code&gt; 中初始化。&lt;/p&gt;
&lt;p&gt;涉及大多数不是由 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/c/#ccall&#34;&gt;ccall&lt;/a&gt; 产生的 Julia 对象的常量不需要放在 &lt;code&gt;__init__&lt;/code&gt; 中：它们的定义可以被预编译并从缓存的模块映像中加载。这包括像数组这样复杂的堆分配对象。然而，任何返回原始指针值的例程都必须在运行时调用，以便预编译工作（&lt;a href=&#34;https://docs.julialang.org/en/v1/base/c/#Core.Ptr&#34;&gt;Ptr&lt;/a&gt; 对象将变成空指针，除非它们被隐藏在 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.isbits&#34;&gt;isbits&lt;/a&gt; 对象中）。这包括 Julia 函数 &lt;code&gt;cfunction&lt;/code&gt; 和 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/c/#Base.pointer&#34;&gt;pointer&lt;/a&gt; 的返回值。&lt;/p&gt;
&lt;p&gt;字典和集合类型，或者一般来说任何依赖于 &lt;code&gt;hash(key)&lt;/code&gt; 方法输出的东西，都是比较棘手的情况。在常见的情况下，键是数字、字符串、符号、范围、&lt;code&gt;Expr&lt;/code&gt; 或这些类型的组合（通过数组、元组、集合、对等），它们可以安全地进行预编译。然而，对于其他一些关键类型，如 &lt;code&gt;Function&lt;/code&gt; 或 &lt;code&gt;DataType&lt;/code&gt; 和通用的用户定义类型，在这些类型中，你没有定义 &lt;code&gt;hash&lt;/code&gt; 方法，回退 &lt;code&gt;hash&lt;/code&gt; 方法取决于对象的内存地址（通过它的 &lt;code&gt;objectid&lt;/code&gt;），因此可能会在运行时改变。如果你有这些键类型之一，或者如果你不确定，为了安全起见，你可以在你的 &lt;code&gt;__init__&lt;/code&gt; 函数中初始化这个字典。或者，你也可以使用 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/collections/#Base.IdDict&#34;&gt;IdDict&lt;/a&gt; 字典类型，它由预编译特别处理，所以在编译时初始化是安全的。&lt;/p&gt;
&lt;p&gt;在使用预编译时，保持对编译阶段和执行阶段的清晰认识很重要。在这种模式下，往往会更清楚地认识到 Julia 是一个允许执行任意 Julia 代码的编译器，而不是一个同时生成编译代码的独立解释器。&lt;/p&gt;
&lt;p&gt;其他已知的潜在故障情况包括。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局计数器（例如，用于试图唯一识别对象）。考虑以下代码片段。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;mutable&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UniquedById&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;myid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;UniquedById&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然这段代码的目的是给每个实例一个唯一的 id，但计数器的值是在编译结束时记录的。这个增量编译模块的所有后续使用将从同一个计数器值开始。&lt;/p&gt;
&lt;p&gt;请注意，&lt;code&gt;objectid&lt;/code&gt;（通过哈希内存指针工作）也有类似的问题（参见下面关于 &lt;code&gt;Dict&lt;/code&gt; 用法的说明）。&lt;/p&gt;
&lt;p&gt;一种替代方法是使用宏来捕获 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.@__MODULE__&#34;&gt;@&lt;strong&gt;MODULE&lt;/strong&gt;&lt;/a&gt;，并将其与当前的计数器值一起单独存储，然而，重新设计代码使其不依赖于这个全局状态可能会更好。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;关联集合(比如 &lt;code&gt;Dict&lt;/code&gt; 和 &lt;code&gt;Set&lt;/code&gt;)需要在 &lt;code&gt;__init__&lt;/code&gt; 中重新洗牌(将来可能会提供一个机制来注册一个初始化函数)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据编译时的副作用在加载时持续存在。例如：修改其他 Julia 模块中的数组或其他变量；维护打开的文件或设备的句柄；存储其他系统资源（包括内存）的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过直接引用而不是通过它的查找路径，从另一个模块创建意外的全局状态&amp;quot;副本&amp;rdquo;。例如，（在全局作用域内）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;c&#34;&gt;#mystdout = Base.stdout #= will not work correctly, since this will copy Base.stdout into this module =#&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# instead use accessor functions:&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;getstdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;#=&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;=#&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# or move the assignment into the runtime:&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mystdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;#=&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;=#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对预编译代码时可以进行的操作进行了一些额外的限制，以帮助用户避免其他错误行为的情况。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.eval&#34;&gt;eval&lt;/a&gt; 引起另一个模块的副作用。当增量预编译标志被设置时，这也会导致发出警告。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;__init__()&lt;/code&gt; 被启动后，从本地作用域调用 &lt;code&gt;global const&lt;/code&gt; 语句(参见问题 &lt;code&gt;#12010&lt;/code&gt;，计划为此增加一个错误)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在进行增量预编译时，替换一个模块是一个运行时错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有几点需要注意。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在对源文件本身进行修改之后，不会进行代码重载/缓存无效化（包括通过 &lt;code&gt;Pkg.update&lt;/code&gt;），而且在 &lt;code&gt;Pkg.rm&lt;/code&gt; 之后也不会进行清理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预编译不考虑重塑数组的内存共享行为 (每个视图都有自己的副本)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;期待文件系统在编译时和运行时之间保持不变，例如 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/file/#Base.@__FILE__&#34;&gt;@&lt;strong&gt;FILE&lt;/strong&gt;&lt;/a&gt;/&lt;code&gt;source_path()&lt;/code&gt; 在运行时查找资源，或者 BinDeps 的 &lt;code&gt;@checked_lib&lt;/code&gt; 宏。有时这是不可避免的。然而，在可能的情况下，在编译时将资源复制到模块中是一个很好的做法，这样它们就不需要在运行时被找到。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeakRef&lt;/code&gt; 对象和 finalizers 目前还没有被序列化器正确处理（这将在即将发布的版本中得到修正）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常最好避免捕获对内部元数据对象实例的引用，如 &lt;code&gt;Method&lt;/code&gt;、&lt;code&gt;MethodInstance&lt;/code&gt;、&lt;code&gt;MethodTable&lt;/code&gt;、&lt;code&gt;TypeMapLevel&lt;/code&gt;、&lt;code&gt;TypeMapEntry&lt;/code&gt; 以及这些对象的字段，因为这可能会混淆序列化器，可能不会导致你想要的结果。这样做不一定会出错，但你只需要做好准备，系统会尝试复制其中的一些对象，并为其他对象创建一个唯一的实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在模块开发过程中，有时关闭增量预编译是很有帮助的。命令行标志 &lt;code&gt;--compiled-modules={yes|no}&lt;/code&gt; 可以让你开启或关闭模块预编译。当 Julia 以 &lt;code&gt;--compiled-modules=no&lt;/code&gt; 启动时，当加载模块和模块依赖时，编译缓存中的序列化模块会被忽略。&lt;code&gt;Base.compilecache&lt;/code&gt; 仍然可以被手动调用。这个命令行标志的状态被传递给 &lt;code&gt;Pkg.build&lt;/code&gt;，以便在安装、更新和显式构建包时禁用自动预编译触发。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/julia">julia</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/module">module</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-08-05-modules-in-julia/</guid>
                <pubDate>Wed, 05 Aug 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Julia 中的 Pkg</title>
                <link>https://ohmyweekly.github.io/notes/2020-08-04-pkg-in-julia/</link>
                
                
                <description>&lt;blockquote&gt;Pkg&lt;/blockquote&gt;&lt;h2 id=&#34;进入-pkg-模式&#34;&gt;进入 Pkg 模式&lt;/h2&gt;
&lt;p&gt;Pkg 是 Julia 中包管理工具。Pkg 来自于 REPL, 在 Julia 的 REPL 中按下 &lt;code&gt;]&lt;/code&gt; 就进入 Pkg REPL 了。要回到 Julia REPL, 按退格键或 &lt;code&gt;^C&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用-pkg&#34;&gt;使用 Pkg&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;add JSON              &lt;span class=&#34;c1&#34;&gt;# 添加一个 package&lt;/span&gt;
add JSON StaticArrays &lt;span class=&#34;c1&#34;&gt;# 添加多个 package&lt;/span&gt;
rm JSON               &lt;span class=&#34;c1&#34;&gt;# 移除一个 package&lt;/span&gt;
rm JSON StaticArrays  &lt;span class=&#34;c1&#34;&gt;# 移除多个 package&lt;/span&gt;
add https://github.com/JuliaLang/Example.jl &lt;span class=&#34;c1&#34;&gt;# 添加一个未注册的 package&lt;/span&gt;
rm Example            &lt;span class=&#34;c1&#34;&gt;# 按名字移除 package&lt;/span&gt;
update Example        &lt;span class=&#34;c1&#34;&gt;# 升级一个已安装的 package&lt;/span&gt;
update                &lt;span class=&#34;c1&#34;&gt;# 升级所有已安装的 package&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;environments&#34;&gt;environments&lt;/h2&gt;
&lt;p&gt;你可能已经注意到 Pkg REPL 提示符前面的 &lt;code&gt;(@v1.5)&lt;/code&gt; 字符串了。这里的  &lt;code&gt;(@v1.5)&lt;/code&gt; 就是激活环境(&lt;strong&gt;active environment&lt;/strong&gt;)。激活环境是能被诸如 &lt;code&gt;add&lt;/code&gt;、&lt;code&gt;rm&lt;/code&gt; 和 &lt;code&gt;update&lt;/code&gt; 等 Pkg 命令修改的环境。&lt;/p&gt;
&lt;p&gt;我们可以设置一个新的激活环境用于实验。要设置激活环境, 使用 &lt;code&gt;activate&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;@v1.5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; activate tutorial
Activating new environment at &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;~/tutorial/Project.toml&lt;/code&gt; 是激活环境的项目文件。项目文件是 Pkg 存储环境的元数据的地方。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tutorial&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; status
Status &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;empty project&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在这个新的环境是空的, 我们添加一个 package 观察下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tutorial&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; add Example
   Updating registry at &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/.julia/registries/General&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
   Updating git-repo &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;https://github.com/JuliaRegistries/General.git&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  Resolving package versions...
    Cloning &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07-990d-54b4-ab0e-23690620f79a&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Example from https://github.com/JuliaLang/Example.jl.git
  Installed Example ─ v0.5.3
Updating &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; + Example v0.5.3
Updating &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Manifest.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; + Example v0.5.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 &lt;code&gt;status&lt;/code&gt; 命令查看激活环境的信息:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tutorial&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; status
Status &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Example v0.5.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;develop&lt;/code&gt; 命令设置 &lt;code&gt;Example&lt;/code&gt; package 的 一个 &lt;code&gt;git clone&lt;/code&gt;, 以供我们修改这个本地仓库:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tutorial&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; develop --local Example
    Cloning git-repo &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;https://github.com/JuliaLang/Example.jl.git&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  Resolving package versions...
Updating &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ~ Example v0.5.3 ⇒ v0.5.4 &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;dev/Example&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
Updating &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Manifest.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ~ Example v0.5.3 ⇒ v0.5.4 &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;dev/Example&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 &lt;code&gt;;&lt;/code&gt; 切换到 shell 模式, 用 vi 修改 &lt;code&gt;~/tutorial/dev/Example/src/Example.jl&lt;/code&gt; 文件, 增加一个 &lt;code&gt;plusone&lt;/code&gt; 函数, 保存。&lt;/p&gt;
&lt;p&gt;在 Julia 的 REPL 中, 导入修改后的 &lt;code&gt;Example&lt;/code&gt; package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; import Example
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; Info: Precompiling Example &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07-990d-54b4-ab0e-23690620f79a&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

julia&amp;gt; Example.plusone&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;

julia&amp;gt; Example.plusone&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;4&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到我们添加的函数生效了, 这样就很方便我们添加测试新功能。如果我们已经不再需要本地的 &lt;code&gt;Example&lt;/code&gt; 了, 需要使用 &lt;code&gt;free&lt;/code&gt; 命令以停止使用本地克隆的 package, 转而使用已注册版本代替:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tutorial&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; free Example
  Resolving package versions...
Updating &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ~ Example v0.5.4 &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;dev/Example&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; ⇒ v0.5.3
Updating &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Manifest.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ~ Example v0.5.4 &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;dev/Example&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; ⇒ v0.5.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果已经用 &lt;code&gt;tutorial&lt;/code&gt; 做完实验了, 可以使用不带参数的 &lt;code&gt;activate&lt;/code&gt; 回到默认环境:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tutorial&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; activate
 Activating environment at &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/.julia/environments/v1.5/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;@v1.5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/julia">julia</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/pkg">pkg</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-08-04-pkg-in-julia/</guid>
                <pubDate>Tue, 04 Aug 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Julia 中的日期和时间</title>
                <link>https://ohmyweekly.github.io/notes/2020-08-04-dates-in-julia/</link>
                
                
                <description>&lt;blockquote&gt;Dates in Julia&lt;/blockquote&gt;&lt;h1 id=&#34;dates-模块的加载和使用&#34;&gt;Dates 模块的加载和使用&lt;/h1&gt;
&lt;p&gt;在 Julia 的 Pkg REPL 中, 输入 &lt;code&gt;add Dates&lt;/code&gt; 添加 Dates 模块。回到 Julia 的 REPL 中, 输入:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; using Dates

julia&amp;gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-01-01T00:00:00

julia&amp;gt; typeof&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
DateTime

julia&amp;gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020,8,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01T00:00:00

julia&amp;gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020,8,1,12&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01T12:00:00

julia&amp;gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020,8,1,12,30&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01T12:30:00

julia&amp;gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020,8,1,12,30,59&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01T12:30:59

julia&amp;gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020,8,1,12,30,59, 999&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01T12:30:59.999

julia&amp;gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020, 8&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01

julia&amp;gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020, 8, 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01

julia&amp;gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Dates.Year&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;8&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,Dates.Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01

julia&amp;gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;8&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,Dates.Year&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;date-和-datetime-的算术操作&#34;&gt;Date 和 DateTime 的算术操作&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2012,2,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2012-02-29

julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dt2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2000,2,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2000-02-01

julia&amp;gt; dump&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dt&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Date
  instant: Dates.UTInstant&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Day&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    periods: Day
      value: Int64 &lt;span class=&#34;m&#34;&gt;734562&lt;/span&gt;

julia&amp;gt; dump&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dt2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Date
  instant: Dates.UTInstant&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Day&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    periods: Day
      value: Int64 &lt;span class=&#34;m&#34;&gt;730151&lt;/span&gt;

julia&amp;gt; dt &amp;gt; dt2
&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;

julia&amp;gt; dt !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; dt2
&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;

julia&amp;gt; dt + dt2
ERROR: MethodError: no method matching +&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;::Date, ::Date&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

julia&amp;gt; dt * dt2
ERROR: MethodError: no method matching *&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;::Date, ::Date&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

julia&amp;gt; dt / dt2
ERROR: MethodError: no method matching /&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;::Date, ::Date&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

julia&amp;gt; dt - dt2
&lt;span class=&#34;m&#34;&gt;4411&lt;/span&gt; days

julia&amp;gt; typeof&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dt - dt2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Day

julia&amp;gt; dt2 - dt
-4411 days

julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2012,2,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2012-02-29T00:00:00

julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dt2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2000,2,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2000-02-01T00:00:00

julia&amp;gt; dt - dt2
&lt;span class=&#34;m&#34;&gt;381110400000&lt;/span&gt; milliseconds

julia&amp;gt; typeof&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dt - dt2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Millisecond
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;访问器函数&#34;&gt;访问器函数&lt;/h1&gt;
&lt;p&gt;因为 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Date&#34;&gt;Date&lt;/a&gt; 和 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.DateTime&#34;&gt;DateTime&lt;/a&gt; 类型被存储为单个 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/numbers/#Core.Int64&#34;&gt;Int64&lt;/a&gt; 值，所以日期部分或字段可以通过访问器函数进行检索。小写访问器函数以整数形式返回字段。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014, 1, 31&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2014-01-31

julia&amp;gt; Dates.year&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;2014&lt;/span&gt;

julia&amp;gt; Dates.month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;

julia&amp;gt; Dates.week&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;

julia&amp;gt; Dates.day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而专有形式返回相应 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Period&#34;&gt;Period&lt;/a&gt; 类型中的相同值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.Year&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;2014&lt;/span&gt; years

julia&amp;gt; Dates.Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; days
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Julia 还提供了复合方法，因为在同时需要多个字段的情况下，这些方法提供了一种效率衡量标准。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.yearmonth&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014, 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

julia&amp;gt; Dates.monthday&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1, 31&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

julia&amp;gt; Dates.yearmonthday&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014, 1, 31&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以访问底层 &lt;code&gt;UTInstant&lt;/code&gt; 或整数值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; dump&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Date
  instant: Dates.UTInstant&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Day&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    periods: Day
      value: Int64 &lt;span class=&#34;m&#34;&gt;735264&lt;/span&gt;

julia&amp;gt; t.instant
Dates.UTInstant&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Day&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;735264&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

julia&amp;gt; Dates.value&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;735264&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;查询函数&#34;&gt;查询函数&lt;/h1&gt;
&lt;p&gt;查询函数提供关于 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType&#34;&gt;TimeType&lt;/a&gt; 的历法信息。它们包括关于一周中的某一天的信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014, 1, 31&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2014-01-31

julia&amp;gt; Dates.dayofweek&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;

julia&amp;gt; Dates.dayname&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;Friday&amp;#34;&lt;/span&gt;

julia&amp;gt; Dates.dayofweekofmonth&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 5th Friday of January&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;

julia&amp;gt; Dates.monthname&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;January&amp;#34;&lt;/span&gt;

julia&amp;gt; Dates.daysinmonth&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType&#34;&gt;TimeType&lt;/a&gt; 的年份和季度信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.isleapyear&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;

julia&amp;gt; Dates.dayofyear&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;

julia&amp;gt; Dates.quarterofyear&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;

julia&amp;gt; Dates.dayofquarter&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.dayname&#34;&gt;dayname&lt;/a&gt; 和 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.monthname&#34;&gt;monthname&lt;/a&gt; 方法也可以使用一个可选的 &lt;code&gt;locale&lt;/code&gt; 关键字，它可以用来返回其他语言/地区的年份或月份的名称。这些函数也有返回缩写名称的版本，即 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.dayabbr&#34;&gt;dayabbr&lt;/a&gt; 和 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.monthabbr&#34;&gt;monthabbr&lt;/a&gt;。首先将映射加载到 &lt;code&gt;LOCALES&lt;/code&gt; 变量中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;french_months&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;janvier&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;février&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;mars&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;avril&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;mai&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;juin&amp;#34;&lt;/span&gt;,
                        &lt;span class=&#34;s2&#34;&gt;&amp;#34;juillet&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;août&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;septembre&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;octobre&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;novembre&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;décembre&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;french_monts_abbrev&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;janv&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;févr&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;mars&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;avril&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;mai&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;juin&amp;#34;&lt;/span&gt;,
                              &lt;span class=&#34;s2&#34;&gt;&amp;#34;juil&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;août&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;sept&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;oct&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;nov&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;déc&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;french_days&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;lundi&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;mardi&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;mercredi&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;jeudi&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;vendredi&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;samedi&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;dimanche&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

julia&amp;gt; Dates.LOCALES&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;french&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.DateLocale&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;french_months, french_monts_abbrev, french_days, &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后可以利用上述函数进行查询。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.dayname&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;french&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;vendredi&amp;#34;&lt;/span&gt;

julia&amp;gt; Dates.monthname&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;french&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;janvier&amp;#34;&lt;/span&gt;

julia&amp;gt; Dates.monthabbr&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;french&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;janv&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于没有加载日期的缩写版本，试图使用函数 &lt;code&gt;dayabbr&lt;/code&gt; 会出错。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.dayabbr&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;french&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
ERROR: BoundsError: attempt to access 1-element Array&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;String,1&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; at index &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
Stacktrace:
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;时间类型-周期算术&#34;&gt;时间类型-周期算术&lt;/h1&gt;
&lt;p&gt;在使用任何语言/日期框架时，熟悉如何处理日期-周期算术是一个很好的做法，因为有一些&lt;a href=&#34;https://codeblog.jonskeet.uk/2010/12/01/the-joys-of-date-time-arithmetic/&#34;&gt;棘手的问题&lt;/a&gt;需要处理（尽管对于日-精度类型来说要少得多）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dates&lt;/code&gt; 模块的方法试图遵循简单的原则，即在做 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Period&#34;&gt;Period&lt;/a&gt; 算术时尽量少改。这种方法也常被称为历法算术，或者说如果有人在对话中问你同样的计算方法，你可能会猜到。为什么要大惊小怪呢？我们举个经典的例子：把2014年1月31日加1个月。答案是什么？Javascript 会说&lt;a href=&#34;https://markhneedham.com/blog/2009/01/07/javascript-add-a-month-to-a-date/&#34;&gt;3月3日&lt;/a&gt;（假设31天）。PHP 会说&lt;a href=&#34;https://stackoverflow.com/questions/5760262/php-adding-months-to-a-date-while-not-exceeding-the-last-day-of-the-month&#34;&gt;3月2日&lt;/a&gt;（假设30天）。事实上，没有正确的答案。在 &lt;code&gt;Dates&lt;/code&gt; 模块中，它给出的结果是2月28日。它是如何计算出来的呢？我喜欢想到赌场里经典的 7-7-7 赌博游戏。&lt;/p&gt;
&lt;p&gt;现在只要想象一下，老虎机不是 7-7-7，而是年-月-日，或者在我们的例子中，2014-01-31。当你要求在这个日期的基础上增加1个月的时候，月份槽就会递增，所以现在我们有 2014-02-31。然后检查日号是否大于新月份的最后有效日，如果大于（如上例），则日号向下调整到最后有效日（28）。这种方法的后果是什么呢？继续在我们的日期上再加一个月，&lt;code&gt;2014-02-28 + Month(1) == 2014-03-28&lt;/code&gt;。什么？你是在期待3月的最后一天吗？不对，对不起，记得 7-7-7 的档期。尽可能少的槽位要改变，所以我们先把月份槽位递增1，2014-03-28，轰，我们就完成了，因为这是一个有效的日期。另一方面，如果我们要在原来的日期 2014-01-31 的基础上增加2个月，那么我们最终的结果是 2014-03-31，正如预期的那样。这种方法的另一个后果是，当强行进行特定的排序时，关联性会有所损失（即以不同的顺序添加东西会导致不同的结果）。比如说：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,1,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;+Dates.Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; + Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2014-02-28

julia&amp;gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,1,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;+Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; + Dates.Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2014-03-01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那是怎么回事呢？在第一行中，我们在1月29日的基础上加1天，结果是 2014-01-30；然后再加1个月，于是得到 2014-02-30，再往下调整为 2014-02-28。在第二个例子中，我们先加1个月，我们得到 2014-02-29，再往下调整为 2014-02-28，然后再加1天，结果是 2014-03-01。在这种情况下，有一个设计原则是有帮助的，那就是在存在多个 Periods 的情况下，操作将按照 Periods 的类型来排序，而不是按照它们的值或位置顺序来排序；这意味着总是先加 &lt;code&gt;Year&lt;/code&gt;，然后加 &lt;code&gt;Month&lt;/code&gt;，再加 &lt;code&gt;Week&lt;/code&gt; 等。因此，以下确实会导致关联性并正好有用:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,1,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; + Dates.Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; + Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2014-03-01

julia&amp;gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,1,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; + Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; + Dates.Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2014-03-01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;棘手吗？也许吧。一个无辜的 &lt;code&gt;Dates&lt;/code&gt; 用户该怎么做？最重要的是要注意，当处理月份时，明确地强制执行某种关联性，可能会导致一些意想不到的结果，但除此之外，一切都应该按照预期工作。值得庆幸的是，在 UT 中处理时间时，日期-周期算术中的奇特情况几乎就是这样了（避免了处理夏令时、闰秒等的 &amp;ldquo;乐趣&amp;rdquo;）。&lt;/p&gt;
&lt;p&gt;作为奖励，所有的周期算术对象都可以直接与范围一起工作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,1,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,2,3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2014-01-29&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2014-02-03&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

julia&amp;gt; collect&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dr&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
6-element Array&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Date,1&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;:
 2014-01-29
 2014-01-30
 2014-01-31
 2014-02-01
 2014-02-02
 2014-02-03

julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,1,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,07,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2014-01-29&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2014-07-29&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

julia&amp;gt; collect&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dr&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
7-element Array&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Date,1&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;:
 2014-01-29
 2014-02-28
 2014-03-29
 2014-04-29
 2014-05-29
 2014-06-29
 2014-07-29
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;for i in Date(&amp;quot;2020-08-01&amp;quot;):Day(1):Date(&amp;quot;2020-08-09&amp;quot;)
           println(i)
end

2020-08-01
2020-08-02
2020-08-03
2020-08-04
2020-08-05
2020-08-06
2020-08-07
2020-08-08
2020-08-09
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;调整器函数&#34;&gt;调整器函数&lt;/h1&gt;
&lt;p&gt;尽管日期-周期算术很方便，但经常需要在日期上进行的计算具有日历或时间的性质，而不是固定的周期数。节日就是一个很好的例子，大多数都遵循这样的规则：&amp;ldquo;纪念日 = 五月的最后一个星期一&amp;rdquo;，或者 &amp;ldquo;感恩节 = 十一月的第四个星期四&amp;rdquo;。这类时间表达式处理的是相对于日历的规则，比如本月的第一天或最后一天，下周二，或第一个和第三个星期三等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dates&lt;/code&gt; 模块通过几个方便的方法提供了调整器 API，这些方法有助于简单、简洁地表达时间规则。第一组调整器方法处理周、月、季度和年的首尾。它们每个方法都接收一个单一的 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType&#34;&gt;TimeType&lt;/a&gt; 作为输入，并返回或调整到相对于输入的所需时期的第一个或最后一个。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.firstdayofweek&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,7,16&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Adjusts the input to the Monday of the input&amp;#39;s week&lt;/span&gt;
2014-07-14

julia&amp;gt; Dates.lastdayofmonth&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,7,16&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Adjusts to the last day of the input&amp;#39;s month&lt;/span&gt;
2014-07-31

julia&amp;gt; Dates.lastdayofquarter&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,7,16&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Adjusts to the last day of the input&amp;#39;s quarter&lt;/span&gt;
2014-09-30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来的两个高阶方法 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.tonext-Tuple%7BTimeType,Int64%7D&#34;&gt;tonext&lt;/a&gt; 和 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.toprev-Tuple%7BTimeType,Int64%7D&#34;&gt;toprev&lt;/a&gt;，通过将一个 &lt;code&gt;DateFunction&lt;/code&gt; 和一个起始 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType&#34;&gt;TimeType&lt;/a&gt; 作为第一个参数来概括处理时间表达式。&lt;code&gt;DateFunction&lt;/code&gt; 只是一个函数，通常是匿名的，它接受一个单一的 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType&#34;&gt;TimeType&lt;/a&gt; 作为输入，并返回一个 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/numbers/#Core.Bool&#34;&gt;Bool&lt;/a&gt;，&lt;code&gt;true&lt;/code&gt; 表示满足调整标准。例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;istuesday&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; x-&amp;gt;Dates.dayofweek&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.Tuesday&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Returns true if the day of the week of x is Tuesday&lt;/span&gt;

julia&amp;gt; Dates.tonext&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;istuesday, Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,7,13&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 2014-07-13 is a Sunday&lt;/span&gt;
2014-07-15

julia&amp;gt; Dates.tonext&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,7,13&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, Dates.Tuesday&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Convenience method provided for day of the week adjustments&lt;/span&gt;
2014-07-15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这对于更复杂的时间表达式的 do-block 语法是很有用的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.tonext&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,7,13&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; x
           &lt;span class=&#34;c1&#34;&gt;# Return true on the 4th Thursday of November (Thanksgiving)&lt;/span&gt;
           Dates.dayofweek&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.Thursday &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
           Dates.dayofweekofmonth&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
           Dates.month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.November
       end
2014-11-27
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.julialang.org/en/v1/base/collections/#Base.filter&#34;&gt;Base.filter&lt;/a&gt; 方法可以用来获取指定范围内的所有有效日期/时刻。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 匹兹堡街道清洁; 从 4月到11月的每第二个周二&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 日期范围从 2014-01-01 到 2015-01-01&lt;/span&gt;
julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Dates.Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2015&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

julia&amp;gt; filter&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dr&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; x
           Dates.dayofweek&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.Tue &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
           Dates.April &amp;lt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &amp;lt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.Nov &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
           Dates.dayofweekofmonth&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
       end
8-element Array&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Date,1&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;:
 2014-04-08
 2014-05-13
 2014-06-10
 2014-07-08
 2014-08-12
 2014-09-09
 2014-10-14
 2014-11-11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Raku 中上面的代码可以写成:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;lazy my @dates = Date.new(&#39;2014-01-01&#39;) ... Date.new(&#39;2015-01-01&#39;);

.say for @dates.grep: -&amp;gt; $d {
    $d.day-of-week == 2 &amp;amp;&amp;amp;
    4  &amp;lt;= $d.month &amp;lt;= 11 &amp;amp;&amp;amp;
    $d.weekday-of-month == 2
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其他的例子和测试可以在 &lt;a href=&#34;https://github.com/JuliaLang/julia/blob/master/stdlib/Dates/test/adjusters.jl&#34;&gt;stdlib/Dates/test/adjusters.jl&lt;/a&gt; 中找到。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/julia">julia</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/dates">dates</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-08-04-dates-in-julia/</guid>
                <pubDate>Tue, 04 Aug 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Julia 语言学习笔记</title>
                <link>https://ohmyweekly.github.io/notes/2020-07-27-learning-julialang/</link>
                
                
                <description>&lt;blockquote&gt;Learning Julia&lt;/blockquote&gt;&lt;h2 id=&#34;语法&#34;&gt;语法&lt;/h2&gt;
&lt;h3 id=&#34;数值字面量系数&#34;&gt;数值字面量系数&lt;/h3&gt;
&lt;p&gt;在标识符或圆括号前面直接放一个数字, 例如 &lt;code&gt;2x&lt;/code&gt; 或 &lt;code&gt;2(x+y)&lt;/code&gt;, 会被认为是把标识符和它前面的数字相乘。这样写多项式就很方便了。&lt;/p&gt;
&lt;h3 id=&#34;向量化的点号运算符&#34;&gt;向量化的点号运算符&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
 &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
 &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;.+&lt;/code&gt; 类似于 Raku 中的 &lt;code&gt;»+»&lt;/code&gt; 超运算符:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;[1,2,3] »+» 3
[4 5 6]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是 Julia 的 &lt;code&gt;Vectorized &amp;quot;dot&amp;quot;&lt;/code&gt; 语法没有 Raku 的超运算符语法清晰。&lt;/p&gt;
&lt;p&gt;类似的例子还有:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;n&#34;&gt;sin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 0.479425538604203&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;0.479425538604203&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;0.8414709848078965&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;0.9974949866040544&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;13.42477796076938&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;17.42477796076938&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;21.42477796076938&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;15.566370614359172&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;18.566370614359172&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;21.566370614359172&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;19.0&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;26.0&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;33.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等价的 Raku 写法为:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub f(\x, \y) { 3*x + 4*y};

my \A = [1.0, 2.0, 3.0];
my \B = [4.0, 5.0, 6.0];

A».&amp;amp;f(pi)
[15.566370614359172 18.566370614359172 21.566370614359172]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;链式比较&#34;&gt;链式比较&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Raku 同样支持这种链式比较。&lt;/p&gt;
&lt;h3 id=&#34;虚数&#34;&gt;虚数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;n&#34;&gt;real&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;         &lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;imag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;         &lt;span class=&#34;c&#34;&gt;# 2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 5 + 0im&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;(1 + 2i).re         # 1
(1 + 2i).im         # 2
(1 + 2i) * (1 - 2i) # 5+0i
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;命名参数&#34;&gt;命名参数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c&#34;&gt;###&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;函数组合&#34;&gt;函数组合&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;∘&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 3.0&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;∘&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;∘&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uppercase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;sc&#34;&gt;&amp;#39;U&amp;#39;&lt;/span&gt;
 &lt;span class=&#34;sc&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;
 &lt;span class=&#34;sc&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;
 &lt;span class=&#34;sc&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;
 &lt;span class=&#34;sc&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;
 &lt;span class=&#34;sc&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;piping&#34;&gt;Piping&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 7.416198487095663&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# 等价于&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;∘&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# 7.416198487095663&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;广播和管道一起使用&#34;&gt;广播和管道一起使用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uppercase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;titlecase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;组合类型&#34;&gt;组合类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不可变组合类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;qux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;typeof&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# Foo&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;typeof&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# DataType&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;     &lt;span class=&#34;c&#34;&gt;# rakulang&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;     &lt;span class=&#34;c&#34;&gt;# 1.5&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# ERROR: setfield! immutable struct of type Foo cannot be changed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;可变组合类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;mutable&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;qux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;联合类型&#34;&gt;联合类型&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;n&#34;&gt;IntOrString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Union&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;AbstractString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IntOrString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IntOrString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# rakulang&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;参数化类型&#34;&gt;参数化类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;参数化组合类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 1.0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 2.0&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Circle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Circle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;AbstractString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 6.0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# rakulang&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;多重分派&#34;&gt;多重分派&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# 2 methods for generic function &amp;#34;f&amp;#34;:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;REPL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;REPL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 7&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/julialang">julialang</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/julia">julia</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-07-27-learning-julialang/</guid>
                <pubDate>Sun, 26 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
    </channel>
</rss>


