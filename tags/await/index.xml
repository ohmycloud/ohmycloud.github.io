<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    await on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/tags/await/</link>
        <description>Recent content  in await
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Mon, 08 Feb 2021 15:20:01 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/tags/await/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>异步编程：futures、async、await。</title>
                <link>https://ohmyweekly.github.io/notes/futures-async-await/</link>
                
                
                <description>&lt;blockquote&gt;这个 codelab 教你如何使用 &lt;code&gt;futures&lt;/code&gt;、&lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://dart.dev/codelabs/async-await&#34;&gt;async-await&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个 codelab 教你如何使用 &lt;code&gt;futures&lt;/code&gt;、&lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。&lt;/p&gt;
&lt;p&gt;要想从这个 codelab 中获得最大的收获，你应该具备以下条件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;掌握&lt;a href=&#34;https://dart.dev/samples&#34;&gt;基本的 Dart 语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;有用其他语言编写异步代码的经验。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个 codelab 包括以下材料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何以及何时使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 如何影响执行顺序。&lt;/li&gt;
&lt;li&gt;如何在 &lt;code&gt;async&lt;/code&gt; 函数中使用 &lt;code&gt;try-catch&lt;/code&gt; 表达式处理异步调用中的错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;估计完成这个代码实验的时间。40-60分钟&lt;/p&gt;
&lt;p&gt;注意：本页面使用嵌入式 DartPads 来显示示例和练习。如果你看到的是空框而不是 DartPads，请转到 &lt;a href=&#34;https://dart.dev/tools/dartpad/troubleshoot&#34;&gt;DartPad 故障排除页面&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;为什么异步代码很重要&#34;&gt;为什么异步代码很重要&lt;/h2&gt;
&lt;p&gt;异步操作让你的程序在等待另一个操作完成时完成工作。下面是一些常见的异步操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过网络获取数据。&lt;/li&gt;
&lt;li&gt;写入数据库。&lt;/li&gt;
&lt;li&gt;从文件中读取数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要在 Dart 中执行异步操作，你可以使用 &lt;code&gt;Future&lt;/code&gt; 类以及 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字。&lt;/p&gt;
&lt;h3 id=&#34;例子-错误地使用异步函数&#34;&gt;例子: 错误地使用异步函数&lt;/h3&gt;
&lt;p&gt;下面的例子显示了使用异步函数(&lt;code&gt;fetchUserOrder()&lt;/code&gt;)的错误方法。稍后你将使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 来修复这个例子。在运行这个例子之前，试着发现这个问题-你认为输出会是什么？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// This example shows how *not* to write asynchronous Dart code.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Your order is: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Imagine that this function is more complex and slow.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Large Latte&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是这个例子为什么不能打印 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 最终产生的值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fetchUserOrder()&lt;/code&gt; 是一个异步函数，在延迟之后，提供一个描述用户订单的字符串：&amp;ldquo;Large Latte&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;为了得到用户的订单，&lt;code&gt;createOrderMessage()&lt;/code&gt; 应该调用 &lt;code&gt;fetchUserOrder()&lt;/code&gt;，并等待其完成。由于 &lt;code&gt;createOrderMessage()&lt;/code&gt; 没有等待 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 完成，&lt;code&gt;createOrderMessage()&lt;/code&gt; 无法获得 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 最终提供的字符串值。&lt;/li&gt;
&lt;li&gt;取而代之的是，&lt;code&gt;createOrderMessage()&lt;/code&gt; 得到的是待完成工作的表示：一个未完成的未来。您将在下一节了解更多关于未来的信息。&lt;/li&gt;
&lt;li&gt;因为 &lt;code&gt;createOrderMessage()&lt;/code&gt; 没有得到描述用户订单的值，所以这个例子没有打印 &amp;ldquo;Large Latte&amp;rdquo; 到控制台，而是打印 &amp;ldquo;Your order is: Instance of &amp;lsquo;_Future&amp;rsquo;&amp;quot;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在接下来的章节中，你将学习关于 futures 和关于使用 futures 的工作（使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt;），这样你就能编写必要的代码，使 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 向控制台打印所需的值(&amp;ldquo;Large Latte&amp;rdquo;)。&lt;/p&gt;
&lt;p&gt;关键术语:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步操作: 同步操作会阻止其他操作的执行，直到它完成。&lt;/li&gt;
&lt;li&gt;同步函数：同步函数只执行同步操作。&lt;/li&gt;
&lt;li&gt;异步操作：异步操作一旦启动，就允许其他操作在它完成之前执行。&lt;/li&gt;
&lt;li&gt;异步函数：异步函数至少执行一个异步操作，也可以执行同步操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是未来&#34;&gt;什么是未来？&lt;/h2&gt;
&lt;p&gt;future(小写 &amp;ldquo;f&amp;rdquo;)是 &lt;a href=&#34;https://api.dart.dev/stable/dart-async/Future-class.html&#34;&gt;Future&lt;/a&gt;（大写 &amp;ldquo;F&amp;rdquo;）类的一个实例。一个 future 代表异步操作的结果，可以有两种状态：未完成或完成。&lt;/p&gt;
&lt;p&gt;注意：未完成是一个 Dart 术语，指的是一个未来的状态，在它产生一个值之前。&lt;/p&gt;
&lt;h3 id=&#34;未完成的&#34;&gt;未完成的&lt;/h3&gt;
&lt;p&gt;当你调用一个异步函数时，它会返回一个未完成的未来。这个未来正在等待函数的异步操作完成或抛出一个错误。&lt;/p&gt;
&lt;h3 id=&#34;已完成的&#34;&gt;已完成的&lt;/h3&gt;
&lt;p&gt;如果异步操作成功，未来就以一个值完成。否则它将以一个错误完成。&lt;/p&gt;
&lt;h3 id=&#34;用一个值来完成&#34;&gt;用一个值来完成&lt;/h3&gt;
&lt;p&gt;类型为 &lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt; 的 future 用一个类型为 &lt;code&gt;T&lt;/code&gt; 的值来完成。例如，一个类型为 &lt;code&gt;Future&amp;lt;String&amp;gt;&lt;/code&gt; 的 future 会产生一个字符串值。如果一个 future 没有产生一个可用的值，那么 future 的类型是 &lt;code&gt;Future&amp;lt;void&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;用一个错误来完成&#34;&gt;用一个错误来完成&lt;/h3&gt;
&lt;p&gt;如果函数执行的异步操作因为任何原因而失败，future 就会以错误的方式完成。&lt;/p&gt;
&lt;h3 id=&#34;例子-介绍-future&#34;&gt;例子: 介绍 future&lt;/h3&gt;
&lt;p&gt;在下面的例子中，&lt;code&gt;fetchUserOrder()&lt;/code&gt; 返回一个在打印到控制台后完成的 future。因为它没有返回一个可用的值，&lt;code&gt;fetchUserOrder()&lt;/code&gt; 的类型是 &lt;code&gt;Future&amp;lt;void&amp;gt;&lt;/code&gt;。在运行这个例子之前，试着预测一下哪个会先打印：&amp;ldquo;Large Latte&amp;rdquo; 或 &amp;ldquo;Fetching user order&amp;hellip;&amp;quot;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Imagine that this function is fetching user info from another service or database.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Large Latte&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Fetching user order...&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在前面的例子中，尽管 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 在第8行的 &lt;code&gt;print()&lt;/code&gt; 调用之前执行，控制台还是在 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 的输出 (&amp;ldquo;Large Latte&amp;rdquo;) 之前显示了第8行的输出 (&amp;ldquo;Fetching user order&amp;hellip;&amp;quot;)。这是因为 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 在打印 &amp;ldquo;Large Latte&amp;rdquo; 之前会有延迟。&lt;/p&gt;
&lt;h3 id=&#34;例子-完成时出现错误&#34;&gt;例子: 完成时出现错误&lt;/h3&gt;
&lt;p&gt;运行下面的例子，看看未来如何完成一个错误。稍后你将学习如何处理错误。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Imagine that this function is fetching user info but encounters a bug
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Logout failed: user ID is invalid&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Fetching user order...&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，&lt;code&gt;fetchUserOrder()&lt;/code&gt; 完成时出现错误，表明用户ID无效。&lt;/p&gt;
&lt;p&gt;你已经学习了 future 和它们如何完成，但你如何使用异步函数的结果呢？在下一节中，你将学习如何使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字来获取结果。&lt;/p&gt;
&lt;p&gt;快速回顾:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 &lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt; 实例会产生一个 &lt;code&gt;T&lt;/code&gt; 类型的值。&lt;/li&gt;
&lt;li&gt;如果一个 future 没有产生一个可用的值，那么 future 的类型是 &lt;code&gt;Future&amp;lt;void&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;一个 future 可以处于两种状态之一：未完成或完成。&lt;/li&gt;
&lt;li&gt;当你调用一个返回 future 的函数时，函数会把要做的工作排队，并返回一个未完成的 future。&lt;/li&gt;
&lt;li&gt;当一个 future 的操作完成时，future 以一个值或以一个错误完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键术语:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Future: Dart &lt;a href=&#34;https://api.dart.dev/stable/dart-async/Future-class.html&#34;&gt;Future&lt;/a&gt; 类。&lt;/li&gt;
&lt;li&gt;future：Dart &lt;code&gt;Future&lt;/code&gt; 类的一个实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用-futureasync-和-await&#34;&gt;使用 future：async 和 await&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字提供了一种声明式的方式来定义异步函数并使用它们的结果。在使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 时，请记住以下两个基本准则。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要定义一个异步函数，请在函数主体前添加 &lt;code&gt;async&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;await&lt;/code&gt; 关键字只能在 &lt;code&gt;async&lt;/code&gt; 函数中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个将 &lt;code&gt;main()&lt;/code&gt; 从同步函数转换为异步函数的例子。&lt;/p&gt;
&lt;p&gt;首先，在函数体前添加 &lt;code&gt;async&lt;/code&gt; 关键字:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;···&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果函数有声明的返回类型，那么更新类型为 &lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt;，其中 T 是函数返回的值的类型。如果函数没有明确返回值，那么返回类型为 &lt;code&gt;Future&amp;lt;void&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;···&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在你已经有了一个 &lt;code&gt;async&lt;/code&gt; 函数，你可以使用 &lt;code&gt;await&lt;/code&gt; 关键字来等待一个 future 的完成:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正如下面两个例子所显示的，&lt;code&gt;async&lt;/code&gt; 和a &lt;code&gt;wait&lt;/code&gt; 关键字导致异步代码看起来很像同步代码。唯一的区别在异步示例中突出显示，如果你的窗口足够宽，它就在同步示例的右边。&lt;/p&gt;
&lt;p&gt;示例：同步函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Your order is: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Imagine that this function is
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// more complex and slow.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Large Latte&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Fetching user order...&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Fetching user order...
Your order is: Instance of _Future&amp;lt;String&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例子：异步函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Your order is: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Imagine that this function is
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// more complex and slow.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Large Latte&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Fetching user order...&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Fetching user order...
Your order is: Large Latte
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;异步示例在三个方面有所不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createOrderMessage()&lt;/code&gt; 的返回类型从 &lt;code&gt;String&lt;/code&gt; 变为 &lt;code&gt;Future&amp;lt;String&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async&lt;/code&gt; 关键字出现在 &lt;code&gt;createOrderMessage()&lt;/code&gt; 和 &lt;code&gt;main()&lt;/code&gt; 的函数体之前。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;await&lt;/code&gt; 关键字出现在调用异步函数 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 和 &lt;code&gt;createOrderMessage()&lt;/code&gt; 之前。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键术语:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;async: 你可以在一个函数的主体前使用 &lt;code&gt;async&lt;/code&gt; 关键字来标记它为异步函数。&lt;/li&gt;
&lt;li&gt;async 函数: &lt;code&gt;async&lt;/code&gt; 函数是一个标有 &lt;code&gt;async&lt;/code&gt; 关键字的函数。&lt;/li&gt;
&lt;li&gt;await：可以使用 &lt;code&gt;await&lt;/code&gt; 关键字来获取异步表达式的完成结果。&lt;code&gt;await&lt;/code&gt; 关键字只在 &lt;code&gt;async&lt;/code&gt; 函数中起作用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用-async-和-await-的执行流程&#34;&gt;使用 async 和 await 的执行流程&lt;/h3&gt;
&lt;p&gt;一个异步函数在第一个 &lt;code&gt;await&lt;/code&gt; 关键字之前是同步运行的。这意味着在一个 &lt;code&gt;async&lt;/code&gt; 函数体中，第一个 &lt;code&gt;await&lt;/code&gt; 关键字之前的所有同步代码都会立即执行。&lt;/p&gt;
&lt;p&gt;版本说明：在 Dart 2.0 之前，一个异步函数立即返回，而不会在异步函数体中执行任何代码。&lt;/p&gt;
&lt;h3 id=&#34;例子在异步函数内执行在异步函数中执行&#34;&gt;例子：在异步函数内执行。在异步函数中执行&lt;/h3&gt;
&lt;p&gt;运行下面的例子，看看如何在异步函数体中执行。你认为输出会是什么？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Awaiting user order...&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Your order is: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Imagine that this function is more complex and slow.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Large Latte&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;countSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// You can ignore this function - it&amp;#39;s here to visualize delay time in this example.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;countSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行上例中的代码后，尝试将第2行和第3行反过来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Awaiting user order...&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到输出的时间发生了变化，现在 &lt;code&gt;print(&#39;Awaiting user order&#39;)&lt;/code&gt; 出现在 &lt;code&gt;printOrderMessage()&lt;/code&gt; 中第一个 &lt;code&gt;await&lt;/code&gt; 关键字之后。&lt;/p&gt;
&lt;h3 id=&#34;练习-练习使用-async-和-await&#34;&gt;练习: 练习使用 async 和 await&lt;/h3&gt;
&lt;p&gt;下面的练习是一个失败的单元测试，其中包含部分完成的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 &lt;code&gt;main()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为了模拟异步操作，调用以下函数，这些函数是为你提供的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;函数&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;类型签名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fetchRole()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Future&lt;!-- raw HTML omitted --&gt; fetchRole()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;获取用户角色的简短描述。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fetchLoginAmount()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Future&lt;!-- raw HTML omitted --&gt; fetchLoginAmount()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;获取用户的登录次数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第1部分：&lt;code&gt;reportUserRole()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为 &lt;code&gt;reportUserRole()&lt;/code&gt; 函数添加代码，使其执行以下操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回一个以下列字符串完成的 future： &lt;code&gt;&amp;quot;User role: &amp;lt;user role&amp;gt;&amp;quot;&lt;/code&gt;。
&lt;ul&gt;
&lt;li&gt;注意：你必须使用 &lt;code&gt;fetchRole()&lt;/code&gt; 返回的实际值；复制和粘贴示例返回值不会使测试通过。&lt;/li&gt;
&lt;li&gt;示例返回值: &amp;ldquo;User role: tester&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过调用提供的函数 &lt;code&gt;fetchRole()&lt;/code&gt; 获取用户角色。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二部分：&lt;code&gt;reportLogins()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实现一个异步函数 &lt;code&gt;reportLogins()&lt;/code&gt;，使其执行以下操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回字符串 &amp;ldquo;Total number of logins: &amp;lt;# of logins&amp;gt;&amp;quot;。
&lt;ul&gt;
&lt;li&gt;注意：你必须使用 &lt;code&gt;fetchLoginAmount()&lt;/code&gt; 返回的实际值；复制和粘贴示例返回值不会使测试通过。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reportLogins()&lt;/code&gt; 的返回值示例: &lt;code&gt;&amp;quot;Total number of logins: 57&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过调用提供的函数 &lt;code&gt;fetchLoginAmount()&lt;/code&gt; 来获取登录次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reportUserRole&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchRole&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;User role: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reportLogins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;logins&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchLoginAmount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Total number of logins: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logins&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：如果你的代码通过了测试，你可以忽略信息级的消息。&lt;/p&gt;
&lt;h2 id=&#34;处理错误&#34;&gt;处理错误&lt;/h2&gt;
&lt;p&gt;要处理 &lt;code&gt;async&lt;/code&gt; 函数中的错误，使用 &lt;code&gt;try-catch&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Awaiting user order...&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Caught error: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在一个 &lt;code&gt;async&lt;/code&gt; 函数中，你可以像在同步代码中一样编写 &lt;code&gt;try-catch&lt;/code&gt; 子句。&lt;/p&gt;
&lt;h3 id=&#34;例子async-和-await-的-try-catch-子句&#34;&gt;例子：&lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 的 &lt;code&gt;try-catch&lt;/code&gt; 子句&lt;/h3&gt;
&lt;p&gt;运行下面的例子，看看如何处理一个异步函数的错误。你认为输出会是什么？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Awaiting user order...&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Caught error: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Imagine that this function is more complex.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Cannot locate user order&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;练习-练习处理错误&#34;&gt;练习: 练习处理错误&lt;/h3&gt;
&lt;p&gt;下面的练习提供了使用异步代码处理错误的练习，使用上一节中描述的方法。为了模拟异步操作，你的代码将调用以下函数，该函数为你提供。&lt;/p&gt;
&lt;p&gt;| 函数                | 类型签名 | 描述 |
| fetchNewUsername() | Future&lt;!-- raw HTML omitted --&gt; fetchNewUsername() |	返回你可以用来替换旧用户名的新用户名。|&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 来实现一个异步的 &lt;code&gt;changeUsername()&lt;/code&gt; 函数，该函数执行以下操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用提供的异步函数 &lt;code&gt;fetchNewUsername()&lt;/code&gt; 并返回其结果。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;changeUsername()&lt;/code&gt; 的返回值示例: &amp;ldquo;jane_smith_92&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;捕获任何发生的错误并返回错误的字符串值。
&lt;ul&gt;
&lt;li&gt;你可以使用 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/ArgumentError/toString.html&#34;&gt;toString()&lt;/a&gt; 方法对 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/Exception-class.html&#34;&gt;Exceptions&lt;/a&gt; 和&lt;a href=&#34;https://api.dart.dev/stable/dart-core/Error-class.html&#34;&gt;Errors&lt;/a&gt; 进行字符串化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;changeUsername&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchNewUsername&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;练习-把所有的东西放在一起&#34;&gt;练习: 把所有的东西放在一起&lt;/h3&gt;
&lt;p&gt;现在是时候在最后一个练习中练习所学的知识了。为了模拟异步操作，本练习提供了异步函数 &lt;code&gt;fetchUsername()&lt;/code&gt; 和 &lt;code&gt;logoutUser()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;| 函数             | 类型签名                        | 描述 |
| fetchUsername() |	Future&lt;!-- raw HTML omitted --&gt; fetchUsername() | 返回与当前用户相关联的名称。 |
| logoutUser()	  | Future&lt;!-- raw HTML omitted --&gt; logoutUser()	   | 执行当前用户的注销，并返回被注销的用户名。 |&lt;/p&gt;
&lt;p&gt;编写以下内容。&lt;/p&gt;
&lt;p&gt;第一部分：&lt;code&gt;addHello()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写一个函数 &lt;code&gt;addHello()&lt;/code&gt;，它接受一个单一的 &lt;code&gt;String&lt;/code&gt; 参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addHello()&lt;/code&gt; 返回它的 &lt;code&gt;String&lt;/code&gt; 参数，前面加 &amp;lsquo;Hello&amp;rsquo;。
例如：&lt;code&gt;addHello(&#39;Jon&#39;)&lt;/code&gt; 返回 &amp;lsquo;Hello Jon&amp;rsquo;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二部分：&lt;code&gt;greetUser()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写一个不接受参数的函数 &lt;code&gt;greetUser()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;为了得到用户名，&lt;code&gt;greetUser()&lt;/code&gt; 调用提供的异步函数 &lt;code&gt;fetchUsername()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;greetUser()&lt;/code&gt; 通过调用 &lt;code&gt;addHello()&lt;/code&gt; 为用户创建一个问候语，传递用户名，并返回结果。
例子: 如果 &lt;code&gt;fetchUsername()&lt;/code&gt; 返回 &amp;lsquo;Jenny&amp;rsquo;, 那么 &lt;code&gt;greetUser()&lt;/code&gt; 返回 &amp;lsquo;Hello Jenny&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第三部分：&lt;code&gt;sayGoodbye()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编写一个函数 &lt;code&gt;sayGoodbye()&lt;/code&gt;，它的功能如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不接受任何参数&lt;/li&gt;
&lt;li&gt;捕获任何错误。&lt;/li&gt;
&lt;li&gt;调用所提供的异步函数 logoutUser().&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;logoutUser()&lt;/code&gt; 失败，&lt;code&gt;sayGoodbye()&lt;/code&gt; 返回任何你喜欢的字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;logoutUser()&lt;/code&gt; 成功，&lt;code&gt;sayGoodbye()&lt;/code&gt; 返回字符串 &lt;code&gt;&#39;&amp;lt;result&amp;gt; Thanks, see you next time&#39;&lt;/code&gt;，其中 &lt;code&gt;&amp;lt;result&amp;gt;&lt;/code&gt; 是调用 &lt;code&gt;logoutUser()&lt;/code&gt; 返回的字符串值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addHello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;greetUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUsername&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addHello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sayGoodbye&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;logoutUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; Thanks, see you next time&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Failed to logout user: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;下一步是什么&#34;&gt;下一步是什么？&lt;/h2&gt;
&lt;p&gt;恭喜你，你已经完成了 codelab 的学习！如果你还想了解更多，这里有一些下一步的建议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;玩玩 &lt;a href=&#34;https://dartpad.dev/&#34;&gt;DartPad&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;尝试另一个 &lt;a href=&#34;https://dart.dev/codelabs&#34;&gt;codelab&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;学习更多关于 futures 和异步的知识。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tutorials/language/streams&#34;&gt;Streams tutorial&lt;/a&gt;: 学习如何使用异步事件的序列。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLjxrf2q8roU0Net_g1NT5_vOO3s_FR02J&#34;&gt;来自 Google 的 Dart视频&lt;/a&gt;: 观看一个或多个关于异步编码的视频。或者，如果你喜欢，阅读基于这些视频的文章。(从&lt;a href=&#34;https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a&#34;&gt;隔离和事件循环&lt;/a&gt;开始。)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/get-dart&#34;&gt;获取 Dart SDK&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你对使用嵌入式 DartPads 感兴趣，就像这个 codelab 一样，请看&lt;a href=&#34;https://dart.dev/resources/dartpad-best-practices&#34;&gt;教程中使用 DartPad 的最佳实践&lt;/a&gt;。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/async">async</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/futures">futures</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/await">await</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/dart">dart</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/futures-async-await/</guid>
                <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
    </channel>
</rss>


