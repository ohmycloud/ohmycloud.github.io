<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[comb on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/comb/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/comb/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/comb/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/comb/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-15T22:25:28+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/comb/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Raku 中的梳子]]></title>
            <link href="https://ohmyweekly.github.io/notes/2016-06-07-07-comb-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2016-02-03-comb-in-raku/?utm_source=atom_feed" rel="related" type="text/html" title="comb - 操作字符串的利器" />
            
                <id>https://ohmyweekly.github.io/notes/2016-06-07-07-comb-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-15T00:00:00+08:00</published>
            <updated>2021-07-15T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Comb in Raku</blockquote><h1 id="raku-中的梳子">Raku 中的梳子!</h1>
<p>在 Perl 5 中, 我很感激有这样两个便利的结构:</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="k">my</span> <span class="nv">@things</span> <span class="o">=</span> <span class="nv">$text</span> <span class="o">=~</span><span class="sr"> /thing/g</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">%things</span> <span class="o">=</span> <span class="nv">$text</span> <span class="o">=~</span><span class="sr"> /(key)...(value)/g</span><span class="p">;</span>
</code></pre></div><p>你拿出一小段可以预见的文本, 并给它一个正则表达式, 吼吼, 你得到了一个列表和散列, 像变魔术一般！我们也可以在 Raku 中使用正则表达式, 但是 <strong><a href="http://docs.raku.org/routine/comb">comb</a></strong> 更适合做这个工作。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/326727-29a3966bbb8e437f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<h2 id="朴素的字符">朴素的字符</h2>
<p>你可以把 <em>comb</em> 用作子例程或方法。在它的最基本的形式中, <em>comb</em> 会把字符串分解为字符:</p>
<div class="highlight"><pre class="chroma"><code class="language-Raku" data-lang="Raku"><span class="p">&#39;</span><span class="s1">foobar moobar 駱駝道bar</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">comb</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>
<span class="p">&#39;</span><span class="s1">foobar moobar 駱駝道bar</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># f|o|o|b|a|r| |m|o|o|b|a|r| |駱|駝|道|b|a|r</span>
<span class="c1"># foobar| mooba|r 駱駝道b|ar</span>
</code></pre></div><p>不适用任何参数的 <em>comb</em> 你会得到各个单独的字符。给 <em>comb</em> 提供一个整数 <code>$n</code>, 那么你会得到长度至多为 <code>$n</code> 个字符的一个列表, 并且如果没有剩下的字符不够的话, 这个列表会接收较短的这个字符串。这个方法比使用正则表快了 30 倍。</p>
<h2 id="limits">Limits</h2>
<p>你也可以为 <em>comb</em> 提供第二个整数参数, 即 <em>limit</em>, 来标示每个列表中最多含有 limit 个元素:</p>
<div class="highlight"><pre class="chroma"><code class="language-Raku" data-lang="Raku"><span class="p">&#39;</span><span class="s1">foobar moobar 駱駝道bar</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>
<span class="p">&#39;</span><span class="s1">foobar moobar 駱駝道bar</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(</span><span class="mi">6</span><span class="o">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># f|o|o|b|a</span>
<span class="c1"># foobar| mooba</span>
</code></pre></div><p>这适用于使用 <em>comb</em> 方法/函数的所有形式, 而不仅仅是上面展示的那样。</p>
<h2 id="计数">计数</h2>
<p><em>comb</em> 也接收普通的 <a href="http://docs.raku.org/type/Str">Str</a> 作为参数, 返回一个包含那个字符串的匹配的列表。所以这在计算子字符串在字符串中出现的次数时很有用。</p>
<div class="highlight"><pre class="chroma"><code class="language-Raku" data-lang="Raku"><span class="p">&#39;</span><span class="s1">The 🐈 ran after a 🐁, but the 🐁 ran away</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(&#39;</span><span class="s1">🐈</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">Int</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>
<span class="p">&#39;</span><span class="s1">The 🐈 ran after a 🐁, but the 🐁 ran away</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(&#39;</span><span class="s1">ran</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">Int</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># 1</span>
<span class="c1"># 2</span>
</code></pre></div><h2 id="简单的匹配">简单的匹配</h2>
<p><em>comb</em> 的参数也可以是一个正则表达式, 整个匹配会作为一个标量被返回：</p>
<div class="highlight"><pre class="chroma"><code class="language-Raku" data-lang="Raku"><span class="n">foobar</span> <span class="n">moobar</span> <span class="n">駱駝道bar&#39;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(/&lt;[</span><span class="sr">a</span><span class="o">..</span><span class="sr">z</span><span class="p">]&gt;</span><span class="o">+</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">bar</span><span class="p">&#39;/)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># foobar|moobar</span>
</code></pre></div><h2 id="限制所匹配的东西">限制所匹配的东西</h2>
<p>你可以使用<a href="http://docs.raku.org/language/regexes#Look-around_assertions">环视断言</a>或者更简单的 <code>&lt;(</code> 和 <code>)&gt;</code> 正则表达式捕获记号:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">&#39;</span><span class="s1">moo=meow ping=pong</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(/</span><span class="se">\w</span><span class="o">+</span><span class="sr">    </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="o">&lt;(</span><span class="sr"> </span><span class="se">\w</span><span class="o">**</span><span class="mi">4</span><span class="p">/)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span> <span class="c1"># values</span>
<span class="p">&#39;</span><span class="s1">moo=meow ping=pong</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(/</span><span class="se">\w</span><span class="o">+</span><span class="sr"> </span><span class="o">)&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr">    </span><span class="se">\w</span><span class="o">**</span><span class="mi">4</span><span class="p">/)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span> <span class="c1"># keys</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># meow|pong</span>
<span class="c1"># moo|ping</span>
</code></pre></div><p>你可以使用 <code>&lt;(</code> 和 <code>)&gt;</code> 两者之一或两者都使用。<code>&lt;(</code> 从匹配中排除任何它之前的东西, 而 <code>)&gt;</code> 会排除之后的任何东西。即 <code>/'foo' &lt;('bar')&gt; 'ber'/</code> 会匹配包含 <em>foobarber</em> 的东西, 但是从 <em>comb</em> 中返回的东西只会有 <em>bar</em>。</p>
<h2 id="多个捕获">多个捕获</h2>
<p>怎么样得出 Perl 5 那样的键/值对儿呢？</p>
<div class="highlight"><pre class="chroma"><code class="language-Raku" data-lang="Raku"><span class="k">my</span> <span class="nv">%things</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">moo=meow ping=pong</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(/(</span><span class="se">\w</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">(</span><span class="se">\w</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">:</span><span class="s">match</span><span class="p">)</span><span class="o">».</span><span class="nb">Slip</span><span class="o">».</span><span class="nb">Str</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">%things</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># moo =&gt; meow, ping =&gt; pong</span>
</code></pre></div><p>圆括号用于捕获。<code>:match</code> 参数使 <em>comb</em> 返回一个 <strong>Match</strong> 对象的列表, 而非返回一个字符串列表。下一步, 我们使用两个 hyper 运算符把 <strong>Matches</strong> 转换为 <a href="http://docs.raku.org/type/Slip">Slips</a>, 这会给我们一个捕获的列表, 但是它们仍旧是 <strong>Match</strong> 对象, 这就是为什么我们还要把它们转换为 <strong>Str</strong> 的原因。</p>
<p>我们还可以使用具名捕获使代码更清晰：</p>
<div class="highlight"><pre class="chroma"><code class="language-Raku" data-lang="Raku"><span class="k">my</span> <span class="nv">%things</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">moo=meow ping=pong</span><span class="p">&#39;</span>
    <span class="o">.</span><span class="nb">comb</span><span class="p">(/</span><span class="nv">$&lt;key&gt;</span><span class="o">=</span><span class="se">\w</span><span class="o">+</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;value&gt;</span><span class="o">=</span><span class="se">\w</span><span class="o">+</span><span class="p">/</span><span class="o">,</span> <span class="p">:</span><span class="s">match</span><span class="p">)</span>
    <span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="o">.</span><span class="p">&lt;</span><span class="s">key</span><span class="p">&gt;</span> <span class="o">=&gt;</span> <span class="o">.</span><span class="p">&lt;</span><span class="s">value</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">Str</span> <span class="p">});</span>
<span class="nb">say</span> <span class="nv">%things</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># moo =&gt; meow, ping =&gt; pong</span>
</code></pre></div><p>你还可以把上面的代码写成这样：</p>
<div class="highlight"><pre class="chroma"><code class="language-Raku" data-lang="Raku"><span class="k">my</span> <span class="nv">%things</span> <span class="o">=</span> <span class="p">(&#39;</span><span class="s1">moo=meow ping=pong</span><span class="p">&#39;</span> <span class="o">~~</span> <span class="k">m</span><span class="p">:</span><span class="na">g</span><span class="p">/(</span><span class="se">\w</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">(</span><span class="se">\w</span><span class="o">+</span><span class="p">)/)</span><span class="o">».</span><span class="nb">Slip</span><span class="o">».</span><span class="nb">Str</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">%things</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># moo =&gt; meow, ping =&gt; pong</span>
</code></pre></div><h2 id="结论">结论</h2>
<p>把 <em>comb</em> 和 <em><a href="http://blogs.perl.org/users/zoffix_znet/2016/01/perl-6-rotor-the-king-of-list-manipulation.html">rotor</a></em> 结合起来用会很强大。</p>
<h2 id="评论">评论</h2>
<p>代替使用带有 <code>:match</code> 参数的 <code>.comb</code>, 你最好就使用 <code>.match</code> 方法好了:</p>
<div class="highlight"><pre class="chroma"><code class="language-Raku" data-lang="Raku"><span class="p">&#39;</span><span class="s1">moo=meow ping=pong</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">match</span><span class="p">(/(</span><span class="se">\w</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">(</span><span class="se">\w</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">)</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/comb" term="comb" label="comb" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[comb - 操作字符串的利器]]></title>
            <link href="https://ohmyweekly.github.io/notes/2016-02-03-comb-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2016-02-03-comb-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Comb in Raku</blockquote><p>comb - 操作字符串的利器</p>
<h2 id="comb-子例程">comb 子例程</h2>
<p>comb 子例程的定义为：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">multi</span> <span class="k">sub</span>    <span class="nb">comb</span><span class="p">(</span><span class="nb">Regex</span> <span class="nv">$matcher</span><span class="o">,</span> <span class="nb">Str</span><span class="p">(</span><span class="nb">Cool</span><span class="p">)</span> <span class="nv">$input</span><span class="o">,</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="o">*</span><span class="p">)</span> <span class="k">returns</span> <span class="nb">List:D</span>
<span class="k">multi</span> <span class="k">method</span> <span class="nb">comb</span><span class="p">(</span><span class="nb">Regex</span> <span class="nv">$matcher</span><span class="o">,</span>                   <span class="nv">$limit</span> <span class="o">=</span> <span class="o">*</span><span class="p">)</span> <span class="k">returns</span> <span class="nb">List:D</span>
</code></pre></div><p>用法：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">comb</span> <span class="o">/</span><span class="n">PATTERN</span><span class="o">/,</span> <span class="n">STRING</span><span class="o">,</span> <span class="n">LIMIT</span><span class="o">?</span>  <span class="c1"># 子例程形式</span>
<span class="n">STRING</span><span class="o">.</span><span class="nb">comb</span><span class="p">(/</span><span class="sr">PATTERN</span><span class="p">/</span><span class="o">,</span> <span class="n">LIMIT</span><span class="o">?</span><span class="p">)</span>  <span class="c1"># 方法形式</span>
</code></pre></div><p>返回调用者（方法形式）的所有（或者至多 $limit 个，如果提供了的话）匹配，或者返回第二个参数（sub 形式）与 Regex 相匹配的字符串列表。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">&#34;</span><span class="s2">6 or 12</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(/</span><span class="se">\d</span><span class="o">+</span><span class="p">/)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="s2">, </span><span class="p">&#34;);</span> <span class="c1"># 6, 12</span>
</code></pre></div><h2 id="str-类中的-comb">Str 类中的 comb</h2>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">multi</span> <span class="k">sub</span>    <span class="nb">comb</span><span class="p">(</span><span class="nb">Str:D</span>   <span class="nv">$matcher</span><span class="o">,</span> <span class="nb">Str:D</span> <span class="nv">$input</span><span class="o">,</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="no">Inf</span><span class="p">)</span>
<span class="k">multi</span> <span class="k">sub</span>    <span class="nb">comb</span><span class="p">(</span><span class="nb">Regex:D</span> <span class="nv">$matcher</span><span class="o">,</span> <span class="nb">Str:D</span> <span class="nv">$input</span><span class="o">,</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="no">Inf</span><span class="o">,</span> <span class="nb">Bool</span> <span class="o">:</span><span class="nv">$match</span><span class="p">)</span>
<span class="k">multi</span> <span class="k">sub</span>    <span class="nb">comb</span><span class="p">(</span><span class="nb">Int:D</span> <span class="nv">$size</span><span class="o">,</span> <span class="nb">Str:D</span> <span class="nv">$input</span><span class="o">,</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="no">Inf</span><span class="p">)</span>

<span class="k">multi</span> <span class="k">method</span> <span class="nb">comb</span><span class="p">(</span><span class="nb">Str:D</span> <span class="nv">$input:</span><span class="p">)</span>
<span class="k">multi</span> <span class="k">method</span> <span class="nb">comb</span><span class="p">(</span><span class="nb">Str:D</span> <span class="nv">$input:</span> <span class="nb">Str:D</span>   <span class="nv">$matcher</span><span class="o">,</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="no">Inf</span><span class="p">)</span>
<span class="k">multi</span> <span class="k">method</span> <span class="nb">comb</span><span class="p">(</span><span class="nb">Str:D</span> <span class="nv">$input:</span> <span class="nb">Regex:D</span> <span class="nv">$matcher</span><span class="o">,</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="no">Inf</span><span class="o">,</span> <span class="nb">Bool</span> <span class="o">:</span><span class="nv">$match</span><span class="p">)</span>
<span class="k">multi</span> <span class="k">method</span> <span class="nb">comb</span><span class="p">(</span><span class="nb">Str:D</span> <span class="nv">$input:</span> <span class="nb">Int:D</span> <span class="nv">$size</span><span class="o">,</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="no">Inf</span><span class="p">)</span>
</code></pre></div><p>在 <code>$input</code> 中搜索 <code>$matcher</code> 并返回所有匹配（默认是 Str，或者是 Match 对象，如果 <code>$match</code> 为真的话）的一个列表。<code>$limit</code> 表示至多返回 <code>$limit</code> 个匹配。</p>
<p>如果没有提供 <code>$matcher</code>(匹配器)， 那么会返回字符串中的所有字符的列表。等价于使用了 <code>$matcher = rx/./</code>。</p>
<p>例子：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">comb</span><span class="p">(/</span><span class="se">\w</span><span class="p">/</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">a;b;c</span><span class="p">&#34;)</span><span class="o">.</span><span class="nb">perl</span><span class="p">;</span>        <span class="c1"># (&#34;a&#34;, &#34;b&#34;, &#34;c&#34;).list</span>
<span class="nb">comb</span><span class="p">(/</span><span class="se">\N</span><span class="p">/</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">a;b;c</span><span class="p">&#34;)</span><span class="o">.</span><span class="nb">perl</span><span class="p">;</span>        <span class="c1"># (&#34;a&#34;, &#34;;&#34;, &#34;b&#34;, &#34;;&#34;, &#34;c&#34;).list</span>
<span class="nb">comb</span><span class="p">(/</span><span class="se">\w</span><span class="p">/</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">a;b;c</span><span class="p">&#34;</span><span class="o">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="nb">perl</span><span class="p">;</span>     <span class="c1"># (&#34;a&#34;, &#34;b&#34;).list</span>
<span class="nb">comb</span><span class="p">(/</span><span class="se">\w</span><span class="sr">\;</span><span class="se">\w</span><span class="p">/</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">a;b;c</span><span class="p">&#34;</span><span class="o">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="nb">perl</span><span class="p">;</span> <span class="c1"># (&#34;a;b&#34;,).list</span>

<span class="p">&#34;</span><span class="s2">123abc456def</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>           <span class="c1"># (123 abc 456 def)</span>
<span class="p">&#34;</span><span class="s2">123abc456def</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="p">);</span>        <span class="c1"># (123 abc)</span>
</code></pre></div><p>如果匹配器（matcher）是一个整数值，那么它被认为和 <code>/. ** matcher/</code> 类似，但是这个快了 30 倍。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/comb" term="comb" label="comb" />
                            
                        
                    
                
            
        </entry>
    
</feed>
