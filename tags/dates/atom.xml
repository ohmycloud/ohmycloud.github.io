<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.79.0">Hugo</generator><title type="html"><![CDATA[dates on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/dates/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/dates/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/dates/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/dates/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2020-12-27T22:46:58+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/dates/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Julia 中的日期和时间]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-04-dates-in-julia/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-04-pkg-in-julia/?utm_source=atom_feed" rel="related" type="text/html" title="Julia 中的 Pkg" />
                <link href="https://ohmyweekly.github.io/notes/2020-07-27-learning-julialang/?utm_source=atom_feed" rel="related" type="text/html" title="Julia 语言学习笔记" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-04-dates-in-julia/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-04T00:00:00+08:00</published>
            <updated>2020-08-04T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Dates in Julia</blockquote><h1 id="dates-模块的加载和使用">Dates 模块的加载和使用</h1>
<p>在 Julia 的 Pkg REPL 中, 输入 <code>add Dates</code> 添加 Dates 模块。回到 Julia 的 REPL 中, 输入:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; using Dates

julia&gt; DateTime<span class="o">(</span>2020<span class="o">)</span>
2020-01-01T00:00:00

julia&gt; typeof<span class="o">(</span>DateTime<span class="o">(</span>2020<span class="o">))</span>
DateTime

julia&gt; DateTime<span class="o">(</span>2020,8,1<span class="o">)</span>
2020-08-01T00:00:00

julia&gt; DateTime<span class="o">(</span>2020,8,1,12<span class="o">)</span>
2020-08-01T12:00:00

julia&gt; DateTime<span class="o">(</span>2020,8,1,12,30<span class="o">)</span>
2020-08-01T12:30:00

julia&gt; DateTime<span class="o">(</span>2020,8,1,12,30,59<span class="o">)</span>
2020-08-01T12:30:59

julia&gt; DateTime<span class="o">(</span>2020,8,1,12,30,59, 999<span class="o">)</span>
2020-08-01T12:30:59.999

julia&gt; Date<span class="o">(</span>2020, 8<span class="o">)</span>
2020-08-01

julia&gt; Date<span class="o">(</span>2020, 8, 1<span class="o">)</span>
2020-08-01

julia&gt; Date<span class="o">(</span>Dates.Year<span class="o">(</span>2020<span class="o">)</span>,Dates.Month<span class="o">(</span>8<span class="o">)</span>,Dates.Day<span class="o">(</span>1<span class="o">))</span>
2020-08-01

julia&gt; Date<span class="o">(</span>Dates.Month<span class="o">(</span>8<span class="o">)</span>,Dates.Year<span class="o">(</span>2020<span class="o">))</span>
2020-08-01
</code></pre></div><h1 id="date-和-datetime-的算术操作">Date 和 DateTime 的算术操作</h1>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="nv">dt</span> <span class="o">=</span> Date<span class="o">(</span>2012,2,29<span class="o">)</span>
2012-02-29

julia&gt; <span class="nv">dt2</span> <span class="o">=</span> Date<span class="o">(</span>2000,2,1<span class="o">)</span>
2000-02-01

julia&gt; dump<span class="o">(</span>dt<span class="o">)</span>
Date
  instant: Dates.UTInstant<span class="o">{</span>Day<span class="o">}</span>
    periods: Day
      value: Int64 <span class="m">734562</span>

julia&gt; dump<span class="o">(</span>dt2<span class="o">)</span>
Date
  instant: Dates.UTInstant<span class="o">{</span>Day<span class="o">}</span>
    periods: Day
      value: Int64 <span class="m">730151</span>

julia&gt; dt &gt; dt2
<span class="nb">true</span>

julia&gt; dt !<span class="o">=</span> dt2
<span class="nb">true</span>

julia&gt; dt + dt2
ERROR: MethodError: no method matching +<span class="o">(</span>::Date, ::Date<span class="o">)</span>
<span class="o">[</span>...<span class="o">]</span>

julia&gt; dt * dt2
ERROR: MethodError: no method matching *<span class="o">(</span>::Date, ::Date<span class="o">)</span>
<span class="o">[</span>...<span class="o">]</span>

julia&gt; dt / dt2
ERROR: MethodError: no method matching /<span class="o">(</span>::Date, ::Date<span class="o">)</span>

julia&gt; dt - dt2
<span class="m">4411</span> days

julia&gt; typeof<span class="o">(</span>dt - dt2<span class="o">)</span>
Day

julia&gt; dt2 - dt
-4411 days

julia&gt; <span class="nv">dt</span> <span class="o">=</span> DateTime<span class="o">(</span>2012,2,29<span class="o">)</span>
2012-02-29T00:00:00

julia&gt; <span class="nv">dt2</span> <span class="o">=</span> DateTime<span class="o">(</span>2000,2,1<span class="o">)</span>
2000-02-01T00:00:00

julia&gt; dt - dt2
<span class="m">381110400000</span> milliseconds

julia&gt; typeof<span class="o">(</span>dt - dt2<span class="o">)</span>
Millisecond
</code></pre></div><h1 id="访问器函数">访问器函数</h1>
<p>因为 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Date">Date</a> 和 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.DateTime">DateTime</a> 类型被存储为单个 <a href="https://docs.julialang.org/en/v1/base/numbers/#Core.Int64">Int64</a> 值，所以日期部分或字段可以通过访问器函数进行检索。小写访问器函数以整数形式返回字段。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="nv">t</span> <span class="o">=</span> Date<span class="o">(</span>2014, 1, 31<span class="o">)</span>
2014-01-31

julia&gt; Dates.year<span class="o">(</span>t<span class="o">)</span>
<span class="m">2014</span>

julia&gt; Dates.month<span class="o">(</span>t<span class="o">)</span>
<span class="m">1</span>

julia&gt; Dates.week<span class="o">(</span>t<span class="o">)</span>
<span class="m">5</span>

julia&gt; Dates.day<span class="o">(</span>t<span class="o">)</span>
<span class="m">31</span>
</code></pre></div><p>而专有形式返回相应 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Period">Period</a> 类型中的相同值。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; Dates.Year<span class="o">(</span>t<span class="o">)</span>
<span class="m">2014</span> years

julia&gt; Dates.Day<span class="o">(</span>t<span class="o">)</span>
<span class="m">31</span> days
</code></pre></div><p>Julia 还提供了复合方法，因为在同时需要多个字段的情况下，这些方法提供了一种效率衡量标准。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; Dates.yearmonth<span class="o">(</span>t<span class="o">)</span>
<span class="o">(</span>2014, 1<span class="o">)</span>

julia&gt; Dates.monthday<span class="o">(</span>t<span class="o">)</span>
<span class="o">(</span>1, 31<span class="o">)</span>

julia&gt; Dates.yearmonthday<span class="o">(</span>t<span class="o">)</span>
<span class="o">(</span>2014, 1, 31<span class="o">)</span>
</code></pre></div><p>也可以访问底层 <code>UTInstant</code> 或整数值。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; dump<span class="o">(</span>t<span class="o">)</span>
Date
  instant: Dates.UTInstant<span class="o">{</span>Day<span class="o">}</span>
    periods: Day
      value: Int64 <span class="m">735264</span>

julia&gt; t.instant
Dates.UTInstant<span class="o">{</span>Day<span class="o">}(</span>Day<span class="o">(</span>735264<span class="o">))</span>

julia&gt; Dates.value<span class="o">(</span>t<span class="o">)</span>
<span class="m">735264</span>
</code></pre></div><h1 id="查询函数">查询函数</h1>
<p>查询函数提供关于 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType">TimeType</a> 的历法信息。它们包括关于一周中的某一天的信息。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="nv">t</span> <span class="o">=</span> Date<span class="o">(</span>2014, 1, 31<span class="o">)</span>
2014-01-31

julia&gt; Dates.dayofweek<span class="o">(</span>t<span class="o">)</span>
<span class="m">5</span>

julia&gt; Dates.dayname<span class="o">(</span>t<span class="o">)</span>
<span class="s2">&#34;Friday&#34;</span>

julia&gt; Dates.dayofweekofmonth<span class="o">(</span>t<span class="o">)</span> <span class="c1"># 5th Friday of January</span>
<span class="m">5</span>

julia&gt; Dates.monthname<span class="o">(</span>t<span class="o">)</span>
<span class="s2">&#34;January&#34;</span>

julia&gt; Dates.daysinmonth<span class="o">(</span>t<span class="o">)</span>
<span class="m">31</span>
</code></pre></div><p>以及 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType">TimeType</a> 的年份和季度信息。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; Dates.isleapyear<span class="o">(</span>t<span class="o">)</span>
<span class="nb">false</span>

julia&gt; Dates.dayofyear<span class="o">(</span>t<span class="o">)</span>
<span class="m">31</span>

julia&gt; Dates.quarterofyear<span class="o">(</span>t<span class="o">)</span>
<span class="m">1</span>

julia&gt; Dates.dayofquarter<span class="o">(</span>t<span class="o">)</span>
<span class="m">31</span>
</code></pre></div><p><a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.dayname">dayname</a> 和 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.monthname">monthname</a> 方法也可以使用一个可选的 <code>locale</code> 关键字，它可以用来返回其他语言/地区的年份或月份的名称。这些函数也有返回缩写名称的版本，即 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.dayabbr">dayabbr</a> 和 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.monthabbr">monthabbr</a>。首先将映射加载到 <code>LOCALES</code> 变量中。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="nv">french_months</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;janvier&#34;</span>, <span class="s2">&#34;février&#34;</span>, <span class="s2">&#34;mars&#34;</span>, <span class="s2">&#34;avril&#34;</span>, <span class="s2">&#34;mai&#34;</span>, <span class="s2">&#34;juin&#34;</span>,
                        <span class="s2">&#34;juillet&#34;</span>, <span class="s2">&#34;août&#34;</span>, <span class="s2">&#34;septembre&#34;</span>, <span class="s2">&#34;octobre&#34;</span>, <span class="s2">&#34;novembre&#34;</span>, <span class="s2">&#34;décembre&#34;</span><span class="o">]</span><span class="p">;</span>

julia&gt; <span class="nv">french_monts_abbrev</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;janv&#34;</span>,<span class="s2">&#34;févr&#34;</span>,<span class="s2">&#34;mars&#34;</span>,<span class="s2">&#34;avril&#34;</span>,<span class="s2">&#34;mai&#34;</span>,<span class="s2">&#34;juin&#34;</span>,
                              <span class="s2">&#34;juil&#34;</span>,<span class="s2">&#34;août&#34;</span>,<span class="s2">&#34;sept&#34;</span>,<span class="s2">&#34;oct&#34;</span>,<span class="s2">&#34;nov&#34;</span>,<span class="s2">&#34;déc&#34;</span><span class="o">]</span><span class="p">;</span>

julia&gt; <span class="nv">french_days</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;lundi&#34;</span>,<span class="s2">&#34;mardi&#34;</span>,<span class="s2">&#34;mercredi&#34;</span>,<span class="s2">&#34;jeudi&#34;</span>,<span class="s2">&#34;vendredi&#34;</span>,<span class="s2">&#34;samedi&#34;</span>,<span class="s2">&#34;dimanche&#34;</span><span class="o">]</span><span class="p">;</span>

julia&gt; Dates.LOCALES<span class="o">[</span><span class="s2">&#34;french&#34;</span><span class="o">]</span> <span class="o">=</span> Dates.DateLocale<span class="o">(</span>french_months, french_monts_abbrev, french_days, <span class="o">[</span><span class="s2">&#34;&#34;</span><span class="o">])</span><span class="p">;</span>
</code></pre></div><p>然后可以利用上述函数进行查询。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; Dates.dayname<span class="o">(</span>t<span class="p">;</span><span class="nv">locale</span><span class="o">=</span><span class="s2">&#34;french&#34;</span><span class="o">)</span>
<span class="s2">&#34;vendredi&#34;</span>

julia&gt; Dates.monthname<span class="o">(</span>t<span class="p">;</span><span class="nv">locale</span><span class="o">=</span><span class="s2">&#34;french&#34;</span><span class="o">)</span>
<span class="s2">&#34;janvier&#34;</span>

julia&gt; Dates.monthabbr<span class="o">(</span>t<span class="p">;</span><span class="nv">locale</span><span class="o">=</span><span class="s2">&#34;french&#34;</span><span class="o">)</span>
<span class="s2">&#34;janv&#34;</span>
</code></pre></div><p>由于没有加载日期的缩写版本，试图使用函数 <code>dayabbr</code> 会出错。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; Dates.dayabbr<span class="o">(</span>t<span class="p">;</span><span class="nv">locale</span><span class="o">=</span><span class="s2">&#34;french&#34;</span><span class="o">)</span>
ERROR: BoundsError: attempt to access 1-element Array<span class="o">{</span>String,1<span class="o">}</span> at index <span class="o">[</span>5<span class="o">]</span>
Stacktrace:
<span class="o">[</span>...<span class="o">]</span>
</code></pre></div><h1 id="时间类型-周期算术">时间类型-周期算术</h1>
<p>在使用任何语言/日期框架时，熟悉如何处理日期-周期算术是一个很好的做法，因为有一些<a href="https://codeblog.jonskeet.uk/2010/12/01/the-joys-of-date-time-arithmetic/">棘手的问题</a>需要处理（尽管对于日-精度类型来说要少得多）。</p>
<p><code>Dates</code> 模块的方法试图遵循简单的原则，即在做 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Period">Period</a> 算术时尽量少改。这种方法也常被称为历法算术，或者说如果有人在对话中问你同样的计算方法，你可能会猜到。为什么要大惊小怪呢？我们举个经典的例子：把2014年1月31日加1个月。答案是什么？Javascript 会说<a href="https://markhneedham.com/blog/2009/01/07/javascript-add-a-month-to-a-date/">3月3日</a>（假设31天）。PHP 会说<a href="https://stackoverflow.com/questions/5760262/php-adding-months-to-a-date-while-not-exceeding-the-last-day-of-the-month">3月2日</a>（假设30天）。事实上，没有正确的答案。在 <code>Dates</code> 模块中，它给出的结果是2月28日。它是如何计算出来的呢？我喜欢想到赌场里经典的 7-7-7 赌博游戏。</p>
<p>现在只要想象一下，老虎机不是 7-7-7，而是年-月-日，或者在我们的例子中，2014-01-31。当你要求在这个日期的基础上增加1个月的时候，月份槽就会递增，所以现在我们有 2014-02-31。然后检查日号是否大于新月份的最后有效日，如果大于（如上例），则日号向下调整到最后有效日（28）。这种方法的后果是什么呢？继续在我们的日期上再加一个月，<code>2014-02-28 + Month(1) == 2014-03-28</code>。什么？你是在期待3月的最后一天吗？不对，对不起，记得 7-7-7 的档期。尽可能少的槽位要改变，所以我们先把月份槽位递增1，2014-03-28，轰，我们就完成了，因为这是一个有效的日期。另一方面，如果我们要在原来的日期 2014-01-31 的基础上增加2个月，那么我们最终的结果是 2014-03-31，正如预期的那样。这种方法的另一个后果是，当强行进行特定的排序时，关联性会有所损失（即以不同的顺序添加东西会导致不同的结果）。比如说：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="o">(</span>Date<span class="o">(</span>2014,1,29<span class="o">)</span>+Dates.Day<span class="o">(</span>1<span class="o">))</span> + Dates.Month<span class="o">(</span>1<span class="o">)</span>
2014-02-28

julia&gt; <span class="o">(</span>Date<span class="o">(</span>2014,1,29<span class="o">)</span>+Dates.Month<span class="o">(</span>1<span class="o">))</span> + Dates.Day<span class="o">(</span>1<span class="o">)</span>
2014-03-01
</code></pre></div><p>那是怎么回事呢？在第一行中，我们在1月29日的基础上加1天，结果是 2014-01-30；然后再加1个月，于是得到 2014-02-30，再往下调整为 2014-02-28。在第二个例子中，我们先加1个月，我们得到 2014-02-29，再往下调整为 2014-02-28，然后再加1天，结果是 2014-03-01。在这种情况下，有一个设计原则是有帮助的，那就是在存在多个 Periods 的情况下，操作将按照 Periods 的类型来排序，而不是按照它们的值或位置顺序来排序；这意味着总是先加 <code>Year</code>，然后加 <code>Month</code>，再加 <code>Week</code> 等。因此，以下确实会导致关联性并正好有用:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; Date<span class="o">(</span>2014,1,29<span class="o">)</span> + Dates.Day<span class="o">(</span>1<span class="o">)</span> + Dates.Month<span class="o">(</span>1<span class="o">)</span>
2014-03-01

julia&gt; Date<span class="o">(</span>2014,1,29<span class="o">)</span> + Dates.Month<span class="o">(</span>1<span class="o">)</span> + Dates.Day<span class="o">(</span>1<span class="o">)</span>
2014-03-01
</code></pre></div><p>棘手吗？也许吧。一个无辜的 <code>Dates</code> 用户该怎么做？最重要的是要注意，当处理月份时，明确地强制执行某种关联性，可能会导致一些意想不到的结果，但除此之外，一切都应该按照预期工作。值得庆幸的是，在 UT 中处理时间时，日期-周期算术中的奇特情况几乎就是这样了（避免了处理夏令时、闰秒等的 &ldquo;乐趣&rdquo;）。</p>
<p>作为奖励，所有的周期算术对象都可以直接与范围一起工作。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="nv">dr</span> <span class="o">=</span> Date<span class="o">(</span>2014,1,29<span class="o">)</span>:Day<span class="o">(</span>1<span class="o">)</span>:Date<span class="o">(</span>2014,2,3<span class="o">)</span>
Date<span class="o">(</span><span class="s2">&#34;2014-01-29&#34;</span><span class="o">)</span>:Day<span class="o">(</span>1<span class="o">)</span>:Date<span class="o">(</span><span class="s2">&#34;2014-02-03&#34;</span><span class="o">)</span>

julia&gt; collect<span class="o">(</span>dr<span class="o">)</span>
6-element Array<span class="o">{</span>Date,1<span class="o">}</span>:
 2014-01-29
 2014-01-30
 2014-01-31
 2014-02-01
 2014-02-02
 2014-02-03

julia&gt; <span class="nv">dr</span> <span class="o">=</span> Date<span class="o">(</span>2014,1,29<span class="o">)</span>:Dates.Month<span class="o">(</span>1<span class="o">)</span>:Date<span class="o">(</span>2014,07,29<span class="o">)</span>
Date<span class="o">(</span><span class="s2">&#34;2014-01-29&#34;</span><span class="o">)</span>:Month<span class="o">(</span>1<span class="o">)</span>:Date<span class="o">(</span><span class="s2">&#34;2014-07-29&#34;</span><span class="o">)</span>

julia&gt; collect<span class="o">(</span>dr<span class="o">)</span>
7-element Array<span class="o">{</span>Date,1<span class="o">}</span>:
 2014-01-29
 2014-02-28
 2014-03-29
 2014-04-29
 2014-05-29
 2014-06-29
 2014-07-29
</code></pre></div><pre><code>for i in Date(&quot;2020-08-01&quot;):Day(1):Date(&quot;2020-08-09&quot;)
           println(i)
end

2020-08-01
2020-08-02
2020-08-03
2020-08-04
2020-08-05
2020-08-06
2020-08-07
2020-08-08
2020-08-09
</code></pre><h1 id="调整器函数">调整器函数</h1>
<p>尽管日期-周期算术很方便，但经常需要在日期上进行的计算具有日历或时间的性质，而不是固定的周期数。节日就是一个很好的例子，大多数都遵循这样的规则：&ldquo;纪念日 = 五月的最后一个星期一&rdquo;，或者 &ldquo;感恩节 = 十一月的第四个星期四&rdquo;。这类时间表达式处理的是相对于日历的规则，比如本月的第一天或最后一天，下周二，或第一个和第三个星期三等。</p>
<p><code>Dates</code> 模块通过几个方便的方法提供了调整器 API，这些方法有助于简单、简洁地表达时间规则。第一组调整器方法处理周、月、季度和年的首尾。它们每个方法都接收一个单一的 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType">TimeType</a> 作为输入，并返回或调整到相对于输入的所需时期的第一个或最后一个。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; Dates.firstdayofweek<span class="o">(</span>Date<span class="o">(</span>2014,7,16<span class="o">))</span> <span class="c1"># Adjusts the input to the Monday of the input&#39;s week</span>
2014-07-14

julia&gt; Dates.lastdayofmonth<span class="o">(</span>Date<span class="o">(</span>2014,7,16<span class="o">))</span> <span class="c1"># Adjusts to the last day of the input&#39;s month</span>
2014-07-31

julia&gt; Dates.lastdayofquarter<span class="o">(</span>Date<span class="o">(</span>2014,7,16<span class="o">))</span> <span class="c1"># Adjusts to the last day of the input&#39;s quarter</span>
2014-09-30
</code></pre></div><p>接下来的两个高阶方法 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.tonext-Tuple%7BTimeType,Int64%7D">tonext</a> 和 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.toprev-Tuple%7BTimeType,Int64%7D">toprev</a>，通过将一个 <code>DateFunction</code> 和一个起始 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType">TimeType</a> 作为第一个参数来概括处理时间表达式。<code>DateFunction</code> 只是一个函数，通常是匿名的，它接受一个单一的 <a href="https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType">TimeType</a> 作为输入，并返回一个 <a href="https://docs.julialang.org/en/v1/base/numbers/#Core.Bool">Bool</a>，<code>true</code> 表示满足调整标准。例如:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="nv">istuesday</span> <span class="o">=</span> x-&gt;Dates.dayofweek<span class="o">(</span>x<span class="o">)</span> <span class="o">==</span> Dates.Tuesday<span class="p">;</span> <span class="c1"># Returns true if the day of the week of x is Tuesday</span>

julia&gt; Dates.tonext<span class="o">(</span>istuesday, Date<span class="o">(</span>2014,7,13<span class="o">))</span> <span class="c1"># 2014-07-13 is a Sunday</span>
2014-07-15

julia&gt; Dates.tonext<span class="o">(</span>Date<span class="o">(</span>2014,7,13<span class="o">)</span>, Dates.Tuesday<span class="o">)</span> <span class="c1"># Convenience method provided for day of the week adjustments</span>
2014-07-15
</code></pre></div><p>这对于更复杂的时间表达式的 do-block 语法是很有用的。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; Dates.tonext<span class="o">(</span>Date<span class="o">(</span>2014,7,13<span class="o">))</span> <span class="k">do</span> x
           <span class="c1"># Return true on the 4th Thursday of November (Thanksgiving)</span>
           Dates.dayofweek<span class="o">(</span>x<span class="o">)</span> <span class="o">==</span> Dates.Thursday <span class="o">&amp;&amp;</span>
           Dates.dayofweekofmonth<span class="o">(</span>x<span class="o">)</span> <span class="o">==</span> <span class="m">4</span> <span class="o">&amp;&amp;</span>
           Dates.month<span class="o">(</span>x<span class="o">)</span> <span class="o">==</span> Dates.November
       end
2014-11-27
</code></pre></div><p><a href="https://docs.julialang.org/en/v1/base/collections/#Base.filter">Base.filter</a> 方法可以用来获取指定范围内的所有有效日期/时刻。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 匹兹堡街道清洁; 从 4月到11月的每第二个周二</span>
<span class="c1"># 日期范围从 2014-01-01 到 2015-01-01</span>
julia&gt; <span class="nv">dr</span> <span class="o">=</span> Dates.Date<span class="o">(</span>2014<span class="o">)</span>:Day<span class="o">(</span>1<span class="o">)</span>:Dates.Date<span class="o">(</span>2015<span class="o">)</span><span class="p">;</span>

julia&gt; filter<span class="o">(</span>dr<span class="o">)</span> <span class="k">do</span> x
           Dates.dayofweek<span class="o">(</span>x<span class="o">)</span> <span class="o">==</span> Dates.Tue <span class="o">&amp;&amp;</span>
           Dates.April &lt;<span class="o">=</span> Dates.month<span class="o">(</span>x<span class="o">)</span> &lt;<span class="o">=</span> Dates.Nov <span class="o">&amp;&amp;</span>
           Dates.dayofweekofmonth<span class="o">(</span>x<span class="o">)</span> <span class="o">==</span> <span class="m">2</span>
       end
8-element Array<span class="o">{</span>Date,1<span class="o">}</span>:
 2014-04-08
 2014-05-13
 2014-06-10
 2014-07-08
 2014-08-12
 2014-09-09
 2014-10-14
 2014-11-11
</code></pre></div><p>在 Raku 中上面的代码可以写成:</p>
<pre><code class="language-raku" data-lang="raku">lazy my @dates = Date.new('2014-01-01') ... Date.new('2015-01-01');

.say for @dates.grep: -&gt; $d {
    $d.day-of-week == 2 &amp;&amp;
    4  &lt;= $d.month &lt;= 11 &amp;&amp;
    $d.weekday-of-month == 2
}
</code></pre><p>其他的例子和测试可以在 <a href="https://github.com/JuliaLang/julia/blob/master/stdlib/Dates/test/adjusters.jl">stdlib/Dates/test/adjusters.jl</a> 中找到。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/programming" term="programming" label="programming" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/julia" term="julia" label="julia" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/dates" term="dates" label="dates" />
                            
                        
                    
                
            
        </entry>
    
</feed>
