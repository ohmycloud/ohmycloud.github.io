<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[rule on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/rule/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/rule/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/rule/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/rule/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-12T22:13:55+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/rule/</id>
    
        
        <entry>
            <title type="html"><![CDATA[token 和 rule 的区别]]></title>
            <link href="https://ohmyweekly.github.io/notes/2016-03-11-difference-between-rules-and-tokens/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2016-03-11-difference-between-rules-and-tokens/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-12T00:00:00+08:00</published>
            <updated>2021-07-12T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Difference Between Rules and Tokens</blockquote><p>在 grammar 中, 有两个 <strong>regex</strong> 的变体, <strong>rule</strong> 和 <strong>token</strong>。<strong>rule</strong> 默认不会回溯。<strong>rule</strong> 与 <strong>token</strong> 的一个重要区别就是, <code>rule</code> 这样的正则采取了 <code>:sigspace</code> 修饰符。 <code>rule</code> 实际上是</p>
<pre><code>regex :ratchet :sigspace { ... }
</code></pre><p>的简写。ratchet 这个单词的意思是: (防倒转的)棘齿, 意思它是不能回溯的! 而 <code>:sigspace</code> 表明正则中的空白是有意义的, 而 <strong>token</strong> 实际上是</p>
<pre><code>regex :ratchet { ... }
</code></pre><p>的简写。所以在 <strong>token</strong> 中, 若不是显式地写上 <code>\s</code>、<code>\h</code>、<code>\n</code> 等空白符号, 其它情况下就好像空白隐身了一样, 虽然你写了, 但是编译器却视而不见。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">grammar</span> <span class="nc">Token::Rule::Difference</span> <span class="p">{</span>
    <span class="c1"># 下面三者等价</span>
    <span class="c1"># rule TOP { [\w+]+ % &#39; &#39; | [\d+]+ % &#39; &#39;   }  等价于</span>
    <span class="c1"># rule TOP { | [\w+]+ % &#39; &#39; | [\d+]+ % &#39; &#39; }  等价于</span>
    <span class="k">rule</span> <span class="nf">TOP</span> <span class="p">{</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">[</span><span class="se">\w</span><span class="o">+</span><span class="p">]</span><span class="o">+</span><span class="sr"> </span><span class="nv">%</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1"> </span><span class="p">&#39;</span><span class="sr">
</span><span class="sr">               </span><span class="o">|</span><span class="sr"> </span><span class="p">[</span><span class="se">\d</span><span class="o">+</span><span class="p">]</span><span class="o">+</span><span class="sr"> </span><span class="nv">%</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1"> </span><span class="p">&#39;</span><span class="sr">
</span><span class="sr">             </span><span class="p">}</span>
<span class="p">}</span>

<span class="c1"># $=finish.lines 中的每一行末尾都没有换行符</span>
<span class="k">for</span> <span class="nv">$=finish</span><span class="o">.</span><span class="nb">lines</span> <span class="k">-&gt;</span> <span class="nv">$line</span> <span class="p">{</span>
    <span class="nb">print</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
    <span class="nb">say</span> <span class="n">Token::Rule::Difference</span><span class="o">.</span><span class="nb">parse</span><span class="p">(</span><span class="nv">$line</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">=finish</span><span class="sd">
</span><span class="sd">token takes whitespace invisible unless with sigspace
</span><span class="sd">rule is a token without sigspace
</span><span class="sd">2015 12 25
</span><span class="sd">2016 01 07
</span></code></pre></div><p>说明在 <strong>rule</strong> 中, <code>|</code> 左右两边的空格会被忽略, 这通常是为了使格式对齐, 看起来不乱。另外 <strong>rule</strong> 中, 开头和末尾的空白也会被忽略。</p>
<p>如果每一行都带有换行符呢？</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">use</span> <span class="nn">Grammar::Debugger</span><span class="p">;</span>
<span class="k">grammar</span> <span class="nc">Token::Rule::Difference</span> <span class="p">{</span>

    <span class="c1"># token TOP { ^ [&lt;line&gt;\n]+ $ }</span>
    <span class="c1"># token line {</span>
    <span class="c1">#     | [\w+]+ % &#39; &#39;</span>
    <span class="c1">#     | [\d+]+ % &#39; &#39;</span>
    <span class="c1"># }</span>

    <span class="c1"># 等价于</span>

    <span class="k">rule</span> <span class="nf">TOP</span> <span class="p">{</span><span class="sr"> </span><span class="ni">^</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">wrap</span><span class="p">&gt;</span><span class="o">+</span><span class="sr"> </span><span class="ni">$</span><span class="p">}</span>
    <span class="k">token</span> <span class="nf">wrap</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">line</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
    <span class="k">rule</span> <span class="nf">line</span> <span class="p">{</span><span class="sr">
</span><span class="sr">         </span><span class="p">[</span><span class="se">\w</span><span class="o">+</span><span class="p">]</span><span class="o">+</span><span class="sr"> </span><span class="nv">%</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1"> </span><span class="p">&#39;</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">[</span><span class="se">\d</span><span class="o">+</span><span class="p">]</span><span class="o">+</span><span class="sr"> </span><span class="nv">%</span><span class="sr"> </span><span class="p">&lt;[</span><span class="sr">-</span><span class="se">\s</span><span class="sr">:</span><span class="p">]&gt;</span><span class="sr">
</span><span class="sr">    </span><span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$str</span> <span class="o">=</span> <span class="k">q</span><span class="sa">:to</span><span class="p">/EOF/;</span><span class="s">
</span><span class="s">token takes whitespace invisible unless with sigspace
</span><span class="s">rule is a token without sigspace
</span><span class="s">2015-12-25 12:23
</span><span class="s">2016-01-07 13:45
</span><span class="s"></span><span class="p">EOF</span>

<span class="k">my</span> <span class="nv">$parse</span> <span class="o">=</span> <span class="n">Token::Rule::Difference</span><span class="o">.</span><span class="nb">parse</span><span class="p">(</span><span class="nv">$str</span><span class="p">);</span>
<span class="nb">say</span> <span class="nv">$parse</span><span class="p">;</span>
</code></pre></div><h2 id="token-vs-rule">token vs. rule</h2>
<blockquote>
<p>When we use rule in place of token, any whitespace after anatom is turned into a non-capturing call to ws</p>
</blockquote>
<p>这句话是说, 在 <strong>rule</strong> 中, 任何跟在原子(atom)后面的空白会变成非捕获的 <code>ws</code> 调用, 即 <code>&lt;.ws&gt;</code>,</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">rule</span> <span class="nf">entry</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">key</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">value</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</code></pre></div><p>等价于:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">token</span> <span class="nf">entry</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">key</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="o">.</span><span class="ow">ws</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="o">.</span><span class="ow">ws</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">value</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="o">.</span><span class="ow">ws</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span> <span class="c1"># . 抑制了捕获</span>
</code></pre></div><p>在 grammar 中, 我们继承了默认的 <code>ws</code>, 但是我们也可以提供自己的 <strong>ws</strong>:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">token</span> <span class="nf">ws</span> <span class="p">{</span><span class="sr"> </span><span class="se">\h</span><span class="o">*</span><span class="sr"> </span><span class="p">}</span> <span class="c1"># 匹配水平空白, 不包括换行</span>
</code></pre></div><p>rule 中空白的使用:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$str</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Swift          is hard    to  learn</span><span class="p">&#34;;</span>
<span class="k">my</span> <span class="k">token</span> <span class="nf">word</span> <span class="p">{</span><span class="sr"> </span><span class="se">\w</span><span class="o">+</span><span class="sr"> </span><span class="p">}</span>
<span class="k">my</span> <span class="k">rule</span>  <span class="nf">line</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">word</span><span class="p">&gt;</span><span class="o">+</span><span class="sr"> </span><span class="nv">%</span><span class="sr"> </span><span class="p">[&#39;</span><span class="s1">,</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">]</span><span class="sr"> }
</span><span class="sr"></span><span class="nv">$str</span><span class="sr"> </span><span class="o">~~</span><span class="sr"> m</span><span class="p">:</span><span class="na">g</span><span class="p">/</span> <span class="p">&lt;</span><span class="s">line</span><span class="p">&gt;</span> <span class="o">/</span><span class="p">;</span>
</code></pre></div><p>逗号附近的方括号保证了 <code>&lt;.ws&gt;</code> 调用产生的空白作为分割符的一部分。这利用了 <code>&lt;.ws&gt;</code> 的一个特点：</p>
<p>在两个 <code>\w</code> 之间解释为 <code>\s+</code>, 其它地方解释为 <code>\s*</code>。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/token" term="token" label="token" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rule" term="rule" label="rule" />
                            
                        
                    
                
            
        </entry>
    
</feed>
