<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[subscript on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/subscript/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/subscript/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/subscript/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/subscript/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-13T22:14:20+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/subscript/</id>
    
        
        <entry>
            <title type="html"><![CDATA[下标副词]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-05-18-subscripts-adverbs/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2015-08-18-add-subscripts-for-custom-class-in-raku/?utm_source=atom_feed" rel="related" type="text/html" title="在 Raku 中为自定义的类添加下标" />
            
                <id>https://ohmyweekly.github.io/notes/2015-05-18-subscripts-adverbs/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Subscripts Adverbs</blockquote><h1 id="下标副词httpsdesginrakuorgs02htmlsubscript_adverbs"><a href="https://desgin.raku.org/S02.html#Subscript_adverbs">下标副词</a></h1>
<p>为了使切片下标返回除了值以外的其它东西，那么给下标(subscript)添加合适的副词。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nv">@array</span> <span class="o">=</span> <span class="p">&lt;</span><span class="s">A B</span><span class="p">&gt;;</span>
<span class="nv">@array</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">]</span><span class="p">;</span>      <span class="c1"># returns &#39;A&#39;, &#39;B&#39;, (Any)</span>
<span class="nv">@array</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">]</span> <span class="p">:</span><span class="s">p</span><span class="p">;</span>   <span class="c1"># returns 0 =&gt; &#39;A&#39;, 1 =&gt; &#39;B&#39;</span>
<span class="nv">@array</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">]</span> <span class="p">:</span><span class="s">kv</span><span class="p">;</span>  <span class="c1"># returns 0, &#39;A&#39;, 1, &#39;B&#39;</span>
<span class="nv">@array</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">]</span> <span class="p">:</span><span class="s">k</span><span class="p">;</span>   <span class="c1"># returns 0, 1</span>
<span class="nv">@array</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">]</span> <span class="p">:</span><span class="s">v</span><span class="p">;</span>   <span class="c1"># returns &#39;A&#39;, &#39;B&#39;</span>

<span class="nv">%hash</span> <span class="o">=</span> <span class="p">(:</span><span class="s">a</span><span class="p">&lt;</span><span class="s">A</span><span class="p">&gt;</span><span class="o">,</span> <span class="p">:</span><span class="s">b</span><span class="p">&lt;</span><span class="s">B</span><span class="p">&gt;);</span>
<span class="nv">%hash</span><span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;;</span>       <span class="c1"># returns &#39;A&#39;, &#39;B&#39;, (Any)</span>
<span class="nv">%hash</span><span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span> <span class="p">:</span><span class="s">p</span><span class="p">;</span>    <span class="c1"># returns a =&gt; &#39;A&#39;, b =&gt; &#39;B&#39;</span>
<span class="nv">%hash</span><span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span> <span class="p">:</span><span class="s">kv</span><span class="p">;</span>   <span class="c1"># returns &#39;a&#39;, &#39;A&#39;, &#39;b&#39;, &#39;B&#39;</span>
<span class="nv">%hash</span><span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span> <span class="p">:</span><span class="s">k</span><span class="p">;</span>    <span class="c1"># returns &#39;a&#39;, &#39;b&#39;</span>
<span class="nv">%hash</span><span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span> <span class="p">:</span><span class="s">v</span><span class="p">;</span>    <span class="c1"># returns &#39;A&#39;, &#39;B&#39;</span>
</code></pre></div><p>如果副词为真，那么这些副词形式都会清除不存在的条目；如果为假的话，就会留下不存在的项，就像普通的切片那样。所以：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nv">@array</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">]</span> <span class="p">:!</span><span class="s">p</span><span class="p">;</span>  <span class="c1"># returns 0 =&gt; &#39;A&#39;, 1 =&gt; &#39;B&#39;, 2 =&gt; (Any)</span>
<span class="nv">%hash</span><span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span>  <span class="p">:!</span><span class="s">kv</span><span class="p">;</span> <span class="c1"># returns &#39;a&#39;, &#39;A&#39;, &#39;b&#39;, &#39;B&#39;, &#39;c&#39;, (Any)</span>
</code></pre></div><p>同样地，</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="p">(</span><span class="nv">$a</span><span class="o">,</span><span class="nv">$b</span><span class="o">,</span><span class="nv">$c</span><span class="p">)</span> <span class="o">=</span> <span class="nv">%hash</span><span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span> <span class="p">:</span><span class="s">delete</span><span class="p">;</span>
</code></pre></div><p>删除那些条目并顺道返回它们。这种形式能够工作是因为下标是顶端的在前的操作符。如果某些其它的操作符的优先级比处于顶端的逗号操作符的优先级紧凑，那么你必须用括号括起它或强制为列表上下文：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="nv">%hash</span><span class="p">{</span><span class="nv">$x</span><span class="p">}</span> <span class="p">:</span><span class="s">delete</span><span class="p">);</span>
<span class="nv">$x</span> <span class="o">=</span> <span class="p">(</span><span class="nv">%hash</span><span class="p">{</span><span class="nv">$x</span><span class="p">}</span> <span class="p">:</span><span class="s">delete</span><span class="p">);</span>
<span class="p">(</span><span class="nv">$x</span><span class="p">)</span> <span class="o">=</span> <span class="nv">%hash</span><span class="p">{</span><span class="nv">$x</span><span class="p">}</span> <span class="p">:</span><span class="s">delete</span><span class="p">;</span>
</code></pre></div><p>只有在副词为真的时候元素才会被删除。而 <code>:!delete</code> 本质上是一个空操作；你可以基于传递的诸如 <code>:delete($kill'em)</code> 标记顺带有条件地删除条目。在任何一种情况下，被删除的值会被返回。</p>
<p>你也可以执行存在性测试，要么测试单个条目是否存在，要么测试条目的连接是否存在：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">if</span> <span class="nv">%hash</span><span class="p">&lt;</span><span class="s">foo</span><span class="p">&gt;</span> <span class="p">:</span><span class="s">exists</span>           <span class="p">{</span><span class="o">...</span><span class="p">}</span>
<span class="k">if</span> <span class="nv">%hash</span><span class="p">{</span><span class="nb">any</span> <span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;}</span>  <span class="p">:</span><span class="s">exists</span>  <span class="p">{</span><span class="o">...</span><span class="p">}</span>
<span class="k">if</span> <span class="nv">%hash</span><span class="p">{</span><span class="nb">all</span> <span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;}</span>  <span class="p">:</span><span class="s">exists</span>  <span class="p">{</span><span class="o">...</span><span class="p">}</span>
<span class="k">if</span> <span class="nv">%hash</span><span class="p">{</span><span class="nb">one</span> <span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;}</span>  <span class="p">:</span><span class="s">exists</span>  <span class="p">{</span><span class="o">...</span><span class="p">}</span>
<span class="k">if</span> <span class="nv">%hash</span><span class="p">{</span><span class="nb">none</span> <span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;}</span> <span class="p">:</span><span class="s">exists</span>  <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</code></pre></div><p>把 <code>:exists</code> 副词和一组切片结果的布尔值列表结合起来使用，你也可以用类型的语义这样使用：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">if</span> <span class="nb">any</span> <span class="nv">%hash</span><span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span>  <span class="p">:</span><span class="s">exists</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
<span class="k">if</span> <span class="nb">all</span> <span class="nv">%hash</span><span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span>  <span class="p">:</span><span class="s">exists</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
<span class="k">if</span> <span class="nb">one</span> <span class="nv">%hash</span><span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span>  <span class="p">:</span><span class="s">exists</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
<span class="k">if</span> <span class="nb">none</span> <span class="nv">%hash</span><span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span> <span class="p">:</span><span class="s">exists</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</code></pre></div><p>你可以使用 <code>:!exists</code> 来测试不存在。这特别便捷因为优先级规则让 <code>!%hash&lt;a&gt; :exists</code> 把 <code>:exists</code> 应用到前缀 <code>!</code> 上。 <code>%hash&lt;a&gt; :!exists</code> 没有那个问题。</p>
<h2 id="组合下标副词">组合下标副词</h2>
<p>像调用中得具名参数那样，下标中处理多个副词是没有顺序之分的。有些组合有意义，例如：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nv">%a</span> <span class="o">=</span> <span class="nv">%b</span><span class="p">{</span><span class="nv">@keys-to-extract</span><span class="p">}</span> <span class="p">:</span><span class="s">delete</span> <span class="p">:</span><span class="s">p</span><span class="p">;</span> <span class="c1"># same as :p :delete</span>
</code></pre></div><p>会把给定的键分片到另外一个散列中。而</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nv">@actually-deleted</span> <span class="o">=</span> <span class="nv">%h</span><span class="p">{</span><span class="nv">@keys-to-extract</span><span class="p">}</span> <span class="p">:</span><span class="s">delete</span> <span class="p">:</span><span class="s">k</span><span class="p">;</span> <span class="c1"># same as :k :delete</span>
</code></pre></div><p>会返回真正从散列中删除的键。</p>
<p>只指定返回类型的副词，不能被组合，因为诸如 <code>:kv :p</code>、或 <code>:v :k</code> 就没有意义。</p>
<p>下面的这些副词组合被看做是合法的：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">:</span><span class="s">delete</span> <span class="p">:</span><span class="s">kv</span>            <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">key</span><span class="o">/</span><span class="nb">values</span> <span class="k">of</span> <span class="nc">actually</span> <span class="n">deleted</span> <span class="nb">keys</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:!</span><span class="s">kv</span>           <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">key</span><span class="o">/</span><span class="nb">values</span> <span class="k">of</span> <span class="nb">all</span> <span class="nb">keys</span> <span class="n">attempted</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:</span><span class="s">p</span>             <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">pairs</span> <span class="k">of</span> <span class="nc">actually</span> <span class="n">deleted</span> <span class="nb">keys</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:!</span><span class="s">p</span>            <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">pairs</span> <span class="k">of</span> <span class="nb">all</span> <span class="nb">keys</span> <span class="n">attempted</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:</span><span class="s">k</span>             <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="n">actually</span> <span class="n">deleted</span> <span class="nb">keys</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:!</span><span class="s">k</span>            <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">all</span> <span class="nb">keys</span> <span class="n">attempted</span> <span class="nb">to</span> <span class="nb">delete</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:</span><span class="s">v</span>             <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">values</span> <span class="k">of</span> <span class="nc">actually</span> <span class="n">deleted</span> <span class="nb">keys</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:!</span><span class="s">v</span>            <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">values</span> <span class="k">of</span> <span class="nb">all</span> <span class="nb">keys</span> <span class="n">attempted</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:</span><span class="s">exists</span>        <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="n">Bools</span> <span class="n">indicating</span> <span class="nb">keys</span> <span class="n">existed</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:!</span><span class="s">exists</span>       <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="n">Bools</span> <span class="n">indicating</span> <span class="nb">keys</span> <span class="n">did</span> <span class="nb">not</span> <span class="n">exist</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:</span><span class="s">exists</span> <span class="p">:</span><span class="s">kv</span>    <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">list</span> <span class="k">with</span> <span class="nb">key</span><span class="o">,</span><span class="nb">True</span> <span class="k">for</span> <span class="nb">key</span> <span class="n">existed</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:!</span><span class="s">exists</span> <span class="p">:</span><span class="s">kv</span>   <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">list</span> <span class="k">with</span> <span class="nb">key</span><span class="o">,</span><span class="nb">False</span> <span class="k">for</span> <span class="nb">key</span> <span class="n">existed</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:</span><span class="s">exists</span> <span class="p">:!</span><span class="s">kv</span>   <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">list</span> <span class="k">with</span> <span class="nb">key</span><span class="o">,</span><span class="nb">Bool</span> <span class="n">whether</span> <span class="nb">key</span> <span class="n">existed</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:!</span><span class="s">exists</span> <span class="p">:!</span><span class="s">kv</span>  <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">list</span> <span class="k">with</span> <span class="nb">key</span><span class="o">,!</span><span class="nb">Bool</span> <span class="n">whether</span> <span class="nb">key</span> <span class="n">existed</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:</span><span class="s">exists</span> <span class="p">:</span><span class="s">p</span>     <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">pairs</span> <span class="k">with</span> <span class="nb">key</span><span class="o">/</span><span class="nb">True</span> <span class="k">for</span> <span class="nb">key</span> <span class="n">existed</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:!</span><span class="s">exists</span> <span class="p">:</span><span class="s">p</span>    <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">pairs</span> <span class="k">with</span> <span class="nb">key</span><span class="o">/</span><span class="nb">False</span> <span class="k">for</span> <span class="nb">key</span> <span class="n">existed</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:</span><span class="s">exists</span> <span class="p">:!</span><span class="s">p</span>    <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">pairs</span> <span class="k">with</span> <span class="nb">key</span><span class="o">/</span><span class="nb">Bool</span> <span class="n">whether</span> <span class="nb">key</span> <span class="n">existed</span>
<span class="p">:</span><span class="s">delete</span> <span class="p">:!</span><span class="s">exists</span> <span class="p">:!</span><span class="s">p</span>   <span class="nb">delete</span><span class="o">,</span> <span class="k">return</span> <span class="nb">pairs</span> <span class="k">with</span> <span class="nb">key</span><span class="o">/!</span><span class="nb">Bool</span> <span class="n">whether</span> <span class="nb">key</span> <span class="n">existed</span>
<span class="p">:</span><span class="s">exists</span> <span class="p">:</span><span class="s">kv</span>            <span class="k">return</span> <span class="nb">pairs</span> <span class="k">with</span> <span class="nb">key</span><span class="o">,</span><span class="nb">True</span> <span class="k">for</span> <span class="nb">key</span> <span class="n">exists</span>
<span class="p">:!</span><span class="s">exists</span> <span class="p">:</span><span class="s">kv</span>           <span class="k">return</span> <span class="nb">pairs</span> <span class="k">with</span> <span class="nb">key</span><span class="o">,</span><span class="nb">False</span> <span class="k">for</span> <span class="nb">key</span> <span class="n">exists</span>
<span class="p">:</span><span class="s">exists</span> <span class="p">:!</span><span class="s">kv</span>           <span class="k">return</span> <span class="nb">pairs</span> <span class="k">with</span> <span class="nb">key</span><span class="o">,</span><span class="nb">Bool</span> <span class="k">for</span> <span class="nb">key</span> <span class="n">exists</span>
<span class="p">:!</span><span class="s">exists</span> <span class="p">:!</span><span class="s">kv</span>          <span class="k">return</span> <span class="nb">pairs</span> <span class="k">with</span> <span class="nb">key</span><span class="o">,!</span><span class="nb">Bool</span> <span class="k">for</span> <span class="nb">key</span> <span class="n">exists</span>
<span class="p">:</span><span class="s">exists</span> <span class="p">:</span><span class="s">p</span>             <span class="k">return</span> <span class="nb">pairs</span> <span class="k">with</span> <span class="nb">key</span><span class="o">/</span><span class="nb">True</span> <span class="k">for</span> <span class="nb">key</span> <span class="n">exists</span>
<span class="p">:!</span><span class="s">exists</span> <span class="p">:</span><span class="s">p</span>            <span class="k">return</span> <span class="nb">pairs</span> <span class="k">with</span> <span class="nb">key</span><span class="o">/</span><span class="nb">False</span> <span class="k">for</span> <span class="nb">key</span> <span class="n">exists</span>
<span class="p">:</span><span class="s">exists</span> <span class="p">:!</span><span class="s">p</span>            <span class="k">return</span> <span class="nb">pairs</span> <span class="k">with</span> <span class="nb">key</span><span class="o">/</span><span class="nb">Bool</span> <span class="k">for</span> <span class="nb">key</span> <span class="n">exists</span>
<span class="p">:!</span><span class="s">exists</span> <span class="p">:!</span><span class="s">p</span>           <span class="k">return</span> <span class="nb">pairs</span> <span class="k">with</span> <span class="nb">key</span><span class="o">/!</span><span class="nb">Bool</span> <span class="k">for</span> <span class="nb">key</span> <span class="n">exists</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/subscript" term="subscript" label="subscript" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/adverb" term="adverb" label="adverb" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[在 Raku 中为自定义的类添加下标]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-08-18-add-subscripts-for-custom-class-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2015-05-18-subscripts-adverbs/?utm_source=atom_feed" rel="related" type="text/html" title="下标副词" />
            
                <id>https://ohmyweekly.github.io/notes/2015-08-18-add-subscripts-for-custom-class-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Add Subscripts for Custom Class in Raku</blockquote><h3 id="为自定义的类添加下标subscripts">为自定义的类添加下标(subscripts)</h3>
<p>假如你定义了一个类, 你想把类的实例用作散列那样, 可以索引其中的元素, 那么你需要让你得自定义遵守 Associative 接口, 并重写 <code>AT-KEY</code>、<code>EXISTS-KEY</code>、<code>DELETE-KEY</code>、<code>push</code> 等跟散列有关的方法:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">HTTPHeader</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>

<span class="k">class</span> <span class="nc">HTTPHeader</span> <span class="k">does</span> <span class="nb">Associative</span>  <span class="p">{</span>

    <span class="k">has</span> <span class="nv">%!fields</span> <span class="nb">handles</span> <span class="p">&lt;</span><span class="s">self.AT-KEY self.EXISTS-KEY self.DELETE-KEY self.push list kv keys values</span><span class="p">&gt;;</span>
    <span class="k">method</span> <span class="nb">Str</span> <span class="p">{</span> <span class="nb">say</span> <span class="nb">self</span><span class="o">.</span><span class="nb">hash</span><span class="o">.</span><span class="nb">fmt</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">multi</span> <span class="k">method</span> <span class="nb">EXISTS-KEY</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span>       <span class="p">{</span> <span class="nv">%!fields</span><span class="p">{</span><span class="n">normalize-key</span> <span class="nv">$key</span><span class="p">}:</span><span class="s">exists</span> <span class="p">}</span>
    <span class="k">multi</span> <span class="k">method</span> <span class="nb">DELETE-KEY</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span>       <span class="p">{</span> <span class="nv">%!fields</span><span class="p">{</span><span class="n">normalize-key</span> <span class="nv">$key</span><span class="p">}:</span><span class="s">delete</span> <span class="p">}</span>
    <span class="k">multi</span> <span class="k">method</span> <span class="nb">push</span> <span class="p">(</span><span class="o">*</span><span class="nv">@_</span><span class="p">)</span>              <span class="p">{</span> <span class="nv">%!fields</span><span class="o">.</span><span class="nb">push</span><span class="o">:</span> <span class="nv">@_</span>                   <span class="p">}</span>

    <span class="k">sub</span> <span class="nf">normalize-key</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$key</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="se">\w</span><span class="o">+</span><span class="p">/</span><span class="o">,</span> <span class="o">*.</span><span class="nb">tc</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">)</span> <span class="p">}</span> <span class="c1"># titileCase 驼峰式的键</span>

    <span class="k">method</span> <span class="nb">AT-KEY</span> <span class="p">(</span><span class="vg">::?CLASS:D</span><span class="o">:</span> <span class="nv">$key</span><span class="p">)</span> <span class="k">is</span> <span class="k">rw</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$element</span> <span class="o">:=</span> <span class="nv">%!fields</span><span class="p">{</span><span class="n">normalize-key</span> <span class="nv">$key</span><span class="p">};</span>

        <span class="nb">Proxy</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span>
            <span class="s">FETCH</span> <span class="o">=&gt;</span> <span class="k">method</span> <span class="p">()</span> <span class="p">{</span> <span class="nv">$element</span> <span class="p">}</span>,

            <span class="s">STORE</span> <span class="o">=&gt;</span> <span class="k">method</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$element</span> <span class="o">=</span> <span class="nb">do</span> <span class="k">given</span> <span class="nv">$value</span><span class="o">».</span><span class="nb">split</span><span class="p">(/&#39;</span><span class="s1">,</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\s</span><span class="o">+</span><span class="p">/)</span><span class="o">.</span><span class="nb">flat</span> <span class="p">{</span>
                    <span class="k">when</span> <span class="mi">1</span>  <span class="p">{</span> <span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="p">}</span>    <span class="c1"># a single value is stored as a string</span>
                    <span class="k">default</span> <span class="p">{</span> <span class="o">.</span><span class="nb">Array</span> <span class="p">}</span>  <span class="c1"># multiple values are stored as an array</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="k">my</span> <span class="nv">$header</span> <span class="o">=</span> <span class="n">HTTPHeader</span><span class="o">.</span><span class="nb">new</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$header</span><span class="o">.</span><span class="nb">WHAT</span><span class="p">;</span>  <span class="c1">#-&gt; (HTTPHeader)</span>
<span class="p">&#34;&#34;</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>

<span class="nv">$header</span><span class="p">&lt;</span><span class="s">Accept</span><span class="p">&gt;</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">text/plain</span><span class="p">&#34;;</span>
<span class="nv">$header</span><span class="p">{&#39;</span><span class="s1">Accept-</span><span class="p">&#39;</span> <span class="ow">X</span><span class="o">~</span> <span class="p">&lt;</span><span class="s">Charset Encoding Language</span><span class="p">&gt;}</span> <span class="o">=</span> <span class="p">&lt;</span><span class="s">utf-8 gzip en</span><span class="p">&gt;;</span>
<span class="nv">$header</span><span class="o">.</span><span class="nb">push</span><span class="p">(&#39;</span><span class="s1">Accept-Language</span><span class="p">&#39;</span> <span class="o">=&gt;</span> <span class="p">&#34;</span><span class="s2">fr</span><span class="p">&#34;);</span>  <span class="c1"># like .push on a Hash</span>

<span class="nb">say</span> <span class="nv">$header</span><span class="o">.</span><span class="nb">hash</span><span class="o">.</span><span class="nb">fmt</span><span class="p">;</span>
<span class="p">&#34;&#34;</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>
<span class="c1"># say $header.Str; # 同上</span>

<span class="nb">say</span> <span class="nv">$header</span><span class="p">&lt;</span><span class="s">Accept-Language</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">values</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$header</span><span class="p">&lt;</span><span class="s">Accept-Charset</span><span class="p">&gt;;</span>
</code></pre></div><p>输出：</p>
<pre><code>(HTTPHeader)

Accept	text/plain
Accept-Charset	utf-8
Accept-Encoding	gzip
Accept-Language	en fr

(en fr)
utf-8
</code></pre><p>同样, 你也可以使用数组下标, 只要你重写相应地方法。</p>
<p>关于为自定义的类添加下标这个问题,  stackoverflow 上的回答是不需要在 handles 后面所跟的方法中添加 <code>self</code>。 他的解释如下:</p>
<h2 id="为自定义的类添加下标subscriptshttpstackoverflowcomquestions36773986how-to-add-subscripts-to-my-custom-class-in-perl-6"><a href="http://stackoverflow.com/questions/36773986/how-to-add-subscripts-to-my-custom-class-in-perl-6">为自定义的类添加下标(subscripts)</a></h2>
<p>在自定义类上实现关联式下标(associative subscripting)。</p>
<h3 id="通过代理实现">通过代理实现</h3>
<p>Raku 通过在实现了集合类型的对象身上调用良定义的方法来实现关联式下标和位置下标（对于内置类型）。通过在 <code>%!fields</code> 属性后面添加 <code>handles</code> 特性(trait),  你就把这些方法调用传递给了 <code>%!fields</code> - 它作为一个散列, 会知道怎么来处理那些方法。</p>
<h3 id="灵活的键">灵活的键</h3>
<blockquote>
<p>However, HTTP header field names are supposed to be case-insensitive (and preferred in camel-case). We can accommodate this by taking the *-KEY and push methods out of the handles list, and implementing them separately&hellip;</p>
</blockquote>
<p>把所有的键处理方法代理给内部的散列意味着你的键得到了散列那样的插值 - 意味着它们将是大小写无关的因为散列的键是大小写无关的。为了避免那, 你把所有跟键有关的方法从 <em>handles</em> 子句中拿出并自己实现那些方法。在例子中, 键在被索引到 <code>%!fields</code> 让键变成大小写无关之前先进行了键的「标准化」。</p>
<h3 id="灵活的值">灵活的值</h3>
<p>例子中的最后一部分展示了当值存入到散列那样的容器中时你如何控制值的插值。到目前为止, 通过赋值给这个自定义容器的实例提供的值要么是一个字符串, 要么是一个字符串的数组。额外的控制是通过移除定义在灵活的键中的  <strong>AT-KEY</strong> 方法来达成的并提供一个 <strong><a href="https://doc.raku.org/type/Proxy">Proxy</a></strong> 对象来代替它。如果你给容器赋值, 那么代理人对象的 <strong>STORE</strong> 方法会被调用并且那个方法会扫描所提供的字符串值中的 <code>&quot;, &quot;</code>（注意空格是必要的）。如果找到会接收那个字符串值作为几个字符串值的说明书。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">HTTPHeader</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>

<span class="k">class</span> <span class="nc">HTTPHeader</span> <span class="k">does</span> <span class="nb">Associative</span>  <span class="p">{</span>

    <span class="k">has</span> <span class="nv">%!fields</span>  <span class="nb">handles</span> <span class="p">&lt;</span><span class="s">list kv keys values</span><span class="p">&gt;;</span>
    <span class="k">method</span> <span class="nb">Str</span> <span class="p">{</span> <span class="nb">say</span> <span class="nb">self</span><span class="o">.</span><span class="nb">hash</span><span class="o">.</span><span class="nb">fmt</span><span class="p">;</span> <span class="p">}</span>


    <span class="k">multi</span> <span class="k">method</span> <span class="nb">EXISTS-KEY</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span>       <span class="p">{</span> <span class="nv">%!fields</span><span class="p">{</span><span class="n">normalize-key</span> <span class="nv">$key</span><span class="p">}:</span><span class="s">exists</span> <span class="p">}</span>
    <span class="k">multi</span> <span class="k">method</span> <span class="nb">DELETE-KEY</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span>       <span class="p">{</span> <span class="nv">%!fields</span><span class="p">{</span><span class="n">normalize-key</span> <span class="nv">$key</span><span class="p">}:</span><span class="s">delete</span> <span class="p">}</span>
    <span class="k">multi</span> <span class="k">method</span> <span class="nb">push</span> <span class="p">(</span><span class="o">*</span><span class="nv">@_</span><span class="p">)</span>              <span class="p">{</span> <span class="nv">%!fields</span><span class="o">.</span><span class="nb">push</span><span class="o">:</span> <span class="nv">@_</span>                   <span class="p">}</span>

    <span class="k">sub</span> <span class="nf">normalize-key</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$key</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="se">\w</span><span class="o">+</span><span class="p">/</span><span class="o">,</span> <span class="o">*.</span><span class="nb">tc</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">)</span> <span class="p">}</span>

    <span class="k">method</span> <span class="nb">AT-KEY</span> <span class="p">(</span><span class="vg">::?CLASS:D</span><span class="o">:</span> <span class="nv">$key</span><span class="p">)</span> <span class="k">is</span> <span class="k">rw</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$element</span> <span class="o">:=</span> <span class="nv">%!fields</span><span class="p">{</span><span class="n">normalize-key</span> <span class="nv">$key</span><span class="p">};</span>

        <span class="nb">Proxy</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span>
            <span class="s">FETCH</span> <span class="o">=&gt;</span> <span class="k">method</span> <span class="p">()</span> <span class="p">{</span> <span class="nv">$element</span> <span class="p">}</span>,

            <span class="s">STORE</span> <span class="o">=&gt;</span> <span class="k">method</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$element</span> <span class="o">=</span> <span class="nb">do</span> <span class="k">given</span> <span class="nv">$value</span><span class="o">».</span><span class="nb">split</span><span class="p">(/&#39;</span><span class="s1">,</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\s</span><span class="o">+</span><span class="p">/)</span><span class="o">.</span><span class="nb">flat</span> <span class="p">{</span>
                    <span class="k">when</span> <span class="mi">1</span>  <span class="p">{</span> <span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="p">}</span>    <span class="c1"># a single value is stored as a string</span>
                    <span class="k">default</span> <span class="p">{</span> <span class="o">.</span><span class="nb">Array</span> <span class="p">}</span>  <span class="c1"># multiple values are stored as an array</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="k">my</span> <span class="nv">$header</span> <span class="o">=</span> <span class="n">HTTPHeader</span><span class="o">.</span><span class="nb">new</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$header</span><span class="o">.</span><span class="nb">WHAT</span><span class="p">;</span>  <span class="c1">#-&gt; (HTTPHeader)</span>
<span class="p">&#34;&#34;</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>

<span class="nv">$header</span><span class="p">&lt;</span><span class="s">Accept</span><span class="p">&gt;</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">text/plain</span><span class="p">&#34;;</span>
<span class="nv">$header</span><span class="p">{&#39;</span><span class="s1">Accept-</span><span class="p">&#39;</span> <span class="ow">X</span><span class="o">~</span> <span class="p">&lt;</span><span class="s">Charset Encoding Language</span><span class="p">&gt;}</span> <span class="o">=</span> <span class="p">&lt;</span><span class="s">utf-8 gzip en</span><span class="p">&gt;;</span>
<span class="nv">$header</span><span class="o">.</span><span class="nb">push</span><span class="p">(&#39;</span><span class="s1">Accept-Language</span><span class="p">&#39;</span> <span class="o">=&gt;</span> <span class="p">&#34;</span><span class="s2">fr</span><span class="p">&#34;);</span>  <span class="c1"># like .push on a Hash</span>

<span class="nb">say</span> <span class="nv">$header</span><span class="o">.</span><span class="nb">hash</span><span class="o">.</span><span class="nb">fmt</span><span class="p">;</span>
<span class="p">&#34;&#34;</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>
<span class="c1"># say $header.Str; # 同上</span>

<span class="nb">say</span> <span class="nv">$header</span><span class="p">&lt;</span><span class="s">Accept-Language</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">values</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$header</span><span class="p">&lt;</span><span class="s">Accept-Charset</span><span class="p">&gt;;</span>
</code></pre></div><p>输出：</p>
<pre><code>(HTTPHeader)

Accept	text/plain
Accept-Charset	utf-8
Accept-Encoding	gzip
Accept-Language	en fr

(en fr)
utf-8
</code></pre><p>同样, 你也可以使用数组下标, 只要你重写相应地方法。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/subscript" term="subscript" label="subscript" />
                            
                        
                    
                
            
        </entry>
    
</feed>
