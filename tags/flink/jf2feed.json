{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003cp\u003e本次培训的重点是广泛地介绍 DataStream API，使你能够开始编写流式应用程序。\u003c/p\u003e\n\u003ch2 id=\"什么可以被流式化\"\u003e什么可以被流式化？\u003c/h2\u003e\n\u003cp\u003eFlink 的 DataStream API(Java 和 Scala)可以让你流化任何可以序列化的东西。Flink 自己的序列化器用于:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e基本类型，即 String, Long, Integer, Boolean, Array\u003c/li\u003e\n\u003cli\u003e复合类型。Tuples, POJOs 和 Scala case classes\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e而 Flink 又回到了 Kryo 的其他类型。也可以在 Flink 中使用其他序列化器。特别是 Avro，得到了很好的支持。\u003c/p\u003e\n\u003ch3 id=\"java-元组-和-pojo\"\u003eJava 元组 和 POJO\u003c/h3\u003e\n\u003cp\u003eFlink 的本地序列化器可以有效地操作元组和 POJO。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e元组\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e对于 Java，Flink 定义了自己的 Tuple0 到 Tuple25 类型。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"n\"\u003eTuple2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eperson\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTuple2\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eof\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Fred\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e35\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// zero based index!  \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ef0\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ef1\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003ePOJO\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果满足以下条件，Flink 将数据类型识别为 POJO 类型（并允许\u0026quot;按名称\u0026quot;字段引用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e类是公共的和独立的（没有非静态的内部类）。\u003c/li\u003e\n\u003cli\u003e该类有一个公共的无参数构造函数。\u003c/li\u003e\n\u003cli\u003e类（以及所有超级类）中的所有非静态、非瞬态字段要么是公共的（而且是非最终的），要么有公共的 getter- 和 setter- 方法，这些方法遵循 Java beans 中 getter 和 setter 的命名约定。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePerson\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e  \n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eInteger\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e  \n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"nf\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e  \n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"nf\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eInteger\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e  \n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e  \n\u003cspan class=\"o\"\u003e}\u003c/span\u003e  \n\n\u003cspan class=\"n\"\u003ePerson\u003c/span\u003e \u003cspan class=\"n\"\u003eperson\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Fred Flintstone\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e35\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFlink 的序列化器\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/state/schema_evolution.html#pojo-types\"\u003e支持 POJO 类型的模式进化\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"scala-元组和-case-class\"\u003eScala 元组和 case class\u003c/h3\u003e\n\u003cp\u003e这些工作就像你期望的那样。\u003c/p\u003e\n\u003ch2 id=\"一个完整的例子\"\u003e一个完整的例子\u003c/h2\u003e\n\u003cp\u003e这个例子将一个关于人的记录流作为输入，并将其过滤为只包括成年人。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.flink.streaming.api.environment.StreamExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.flink.streaming.api.datastream.DataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.flink.api.common.functions.FilterFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eExample\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eStreamExecutionEnvironment\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n                \u003cspan class=\"n\"\u003eStreamExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eflintstones\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efromElements\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n                \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Fred\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e35\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Wilma\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e35\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Pebbles\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eadults\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eflintstones\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efilter\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eFilterFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n            \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e \u003cspan class=\"nf\"\u003efilter\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePerson\u003c/span\u003e \u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e18\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eadults\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eexecute\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePerson\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eInteger\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"nf\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"nf\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eInteger\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"nf\"\u003etoString\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoString\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;: age \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eage\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoString\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"流执行环境\"\u003e流执行环境\u003c/h2\u003e\n\u003cp\u003e每个 Flink 应用都需要一个执行环境，本例中的 env。流式应用需要使用一个 StreamExecutionEnvironment。\u003c/p\u003e\n\u003cp\u003e在你的应用程序中进行的 DataStream API 调用建立了一个作业图(job graph)，这个作业图被附加到 StreamExecutionEnvironment 上。当调用 env.execute() 时，这个图会被打包并发送给 JobManager，JobManager 将作业并行化，并将它的片断分配给 Task Manager 执行。你的作业的每个并行片断将在一个任务槽(task slot)中执行。\u003c/p\u003e\n\u003cp\u003e注意，如果你不调用 execute()，你的应用程序将不会被运行。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/distributed-runtime.svg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e这种分布式运行时取决于你的应用程序是可序列化的。它还要求所有的依赖关系都能在集群中的每个节点上使用。\u003c/p\u003e\n\u003ch3 id=\"基本的流源\"\u003e基本的流源\u003c/h3\u003e\n\u003cp\u003e上面的例子使用 \u003ccode\u003eenv.fromElements(...)\u003c/code\u003e 构造了一个 \u003ccode\u003eDataStream[Person]\u003c/code\u003e。这是一种方便的方法，可以将一个简单的流组合起来，用于原型或测试。StreamExecutionEnvironment 上还有一个 fromCollection(Collection) 方法。所以，你可以用这个方法来代替。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003epeople\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eArrayList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003epeople\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Fred\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e35\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003epeople\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Wilma\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e35\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003epeople\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Pebbles\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eflintstones\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efromCollection\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epeople\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e另一种方便的方法是在原型开发时将一些数据导入流中，使用 socket:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003elines\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esocketTextStream\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;localhost\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9999\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或从文件中读取:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003elines\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereadTextFile\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;file:///path\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在实际应用中，最常用的数据源是那些支持低延迟、高吞吐量并行读取并结合倒带和重放的数据源\u0026ndash;这是高性能和容错的先决条件\u0026ndash;如 Apache Kafka、Kinesis 和各种文件系统。REST API 和数据库也经常被用于流的丰富。\u003c/p\u003e\n\u003ch3 id=\"基本的流式接收器\"\u003e基本的流式接收器\u003c/h3\u003e\n\u003cp\u003e上面的例子使用 \u003ccode\u003eadults.print()\u003c/code\u003e 将其结果打印到 task manager 的日志中（当在 IDE 中运行时，它将出现在你的 IDE 的控制台中）。这将在流的每个元素上调用 \u003ccode\u003etoString()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e输出结果看起来像这样：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1\u0026gt; Fred: age 35\n2\u0026gt; Wilma: age 35\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中 \u003ccode\u003e1\u0026gt;\u003c/code\u003e 和 \u003ccode\u003e2\u0026gt;\u003c/code\u003e 表示哪个子任务（即线程）产生的输出。\u003c/p\u003e\n\u003cp\u003e在生产中，常用的接收器括 StreamingFileSink、各种数据库和一些 pub-sub 系统。\u003c/p\u003e\n\u003ch2 id=\"调试\"\u003e调试\u003c/h2\u003e\n\u003cp\u003e在生产中，你的应用程序将在远程集群或一组容器中运行。而如果它失败了，它将会远程失败。JobManager 和 TaskManager 日志对调试此类故障非常有帮助，但在 IDE 内部进行本地调试要容易得多，Flink 支持这一点。你可以设置断点，检查本地变量，并逐步检查你的代码。你也可以步入 Flink 的代码，如果你好奇 Flink 是如何工作的，这可以是一个很好的方式来了解它的内部结构。\u003c/p\u003e\n\u003ch2 id=\"实践\"\u003e实践\u003c/h2\u003e\n\u003cp\u003e在这一点上，你知道了足够的知识，可以开始编码和运行一个简单的 DataStream 应用程序。克隆 \u003ca href=\"https://github.com/apache/flink-training/tree/release-1.11\"\u003eflink-training\u003c/a\u003e repo，按照 README 中的说明操作后，进行第一个练习。\u003ca href=\"https://github.com/apache/flink-training/tree/release-1.11/ride-cleansing\"\u003e过滤一个流（Ride Cleansing）\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"进一步阅读\"\u003e进一步阅读\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://flink.apache.org/news/2020/04/15/flink-serialization-tuning-vol-1.html\"\u003eFlink序列化调优第一卷：选择你的序列化器\u0026ndash;如果你可以的话\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/datastream_api.html#anatomy-of-a-flink-program\"\u003eFlink 程序的解剖\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/datastream_api.html#data-sources\"\u003e数据源\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/datastream_api.html#data-sinks\"\u003e数据接收器\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/\"\u003eDataStream 连接器\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","text":"本次培训的重点是广泛地介绍 DataStream API，使你能够开始编写流式应用程序。\n什么可以被流式化？ Flink 的 DataStream API(Java 和 Scala)可以让你流化任何可以序列化的东西。Flink 自己的序列化器用于:\n 基本类型，即 String, Long, Integer, Boolean, Array 复合类型。Tuples, POJOs 和 Scala case classes  而 Flink 又回到了 Kryo 的其他类型。也可以在 Flink 中使用其他序列化器。特别是 Avro，得到了很好的支持。\nJava 元组 和 POJO Flink 的本地序列化器可以有效地操作元组和 POJO。\n元组\n对于 Java，Flink 定义了自己的 Tuple0 到 Tuple25 类型。\nTuple2\u0026lt;String, Integer\u0026gt; person = Tuple2.of(\u0026#34;Fred\u0026#34;, 35); // zero based index! String name = person.f0; Integer age = person.f1; POJO\n如果满足以下条件，Flink 将数据类型识别为 POJO 类型（并允许\u0026quot;按名称\u0026quot;字段引用）。\n 类是公共的和独立的（没有非静态的内部类）。 该类有一个公共的无参数构造函数。 类（以及所有超级类）中的所有非静态、非瞬态字段要么是公共的（而且是非最终的），要么有公共的 getter- 和 setter- 方法，这些方法遵循 Java beans 中 getter 和 setter 的命名约定。  例如:\npublic class Person { public String name; public Integer age; public Person() {}; public Person(String name, Integer age) { . . . }; } Person person = new Person(\u0026#34;Fred Flintstone\u0026#34;, 35); Flink 的序列化器支持 POJO 类型的模式进化。\nScala 元组和 case class 这些工作就像你期望的那样。\n一个完整的例子 这个例子将一个关于人的记录流作为输入，并将其过滤为只包括成年人。\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment; import org.apache.flink.streaming.api.datastream.DataStream; import org.apache.flink.api.common.functions.FilterFunction; public class Example { public static void main(String[] args) throws Exception { final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment(); DataStream\u0026lt;Person\u0026gt; flintstones = env.fromElements( new Person(\u0026#34;Fred\u0026#34;, 35), new Person(\u0026#34;Wilma\u0026#34;, 35), new Person(\u0026#34;Pebbles\u0026#34;, 2)); DataStream\u0026lt;Person\u0026gt; adults = flintstones.filter(new FilterFunction\u0026lt;Person\u0026gt;() { @Override public boolean filter(Person person) throws Exception { return person.age \u0026gt;= 18; } }); adults.print(); env.execute(); } public static class Person { public String name; public Integer age; public Person() {}; public Person(String name, Integer age) { this.name = name; this.age = age; }; public String toString() { return this.name.toString() + \u0026#34;: age \u0026#34; + this.age.toString(); }; } } 流执行环境 每个 Flink 应用都需要一个执行环境，本例中的 env。流式应用需要使用一个 StreamExecutionEnvironment。\n在你的应用程序中进行的 DataStream API 调用建立了一个作业图(job graph)，这个作业图被附加到 StreamExecutionEnvironment 上。当调用 env.execute() 时，这个图会被打包并发送给 JobManager，JobManager 将作业并行化，并将它的片断分配给 Task Manager 执行。你的作业的每个并行片断将在一个任务槽(task slot)中执行。\n注意，如果你不调用 execute()，你的应用程序将不会被运行。\n这种分布式运行时取决于你的应用程序是可序列化的。它还要求所有的依赖关系都能在集群中的每个节点上使用。\n基本的流源 上面的例子使用 env.fromElements(...) 构造了一个 DataStream[Person]。这是一种方便的方法，可以将一个简单的流组合起来，用于原型或测试。StreamExecutionEnvironment 上还有一个 fromCollection(Collection) 方法。所以，你可以用这个方法来代替。\nval people: List[Person] = new ArrayList\u0026lt;Person\u0026gt;(); people.add(new Person(\u0026#34;Fred\u0026#34;, 35)); people.add(new Person(\u0026#34;Wilma\u0026#34;, 35)); people.add(new Person(\u0026#34;Pebbles\u0026#34;, 2)); val flintstones: DataStream[Person] = env.fromCollection(people); 另一种方便的方法是在原型开发时将一些数据导入流中，使用 socket:\nval lines: DataStream[String] = env.socketTextStream(\u0026#34;localhost\u0026#34;, 9999) 或从文件中读取:\nval lines: DataStream[String] = env.readTextFile(\u0026#34;file:///path\u0026#34;); 在实际应用中，最常用的数据源是那些支持低延迟、高吞吐量并行读取并结合倒带和重放的数据源\u0026ndash;这是高性能和容错的先决条件\u0026ndash;如 Apache Kafka、Kinesis 和各种文件系统。REST API 和数据库也经常被用于流的丰富。\n基本的流式接收器 上面的例子使用 adults.print() 将其结果打印到 task manager 的日志中（当在 IDE 中运行时，它将出现在你的 IDE 的控制台中）。这将在流的每个元素上调用 toString()。\n输出结果看起来像这样：\n1\u0026gt; Fred: age 35 2\u0026gt; Wilma: age 35 其中 1\u0026gt; 和 2\u0026gt; 表示哪个子任务（即线程）产生的输出。\n在生产中，常用的接收器括 StreamingFileSink、各种数据库和一些 pub-sub 系统。\n调试 在生产中，你的应用程序将在远程集群或一组容器中运行。而如果它失败了，它将会远程失败。JobManager 和 TaskManager 日志对调试此类故障非常有帮助，但在 IDE 内部进行本地调试要容易得多，Flink 支持这一点。你可以设置断点，检查本地变量，并逐步检查你的代码。你也可以步入 Flink 的代码，如果你好奇 Flink 是如何工作的，这可以是一个很好的方式来了解它的内部结构。\n实践 在这一点上，你知道了足够的知识，可以开始编码和运行一个简单的 DataStream 应用程序。克隆 flink-training repo，按照 README 中的说明操作后，进行第一个练习。过滤一个流（Ride Cleansing）。\n进一步阅读  Flink序列化调优第一卷：选择你的序列化器\u0026ndash;如果你可以的话 Flink 程序的解剖 数据源 数据接收器 DataStream 连接器  "},"name":"DataStream API 介绍","published":"2020-08-19T00:00:00+08:00","summary":"Intro to the DataStream API","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-19-intro-to-the-datastream-api/"},{"content":{"html":"\u003ch2 id=\"process-functions\"\u003eProcess Functions\u003c/h2\u003e\n\u003ch3 id=\"介绍\"\u003e介绍\u003c/h3\u003e\n\u003cp\u003eProcessFunction 将事件处理与定时器和状态结合起来，使其成为流处理应用的强大构件。这是用 Flink 创建事件驱动应用的基础。它与 RichFlatMapFunction 非常相似，但增加了定时器。\u003c/p\u003e\n\u003ch3 id=\"实例\"\u003e实例\u003c/h3\u003e\n\u003cp\u003e如果你做过\u003ca href=\"https://ohmyweekly.github.io/notes/2020-08-19-streaming-analytics\"\u003e流分析\u003c/a\u003e培训中的\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/streaming_analytics.html#hands-on\"\u003e实战练习\u003c/a\u003e，你会记得它使用 TumblingEventTimeWindow 来计算每个司机在每个小时内的小费之和，就像这样:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"c1\"\u003e// compute the sum of the tips per hour for each driver\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ehourlyTips\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efares\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTaxiFare\u003c/span\u003e \u003cspan class=\"n\"\u003efare\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efare\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003edriverId\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTumblingEventTimeWindows\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eof\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ehours\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eAddTips\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用 KeyedProcessFunction 做同样的事情是相当直接的，也是很有教育意义的。让我们先把上面的代码替换成这样:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"c1\"\u003e// compute the sum of the tips per hour for each driver\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ehourlyTips\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efares\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTaxiFare\u003c/span\u003e \u003cspan class=\"n\"\u003efare\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efare\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003edriverId\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003ePseudoWindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ehours\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这段代码中，一个名为 PseudoWindow 的 KeyedProcessFunction 被应用于一个 keyed 流，其结果是一个 \u003ccode\u003eDataStream\u0026lt;Tuple3\u0026lt;Long，Long，Float\u0026gt;\u0026gt;\u003c/code\u003e（就是使用 Flink 内置时间窗口的实现所产生的那种流）。\u003c/p\u003e\n\u003cp\u003ePseudoWindow 的整体轮廓是这样的形状:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"c1\"\u003e// Compute the sum of the tips for each driver in hour-long windows.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// The keys are driverIds.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePseudoWindow\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \n        \u003cspan class=\"n\"\u003eKeyedProcessFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTaxiFare\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003edurationMsec\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"nf\"\u003ePseudoWindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTime\u003c/span\u003e \u003cspan class=\"n\"\u003eduration\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003edurationMsec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eduration\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoMilliseconds\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Called once during initialization.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eopen\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eConfiguration\u003c/span\u003e \u003cspan class=\"n\"\u003econf\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Called as each fare arrives to be processed.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocessElement\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eTaxiFare\u003c/span\u003e \u003cspan class=\"n\"\u003efare\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eContext\u003c/span\u003e \u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eCollector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Called when the current watermark indicates that a window is now complete.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eonTimer\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \n            \u003cspan class=\"n\"\u003eOnTimerContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \n            \u003cspan class=\"n\"\u003eCollector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e需要注意的事情。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eProcessFunctions 有好几种类型\u0026ndash;这是一个 KeyedProcessFunctions，但还有 CoProcessFunctions、BroadcastProcessFunctions 等。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eKeyedProcessFunction 是 RichFunction的一种。作为一个 RichFunction，它可以访问在管理 keyed state 下工作所需的 \u003ccode\u003eopen\u003c/code\u003e 和 \u003ccode\u003egetRuntimeContext\u003c/code\u003e 方法。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e有两个回调要实现：\u003ccode\u003eprocessElement\u003c/code\u003e 和 \u003ccode\u003eonTimer\u003c/code\u003e。\u003ccode\u003eprocessElement\u003c/code\u003e 在每次传入事件时被调用；\u003ccode\u003eonTimer\u003c/code\u003e 在定时器发射时被调用。这些定时器可以是事件时间，也可以是处理时间定时器。\u003ccode\u003eprocessElement\u003c/code\u003e 和 \u003ccode\u003eonTimer\u003c/code\u003e 都提供了一个上下文对象，该对象可以用来与 \u003ccode\u003eTimerService\u003c/code\u003e 交互（除其他外）。两个回调都还传递了一个可以用来发出结果的 Collector。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"open-方法\"\u003eopen() 方法\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"c1\"\u003e// Keyed, managed state, with an entry for each window, keyed by the window\u0026#39;s end time.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// There is a separate MapState object for each driver.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003etransient\u003c/span\u003e \u003cspan class=\"n\"\u003eMapState\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esumOfTips\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eopen\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eConfiguration\u003c/span\u003e \u003cspan class=\"n\"\u003econf\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eMapStateDescriptor\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esumDesc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n            \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eMapStateDescriptor\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sumOfTips\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esumOfTips\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetRuntimeContext\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetMapState\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esumDesc\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于票价事件可能会不按顺序到达，所以有时需要处理一个小时的事件，然后再完成前一个小时的结果计算。事实上，如果水印延迟比窗口长度长得多，那么可能会同时打开许多窗口，而不是只有两个。本实现通过使用 \u003ccode\u003eMapState\u003c/code\u003e 来支持这一点，\u003ccode\u003eMapState\u003c/code\u003e 将每个窗口结束的时间戳映射到该窗口的提示之和。\u003c/p\u003e\n\u003ch4 id=\"processelement-方法\"\u003eprocessElement() 方法\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocessElement\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eTaxiFare\u003c/span\u003e \u003cspan class=\"n\"\u003efare\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eContext\u003c/span\u003e \u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eCollector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003eeventTime\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efare\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetEventTime\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTimerService\u003c/span\u003e \u003cspan class=\"n\"\u003etimerService\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etimerService\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eeventTime\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etimerService\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecurrentWatermark\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// This event is late; its window has already been triggered.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Round up eventTime to the end of the window containing this event.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003eendOfWindow\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eeventTime\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eeventTime\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003edurationMsec\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edurationMsec\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// Schedule a callback for when the window has been completed.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003etimerService\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eregisterEventTimeTimer\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eendOfWindow\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// Add this fare\u0026#39;s tip to the running total for that window.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esumOfTips\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eendOfWindow\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e0F\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efare\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etip\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003esumOfTips\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eput\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eendOfWindow\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e要考虑的事情:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e迟到的事件会怎样？在水印后面的事件（即迟到）会被丢弃。如果你想做一些比这更好的事情，可以考虑使用侧输出，这将在\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/event_driven.html#side-outputs\"\u003e下一节\u003c/a\u003e解释。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e这个例子使用了一个 MapState，其中键是时间戳，并为同一个时间戳设置一个 Timer。这是一种常见的模式；它使得在定时器发射时查找相关信息变得简单而高效。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"ontimer-方法\"\u003eonTimer() 方法\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eonTimer\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \n        \u003cspan class=\"n\"\u003eOnTimerContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \n        \u003cspan class=\"n\"\u003eCollector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003edriverId\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetCurrentKey\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Look up the result for the hour that just ended.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e \u003cspan class=\"n\"\u003esumOfTips\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esumOfTips\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFloat\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eof\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edriverId\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esumOfTips\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecollect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esumOfTips\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eremove\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e观察:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e传递给 onTimer 的 OnTimerContext 上下文可以用来确定当前的键。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e我们的伪窗口是在当前水印到达每个小时结束时被触发的，此时调用 onTimer。这个 onTimer 方法从 sumOfTips 中删除了相关的条目，这样做的效果是无法容纳迟到的事件。这相当于在使用 Flink 的时间窗口时，将 allowLateness 设置为零。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"性能方面的考虑\"\u003e性能方面的考虑\u003c/h3\u003e\n\u003cp\u003eFlink 提供了针对 RocksDB 优化的 MapState 和 ListState 类型。在可能的情况下，应该使用这些类型来代替持有某种集合的 ValueState 对象。RocksDB 状态后端可以追加到 ListState，而不需要经过(去)序列化，对于 MapState，每个键/值对都是一个单独的 RocksDB 对象，因此 MapState 可以有效地被访问和更新。\u003c/p\u003e\n\u003ch2 id=\"侧输出\"\u003e侧输出\u003c/h2\u003e\n\u003ch3 id=\"介绍-1\"\u003e介绍\u003c/h3\u003e\n\u003cp\u003e有几个很好的理由可以让 Flink operator 有一个以上的输出流，比如报告:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e异常\u003c/li\u003e\n\u003cli\u003e畸形事件\u003c/li\u003e\n\u003cli\u003e迟到事件\u003c/li\u003e\n\u003cli\u003e操作警报，如与外部服务的连接超时。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e侧输出是一种方便的方式。除了错误报告，侧输出也是实现流的多路分割的好方法。\u003c/p\u003e\n\u003ch3 id=\"例子\"\u003e例子\u003c/h3\u003e\n\u003cp\u003e现在，您可以对上一节中被忽略的迟到事件做些什么了。\u003c/p\u003e\n\u003cp\u003e一个侧输出通道与一个 \u003ccode\u003eOutputTag\u0026lt;T\u0026gt;\u003c/code\u003e 相关联。这些标签具有与侧输出的 DataStream 的类型相对应的通用类型，它们有名称。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eOutputTag\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTaxiFare\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elateFares\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eOutputTag\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTaxiFare\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;lateFares\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面展示的是一个静态的 \u003ccode\u003eOutputTag\u0026lt;TaxiFare\u0026gt;\u003c/code\u003e，它既可以在 PseudoWindow 的 processElement 方法中发出迟到事件时被引用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eeventTime\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etimerService\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecurrentWatermark\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// This event is late; its window has already been triggered.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eoutput\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elateFares\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efare\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e并在访问这一侧输出的流时，在作业的 \u003ccode\u003emain\u003c/code\u003e 方法中输出:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"c1\"\u003e// compute the sum of the tips per hour for each driver\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eSingleOutputStreamOperator\u003c/span\u003e \u003cspan class=\"n\"\u003ehourlyTips\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efares\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTaxiFare\u003c/span\u003e \u003cspan class=\"n\"\u003efare\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efare\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003edriverId\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003ePseudoWindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ehours\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ehourlyTips\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetSideOutput\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elateFares\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者，您可以使用两个具有相同名称的 OutputTags 来引用同一侧面输出，但如果您这样做，它们必须具有相同的类型。\u003c/p\u003e\n\u003ch2 id=\"结束语\"\u003e结束语\u003c/h2\u003e\n\u003cp\u003e在这个例子中，你已经看到了如何使用 ProcessFunction 来重新实现一个直接的时间窗口。当然，如果 Flink 内置的窗口 API 满足你的需求，无论如何，请继续使用它。但如果你发现自己在考虑用 Flink 的窗口做一些变形，不要害怕推出自己的窗口。\u003c/p\u003e\n\u003cp\u003e此外，ProcessFunction 对于计算分析之外的许多其他用例也很有用。下面的实践练习提供了一个完全不同的例子。\u003c/p\u003e\n\u003cp\u003eProcessFunction 的另一个常见用例是用于过期的陈旧状态。如果你回想一下 \u003ca href=\"https://github.com/apache/flink-training/tree/release-1.11/rides-and-fares\"\u003eRides 和 Fares 练习\u003c/a\u003e，其中使用 RichCoFlatMapFunction 来计算一个简单的连接，示例解决方案假设 TaxiRides 和 TaxiFares 是完美匹配的，每个 rideId 是一对一的。如果一个事件丢失了，同一乘车 ID 的其他事件将永远保持在状态。这可以替换为一个 KeyedCoProcessFunction 来实现，并且可以使用一个定时器来检测和清除任何陈旧的状态。\u003c/p\u003e\n\u003ch2 id=\"实践\"\u003e实践\u003c/h2\u003e\n\u003cp\u003e与本节配套的实战练习是 \u003ca href=\"https://github.com/apache/flink-training/tree/release-1.11/long-ride-alerts\"\u003eLong Ride Alerts 练习\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"进一步阅读\"\u003e进一步阅读\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/process_function.html\"\u003eProcessFunction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/side_output.html\"\u003e侧输出\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","text":"Process Functions 介绍 ProcessFunction 将事件处理与定时器和状态结合起来，使其成为流处理应用的强大构件。这是用 Flink 创建事件驱动应用的基础。它与 RichFlatMapFunction 非常相似，但增加了定时器。\n实例 如果你做过流分析培训中的实战练习，你会记得它使用 TumblingEventTimeWindow 来计算每个司机在每个小时内的小费之和，就像这样:\n// compute the sum of the tips per hour for each driver DataStream\u0026lt;Tuple3\u0026lt;Long, Long, Float\u0026gt;\u0026gt; hourlyTips = fares .keyBy((TaxiFare fare) -\u0026gt; fare.driverId) .window(TumblingEventTimeWindows.of(Time.hours(1))) .process(new AddTips()); 用 KeyedProcessFunction 做同样的事情是相当直接的，也是很有教育意义的。让我们先把上面的代码替换成这样:\n// compute the sum of the tips per hour for each driver DataStream\u0026lt;Tuple3\u0026lt;Long, Long, Float\u0026gt;\u0026gt; hourlyTips = fares .keyBy((TaxiFare fare) -\u0026gt; fare.driverId) .process(new PseudoWindow(Time.hours(1))); 在这段代码中，一个名为 PseudoWindow 的 KeyedProcessFunction 被应用于一个 keyed 流，其结果是一个 DataStream\u0026lt;Tuple3\u0026lt;Long，Long，Float\u0026gt;\u0026gt;（就是使用 Flink 内置时间窗口的实现所产生的那种流）。\nPseudoWindow 的整体轮廓是这样的形状:\n// Compute the sum of the tips for each driver in hour-long windows. // The keys are driverIds. public static class PseudoWindow extends KeyedProcessFunction\u0026lt;Long, TaxiFare, Tuple3\u0026lt;Long, Long, Float\u0026gt;\u0026gt; { private final long durationMsec; public PseudoWindow(Time duration) { this.durationMsec = duration.toMilliseconds(); } @Override // Called once during initialization.  public void open(Configuration conf) { . . . } @Override // Called as each fare arrives to be processed.  public void processElement( TaxiFare fare, Context ctx, Collector\u0026lt;Tuple3\u0026lt;Long, Long, Float\u0026gt;\u0026gt; out) throws Exception { . . . } @Override // Called when the current watermark indicates that a window is now complete.  public void onTimer(long timestamp, OnTimerContext context, Collector\u0026lt;Tuple3\u0026lt;Long, Long, Float\u0026gt;\u0026gt; out) throws Exception { . . . } } 需要注意的事情。\n  ProcessFunctions 有好几种类型\u0026ndash;这是一个 KeyedProcessFunctions，但还有 CoProcessFunctions、BroadcastProcessFunctions 等。\n  KeyedProcessFunction 是 RichFunction的一种。作为一个 RichFunction，它可以访问在管理 keyed state 下工作所需的 open 和 getRuntimeContext 方法。\n  有两个回调要实现：processElement 和 onTimer。processElement 在每次传入事件时被调用；onTimer 在定时器发射时被调用。这些定时器可以是事件时间，也可以是处理时间定时器。processElement 和 onTimer 都提供了一个上下文对象，该对象可以用来与 TimerService 交互（除其他外）。两个回调都还传递了一个可以用来发出结果的 Collector。\n  open() 方法 // Keyed, managed state, with an entry for each window, keyed by the window\u0026#39;s end time. // There is a separate MapState object for each driver. private transient MapState\u0026lt;Long, Float\u0026gt; sumOfTips; @Override public void open(Configuration conf) { MapStateDescriptor\u0026lt;Long, Float\u0026gt; sumDesc = new MapStateDescriptor\u0026lt;\u0026gt;(\u0026#34;sumOfTips\u0026#34;, Long.class, Float.class); sumOfTips = getRuntimeContext().getMapState(sumDesc); } 由于票价事件可能会不按顺序到达，所以有时需要处理一个小时的事件，然后再完成前一个小时的结果计算。事实上，如果水印延迟比窗口长度长得多，那么可能会同时打开许多窗口，而不是只有两个。本实现通过使用 MapState 来支持这一点，MapState 将每个窗口结束的时间戳映射到该窗口的提示之和。\nprocessElement() 方法 public void processElement( TaxiFare fare, Context ctx, Collector\u0026lt;Tuple3\u0026lt;Long, Long, Float\u0026gt;\u0026gt; out) throws Exception { long eventTime = fare.getEventTime(); TimerService timerService = ctx.timerService(); if (eventTime \u0026lt;= timerService.currentWatermark()) { // This event is late; its window has already been triggered.  } else { // Round up eventTime to the end of the window containing this event.  long endOfWindow = (eventTime - (eventTime % durationMsec) + durationMsec - 1); // Schedule a callback for when the window has been completed.  timerService.registerEventTimeTimer(endOfWindow); // Add this fare\u0026#39;s tip to the running total for that window.  Float sum = sumOfTips.get(endOfWindow); if (sum == null) { sum = 0.0F; } sum += fare.tip; sumOfTips.put(endOfWindow, sum); } } 要考虑的事情:\n  迟到的事件会怎样？在水印后面的事件（即迟到）会被丢弃。如果你想做一些比这更好的事情，可以考虑使用侧输出，这将在下一节解释。\n  这个例子使用了一个 MapState，其中键是时间戳，并为同一个时间戳设置一个 Timer。这是一种常见的模式；它使得在定时器发射时查找相关信息变得简单而高效。\n  onTimer() 方法 public void onTimer( long timestamp, OnTimerContext context, Collector\u0026lt;Tuple3\u0026lt;Long, Long, Float\u0026gt;\u0026gt; out) throws Exception { long driverId = context.getCurrentKey(); // Look up the result for the hour that just ended.  Float sumOfTips = this.sumOfTips.get(timestamp); Tuple3\u0026lt;Long, Long, Float\u0026gt; result = Tuple3.of(driverId, timestamp, sumOfTips); out.collect(result); this.sumOfTips.remove(timestamp); } 观察:\n  传递给 onTimer 的 OnTimerContext 上下文可以用来确定当前的键。\n  我们的伪窗口是在当前水印到达每个小时结束时被触发的，此时调用 onTimer。这个 onTimer 方法从 sumOfTips 中删除了相关的条目，这样做的效果是无法容纳迟到的事件。这相当于在使用 Flink 的时间窗口时，将 allowLateness 设置为零。\n  性能方面的考虑 Flink 提供了针对 RocksDB 优化的 MapState 和 ListState 类型。在可能的情况下，应该使用这些类型来代替持有某种集合的 ValueState 对象。RocksDB 状态后端可以追加到 ListState，而不需要经过(去)序列化，对于 MapState，每个键/值对都是一个单独的 RocksDB 对象，因此 MapState 可以有效地被访问和更新。\n侧输出 介绍 有几个很好的理由可以让 Flink operator 有一个以上的输出流，比如报告:\n 异常 畸形事件 迟到事件 操作警报，如与外部服务的连接超时。  侧输出是一种方便的方式。除了错误报告，侧输出也是实现流的多路分割的好方法。\n例子 现在，您可以对上一节中被忽略的迟到事件做些什么了。\n一个侧输出通道与一个 OutputTag\u0026lt;T\u0026gt; 相关联。这些标签具有与侧输出的 DataStream 的类型相对应的通用类型，它们有名称。\nprivate static final OutputTag\u0026lt;TaxiFare\u0026gt; lateFares = new OutputTag\u0026lt;TaxiFare\u0026gt;(\u0026#34;lateFares\u0026#34;) {}; 上面展示的是一个静态的 OutputTag\u0026lt;TaxiFare\u0026gt;，它既可以在 PseudoWindow 的 processElement 方法中发出迟到事件时被引用。\nif (eventTime \u0026lt;= timerService.currentWatermark()) { // This event is late; its window has already been triggered.  ctx.output(lateFares, fare); } else { . . . } 并在访问这一侧输出的流时，在作业的 main 方法中输出:\n// compute the sum of the tips per hour for each driver SingleOutputStreamOperator hourlyTips = fares .keyBy((TaxiFare fare) -\u0026gt; fare.driverId) .process(new PseudoWindow(Time.hours(1))); hourlyTips.getSideOutput(lateFares).print(); 或者，您可以使用两个具有相同名称的 OutputTags 来引用同一侧面输出，但如果您这样做，它们必须具有相同的类型。\n结束语 在这个例子中，你已经看到了如何使用 ProcessFunction 来重新实现一个直接的时间窗口。当然，如果 Flink 内置的窗口 API 满足你的需求，无论如何，请继续使用它。但如果你发现自己在考虑用 Flink 的窗口做一些变形，不要害怕推出自己的窗口。\n此外，ProcessFunction 对于计算分析之外的许多其他用例也很有用。下面的实践练习提供了一个完全不同的例子。\nProcessFunction 的另一个常见用例是用于过期的陈旧状态。如果你回想一下 Rides 和 Fares 练习，其中使用 RichCoFlatMapFunction 来计算一个简单的连接，示例解决方案假设 TaxiRides 和 TaxiFares 是完美匹配的，每个 rideId 是一对一的。如果一个事件丢失了，同一乘车 ID 的其他事件将永远保持在状态。这可以替换为一个 KeyedCoProcessFunction 来实现，并且可以使用一个定时器来检测和清除任何陈旧的状态。\n实践 与本节配套的实战练习是 Long Ride Alerts 练习。\n进一步阅读  ProcessFunction 侧输出  "},"name":"事件驱动型应用程序","published":"2020-08-19T00:00:00+08:00","summary":"Event-driven Applications","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-19-event-driven-applications/"},{"content":{"html":"\u003ch2 id=\"本次培训的目标和范围\"\u003e本次培训的目标和范围\u003c/h2\u003e\n\u003cp\u003e本培训介绍了 Apache Flink，包括足够的内容让你开始编写可扩展的流式 ETL，分析和事件驱动的应用程序，同时省略了很多（最终重要的）细节。本书的重点是为 Flink 管理状态和时间的 API 提供直接的介绍，希望在掌握了这些基础知识后，你能更好地从更详细的参考文档中获取其余需要了解的内容。每一节末尾的链接将引导你到可以学习更多知识的地方。\u003c/p\u003e\n\u003cp\u003e具体来说，您将学习:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如何实现流数据处理管道\u003c/li\u003e\n\u003cli\u003eFlink 如何以及为何管理状态\u003c/li\u003e\n\u003cli\u003e如何使用事件时间来持续计算准确的分析结果？\u003c/li\u003e\n\u003cli\u003e如何在连续流上构建事件驱动的应用程序？\u003c/li\u003e\n\u003cli\u003eFlink 是如何提供具有精确只读语义的容错、有状态的流处理的？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e本培训主要介绍四个关键概念：流数据的连续处理、事件时间、有状态的流处理和状态快照。本页介绍了这些概念。\u003c/p\u003e\n\u003cp\u003e注: 伴随本培训的是一套实践练习，它将指导您学习如何使用所介绍的概念。每一节的最后都提供了相关练习的链接。\u003c/p\u003e\n\u003ch2 id=\"流处理\"\u003e流处理\u003c/h2\u003e\n\u003cp\u003e流是数据的天然栖息地。无论是来自网络服务器的事件，还是来自股票交易所的交易，或者是来自工厂车间机器的传感器读数，数据都是作为流的一部分被创建的。但当你分析数据时，你可以围绕有界流或无界流组织处理，而你选择哪种范式会产生深远的影响。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/bounded-unbounded.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e当你处理一个有边界的数据流时，\u003cstrong\u003e批处理\u003c/strong\u003e是工作的范式。在这种操作模式下，你可以选择在产生任何结果之前摄取整个数据集，这意味着，例如，可以对数据进行排序，计算全局统计，或产生一个汇总所有输入的最终报告。\u003c/p\u003e\n\u003cp\u003e另一方面，\u003cstrong\u003e流处理\u003c/strong\u003e涉及无边界的数据流。至少在概念上，输入可能永远不会结束，因此你不得不在数据到达时持续处理数据。\u003c/p\u003e\n\u003cp\u003e在 Flink 中，应用程序由\u003cstrong\u003e流式数据流\u003c/strong\u003e组成，这些数据流可以通过用户定义的\u003cstrong\u003e运算符\u003c/strong\u003e进行转换。这些数据流形成有向图，从一个或多个源开始，到一个或多个 sink 结束。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/program_dataflow.svg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e通常，程序中的变换(transformation)和数据流(dataflow)中的运算符(operator)之间存在一对一的对应关系。但有时，一个变换可能由多个运算符(operator)组成。\u003c/p\u003e\n\u003cp\u003e一个应用程序可能会消耗来自流式源的实时数据，如消息队列或分布式日志，如 Apache Kafka 或 Kinesis。但 Flink 也可以消耗来自各种数据源的有界历史数据。同样，Flink 应用正在产生的结果流也可以被发送到各种各样的系统，这些系统可以作为 sink 连接。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/flink-application-sources-sinks.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch3 id=\"并行数据流\"\u003e并行数据流\u003c/h3\u003e\n\u003cp\u003eFlink 中的程序本质上是并行和分布式的。在执行过程中，一个流有一个或多个流分区(\u003cstrong\u003estream partitions\u003c/strong\u003e)，每个运算符(operator)有一个或多个运算符子任务(\u003cstrong\u003eoperator subtasks\u003c/strong\u003e)。运算符子任务(\u003cstrong\u003eoperator subtasks\u003c/strong\u003e)相互独立，在不同的线程中执行，也可能在不同的机器或容器上执行。\u003c/p\u003e\n\u003cp\u003e运算符符子任务(\u003cstrong\u003eoperator subtasks\u003c/strong\u003e)的数量就是该特定运算符(operator)的并行度(\u003cstrong\u003eparallelism\u003c/strong\u003e)。同一程序的不同运算符可能具有不同的并行度水平。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/parallel_dataflow.svg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e流可以在两个运算符之间以一对一（或转发）的模式或以重分发的模式传输数据。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e一对一的流（例如上图中 Source 和 map() 运算符之间）保留了元素的分区和排序。这意味着 map() 运算符的 subtask[1] 将看到与 Source 运算符的 subtask[1] 所产生的元素顺序相同的元素。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e重新分发流（如上面 map() 和 keyBy/window 之间，以及 keyBy/window 和 Sink 之间）会改变流的分区。每个运算符子任务(operator subtask)都会根据所选的转换将数据发送到不同的目标子任务。例如 keyBy()（通过散列键来重新分区）、broadcast() 或 rebalance()（随机重新分区）。在重分发交换中，元素之间的排序只在每一对发送和接收子任务中被保留（例如，map() 的 subtask[1] 和 keyBy/window 的 subtask[2]）。因此，例如，上面显示的 keyBy/window 和 Sink 运算符之间的重新分发，引入了关于不同键的聚合结果到达 Sink 的顺序的非确定性。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"及时的流处理\"\u003e及时的流处理\u003c/h2\u003e\n\u003cp\u003e对于大多数流式应用来说，能够用处理实时数据的相同代码重新处理历史数据是非常有价值的\u0026ndash;无论如何，都能产生确定性的、一致的结果。\u003c/p\u003e\n\u003cp\u003e此外，关注事件发生的顺序，而不是事件交付处理的顺序，并且能够推理出一组事件何时（或应该）完成也是至关重要的。例如，考虑电子商务交易，或金融贸易中涉及的一系列事件。\u003c/p\u003e\n\u003cp\u003e通过使用记录在数据流中的事件时间戳，而不是使用处理数据的机器的时钟，可以满足这些及时流处理的要求。\u003c/p\u003e\n\u003ch2 id=\"有状态的流处理\"\u003e有状态的流处理\u003c/h2\u003e\n\u003cp\u003eFlink 的操作可以是有状态的。这意味着一个事件的处理方式可以取决于之前所有事件的累积效果。状态可以用于一些简单的事情，例如计算每分钟的事件以显示在仪表板上，或者用于一些更复杂的事情，例如计算欺诈检测模型的功能。\u003c/p\u003e\n\u003cp\u003e一个 Flink 应用是在分布式集群上并行运行的。一个给定的运算符的各种并行实例将以不同的线程独立执行，一般来说，它们将在不同的机器上运行。\u003c/p\u003e\n\u003cp\u003e一个有状态运算符的并行实例集实际上是一个分片的键值存储。每一个并行实例负责处理一组特定键的事件，这些键的状态被保存在本地。\u003c/p\u003e\n\u003cp\u003e下图显示了一个作业(Job)，在作业图(job graph)中的前三个运算符上运行的并行度为2，终止于一个并行度为 1 的 sink。第三个运算符是有状态的，你可以看到在第二个和第三个运算符之间发生了一个完全连接的网络洗牌。这是在通过一些键来对流进行分区，这样所有需要一起处理的事件，都会被一起处理。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/parallel-job.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e状态总是在本地访问，这有助于 Flink 应用实现高吞吐量和低延迟。你可以选择将状态保存在 JVM 堆上，如果状态太大，也可以将其保存在有效组织的磁盘数据结构中。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/local-state.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch2 id=\"通过状态快照进行容错\"\u003e通过状态快照进行容错\u003c/h2\u003e\n\u003cp\u003eFlink 能够通过状态快照和流重放的组合，提供容错、精确的一次性语义。这些快照捕获了分布式管道的整个状态，记录了进入输入队列的偏移以及整个作业图(job graph)中因摄取了该点数据而产生的状态。当发生故障时，源会被重放，状态被恢复，并恢复处理。如上所述，这些状态快照是异步捕获的，不会妨碍正在进行的处理。\u003c/p\u003e\n","text":"本次培训的目标和范围 本培训介绍了 Apache Flink，包括足够的内容让你开始编写可扩展的流式 ETL，分析和事件驱动的应用程序，同时省略了很多（最终重要的）细节。本书的重点是为 Flink 管理状态和时间的 API 提供直接的介绍，希望在掌握了这些基础知识后，你能更好地从更详细的参考文档中获取其余需要了解的内容。每一节末尾的链接将引导你到可以学习更多知识的地方。\n具体来说，您将学习:\n 如何实现流数据处理管道 Flink 如何以及为何管理状态 如何使用事件时间来持续计算准确的分析结果？ 如何在连续流上构建事件驱动的应用程序？ Flink 是如何提供具有精确只读语义的容错、有状态的流处理的？  本培训主要介绍四个关键概念：流数据的连续处理、事件时间、有状态的流处理和状态快照。本页介绍了这些概念。\n注: 伴随本培训的是一套实践练习，它将指导您学习如何使用所介绍的概念。每一节的最后都提供了相关练习的链接。\n流处理 流是数据的天然栖息地。无论是来自网络服务器的事件，还是来自股票交易所的交易，或者是来自工厂车间机器的传感器读数，数据都是作为流的一部分被创建的。但当你分析数据时，你可以围绕有界流或无界流组织处理，而你选择哪种范式会产生深远的影响。\n当你处理一个有边界的数据流时，批处理是工作的范式。在这种操作模式下，你可以选择在产生任何结果之前摄取整个数据集，这意味着，例如，可以对数据进行排序，计算全局统计，或产生一个汇总所有输入的最终报告。\n另一方面，流处理涉及无边界的数据流。至少在概念上，输入可能永远不会结束，因此你不得不在数据到达时持续处理数据。\n在 Flink 中，应用程序由流式数据流组成，这些数据流可以通过用户定义的运算符进行转换。这些数据流形成有向图，从一个或多个源开始，到一个或多个 sink 结束。\n通常，程序中的变换(transformation)和数据流(dataflow)中的运算符(operator)之间存在一对一的对应关系。但有时，一个变换可能由多个运算符(operator)组成。\n一个应用程序可能会消耗来自流式源的实时数据，如消息队列或分布式日志，如 Apache Kafka 或 Kinesis。但 Flink 也可以消耗来自各种数据源的有界历史数据。同样，Flink 应用正在产生的结果流也可以被发送到各种各样的系统，这些系统可以作为 sink 连接。\n并行数据流 Flink 中的程序本质上是并行和分布式的。在执行过程中，一个流有一个或多个流分区(stream partitions)，每个运算符(operator)有一个或多个运算符子任务(operator subtasks)。运算符子任务(operator subtasks)相互独立，在不同的线程中执行，也可能在不同的机器或容器上执行。\n运算符符子任务(operator subtasks)的数量就是该特定运算符(operator)的并行度(parallelism)。同一程序的不同运算符可能具有不同的并行度水平。\n流可以在两个运算符之间以一对一（或转发）的模式或以重分发的模式传输数据。\n  一对一的流（例如上图中 Source 和 map() 运算符之间）保留了元素的分区和排序。这意味着 map() 运算符的 subtask[1] 将看到与 Source 运算符的 subtask[1] 所产生的元素顺序相同的元素。\n  重新分发流（如上面 map() 和 keyBy/window 之间，以及 keyBy/window 和 Sink 之间）会改变流的分区。每个运算符子任务(operator subtask)都会根据所选的转换将数据发送到不同的目标子任务。例如 keyBy()（通过散列键来重新分区）、broadcast() 或 rebalance()（随机重新分区）。在重分发交换中，元素之间的排序只在每一对发送和接收子任务中被保留（例如，map() 的 subtask[1] 和 keyBy/window 的 subtask[2]）。因此，例如，上面显示的 keyBy/window 和 Sink 运算符之间的重新分发，引入了关于不同键的聚合结果到达 Sink 的顺序的非确定性。\n  及时的流处理 对于大多数流式应用来说，能够用处理实时数据的相同代码重新处理历史数据是非常有价值的\u0026ndash;无论如何，都能产生确定性的、一致的结果。\n此外，关注事件发生的顺序，而不是事件交付处理的顺序，并且能够推理出一组事件何时（或应该）完成也是至关重要的。例如，考虑电子商务交易，或金融贸易中涉及的一系列事件。\n通过使用记录在数据流中的事件时间戳，而不是使用处理数据的机器的时钟，可以满足这些及时流处理的要求。\n有状态的流处理 Flink 的操作可以是有状态的。这意味着一个事件的处理方式可以取决于之前所有事件的累积效果。状态可以用于一些简单的事情，例如计算每分钟的事件以显示在仪表板上，或者用于一些更复杂的事情，例如计算欺诈检测模型的功能。\n一个 Flink 应用是在分布式集群上并行运行的。一个给定的运算符的各种并行实例将以不同的线程独立执行，一般来说，它们将在不同的机器上运行。\n一个有状态运算符的并行实例集实际上是一个分片的键值存储。每一个并行实例负责处理一组特定键的事件，这些键的状态被保存在本地。\n下图显示了一个作业(Job)，在作业图(job graph)中的前三个运算符上运行的并行度为2，终止于一个并行度为 1 的 sink。第三个运算符是有状态的，你可以看到在第二个和第三个运算符之间发生了一个完全连接的网络洗牌。这是在通过一些键来对流进行分区，这样所有需要一起处理的事件，都会被一起处理。\n状态总是在本地访问，这有助于 Flink 应用实现高吞吐量和低延迟。你可以选择将状态保存在 JVM 堆上，如果状态太大，也可以将其保存在有效组织的磁盘数据结构中。\n通过状态快照进行容错 Flink 能够通过状态快照和流重放的组合，提供容错、精确的一次性语义。这些快照捕获了分布式管道的整个状态，记录了进入输入队列的偏移以及整个作业图(job graph)中因摄取了该点数据而产生的状态。当发生故障时，源会被重放，状态被恢复，并恢复处理。如上所述，这些状态快照是异步捕获的，不会妨碍正在进行的处理。\n"},"name":"学习 Flink: 实践培训","published":"2020-08-19T00:00:00+08:00","summary":"Learn Flink: Hands-on Training","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-19-learn-flink-hands-on-training/"},{"content":{"html":"\u003cp\u003e对于 Apache Flink 来说，一个非常常见的用例是实现 ETL（提取、转换、加载）管道，从一个或多个源中获取数据，进行一些转换和/或丰富，然后将结果存储在某个地方。在这一节中，我们将看看如何使用 Flink 的 DataStream API 来实现这种应用。\u003c/p\u003e\n\u003cp\u003e请注意，Flink的 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/\"\u003eTable 和 SQL API\u003c/a\u003e很适合许多 ETL 用例。但无论你最终是否直接使用 DataStream API，对这里介绍的基础知识有一个扎实的理解都是有价值的。\u003c/p\u003e\n\u003ch2 id=\"无状态转换\"\u003e无状态转换\u003c/h2\u003e\n\u003cp\u003e本节介绍了 map() 和 flatmap()，它们是用来实现无状态转换的基本操作。本节中的例子假设你熟悉 \u003ca href=\"https://github.com/apache/flink-training/tree/release-1.11\"\u003eflink-training\u003c/a\u003e 仓库中的实战练习中使用的出租车乘车数据。\u003c/p\u003e\n\u003ch3 id=\"map\"\u003emap()\u003c/h3\u003e\n\u003cp\u003e在第一个练习中，你过滤了一个打车事件的流，在同一个代码库中，有一个 GeoUtils 类，它提供了一个静态方法 GeoUtils.mapToGridCell(float lon, float lat)，该方法将一个 location (longitude, latitude) 映射到一个网格单元，该单元指的是一个大约100x100米大小的区域。\u003c/p\u003e\n\u003cp\u003e现在让我们通过为每个事件添加 startCell 和 endCell 字段来丰富我们的打车对象流。你可以创建一个 EnrichedRide 对象，扩展 TaxiRide，添加这些字段。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnrichedRide\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eTaxiRide\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003estartCell\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eendCell\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"nf\"\u003eEnrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"nf\"\u003eEnrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTaxiRide\u003c/span\u003e \u003cspan class=\"n\"\u003eride\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003erideId\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eride\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003erideId\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisStart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eride\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisStart\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estartCell\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGeoUtils\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emapToGridCell\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eride\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estartLon\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eride\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estartLat\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eendCell\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGeoUtils\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emapToGridCell\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eride\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eendLon\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eride\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eendLat\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"nf\"\u003etoString\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kd\"\u003esuper\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoString\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoString\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estartCell\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoString\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eendCell\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后，您可以创建一个应用程序，将流转化为:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003erides\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eTaxiRide\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddSource\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eTaxiRideSource\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eenrichedNYCRides\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eEnrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e  \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erides\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eRideCleansingSolution\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eNYCFilter\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnrichment\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eenrichedNYCRides\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用这个 MapFunction:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnrichment\u003c/span\u003e \u003cspan class=\"k\"\u003eextends\u003c/span\u003e \u003cspan class=\"nc\"\u003eMapFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eTaxiRide\u003c/span\u003e, \u003cspan class=\"kt\"\u003eEnrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etaxiRide\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eTaxiRide\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etaxiRide\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"flatmap\"\u003eflatmap()\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eMapFunction\u003c/code\u003e 只适用于执行一对一的转换：对于每一个进入的流元素，\u003ccode\u003emap()\u003c/code\u003e 将发出一个转换后的元素。否则，你将需要使用 \u003ccode\u003eflatmap()\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003erides\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eTaxiRide\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddSource\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eTaxiRideSource\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eenrichedNYCRides\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eEnrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erides\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eflatMap\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eNYCEnrichment\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eenrichedNYCRides\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e加上一个 \u003ccode\u003eFlatMapFunction\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eNYCEnrichment\u003c/span\u003e \u003cspan class=\"k\"\u003eextends\u003c/span\u003e \u003cspan class=\"nc\"\u003eFlatMapFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eTaxiRide\u003c/span\u003e, \u003cspan class=\"kt\"\u003eEnrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"n\"\u003eflatMap\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etaxiRide\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eTaxiRide\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eCollector\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eEnrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003evalid\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eFilterFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eTaxiRide\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eRideCleansing\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eNYCFilter\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalid\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etaxiRide\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecollect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etaxiRide\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e通过这个接口提供的 Collector，\u003ccode\u003eflatmap()\u003c/code\u003e 方法可以随心所欲地发射许多流元素，包括完全不发射元素。\u003c/p\u003e\n\u003ch2 id=\"keyed-streams\"\u003eKeyed Streams\u003c/h2\u003e\n\u003ch3 id=\"keyby\"\u003ekeyBy()\u003c/h3\u003e\n\u003cp\u003e通常，能够围绕一个属性对一个流进行分区是非常有用的，这样所有具有相同属性值的事件就会被归为一组。例如，假设你想找到从每个网格单元开始的最长的出租车乘车时间。从 SQL 查询的角度考虑，这意味着要对 startCell 进行某种 GROUP BY，而在 Flink 中，这是用 \u003ccode\u003ekeyBy(KeySelector)\u003c/code\u003e 来完成的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"n\"\u003erides\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eflatMap\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eNYCEnrichment\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;startCell\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e每一个 \u003ccode\u003ekeyBy\u003c/code\u003e 都会引起一次网络洗牌，对流进行重新分区。一般来说，这是很昂贵的，因为它涉及到网络通信以及序列化和反序列化。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/keyBy.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在上面的例子中，键是由一个字段名 \u0026ldquo;startCell\u0026rdquo; 指定的。这种键选择的风格有一个缺点，那就是编译器无法推断用于键选择的字段的类型，因此 Flink 会将键值作为元组传递，这可能会很笨拙。最好是使用一个正确类型的 \u003ccode\u003eKeySelector\u003c/code\u003e，例如:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"n\"\u003erides\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eflatMap\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eNYCEnrichment\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eKeySelector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEnrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n            \u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n            \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003egetKey\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eEnrichedRide\u003c/span\u003e \u003cspan class=\"n\"\u003eenrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eenrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estartCell\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以用 lambda 更简洁地表达出来。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"n\"\u003erides\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eflatMap\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eNYCEnrichment\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eenrichedRide\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eenrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estartCell\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"keys-are-computed\"\u003eKeys are computed\u003c/h3\u003e\n\u003cp\u003eKeySelectors 并不局限于从你的事件中提取一个键，相反，它们可以用任何你想要的方式来计算键，只要产生的键是确定性的，并且有有效的 \u003ccode\u003ehashCode()\u003c/code\u003e 和 \u003ccode\u003eequals()\u003c/code\u003e 的实现。这个限制排除了生成随机数，或者返回数组或枚举的 KeySelectors，但是你可以使用元组或 POJOs 来生成复合键，例如，只要它们的元素遵循这些相同的规则。\u003c/p\u003e\n\u003cp\u003e键必须以确定性的方式产生，因为每当需要它们时，它们就会被重新计算，而不是附加到流记录上。\u003c/p\u003e\n\u003cp\u003e例如，我们不是创建一个新的 \u003ccode\u003eEnrichedRide\u003c/code\u003e 类，该类有一个 \u003ccode\u003estartCell\u003c/code\u003e 字段，然后我们将其用作键:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"n\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eenrichedRide\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eenrichedRide\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estartCell\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e相反, 我们可以这样做:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"n\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eride\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nc\"\u003eGeoUtils\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emapToGridCell\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eride\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estartLon\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eride\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estartLat\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"keyed-流的聚合\"\u003eKeyed 流的聚合\u003c/h3\u003e\n\u003cp\u003e这段代码为每个 end-of-ride 事件创建一个新的元组流，其中包含 \u003ccode\u003estartCell\u003c/code\u003e 和持续时间（分钟）。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport org.joda.time.Interval;\n\nDataStream\u0026lt;Tuple2\u0026lt;Integer, Minutes\u0026gt;\u0026gt; minutesByStartCell = enrichedNYCRides\n    .flatMap(new FlatMapFunction\u0026lt;EnrichedRide, Tuple2\u0026lt;Integer, Minutes\u0026gt;\u0026gt;() {\n\n        @Override\n        public void flatMap(EnrichedRide ride,\n                            Collector\u0026lt;Tuple2\u0026lt;Integer, Minutes\u0026gt;\u0026gt; out) throws Exception {\n            if (!ride.isStart) {\n                Interval rideInterval = new Interval(ride.startTime, ride.endTime);\n                Minutes duration = rideInterval.toDuration().toStandardMinutes();\n                out.collect(new Tuple2\u0026lt;\u0026gt;(ride.startCell, duration));\n            }\n        }\n    });\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e现在可以产生一个流，其中只包含那些对每个 \u003ccode\u003estartCell\u003c/code\u003e 来说是有史以来（至此）最长的乘车记录。\u003c/p\u003e\n\u003cp\u003e有多种方式可以表达作为键的字段。之前你看到了一个 EnrichedRide POJO 的例子，在这个例子中，要用作键的字段是用它的名字指定的。这个例子涉及到 Tuple2 对象，元组中的索引（从0开始）被用来指定键。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"n\"\u003eminutesByStartCell\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// startCell\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emaxBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// duration\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在，每当持续时间达到一个新的最大值时，输出流就会包含一个针对每个键的记录\u0026ndash;如这里的50797单元格所示。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e...\n4\u0026gt; (64549,5M)\n4\u0026gt; (46298,18M)\n1\u0026gt; (51549,14M)\n1\u0026gt; (53043,13M)\n1\u0026gt; (56031,22M)\n1\u0026gt; (50797,6M)\n...\n1\u0026gt; (50797,8M)\n...\n1\u0026gt; (50797,11M)\n...\n1\u0026gt; (50797,12M)\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"implicit-state\"\u003e(Implicit) State\u003c/h3\u003e\n\u003cp\u003e这是本次训练中第一个涉及有状态流的例子。虽然状态被透明地处理，但 Flink 必须跟踪每个不同键的最大持续时间。\u003c/p\u003e\n\u003cp\u003e每当状态涉及到你的应用时，你应该考虑状态可能会变得多大。每当键空间是无限制的，那么 Flink 需要的状态量也是无限制的。\u003c/p\u003e\n\u003cp\u003e当处理流时，一般来说，在有限的窗口上考虑聚合比在整个流上考虑更有意义。\u003c/p\u003e\n\u003ch3 id=\"reduce-和其他聚合器\"\u003ereduce() 和其他聚合器\u003c/h3\u003e\n\u003cp\u003e上文中使用的 \u003ccode\u003emaxBy()\u003c/code\u003e 只是 Flink 的 KeyedStreams 上众多聚合函数中的一个例子。还有一个更通用的 \u003ccode\u003ereduce()\u003c/code\u003e 函数，你可以用它来实现自己的自定义聚合。\u003c/p\u003e\n\u003ch2 id=\"状态转换\"\u003e状态转换\u003c/h2\u003e\n\u003ch3 id=\"为什么-flink-要参与管理状态\"\u003e为什么 Flink 要参与管理状态？\u003c/h3\u003e\n\u003cp\u003e你的应用程序当然能够在没有让 Flink 参与管理状态的情况下使用状态\u0026ndash;但 Flink 为它所管理的状态提供了一些引人注目的功能。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e本地化。Flink 状态被保存在处理它的机器的本地，并且可以以内存速度被访问。\u003c/li\u003e\n\u003cli\u003e耐用。Flink 状态是容错的，即每隔一段时间就会自动检查一次，一旦失败就会恢复。\u003c/li\u003e\n\u003cli\u003e纵向可扩展。Flink 状态可以保存在嵌入式 RocksDB 实例中，通过增加更多的本地磁盘来扩展。\u003c/li\u003e\n\u003cli\u003e横向可扩展。随着集群的增长和收缩，Flink 状态会被重新分配。\u003c/li\u003e\n\u003cli\u003e可查询。Flink 状态可以通过\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/state/queryable_state.html\"\u003e可查询状态 API\u003c/a\u003e 进行外部查询。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在本节中，您将学习如何使用 Flink 的 API 管理 keyed 状态。\u003c/p\u003e\n\u003ch3 id=\"rich-函数\"\u003eRich 函数\u003c/h3\u003e\n\u003cp\u003e此时你已经看到了 Flink 的几个函数接口，包括 \u003ccode\u003eFilterFunction\u003c/code\u003e、\u003ccode\u003eMapFunction\u003c/code\u003e 和 \u003ccode\u003eFlatMapFunction\u003c/code\u003e。这些都是单一抽象方法模式的例子。\u003c/p\u003e\n\u003cp\u003e对于每一个接口，Flink 还提供了一个所谓的\u0026quot;富\u0026quot;变体，例如，\u003ccode\u003eRichFlatMapFunction\u003c/code\u003e，它有一些额外的方法，包括:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eopen(Configuration c)\u003c/li\u003e\n\u003cli\u003eclose()\u003c/li\u003e\n\u003cli\u003egetRuntimeContext()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eopen()\u003c/code\u003e 在操作符初始化期间被调用一次。这是一个加载一些静态数据的机会，或者, 例如打开一个外部服务的连接。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003egetRuntimeContext()\u003c/code\u003e 提供了对一整套潜在的有趣的东西的访问，但最值得注意的是它是如何创建和访问由 Flink 管理的状态。\u003c/p\u003e\n\u003ch3 id=\"一个带有-keyed-state-的例子\"\u003e一个带有 Keyed State 的例子\u003c/h3\u003e\n\u003cp\u003e在这个例子中，想象一下，你有一个事件流，你想去掉重复，所以你只保留每个键的第一个事件。这里有一个应用程序可以做到这一点，使用一个名为 \u003ccode\u003eDeduplicator\u003c/code\u003e 的 \u003ccode\u003eRichFlatMapFunction\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eEvent\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eStreamExecutionEnvironment\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eStreamExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n  \n    \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eaddSource\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eEventSource\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eflatMap\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eDeduplicator\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n  \n    \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eexecute\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e为了达到这个目的，Deduplicator 将需要以某种方式记住，对于每个键来说，是否已经有了该键的事件。它将使用 Flink 的 \u003cem\u003ekeyed state\u003c/em\u003e 接口来做到这一点。\u003c/p\u003e\n\u003cp\u003e当你在使用像这样的 \u003cem\u003ekeyed\u003c/em\u003e 流时，Flink 将为每个被管理的状态项目维护一个键/值存储。\u003c/p\u003e\n\u003cp\u003eFlink 支持几种不同类型的 \u003cem\u003ekeyed state\u003c/em\u003e，本例使用的是最简单的一种，即 \u003ccode\u003eValueState\u003c/code\u003e。这意味着对于每个键，Flink 将存储一个单一的对象\u0026ndash;在本例中，一个类型为 Boolean 的对象。\u003c/p\u003e\n\u003cp\u003e我们的 Deduplicator 类有两个方法：\u003ccode\u003eopen()\u003c/code\u003e 和 \u003ccode\u003eflatMap()\u003c/code\u003e。\u003ccode\u003eopen\u003c/code\u003e 方法通过定义一个 ValueStateDescriptor\u003c!-- raw HTML omitted --\u003e` 来建立对托管状态的使用。构造函数的参数为这个 \u003cem\u003ekeyed state\u003c/em\u003e 项指定了一个名称（\u0026ldquo;keyHasBeenSeen\u0026rdquo;），并提供了可用于序列化这些对象的信息（在本例中，Types.BOOLEAN）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eDeduplicator\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eRichFlatMapFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eValueState\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekeyHasBeenSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eopen\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eConfiguration\u003c/span\u003e \u003cspan class=\"n\"\u003econf\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eValueStateDescriptor\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edesc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eValueStateDescriptor\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;keyHasBeenSeen\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eBOOLEAN\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ekeyHasBeenSeen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetRuntimeContext\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetState\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edesc\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eflatMap\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCollector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekeyHasBeenSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecollect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ekeyHasBeenSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eupdate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当 \u003ccode\u003eflatMap\u003c/code\u003e 方法调用 \u003ccode\u003ekeyHasBeenSeen.value()\u003c/code\u003e 时，Flink 的运行时会在上下文中查找 key 的这块状态值，只有当它为 null 时，它才会去收集事件到输出。在这种情况下，它还会将 \u003ccode\u003ekeyHasBeenSeen\u003c/code\u003e 更新为 true。\u003c/p\u003e\n\u003cp\u003e这种访问和更新 key-partitioned 状态的机制可能看起来相当神奇，因为在我们的 Deduplicator 的实现中，key 并不是显式可见的。当 Flink 的运行时调用我们的 \u003ccode\u003eRichFlatMapFunction\u003c/code\u003e 的 \u003ccode\u003eopen\u003c/code\u003e 方法时，没有任何事件，因此那一刻上下文中没有 key。但是当它调用 \u003ccode\u003eflatMap\u003c/code\u003e 方法时，被处理的事件的 key 对运行时来说是可用的，并在幕后用于确定 Flink 的状态后端中的哪个条目被操作。\u003c/p\u003e\n\u003cp\u003e当部署到分布式集群时，会有很多这个 Deduplicator 的实例，每个实例将负责整个键空间的一个不相干子集。因此，当你看到一个 ValueState 的单项，如:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"n\"\u003eValueState\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekeyHasBeenSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e理解这不仅仅是一个单一的布尔值，而是一个分布式的、分片式的、键/值存储。\u003c/p\u003e\n\u003ch3 id=\"清除状态\"\u003e清除状态\u003c/h3\u003e\n\u003cp\u003e上面的例子有一个潜在的问题。如果键的空间是无限制的，会发生什么？Flink 是在某个地方为每一个被使用的不同键存储一个布尔的实例。如果有一个有界的键集，那么这将是很好的，但是在键集以无界的方式增长的应用中，有必要为不再需要的键清除状态。这是通过调用状态对象上的 \u003ccode\u003eclear()\u003c/code\u003e 来实现的，如:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"n\"\u003ekeyHasBeenSeen\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclear\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e例如，你可能想在给定键的一段时间不活动后这样做。当你在事件驱动的应用程序一节中学习 \u003ccode\u003eProcessFunction\u003c/code\u003e 时，你将看到如何使用 \u003ccode\u003eTimer\u003c/code\u003e 来实现这一点。\u003c/p\u003e\n\u003cp\u003e此外，还有一个\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/state/state.html#state-time-to-live-ttl\"\u003e状态存活时间(TTL)\u003c/a\u003e选项，你可以用状态描述符来配置，指定什么时候自动清除陈旧键的状态。\u003c/p\u003e\n\u003ch3 id=\"non-keyed-state\"\u003eNon-keyed State\u003c/h3\u003e\n\u003cp\u003e也可以在 non-keyed 的上下文中使用托管状态。这有时被称为 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/state/state.html#operator-state\"\u003eoperator state\u003c/a\u003e。所涉及的接口有些不同，由于用户定义的函数需要 non-keyed state 是不常见的，所以这里不做介绍。这个功能最常用于源和接收器(sink)的实现。\u003c/p\u003e\n\u003ch2 id=\"connected-streams\"\u003eConnected Streams\u003c/h2\u003e\n\u003cp\u003e有时不是应用这样的预定义变换:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/transformation.svg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e你希望能够动态地改变变换的某些方面\u0026ndash;通过流的阈值，或规则，或其他参数。Flink 中支持这种模式的是一种叫做连接流(connected streams)的东西，其中一个 operator 有两个输入流，就像这样:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/connected-streams.svg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e连接流也可以用来实现流式连接(streaming joins.)。\u003c/p\u003e\n\u003ch3 id=\"例子\"\u003e例子\u003c/h3\u003e\n\u003cp\u003e在这个例子中，控制流被用来指定必须从  streamOfWords 中过滤掉的单词。一个名为 ControlFunction 的 RichCoFlatMapFunction 被应用到连接的流中来完成这个任务。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eStreamExecutionEnvironment\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eStreamExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003econtrol\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efromElements\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;DROP\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;IGNORE\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estreamOfWords\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efromElements\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Apache\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;DROP\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Flink\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;IGNORE\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n  \n    \u003cspan class=\"n\"\u003econtrol\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003econnect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edatastreamOfWords\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eflatMap\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eControlFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eexecute\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，被连接的两个流必须以兼容的方式进行 keyed。keyBy 的作用是对流的数据进行分区，当 keyed 流连接时，必须以同样的方式进行分区。这样就可以保证两个流中具有相同 key 的事件都会被发送到同一个实例中。那么，这就使得将该键上的两个流连接起来成为可能，例如。\u003c/p\u003e\n\u003cp\u003e在这种情况下，两个流的类型都是 \u003ccode\u003eDataStream[String]\u003c/code\u003e，并且两个流都以字符串为键。如下所示，这个 \u003ccode\u003eRichCoFlatMapFunction\u003c/code\u003e 在  keyed state 下存储了一个布尔值，而这个布尔值是由两个流共享的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eControlFunction\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eRichCoFlatMapFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"n\"\u003eValueState\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eblocked\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n      \n    \u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eopen\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eConfiguration\u003c/span\u003e \u003cspan class=\"n\"\u003econfig\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eblocked\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetRuntimeContext\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetState\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eValueStateDescriptor\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;blocked\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n      \n    \u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eflatMap1\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003econtrol_value\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCollector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eblocked\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eupdate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eTRUE\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n      \n    \u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eflatMap2\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003edata_value\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCollector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblocked\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecollect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata_value\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRichCoFlatMapFunction 是 FlatMapFunction 的一种，它可以应用于一对连接的流，并且它可以访问富函数接口。这意味着它可以被做成有状态的。\u003c/p\u003e\n\u003cp\u003e屏蔽的(blocked)布尔正在被用来记住控制流上提到的键（在这里是单词），这些词被过滤出 streamOfWords 流。这就是 \u003cem\u003ekeyed state\u003c/em\u003e，它在两个流之间是共享的，这就是为什么两个流要共享同一个键空间。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eflatMap1\u003c/code\u003e 和 \u003ccode\u003eflatMap2\u003c/code\u003e 被 Flink 运行时调用，分别来自两个连接流的元素\u0026ndash;在我们的例子中，来自控制流的元素被传入 \u003ccode\u003eflatMap1\u003c/code\u003e，来自 \u003ccode\u003estreamOfWords\u003c/code\u003e 的元素被传入 \u003ccode\u003eflatMap2\u003c/code\u003e。这是由使用 \u003ccode\u003econtrol.connect(datastreamOfWords)\u003c/code\u003e 连接两个流的顺序决定的。\u003c/p\u003e\n\u003cp\u003e重要的是要认识到，你无法控制调用 \u003ccode\u003eflatMap1\u003c/code\u003e 和 \u003ccode\u003eflatMap2\u003c/code\u003e 回调的顺序。这两个输入流在相互竞争，Flink 运行时将对来自一个流或另一个流的事件的消耗做它想做的事。在时间和/或顺序很重要的情况下，你可能会发现有必要在托管的 Flink 状态下缓冲事件，直到你的应用程序准备好处理它们。(注意：如果你真的很绝望，可以通过使用实现 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/api/java/org/apache/flink/streaming/api/operators/InputSelectable.html\"\u003eInputSelectable\u003c/a\u003e 接口的自定义 Operator 来对双输入 operator 消耗输入的顺序进行一些有限的控制。)\u003c/p\u003e\n\u003ch2 id=\"实践\"\u003e实践\u003c/h2\u003e\n\u003cp\u003e与本节配套的实践练习是\u003ca href=\"https://github.com/apache/flink-training/tree/release-1.11/rides-and-fares\"\u003e\u0026ldquo;乘车与票价练习\u0026rdquo;\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"进一步阅读\"\u003e进一步阅读\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/#datastream-transformations\"\u003e数据流转换\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/stateful-stream-processing.html\"\u003e有状态的流处理\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","text":"对于 Apache Flink 来说，一个非常常见的用例是实现 ETL（提取、转换、加载）管道，从一个或多个源中获取数据，进行一些转换和/或丰富，然后将结果存储在某个地方。在这一节中，我们将看看如何使用 Flink 的 DataStream API 来实现这种应用。\n请注意，Flink的 Table 和 SQL API很适合许多 ETL 用例。但无论你最终是否直接使用 DataStream API，对这里介绍的基础知识有一个扎实的理解都是有价值的。\n无状态转换 本节介绍了 map() 和 flatmap()，它们是用来实现无状态转换的基本操作。本节中的例子假设你熟悉 flink-training 仓库中的实战练习中使用的出租车乘车数据。\nmap() 在第一个练习中，你过滤了一个打车事件的流，在同一个代码库中，有一个 GeoUtils 类，它提供了一个静态方法 GeoUtils.mapToGridCell(float lon, float lat)，该方法将一个 location (longitude, latitude) 映射到一个网格单元，该单元指的是一个大约100x100米大小的区域。\n现在让我们通过为每个事件添加 startCell 和 endCell 字段来丰富我们的打车对象流。你可以创建一个 EnrichedRide 对象，扩展 TaxiRide，添加这些字段。\npublic static class EnrichedRide extends TaxiRide { public int startCell; public int endCell; public EnrichedRide() {} public EnrichedRide(TaxiRide ride) { this.rideId = ride.rideId; this.isStart = ride.isStart; ... this.startCell = GeoUtils.mapToGridCell(ride.startLon, ride.startLat); this.endCell = GeoUtils.mapToGridCell(ride.endLon, ride.endLat); } public String toString() { return super.toString() + \u0026#34;,\u0026#34; + Integer.toString(this.startCell) + \u0026#34;,\u0026#34; + Integer.toString(this.endCell); } } 然后，您可以创建一个应用程序，将流转化为:\nval rides: DataStream[TaxiRide] = env.addSource(new TaxiRideSource(...)); val enrichedNYCRides: DataStream[EnrichedRide] = rides .filter(new RideCleansingSolution.NYCFilter()) .map(new Enrichment()); enrichedNYCRides.print(); 使用这个 MapFunction:\nclass Enrichment extends MapFunction[TaxiRide, EnrichedRide] { override def map(taxiRide: TaxiRide) { return new EnrichedRide(taxiRide); } } flatmap() MapFunction 只适用于执行一对一的转换：对于每一个进入的流元素，map() 将发出一个转换后的元素。否则，你将需要使用 flatmap():\nval rides: DataStream[TaxiRide] = env.addSource(new TaxiRideSource(...)); val enrichedNYCRides: DataStream[EnrichedRide] = rides .flatMap(new NYCEnrichment()); enrichedNYCRides.print(); 加上一个 FlatMapFunction:\nclass NYCEnrichment extends FlatMapFunction[TaxiRide, EnrichedRide] { override def flatMap(taxiRide: TaxiRide, out: Collector[EnrichedRide]) { val valid: FilterFunction[TaxiRide] = new RideCleansing.NYCFilter(); if (valid.filter(taxiRide)) { out.collect(new EnrichedRide(taxiRide)); } } } 通过这个接口提供的 Collector，flatmap() 方法可以随心所欲地发射许多流元素，包括完全不发射元素。\nKeyed Streams keyBy() 通常，能够围绕一个属性对一个流进行分区是非常有用的，这样所有具有相同属性值的事件就会被归为一组。例如，假设你想找到从每个网格单元开始的最长的出租车乘车时间。从 SQL 查询的角度考虑，这意味着要对 startCell 进行某种 GROUP BY，而在 Flink 中，这是用 keyBy(KeySelector) 来完成的。\nrides .flatMap(new NYCEnrichment()) .keyBy(\u0026#34;startCell\u0026#34;) 每一个 keyBy 都会引起一次网络洗牌，对流进行重新分区。一般来说，这是很昂贵的，因为它涉及到网络通信以及序列化和反序列化。\n在上面的例子中，键是由一个字段名 \u0026ldquo;startCell\u0026rdquo; 指定的。这种键选择的风格有一个缺点，那就是编译器无法推断用于键选择的字段的类型，因此 Flink 会将键值作为元组传递，这可能会很笨拙。最好是使用一个正确类型的 KeySelector，例如:\nrides .flatMap(new NYCEnrichment()) .keyBy( new KeySelector\u0026lt;EnrichedRide, int\u0026gt;() { @Override public int getKey(EnrichedRide enrichedRide) throws Exception { return enrichedRide.startCell; } }) 可以用 lambda 更简洁地表达出来。\nrides .flatMap(new NYCEnrichment()) .keyBy(enrichedRide -\u0026gt; enrichedRide.startCell) Keys are computed KeySelectors 并不局限于从你的事件中提取一个键，相反，它们可以用任何你想要的方式来计算键，只要产生的键是确定性的，并且有有效的 hashCode() 和 equals() 的实现。这个限制排除了生成随机数，或者返回数组或枚举的 KeySelectors，但是你可以使用元组或 POJOs 来生成复合键，例如，只要它们的元素遵循这些相同的规则。\n键必须以确定性的方式产生，因为每当需要它们时，它们就会被重新计算，而不是附加到流记录上。\n例如，我们不是创建一个新的 EnrichedRide 类，该类有一个 startCell 字段，然后我们将其用作键:\nkeyBy(enrichedRide -\u0026gt; enrichedRide.startCell) 相反, 我们可以这样做:\nkeyBy(ride -\u0026gt; GeoUtils.mapToGridCell(ride.startLon, ride.startLat)) Keyed 流的聚合 这段代码为每个 end-of-ride 事件创建一个新的元组流，其中包含 startCell 和持续时间（分钟）。\nimport org.joda.time.Interval; DataStream\u0026lt;Tuple2\u0026lt;Integer, Minutes\u0026gt;\u0026gt; minutesByStartCell = enrichedNYCRides .flatMap(new FlatMapFunction\u0026lt;EnrichedRide, Tuple2\u0026lt;Integer, Minutes\u0026gt;\u0026gt;() { @Override public void flatMap(EnrichedRide ride, Collector\u0026lt;Tuple2\u0026lt;Integer, Minutes\u0026gt;\u0026gt; out) throws Exception { if (!ride.isStart) { Interval rideInterval = new Interval(ride.startTime, ride.endTime); Minutes duration = rideInterval.toDuration().toStandardMinutes(); out.collect(new Tuple2\u0026lt;\u0026gt;(ride.startCell, duration)); } } }); 现在可以产生一个流，其中只包含那些对每个 startCell 来说是有史以来（至此）最长的乘车记录。\n有多种方式可以表达作为键的字段。之前你看到了一个 EnrichedRide POJO 的例子，在这个例子中，要用作键的字段是用它的名字指定的。这个例子涉及到 Tuple2 对象，元组中的索引（从0开始）被用来指定键。\nminutesByStartCell .keyBy(0) // startCell  .maxBy(1) // duration  .print(); 现在，每当持续时间达到一个新的最大值时，输出流就会包含一个针对每个键的记录\u0026ndash;如这里的50797单元格所示。\n... 4\u0026gt; (64549,5M) 4\u0026gt; (46298,18M) 1\u0026gt; (51549,14M) 1\u0026gt; (53043,13M) 1\u0026gt; (56031,22M) 1\u0026gt; (50797,6M) ... 1\u0026gt; (50797,8M) ... 1\u0026gt; (50797,11M) ... 1\u0026gt; (50797,12M) (Implicit) State 这是本次训练中第一个涉及有状态流的例子。虽然状态被透明地处理，但 Flink 必须跟踪每个不同键的最大持续时间。\n每当状态涉及到你的应用时，你应该考虑状态可能会变得多大。每当键空间是无限制的，那么 Flink 需要的状态量也是无限制的。\n当处理流时，一般来说，在有限的窗口上考虑聚合比在整个流上考虑更有意义。\nreduce() 和其他聚合器 上文中使用的 maxBy() 只是 Flink 的 KeyedStreams 上众多聚合函数中的一个例子。还有一个更通用的 reduce() 函数，你可以用它来实现自己的自定义聚合。\n状态转换 为什么 Flink 要参与管理状态？ 你的应用程序当然能够在没有让 Flink 参与管理状态的情况下使用状态\u0026ndash;但 Flink 为它所管理的状态提供了一些引人注目的功能。\n 本地化。Flink 状态被保存在处理它的机器的本地，并且可以以内存速度被访问。 耐用。Flink 状态是容错的，即每隔一段时间就会自动检查一次，一旦失败就会恢复。 纵向可扩展。Flink 状态可以保存在嵌入式 RocksDB 实例中，通过增加更多的本地磁盘来扩展。 横向可扩展。随着集群的增长和收缩，Flink 状态会被重新分配。 可查询。Flink 状态可以通过可查询状态 API 进行外部查询。  在本节中，您将学习如何使用 Flink 的 API 管理 keyed 状态。\nRich 函数 此时你已经看到了 Flink 的几个函数接口，包括 FilterFunction、MapFunction 和 FlatMapFunction。这些都是单一抽象方法模式的例子。\n对于每一个接口，Flink 还提供了一个所谓的\u0026quot;富\u0026quot;变体，例如，RichFlatMapFunction，它有一些额外的方法，包括:\n open(Configuration c) close() getRuntimeContext()  open() 在操作符初始化期间被调用一次。这是一个加载一些静态数据的机会，或者, 例如打开一个外部服务的连接。\ngetRuntimeContext() 提供了对一整套潜在的有趣的东西的访问，但最值得注意的是它是如何创建和访问由 Flink 管理的状态。\n一个带有 Keyed State 的例子 在这个例子中，想象一下，你有一个事件流，你想去掉重复，所以你只保留每个键的第一个事件。这里有一个应用程序可以做到这一点，使用一个名为 Deduplicator 的 RichFlatMapFunction:\nprivate static class Event { public final String key; public final long timestamp; ... } public static void main(String[] args) throws Exception { StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment(); env.addSource(new EventSource()) .keyBy(e -\u0026gt; e.key) .flatMap(new Deduplicator()) .print(); env.execute(); } 为了达到这个目的，Deduplicator 将需要以某种方式记住，对于每个键来说，是否已经有了该键的事件。它将使用 Flink 的 keyed state 接口来做到这一点。\n当你在使用像这样的 keyed 流时，Flink 将为每个被管理的状态项目维护一个键/值存储。\nFlink 支持几种不同类型的 keyed state，本例使用的是最简单的一种，即 ValueState。这意味着对于每个键，Flink 将存储一个单一的对象\u0026ndash;在本例中，一个类型为 Boolean 的对象。\n我们的 Deduplicator 类有两个方法：open() 和 flatMap()。open 方法通过定义一个 ValueStateDescriptor` 来建立对托管状态的使用。构造函数的参数为这个 keyed state 项指定了一个名称（\u0026ldquo;keyHasBeenSeen\u0026rdquo;），并提供了可用于序列化这些对象的信息（在本例中，Types.BOOLEAN）。\npublic static class Deduplicator extends RichFlatMapFunction\u0026lt;Event, Event\u0026gt; { ValueState\u0026lt;Boolean\u0026gt; keyHasBeenSeen; @Override public void open(Configuration conf) { ValueStateDescriptor\u0026lt;Boolean\u0026gt; desc = new ValueStateDescriptor\u0026lt;\u0026gt;(\u0026#34;keyHasBeenSeen\u0026#34;, Types.BOOLEAN); keyHasBeenSeen = getRuntimeContext().getState(desc); } @Override public void flatMap(Event event, Collector\u0026lt;Event\u0026gt; out) throws Exception { if (keyHasBeenSeen.value() == null) { out.collect(event); keyHasBeenSeen.update(true); } } } 当 flatMap 方法调用 keyHasBeenSeen.value() 时，Flink 的运行时会在上下文中查找 key 的这块状态值，只有当它为 null 时，它才会去收集事件到输出。在这种情况下，它还会将 keyHasBeenSeen 更新为 true。\n这种访问和更新 key-partitioned 状态的机制可能看起来相当神奇，因为在我们的 Deduplicator 的实现中，key 并不是显式可见的。当 Flink 的运行时调用我们的 RichFlatMapFunction 的 open 方法时，没有任何事件，因此那一刻上下文中没有 key。但是当它调用 flatMap 方法时，被处理的事件的 key 对运行时来说是可用的，并在幕后用于确定 Flink 的状态后端中的哪个条目被操作。\n当部署到分布式集群时，会有很多这个 Deduplicator 的实例，每个实例将负责整个键空间的一个不相干子集。因此，当你看到一个 ValueState 的单项，如:\nValueState\u0026lt;Boolean\u0026gt; keyHasBeenSeen; 理解这不仅仅是一个单一的布尔值，而是一个分布式的、分片式的、键/值存储。\n清除状态 上面的例子有一个潜在的问题。如果键的空间是无限制的，会发生什么？Flink 是在某个地方为每一个被使用的不同键存储一个布尔的实例。如果有一个有界的键集，那么这将是很好的，但是在键集以无界的方式增长的应用中，有必要为不再需要的键清除状态。这是通过调用状态对象上的 clear() 来实现的，如:\nkeyHasBeenSeen.clear() 例如，你可能想在给定键的一段时间不活动后这样做。当你在事件驱动的应用程序一节中学习 ProcessFunction 时，你将看到如何使用 Timer 来实现这一点。\n此外，还有一个状态存活时间(TTL)选项，你可以用状态描述符来配置，指定什么时候自动清除陈旧键的状态。\nNon-keyed State 也可以在 non-keyed 的上下文中使用托管状态。这有时被称为 operator state。所涉及的接口有些不同，由于用户定义的函数需要 non-keyed state 是不常见的，所以这里不做介绍。这个功能最常用于源和接收器(sink)的实现。\nConnected Streams 有时不是应用这样的预定义变换:\n你希望能够动态地改变变换的某些方面\u0026ndash;通过流的阈值，或规则，或其他参数。Flink 中支持这种模式的是一种叫做连接流(connected streams)的东西，其中一个 operator 有两个输入流，就像这样:\n连接流也可以用来实现流式连接(streaming joins.)。\n例子 在这个例子中，控制流被用来指定必须从 streamOfWords 中过滤掉的单词。一个名为 ControlFunction 的 RichCoFlatMapFunction 被应用到连接的流中来完成这个任务。\npublic static void main(String[] args) throws Exception { StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment(); DataStream\u0026lt;String\u0026gt; control = env.fromElements(\u0026#34;DROP\u0026#34;, \u0026#34;IGNORE\u0026#34;).keyBy(x -\u0026gt; x); DataStream\u0026lt;String\u0026gt; streamOfWords = env.fromElements(\u0026#34;Apache\u0026#34;, \u0026#34;DROP\u0026#34;, \u0026#34;Flink\u0026#34;, \u0026#34;IGNORE\u0026#34;).keyBy(x -\u0026gt; x); control .connect(datastreamOfWords) .flatMap(new ControlFunction()) .print(); env.execute(); } 注意，被连接的两个流必须以兼容的方式进行 keyed。keyBy 的作用是对流的数据进行分区，当 keyed 流连接时，必须以同样的方式进行分区。这样就可以保证两个流中具有相同 key 的事件都会被发送到同一个实例中。那么，这就使得将该键上的两个流连接起来成为可能，例如。\n在这种情况下，两个流的类型都是 DataStream[String]，并且两个流都以字符串为键。如下所示，这个 RichCoFlatMapFunction 在 keyed state 下存储了一个布尔值，而这个布尔值是由两个流共享的。\npublic static class ControlFunction extends RichCoFlatMapFunction\u0026lt;String, String, String\u0026gt; { private ValueState\u0026lt;Boolean\u0026gt; blocked; @Override public void open(Configuration config) { blocked = getRuntimeContext().getState(new ValueStateDescriptor\u0026lt;\u0026gt;(\u0026#34;blocked\u0026#34;, Boolean.class)); } @Override public void flatMap1(String control_value, Collector\u0026lt;String\u0026gt; out) throws Exception { blocked.update(Boolean.TRUE); } @Override public void flatMap2(String data_value, Collector\u0026lt;String\u0026gt; out) throws Exception { if (blocked.value() == null) { out.collect(data_value); } } } RichCoFlatMapFunction 是 FlatMapFunction 的一种，它可以应用于一对连接的流，并且它可以访问富函数接口。这意味着它可以被做成有状态的。\n屏蔽的(blocked)布尔正在被用来记住控制流上提到的键（在这里是单词），这些词被过滤出 streamOfWords 流。这就是 keyed state，它在两个流之间是共享的，这就是为什么两个流要共享同一个键空间。\nflatMap1 和 flatMap2 被 Flink 运行时调用，分别来自两个连接流的元素\u0026ndash;在我们的例子中，来自控制流的元素被传入 flatMap1，来自 streamOfWords 的元素被传入 flatMap2。这是由使用 control.connect(datastreamOfWords) 连接两个流的顺序决定的。\n重要的是要认识到，你无法控制调用 flatMap1 和 flatMap2 回调的顺序。这两个输入流在相互竞争，Flink 运行时将对来自一个流或另一个流的事件的消耗做它想做的事。在时间和/或顺序很重要的情况下，你可能会发现有必要在托管的 Flink 状态下缓冲事件，直到你的应用程序准备好处理它们。(注意：如果你真的很绝望，可以通过使用实现 InputSelectable 接口的自定义 Operator 来对双输入 operator 消耗输入的顺序进行一些有限的控制。)\n实践 与本节配套的实践练习是\u0026ldquo;乘车与票价练习\u0026rdquo;。\n进一步阅读  数据流转换 有状态的流处理  "},"name":"数据管道和 ETL","published":"2020-08-19T00:00:00+08:00","summary":"Data Pipelines \u0026amp; ETL","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-19-data-pipelines-and-etl/"},{"content":{"html":"\u003ch2 id=\"event-time-和-watermarks\"\u003eEvent Time 和 Watermarks\u003c/h2\u003e\n\u003ch3 id=\"介绍\"\u003e介绍\u003c/h3\u003e\n\u003cp\u003eFlink 明确支持三种不同的时间概念。\u003c/p\u003e\n\u003cp\u003e事件时间：事件发生的时间，由产生（或存储）该事件的设备记录的时间\u003c/p\u003e\n\u003cp\u003e摄取时间：Flink 在摄取事件时记录的时间戳。\u003c/p\u003e\n\u003cp\u003e处理时间：您的管道中的特定 operator 处理事件的时间。\u003c/p\u003e\n\u003cp\u003e为了获得可重复的结果，例如，在计算某一天股票在交易的第一个小时内达到的最高价格时，您应该使用事件时间(event time)。这样一来，结果就不会依赖于计算的时间。这种实时应用有时会使用处理时间(processing time)，但这样一来，结果就会由该小时内恰好处理的事件决定，而不是由当时发生的事件决定。基于处理时间的计算分析会导致不一致，并使重新分析历史数据或测试新的实现变得困难。\u003c/p\u003e\n\u003ch3 id=\"使用事件时间\"\u003e使用事件时间\u003c/h3\u003e\n\u003cp\u003e默认情况下，Flink 将使用处理时间(processing time)。要改变这一点，您可以设置时间特性(Time Characteristic)。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eStreamExecutionEnvironment\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eStreamExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetStreamTimeCharacteristic\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTimeCharacteristic\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eEventTime\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你想使用事件时间，你还需要提供一个时间戳提取器和水印生成器，Flink 将使用它们来跟踪事件时间的进展。这将在下面的\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/streaming_analytics.html#working-with-watermarks\"\u003e\u0026ldquo;使用水印\u0026rdquo;\u003c/a\u003e一节中介绍，但首先我们应该解释一下什么是水印。\u003c/p\u003e\n\u003ch3 id=\"水印\"\u003e水印\u003c/h3\u003e\n\u003cp\u003e让我们通过一个简单的例子来说明为什么需要水印，以及它们是如何工作的。\u003c/p\u003e\n\u003cp\u003e在这个例子中，你有一个带时间戳的事件流，这些事件的到达顺序有些混乱，如下所示。显示的数字是时间戳，表示这些事件实际发生的时间。第一个到达的事件发生在时间 4，随后是更早发生的事件，在时间 2，以此类推。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e··· 23 19 22 24 21 14 17 13 12 15 9 11 7 2 4 →\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e现在想象一下，你正在尝试创建一个流排序器(stream sorter)。这个应用程序的目的是处理流中的每个事件，并发出一个新的流，其中包含相同的事件，但按时间戳排序。\u003c/p\u003e\n\u003cp\u003e一些观察:\u003c/p\u003e\n\u003cp\u003e(1)你的流排序器看到的第一个元素是 4， 但你不能马上把它作为排序流的第一个元素释放出来。它可能已经不按顺序到达，而更早的事件可能还没有到达。事实上，你对这个流的未来有一些神一样的知识，你可以看到，你的流排序器至少应该等到 2 到达后再产生任何结果。\u003c/p\u003e\n\u003cp\u003e一些缓冲，和一些延迟，是必要的。\u003c/p\u003e\n\u003cp\u003e(2)如果你做错了，你可能最终会永远等待。首先，排序器看到了一个来自时间 4 的事件，然后是一个来自时间 2 的事件。一个时间戳小于 2 的事件会不会永远到达？也许会，也许不会。也许不会。你可以永远等待，永远看不到 1。\u003c/p\u003e\n\u003cp\u003e最终你必须鼓起勇气，发出 2 作为排序流的开始。\u003c/p\u003e\n\u003cp\u003e(3)那么你需要的是某种策略，它定义了对于任何给定的时间戳事件，何时停止等待早期事件的到来。\u003c/p\u003e\n\u003cp\u003e这正是水印的作用\u0026ndash;它们定义了何时停止等待早期(earlier)事件。\u003c/p\u003e\n\u003cp\u003eFlink 中的事件时间处理依赖于水印生成器，这些水印生成器将特殊的时间戳元素插入到流中，称为水印。时间 t 的水印是一种断言，即到时间 t 为止，流现在（可能）是完整的。\u003c/p\u003e\n\u003cp\u003e这个流排序器应该在什么时候停止等待，并推出2开始排序流？当一个时间戳为 2，或更大的水印到达时。\u003c/p\u003e\n\u003cp\u003e(4)你可以想象不同的策略来决定如何生成水印。\u003c/p\u003e\n\u003cp\u003e每一个事件都是在一些延迟之后到达的，而这些延迟是不同的，所以一些事件的延迟比其他事件更多。一个简单的方法是假设这些延迟被某个最大延迟所约束。Flink 将这种策略称为有界无序水印。很容易想象更复杂的水印方法，但对于大多数应用来说，固定的延迟已经足够好了。\u003c/p\u003e\n\u003ch3 id=\"延迟与完整性\"\u003e延迟与完整性\u003c/h3\u003e\n\u003cp\u003e关于水印的另一种思考方式是，水印让你这个流式应用的开发者能够控制延迟和完整性之间的权衡。与批处理不同的是，在批处理中，人们可以在产生任何结果之前完全了解输入，而在流式处理中，你最终必须停止等待看到更多的输入，并产生某种结果。\u003c/p\u003e\n\u003cp\u003e你可以积极地配置你的水印，用一个很短的延迟，从而承担在对输入不完全了解的情况下产生结果的风险\u0026ndash;也就是说，一个可能是错误的结果，很快就产生了。或者你可以等待更长时间，并利用对输入流更完整的知识产生结果。\u003c/p\u003e\n\u003cp\u003e也可以实现混合解决方案，快速生成初始结果，然后在处理额外（后期）数据时对这些结果进行更新。对于某些应用来说，这是一种很好的方法。\u003c/p\u003e\n\u003ch3 id=\"延迟\"\u003e延迟\u003c/h3\u003e\n\u003cp\u003e迟到的定义是相对于水印而言的。水印(t)声明流在时间t之前是完整的；在这个水印之后的任何事件，如果时间戳 ≤t，则为延迟。\u003c/p\u003e\n\u003ch3 id=\"使用水印\"\u003e使用水印\u003c/h3\u003e\n\u003cp\u003e为了执行基于事件时间的事件处理，Flink 需要知道与每个事件相关联的时间，还需要流包含水印。\u003c/p\u003e\n\u003cp\u003e实践练习中使用的 Taxi 数据源为你处理了这些细节。但在你自己的应用程序中，你必须自己处理这些事情，通常是通过实现一个类来实现，该类从事件中提取时间戳，并按需生成水印。最简单的方法是使用 WatermarkStrategy:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"n\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estream\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eWatermarkStrategy\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estrategy\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eWatermarkStrategy\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eforBoundedOutOfOrderness\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eofSeconds\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e20\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewithTimestampAssigner\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ewithTimestampsAndWatermarks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eassignTimestampsAndWatermarks\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estrategy\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"窗口\"\u003e窗口\u003c/h2\u003e\n\u003cp\u003eFlink 具有非常有表现力的窗口语义。\u003c/p\u003e\n\u003cp\u003e在本节中，你将学习\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如何使用窗口来计算无边界流的聚合。\u003c/li\u003e\n\u003cli\u003eFlink 支持哪些类型的窗口，以及\u003c/li\u003e\n\u003cli\u003e如何实现一个窗口化聚合的 DataStream 程序？\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"介绍-1\"\u003e介绍\u003c/h3\u003e\n\u003cp\u003e在做流处理的时候，自然而然地想要计算流的有界子集的聚合分析，以回答这样的问题。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e每分钟的页面浏览量\u003c/li\u003e\n\u003cli\u003e每个用户每周会话数\u003c/li\u003e\n\u003cli\u003e每个传感器每分钟的最高温度\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e用 Flink 计算窗口化分析依赖于两个主要的抽象。窗口分配器（Window Assigners）将事件分配给窗口（必要时创建新的窗口对象），窗口函数（Window Functions）应用于分配给窗口的事件。\u003c/p\u003e\n\u003cp\u003eFlink 的窗口 API 还有 Triggers 的概念，它决定什么时候调用窗口函数，还有 Evictors，它可以删除窗口中收集的元素。\u003c/p\u003e\n\u003cp\u003e在它的基本形式中，你将窗口化应用到像这样的 keyed stream 中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e \u003cspan class=\"n\"\u003eselector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewindow\u003c/span\u003e \u003cspan class=\"n\"\u003eassigner\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereduce\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eaggregate\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewindow\u003c/span\u003e \u003cspan class=\"n\"\u003efunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e您也可以对 non-keyed stream 使用窗口化，但请记住，在这种情况下，处理将不会并行进行。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewindowAll\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewindow\u003c/span\u003e \u003cspan class=\"n\"\u003eassigner\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereduce\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eaggregate\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewindow\u003c/span\u003e \u003cspan class=\"n\"\u003efunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"窗口分配器\"\u003e窗口分配器\u003c/h3\u003e\n\u003cp\u003eFlink 有几种内置的窗口分配器类型，下面进行说明。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/window-assigners.svg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e一些例子说明这些窗口分配器的用途，以及如何指定它们:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e滚动时间窗口\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e每分钟浏览量\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTumblingEventTimeWindows.of(Time.minutes(1))\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e滑动时间窗口\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e每10秒计算的每分钟页面浏览量\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSlidingEventTimeWindows.of(Time.min(1), Time.seconds(10))\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e会话窗口\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e每节课的页面浏览量，其中每节课之间至少有30分钟的间隔。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEventTimeSessionWindows.withGap(Time.minutes(30))\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e可以使用 Time.milliseconds(n), Time.seconds(n), Time.minutes(n), Time.hours(n), 和 Time.days(n) 中的一种指定持续时间。\u003c/p\u003e\n\u003cp\u003e基于时间的窗口分配器（包括会话窗口）有事件时间(event time)和处理时间(processing time)两种风味。这两种类型的时间窗口之间有显著的权衡。对于处理时间窗口，你必须接受这些限制:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不能正确处理历史数据。\u003c/li\u003e\n\u003cli\u003e不能正确处理失序数据。\u003c/li\u003e\n\u003cli\u003e结果将是非确定性的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e但具有较低延迟的优势。\u003c/p\u003e\n\u003cp\u003e当使用基于计数的窗口时，请记住，这些窗口将不会启动，直到一个批次完成。没有超时和处理部分窗口的选项，尽管你可以用自定义的触发器自己实现这种行为。\u003c/p\u003e\n\u003cp\u003e全局窗口分配器将每个事件（用相同的键）分配到同一个全局窗口。只有当你打算使用自定义触发器来做你自己的自定义窗口时，这才是有用的。在许多看似有用的情况下，您最好使用\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/event_driven.html#process-functions\"\u003e另一节\u003c/a\u003e中描述的 ProcessFunction。\u003c/p\u003e\n\u003ch3 id=\"窗口函数\"\u003e窗口函数\u003c/h3\u003e\n\u003cp\u003e对于如何处理窗口的内容，您有三个基本选项。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e作为一个批次，使用一个 ProcessWindowFunction，它将被传递一个包含窗口内容的 Iterable。\u003c/li\u003e\n\u003cli\u003e以增量方式，使用 ReduceFunction 或 AggregateFunction，当每个事件被分配到窗口时被调用。\u003c/li\u003e\n\u003cli\u003e或两者结合，当窗口被触发时，ReduceFunction 或 AggregateFunction 的预聚集结果被提供给 ProcessWindowFunction。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这里是方法1和3的例子。每个实现都在1分钟的事件时间窗口中从每个传感器中找到峰值值，并产生一个包含(key, end-of-window-timestamp, max_value) 的 Tuples 流。\u003c/p\u003e\n\u003ch4 id=\"processwindowfunction-示例\"\u003eProcessWindowFunction 示例\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"n\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003einput\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTumblingEventTimeWindows\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eof\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eminutes\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eMyWastefulMax\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyWastefulMax\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eProcessWindowFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e                  \u003cspan class=\"c1\"\u003e// input type\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// output type\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e                         \u003cspan class=\"c1\"\u003e// key type\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003eTimeWindow\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e                   \u003cspan class=\"c1\"\u003e// window type\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \n    \u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \n            \u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eevents\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eCollector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eevents\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emax\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecollect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eof\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetEnd\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个实现中，有几件事需要注意。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e所有分配给窗口的事件都必须在 keyed Flink state 下被缓冲，直到窗口被触发。这可能是相当昂贵的。\u003c/li\u003e\n\u003cli\u003e我们的 ProcessWindowFunction 被传递了一个 Context 对象，其中包含了窗口的信息。它的接口是这样的:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eContext\u003c/span\u003e \u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e \u003cspan class=\"n\"\u003ejava\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eio\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eSerializable\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e \u003cspan class=\"n\"\u003eW\u003c/span\u003e \u003cspan class=\"nf\"\u003ewindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"nf\"\u003ecurrentProcessingTime\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"nf\"\u003ecurrentWatermark\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e \u003cspan class=\"n\"\u003eKeyedStateStore\u003c/span\u003e \u003cspan class=\"nf\"\u003ewindowState\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e \u003cspan class=\"n\"\u003eKeyedStateStore\u003c/span\u003e \u003cspan class=\"nf\"\u003eglobalState\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ewindowState 和 globalState 是您可以存储该键的所有窗口的 per-key, per-window, 或全局 per-key 信息的地方。例如，如果您想记录一些关于当前窗口的信息，并在处理后续窗口时使用这些信息，这可能会很有用。\u003c/p\u003e\n\u003ch4 id=\"递增聚合示例\"\u003e递增聚合示例\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"n\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003einput\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTumblingEventTimeWindows\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eof\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eminutes\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ereduce\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eMyReducingMax\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eMyWindowFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyReducingMax\u003c/span\u003e \u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e \u003cspan class=\"n\"\u003eReduceFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e \u003cspan class=\"nf\"\u003ereduce\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e \u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e \u003cspan class=\"n\"\u003er2\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003er2\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003er1\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003er2\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyWindowFunction\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eProcessWindowFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eTimeWindow\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emaxReading\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eCollector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003eSensorReading\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emaxReading\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eiterator\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecollect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTuple3\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eof\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetEnd\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，\u003ccode\u003eIterable\u0026lt;SensorReading\u0026gt;\u003c/code\u003e 将只包含一个读数\u0026ndash;由 MyReducingMax 计算的 pre-aggregated 最大值。\u003c/p\u003e\n\u003ch3 id=\"迟来的事件\"\u003e迟来的事件\u003c/h3\u003e\n\u003cp\u003e默认情况下，当使用事件时间窗口时，迟到的事件会被丢弃。窗口 API 有两个可选部分可以让您对此有更多的控制。\u003c/p\u003e\n\u003cp\u003e您可以使用名为\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/event_driven.html#side-outputs\"\u003e\u0026ldquo;侧输出\u0026rdquo;\u003c/a\u003e的机制，安排将被丢弃的事件收集到一个备用的输出流中。下面是一个例子，说明这可能是什么样子的:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"n\"\u003eOutputTag\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elateTag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eOutputTag\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;late\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eSingleOutputStreamOperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esideOutputLateData\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elateTag\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n  \n\u003cspan class=\"n\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elateStream\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetSideOutput\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elateTag\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e您还可以指定允许的延迟时间间隔，在此期间，延迟事件将继续分配给相应的窗口（其状态将被保留）。默认情况下，每个延迟事件都会导致窗口函数再次被调用（有时称为延迟发射）。\u003c/p\u003e\n\u003cp\u003e换句话说，水印后面的元素会被丢弃（或发送到侧输出）。\u003c/p\u003e\n\u003cp\u003e比如说:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eallowedLateness\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eseconds\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e10\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当允许的延迟大于零时，只有那些晚到会被丢弃的事件才会被发送到侧输出（如果已经配置了）。\u003c/p\u003e\n\u003ch3 id=\"惊喜\"\u003e惊喜\u003c/h3\u003e\n\u003cp\u003eFlink 的 windowing API 的某些方面可能并不像你所期望的那样。基于 \u003ca href=\"https://flink.apache.org/community.html#mailing-lists\"\u003eflink 用户邮件列表\u003c/a\u003e和其他地方的常见问题，这里有一些关于窗口的事实可能会让你感到惊讶。\u003c/p\u003e\n\u003ch4 id=\"滑动窗口会进行复制\"\u003e滑动窗口会进行复制\u003c/h4\u003e\n\u003cp\u003e滑动窗口分配器可以创建很多窗口对象，并会将每个事件复制到每个相关窗口中。例如，如果你每15分钟有一个长度为24小时的滑动窗口，每个事件将被复制到 4*24=96 个窗口中。\u003c/p\u003e\n\u003ch4 id=\"时间窗口与纪元对齐\"\u003e时间窗口与纪元对齐\u003c/h4\u003e\n\u003cp\u003e仅仅因为你使用了一个小时的处理时间窗口，并且在 12:05 开始运行你的应用程序，并不意味着第一个窗口会在 1:05 关闭。第一个窗口将长达 55 分钟，并在 1:00 关闭。\u003c/p\u003e\n\u003cp\u003e但是请注意，滚动窗口和滑动窗口分配器采用一个可选的偏移参数，可以用来改变窗口的对齐方式。详情请参见\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/windows.html#tumbling-windows\"\u003e滚动窗口\u003c/a\u003e和\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/windows.html#sliding-windows\"\u003e滑动窗口\u003c/a\u003e。\u003c/p\u003e\n\u003ch4 id=\"窗口可以跟随窗口\"\u003e窗口可以跟随窗口\u003c/h4\u003e\n\u003cp\u003e例如，这样做是可行的:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"n\"\u003estream\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekeyBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etimeWindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e \u003cspan class=\"n\"\u003especification\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ereduce\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ereduce\u003c/span\u003e \u003cspan class=\"n\"\u003efunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etimeWindowAll\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003esame\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e \u003cspan class=\"n\"\u003especification\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ereduce\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003esame\u003c/span\u003e \u003cspan class=\"n\"\u003ereduce\u003c/span\u003e \u003cspan class=\"n\"\u003efunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可能会期望 Flink 的运行时足够聪明，能够为你做这种并行的预聚合（前提是你使用的是 ReduceFunction 或 AggregateFunction），但事实并非如此。\u003c/p\u003e\n\u003cp\u003e之所以这样做的原因是，一个时间窗口产生的事件会根据窗口结束的时间分配时间戳。所以，例如，一个小时长的窗口产生的所有事件都会有标记一个小时结束的时间戳。任何消耗这些事件的后续窗口的持续时间应该与前一个窗口的持续时间相同，或者是其倍数。\u003c/p\u003e\n\u003ch4 id=\"空的时间窗口没有结果\"\u003e空的时间窗口没有结果\u003c/h4\u003e\n\u003cp\u003e只有当事件被分配到窗口时，才会创建窗口。因此，如果在给定的时间帧内没有事件，就不会报告结果。\u003c/p\u003e\n\u003ch4 id=\"迟来的事件会导致迟来的合并\"\u003e迟来的事件会导致迟来的合并\u003c/h4\u003e\n\u003cp\u003e会话窗口是基于可以合并的窗口的抽象。每个元素最初都被分配到一个新的窗口，之后只要窗口之间的间隙足够小，就会合并。这样一来，一个迟到的事件可以弥合分开两个之前独立的会话的差距，产生迟到的合并。\u003c/p\u003e\n\u003ch2 id=\"实践\"\u003e实践\u003c/h2\u003e\n\u003cp\u003e与本节配套的实战练习是 \u003ca href=\"https://github.com/apache/flink-training/tree/release-1.11/hourly-tips\"\u003eHourly Tips Exercise\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"进一步阅读\"\u003e进一步阅读\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/timely-stream-processing.html\"\u003e及时的流处理\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/windows.html\"\u003e窗口\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","text":"Event Time 和 Watermarks 介绍 Flink 明确支持三种不同的时间概念。\n事件时间：事件发生的时间，由产生（或存储）该事件的设备记录的时间\n摄取时间：Flink 在摄取事件时记录的时间戳。\n处理时间：您的管道中的特定 operator 处理事件的时间。\n为了获得可重复的结果，例如，在计算某一天股票在交易的第一个小时内达到的最高价格时，您应该使用事件时间(event time)。这样一来，结果就不会依赖于计算的时间。这种实时应用有时会使用处理时间(processing time)，但这样一来，结果就会由该小时内恰好处理的事件决定，而不是由当时发生的事件决定。基于处理时间的计算分析会导致不一致，并使重新分析历史数据或测试新的实现变得困难。\n使用事件时间 默认情况下，Flink 将使用处理时间(processing time)。要改变这一点，您可以设置时间特性(Time Characteristic)。\nfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment(); env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime); 如果你想使用事件时间，你还需要提供一个时间戳提取器和水印生成器，Flink 将使用它们来跟踪事件时间的进展。这将在下面的\u0026ldquo;使用水印\u0026rdquo;一节中介绍，但首先我们应该解释一下什么是水印。\n水印 让我们通过一个简单的例子来说明为什么需要水印，以及它们是如何工作的。\n在这个例子中，你有一个带时间戳的事件流，这些事件的到达顺序有些混乱，如下所示。显示的数字是时间戳，表示这些事件实际发生的时间。第一个到达的事件发生在时间 4，随后是更早发生的事件，在时间 2，以此类推。\n··· 23 19 22 24 21 14 17 13 12 15 9 11 7 2 4 → 现在想象一下，你正在尝试创建一个流排序器(stream sorter)。这个应用程序的目的是处理流中的每个事件，并发出一个新的流，其中包含相同的事件，但按时间戳排序。\n一些观察:\n(1)你的流排序器看到的第一个元素是 4， 但你不能马上把它作为排序流的第一个元素释放出来。它可能已经不按顺序到达，而更早的事件可能还没有到达。事实上，你对这个流的未来有一些神一样的知识，你可以看到，你的流排序器至少应该等到 2 到达后再产生任何结果。\n一些缓冲，和一些延迟，是必要的。\n(2)如果你做错了，你可能最终会永远等待。首先，排序器看到了一个来自时间 4 的事件，然后是一个来自时间 2 的事件。一个时间戳小于 2 的事件会不会永远到达？也许会，也许不会。也许不会。你可以永远等待，永远看不到 1。\n最终你必须鼓起勇气，发出 2 作为排序流的开始。\n(3)那么你需要的是某种策略，它定义了对于任何给定的时间戳事件，何时停止等待早期事件的到来。\n这正是水印的作用\u0026ndash;它们定义了何时停止等待早期(earlier)事件。\nFlink 中的事件时间处理依赖于水印生成器，这些水印生成器将特殊的时间戳元素插入到流中，称为水印。时间 t 的水印是一种断言，即到时间 t 为止，流现在（可能）是完整的。\n这个流排序器应该在什么时候停止等待，并推出2开始排序流？当一个时间戳为 2，或更大的水印到达时。\n(4)你可以想象不同的策略来决定如何生成水印。\n每一个事件都是在一些延迟之后到达的，而这些延迟是不同的，所以一些事件的延迟比其他事件更多。一个简单的方法是假设这些延迟被某个最大延迟所约束。Flink 将这种策略称为有界无序水印。很容易想象更复杂的水印方法，但对于大多数应用来说，固定的延迟已经足够好了。\n延迟与完整性 关于水印的另一种思考方式是，水印让你这个流式应用的开发者能够控制延迟和完整性之间的权衡。与批处理不同的是，在批处理中，人们可以在产生任何结果之前完全了解输入，而在流式处理中，你最终必须停止等待看到更多的输入，并产生某种结果。\n你可以积极地配置你的水印，用一个很短的延迟，从而承担在对输入不完全了解的情况下产生结果的风险\u0026ndash;也就是说，一个可能是错误的结果，很快就产生了。或者你可以等待更长时间，并利用对输入流更完整的知识产生结果。\n也可以实现混合解决方案，快速生成初始结果，然后在处理额外（后期）数据时对这些结果进行更新。对于某些应用来说，这是一种很好的方法。\n延迟 迟到的定义是相对于水印而言的。水印(t)声明流在时间t之前是完整的；在这个水印之后的任何事件，如果时间戳 ≤t，则为延迟。\n使用水印 为了执行基于事件时间的事件处理，Flink 需要知道与每个事件相关联的时间，还需要流包含水印。\n实践练习中使用的 Taxi 数据源为你处理了这些细节。但在你自己的应用程序中，你必须自己处理这些事情，通常是通过实现一个类来实现，该类从事件中提取时间戳，并按需生成水印。最简单的方法是使用 WatermarkStrategy:\nDataStream\u0026lt;Event\u0026gt; stream = ... WatermarkStrategy\u0026lt;Event\u0026gt; strategy = WatermarkStrategy .\u0026lt;Event\u0026gt;forBoundedOutOfOrderness(Duration.ofSeconds(20)) .withTimestampAssigner((event, timestamp) -\u0026gt; event.timestamp); DataStream\u0026lt;Event\u0026gt; withTimestampsAndWatermarks = stream.assignTimestampsAndWatermarks(strategy); 窗口 Flink 具有非常有表现力的窗口语义。\n在本节中，你将学习\n 如何使用窗口来计算无边界流的聚合。 Flink 支持哪些类型的窗口，以及 如何实现一个窗口化聚合的 DataStream 程序？  介绍 在做流处理的时候，自然而然地想要计算流的有界子集的聚合分析，以回答这样的问题。\n 每分钟的页面浏览量 每个用户每周会话数 每个传感器每分钟的最高温度  用 Flink 计算窗口化分析依赖于两个主要的抽象。窗口分配器（Window Assigners）将事件分配给窗口（必要时创建新的窗口对象），窗口函数（Window Functions）应用于分配给窗口的事件。\nFlink 的窗口 API 还有 Triggers 的概念，它决定什么时候调用窗口函数，还有 Evictors，它可以删除窗口中收集的元素。\n在它的基本形式中，你将窗口化应用到像这样的 keyed stream 中。\nstream. .keyBy(\u0026lt;key selector\u0026gt;) .window(\u0026lt;window assigner\u0026gt;) .reduce|aggregate|process(\u0026lt;window function\u0026gt;) 您也可以对 non-keyed stream 使用窗口化，但请记住，在这种情况下，处理将不会并行进行。\nstream. .windowAll(\u0026lt;window assigner\u0026gt;) .reduce|aggregate|process(\u0026lt;window function\u0026gt;) 窗口分配器 Flink 有几种内置的窗口分配器类型，下面进行说明。\n一些例子说明这些窗口分配器的用途，以及如何指定它们:\n  滚动时间窗口\n  每分钟浏览量\n  TumblingEventTimeWindows.of(Time.minutes(1))\n  滑动时间窗口\n  每10秒计算的每分钟页面浏览量\n  SlidingEventTimeWindows.of(Time.min(1), Time.seconds(10))\n  会话窗口\n  每节课的页面浏览量，其中每节课之间至少有30分钟的间隔。\n  EventTimeSessionWindows.withGap(Time.minutes(30))\n  可以使用 Time.milliseconds(n), Time.seconds(n), Time.minutes(n), Time.hours(n), 和 Time.days(n) 中的一种指定持续时间。\n基于时间的窗口分配器（包括会话窗口）有事件时间(event time)和处理时间(processing time)两种风味。这两种类型的时间窗口之间有显著的权衡。对于处理时间窗口，你必须接受这些限制:\n 不能正确处理历史数据。 不能正确处理失序数据。 结果将是非确定性的。  但具有较低延迟的优势。\n当使用基于计数的窗口时，请记住，这些窗口将不会启动，直到一个批次完成。没有超时和处理部分窗口的选项，尽管你可以用自定义的触发器自己实现这种行为。\n全局窗口分配器将每个事件（用相同的键）分配到同一个全局窗口。只有当你打算使用自定义触发器来做你自己的自定义窗口时，这才是有用的。在许多看似有用的情况下，您最好使用另一节中描述的 ProcessFunction。\n窗口函数 对于如何处理窗口的内容，您有三个基本选项。\n 作为一个批次，使用一个 ProcessWindowFunction，它将被传递一个包含窗口内容的 Iterable。 以增量方式，使用 ReduceFunction 或 AggregateFunction，当每个事件被分配到窗口时被调用。 或两者结合，当窗口被触发时，ReduceFunction 或 AggregateFunction 的预聚集结果被提供给 ProcessWindowFunction。  这里是方法1和3的例子。每个实现都在1分钟的事件时间窗口中从每个传感器中找到峰值值，并产生一个包含(key, end-of-window-timestamp, max_value) 的 Tuples 流。\nProcessWindowFunction 示例 DataStream\u0026lt;SensorReading\u0026gt; input = ... input .keyBy(x -\u0026gt; x.key) .window(TumblingEventTimeWindows.of(Time.minutes(1))) .process(new MyWastefulMax()); public static class MyWastefulMax extends ProcessWindowFunction\u0026lt; SensorReading, // input type  Tuple3\u0026lt;String, Long, Integer\u0026gt;, // output type  String, // key type  TimeWindow\u0026gt; { // window type  @Override public void process( String key, Context context, Iterable\u0026lt;SensorReading\u0026gt; events, Collector\u0026lt;Tuple3\u0026lt;String, Long, Integer\u0026gt;\u0026gt; out) { int max = 0; for (SensorReading event : events) { max = Math.max(event.value, max); } out.collect(Tuple3.of(key, context.window().getEnd(), max)); } } 在这个实现中，有几件事需要注意。\n 所有分配给窗口的事件都必须在 keyed Flink state 下被缓冲，直到窗口被触发。这可能是相当昂贵的。 我们的 ProcessWindowFunction 被传递了一个 Context 对象，其中包含了窗口的信息。它的接口是这样的:  public abstract class Context implements java.io.Serializable { public abstract W window(); public abstract long currentProcessingTime(); public abstract long currentWatermark(); public abstract KeyedStateStore windowState(); public abstract KeyedStateStore globalState(); } windowState 和 globalState 是您可以存储该键的所有窗口的 per-key, per-window, 或全局 per-key 信息的地方。例如，如果您想记录一些关于当前窗口的信息，并在处理后续窗口时使用这些信息，这可能会很有用。\n递增聚合示例 DataStream\u0026lt;SensorReading\u0026gt; input = ... input .keyBy(x -\u0026gt; x.key) .window(TumblingEventTimeWindows.of(Time.minutes(1))) .reduce(new MyReducingMax(), new MyWindowFunction()); private static class MyReducingMax implements ReduceFunction\u0026lt;SensorReading\u0026gt; { public SensorReading reduce(SensorReading r1, SensorReading r2) { return r1.value() \u0026gt; r2.value() ? r1 : r2; } } private static class MyWindowFunction extends ProcessWindowFunction\u0026lt; SensorReading, Tuple3\u0026lt;String, Long, SensorReading\u0026gt;, String, TimeWindow\u0026gt; { @Override public void process( String key, Context context, Iterable\u0026lt;SensorReading\u0026gt; maxReading, Collector\u0026lt;Tuple3\u0026lt;String, Long, SensorReading\u0026gt;\u0026gt; out) { SensorReading max = maxReading.iterator().next(); out.collect(Tuple3.of(key, context.window().getEnd(), max)); } } 请注意，Iterable\u0026lt;SensorReading\u0026gt; 将只包含一个读数\u0026ndash;由 MyReducingMax 计算的 pre-aggregated 最大值。\n迟来的事件 默认情况下，当使用事件时间窗口时，迟到的事件会被丢弃。窗口 API 有两个可选部分可以让您对此有更多的控制。\n您可以使用名为\u0026ldquo;侧输出\u0026rdquo;的机制，安排将被丢弃的事件收集到一个备用的输出流中。下面是一个例子，说明这可能是什么样子的:\nOutputTag\u0026lt;Event\u0026gt; lateTag = new OutputTag\u0026lt;Event\u0026gt;(\u0026#34;late\u0026#34;){}; SingleOutputStreamOperator\u0026lt;Event\u0026gt; result = stream. .keyBy(...) .window(...) .sideOutputLateData(lateTag) .process(...); DataStream\u0026lt;Event\u0026gt; lateStream = result.getSideOutput(lateTag); 您还可以指定允许的延迟时间间隔，在此期间，延迟事件将继续分配给相应的窗口（其状态将被保留）。默认情况下，每个延迟事件都会导致窗口函数再次被调用（有时称为延迟发射）。\n换句话说，水印后面的元素会被丢弃（或发送到侧输出）。\n比如说:\nstream. .keyBy(...) .window(...) .allowedLateness(Time.seconds(10)) .process(...); 当允许的延迟大于零时，只有那些晚到会被丢弃的事件才会被发送到侧输出（如果已经配置了）。\n惊喜 Flink 的 windowing API 的某些方面可能并不像你所期望的那样。基于 flink 用户邮件列表和其他地方的常见问题，这里有一些关于窗口的事实可能会让你感到惊讶。\n滑动窗口会进行复制 滑动窗口分配器可以创建很多窗口对象，并会将每个事件复制到每个相关窗口中。例如，如果你每15分钟有一个长度为24小时的滑动窗口，每个事件将被复制到 4*24=96 个窗口中。\n时间窗口与纪元对齐 仅仅因为你使用了一个小时的处理时间窗口，并且在 12:05 开始运行你的应用程序，并不意味着第一个窗口会在 1:05 关闭。第一个窗口将长达 55 分钟，并在 1:00 关闭。\n但是请注意，滚动窗口和滑动窗口分配器采用一个可选的偏移参数，可以用来改变窗口的对齐方式。详情请参见滚动窗口和滑动窗口。\n窗口可以跟随窗口 例如，这样做是可行的:\nstream .keyBy(t -\u0026gt; t.key) .timeWindow(\u0026lt;time specification\u0026gt;) .reduce(\u0026lt;reduce function\u0026gt;) .timeWindowAll(\u0026lt;same time specification\u0026gt;) .reduce(\u0026lt;same reduce function\u0026gt;) 你可能会期望 Flink 的运行时足够聪明，能够为你做这种并行的预聚合（前提是你使用的是 ReduceFunction 或 AggregateFunction），但事实并非如此。\n之所以这样做的原因是，一个时间窗口产生的事件会根据窗口结束的时间分配时间戳。所以，例如，一个小时长的窗口产生的所有事件都会有标记一个小时结束的时间戳。任何消耗这些事件的后续窗口的持续时间应该与前一个窗口的持续时间相同，或者是其倍数。\n空的时间窗口没有结果 只有当事件被分配到窗口时，才会创建窗口。因此，如果在给定的时间帧内没有事件，就不会报告结果。\n迟来的事件会导致迟来的合并 会话窗口是基于可以合并的窗口的抽象。每个元素最初都被分配到一个新的窗口，之后只要窗口之间的间隙足够小，就会合并。这样一来，一个迟到的事件可以弥合分开两个之前独立的会话的差距，产生迟到的合并。\n实践 与本节配套的实战练习是 Hourly Tips Exercise。\n进一步阅读  及时的流处理 窗口  "},"name":"流分析","published":"2020-08-19T00:00:00+08:00","summary":"Streaming Analytics","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-19-streaming-analytics/"},{"content":{"html":"\u003ch2 id=\"状态后端\"\u003e状态后端\u003c/h2\u003e\n\u003cp\u003eFlink 管理的 keyed state 是一种碎片化的、键/值存储，每项 keyed state 的工作副本都被保存在负责该键的 taskmanager 的本地某处。Operator 的状态也被保存在需要它的机器的本地。Flink 会定期对所有状态进行持久化快照，并将这些快照复制到某个更持久的地方，比如分布式文件系统。\u003c/p\u003e\n\u003cp\u003e在发生故障的情况下，Flink 可以恢复你的应用程序的完整状态，并恢复处理，就像什么都没有发生过一样。\u003c/p\u003e\n\u003cp\u003eFlink 管理的这种状态被存储在状态后端中。状态后端有两种实现\u0026ndash;一种是基于 RocksDB 的，它是一个嵌入式的键/值存储，将其工作状态保存在磁盘上；另一种是基于堆的状态后端，将其工作状态保存在内存中，在 Java 堆上。这种基于堆的状态后端有两种风味：将其状态快照持久化到分布式文件系统的 FsStateBackend 和使用 JobManager 的堆的 MemoryStateBackend。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e名称\u003c/th\u003e\n\u003cth align=\"left\"\u003e工作状态\u003c/th\u003e\n\u003cth align=\"left\"\u003e状态备份\u003c/th\u003e\n\u003cth align=\"left\"\u003e快照\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eRocksDBStateBackend\u003c/td\u003e\n\u003ctd align=\"left\"\u003e本地磁盘(tmp dir)\u003c/td\u003e\n\u003ctd align=\"left\"\u003e分布式文件系统\u003c/td\u003e\n\u003ctd align=\"left\"\u003e完全/增量\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e支持大于可用内存的状态; 经验法则：比基于堆的后端慢10倍。\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eFsStateBackend\u003c/td\u003e\n\u003ctd align=\"left\"\u003eJVM Heap\u003c/td\u003e\n\u003ctd align=\"left\"\u003e分布式文件系统\u003c/td\u003e\n\u003ctd align=\"left\"\u003eFull\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e速度快，需要大量堆积; 受制于 GC\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eMemoryStateBackend\u003c/td\u003e\n\u003ctd align=\"left\"\u003eJVM Heap\u003c/td\u003e\n\u003ctd align=\"left\"\u003eJobManager JVM Heap\u003c/td\u003e\n\u003ctd align=\"left\"\u003eFull\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e有利于小状态（地方）的测试和实验。\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e当处理保存在基于堆的状态后端的状态时，访问和更新涉及到在堆上读写对象。但是对于保存在 RocksDBStateBackend 中的对象，访问和更新涉及到序列化和反序列化，因此成本更高。但是使用 RocksDB 可以拥有的状态数量只受限于本地磁盘的大小。还要注意的是，只有 RocksDBStateBackend 能够进行增量快照，这对于有大量缓慢变化的状态的应用来说是一个很大的好处。\u003c/p\u003e\n\u003cp\u003e所有这些状态后端都能够进行异步快照，这意味着它们可以在不妨碍正在进行的流处理的情况下进行快照。\u003c/p\u003e\n\u003ch2 id=\"状态快照\"\u003e状态快照\u003c/h2\u003e\n\u003ch3 id=\"定义\"\u003e定义\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e快照\u0026ndash;一个通用术语，指的是一个 Flink 作业状态的全局、一致的图像。快照包括进入每个数据源的指针（例如，进入文件或 Kafka 分区的偏移），以及来自每个作业的有状态操作符的状态副本，这些操作符是在处理了所有事件后产生的，直到源中的这些位置。\u003c/li\u003e\n\u003cli\u003e检查点\u0026ndash;Flink 为了能够从故障中恢复而自动拍摄的快照。检查点可以是增量的，并为快速恢复进行了优化。\u003c/li\u003e\n\u003cli\u003e外部化检查点\u0026ndash;通常检查点不打算被用户操纵。Flink 只在作业运行时保留n个最近的检查点（n是可配置的），并在作业取消时删除它们。但你也可以配置它们被保留，在这种情况下，你可以手动从它们恢复。\u003c/li\u003e\n\u003cli\u003e保存点\u0026ndash;由用户（或API调用）手动触发的快照，用于某些操作目的，例如有状态的重新部署/升级/重新缩放操作。保存点始终是完整的，并为操作的灵活性进行了优化。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"状态快照是如何工作的\"\u003e状态快照是如何工作的？\u003c/h3\u003e\n\u003cp\u003eFlink 使用 \u003ca href=\"https://en.wikipedia.org/wiki/Chandy-Lamport_algorithm\"\u003eChandy-Lamport\u003c/a\u003e 算法的一个变体，称为异步屏障快照。\u003c/p\u003e\n\u003cp\u003e当任务管理器被检查点协调器（作业管理器的一部分）指示开始检查点时，它让所有的源记录它们的偏移量，并在它们的流中插入编号的检查点障碍。这些屏障在作业图(job graph)中流动，指示每个检查点前后的流的部分。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/stream_barriers.svg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e检查点n将包含每个 operator 的状态，这些状态是由于消耗了检查点障碍n之前的每个事件，而没有消耗它之后的任何事件。\u003c/p\u003e\n\u003cp\u003e当作业图中的每个 operator 接收到这些障碍之一时，它就会记录其状态。具有两个输入流（如 CoProcessFunction）的 operator 执行屏障对齐，这样快照将反映消耗两个输入流的事件所产生的状态，直到（但不超过）两个屏障。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/stream_aligning.svg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003eFlink 的状态后端使用复制-写机制，允许在异步快照状态的旧版本时，流处理不受阻碍地继续。只有当快照被持久化后，这些旧版本的状态才会被垃圾回收。\u003c/p\u003e\n\u003ch3 id=\"一次性保证\"\u003e一次性保证\u003c/h3\u003e\n\u003cp\u003e当流处理应用中出现问题时，有可能出现丢失，或者重复的结果。在 Flink 中，根据你对应用的选择和你运行它的集群，这些结果中的任何一种都是可能的。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFlink 不努力从故障中恢复（最多一次）。\u003c/li\u003e\n\u003cli\u003e没有任何损失，但您可能会遇到重复的结果（至少一次）。\u003c/li\u003e\n\u003cli\u003e没有任何东西丢失或重复（精确地一次）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e鉴于 Flink 通过倒带和重放源数据流从故障中恢复，当理想情况被描述为精确一次时，这并不意味着每个事件都将被精确处理一次。相反，它意味着每一个事件都会对 Flink 所管理的状态产生一次确切的影响。\u003c/p\u003e\n\u003cp\u003eBarrier 对齐只需要用于提供精确的一次保证。如果你不需要这个，你可以通过配置 Flink 使用 CheckpointingMode.AT_LEAST_ONCE 来获得一些性能，它的效果是禁用屏障对齐。\u003c/p\u003e\n\u003ch3 id=\"精确一次-端到端\"\u003e精确一次, 端到端\u003c/h3\u003e\n\u003cp\u003e为了实现端到端精确的一次，让源的每个事件精确地影响汇，以下几点必须是真的。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e你的源必须是可重播的，并且\u003c/li\u003e\n\u003cli\u003e你的接收器必须是事务性的(或幂等的)\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"实践\"\u003e实践\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html\"\u003eFlink Operations Playground\u003c/a\u003e 包括\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#observing-failure--recovery\"\u003e观察故障和恢复\u003c/a\u003e的部分。\u003c/p\u003e\n\u003ch2 id=\"进一步阅读\"\u003e进一步阅读\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/stateful-stream-processing.html\"\u003e有状态的流处理\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/state/state_backends.html\"\u003e状态后端\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/guarantees.html\"\u003e数据源和接收器的容错保证\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/state/checkpointing.html\"\u003e启用和配置检查点\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/state/checkpoints.html\"\u003e检查点\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/state/savepoints.html\"\u003e保存点\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/state/large_state_tuning.html\"\u003e调整检查点和大状态\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/checkpoint_monitoring.html\"\u003e监测检查点\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/task_failure_recovery.html\"\u003e任务故障恢复\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","text":"状态后端 Flink 管理的 keyed state 是一种碎片化的、键/值存储，每项 keyed state 的工作副本都被保存在负责该键的 taskmanager 的本地某处。Operator 的状态也被保存在需要它的机器的本地。Flink 会定期对所有状态进行持久化快照，并将这些快照复制到某个更持久的地方，比如分布式文件系统。\n在发生故障的情况下，Flink 可以恢复你的应用程序的完整状态，并恢复处理，就像什么都没有发生过一样。\nFlink 管理的这种状态被存储在状态后端中。状态后端有两种实现\u0026ndash;一种是基于 RocksDB 的，它是一个嵌入式的键/值存储，将其工作状态保存在磁盘上；另一种是基于堆的状态后端，将其工作状态保存在内存中，在 Java 堆上。这种基于堆的状态后端有两种风味：将其状态快照持久化到分布式文件系统的 FsStateBackend 和使用 JobManager 的堆的 MemoryStateBackend。\n   名称 工作状态 状态备份 快照     RocksDBStateBackend 本地磁盘(tmp dir) 分布式文件系统 完全/增量   支持大于可用内存的状态; 经验法则：比基于堆的后端慢10倍。      FsStateBackend JVM Heap 分布式文件系统 Full   速度快，需要大量堆积; 受制于 GC      MemoryStateBackend JVM Heap JobManager JVM Heap Full   有利于小状态（地方）的测试和实验。       当处理保存在基于堆的状态后端的状态时，访问和更新涉及到在堆上读写对象。但是对于保存在 RocksDBStateBackend 中的对象，访问和更新涉及到序列化和反序列化，因此成本更高。但是使用 RocksDB 可以拥有的状态数量只受限于本地磁盘的大小。还要注意的是，只有 RocksDBStateBackend 能够进行增量快照，这对于有大量缓慢变化的状态的应用来说是一个很大的好处。\n所有这些状态后端都能够进行异步快照，这意味着它们可以在不妨碍正在进行的流处理的情况下进行快照。\n状态快照 定义  快照\u0026ndash;一个通用术语，指的是一个 Flink 作业状态的全局、一致的图像。快照包括进入每个数据源的指针（例如，进入文件或 Kafka 分区的偏移），以及来自每个作业的有状态操作符的状态副本，这些操作符是在处理了所有事件后产生的，直到源中的这些位置。 检查点\u0026ndash;Flink 为了能够从故障中恢复而自动拍摄的快照。检查点可以是增量的，并为快速恢复进行了优化。 外部化检查点\u0026ndash;通常检查点不打算被用户操纵。Flink 只在作业运行时保留n个最近的检查点（n是可配置的），并在作业取消时删除它们。但你也可以配置它们被保留，在这种情况下，你可以手动从它们恢复。 保存点\u0026ndash;由用户（或API调用）手动触发的快照，用于某些操作目的，例如有状态的重新部署/升级/重新缩放操作。保存点始终是完整的，并为操作的灵活性进行了优化。  状态快照是如何工作的？ Flink 使用 Chandy-Lamport 算法的一个变体，称为异步屏障快照。\n当任务管理器被检查点协调器（作业管理器的一部分）指示开始检查点时，它让所有的源记录它们的偏移量，并在它们的流中插入编号的检查点障碍。这些屏障在作业图(job graph)中流动，指示每个检查点前后的流的部分。\n检查点n将包含每个 operator 的状态，这些状态是由于消耗了检查点障碍n之前的每个事件，而没有消耗它之后的任何事件。\n当作业图中的每个 operator 接收到这些障碍之一时，它就会记录其状态。具有两个输入流（如 CoProcessFunction）的 operator 执行屏障对齐，这样快照将反映消耗两个输入流的事件所产生的状态，直到（但不超过）两个屏障。\nFlink 的状态后端使用复制-写机制，允许在异步快照状态的旧版本时，流处理不受阻碍地继续。只有当快照被持久化后，这些旧版本的状态才会被垃圾回收。\n一次性保证 当流处理应用中出现问题时，有可能出现丢失，或者重复的结果。在 Flink 中，根据你对应用的选择和你运行它的集群，这些结果中的任何一种都是可能的。\n Flink 不努力从故障中恢复（最多一次）。 没有任何损失，但您可能会遇到重复的结果（至少一次）。 没有任何东西丢失或重复（精确地一次）。  鉴于 Flink 通过倒带和重放源数据流从故障中恢复，当理想情况被描述为精确一次时，这并不意味着每个事件都将被精确处理一次。相反，它意味着每一个事件都会对 Flink 所管理的状态产生一次确切的影响。\nBarrier 对齐只需要用于提供精确的一次保证。如果你不需要这个，你可以通过配置 Flink 使用 CheckpointingMode.AT_LEAST_ONCE 来获得一些性能，它的效果是禁用屏障对齐。\n精确一次, 端到端 为了实现端到端精确的一次，让源的每个事件精确地影响汇，以下几点必须是真的。\n 你的源必须是可重播的，并且 你的接收器必须是事务性的(或幂等的)  实践 Flink Operations Playground 包括观察故障和恢复的部分。\n进一步阅读  有状态的流处理 状态后端 数据源和接收器的容错保证 启用和配置检查点 检查点 保存点 调整检查点和大状态 监测检查点 任务故障恢复  "},"name":"通过状态快照进行容错","published":"2020-08-19T00:00:00+08:00","summary":"Fault Tolerance via State Snapshots","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-19-fault-tolerance/"},{"content":{"html":"\u003ch2 id=\"flink-操作游乐场\"\u003eFlink 操作游乐场\u003c/h2\u003e\n\u003cp\u003e在各种环境中部署和操作 Apache Flink 的方法有很多。无论这种多样性如何，Flink 集群的基本构件保持不变，类似的操作原则也适用。\u003c/p\u003e\n\u003cp\u003e在这个操场上，你将学习如何管理和运行 Flink Jobs。您将看到如何部署和监控应用程序，体验 Flink 如何从 Job 故障中恢复，并执行日常操作任务，如升级和重新缩放。\u003c/p\u003e\n\u003ch3 id=\"这个游乐场的解剖\"\u003e这个游乐场的解剖\u003c/h3\u003e\n\u003cp\u003e这个游乐场由一个持久的 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-session-cluster\"\u003eFlink Session Cluster\u003c/a\u003e和一个 Kafka Cluster 组成。\u003c/p\u003e\n\u003cp\u003e一个 Flink Cluster 总是由一个 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-jobmanager\"\u003eJobManager\u003c/a\u003e 和一个或多个 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-taskmanager\"\u003eFlink TaskManager\u003c/a\u003e 组成。JobManager 负责处理 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-job\"\u003eJob\u003c/a\u003e 提交，监督 Job 以及资源管理。Flink TaskManager 是 worker 进程，负责执行构成 Flink Job 的实际\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#task\"\u003e任务\u003c/a\u003e。在这个游戏场中，你将从一个单一的 TaskManager 开始，但以后会扩展到更多的 TaskManager。此外，这个游乐场还带有一个专门的客户端容器，我们使用它来提交 Flink Job，并在以后执行各种操作任务。客户端容器不是 Flink Cluster 本身需要的，只是为了方便使用才包含在里面。\u003c/p\u003e\n\u003cp\u003eKafka 集群由一个 Zookeeper 服务器和一个 Kafka Broker 组成。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/flink-docker-playground.svg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e当游乐场启动时，一个名为 Flink Event Count 的 Flink Job 将被提交给 JobManager。此外，还会创建两个 Kafka 主题 \u003cem\u003einput\u003c/em\u003e 和 \u003cem\u003eoutput\u003c/em\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/click-event-count-example.svg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e该作业从 \u003cem\u003einput\u003c/em\u003e 主题中消耗点击事件(\u003cstrong\u003eClickEvent\u003c/strong\u003e)，每个点击事件(\u003cstrong\u003eClickEvent\u003c/strong\u003e)都有一个时间戳(\u003cstrong\u003etimestamp\u003c/strong\u003e)和一个页面(\u003cstrong\u003epage\u003c/strong\u003e)。然后按页面对事件进行分组(\u003cstrong\u003ekeyed by\u003c/strong\u003e)，并在 15 秒的\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/windows.html\"\u003e窗口\u003c/a\u003e中进行计数。结果被写入 \u003cem\u003eoutput\u003c/em\u003e 主题。\u003c/p\u003e\n\u003cp\u003e有6个不同的页面，我们在每个页面和15秒内产生1000个点击事件。因此，Flink 作业的输出应该显示每个页面和窗口有1000个浏览量。\u003c/p\u003e\n\u003ch3 id=\"启动游乐场\"\u003e启动游乐场\u003c/h3\u003e\n\u003cp\u003e游戏场环境的设置只需几步。我们将引导你完成必要的命令，并展示如何验证一切都在正确运行。\u003c/p\u003e\n\u003cp\u003e我们假设你的机器上安装了 \u003ca href=\"https://docs.docker.com/\"\u003eDocker\u003c/a\u003e（1.12+）和 \u003ca href=\"https://docs.docker.com/compose/\"\u003edocker-compose\u003c/a\u003e（2.1+）。\u003c/p\u003e\n\u003cp\u003e所需的配置文件可以在 \u003ca href=\"https://github.com/apache/flink-playgrounds\"\u003eflink-playgrounds\u003c/a\u003e 仓库中找到。检查一下，然后对齐环境。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003egit clone --branch release-1.11 https://github.com/apache/flink-playgrounds.git\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e flink-playgrounds/operations-playground\ndocker-compose build\ndocker-compose up -d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e之后，你可以用以下命令检查正在运行的 Docker 容器。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose ps\n\n                    Name                                  Command               State                   Ports                \n-----------------------------------------------------------------------------------------------------------------------------\noperations-playground_clickevent-generator_1   /docker-entrypoint.sh java ...   Up       6123/tcp, 8081/tcp                  \noperations-playground_client_1                 /docker-entrypoint.sh flin ...   Exit \u003cspan class=\"m\"\u003e0\u003c/span\u003e                                       \noperations-playground_jobmanager_1             /docker-entrypoint.sh jobm ...   Up       6123/tcp, 0.0.0.0:8081-\u0026gt;8081/tcp    \noperations-playground_kafka_1                  start-kafka.sh                   Up       0.0.0.0:9094-\u0026gt;9094/tcp              \noperations-playground_taskmanager_1            /docker-entrypoint.sh task ...   Up       6123/tcp, 8081/tcp                  \noperations-playground_zookeeper_1              /bin/sh -c /usr/sbin/sshd  ...   Up       2181/tcp, 22/tcp, 2888/tcp, 3888/tcp\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这表明客户端容器已经成功提交了 Flink Job（Exit 0），所有集群组件以及数据生成器都在运行（Up）。\u003c/p\u003e\n\u003cp\u003e您可以通过调用来停止游乐场环境。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose down -v\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"进入游乐场\"\u003e进入游乐场\u003c/h3\u003e\n\u003cp\u003e在这个游乐场中，有很多东西你可以尝试和检查。在下面的两节中，我们将向您展示如何与 Flink 集群进行交互，并展示 Flink 的一些关键功能。\u003c/p\u003e\n\u003ch4 id=\"flink-webui\"\u003eFlink WebUI\u003c/h4\u003e\n\u003cp\u003e观察你的 Flink 集群最自然的出发点是在 \u003ca href=\"http://localhost:8081/\"\u003ehttp://localhost:8081\u003c/a\u003e 下暴露的 WebUI。如果一切顺利，你会看到集群最初由一个任务管理器组成，并执行一个名为 Click Event Count 的 Job。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/playground-webui.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003eFlink WebUI 包含了很多关于 Flink 集群和它的工作的有用和有趣的信息（JobGraph, Metrics, Checkpointing Statistics, TaskManager Status, \u0026hellip;）。\u003c/p\u003e\n\u003ch4 id=\"日志\"\u003e日志\u003c/h4\u003e\n\u003ch5 id=\"jobmanager\"\u003eJobManager\u003c/h5\u003e\n\u003cp\u003e可以通过 \u003ccode\u003edocker-compose\u003c/code\u003e 对 JobManager 日志进行跟踪。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose logs -f jobmanager\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在初始启动后，你应该主要看到每一个检查点完成的日志信息。\u003c/p\u003e\n\u003ch5 id=\"taskmanager\"\u003eTaskManager\u003c/h5\u003e\n\u003cp\u003eTaskManager 的日志也可以用同样的方式进行 tail。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose logs -f taskmanager\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在初始启动后，你应该主要看到每个检查点完成的日志信息。\u003c/p\u003e\n\u003ch4 id=\"flink-cli\"\u003eFlink CLI\u003c/h4\u003e\n\u003cp\u003eFlink CLI 可以在客户端容器中使用。例如，要打印 Flink CLI 的帮助信息，你可以运行以下命令\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose run --no-deps client flink --help\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"flink-rest-api\"\u003eFlink REST API\u003c/h4\u003e\n\u003cp\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/rest_api.html#api\"\u003eFlink REST API\u003c/a\u003e 通过主机上的 localhost:8081 或客户端容器中的 jobmanager:8081 暴露出来，例如，要列出所有当前正在运行的作业，你可以运行:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ecurl localhost:8081/jobs\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"kafka-topics\"\u003eKafka Topics\u003c/h4\u003e\n\u003cp\u003e你可以通过运行以下命令来查看写入 Kafka 主题的记录\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e//input topic \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1000\u003c/span\u003e records/s\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ndocker-compose \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e kafka kafka-console-consumer.sh \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --bootstrap-server localhost:9092 --topic input\n\n//output topic \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e24\u003c/span\u003e records/min\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ndocker-compose \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e kafka kafka-console-consumer.sh \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --bootstrap-server localhost:9092 --topic output\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"time-to-play\"\u003eTime to Play!\u003c/h4\u003e\n\u003cp\u003e现在你已经学会了如何与 Flink 和 Docker 容器进行交互，让我们来看看一些常见的操作任务，你可以在我们的游乐场上尝试一下。所有这些任务都是相互独立的，即你可以以任何顺序执行它们。大多数任务可以通过 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#flink-cli\"\u003eCLI\u003c/a\u003e 和 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#flink-rest-api\"\u003eREST API\u003c/a\u003e 来执行。\u003c/p\u003e\n\u003ch5 id=\"列出正在运行的-job\"\u003e列出正在运行的 Job\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eCLI\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e命令\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose run --no-deps client flink list\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e期望的输出\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWaiting for response...\n------------------ Running/Restarting Jobs -------------------\n16.07.2019 16:37:55 : \u0026lt;job-id\u0026gt; : Click Event Count (RUNNING)\n--------------------------------------------------------------\nNo scheduled jobs.\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eREST API\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurl localhost:8081/jobs\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e期待的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;jobs\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eJobID 在提交时被分配给作业(Job)，并且需要通过 CLI 或 REST API 对作业(Job)执行操作。\u003c/p\u003e\n\u003ch5 id=\"观察故障和恢复\"\u003e观察故障和恢复\u003c/h5\u003e\n\u003cp\u003eFlink 在(部分)失败下提供了精确的一次处理保证。在这个游乐场中，你可以观察并在一定程度上验证这种行为。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e步骤1：观察输出\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#anatomy-of-this-playground\"\u003e如上所述\u003c/a\u003e，在这个游乐场中的事件是这样生成的，每个窗口正好包含一千条记录。因此，为了验证 Flink 是否成功地从 TaskManager 故障中恢复，而没有数据丢失或重复，你可以跟踪 \u003cem\u003eoutput\u003c/em\u003e 主题，并检查恢复后所有的窗口都存在，而且计数是正确的。\u003c/p\u003e\n\u003cp\u003e为此，从 \u003cem\u003eoutput\u003c/em\u003e 主题开始读取，并让这个命令运行到恢复后（步骤3）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e kafka kafka-console-consumer.sh \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --bootstrap-server localhost:9092 --topic output\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e第二步：引入故障\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e为了模拟部分故障，你可以杀死一个 TaskManager，在生产设置中，这可能对应于 TaskManager 进程、TaskManager 机器的丢失，或者仅仅是框架或用户代码抛出的瞬时异常（例如由于暂时不可用）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose \u003cspan class=\"nb\"\u003ekill\u003c/span\u003e taskmanager\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e几秒钟后，JobManager 会注意到 TaskManager 的丢失，取消受影响的 Job，并立即重新提交它进行恢复。当 Job 被重新启动后，其任务仍处于 \u003cstrong\u003eSCHEDULED\u003c/strong\u003e 状态，由紫色的方块表示（见下面的截图）。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/playground-webui-failure.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e注意：即使作业(Job)的任务(Task)处于 \u003cstrong\u003eSCHEDULED\u003c/strong\u003e 状态而不是 \u003cstrong\u003eRUNNING\u003c/strong\u003e 状态，作业(Job)的整体状态也会显示为 \u003cstrong\u003eRUNNING\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e此时，Job 的任务(Task)不能从 \u003cstrong\u003eSCHEDULED\u003c/strong\u003e 状态转为 \u003cstrong\u003eRUNNING\u003c/strong\u003e 状态，因为没有资源(\u003cstrong\u003eTaskManager\u003c/strong\u003e 提供的 \u003cstrong\u003eTaskSlots\u003c/strong\u003e）来运行这些任务。在新的 TaskManager 可用之前，Job 将经历一个取消和重新提交的循环。\u003c/p\u003e\n\u003cp\u003e同时，数据生成器会不断地将 ClickEvents 推送到 \u003cem\u003einput\u003c/em\u003e 主题中。这类似于真正的生产设置，在生产数据的同时，要处理数据的 Job 却宕机了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e步骤3：恢复\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e一旦你重新启动 TaskManager，它就会重新连接到 JobManager。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose up -d taskmanager\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当 JobManager 被通知到新的 TaskManager 时，它将恢复中的 Job 的任务(tasks)调度到新的可用 TaskSlots。重新启动后，任务会从故障前最后一次成功的\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/fault_tolerance.html\"\u003e检查点\u003c/a\u003e恢复其状态，并切换到 RUNNING 状态。\u003c/p\u003e\n\u003cp\u003eJob 将快速处理来自 Kafka 的全部积压输入事件(在故障期间积累的)，并以更高的速度(\u0026gt;24条记录/分钟)产生输出，直到到达流的头部。在输出中，你会看到所有的键(页面)都存在于所有的时间窗口中，而且每个计数都是精确的 1000。由于我们是在\u0026quot;至少一次\u0026quot;模式下使用 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/kafka.html#kafka-producers-and-fault-tolerance\"\u003eFlinkKafkaProducer\u003c/a\u003e，所以你有可能会看到一些重复的输出记录。\u003c/p\u003e\n\u003cp\u003e注意：大多数生产设置依赖于资源管理器(Kubernetes、Yarn、Mesos)来自动重启失败的进程。\u003c/p\u003e\n\u003ch5 id=\"升级和重新缩放作业\"\u003e升级和重新缩放作业\u003c/h5\u003e\n\u003cp\u003e升级 Flink 作业总是涉及两个步骤。首先，用一个\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/state/savepoints.html\"\u003e保存点\u003c/a\u003e优雅地停止 Flink Job。保存点是在一个明确定义的、全局一致的时间点(类似于检查点)上的完整应用状态的一致快照。其次，升级后的 Flink Job 从 Savepoint 开始。在这种情况下，\u0026ldquo;升级\u0026quot;可以意味着不同的事情，包括以下内容:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e配置的升级（包括作业的并行性）。\u003c/li\u003e\n\u003cli\u003e对 Job 的拓扑结构进行升级（增加/删除 Operator）。\u003c/li\u003e\n\u003cli\u003e对 Job 的用户定义的函数进行升级。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在开始升级之前，你可能要开始 tailing \u003cem\u003eoutput\u003c/em\u003e 主题，以观察在升级过程中没有数据丢失或损坏。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e kafka kafka-console-consumer.sh \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --bootstrap-server localhost:9092 --topic output\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e第一步：停止工作\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e要优雅地停止作业，您需要使用 CLI 或 REST API 的 \u0026ldquo;stop\u0026rdquo; 命令。为此，您需要该作业的 JobID，您可以通过\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#listing-running-jobs\"\u003e列出所有正在运行的 Job\u003c/a\u003e 或从 WebUI 中获得。有了 JobID，您就可以继续停止该作业:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCLI\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e命令\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose run --no-deps client flink stop \u0026lt;job-id\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的输出\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSuspending job \u0026quot;\u0026lt;job-id\u0026gt;\u0026quot; with a savepoint.\nSuspended job \u0026quot;\u0026lt;job-id\u0026gt;\u0026quot; with a savepoint.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSavepoint 已经被存储到 flink-conf.yaml 中配置的 state.savepoint.dir 中，它被安装在本地机器的 /tmp/flink-savepoints-directory/ 下。在下一步中，你将需要这个 Savepoint 的路径。在 REST API 的情况下，这个路径已经是响应的一部分，你将需要直接查看文件系统。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e命令\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003els -lia /tmp/flink-savepoints-directory\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的输出\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003etotal \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"m\"\u003e17\u003c/span\u003e drwxr-xr-x   \u003cspan class=\"m\"\u003e3\u003c/span\u003e root root   \u003cspan class=\"m\"\u003e60\u003c/span\u003e \u003cspan class=\"m\"\u003e17\u003c/span\u003e jul 17:05 .\n   \u003cspan class=\"m\"\u003e2\u003c/span\u003e drwxrwxrwt \u003cspan class=\"m\"\u003e135\u003c/span\u003e root root \u003cspan class=\"m\"\u003e3420\u003c/span\u003e \u003cspan class=\"m\"\u003e17\u003c/span\u003e jul 17:09 ..\n\u003cspan class=\"m\"\u003e1002\u003c/span\u003e drwxr-xr-x   \u003cspan class=\"m\"\u003e2\u003c/span\u003e root root  \u003cspan class=\"m\"\u003e140\u003c/span\u003e \u003cspan class=\"m\"\u003e17\u003c/span\u003e jul 17:05 savepoint-\u0026lt;short-job-id\u0026gt;-\u0026lt;uuid\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eREST API\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# triggering stop\u003c/span\u003e\ncurl -X POST localhost:8081/jobs/\u0026lt;job-id\u0026gt;/stop -d \u003cspan class=\"s1\"\u003e\u0026#39;{\u0026#34;drain\u0026#34;: false}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;request-id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;trigger-id\u0026gt;\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# check status of stop action and retrieve savepoint path\u003c/span\u003e\ncurl localhost:8081/jobs/\u0026lt;job-id\u0026gt;/savepoints/\u0026lt;trigger-id\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;COMPLETED\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;operation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;location\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;savepoint-path\u0026gt;\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e步骤2a: 重启 Job，不做任何改变\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e现在您可以从该保存点重新启动升级后的作业(Job)。为了简单起见，您可以在不做任何更改的情况下重新启动它。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCLI\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e命令\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose run --no-deps client flink run -s \u0026lt;savepoint-path\u0026gt; \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -d /opt/ClickCountJob.jar \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --bootstrap.servers kafka:9092 --checkpointing --event-time\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的输出\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStarting execution of program\nJob has been submitted with JobID \u0026lt;job-id\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eREST API\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# Uploading the JAR from the Client container\u003c/span\u003e\ndocker-compose run --no-deps client curl -X POST -H \u003cspan class=\"s2\"\u003e\u0026#34;Expect:\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -F \u003cspan class=\"s2\"\u003e\u0026#34;jarfile=@/opt/ClickCountJob.jar\u0026#34;\u003c/span\u003e http://jobmanager:8081/jars/upload\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;filename\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;/tmp/flink-web-\u0026lt;uuid\u0026gt;/flink-web-upload/\u0026lt;jar-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# Submitting the Job\u003c/span\u003e\ncurl -X POST http://localhost:8081/jars/\u0026lt;jar-id\u0026gt;/run \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -d \u003cspan class=\"s1\"\u003e\u0026#39;{\u0026#34;programArgs\u0026#34;: \u0026#34;--bootstrap.servers kafka:9092 --checkpointing --event-time\u0026#34;, \u0026#34;savepointPath\u0026#34;: \u0026#34;\u0026lt;savepoint-path\u0026gt;\u0026#34;}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的输出\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;jobid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e一旦 Job 再次 RUNNING，你会在 \u003cem\u003eoutput\u003c/em\u003e 主题中看到，当 Job 在处理中断期间积累的积压时，记录以较高的速度产生。此外，你会看到在升级过程中没有丢失任何数据：所有窗口都存在，数量正好是 1000。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e步骤2b: 用不同的并行度重新启动作业（重新缩放）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e另外，您也可以在重新提交时通过传递不同的并行性，从这个保存点重新缩放作业。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCLI\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose run --no-deps client flink run -p \u003cspan class=\"m\"\u003e3\u003c/span\u003e -s \u0026lt;savepoint-path\u0026gt; \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -d /opt/ClickCountJob.jar \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --bootstrap.servers kafka:9092 --checkpointing --event-time\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的输出\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStarting execution of program\nJob has been submitted with JobID \u0026lt;job-id\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eREST API\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# Uploading the JAR from the Client container\u003c/span\u003e\ndocker-compose run --no-deps client curl -X POST -H \u003cspan class=\"s2\"\u003e\u0026#34;Expect:\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -F \u003cspan class=\"s2\"\u003e\u0026#34;jarfile=@/opt/ClickCountJob.jar\u0026#34;\u003c/span\u003e http://jobmanager:8081/jars/upload\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;filename\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;/tmp/flink-web-\u0026lt;uuid\u0026gt;/flink-web-upload/\u0026lt;jar-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# Submitting the Job\u003c/span\u003e\ncurl -X POST http://localhost:8081/jars/\u0026lt;jar-id\u0026gt;/run \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -d \u003cspan class=\"s1\"\u003e\u0026#39;{\u0026#34;parallelism\u0026#34;: 3, \u0026#34;programArgs\u0026#34;: \u0026#34;--bootstrap.servers kafka:9092 --checkpointing --event-time\u0026#34;, \u0026#34;savepointPath\u0026#34;: \u0026#34;\u0026lt;savepoint-path\u0026gt;\u0026#34;}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;jobid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在，作业(Job)已经被重新提交，但它不会启动，因为没有足够的 TaskSlots 在增加的并行度下执行它（2个可用，需要3个）。使用:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose scale \u003cspan class=\"nv\"\u003etaskmanager\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以在 Flink 集群中添加一个带有两个 TaskSlots 的第二个 TaskManager，它将自动注册到 JobManager 中。添加 TaskManager 后不久，该任务(Job)应该再次开始运行。\u003c/p\u003e\n\u003cp\u003e一旦 Job 再次 \u0026ldquo;RUNNING\u0026rdquo;，你会在 \u003cem\u003eoutput\u003c/em\u003e Topic 中看到在重新缩放过程中没有丢失数据：所有的窗口都存在，计数正好是 1000。\u003c/p\u003e\n\u003ch5 id=\"查询作业job的指标\"\u003e查询作业(Job)的指标\u003c/h5\u003e\n\u003cp\u003eJobManager 通过其 REST API 公开系统和用户\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/metrics.html\"\u003e指标\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e端点取决于这些指标的范围。可以通过 \u003ccode\u003ejobs/\u0026lt;job-id\u0026gt;/metrics\u003c/code\u003e 来列出一个作业的范围内的度量。指标的实际值可以通过 get query 参数进行查询。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-shells\" data-lang=\"shells\"\u003ecurl \u0026quot;localhost:8081/jobs/\u0026lt;jod-id\u0026gt;/metrics?get=lastCheckpointSize\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印; 没有占位符)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;lastCheckpointSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;9378\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eREST API 不仅可以用来查询指标，还可以检索运行中的作业状态的详细信息。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# find the vertex-id of the vertex of interest\u003c/span\u003e\ncurl localhost:8081/jobs/\u0026lt;jod-id\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;jid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Click Event Count\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;isStoppable\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;state\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;start-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066026\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;end-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e-1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;duration\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e374793\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;now\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467440819\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;timestamps\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;CREATED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066026\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;FINISHED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;SUSPENDED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;FAILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;CANCELLING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;CANCELED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;RECONCILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066126\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;FAILED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;RESTARTING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;vertices\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ClickEvent Source\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;start-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066423\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;end-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e-1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;duration\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e374396\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;tasks\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CREATED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FINISHED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;DEPLOYING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FAILED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RECONCILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;SCHEDULED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;metrics\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5033461\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e166351\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Timestamps/Watermarks\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;start-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066441\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;end-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e-1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;duration\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e374378\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;tasks\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CREATED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FINISHED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;DEPLOYING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FAILED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RECONCILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;SCHEDULED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;metrics\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5066280\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5033496\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e166349\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e166349\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ClickEvent Counter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;start-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066469\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;end-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e-1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;duration\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e374350\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;tasks\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CREATED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FINISHED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;DEPLOYING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FAILED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RECONCILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;SCHEDULED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;metrics\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5085332\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e316\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e166305\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ClickEventStatistics Sink\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;start-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066476\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;end-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e-1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;duration\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e374343\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;tasks\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CREATED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FINISHED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;DEPLOYING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FAILED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RECONCILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;SCHEDULED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;metrics\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e20668\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;status-counts\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;CREATED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;FINISHED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;DEPLOYING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;CANCELING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;FAILED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;CANCELED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;RECONCILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;SCHEDULED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;plan\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;jid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Click Event Count\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;nodes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ClickEventStatistics Sink\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;inputs\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;num\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;ship_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;FORWARD\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;exchange\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;pipelined_bounded\u0026#34;\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;optimizer_properties\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ClickEvent Counter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;inputs\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;num\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;ship_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;HASH\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;exchange\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;pipelined_bounded\u0026#34;\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;optimizer_properties\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Timestamps/Watermarks\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;inputs\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;num\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;ship_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;FORWARD\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;exchange\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;pipelined_bounded\u0026#34;\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;optimizer_properties\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ClickEvent Source\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;optimizer_properties\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请查阅 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/rest_api.html#api\"\u003eREST API 参考资料\u003c/a\u003e，了解可能查询的完整列表，包括如何查询不同作用域的指标（如 TaskManager 指标）。\u003c/p\u003e\n\u003ch4 id=\"变体\"\u003e变体\u003c/h4\u003e\n\u003cp\u003e你可能已经注意到，Click Event Count 应用程序总是以 \u003ccode\u003e--checkpointing\u003c/code\u003e 和 \u003ccode\u003e--event-time\u003c/code\u003e 程序参数启动。通过在 docker-compose.yaml 的客户端容器的命令中省略这些，你可以改变 Job 的行为。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e--checkpointing\u003c/code\u003e 启用了 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/fault_tolerance.html\"\u003echeckpoint\u003c/a\u003e，这是 Flink 的容错机制。如果你在没有它的情况下运行，并通过\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#observing-failure--recovery\"\u003e故障和恢复\u003c/a\u003e，你应该会看到数据实际上已经丢失了。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e--event-time\u003c/code\u003e 启用了你的 Job 的\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/event_time.html\"\u003e事件时间语义\u003c/a\u003e。当禁用时，作业将根据挂钟时间而不是 ClickEvent 的时间戳将事件分配给窗口。因此，每个窗口的事件数量将不再是精确的 1000。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eClick Event Count 应用程序还有另一个选项，默认情况下是关闭的，你可以启用这个选项来探索这个作业在背压下的行为。你可以在 \u003ccode\u003edocker-compose.yaml\u003c/code\u003e 的客户端容器的命令中添加这个选项。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--backpressure\u003c/code\u003e 在作业中间增加了一个额外的 operator，在偶数分钟内会造成严重的背压（例如，在10:12期间，但在10:13期间不会）。这可以通过检查各种\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/metrics.html#default-shuffle-service\"\u003e网络指标\u003c/a\u003e（如 outputQueueLength 和 outPoolUsage）和/或使用 WebUI 中的\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/back_pressure.html#monitoring-back-pressure\"\u003e背压监控\u003c/a\u003e来观察。\u003c/li\u003e\n\u003c/ul\u003e\n","text":"Flink 操作游乐场 在各种环境中部署和操作 Apache Flink 的方法有很多。无论这种多样性如何，Flink 集群的基本构件保持不变，类似的操作原则也适用。\n在这个操场上，你将学习如何管理和运行 Flink Jobs。您将看到如何部署和监控应用程序，体验 Flink 如何从 Job 故障中恢复，并执行日常操作任务，如升级和重新缩放。\n这个游乐场的解剖 这个游乐场由一个持久的 Flink Session Cluster和一个 Kafka Cluster 组成。\n一个 Flink Cluster 总是由一个 JobManager 和一个或多个 Flink TaskManager 组成。JobManager 负责处理 Job 提交，监督 Job 以及资源管理。Flink TaskManager 是 worker 进程，负责执行构成 Flink Job 的实际任务。在这个游戏场中，你将从一个单一的 TaskManager 开始，但以后会扩展到更多的 TaskManager。此外，这个游乐场还带有一个专门的客户端容器，我们使用它来提交 Flink Job，并在以后执行各种操作任务。客户端容器不是 Flink Cluster 本身需要的，只是为了方便使用才包含在里面。\nKafka 集群由一个 Zookeeper 服务器和一个 Kafka Broker 组成。\n当游乐场启动时，一个名为 Flink Event Count 的 Flink Job 将被提交给 JobManager。此外，还会创建两个 Kafka 主题 input 和 output。\n该作业从 input 主题中消耗点击事件(ClickEvent)，每个点击事件(ClickEvent)都有一个时间戳(timestamp)和一个页面(page)。然后按页面对事件进行分组(keyed by)，并在 15 秒的窗口中进行计数。结果被写入 output 主题。\n有6个不同的页面，我们在每个页面和15秒内产生1000个点击事件。因此，Flink 作业的输出应该显示每个页面和窗口有1000个浏览量。\n启动游乐场 游戏场环境的设置只需几步。我们将引导你完成必要的命令，并展示如何验证一切都在正确运行。\n我们假设你的机器上安装了 Docker（1.12+）和 docker-compose（2.1+）。\n所需的配置文件可以在 flink-playgrounds 仓库中找到。检查一下，然后对齐环境。\ngit clone --branch release-1.11 https://github.com/apache/flink-playgrounds.git cd flink-playgrounds/operations-playground docker-compose build docker-compose up -d 之后，你可以用以下命令检查正在运行的 Docker 容器。\ndocker-compose ps Name Command State Ports ----------------------------------------------------------------------------------------------------------------------------- operations-playground_clickevent-generator_1 /docker-entrypoint.sh java ... Up 6123/tcp, 8081/tcp operations-playground_client_1 /docker-entrypoint.sh flin ... Exit 0 operations-playground_jobmanager_1 /docker-entrypoint.sh jobm ... Up 6123/tcp, 0.0.0.0:8081-\u0026gt;8081/tcp operations-playground_kafka_1 start-kafka.sh Up 0.0.0.0:9094-\u0026gt;9094/tcp operations-playground_taskmanager_1 /docker-entrypoint.sh task ... Up 6123/tcp, 8081/tcp operations-playground_zookeeper_1 /bin/sh -c /usr/sbin/sshd ... Up 2181/tcp, 22/tcp, 2888/tcp, 3888/tcp 这表明客户端容器已经成功提交了 Flink Job（Exit 0），所有集群组件以及数据生成器都在运行（Up）。\n您可以通过调用来停止游乐场环境。\ndocker-compose down -v 进入游乐场 在这个游乐场中，有很多东西你可以尝试和检查。在下面的两节中，我们将向您展示如何与 Flink 集群进行交互，并展示 Flink 的一些关键功能。\nFlink WebUI 观察你的 Flink 集群最自然的出发点是在 http://localhost:8081 下暴露的 WebUI。如果一切顺利，你会看到集群最初由一个任务管理器组成，并执行一个名为 Click Event Count 的 Job。\nFlink WebUI 包含了很多关于 Flink 集群和它的工作的有用和有趣的信息（JobGraph, Metrics, Checkpointing Statistics, TaskManager Status, \u0026hellip;）。\n日志 JobManager 可以通过 docker-compose 对 JobManager 日志进行跟踪。\ndocker-compose logs -f jobmanager 在初始启动后，你应该主要看到每一个检查点完成的日志信息。\nTaskManager TaskManager 的日志也可以用同样的方式进行 tail。\ndocker-compose logs -f taskmanager 在初始启动后，你应该主要看到每个检查点完成的日志信息。\nFlink CLI Flink CLI 可以在客户端容器中使用。例如，要打印 Flink CLI 的帮助信息，你可以运行以下命令\ndocker-compose run --no-deps client flink --help Flink REST API Flink REST API 通过主机上的 localhost:8081 或客户端容器中的 jobmanager:8081 暴露出来，例如，要列出所有当前正在运行的作业，你可以运行:\ncurl localhost:8081/jobs Kafka Topics 你可以通过运行以下命令来查看写入 Kafka 主题的记录\n//input topic (1000 records/s) docker-compose exec kafka kafka-console-consumer.sh \\  --bootstrap-server localhost:9092 --topic input //output topic (24 records/min) docker-compose exec kafka kafka-console-consumer.sh \\  --bootstrap-server localhost:9092 --topic output Time to Play! 现在你已经学会了如何与 Flink 和 Docker 容器进行交互，让我们来看看一些常见的操作任务，你可以在我们的游乐场上尝试一下。所有这些任务都是相互独立的，即你可以以任何顺序执行它们。大多数任务可以通过 CLI 和 REST API 来执行。\n列出正在运行的 Job  CLI  命令\ndocker-compose run --no-deps client flink list 期望的输出\nWaiting for response... ------------------ Running/Restarting Jobs ------------------- 16.07.2019 16:37:55 : \u0026lt;job-id\u0026gt; : Click Event Count (RUNNING) -------------------------------------------------------------- No scheduled jobs.  REST API  请求\ncurl localhost:8081/jobs 期待的响应(美化了打印)\n{ \u0026#34;jobs\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;RUNNING\u0026#34; } ] } JobID 在提交时被分配给作业(Job)，并且需要通过 CLI 或 REST API 对作业(Job)执行操作。\n观察故障和恢复 Flink 在(部分)失败下提供了精确的一次处理保证。在这个游乐场中，你可以观察并在一定程度上验证这种行为。\n步骤1：观察输出\n如上所述，在这个游乐场中的事件是这样生成的，每个窗口正好包含一千条记录。因此，为了验证 Flink 是否成功地从 TaskManager 故障中恢复，而没有数据丢失或重复，你可以跟踪 output 主题，并检查恢复后所有的窗口都存在，而且计数是正确的。\n为此，从 output 主题开始读取，并让这个命令运行到恢复后（步骤3）。\ndocker-compose exec kafka kafka-console-consumer.sh \\  --bootstrap-server localhost:9092 --topic output 第二步：引入故障\n为了模拟部分故障，你可以杀死一个 TaskManager，在生产设置中，这可能对应于 TaskManager 进程、TaskManager 机器的丢失，或者仅仅是框架或用户代码抛出的瞬时异常（例如由于暂时不可用）。\ndocker-compose kill taskmanager 几秒钟后，JobManager 会注意到 TaskManager 的丢失，取消受影响的 Job，并立即重新提交它进行恢复。当 Job 被重新启动后，其任务仍处于 SCHEDULED 状态，由紫色的方块表示（见下面的截图）。\n注意：即使作业(Job)的任务(Task)处于 SCHEDULED 状态而不是 RUNNING 状态，作业(Job)的整体状态也会显示为 RUNNING。\n此时，Job 的任务(Task)不能从 SCHEDULED 状态转为 RUNNING 状态，因为没有资源(TaskManager 提供的 TaskSlots）来运行这些任务。在新的 TaskManager 可用之前，Job 将经历一个取消和重新提交的循环。\n同时，数据生成器会不断地将 ClickEvents 推送到 input 主题中。这类似于真正的生产设置，在生产数据的同时，要处理数据的 Job 却宕机了。\n步骤3：恢复\n一旦你重新启动 TaskManager，它就会重新连接到 JobManager。\ndocker-compose up -d taskmanager 当 JobManager 被通知到新的 TaskManager 时，它将恢复中的 Job 的任务(tasks)调度到新的可用 TaskSlots。重新启动后，任务会从故障前最后一次成功的检查点恢复其状态，并切换到 RUNNING 状态。\nJob 将快速处理来自 Kafka 的全部积压输入事件(在故障期间积累的)，并以更高的速度(\u0026gt;24条记录/分钟)产生输出，直到到达流的头部。在输出中，你会看到所有的键(页面)都存在于所有的时间窗口中，而且每个计数都是精确的 1000。由于我们是在\u0026quot;至少一次\u0026quot;模式下使用 FlinkKafkaProducer，所以你有可能会看到一些重复的输出记录。\n注意：大多数生产设置依赖于资源管理器(Kubernetes、Yarn、Mesos)来自动重启失败的进程。\n升级和重新缩放作业 升级 Flink 作业总是涉及两个步骤。首先，用一个保存点优雅地停止 Flink Job。保存点是在一个明确定义的、全局一致的时间点(类似于检查点)上的完整应用状态的一致快照。其次，升级后的 Flink Job 从 Savepoint 开始。在这种情况下，\u0026ldquo;升级\u0026quot;可以意味着不同的事情，包括以下内容:\n 配置的升级（包括作业的并行性）。 对 Job 的拓扑结构进行升级（增加/删除 Operator）。 对 Job 的用户定义的函数进行升级。  在开始升级之前，你可能要开始 tailing output 主题，以观察在升级过程中没有数据丢失或损坏。\ndocker-compose exec kafka kafka-console-consumer.sh \\  --bootstrap-server localhost:9092 --topic output 第一步：停止工作\n要优雅地停止作业，您需要使用 CLI 或 REST API 的 \u0026ldquo;stop\u0026rdquo; 命令。为此，您需要该作业的 JobID，您可以通过列出所有正在运行的 Job 或从 WebUI 中获得。有了 JobID，您就可以继续停止该作业:\n CLI  命令\ndocker-compose run --no-deps client flink stop \u0026lt;job-id\u0026gt; 预期的输出\nSuspending job \u0026quot;\u0026lt;job-id\u0026gt;\u0026quot; with a savepoint. Suspended job \u0026quot;\u0026lt;job-id\u0026gt;\u0026quot; with a savepoint. Savepoint 已经被存储到 flink-conf.yaml 中配置的 state.savepoint.dir 中，它被安装在本地机器的 /tmp/flink-savepoints-directory/ 下。在下一步中，你将需要这个 Savepoint 的路径。在 REST API 的情况下，这个路径已经是响应的一部分，你将需要直接查看文件系统。\n命令\nls -lia /tmp/flink-savepoints-directory 预期的输出\ntotal 0 17 drwxr-xr-x 3 root root 60 17 jul 17:05 . 2 drwxrwxrwt 135 root root 3420 17 jul 17:09 .. 1002 drwxr-xr-x 2 root root 140 17 jul 17:05 savepoint-\u0026lt;short-job-id\u0026gt;-\u0026lt;uuid\u0026gt;  REST API  请求\n# triggering stop curl -X POST localhost:8081/jobs/\u0026lt;job-id\u0026gt;/stop -d \u0026#39;{\u0026#34;drain\u0026#34;: false}\u0026#39; 预期的响应(美化了打印)\n{ \u0026#34;request-id\u0026#34;: \u0026#34;\u0026lt;trigger-id\u0026gt;\u0026#34; } 请求\n# check status of stop action and retrieve savepoint path curl localhost:8081/jobs/\u0026lt;job-id\u0026gt;/savepoints/\u0026lt;trigger-id\u0026gt; 预期的响应(美化了打印)\n{ \u0026#34;status\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;COMPLETED\u0026#34; }, \u0026#34;operation\u0026#34;: { \u0026#34;location\u0026#34;: \u0026#34;\u0026lt;savepoint-path\u0026gt;\u0026#34; } } 步骤2a: 重启 Job，不做任何改变\n现在您可以从该保存点重新启动升级后的作业(Job)。为了简单起见，您可以在不做任何更改的情况下重新启动它。\n CLI  命令\ndocker-compose run --no-deps client flink run -s \u0026lt;savepoint-path\u0026gt; \\  -d /opt/ClickCountJob.jar \\  --bootstrap.servers kafka:9092 --checkpointing --event-time 预期的输出\nStarting execution of program Job has been submitted with JobID \u0026lt;job-id\u0026gt;  REST API  请求\n# Uploading the JAR from the Client container docker-compose run --no-deps client curl -X POST -H \u0026#34;Expect:\u0026#34; \\  -F \u0026#34;jarfile=@/opt/ClickCountJob.jar\u0026#34; http://jobmanager:8081/jars/upload 预期的响应(美化了打印)\n{ \u0026#34;filename\u0026#34;: \u0026#34;/tmp/flink-web-\u0026lt;uuid\u0026gt;/flink-web-upload/\u0026lt;jar-id\u0026gt;\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;success\u0026#34; } 请求\n# Submitting the Job curl -X POST http://localhost:8081/jars/\u0026lt;jar-id\u0026gt;/run \\  -d \u0026#39;{\u0026#34;programArgs\u0026#34;: \u0026#34;--bootstrap.servers kafka:9092 --checkpointing --event-time\u0026#34;, \u0026#34;savepointPath\u0026#34;: \u0026#34;\u0026lt;savepoint-path\u0026gt;\u0026#34;}\u0026#39; 预期的输出\n{ \u0026#34;jobid\u0026#34;: \u0026#34;\u0026lt;job-id\u0026gt;\u0026#34; } 一旦 Job 再次 RUNNING，你会在 output 主题中看到，当 Job 在处理中断期间积累的积压时，记录以较高的速度产生。此外，你会看到在升级过程中没有丢失任何数据：所有窗口都存在，数量正好是 1000。\n步骤2b: 用不同的并行度重新启动作业（重新缩放）\n另外，您也可以在重新提交时通过传递不同的并行性，从这个保存点重新缩放作业。\n CLI  docker-compose run --no-deps client flink run -p 3 -s \u0026lt;savepoint-path\u0026gt; \\  -d /opt/ClickCountJob.jar \\  --bootstrap.servers kafka:9092 --checkpointing --event-time 预期的输出\nStarting execution of program Job has been submitted with JobID \u0026lt;job-id\u0026gt;  REST API  请求\n# Uploading the JAR from the Client container docker-compose run --no-deps client curl -X POST -H \u0026#34;Expect:\u0026#34; \\  -F \u0026#34;jarfile=@/opt/ClickCountJob.jar\u0026#34; http://jobmanager:8081/jars/upload 预期的响应(美化了打印)\n{ \u0026#34;filename\u0026#34;: \u0026#34;/tmp/flink-web-\u0026lt;uuid\u0026gt;/flink-web-upload/\u0026lt;jar-id\u0026gt;\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;success\u0026#34; } 请求\n# Submitting the Job curl -X POST http://localhost:8081/jars/\u0026lt;jar-id\u0026gt;/run \\  -d \u0026#39;{\u0026#34;parallelism\u0026#34;: 3, \u0026#34;programArgs\u0026#34;: \u0026#34;--bootstrap.servers kafka:9092 --checkpointing --event-time\u0026#34;, \u0026#34;savepointPath\u0026#34;: \u0026#34;\u0026lt;savepoint-path\u0026gt;\u0026#34;}\u0026#39; 预期的响应(美化了打印)\n{ \u0026#34;jobid\u0026#34;: \u0026#34;\u0026lt;job-id\u0026gt;\u0026#34; } 现在，作业(Job)已经被重新提交，但它不会启动，因为没有足够的 TaskSlots 在增加的并行度下执行它（2个可用，需要3个）。使用:\ndocker-compose scale taskmanager=2 你可以在 Flink 集群中添加一个带有两个 TaskSlots 的第二个 TaskManager，它将自动注册到 JobManager 中。添加 TaskManager 后不久，该任务(Job)应该再次开始运行。\n一旦 Job 再次 \u0026ldquo;RUNNING\u0026rdquo;，你会在 output Topic 中看到在重新缩放过程中没有丢失数据：所有的窗口都存在，计数正好是 1000。\n查询作业(Job)的指标 JobManager 通过其 REST API 公开系统和用户指标。\n端点取决于这些指标的范围。可以通过 jobs/\u0026lt;job-id\u0026gt;/metrics 来列出一个作业的范围内的度量。指标的实际值可以通过 get query 参数进行查询。\n请求\ncurl \u0026quot;localhost:8081/jobs/\u0026lt;jod-id\u0026gt;/metrics?get=lastCheckpointSize\u0026quot; 预期的响应(美化了打印; 没有占位符)\n[ { \u0026#34;id\u0026#34;: \u0026#34;lastCheckpointSize\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;9378\u0026#34; } ] REST API 不仅可以用来查询指标，还可以检索运行中的作业状态的详细信息。\n请求\n# find the vertex-id of the vertex of interest curl localhost:8081/jobs/\u0026lt;jod-id\u0026gt; 预期的响应(美化了打印)\n{ \u0026#34;jid\u0026#34;: \u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Click Event Count\u0026#34;, \u0026#34;isStoppable\u0026#34;: false, \u0026#34;state\u0026#34;: \u0026#34;RUNNING\u0026#34;, \u0026#34;start-time\u0026#34;: 1564467066026, \u0026#34;end-time\u0026#34;: -1, \u0026#34;duration\u0026#34;: 374793, \u0026#34;now\u0026#34;: 1564467440819, \u0026#34;timestamps\u0026#34;: { \u0026#34;CREATED\u0026#34;: 1564467066026, \u0026#34;FINISHED\u0026#34;: 0, \u0026#34;SUSPENDED\u0026#34;: 0, \u0026#34;FAILING\u0026#34;: 0, \u0026#34;CANCELLING\u0026#34;: 0, \u0026#34;CANCELED\u0026#34;: 0, \u0026#34;RECONCILING\u0026#34;: 0, \u0026#34;RUNNING\u0026#34;: 1564467066126, \u0026#34;FAILED\u0026#34;: 0, \u0026#34;RESTARTING\u0026#34;: 0 }, \u0026#34;vertices\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;ClickEvent Source\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;status\u0026#34;: \u0026#34;RUNNING\u0026#34;, \u0026#34;start-time\u0026#34;: 1564467066423, \u0026#34;end-time\u0026#34;: -1, \u0026#34;duration\u0026#34;: 374396, \u0026#34;tasks\u0026#34;: { \u0026#34;CREATED\u0026#34;: 0, \u0026#34;FINISHED\u0026#34;: 0, \u0026#34;DEPLOYING\u0026#34;: 0, \u0026#34;RUNNING\u0026#34;: 2, \u0026#34;CANCELING\u0026#34;: 0, \u0026#34;FAILED\u0026#34;: 0, \u0026#34;CANCELED\u0026#34;: 0, \u0026#34;RECONCILING\u0026#34;: 0, \u0026#34;SCHEDULED\u0026#34;: 0 }, \u0026#34;metrics\u0026#34;: { \u0026#34;read-bytes\u0026#34;: 0, \u0026#34;read-bytes-complete\u0026#34;: true, \u0026#34;write-bytes\u0026#34;: 5033461, \u0026#34;write-bytes-complete\u0026#34;: true, \u0026#34;read-records\u0026#34;: 0, \u0026#34;read-records-complete\u0026#34;: true, \u0026#34;write-records\u0026#34;: 166351, \u0026#34;write-records-complete\u0026#34;: true } }, { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Timestamps/Watermarks\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;status\u0026#34;: \u0026#34;RUNNING\u0026#34;, \u0026#34;start-time\u0026#34;: 1564467066441, \u0026#34;end-time\u0026#34;: -1, \u0026#34;duration\u0026#34;: 374378, \u0026#34;tasks\u0026#34;: { \u0026#34;CREATED\u0026#34;: 0, \u0026#34;FINISHED\u0026#34;: 0, \u0026#34;DEPLOYING\u0026#34;: 0, \u0026#34;RUNNING\u0026#34;: 2, \u0026#34;CANCELING\u0026#34;: 0, \u0026#34;FAILED\u0026#34;: 0, \u0026#34;CANCELED\u0026#34;: 0, \u0026#34;RECONCILING\u0026#34;: 0, \u0026#34;SCHEDULED\u0026#34;: 0 }, \u0026#34;metrics\u0026#34;: { \u0026#34;read-bytes\u0026#34;: 5066280, \u0026#34;read-bytes-complete\u0026#34;: true, \u0026#34;write-bytes\u0026#34;: 5033496, \u0026#34;write-bytes-complete\u0026#34;: true, \u0026#34;read-records\u0026#34;: 166349, \u0026#34;read-records-complete\u0026#34;: true, \u0026#34;write-records\u0026#34;: 166349, \u0026#34;write-records-complete\u0026#34;: true } }, { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;ClickEvent Counter\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;status\u0026#34;: \u0026#34;RUNNING\u0026#34;, \u0026#34;start-time\u0026#34;: 1564467066469, \u0026#34;end-time\u0026#34;: -1, \u0026#34;duration\u0026#34;: 374350, \u0026#34;tasks\u0026#34;: { \u0026#34;CREATED\u0026#34;: 0, \u0026#34;FINISHED\u0026#34;: 0, \u0026#34;DEPLOYING\u0026#34;: 0, \u0026#34;RUNNING\u0026#34;: 2, \u0026#34;CANCELING\u0026#34;: 0, \u0026#34;FAILED\u0026#34;: 0, \u0026#34;CANCELED\u0026#34;: 0, \u0026#34;RECONCILING\u0026#34;: 0, \u0026#34;SCHEDULED\u0026#34;: 0 }, \u0026#34;metrics\u0026#34;: { \u0026#34;read-bytes\u0026#34;: 5085332, \u0026#34;read-bytes-complete\u0026#34;: true, \u0026#34;write-bytes\u0026#34;: 316, \u0026#34;write-bytes-complete\u0026#34;: true, \u0026#34;read-records\u0026#34;: 166305, \u0026#34;read-records-complete\u0026#34;: true, \u0026#34;write-records\u0026#34;: 6, \u0026#34;write-records-complete\u0026#34;: true } }, { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;ClickEventStatistics Sink\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;status\u0026#34;: \u0026#34;RUNNING\u0026#34;, \u0026#34;start-time\u0026#34;: 1564467066476, \u0026#34;end-time\u0026#34;: -1, \u0026#34;duration\u0026#34;: 374343, \u0026#34;tasks\u0026#34;: { \u0026#34;CREATED\u0026#34;: 0, \u0026#34;FINISHED\u0026#34;: 0, \u0026#34;DEPLOYING\u0026#34;: 0, \u0026#34;RUNNING\u0026#34;: 2, \u0026#34;CANCELING\u0026#34;: 0, \u0026#34;FAILED\u0026#34;: 0, \u0026#34;CANCELED\u0026#34;: 0, \u0026#34;RECONCILING\u0026#34;: 0, \u0026#34;SCHEDULED\u0026#34;: 0 }, \u0026#34;metrics\u0026#34;: { \u0026#34;read-bytes\u0026#34;: 20668, \u0026#34;read-bytes-complete\u0026#34;: true, \u0026#34;write-bytes\u0026#34;: 0, \u0026#34;write-bytes-complete\u0026#34;: true, \u0026#34;read-records\u0026#34;: 6, \u0026#34;read-records-complete\u0026#34;: true, \u0026#34;write-records\u0026#34;: 0, \u0026#34;write-records-complete\u0026#34;: true } } ], \u0026#34;status-counts\u0026#34;: { \u0026#34;CREATED\u0026#34;: 0, \u0026#34;FINISHED\u0026#34;: 0, \u0026#34;DEPLOYING\u0026#34;: 0, \u0026#34;RUNNING\u0026#34;: 4, \u0026#34;CANCELING\u0026#34;: 0, \u0026#34;FAILED\u0026#34;: 0, \u0026#34;CANCELED\u0026#34;: 0, \u0026#34;RECONCILING\u0026#34;: 0, \u0026#34;SCHEDULED\u0026#34;: 0 }, \u0026#34;plan\u0026#34;: { \u0026#34;jid\u0026#34;: \u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Click Event Count\u0026#34;, \u0026#34;nodes\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;operator\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;operator_strategy\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ClickEventStatistics Sink\u0026#34;, \u0026#34;inputs\u0026#34;: [ { \u0026#34;num\u0026#34;: 0, \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;ship_strategy\u0026#34;: \u0026#34;FORWARD\u0026#34;, \u0026#34;exchange\u0026#34;: \u0026#34;pipelined_bounded\u0026#34; } ], \u0026#34;optimizer_properties\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;operator\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;operator_strategy\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ClickEvent Counter\u0026#34;, \u0026#34;inputs\u0026#34;: [ { \u0026#34;num\u0026#34;: 0, \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;ship_strategy\u0026#34;: \u0026#34;HASH\u0026#34;, \u0026#34;exchange\u0026#34;: \u0026#34;pipelined_bounded\u0026#34; } ], \u0026#34;optimizer_properties\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;operator\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;operator_strategy\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Timestamps/Watermarks\u0026#34;, \u0026#34;inputs\u0026#34;: [ { \u0026#34;num\u0026#34;: 0, \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;ship_strategy\u0026#34;: \u0026#34;FORWARD\u0026#34;, \u0026#34;exchange\u0026#34;: \u0026#34;pipelined_bounded\u0026#34; } ], \u0026#34;optimizer_properties\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;operator\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;operator_strategy\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ClickEvent Source\u0026#34;, \u0026#34;optimizer_properties\u0026#34;: {} } ] } } 请查阅 REST API 参考资料，了解可能查询的完整列表，包括如何查询不同作用域的指标（如 TaskManager 指标）。\n变体 你可能已经注意到，Click Event Count 应用程序总是以 --checkpointing 和 --event-time 程序参数启动。通过在 docker-compose.yaml 的客户端容器的命令中省略这些，你可以改变 Job 的行为。\n  --checkpointing 启用了 checkpoint，这是 Flink 的容错机制。如果你在没有它的情况下运行，并通过故障和恢复，你应该会看到数据实际上已经丢失了。\n  --event-time 启用了你的 Job 的事件时间语义。当禁用时，作业将根据挂钟时间而不是 ClickEvent 的时间戳将事件分配给窗口。因此，每个窗口的事件数量将不再是精确的 1000。\n  Click Event Count 应用程序还有另一个选项，默认情况下是关闭的，你可以启用这个选项来探索这个作业在背压下的行为。你可以在 docker-compose.yaml 的客户端容器的命令中添加这个选项。\n --backpressure 在作业中间增加了一个额外的 operator，在偶数分钟内会造成严重的背压（例如，在10:12期间，但在10:13期间不会）。这可以通过检查各种网络指标（如 outputQueueLength 和 outPoolUsage）和/或使用 WebUI 中的背压监控来观察。  "},"name":"Flink 操作游乐场","published":"2020-08-17T00:00:00+08:00","summary":"Flink Operations Playground","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-17-flink-operations-playground/"},{"content":{"html":"\u003ch2 id=\"python-api-指南\"\u003ePython API 指南\u003c/h2\u003e\n\u003cp\u003e本演练将快速让你开始构建一个纯 Python Flink 项目。\u003c/p\u003e\n\u003cp\u003e关于如何设置 Python 执行环境，请参考 Python Table API \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/python/installation.html\"\u003e安装指南\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"设置一个-python-项目\"\u003e设置一个 Python 项目\u003c/h3\u003e\n\u003cp\u003e您可以先创建一个 Python 项目，然后按照\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/python/installation.html#installation-of-pyflink\"\u003e安装指南\u003c/a\u003e安装 PyFlink 包。\u003c/p\u003e\n\u003ch3 id=\"编写一个-flink-python-table-api-程序\"\u003e编写一个 Flink Python Table API 程序\u003c/h3\u003e\n\u003cp\u003eTable API 应用程序通过声明一个表环境开始；对于批处理应用程序，可以是 BatchTableEvironment，对于流式应用程序，可以是 StreamTableEnvironment。这作为与 Flink 运行时交互的主要入口点。它可以用来设置执行参数，如重启策略、默认并行度等。表配置允许设置 Table API 的具体配置。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003eexec_env\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget_execution_environment\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexec_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eset_parallelism\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003et_config\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTableConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBatchTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexec_env\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003et_config\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在创建的表环境中，可以声明 source/sink 表。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFileSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e/tmp/input\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_format\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOldCsv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_schema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSchema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate_temporary_table\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySource\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFileSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e/tmp/output\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_format\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOldCsv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield_delimiter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\t\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecount\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_schema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSchema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecount\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate_temporary_table\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySink\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你也可以使用 \u003ccode\u003eTableEnvironment.sql_update()\u003c/code\u003e 方法来注册 DDL 中定义的 source/sink 表。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003emy_source_ddl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e    create table mySource (\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        word VARCHAR\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e    ) with (\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003econnector.type\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e = \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003efilesystem\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003eformat.type\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e = \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003ecsv\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003econnector.path\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e = \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e/tmp/input\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e    )\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emy_sink_ddl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e    create table mySink (\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        word VARCHAR,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        `count` BIGINT\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e    ) with (\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003econnector.type\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e = \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003efilesystem\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003eformat.type\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e = \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003ecsv\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003econnector.path\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e = \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e/tmp/output\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e    )\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esql_update\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_source_ddl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esql_update\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_sink_ddl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将在执行环境中注册一个名为 \u003cstrong\u003emySource\u003c/strong\u003e 的表和一个名为 \u003cstrong\u003emySink\u003c/strong\u003e 的表。表 \u003cstrong\u003emySource\u003c/strong\u003e 只有一列，即 \u003cstrong\u003eword\u003c/strong\u003e，它消耗从文件 \u003ccode\u003e/tmp/input\u003c/code\u003e 中读取的字符串。表 \u003cstrong\u003emySink\u003c/strong\u003e 有两列，分别是 \u003cstrong\u003eword\u003c/strong\u003e 和 \u003cstrong\u003ecount\u003c/strong\u003e，将数据写入文件 \u003ccode\u003e/tmp/output\u003c/code\u003e，用 \u003ccode\u003e/t\u003c/code\u003e 作为字段分隔符。\u003c/p\u003e\n\u003cp\u003e现在，你可以创建一个作业(job)，它从表 \u003cstrong\u003emySource\u003c/strong\u003e 中读取输入，预先执行一些转换，并将结果写入表 \u003cstrong\u003emySink\u003c/strong\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efrom_path\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySource\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egroup_by\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword, count(1)\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einsert_into\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySink\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后你必须执行实际的 Flink Python Table API 作业。所有的操作，如创建源、转换和 sink 都是懒惰的。只有当 \u003ccode\u003et_env.execute(job_name)\u003c/code\u003e 被调用时，作业才会被运行。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003etutorial_job\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e到目前为止，完整的代码如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003epyflink.dataset\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eExecutionEnvironment\u003c/span\u003e\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003epyflink.table\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eTableConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBatchTableEnvironment\u003c/span\u003e\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003epyflink.table.descriptors\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eSchema\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eOldCsv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFileSystem\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eexec_env\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget_execution_environment\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexec_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eset_parallelism\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003et_config\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTableConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBatchTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexec_env\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003et_config\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFileSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e/tmp/input\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_format\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOldCsv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_schema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSchema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate_temporary_table\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySource\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFileSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e/tmp/output\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_format\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOldCsv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield_delimiter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\t\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecount\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_schema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSchema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecount\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate_temporary_table\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySink\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efrom_path\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySource\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egroup_by\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword, count(1)\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einsert_into\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySink\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003etutorial_job\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"执行-flink-python-table-api-程序\"\u003e执行 Flink Python Table API 程序\u003c/h3\u003e\n\u003cp\u003e首先，你需要在 \u0026ldquo;/tmp/input\u0026rdquo; 文件中准备输入数据。你可以选择以下命令行来准备输入数据。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e -e  \u003cspan class=\"s2\"\u003e\u0026#34;flink\\npyflink\\nflink\u0026#34;\u003c/span\u003e \u0026gt; /tmp/input\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来，你可以在命令行上运行这个例子（注意：如果结果文件 \u0026ldquo;/tmp/output\u0026rdquo; 已经存在，你需要在运行这个例子之前删除该文件）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ python WordCount.py\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e该命令在本地小型集群中构建并运行 Python Table API 程序。你也可以将 Python Table API 程序提交到远程集群，详情可以参考 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/cli.html#job-submission-examples\"\u003eJob Submission Examples\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e最后，您可以在命令行中看到执行结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ cat /tmp/output\nflink\t\u003cspan class=\"m\"\u003e2\u003c/span\u003e\npyflink\t\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这应该可以让你开始编写自己的 Flink Python Table API 程序。要了解更多关于 Python Table API 的信息，你可以参考 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/api/python\"\u003eFlink Python Table API Docs\u003c/a\u003e 了解更多细节。\u003c/p\u003e\n","text":"Python API 指南 本演练将快速让你开始构建一个纯 Python Flink 项目。\n关于如何设置 Python 执行环境，请参考 Python Table API 安装指南。\n设置一个 Python 项目 您可以先创建一个 Python 项目，然后按照安装指南安装 PyFlink 包。\n编写一个 Flink Python Table API 程序 Table API 应用程序通过声明一个表环境开始；对于批处理应用程序，可以是 BatchTableEvironment，对于流式应用程序，可以是 StreamTableEnvironment。这作为与 Flink 运行时交互的主要入口点。它可以用来设置执行参数，如重启策略、默认并行度等。表配置允许设置 Table API 的具体配置。\nexec_env = ExecutionEnvironment.get_execution_environment() exec_env.set_parallelism(1) t_config = TableConfig() t_env = BatchTableEnvironment.create(exec_env, t_config) 在创建的表环境中，可以声明 source/sink 表。\nt_env.connect(FileSystem().path(\u0026#39;/tmp/input\u0026#39;)) \\ .with_format(OldCsv() .field(\u0026#39;word\u0026#39;, DataTypes.STRING())) \\ .with_schema(Schema() .field(\u0026#39;word\u0026#39;, DataTypes.STRING())) \\ .create_temporary_table(\u0026#39;mySource\u0026#39;) t_env.connect(FileSystem().path(\u0026#39;/tmp/output\u0026#39;)) \\ .with_format(OldCsv() .field_delimiter(\u0026#39;\\t\u0026#39;) .field(\u0026#39;word\u0026#39;, DataTypes.STRING()) .field(\u0026#39;count\u0026#39;, DataTypes.BIGINT())) \\ .with_schema(Schema() .field(\u0026#39;word\u0026#39;, DataTypes.STRING()) .field(\u0026#39;count\u0026#39;, DataTypes.BIGINT())) \\ .create_temporary_table(\u0026#39;mySink\u0026#39;) 你也可以使用 TableEnvironment.sql_update() 方法来注册 DDL 中定义的 source/sink 表。\nmy_source_ddl = \u0026#34;\u0026#34;\u0026#34;create table mySource (word VARCHAR) with (\u0026#39;connector.type\u0026#39;= \u0026#39;filesystem\u0026#39;,\u0026#39;format.type\u0026#39;= \u0026#39;csv\u0026#39;,\u0026#39;connector.path\u0026#39;= \u0026#39;/tmp/input\u0026#39;)\u0026#34;\u0026#34;\u0026#34; my_sink_ddl = \u0026#34;\u0026#34;\u0026#34;create table mySink (word VARCHAR,`count` BIGINT) with (\u0026#39;connector.type\u0026#39;= \u0026#39;filesystem\u0026#39;,\u0026#39;format.type\u0026#39;= \u0026#39;csv\u0026#39;,\u0026#39;connector.path\u0026#39;= \u0026#39;/tmp/output\u0026#39;)\u0026#34;\u0026#34;\u0026#34; t_env.sql_update(my_source_ddl) t_env.sql_update(my_sink_ddl) 这将在执行环境中注册一个名为 mySource 的表和一个名为 mySink 的表。表 mySource 只有一列，即 word，它消耗从文件 /tmp/input 中读取的字符串。表 mySink 有两列，分别是 word 和 count，将数据写入文件 /tmp/output，用 /t 作为字段分隔符。\n现在，你可以创建一个作业(job)，它从表 mySource 中读取输入，预先执行一些转换，并将结果写入表 mySink。\nt_env.from_path(\u0026#39;mySource\u0026#39;) \\ .group_by(\u0026#39;word\u0026#39;) \\ .select(\u0026#39;word, count(1)\u0026#39;) \\ .insert_into(\u0026#39;mySink\u0026#39;) 最后你必须执行实际的 Flink Python Table API 作业。所有的操作，如创建源、转换和 sink 都是懒惰的。只有当 t_env.execute(job_name) 被调用时，作业才会被运行。\nt_env.execute(\u0026#34;tutorial_job\u0026#34;) 到目前为止，完整的代码如下:\nfrom pyflink.dataset import ExecutionEnvironment from pyflink.table import TableConfig, DataTypes, BatchTableEnvironment from pyflink.table.descriptors import Schema, OldCsv, FileSystem exec_env = ExecutionEnvironment.get_execution_environment() exec_env.set_parallelism(1) t_config = TableConfig() t_env = BatchTableEnvironment.create(exec_env, t_config) t_env.connect(FileSystem().path(\u0026#39;/tmp/input\u0026#39;)) \\ .with_format(OldCsv() .field(\u0026#39;word\u0026#39;, DataTypes.STRING())) \\ .with_schema(Schema() .field(\u0026#39;word\u0026#39;, DataTypes.STRING())) \\ .create_temporary_table(\u0026#39;mySource\u0026#39;) t_env.connect(FileSystem().path(\u0026#39;/tmp/output\u0026#39;)) \\ .with_format(OldCsv() .field_delimiter(\u0026#39;\\t\u0026#39;) .field(\u0026#39;word\u0026#39;, DataTypes.STRING()) .field(\u0026#39;count\u0026#39;, DataTypes.BIGINT())) \\ .with_schema(Schema() .field(\u0026#39;word\u0026#39;, DataTypes.STRING()) .field(\u0026#39;count\u0026#39;, DataTypes.BIGINT())) \\ .create_temporary_table(\u0026#39;mySink\u0026#39;) t_env.from_path(\u0026#39;mySource\u0026#39;) \\ .group_by(\u0026#39;word\u0026#39;) \\ .select(\u0026#39;word, count(1)\u0026#39;) \\ .insert_into(\u0026#39;mySink\u0026#39;) t_env.execute(\u0026#34;tutorial_job\u0026#34;) 执行 Flink Python Table API 程序 首先，你需要在 \u0026ldquo;/tmp/input\u0026rdquo; 文件中准备输入数据。你可以选择以下命令行来准备输入数据。\n$ echo -e \u0026#34;flink\\npyflink\\nflink\u0026#34; \u0026gt; /tmp/input 接下来，你可以在命令行上运行这个例子（注意：如果结果文件 \u0026ldquo;/tmp/output\u0026rdquo; 已经存在，你需要在运行这个例子之前删除该文件）。\n$ python WordCount.py 该命令在本地小型集群中构建并运行 Python Table API 程序。你也可以将 Python Table API 程序提交到远程集群，详情可以参考 Job Submission Examples。\n最后，您可以在命令行中看到执行结果。\n$ cat /tmp/output flink\t2 pyflink\t1 这应该可以让你开始编写自己的 Flink Python Table API 程序。要了解更多关于 Python Table API 的信息，你可以参考 Flink Python Table API Docs 了解更多细节。\n"},"name":"Python API 指南","published":"2020-08-17T00:00:00+08:00","summary":"Python API Tutorial","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-17-python-api-tutorial/"},{"content":{"html":"\u003ch1 id=\"apache-kafka-connector\"\u003eApache Kafka Connector\u003c/h1\u003e\n\u003ch2 id=\"kafka-consumer\"\u003eKafka Consumer\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eproperties\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eProperties\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eproperties\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetProperty\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;bootstrap.servers\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;localhost:9092\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eproperties\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetProperty\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;group.id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003estream\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddSource\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eFlinkKafkaConsumer\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;topic\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eSimpleStringSchema\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eproperties\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"Apache Kafka Connector Kafka Consumer val properties = new Properties() properties.setProperty(\u0026#34;bootstrap.servers\u0026#34;, \u0026#34;localhost:9092\u0026#34;) properties.setProperty(\u0026#34;group.id\u0026#34;, \u0026#34;test\u0026#34;) stream = env .addSource(new FlinkKafkaConsumer[String](\u0026#34;topic\u0026#34;, new SimpleStringSchema(), properties)) "},"name":"Flink 中的 Connectors","published":"2020-08-07T00:00:00+08:00","summary":"连接器","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-05-connectors-in-flink/"},{"content":{"html":"\u003cp\u003eApache Flink 提供的 Table API 是一个统一的、关系型的 API，用于批处理和流处理，即在无边界的、实时的流或有边界的、批处理的数据集上以相同的语义执行查询，并产生相同的结果。Flink 中的 Table API 通常用于简化数据分析、数据管道化和 ETL 应用的定义。\u003c/p\u003e\n\u003ch2 id=\"你要构建什么\"\u003e你要构建什么?\u003c/h2\u003e\n\u003cp\u003e在本教程中，你将学习如何构建一个实时的仪表盘，以按账户跟踪金融交易。该管道将从 Kafka 读取数据，并将结果写入 MySQL，通过 Grafana 可视化。\u003c/p\u003e\n\u003ch2 id=\"先决条件\"\u003e先决条件\u003c/h2\u003e\n\u003cp\u003e本演练假设你对 Java 或 Scala 有一定的熟悉，但即使你来自不同的编程语言，你也应该能够跟上。它还假设你熟悉基本的关系概念，如 SELECT 和 GROUP BY 子句。\u003c/p\u003e\n\u003ch2 id=\"救命-我被卡住了\"\u003e救命, 我被卡住了!\u003c/h2\u003e\n\u003cp\u003e如果你遇到困难，请查看\u003ca href=\"https://flink.apache.org/community.html\"\u003e社区支持资源\u003c/a\u003e。特别是 Apache Flink 的\u003ca href=\"https://flink.apache.org/community.html#mailing-lists\"\u003e用户邮件列表\u003c/a\u003e，它一直是 Apache 项目中最活跃的一个，也是快速获得帮助的好方法。\u003c/p\u003e\n\u003ch2 id=\"如何跟进\"\u003e如何跟进\u003c/h2\u003e\n\u003cp\u003e如果你想跟着走，你需要一台电脑与。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJava 8 或 11\u003c/li\u003e\n\u003cli\u003eMaven\u003c/li\u003e\n\u003cli\u003eDocker\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所需的配置文件可在 \u003ca href=\"https://github.com/apache/flink-playgrounds\"\u003eflink-playgrounds\u003c/a\u003e 资源库中获得。下载后，在 IDE 中打开项目 flink-playground/table-walkthrough，并导航到文件 SpendReport。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e \u003cspan class=\"n\"\u003esettings\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esettings\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE transactions (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    account_id  BIGINT,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    amount      BIGINT,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    transaction_time TIMESTAMP(3),\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    WATERMARK FOR transaction_time AS transaction_time - INTERVAL \u0026#39;5\u0026#39; SECOND\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;) WITH (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;connector\u0026#39; = \u0026#39;kafka\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;topic\u0026#39;     = \u0026#39;transactions\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;properties.bootstrap.servers\u0026#39; = \u0026#39;kafka:9092\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;format\u0026#39;    = \u0026#39;csv\u0026#39;\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE spend_report (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    account_id BIGINT,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    log_ts     TIMESTAMP(3),\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    amount     BIGINT\\n,\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    PRIMARY KEY (account_id, log_ts) NOT ENFORCED\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;) WITH (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;   \u0026#39;connector\u0026#39;  = \u0026#39;jdbc\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;   \u0026#39;url\u0026#39;        = \u0026#39;jdbc:mysql://mysql:3306/sql-demo\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;   \u0026#39;table-name\u0026#39; = \u0026#39;spend_report\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;   \u0026#39;driver\u0026#39;     = \u0026#39;com.mysql.jdbc.Driver\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;   \u0026#39;username\u0026#39;   = \u0026#39;sql-demo\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;   \u0026#39;password\u0026#39;   = \u0026#39;demo-sql\u0026#39;\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nc\"\u003eTable\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;transactions\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ereport\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteInsert\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;spend_report\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"拆解代码\"\u003e拆解代码\u003c/h2\u003e\n\u003ch3 id=\"the-execution-environment\"\u003eThe Execution Environment\u003c/h3\u003e\n\u003cp\u003e前两行设置了你的 \u003ccode\u003eTableEnvironment\u003c/code\u003e。表环境是你如何为你的 Job 设置属性，指定你是在写批处理还是流式应用，以及创建你的源。本演练创建了一个使用流式执行的标准表环境。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e \u003cspan class=\"n\"\u003esettings\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esettings\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"注册表\"\u003e注册表\u003c/h3\u003e\n\u003cp\u003e接下来，在当前\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/catalogs.html\"\u003e目录\u003c/a\u003e中注册了表，您可以使用这些表连接到外部系统，以便读写批处理和流数据。表源提供对存储在外部系统中的数据的访问，如数据库、键值存储、消息队列或文件系统。table sink 向外部存储系统发出一个表。根据源和 sink 的类型，它们支持不同的格式，如 CSV、JSON、Avro 或 Parquet。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE transactions (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    account_id  BIGINT,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    amount      BIGINT,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    transaction_time TIMESTAMP(3),\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    WATERMARK FOR transaction_time AS transaction_time - INTERVAL \u0026#39;5\u0026#39; SECOND\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;) WITH (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;connector\u0026#39; = \u0026#39;kafka\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;topic\u0026#39;     = \u0026#39;transactions\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;properties.bootstrap.servers\u0026#39; = \u0026#39;kafka:9092\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;format\u0026#39;    = \u0026#39;csv\u0026#39;\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注册了两个表：一个是交易输入表，一个是消费报告输出表。交易(transaction)表让我们可以读取信用卡交易，其中包含账户ID(account_id)、时间戳(transaction_time)和美元金额(amount)。该表是在一个名为 \u003ccode\u003etransactions\u003c/code\u003e 的 Kafka 主题上的逻辑视图，包含 CSV 数据。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE spend_report (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    account_id BIGINT,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    log_ts     TIMESTAMP(3),\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    amount     BIGINT\\n,\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    PRIMARY KEY (account_id, log_ts) NOT ENFORCED\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;) WITH (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;connector\u0026#39;  = \u0026#39;jdbc\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;url\u0026#39;        = \u0026#39;jdbc:mysql://mysql:3306/sql-demo\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;table-name\u0026#39; = \u0026#39;spend_report\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;driver\u0026#39;     = \u0026#39;com.mysql.jdbc.Driver\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;username\u0026#39;   = \u0026#39;sql-demo\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;password\u0026#39;   = \u0026#39;demo-sql\u0026#39;\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e第二张表 \u003ccode\u003espend_report\u003c/code\u003e，存储了最终的汇总结果。其底层存储是 MySql 数据库中的一张表。\u003c/p\u003e\n\u003ch3 id=\"查询\"\u003e查询\u003c/h3\u003e\n\u003cp\u003e配置好环境和注册好表之后，你就可以构建你的第一个应用程序了。从 \u003ccode\u003eTableEnvironment\u003c/code\u003e 中，你可以从一个输入表中读取它的行，然后使用 \u003ccode\u003eexecuteInsert\u003c/code\u003e 将这些结果写入到一个输出表中。\u003ccode\u003ereport\u003c/code\u003e 函数是你实现业务逻辑的地方。它目前还没有被实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"nc\"\u003eTable\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;transactions\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ereport\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteInsert\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;spend_report\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"测试\"\u003e测试\u003c/h2\u003e\n\u003cp\u003e该项目包含一个二次测试类 \u003ccode\u003eSpendReportTest\u003c/code\u003e，用于验证报表的逻辑。它以批处理模式创建了一个表环境。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e \u003cspan class=\"n\"\u003esettings\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einBatchMode\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esettings\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFlink 的独特属性之一是它在批处理和流式处理之间提供一致的语义。这意味着你可以在静态数据集上以批处理模式开发和测试应用程序，并以流式应用程序的形式部署到生产中。\u003c/p\u003e\n\u003ch2 id=\"尝试一下\"\u003e尝试一下\u003c/h2\u003e\n\u003cp\u003e现在有了 Job 设置的骨架，你就可以添加一些业务逻辑了。目标是建立一个报告，显示每个账户在一天中每个小时的总支出。这意味着时间戳列需要从毫秒到小时的颗粒度进行舍入。\u003c/p\u003e\n\u003cp\u003eFlink 支持用纯 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/\"\u003eSQL\u003c/a\u003e 或使用 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/tableApi.html\"\u003eTable API\u003c/a\u003e 开发关系型应用。Table API 是一个受 SQL 启发的流畅 DSL，可以用 Python、Java 或 Scala 编写，并支持强大的 IDE 集成。就像 SQL 查询一样，Table 程序可以选择所需的字段，并通过你的键进行分组。这些功能，加上\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/functions/systemFunctions.html\"\u003e内置的函数\u003c/a\u003e，如 \u003ccode\u003efloor\u003c/code\u003e 和 \u003ccode\u003esum\u003c/code\u003e，写这个报告问题不大。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"nf\"\u003ereport\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;transaction_time\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efloor\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTimeIntervalUnit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eHOUR\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egroupBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"用户定义的函数\"\u003e用户定义的函数\u003c/h2\u003e\n\u003cp\u003eFlink 包含有限的内置函数，有时你需要用\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/functions/udfs.html\"\u003e用户定义的函数\u003c/a\u003e来扩展它。如果 \u003ccode\u003efloor\u003c/code\u003e 不是预定义的，你可以自己实现它。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003ejava.time.LocalDateTime\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003ejava.time.temporal.ChronoUnit\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.flink.table.annotation.DataTypeHint\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.flink.table.functions.ScalarFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyFloor\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eScalarFunction\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"nd\"\u003e@DataTypeHint\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;TIMESTAMP(3)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eLocalDateTime\u003c/span\u003e \u003cspan class=\"nf\"\u003eeval\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"nd\"\u003e@DataTypeHint\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;TIMESTAMP(3)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eLocalDateTime\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etruncatedTo\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eChronoUnit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eHOURS\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后迅速将其集成到你的应用程序中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"nf\"\u003ereport\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMyFloor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;transaction_time\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egroupBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个查询会消耗 \u003ccode\u003etransactions\u003c/code\u003e 表的所有记录，计算报表，并以高效、可扩展的方式输出结果。使用该实现运行测试将通过。\u003c/p\u003e\n\u003ch2 id=\"添加窗口\"\u003e添加窗口\u003c/h2\u003e\n\u003cp\u003e基于时间的数据分组是数据处理中的典型操作，尤其是在处理无限流时。基于时间的分组被称为\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/windows.html\"\u003e窗口\u003c/a\u003e，Flink 提供了灵活的窗口语义。最基本的窗口类型称为 \u003ccode\u003eTumble\u003c/code\u003e 窗口，它有一个固定的大小，其桶不重叠。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"nf\"\u003ereport\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTumble\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eover\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elit\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ehour\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eon\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;transaction_time\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egroupBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estart\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这就定义了你的应用程序使用基于时间戳列的一小时翻滚窗口。因此，时间戳为 2019-06-01 01:23:47 的行被放在 2019-06-01 01:00:00 窗口中。\u003c/p\u003e\n\u003cp\u003e基于时间的聚合是独一无二的，因为在连续流应用中，时间与其他属性不同，一般是向前移动的。与 floor 和你的 UDF 不同，窗口函数是\u003ca href=\"https://en.wikipedia.org/wiki/Intrinsic_function\"\u003e内在的\u003c/a\u003e，它允许运行时应用额外的优化。在批处理上下文中，窗口提供了一个方便的 API，用于通过时间戳属性对记录进行分组。\u003c/p\u003e\n\u003cp\u003e用这个实现运行测试也会通过。\u003c/p\u003e\n\u003ch2 id=\"再来一次用流\"\u003e再来一次，用流!\u003c/h2\u003e\n\u003cp\u003e就这样，一个功能齐全的、有状态的、分布式的流式应用! 查询不断地消耗 Kafka 的事务流，计算每小时的花费，并在结果准备好后立即发出。由于输入是界的，所以查询一直在运行，直到手动停止。而且由于 Job 使用了基于时间窗口的聚合，所以当框架知道某个窗口不会再有记录到达时，Flink 可以进行特定的优化，比如状态清理。\u003c/p\u003e\n\u003cp\u003e表游乐场是完全 docker 化的，可以作为流式应用在本地运行。该环境包含一个 Kafka 主题、一个连续数据生成器、MySql 和 Grafana。\u003c/p\u003e\n\u003cp\u003e从 \u003ccode\u003etable-walkthrough\u003c/code\u003e 文件夹内启动 \u003ccode\u003edocker-compose\u003c/code\u003e 脚本。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ docker-compose build\n$ docker-compose up -d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以通过 \u003ca href=\"http://localhost:8082/\"\u003eFlink 控制台\u003c/a\u003e查看正在运行的作业信息。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/spend-report-console.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e从 MySQL 里面探索结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ docker-compose \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e mysql mysql -Dsql-demo -usql-demo -pdemo-sql\n\nmysql\u0026gt; use sql-demo\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nDatabase changed\n\nmysql\u0026gt; \u003cspan class=\"k\"\u003eselect\u003c/span\u003e count\u003cspan class=\"o\"\u003e(\u003c/span\u003e*\u003cspan class=\"o\"\u003e)\u003c/span\u003e from spend_report\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n+----------+\n\u003cspan class=\"p\"\u003e|\u003c/span\u003e count\u003cspan class=\"o\"\u003e(\u003c/span\u003e*\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e\n+----------+\n\u003cspan class=\"p\"\u003e|\u003c/span\u003e      \u003cspan class=\"m\"\u003e110\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e\n+----------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后，去 \u003ca href=\"http://localhost:3000/d/FOe0PbmGk/walkthrough?viewPanel=2\u0026amp;orgId=1\u0026amp;refresh=5s\"\u003eGrafana\u003c/a\u003e 看看完全可视化的结果吧!\u003c/p\u003e\n","text":"Apache Flink 提供的 Table API 是一个统一的、关系型的 API，用于批处理和流处理，即在无边界的、实时的流或有边界的、批处理的数据集上以相同的语义执行查询，并产生相同的结果。Flink 中的 Table API 通常用于简化数据分析、数据管道化和 ETL 应用的定义。\n你要构建什么? 在本教程中，你将学习如何构建一个实时的仪表盘，以按账户跟踪金融交易。该管道将从 Kafka 读取数据，并将结果写入 MySQL，通过 Grafana 可视化。\n先决条件 本演练假设你对 Java 或 Scala 有一定的熟悉，但即使你来自不同的编程语言，你也应该能够跟上。它还假设你熟悉基本的关系概念，如 SELECT 和 GROUP BY 子句。\n救命, 我被卡住了! 如果你遇到困难，请查看社区支持资源。特别是 Apache Flink 的用户邮件列表，它一直是 Apache 项目中最活跃的一个，也是快速获得帮助的好方法。\n如何跟进 如果你想跟着走，你需要一台电脑与。\n Java 8 或 11 Maven Docker  所需的配置文件可在 flink-playgrounds 资源库中获得。下载后，在 IDE 中打开项目 flink-playground/table-walkthrough，并导航到文件 SpendReport。\nEnvironmentSettings settings = EnvironmentSettings.newInstance().build(); TableEnvironment tEnv = TableEnvironment.create(settings); tEnv.executeSql(\u0026#34;CREATE TABLE transactions (\\n\u0026#34; + \u0026#34; account_id BIGINT,\\n\u0026#34; + \u0026#34; amount BIGINT,\\n\u0026#34; + \u0026#34; transaction_time TIMESTAMP(3),\\n\u0026#34; + \u0026#34; WATERMARK FOR transaction_time AS transaction_time - INTERVAL \u0026#39;5\u0026#39; SECOND\\n\u0026#34; + \u0026#34;) WITH (\\n\u0026#34; + \u0026#34; \u0026#39;connector\u0026#39; = \u0026#39;kafka\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;topic\u0026#39; = \u0026#39;transactions\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;properties.bootstrap.servers\u0026#39; = \u0026#39;kafka:9092\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;format\u0026#39; = \u0026#39;csv\u0026#39;\\n\u0026#34; + \u0026#34;)\u0026#34;); tEnv.executeSql(\u0026#34;CREATE TABLE spend_report (\\n\u0026#34; + \u0026#34; account_id BIGINT,\\n\u0026#34; + \u0026#34; log_ts TIMESTAMP(3),\\n\u0026#34; + \u0026#34; amount BIGINT\\n,\u0026#34; + \u0026#34; PRIMARY KEY (account_id, log_ts) NOT ENFORCED\u0026#34; + \u0026#34;) WITH (\\n\u0026#34; + \u0026#34; \u0026#39;connector\u0026#39; = \u0026#39;jdbc\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;url\u0026#39; = \u0026#39;jdbc:mysql://mysql:3306/sql-demo\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;table-name\u0026#39; = \u0026#39;spend_report\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;driver\u0026#39; = \u0026#39;com.mysql.jdbc.Driver\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;username\u0026#39; = \u0026#39;sql-demo\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;password\u0026#39; = \u0026#39;demo-sql\u0026#39;\\n\u0026#34; + \u0026#34;)\u0026#34;); Table transactions = tEnv.from(\u0026#34;transactions\u0026#34;); report(transactions).executeInsert(\u0026#34;spend_report\u0026#34;); 拆解代码 The Execution Environment 前两行设置了你的 TableEnvironment。表环境是你如何为你的 Job 设置属性，指定你是在写批处理还是流式应用，以及创建你的源。本演练创建了一个使用流式执行的标准表环境。\nEnvironmentSettings settings = EnvironmentSettings.newInstance().build(); TableEnvironment tEnv = TableEnvironment.create(settings); 注册表 接下来，在当前目录中注册了表，您可以使用这些表连接到外部系统，以便读写批处理和流数据。表源提供对存储在外部系统中的数据的访问，如数据库、键值存储、消息队列或文件系统。table sink 向外部存储系统发出一个表。根据源和 sink 的类型，它们支持不同的格式，如 CSV、JSON、Avro 或 Parquet。\ntEnv.executeSql(\u0026#34;CREATE TABLE transactions (\\n\u0026#34; + \u0026#34; account_id BIGINT,\\n\u0026#34; + \u0026#34; amount BIGINT,\\n\u0026#34; + \u0026#34; transaction_time TIMESTAMP(3),\\n\u0026#34; + \u0026#34; WATERMARK FOR transaction_time AS transaction_time - INTERVAL \u0026#39;5\u0026#39; SECOND\\n\u0026#34; + \u0026#34;) WITH (\\n\u0026#34; + \u0026#34; \u0026#39;connector\u0026#39; = \u0026#39;kafka\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;topic\u0026#39; = \u0026#39;transactions\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;properties.bootstrap.servers\u0026#39; = \u0026#39;kafka:9092\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;format\u0026#39; = \u0026#39;csv\u0026#39;\\n\u0026#34; + \u0026#34;)\u0026#34;); 注册了两个表：一个是交易输入表，一个是消费报告输出表。交易(transaction)表让我们可以读取信用卡交易，其中包含账户ID(account_id)、时间戳(transaction_time)和美元金额(amount)。该表是在一个名为 transactions 的 Kafka 主题上的逻辑视图，包含 CSV 数据。\ntEnv.executeSql(\u0026#34;CREATE TABLE spend_report (\\n\u0026#34; + \u0026#34; account_id BIGINT,\\n\u0026#34; + \u0026#34; log_ts TIMESTAMP(3),\\n\u0026#34; + \u0026#34; amount BIGINT\\n,\u0026#34; + \u0026#34; PRIMARY KEY (account_id, log_ts) NOT ENFORCED\u0026#34; + \u0026#34;) WITH (\\n\u0026#34; + \u0026#34; \u0026#39;connector\u0026#39; = \u0026#39;jdbc\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;url\u0026#39; = \u0026#39;jdbc:mysql://mysql:3306/sql-demo\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;table-name\u0026#39; = \u0026#39;spend_report\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;driver\u0026#39; = \u0026#39;com.mysql.jdbc.Driver\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;username\u0026#39; = \u0026#39;sql-demo\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;password\u0026#39; = \u0026#39;demo-sql\u0026#39;\\n\u0026#34; + \u0026#34;)\u0026#34;); 第二张表 spend_report，存储了最终的汇总结果。其底层存储是 MySql 数据库中的一张表。\n查询 配置好环境和注册好表之后，你就可以构建你的第一个应用程序了。从 TableEnvironment 中，你可以从一个输入表中读取它的行，然后使用 executeInsert 将这些结果写入到一个输出表中。report 函数是你实现业务逻辑的地方。它目前还没有被实现。\nTable transactions = tEnv.from(\u0026#34;transactions\u0026#34;); report(transactions).executeInsert(\u0026#34;spend_report\u0026#34;); 测试 该项目包含一个二次测试类 SpendReportTest，用于验证报表的逻辑。它以批处理模式创建了一个表环境。\nEnvironmentSettings settings = EnvironmentSettings.newInstance().inBatchMode().build(); TableEnvironment tEnv = TableEnvironment.create(settings); Flink 的独特属性之一是它在批处理和流式处理之间提供一致的语义。这意味着你可以在静态数据集上以批处理模式开发和测试应用程序，并以流式应用程序的形式部署到生产中。\n尝试一下 现在有了 Job 设置的骨架，你就可以添加一些业务逻辑了。目标是建立一个报告，显示每个账户在一天中每个小时的总支出。这意味着时间戳列需要从毫秒到小时的颗粒度进行舍入。\nFlink 支持用纯 SQL 或使用 Table API 开发关系型应用。Table API 是一个受 SQL 启发的流畅 DSL，可以用 Python、Java 或 Scala 编写，并支持强大的 IDE 集成。就像 SQL 查询一样，Table 程序可以选择所需的字段，并通过你的键进行分组。这些功能，加上内置的函数，如 floor 和 sum，写这个报告问题不大。\npublic static Table report(Table transactions) { return transactions.select( $(\u0026#34;account_id\u0026#34;), $(\u0026#34;transaction_time\u0026#34;).floor(TimeIntervalUnit.HOUR).as(\u0026#34;log_ts\u0026#34;), $(\u0026#34;amount\u0026#34;)) .groupBy($(\u0026#34;account_id\u0026#34;), $(\u0026#34;log_ts\u0026#34;)) .select( $(\u0026#34;account_id\u0026#34;), $(\u0026#34;log_ts\u0026#34;), $(\u0026#34;amount\u0026#34;).sum().as(\u0026#34;amount\u0026#34;)); } 用户定义的函数 Flink 包含有限的内置函数，有时你需要用用户定义的函数来扩展它。如果 floor 不是预定义的，你可以自己实现它。\nimport java.time.LocalDateTime; import java.time.temporal.ChronoUnit; import org.apache.flink.table.annotation.DataTypeHint; import org.apache.flink.table.functions.ScalarFunction; public class MyFloor extends ScalarFunction { public @DataTypeHint(\u0026#34;TIMESTAMP(3)\u0026#34;) LocalDateTime eval( @DataTypeHint(\u0026#34;TIMESTAMP(3)\u0026#34;) LocalDateTime timestamp) { return timestamp.truncatedTo(ChronoUnit.HOURS); } } 然后迅速将其集成到你的应用程序中。\npublic static Table report(Table transactions) { return transactions.select( $(\u0026#34;account_id\u0026#34;), call(MyFloor.class, $(\u0026#34;transaction_time\u0026#34;)).as(\u0026#34;log_ts\u0026#34;), $(\u0026#34;amount\u0026#34;)) .groupBy($(\u0026#34;account_id\u0026#34;), $(\u0026#34;log_ts\u0026#34;)) .select( $(\u0026#34;account_id\u0026#34;), $(\u0026#34;log_ts\u0026#34;), $(\u0026#34;amount\u0026#34;).sum().as(\u0026#34;amount\u0026#34;)); } 这个查询会消耗 transactions 表的所有记录，计算报表，并以高效、可扩展的方式输出结果。使用该实现运行测试将通过。\n添加窗口 基于时间的数据分组是数据处理中的典型操作，尤其是在处理无限流时。基于时间的分组被称为窗口，Flink 提供了灵活的窗口语义。最基本的窗口类型称为 Tumble 窗口，它有一个固定的大小，其桶不重叠。\npublic static Table report(Table transactions) { return transactions .window(Tumble.over(lit(1).hour()).on($(\u0026#34;transaction_time\u0026#34;)).as(\u0026#34;log_ts\u0026#34;)) .groupBy($(\u0026#34;account_id\u0026#34;), $(\u0026#34;log_ts\u0026#34;)) .select( $(\u0026#34;account_id\u0026#34;), $(\u0026#34;log_ts\u0026#34;).start().as(\u0026#34;log_ts\u0026#34;), $(\u0026#34;amount\u0026#34;).sum().as(\u0026#34;amount\u0026#34;)); } 这就定义了你的应用程序使用基于时间戳列的一小时翻滚窗口。因此，时间戳为 2019-06-01 01:23:47 的行被放在 2019-06-01 01:00:00 窗口中。\n基于时间的聚合是独一无二的，因为在连续流应用中，时间与其他属性不同，一般是向前移动的。与 floor 和你的 UDF 不同，窗口函数是内在的，它允许运行时应用额外的优化。在批处理上下文中，窗口提供了一个方便的 API，用于通过时间戳属性对记录进行分组。\n用这个实现运行测试也会通过。\n再来一次，用流! 就这样，一个功能齐全的、有状态的、分布式的流式应用! 查询不断地消耗 Kafka 的事务流，计算每小时的花费，并在结果准备好后立即发出。由于输入是界的，所以查询一直在运行，直到手动停止。而且由于 Job 使用了基于时间窗口的聚合，所以当框架知道某个窗口不会再有记录到达时，Flink 可以进行特定的优化，比如状态清理。\n表游乐场是完全 docker 化的，可以作为流式应用在本地运行。该环境包含一个 Kafka 主题、一个连续数据生成器、MySql 和 Grafana。\n从 table-walkthrough 文件夹内启动 docker-compose 脚本。\n$ docker-compose build $ docker-compose up -d 你可以通过 Flink 控制台查看正在运行的作业信息。\n从 MySQL 里面探索结果。\n$ docker-compose exec mysql mysql -Dsql-demo -usql-demo -pdemo-sql mysql\u0026gt; use sql-demo; Database changed mysql\u0026gt; select count(*) from spend_report; +----------+ | count(*) | +----------+ | 110 | +----------+ 最后，去 Grafana 看看完全可视化的结果吧!\n"},"name":"Flink 中的 Table API","published":"2020-07-26T00:00:00+08:00","summary":"Real Time Reporting with the Table API","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-07-30-table-api-in-flink/"}],"name":"Flink","type":"feed","url":"https://ohmyweekly.github.io/tags/flink/"}