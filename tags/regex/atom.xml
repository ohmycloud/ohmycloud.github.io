<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.92.0">Hugo</generator><title type="html"><![CDATA[regex on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/regex/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/regex/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/regex/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/regex/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2022-01-23T16:05:49+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/regex/</id>
    
        
        <entry>
            <title type="html"><![CDATA[从正则表达式到 Grammar(第一部分)]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-04-27-from-regex-to-grammar-part-one/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2015-11-16-a-mutable-grammar-for-raku/?utm_source=atom_feed" rel="related" type="text/html" title="A Mutable Grammar for Raku" />
                <link href="https://ohmyweekly.github.io/notes/2016-02-05-raku-grammars/?utm_source=atom_feed" rel="related" type="text/html" title="Raku Grammars" />
                <link href="https://ohmyweekly.github.io/notes/2016-01-01-raku-core-hacking-grammatical-babble/?utm_source=atom_feed" rel="related" type="text/html" title="Raku 核心魔改: Grammar 的胡言乱语" />
                <link href="https://ohmyweekly.github.io/notes/2015-07-11-an-example-of-parsing-text-in-grammar/?utm_source=atom_feed" rel="related" type="text/html" title="使用 Grammar 解析文本: 一个例子" />
                <link href="https://ohmyweekly.github.io/notes/2015-09-15-use-grammar-to-parse-date/?utm_source=atom_feed" rel="related" type="text/html" title="使用 Grammar 解析日期" />
            
                <id>https://ohmyweekly.github.io/notes/2015-04-27-from-regex-to-grammar-part-one/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+00:00</published>
            <updated>2021-07-11T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>From Regex to Grammar Part One</blockquote><h2 id="into-the-breach">Into the Breach</h2>
<p>假设我们 的日志文件中有一个时间戳 <strong>2016-02-06T14:36+02:00</strong>, 我们使用智能匹配:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="mi">2016</span><span class="sr">-</span><span class="mo">02</span><span class="sr">-</span><span class="mo">06</span><span class="sr">T</span><span class="mi">14</span><span class="p">:</span><span class="na">36</span><span class="o">+</span><span class="mo">02</span><span class="p">:</span><span class="na">00</span><span class="p">/;</span>
</code></pre></div><p>这会报错:</p>
<blockquote>
<p>Unrecognized regex metacharacter - (must be quoted to match literally)</p>
</blockquote>
<p>在 Raku 的正则表达式中任何非字母数字字符(&lsquo;a&rsquo;..&lsquo;z&rsquo;, &lsquo;A&rsquo;..&lsquo;Z&rsquo;, 0..9)都必须用引号引起来:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="mi">2016</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">06</span><span class="sr">T</span><span class="mi">14</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="mi">36</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">00</span><span class="p">/;</span>
</code></pre></div><p>现在我们得到等价的奇怪的表达式:</p>
<pre tabindex="0"><code>｢2016-01-29T13:25+01:00｣
</code></pre><p>这仅仅告诉我们, <code>~~</code> 智能匹配操作符匹配了一些文本, 这就是它匹配到的文本。<strong>｢｣</strong> 是日语引号标记, 故意和剩余的文本区分开来。</p>
<p>在 Raku 中, 默认打印出带有明确标记的匹配对象, 它准确地告诉你匹配从哪里开始, 到哪里结束。</p>
<h2 id="归纳">归纳</h2>
<p>我们想让该正则表达式更具普遍性, 例如匹配 2016 年的日志:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="mi">2015</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="mi">2016</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">06</span><span class="sr">T</span><span class="mi">14</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="mi">36</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">00</span><span class="p">/;</span>
</code></pre></div><p>但是这还会匹配到我们不想要的东西, 例如  &lsquo;/post/2015/02&rsquo; 或者甚至 &lsquo;/number/120153&rsquo;。因为 <code>|</code>的优先级没有字符间的连接优先级高。所以:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="p">[</span><span class="mi">2015</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="mi">2016</span><span class="p">]</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">06</span><span class="sr">T</span><span class="mi">14</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="mi">36</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">00</span><span class="p">/;</span>
</code></pre></div><p>问题解决, 但是我们想匹配 &lsquo;[ 1997 | 1998 | 1999 | 2000&hellip; 2015 ]&rsquo; 这些呢？</p>
<h3 id="learning-shorthnd">Learning Shorthnd</h3>
<p>匹配4位数字的年份好了:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="se">\d\d\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">06</span><span class="sr">T</span><span class="mi">14</span><span class="o">..</span><span class="ni">.</span><span class="p">/;</span>
</code></pre></div><p>其它需要数字的地方也可以使用 <code>\d</code> 这种便捷形式的数字:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="se">\d\d\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> - </span><span class="se">\d\d</span><span class="sr"> T </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="p">/;</span>
</code></pre></div><p><code>'+' &lt;digits&gt; : &lt;digits&gt;</code> 只会匹配 <code>+01</code> 和 <code>+12</code> 之间的时区, 还有其它在 <code>-11</code> 到 <code>-01</code> 之间的时区, 所以我们使用 <code>|</code> 来匹配 &lsquo;+&rsquo; 或 &lsquo;-&rsquo;, 像这样:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="se">\d\d\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> - </span><span class="se">\d\d</span><span class="sr"> T </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">]</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="p">/;</span>
</code></pre></div><p>基本正确了, 但是由于历史原因, 时区还能是一个字母 <code>Z</code>, 所以, 还有一处要修改:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="se">\d\d\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> - </span><span class="se">\d\d</span><span class="sr"> T </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">]</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="o">|</span><span class="sr"> Z </span><span class="p">]</span><span class="sr"> </span><span class="p">/;</span>
</code></pre></div><h2 id="重构">重构</h2>
<p>但是那个 <strong><code>[ '+' ... Z ]</code></strong> 表达式太长了, 能重构就更好了。<strong>regex</strong> 对象来拯救我们了, 它帮助我们清理代码。</p>
<p><strong>regex</strong> 对象看起来很像匹配表达式, 除了它使用花括号来告诉从哪开始, 到哪结束:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="k">regex</span> <span class="nf">Timezone</span> <span class="p">{</span><span class="sr"> Z </span><span class="o">|</span><span class="sr"> </span><span class="p">[&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;]</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">};</span>
<span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="se">\d\d\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> T </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Timezone</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/;</span>
</code></pre></div><p><code>&lt;..&gt;</code> 从外表上看把重构后的表达式和主文本分开了, 而让 Timezone 表达式分离意味着我们能在代码中的任何地方使用它了。事实上我们可以重构其它的正则:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="k">regex</span> <span class="nf">Date</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d\d\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">};</span>
<span class="k">my</span> <span class="k">regex</span> <span class="nf">Time</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr">              </span><span class="p">};</span>
<span class="k">my</span> <span class="k">regex</span> <span class="nf">Timezone</span> <span class="p">{</span><span class="sr"> Z </span><span class="o">|</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">]</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">};</span>

<span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Date</span><span class="p">&gt;</span><span class="sr"> T </span><span class="p">&lt;</span><span class="nf">Time</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Timezone</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/;</span>
</code></pre></div><p>让所有这些 <code>\d\d</code> 坐在一块儿有些碍眼, 所以我们再重构下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="k">regex</span> <span class="nf">Integer</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="o">+</span><span class="sr"> </span><span class="p">};</span>

<span class="k">my</span> <span class="k">regex</span> <span class="nf">Date</span>     <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr">     </span><span class="p">};</span>
<span class="k">my</span> <span class="k">regex</span> <span class="nf">Time</span>     <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr">                   </span><span class="p">};</span>
<span class="k">my</span> <span class="k">regex</span> <span class="nf">Timezone</span> <span class="p">{</span><span class="sr"> Z </span><span class="o">|</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">]</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">};</span>

<span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Date</span><span class="p">&gt;</span><span class="sr"> T </span><span class="p">&lt;</span><span class="nf">Time</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Timezone</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/;</span>
</code></pre></div><p><a href="http://theperlfisher.blogspot.jp/2016/02/from-regular-expressions-to-grammars-pt.html">http://theperlfisher.blogspot.jp/2016/02/from-regular-expressions-to-grammars-pt.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/regex" term="regex" label="regex" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/grammar" term="grammar" label="grammar" />
                            
                        
                    
                
            
        </entry>
    
</feed>
