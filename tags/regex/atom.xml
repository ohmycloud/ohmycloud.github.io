<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[regex on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/regex/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/regex/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/regex/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/regex/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-11T22:08:29+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/regex/</id>
    
        
        <entry>
            <title type="html"><![CDATA[从正则表达式到 Grammar(第一部分)]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-04-27-from-regex-to-grammar-part-one/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2015-10-29-from-regex-to-grammar/?utm_source=atom_feed" rel="related" type="text/html" title="从正则表达式到 Grammar(第二部分)" />
                <link href="https://ohmyweekly.github.io/notes/2015-11-16-a-mutable-grammar-for-raku/?utm_source=atom_feed" rel="related" type="text/html" title="A Mutable Grammar for Raku" />
                <link href="https://ohmyweekly.github.io/notes/2016-02-05-raku-grammars/?utm_source=atom_feed" rel="related" type="text/html" title="Raku Grammars" />
                <link href="https://ohmyweekly.github.io/notes/2016-01-01-raku-core-hacking-grammatical-babble/?utm_source=atom_feed" rel="related" type="text/html" title="Raku 核心魔改: Grammar 的胡言乱语" />
                <link href="https://ohmyweekly.github.io/notes/2015-06-14-play-audio-at-given-volume/?utm_source=atom_feed" rel="related" type="text/html" title="以指定音量随机播放音频文件" />
            
                <id>https://ohmyweekly.github.io/notes/2015-04-27-from-regex-to-grammar-part-one/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>From Regex to Grammar Part One</blockquote><h2 id="into-the-breach">Into the Breach</h2>
<p>假设我们 的日志文件中有一个时间戳 <strong>2016-02-06T14:36+02:00</strong>, 我们使用智能匹配:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="mi">2016</span><span class="sr">-</span><span class="mo">02</span><span class="sr">-</span><span class="mo">06</span><span class="sr">T</span><span class="mi">14</span><span class="p">:</span><span class="na">36</span><span class="o">+</span><span class="mo">02</span><span class="p">:</span><span class="na">00</span><span class="p">/;</span>
</code></pre></div><p>这会报错:</p>
<blockquote>
<p>Unrecognized regex metacharacter - (must be quoted to match literally)</p>
</blockquote>
<p>在 Raku 的正则表达式中任何非字母数字字符(&lsquo;a&rsquo;..&lsquo;z&rsquo;, &lsquo;A&rsquo;..&lsquo;Z&rsquo;, 0..9)都必须用引号引起来:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="mi">2016</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">06</span><span class="sr">T</span><span class="mi">14</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="mi">36</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">00</span><span class="p">/;</span>
</code></pre></div><p>现在我们得到等价的奇怪的表达式:</p>
<pre><code>｢2016-01-29T13:25+01:00｣
</code></pre><p>这仅仅告诉我们, <code>~~</code> 智能匹配操作符匹配了一些文本, 这就是它匹配到的文本。<strong>｢｣</strong> 是日语引号标记, 故意和剩余的文本区分开来。</p>
<p>在 Raku 中, 默认打印出带有明确标记的匹配对象, 它准确地告诉你匹配从哪里开始, 到哪里结束。</p>
<h2 id="归纳">归纳</h2>
<p>我们想让该正则表达式更具普遍性, 例如匹配 2016 年的日志:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="mi">2015</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="mi">2016</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">06</span><span class="sr">T</span><span class="mi">14</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="mi">36</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">00</span><span class="p">/;</span>
</code></pre></div><p>但是这还会匹配到我们不想要的东西, 例如  &lsquo;/post/2015/02&rsquo; 或者甚至 &lsquo;/number/120153&rsquo;。因为 <code>|</code>的优先级没有字符间的连接优先级高。所以:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="p">[</span><span class="mi">2015</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="mi">2016</span><span class="p">]</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">06</span><span class="sr">T</span><span class="mi">14</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="mi">36</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">00</span><span class="p">/;</span>
</code></pre></div><p>问题解决, 但是我们想匹配 &lsquo;[ 1997 | 1998 | 1999 | 2000&hellip; 2015 ]&rsquo; 这些呢？</p>
<h3 id="learning-shorthnd">Learning Shorthnd</h3>
<p>匹配4位数字的年份好了:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="se">\d\d\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">02</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="mo">06</span><span class="sr">T</span><span class="mi">14</span><span class="o">..</span><span class="ni">.</span><span class="p">/;</span>
</code></pre></div><p>其它需要数字的地方也可以使用 <code>\d</code> 这种便捷形式的数字:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="se">\d\d\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> - </span><span class="se">\d\d</span><span class="sr"> T </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="p">/;</span>
</code></pre></div><p><code>'+' &lt;digits&gt; : &lt;digits&gt;</code> 只会匹配 <code>+01</code> 和 <code>+12</code> 之间的时区, 还有其它在 <code>-11</code> 到 <code>-01</code> 之间的时区, 所以我们使用 <code>|</code> 来匹配 &lsquo;+&rsquo; 或 &lsquo;-&rsquo;, 像这样:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="se">\d\d\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> - </span><span class="se">\d\d</span><span class="sr"> T </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">]</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="p">/;</span>
</code></pre></div><p>基本正确了, 但是由于历史原因, 时区还能是一个字母 <code>Z</code>, 所以, 还有一处要修改:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="se">\d\d\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> - </span><span class="se">\d\d</span><span class="sr"> T </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">]</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="o">|</span><span class="sr"> Z </span><span class="p">]</span><span class="sr"> </span><span class="p">/;</span>
</code></pre></div><h2 id="重构">重构</h2>
<p>但是那个 <strong><code>[ '+' ... Z ]</code></strong> 表达式太长了, 能重构就更好了。<strong>regex</strong> 对象来拯救我们了, 它帮助我们清理代码。</p>
<p><strong>regex</strong> 对象看起来很像匹配表达式, 除了它使用花括号来告诉从哪开始, 到哪结束:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="k">regex</span> <span class="nf">Timezone</span> <span class="p">{</span><span class="sr"> Z </span><span class="o">|</span><span class="sr"> </span><span class="p">[&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;]</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">};</span>
<span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="se">\d\d\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> T </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Timezone</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/;</span>
</code></pre></div><p><code>&lt;..&gt;</code> 从外表上看把重构后的表达式和主文本分开了, 而让 Timezone 表达式分离意味着我们能在代码中的任何地方使用它了。事实上我们可以重构其它的正则:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="k">regex</span> <span class="nf">Date</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d\d\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">};</span>
<span class="k">my</span> <span class="k">regex</span> <span class="nf">Time</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr">              </span><span class="p">};</span>
<span class="k">my</span> <span class="k">regex</span> <span class="nf">Timezone</span> <span class="p">{</span><span class="sr"> Z </span><span class="o">|</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">]</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="se">\d\d</span><span class="sr"> </span><span class="p">};</span>

<span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Date</span><span class="p">&gt;</span><span class="sr"> T </span><span class="p">&lt;</span><span class="nf">Time</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Timezone</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/;</span>
</code></pre></div><p>让所有这些 <code>\d\d</code> 坐在一块儿有些碍眼, 所以我们再重构下:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="k">regex</span> <span class="nf">Integer</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="o">+</span><span class="sr"> </span><span class="p">};</span>

<span class="k">my</span> <span class="k">regex</span> <span class="nf">Date</span>     <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr">     </span><span class="p">};</span>
<span class="k">my</span> <span class="k">regex</span> <span class="nf">Time</span>     <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr">                   </span><span class="p">};</span>
<span class="k">my</span> <span class="k">regex</span> <span class="nf">Timezone</span> <span class="p">{</span><span class="sr"> Z </span><span class="o">|</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">]</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Integer</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">};</span>

<span class="nb">say</span> <span class="nv">$logfile</span> <span class="o">~~</span> <span class="p">/</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Date</span><span class="p">&gt;</span><span class="sr"> T </span><span class="p">&lt;</span><span class="nf">Time</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Timezone</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/;</span>
</code></pre></div><p><a href="http://theperlfisher.blogspot.jp/2016/02/from-regular-expressions-to-grammars-pt.html">http://theperlfisher.blogspot.jp/2016/02/from-regular-expressions-to-grammars-pt.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/regex" term="regex" label="regex" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/grammar" term="grammar" label="grammar" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[从正则表达式到 Grammar(第二部分)]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-10-29-from-regex-to-grammar/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2015-04-27-from-regex-to-grammar-part-one/?utm_source=atom_feed" rel="related" type="text/html" title="从正则表达式到 Grammar(第一部分)" />
                <link href="https://ohmyweekly.github.io/notes/2015-11-16-a-mutable-grammar-for-raku/?utm_source=atom_feed" rel="related" type="text/html" title="A Mutable Grammar for Raku" />
                <link href="https://ohmyweekly.github.io/notes/2016-02-05-raku-grammars/?utm_source=atom_feed" rel="related" type="text/html" title="Raku Grammars" />
                <link href="https://ohmyweekly.github.io/notes/2016-01-01-raku-core-hacking-grammatical-babble/?utm_source=atom_feed" rel="related" type="text/html" title="Raku 核心魔改: Grammar 的胡言乱语" />
                <link href="https://ohmyweekly.github.io/notes/2015-06-14-play-audio-at-given-volume/?utm_source=atom_feed" rel="related" type="text/html" title="以指定音量随机播放音频文件" />
            
                <id>https://ohmyweekly.github.io/notes/2015-10-29-from-regex-to-grammar/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>From Regex to Grammar</blockquote><p>如果你是正则表达式新人(至少当它们用于 Raku 中时), 那我建议你从这个系列的<a href="http://theperlfisher.blogspot.ro/2016/02/from-regular-expressions-to-grammars-pt.html">第一部分</a>开始。那些掌握了一定正则表达式的人可以跳过<a href="http://theperlfisher.blogspot.ro/2016/02/from-regular-expressions-to-grammars-pt_20.html">上周</a>的文章。现在, 继续演示!</p>
<h2 id="上周轶事">上周轶事</h2>
<p>我们开始开发一个接收诸如:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hey, did you konw a = &#34;</span> <span class="o">+</span> <span class="nx">a</span> <span class="o">+</span> <span class="s2">&#34;?&#34;</span><span class="p">);</span>
</code></pre></div><p>Javascript 表达式的 Raku 编译器, 并把这段代码转换为 <a href="http://raku.org/">Rakudo</a> 那样的编译器能运行的 Raku 代码。在我们开始之前, 想想转换后的 Raku 代码看起来是什么样的可能会是个好主意。如果你已经知道了 Perl 5, 那么你应该熟悉这样的代码。</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="k">my</span> <span class="nv">$a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="n">say</span> <span class="s">&#34;Hey, did you konw a = &#34;</span> <span class="o">~</span> <span class="nv">$a</span> <span class="o">~</span> <span class="s">&#34;?&#34;</span><span class="p">;</span>
</code></pre></div><p>我们将需要确保我们的正则表达式捕获到了 Javascript 的要素。如果你还记得上一次, 我们使用这样一组正则表达式来捕获我们的文本:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="k">rule</span> <span class="nf">Number</span>                <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="o">+</span><span class="sr">                                                          </span><span class="p">};</span>
<span class="k">my</span> <span class="k">rule</span> <span class="nf">Variable</span>              <span class="p">{</span><span class="sr"> </span><span class="se">\w</span><span class="o">+</span><span class="sr">                                                          </span><span class="p">};</span>
<span class="k">my</span> <span class="k">rule</span> <span class="nf">String</span>                <span class="p">{</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="o">-</span><span class="p">[</span><span class="sr">&#34; </span><span class="p">]&gt;</span><span class="o">+</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">                                             </span><span class="p">};</span>
<span class="k">my</span> <span class="k">rule</span> <span class="nf">Assignment-Expression</span> <span class="p">{</span><span class="sr"> var </span><span class="p">&lt;</span><span class="nf">Variable</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Number</span><span class="p">&gt;</span><span class="sr">                                  </span><span class="p">};</span>
<span class="k">my</span> <span class="k">rule</span> <span class="nf">Function-Call</span>         <span class="p">{</span><span class="sr"> console </span><span class="p">&#39;</span><span class="s1">.</span><span class="p">&#39;</span><span class="sr"> log </span><span class="p">&#39;</span><span class="s1">(</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">String</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Variable</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">String</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">)</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">};</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">var a = 3; console.log(&#34;Hey, did you konw a = &#34; + a + &#34;?&#34;);</span><span class="p">&#39;</span> <span class="o">~~</span> <span class="k">rule</span> <span class="p">{</span> <span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span>  <span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span> <span class="p">};</span>
</code></pre></div><p>如果你把这段代码放到一个 Raku 源文件中并运行它, 那么它的输出第一次看起来可能会有点奇怪:</p>
<pre><code>｢var a = 3; console.log( &quot;Hey, did you know a = &quot; + a + &quot;?&quot; );｣
 Assignment-Expression =&gt; ｢var a = 3｣
    Variable =&gt; ｢a ｣
    Number =&gt; ｢3｣
 Function-Call =&gt; ｢console.log( &quot;Hey, did you know a = &quot; + a + &quot;?&quot; )｣
    String =&gt; ｢&quot;Hey, did you know a = &quot; ｣
    Variable =&gt; ｢a ｣
    String =&gt; ｢&quot;?&quot; ｣
</code></pre><p>如果你愿意暂时忽略 「」 标记, 你会看到匹配被缩进了, 几乎像资源管理器窗口一样, <code>&lt;Assignment-Expression&gt;</code> 作为目录, <code>Variable</code> 和 <code>Number</code> 作为目录里面的文件。实际上, 那离真相不远了。当我看到这种结构时, 我发现使用一点添加的语法能帮助我们像这样来观察它:</p>
<pre><code>$/ =&gt; ｢var a = 3; console.log( &quot;Hey, did you know a = &quot; + a + &quot;?&quot; );｣
 &lt;Assignment-Expression&gt; =&gt; ｢var a = 3｣
    &lt;Variable&gt; =&gt; ｢a ｣
    &lt;Number&gt; =&gt; ｢3｣
 &lt;Function-Call&gt; =&gt; ｢console.log( &quot;Hey, did you know a = &quot; + a + &quot;?&quot; )｣
    &lt;String&gt; =&gt; ｢&quot;Hey, did you know a = &quot; ｣
    &lt;Variable&gt; =&gt; ｢a ｣
    &lt;String&gt; =&gt; ｢&quot;?&quot; ｣
</code></pre><p>这几乎让怎么打印出文本变得更容易, 并在我们的正则表达式中指出了一个小问题。我们来打印给变量 <em>a</em> 所赋的数字, 从这儿开始。第一行告诉我们目录的根, 或者匹配树是 <code>$/</code>。如果你在测试文件的末尾添加上 <code>say $/;</code> 并返回它, 那么你会看到整个表达式被打印出了 2 次。那一定意味着 <code>$/</code> 就是整个匹配。</p>
<p>每向下推进一层就是把 <code>=&gt;</code> 箭头的左侧的东西添加到 <code>$/</code> 的右边。把之前的 <code>say</code> 语句修改为 <code>say  $/&lt;Assignment-Expression&gt;;</code>, 并看看输出发生了什么改变。它现在看起来应该像这样:</p>
<pre><code>｢var a = 3｣
  Variable =&gt; ｢a ｣
  Number =&gt; ｢3｣
</code></pre><p>让我们把把标记(不可见)添加进来, 所以我们能知道到了哪里&hellip;</p>
<pre><code>$/&lt;Assignment-Expression&gt; =&gt; ｢var a = 3｣
  &lt;Variable&gt; =&gt; ｢a ｣
  &lt;Number&gt; =&gt; ｢3｣
</code></pre><p>我们现在能看到我们的目标, 数字 3, 仅仅实在更下面的一层。和上次一样, 我们能够添加表达式左侧的东西, 所以我们就动手吧。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;&lt;</span><span class="s">Number</span><span class="p">&gt;;</span>
  <span class="p">｢</span><span class="s">3</span><span class="p">｣</span>
</code></pre></div><p>我们几乎得到我们想要的了。「」 挡道, 所以我们在这儿把值转换回数字。我把转换(cast)用引号扩起来, 因为它不是 <code>C/C++</code> 程序员那样认为的&quot;casting&quot;。我们想做的大约等价于 <code>sscanf(str,&quot;%d&quot;,&amp;num)</code>, 但是在 Raku 中, 这个操作符更加简单:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="o">+</span><span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;&lt;</span><span class="s">Number</span><span class="p">&gt;;</span> <span class="c1"># 3</span>
</code></pre></div><p>如果不深入更多细节, 那么 <code>$/</code> 是一个里面藏着隐式数字、字符串和布尔值的对象。前面添加的 <code>+</code> 把隐藏在 <code>$/</code> 对象中的数字显示出来了。</p>
<h2 id="从-javascript-到-perl">从 Javascript 到 Perl</h2>
<p>我们离从 Javascript 生成 Raku 代码不远了。让我们使用上面所学的开始我们的第一个语句, 赋值语句。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">&#39;</span><span class="s1">my $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> = </span><span class="p">&#39;</span> <span class="o">~</span>
      <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;&lt;</span><span class="s">Number</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;;</span>

<span class="k">my</span> <span class="nv">$a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</code></pre></div><p>我们仅仅使用了 7 行 Raku 就把代码从一种语言转换为另外一种语言。并且大部分的 Raku 代码都是可重用的, 因为字符串, 数字, 和 <code>Javascript/C/Java</code> 风格的变量名在大部分语言之间是通用的。</p>
<p>上次, 我们学习了怎么使用正则表达式来创建匹配。这次我们学会了怎么使用我们说匹配到的东西, 还有怎么在 <em>say</em> 语句中找出我们想要的东西。 不可见的匹配标记相当有用, 我可能会写一个模块来把它们放回到匹配表达式中, 那应该不难。</p>
<p>那个方案有一个问题, 如果我们看一下 <code>&lt;Function-Call&gt;</code> 匹配, 会很容易发现那个问题。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;</span> <span class="o">=&gt;</span> <span class="p">｢</span><span class="s">console.log( &#34;Hey, did you know a = &#34; + a + &#34;?&#34; )</span><span class="p">｣</span>
  <span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span> <span class="o">=&gt;</span> <span class="p">｢</span><span class="s">&#34;Hey, did you know a = &#34; </span><span class="p">｣</span>
  <span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">=&gt;</span> <span class="p">｢</span><span class="s">a </span><span class="p">｣</span>
  <span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span> <span class="o">=&gt;</span> <span class="p">｢</span><span class="s">&#34;?&#34; </span><span class="p">｣</span>
</code></pre></div><p>当我们写了 <code>say $/&lt;Function-Call&gt;&lt;String&gt;;</code> 时, 我们会获取哪个 <code>&lt;String&gt;?</code> 在你运行这段代码之前, 先猜测一下。会是第一个吗, 因为一旦匹配对象被创建,  Raku 就不会把它替换掉? 会是最后一个吗, 因为最后一个&quot;覆盖&quot;了第一个? 编译器会仅仅&quot;感到困惑&quot;然后什么也不打印吗? 运行一下看看!</p>
<p>它实际上以一个列表的形式把两个匹配都返回了, 所以你可以引用任何一个。 我们的不可见标记现在看起来长这样:</p>
<pre><code>$/&lt;Function-Call&gt; =&gt; ｢console.log( &quot;Hey, did you know a = &quot; + a + &quot;?&quot; )｣
  &lt;String&gt;[0] =&gt; ｢&quot;Hey, did you know a = &quot; ｣
  &lt;Variable&gt; =&gt; ｢a ｣
  &lt;String&gt;[1] =&gt; ｢&quot;?&quot; ｣
</code></pre><p>所以, 如果我们想打印第一个字符串, 我们可以写上 <code>say $/&lt;Function-Call&gt;&lt;String&gt;[0];</code> 并得到含有时髦的日语标记的「&ldquo;Hey, did you know a = &quot; 」。幸运的是有一种便捷方式来避免那些日语标记, 就像数字 3 中的那样:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="o">~</span><span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">;</span>
 <span class="p">&#34;</span><span class="s2">Hey, did you know a = </span><span class="p">&#34;</span>
</code></pre></div><p><strong>~</strong> 操作符使匹配字符串化, 就像 <code>+</code> 让返回的匹配数字化一样。所以你可能自己把最后一行写作:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">&#39;</span><span class="s1">say </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ </span><span class="p">&#39;</span>
  <span class="p">&#39;</span><span class="s1"> $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ </span><span class="p">&#39;</span>
  <span class="nv">$&lt;Function-Call&gt;&lt;String&gt;</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;;</span>

<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Hey, did you know a = </span><span class="p">&#34;</span> <span class="o">~</span> <span class="nv">$a</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2">?</span><span class="p">&#34;;</span>
</code></pre></div><p>我们已经把我们的两行 Javascript 代码编译成 Raku 代码了。</p>
<h2 id="重构">重构</h2>
<p>现在已经能工作了, 但是有很多重复。目前我们得到是:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="k">rule</span> <span class="nf">Variable</span>               <span class="p">{</span><span class="sr"> </span><span class="se">\w</span><span class="o">+</span><span class="sr">                                                          </span><span class="p">};</span>
<span class="k">my</span> <span class="k">rule</span> <span class="nf">String</span>                 <span class="p">{</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="o">-</span><span class="p">[</span><span class="sr"> &#34; </span><span class="p">]&gt;</span><span class="o">+</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">                                            </span><span class="p">};</span>
<span class="k">my</span> <span class="k">rule</span> <span class="nf">Assignment-Expression</span>  <span class="p">{</span><span class="sr"> var </span><span class="p">&lt;</span><span class="nf">Variable</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Number</span><span class="p">&gt;</span><span class="sr">                                  </span><span class="p">};</span>
<span class="k">my</span> <span class="k">rule</span> <span class="nf">Function-Call</span>          <span class="p">{</span><span class="sr"> console </span><span class="p">&#39;</span><span class="s1">.</span><span class="p">&#39;</span><span class="sr"> log </span><span class="p">&#39;</span><span class="s1">(</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">String</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Variable</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">String</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">)</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">};</span>

<span class="p">&#39;</span><span class="s1">var a = 3; console.log( &#34;Hey, did you know a = &#34; + a + &#34;?&#34; );</span><span class="p">&#39;</span> <span class="o">~~</span> <span class="k">rule</span> <span class="p">{</span> <span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span> <span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span> <span class="p">}</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">my $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> = </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;&lt;</span><span class="s">Number</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;;</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">say </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span>  <span class="p">&#39;</span><span class="s1"> ~ </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">~</span>  <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;;</span>
</code></pre></div><p>那些 rules 看起来相当好,  <code>&lt;String&gt;</code> 和 <code>&lt;Variable&gt;</code> 的重复也是不可避免的。 但是看看 <code>say</code> 语句, 你会看到 <code>&lt;Assignment-Expression&gt;</code> 和 <code>&lt;Function-Call&gt;</code> 重复了自身好几次。避免这种重复的一种方法是创建一个临时变量, 但是那可能会变得丑陋。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$assignment-expression</span> <span class="o">=</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;;</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">my $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$assignment-expression</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> = </span><span class="p">&#39;</span> <span class="o">~</span>  <span class="nv">$assignment-expression</span><span class="p">&lt;</span><span class="s">Number</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span>
</code></pre></div><p>相反, 我们利用 Raku 的子例程签名, 并且重用 <code>$/</code> 变量名以使我们能重用上面所写的代码, 然后拿掉 <code>&lt;Assignment-Expression&gt;</code> 部分。 我会把子例程的名字命名为 rule 的名字, 只是为了直接了当。(你会在之后看到为什么这样做。)</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span>  <span class="nf">assignment-expression</span><span class="p">(</span><span class="nv">$/</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">&#39;</span><span class="s1">my $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> = </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Number</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span>
<span class="p">}</span>

<span class="nb">say</span> <span class="nf">assignment-expression</span><span class="p">(</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;</span> <span class="p">);</span>
</code></pre></div><p>让我们对 <code>&lt;Function-Call&gt;</code> 也做同样的事情, 创建一个含有 <code>$/</code> 子例程签名的同名函数。 它现在写在一行里面就很整洁了, 并且只重复 <em><!-- raw HTML omitted --></em> 部分, 因为它不得不重复。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">function-call</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
     <span class="p">&#39;</span><span class="s1">say </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span>
<span class="p">}</span>

<span class="nb">say</span> <span class="nf">function-call</span><span class="p">(</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;</span> <span class="p">);</span>
</code></pre></div><h2 id="对象化">对象化</h2>
<p>一路上我做了相当多的选择, 让我们到达这里。这就是我们上次重构的地方:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="k">rule</span> <span class="nf">Number</span>                <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="o">+</span><span class="sr">                                                          </span><span class="p">};</span>
<span class="k">my</span> <span class="k">rule</span> <span class="nf">Variable</span>              <span class="p">{</span><span class="sr"> </span><span class="se">\w</span><span class="o">+</span><span class="sr">                                                          </span><span class="p">};</span>
<span class="k">my</span> <span class="k">rule</span> <span class="nf">String</span>                <span class="p">{</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="o">-</span><span class="p">[</span><span class="sr"> &#34; </span><span class="p">]&gt;</span><span class="o">+</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">                                            </span><span class="p">};</span>
<span class="k">my</span> <span class="k">rule</span> <span class="nf">Assignment-Expression</span> <span class="p">{</span><span class="sr"> var </span><span class="p">&lt;</span><span class="nf">Variable</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Number</span><span class="p">&gt;</span><span class="sr">                                  </span><span class="p">};</span>
<span class="k">my</span> <span class="k">rule</span> <span class="nf">Function-Call</span>         <span class="p">{</span><span class="sr"> console </span><span class="p">&#39;</span><span class="s1">.</span><span class="p">&#39;</span><span class="sr"> log </span><span class="p">&#39;</span><span class="s1">(</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">String</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Variable</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">String</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">)</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">};</span>

<span class="p">&#39;</span><span class="s1">var a = 3; console.log( &#34;Hey, did you know a = &#34; + a + &#34;?&#34; );</span><span class="p">&#39;</span> <span class="o">~~</span> <span class="k">rule</span> <span class="p">{</span> <span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span> <span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span> <span class="p">}</span>

<span class="k">sub</span> <span class="nf">assignment-expression</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
    <span class="p">&#39;</span><span class="s1">my $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> = </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Number</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">function-call</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
    <span class="p">&#39;</span><span class="s1">say </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;;</span>
<span class="p">}</span>

<span class="nb">say</span> <span class="nf">assignment-expression</span><span class="p">(</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;</span> <span class="p">);</span>
<span class="nb">say</span> <span class="nf">function-call</span><span class="p">(</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;</span> <span class="p">);</span>
</code></pre></div><p>这就是我们的回报。我们先捡起最后那两个 <code>say</code> 语句。 我们还没有给顶层 rule 一个名字, 所以我们就叫它&hellip; 好吧, 现在还是叫 &lsquo;top&rsquo; 吧。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">top</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span> <span class="nf">assignment-expression</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="o">~</span> <span class="nf">function-call</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">}</span>
</code></pre></div><h2 id="收回你的吐槽">收回你的吐槽</h2>
<p>我们暂时还没有对处于文件顶层的 rules 做太多处理, 所以让我们开始工作吧。 在 Raku 中, 就一般编程而言, 把你的代码打包复用是不错的注意。而 Raku 让我们使用 <code>class</code> 关键字将我们的程序打包, 我们拥有的那些 rules 从任何意义上来说实际上不是&quot;代码&rdquo;。而它们能够用于代码中, 并且我们确实使用了它们, 它们自身实际上并没有做出任何决定。</p>
<p>所以我们不应该使用 <code>class</code> 关键字来把它们打包到一块。相反, 有另外一种便捷的类型用于把一堆正则表达式和 rules 打包到一块儿, 它叫做 <code>grammar</code>。</p>
<p>它的语法就像声明一个「rule」 那样。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">grammar</span> <span class="nc">Javascript</span> <span class="p">{</span>
    <span class="k">rule</span> <span class="nf">Number</span>                <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="o">+</span><span class="sr">                                                          </span><span class="p">};</span>
    <span class="k">rule</span> <span class="nf">Variable</span>              <span class="p">{</span><span class="sr"> </span><span class="se">\w</span><span class="o">+</span><span class="sr">                                                          </span><span class="p">};</span>
    <span class="k">rule</span> <span class="nf">String</span>                <span class="p">{</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="o">-</span><span class="p">[</span><span class="sr"> &#34; </span><span class="p">]&gt;</span><span class="o">+</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">                                            </span><span class="p">};</span>
    <span class="k">rule</span> <span class="nf">Assignment-Expression</span> <span class="p">{</span><span class="sr"> var </span><span class="p">&lt;</span><span class="nf">Variable</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Number</span><span class="p">&gt;</span><span class="sr">                                  </span><span class="p">};</span>
    <span class="k">rule</span> <span class="nf">Function-Call</span>         <span class="p">{</span><span class="sr"> console </span><span class="p">&#39;</span><span class="s1">.</span><span class="p">&#39;</span><span class="sr"> log </span><span class="p">&#39;</span><span class="s1">(</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">String</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Variable</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">String</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">)</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">};</span>      

    <span class="k">rule</span> <span class="nf">TOP</span>                   <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Assignment-Expression</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Function-Call</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span><span class="sr">              </span><span class="p">};</span>
<span class="p">}</span>
</code></pre></div><p>你会注意到, 我们给我们的顶层 rule 也起了个名字, 并且暂时把它叫做 「TOP」 吧。 如果你正在家独自玩耍, 你可能已经做出更改并想知道 「&lsquo;var a = 3;&hellip;&rsquo; ~~ rule { &hellip; }」 是怎么起作用的, 因为键入诸如 「&lsquo;var a = 3;&hellip;&rsquo; ~~ JavaScript;」这样的东西可能不会那么有作用。</p>
<p>Grammars 就像类一样, 在里面它们实际上是一块可能的代码。 它们本身不会工作, 它们必须从潜在的转换为动态的代码。我们可以像你在类中做的那样:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$JavaScript</span> <span class="o">=</span> <span class="n">JavaScript</span><span class="o">.</span><span class="nb">new</span><span class="p">;</span>
</code></pre></div><p>现在我们拥有了一个可以工作的变量。 现在, 让我们来使用它。所有的 Grammar 类都有一个内置的 「parse()」 方法, 以使我们能得到 grammar 中的正则表达式。 我们来修改我们的匹配语句以利用 parse() 方法:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nv">$JavaScript</span><span class="o">.</span><span class="nb">parse</span><span class="p">(&#39;</span><span class="s1">var a = 3; console.log( &#34;Hey, did you know a = &#34; + a + &#34;?&#34; );</span><span class="p">&#39;);</span>
</code></pre></div><p>我们的代码应该又能工作了。</p>
<h2 id="接收动作">接收动作</h2>
<p>现在我们已经把我们所有的匹配的东西打包到一个小型的类里面了, 如果我们能对那些子例程做同样的处理将会很棒。 我们在这儿试试, 把我们的子例程放到它们自己的命名空间中, 就像我们对 rule 做的那样。 我们必须从 「sub」 修改为 「method」, 而我们的 「top」 方法将会使用 「self.」 去调用其它方法。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Actions</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">assignment-expression</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
        <span class="p">&#39;</span><span class="s1">my $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> = </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Number</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">function-call</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
        <span class="p">&#39;</span><span class="s1">say </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">top</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nb">self</span><span class="o">.</span><span class="nf">assignment-expression</span><span class="p">(</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;</span> <span class="p">)</span> <span class="o">~</span>
        <span class="nb">self</span><span class="o">.</span><span class="nf">function-call</span><span class="p">(</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;</span> <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>就像之前那样, 我们可以在一行里面创建 Actions 对象:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$actions</span> <span class="o">=</span> <span class="n">Actions</span><span class="o">.</span><span class="nb">new</span><span class="p">;</span>
</code></pre></div><p>并且调用 top 几乎像我们之前做的那样:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$actions</span><span class="o">.</span><span class="nf">top</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">);</span>
</code></pre></div><p>我们已经修改了很多东西了, 所以我们来看看到哪了。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">grammar</span> <span class="nc">JavaScript</span> <span class="p">{</span>
  <span class="k">rule</span> <span class="nf">Number</span>                <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="o">+</span><span class="sr">                                                          </span><span class="p">};</span>
  <span class="k">rule</span> <span class="nf">Variable</span>              <span class="p">{</span><span class="sr"> </span><span class="se">\w</span><span class="o">+</span><span class="sr">                                                          </span><span class="p">};</span>
  <span class="k">rule</span> <span class="nf">String</span>                <span class="p">{</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="o">-</span><span class="p">[</span><span class="sr"> &#34; </span><span class="p">]&gt;</span><span class="o">+</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">                                            </span><span class="p">};</span>
  <span class="k">rule</span> <span class="nf">Assignment-Expression</span> <span class="p">{</span><span class="sr"> var </span><span class="p">&lt;</span><span class="nf">Variable</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Number</span><span class="p">&gt;</span><span class="sr">                                  </span><span class="p">};</span>
  <span class="k">rule</span> <span class="nf">Function-Call</span>         <span class="p">{</span><span class="sr"> console </span><span class="p">&#39;</span><span class="s1">.</span><span class="p">&#39;</span><span class="sr"> log </span><span class="p">&#39;</span><span class="s1">(</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">String</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Variable</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">String</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">)</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">};</span>
  <span class="k">rule</span> <span class="nf">TOP</span>                   <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Assignment-Expression</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">Function-Call</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span><span class="sr">              </span><span class="p">}</span>
<span class="p">}</span>
<span class="k">my</span> <span class="nv">$j</span> <span class="o">=</span> <span class="n">JavaScript</span><span class="o">.</span><span class="nb">new</span><span class="p">;</span>

<span class="nv">$j</span><span class="o">.</span><span class="nb">parse</span><span class="p">(&#39;</span><span class="s1">var a = 3; console.log( &#34;Hey, did you know a = &#34; + a + &#34;?&#34; );</span><span class="p">&#39;);</span>

<span class="k">class</span> <span class="nc">Actions</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">assignment-expression</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
      <span class="p">&#39;</span><span class="s1">my $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> = </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Number</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">function-call</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
      <span class="p">&#39;</span><span class="s1">say </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">top</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
      <span class="nb">self</span><span class="o">.</span><span class="nf">assignment-expression</span><span class="p">(</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;</span> <span class="p">)</span> <span class="o">~</span>
      <span class="nb">self</span><span class="o">.</span><span class="nf">function-call</span><span class="p">(</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;</span> <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$actions</span> <span class="o">=</span> <span class="n">Actions</span><span class="o">.</span><span class="nb">new</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$actions</span><span class="o">.</span><span class="nf">top</span><span class="p">(</span><span class="nv">$/</span><span class="p">);</span>
</code></pre></div><p>不用担心, 我们快要到了。既然我们有了一个单独的类来处理 Actions, 我们把方法重命名为 Grammar 中所匹配的 rule 的名字, 以使我们不会忘记它们是什么。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Actions</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">Assignment-Expression</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
        <span class="p">&#39;</span><span class="s1">my $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> = </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Number</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">Function-Call</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
        <span class="p">&#39;</span><span class="s1">say </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~$</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">TOP</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nb">self</span><span class="o">.</span><span class="nf">Assignment-Expression</span><span class="p">(</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;</span> <span class="p">)</span> <span class="o">~</span>
        <span class="nb">self</span><span class="o">.</span><span class="nf">Function-Call</span><span class="p">(</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;</span> <span class="p">)</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>更进一步, 我们还有最后一点魔法能够利用。 我们将把 <code>$javascript</code> 和 <code>$actions</code> 对象像这样组合在一块。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$javascript</span><span class="o">.</span><span class="nb">parse</span><span class="p">(&#39;</span><span class="s1">...</span><span class="p">&#39;</span><span class="o">,</span> <span class="p">:</span><span class="s">actions</span><span class="p">(</span><span class="nv">$actions</span><span class="p">)</span> <span class="p">);</span>
</code></pre></div><p>「:actions(&hellip;)」 给 「parse()」方法声明的可选参数。我们正告诉正则表达式引擎, 任何时候, 像 <code>&lt;Function-Call&gt;</code> 或 <code>&lt;TOP&gt;</code> 这样的 rule 匹配时, 我们会在我们的类中让它调用对应的同名方法。</p>
<p>这几乎是按原样工作的, 但是如果你运行修改后的代码,  你会发现解析返回了原来的匹配对象, 带着日语引用标记。所以看起来好像我们又回到了原地。不完全是。</p>
<p>继续, 我们在其中之一的方法中添加一个临时的 <code>&quot;say 'Hello';&quot;</code> 语句, 仅仅是为了确认它们正被调用。这是正则引擎正在工作并且可能正解析它所 going over 的一个重要证据。 你甚至可以使用某些我们上面已经学到的技巧然后写上 「<code>say $/&lt;Variable&gt;;</code>」 来查看匹配是否正像你想的那样运行。继续运行并玩玩, 做完的时候再回到这儿。</p>
<h2 id="混合信号mixed-signals">混合信号(Mixed Signals)</h2>
<p>正发生的是方法正被调用, 但是它们的输出被丢弃。我们来捕获输出然后使用 grammar 的最后一个特性, 抽象语法树。现在,  这可能会勾起坐在教室里看黑板上画出的盒子和线段的场景, 但是也没有那么糟糕了。我们已经看到了一个, 实际上 <strong>say()</strong> 的输出就是一个 AST。</p>
<p>我们来看下其它语法树, 我们在后台创建的那个。在 &ldquo;$javascript.parse(&hellip;)&rdquo; 调用的末尾添加上 「.ast」, 这会给我们展示我们自己创建的语法树。</p>
<p>如果你这样做了, 你会看到它打印了(Any), 这通常等价于「匹配失败」, 单是我们从之前的测试中知道匹配没有失败。所以这儿发生了什么? 当我们的方法运行的时候, 它们返回输出, 但是 Raku 不知道怎么处理这些输出, 或者说它不知道把输出安装到它所创建的 AST 中的哪个位置。</p>
<p>关键是一个叫做「make」的小东西。在方法的开头, 把这个添加到过去我们放置「say」的地方。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Actions</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">Assignment-Expression</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">make</span> <span class="p">&#39;</span><span class="s1">my $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> = </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Number</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">Function-Call</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">make</span> <span class="p">&#39;</span><span class="s1">say </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">TOP</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">make</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">ast</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">ast</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>还有, 因为 Raku 为我们调用方法, 我们不需要自己来调用 <code>self.Function-Call(...)</code>, 我们需要做的全部工作就是查看 <code>Function-Call(...)</code> 返回给我们的语法树。最终我们做到了。一个完整, 虽然微小的编译器。为了防止你在编辑时迷失, 这儿有一个最终的结果。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">grammar</span> <span class="nc">JavaScript</span> <span class="p">{</span>
    <span class="k">rule</span> <span class="nf">Number</span>                <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="o">+</span><span class="sr">                                                          };
</span><span class="sr">    rule Variable              </span><span class="p">{</span> \<span class="nb">w</span><span class="o">+</span>                                                          <span class="p">}</span><span class="sr">;
</span><span class="sr">    rule String                </span><span class="p">{</span> <span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span> <span class="p">&lt;</span><span class="s">-[ &#34; ]</span><span class="p">&gt;</span><span class="o">+</span> <span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span>                                            <span class="p">}</span><span class="sr">;
</span><span class="sr">    rule Assignment-Expression </span><span class="p">{</span> <span class="n">var</span> <span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span> <span class="p">&lt;</span><span class="s">Number</span><span class="p">&gt;</span>                                  <span class="p">}</span><span class="sr">;
</span><span class="sr">    rule Function-Call         </span><span class="p">{</span> <span class="n">console</span> <span class="p">&#39;</span><span class="s1">.</span><span class="p">&#39;</span> <span class="nb">log</span> <span class="p">&#39;</span><span class="s1">(</span><span class="p">&#39;</span> <span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span> <span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span> <span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="p">&#39;</span><span class="s1">+</span><span class="p">&#39;</span> <span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span> <span class="p">&#39;</span><span class="s1">)</span><span class="p">&#39;</span> <span class="p">}</span><span class="sr">;
</span><span class="sr">    rule TOP                   </span><span class="p">{</span> <span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span> <span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span>              <span class="p">}</span><span class="sr">
</span><span class="sr">}
</span><span class="sr">
</span><span class="sr">class Actions </span><span class="p">{</span>
    <span class="k">method</span> <span class="nf">Assignment-Expression</span><span class="p">(</span> <span class="nv">$/</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">make</span> <span class="p">&#39;</span><span class="s1">my $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> = </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Number</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;</span>
    <span class="p">}</span><span class="sr">
</span><span class="sr">
</span><span class="sr">    method Function-Call</span><span class="p">(</span><span class="sr"> </span><span class="ni">$</span><span class="sr">/ </span><span class="p">)</span><span class="sr"> </span><span class="p">{</span>
        <span class="k">make</span> <span class="p">&#39;</span><span class="s1">say </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ $</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Variable</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> ~ </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">String</span><span class="p">&gt;</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">;</span><span class="p">&#39;;</span>
    <span class="p">}</span><span class="sr">
</span><span class="sr">
</span><span class="sr">    method TOP</span><span class="p">(</span><span class="sr"> </span><span class="ni">$</span><span class="sr">/ </span><span class="p">)</span><span class="sr"> </span><span class="p">{</span>
        <span class="k">make</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Assignment-Expression</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">ast</span> <span class="o">~</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">Function-Call</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">ast</span> 
    <span class="p">}</span><span class="sr">
</span><span class="sr">}
</span><span class="sr">
</span><span class="sr">my </span><span class="nv">$j</span><span class="sr"> </span><span class="o">=</span><span class="sr"> JavaScript</span><span class="ni">.</span><span class="sr">new;
</span><span class="sr">my </span><span class="nv">$a</span><span class="sr"> </span><span class="o">=</span><span class="sr"> Actions</span><span class="ni">.</span><span class="sr">new;
</span><span class="sr">say </span><span class="nv">$j</span><span class="ni">.</span><span class="sr">parse</span><span class="p">(</span><span class="sr">
</span><span class="sr">   </span><span class="p">&#39;</span><span class="s1">var a = 3; console.log( &#34;Hey, did you know a = &#34; + a + &#34;?&#34; );</span><span class="p">&#39;</span><span class="sr">,
</span><span class="sr">   </span><span class="p">:</span><span class="na">actions</span><span class="p">(</span><span class="nv">$a</span><span class="p">))</span><span class="ni">.</span><span class="sr">ast;
</span></code></pre></div><h2 id="到哪里去">到哪里去</h2>
<p>一个简单但整洁的更改是你可以扩展 Assignment-Expression 来既接收数字又接收字符串。上次我们谈论了 rules 中的轮试,所以这个提示应该足够让你开始了:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">rule</span> <span class="nf">Assignment-Expression</span> <span class="p">{</span><span class="sr"> var </span><span class="p">&lt;</span><span class="nf">Variable</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">=</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">(&lt;</span><span class="nf">Number</span><span class="p">&gt;</span><span class="sr"> </span><span class="o">|</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">String</span><span class="p">&gt;)</span><span class="sr"> </span><span class="p">}</span>
</code></pre></div><p>你必须修改下 Assignment-Expression 方法以使它起作用。或者你可以狡猾一点然后发现( <code>&lt;Number&gt; | &lt;String&gt;</code> ) 可以转换为它自己的小的普通的 &ldquo;Term&rdquo; rule, &ldquo;rule Term { <!-- raw HTML omitted --> | <!-- raw HTML omitted --> }&rdquo;, 然后添加一个 action &ldquo;method Term($/) { make $/<!-- raw HTML omitted --> or $/<!-- raw HTML omitted -->}&rdquo; 而只在 Assignment-Expression 中修改一个东西。</p>
<p><a href="http://theperlfisher.blogspot.fr/2016/02/from-regular-expressions-to-grammars-pt_28.html">http://theperlfisher.blogspot.fr/2016/02/from-regular-expressions-to-grammars-pt_28.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/regex" term="regex" label="regex" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/grammar" term="grammar" label="grammar" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[以指定音量随机播放音频文件]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-06-14-play-audio-at-given-volume/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2015-04-27-from-regex-to-grammar-part-one/?utm_source=atom_feed" rel="related" type="text/html" title="从正则表达式到 Grammar(第一部分)" />
                <link href="https://ohmyweekly.github.io/notes/2015-10-29-from-regex-to-grammar/?utm_source=atom_feed" rel="related" type="text/html" title="从正则表达式到 Grammar(第二部分)" />
            
                <id>https://ohmyweekly.github.io/notes/2015-06-14-play-audio-at-given-volume/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Play Audio at Given Volume</blockquote><p>以指定音量随机播放音频文件：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#!/usr/bin/env raku</span>

<span class="k">my</span> <span class="nv">%v</span><span class="p">;</span>                                 <span class="c1"># hash to hold data</span>
<span class="k">my</span> <span class="k">token</span> <span class="nf">filename</span>    <span class="p">{</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> \</span><span class="ni">.</span><span class="se">\S\S\S</span><span class="sr"> </span><span class="p">};</span> <span class="c1"># filenames end in .???</span>
<span class="k">my</span> <span class="k">token</span> <span class="nf">volume</span>      <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="o">+</span><span class="sr"> </span><span class="p">};</span>          <span class="c1"># any digits for volume</span>
<span class="k">my</span> <span class="k">regex</span> <span class="nf">extra</span>       <span class="p">{</span><span class="sr"> </span><span class="ni">.</span><span class="o">+</span><span class="sr"> </span><span class="se">\S</span><span class="sr"> </span><span class="p">};</span>        <span class="c1"># anything following that</span>
<span class="k">my</span> <span class="nv">$mixer</span>          <span class="o">=</span> <span class="p">&#39;</span><span class="s1">mixer</span><span class="p">&#39;;</span>
<span class="k">my</span> <span class="nv">$player</span>         <span class="o">=</span> <span class="p">&#39;</span><span class="s1">mplayer -vf dsize=600:-2 -geometry +200-10 </span><span class="p">&#39;;</span>
<span class="k">my</span> <span class="nv">$lockfile</span>       <span class="o">=</span> <span class="p">&#39;</span><span class="s1">/tmp/myplayer</span><span class="p">&#39;;</span>

<span class="nv">$lockfile</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">spurt</span><span class="p">(</span> <span class="vg">$*PID</span> <span class="p">);</span>          <span class="c1"># store the process ID so other process can kill this one</span>
<span class="k">END</span> <span class="p">{</span> <span class="nv">$lockfile</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">unlink</span><span class="p">;</span> <span class="p">}</span>          <span class="c1"># remove the lockfile at end</span>

<span class="k">for</span> <span class="nv">$=finish</span><span class="o">.</span><span class="nb">lines</span> <span class="p">{</span>                  <span class="c1"># loop through the lines below &#39;=begin finish&#39;</span>
    <span class="nb">last</span> <span class="k">if</span> <span class="o">/</span><span class="n">STOP</span><span class="o">/</span><span class="p">;</span>                   <span class="c1"># stop at a STOP line</span>
    <span class="k">if</span> <span class="k">m</span><span class="p">/</span><span class="sr">     </span><span class="p">(&lt;</span><span class="nf">filename</span><span class="p">&gt;)</span><span class="sr">
</span><span class="sr">          </span><span class="se">\s</span><span class="o">+</span><span class="sr"> </span><span class="p">(&lt;</span><span class="nf">volume</span><span class="p">&gt;)</span><span class="sr">
</span><span class="sr">          </span><span class="se">\s</span><span class="o">*</span><span class="sr"> </span><span class="p">(&lt;</span><span class="nf">extra</span><span class="p">&gt;</span><span class="o">?</span><span class="p">)</span><span class="sr"> </span><span class="p">/</span> <span class="p">{</span>          <span class="c1"># use the regexes/tokens</span>
        <span class="k">my</span> <span class="p">(</span> <span class="nv">$m</span><span class="o">,</span> <span class="nv">$v</span><span class="o">,</span> <span class="nv">$e</span> <span class="p">)</span> <span class="o">=</span> <span class="nv">$/</span><span class="o">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">2</span><span class="o">]</span><span class="p">;</span> <span class="c1"># get captured values from $/</span>
        <span class="k">if</span> <span class="nv">$m</span> <span class="ow">and</span> <span class="nv">$v</span> <span class="p">{</span>                <span class="c1"># if there&#39;s a filename and volume</span>
            <span class="nv">%v</span><span class="p">{</span><span class="nv">$m</span><span class="p">}&lt;</span><span class="s">v</span><span class="p">&gt;</span> <span class="o">~=</span> <span class="nv">$v</span><span class="p">;</span>          <span class="c1">#   store it in the hash</span>
            <span class="nv">%v</span><span class="p">{</span><span class="nv">$m</span><span class="p">}&lt;</span><span class="s">e</span><span class="p">&gt;</span> <span class="o">~=</span> <span class="nv">$e</span> <span class="o">//</span> <span class="p">&#39;&#39;;</span>    <span class="c1">#   with any extra arguments</span>
        <span class="p">}}}</span> <span class="c1"># lisp-y to save lines</span>

<span class="k">for</span> <span class="nv">%v</span><span class="o">.</span><span class="nb">keys</span><span class="o">.</span><span class="nb">pick</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$m</span> <span class="p">{</span>           <span class="c1"># loop randomly through keys</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Playing </span><span class="nv">$m</span><span class="p">&#34;;</span>
    <span class="nb">print</span> <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> </span><span class="nv">$mixer</span><span class="s2">  </span><span class="nv">%v</span><span class="p">{</span><span class="nv">$m</span><span class="p">}&lt;</span><span class="s">v</span><span class="p">&gt;</span><span class="s2">      </span><span class="p">};</span>  <span class="c1"># set the volume</span>
    <span class="nb">print</span> <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> </span><span class="nv">$player</span><span class="s2"> </span><span class="nv">%v</span><span class="p">{</span><span class="nv">$m</span><span class="p">}&lt;</span><span class="s">e</span><span class="p">&gt;</span><span class="s2"> &#34;</span><span class="nv">$m</span><span class="s2">&#34; </span><span class="p">};</span>  <span class="c1"># play the file</span>
<span class="p">}</span>

<span class="k">=begin</span><span class="sd"> </span><span class="k">finish</span><span class="sd">
</span><span class="sd">300.avi 77
</span><span class="sd">Crystal Skull Rifftrax.avi 77 -aid 2
</span><span class="sd">Star Trek 5.avi 77
</span><span class="sd">Star Trek 7.avi
</span><span class="sd">aeon-flux.avi 93
</span><span class="sd"></span><span class="k">=end finish</span></code></pre></div><p>改进版：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">my</span> <span class="nv">@mixer</span>    <span class="o">=</span> <span class="p">&#39;</span><span class="s1">mixer</span><span class="p">&#39;;</span>
<span class="k">my</span> <span class="nv">@player</span>   <span class="o">=</span> <span class="p">&lt;</span><span class="s"> m6player -vf dsize=600:-2 -geometry +200-10 </span><span class="p">&gt;;</span>
<span class="k">my</span> <span class="nv">$lockfile</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">/tmp/myplayer</span><span class="p">&#39;;</span>

<span class="nv">$lockfile</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">spurt</span><span class="p">(</span> <span class="vg">$*PID</span> <span class="p">);</span>

<span class="k">END</span> <span class="p">{</span> <span class="nv">$lockfile</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">unlink</span><span class="p">;</span> <span class="p">}</span>

<span class="k">my</span> <span class="k">token</span> <span class="nf">filename</span>    <span class="p">{</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> \</span><span class="ni">.</span><span class="se">\S\S\S</span><span class="sr"> </span><span class="p">};</span>
<span class="k">my</span> <span class="k">token</span> <span class="nf">volume</span>      <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="o">+</span><span class="sr"> </span><span class="p">};</span>
<span class="k">my</span> <span class="k">regex</span> <span class="nf">extra</span>       <span class="p">{</span><span class="sr"> </span><span class="ni">.</span><span class="o">*</span><span class="sr"> </span><span class="p">};</span>

<span class="k">my</span> <span class="nv">%song-data</span><span class="p">;</span>

<span class="k">for</span> <span class="nv">$=finish</span><span class="o">.</span><span class="nb">lines</span> <span class="p">{</span>
    <span class="nb">last</span> <span class="k">if</span> <span class="o">/^</span> \<span class="k">s</span><span class="p">*</span><span class="sr"> STOP </span><span class="se">\s</span><span class="p">*</span><span class="s2"> $/;
</span><span class="s2">    next unless  m/ \s</span><span class="p">*</span> <span class="p">&lt;</span><span class="s">filename</span><span class="p">&gt;</span> \<span class="k">s</span><span class="err">+</span> <span class="p">&lt;</span><span class="sr">volume</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="s">extra</span><span class="p">&gt;</span> <span class="o">/</span><span class="p">;</span>
    <span class="c1"># $&lt;extra&gt; is short for $/{&#39;extra&#39;}</span>
    <span class="nv">%song-data</span><span class="p">{</span><span class="o">~</span><span class="nv">$&lt;filename&gt;</span><span class="p">}&lt;</span><span class="s">v e</span><span class="p">&gt;</span> <span class="o">=</span> <span class="o">+</span><span class="nv">$&lt;volume&gt;</span><span class="o">,</span> <span class="o">[</span><span class="nv">$&lt;extra&gt;</span><span class="o">.</span><span class="nb">words</span><span class="o">]</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># uses sub-signature unpacking</span>
<span class="k">for</span> <span class="nv">%song-data</span><span class="o">.</span><span class="nb">pick</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span> <span class="p">:</span><span class="s">key</span><span class="p">(</span><span class="nv">$m</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">value</span><span class="p">(</span><span class="nv">$</span><span class="p">)</span> <span class="p">(</span><span class="o">:</span><span class="nv">$v</span><span class="o">,:</span><span class="nv">@e</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Playing </span><span class="nv">$m</span><span class="p">&#34;;</span>
    <span class="nb">print</span> <span class="nb">run</span><span class="p">(</span> <span class="nv">@mixer</span><span class="o">,</span>  <span class="nv">$v</span><span class="o">,</span>     <span class="p">:</span><span class="s">out</span> <span class="p">)</span><span class="o">.</span><span class="nf">out</span><span class="o">.</span><span class="nb">slurp-rest</span><span class="o">.</span><span class="nb">indent</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
    <span class="nb">print</span> <span class="nb">run</span><span class="p">(</span> <span class="nv">@player</span><span class="o">,</span> <span class="nv">@e</span><span class="o">,</span> <span class="nv">$m</span><span class="o">,</span> <span class="p">:</span><span class="s">out</span> <span class="p">)</span><span class="o">.</span><span class="nf">out</span><span class="o">.</span><span class="nb">slurp-rest</span><span class="o">.</span><span class="nb">indent</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">=begin</span><span class="sd"> </span><span class="k">finish</span><span class="sd">
</span><span class="sd">300.avi 77
</span><span class="sd">Crystal Skull Rifftrax.avi 77 -aid 2
</span><span class="sd">Star Trek 5.avi 77
</span><span class="sd">Star Trek 7.avi
</span><span class="sd">aeon-flux.avi 93
</span><span class="sd"></span><span class="k">=end finish</span></code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/regex" term="regex" label="regex" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/audio" term="audio" label="audio" />
                            
                        
                    
                
            
        </entry>
    
</feed>
