{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003ch2 id=\"匿名\"\u003e匿名\u003c/h2\u003e\n\u003cp\u003e子例程、方法或子方法，当它们不能通过名字调用时，就被称为匿名的\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"c1\"\u003e# named subroutine\u003c/span\u003e\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003edouble\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 匿名子例程,存储在一个具名的标量里\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$double\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，匿名子例程仍然可以有名字\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"c1\"\u003e# 使用 anon 关键字使子例程匿名\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$s\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003eanon\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003etriple\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$s\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"c1\"\u003e# triple\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"副词\"\u003e副词\u003c/h2\u003e\n\u003cp\u003e通常, 副词是函数的命名参数.  也有一些其它特殊语法形式允许副词出现在某些合适的地方:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003eq\u003c/span\u003e\u003cspan class=\"sa\"\u003e:w\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003efoo bar\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# \u0026#34;:w\u0026#34; is a Quotelike form modifier adverb\u003c/span\u003e\n\u003cspan class=\"k\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"na\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"sr\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"sr\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"sr\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# \u0026#34;:g\u0026#34; is also\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003erotate\u003c/span\u003e \u003cspan class=\"c1\"\u003e# \u0026#34;:rotate\u0026#34; is an operator adverb\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e@h\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e}:\u003c/span\u003e\u003cspan class=\"s\"\u003eexists\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# \u0026#34;:exists\u0026#34; is also, but is known as a subscript adverb\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e副词通常使用冒号对儿标记来表示, 因为这个原因, 冒号对儿标记法也以副词对儿形式著称:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# Same as \u0026#34;a\u0026#34; =\u0026gt; 4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"autothreading\"\u003eAutothreading\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eAutothreading\u003c/code\u003e 是这样的: 如果你传递一个 \u003ccode\u003ejunction\u003c/code\u003e 给子例程, 该子例程期望的参数类型为 \u003ccode\u003eAny\u003c/code\u003e 或它的子类型。那么这个子例程调用会被执行多次, 每次使用一个不同的 junction 状态. 这些调用的结果被组合成一个跟原 \u003ccode\u003ejunction\u003c/code\u003e 同类型的 \u003ccode\u003ejunction\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esuccess\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里 \u003ccode\u003ef()\u003c/code\u003e 是含有一个参数的子例程，然而因为它没有显式的类型声明，它就被隐式的声明为 \u003ccode\u003eAny\u003c/code\u003e 型。 Junction 参数使 \u003ccode\u003ef(1|2|3)\u003c/code\u003e 调用在内部作为 \u003ccode\u003ef(1)|f(2)|f(3)\u003c/code\u003e 执行, 而结果是跟原 \u003ccode\u003ejunction\u003c/code\u003e 同类型的 \u003ccode\u003ejunction\u003c/code\u003e, 即  \u003ccode\u003e2|4|6\u003c/code\u003e。这种把一个 \u003ccode\u003eJunction\u003c/code\u003e 分成对多次函数调用的处理就叫做 \u003ccode\u003eautothreading\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"colon-pair-和-colon-list\"\u003eColon Pair 和 Colon List\u003c/h2\u003e\n\u003cp\u003e冒号对儿是用于创建或 Pair 对象的便捷语法. 两种最常见的形式是:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# Same as \u0026#34;a\u0026#34; =\u0026gt; 4,   same as Pair.new(:key\u0026lt;a\u0026gt;,:value(5))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# Same as \u0026#34;a\u0026#34; =\u0026gt; \u0026#34;4\u0026#34;, same as Pair.new(:key\u0026lt;a\u0026gt;,:value\u0026lt;5\u0026gt;)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这也是人们熟知的副词对儿形式。注意, 当冒号后面括号前面的部分不是一个合法的标识符的时候, 会应用其它语义, 不是所有的副词对儿都创建 \u003ccode\u003ePair\u003c/code\u003e 对象。\n另外两个常见的形式是:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e             \u003cspan class=\"c1\"\u003e# Same as :a(True)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:!\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e            \u003cspan class=\"c1\"\u003e# Same as :a(False)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e一个 colon 列表是一个仅包含冒号对儿的列表, 不需要逗号, 甚至不需要空格:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\u003cspan class=\"s\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e:!\u003c/span\u003e\u003cspan class=\"s\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ec\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# Same as a =\u0026gt; 4, c =\u0026gt; True, d =\u0026gt; False, c =\u0026gt; True\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"constraint\"\u003eConstraint\u003c/h2\u003e\n\u003cp\u003e约束是给参数或 subset 类型添加的限制。通过单词 where 引入约束. 在下面的例子中, 约束用于确保, 当调用一个名为 abbreviate 的子例程, 其参数为一个长度小于 10 个字符的字符串时,会抛出一个错误:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eabbreviate\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eStr\u003c/span\u003e \u003cspan class=\"nv\"\u003e$thing\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上例中的 Str 也是一个约束, 但是经常作为\u0026quot;类型约束\u0026quot;.\u003c/p\u003e\n\u003ch2 id=\"instance\"\u003eInstance\u003c/h2\u003e\n\u003cp\u003e类的实例在其它编程语言中也叫对象. 对象存储属性, 通常是 new 方法调用的返回值, 或者是对象字面量.\n大部分类型的实例被定义为 True, 例如 \u003ccode\u003edefined($instance)\u003c/code\u003e 为 True。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nb\"\u003eStr\u003c/span\u003e \u003cspan class=\"nv\"\u003e$str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e## 这使用内建类型,例如 Str\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003edefined\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$str\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eOh, yeah. I\u0026#39;m defined.\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eNo. Something off? \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e## if you wanted objects...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eA\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# nothing here for now.\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$an_instance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$an_instance\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003edefined\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eperl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e# defined($an_instance) works too.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e类拥有方法和属性的所有蓝图, 而类的实例把蓝图带到真实世界中。\u003c/p\u003e\n\u003ch2 id=\"invocant\"\u003eInvocant\u003c/h2\u003e\n\u003cp\u003e在 Raku 中调用方法的对象叫做调用者. 在方法中它就是 \u003ccode\u003eself\u003c/code\u003e 引用的东西.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003euc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# \u0026#39;str\u0026#39; 是 方法 uc 的调用者\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"literal\"\u003eLiteral\u003c/h2\u003e\n\u003cp\u003e字面量是一块直接代表对象的代码, 通常指向对象自身.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# the 2 is a literal\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# $x is not a literal, but a variable\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"lvalue\"\u003elvalue\u003c/h2\u003e\n\u003cp\u003elvalue 或者左值是能出现在赋值操作符左侧的任何东西; 典型的左值有变量, 私有属性和 \u003ccode\u003eis rw\u003c/code\u003e 属性, 变量列表和左值子例程。\u003c/p\u003e\n\u003cp\u003e左值的例子:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eDeclaration\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003elvalue\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eComments\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003emy $x;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e$x\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003emy ($a, $b);\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e($a, $b)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003ehas $!attribute;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e$!attribute\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eOnly inside classes\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003ehas $.attrib is rw;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e$.attrib\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003esub a is rw { $x };\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ea()\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e不是左值的例子:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e                        \u003cspan class=\"c1\"\u003e# literals\u003c/span\u003e\n\u003cspan class=\"k\"\u003econstant\u003c/span\u003e \u003cspan class=\"nb\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# constants\u003c/span\u003e\n\u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.attrib\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e            \u003cspan class=\"c1\"\u003e# attributes; you can only assign to $!attrib\u003c/span\u003e\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003ef\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"nb\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# \u0026#34;normal\u0026#34; subs are not writable\u003c/span\u003e\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# error - parameters are read-only by default\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"mainline\"\u003eMainline\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003emainline\u003c/code\u003e 是程序中不属于任何 block 的程序文本.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003ef\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e# not in mainline, in sub f\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e        \u003cspan class=\"c1\"\u003e# in mainline again\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"slurpy\"\u003eSlurpy\u003c/h2\u003e\n\u003cp\u003e子例程或方法中的形参如果能接收任意数量的参数, 那这个形参就会被认为是 \u003ccode\u003eslurpy\u003c/code\u003e 的。它由参数名字前面的星号标出。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003esum\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nv\"\u003e@numbers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e[+]\u003c/span\u003e \u003cspan class=\"nv\"\u003e@numbers\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"type-object\"\u003eType Object\u003c/h2\u003e\n\u003cp\u003e类型对象是一个代表类 \u003ccode\u003e/role/package/grammar/enum\u003c/code\u003e 的对象。它通常和类型名相同。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eA\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e              \u003cspan class=\"c1\"\u003e# A is the type object\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# same here\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nf\"\u003egreet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ehi\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# $x now holds a type object returned from the\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# anonymous class definition\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"匿名 子例程、方法或子方法，当它们不能通过名字调用时，就被称为匿名的\n# named subroutine sub double($x) { 2 * $x }; # 匿名子例程,存储在一个具名的标量里 my $double = sub ($x) { 2 * $x }; 注意，匿名子例程仍然可以有名字\n# 使用 anon 关键字使子例程匿名 my $s = anon sub triple($x) { 3 * $x } say $s.name; # triple 副词 通常, 副词是函数的命名参数. 也有一些其它特殊语法形式允许副词出现在某些合适的地方:\nq:w\u0026#34;foo bar # \u0026#34;:w\u0026#34; is a Quotelike form modifier adverb m:g/a|b|c/ # \u0026#34;:g\u0026#34; is also 4 +\u0026gt; 5 :rotate # \u0026#34;:rotate\u0026#34; is an operator adverb @h{3}:exists # \u0026#34;:exists\u0026#34; is also, but is known as a subscript adverb 副词通常使用冒号对儿标记来表示, 因为这个原因, 冒号对儿标记法也以副词对儿形式著称:\n:a(4) # Same as \u0026#34;a\u0026#34; =\u0026gt; 4 Autothreading Autothreading 是这样的: 如果你传递一个 junction 给子例程, 该子例程期望的参数类型为 Any 或它的子类型。那么这个子例程调用会被执行多次, 每次使用一个不同的 junction 状态. 这些调用的结果被组合成一个跟原 junction 同类型的 junction。\nsub f($x) { 2 * $x }; if f(1|2|3) == 4 { say \u0026#39;success\u0026#39;; } 这里 f() 是含有一个参数的子例程，然而因为它没有显式的类型声明，它就被隐式的声明为 Any 型。 Junction 参数使 f(1|2|3) 调用在内部作为 f(1)|f(2)|f(3) 执行, 而结果是跟原 junction 同类型的 junction, 即 2|4|6。这种把一个 Junction 分成对多次函数调用的处理就叫做 autothreading。\nColon Pair 和 Colon List 冒号对儿是用于创建或 Pair 对象的便捷语法. 两种最常见的形式是:\n:a(4) # Same as \u0026#34;a\u0026#34; =\u0026gt; 4, same as Pair.new(:key\u0026lt;a\u0026gt;,:value(5)) :a\u0026lt;4\u0026gt; # Same as \u0026#34;a\u0026#34; =\u0026gt; \u0026#34;4\u0026#34;, same as Pair.new(:key\u0026lt;a\u0026gt;,:value\u0026lt;5\u0026gt;) 这也是人们熟知的副词对儿形式。注意, 当冒号后面括号前面的部分不是一个合法的标识符的时候, 会应用其它语义, 不是所有的副词对儿都创建 Pair 对象。 另外两个常见的形式是:\n:a # Same as :a(True) :!a # Same as :a(False) 一个 colon 列表是一个仅包含冒号对儿的列表, 不需要逗号, 甚至不需要空格:\n:a(4):c:!d:c # Same as a =\u0026gt; 4, c =\u0026gt; True, d =\u0026gt; False, c =\u0026gt; True Constraint 约束是给参数或 subset 类型添加的限制。通过单词 where 引入约束. 在下面的例子中, 约束用于确保, 当调用一个名为 abbreviate 的子例程, 其参数为一个长度小于 10 个字符的字符串时,会抛出一个错误:\nsub abbreviate (Str $thing where { .chars \u0026gt;= 10 }) { ... } 上例中的 Str 也是一个约束, 但是经常作为\u0026quot;类型约束\u0026quot;.\nInstance 类的实例在其它编程语言中也叫对象. 对象存储属性, 通常是 new 方法调用的返回值, 或者是对象字面量. 大部分类型的实例被定义为 True, 例如 defined($instance) 为 True。\nmy Str $str = \u0026#34;hello\u0026#34;; ## 这使用内建类型,例如 Str if defined($str) { say \u0026#34;Oh, yeah. I\u0026#39;m defined.\u0026#34;; } else { say \u0026#34;No. Something off? \u0026#34;; } ## if you wanted objects... class A { # nothing here for now. } my $an_instance = A.new; say $an_instance.defined.perl;# defined($an_instance) works too. 类拥有方法和属性的所有蓝图, 而类的实例把蓝图带到真实世界中。\nInvocant 在 Raku 中调用方法的对象叫做调用者. 在方法中它就是 self 引用的东西.\nsay \u0026#39;str\u0026#39;.uc; # \u0026#39;str\u0026#39; 是 方法 uc 的调用者 Literal 字面量是一块直接代表对象的代码, 通常指向对象自身.\nmy $x = 2; # the 2 is a literal say $x; # $x is not a literal, but a variable lvalue lvalue 或者左值是能出现在赋值操作符左侧的任何东西; 典型的左值有变量, 私有属性和 is rw 属性, 变量列表和左值子例程。\n左值的例子:\n   Declaration lvalue Comments     my $x; $x    my ($a, $b); ($a, $b)    has $!attribute; $!attribute Only inside classes   has $.attrib is rw; $.attrib    sub a is rw { $x }; a()     不是左值的例子:\n3 # literals constant x = 3; # constants has $.attrib; # attributes; you can only assign to $!attrib sub f { }; f(); # \u0026#34;normal\u0026#34; subs are not writable sub f($x) { $x = 3 }; # error - parameters are read-only by default Mainline mainline 是程序中不属于任何 block 的程序文本.\nsub f { # not in mainline, in sub f } f(); # in mainline again Slurpy 子例程或方法中的形参如果能接收任意数量的参数, 那这个形参就会被认为是 slurpy 的。它由参数名字前面的星号标出。\nsub sum (*@numbers) { return [+] @numbers; } Type Object 类型对象是一个代表类 /role/package/grammar/enum 的对象。它通常和类型名相同。\nclass A { }; say A; # A is the type object my $x = A.new(); # same here my $x = class { method greet() { say \u0026#34;hi\u0026#34;; } } # $x now holds a type object returned from the # anonymous class definition "},"name":"Raku 中的术语","published":"2021-07-12T00:00:00+08:00","summary":"Terms in Raku","type":"entry","url":"https://ohmyweekly.github.io/notes/2016-03-26-terms-in-raku/"},{"content":{"html":"\u003cp\u003eRaku 中的大部分句法结构能归类为项和操作符. 这儿你能找到各种不同类型的项的概览.\u003c/p\u003e\n\u003ch2 id=\"literals\"\u003eLiterals\u003c/h2\u003e\n\u003ch3 id=\"int\"\u003eInt\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e12_300_00\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003eDEAD_BEEF\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e#十六进制\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eInt 字面量由数字组成, 并且能在数字之间包含下划线. 使用 \u003ccode\u003e:radix\u0026lt;number\u0026gt;\u003c/code\u003e 冒号对儿形式能指定 10 进制外的其它进制.\u003c/p\u003e\n\u003ch3 id=\"rat-有理数\"\u003eRat 有理数\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"mf\"\u003e12.34\u003c/span\u003e\n\u003cspan class=\"mf\"\u003e1_200.345_678\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRat(有理数)字面量由一个点号分割的两部分整数组成. 注意尾部的点号是不允许的, 所以你必须写成 \u003ccode\u003e1.0\u003c/code\u003e 而非 \u003ccode\u003e1.\u003c/code\u003e ( 这个规则很重要, 因为有一个以点号开头的中缀操作符, 例如 \u003ccode\u003e..\u003c/code\u003e 范围操作符 ).\u003c/p\u003e\n\u003ch3 id=\"num-浮点数\"\u003eNum 浮点数\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"mf\"\u003e12.3e-32\u003c/span\u003e\n\u003cspan class=\"mf\"\u003e3e8\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNum(浮点数)字面量由 Rat 或 Int 字面量后面再跟着一个字母 e 和 一个指数(可能为负)组成. \u003ccode\u003e3e8\u003c/code\u003e 使用 值 \u003ccode\u003e3* 10**8\u003c/code\u003e 构建了一个 Num.\u003c/p\u003e\n\u003ch3 id=\"str\"\u003eStr\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea string\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eI\\\u0026#39;m escaped!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eI don\u0026#39;t need to be\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\\u0026#34;But I still can be,\\\u0026#34; he said.\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"s\"\u003eOther delimiters can be used too!\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e字符串字面量常常使用 \u003ccode\u003e'\u003c/code\u003e 或 \u003ccode\u003e\u0026quot;\u003c/code\u003e 创建, 然儿, 字符串在 Raku 中其实是一种强大的子语言.\u003c/p\u003e\n\u003ch3 id=\"regex\"\u003eRegex\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"sr\"\u003e match some text \u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\n\u003cspan class=\"k\"\u003erx\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"sr\"\u003eslurp \u003c/span\u003e\u003cspan class=\"se\"\u003e\\s\u003c/span\u003e\u003cspan class=\"sr\"\u003e rest \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ni\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"ni\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这两种会产生字面正则。\u003c/p\u003e\n\u003ch3 id=\"pair\"\u003ePair\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eidentifier\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:!\u003c/span\u003e\u003cspan class=\"s\"\u003eidentifier\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eidentifier\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eidentifier\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003evalue1 value2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eidentifier\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$value\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eidentifier\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eval1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eval2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eidentifier\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003ekey1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eval1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e, \u003cspan class=\"s\"\u003ekey2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003evalue2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$item\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e@array\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e%hash\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e\u0026amp;callable\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePair 对象的创建要么使用 \u003ccode\u003einfix:«=\u0026gt;»\u003c/code\u003e (它会自动括起左边, 如果左边是标识符的话), 要么使用各种冒号对儿形式.  那些总是以一个冒号开头的创建形式, 冒号后面要么跟着一个标识符, 要么跟着一个已经存在的变量(不带符号的变量名作为 pair 的键, 变量的值作为 pair 的键值).\u003c/p\u003e\n\u003cp\u003e在标识符形式的冒号对儿中, 可选的值可以是任意环缀. 如果没有环缀, 那它的值就是 \u003ccode\u003eBool::True\u003c/code\u003e. \u003ccode\u003e!:identifier\u003c/code\u003e 形式的值是 \u003ccode\u003eBool::False\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e如果冒号对儿在参数列表中, 所有的冒号对儿都会作为命名参数, 但是 \u003ccode\u003e'quoted string' =\u0026gt; $value\u003c/code\u003e 除外.\u003c/p\u003e\n\u003ch3 id=\"term-\"\u003eterm *\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e*\u003c/code\u003e 会创建一个类型为 Whatever 的对象. 详情查看 \u003ca href=\"http://doc.raku.org/type/Whatever\"\u003eWhatever\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"identifier-terms\"\u003eIdentifier terms\u003c/h2\u003e\n\u003cp\u003eRaku中有内建的标识符项, 列出如下. 此外, 使用该语法能添加新的标识符项.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003eterm\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003efourty-two\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003efourty-two\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者作为常量:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003econstant\u003c/span\u003e \u003cspan class=\"no\"\u003eforty-two\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003efourty-two\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"self\"\u003eself\u003c/h3\u003e\n\u003cp\u003e在方法中, self 指向方法的调用者( 例如, 方法被调用的对象). 如果把它用在没有意义的上下文中, 会抛出一个 \u003ccode\u003e X::Syntax::NoSelf\u003c/code\u003e 类型的编译时错误.\u003c/p\u003e\n\u003ch3 id=\"now\"\u003enow\u003c/h3\u003e\n\u003cp\u003e返回一个代表当前时间的实例对象.\u003c/p\u003e\n\u003ch3 id=\"rand\"\u003erand\u003c/h3\u003e\n\u003cp\u003e返回一个范围为 \u003ccode\u003e0..^1\u003c/code\u003e 的伪随机浮点数.\u003c/p\u003e\n\u003ch3 id=\"pi\"\u003epi\u003c/h3\u003e\n\u003cp\u003e返回数值 pi, 例如, 圆的周长和半径之间的比率.\u003c/p\u003e\n\u003ch3 id=\"e\"\u003ee\u003c/h3\u003e\n\u003cp\u003e返回欧拉数值.\u003c/p\u003e\n\u003ch3 id=\"i\"\u003ei\u003c/h3\u003e\n\u003cp\u003e返回复数的虚部.\u003c/p\u003e\n","text":"Raku 中的大部分句法结构能归类为项和操作符. 这儿你能找到各种不同类型的项的概览.\nLiterals Int 42 12_300_00 :16\u0026lt;DEAD_BEEF\u0026gt; #十六进制 Int 字面量由数字组成, 并且能在数字之间包含下划线. 使用 :radix\u0026lt;number\u0026gt; 冒号对儿形式能指定 10 进制外的其它进制.\nRat 有理数 12.34 1_200.345_678 Rat(有理数)字面量由一个点号分割的两部分整数组成. 注意尾部的点号是不允许的, 所以你必须写成 1.0 而非 1. ( 这个规则很重要, 因为有一个以点号开头的中缀操作符, 例如 .. 范围操作符 ).\nNum 浮点数 12.3e-32 3e8 Num(浮点数)字面量由 Rat 或 Int 字面量后面再跟着一个字母 e 和 一个指数(可能为负)组成. 3e8 使用 值 3* 10**8 构建了一个 Num.\nStr \u0026#39;a string\u0026#39;\u0026#39;I\\\u0026#39;m escaped!\u0026#39; \u0026#34;I don\u0026#39;t need to be\u0026#34; \u0026#34;\\\u0026#34;But I still can be,\\\u0026#34; he said.\u0026#34; q|Other delimiters can be used too! 字符串字面量常常使用 ' 或 \u0026quot; 创建, 然儿, 字符串在 Raku 中其实是一种强大的子语言.\nRegex /match some text / rx/slurp \\srest (.*)$/ 这两种会产生字面正则。\nPair a =\u0026gt; 1 \u0026#39;a\u0026#39; =\u0026gt; \u0026#39;b\u0026#39; :identifier :!identifier :identifier\u0026lt;value\u0026gt; :identifier\u0026lt;value1 value2\u0026gt; :identifier($value) :identifier[\u0026#39;val1\u0026#39;, \u0026#39;val2\u0026#39;] :identifier{key1 =\u0026gt; \u0026#39;val1\u0026#39;, key2 =\u0026gt; \u0026#39;value2\u0026#39;} :$item :@array :%hash :\u0026amp;callable Pair 对象的创建要么使用 infix:«=\u0026gt;» (它会自动括起左边, 如果左边是标识符的话), 要么使用各种冒号对儿形式. 那些总是以一个冒号开头的创建形式, 冒号后面要么跟着一个标识符, 要么跟着一个已经存在的变量(不带符号的变量名作为 pair 的键, 变量的值作为 pair 的键值).\n在标识符形式的冒号对儿中, 可选的值可以是任意环缀. 如果没有环缀, 那它的值就是 Bool::True. !:identifier 形式的值是 Bool::False.\n如果冒号对儿在参数列表中, 所有的冒号对儿都会作为命名参数, 但是 'quoted string' =\u0026gt; $value 除外.\nterm * * 会创建一个类型为 Whatever 的对象. 详情查看 Whatever.\nIdentifier terms Raku中有内建的标识符项, 列出如下. 此外, 使用该语法能添加新的标识符项.\nsub term:\u0026lt;fourty-two\u0026gt; { 42 }; say fourty-two 或者作为常量:\nconstant forty-two = 42; say fourty-two self 在方法中, self 指向方法的调用者( 例如, 方法被调用的对象). 如果把它用在没有意义的上下文中, 会抛出一个  X::Syntax::NoSelf 类型的编译时错误.\nnow 返回一个代表当前时间的实例对象.\nrand 返回一个范围为 0..^1 的伪随机浮点数.\npi 返回数值 pi, 例如, 圆的周长和半径之间的比率.\ne 返回欧拉数值.\ni 返回复数的虚部.\n"},"name":"Raku 中的项","published":"2021-07-11T00:00:00+08:00","summary":"Terms in Raku","type":"entry","url":"https://ohmyweekly.github.io/notes/2015-11-21-terms-in-raku/"}],"name":"term","type":"feed","url":"https://ohmyweekly.github.io/tags/term/"}