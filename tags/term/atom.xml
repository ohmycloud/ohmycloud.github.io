<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[term on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/term/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/term/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/term/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/term/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-15T22:25:29+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/term/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Raku 中的术语]]></title>
            <link href="https://ohmyweekly.github.io/notes/2016-03-26-terms-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2015-11-21-terms-in-raku/?utm_source=atom_feed" rel="related" type="text/html" title="Raku 中的项" />
            
                <id>https://ohmyweekly.github.io/notes/2016-03-26-terms-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-12T00:00:00+08:00</published>
            <updated>2021-07-12T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Terms in Raku</blockquote><h2 id="匿名">匿名</h2>
<p>子例程、方法或子方法，当它们不能通过名字调用时，就被称为匿名的</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="c1"># named subroutine</span>
<span class="k">sub</span> <span class="nf">double</span><span class="p">(</span><span class="nv">$x</span><span class="p">)</span> <span class="p">{</span> <span class="mi">2</span> <span class="o">*</span> <span class="nv">$x</span> <span class="p">};</span>
<span class="c1"># 匿名子例程,存储在一个具名的标量里</span>
<span class="k">my</span> <span class="nv">$double</span> <span class="o">=</span> <span class="k">sub</span> <span class="p">(</span><span class="nv">$x</span><span class="p">)</span> <span class="p">{</span> <span class="mi">2</span> <span class="o">*</span> <span class="nv">$x</span> <span class="p">};</span>
</code></pre></div><p>注意，匿名子例程仍然可以有名字</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="c1"># 使用 anon 关键字使子例程匿名</span>
<span class="k">my</span> <span class="nv">$s</span> <span class="o">=</span> <span class="k">anon</span> <span class="k">sub</span> <span class="nf">triple</span><span class="p">(</span><span class="nv">$x</span><span class="p">)</span> <span class="p">{</span> <span class="mi">3</span> <span class="o">*</span> <span class="nv">$x</span> <span class="p">}</span>
<span class="nb">say</span> <span class="nv">$s</span><span class="o">.</span><span class="nb">name</span><span class="p">;</span>        <span class="c1"># triple</span>
</code></pre></div><h2 id="副词">副词</h2>
<p>通常, 副词是函数的命名参数.  也有一些其它特殊语法形式允许副词出现在某些合适的地方:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">q</span><span class="sa">:w</span><span class="p">&#34;</span><span class="s">foo bar</span>   <span class="c1"># &#34;:w&#34; is a Quotelike form modifier adverb</span>
<span class="k">m</span><span class="p">:</span><span class="na">g</span><span class="p">/</span><span class="sr">a</span><span class="o">|</span><span class="sr">b</span><span class="o">|</span><span class="sr">c</span><span class="p">/</span>     <span class="c1"># &#34;:g&#34; is also</span>
<span class="mi">4</span> <span class="o">+&gt;</span> <span class="mi">5</span> <span class="p">:</span><span class="s">rotate</span> <span class="c1"># &#34;:rotate&#34; is an operator adverb</span>
<span class="nv">@h</span><span class="p">{</span><span class="mi">3</span><span class="p">}:</span><span class="s">exists</span>   <span class="c1"># &#34;:exists&#34; is also, but is known as a subscript adverb</span>
</code></pre></div><p>副词通常使用冒号对儿标记来表示, 因为这个原因, 冒号对儿标记法也以副词对儿形式著称:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">:</span><span class="s">a</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>          <span class="c1"># Same as &#34;a&#34; =&gt; 4</span>
</code></pre></div><h2 id="autothreading">Autothreading</h2>
<p><code>Autothreading</code> 是这样的: 如果你传递一个 <code>junction</code> 给子例程, 该子例程期望的参数类型为 <code>Any</code> 或它的子类型。那么这个子例程调用会被执行多次, 每次使用一个不同的 junction 状态. 这些调用的结果被组合成一个跟原 <code>junction</code> 同类型的 <code>junction</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nb">f</span><span class="p">(</span><span class="nv">$x</span><span class="p">)</span> <span class="p">{</span> <span class="mi">2</span> <span class="o">*</span> <span class="nv">$x</span> <span class="p">};</span>

<span class="k">if</span> <span class="nb">f</span><span class="p">(</span><span class="mi">1</span><span class="o">|</span><span class="mi">2</span><span class="o">|</span><span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">success</span><span class="p">&#39;;</span>
<span class="p">}</span>
</code></pre></div><p>这里 <code>f()</code> 是含有一个参数的子例程，然而因为它没有显式的类型声明，它就被隐式的声明为 <code>Any</code> 型。 Junction 参数使 <code>f(1|2|3)</code> 调用在内部作为 <code>f(1)|f(2)|f(3)</code> 执行, 而结果是跟原 <code>junction</code> 同类型的 <code>junction</code>, 即  <code>2|4|6</code>。这种把一个 <code>Junction</code> 分成对多次函数调用的处理就叫做 <code>autothreading</code>。</p>
<h2 id="colon-pair-和-colon-list">Colon Pair 和 Colon List</h2>
<p>冒号对儿是用于创建或 Pair 对象的便捷语法. 两种最常见的形式是:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">:</span><span class="s">a</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>          <span class="c1"># Same as &#34;a&#34; =&gt; 4,   same as Pair.new(:key&lt;a&gt;,:value(5))</span>
<span class="p">:</span><span class="s">a</span><span class="p">&lt;</span><span class="s">4</span><span class="p">&gt;</span>          <span class="c1"># Same as &#34;a&#34; =&gt; &#34;4&#34;, same as Pair.new(:key&lt;a&gt;,:value&lt;5&gt;)</span>
</code></pre></div><p>这也是人们熟知的副词对儿形式。注意, 当冒号后面括号前面的部分不是一个合法的标识符的时候, 会应用其它语义, 不是所有的副词对儿都创建 <code>Pair</code> 对象。
另外两个常见的形式是:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">:</span><span class="s">a</span>             <span class="c1"># Same as :a(True)</span>
<span class="p">:!</span><span class="s">a</span>            <span class="c1"># Same as :a(False)</span>
</code></pre></div><p>一个 colon 列表是一个仅包含冒号对儿的列表, 不需要逗号, 甚至不需要空格:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">:</span><span class="s">a</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span><span class="s">c</span><span class="p">:!</span><span class="s">d</span><span class="p">:</span><span class="s">c</span>   <span class="c1"># Same as a =&gt; 4, c =&gt; True, d =&gt; False, c =&gt; True</span>
</code></pre></div><h2 id="constraint">Constraint</h2>
<p>约束是给参数或 subset 类型添加的限制。通过单词 where 引入约束. 在下面的例子中, 约束用于确保, 当调用一个名为 abbreviate 的子例程, 其参数为一个长度小于 10 个字符的字符串时,会抛出一个错误:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">abbreviate</span> <span class="p">(</span><span class="nb">Str</span> <span class="nv">$thing</span> <span class="k">where</span> <span class="p">{</span> <span class="o">.</span><span class="nb">chars</span> <span class="o">&gt;=</span> <span class="mi">10</span> <span class="p">})</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</code></pre></div><p>上例中的 Str 也是一个约束, 但是经常作为&quot;类型约束&quot;.</p>
<h2 id="instance">Instance</h2>
<p>类的实例在其它编程语言中也叫对象. 对象存储属性, 通常是 new 方法调用的返回值, 或者是对象字面量.
大部分类型的实例被定义为 True, 例如 <code>defined($instance)</code> 为 True。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nb">Str</span> <span class="nv">$str</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">hello</span><span class="p">&#34;;</span>  <span class="c1">## 这使用内建类型,例如 Str</span>

<span class="k">if</span> <span class="nb">defined</span><span class="p">(</span><span class="nv">$str</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Oh, yeah. I&#39;m defined.</span><span class="p">&#34;;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">No. Something off? </span><span class="p">&#34;;</span>
<span class="p">}</span>

<span class="c1">## if you wanted objects...</span>
<span class="k">class</span> <span class="nc">A</span> <span class="p">{</span>
    <span class="c1"># nothing here for now.</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$an_instance</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="nb">new</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$an_instance</span><span class="o">.</span><span class="nb">defined</span><span class="o">.</span><span class="nb">perl</span><span class="p">;</span><span class="c1"># defined($an_instance) works too.</span>
</code></pre></div><p>类拥有方法和属性的所有蓝图, 而类的实例把蓝图带到真实世界中。</p>
<h2 id="invocant">Invocant</h2>
<p>在 Raku 中调用方法的对象叫做调用者. 在方法中它就是 <code>self</code> 引用的东西.</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">&#39;</span><span class="s1">str</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">uc</span><span class="p">;</span>   <span class="c1"># &#39;str&#39; 是 方法 uc 的调用者</span>
</code></pre></div><h2 id="literal">Literal</h2>
<p>字面量是一块直接代表对象的代码, 通常指向对象自身.</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>      <span class="c1"># the 2 is a literal</span>
<span class="nb">say</span> <span class="nv">$x</span><span class="p">;</span>         <span class="c1"># $x is not a literal, but a variable</span>
</code></pre></div><h2 id="lvalue">lvalue</h2>
<p>lvalue 或者左值是能出现在赋值操作符左侧的任何东西; 典型的左值有变量, 私有属性和 <code>is rw</code> 属性, 变量列表和左值子例程。</p>
<p>左值的例子:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Declaration</th>
<th style="text-align:left">lvalue</th>
<th style="text-align:left">Comments</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">my $x;</td>
<td style="text-align:left">$x</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">my ($a, $b);</td>
<td style="text-align:left">($a, $b)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">has $!attribute;</td>
<td style="text-align:left">$!attribute</td>
<td style="text-align:left">Only inside classes</td>
</tr>
<tr>
<td style="text-align:left">has $.attrib is rw;</td>
<td style="text-align:left">$.attrib</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">sub a is rw { $x };</td>
<td style="text-align:left">a()</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p>不是左值的例子:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="mi">3</span>                        <span class="c1"># literals</span>
<span class="k">constant</span> <span class="nb">x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>          <span class="c1"># constants</span>
<span class="k">has</span> <span class="nv">$.attrib</span><span class="p">;</span>            <span class="c1"># attributes; you can only assign to $!attrib</span>
<span class="k">sub</span> <span class="nb">f</span> <span class="p">{</span> <span class="p">};</span> <span class="nb">f</span><span class="p">();</span>          <span class="c1"># &#34;normal&#34; subs are not writable</span>
<span class="k">sub</span> <span class="nb">f</span><span class="p">(</span><span class="nv">$x</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$x</span> <span class="o">=</span> <span class="mi">3</span> <span class="p">};</span>    <span class="c1"># error - parameters are read-only by default</span>
</code></pre></div><h2 id="mainline">Mainline</h2>
<p><code>mainline</code> 是程序中不属于任何 block 的程序文本.</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nb">f</span> <span class="p">{</span>
            <span class="c1"># not in mainline, in sub f</span>
<span class="p">}</span>

<span class="nb">f</span><span class="p">();</span>        <span class="c1"># in mainline again</span>
</code></pre></div><h2 id="slurpy">Slurpy</h2>
<p>子例程或方法中的形参如果能接收任意数量的参数, 那这个形参就会被认为是 <code>slurpy</code> 的。它由参数名字前面的星号标出。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nb">sum</span> <span class="p">(</span><span class="o">*</span><span class="nv">@numbers</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">[+]</span> <span class="nv">@numbers</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h2 id="type-object">Type Object</h2>
<p>类型对象是一个代表类 <code>/role/package/grammar/enum</code> 的对象。它通常和类型名相同。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">A</span> <span class="p">{</span> <span class="p">};</span>

<span class="nb">say</span> <span class="n">A</span><span class="p">;</span>              <span class="c1"># A is the type object</span>
<span class="k">my</span> <span class="nv">$x</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="nb">new</span><span class="p">();</span>    <span class="c1"># same here</span>
<span class="k">my</span> <span class="nv">$x</span> <span class="o">=</span> <span class="k">class</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">greet</span><span class="p">()</span> <span class="p">{</span>
        <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">hi</span><span class="p">&#34;;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># $x now holds a type object returned from the</span>
<span class="c1"># anonymous class definition</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/term" term="term" label="term" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Raku 中的项]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-11-21-terms-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2015-11-21-terms-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Terms in Raku</blockquote><p>Raku 中的大部分句法结构能归类为项和操作符. 这儿你能找到各种不同类型的项的概览.</p>
<h2 id="literals">Literals</h2>
<h3 id="int">Int</h3>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="mi">42</span>
<span class="mi">12_300_00</span>
<span class="p">:</span><span class="mi">16</span><span class="p">&lt;</span><span class="s">DEAD_BEEF</span><span class="p">&gt;</span>    <span class="c1">#十六进制</span>
</code></pre></div><p>Int 字面量由数字组成, 并且能在数字之间包含下划线. 使用 <code>:radix&lt;number&gt;</code> 冒号对儿形式能指定 10 进制外的其它进制.</p>
<h3 id="rat-有理数">Rat 有理数</h3>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="mf">12.34</span>
<span class="mf">1_200.345_678</span>
</code></pre></div><p>Rat(有理数)字面量由一个点号分割的两部分整数组成. 注意尾部的点号是不允许的, 所以你必须写成 <code>1.0</code> 而非 <code>1.</code> ( 这个规则很重要, 因为有一个以点号开头的中缀操作符, 例如 <code>..</code> 范围操作符 ).</p>
<h3 id="num-浮点数">Num 浮点数</h3>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="mf">12.3e-32</span>
<span class="mf">3e8</span>
</code></pre></div><p>Num(浮点数)字面量由 Rat 或 Int 字面量后面再跟着一个字母 e 和 一个指数(可能为负)组成. <code>3e8</code> 使用 值 <code>3* 10**8</code> 构建了一个 Num.</p>
<h3 id="str">Str</h3>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">&#39;</span><span class="s1">a string</span><span class="p">&#39;&#39;</span><span class="s1">I\&#39;m escaped!</span><span class="p">&#39;</span>
<span class="p">&#34;</span><span class="s2">I don&#39;t need to be</span><span class="p">&#34;</span>
<span class="p">&#34;</span><span class="s2">\&#34;But I still can be,\&#34; he said.</span><span class="p">&#34;</span>
<span class="k">q</span><span class="p">|</span><span class="s">Other delimiters can be used too!</span>
</code></pre></div><p>字符串字面量常常使用 <code>'</code> 或 <code>&quot;</code> 创建, 然儿, 字符串在 Raku 中其实是一种强大的子语言.</p>
<h3 id="regex">Regex</h3>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">/</span><span class="sr"> match some text </span><span class="p">/</span>
<span class="k">rx</span><span class="p">/</span><span class="sr">slurp </span><span class="se">\s</span><span class="sr"> rest </span><span class="p">(</span><span class="ni">.</span><span class="o">*</span><span class="p">)</span><span class="sr"> </span><span class="ni">$</span><span class="p">/</span>
</code></pre></div><p>这两种会产生字面正则。</p>
<h3 id="pair">Pair</h3>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="s">a</span> <span class="o">=&gt;</span> <span class="mi">1</span>
<span class="p">&#39;</span><span class="s1">a</span><span class="p">&#39;</span> <span class="o">=&gt;</span> <span class="p">&#39;</span><span class="s1">b</span><span class="p">&#39;</span>
<span class="p">:</span><span class="s">identifier</span>
<span class="p">:!</span><span class="s">identifier</span>
<span class="p">:</span><span class="s">identifier</span><span class="p">&lt;</span><span class="s">value</span><span class="p">&gt;</span>
<span class="p">:</span><span class="s">identifier</span><span class="p">&lt;</span><span class="s">value1 value2</span><span class="p">&gt;</span>
<span class="p">:</span><span class="s">identifier</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
<span class="p">:</span><span class="s">identifier</span><span class="p">[&#39;</span><span class="s1">val1</span><span class="p">&#39;</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">val2</span><span class="p">&#39;]</span>
<span class="p">:</span><span class="s">identifier</span><span class="p">{</span><span class="s">key1</span> <span class="o">=&gt;</span> <span class="p">&#39;</span><span class="s1">val1</span><span class="p">&#39;</span>, <span class="s">key2</span> <span class="o">=&gt;</span> <span class="p">&#39;</span><span class="s1">value2</span><span class="p">&#39;}</span>
<span class="o">:</span><span class="nv">$item</span>
<span class="o">:</span><span class="nv">@array</span>
<span class="o">:</span><span class="nv">%hash</span>
<span class="o">:</span><span class="nv">&amp;callable</span>
</code></pre></div><p>Pair 对象的创建要么使用 <code>infix:«=&gt;»</code> (它会自动括起左边, 如果左边是标识符的话), 要么使用各种冒号对儿形式.  那些总是以一个冒号开头的创建形式, 冒号后面要么跟着一个标识符, 要么跟着一个已经存在的变量(不带符号的变量名作为 pair 的键, 变量的值作为 pair 的键值).</p>
<p>在标识符形式的冒号对儿中, 可选的值可以是任意环缀. 如果没有环缀, 那它的值就是 <code>Bool::True</code>. <code>!:identifier</code> 形式的值是 <code>Bool::False</code>.</p>
<p>如果冒号对儿在参数列表中, 所有的冒号对儿都会作为命名参数, 但是 <code>'quoted string' =&gt; $value</code> 除外.</p>
<h3 id="term-">term *</h3>
<p><code>*</code> 会创建一个类型为 Whatever 的对象. 详情查看 <a href="http://doc.raku.org/type/Whatever">Whatever</a>.</p>
<h2 id="identifier-terms">Identifier terms</h2>
<p>Raku中有内建的标识符项, 列出如下. 此外, 使用该语法能添加新的标识符项.</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nb">term</span><span class="o">:</span><span class="p">&lt;</span><span class="s">fourty-two</span><span class="p">&gt;</span> <span class="p">{</span> <span class="mi">42</span> <span class="p">};</span>
<span class="nb">say</span> <span class="n">fourty-two</span>
</code></pre></div><p>或者作为常量:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">constant</span> <span class="no">forty-two</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="nb">say</span> <span class="n">fourty-two</span>
</code></pre></div><h3 id="self">self</h3>
<p>在方法中, self 指向方法的调用者( 例如, 方法被调用的对象). 如果把它用在没有意义的上下文中, 会抛出一个 <code> X::Syntax::NoSelf</code> 类型的编译时错误.</p>
<h3 id="now">now</h3>
<p>返回一个代表当前时间的实例对象.</p>
<h3 id="rand">rand</h3>
<p>返回一个范围为 <code>0..^1</code> 的伪随机浮点数.</p>
<h3 id="pi">pi</h3>
<p>返回数值 pi, 例如, 圆的周长和半径之间的比率.</p>
<h3 id="e">e</h3>
<p>返回欧拉数值.</p>
<h3 id="i">i</h3>
<p>返回复数的虚部.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/term" term="term" label="term" />
                            
                        
                    
                
            
        </entry>
    
</feed>
