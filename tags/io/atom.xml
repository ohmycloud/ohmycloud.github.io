<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[io on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/io/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/io/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/io/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/io/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-12T22:13:55+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/io/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Raku 中的 IO 操作]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-10-11-io-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2015-10-11-io-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Io in Raku</blockquote><p>文件存在、文件的时间戳、文件的修改时间等等</p>
<h3 id="批量插入文本">批量插入文本</h3>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">@filenames</span> <span class="o">=</span> <span class="nb">dir</span> <span class="p">&#39;</span><span class="s1">.</span><span class="p">&#39;</span><span class="o">,</span>  <span class="s">test</span> <span class="o">=&gt;</span> <span class="nb">any</span><span class="p">(/</span><span class="sr">\</span><span class="ni">.</span><span class="sr">md</span><span class="ni">$</span><span class="p">/</span>, <span class="p">/</span><span class="sr">\</span><span class="ni">.</span><span class="sr">markdown</span><span class="p">/);</span>

<span class="k">for</span> <span class="nv">@filenames</span> <span class="k">-&gt;</span> <span class="nv">$filePath</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$path</span> <span class="o">=</span> <span class="nv">$filePath</span><span class="o">.</span><span class="nb">path</span><span class="p">();</span>
    <span class="nv">$path</span> <span class="o">~~</span> <span class="k">s</span><span class="p">/</span><span class="ni">.</span><span class="sr">md</span><span class="p">//;</span>
    <span class="nv">$path</span> <span class="o">~~</span> <span class="k">s</span><span class="p">/</span><span class="ni">.</span><span class="sr">markdown</span><span class="p">//;</span>

    <span class="k">my</span> <span class="nv">$date</span> <span class="o">=</span> <span class="nb">DateTime</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="nb">now</span><span class="p">);</span>
    <span class="k">my</span> <span class="nv">$head</span> <span class="o">=</span>
<span class="k">qq</span><span class="sa">:heredoc</span> <span class="p">&#39;EOT&#39;;</span><span class="s2">
</span><span class="s2">title:  </span><span class="nv">$path</span><span class="o">.</span><span class="nf">IO.basename</span><span class="p">()</span><span class="s2">
</span><span class="s2">date: </span><span class="nv">$date</span><span class="s2">
</span><span class="s2">tags: Raku
</span><span class="s2">categories: Raku
</span><span class="s2">
</span><span class="s2">---
</span><span class="s2">
</span><span class="s2">&lt;blockquote class=&#34;blockquote-center&#34;&gt;这城市有太多风景都在提醒那过去！&lt;/blockquote&gt;
</span><span class="s2">
</span><span class="s2">[TOC]
</span><span class="s2">
</span><span class="s2"></span><span class="p">EOT</span>

   <span class="k">my</span> <span class="nv">@content</span>   <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filePath</span><span class="p">;</span>
   <span class="nb">spurt</span><span class="p">(</span><span class="nv">$filePath</span><span class="o">.</span><span class="nb">path</span><span class="o">,</span> <span class="p">&#34;</span><span class="nv">$head</span><span class="s2">\n</span><span class="nv">@content</span><span class="o">[]</span><span class="p">&#34;);</span>
<span class="p">}</span>

</code></pre></div><p>在当前目录中查找所有以 <code>.md</code> (.markdown)结尾的文件（即markdown文件）, 并在文件最前面插入一段文本， 形如：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">title:</span>  <span class="nb">Raku</span>
<span class="n">date:</span> <span class="mi">2015</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mi">20</span><span class="nf">T23:19:13Z</span>
<span class="n">tags:</span> <span class="nb">Raku</span>
<span class="n">categories:</span> <span class="nb">Raku</span>

<span class="o">---</span>

<span class="p">&lt;</span><span class="s">blockquote class=&#34;blockquote-center&#34;</span><span class="p">&gt;</span><span class="n">我站在天桥上念你</span><span class="o">,</span> <span class="n">有点狼狈</span><span class="p">&lt;</span><span class="s">/blockquote</span><span class="p">&gt;</span>

</code></pre></div><p>类 <code>IO::Path</code> 提供了 <code>basename</code>, <code>path</code>, <code>parts</code>, 等方法供使用, 具体用法请看文档:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">rakudoc IO::Path
</code></pre></div><p>一些例子：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nb">IO::Path</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="s2">/etc/passwd</span><span class="p">&#34;)</span><span class="o">.</span><span class="nb">basename</span><span class="p">;</span>   <span class="c1"># passwd</span>
<span class="nb">say</span> <span class="nb">IO::Path</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="s2">docs/README.pod</span><span class="p">&#34;)</span><span class="o">.</span><span class="nb">extension</span><span class="p">;</span>   <span class="c1"># pod</span>
<span class="nb">say</span> <span class="nb">IO::Path</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="s2">/etc/passwd</span><span class="p">&#34;)</span><span class="o">.</span><span class="nb">dirname</span><span class="p">;</span>    <span class="c1"># /etc</span>
<span class="nb">say</span> <span class="nb">IO::Path::Win32</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="s2">C:\\Windows\\registry.ini</span><span class="p">&#34;)</span><span class="o">.</span><span class="nb">volume</span><span class="p">;</span>    <span class="c1"># C:</span>
<span class="nb">say</span> <span class="nb">IO::Path</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="s2">/etc/passwd</span><span class="p">&#34;)</span><span class="o">.</span><span class="nb">parts</span><span class="o">.</span><span class="nb">perl</span> <span class="c1"># (&#34;dirname&#34; =&gt; &#34;/etc&#34;, &#34;volume&#34;  =&gt; &#34;&#34;, &#34;basename&#34; =&gt; &#34;passwd&#34;).hash</span>
</code></pre></div><p>例子:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="c1"># To iterate over the contents of the current directory: for dir() -&gt; $file</span>
<span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$file</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># As before, but include even &#39;.&#39; and &#39;..&#39; which are filtered out by # the</span>
<span class="k">default</span> <span class="p">:</span><span class="s">test</span> <span class="n">matcher:</span> <span class="k">for</span> <span class="nb">dir</span><span class="p">(</span><span class="s">test</span> <span class="o">=&gt;</span> <span class="o">*</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$file</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$file</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># To get the names of all .jpg and .jpeg files in ~/Downloads: my @jpegs =</span>
<span class="p">&#34;</span><span class="nv">%*ENV</span><span class="p">&lt;</span><span class="s">HOME</span><span class="p">&gt;</span><span class="s2">/Downloads</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">dir</span><span class="p">(</span><span class="s">test</span> <span class="o">=&gt;</span> <span class="p">/:</span><span class="na">i</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">.</span><span class="p">&#39;</span><span class="sr"> jpe</span><span class="o">?</span><span class="sr">g </span><span class="ni">$</span><span class="p">/)</span><span class="o">».</span><span class="nb">Str</span><span class="p">;</span>

<span class="c1"># An example program that lists all files and directories recursively:</span>

<span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="nv">$dir</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">.</span><span class="p">&#39;)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">@todo</span> <span class="o">=</span> <span class="nv">$dir</span><span class="o">.</span><span class="nb">IO</span><span class="p">;</span> <span class="k">while</span> <span class="nv">@todo</span> <span class="p">{</span>
        <span class="k">for</span> <span class="nv">@todo</span><span class="o">.</span><span class="nb">pop</span><span class="o">.</span><span class="nb">dir</span> <span class="k">-&gt;</span> <span class="nv">$path</span> <span class="p">{</span>
            <span class="nb">say</span> <span class="nv">$path</span><span class="o">.</span><span class="nb">Str</span><span class="p">;</span> <span class="nv">@todo</span><span class="o">.</span><span class="nb">push</span><span class="o">:</span> <span class="nv">$path</span> <span class="k">if</span> <span class="nv">$path</span><span class="o">.</span><span class="nb">d</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h3 id="文件测试操作符">文件测试操作符</h3>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="c1"># If you have a string - a path to something in the filesystem:</span>

<span class="k">if</span> <span class="p">&#34;</span><span class="s2">path/to/file</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span> <span class="o">~~</span> <span class="p">:</span><span class="s">e</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">file exists</span><span class="p">&#39;;</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$file</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">path/to/file</span><span class="p">&#34;;</span> <span class="k">if</span> <span class="nv">$file</span><span class="o">.</span><span class="nb">IO</span> <span class="o">~~</span> <span class="p">:</span><span class="s">e</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">file exists</span><span class="p">&#39;;</span>
<span class="p">}</span>

<span class="c1"># Instead of the colonpair syntax, you can use method calls too:</span>

<span class="k">if</span> <span class="p">&#39;</span><span class="s1">path/to/file</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">e</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">file exists</span><span class="p">&#39;;</span>
<span class="p">}</span>

<span class="c1"># If you already have an IO object in $file, either by creating one yourself, or</span>
<span class="c1"># by getting it from another subroutine, such as dir, you can write this:</span>

<span class="k">my</span> <span class="nv">$file</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">path/to/file</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="p">;</span> <span class="k">if</span> <span class="nv">$file</span> <span class="o">~~</span> <span class="p">:</span><span class="s">e</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">file exists</span><span class="p">&#39;;</span>
<span class="p">}</span>
</code></pre></div><h3 id="文件时间戳">文件时间戳</h3>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">&#34;</span><span class="s2">path/to/file</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">modified</span><span class="p">;</span>                <span class="c1"># e.g. Instant:1424089165</span>
<span class="nb">say</span> <span class="nb">DateTime</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="s2">path/to/file</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">modified</span><span class="p">);</span>  <span class="c1"># e.g. 2015-02-16T12:18:50Z</span>

<span class="k">my</span> <span class="nv">$modification_instant</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">path/to/file</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">modified</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$modification_time</span>    <span class="o">=</span> <span class="nb">DateTime</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="nv">$modification_instant</span><span class="p">);</span>
<span class="nb">say</span> <span class="nv">$modification_time</span><span class="p">;</span>  <span class="c1"># e.g. 2015-02-16T12:18:50Z</span>

<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">path/to/file</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">accessed</span><span class="p">;</span>                <span class="c1"># e.g. Instant:1424353577</span>
<span class="nb">say</span> <span class="nb">DateTime</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="s2">path/to/file</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">accessed</span><span class="p">);</span>  <span class="c1"># e.g. 2015-02-19T13:45:42Z</span>

<span class="k">my</span> <span class="nv">$access_instant</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">path/to/file</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">accessed</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$access_time</span>    <span class="o">=</span>  <span class="nb">DateTime</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="nv">$access_instant</span><span class="p">);</span>
<span class="nb">say</span> <span class="nv">$access_time</span><span class="p">;</span>  <span class="c1"># e.g. 2015-02-19T13:45:42Z</span>

<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">path/to/file</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">changed</span><span class="p">;</span>                <span class="c1"># e.g. Instant:1424089165</span>
<span class="nb">say</span> <span class="nb">DateTime</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="s2">path/to/file</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">changed</span><span class="p">);</span>  <span class="c1"># e.g. 2015-02-16T12:18:50Z</span>

<span class="k">my</span> <span class="nv">$change_instant</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">path/to/file</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">changed</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$change_time</span>    <span class="o">=</span>  <span class="nb">DateTime</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="nv">$chnge_instant</span><span class="p">);</span>
<span class="nb">say</span> <span class="nv">$change_time</span><span class="p">;</span>  <span class="c1"># e.g. 2015-02-16T12:18:50Z</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/io" term="io" label="io" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[用于外部数据访问的异步 I/O]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-22-asynchronous-io-for-external-data-access/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-joining/?utm_source=atom_feed" rel="related" type="text/html" title="Joining" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-windows/?utm_source=atom_feed" rel="related" type="text/html" title="窗口" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-java-lambda-expressions/?utm_source=atom_feed" rel="related" type="text/html" title="Java Lambda 表达式" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-operators/?utm_source=atom_feed" rel="related" type="text/html" title="Operators" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-scala-api-extensions/?utm_source=atom_feed" rel="related" type="text/html" title="Scala API 扩展" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-22-asynchronous-io-for-external-data-access/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-22T00:00:00+08:00</published>
            <updated>2020-08-22T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Asynchronous Io for External Data Access</blockquote><p>本页解释了如何使用 Flink 的 API 与外部数据存储进行异步 I/O。对于不熟悉异步或事件驱动编程的用户来说，一篇关于 Futures 和事件驱动编程的文章可能是有用的准备。</p>
<p>注：关于异步 I/O 实用程序的设计和实现的细节可以在提案和设计文件 <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65870673">FLIP-12：异步I/O设计和实现中找到</a>。</p>
<h2 id="异步io操作的必要性">异步I/O操作的必要性</h2>
<p>在与外部系统交互时（例如用存储在数据库中的数据来丰富流事件时），需要注意与外部系统的通信延迟不会主导流应用的总工作。</p>
<p>奈何访问外部数据库中的数据，例如在 <code>MapFunction</code> 中，通常意味着同步交互。一个请求被发送到数据库，<code>MapFunction</code> 等待直到收到响应。在许多情况下，这种等待占据了函数的绝大部分时间。</p>
<p>与数据库的异步交互意味着一个并行函数实例可以同时处理许多请求，并同时接收响应。这样一来，等待时间就可以与发送其他请求和接收响应叠加起来。最起码，等待时间可以摊在多个请求上。这在大多数情况下会导致更高的流吞吐量。</p>
<p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/async_io.svg" alt="img"></p>
<p>注意：通过仅仅将 <code>MapFunction</code> 扩展到很高的并行度来提高吞吐量，在某些情况下也是可行的，但通常要付出很高的资源代价：拥有更多的并行 <code>MapFunction</code> 实例意味着更多的任务、线程、Flink 内部网络连接、与数据库的网络连接、缓冲区以及一般的内部记账开销。</p>
<h2 id="前提条件">前提条件</h2>
<p>如上节所述，要实现对数据库（或键/值存储）的适当异步 I/O，需要向该数据库提供一个支持异步请求的客户端。许多流行的数据库都提供了这样的客户端。</p>
<p>在没有这样的客户端的情况下，可以尝试通过创建多个客户端，并用线程池处理同步调用，将同步客户端变成有限的并发客户端。然而，这种方法通常比一个合适的异步客户端效率低。</p>
<h2 id="异步-io-api">异步 I/O API</h2>
<p>Flink 的 Async I/O API 允许用户使用异步请求客户端与数据流。该 API 处理与数据流的集成，以及处理顺序、事件时间、容错等。</p>
<p>假设自己有一个目标数据库的异步客户端，需要三个部分来实现对数据库的异步 I/O 的流转换。</p>
<ul>
<li>一个 AsyncFunction 的实现，用来调度请求。</li>
<li>一个回调，获取操作结果并将其交给 <code>ResultFuture</code>。</li>
<li>在 DataStream 上应用异步 I/O 操作作为转换。</li>
</ul>
<p>下面的代码示例说明了基本模式。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="cm">/**
</span><span class="cm"> * An implementation of the &#39;AsyncFunction&#39; that sends requests and sets the callback.
</span><span class="cm"> */</span>
<span class="k">class</span> <span class="nc">AsyncDatabaseRequest</span> <span class="k">extends</span> <span class="nc">AsyncFunction</span><span class="o">[</span><span class="kt">String</span>, <span class="o">(</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">)]</span> <span class="o">{</span>

    <span class="cm">/** The database specific client that can issue concurrent requests with callbacks */</span>
    <span class="k">lazy</span> <span class="k">val</span> <span class="n">client</span><span class="k">:</span> <span class="kt">DatabaseClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DatabaseClient</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">post</span><span class="o">,</span> <span class="n">credentials</span><span class="o">)</span>

    <span class="cm">/** The context used for the future callbacks */</span>
    <span class="k">implicit</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">executor</span><span class="k">:</span> <span class="kt">ExecutionContext</span> <span class="o">=</span> <span class="nc">ExecutionContext</span><span class="o">.</span><span class="n">fromExecutor</span><span class="o">(</span><span class="nc">Executors</span><span class="o">.</span><span class="n">directExecutor</span><span class="o">())</span>


    <span class="k">override</span> <span class="k">def</span> <span class="n">asyncInvoke</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">resultFuture</span><span class="k">:</span> <span class="kt">ResultFuture</span><span class="o">[(</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">)])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>

        <span class="c1">// issue the asynchronous request, receive a future for the result
</span><span class="c1"></span>        <span class="k">val</span> <span class="n">resultFutureRequested</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">client</span><span class="o">.</span><span class="n">query</span><span class="o">(</span><span class="n">str</span><span class="o">)</span>

        <span class="c1">// set the callback to be executed once the request by the client is complete
</span><span class="c1"></span>        <span class="c1">// the callback simply forwards the result to the result future
</span><span class="c1"></span>        <span class="n">resultFutureRequested</span><span class="o">.</span><span class="n">onSuccess</span> <span class="o">{</span>
            <span class="k">case</span> <span class="n">result</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="n">resultFuture</span><span class="o">.</span><span class="n">complete</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">((</span><span class="n">str</span><span class="o">,</span> <span class="n">result</span><span class="o">)))</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// create the original stream
</span><span class="c1"></span><span class="k">val</span> <span class="n">stream</span><span class="k">:</span> <span class="kt">DataStream</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">...</span>

<span class="c1">// apply the async I/O transformation
</span><span class="c1"></span><span class="k">val</span> <span class="n">resultStream</span><span class="k">:</span> <span class="kt">DataStream</span><span class="o">[(</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">)]</span> <span class="k">=</span>
    <span class="nc">AsyncDataStream</span><span class="o">.</span><span class="n">unorderedWait</span><span class="o">(</span><span class="n">stream</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AsyncDatabaseRequest</span><span class="o">(),</span> <span class="mi">1000</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="nc">MILLISECONDS</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span>
</code></pre></div><p>重要提示：<code>ResultFuture.complete</code> 的第一次调用就完成了。所有后续的完成调用将被忽略。</p>
<p>以下两个参数控制异步操作。</p>
<ul>
<li>
<p>超时: 超时定义了异步请求在被认为失败之前可能需要的时间。这个参数可以防范死机/失败的请求。</p>
</li>
<li>
<p>Capacity（容量）：该参数定义了异步请求在被认为失败之前可能需要的时间。这个参数定义了多少个异步请求可以同时进行。尽管异步I/O方法通常会带来更好的吞吐量，但操作者仍然可以成为流应用的瓶颈。限制并发请求的数量可以确保操作者不会积累越来越多的待处理请求的积压，但一旦容量耗尽，就会触发背压。</p>
</li>
</ul>
<h3 id="超时处理">超时处理</h3>
<p>当一个异步 I/O 请求超时时，默认情况下会抛出一个异常并重新启动作业。如果你想处理超时，你可以重写 <code>AsyncFunction#timeout</code> 方法。</p>
<h3 id="结果的顺序">结果的顺序</h3>
<p><code>AsyncFunction</code> 发出的并发请求经常以某种未定义的顺序完成，基于哪个请求先完成。为了控制结果记录以何种顺序发出，Flink 提供了两种模式。</p>
<ul>
<li>
<p>Unordered: 异步请求一结束，结果记录就会被发出。在异步 I/O 操作符之后，流中记录的顺序与之前不同。这种模式以处理时间为基本时间特性时，延迟最低，开销最小。使用 <code>AsyncDataStream.unorderedWait(...)</code> 来实现这种模式。</p>
</li>
<li>
<p>Ordered: 在这种情况下，流的顺序被保留下来。结果记录的发出顺序与异步请求被触发的顺序相同（运算符输入记录的顺序）。为了达到这个目的，操作符会缓冲一个结果记录，直到它前面的所有记录都被发出来（或定时发出来）。这通常会在检查点中引入一些额外的延迟和一些开销，因为与无序模式相比，记录或结果在检查点状态下维持的时间更长。使用 <code>AsyncDataStream.orderedWait(...)</code> 来处理这种模式。</p>
</li>
</ul>
<h2 id="事件时间">事件时间</h2>
<p>当流媒体应用程序使用<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/event_time.html">事件时间</a>工作时，水印将由异步 I/O 操作符正确处理。具体来说，这意味着两种顺序模式的以下内容。</p>
<ul>
<li>无序的：水印不会超越记录，反之亦然，这意味着水印会建立一个顺序边界。只有在水印之间才会发出无序的记录。发生在某一水印之后的记录，只有在该水印被发射之后才会被发射。而水印则只有在该水印之前的所有输入的结果记录被发出之后才会被发出。</li>
</ul>
<p>这意味着在有水印的情况下，无序模式会引入一些与有序模式相同的延迟和管理开销。该开销的数量取决于水印的频率。</p>
<ul>
<li>有序的: 水印和记录的顺序被保留下来 就像记录之间的顺序被保留一样 与处理时间相比，开销没有明显变化。</li>
</ul>
<p>请记住，摄取时间是事件时间的一种特殊情况，其自动生成的水印是基于源处理时间的。</p>
<h2 id="容错保证">容错保证</h2>
<p>异步 I/O 操作符提供了完全精确的一次容错保证，它将飞行中的异步请求记录存储在检查点中，并在故障恢复时恢复/重新触发请求。它将飞行中的异步请求记录存储在检查点中，并在从故障中恢复时恢复/重新触发请求。</p>
<h2 id="实现技巧">实现技巧</h2>
<p>对于有 Executor（或 Scala 中的 ExecutionContext）用于回调的 Futures 实现，我们建议使用  DirectExecutor，因为回调通常只做最少的工作，而且DirectExecutor 避免了额外的线程间交接开销。回调通常只将结果交给 <code>ResultFuture</code>，后者将其添加到输出缓冲区。从那里开始，包括记录排放和与检查点记账的交互在内的繁重逻辑无论如何都发生在一个专用线程池中。</p>
<p>可以通过 <code>org.apache.flink.runtime.concurrent.Executors.directExecutor()</code> 或 <code>com.google.common.util.concurrent.MoreExecutors.directExecutor()</code> 获得 DirectExecutor。</p>
<h2 id="注意事项">注意事项</h2>
<p>AsyncFunction 不叫多线程。</p>
<p>我们在这里要明确指出的一个常见的困惑是，AsyncFunction 不是以多线程的方式调用的。AsyncFunction 只存在一个实例，并且对于流的各个分区中的每一条记录，它都会被依次调用。除非 <code>asyncInvoke(...)</code> 方法快速返回并依赖于回调（由客户端），否则不会导致正确的异步 I/O。</p>
<p>例如，以下模式会导致阻塞 <code>asyncInvoke(...)</code> 函数，从而使异步行为无效。</p>
<ul>
<li>
<p>使用一个数据库客户端，其查找/查询方法的调用会被阻塞，直到结果被接收回来为止</p>
</li>
<li>
<p>在 <code>asyncInvoke(...)</code> 方法中阻止/等待异步客户端返回的未来型对象。</p>
</li>
</ul>
<p>出于一致性的考虑，AsyncFunction 的操作符（AsyncWaitOperator）目前必须位于操作符链的头部。</p>
<p>由于在 FLINK-13063 问题中给出的原因，我们目前必须打破 AsyncWaitOperator 的操作符链，以防止潜在的一致性问题。这是对以前支持链的行为的改变。需要旧行为并接受潜在的违反一致性保证的用户可以手动实例化并将 AsyncWaitOperator 添加到作业图中，并通过 AsyncWaitOperator#setChainingStrategy(ChainingStrategy.ALWAYS) 将链式策略设置回链式。</p>
<p>原文链接: <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/asyncio.html">https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/asyncio.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/flink" term="flink" label="Flink" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink" term="flink" label="Flink" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" term="flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" label="Flink 官方文档" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/datastream-api" term="datastream-api" label="DataStream API" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/operators" term="operators" label="Operators" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/io" term="io" label="IO" />
                            
                        
                    
                
            
        </entry>
    
</feed>
