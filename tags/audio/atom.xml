<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[audio on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/audio/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/audio/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/audio/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/audio/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-11T22:08:29+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/audio/</id>
    
        
        <entry>
            <title type="html"><![CDATA[以指定音量随机播放音频文件]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-06-14-play-audio-at-given-volume/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2015-04-27-from-regex-to-grammar-part-one/?utm_source=atom_feed" rel="related" type="text/html" title="从正则表达式到 Grammar(第一部分)" />
                <link href="https://ohmyweekly.github.io/notes/2015-10-29-from-regex-to-grammar/?utm_source=atom_feed" rel="related" type="text/html" title="从正则表达式到 Grammar(第二部分)" />
            
                <id>https://ohmyweekly.github.io/notes/2015-06-14-play-audio-at-given-volume/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Play Audio at Given Volume</blockquote><p>以指定音量随机播放音频文件：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#!/usr/bin/env raku</span>

<span class="k">my</span> <span class="nv">%v</span><span class="p">;</span>                                 <span class="c1"># hash to hold data</span>
<span class="k">my</span> <span class="k">token</span> <span class="nf">filename</span>    <span class="p">{</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> \</span><span class="ni">.</span><span class="se">\S\S\S</span><span class="sr"> </span><span class="p">};</span> <span class="c1"># filenames end in .???</span>
<span class="k">my</span> <span class="k">token</span> <span class="nf">volume</span>      <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="o">+</span><span class="sr"> </span><span class="p">};</span>          <span class="c1"># any digits for volume</span>
<span class="k">my</span> <span class="k">regex</span> <span class="nf">extra</span>       <span class="p">{</span><span class="sr"> </span><span class="ni">.</span><span class="o">+</span><span class="sr"> </span><span class="se">\S</span><span class="sr"> </span><span class="p">};</span>        <span class="c1"># anything following that</span>
<span class="k">my</span> <span class="nv">$mixer</span>          <span class="o">=</span> <span class="p">&#39;</span><span class="s1">mixer</span><span class="p">&#39;;</span>
<span class="k">my</span> <span class="nv">$player</span>         <span class="o">=</span> <span class="p">&#39;</span><span class="s1">mplayer -vf dsize=600:-2 -geometry +200-10 </span><span class="p">&#39;;</span>
<span class="k">my</span> <span class="nv">$lockfile</span>       <span class="o">=</span> <span class="p">&#39;</span><span class="s1">/tmp/myplayer</span><span class="p">&#39;;</span>

<span class="nv">$lockfile</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">spurt</span><span class="p">(</span> <span class="vg">$*PID</span> <span class="p">);</span>          <span class="c1"># store the process ID so other process can kill this one</span>
<span class="k">END</span> <span class="p">{</span> <span class="nv">$lockfile</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">unlink</span><span class="p">;</span> <span class="p">}</span>          <span class="c1"># remove the lockfile at end</span>

<span class="k">for</span> <span class="nv">$=finish</span><span class="o">.</span><span class="nb">lines</span> <span class="p">{</span>                  <span class="c1"># loop through the lines below &#39;=begin finish&#39;</span>
    <span class="nb">last</span> <span class="k">if</span> <span class="o">/</span><span class="n">STOP</span><span class="o">/</span><span class="p">;</span>                   <span class="c1"># stop at a STOP line</span>
    <span class="k">if</span> <span class="k">m</span><span class="p">/</span><span class="sr">     </span><span class="p">(&lt;</span><span class="nf">filename</span><span class="p">&gt;)</span><span class="sr">
</span><span class="sr">          </span><span class="se">\s</span><span class="o">+</span><span class="sr"> </span><span class="p">(&lt;</span><span class="nf">volume</span><span class="p">&gt;)</span><span class="sr">
</span><span class="sr">          </span><span class="se">\s</span><span class="o">*</span><span class="sr"> </span><span class="p">(&lt;</span><span class="nf">extra</span><span class="p">&gt;</span><span class="o">?</span><span class="p">)</span><span class="sr"> </span><span class="p">/</span> <span class="p">{</span>          <span class="c1"># use the regexes/tokens</span>
        <span class="k">my</span> <span class="p">(</span> <span class="nv">$m</span><span class="o">,</span> <span class="nv">$v</span><span class="o">,</span> <span class="nv">$e</span> <span class="p">)</span> <span class="o">=</span> <span class="nv">$/</span><span class="o">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">2</span><span class="o">]</span><span class="p">;</span> <span class="c1"># get captured values from $/</span>
        <span class="k">if</span> <span class="nv">$m</span> <span class="ow">and</span> <span class="nv">$v</span> <span class="p">{</span>                <span class="c1"># if there&#39;s a filename and volume</span>
            <span class="nv">%v</span><span class="p">{</span><span class="nv">$m</span><span class="p">}&lt;</span><span class="s">v</span><span class="p">&gt;</span> <span class="o">~=</span> <span class="nv">$v</span><span class="p">;</span>          <span class="c1">#   store it in the hash</span>
            <span class="nv">%v</span><span class="p">{</span><span class="nv">$m</span><span class="p">}&lt;</span><span class="s">e</span><span class="p">&gt;</span> <span class="o">~=</span> <span class="nv">$e</span> <span class="o">//</span> <span class="p">&#39;&#39;;</span>    <span class="c1">#   with any extra arguments</span>
        <span class="p">}}}</span> <span class="c1"># lisp-y to save lines</span>

<span class="k">for</span> <span class="nv">%v</span><span class="o">.</span><span class="nb">keys</span><span class="o">.</span><span class="nb">pick</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$m</span> <span class="p">{</span>           <span class="c1"># loop randomly through keys</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Playing </span><span class="nv">$m</span><span class="p">&#34;;</span>
    <span class="nb">print</span> <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> </span><span class="nv">$mixer</span><span class="s2">  </span><span class="nv">%v</span><span class="p">{</span><span class="nv">$m</span><span class="p">}&lt;</span><span class="s">v</span><span class="p">&gt;</span><span class="s2">      </span><span class="p">};</span>  <span class="c1"># set the volume</span>
    <span class="nb">print</span> <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> </span><span class="nv">$player</span><span class="s2"> </span><span class="nv">%v</span><span class="p">{</span><span class="nv">$m</span><span class="p">}&lt;</span><span class="s">e</span><span class="p">&gt;</span><span class="s2"> &#34;</span><span class="nv">$m</span><span class="s2">&#34; </span><span class="p">};</span>  <span class="c1"># play the file</span>
<span class="p">}</span>

<span class="k">=begin</span><span class="sd"> </span><span class="k">finish</span><span class="sd">
</span><span class="sd">300.avi 77
</span><span class="sd">Crystal Skull Rifftrax.avi 77 -aid 2
</span><span class="sd">Star Trek 5.avi 77
</span><span class="sd">Star Trek 7.avi
</span><span class="sd">aeon-flux.avi 93
</span><span class="sd"></span><span class="k">=end finish</span></code></pre></div><p>改进版：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">my</span> <span class="nv">@mixer</span>    <span class="o">=</span> <span class="p">&#39;</span><span class="s1">mixer</span><span class="p">&#39;;</span>
<span class="k">my</span> <span class="nv">@player</span>   <span class="o">=</span> <span class="p">&lt;</span><span class="s"> m6player -vf dsize=600:-2 -geometry +200-10 </span><span class="p">&gt;;</span>
<span class="k">my</span> <span class="nv">$lockfile</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">/tmp/myplayer</span><span class="p">&#39;;</span>

<span class="nv">$lockfile</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">spurt</span><span class="p">(</span> <span class="vg">$*PID</span> <span class="p">);</span>

<span class="k">END</span> <span class="p">{</span> <span class="nv">$lockfile</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">unlink</span><span class="p">;</span> <span class="p">}</span>

<span class="k">my</span> <span class="k">token</span> <span class="nf">filename</span>    <span class="p">{</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> \</span><span class="ni">.</span><span class="se">\S\S\S</span><span class="sr"> </span><span class="p">};</span>
<span class="k">my</span> <span class="k">token</span> <span class="nf">volume</span>      <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="o">+</span><span class="sr"> </span><span class="p">};</span>
<span class="k">my</span> <span class="k">regex</span> <span class="nf">extra</span>       <span class="p">{</span><span class="sr"> </span><span class="ni">.</span><span class="o">*</span><span class="sr"> </span><span class="p">};</span>

<span class="k">my</span> <span class="nv">%song-data</span><span class="p">;</span>

<span class="k">for</span> <span class="nv">$=finish</span><span class="o">.</span><span class="nb">lines</span> <span class="p">{</span>
    <span class="nb">last</span> <span class="k">if</span> <span class="o">/^</span> \<span class="k">s</span><span class="p">*</span><span class="sr"> STOP </span><span class="se">\s</span><span class="p">*</span><span class="s2"> $/;
</span><span class="s2">    next unless  m/ \s</span><span class="p">*</span> <span class="p">&lt;</span><span class="s">filename</span><span class="p">&gt;</span> \<span class="k">s</span><span class="err">+</span> <span class="p">&lt;</span><span class="sr">volume</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="s">extra</span><span class="p">&gt;</span> <span class="o">/</span><span class="p">;</span>
    <span class="c1"># $&lt;extra&gt; is short for $/{&#39;extra&#39;}</span>
    <span class="nv">%song-data</span><span class="p">{</span><span class="o">~</span><span class="nv">$&lt;filename&gt;</span><span class="p">}&lt;</span><span class="s">v e</span><span class="p">&gt;</span> <span class="o">=</span> <span class="o">+</span><span class="nv">$&lt;volume&gt;</span><span class="o">,</span> <span class="o">[</span><span class="nv">$&lt;extra&gt;</span><span class="o">.</span><span class="nb">words</span><span class="o">]</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># uses sub-signature unpacking</span>
<span class="k">for</span> <span class="nv">%song-data</span><span class="o">.</span><span class="nb">pick</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span> <span class="p">:</span><span class="s">key</span><span class="p">(</span><span class="nv">$m</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">value</span><span class="p">(</span><span class="nv">$</span><span class="p">)</span> <span class="p">(</span><span class="o">:</span><span class="nv">$v</span><span class="o">,:</span><span class="nv">@e</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Playing </span><span class="nv">$m</span><span class="p">&#34;;</span>
    <span class="nb">print</span> <span class="nb">run</span><span class="p">(</span> <span class="nv">@mixer</span><span class="o">,</span>  <span class="nv">$v</span><span class="o">,</span>     <span class="p">:</span><span class="s">out</span> <span class="p">)</span><span class="o">.</span><span class="nf">out</span><span class="o">.</span><span class="nb">slurp-rest</span><span class="o">.</span><span class="nb">indent</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
    <span class="nb">print</span> <span class="nb">run</span><span class="p">(</span> <span class="nv">@player</span><span class="o">,</span> <span class="nv">@e</span><span class="o">,</span> <span class="nv">$m</span><span class="o">,</span> <span class="p">:</span><span class="s">out</span> <span class="p">)</span><span class="o">.</span><span class="nf">out</span><span class="o">.</span><span class="nb">slurp-rest</span><span class="o">.</span><span class="nb">indent</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">=begin</span><span class="sd"> </span><span class="k">finish</span><span class="sd">
</span><span class="sd">300.avi 77
</span><span class="sd">Crystal Skull Rifftrax.avi 77 -aid 2
</span><span class="sd">Star Trek 5.avi 77
</span><span class="sd">Star Trek 7.avi
</span><span class="sd">aeon-flux.avi 93
</span><span class="sd"></span><span class="k">=end finish</span></code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/regex" term="regex" label="regex" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/audio" term="audio" label="audio" />
                            
                        
                    
                
            
        </entry>
    
</feed>
