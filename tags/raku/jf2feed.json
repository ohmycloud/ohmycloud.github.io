{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003cp\u003e函数式编程是一种编程风格，现代语言或多或少都支持这种风格。在这篇文章中，我想解释一下函数式编程如何为你提供强大的抽象，使你的代码更加简洁。我将用 Raku 和 Python 中的例子来说明这一点，我们将看到这两种语言都是函数式编程的优秀语言。\u003c/p\u003e\n\u003ch2 id=\"raku-简介\"\u003eRaku: 简介\u003c/h2\u003e\n\u003cp\u003e本文的代码示例是用 Python 和 Raku 编写的。我想大多数人都熟悉 Python，但 Raku 不太为人所知，所以我先解释一下基础知识。本文中的代码不是很习惯，所以如果你懂得其他编程语言，应该很容易理解。\u003c/p\u003e\n\u003cp\u003eRaku 与 Perl 最为相似。两种语言在语法上都与 C/C++、Java 和 JavaScript 相似：基于块，语句用分号隔开，块用大括号分界，参数列表放在括号中，用逗号隔开。将 Perl 和 Raku 与其他语言区分开来的主要特征是使用魔符（\u0026ldquo;有趣的字符\u0026rdquo;）来识别变量的类型：\u003ccode\u003e$\u003c/code\u003e 代表标量，\u003ccode\u003e@\u003c/code\u003e 代表数组，\u003ccode\u003e%\u003c/code\u003e 代表哈希（映射），\u003ccode\u003e\u0026amp;\u003c/code\u003e 代表子程序。变量也有关键字来标识它们的作用域，我只用 \u003ccode\u003emy\u003c/code\u003e 来标识变量的词法作用域。子程序是用 \u003ccode\u003esub\u003c/code\u003e 关键字来声明的，子程序可以是命名的，也可以是匿名的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003esub square ($x) {\n    $x*$x;\n}\n# anonymous subroutine \nmy $anon_square = sub ($x) {\n    $x*$x;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在 Python 中，这将是：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003esquare\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# anonymous subroutine \u003c/span\u003e\n\u003cspan class=\"n\"\u003eanon_square\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRaku 支持无符号变量，并使用 \u003ccode\u003e\\\u003c/code\u003e 语法来声明它们。更多关于普通变量和无符号变量之间的区别，请参见 \u003ca href=\"https://docs.raku.org/language/variables#Sigilless_variables\"\u003eRaku 文档\u003c/a\u003e。例如(\u003ccode\u003esay\u003c/code\u003e 打印它的参数，后面加一个换行)。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy \\x = 42; # sigilless\nmy $y = 43; \nsay x + $y; \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在本文的代码中，我将尽可能地使用无符号变量。\u003c/p\u003e\n\u003cp\u003eRaku 有几种类型的序列数据结构。在下面的代码中，我将使用\u003ca href=\"https://docs.raku.org/language/list\"\u003e列表和数组\u003c/a\u003e以及\u003ca href=\"https://docs.raku.org/type/Range\"\u003e范围\u003c/a\u003e。在 Raku 中，列表和数组的主要区别在于，列表是不可变的，这意味着一旦创建，就不能修改。所以它是一个只读的数据结构。要\u0026quot;更新\u0026quot;一个不可变的数据结构，你需要创建一个更新的副本。另一方面，数组是可变的，所以我们可以更新它们的元素，扩展它们，缩小它们等等。所有的更新都发生在原始数据的位置上。\u003c/p\u003e\n\u003cp\u003eRaku 的数组类似于 Python 的 list，Raku 的 list 类似于 Python 的 tuple，也是不可变的。除了语法之外，Raku 中的范围与 Python 中的范围相似，都是不可变的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy @array1 = 1,2,3; #=\u0026gt; an array because of the '@' sigil\nmy \\array2 = [1,2,3]; #=\u0026gt; an array, because of the '[...]'\n\nmy \\range1 = 1 .. 10; #=\u0026gt; a range 1 .. 10\nmy @array3 = 1 .. 10; #=\u0026gt; an array from a range, because of the '@' sigil\n\nmy \\list1 = 1,2,3; #=\u0026gt; a list\nmy $list2 = (1,2,3); #=\u0026gt; also a list\nmy \\list3 = |(1 .. 10);  #=\u0026gt; an array from a range because of the '|' flattening operation\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e相应的 Python 代码为:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003elist1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; a list from a tuple\u003c/span\u003e\n\u003cspan class=\"n\"\u003elist2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; a list, because of the \u0026#39;[...]\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003erange1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; a range 1 .. 10\u003c/span\u003e\n\u003cspan class=\"n\"\u003elist3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; a list from a range\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003etuple1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; a tuple\u003c/span\u003e\n\u003cspan class=\"n\"\u003etuple2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; a tuple from a list\u003c/span\u003e\n\u003cspan class=\"n\"\u003etuple3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; creates a tuple from a range\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e其他具体的语法或功能将针对具体的例子进行解释。\u003c/p\u003e\n\u003ch2 id=\"其他任何名称的函数---作为值的函数\"\u003e\u003cem\u003e其他任何名称的函数\u003c/em\u003e - 作为值的函数\u003c/h2\u003e\n\u003cp\u003e函数是函数式编程的精髓。正如我在\u003ca href=\"https://wimvanderbauwhede.github.io/articles/everything-is-a-function\"\u003e\u0026ldquo;万物皆函数\u0026rdquo;\u003c/a\u003e一文中所解释的那样，在适当的函数式语言中，所有的结构都是由函数构建的。\u003c/p\u003e\n\u003cp\u003e所有现代编程语言都有函数、程序、子程序或方法的概念。它们是代码重用的重要机制。通常，我们认为函数是对一些输入值进行操作以产生一个或多个输出值的东西。输入值可以是全局声明的，也可以是一个类的属性，或者作为参数传递给函数。同样，输出值可以直接返回，到全局变量，作为类的属性或通过修改输入值。\u003c/p\u003e\n\u003cp\u003e要想从函数式编程中获益最多，最好是函数是纯粹的，这意味着对函数的调用总是对相同的输入产生相同的输出。在实践中，如果函数只接受输入作为参数，并直接返回输出，这一点比较容易实现，但这并不是必不可少的。\u003c/p\u003e\n\u003cp\u003e函数式编程的关键特征是，函数的输入值和输出值本身可以是函数。所以函数必须是你语言中的值。有时这被称为 \u0026ldquo;函数必须是一等公民\u0026rdquo;，一个接收和/或返回函数的函数有时被称为\u0026quot;高阶函数\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e如果函数是值，那么我们就可以将它们赋值给变量。特别是我们会将它们赋值给其他函数的参数。但我们也可以将它们赋值给普通的变量。\u003c/p\u003e\n\u003cp\u003e让我们考虑以下函数，\u003ccode\u003echoose\u003c/code\u003e，它需要三个参数 \u003ccode\u003et\u003c/code\u003e，\u003ccode\u003ef\u003c/code\u003e 和 \u003ccode\u003ec\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub choose (\\t, \\f, \\d) {\n    if (d) {t} else {f}\n}\n# Python\ndef choose (t, f, d):\n  if d:\n    return t \n  else:\n    return f\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e首先让我们用字符串作为前两个参数的值来调用 \u003ccode\u003echoose\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\tstr = \u0026quot;True!\u0026quot;;\nmy \\fstr = \u0026quot;False!\u0026quot;;\n\nmy \\res_str = choose(tstr, fstr, True);\n\nsay res_str; #=\u0026gt; says \u0026quot;True!\u0026quot;\n# Python\ntstr = \u0026quot;True!\u0026quot;\nfstr = \u0026quot;False!\u0026quot;\n\nres_str = choose(tstr,fstr,True)\n\nprint(res_str) #=\u0026gt; says \u0026quot;True!\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e现在让我们尝试用函数作为参数:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub tt (\\s) { say \u0026quot;True {s}!\u0026quot; }\nsub ff (\\s) { say \u0026quot;False {s}!\u0026quot; }\n\nmy \u0026amp;res_f = choose(\u0026amp;tt, \u0026amp;ff, False);\n\nsay \u0026amp;res_f; #=\u0026gt; says \u0026amp;ff\nres_f(\u0026quot;rumour\u0026quot;); #=\u0026gt; says \u0026quot;False rumour!\u0026quot;\n# Python\ndef tt(s):\n  print( \u0026quot;True \u0026quot;+s+\u0026quot;!\u0026quot;)\ndef ff(s):  \n  print( \u0026quot;False\u0026quot;+s+\u0026quot;!\u0026quot;)\n\nres_f = choose(tt,ff,True)\n\nprint(res_f) #=\u0026gt; says \u0026lt;function tt at 0x7f829c3aa310\u0026gt;\nres_f(\u0026quot;rumour\u0026quot;) #=\u0026gt; says \u0026quot;False rumour!\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e因此，我们的函数 \u003ccode\u003echoose\u003c/code\u003e  接收两个函数作为它的前两个参数，并返回一个函数。在 Raku 中，我们需要在函数名上加上 \u003ccode\u003e\u0026amp;\u003c/code\u003e 符号，因为否则它们会被求值：像 \u003ccode\u003ett\u003c/code\u003e 这样的裸函数名就等于调用没有参数的函数 \u003ccode\u003ett()\u003c/code\u003e。通过将这个函数赋值给一个变量(\u003ccode\u003eres_f\u003c/code\u003e)，我们现在可以将 \u003ccode\u003eres_f\u003c/code\u003e 作为一个函数来调用，它最终会根据选择来调用 \u003ccode\u003ett\u003c/code\u003e 或 \u003ccode\u003eff\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"函数不需要名字\"\u003e函数不需要名字\u003c/h2\u003e\n\u003cp\u003e现在，如果我们可以将函数赋值给变量，它们本身其实并不需要一个名字。所以我们的函数可以是匿名的。大多数语言都支持匿名函数，在函数式语言中，它们通常被称为 \u0026ldquo;lambda 函数\u0026rdquo;。在 Raku 中，我们有两种方法来创建匿名函数。\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003esub (...)\u003c/code\u003e 语法:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy \\tt = sub (\\s) { say \u0026quot;True {s}!\u0026quot; };\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e或者使用\u003ca href=\"https://docs.raku.org/language/functions#index-entry-pointy_blocks\"\u003e\u0026lsquo;尖号块\u0026rsquo;\u003c/a\u003e语法，这样更紧凑一些:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy \\ff = -\u0026gt; \\s { say \u0026quot;False {s}!\u0026quot; };\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePython 使用 \u003ccode\u003elambda\u003c/code\u003e 关键字:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003ett\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eTrue \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e!\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eff\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eFalse \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e!\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所以现在我们可以说:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy \u0026amp;res_f = choose(tt, ff, True);\n\nsay \u0026amp;res_f; #=\u0026gt; says sub { }\nres_f(\u0026quot;story\u0026quot;); #=\u0026gt; says \u0026quot;True story!\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当我们打印出函数所绑定的变量时，Raku 返回 \u003ccode\u003esub { }\u003c/code\u003e 来表示该变量包含一个函数。\u003c/p\u003e\n\u003cp\u003e在 Python 中:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003eres_f\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echoose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ett\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003eres_f\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; says \u0026lt;function \u0026lt;lambda\u0026gt; at 0x7f829b298b80\u0026gt;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eres_f\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estory\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; says \u0026#34;True story!\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"例子-map-grep-和-reduce\"\u003e例子: \u003ccode\u003emap\u003c/code\u003e、 \u003ccode\u003egrep\u003c/code\u003e 和 \u003ccode\u003ereduce\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003e函数的功能有很多用途，我只想重点介绍三个在 Raku 中现成的例子：\u003ccode\u003emap\u003c/code\u003e、\u003ccode\u003ereduce\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e。Python 有 \u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003efilter\u003c/code\u003e，并通过 \u003ccode\u003efunctools\u003c/code\u003e 模块提供 \u003ccode\u003ereduce\u003c/code\u003e。这些函数的共同点是，它们提供了一种对列表进行 \u003ccode\u003efor\u003c/code\u003e 循环的替代方法。\u003c/p\u003e\n\u003ch3 id=\"map--对列表中的所有元素进行函数应用\"\u003e\u003ccode\u003emap\u003c/code\u003e : 对列表中的所有元素进行函数应用\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003emap\u003c/code\u003e 有两个参数：一个函数和一个列表。它将函数按顺序应用于列表中的所有值，并返回结果，例如将列表中的所有值平方。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy \\res = map -\u0026gt; \\x {x*x} , 1 .. 10;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在 Python 中，我们需要显式地创建元组，但除了语法上的差异，结构是完全一样的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这是对传统 \u003ccode\u003efor\u003c/code\u003e 循环的功能替代。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\res = [];\nfor 1 .. 10 -\u0026gt; \\x {\n    res.push(x*x);\n}\n# Python\nres = []\nfor x in range(1,11):\n    res.append(x*x)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e请注意，在 Raku 和 Python 中，我们需要为 \u003ccode\u003efor\u003c/code\u003e 循环版本使用一个可变的数据结构，而 \u003ccode\u003emap\u003c/code\u003e 版本则使用不可变的数据结构。\u003c/p\u003e\n\u003ch3 id=\"grep--过滤列表\"\u003e\u003ccode\u003egrep\u003c/code\u003e : 过滤列表\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003egrep\u003c/code\u003e (在 Python 中称为 \u003ccode\u003efilter\u003c/code\u003e)也接受参数，一个函数和一个列表，但它只返回函数返回真的列表中的值。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\res = grep -\u0026gt; \\x { x % 5 == 0 }, 1 .. 30;\n# Python\nres = tuple(filter( lambda x : x % 5 == 0 ,range(1,31)))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当然我们也可以用 \u003ccode\u003efor\u003c/code\u003e 循环和 \u003ccode\u003eif\u003c/code\u003e 语句来写，但这又需要一个可变的数据结构。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\res = [];\nfor 1 .. 30 -\u0026gt; \\x {\n    if (x % 5 == 0) {\n    res.push(x);\n    }\n}\n# Python\nres = []\nfor x in range(1,31): \n  if (x % 5 == 0):\n    res.append(x)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e 的好处是，你可以很容易地把它们链在一起。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\ngrep -\u0026gt; \\x { x % 5 == 0 }, map -\u0026gt; \\x {x*x}, 1..30\n# Python\nres = tuple(filter( lambda x : x % 5 == 0 ,map( lambda x : x*x ,range(1,31))))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这是因为 \u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e 接受一个列表并返回一个列表，所以只要你需要对一个列表进行操作，就可以通过链式调用来实现。\u003c/p\u003e\n\u003ch3 id=\"reduce--化整为零\"\u003e\u003ccode\u003ereduce\u003c/code\u003e : 化整为零\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ereduce\u003c/code\u003e 也接受一个函数和一个 list，但它使用函数将 list 的所有元素合并成一个结果。所以函数必须接受两个参数。第二个参数是从列表中取出的元素，第一个参数作为状态变量来组合所有元素。例如，计算一个数字列表的和:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\sum = reduce sub (\\acc,\\elt) {acc+elt}, 1 .. 10;\n\nsay sum; #=\u0026gt; says 55\n# Python\nfrom functools import reduce\n\nsum = reduce(lambda acc,elt: acc+elt, range(1,11))\n\nprint( sum); #=\u0026gt; says 55\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里发生的情况是，首先将 \u003ccode\u003eacc\u003c/code\u003e 设置为列表中的第一个元素(1)，然后加上第二个元素，所以 \u003ccode\u003eacc\u003c/code\u003e 变成 1+2=3；然后加上第三个元素(3)，以此类推。其效果是将列表中的所有数字连续相加。\u003c/p\u003e\n\u003cp\u003e为了更清楚地说明这一点，我们来写一个我们自己的 \u003ccode\u003ereduce\u003c/code\u003e 版本。\u003c/p\u003e\n\u003ch3 id=\"编写你自己的\"\u003e编写你自己的\u003c/h3\u003e\n\u003cp\u003e在许多函数式语言中，从左到右（从最低索引开始）和从右到左（从最高索引开始）的还原是有区别的。这一点很重要，因为根据做还原的函数，如果从左边或右边消耗列表，结果可能会不同。例如，假设我们的化简函数是\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\n-\u0026gt; \\x,\\y {x+y}\n# Python\nlambda x,y: x+y\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e那么我们从哪个方向遍历列表并不重要。但考虑以下函数:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\n-\u0026gt; \\x,\\y { x \u0026lt; y ?? x+y !! x }\n\n# Python\nlambda x,y: x+y if x\u0026lt;y else x\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e( \u003ccode\u003e... ?? ... !! ...\u003c/code\u003e 是条件操作符的 Raku 句法，在大多数其他语言中是 \u003ccode\u003e... ? ... : ...\u003c/code\u003e 在 Python 中是 \u003ccode\u003e... if ... else ...\u003c/code\u003e)。\u003c/p\u003e\n\u003cp\u003e在这种情况下，如果列表从左或从右还原，结果会有所不同。在 Raku 和 Python 中，\u003ccode\u003ereduce\u003c/code\u003e 是一种从左到右的还原。\u003c/p\u003e\n\u003cp\u003e另外，\u003ccode\u003ereduce\u003c/code\u003e 函数可以不使用列表的第一个元素，而是取一个额外的参数，通常称为累加器。在函数式语言中，\u003ccode\u003ereduce\u003c/code\u003e 通常被称为 \u003ccode\u003efold\u003c/code\u003e，所以我们可以有一个左折和一个右折。让我们来看看如何实现这些。\u003c/p\u003e\n\u003ch4 id=\"left-fold\"\u003eLeft fold\u003c/h4\u003e\n\u003cp\u003e实现左折的直接方法（所以和 \u003ccode\u003ereduce\u003c/code\u003e 一样）是在函数内部使用 \u003ccode\u003efor\u003c/code\u003e 循环。这意味着我们必须在循环的每次迭代上更新累加器的值。在 Raku 中，无符号变量是不可变的（我在这里简化了，完整的故事请看 \u003ca href=\"https://docs.raku.org/language/containers#Binding\"\u003eRaku 文档\u003c/a\u003e），所以我们需要使用一个有符号的变量，\u003ccode\u003e$acc\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub foldll (\u0026amp;f, \\iacc, \\lst) { \n  my $acc = iacc; \n  for lst -\u0026gt; \\elt {\n    $acc = f($acc,elt);\n  }\n  $acc;\n}\n\n# Python\ndef foldll (f, iacc, lst):\n  acc = iacc\n  for elt in lst:\n    acc = f(acc,elt)  \n  return acc\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果我们只想使用不可变的变量，我们可以使用递归。Raku 使这一点变得简单，因为它允许一个子程序有多个签名(\u003ccode\u003emulti sub\u003c/code\u003e)，并且它会调用与签名相匹配的变量。\u003c/p\u003e\n\u003cp\u003e我们的 \u003ccode\u003efoldl\u003c/code\u003e 将消耗输入列表 \u003ccode\u003elst\u003c/code\u003e，并使用 \u003ccode\u003ef\u003c/code\u003e 将其元素组合到累加器 \u003ccode\u003eacc\u003c/code\u003e 中，当列表被消耗后，计算结束，我们可以返回 \u003ccode\u003eacc\u003c/code\u003e 作为结果。所以我们的第一个变体说，如果输入列表是空的，我们应该返回 \u003ccode\u003eacc\u003c/code\u003e。 第二个变体从列表中取出一个元素 \u003ccode\u003eelt\u003c/code\u003e (关于 \u003ccode\u003e*\u003c/code\u003e 的细节请参见 \u003ca href=\"https://docs.raku.org/type/Range\"\u003eRaku 文档\u003c/a\u003e)，并将其与 \u003ccode\u003eacc\u003c/code\u003e 结合到 \u003ccode\u003ef(acc,elt)\u003c/code\u003e 中。然后用这个新的累加器和 list 的剩余部分 \u003ccode\u003erest\u003c/code\u003e 再次调用 \u003ccode\u003efoldl\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# When the list is empty, return the accumulator\nmulti sub foldl (\u0026amp;f, \\acc, ()) { acc }\nmulti sub foldl (\u0026amp;f, \\acc, \\lst) {\n  # Raku's way of splitting a list in the first elt and the rest\n  # The '*' is a shorthand for the end of the list\n   my (\\elt,\\rest) = lst[0, 1 .. * ]; \n   # The actual recursion\n   foldl( \u0026amp;f, f(acc, elt), rest);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePython 不允许这种模式匹配，所以我们需要使用条件来编写递归。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efoldl\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eacc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elst\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003elst\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eacc\u003c/span\u003e \n  \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# Python\u0026#39;s way of splitting a tuple in the first elt and the rest\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# rest will be a list, not a tuple, but we\u0026#39;ll let that pass\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elst\u003c/span\u003e \n   \u003cspan class=\"c1\"\u003e# The actual recursion\u003c/span\u003e\n   \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003efoldl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eacc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eelt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个实现中，所有的变量都不会被更新。所以所有的变量都可以是不可变的。\u003c/p\u003e\n\u003ch4 id=\"right-fold\"\u003eRight fold\u003c/h4\u003e\n\u003cp\u003e右折与左折颇为相似。对于基于循环的版本，我们所做的只是将列表反转(\u003ccode\u003ereverse\u003c/code\u003e)。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub foldrl (\u0026amp;f, \\acc, \\lst) { \n  my $res = acc;\n  for  lst.reverse -\u0026gt; \\elt {\n    $res = f($res,elt);\n  }\n  $res;\n}\n\n# Python\ndef foldlr (f, iacc, lst):\n  acc = iacc\n  for elt in lst.reverse():\n    acc = f(acc,elt)  \n  return acc\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在递归版本中，我们从列表中取最后一个元素而不是第一个元素。关于 \u003ccode\u003e..^ * - 1\u003c/code\u003e 语法的细节，请参见 \u003ca href=\"https://docs.raku.org/language/operators#infix_..%5E\"\u003eRaku 文档\u003c/a\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmulti sub foldr ( \u0026amp;f, \\acc, ()) { acc }\nmulti sub foldr (\u0026amp;f, \\acc, \\lst) {\n    my (\\rest,\\elt) = lst[0..^*-1, *  ];\n    foldr( \u0026amp;f, f(acc, elt), rest);\n}\n\n# Python\ndef foldr (f, acc, lst):\n  if lst == (): \n    return acc \n  else:\n   (*rest,elt) = lst \n   return foldr( f, f(acc, elt), rest)\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"map-and-grep-are-folds\"\u003e\u003ccode\u003emap\u003c/code\u003e and \u003ccode\u003egrep\u003c/code\u003e are folds\u003c/h4\u003e\n\u003cp\u003e现在，\u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e 呢？我们当然可以用 \u003ccode\u003efor\u003c/code\u003e 循环来实现，但我们也可以用我们的 \u003ccode\u003efoldl\u003c/code\u003e 来实现它们。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub map (\u0026amp;f,\\lst) {\n    foldl( sub (\\acc,\\elt) {\n            (|acc,f(elt))\n            }, (), lst);\n}\n\n# Python\ndef map (f,lst):\n    return foldl( \n      lambda acc,elt:(*acc, f(elt))\n      ,()\n      ,lst\n    )\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e因为函数 \u003ccode\u003ef\u003c/code\u003e 是可映射的，所以它只有一个参数。但是 \u003ccode\u003efoldl\u003c/code\u003e 需要一个有两个参数的函数，第一个参数为累加器。所以我们用两个参数的匿名函数调用 \u003ccode\u003efoldl\u003c/code\u003e。累积器本身是一个空列表。虽然我们前面说过，还原将原来列表的所有元素合并成一个返回值，当然这个返回值可以是任何数据类型，所以也是一个列表。所以我们对原始列表中的每一个元素都调用 \u003ccode\u003ef\u003c/code\u003e，并将其添加到累加器列表的末尾。(\u003ccode\u003e|\u003c/code\u003e 将列表扁平化，所以 \u003ccode\u003e(|acc,f(elt))\u003c/code\u003e 是一个由 \u003ccode\u003eacc\u003c/code\u003e 的元素和 \u003ccode\u003ef(elt)\u003c/code\u003e 的结果建立的新列表。)\u003c/p\u003e\n\u003cp\u003e类似地，我们也可以定义 \u003ccode\u003egrep\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub grep (\u0026amp;f,\\lst) {\n    foldl( sub (\\acc,\\elt) {\n      if (f(elt)) {\n          (|acc,elt)\n      } else {\n          acc\n      }\n    }, (), lst);\n}\n\n# Python\ndef filter (f,lst):\n    return foldl( \n      lambda acc,elt:\n        (*acc,elt) if f(elt) else acc\n      , (), lst)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e就像在 \u003ccode\u003emap\u003c/code\u003e 实现中一样，我们用一个匿名函数调用 \u003ccode\u003efoldl\u003c/code\u003e。在这个函数中，我们测试 \u003ccode\u003elst\u003c/code\u003e 中的每个 \u003ccode\u003eelt\u003c/code\u003e 是否为 \u003ccode\u003ef(elt)\u003c/code\u003e 为真。如果是真，我们就从 \u003ccode\u003eacc\u003c/code\u003e 和 \u003ccode\u003eelt\u003c/code\u003e 创建一个新的列表，否则我们就只返回 \u003ccode\u003eacc\u003c/code\u003e。 因为 \u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e 分别对列表中的每个元素进行操作，所以我们也可以使用右折来实现它们。\u003c/p\u003e\n\u003cp\u003e通过这些例子，我希望无论是对函数工作的概念，还是对函数可能的实现方式，都变得更加清晰。递归实现的优点是它允许我们使用不可变的数据结构。\u003c/p\u003e\n\u003ch3 id=\"为什么是不可变的数据结构\"\u003e为什么是不可变的数据结构？\u003c/h3\u003e\n\u003cp\u003e你可能会好奇为什么我关注这些不可变的数据结构。正如我们将看到的那样，函数式编程与不可改变的数据结构配合得非常好。而且它们有一个很大的优势：你永远不用担心是否不小心修改了你的数据，也不用担心是否应该做一个副本来确定。所以使用不可变数据结构可以使代码不易出错，更容易调试。它们还具有潜在的性能优势。而我们接下来会看到，在 Raku 中还有另一个优势。\u003c/p\u003e\n\u003ch2 id=\"返回函数的函数\"\u003e返回函数的函数\u003c/h2\u003e\n\u003cp\u003e函数也可以返回函数。如果我们想拥有一个可参数化的函数，这一点尤其有用。举个简单的例子，假设我们想要一系列以固定值递增一个数字的函数：\u003ccode\u003eadd1\u003c/code\u003e、\u003ccode\u003eadd2\u003c/code\u003e 等。当然，我们可以分别写出每一个函数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub add_1 (\\x) {x+1}\nsub add_2 (\\x) {x+2}\nsub add_3 (\\x) {x+3}\nsub add_4 (\\x) {x+4}\nsub add_5 (\\x) {x+5}\n\nsay add_1(4); #=\u0026gt; says 5\n# Python\ndef add_1 (x) : return x+1\ndef add_2 (x) : return x+2\ndef add_3 (x) : return x+3\ndef add_4 (x) : return x+4\ndef add_5 (x) : return x+5\n\nprint( add_1(4)) #=\u0026gt; says 5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e或者我们可以使用一个充满匿名函数的列表。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\add =\nsub (\\x) {x},\nsub (\\x) {x+1},\nsub (\\x) {x+2},\nsub (\\x) {x+3},\nsub (\\x) {x+4},\nsub (\\x) {x+5};\n\nsay add[0].(4); #=\u0026gt; says 5\n\n\n# Python\nadd = (\nlambda x : x+1,\nlambda x : x+2,\nlambda x : x+3,\nlambda x : x+4,\nlambda x : x+5\n)\n\nprint( add[0](4)) #=\u0026gt; says 5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们可以做得更好，用一个循环来填充一个匿名函数的数组。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\add = [];\nfor 0 .. 5 -\u0026gt; \\n {\n  add.push(sub (\\x) {x+n});\n}\n\nsay add[1].(4); #=\u0026gt; says 5\n\n# Python\nadd = []\nfor n in range(0,6):\n  add.append(lambda x: x+n)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们每次循环迭代都会创建一个新的匿名函数，并将其添加到数组中。但是，我们可以使用一个函数来创建这些匿名函数，然后我们可以使用 \u003ccode\u003emap\u003c/code\u003e 来代替循环，并使用一个不可改变的数据结构。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub gen_add(\\n) {  \n  sub (\\x) {x+n}\n}\n\nmy \\add = map \u0026amp;gen_add, 0..5;\n\nsay add[1].(4); #=\u0026gt; says 5\n\n# Python\ndef gen_add(n):  \n  return lambda x : x+n\n\nadd = tuple(map( gen_add, range(0,6)))\n\nprint( add[1](4)) #=\u0026gt; says 5\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"laziness\"\u003eLaziness\u003c/h3\u003e\n\u003cp\u003e在 Raku 中，使用(不可改变的)范围有一个额外的好处：我们可以将范围的末端设置为无穷大，在 Raku 中可以写成 \u003ccode\u003e∞\u003c/code\u003e(unicode 221E)、\u003ccode\u003e*\u003c/code\u003e 或 \u003ccode\u003eInf\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\add = map \u0026amp;gen_add, 0 .. ∞;  \n\nsay add[244].(7124); #=\u0026gt; says 7368\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这是一个所谓的\u0026quot;懒惰求值\u0026quot;的例子，简称 laziness：Raku 不会尝试（和失败）处理这个无限的列表。相反，它将在我们实际使用该列表中的一个元素时进行处理。表达式的评估会延迟到需要结果的时候，所以当我们调用 \u003ccode\u003eadd[244]\u003c/code\u003e 时，发生的情况是 \u003ccode\u003egen_add(244)\u003c/code\u003e 被调用来生成该函数。请注意，这在 \u003ccode\u003efor\u003c/code\u003e 循环中是行不通的，因为要使用 \u003ccode\u003efor\u003c/code\u003e 循环，我们需要一个可变的数据结构，而惰性列表必须是不可变的。所以这是一个很好的例子，说明函数式编程风格如何让你从懒惰中获益。\u003c/p\u003e\n\u003cp\u003e这也是为什么我们递归地实现了 \u003ccode\u003efoldl\u003c/code\u003e，然后用它来实现我们自己的 \u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e：基于递归的版本不需要更新任何变量，所以它们可以与不可变的惰性数据结构一起工作。\u003c/p\u003e\n\u003ch2 id=\"函数组合\"\u003e函数组合\u003c/h2\u003e\n\u003cp\u003e我们在上面看到，你可以把 \u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e 的调用链在一起。通常情况下，你只需要将 \u003ccode\u003emap\u003c/code\u003e 调用链在一起，例如\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmap -\u0026gt; \\x { x + 5 }, map -\u0026gt; \\x {x*x}, 1..30;\n\n# Python\nmap( lambda x : x + 5, map( lambda x : x*x, range(1,31)))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在这种情况下，我们可以做得更有效率一些：比起创建一个列表，然后在这个列表上调用 \u003ccode\u003emap\u003c/code\u003e，我们可以通过组合函数一次完成两个计算。Raku 为此提供了一个特殊的操作符。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emap -\u0026gt; \\x { x + 5 } ∘ -\u0026gt; \\x { x * x }, 1..30;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e操作符 \u003ccode\u003e∘\u003c/code\u003e（\u0026ldquo;环形操作符\u0026rdquo;，unicode 2218，但你也可以用普通的 \u003ccode\u003eo\u003c/code\u003e）是函数组成操作符，它的发音是 \u0026ldquo;after\u0026rdquo;，所以 \u003ccode\u003ef ∘ g\u003c/code\u003e 是 \u0026ldquo;f after g\u0026rdquo;。它的作用是将两个现有的函数组合起来，创建一个新的函数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy \u0026amp;h = \u0026amp;f ∘ \u0026amp;g;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e是下面的代码是一样的:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003esub h (\\x) {\n    f(g(x))\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e组成运算符的优点是，它可以适用于任何函数，包括匿名函数。但实际上，它只是另一个高阶函数。它只是下面函数的运算符形式。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub compose(\u0026amp;f,\u0026amp;g) {\n    sub (\\x) { f(g(x)) }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePython 没有函数组成操作符，但你也可以很容易地在 Python 中拥有 \u003ccode\u003ecompose\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"c1\"\u003e# Python\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ecompose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"结论\"\u003e结论\u003c/h2\u003e\n\u003cp\u003e在这篇文章中，我用 Raku 和 Python 的例子介绍了三种关键的函数式编程技术：对函数进行操作的函数、返回函数的函数和函数组成。我已经展示了你如何使用函数 \u003ccode\u003emap\u003c/code\u003e、\u003ccode\u003ereduce\u003c/code\u003e(折叠)和 \u003ccode\u003egrep\u003c/code\u003e(过滤)来操作不可变的列表。我已经解释了哟(如何用递归和不递归实现这样的函数，以及递归实现的优势是什么。下面是《 \u003ca href=\"https://github.com/wimvanderbauwhede/raku-examples/blob/master/decluttering-with-functional-programming.raku\"\u003eRaku\u003c/a\u003e 与 \u003ca href=\"https://github.com/wimvanderbauwhede/raku-examples/blob/master/decluttering-with-functional-programming.py\"\u003ePython\u003c/a\u003e》一文中的代码。\u003c/p\u003e\n\u003cp\u003e当然，函数式编程的内容还有很多，我也写了\u003ca href=\"https://wimvanderbauwhede.github.io/articles/\"\u003e几篇更高级的文章\u003c/a\u003e。本文介绍的概念应该为理解那些更高级的主题打下良好的基础。如果你想了解更多关于函数式编程的知识，你可以考虑我的\u003ca href=\"https://www.futurelearn.com/courses/functional-programming-haskell\"\u003e免费在线课程\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e原文: \u003ca href=\"https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/\"\u003ehttps://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/\u003c/a\u003e\u003c/p\u003e\n","text":"函数式编程是一种编程风格，现代语言或多或少都支持这种风格。在这篇文章中，我想解释一下函数式编程如何为你提供强大的抽象，使你的代码更加简洁。我将用 Raku 和 Python 中的例子来说明这一点，我们将看到这两种语言都是函数式编程的优秀语言。\nRaku: 简介 本文的代码示例是用 Python 和 Raku 编写的。我想大多数人都熟悉 Python，但 Raku 不太为人所知，所以我先解释一下基础知识。本文中的代码不是很习惯，所以如果你懂得其他编程语言，应该很容易理解。\nRaku 与 Perl 最为相似。两种语言在语法上都与 C/C++、Java 和 JavaScript 相似：基于块，语句用分号隔开，块用大括号分界，参数列表放在括号中，用逗号隔开。将 Perl 和 Raku 与其他语言区分开来的主要特征是使用魔符（\u0026ldquo;有趣的字符\u0026rdquo;）来识别变量的类型：$ 代表标量，@ 代表数组，% 代表哈希（映射），\u0026amp; 代表子程序。变量也有关键字来标识它们的作用域，我只用 my 来标识变量的词法作用域。子程序是用 sub 关键字来声明的，子程序可以是命名的，也可以是匿名的。\nsub square ($x) { $x*$x; } # anonymous subroutine my $anon_square = sub ($x) { $x*$x; } 在 Python 中，这将是：\ndef square(x): return x*x # anonymous subroutine  anon_square = lambda x: x*x Raku 支持无符号变量，并使用 \\ 语法来声明它们。更多关于普通变量和无符号变量之间的区别，请参见 Raku 文档。例如(say 打印它的参数，后面加一个换行)。\nmy \\x = 42; # sigilless my $y = 43; say x + $y; 在本文的代码中，我将尽可能地使用无符号变量。\nRaku 有几种类型的序列数据结构。在下面的代码中，我将使用列表和数组以及范围。在 Raku 中，列表和数组的主要区别在于，列表是不可变的，这意味着一旦创建，就不能修改。所以它是一个只读的数据结构。要\u0026quot;更新\u0026quot;一个不可变的数据结构，你需要创建一个更新的副本。另一方面，数组是可变的，所以我们可以更新它们的元素，扩展它们，缩小它们等等。所有的更新都发生在原始数据的位置上。\nRaku 的数组类似于 Python 的 list，Raku 的 list 类似于 Python 的 tuple，也是不可变的。除了语法之外，Raku 中的范围与 Python 中的范围相似，都是不可变的。\nmy @array1 = 1,2,3; #=\u0026gt; an array because of the '@' sigil my \\array2 = [1,2,3]; #=\u0026gt; an array, because of the '[...]' my \\range1 = 1 .. 10; #=\u0026gt; a range 1 .. 10 my @array3 = 1 .. 10; #=\u0026gt; an array from a range, because of the '@' sigil my \\list1 = 1,2,3; #=\u0026gt; a list my $list2 = (1,2,3); #=\u0026gt; also a list my \\list3 = |(1 .. 10); #=\u0026gt; an array from a range because of the '|' flattening operation 相应的 Python 代码为:\nlist1 = list((1,2,3)) #=\u0026gt; a list from a tuple list2 = [1,2,3]; #=\u0026gt; a list, because of the \u0026#39;[...]\u0026#39; range1 = range(1,11) #=\u0026gt; a range 1 .. 10 list3 = list(range(1,11)); #=\u0026gt; a list from a range tuple1 = 1,2,3; #=\u0026gt; a tuple tuple2 = tuple([1,2,3]) #=\u0026gt; a tuple from a list tuple3 = tuple(range(1,11)) #=\u0026gt; creates a tuple from a range 其他具体的语法或功能将针对具体的例子进行解释。\n其他任何名称的函数 - 作为值的函数 函数是函数式编程的精髓。正如我在\u0026ldquo;万物皆函数\u0026rdquo;一文中所解释的那样，在适当的函数式语言中，所有的结构都是由函数构建的。\n所有现代编程语言都有函数、程序、子程序或方法的概念。它们是代码重用的重要机制。通常，我们认为函数是对一些输入值进行操作以产生一个或多个输出值的东西。输入值可以是全局声明的，也可以是一个类的属性，或者作为参数传递给函数。同样，输出值可以直接返回，到全局变量，作为类的属性或通过修改输入值。\n要想从函数式编程中获益最多，最好是函数是纯粹的，这意味着对函数的调用总是对相同的输入产生相同的输出。在实践中，如果函数只接受输入作为参数，并直接返回输出，这一点比较容易实现，但这并不是必不可少的。\n函数式编程的关键特征是，函数的输入值和输出值本身可以是函数。所以函数必须是你语言中的值。有时这被称为 \u0026ldquo;函数必须是一等公民\u0026rdquo;，一个接收和/或返回函数的函数有时被称为\u0026quot;高阶函数\u0026rdquo;。\n如果函数是值，那么我们就可以将它们赋值给变量。特别是我们会将它们赋值给其他函数的参数。但我们也可以将它们赋值给普通的变量。\n让我们考虑以下函数，choose，它需要三个参数 t，f 和 c。\n# Raku sub choose (\\t, \\f, \\d) { if (d) {t} else {f} } # Python def choose (t, f, d): if d: return t else: return f 首先让我们用字符串作为前两个参数的值来调用 choose。\n# Raku my \\tstr = \u0026quot;True!\u0026quot;; my \\fstr = \u0026quot;False!\u0026quot;; my \\res_str = choose(tstr, fstr, True); say res_str; #=\u0026gt; says \u0026quot;True!\u0026quot; # Python tstr = \u0026quot;True!\u0026quot; fstr = \u0026quot;False!\u0026quot; res_str = choose(tstr,fstr,True) print(res_str) #=\u0026gt; says \u0026quot;True!\u0026quot; 现在让我们尝试用函数作为参数:\n# Raku sub tt (\\s) { say \u0026quot;True {s}!\u0026quot; } sub ff (\\s) { say \u0026quot;False {s}!\u0026quot; } my \u0026amp;res_f = choose(\u0026amp;tt, \u0026amp;ff, False); say \u0026amp;res_f; #=\u0026gt; says \u0026amp;ff res_f(\u0026quot;rumour\u0026quot;); #=\u0026gt; says \u0026quot;False rumour!\u0026quot; # Python def tt(s): print( \u0026quot;True \u0026quot;+s+\u0026quot;!\u0026quot;) def ff(s): print( \u0026quot;False\u0026quot;+s+\u0026quot;!\u0026quot;) res_f = choose(tt,ff,True) print(res_f) #=\u0026gt; says \u0026lt;function tt at 0x7f829c3aa310\u0026gt; res_f(\u0026quot;rumour\u0026quot;) #=\u0026gt; says \u0026quot;False rumour!\u0026quot; 因此，我们的函数 choose 接收两个函数作为它的前两个参数，并返回一个函数。在 Raku 中，我们需要在函数名上加上 \u0026amp; 符号，因为否则它们会被求值：像 tt 这样的裸函数名就等于调用没有参数的函数 tt()。通过将这个函数赋值给一个变量(res_f)，我们现在可以将 res_f 作为一个函数来调用，它最终会根据选择来调用 tt 或 ff。\n函数不需要名字 现在，如果我们可以将函数赋值给变量，它们本身其实并不需要一个名字。所以我们的函数可以是匿名的。大多数语言都支持匿名函数，在函数式语言中，它们通常被称为 \u0026ldquo;lambda 函数\u0026rdquo;。在 Raku 中，我们有两种方法来创建匿名函数。\n使用 sub (...) 语法:\nmy \\tt = sub (\\s) { say \u0026quot;True {s}!\u0026quot; }; 或者使用\u0026lsquo;尖号块\u0026rsquo;语法，这样更紧凑一些:\nmy \\ff = -\u0026gt; \\s { say \u0026quot;False {s}!\u0026quot; }; Python 使用 lambda 关键字:\ntt = lambda s : print( \u0026#34;True \u0026#34;+s+\u0026#34;!\u0026#34; ) ff = lambda s : print( \u0026#34;False \u0026#34;+s+\u0026#34;!\u0026#34; ) 所以现在我们可以说:\nmy \u0026amp;res_f = choose(tt, ff, True); say \u0026amp;res_f; #=\u0026gt; says sub { } res_f(\u0026quot;story\u0026quot;); #=\u0026gt; says \u0026quot;True story!\u0026quot; 当我们打印出函数所绑定的变量时，Raku 返回 sub { } 来表示该变量包含一个函数。\n在 Python 中:\nres_f = choose(tt, ff, True); print( res_f) #=\u0026gt; says \u0026lt;function \u0026lt;lambda\u0026gt; at 0x7f829b298b80\u0026gt; res_f(\u0026#34;story\u0026#34;) #=\u0026gt; says \u0026#34;True story!\u0026#34; 例子: map、 grep 和 reduce 函数的功能有很多用途，我只想重点介绍三个在 Raku 中现成的例子：map、reduce 和 grep。Python 有 map 和 filter，并通过 functools 模块提供 reduce。这些函数的共同点是，它们提供了一种对列表进行 for 循环的替代方法。\nmap : 对列表中的所有元素进行函数应用 map 有两个参数：一个函数和一个列表。它将函数按顺序应用于列表中的所有值，并返回结果，例如将列表中的所有值平方。\nmy \\res = map -\u0026gt; \\x {x*x} , 1 .. 10; 在 Python 中，我们需要显式地创建元组，但除了语法上的差异，结构是完全一样的。\nres = tuple( map( lambda x : x*x , range(1,11))) 这是对传统 for 循环的功能替代。\n# Raku my \\res = []; for 1 .. 10 -\u0026gt; \\x { res.push(x*x); } # Python res = [] for x in range(1,11): res.append(x*x) 请注意，在 Raku 和 Python 中，我们需要为 for 循环版本使用一个可变的数据结构，而 map 版本则使用不可变的数据结构。\ngrep : 过滤列表 grep (在 Python 中称为 filter)也接受参数，一个函数和一个列表，但它只返回函数返回真的列表中的值。\n# Raku my \\res = grep -\u0026gt; \\x { x % 5 == 0 }, 1 .. 30; # Python res = tuple(filter( lambda x : x % 5 == 0 ,range(1,31))) 当然我们也可以用 for 循环和 if 语句来写，但这又需要一个可变的数据结构。\n# Raku my \\res = []; for 1 .. 30 -\u0026gt; \\x { if (x % 5 == 0) { res.push(x); } } # Python res = [] for x in range(1,31): if (x % 5 == 0): res.append(x) map 和 grep 的好处是，你可以很容易地把它们链在一起。\n# Raku grep -\u0026gt; \\x { x % 5 == 0 }, map -\u0026gt; \\x {x*x}, 1..30 # Python res = tuple(filter( lambda x : x % 5 == 0 ,map( lambda x : x*x ,range(1,31)))) 这是因为 map 和 grep 接受一个列表并返回一个列表，所以只要你需要对一个列表进行操作，就可以通过链式调用来实现。\nreduce : 化整为零 reduce 也接受一个函数和一个 list，但它使用函数将 list 的所有元素合并成一个结果。所以函数必须接受两个参数。第二个参数是从列表中取出的元素，第一个参数作为状态变量来组合所有元素。例如，计算一个数字列表的和:\n# Raku my \\sum = reduce sub (\\acc,\\elt) {acc+elt}, 1 .. 10; say sum; #=\u0026gt; says 55 # Python from functools import reduce sum = reduce(lambda acc,elt: acc+elt, range(1,11)) print( sum); #=\u0026gt; says 55 这里发生的情况是，首先将 acc 设置为列表中的第一个元素(1)，然后加上第二个元素，所以 acc 变成 1+2=3；然后加上第三个元素(3)，以此类推。其效果是将列表中的所有数字连续相加。\n为了更清楚地说明这一点，我们来写一个我们自己的 reduce 版本。\n编写你自己的 在许多函数式语言中，从左到右（从最低索引开始）和从右到左（从最高索引开始）的还原是有区别的。这一点很重要，因为根据做还原的函数，如果从左边或右边消耗列表，结果可能会不同。例如，假设我们的化简函数是\n# Raku -\u0026gt; \\x,\\y {x+y} # Python lambda x,y: x+y 那么我们从哪个方向遍历列表并不重要。但考虑以下函数:\n# Raku -\u0026gt; \\x,\\y { x \u0026lt; y ?? x+y !! x } # Python lambda x,y: x+y if x\u0026lt;y else x ( ... ?? ... !! ... 是条件操作符的 Raku 句法，在大多数其他语言中是 ... ? ... : ... 在 Python 中是 ... if ... else ...)。\n在这种情况下，如果列表从左或从右还原，结果会有所不同。在 Raku 和 Python 中，reduce 是一种从左到右的还原。\n另外，reduce 函数可以不使用列表的第一个元素，而是取一个额外的参数，通常称为累加器。在函数式语言中，reduce 通常被称为 fold，所以我们可以有一个左折和一个右折。让我们来看看如何实现这些。\nLeft fold 实现左折的直接方法（所以和 reduce 一样）是在函数内部使用 for 循环。这意味着我们必须在循环的每次迭代上更新累加器的值。在 Raku 中，无符号变量是不可变的（我在这里简化了，完整的故事请看 Raku 文档），所以我们需要使用一个有符号的变量，$acc。\n# Raku sub foldll (\u0026amp;f, \\iacc, \\lst) { my $acc = iacc; for lst -\u0026gt; \\elt { $acc = f($acc,elt); } $acc; } # Python def foldll (f, iacc, lst): acc = iacc for elt in lst: acc = f(acc,elt) return acc 如果我们只想使用不可变的变量，我们可以使用递归。Raku 使这一点变得简单，因为它允许一个子程序有多个签名(multi sub)，并且它会调用与签名相匹配的变量。\n我们的 foldl 将消耗输入列表 lst，并使用 f 将其元素组合到累加器 acc 中，当列表被消耗后，计算结束，我们可以返回 acc 作为结果。所以我们的第一个变体说，如果输入列表是空的，我们应该返回 acc。 第二个变体从列表中取出一个元素 elt (关于 * 的细节请参见 Raku 文档)，并将其与 acc 结合到 f(acc,elt) 中。然后用这个新的累加器和 list 的剩余部分 rest 再次调用 foldl。\n# When the list is empty, return the accumulator multi sub foldl (\u0026amp;f, \\acc, ()) { acc } multi sub foldl (\u0026amp;f, \\acc, \\lst) { # Raku's way of splitting a list in the first elt and the rest # The '*' is a shorthand for the end of the list my (\\elt,\\rest) = lst[0, 1 .. * ]; # The actual recursion foldl( \u0026amp;f, f(acc, elt), rest); } Python 不允许这种模式匹配，所以我们需要使用条件来编写递归。\ndef foldl (f, acc, lst): if lst == (): return acc else: # Python\u0026#39;s way of splitting a tuple in the first elt and the rest # rest will be a list, not a tuple, but we\u0026#39;ll let that pass (elt,*rest) = lst # The actual recursion return foldl( f, f(acc, elt), rest) 在这个实现中，所有的变量都不会被更新。所以所有的变量都可以是不可变的。\nRight fold 右折与左折颇为相似。对于基于循环的版本，我们所做的只是将列表反转(reverse)。\n# Raku sub foldrl (\u0026amp;f, \\acc, \\lst) { my $res = acc; for lst.reverse -\u0026gt; \\elt { $res = f($res,elt); } $res; } # Python def foldlr (f, iacc, lst): acc = iacc for elt in lst.reverse(): acc = f(acc,elt) return acc 在递归版本中，我们从列表中取最后一个元素而不是第一个元素。关于 ..^ * - 1 语法的细节，请参见 Raku 文档。\n# Raku multi sub foldr ( \u0026amp;f, \\acc, ()) { acc } multi sub foldr (\u0026amp;f, \\acc, \\lst) { my (\\rest,\\elt) = lst[0..^*-1, * ]; foldr( \u0026amp;f, f(acc, elt), rest); } # Python def foldr (f, acc, lst): if lst == (): return acc else: (*rest,elt) = lst return foldr( f, f(acc, elt), rest) map and grep are folds 现在，map 和 grep 呢？我们当然可以用 for 循环来实现，但我们也可以用我们的 foldl 来实现它们。\n# Raku sub map (\u0026amp;f,\\lst) { foldl( sub (\\acc,\\elt) { (|acc,f(elt)) }, (), lst); } # Python def map (f,lst): return foldl( lambda acc,elt:(*acc, f(elt)) ,() ,lst ) 因为函数 f 是可映射的，所以它只有一个参数。但是 foldl 需要一个有两个参数的函数，第一个参数为累加器。所以我们用两个参数的匿名函数调用 foldl。累积器本身是一个空列表。虽然我们前面说过，还原将原来列表的所有元素合并成一个返回值，当然这个返回值可以是任何数据类型，所以也是一个列表。所以我们对原始列表中的每一个元素都调用 f，并将其添加到累加器列表的末尾。(| 将列表扁平化，所以 (|acc,f(elt)) 是一个由 acc 的元素和 f(elt) 的结果建立的新列表。)\n类似地，我们也可以定义 grep:\n# Raku sub grep (\u0026amp;f,\\lst) { foldl( sub (\\acc,\\elt) { if (f(elt)) { (|acc,elt) } else { acc } }, (), lst); } # Python def filter (f,lst): return foldl( lambda acc,elt: (*acc,elt) if f(elt) else acc , (), lst) 就像在 map 实现中一样，我们用一个匿名函数调用 foldl。在这个函数中，我们测试 lst 中的每个 elt 是否为 f(elt) 为真。如果是真，我们就从 acc 和 elt 创建一个新的列表，否则我们就只返回 acc。 因为 map 和 grep 分别对列表中的每个元素进行操作，所以我们也可以使用右折来实现它们。\n通过这些例子，我希望无论是对函数工作的概念，还是对函数可能的实现方式，都变得更加清晰。递归实现的优点是它允许我们使用不可变的数据结构。\n为什么是不可变的数据结构？ 你可能会好奇为什么我关注这些不可变的数据结构。正如我们将看到的那样，函数式编程与不可改变的数据结构配合得非常好。而且它们有一个很大的优势：你永远不用担心是否不小心修改了你的数据，也不用担心是否应该做一个副本来确定。所以使用不可变数据结构可以使代码不易出错，更容易调试。它们还具有潜在的性能优势。而我们接下来会看到，在 Raku 中还有另一个优势。\n返回函数的函数 函数也可以返回函数。如果我们想拥有一个可参数化的函数，这一点尤其有用。举个简单的例子，假设我们想要一系列以固定值递增一个数字的函数：add1、add2 等。当然，我们可以分别写出每一个函数。\n# Raku sub add_1 (\\x) {x+1} sub add_2 (\\x) {x+2} sub add_3 (\\x) {x+3} sub add_4 (\\x) {x+4} sub add_5 (\\x) {x+5} say add_1(4); #=\u0026gt; says 5 # Python def add_1 (x) : return x+1 def add_2 (x) : return x+2 def add_3 (x) : return x+3 def add_4 (x) : return x+4 def add_5 (x) : return x+5 print( add_1(4)) #=\u0026gt; says 5 或者我们可以使用一个充满匿名函数的列表。\n# Raku my \\add = sub (\\x) {x}, sub (\\x) {x+1}, sub (\\x) {x+2}, sub (\\x) {x+3}, sub (\\x) {x+4}, sub (\\x) {x+5}; say add[0].(4); #=\u0026gt; says 5 # Python add = ( lambda x : x+1, lambda x : x+2, lambda x : x+3, lambda x : x+4, lambda x : x+5 ) print( add[0](4)) #=\u0026gt; says 5 我们可以做得更好，用一个循环来填充一个匿名函数的数组。\n# Raku my \\add = []; for 0 .. 5 -\u0026gt; \\n { add.push(sub (\\x) {x+n}); } say add[1].(4); #=\u0026gt; says 5 # Python add = [] for n in range(0,6): add.append(lambda x: x+n) 我们每次循环迭代都会创建一个新的匿名函数，并将其添加到数组中。但是，我们可以使用一个函数来创建这些匿名函数，然后我们可以使用 map 来代替循环，并使用一个不可改变的数据结构。\n# Raku sub gen_add(\\n) { sub (\\x) {x+n} } my \\add = map \u0026amp;gen_add, 0..5; say add[1].(4); #=\u0026gt; says 5 # Python def gen_add(n): return lambda x : x+n add = tuple(map( gen_add, range(0,6))) print( add[1](4)) #=\u0026gt; says 5 Laziness 在 Raku 中，使用(不可改变的)范围有一个额外的好处：我们可以将范围的末端设置为无穷大，在 Raku 中可以写成 ∞(unicode 221E)、* 或 Inf。\n# Raku my \\add = map \u0026amp;gen_add, 0 .. ∞; say add[244].(7124); #=\u0026gt; says 7368 这是一个所谓的\u0026quot;懒惰求值\u0026quot;的例子，简称 laziness：Raku 不会尝试（和失败）处理这个无限的列表。相反，它将在我们实际使用该列表中的一个元素时进行处理。表达式的评估会延迟到需要结果的时候，所以当我们调用 add[244] 时，发生的情况是 gen_add(244) 被调用来生成该函数。请注意，这在 for 循环中是行不通的，因为要使用 for 循环，我们需要一个可变的数据结构，而惰性列表必须是不可变的。所以这是一个很好的例子，说明函数式编程风格如何让你从懒惰中获益。\n这也是为什么我们递归地实现了 foldl，然后用它来实现我们自己的 map 和 grep：基于递归的版本不需要更新任何变量，所以它们可以与不可变的惰性数据结构一起工作。\n函数组合 我们在上面看到，你可以把 map 和 grep 的调用链在一起。通常情况下，你只需要将 map 调用链在一起，例如\n# Raku map -\u0026gt; \\x { x + 5 }, map -\u0026gt; \\x {x*x}, 1..30; # Python map( lambda x : x + 5, map( lambda x : x*x, range(1,31))) 在这种情况下，我们可以做得更有效率一些：比起创建一个列表，然后在这个列表上调用 map，我们可以通过组合函数一次完成两个计算。Raku 为此提供了一个特殊的操作符。\nmap -\u0026gt; \\x { x + 5 } ∘ -\u0026gt; \\x { x * x }, 1..30; 操作符 ∘（\u0026ldquo;环形操作符\u0026rdquo;，unicode 2218，但你也可以用普通的 o）是函数组成操作符，它的发音是 \u0026ldquo;after\u0026rdquo;，所以 f ∘ g 是 \u0026ldquo;f after g\u0026rdquo;。它的作用是将两个现有的函数组合起来，创建一个新的函数。\nmy \u0026amp;h = \u0026amp;f ∘ \u0026amp;g; 是下面的代码是一样的:\nsub h (\\x) { f(g(x)) } 组成运算符的优点是，它可以适用于任何函数，包括匿名函数。但实际上，它只是另一个高阶函数。它只是下面函数的运算符形式。\n# Raku sub compose(\u0026amp;f,\u0026amp;g) { sub (\\x) { f(g(x)) } } Python 没有函数组成操作符，但你也可以很容易地在 Python 中拥有 compose。\n# Python def compose(f,g): return lambda x: f(g(x)) 结论 在这篇文章中，我用 Raku 和 Python 的例子介绍了三种关键的函数式编程技术：对函数进行操作的函数、返回函数的函数和函数组成。我已经展示了你如何使用函数 map、reduce(折叠)和 grep(过滤)来操作不可变的列表。我已经解释了哟(如何用递归和不递归实现这样的函数，以及递归实现的优势是什么。下面是《 Raku 与 Python》一文中的代码。\n当然，函数式编程的内容还有很多，我也写了几篇更高级的文章。本文介绍的概念应该为理解那些更高级的主题打下良好的基础。如果你想了解更多关于函数式编程的知识，你可以考虑我的免费在线课程。\n原文: https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/\n"},"name":"通过函数式编程实现更简洁的代码","published":"2020-07-26T00:00:00+08:00","summary":"Cleaner code with functional programming","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-07-26-cleaner-code-with-functional-programming/"},{"content":{"html":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e在 6.d 版本中, 很多东西都发生了变化, 我们至少需要发布一个版本。\u003ca href=\"https://github.com/perl6/roast/blob/master/docs/announce/6.d.md\"\u003e这里有个列表\u003c/a\u003e。然而, 覆盖面是不完整的。弃用通知采取了不同的形式, 一些新的类型和方法在那里, 一些则没有\u0026hellip;\u0026hellip;\u003c/p\u003e\n\u003cp\u003e用 \u003ccode\u003e#2632\u003c/code\u003e 引用这个问题, 并检查项目, 当你的工作, 无论是通过改变后的文档, 看到没有变化, 需要做它。在这种情况下, 请通过评论或如何解释为什么是这种情况。\u003c/p\u003e\n\u003ch2 id=\"版本控制的变更\"\u003e版本控制的变更\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e \u003ccode\u003e\u0026amp;await\u003c/code\u003e 在等待的时候不再阻塞线程\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e \u003ccode\u003ewhenever\u003c/code\u003e 不在 \u003ccode\u003ereact\u003c/code\u003e 抛出的词法作用域内\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e 在 \u003ccode\u003esub MAIN\u003c/code\u003e 里面的 \u003ccode\u003e$*ARGFILES\u003c/code\u003e 总是由 \u003ccode\u003e$*IN\u003c/code\u003e 馈入\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e 结构(字面上的) \u003ccode\u003e$()\u003c/code\u003e、\u003ccode\u003e@()\u003c/code\u003e 和 \u003ccode\u003e%()\u003c/code\u003e 不复存在\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e 带有 \u003ccode\u003e:D\u003c/code\u003e/\u003ccode\u003e:U\u003c/code\u003e 类型约束的变量默认为约束类型的类型对象(例如, 你可以在它们身上使用 \u003ccode\u003e.new\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e \u003ccode\u003estart\u003c/code\u003e 块在 sink 上下文中附加异常处理程序\u003c/li\u003e\n\u003cli\u003e~~**[6.d]** 例程必须使用 \u003ccode\u003ereturn-rw\u003c/code\u003e 来返回一个 \u003ccode\u003eProxy\u003c/code\u003e, 即使例程被标记为 \u003ccode\u003eis raw\u003c/code\u003e 或 \u003ccode\u003eis rw\u003c/code\u003e~~\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e 原生的 \u003ccode\u003enum\u003c/code\u003e 类型默认为 \u003ccode\u003e0e0\u003c/code\u003e 而不是 \u003ccode\u003eNaN\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e 在子程序名中, 保留了键名为 \u003ccode\u003esym\u003c/code\u003e 的冒号对（如\u003ccode\u003e:sym\u0026lt;foo\u0026gt;\u003c/code\u003e）, 以备将来使用\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"废弃\"\u003e废弃\u003c/h2\u003e\n\u003cp\u003e这些方法在 6.d 语言中已被废弃, 并将在 6.e 中被删除。实现者可以选择发出弃用警告, 或者在 6.e 版本发布后更长的时间内提供这些方法。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用 \u003ccode\u003e'-'\u003c/code\u003e (单连字符)作为 \u003ccode\u003e\u0026amp;open\u003c/code\u003e 的特殊路径, 表示特殊的句柄(使用 \u003ccode\u003eIO::Special\u003c/code\u003e 对象代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Handle.slurp-rest\u003c/code\u003e (使用 \u003ccode\u003e.slurp\u003c/code\u003e 代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAny.flatmap\u003c/code\u003e (使用\u003ccode\u003e.flat\u003c/code\u003e 和 \u003ccode\u003e.map\u003c/code\u003e 方法的组合来代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCool.path\u003c/code\u003e (使用 \u003ccode\u003e.IO\u003c/code\u003e 代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePair.freeze\u003c/code\u003e (使用去容器化的参数的 \u003ccode\u003ePair.new\u003c/code\u003e 来代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eStr.subst-mutate\u003c/code\u003e (使用带有 \u003ccode\u003e.=\u003c/code\u003e 方法调用赋值元运算符的 \u003ccode\u003eStr.subst\u003c/code\u003e 代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRational.norm\u003c/code\u003e (现在 \u003ccode\u003eRational\u003c/code\u003e 类型必须在创建时标准化)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path.child\u003c/code\u003e (使用 \u003ccode\u003e.add\u003c/code\u003e 代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;undefine\u003c/code\u003e (直接分配 \u003ccode\u003eEmpty\u003c/code\u003e/\u003ccode\u003eNil\u003c/code\u003e 代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:count\u003c/code\u003e \u003ccode\u003e\u0026amp;lines\u003c/code\u003e/\u003ccode\u003eStr.lines\u003c/code\u003e 例程上的参数(使用所返回的 \u003ccode\u003eSeq\u003c/code\u003e 上的 \u003ccode\u003e.elems\u003c/code\u003e 代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;is_approx\u003c/code\u003e in Test.pm6 (使用与 \u003ccode\u003e\u0026amp;is-approx\u003c/code\u003e 非常相似的行为来代替)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"新的行为\"\u003e新的行为\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e通过新的可定义的 \u003ccode\u003e\u0026amp;RUN-MAIN\u003c/code\u003e、\u003ccode\u003e\u0026amp;ARGS-TO-CAPTURE\u003c/code\u003e 和 \u003ccode\u003e\u0026amp;GENERATE-USAGE\u003c/code\u003e 子例程改善 \u003ccode\u003esub MAIN\u003c/code\u003e 的自定义处理\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e%\u003c/code\u003e 变量中的 \u003ccode\u003eQuantHash\u003c/code\u003e/\u003ccode\u003eMap\u003c/code\u003e 和 \u003ccode\u003e@\u003c/code\u003e 变量中的 \u003ccode\u003eList\u003c/code\u003e 可以用 \u003ccode\u003eis\u003c/code\u003e 特性来声明（例如，\u003ccode\u003emy %h is Set\u003c/code\u003e）\u003c/li\u003e\n\u003cli\u003e新的 \u003ccode\u003e\u0026lt;ww\u0026gt;\u003c/code\u003e regex 规则: 只在单词内匹配\u003c/li\u003e\n\u003cli\u003e循环可以从上一条语句的值中产生一个值的列表\u003c/li\u003e\n\u003cli\u003e循环中的 \u003ccode\u003enext\u003c/code\u003e/\u003ccode\u003elast\u003c/code\u003e 收集其最后的语句值, 对它们运行的迭代返回 \u003ccode\u003eEmpty\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.perl\u003c/code\u003e 可以在消耗过的 \u003ccode\u003eSeq\u003c/code\u003e、多维数组、\u003ccode\u003eDate\u003c/code\u003e 和 \u003ccode\u003eCallFrame\u003c/code\u003e 上调用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.gist\u003c/code\u003e 可以在 \u003ccode\u003eAttribute\u003c/code\u003e 上调用\u003c/li\u003e\n\u003cli\u003e对自动生成的 \u003ccode\u003eUSAGE\u003c/code\u003e 信息进行了大量改进\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eis hidden-from-USAGE\u003c/code\u003e 特性，从自动生成的 \u003ccode\u003eUSAGE\u003c/code\u003e 消息中隐藏 \u003ccode\u003esub MAIN\u003c/code\u003e 候选者\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eParameter.perl\u003c/code\u003e 包括可内省的默认值\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e%*ENV\u003c/code\u003e 值是同素异形的\u003c/li\u003e\n\u003cli\u003e尝试使用变量 \u003ccode\u003e$;\u003c/code\u003e、\u003ccode\u003e$,\u003c/code\u003e、\u003ccode\u003e$.\u003c/code\u003e、\u003ccode\u003e$\\\u003c/code\u003e、\u003ccode\u003e$(\u003c/code\u003e、\u003ccode\u003e$)\u003c/code\u003e、\u003ccode\u003e$\u0026lt;\u003c/code\u003e、\u003ccode\u003e$\u0026gt;\u003c/code\u003e、\u003ccode\u003e$/\u003c/code\u003e、\u003ccode\u003e$\\\u003c/code\u003e、\u003ccode\u003e$[\u003c/code\u003e、\u003ccode\u003e$-\u003c/code\u003e、\u003ccode\u003e$+\u003c/code\u003e 和 \u003ccode\u003e$@\u003c/code\u003e 会抛出 \u003ccode\u003eX::Syntax::Perl5Var\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e默认的 \u003ccode\u003eHash.keyof\u003c/code\u003e 返回一个 \u003ccode\u003eStr(Any)\u003c/code\u003e 强转类型对象\u003c/li\u003e\n\u003cli\u003e非 ASCII 数字可以在 \u003ccode\u003e:42foo\u003c/code\u003e 冒号对快捷方式中使用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eStrDistance\u003c/code\u003e 字符串化为 \u003ccode\u003e.after\u003c/code\u003e 字符串\u003c/li\u003e\n\u003cli\u003e更明确的 Pod 表格格式\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEnumeration.enums\u003c/code\u003e 返回一个 \u003ccode\u003eMap\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e各种整数类型的 \u003ccode\u003e.Range\u003c/code\u003e 返回它们支持的值的范围\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emin\u003c/code\u003e/\u003ccode\u003emax\u003c/code\u003e  例程也适用于 \u003ccode\u003eHash\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSignature\u003c/code\u003e 字面值可以包含字符串/数字字面值以及调用者标记\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eList.invert\u003c/code\u003e 通过所需的 \u003ccode\u003ePair\u003c/code\u003e 绑定映射, 导致潜在的类型检查失败\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:exists\u003c/code\u003e 可以与多维关联下标一起使用\u003c/li\u003e\n\u003cli\u003e动态创建的列表可以用来定义一个枚举\u003c/li\u003e\n\u003cli\u003e在 \u003ccode\u003e.first\u003c/code\u003e 中, Junction 可以作为匹配器使用\u003c/li\u003e\n\u003cli\u003e原生属性可以作为参数中的绑定目标\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProc\u003c/code\u003e 可以与其他 \u003ccode\u003eProc\u003c/code\u003e 中的 \u003ccode\u003eIO::Pipe\u003c/code\u003e 一起工作\u003c/li\u003e\n\u003cli\u003e类型数组可以用 \u003ccode\u003emy SomeType @array\u003c/code\u003e 和 \u003ccode\u003emy @array of SomeType\u003c/code\u003e 创建\u003c/li\u003e\n\u003cli\u003e当把 \u003ccode\u003eMixy\u003c/code\u003e 强转为 \u003ccode\u003eSetty\u003c/code\u003e/\u003ccode\u003eBaggy \u003c/code\u003e 时, 负数权重的项将被删除\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:nth\u003c/code\u003e 副词在 \u003ccode\u003em//\u003c/code\u003e 上接受一个 \u003ccode\u003eJunction\u003c/code\u003e 作为参数\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCX::Warn' 和 \u003c/code\u003eCX::Done\u003ccode\u003e可以在\u003c/code\u003eCONTROL` phaser 中捕获\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enext\u003c/code\u003e 可用于 \u003ccode\u003ewhenever\u003c/code\u003e 中\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erequire\u003c/code\u003e 符号不再过境性地暴露出来\u003c/li\u003e\n\u003cli\u003e通过 \u003ccode\u003e{...}\u003c/code\u003e 进行多维访问, 类似于 \u003ccode\u003e[...]\u003c/code\u003e 的工作方式\u003c/li\u003e\n\u003cli\u003e在 \u003ccode\u003eEND\u003c/code\u003e 时间打开的任何手柄都会自动关闭\u003c/li\u003e\n\u003cli\u003e在缓存的 \u003ccode\u003eSeq\u003c/code\u003e 上, 当 \u003ccode\u003e\u0026amp;infix:\u0026lt;eqv\u0026gt;\u003c/code\u003e、\u003ccode\u003e.Slip\u003c/code\u003e、\u003ccode\u003e.join\u003c/code\u003e、\u003ccode\u003e.List\u003c/code\u003e、\u003ccode\u003e.list\u003c/code\u003e、\u003ccode\u003e.eager\u003c/code\u003e、\u003ccode\u003e.Array\u003c/code\u003e 和 \u003ccode\u003e.is-lazy\u003c/code\u003e 被调用时, 就会使用缓存列表\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Handle.encoding\u003c/code\u003e 以 \u003ccode\u003eNil\u003c/code\u003e 表示切换到二进制模式\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eis default\u003c/code\u003e 特质与属性一起工作\u003c/li\u003e\n\u003cli\u003e在多重分派中, 带有 \u003ccode\u003eis rw\u003c/code\u003e 特性的参数被认为比没有特性的参数窄\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eBlob\u003c/code\u003e 和 \u003ccode\u003eMap\u003c/code\u003e 的 \u003ccode\u003e.gist\u003c/code\u003e 被裁剪成100个元素\u003c/li\u003e\n\u003cli\u003e新的 \u003ccode\u003efor\u003c/code\u003e 语句修饰符 \u003ccode\u003ehyper for\u003c/code\u003e、\u003ccode\u003erace for\u003c/code\u003e 和 \u003ccode\u003elazy for\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efor\u003c/code\u003e 循环自动序列化 \u003ccode\u003eRaceSeq\u003c/code\u003e/\u003ccode\u003eHyperSeq\u003c/code\u003e；使用新的 \u003ccode\u003efor\u003c/code\u003e 语句修饰符\u003ccode\u003ehyper for\u003c/code\u003e/\u003ccode\u003erace for\u003c/code\u003e避免\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt;does\u0026gt;\u003c/code\u003e 可用于 RHS 上的非组合实例\u003c/li\u003e\n\u003cli\u003e数值比较器可以与 \u003ccode\u003eDateTime \u003c/code\u003e 对象一起使用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePod\u003c/code\u003e 保留空白类型\u003c/li\u003e\n\u003cli\u003e定义了带 \u003ccode\u003e@\u003c/code\u003e、\u003ccode\u003e%\u003c/code\u003e 和 \u003ccode\u003e\u0026amp;\u003c/code\u003e 魔符常数的语义\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"math\"\u003eMath\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRational\u003c/code\u003e 总是在创建时被化简, 并在其一生中保持不变\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eInf\u003c/code\u003e、\u003ccode\u003eInf\u003c/code\u003e 和 \u003ccode\u003eNaN\u003c/code\u003e 可以分别用 \u003ccode\u003e\u0026lt;-1/0\u0026gt;\u003c/code\u003e、\u003ccode\u003e\u0026lt;1/0\u0026gt;\u003c/code\u003e 和 \u003ccode\u003e\u0026lt;0/0\u003c/code\u003e\u0026gt; 表示, 通过\u003ccode\u003eRational\u003c/code\u003e 类型进行舍去。零分母 \u003ccode\u003eRational\u003c/code\u003e 被标准化为这三个值之一\u003c/li\u003e\n\u003cli\u003e在 ±\u003ccode\u003eInf\u003c/code\u003e 和 \u003ccode\u003eNaN\u003c/code\u003e 上调用 \u003ccode\u003e.Int\u003c/code\u003e, 会抛出异常\u003c/li\u003e\n\u003cli\u003e改进了 \u003ccode\u003eNum\u003c/code\u003e 运算符和数学函数的 IEEE 754-2008 合规性\u003c/li\u003e\n\u003cli\u003e负零 \u003ccode\u003eNum\u003c/code\u003e(\u003ccode\u003e-0e0\u003c/code\u003e)被所有例程和语法结构正确处理\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNum\u003c/code\u003e 类型的字符串化必须是可舍弃到原始 \u003ccode\u003eNum\u003c/code\u003e 的\u003c/li\u003e\n\u003cli\u003e定义了涉及零的 \u003ccode\u003eComplex \u003c/code\u003e 指数\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.expmod\u003c/code\u003e 中的负数幂有效\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"setsbagsmixesaka-quanthashes和集合运算符\"\u003eSets、Bags、Mixes(aka QuantHashes)和集合运算符\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSet 运算符可以用在任何对象上, 在需要的时候会被强转\n\u003cul\u003e\n\u003cli\u003e所以, 不需要也不希望有任何预先的强转\u003c/li\u003e\n\u003cli\u003e如果没有 QuantHash 就能实现所需的功能, 那么 Set 运算符可以自由地不创建任何 QuantHash\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e对不同类型的 QuantHashes 的 Set 操作将强转到最自由的形式（Set -\u0026gt; Bag -\u0026gt; Mix）\u003c/li\u003e\n\u003cli\u003e集合运算符的 set_precedes 家族( \u003ccode\u003e(\u0026lt;+)\u003c/code\u003e、\u003ccode\u003e≼\u003c/code\u003e、\u003ccode\u003e(\u0026gt;+)\u003c/code\u003e、\u003ccode\u003e≽\u003c/code\u003e) 已被移除\n\u003cul\u003e\n\u003cli\u003e曾经是子集运算符的 Baggy 形式\u003c/li\u003e\n\u003cli\u003eQuantHash 升级为最自由的形式, 所以 \u003ccode\u003e(\u0026lt;=)\u003c/code\u003e、\u003ccode\u003e⊆\u003c/code\u003e、\u003ccode\u003e(\u0026gt;=)\u003c/code\u003e、\u003ccode\u003e⊇\u003c/code\u003e 做正确的事情\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.classify-list\u003c/code\u003e 方法可用于 \u003ccode\u003eBaggy\u003c/code\u003e 类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.categorize-list\u003c/code\u003e 方法可用于 \u003ccode\u003eBaggy\u003c/code\u003e 类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.invert\u003c/code\u003e 方法可用于核心 \u003ccode\u003eQuantHash\u003c/code\u003e 类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.antipairs\u003c/code\u003e 方法可用于 \u003ccode\u003eQuantHash\u003c/code\u003e 类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eQuantHash\u003c/code\u003e 类型有 \u003ccode\u003e.new-from-pairs\u003c/code\u003e 和将一个 \u003ccode\u003eQuantHash\u003c/code\u003e 类型转换为另一个 \u003ccode\u003eQuantHash\u003c/code\u003e 类型的方法(例如 \u003ccode\u003eSet\u003c/code\u003e 类型的 \u003ccode\u003e.Bag\u003c/code\u003e 方法)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eQuantHash\u003c/code\u003e 类型上的 \u003ccode\u003e.hash\u003c/code\u003e 对键值进行了字符串化\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"新的形参和实参\"\u003e新的形参和实参\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eDate.new\u003c/code\u003e 接受一个 \u003ccode\u003e:\u0026amp;formatter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.first\u003c/code\u003e 可以接受 \u003ccode\u003e:kv\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunique\u003c/code\u003e 和 \u003ccode\u003e.repeated\u003c/code\u003e 可以接受 \u003ccode\u003e:\u0026amp;as\u003c/code\u003e 和 \u003ccode\u003e:\u0026amp;with\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eTest.pm6 中的 \u003ccode\u003e\u0026amp;plan\u003c/code\u003e 可以接受 \u003ccode\u003e:skip-all\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;run\u003c/code\u003e/\u003ccode\u003e\u0026amp;shell\u003c/code\u003e 可以接受 \u003ccode\u003e:merge\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;note\u003c/code\u003e 可以在没有参数的情况下调用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eopen\u003c/code\u003e 接受 \u003ccode\u003e:$out-buffer\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path.resolve\u003c/code\u003e 可以接受 \u003ccode\u003e:completely\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path.parent\u003c/code\u003e 可以接受一个 \u003ccode\u003eInt\u003c/code\u003e 表示父级\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProc::Async.new\u003c/code\u003e 吞噬位置参数\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSignature.ACCEPTS\u003c/code\u003e 接受非 \u003ccode\u003eSignature\u003c/code\u003e/\u003ccode\u003eCapture\u003c/code\u003e 参数\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;EVAL\u003c/code\u003e 可以接受一个 \u003ccode\u003eBlob\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePromise.keep\u003c/code\u003e/\u003ccode\u003e.break\u003c/code\u003e 可以在没有参数的情况下调用\u003c/li\u003e\n\u003cli\u003e原生数组上的 \u003ccode\u003e.sum\u003c/code\u003e 可以接受 \u003ccode\u003e:wrap\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eis required\u003c/code\u003e 现在可以接受一个表示理由的参数\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Socket::Async.listen\u003c/code\u003e 可以绑定到端口 \u003ccode\u003e0\u003c/code\u003e 以向操作系统申请免费端口\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.encode\u003c/code\u003e 可以接受 \u003ccode\u003e:translate-nl\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"新的例程和运算符\"\u003e新的例程和运算符\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e新的 \u003ccode\u003eatomicint\u003c/code\u003e Unicode 运算符和 ASCII 等价物, 保证线程安全, 原子操作:\n\u003ccode\u003e\u0026amp;infix:\u0026lt;⚛=\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-assign\u003c/code\u003e、\u003ccode\u003e\u0026amp;prefix:\u0026lt;⚛\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-fetch\u003c/code\u003e、\n\u003ccode\u003e\u0026amp;prefix:\u0026lt;++⚛\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-inc-fetch\u003c/code\u003e、\u003ccode\u003e\u0026amp;postfix:\u0026lt;⚛++\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-fetch-inc\u003c/code\u003e、\n\u003ccode\u003e\u0026amp;prefix:\u0026lt;--⚛\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-dec-fetch\u003c/code\u003e、\u003ccode\u003e\u0026amp;postfix:\u0026lt;⚛--\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-fetch-dec\u003c/code\u003e、\n\u003ccode\u003e\u0026amp;infix:\u0026lt;⚛-=\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;infix:\u0026lt;⚛−=\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-fetch-sub\u003c/code\u003e 和 \u003ccode\u003e\u0026amp;infix:\u0026lt;⚛+=\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-fetch-add\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;cas\u003c/code\u003e: 原子比较与交换\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e≤\u003c/code\u003e、\u003ccode\u003e≥\u003c/code\u003e 和 \u003ccode\u003e≠\u003c/code\u003e 运算符是 Unicode 运算符, 分别等价于 \u003ccode\u003e\u0026lt;=\u003c/code\u003e、\u003ccode\u003e\u0026gt;=\u003c/code\u003e 和 \u003ccode\u003e!=\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt;unicmp\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;infix:\u0026lt;coll\u0026gt;\u003c/code\u003e: \u003ccode\u003e\u0026amp;infix:\u0026lt;cmp\u0026gt;\u003c/code\u003e 的替代行为\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTR///\u003c/code\u003e: \u003ccode\u003etr///\u003c/code\u003e 的非变异版本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubmethod TWEAK\u003c/code\u003e: 与 \u003ccode\u003eBUILD\u003c/code\u003e 类似, 除了它与属性默认值兼容之外\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;duckmap\u003c/code\u003e: 应用 \u003ccode\u003e\u0026amp;callable\u003c/code\u003e 到每个元素上\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;deepmap\u003c/code\u003e: 应用 \u003ccode\u003e\u0026amp;callable\u003c/code\u003e 到每个元素上, 下降到 \u003ccode\u003eIterable\u003c/code\u003e 中\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;take-rw\u003c/code\u003e: 像 \u003ccode\u003e\u0026amp;take\u003c/code\u003e 一样, 但有一个可写的容器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;indir\u003c/code\u003e: 在给定的 \u003ccode\u003e$*CWD\u003c/code\u003e 中执行代码\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;spurt\u003c/code\u003e: 参见 \u003ccode\u003eIO::Path.spurt\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;prompt\u003c/code\u003e: 提示用户输入\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euniprops\u003c/code\u003e: \u003ccode\u003euniprop\u003c/code\u003e 的多字符版本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esymlink\u003c/code\u003e: 建立文件符号链接\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elink\u003c/code\u003e: 创建文件硬连接\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.hyper\u003c/code\u003e/\u003ccode\u003e.race\u003c/code\u003e: 并行处理值的列表\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSeq.from-loop\u003c/code\u003e: 从 \u003ccode\u003eCallable\u003c/code\u003e 生产一个 \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eStr.uniparse\u003c/code\u003e: 将一个或多个 Unicode 字符名解析为实际字符\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eStr.parse-base\u003c/code\u003e: \u003ccode\u003eInt.base\u003c/code\u003e 操作的反转\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path\u003c/code\u003e 提供了 \u003ccode\u003e.ACCEPTS\u003c/code\u003e、\u003ccode\u003e.SPEC\u003c/code\u003e、\u003ccode\u003e.CWD\u003c/code\u003e、\u003ccode\u003e.Numeric\u003c/code\u003e、\u003ccode\u003e.add\u003c/code\u003e、\u003ccode\u003e.extension\u003c/code\u003e、\u003ccode\u003e.mode\u003c/code\u003e 和各种文件测试、\u003ccode\u003e.parts\u003c/code\u003e、\u003ccode\u003e.sibling\u003c/code\u003e 和 \u003ccode\u003e.spurt\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Handle\u003c/code\u003e 提供了 \u003ccode\u003e.READ\u003c/code\u003e、\u003ccode\u003e.WRITE\u003c/code\u003e、\u003ccode\u003e.EOF\u003c/code\u003e、\u003ccode\u003e.DESTROY\u003c/code\u003e,\n\u003ccode\u003e.readchars\u003c/code\u003e、\u003ccode\u003e.flush\u003c/code\u003e、\u003ccode\u003e.lock\u003c/code\u003e、\u003ccode\u003e.unlock\u003c/code\u003e、\u003ccode\u003e.out-buffer\u003c/code\u003e、\u003ccode\u003e.tell\u003c/code\u003e,\n\u003ccode\u003e.say\u003c/code\u003e、\u003ccode\u003e.slurp\u003c/code\u003e、\u003ccode\u003e.seek\u003c/code\u003e、\u003ccode\u003e.printf\u003c/code\u003e、\u003ccode\u003e.print-nl\u003c/code\u003e 和 \u003ccode\u003e.watch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Pipe\u003c/code\u003e 提供了 \u003ccode\u003e.proc\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIterator\u003c/code\u003e 提供了 \u003ccode\u003e.skip-one\u003c/code\u003e、\u003ccode\u003e.skip-at-least\u003c/code\u003e 和 \u003ccode\u003e.skip-at-least-pull-one\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMu.emit\u003c/code\u003e: \u003ccode\u003e\u0026amp;emit\u003c/code\u003e 的方法形式\u003c/li\u003e\n\u003cli\u003eTest.pm6 模块中的 \u003ccode\u003e\u0026amp;fails-like\u003c/code\u003e: 允许测试失败\u003c/li\u003e\n\u003cli\u003eTest.pm6 模块中的 \u003ccode\u003e\u0026amp;bail-out\u003c/code\u003e: 退出失败的测试套件\u003c/li\u003e\n\u003cli\u003eTest.pm6 模块中的 \u003ccode\u003e\u0026amp;is-approx\u003c/code\u003e: 测试一个数字近似于另一个\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBuf\u003c/code\u003e 拥有 \u003ccode\u003e.allocate\u003c/code\u003e、\u003ccode\u003e.reallocate\u003c/code\u003e、\u003ccode\u003e.append\u003c/code\u003e、\u003ccode\u003e.push\u003c/code\u003e、\u003ccode\u003e.pop\u003c/code\u003e、\u003ccode\u003e.splice\u003c/code\u003e、\u003ccode\u003e.subbuf-rw\u003c/code\u003e、\u003ccode\u003e.prepend\u003c/code\u003e 和 \u003ccode\u003e.unshift\u003c/code\u003e 方法\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRange\u003c/code\u003e 支持了 \u003ccode\u003e.rand\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBacktrace\u003c/code\u003e 拥有方法 \u003ccode\u003e.map\u003c/code\u003e、\u003ccode\u003e.flat\u003c/code\u003e、\u003ccode\u003e.concise\u003c/code\u003e 和 \u003ccode\u003e.summary\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.classify-list\u003c/code\u003e 方法可用于 \u003ccode\u003eHash\u003c/code\u003e 类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.categorize-list\u003c/code\u003e 方法可用于 \u003ccode\u003eHash\u003c/code\u003e 类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCode.of\u003c/code\u003e: 返回返回类型约束\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCode.line\u003c/code\u003e/\u003ccode\u003e.file\u003c/code\u003e: 返回定义的行/文件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProc::Async\u003c/code\u003e 提供了 \u003ccode\u003e.Supply\u003c/code\u003e、\u003ccode\u003e.ready\u003c/code\u003e、\u003ccode\u003e.pid\u003c/code\u003e、\u003ccode\u003e.bind-stdin\u003c/code\u003e、\u003ccode\u003e.bind-stdout\u003c/code\u003e 和 \u003ccode\u003e.bind-stderr\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProc.command\u003c/code\u003e/\u003ccode\u003eProc::Async.command\u003c/code\u003e: 我们要执行的命令\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProc\u003c/code\u003e 提供了 \u003ccode\u003e.signal\u003c/code\u003e、\u003ccode\u003e.pid\u003c/code\u003e 和 \u003cdel\u003e\u003ccode\u003e.encoding\u003c/code\u003e\u003c/del\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eComplex\u003c/code\u003e 提供了 \u003ccode\u003e.cis\u003c/code\u003e、\u003ccode\u003e.reals\u003c/code\u003e、\u003ccode\u003e.ceiling\u003c/code\u003e、\u003ccode\u003e.floor\u003c/code\u003e、\u003ccode\u003e.round\u003c/code\u003e、\u003ccode\u003e.truncate\u003c/code\u003e 和 \u003ccode\u003e.abs\u003c/code\u003e 方法, 并可以使用 \u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e 进行比较(只要虚部可以忽略不计)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDateTime\u003c/code\u003e 提供了 \u003ccode\u003e.offset-in-hours\u003c/code\u003e、\u003ccode\u003e.hh-mm-ss\u003c/code\u003e 和 \u003ccode\u003e.Date\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDateTime\u003c/code\u003e 可以使用 \u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e 运算符和其它 \u003ccode\u003eDateTime\u003c/code\u003e 对象进行比较\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDate\u003c/code\u003e 提供了 \u003ccode\u003e.DateTime\u003c/code\u003e 方法\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt;+\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;infix:\u0026lt;-\u0026gt;\u003c/code\u003e 可以被 \u003ccode\u003eDuration\u003c/code\u003e、\u003ccode\u003eDateTime\u003c/code\u003e 和 \u003ccode\u003eReal\u003c/code\u003e 类型调用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEnumeration\u003c/code\u003e 提供了 \u003ccode\u003e.Int\u003c/code\u003e、\u003ccode\u003e.pred\u003c/code\u003e、\u003ccode\u003e.succ\u003c/code\u003e、\u003ccode\u003e.kv\u003c/code\u003e 和 \u003ccode\u003e.pair\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.Date\u003c/code\u003e 可以在 \u003ccode\u003eInstant\u003c/code\u003e 上调用\u003c/li\u003e\n\u003cli\u003eJunction 能使用 \u003ccode\u003eJunction.new\u003c/code\u003e 调用来创建\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eList\u003c/code\u003e 类型拥有 \u003ccode\u003e.to\u003c/code\u003e 和 \u003ccode\u003e.from\u003c/code\u003e 方法\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMap\u003c/code\u003e type 提供了 \u003ccode\u003eInt\u003c/code\u003e 方法, 返回 pair 的数量\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAny.skip\u003c/code\u003e: 跳过列表中的值\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAny.batch\u003c/code\u003e: \u003ccode\u003e.rotor\u003c/code\u003e 的更基本的表兄弟\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMu.iterator\u003c/code\u003e: 为一个列表中的值生成一个 \u003ccode\u003eIterator\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Spec::*\u003c/code\u003e 类型提供了 \u003ccode\u003e.tmpdir\u003c/code\u003e、\u003ccode\u003e.extension\u003c/code\u003e 和 \u003ccode\u003e.path\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePair\u003c/code\u003e 提供了 \u003ccode\u003e.ACCEPTS\u003c/code\u003e、\u003ccode\u003e.Pair\u003c/code\u003e 和 \u003ccode\u003e.invert\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.Capture\u003c/code\u003e 方法对所有核心类型都有明确定义\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003e.ACCEPTS\u003c/code\u003e 在同素异形体上的语义\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFailure.self\u003c/code\u003e 使未处理的 \u003ccode\u003eFailure\u003c/code\u003e 爆发\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eThread.is-initial-thread\u003c/code\u003e: 我们是在初始线程中运行吗\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMatch\u003c/code\u003e 提供了 \u003ccode\u003e.Int\u003c/code\u003e 和 \u003ccode\u003e.actions\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Socket::Async\u003c/code\u003e 提供了 \u003ccode\u003e.socket-port\u003c/code\u003e 和 \u003ccode\u003e.peer-port\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePromise\u003c/code\u003e 提供了另一种构造函器 \u003ccode\u003e.kept\u003c/code\u003e 和 \u003ccode\u003e.broken\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eWhateverCode\u003c/code\u003e 提供了 \u003ccode\u003e.assuming\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eWhateverCode\u003c/code\u003e 和 \u003ccode\u003eBlock\u003c/code\u003e 提供了 \u003ccode\u003e.cando\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.:\u0026lt;…\u0026gt;\u003c/code\u003e 语法用于调用前缀运算符作为后缀\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$*KERNEL\u003c/code\u003e 提供了 \u003ccode\u003e.hostname\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNil\u003c/code\u003e 拥有定义的 \u003ccode\u003e.FALLBACK\u003c/code\u003e 特殊方法来返回 \u003ccode\u003eNil\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"新类型\"\u003e新类型\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eatomicint\u003c/code\u003e: 原生的 \u003ccode\u003eint\u003c/code\u003e, 大小可用于新的原子运算符\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLock::Async\u003c/code\u003e: 互斥的非阻塞机制\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEncoding::Registry\u003c/code\u003e: 管理可用的编码\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEncoding::Encoder\u003c/code\u003e: 编码器, 用于特定的编码\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEncoding::Decoder\u003c/code\u003e: 解码器, 用于特定的编码\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::CatHandle\u003c/code\u003e: 将多个只读的 \u003ccode\u003eIO::Handle\u003c/code\u003e 视同一个\u003c/li\u003e\n\u003cli\u003e原生的 \u003ccode\u003estr\u003c/code\u003e 数组\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSupplier::Preserving\u003c/code\u003e: 缓存的实时 \u003ccode\u003eSupply\u003c/code\u003e 工厂\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSemaphore\u003c/code\u003e: 控制多线程对共享资源的访问\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Special\u003c/code\u003e: 特殊I/O设备的路径 (例如 \u003ccode\u003eSTDOUT\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eExceptions::JSON\u003c/code\u003e 自定义异常处理程序的实现(可与\u003ccode\u003ePERL6_EXCEPTIONS_HANDLER\u003c/code\u003e 环境变量一起使用)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSeekType\u003c/code\u003e 枚举: \u003ccode\u003eIO::Handle.seek\u003c/code\u003e 中使用的值\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"新的变量\"\u003e新的变量\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e$*USAGE\u003c/code\u003e: 可在 \u003ccode\u003eMAIN\u003c/code\u003e 子例程中使用, 包含自动生成的 \u003ccode\u003eUSAGE\u003c/code\u003e 信息\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e%*SUB-MAIN-OPTS: 设置 \u003ccode\u003esub MAIN\u003c/code\u003e 的行为\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e%*SUB-MAIN-OPTS\u0026lt;named-anywhere\u0026gt;\u003c/code\u003e 允许将命名参数放在命令行的任何位置\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e$*COLLATION\u003c/code\u003e: 配置四个 Unicode 校对级别\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e$*INIT-INSTANT\u003c/code\u003e: 代表程序启动时间的 \u003ccode\u003eInstant\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e$*HOME\u003c/code\u003e: 用户的主目录, 如果存在的话\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e\u0026amp;*chdir\u003c/code\u003e: \u003ccode\u003eCallable\u003c/code\u003e 包含 \u003ccode\u003eIO::Path.chdir\u003c/code\u003e 的变体, 也设置进程的当前目录\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ePERL6_TEST_DIE_ON_FAIL\u003c/code\u003e 环境变量: 在第一次失败时停止测试套件\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ePERL6_EXCEPTIONS_HANDLER\u003c/code\u003e 环境变量: 指定自定义异常处理类\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"对边缘情况强转行为的澄清\"\u003e对边缘情况/强转行为的澄清\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eUInt\u003c/code\u003e 与 \u003ccode\u003eInt\u003c/code\u003e 类型对象智能匹配为 \u003ccode\u003eTrue\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esink\u003c/code\u003e 语句前缀爆炸 \u003ccode\u003eFailure\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义了1项和0项列表以及负参数和非整数参数的 \u003ccode\u003epermutations\u003c/code\u003e/\u003ccode\u003ecombinations\u003c/code\u003e 的行为\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;val\u003c/code\u003e、\u003ccode\u003eStr.Numeric\u003c/code\u003e 和其他 \u003ccode\u003eStr\u003c/code\u003e 数字转换方法在试图转换 Unicode \u003ccode\u003eNo\u003c/code\u003e 字符组或合成数字时会 \u003ccode\u003efail\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:42foo\u003c/code\u003e 冒号对快捷方式中不能使用合成数字\u003c/li\u003e\n\u003cli\u003e现在、\u003ccode\u003eEnumeration\u003c/code\u003e 可以作为一个数组形状指定器使用\u003c/li\u003e\n\u003cli\u003e含有空格的 \u003ccode\u003eStr\u003c/code\u003e 的数值转换现在返回 \u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e带空的模式参数的 \u003ccode\u003esamark\u003c/code\u003e, 简单地返回调用者\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.polymod\u003c/code\u003e 可用于 \u003ccode\u003elazy\u003c/code\u003e 但有限的除数列表\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003e.[*-0]\u003c/code\u003e 索引\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.rotor\u003c/code\u003e 中大于子列表的负数空隙抛出异常\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.rotor\u003c/code\u003e 的非 \u003ccode\u003eInt\u003c/code\u003e 参数被强转为 \u003ccode\u003eInt\u003c/code\u003e 参数\u003c/li\u003e\n\u003cli\u003e读取 \u003ccode\u003e/proc\u003c/code\u003e 文件时定义了 \u003ccode\u003e.lines\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义了字符串上后缀/前缀  \u003ccode\u003e++\u003c/code\u003e/\u003ccode\u003e--\u003c/code\u003e 中泰语数字的行为\u003c/li\u003e\n\u003cli\u003esunk \u003ccode\u003efor\u003c/code\u003e 里面的 \u003ccode\u003emap\u003c/code\u003e 被视为 sunk\u003c/li\u003e\n\u003cli\u003eSunk \u003ccode\u003efor\u003c/code\u003e 循环将上一条语句的方法调用值下沉\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBool\u003c/code\u003e 对象上的 \u003ccode\u003e.Int\u003c/code\u003e 返回一个 \u003ccode\u003eInt\u003c/code\u003e 对象\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esplice\u003c/code\u003e 可用于扩展数组\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eclassify\u003c/code\u003e 可以与 \u003ccode\u003eJunction\u003c/code\u003e 配合使用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.pairup\u003c/code\u003e on a type object returns an empty \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.pairup\u003c/code\u003e 总是返回一个 \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e拒绝接受  \u003ccode\u003eDate\u003c/code\u003e/\u003ccode\u003eDateTime\u003c/code\u003e 构造函数中的合成代码点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e⸨\u003c/code\u003e/\u003ccode\u003e⸩\u003c/code\u003e 对儿现在可以作为引号结构中的匹配字符使用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eArray\u003c/code\u003e 类型对象上的 \u003ccode\u003e.flat\u003c/code\u003e 简单地返回该类型对象\u003c/li\u003e\n\u003cli\u003e混合级 \u003ccode\u003eclassify\u003c/code\u003e 在 \u003ccode\u003eHash\u003c/code\u003e 上抛出异常\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eJunction\u003c/code\u003e 可以用于给 \u003ccode\u003eHash\u003c/code\u003e 指定多个键\u003c/li\u003e\n\u003cli\u003e给 \u003ccode\u003e.classify-list\u003c/code\u003e 的 \u003ccode\u003eCallable\u003c/code\u003e 现在保证每项只执行一次\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:delete\u003c/code\u003e 对 \u003ccode\u003eHash\u003c/code\u003e 类型对象进行关联查找时返回 \u003ccode\u003eNil\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eTest.pm6 中的 \u003ccode\u003e\u0026amp;is-deeply\u003c/code\u003e 会自动 \u003ccode\u003e.cache\u003c/code\u003e 作为参数的 \u003ccode\u003eSeq\u003c/code\u003e, 并使用返回的 \u003ccode\u003eList\u003c/code\u003e 进行测试\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eComplex.new()\u003c/code\u003e 给出 \u003ccode\u003e\u0026lt;0+0i\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eInt.new\u003c/code\u003e 现在可以保证构建一个新的 \u003ccode\u003eInt\u003c/code\u003e (而不是, 比如说, 从常量缓存中重用一个)\u003c/li\u003e\n\u003cli\u003e定义了一个参数(1-arg)版本的 \u003ccode\u003e\u0026amp;infix:\u0026lt;=:=\u0026gt;\u003c/code\u003e 和 \u003ccode\u003e\u0026amp;infix:\u0026lt;eqv\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e如果直接或间接地调用 \u003ccode\u003e.BIND-POS\u003c/code\u003e、\u003ccode\u003e.BIND-KEY\u003c/code\u003e、\u003ccode\u003e.ASSIGN-POS\u003c/code\u003e、\u003ccode\u003e.ASSIGN-KEY\u003c/code\u003e、\u003ccode\u003e.STORE\u003c/code\u003e、\u003ccode\u003e.push\u003c/code\u003e、\u003ccode\u003e.append\u003c/code\u003e、\u003ccode\u003e.unshift\u003c/code\u003e、\u003ccode\u003e.prepend\u003c/code\u003e、\u003ccode\u003eNil\u003c/code\u003e 类型现在抛出异常\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNil.ord\u003c/code\u003e 返回一个空的 \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNil.chrs\u003c/code\u003e 返回一个 \u003ccode\u003e\u0026quot;\\0\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNum.new\u003c/code\u003e 强转参数为 \u003ccode\u003eNum\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003einfix:\u0026lt;Z\u0026gt;()\u003c/code\u003e 返回一个空的 \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.comb\u003c/code\u003e 总是返回一个 \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e用 \u003ccode\u003e\u0026amp;infix:\u0026lt;+\u0026gt;\u003c/code\u003e 化简一个项, 简单地返回该项\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e()[0]\u003c/code\u003e 返回 \u003ccode\u003eNil\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e允许在(可能是无限的) \u003ccode\u003eSeq\u003c/code\u003e 上使用 Regex 智能匹配\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003eRange\u003c/code\u003e 对象的智能匹配\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSet\u003c/code\u003e 转换为\u003ccode\u003eMix\u003c/code\u003e/\u003ccode\u003eBag\u003c/code\u003e 不再有 \u003ccode\u003eBool\u003c/code\u003e 权重\u003c/li\u003e\n\u003cli\u003e当一个或多个操作数为 \u003ccode\u003e0\u003c/code\u003e 时、\u003ccode\u003egcd\u003c/code\u003e 是有定义的\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edefined\u003c/code\u003e 例程中的 \u003ccode\u003eJunction\u003c/code\u003e 自动线程化\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esum\u003c/code\u003e 可以处理含有 \u003ccode\u003eJunction\u003c/code\u003e 的列表\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGrammar.parse\u003c/code\u003e 让顶级 \u003ccode\u003eregex\u003c/code\u003e 回溯\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eU+2212 MINUS SIGN [Sm] (-)\u003c/code\u003e 现在得到更多结构的支持, 如 \u003ccode\u003eStr.Numeric\u003c/code\u003e 和 \u003ccode\u003e\u0026amp;val\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eArity-1 \u003ccode\u003e\u0026amp;infix:\u0026lt;~\u0026gt;\u003c/code\u003e 与 \u003ccode\u003eBlob\u003c/code\u003e 可以一起工作\u003c/li\u003e\n\u003cli\u003e在签名中, 所有的 \u003ccode\u003eNumeric\u003c/code\u003e 字面值都支持作为值字面值\u003c/li\u003e\n\u003cli\u003e正则表达式中的 \u003ccode\u003e\\b\u003c/code\u003e 和 \u003ccode\u003e\\B\u003c/code\u003e 抛出 \u003ccode\u003eX::Obsolete\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTrue\u003c/code\u003e 和 \u003ccode\u003eFalse\u003c/code\u003e 作为签名中的值字面量发出警告\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.sort\u003c/code\u003e 和 \u003ccode\u003eIO::Spec::Unix.path\u003c/code\u003e 的返回值总是 \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRange\u003c/code\u003e 对象上的 Out-of-range \u003ccode\u003e.AT-POS\u003c/code\u003e 返回 \u003ccode\u003eNil\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e对于不存在的键、\u003ccode\u003ePair.AT-KEY\u003c/code\u003e 返回 \u003ccode\u003eNil\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e所有的 \u003ccode\u003eCool\u003c/code\u003e 类型都提供了 \u003ccode\u003e.Rat\u003c/code\u003e/\u003ccode\u003e.FatRat\u003c/code\u003e 强转器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path\u003c/code\u003e 文件测试不缓存先前测试执行的结果\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSeq\u003c/code\u003e eqv \u003ccode\u003eList\u003c/code\u003e 仅根据类型不匹配就定为 \u003ccode\u003eFalse\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cdel\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e在 \u003ccode\u003eHash \u003c/code\u003e、\u003ccode\u003eHash \u003c/code\u003e 和 \u003ccode\u003eQuantHash\u003c/code\u003e 上, 来自 \u003ccode\u003e.kv\u003c/code\u003e、\u003ccode\u003e.values\u003c/code\u003e 和 \u003ccode\u003e.pair\u003c/code\u003e 序列的值是可写的\u003c/del\u003e 参见 \u003ca href=\"https://github.com/Raku/roast/issues/614\"\u003eRaku/roast#614\u003c/a\u003e 和 \u003ca href=\"https://github.com/Raku/doc/issues/3519\"\u003e#3519\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt;∘\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;infix:\u0026lt;o\u0026gt;\u003c/code\u003e 保留 LHF 的 \u003ccode\u003e.of\u003c/code\u003e 和 RHS 的 \u003ccode\u003e.arity\u003c/code\u003e 和 \u003ccode\u003e.count\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e完善了 regex 运算符副词中的可接受参数(例如:\u003ccode\u003e:in(…)\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e完善了 \u003ccode\u003eIO::Handle.open\u003c/code\u003e 中可接受的参数组合\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path.Str\u003c/code\u003e 不包含 \u003ccode\u003e.CWD\u003c/code\u003e 属性的值\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path\u003c/code\u003e 类型拒绝带有  \u003ccode\u003enul\u003c/code\u003e 字节 (\u003ccode\u003e\u0026quot;\\0\u0026quot;\u003c/code\u003e) 的路径\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Pipe\u003c/code\u003e 的 \u003ccode\u003e.path\u003c/code\u003e/\u003ccode\u003e.IO\u003c/code\u003e 返回一个 \u003ccode\u003eIO::Path\u003c/code\u003e 类型对象\u003c/li\u003e\n\u003cli\u003e如果目的路径和源路径是一样的 \u003ccode\u003eIO::Path\u003c/code\u003e 的 \u003ccode\u003e.copy\u003c/code\u003e/\u003ccode\u003e.move\u003c/code\u003e 会 \u003ccode\u003efail\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edir\u003c/code\u003e 创建的 \u003ccode\u003eIO::Path\u003c/code\u003e 绝对性由调用者控制\u003c/li\u003e\n\u003cli\u003e更多定义的边缘行为、\u003ccode\u003eCallable \u003c/code\u003e 处理、\u003ccode\u003e. defined\u003c/code\u003e 调用, 以及 \u003ccode\u003e\u0026amp;infix:\u0026lt;andthen\u0026gt;\u003c/code\u003e、\u003ccode\u003e\u0026amp;infix:\u0026lt;orelse\u0026gt;\u003c/code\u003e 和 \u003ccode\u003e\u0026amp;infix:\u0026lt;notandthen\u0026gt;\u003c/code\u003e 操作符的链接\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSeq\u003c/code\u003e 的禅切不缓存它们\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eList.Capture\u003c/code\u003e 将任何包含的 \u003ccode\u003ePair\u003c/code\u003e 对象的键字符串化\u003c/li\u003e\n\u003cli\u003e带处理的 \u003ccode\u003eFailure\u003c/code\u003e 参数的 \u003ccode\u003e\u0026amp;fail\u003c/code\u003e 把它标记为是未处理的\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euse lib\u003c/code\u003e 接受 \u003ccode\u003eIO::Path\u003c/code\u003e 对象\u003c/li\u003e\n\u003cli\u003e锚点 \u003ccode\u003e^\u003c/code\u003e、\u003ccode\u003e^^\u003c/code\u003e、\u003ccode\u003e$\u003c/code\u003e 和 \u003ccode\u003e$$\u003c/code\u003e 在环视中有效\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGrammar.made\u003c/code\u003e 支持类型对象\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.isa\u003c/code\u003e 支持 \u003ccode\u003esubset \u003c/code\u003e 类型对象\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:delete\u003c/code\u003e 可用于惰性数组\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt;eqv\u0026gt;\u003c/code\u003e 可以在某些情况下对惰性参数起作用\u003c/li\u003e\n\u003cli\u003e动态查询(\u003ccode\u003e::(...)\u003c/code\u003e) 是限制性的 regex 语法, 并且需要 \u003ccode\u003euse MONKEY-SEE-NO-EVAL\u003c/code\u003e 的许可\u003c/li\u003e\n\u003cli\u003e定义了带孔数组的 \u003ccode\u003e.Slip\u003c/code\u003e 和 \u003ccode\u003e.List\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePromise.in\u003c/code\u003e/\u003ccode\u003e.at\u003c/code\u003e 和 \u003ccode\u003eSupply.interval\u003c/code\u003e 可以用零值和负值工作\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSupply.interval\u003c/code\u003e 最小值为 \u003ccode\u003e0.001\u003c/code\u003e；较低值被处理为 \u003ccode\u003e0.001\u003c/code\u003e, 并发出警告#, 参见 \u003ca href=\"https://github.com/Raku/doc/pull/2649\"\u003ehttps://docs.perl6.org/type/Supply#method_interval PR [#2649]\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSupply\u003c/code\u003e 提供了 \u003ccode\u003e.Seq\u003c/code\u003e、\u003ccode\u003e.list\u003c/code\u003e 和 \u003ccode\u003e.zip\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e可以在构建方法中绑定到原生类型属性\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eWhateverCode\u003c/code\u003e 传播 \u003ccode\u003euse fatal\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esay\u003c/code\u003e、\u003ccode\u003enote\u003c/code\u003e、\u003ccode\u003eput\u003c/code\u003e、\u003ccode\u003eprint\u003c/code\u003e 和 \u003ccode\u003eprintf\u003c/code\u003e 例程自动线程化 \u003ccode\u003eJunction\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Handle.eof\u003c/code\u003e 值在 \u003ccode\u003e.seek\u003c/code\u003e 过终点后再返回时也会相应改变\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003e.succ'、\u003c/code\u003e.pred\u003ccode\u003e和\u003c/code\u003e.Bool` 的同质异形体\u003c/li\u003e\n\u003cli\u003e在核心 \u003ccode\u003eNumeric\u003c/code\u003e 上定义了 \u003ccode\u003e.Bridge\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cdel\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e在核心 \u003ccode\u003eNumeric\u003c/code\u003e 的类型对象上定义了 \u003ccode\u003e.Numeric\u003c/code\u003e/\u003ccode\u003e.Real\u003c/code\u003e\u003c/del\u003e\u003c/li\u003e\n\u003cli\u003e定义了关于零分母有理数的 \u003ccode\u003eRational.Bool\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esay\u003c/code\u003e/\u003ccode\u003enote\u003c/code\u003e 保证在 \u003ccode\u003eStr\u003c/code\u003e 的子类上调用 \u003ccode\u003e.gist\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003eJunction.Str\u003c/code\u003e 返回 \u003ccode\u003eJunction\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003eJunction.gist\u003c/code\u003e/\u003ccode\u003e.perl\u003c/code\u003e 返回一个 \u003ccode\u003eStr\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMap\u003c/code\u003e/\u003ccode\u003eHash\u003c/code\u003e 的 \u003ccode\u003e.list\u003c/code\u003e/\u003ccode\u003e.cache\u003c/code\u003e 返回一个 \u003ccode\u003eList\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003e.round\u003c/code\u003e 的返回类型\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003eEnumeration:D\u003c/code\u003e  不  \u003ccode\u003e.ACCEPT\u003c/code\u003e 一个 \u003ccode\u003eEnumeration:U\u003c/code\u003e , 参见 \u003ca href=\"https://github.com/rakudo/rakudo/issues/2073\"\u003erakudo/rakudo#2073\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"杂项\"\u003e杂项\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIO::ArgFiles\u003c/code\u003e 类型只是 \u003ccode\u003eIO::CatHandle\u003c/code\u003e 的一个空的子类\u003c/li\u003e\n\u003cli\u003e对常量的约束\n\u003cul\u003e\n\u003cli\u003e约束是完全强制的\u003c/li\u003e\n\u003cli\u003e试图在常量上使用参数化类型约束(例如使用 \u003ccode\u003emy Foo constant @int\u003c/code\u003e) 会引发 \u003ccode\u003eX::ParametricConstant\u003c/code\u003e 异常\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePod\u003c/code\u003e \u003ccode\u003e=defn\u003c/code\u003e(定义列表)指令可用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePod\u003c/code\u003e 提供了 \u003ccode\u003e:numbered\u003c/code\u003e 配置键\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.^ver\u003c/code\u003e、\u003ccode\u003e.^auth\u003c/code\u003e 和 \u003ccode\u003e.^name\u003c/code\u003e 元方法在 \u003ccode\u003emodule\u003c/code\u003e 中可用, 而在 \u003ccode\u003epackage\u003c/code\u003e 中则没有, 这是设计上的原因\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eqww\u0026lt;…\u0026gt;\u003c/code\u003e 中支持花哨的引号(\u003ccode\u003e’…’\u003c/code\u003e、\u003ccode\u003e“…”\u003c/code\u003e、\u003ccode\u003e｢…｣\u003c/code\u003e 和变体)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt; \u0026gt;\u003c/code\u003e 支持查找自动生成的 \u003ccode\u003eCallables\u003c/code\u003e (例如: \u003ccode\u003e\u0026amp;infix:\u0026lt;XX\u0026gt;\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e使用命名的 \u003ccode\u003eanon\u003c/code\u003e 子例程不再产生重声明警告\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e::?MODULE\u003c/code\u003e/\u003ccode\u003e$?MODULE\u003c/code\u003e 变量的扩展规范\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esub MAIN\u003c/code\u003e 可以接受一个参数上的 \u003ccode\u003eEnumeration\u003c/code\u003e 类型约束和 \u003ccode\u003ewhere\u003c/code\u003e 子句\u003c/li\u003e\n\u003cli\u003e笑脸型约束可以用在子集上\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estart\u003c/code\u003e 块和 thunks 得到新的 \u003ccode\u003e$/\u003c/code\u003e 和 \u003ccode\u003e$!\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义了与列表关联运算符一起使用的 \u003ccode\u003eR\u003c/code\u003e 元运算符\u003c/li\u003e\n\u003cli\u003e类型强转可以用在签名返回类型约束中\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt;x\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;infix:\u0026lt;x\u0026gt;\u003c/code\u003e 抛出了 \u003ccode\u003e-Inf\u003c/code\u003e/\u003ccode\u003eNaN\u003c/code\u003e 重复参数\u003c/li\u003e\n\u003cli\u003e字面结构 \u003ccode\u003eput\u003c/code\u003e 和 \u003ccode\u003eput for\u003c/code\u003e 抛出, 需要使用括号\u003c/li\u003e\n\u003cli\u003e扩大了 Unicode 例程和功能的规范覆盖面-将覆盖面升级到 Unicode 第11版\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$.\u003c/code\u003e 方法调用语法能用在元方法中了\u003c/li\u003e\n\u003c/ul\u003e\n","text":"问题 在 6.d 版本中, 很多东西都发生了变化, 我们至少需要发布一个版本。这里有个列表。然而, 覆盖面是不完整的。弃用通知采取了不同的形式, 一些新的类型和方法在那里, 一些则没有\u0026hellip;\u0026hellip;\n用 #2632 引用这个问题, 并检查项目, 当你的工作, 无论是通过改变后的文档, 看到没有变化, 需要做它。在这种情况下, 请通过评论或如何解释为什么是这种情况。\n版本控制的变更  [6.d] \u0026amp;await 在等待的时候不再阻塞线程 [6.d] whenever 不在 react 抛出的词法作用域内 [6.d] 在 sub MAIN 里面的 $*ARGFILES 总是由 $*IN 馈入 [6.d] 结构(字面上的) $()、@() 和 %() 不复存在 [6.d] 带有 :D/:U 类型约束的变量默认为约束类型的类型对象(例如, 你可以在它们身上使用 .new) [6.d] start 块在 sink 上下文中附加异常处理程序 ~~**[6.d]** 例程必须使用 return-rw 来返回一个 Proxy, 即使例程被标记为 is raw 或 is rw~~ [6.d] 原生的 num 类型默认为 0e0 而不是 NaN [6.d] 在子程序名中, 保留了键名为 sym 的冒号对（如:sym\u0026lt;foo\u0026gt;）, 以备将来使用  废弃 这些方法在 6.d 语言中已被废弃, 并将在 6.e 中被删除。实现者可以选择发出弃用警告, 或者在 6.e 版本发布后更长的时间内提供这些方法。\n 使用 '-' (单连字符)作为 \u0026amp;open 的特殊路径, 表示特殊的句柄(使用 IO::Special 对象代替) IO::Handle.slurp-rest (使用 .slurp 代替) Any.flatmap (使用.flat 和 .map 方法的组合来代替) Cool.path (使用 .IO 代替) Pair.freeze (使用去容器化的参数的 Pair.new 来代替) Str.subst-mutate (使用带有 .= 方法调用赋值元运算符的 Str.subst 代替) Rational.norm (现在 Rational 类型必须在创建时标准化) IO::Path.child (使用 .add 代替) \u0026amp;undefine (直接分配 Empty/Nil 代替) :count \u0026amp;lines/Str.lines 例程上的参数(使用所返回的 Seq 上的 .elems 代替) \u0026amp;is_approx in Test.pm6 (使用与 \u0026amp;is-approx 非常相似的行为来代替)  新的行为  通过新的可定义的 \u0026amp;RUN-MAIN、\u0026amp;ARGS-TO-CAPTURE 和 \u0026amp;GENERATE-USAGE 子例程改善 sub MAIN 的自定义处理 % 变量中的 QuantHash/Map 和 @ 变量中的 List 可以用 is 特性来声明（例如，my %h is Set） 新的 \u0026lt;ww\u0026gt; regex 规则: 只在单词内匹配 循环可以从上一条语句的值中产生一个值的列表 循环中的 next/last 收集其最后的语句值, 对它们运行的迭代返回 Empty .perl 可以在消耗过的 Seq、多维数组、Date 和 CallFrame 上调用 .gist 可以在 Attribute 上调用 对自动生成的 USAGE 信息进行了大量改进 is hidden-from-USAGE 特性，从自动生成的 USAGE 消息中隐藏 sub MAIN 候选者 Parameter.perl 包括可内省的默认值 %*ENV 值是同素异形的 尝试使用变量 $;、$,、$.、$\\、$(、$)、$\u0026lt;、$\u0026gt;、$/、$\\、$[、$-、$+ 和 $@ 会抛出 X::Syntax::Perl5Var 默认的 Hash.keyof 返回一个 Str(Any) 强转类型对象 非 ASCII 数字可以在 :42foo 冒号对快捷方式中使用 StrDistance 字符串化为 .after 字符串 更明确的 Pod 表格格式 Enumeration.enums 返回一个 Map 各种整数类型的 .Range 返回它们支持的值的范围 min/max 例程也适用于 Hash Signature 字面值可以包含字符串/数字字面值以及调用者标记 List.invert 通过所需的 Pair 绑定映射, 导致潜在的类型检查失败 :exists 可以与多维关联下标一起使用 动态创建的列表可以用来定义一个枚举 在 .first 中, Junction 可以作为匹配器使用 原生属性可以作为参数中的绑定目标 Proc 可以与其他 Proc 中的 IO::Pipe 一起工作 类型数组可以用 my SomeType @array 和 my @array of SomeType 创建 当把 Mixy 强转为 Setty/Baggy  时, 负数权重的项将被删除 :nth 副词在 m// 上接受一个 Junction 作为参数 CX::Warn' 和 CX::Done可以在CONTROL` phaser 中捕获 next 可用于 whenever 中 require 符号不再过境性地暴露出来 通过 {...} 进行多维访问, 类似于 [...] 的工作方式 在 END 时间打开的任何手柄都会自动关闭 在缓存的 Seq 上, 当 \u0026amp;infix:\u0026lt;eqv\u0026gt;、.Slip、.join、.List、.list、.eager、.Array 和 .is-lazy 被调用时, 就会使用缓存列表 IO::Handle.encoding 以 Nil 表示切换到二进制模式 is default 特质与属性一起工作 在多重分派中, 带有 is rw 特性的参数被认为比没有特性的参数窄 Array、Blob 和 Map 的 .gist 被裁剪成100个元素 新的 for 语句修饰符 hyper for、race for 和 lazy for for 循环自动序列化 RaceSeq/HyperSeq；使用新的 for 语句修饰符hyper for/race for避免 \u0026amp;infix:\u0026lt;does\u0026gt; 可用于 RHS 上的非组合实例 数值比较器可以与 DateTime  对象一起使用 Pod 保留空白类型 定义了带 @、% 和 \u0026amp; 魔符常数的语义  Math  Rational 总是在创建时被化简, 并在其一生中保持不变 Inf、Inf 和 NaN 可以分别用 \u0026lt;-1/0\u0026gt;、\u0026lt;1/0\u0026gt; 和 \u0026lt;0/0\u0026gt; 表示, 通过Rational 类型进行舍去。零分母 Rational 被标准化为这三个值之一 在 ±Inf 和 NaN 上调用 .Int, 会抛出异常 改进了 Num 运算符和数学函数的 IEEE 754-2008 合规性 负零 Num(-0e0)被所有例程和语法结构正确处理 Num 类型的字符串化必须是可舍弃到原始 Num 的 定义了涉及零的 Complex  指数 .expmod 中的负数幂有效  Sets、Bags、Mixes(aka QuantHashes)和集合运算符  Set 运算符可以用在任何对象上, 在需要的时候会被强转  所以, 不需要也不希望有任何预先的强转 如果没有 QuantHash 就能实现所需的功能, 那么 Set 运算符可以自由地不创建任何 QuantHash   对不同类型的 QuantHashes 的 Set 操作将强转到最自由的形式（Set -\u0026gt; Bag -\u0026gt; Mix） 集合运算符的 set_precedes 家族( (\u0026lt;+)、≼、(\u0026gt;+)、≽) 已被移除  曾经是子集运算符的 Baggy 形式 QuantHash 升级为最自由的形式, 所以 (\u0026lt;=)、⊆、(\u0026gt;=)、⊇ 做正确的事情   .classify-list 方法可用于 Baggy 类型 .categorize-list 方法可用于 Baggy 类型 .invert 方法可用于核心 QuantHash 类型 .antipairs 方法可用于 QuantHash 类型 QuantHash 类型有 .new-from-pairs 和将一个 QuantHash 类型转换为另一个 QuantHash 类型的方法(例如 Set 类型的 .Bag 方法) QuantHash 类型上的 .hash 对键值进行了字符串化  新的形参和实参  Date.new 接受一个 :\u0026amp;formatter .first 可以接受 :kv unique 和 .repeated 可以接受 :\u0026amp;as 和 :\u0026amp;with Test.pm6 中的 \u0026amp;plan 可以接受 :skip-all \u0026amp;run/\u0026amp;shell 可以接受 :merge \u0026amp;note 可以在没有参数的情况下调用 open 接受 :$out-buffer IO::Path.resolve 可以接受 :completely IO::Path.parent 可以接受一个 Int 表示父级 Proc::Async.new 吞噬位置参数 Signature.ACCEPTS 接受非 Signature/Capture 参数 \u0026amp;EVAL 可以接受一个 Blob Promise.keep/.break 可以在没有参数的情况下调用 原生数组上的 .sum 可以接受 :wrap is required 现在可以接受一个表示理由的参数 IO::Socket::Async.listen 可以绑定到端口 0 以向操作系统申请免费端口 .encode 可以接受 :translate-nl  新的例程和运算符  新的 atomicint Unicode 运算符和 ASCII 等价物, 保证线程安全, 原子操作: \u0026amp;infix:\u0026lt;⚛=\u0026gt;/\u0026amp;atomic-assign、\u0026amp;prefix:\u0026lt;⚛\u0026gt;/\u0026amp;atomic-fetch、 \u0026amp;prefix:\u0026lt;++⚛\u0026gt;/\u0026amp;atomic-inc-fetch、\u0026amp;postfix:\u0026lt;⚛++\u0026gt;/\u0026amp;atomic-fetch-inc、 \u0026amp;prefix:\u0026lt;--⚛\u0026gt;/\u0026amp;atomic-dec-fetch、\u0026amp;postfix:\u0026lt;⚛--\u0026gt;/\u0026amp;atomic-fetch-dec、 \u0026amp;infix:\u0026lt;⚛-=\u0026gt;/\u0026amp;infix:\u0026lt;⚛−=\u0026gt;/\u0026amp;atomic-fetch-sub 和 \u0026amp;infix:\u0026lt;⚛+=\u0026gt;/\u0026amp;atomic-fetch-add \u0026amp;cas: 原子比较与交换 ≤、≥ 和 ≠ 运算符是 Unicode 运算符, 分别等价于 \u0026lt;=、\u0026gt;= 和 != \u0026amp;infix:\u0026lt;unicmp\u0026gt;/\u0026amp;infix:\u0026lt;coll\u0026gt;: \u0026amp;infix:\u0026lt;cmp\u0026gt; 的替代行为 TR///: tr/// 的非变异版本 submethod TWEAK: 与 BUILD 类似, 除了它与属性默认值兼容之外 \u0026amp;duckmap: 应用 \u0026amp;callable 到每个元素上 \u0026amp;deepmap: 应用 \u0026amp;callable 到每个元素上, 下降到 Iterable 中 \u0026amp;take-rw: 像 \u0026amp;take 一样, 但有一个可写的容器 \u0026amp;indir: 在给定的 $*CWD 中执行代码 \u0026amp;spurt: 参见 IO::Path.spurt \u0026amp;prompt: 提示用户输入 uniprops: uniprop 的多字符版本 symlink: 建立文件符号链接 link: 创建文件硬连接 .hyper/.race: 并行处理值的列表 Seq.from-loop: 从 Callable 生产一个 Seq Str.uniparse: 将一个或多个 Unicode 字符名解析为实际字符 Str.parse-base: Int.base 操作的反转 IO::Path 提供了 .ACCEPTS、.SPEC、.CWD、.Numeric、.add、.extension、.mode 和各种文件测试、.parts、.sibling 和 .spurt IO::Handle 提供了 .READ、.WRITE、.EOF、.DESTROY, .readchars、.flush、.lock、.unlock、.out-buffer、.tell, .say、.slurp、.seek、.printf、.print-nl 和 .watch IO::Pipe 提供了 .proc Iterator 提供了 .skip-one、.skip-at-least 和 .skip-at-least-pull-one Mu.emit: \u0026amp;emit 的方法形式 Test.pm6 模块中的 \u0026amp;fails-like: 允许测试失败 Test.pm6 模块中的 \u0026amp;bail-out: 退出失败的测试套件 Test.pm6 模块中的 \u0026amp;is-approx: 测试一个数字近似于另一个 Buf 拥有 .allocate、.reallocate、.append、.push、.pop、.splice、.subbuf-rw、.prepend 和 .unshift 方法 Range 支持了 .rand Backtrace 拥有方法 .map、.flat、.concise 和 .summary .classify-list 方法可用于 Hash 类型 .categorize-list 方法可用于 Hash 类型 Code.of: 返回返回类型约束 Code.line/.file: 返回定义的行/文件 Proc::Async 提供了 .Supply、.ready、.pid、.bind-stdin、.bind-stdout 和 .bind-stderr Proc.command/Proc::Async.command: 我们要执行的命令 Proc 提供了 .signal、.pid 和 .encoding Complex 提供了 .cis、.reals、.ceiling、.floor、.round、.truncate 和 .abs 方法, 并可以使用 \u0026lt;=\u0026gt; 进行比较(只要虚部可以忽略不计) DateTime 提供了 .offset-in-hours、.hh-mm-ss 和 .Date DateTime 可以使用 \u0026lt;=\u0026gt; 运算符和其它 DateTime 对象进行比较 Date 提供了 .DateTime 方法 \u0026amp;infix:\u0026lt;+\u0026gt;/\u0026amp;infix:\u0026lt;-\u0026gt; 可以被 Duration、DateTime 和 Real 类型调用 Enumeration 提供了 .Int、.pred、.succ、.kv 和 .pair .Date 可以在 Instant 上调用 Junction 能使用 Junction.new 调用来创建 List 类型拥有 .to 和 .from 方法 Map type 提供了 Int 方法, 返回 pair 的数量 Any.skip: 跳过列表中的值 Any.batch: .rotor 的更基本的表兄弟 Mu.iterator: 为一个列表中的值生成一个 Iterator IO::Spec::* 类型提供了 .tmpdir、.extension 和 .path Pair 提供了 .ACCEPTS、.Pair 和 .invert .Capture 方法对所有核心类型都有明确定义 定义了 .ACCEPTS 在同素异形体上的语义 Failure.self 使未处理的 Failure 爆发 Thread.is-initial-thread: 我们是在初始线程中运行吗 Match 提供了 .Int 和 .actions IO::Socket::Async 提供了 .socket-port 和 .peer-port Promise 提供了另一种构造函器 .kept 和 .broken WhateverCode 提供了 .assuming WhateverCode 和 Block 提供了 .cando .:\u0026lt;…\u0026gt; 语法用于调用前缀运算符作为后缀 $*KERNEL 提供了 .hostname Nil 拥有定义的 .FALLBACK 特殊方法来返回 Nil  新类型  atomicint: 原生的 int, 大小可用于新的原子运算符 Lock::Async: 互斥的非阻塞机制 Encoding::Registry: 管理可用的编码 Encoding::Encoder: 编码器, 用于特定的编码 Encoding::Decoder: 解码器, 用于特定的编码 IO::CatHandle: 将多个只读的 IO::Handle 视同一个 原生的 str 数组 Supplier::Preserving: 缓存的实时 Supply 工厂 Semaphore: 控制多线程对共享资源的访问 IO::Special: 特殊I/O设备的路径 (例如 STDOUT) Exceptions::JSON 自定义异常处理程序的实现(可与PERL6_EXCEPTIONS_HANDLER 环境变量一起使用) SeekType 枚举: IO::Handle.seek 中使用的值  新的变量   $*USAGE: 可在 MAIN 子例程中使用, 包含自动生成的 USAGE 信息\n  %*SUB-MAIN-OPTS: 设置 sub MAIN 的行为\n %*SUB-MAIN-OPTS\u0026lt;named-anywhere\u0026gt; 允许将命名参数放在命令行的任何位置    $*COLLATION: 配置四个 Unicode 校对级别\n  $*INIT-INSTANT: 代表程序启动时间的 Instant\n  $*HOME: 用户的主目录, 如果存在的话\n  \u0026amp;*chdir: Callable 包含 IO::Path.chdir 的变体, 也设置进程的当前目录\n  PERL6_TEST_DIE_ON_FAIL 环境变量: 在第一次失败时停止测试套件\n  PERL6_EXCEPTIONS_HANDLER 环境变量: 指定自定义异常处理类\n  对边缘情况/强转行为的澄清  UInt 与 Int 类型对象智能匹配为 True sink 语句前缀爆炸 Failure 定义了1项和0项列表以及负参数和非整数参数的 permutations/combinations 的行为 \u0026amp;val、Str.Numeric 和其他 Str 数字转换方法在试图转换 Unicode No 字符组或合成数字时会 fail :42foo 冒号对快捷方式中不能使用合成数字 现在、Enumeration 可以作为一个数组形状指定器使用 含有空格的 Str 的数值转换现在返回 0 带空的模式参数的 samark, 简单地返回调用者 .polymod 可用于 lazy 但有限的除数列表 定义了 .[*-0] 索引 .rotor 中大于子列表的负数空隙抛出异常 .rotor 的非 Int 参数被强转为 Int 参数 读取 /proc 文件时定义了 .lines 定义了字符串上后缀/前缀 ++/-- 中泰语数字的行为 sunk for 里面的 map 被视为 sunk Sunk for 循环将上一条语句的方法调用值下沉 Bool 对象上的 .Int 返回一个 Int 对象 splice 可用于扩展数组 classify 可以与 Junction 配合使用 .pairup on a type object returns an empty Seq .pairup 总是返回一个 Seq 拒绝接受 Date/DateTime 构造函数中的合成代码点 ⸨/⸩ 对儿现在可以作为引号结构中的匹配字符使用 Array 类型对象上的 .flat 简单地返回该类型对象 混合级 classify 在 Hash 上抛出异常 Junction 可以用于给 Hash 指定多个键 给 .classify-list 的 Callable 现在保证每项只执行一次 :delete 对 Hash 类型对象进行关联查找时返回 Nil Test.pm6 中的 \u0026amp;is-deeply 会自动 .cache 作为参数的 Seq, 并使用返回的 List 进行测试 Complex.new() 给出 \u0026lt;0+0i\u0026gt; Int.new 现在可以保证构建一个新的 Int (而不是, 比如说, 从常量缓存中重用一个) 定义了一个参数(1-arg)版本的 \u0026amp;infix:\u0026lt;=:=\u0026gt; 和 \u0026amp;infix:\u0026lt;eqv\u0026gt; 如果直接或间接地调用 .BIND-POS、.BIND-KEY、.ASSIGN-POS、.ASSIGN-KEY、.STORE、.push、.append、.unshift、.prepend、Nil 类型现在抛出异常 Nil.ord 返回一个空的 Seq Nil.chrs 返回一个 \u0026quot;\\0\u0026quot; Num.new 强转参数为 Num infix:\u0026lt;Z\u0026gt;() 返回一个空的 Seq .comb 总是返回一个 Seq 用 \u0026amp;infix:\u0026lt;+\u0026gt; 化简一个项, 简单地返回该项 ()[0] 返回 Nil 允许在(可能是无限的) Seq 上使用 Regex 智能匹配 定义了 Range 对象的智能匹配 Set 转换为Mix/Bag 不再有 Bool 权重 当一个或多个操作数为 0 时、gcd 是有定义的 defined 例程中的 Junction 自动线程化 sum 可以处理含有 Junction 的列表 Grammar.parse 让顶级 regex 回溯 U+2212 MINUS SIGN [Sm] (-) 现在得到更多结构的支持, 如 Str.Numeric 和 \u0026amp;val Arity-1 \u0026amp;infix:\u0026lt;~\u0026gt; 与 Blob 可以一起工作 在签名中, 所有的 Numeric 字面值都支持作为值字面值 正则表达式中的 \\b 和 \\B 抛出 X::Obsolete True 和 False 作为签名中的值字面量发出警告 .sort 和 IO::Spec::Unix.path 的返回值总是 Seq Range 对象上的 Out-of-range .AT-POS 返回 Nil 对于不存在的键、Pair.AT-KEY 返回 Nil 所有的 Cool 类型都提供了 .Rat/.FatRat 强转器 IO::Path 文件测试不缓存先前测试执行的结果 Seq eqv List 仅根据类型不匹配就定为 False 在 Hash 、Hash  和 QuantHash 上, 来自 .kv、.values 和 .pair 序列的值是可写的 参见 Raku/roast#614 和 #3519 \u0026amp;infix:\u0026lt;∘\u0026gt;/\u0026amp;infix:\u0026lt;o\u0026gt; 保留 LHF 的 .of 和 RHS 的 .arity 和 .count 完善了 regex 运算符副词中的可接受参数(例如::in(…)) 完善了 IO::Handle.open 中可接受的参数组合 IO::Path.Str 不包含 .CWD 属性的值 IO::Path 类型拒绝带有 nul 字节 (\u0026quot;\\0\u0026quot;) 的路径 IO::Pipe 的 .path/.IO 返回一个 IO::Path 类型对象 如果目的路径和源路径是一样的 IO::Path 的 .copy/.move 会 fail dir 创建的 IO::Path 绝对性由调用者控制 更多定义的边缘行为、Callable  处理、. defined 调用, 以及 \u0026amp;infix:\u0026lt;andthen\u0026gt;、\u0026amp;infix:\u0026lt;orelse\u0026gt; 和 \u0026amp;infix:\u0026lt;notandthen\u0026gt; 操作符的链接 Seq 的禅切不缓存它们 List.Capture 将任何包含的 Pair 对象的键字符串化 带处理的 Failure 参数的 \u0026amp;fail 把它标记为是未处理的 use lib 接受 IO::Path 对象 锚点 ^、^^、$ 和 $$ 在环视中有效 Grammar.made 支持类型对象 .isa 支持 subset  类型对象 :delete 可用于惰性数组 \u0026amp;infix:\u0026lt;eqv\u0026gt; 可以在某些情况下对惰性参数起作用 动态查询(::(...)) 是限制性的 regex 语法, 并且需要 use MONKEY-SEE-NO-EVAL 的许可 定义了带孔数组的 .Slip 和 .List Promise.in/.at 和 Supply.interval 可以用零值和负值工作 Supply.interval 最小值为 0.001；较低值被处理为 0.001, 并发出警告#, 参见 https://docs.perl6.org/type/Supply#method_interval PR [#2649] Supply 提供了 .Seq、.list 和 .zip 可以在构建方法中绑定到原生类型属性 WhateverCode 传播 use fatal say、note、put、print 和 printf 例程自动线程化 Junction IO::Handle.eof 值在 .seek 过终点后再返回时也会相应改变 定义了 .succ'、.pred和.Bool` 的同质异形体 在核心 Numeric 上定义了 .Bridge 在核心 Numeric 的类型对象上定义了 .Numeric/.Real 定义了关于零分母有理数的 Rational.Bool say/note 保证在 Str 的子类上调用 .gist 定义了 Junction.Str 返回 Junction 定义了 Junction.gist/.perl 返回一个 Str Map/Hash 的 .list/.cache 返回一个 List 定义了 .round 的返回类型 定义了 Enumeration:D 不 .ACCEPT 一个 Enumeration:U , 参见 rakudo/rakudo#2073  杂项  IO::ArgFiles 类型只是 IO::CatHandle 的一个空的子类 对常量的约束  约束是完全强制的 试图在常量上使用参数化类型约束(例如使用 my Foo constant @int) 会引发 X::ParametricConstant 异常   Pod =defn(定义列表)指令可用 Pod 提供了 :numbered 配置键 .^ver、.^auth 和 .^name 元方法在 module 中可用, 而在 package 中则没有, 这是设计上的原因 qww\u0026lt;…\u0026gt; 中支持花哨的引号(’…’、“…”、｢…｣ 和变体) \u0026amp;infix:\u0026lt; \u0026gt; 支持查找自动生成的 Callables (例如: \u0026amp;infix:\u0026lt;XX\u0026gt;) 使用命名的 anon 子例程不再产生重声明警告 ::?MODULE/$?MODULE 变量的扩展规范 sub MAIN 可以接受一个参数上的 Enumeration 类型约束和 where 子句 笑脸型约束可以用在子集上 start 块和 thunks 得到新的 $/ 和 $! 定义了与列表关联运算符一起使用的 R 元运算符 类型强转可以用在签名返回类型约束中 \u0026amp;infix:\u0026lt;x\u0026gt;/\u0026amp;infix:\u0026lt;x\u0026gt; 抛出了 -Inf/NaN 重复参数 字面结构 put 和 put for 抛出, 需要使用括号 扩大了 Unicode 例程和功能的规范覆盖面-将覆盖面升级到 Unicode 第11版 $. 方法调用语法能用在元方法中了  "},"name":"Checklist for Raku 6.d","published":"2020-07-21T00:00:00+08:00","summary":"Checklist for 6.d","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-07-21-checklist-for-6-dot-d/"}],"name":"raku","type":"feed","url":"https://ohmyweekly.github.io/tags/raku/"}