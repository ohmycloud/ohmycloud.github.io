<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    raku on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/tags/raku/</link>
        <description>Recent content  in raku
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Thu, 15 Apr 2021 20:34:16 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/tags/raku/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>Raku Multiple Dispatch With the New MoarVM Dispatcher</title>
                <link>https://ohmyweekly.github.io/notes/2021-04-15-raku-multiple-dispatch-with-the-new-moarvm-dispatcher/</link>
                
                
                <description>&lt;blockquote&gt;Raku Multiple Dispatch With the New Moarvm Dispatcher&lt;/blockquote&gt;&lt;p&gt;我最近写了一篇关于&lt;a href=&#34;https://ohmyweekly.github.io/notes/2021-03-15-towards-a-new-general-dispatch-mechanism-in-moarvm/&#34;&gt;新的 MoarVM 调度机制&lt;/a&gt;的文章，并在那篇文章中指出，我在 Raku 的多重分派语义方面还有不少需要实现的地方。从那以后，我在这个方向上取得了不小的进展。这篇文章包含了对所采取的方法的概述，以及一些非常粗略的性能测量。&lt;/p&gt;
&lt;h2 id=&#34;我的天啊语义太多了&#34;&gt;我的天啊，语义太多了&lt;/h2&gt;
&lt;p&gt;在 Raku 的所有分派中，多重分派是最复杂的。多重分派允许我们写一组候选者，然后根据参数的数量进行选择。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;multi ok($condition, $desc) {
    say ($condition ?? &#39;ok&#39; !! &#39;not ok&#39;) ~ &amp;quot; - $desc&amp;quot;;
}
multi ok($condition) {
    ok($condition, &#39;&#39;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或根据参数的类型:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;multi to-json(Int $i) { ~$i }
multi to-json(Bool $b) { $b ?? &#39;true&#39; !! &#39;false&#39; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而且不只是一个参数，而是可能有很多参数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;multi truncate(Str $str, Int $chars) {
    $str.chars &amp;lt; $chars ?? $str !! $str.substr(0, $chars) ~ &#39;...&#39;
}

multi truncate(Str $str, Str $after) {
    with $str.index($after) -&amp;gt; $pos {
        $str.substr(0, $pos) ~ &#39;...&#39;
    }
    else {
        $str
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以添加 &lt;code&gt;where&lt;/code&gt; 子句来区分普通类型无法捕捉的属性上的候选者。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;multi fac($n where $n &amp;lt;= 1) { 1 }
multi fac($n) { $n * fac($n - 1) }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每当我们写出一组这样的 &lt;code&gt;multi&lt;/code&gt; 候选列表时，编译器就会自动生成一个 &lt;code&gt;proto&lt;/code&gt; 例程。这就是安装在符号表中的，存放候选列表的东西。然而，我们也可以写自己的 &lt;code&gt;proto&lt;/code&gt;，并使用特殊的术语 &lt;code&gt;{*}&lt;/code&gt; 来决定在哪一点上进行调度，如果有的话。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-rakuu&#34; data-lang=&#34;rakuu&#34;&gt;proto mean($collection) {
    $collection.elems == 0 ?? Nil !! {*}
}

multi mean(@arr) {
    @arr.sum / @arr.elems
}

multi mean(%hash) {
    %hash.values.sum / %hash.elems
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;候选者按窄度排序（使用拓扑排序）。如果多个候选者匹配，但它们窄度相同，那么这就是一个歧义错误。否则，我们调用最窄的一个。然后，我们选择的候选者可能会使用 &lt;code&gt;callsame&lt;/code&gt; 和它的朋友们来推迟到下一个最窄的候选者，后者可能也会这样做，直到我们达到最一般的匹配的候选者。&lt;/p&gt;
&lt;h2 id=&#34;多重分派无处不在&#34;&gt;多重分派无处不在&lt;/h2&gt;
&lt;p&gt;Raku 在很大程度上依赖于多重分派。Raku 中的大多数操作符都被编译成对多重分派子程序的调用。即使是 &lt;code&gt;$a+$b&lt;/code&gt; 也会是一个多重分派。这意味着高效地进行多重分派对性能真的很重要。考虑到其语义的丰富性，这有可能有点令人担忧。不过，也有好消息。&lt;/p&gt;
&lt;h2 id=&#34;大多数多重调度都很无聊&#34;&gt;大多数多重调度都很无聊&lt;/h2&gt;
&lt;p&gt;我们遇到的绝大多数情况是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个仅由参数和名义类型的数量所做的决定。&lt;/li&gt;
&lt;li&gt;无 where 子句&lt;/li&gt;
&lt;li&gt;无自定义 proto&lt;/li&gt;
&lt;li&gt;无 callsame&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这并不是说其他情况不重要，它们确实相当有用，而且它们的表现也是可取的。不过，在普通情况下，我们能省则省，也是可取的。例如，我们不希望急于计算每一个单次多重调度的全部可能的候选者，因为大多数时候只有第一个才是重要的。这不仅仅是时间上的问题：回想一下，新的调度机制会在每个调用点存储调度程序，如果我们在每个调用点存储所有匹配的候选程序列表，我们也会浪费很多内存。&lt;/p&gt;
&lt;h2 id=&#34;我们今天怎么做&#34;&gt;我们今天怎么做？&lt;/h2&gt;
&lt;p&gt;如今 Rakuo 的情况如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果调度只由元数和名义类型决定，并且你不使用扁平化的参数来调用它，它可能会表现得很好，甚至可能会享受到候选者的内联和消除在慢速路径上发生的重复类型检查。这要归功于 proto 持有一个 &amp;ldquo;dispatch cache&amp;rdquo;，这是一个在 VM 中实现的特例机制，它使用搜索树，每个参数有一个级别。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果是这种情况，但它有一个自定义的 proto，也不会太差，虽然不会发生内联，它仍然可以使用搜索树。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果它使用 &lt;code&gt;where&lt;/code&gt; 子句，速度会很慢，因为搜索树只处理在每一个名义类型集合中找到一个候选者，所以我们不能使用它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同样的道理也适用于 &lt;code&gt;callsame&lt;/code&gt;，它的速度也会很慢。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上，今天的情况是，如果在热路径附近的任何地方，你根本不会在多重调度中使用 &lt;code&gt;where&lt;/code&gt;子句（好吧，如果你知道热路径在哪里，并且知道这种调度很慢）。同理，&lt;code&gt;callsame&lt;/code&gt; 也是如此，虽然那不太常触达。问题是，我们能不能用新的调度器做得更好？&lt;/p&gt;
&lt;h2 id=&#34;守卫类型&#34;&gt;守卫类型&lt;/h2&gt;
&lt;p&gt;我们先看看最简单的情况是如何处理的，然后再从那里开始建立。(这其实是我在实现上的做法，但同时我也有一个大概的想法，我希望最终的结果是什么)。&lt;/p&gt;
&lt;p&gt;回忆一下这对候选者。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;multi truncate(Str $str, Int $chars) {
    $str.chars &amp;lt; $chars ?? $str !! $str.substr(0, $chars) ~ &#39;...&#39;
}

multi truncate(Str $str, Str $after) {
    with $str.index($after) -&amp;gt; $pos {
        $str.substr(0, $pos) ~ &#39;...&#39;
    }
    else {
        $str
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们有一个调用 &lt;code&gt;truncate($message, &amp;quot;\n&amp;quot;)&lt;/code&gt;，其中 &lt;code&gt;$message&lt;/code&gt; 是 &lt;code&gt;Str&lt;/code&gt; 类型的。在新的调度机制下，调用是使用 &lt;code&gt;raku-call&lt;/code&gt; dispatcher 进行的，它识别出这是一个 &lt;code&gt;multi&lt;/code&gt; 方法调度，因此委托给 &lt;code&gt;raku-multi&lt;/code&gt;。(&lt;code&gt;multi&lt;/code&gt; 方法调度也会在那里结束)。&lt;/p&gt;
&lt;p&gt;调度的记录阶段 - 在我们第一次到达这个调用点时 - 将进行如下操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;迭代候选者&lt;/li&gt;
&lt;li&gt;如果某个候选者在参数数上不匹配，就直接丢弃它。由于 &lt;code&gt;callsite&lt;/code&gt; 的形状是一个常数，而且我们在每个 &lt;code&gt;callsite&lt;/code&gt; 都会计算 dispatch 程序，所以我们不需要为此建立任何防护措施。&lt;/li&gt;
&lt;li&gt;如果在类型匹配并且成功了，注意涉及哪些参数，需要什么样的守卫。&lt;/li&gt;
&lt;li&gt;如果没有匹配或者模棱两可，就报错，不产生调度程序。&lt;/li&gt;
&lt;li&gt;否则，在确定了类型守卫后，将选定的候选程序委托给 &lt;code&gt;raku-invoke&lt;/code&gt; 调度程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我们再次到达同一个调用点时，我们可以运行调度程序，它可以快速检查参数类型是否与上次看到的参数类型相匹配，如果相匹配，我们就知道要调用哪个候选程序。这些检查非常便宜 - 比遍历所有候选者并检查每个候选者是否匹配要便宜得多。优化器以后可能会证明这些检查总是会成为事实，并消除它们。&lt;/p&gt;
&lt;p&gt;因此，整个调度过程 - 至少对于这个我们只有类型和元数的简单案例 - 可以向虚拟机 &amp;ldquo;解释&amp;rdquo; 为 &amp;ldquo;如果参数具有这些确切的类型，就调用这个例程&amp;rdquo;。这和我们对方法分派所做的差不多，除了我们只关心第一个参数的类型 - 调用者 - 和方法名的值。(还记得上一篇文章中说过，如果是 &lt;code&gt;multi&lt;/code&gt; 方法调度，那么方法调度和 &lt;code&gt;multi&lt;/code&gt; 方法调度都会守护第一个参数的类型，但是消除了重复，所以只做一次检查)。&lt;/p&gt;
&lt;h2 id=&#34;这就进入了恢复之洞&#34;&gt;这就进入了恢复之洞&lt;/h2&gt;
&lt;p&gt;想出好的抽象是很难的，新的调度机制的很多挑战就在于此。Raku 有不少不同的类似调度的东西。然而，将它们全部直接编码在虚拟机中会导致很高的复杂度，这使得构建可靠的优化（甚至是可靠的未优化的实现！）具有挑战性。因此，我们的目标是研究出一套相对较小的原语，允许以这样一种方式向虚拟机 &amp;ldquo;解释&amp;rdquo; 调度，使其能够提供不错的性能。&lt;/p&gt;
&lt;p&gt;很明显，&lt;code&gt;callsame&lt;/code&gt; 是一种调度恢复，但自定义 proto 这种情况和 &lt;code&gt;where&lt;/code&gt; 子句这种情况呢？事实证明，这些也都可以用调度恢复的方式整齐地表达出来（&lt;code&gt;where&lt;/code&gt; 子句情况需要在虚拟机层面增加一个小的内容，到时候可能对其他事情也有用）。不仅如此，用调度恢复来编码这些特性也是相当直接的，因此应该是高效的。我们教给专门人员的关于如何更好地使用调度恢复的每一个技巧，都可以让所有使用它们实现的语言特性也受益。&lt;/p&gt;
&lt;h2 id=&#34;自定义-proto&#34;&gt;自定义 proto&lt;/h2&gt;
&lt;p&gt;回顾这个例子。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;proto mean($collection) {
    $collection.elems == 0 ?? Nil !! {*}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这里，我们希望运行 proto 的主体，然后在 &lt;code&gt;{*}&lt;/code&gt; 这里进行候选者的选择。相比之下，当我们没有自定义的 proto 时，我们希望简单地继续调用正确的多。&lt;/p&gt;
&lt;p&gt;为了达到这个目的，我首先将 &lt;code&gt;multi&lt;/code&gt; 候选者的选择逻辑从 &lt;code&gt;raku-multi&lt;/code&gt; 调度器移到了 &lt;code&gt;raku-multi-core&lt;/code&gt; 调度器中。然后，&lt;code&gt;raku-multi&lt;/code&gt; dispatcher 会检查我们是否有一个 &amp;ldquo;onlystar&amp;rdquo; proto（一个不需要我们运行的 proto）。如果有，它就会立即委托给 &lt;code&gt;raku-multi-core&lt;/code&gt;。如果没有，它就将调度的参数保存为恢复初始化状态，然后调用 proto。proto 的 &lt;code&gt;{*}&lt;/code&gt; 被编译成一个 dispatch resumption。然后，这个 resumption 委托给 &lt;code&gt;raku-multi-core&lt;/code&gt;。或者，在代码中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nqp&#34; data-lang=&#34;nqp&#34;&gt;nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-register&#39;, &#39;raku-multi&#39;,
    # Initial dispatch, only setting up resumption if we need to invoke the
    # proto.
    -&amp;gt; $capture {
        my $callee := nqp::captureposarg($capture, 0);
        my int $onlystar := nqp::getattr_i($callee, Routine, &#39;$!onlystar&#39;);
        if $onlystar {
            # Don&#39;t need to invoke the proto itself, so just get on with the
            # candidate dispatch.
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;, &#39;raku-multi-core&#39;, $capture);
        }
        else {
            # Set resume init args and run the proto.
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-set-resume-init-args&#39;, $capture);
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;, &#39;raku-invoke&#39;, $capture);
        }
    },
    # Resumption means that we have reached the {*} in the proto and so now
    # should go ahead and do the dispatch. Make sure we only do this if we
    # are signalled to that it&#39;s a resume for an onlystar (resumption kind 5).
    -&amp;gt; $capture {
        my $track_kind := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-track-arg&#39;, $capture, 0);
        nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-guard-literal&#39;, $track_kind);
        my int $kind := nqp::captureposarg_i($capture, 0);
        if $kind == 5 {
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;, &#39;raku-multi-core&#39;,
                nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-get-resume-init-args&#39;));
        }
        elsif !nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-next-resumption&#39;) {
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;, &#39;boot-constant&#39;,
                nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-insert-arg-literal-obj&#39;,
                    $capture, 0, Nil));
        }
    });
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;合二为一&#34;&gt;合二为一&lt;/h2&gt;
&lt;p&gt;推迟到下一个候选者（例如用 &lt;code&gt;callsame&lt;/code&gt;）和因为 &lt;code&gt;where&lt;/code&gt; 子句失败而尝试下一个候选者看起来非常相似：两者都涉及遍历一个可能的候选者列表。有一些细节，但它们有很多共同点，如果能在使用新的 dispatcher 实现多重分派的过程中体现出来就更好了。&lt;/p&gt;
&lt;p&gt;在这之前，先说一个略显可怕的细节，当我们有 &lt;code&gt;where&lt;/code&gt; 子句的时候，今天在 Rakuo 中是如何工作的。首先，调度器会做一个 &amp;ldquo;试用绑定&amp;rdquo;，它问一个问题：这个签名会不会绑定？要做到这一点，它必须评估所有的 &lt;code&gt;where&lt;/code&gt; 子句。更糟糕的是，它还必须使用慢路径签名绑定器，它对签名进行解释，尽管我们在很多情况下可以编译它。如果候选者匹配，很好，我们选择它，然后调用它&amp;hellip;&amp;hellip;这将第二次运行 &lt;code&gt;where&lt;/code&gt; 子句，作为编译后的签名绑定代码的一部分。这样做一点也不高效，除了在开发人员的时间上要高效得多，这也是为什么要这样做的原因。&lt;/p&gt;
&lt;p&gt;总之，毋庸置疑，在我使用新的调度器重新实现时，我相当希望尽可能避免这种重复的工作和慢路径绑定。而且，令人高兴的是，一个小小的补充提供了一个解决方案。有一个 op &lt;code&gt;assertparamcheck&lt;/code&gt;，任何类型的参数检查都会被编译成（无论是类型检查、&lt;code&gt;where&lt;/code&gt; 子句检查等），这将触发对一个函数的调用，该函数获取参数，也就是我们试图调用的东西，然后可以通过它们来产生错误信息。诀窍是提供一种调用例程的方法，使绑定失败后，不是调用报错函数，而是离开例程，然后做一个调度恢复! 这意味着我们可以将传递 &lt;code&gt;where&lt;/code&gt; 子句检查失败变成一个调度恢复，然后会走到下一个候选者，并代替它进行尝试。&lt;/p&gt;
&lt;h2 id=&#34;琐碎vs非琐碎&#34;&gt;琐碎VS非琐碎&lt;/h2&gt;
&lt;p&gt;这让我们得到了大部分的解决方法，但在常见的情况下，仍然存在内存和时间效率的问题，即没有恢复和没有 &lt;code&gt;where&lt;/code&gt; 子句。我为这种情况创造了一个术语 &amp;ldquo;trivial multiple dispatch&amp;rdquo;，这使得其他情况变得 &amp;ldquo;non-trivial&amp;rdquo;。事实上，我甚至做了一个调度器，叫做 &lt;code&gt;raku-multi-non-trivial&lt;/code&gt;! 我们有两种方式可以结束。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最初尝试寻找匹配的候选者，决定了我们必须考虑 &lt;code&gt;where&lt;/code&gt; 子句。一旦我们看到是这种情况，我们就会继续制作一个可能匹配的候选者的完整列表。这是一个链表（原因见我之前的文章）。&lt;/li&gt;
&lt;li&gt;最初尝试寻找匹配的候选者时，发现了一个可以纯粹根据参数数和名词类型来挑选的候选者。我们就此停止，而不是试图建立一个完整的候选列表，并运行匹配的候选。在 &lt;code&gt;callsame&lt;/code&gt; 的情况下，我们最终进入琐碎的调度恢复处理程序，它 - 因为这种情况现在是非琐碎的 - 建立完整的候选者列表，从它上面剪下第一项（因为我们已经运行了那项），然后委托给 &lt;code&gt;raku-multi-non-trivial&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这个描述中失去了另一个重要的改进：今天，当有 &lt;code&gt;where&lt;/code&gt; 子句时，我们完全失去了使用 MoarVM 多重调度缓存的能力，但在新的调度器下，我们在 &lt;code&gt;callsite&lt;/code&gt; 存储了一个类型过滤的候选列表，然后使用廉价的类型守卫来检查它是否有效使用。&lt;/p&gt;
&lt;h2 id=&#34;初步结果&#34;&gt;初步结果&lt;/h2&gt;
&lt;p&gt;我做了一些基准测试，看看新的调度机制在今天 Raku 已知的几种次优情况下的表现。这些数字并不能反映出什么是可能的，因为目前专门人员对新的调度器还没有太多的了解。相反，它们反映了我们可以期望的最小改进。&lt;/p&gt;
&lt;p&gt;考虑这个基准，使用一个带有 &lt;code&gt;where&lt;/code&gt; 子句的 &lt;code&gt;multi&lt;/code&gt; 来递归实现 factorial。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;multi fac($n where $n &amp;lt;= 1) { 1 }
multi fac($n) { $n * fac($n - 1) }

for ^100_000 {
    fac(10)
}
say now - INIT now;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这需要进行一些调整（并在环境变量下运行）以使用新的调度器；这些都是暂时的，直到我将 Rakudo 转换为默认使用新的调度器。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nqp&#34; data-lang=&#34;nqp&#34;&gt;use nqp;

multi fac($n where $n &amp;lt;= 1) { 1 }
multi fac($n) { $n * nqp::dispatch(&#39;raku-call&#39;, &amp;amp;fac, $n - 1) }

for ^100_000 {
    nqp::dispatch(&#39;raku-call&#39;, &amp;amp;fac, 10);
}
say now - INIT now;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在我的机器上，第一个运行时间为4.86秒，第二个运行时间为1.34秒。因此，在新的调度器下，运行时间只需过去的四分之一多一点 - 这已经是一个相当大的改进了。&lt;/p&gt;
&lt;p&gt;一个涉及 &lt;code&gt;callsame&lt;/code&gt; 的案例也很有意思。这里是没有使用新调度器的情况。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;multi fallback(Any $x) { &amp;quot;a$x&amp;quot; }
multi fallback(Numeric $x) { &amp;quot;n&amp;quot; ~ callsame }
multi fallback(Real $x) { &amp;quot;r&amp;quot; ~ callsame }
multi fallback(Int $x) { &amp;quot;i&amp;quot; ~ callsame }

for ^1_000_000 {
    fallback(4+2i);
    fallback(4.2);
    fallback(42);
}   
say now - INIT now;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而配合临时调整使用新的调度器:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nqp&#34; data-lang=&#34;nqp&#34;&gt;use nqp;

multi fallback(Any $x) { &amp;quot;a$x&amp;quot; }
multi fallback(Numeric $x) { &amp;quot;n&amp;quot; ~ new-disp-callsame }
multi fallback(Real $x) { &amp;quot;r&amp;quot; ~ new-disp-callsame }
multi fallback(Int $x) { &amp;quot;i&amp;quot; ~ new-disp-callsame }

for ^1_000_000 {
    nqp::dispatch(&#39;raku-call&#39;, &amp;amp;fallback, 4+2i);
    nqp::dispatch(&#39;raku-call&#39;, &amp;amp;fallback, 4.2);
    nqp::dispatch(&#39;raku-call&#39;, &amp;amp;fallback, 42);
}
say now - INIT now;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在我的机器上，第一个运行时间为31.3s，第二个运行时间为11.5s，这意味着使用新的调度器，我们最终需要的时间只有当前 Rakudo 的三分之一多一点。&lt;/p&gt;
&lt;p&gt;这些都是相当鼓舞人心的，但正如前面提到的，大部分的多重调度都是琐碎的那种，没有使用这些功能。如果我在让其他事情变得更好的路上把最常见的情况变得更糟，那就不好了。现在还不能对此进行公平的比较：琐碎的多重分派在特化器中已经受到了很多关注，而且它还不能很好地优化使用新调度器的代码。值得注意的是，在这样的例子中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;multi m(Int) { }
multi m(Str) { }

for ^1_000_000 {
    m(1);
    m(&amp;quot;x&amp;quot;);
}
say now - INIT now;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;内嵌和其他优化会将其变成一个空循环，这是很难做到的。不过有一件事我们已经可以做了：在禁用 specializer 的情况下运行它。新的调度器版本看起来是这样的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nqp&#34; data-lang=&#34;nqp&#34;&gt;use nqp;

multi m(Int) { }
multi m(Str) { }

for ^1_000_000 {
    nqp::dispatch(&#39;raku-call&#39;, &amp;amp;m, 1);
    nqp::dispatch(&#39;raku-call&#39;, &amp;amp;m, &amp;quot;x&amp;quot;);
}
say now - INIT now;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果分别是0.463s和0.332s。因此，基线执行时间 - 在特化器发挥其魔力之前 - 使用新的通用调度机制比使用我们目前使用的特化多重调度缓存要少。在做测量之前，我不知道这里会有什么预期。鉴于我们要从一个已经被剖析和调整过的特化机制转到一个没有受到如此关注的新的通用机制，我已经做好了最初做得差一点的准备，如果能做到平价就好了。在70%的时间里，跑进了70%的时间，这比我预期的进步更大。&lt;/p&gt;
&lt;p&gt;我期望，一旦特化器更好地理解新的调度机制，它也能把上面的内容变成一个空循环 - 不过，由于每次优化可以进行更多的迭代，这应该还是表现为新调度器的胜利。&lt;/p&gt;
&lt;h2 id=&#34;最后的想法&#34;&gt;最后的想法&lt;/h2&gt;
&lt;p&gt;只要增加一个相对较小的功能，新的调度机制已经可以处理大部分的 Raku 多重调度语义。此外，即使在 specializer 和 JIT 没有真正能够做好的情况下，一些微基准已经显示出3倍-4倍的提升。这是一个很好的起点。&lt;/p&gt;
&lt;p&gt;在我们使用新的调度器出货 Rakudo 版本之前，还有很多工作要做。然而，多重调度是设计中剩下的最大威胁：它比其他种类的调度相当多的参与，而且很有可能一个意想不到的缺点会引发新一轮的设计工作，或者揭示出一般机制与基线未优化的情况下, 与更专业的机制相比，性能会很吃力。到目前为止，没有任何迹象表明这两种情况，我谨慎乐观地认为整体设计是差不多的。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/rakulang">rakulang</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2021-04-15-raku-multiple-dispatch-with-the-new-moarvm-dispatcher/</guid>
                <pubDate>Thu, 15 Apr 2021 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Psql</title>
                <link>https://ohmyweekly.github.io/notes/2021-04-05-psql/</link>
                
                
                <description>&lt;blockquote&gt;Psql&lt;/blockquote&gt;&lt;h1 id=&#34;raku-与-postgresql-的连接性一览&#34;&gt;Raku 与 PostgreSQL 的连接性一览&lt;/h1&gt;
&lt;p&gt;在我看来，Raku 是一门伟大的语言，我每天都在使用它，而且越来越多。我可以说它将取代我的 Perl 脚本。&lt;/p&gt;
&lt;p&gt;Raku 有一个广泛的模块库，当然包括数据库连接，这反过来又包括连接 PostgreSQL 的功能。
在这篇简单的文章中，我将快速演示如何使用 Raku 的一段代码来完成许多比数据库应用程序还琐碎的任务。
脚本是以增量的方式呈现的，所以连接数据库部分必须始终作为脚本的前言。&lt;/p&gt;
&lt;p&gt;DB::Pg 模块在某种程度上与 Perl 5 的 DBD::Pg 很相似，所以很多概念和方法名都会让人想起后者。&lt;/p&gt;
&lt;h2 id=&#34;安装方法&#34;&gt;安装方法&lt;/h2&gt;
&lt;p&gt;可以使用 zef 来安装 DB::Pg 模块。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% zef install DB::Pg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据你的系统速度和已经安装的库，可能需要几分钟的时间。&lt;/p&gt;
&lt;p&gt;如果你要使用 LISTEN/NOTIFY，你需要同时安装 epoLl.NET 和 EPOLl.NET。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% zef install epoll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;连接到数据库&#34;&gt;连接到数据库&lt;/h2&gt;
&lt;p&gt;现在可以使用 DB::Pg 模块连接到数据库。例如，一个简单的脚本可以接受命令行上的所有参数（清晰的文本！），可以是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;#!raku

use DB::Pg;

sub MAIN( Str :$host = &#39;miguel&#39;,
          Str :$username = &#39;luca&#39;,
          Str :$password = &#39;secet&#39;,
          Str :$database = &#39;testdb&#39; ) {

    &amp;quot;Connecting $username @ $host/$database&amp;quot;.say;

    my $connection = DB::Pg.new: conninfo =&amp;gt; &amp;quot;host=$host user=$username password=$password dbname=$database&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如你所见，DB::Pg模块接受一个 conninfo 字符串。&lt;/p&gt;
&lt;h2 id=&#34;读取查询和结果&#34;&gt;读取查询和结果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;.query&lt;/code&gt; 方法允许向数据库发出读取查询。结果是一个 Result 类对象，它可以通过不同的方法来使用，最著名的是 &lt;code&gt;.hash&lt;/code&gt; 和 &lt;code&gt;.arrays&lt;/code&gt;，它们返回一连串的 hash 或 arrays，从查询中提取的每一行都有一个 &lt;code&gt;.rows&lt;/code&gt; 和 &lt;code&gt;.column&lt;/code&gt; 等特殊方法分别提供了查询返回的行数和结果集的列名。&lt;/p&gt;
&lt;p&gt;举个例子，这里是一个简单的查询。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my $query = &#39;SELECT current_role, current_time&#39;;
my $results = $connection.query: $query;

say &amp;quot;The query { $query } returned { $results.rows } rows with columns: { $results.columns.join( &#39;, &#39; ) }&amp;quot;;
for $results.hashes -&amp;gt; $row {
    for $row.kv -&amp;gt; $column, $value {
        say &amp;quot;Column $column = $value&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面这段代码提供了一个类似于下面的输出。&lt;/p&gt;
&lt;p&gt;查询 &lt;code&gt;SELECT current_role, current_time&lt;/code&gt; 返回1行，列数为： current_role, current_time。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Column current_role = luca
Column current_time = 14:48:47.147983+02
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;光标&#34;&gt;光标&lt;/h2&gt;
&lt;p&gt;默认情况下，&lt;code&gt;.query&lt;/code&gt; 方法将从查询中获取所有的行，这对于较大的数据集来说是一个问题。可以使用 &lt;code&gt;.cursor&lt;/code&gt; 方法，它可以接受可选的批量大小（默认为1000个元组），并可选地接受将结果获取为哈希序列的指定器。&lt;/p&gt;
&lt;p&gt;作为一个简单的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;for $connection.cursor( &#39;select * from raku&#39;, fetch =&amp;gt; 2, :hash ) -&amp;gt; %row {
    say &amp;quot;====================&amp;quot;;
    for %row.kv -&amp;gt; $column, $value {
        say &amp;quot;Column [ $column ] = $value&amp;quot;;
    }
    say &amp;quot;====================&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;产生和输出像这样的东西。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;====================
Column [ pk ] = 2
Column [ t ] = This is value 0
====================
====================
Column [ pk ] = 3
Column [ t ] = This is value 1
====================
====================
Column [ t ] = This is value 2
Column [ pk ] = 4
====================
====================
Column [ pk ] = 5
Column [ t ] = This is value 3
====================
...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;撰写声明&#34;&gt;撰写声明&lt;/h2&gt;
&lt;p&gt;编写语句可以通过 &lt;code&gt;.execute&lt;/code&gt; 方法来执行，如:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;$connection.execute: q&amp;lt; insert into raku( t ) values( &#39;Hello World&#39; )&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;交易和编制报表&#34;&gt;交易和编制报表&lt;/h2&gt;
&lt;p&gt;为了处理事务，你需要访问被&amp;quot;屏蔽&amp;quot;到 DB::Pg 主对象中的数据库处理程序。数据库对象像往常一样提供了 &lt;code&gt;.begin&lt;/code&gt;、&lt;code&gt;.rollback&lt;/code&gt;、&lt;code&gt;.commit&lt;/code&gt;等方法。&lt;/p&gt;
&lt;p&gt;此外，还可以使用 &lt;code&gt;.prepare&lt;/code&gt; 方法来获得一个已准备好的语句，该语句可以被缓存并用于循环和重复性任务中。值得注意的是，&lt;code&gt;.prepare&lt;/code&gt; 方法使用了 &lt;code&gt;$1&lt;/code&gt;、&lt;code&gt;$2&lt;/code&gt; 等参数占位符，当语句接受单个值时，必须在 &lt;code&gt;.execute&lt;/code&gt; 中不指定索引。&lt;/p&gt;
&lt;p&gt;举个例子&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my $database-handler = $connection.db;
my $statement = $database-handler.prepare: &#39;insert into raku( t ) values( $1 )&#39;;

$database-handler.begin;
$statement.execute( &amp;quot;This is value $_&amp;quot; )  for 0 .. 10;
$database-handler.commit;
$database-handler.finish;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述循环相当于一个SQL事务，如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;BEGIN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;raku&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;This is value 0&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;raku&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;This is value 1&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;raku&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;This is value 2&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;raku&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;This is value 10&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;COMMIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;.finish&lt;/code&gt; 方法是必需的，因为 DB::Pg 处理缓存。请注意，&lt;code&gt;.commit&lt;/code&gt; 和 &lt;code&gt;.rollback&lt;/code&gt; 方法是流畅的，并返回一个对象实例，这样你就可以调用 &lt;code&gt;.commit.finish&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;数据库与连接&#34;&gt;数据库与连接&lt;/h2&gt;
&lt;p&gt;缓存的处理方式是，当发出一个查询时，会打开一个新的连接并使用。一旦工作完成，连接就会返回到内部池中。DB::Pg::Database 对象做的工作和 DB::Pg 的一样，不同的是它不会自动将连接返回到池中，所以需要自己进行 &lt;code&gt;.&lt;/code&gt; 完成。&lt;/p&gt;
&lt;p&gt;因此，你可以在两个对象上使用相同的 &lt;code&gt;.query&lt;/code&gt; 和 &lt;code&gt;.execute&lt;/code&gt; 方法，但 DB::Pg 会自动将连接返回到内部池中，而数据库对象则允许你对何时将连接返回到池中进行细粒度的控制。&lt;/p&gt;
&lt;h2 id=&#34;复制&#34;&gt;复制&lt;/h2&gt;
&lt;p&gt;PostgreSQL 提供了特殊的 COPY 命令，可以用来复制从和进入。有一个方法 &lt;code&gt;.copy-in&lt;/code&gt; 可以执行 &lt;code&gt;COPY FROM&lt;/code&gt;，而 &lt;code&gt;COPY TO&lt;/code&gt; 可以在迭代循环中使用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my $file = &#39;/tmp/raku.csv&#39;.IO.open: :w;
for $connection.query: &#39;COPY raku TO stdout (FORMAT CSV)&#39;  -&amp;gt; $row {
    $file.print: $row;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上将 CSV 结果导出到文本文件上。
如果要读回数据，可以发出 &lt;code&gt;.copy-in&lt;/code&gt; 方法，但首先需要发出 &lt;code&gt;SQL COPY&lt;/code&gt;。工作流程是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;issue a COPY FROM STDIN;
use .copy-data to slurp all the data;
use .copy-end to notify the database that the COPY is concluded.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对.copy-end的需求是一个建议：可以在一次运行中发出不同的.copy-data，例如从不同文件中导入数据。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;$database-handler = $connection.db;
$database-handler.query: &#39;COPY raku FROM STDIN (FORMAT CSV)&#39;;
$database-handler.copy-data:  &#39;/tmp/raku1.csv&#39;.IO.slurp;
$database-handler.copy-data:  &#39;/tmp/raku2.csv&#39;.IO.slurp;
$database-handler.copy-end;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;转换器&#34;&gt;转换器&lt;/h2&gt;
&lt;p&gt;可以指定转换器，即处理进出数据库的值的特殊角色；这让我想起了 DBI::Class 的 &lt;code&gt;inflate&lt;/code&gt; 和 &lt;code&gt;deflate&lt;/code&gt; 选项。
第一步是在 &lt;code&gt;DB::Pg&lt;/code&gt; 中给转换器实例添加一个角色，这样的实例必须。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加一个新的类型转换方法。&lt;/li&gt;
&lt;li&gt;增加一个转换方法来处理类型字符串化的值，并返回新值（在任何 Raku 实例中）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为一个例子，下面将一个文本 PostgreSQL 类型转换为一个 Str Raku 对象，并在其内容上进行反转。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;$connection.converter does role fluca-converter
{
    submethod BUILD { self.add-type( text =&amp;gt; Str ) }
    multi method convert( Str:U, Str:D $value) {
        $value.flip.uc;
    }

}

.say for $connection.query( &#39;select * from raku&#39; ).arrays;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;产生类似于的输出。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[442 DLROW OLLEH]
[454 DLROW OLLEH]
[466 DLROW OLLEH]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中字符串 Hello World 被翻转。&lt;/p&gt;
&lt;h2 id=&#34;listen-和-notify&#34;&gt;listen 和 notify&lt;/h2&gt;
&lt;p&gt;DB::Pg也可以处理LISTEN和NOTIFY，它们能够与Raku的react动态功能进行交互。
首先，创建一个简单的机制来通知一些事件。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;testdb=&amp;gt; create or replace rule r_raku_insert 
         as on insert to raku 
         do also 
         SELECT pg_notify( &#39;insert_event&#39;, &#39;INSERTING ROW(S)&#39; );
CREATE RULE

testdb=&amp;gt; create or replace rule r_raku_delete
         as on delete to raku 
         do also 
         SELECT pg_notify( &#39;delete_event&#39;, &#39;DELETING ROW(S)&#39; );
CREATE RULE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在，可以创建一个等待传入事件的 Raku 脚本。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;react {
    whenever $connection.listen( &#39;delete_event&#39; ) { .say; }
    whenever $connection.listen( &#39;insert_event&#39; ) { .say; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目的是，每次发出一个事件，&lt;code&gt;.listen&lt;/code&gt; 都会将消息有效载荷传递给 react 代码块。因此，发出一些 &lt;code&gt;DELETE&lt;/code&gt; 和 &lt;code&gt;INSERT&lt;/code&gt; 会导致输出。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DELETING ROW(S)
INSERTING ROW(S)
INSERTING ROW(S)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以通过 &lt;code&gt;.unlisten&lt;/code&gt; 方法停止监听反应块。也可以通过 &lt;code&gt;.notify&lt;/code&gt; 方法发出事件。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;DB::Pg 是 PostgreSQL 的一个很好的驱动程序，它允许 Raku 直接在语言中利用很多功能。&lt;/p&gt;
&lt;p&gt;文章 A glance at Raku connectivity towards PostgreSQL 已经由 Luca Ferrari 发布在博客上。&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href=&#34;https://fluca1978.github.io/2021/03/29/RakuPostgreSQL.html&#34;&gt;https://fluca1978.github.io/2021/03/29/RakuPostgreSQL.html&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/rakulang">rakulang</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2021-04-05-psql/</guid>
                <pubDate>Mon, 05 Apr 2021 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>争取在 MoarVM 中建立一个新的总调度机制</title>
                <link>https://ohmyweekly.github.io/notes/2021-03-15-towards-a-new-general-dispatch-mechanism-in-moarvm/</link>
                
                
                <description>&lt;blockquote&gt;Towards a New General Dispatch Mechanism in Moarvm&lt;/blockquote&gt;&lt;p&gt;我的天啊，看来我是两年多来第一次写 Raku 内部的博文了。当然，两年前还不叫 Raku。总之，话不多说，继续说说这个共同的脑洞吧。&lt;/p&gt;
&lt;h2 id=&#34;什么是调度&#34;&gt;什么是调度？&lt;/h2&gt;
&lt;p&gt;我用 &amp;ldquo;dispatch&amp;rdquo; 来表示我们接受一组参数，最后根据这些参数采取一些行动的过程。一些熟悉的例子包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进行一个方法调用，比如 &lt;code&gt;$basket.add($product, $quantity)&lt;/code&gt;。传统上，我们可能只调用 &lt;code&gt;$product&lt;/code&gt; 和 &lt;code&gt;$qauntity&lt;/code&gt; 作为参数，但就我的目的而言，所有的 &lt;code&gt;$basket&lt;/code&gt;、方法名  &amp;ldquo;add&amp;rdquo;、&lt;code&gt;$product&lt;/code&gt; 和 &lt;code&gt;$quantity&lt;/code&gt; 都是 dispatch 的参数：它们是我们需要的东西，以便决定我们要做什么。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进行子程序调用，如 &lt;code&gt;uc($youtube-comment)&lt;/code&gt;。由于 Raku sub 调用是词法解析的，所以在这种情况下，调度的参数是 &lt;code&gt;&amp;amp;uc&lt;/code&gt;（查找子程序的结果）和 &lt;code&gt;$youtube-comment&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用多个调度子程序或方法，根据参数的数量和类型来决定调用一组候选程序中的哪一个。这个过程可以看作是发生在上述两个调度中的一个 &amp;ldquo;内部&amp;rdquo;，因为我们在 Raku 中既有多重调度子程序，也有方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;乍一看，也许前两个看起来相当简单，第三个就有点手忙脚乱了 - 这也算是事实。然而，Raku 还有一些其他的特性，使得调度变得相当，嗯，有趣。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;wrap&lt;/code&gt; 允许我们包装任何 Routine (sub 或方法); 包装器可以选择用原来的参数或新的参数来服从原来的例程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当进行多重调度时，我们可以写一个原型例程，让它选择何时 - 甚至是否 - 调用合适的候选者。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;callsame&lt;/code&gt; 这样的例程，以便在调度中推迟到下一个候选者。但这意味着什么呢？如果我们是在一个多重调度中，它意味着下一个最适用的候选者，如果有的话。如果我们是在一个方法调度中，那么它意味着一个基类的方法。(同样的事情也被用来实现去下一个封装者，或者，最终也是去最初封装的例程)。而且这些都可以结合起来：我们可以包装一个 multi 方法，这意味着我们可以有 3 个层次的东西，都有可能贡献下一个要调用的东西!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多亏了这一点，dispatch - 至少在 Raku 中 - 并不总是我们所做的事情并产生一个结果，而是一个可能会被要求继续多次进行的过程!&lt;/p&gt;
&lt;p&gt;最后，虽然我上面所写的例子都可以很清楚地看成是调度的例子，但在 Raku 中，其他一些常见的构造也可以表达为一种调度。分配是一个例子：它的语义取决于分配的目标和被分配的值，因此我们需要选择正确的语义。强制类型转换(Coercion)是另一个例子，返回值类型检查又是一个例子。&lt;/p&gt;
&lt;h2 id=&#34;为什么调度很重要&#34;&gt;为什么调度很重要？&lt;/h2&gt;
&lt;p&gt;Dispatch 在我们的程序中无处不在，它悄悄地把想做事情的代码和做事情的代码联系在一起。它的无处不在意味着它在程序性能中扮演着重要的角色。在最好的情况下，我们可以将成本降为零。在最坏的情况下，调度的成本高到足以超过作为调度结果的工作的成本。&lt;/p&gt;
&lt;p&gt;初步估计，当运行时&amp;quot;理解&amp;quot;调度时，性能至少会有些不错，但当运行时不理解时，很有可能会很糟糕。调度往往涉及到一个可以缓存的工作量，往往会有一些廉价的防护措施来验证缓存结果的有效性。例如，在方法调度中，天真地我们需要走一个线性化的继承图，并询问沿途遇到的每个类是否有指定名称的方法。显然，如果我们在每次方法调用时都这样做，速度不会非常快。然而，特定类型上的特定方法名（精确识别，不考虑子类）每次都会解析到同一个方法。因此，我们可以缓存查找的结果，只要调用者的类型与用于产生缓存结果的类型相匹配，就可以使用它。&lt;/p&gt;
&lt;h2 id=&#34;语言运行时的专门化与通用化机制&#34;&gt;语言运行时的专门化与通用化机制&lt;/h2&gt;
&lt;p&gt;当一个人开始构建一个针对特定语言的运行时，并且必须在相当紧张的预算下完成时，要想获得某种可容忍的性能，最明显的方法就是将各种热路径语言语义烘焙到运行时中。这正是 MoarVM 的起步方式。因此，如果我们看看 MoarVM 几年前的样子，我们会发现这样的事情。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对方法缓存的一些支持&lt;/li&gt;
&lt;li&gt;一个与 Raku 的多重调度语义高度绑定的多重调度缓存，只有在调度都是名义类型的时候才真正能够起到帮助作用（所以使用 &lt;code&gt;where&lt;/code&gt; 的代价非常高）。&lt;/li&gt;
&lt;li&gt;一种机制，用于指定如何在封装代码对象内部找到实际的代码句柄（例如，&lt;code&gt;Sub&lt;/code&gt; 对象有一个私有属性，它持有识别要运行的字节码的低级代码句柄）。&lt;/li&gt;
&lt;li&gt;一些有限的尝试，让我们能够在知道一个调度不会继续的情况下正确地进行优化 - 这需要编译器和运行时之间的谨慎合作（或者不那么外交地讲，这都是一个大黑客）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些今天都还在，然而也都在淘汰的路上。这个榜单最能说明问题的是什么，不包括在内。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私有方法调用，需要不同的缓存 但最初的虚拟机设计限制了每一种类型的调用&lt;/li&gt;
&lt;li&gt;合格的方法调用(&lt;code&gt;$obj.SomeType::method-name()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;体面优化调度恢复的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几年前，我开始部分解决这个问题，引入了一种机制，我称之为 &amp;ldquo;specializer 插件&amp;rdquo;。但首先，什么是特化器(specializer)？&lt;/p&gt;
&lt;p&gt;MoarVM 刚开始的时候，它是一个比较简单的字节码解释器。它只需要足够快的速度击败 Parrot VM 就可以获得相当的使用量，我认为在继续实现一些更有趣的优化之前，这一点非常重要（当时我们还没有今天这样的发布前自动测试基础设施，因此更多的是依赖于早期采用者的反馈）。总之，在能够像其他后端一样运行 Raku 语言后不久，我就开始了动态优化器的开发。它在程序被解释时收集类型统计，识别热代码，将其放入 &lt;a href=&#34;https://en.wikipedia.org/wiki/Static_single_assignment_form&#34;&gt;SSA 形式&lt;/a&gt;，使用类型统计插入防护，将这些与字节码的静态属性一起使用来分析和优化，并为相关函数生成专门的字节码。这个字节码可以省略类型检查和各种查找，也可以使用一系列的内部操作，做出各种假设，由于优化器证明了程序的属性，这些假设是安全的。这被称为专门化的字节码，因为它的很多通用性 - 这将使它能够正确地工作在我们可能遇到的所有类型的值上 - 被删除了，转而工作在运行时实际发生的特殊情况下。(代码，尤其是动态语言中的代码，一般来说，理论上的通用性远远大于实践中的通用性。)&lt;/p&gt;
&lt;p&gt;这个组件 - 内部称为 &amp;ldquo;spesh&amp;rdquo; 的 specializer - 为 Raku 程序的性能带来了显著的进一步提升，随着时间的推移，它的复杂程度也在不断提高，并采用了&lt;a href=&#34;https://en.wikipedia.org/wiki/Inline_expansion&#34;&gt;内联&lt;/a&gt;和&lt;a href=&#34;https://en.wikipedia.org/wiki/Escape_analysis&#34;&gt;带有标量替换的转义分析&lt;/a&gt;等优化功能。这些并不是容易构建的东西 - 但一旦运行时拥有了它们，它们就会创造出以前不存在的设计可能性，并使在没有它们的情况下做出的决定看起来是次优的。&lt;/p&gt;
&lt;p&gt;值得注意的是，那些特殊情况下的语言特定机制，在早期为了获得一些速度而被嵌入到运行时中，反而成为了一种负担和瓶颈。它们具有复杂的语义，这意味着它们对优化器来说要么是不透明的（所以优化器无法对它们进行推理，意味着优化受到抑制），要么就是需要在优化器中进行特殊的封装（一种负担）。&lt;/p&gt;
&lt;p&gt;所以，回到 specializer 插件。我到了一个地步，我想承担像 &lt;code&gt;$obj.?meth(&amp;quot;call me maybe&amp;quot;, dispatch)&lt;/code&gt;、&lt;code&gt;$obj.SomeType::meth()&lt;/code&gt;(用类开始寻找的调度限定)，以及角色中的私有方法调用(不能静态解析)这样的性能。同时，我还准备实现一定量的转义分析，但意识到它的作用将非常有限，因为赋值在虚拟机中也被特例化了，有一大块不透明的 C 代码在做热路径的事情。&lt;/p&gt;
&lt;p&gt;但为什么我们要让 C 代码来做那些热路径的事情呢？嗯，因为让每个赋值都调用一个虚拟机级别的函数，做一堆检查和逻辑，花费太大了。为什么这样做成本很高？因为函数调用的开销和解释的成本。这在以前都是正确的。但是，若干年后的发展。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内联被实现了，并且可以消除做一个函数调用的开销。&lt;/li&gt;
&lt;li&gt;我们可以编译成机器代码，消除解释开销。&lt;/li&gt;
&lt;li&gt;我们当时的处境是，我们手头有 specializer 的类型信息，可以让我们消除 C 代码中的分支，但由于我们调用的只是一个不透明的函数，所以没有办法抓住这个机会&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我解决了上面提到的分配问题和调度问题，引入了一个新的机制：specializer 插件。它们的工作原理如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当我们第一次到达字节码中的一个给定的调用点时，我们就会运行这个插件。它产生了一个要调用的代码对象，以及一组守卫（为了使用该代码对象结果而必须满足的条件）。&lt;/li&gt;
&lt;li&gt;下一次到达时，我们检查是否满足守卫，如果满足，就用结果&lt;/li&gt;
&lt;li&gt;如果没有，我们再运行一次插件，并在 callsite 处堆积一个防护集。&lt;/li&gt;
&lt;li&gt;我们统计了一个给定的防护集成功的频率，然后将其用于 specializer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;绝大多数情况下都是单态的，这意味着只产生一组守卫，而且之后总是成功的。因此，特殊化器可以将这些守卫编译到专门的字节码中，然后假设给定的目标调用者就是将被调用的守卫。(进一步，重复的守卫可以被消除，所以某个插件引入的守卫可能会减少到零)。&lt;/p&gt;
&lt;p&gt;Specializer 插件感觉挺好的。一个新机制解决了多个优化头疼的问题。&lt;/p&gt;
&lt;p&gt;新的 MoarVM 调度机制是对一个相当简单的问题的回答：如果我们把所有与调度相关的特例机制去掉，而采用有点像 specializer 插件的机制，会怎么样？由此产生的机制需要是一个比 specializer 插件更强大的机制。进一步说，我可以学习特殊器插件的一些缺点。因此，虽然它们会在比较短的寿命后消失，但我认为可以说，如果没有这些经验，我就不会有能力设计新的 MoarVM 调度机制。&lt;/p&gt;
&lt;h2 id=&#34;调度操作和引导调度器&#34;&gt;调度操作和引导调度器&lt;/h2&gt;
&lt;p&gt;所有的方法缓存。所有的多重调度缓存。所有的 specializer 插件。所有用于在代码对象中解包字节码句柄的调用协议的东西。这一切都将被取消，取而代之的是一个新的调度指令。它的名字很无聊，叫 &lt;code&gt;dispatch&lt;/code&gt;。它看起来像这样。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;dispatch_o result, &#39;dispatcher-name&#39;, callsite, arg0, arg1, ..., argN
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用名为 dispatcher-name 的调度器。&lt;/li&gt;
&lt;li&gt;给它指定的参数寄存器（所引用的调用点表示参数的数量）。&lt;/li&gt;
&lt;li&gt;将调度的对象结果放入寄存器结果中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(旁白：这意味着一个新的调用约定，即我们不再将参数复制到参数缓冲区，而是将寄存器集的基数和一个指针传递到找到寄存器参数映射的字节码中，然后做一个查询 &lt;code&gt;registers[map[argument_index]]&lt;/code&gt; 来获取一个参数的值。仅此一点，我们在解释时就很省事，因为我们不再需要每个参数绕着解释器循环了）。)&lt;/p&gt;
&lt;p&gt;有些参数可能是我们传统上称之为参数的东西。有些则是针对调度过程本身。这其实并不重要 - 但如果我们安排将只针对调度的参数放在前面（例如，方法名），而将针对调度目标的参数放在后面（例如，方法参数），则会更加理想。&lt;/p&gt;
&lt;p&gt;新的 bootstrap 机制提供了少量的内置调度器，它们的名字以 &amp;ldquo;boot-&amp;rdquo; 开头。它们是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boot-value&lt;/code&gt; - 取第一个参数并将其作为结果（身份函数，除了丢弃任何其他参数）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boot-constant&lt;/code&gt; - 取第一个参数并将其作为结果，但同时也将其视为一个将始终产生的常量值（因此意味着优化器可以将任何用于计算该值的纯代码视为死值）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boot-code&lt;/code&gt; - 取第一个参数（必须是虚拟机字节码句柄），并运行该字节码，将其余参数作为参数传给它；评估为字节码的返回值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boot-syscall&lt;/code&gt; - 将第一个参数视为虚拟机提供的内置操作的名称，然后调用它，并将其余参数作为其参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boot-resume&lt;/code&gt; - 恢复正在进行的最上层调度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;差不多就是这样。我们构建的每一个调度器，为了教给运行时一些其他的调度行为，最终都会终止于其中一个。&lt;/p&gt;
&lt;h2 id=&#34;在引导程序的基础上&#34;&gt;在引导程序的基础上&lt;/h2&gt;
&lt;p&gt;教 MoarVM 了解不同种类的调度，不外乎使用调度机制本身! 在大多数情况下，&lt;code&gt;boot-syscall&lt;/code&gt; 被用来注册一个调度器，设置守卫，并提供与它们相匹配的结果。&lt;/p&gt;
&lt;p&gt;这里是一个最小的例子，取自 dispatcher 测试套件，展示了一个提供同一性功能的 dispatcher 的样子。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-register&#39;, &#39;identity&#39;, -&amp;gt; $capture {
    nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;, &#39;boot-value&#39;, $capture);
});
sub identity($x) {
    nqp::dispatch(&#39;identity&#39;, $x)
}
ok(identity(42) == 42, &#39;Can define identity dispatch (1)&#39;);
ok(identity(&#39;foo&#39;) eq &#39;foo&#39;, &#39;Can define identity dispatch (2)&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在第一条语句中，我们调用 dispatcher-register MoarVM 系统调用，传递一个 dispatcher 的名称以及一个闭包，每次我们需要处理调度时，都会调用这个闭包（我倾向于将其称为&amp;quot;调度回调&amp;quot;）。它接收一个单一的参数，这是一个参数的捕获（其实不是 Raku 级别的捕获，但想法 - 一个包含一组调用参数的对象 - 是一样的）。&lt;/p&gt;
&lt;p&gt;每一个用户定义的调度器最终都应该使用 dispatcher-delegate，以便确定另一个调度器将控制权传递给它。在这种情况下，它立即委托给 &lt;code&gt;boot-value&lt;/code&gt; - 这意味着它除了是 &lt;code&gt;boot-value&lt;/code&gt; 内置调度器的包装器外，其实什么都不是。&lt;/p&gt;
&lt;p&gt;sub &lt;code&gt;identity&lt;/code&gt; 包含一个调度操作的静态出现。鉴于我们两次调用 sub，我们在运行时将两次遇到这个 op，但这两次是非常不同的。&lt;/p&gt;
&lt;p&gt;第一次是 &amp;ldquo;记录&amp;rdquo; 阶段。参数形成一个捕获，回调运行，回调又将其传给引导值调度器，产生结果。这样就形成了一个极其简单的调度程序，它说结果应该是捕获中的第一个参数。由于没有守卫，所以这将永远是一个有效的结果。&lt;/p&gt;
&lt;p&gt;第二次遇到调度操作时，它那里已经记录了一个调度程序，所以我们处于运行模式。在 MoarVM 源码中开启调试模式，我们可以看到结果的调度程序是这样的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dispatch program (1 temporaries)
  Ops:
    Load argument 0 into temporary 0
    Set result object value from temporary 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也就是说，它将参数 0 读入一个临时位置，然后将其设置为调度的结果。请注意，没有提到我们经过了额外的一层调度，这些在结果调度程序中的成本为零。&lt;/p&gt;
&lt;h2 id=&#34;捕获操作&#34;&gt;捕获操作&lt;/h2&gt;
&lt;p&gt;参数捕获是不可改变的。各种虚拟机系统调用的存在，可以通过一些调整将它们转化为新的参数捕获，例如删除或插入参数。这里还有一个测试套件的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-register&#39;, &#39;drop-first&#39;, -&amp;gt; $capture {
    my $capture-derived := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-drop-arg&#39;, $capture, 0);
    nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;, &#39;boot-value&#39;, $capture-derived);
});
ok(nqp::dispatch(&#39;drop-first&#39;, &#39;first&#39;, &#39;second&#39;) eq &#39;second&#39;,
    &#39;dispatcher-drop-arg works&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就在将捕获传递给引导值调度器之前丢弃了第一个参数 - 意味着它将返回第二个参数。回头看一下之前的身份函数的调度程序。你能猜到这个程序会是什么样子吗？&lt;/p&gt;
&lt;p&gt;好吧，就是这样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dispatch program (1 temporaries)
  Ops:
    Load argument 1 into temporary 0
    Set result string value from temporary 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样，虽然在这样一个调度器的记录阶段，我们确实是创建了捕获对象，并做了一个调度器代理，但由此产生的调度程序要简单得多。&lt;/p&gt;
&lt;p&gt;下面是一个稍微复杂一点的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my $target := -&amp;gt; $x { $x + 1 }
nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-register&#39;, &#39;call-on-target&#39;, -&amp;gt; $capture {
    my $capture-derived := nqp::dispatch(&#39;boot-syscall&#39;,
            &#39;dispatcher-insert-arg-literal-obj&#39;, $capture, 0, $target);
    nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;,
            &#39;boot-code-constant&#39;, $capture-derived);
});
sub cot() { nqp::dispatch(&#39;call-on-target&#39;, 49) }
ok(cot() == 50,
    &#39;dispatcher-insert-arg-literal-obj works at start of capture&#39;);
ok(cot() == 50,
    &#39;dispatcher-insert-arg-literal-obj works at start of capture after link too&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里，我们有一个存储在变量 &lt;code&gt;$target&lt;/code&gt; 中的闭包。我们把它作为捕获的第一个参数插入，然后委托给 &lt;code&gt;boot-code-constant&lt;/code&gt;，它将调用那个代码对象，并把其他调度参数传递给它。再次，在记录阶段，我们真正要做的事情是这样的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个新的捕获 在开始的时候插入一个代码对象。&lt;/li&gt;
&lt;li&gt;委托给引导代码常量分配器，它&amp;hellip;。&lt;/li&gt;
&lt;li&gt;&amp;hellip;在没有原始参数的情况下创建一个新的捕获，并使用这些参数运行字节码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由此产生的调度程序呢？就是这个&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dispatch program (1 temporaries)
  Ops:
    Load collectable constant at index 0 into temporary 0
    Skip first 0 args of incoming capture; callsite from 0
    Invoke MVMCode in temporary 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也就是说，加载我们要调用的常量字节码句柄，设置 &lt;code&gt;args&lt;/code&gt;（在本例中等于传入捕获的参数），然后用这些参数调用字节码。参数的洗牌，又一次消失了。一般来说，只要我们做最终的字节码调用的参数是初始调度参数的尾巴，参数转换就会变得不过是一个指针的添加。&lt;/p&gt;
&lt;h2 id=&#34;守卫&#34;&gt;守卫&lt;/h2&gt;
&lt;p&gt;目前看到的所有调度方案都是无条件的：一旦在某一通话地点记录下来，就应一直使用。要使这样的机制具有实用性，缺少的一大块就是守卫。守卫断言了一些属性，比如参数的类型或者参数是确定的（&lt;code&gt;Int:D&lt;/code&gt;）还是不确定的（&lt;code&gt;Int:U&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;下面是一个有点长的测试用例，并在其中放置了一些解释。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;# A couple of classes for test purposes
my class C1 { }
my class C2 { }
 
# A counter used to make sure we&#39;re only invokving the dispatch callback as
# many times as we expect.
my $count := 0;
 
# A type-name dispatcher that maps a type into a constant string value that
# is its name. This isn&#39;t terribly useful, but it is a decent small example.
nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-register&#39;, &#39;type-name&#39;, -&amp;gt; $capture {
    # Bump the counter, just for testing purposes.
    $count++;
 
    # Obtain the value of the argument from the capture (using an existing
    # MoarVM op, though in the future this may go away in place of a syscall)
    # and then obtain the string typename also.
    my $arg-val := nqp::captureposarg($capture, 0);
    my str $name := $arg-val.HOW.name($arg-val);
 
    # This outcome is only going to be valid for a particular type. We track
    # the argument (which gives us an object back that we can use to guard
    # it) and then add the type guard.
    my $arg := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-track-arg&#39;, $capture, 0);
    nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-guard-type&#39;, $arg);
 
    # Finally, insert the type name at the start of the capture and then
    # delegate to the boot-constant dispatcher.
    nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;, &#39;boot-constant&#39;,
        nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-insert-arg-literal-str&#39;,
            $capture, 0, $name));
});
 
# A use of the dispatch for the tests. Put into a sub so there&#39;s a single
# static dispatch op, which all dispatch programs will hang off.
sub type-name($obj) {
    nqp::dispatch(&#39;type-name&#39;, $obj)
}
 
# Check with the first type, making sure the guard matches when it should
# (although this test would pass if the guard were ignored too).
ok(type-name(C1) eq &#39;C1&#39;, &#39;Dispatcher setting guard works&#39;);
ok($count == 1, &#39;Dispatch callback ran once&#39;);
ok(type-name(C1) eq &#39;C1&#39;, &#39;Can use it another time with the same type&#39;);
ok($count == 1, &#39;Dispatch callback was not run again&#39;);
 
# Test it with a second type, both record and run modes. This ensures the
# guard really is being checked.
ok(type-name(C2) eq &#39;C2&#39;, &#39;Can handle polymorphic sites when guard fails&#39;);
ok($count == 2, &#39;Dispatch callback ran a second time for new type&#39;);
ok(type-name(C2) eq &#39;C2&#39;, &#39;Second call with new type works&#39;);
 
# Check that we can use it with the original type too, and it has stacked
# the dispatch programs up at the same callsite.
ok(type-name(C1) eq &#39;C1&#39;, &#39;Call with original type still works&#39;);
ok($count == 2, &#39;Dispatch callback only ran a total of 2 times&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个时候就会产生两个调度程序，一个是 C1。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dispatch program (1 temporaries)
  Ops:
    Guard arg 0 (type=C1)
    Load collectable constant at index 1 into temporary 0
    Set result string value from temporary 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另一个是 C2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dispatch program (1 temporaries)
  Ops:
    Guard arg 0 (type=C2)
    Load collectable constant at index 1 into temporary 0
    Set result string value from temporary 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再一次，没有捕获操作、跟踪或调度器委托的遗留问题；调度程序对一个参数进行类型防护，然后产生结果字符串。整个对 &lt;code&gt;$arg-val.HOW.name($arg-val)&lt;/code&gt; 的调用都被省略了，我们写的调度程序将知识进行了编码 - 以虚拟机能够理解的方式 - 一个类型的名称可以被认为是不可改变的。&lt;/p&gt;
&lt;p&gt;这个例子有点造作，但现在考虑一下，我们反而要查找一个方法，并在调用者类型上进行守卫：这就是一个方法缓存! 守护更多参数的类型，我们就有了一个多缓存。两者都做，我们就有了一个多方法缓存。&lt;/p&gt;
&lt;p&gt;后者很有意思，因为方法调度和多调度都想对调用者进行守护。事实上，在 MoarVM 中，今天会有两个这样的类型测试，直到我们到了特殊化器做工作并消除这些重复的守卫。然而，新的调度器并没有将调度器 - guard-类型当作一种命令式操作，将守卫写入结果调度程序中。相反，它声明相关的参数必须被防护。如果其他的调度器已经这样做了，那它就是幂等的。一旦我们委派通过的所有调度程序，在通往最终结果的路径上，都有了自己的发言权，就会发出守卫。&lt;/p&gt;
&lt;p&gt;有趣的是：特别细心的人会注意到，调度机制也被用作实现新的调度程序的一部分，事实上，这最终也将意味着特殊化者可以将调度程序特殊化，让它们也被 JIT 编译成更高效的东西。毕竟，从 MoarVM 的角度来看，这一切都只是要运行的字节码，只是有些字节码是告诉 VM 如何更高效地执行 Raku 程序的!&lt;/p&gt;
&lt;h2 id=&#34;恢复调度&#34;&gt;恢复调度&lt;/h2&gt;
&lt;p&gt;可恢复调度器需要做两件事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在注册调度器的时候，提供一个恢复回调和一个调度回调。&lt;/li&gt;
&lt;li&gt;在 dispatch 回调中，指定一个捕获，这将形成恢复初始化状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当发生恢复时，将调用恢复回调，并提供恢复的任何参数。它还可以获得在 dispatch 回调中设置的 resume 初始化状态。resume 初始化状态包含了第一次恢复调度时继续进行调度所需要的东西。我们先来看看方法调度的工作原理，看一个具体的例子。我也会在此时，切换到看真正的 Rakudo 调度器，而不是简化的测试用例。&lt;/p&gt;
&lt;p&gt;Rakudo 调度器利用授权、重复守卫和捕获操作都没有运行时成本的优势，在结果调度程序中，至少在我看来，很好地因素了一个有些复杂的调度过程。方法调度有多个切入点：普通无聊的 &lt;code&gt;$obj.meth()&lt;/code&gt;，限定的 &lt;code&gt;$obj.Type::meth()&lt;/code&gt;，以及调用我也许 &lt;code&gt;$obj.?meth()&lt;/code&gt;。这些都有共同的 resume 语义 - 或者至少，只要我们在 resume 初始化状态中始终携带一个起始类型，也就是我们做方法调度的对象的类型，就可以使它们成为。&lt;/p&gt;
&lt;p&gt;这里是普通方法调度的切入点，去掉了报告缺失方法错误的无聊细节。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;# A standard method call of the form $obj.meth($arg); also used for the
# indirect form $obj.&amp;quot;$name&amp;quot;($arg). It receives the decontainerized invocant,
# the method name, and the the args (starting with the invocant including any
# container).
nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-register&#39;, &#39;raku-meth-call&#39;, -&amp;gt; $capture {
    # Try to resolve the method call using the MOP.
    my $obj := nqp::captureposarg($capture, 0);
    my str $name := nqp::captureposarg_s($capture, 1);
    my $meth := $obj.HOW.find_method($obj, $name);
 
    # Report an error if there is no such method.
    unless nqp::isconcrete($meth) {
        !!! &#39;Error reporting logic elided for brevity&#39;;
    }
 
    # Establish a guard on the invocant type and method name (however the name
    # may well be a literal, in which case this is free).
    nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-guard-type&#39;,
        nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-track-arg&#39;, $capture, 0));
    nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-guard-literal&#39;,
        nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-track-arg&#39;, $capture, 1));
 
    # Add the resolved method and delegate to the resolved method dispatcher.
    my $capture-delegate := nqp::dispatch(&#39;boot-syscall&#39;,
        &#39;dispatcher-insert-arg-literal-obj&#39;, $capture, 0, $meth);
    nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;,
        &#39;raku-meth-call-resolved&#39;, $capture-delegate);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在是解析方法 dispatcher，也就是处理恢复的地方。首先，让我们看看正常的 dispatch 回调（恢复回调是包含的，但是是空的，我稍后会展示它）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;# Resolved method call dispatcher. This is used to call a method, once we have
# already resolved it to a callee. Its first arg is the callee, the second and
# third are the type and name (used in deferral), and the rest are the args to
# the method.
nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-register&#39;, &#39;raku-meth-call-resolved&#39;,
    # Initial dispatch
    -&amp;gt; $capture {
        # Save dispatch state for resumption. We don&#39;t need the method that will
        # be called now, so drop it.
        my $resume-capture := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-drop-arg&#39;,
            $capture, 0);
        nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-set-resume-init-args&#39;, $resume-capture);
 
        # Drop the dispatch start type and name, and delegate to multi-dispatch or
        # just invoke if it&#39;s single dispatch.
        my $delegate_capture := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-drop-arg&#39;,
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-drop-arg&#39;, $capture, 1), 1);
        my $method := nqp::captureposarg($delegate_capture, 0);
        if nqp::istype($method, Routine) &amp;amp;&amp;amp; $method.is_dispatcher {
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;, &#39;raku-multi&#39;, $delegate_capture);
        }
        else {
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;, &#39;raku-invoke&#39;, $delegate_capture);
        }
    },
    # Resumption
    -&amp;gt; $capture {
        ... &#39;Will be shown later&#39;;
    });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;raku-meth-call 中有一个可以论证的欺骗：它实际上并没有插入调用者的类型对象来代替调用者。事实证明，这并不重要。否则，我认为注释（在真正的实现中也可以找到）很好地说明了这个问题。&lt;/p&gt;
&lt;p&gt;有一个重要的点可能并不清楚 - 但遵循了一个重复的主题 - 那就是恢复初始化状态的设置也更多的是一种声明式而不是命令式的东西：在调度的时候并没有运行时成本，而是我们在周围保留了足够的信息，以便能够在我们需要的时候重建恢复初始化状态。事实上，当我们处于恢复的运行阶段时，我们甚至不需要在创建捕获对象的意义上重建它）。&lt;/p&gt;
&lt;p&gt;现在说说复盘。我将介绍一个严重简化的版本，它只处理 callsame 语义（完整的东西也要处理 lastcall 和 nextcallee 这样的乐趣）。resume 初始化状态的存在是为了给 resumption 过程播种。一旦我们知道我们实际上确实要处理恢复，我们就可以做一些事情，比如计算我们想要走过的继承图中的全部方法列表。每个可恢复的调度器在调用栈上得到一个单一的存储槽，它可以用于它的状态。它可以在恢复的第一步中初始化这个，然后在我们走的时候更新它。或者更准确的说，它可以设置一个调度程序，在运行时就会这样做。&lt;/p&gt;
&lt;p&gt;对于我们将要走过的候选链来说，链接列表原来是一个非常方便的数据结构。我们可以通过跟踪当前节点来完成链接列表的工作，也就是说只需要有一个东西发生突变，也就是当前调度的状态。调度程序机制还提供了一种从对象中读取属性的方法，这就足以将遍历链接列表表达到调度程序中。这也意味着零分配。&lt;/p&gt;
&lt;p&gt;所以，不多说了，下面是链接列表（在 NQP 这个受限的 Raku 子集中，相当不如在完整的 Raku 中漂亮）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;# A linked list is used to model the state of a dispatch that is deferring
# through a set of methods, multi candidates, or wrappers. The Exhausted class
# is used as a sentinel for the end of the chain. The current state of the
# dispatch points into the linked list at the appropriate point; the chain
# itself is immutable, and shared over (runtime) dispatches.
my class DeferralChain {
    has $!code;
    has $!next;
    method new($code, $next) {
        my $obj := nqp::create(self);
        nqp::bindattr($obj, DeferralChain, &#39;$!code&#39;, $code);
        nqp::bindattr($obj, DeferralChain, &#39;$!next&#39;, $next);
        $obj
    }
    method code() { $!code }
    method next() { $!next }
};
my class Exhausted {};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后是恢复处理。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-register&#39;, &#39;raku-meth-call-resolved&#39;,
    # Initial dispatch
    -&amp;gt; $capture {
        ... &#39;Presented earlier;
    },
    # Resumption. The resume init capture&#39;s first two arguments are the type
    # that we initially did a method dispatch against and the method name
    # respectively.
    -&amp;gt; $capture {
        # Work out the next method to call, if any. This depends on if we have
        # an existing dispatch state (that is, a method deferral is already in
        # progress).
        my $init := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-get-resume-init-args&#39;);
        my $state := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-get-resume-state&#39;);
        my $next_method;
        if nqp::isnull($state) {
            # No state, so just starting the resumption. Guard on the
            # invocant type and name.
            my $track_start_type := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-track-arg&#39;, $init, 0);
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-guard-type&#39;, $track_start_type);
            my $track_name := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-track-arg&#39;, $init, 1);
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-guard-literal&#39;, $track_name);
 
            # Also guard on there being no dispatch state.
            my $track_state := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-track-resume-state&#39;);
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-guard-literal&#39;, $track_state);
 
            # Build up the list of methods to defer through.
            my $start_type := nqp::captureposarg($init, 0);
            my str $name := nqp::captureposarg_s($init, 1);
            my @mro := nqp::can($start_type.HOW, &#39;mro_unhidden&#39;)
                ?? $start_type.HOW.mro_unhidden($start_type)
                !! $start_type.HOW.mro($start_type);
            my @methods;
            for @mro {
                my %mt := nqp::hllize($_.HOW.method_table($_));
                if nqp::existskey(%mt, $name) {
                    @methods.push(%mt{$name});
                }
            }
 
            # If there&#39;s nothing to defer to, we&#39;ll evaluate to Nil (just don&#39;t set
            # the next method, and it happens below).
            if nqp::elems(@methods) &amp;gt;= 2 {
                # We can defer. Populate next method.
                @methods.shift; # Discard the first one, which we initially called
                $next_method := @methods.shift; # The immediate next one
 
                # Build chain of further methods and set it as the state.
                my $chain := Exhausted;
                while @methods {
                    $chain := DeferralChain.new(@methods.pop, $chain);
                }
                nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-set-resume-state-literal&#39;, $chain);
            }
        }
        elsif !nqp::istype($state, Exhausted) {
            # Already working through a chain of method deferrals. Obtain
            # the tracking object for the dispatch state, and guard against
            # the next code object to run.
            my $track_state := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-track-resume-state&#39;);
            my $track_method := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-track-attr&#39;,
                $track_state, DeferralChain, &#39;$!code&#39;);
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-guard-literal&#39;, $track_method);
 
            # Update dispatch state to point to next method.
            my $track_next := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-track-attr&#39;,
                $track_state, DeferralChain, &#39;$!next&#39;);
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-set-resume-state&#39;, $track_next);
 
            # Set next method, which we shall defer to.
            $next_method := $state.code;
        }
        else {
            # Dispatch already exhausted; guard on that and fall through to returning
            # Nil.
            my $track_state := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-track-resume-state&#39;);
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-guard-literal&#39;, $track_state);
        }
 
        # If we found a next method...
        if nqp::isconcrete($next_method) {
            # Call with same (that is, original) arguments. Invoke with those.
            # We drop the first two arguments (which are only there for the
            # resumption), add the code object to invoke, and then leave it
            # to the invoke or multi dispatcher.
            my $just_args := nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-drop-arg&#39;,
                nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-drop-arg&#39;, $init, 0),
                0);
            my $delegate_capture := nqp::dispatch(&#39;boot-syscall&#39;,
                &#39;dispatcher-insert-arg-literal-obj&#39;, $just_args, 0, $next_method);
            if nqp::istype($next_method, Routine) &amp;amp;&amp;amp; $next_method.is_dispatcher {
                nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;, &#39;raku-multi&#39;,
                        $delegate_capture);
            }
            else {
                nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;, &#39;raku-invoke&#39;,
                        $delegate_capture);
            }
        }
        else {
            # No method, so evaluate to Nil (boot-constant disregards all but
            # the first argument).
            nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-delegate&#39;, &#39;boot-constant&#39;,
                nqp::dispatch(&#39;boot-syscall&#39;, &#39;dispatcher-insert-arg-literal-obj&#39;,
                    $capture, 0, Nil));
        }
    });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是相当多的内容，也是相当多的代码。但请记住，这只是运行在调度恢复的记录阶段。它还会在 callsame 的 callsite 产生一个调度程序，并带有通常的守卫和结果。隐式守卫是为我们在该点恢复的调度程序创建的。在最常见的情况下，这最终将是单形或双形的，尽管涉及多个调度或方法调度的嵌套的情况可能会产生一个更有形态的 callsite。&lt;/p&gt;
&lt;p&gt;我选取的设计迫使 resume 回调处理两种情况：第一次复用和后一次复用。这在几个方面都不理想。&lt;/p&gt;
&lt;p&gt;这对那些编写调度简历回调的人来说有点不方便。然而，这又不是特别常见的活动!&lt;/p&gt;
&lt;p&gt;这种差异导致两个调度程序堆积在一个调用点，而在其他情况下，这个调用点可能只得到一个
只有其中第二项真正重要。之所以不统一，是为了确保绝大多数从未恢复调度的电话，不会因其最终从未使用的功能而产生每次调度的费用。如果结果是使用该功能的人多花了一点成本，那就这样吧。事实上，早期的基准测试显示，使用新调度器的 callsame 与 wrap 和方法调用似乎比当前 Rakudo 中的速度快了 10 倍，这还没等专门人员对它有足够的了解，就已经进一步改进了!&lt;/p&gt;
&lt;h2 id=&#34;目前所做的事情&#34;&gt;目前所做的事情&lt;/h2&gt;
&lt;p&gt;我上面讨论的所有内容都已经实现了，只是我可能在某个地方给人的印象是，使用新的 dispatcher 已经完全实现了多重调度，而现在还不是这样（没有处理 where 子句，也不支持调度恢复）。&lt;/p&gt;
&lt;h2 id=&#34;今后的步骤&#34;&gt;今后的步骤&lt;/h2&gt;
&lt;p&gt;下一步显然是要完全实现多调度的缺失部分。另一个缺失的语义是对 callwith 和 nextwith 的支持，当我们希望改变移动到下一个候选人时使用的参数。抛开其他一些小问题不谈，理论上来说，这至少可以让所有的 Raku 调度语义得到支持。&lt;/p&gt;
&lt;p&gt;目前，所有的标准方法调用（$obj.meth()）和其他调用（foo()和$foo()）都会通过现有的调度机制，而不是新的调度器。这些也需要迁移到新的调度器上，而且任何发现的错误都需要修复。这将使事情达到新调度器在语义上已经准备好的程度。&lt;/p&gt;
&lt;p&gt;之后是性能工作：确保专用器能够处理调度程序的防护和结果。最初的目标是，让常见调用形式的稳态性能至少与当前乐道主分支中的性能相同。已经很清楚了，对于一些到目前为止还很冰冷的东西来说，会有一些大的胜利，但它不应该以最常见的调度种类的退步为代价，因为这些调度种类之前已经得到了大量的优化努力。&lt;/p&gt;
&lt;p&gt;此外，NQP - 乐道编译器和运行时内脏的其他位写的乐的限制形式 - 也需要迁移到使用新的调度器。只有做到这一点，才有可能从 MoarVM 中扯出当前的方法缓存、多调度缓存等。&lt;/p&gt;
&lt;p&gt;一个悬而未决的问题是，如何处理 MoarVM 以外的后端。理想情况下，新的调度机制将被移植到这些地方。相当多的内容应该可以用 JVM 的 invokedynamic 来表达（而这一切可能会在基于 Truffle 的 Raku 实现中发挥得相当好，尽管我不确定目前是否有这方面的积极努力）。&lt;/p&gt;
&lt;h2 id=&#34;未来的机会&#34;&gt;未来的机会&lt;/h2&gt;
&lt;p&gt;虽然我目前的重点是发布一个使用新调度机制的 Rakudo 和 MoarVM 版本，但这不会是旅程的终点。一些眼前的想法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对角色的方法调用需要把角色打入一个类中， 所以方法查找会返回一个闭包来完成这个任务并替换调用者。这是一个很大的间接性；新的调度者可以获得 pun，并产生一个调度程序，用 punn 化的类类型对象替换角色类型对象，这将使每次调用的成本大大降低。&lt;/li&gt;
&lt;li&gt;我期望使用新的 dispatcher 可以使句柄（dlegated）和 fallback（处理缺失的方法调用）机制都能有更好的表现&lt;/li&gt;
&lt;li&gt;当前的 assuming - 用于为例程讨价还价或其他首要参数 - 的实现并不理想，利用新调度器的参数重写能力的实现可能会有更好的表现。
在新的调度机制的帮助下，一些新的语言功能也可能以高效的方式提供。例如，目前没有一种可靠的方式来尝试调用一段代码，如果签名绑定了就运行它，如果没有绑定就做其他事情。相反，像 Cro 路由器这样的东西，必须先做签名的试绑定，然后再做调用，这使得路由的成本相当高。还有一个建议已久的想法，就是通过签名与 &lt;code&gt;when&lt;/code&gt; 构造提供模式匹配 (例如，&lt;code&gt;when * -&amp;gt; ($x) {}; when * -&amp;gt; ($x, *@tail) { }&lt;/code&gt;)，这和需求差不多，只是在一个不太动态的环境下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最后&#34;&gt;最后&amp;hellip;&lt;/h2&gt;
&lt;p&gt;在新的调度机制上的工作比我最初预期的历程要长。设计的恢复部分特别具有挑战性，而且还有一些重要的细节需要处理。一路走来，大概有四种潜在的方法被抛弃了（虽然其中的元素都影响了我在这篇文章中描述的内容）。能坚持下来的抽象真的非常非常难。&lt;/p&gt;
&lt;p&gt;我最终也不得不从根本上离开几个月做 Raku 工作，在其他一些工作中感觉有点被压垮了，并且一直在与同样重要的 RakuAST 项目（它将因为能够承担新的调度器的存在而被简化，并且还为我提供了一系列更柔和的 Raku 黑客任务，而调度器的工作提供了很少的轻松选择）。&lt;/p&gt;
&lt;p&gt;鉴于这些，我很高兴终于看到了隧道尽头的光亮。剩下的工作是数不胜数的，而我们使用新的调度器发布 Rakudo 和 MoarVM 的那一天，感觉还需要几个月的时间（我希望写下这句话不是在诱惑命运！）。&lt;/p&gt;
&lt;p&gt;新的调度器可能是 MoarVM 自我创建以来最重要的变化，因为它看到我们删除了一堆从一开始就存在的东西。RakuAST 也将为 Rakudo 编译器带来十年来最大的架构变化。两者都是一个机会，将多年来学习的东西硬生生地折合到运行时和编译器中。我希望再过十年，当我回顾这一切的时候，至少会觉得自己这次犯了更多有趣的错误。&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href=&#34;https://6guts.wordpress.com/2021/03/15/towards-a-new-general-dispatch-mechanism-in-moarvm/&#34;&gt;https://6guts.wordpress.com/2021/03/15/towards-a-new-general-dispatch-mechanism-in-moarvm/&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/rakulang">rakulang</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2021-03-15-towards-a-new-general-dispatch-mechanism-in-moarvm/</guid>
                <pubDate>Mon, 15 Mar 2021 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>BUILD 和 TWEAK 的区别</title>
                <link>https://ohmyweekly.github.io/notes/2021-03-07-difference-between-build-and-tweak-in-raku/</link>
                
                
                <description>&lt;blockquote&gt;Difference Between Build and Tweak in Raku&lt;/blockquote&gt;&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;class Student {
    has $.name;
    has $.sex;
    has $!age;

    method BUILD(:$!name) {

    }
}

my $stu = Student.new(:name(&#39;赵今麦&#39;), :sex(&#39;女&#39;));
dd $stu;
# Student $stu = Student.new(name =&amp;gt; &amp;quot;赵今麦&amp;quot;, sex =&amp;gt; Any)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你加上 &lt;code&gt;BUILD&lt;/code&gt; 方法, 你必须自己全权负责设置所有的东西。也就是既包括公共属性, 也包括私有属性。&lt;/p&gt;
&lt;p&gt;但你可以通过巧妙地命名参数来让你的生活更轻松。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;method BUILD (:$!name, :$!sex, :$!age) { }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;BUILD&lt;/code&gt; 方法可以初始化私有属性:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;class Student {
    has $.name;
    has $.sex;
    has $!age;

    method BUILD(:$name, :$sex, :$age) {
        $!name = $name;
        $!sex = $sex;
        $!age = $age;
    }

    method heart() { return &#39;♥ &#39; ~ $!age }
}

my $stu = Student.new(:name(&#39;赵今麦&#39;), :sex(&#39;女&#39;), :age(18));
dd $stu;
say $stu;
say $stu.heart(); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以在 TWEAK 方法中初始化私有属性:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;class Student {
    has $.name;
    has $.sex;
    has $!age;

    method TWEAK(:$name, :$sex, :$age) {
        $!age = $age + 1;
    }

    method heart() { return &#39;♥&#39; ~ $!age }
}

my $stu = Student.new(:name(&#39;赵今麦&#39;), :sex(&#39;女&#39;), :age(18));
dd $stu;
say $stu;
say $stu.heart(); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 &lt;code&gt;TWEAK&lt;/code&gt;，你会得到与 &lt;code&gt;BUILD&lt;/code&gt; 相同的参数，但所有的初始设置都已经完成了（&lt;code&gt;BUILD&lt;/code&gt; 或公共属性的自动绑定，以及所有的默认值，再加上保证所需值的存在）。你只是有机会做一些最后的调整。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/raku">Raku</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/build">BUILD</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/tweak">TWEAK</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/object">Object</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2021-03-07-difference-between-build-and-tweak-in-raku/</guid>
                <pubDate>Sun, 07 Mar 2021 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>如何在 Raku 中输入 Unicode</title>
                <link>https://ohmyweekly.github.io/notes/2021-03-01-how-to-type-unicode-in-raku/</link>
                
                
                <description>&lt;blockquote&gt;How to Type Unicode in Raku&lt;/blockquote&gt;&lt;p&gt;Raku 有非常好的 Unicode 支持, 但是输入 Unicode 一直是一个很大的问题。在 REPL 中, 输入 Unicode 都不太方便。下面介绍几种方法来方便地输入 Unicode。&lt;/p&gt;
&lt;h1 id=&#34;comma&#34;&gt;Comma&lt;/h1&gt;
&lt;p&gt;最方便的是使用 Raku 自己的 IDE, &lt;a href=&#34;http://commaide.com&#34;&gt;Comma&lt;/a&gt;。但是需要做两个设置:&lt;/p&gt;
&lt;p&gt;首先, 切换到 Comma IDE, 点击左上角菜单栏的 &lt;strong&gt;Comma&lt;/strong&gt; 选项, 在弹出的 &lt;strong&gt;Preference&lt;/strong&gt; 窗口中, 找到左侧菜单栏中的 &lt;strong&gt;Editor&lt;/strong&gt; 选项, 点击 &lt;strong&gt;Code Style&lt;/strong&gt; 中的 &lt;strong&gt;Raku&lt;/strong&gt;, 在右侧的窗口的最上面, 找到 &lt;strong&gt;Schema&lt;/strong&gt; 一行, 点击倒三角图标, 在下拉菜单中选择 &lt;strong&gt;Project&lt;/strong&gt;。然后在第二行文字中找到 &lt;strong&gt;Editor Behavior&lt;/strong&gt;, 勾选 &lt;strong&gt;Convert operators to Unicode&lt;/strong&gt;。完成后点击右下角的 &lt;strong&gt;Apply&lt;/strong&gt;, 然后点击 &lt;strong&gt;OK&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这样当你在 Comma 中键入 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 这样的运算符后, Comma 会自动把它转为 Unicode 形式的 &lt;code&gt;»&lt;/code&gt;。目前已支持大部分 Unicode 运算符了。Comma 是跨平台的 Raku 编辑器, 支持 Windows、Linux 和 MacOS, 所以你想跨平台开发的话, Comma 值得一试。&lt;/p&gt;
&lt;h1 id=&#34;kitty&#34;&gt;Kitty&lt;/h1&gt;
&lt;p&gt;如果你想在 Vim 中开发 Raku, 又不想失去输入 Unicode 的乐趣, 请使用 &lt;a href=&#34;https://github.com/kovidgoyal/kitty&#34;&gt;Kitty&lt;/a&gt; 终端。点开 Kitty 终端, 使用快捷键 Ctrl + Shift + U 即可触发输入 Unnicode 的界面(也可以键入命令 kitty +kitten unicode_input 来触发)。再通过快捷键  F1、F2、F3 和 F4 (或通过 Ctrl+[ 和 Ctrl+] 切换标签)可以分别按代码搜索 Unicode、按名字搜索 Unicode、按表情搜索和收藏。&lt;/p&gt;
&lt;p&gt;例如在 REPL 中键入 Unicode 字符:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ raku
Welcome to 𝐑𝐚𝐤𝐮𝐝𝐨™ v2021.02.
Implementing the 𝐑𝐚𝐤𝐮™ programming language v6.d.
Built on MoarVM version 2021.02.

To &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;exit&amp;#39;&lt;/span&gt; or &lt;span class=&#34;s1&#34;&gt;&amp;#39;^D&amp;#39;&lt;/span&gt;
&amp;gt; my @a &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 1..5&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&amp;gt; @a».sin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;借助 Kitty, 数组 &lt;code&gt;@a&lt;/code&gt; 后面的 &lt;code&gt;»&lt;/code&gt; 可以这样输入, 先输入 &lt;code&gt;@a&lt;/code&gt;, 然后使用快捷键 Shift + Ctrl + U 调出 Kitty 的 &lt;strong&gt;Unicode input&lt;/strong&gt; 界面, 一般有两种方法, 第一种是通过快捷键 F1, 然后输入对应的 Unicode 编码, 再回车。第二种是通过快捷键 F2, 通过名字搜索, 例如输入单词 quota, 会出现一堆引号符号供你选择, 按上下方向键选中 &lt;code&gt;»&lt;/code&gt;, 再回车即可。Vim 中同理。&lt;/p&gt;
&lt;h1 id=&#34;julia-repl&#34;&gt;Julia REPL&lt;/h1&gt;
&lt;p&gt;在 REPL 中输入 &lt;code&gt;\′ + 单词 + Tab, 例如输入 &lt;/code&gt;\heartsuit` 再按 Tab, 就会自动变成 ♡&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;julia&amp;gt; &lt;span class=&#34;se&#34;&gt;\h&lt;/span&gt;eartsuit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;ipython&#34;&gt;IPython&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;\^&lt;/code&gt; 输入上标, &lt;code&gt;\_p&lt;/code&gt; 输入下标。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ipython
&lt;span class=&#34;se&#34;&gt;\^&lt;/span&gt;a
&lt;span class=&#34;se&#34;&gt;\_&lt;/span&gt;p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;vscode&#34;&gt;VScode&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;\\′ + 完整的单词 + Tab, VsCode 会自动转换为 Unicode。 例如 &lt;/code&gt;^a&lt;code&gt;和&lt;/code&gt;_p`&lt;/p&gt;
&lt;h1 id=&#34;dmenu&#34;&gt;dmenu&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#use strict;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#use warnings;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#use autodie;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#use utf8;&lt;/span&gt;


&lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$FH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; | dmenu -i -l 30 -fn &amp;#39;-xos4-terminus-medium-r-*-*-10-*&amp;#39; | sed &amp;#39;s/^\\(.\\).*/\\1/&amp;#39; | tr -d &amp;#39;\n&amp;#39; | { pbcopy; pbpaste; } &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# if you do not have the xos4-terminus font that makes characters a little bigger :&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# uncoment this line and use the second here document&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#open $FH, &amp;#34; | dmenu -i -l 30 | sed &amp;#39;s/^\\(.\\).*/\\1/&amp;#39; | tr -d &amp;#39;\n&amp;#39; | { xsel -ib; xsel -ip; } &amp;#34;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# also you can compile dmenu from source and change the font size directly in the C done&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# in the file config.h / config.def.h&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# this heredoc is well aligned with the -xos4-terminus-medium-r-*-*-10-* font&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$FH&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;dl&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;«         hyper operator
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;»         hyper operator
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;∈        membership
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;∉        non-membership
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;∪         set union
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;∩         set intersection
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;∖         set difference
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;≡         set equality
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;≢        set inequality
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⊖        symmetric set difference
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⊍         baggy multiplication
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⊎         baggy addition
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;∅        empty set
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⊆        subset
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⊈         not a subset
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⊂        strict subset
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⊄        not a strict subset
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;∋        reverse membership
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;∌          reverse non-membership
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⊇        superset
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⊉         not a superset
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⊃        strict superset
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⊅        not a strict superset
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;∞         infinity
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⚛        atomic operator
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;π        pi
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;τ         tau
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;𝑒         Euler&amp;#39;s number
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;∘         function composition
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;×        multiplication 
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;÷        division
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;≤         inferior or equal
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;≥         greater or equal
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;≠   	     inequality
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;−        substraction
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;≅       approximatively equal
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;…      sequence operator
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;‘         left single quotation mark
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;’         right single quotation mark
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;‚         single low-9 quotation mark 
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;”         right double quotation mark
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;“         left double quotation mark
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;„         double low-9 quotation mark
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;｢         halfwidth left corner bracket
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;｣         halfwidth right corner bracket
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⁺         plus superscript
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⁻         minus superscript
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⁰         0 superscript
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;¹         1 superscript 
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;²         2 superscript 
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;³         3 superscript 
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⁴         4 superscript 
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⁵         5 superscript 
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⁶         6 superscript 
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⁷         7 superscript 
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⁸         8 superscript 
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;⁹         9 superscript 
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&lt;/span&gt;&lt;span class=&#34;dl&#34;&gt;EOF&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# use this without -xos4-terminus-medium-r-*-*-10-* font&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# the default font may change given which font packages are installed and given the font configurations&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#print $FH &amp;lt;&amp;lt;&amp;#39;EOF&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#«         hyper operator&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#»         hyper operator&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#∈         membership&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#∉         non-membership&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#∪         set union&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#∩         set intersection&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#∖         set difference&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#≡         set equality&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#≢         set inequality&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⊖         symmetric set difference&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⊍         baggy multiplication&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⊎         baggy addition&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#∅         empty set&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⊆         subset&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⊈         not a subset&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⊂         strict subset&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⊄         not a strict subset&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#∋         reverse membership&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#∌         reverse non-membership&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⊇         superset&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⊉         not a superset&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⊃         strict superset&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⊅         not a strict superset&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#∞         infinity&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⚛         atomic operator&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#π         pi&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#τ         tau&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#𝑒         Euler&amp;#39;s number&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#∘         function composition&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#×         multiplication &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#÷         division&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#≤         inferior or equal&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#≥         greater or equal&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#≠         inequality&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#−         substraction&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#≅         approximatively equal&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#…         sequence operator&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#‘         left single quotation mark&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#’         right single quotation mark&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#‚         single low-9 quotation mark &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#”         right double quotation mark&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#“         left double quotation mark&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#„         double low-9 quotation mark&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#｢         halfwidth left corner bracket&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#｣         halfwidth right corner bracket&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⁺         plus superscript&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⁻         minus superscript&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⁰         0 superscript&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#¹         1 superscript &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#²         2 superscript &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#³         3 superscript &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⁴         4 superscript &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⁵         5 superscript &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⁶         6 superscript &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⁷         7 superscript &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⁸         8 superscript &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#⁹         9 superscript &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#EOF&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#;&lt;/span&gt;



&lt;span class=&#34;nb&#34;&gt;close&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$FH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;



&lt;span class=&#34;cp&#34;&gt;__END__
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;=pod 
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;=head1 NAME
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;lazy_raku_unicode.pl
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;=head1 SYNOPSIS
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;This script allows you to select a Unicode symbol from a drop-down menu that you can simply paste into your text editor, terminal or IDE.
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;All it does is send a heredoc through a pipe to dmenu, and copy to the clipboard the character that you selected.
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;Dmenu is a program that reads lines from stdin, display them in a menu, and write to stdout the lines selected.
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;It is not practical to execute this script from a terminal each time you want a character though. This is why it should be executed by sxhkd.
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;Sxhkd is the program that will call this script each time you press the right key combination.
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;Only the most useful Unicode characters are present to not make dmenu get too slow. (It is usually very fast when there is only ascii text.)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;This include most of the Raku operators that have a Unicode version, plus some quoting characters, superscripts, and mathematical constants.
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;=head1 MANUAL INSTALLATION STEPS
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;=head2 INSTALLING DMENU
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;B&amp;lt;On Debian or Ubuntu :&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	sudo apt install suckless-tools
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;B&amp;lt;On Archlinux :&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	sudo pacman -Sy dmenu
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;B&amp;lt;Compile it from source :&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	https://tools.suckless.org/dmenu/
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;=head2 CHANGING DMENU FONT SIZE (OPTIIONAL)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;You have only two ways of changing the font size :
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;Change the default font with the B&amp;lt;-fn&amp;gt; flag (See dmenu(1) for the specifics).
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	dmenu -l 30 -fn &amp;#39;-xos4-terminus-medium-r-*-*-10-*&amp;#39;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;Modify directly the C source code of dmenu. Only the files B&amp;lt;config.h / config.def.h&amp;gt;.
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;Simply edit this line and change 10 by 14 for example.
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	static const char *fonts[] = {
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;		&amp;#34;monospace:size=10&amp;#34;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	};
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;Then execute sudo make install and you&amp;#39;re ready to go.
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;=head2 INSTALLING SXHKD
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;B&amp;lt;On Debian or Ubuntu :&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	sudo apt install sxhkd
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;B&amp;lt;On Archlinux :&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	sudo pacman -Sy sxhkd
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;=head2 CONFIGURING SXHKD
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;B&amp;lt;Autostarting sxhkd at startup :&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;simply put this line in B&amp;lt;~/.xprofile&amp;gt; :
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	sxhkd &amp;amp;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;B&amp;lt;Setting the keybinding :&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;Add these two lines in B&amp;lt;~/.config/sxhkd/sxhkdrc&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	ctrl + apostrophe
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;		/path/to/lazy_raku_unicode.pl
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;The keybinding have to start at the beginning of a line, and the command has to follow on the next line and be preceded by a tabulation.
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;To make sxhkd reload the config file, either kill it and relaunch it, or send a SIGUSR1 signal. This command can do it :
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;	pidof sxhkd | kill -SIGUSR1 $(cat /dev/stdin)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;If you want to use a different keybinding, please see sxhkd(1) and use xev(1) to find the name of keys.
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;Here the name of some of the keys : ctrl, super, alt, Return .
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;=head1 SEE ALSO
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;dmenu(1), sxhkd(1), xev(1)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;=cut
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考链接: &lt;a href=&#34;https://docs.raku.org/language/unicode_entry&#34;&gt;https://docs.raku.org/language/unicode_entry&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/raku">Raku</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/unicode">Unicode</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2021-03-01-how-to-type-unicode-in-raku/</guid>
                <pubDate>Mon, 01 Mar 2021 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Method-ish</title>
                <link>https://ohmyweekly.github.io/notes/2021-02-17-method-isd/</link>
                
                
                <description>&lt;blockquote&gt;Method-ish&lt;/blockquote&gt;&lt;p&gt;在我的上一篇文章中，我又一次为从 CORE 中增强类的方法而苦恼。这种挣扎完全没有必要，因为我并没有用增加的方法改变对象的状态。对于做更高级的东西，我可能不得不这样做。把手伸进 Raku 的内部这么深，我可能会把自己烫伤。既然我想做的是把我的代码绑在编译器的变化上，反正我可能会全身心地投入到 nqp-land 中去。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my \j = 1 | 2 | 3;
dd j;
use nqp;
.say for nqp::getattr(j, Junction, &#39;$!eigenstates&#39;);
# OUTPUT: any(1, 2, 3)
          1
          2
          3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以使用 nqp 来获取私有属性，而不需要添加任何方法。这就有点儿不伦不类了。所以，让我们用一个伪方法来做一些 deboilerplating。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub pry(Mu $the-object is raw) {
    use InterceptAllMethods;

    class Interceptor {
        has Mu $!the-object;
        method ^find_method(Mu \type, Str $name) {
            my method (Mu \SELF:) is raw {
                use nqp;
                my $the-object := nqp::getattr(SELF, Interceptor, &#39;$!the-object&#39;);
                nqp::getattr($the-object, $the-object.WHAT, &#39;$!&#39; ~ $name)
            }
        }
    }

    use nqp;
    nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, &#39;$!the-object&#39;, $the-object);
}

.say for j.&amp;amp;pry.eigenstates;
# OUTPUT: 1
          2
          3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过 InterceptAllMethods，lizmat 改变了类关键字的行为，允许我们提供一个 FALLBACK-method 来捕获任何方法，包括从 Mu 继承的方法。这反过来又允许 pry 返回的对象将任何方法调用转移到一个自定义的方法。在这个方法中，我们可以对 &lt;code&gt;.&amp;amp;pry&lt;/code&gt; 被调用的对象做任何我们想做的事情。&lt;/p&gt;
&lt;p&gt;由于我们的特殊对象会拦截任何调用，甚至是 Mu 的调用，我们需要找到另一种方法来调用 &lt;code&gt;.new&lt;/code&gt;。由于 &lt;code&gt;.^&lt;/code&gt; 不是 &lt;code&gt;.&lt;/code&gt; 的特殊形式，我们可以用它来获得对类方法的访问。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub interceptor(Method $the-method){
    use InterceptAllMethods;
    use nqp;

    sub (Mu $the-object is raw) {
        my class Interceptor {
            has Mu $!the-object;
            has Code $!the-method;

            method ^find_method(Mu \type, Mu:D $name) {
                my method (Mu \SELF: |c) is raw {
                    $!the-method.($!the-object, $name, |c)
                }
            }
            method ^introspect(Mu \type, Mu \obj) {
                my method call-it() is raw {
                    $!the-object
                }
                obj.&amp;amp;call-it;
            }
            method ^new(Mu \type, $the-object!, $the-method) {
                nqp::p6bindattrinvres(
                        nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, &#39;$!the-object&#39;, $the-object),
                        Interceptor, &#39;$!the-method&#39;, $the-method)
            }
        }

            # nqp::p6bindattrinvres(
                #     nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, &#39;$!the-object&#39;, $the-object),
                #   Interceptor, &#39;$!the-method&#39;, $the-method);
        Interceptor.^new($the-object, $the-method)
    }
}

my &amp;amp;first-defined = interceptor(
    my method (Positional \SELF: $name) {
        for SELF.flat -&amp;gt; $e {
            with $e.&amp;quot;$name&amp;quot;(|%_) {
                .return
            }
        }
        Nil
    }
);

my $file = &amp;lt;file1.txt file2.txt file3.txt nohup.out&amp;gt;».IO.&amp;amp;first-defined.open(:r);
dd $file;
# OUTPUT: Handle $file = IO::Handle.new(path =&amp;gt; IO::Path.new(&amp;quot;nohup.out&amp;quot;, :SPEC(IO::Spec::Unix), :CWD(&amp;quot;/home/dex/projects/raku/tmp&amp;quot;)), chomp =&amp;gt; Bool::True, nl-in =&amp;gt; $[&amp;quot;\n&amp;quot;, &amp;quot;\r\n&amp;quot;], nl-out =&amp;gt; &amp;quot;\n&amp;quot;, encoding =&amp;gt; &amp;quot;utf8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sub &lt;code&gt;interceptor&lt;/code&gt; 接受一个方法并返回一个 sub。如果这个 sub 像方法一样被调用，它将把要被调用的方法的名称和调用者转发给一个自定义方法。当 &lt;code&gt;.&amp;amp;first-defined&lt;/code&gt; 被调用时，会返回一个特殊的对象。让我们来看看它是什么。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my \uhhh-special = &amp;lt;a b c&amp;gt;.&amp;amp;first-defined;
dd uhhh-special.^introspect(uhhh-special);
# OUTPUT: ($(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;), method &amp;lt;anon&amp;gt; (Positional \SELF: $name, *%_) { #`(Method|93927752146784) ... })
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们必须给 &lt;code&gt;.^introspect&lt;/code&gt; 一个我们想看的对象，因为它的调用者是类 Interceptor 的类型对象。&lt;/p&gt;
&lt;p&gt;目前，我还不知道有什么办法（毕竟，我知道的只是足够多的东西，真的很危险。这是不幸的，因为 lizmat 决定重载关键字 &lt;code&gt;class&lt;/code&gt;，而不是用不同的名字导出特殊的 &lt;code&gt;Metamodel::ClassHOW&lt;/code&gt;。如果我们不想或不能有外部依赖，我们可以使用 MOP 来创建我们的类型对象。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;class InterceptHOW is Metamodel::ClassHOW {
    method publish_method_cache(|) { }
}

sub ipry(Mu $the-object is raw) {
    my \Interceptor = InterceptHOW.new_type(:name&amp;lt;Interceptor&amp;gt;);
    Interceptor.^add_attribute(Attribute.new(:name&amp;lt;$!the-object&amp;gt;, :type(Mu), :package(Interceptor)));
    Interceptor.^add_meta_method(&#39;find_method&#39;,
        my method find_method(Mu \type, Str $name) {
            # say „looking for $name“;
            my method (Mu \SELF:) is raw {
                use nqp;
                my $the-object := nqp::getattr(SELF, Interceptor, &#39;$!the-object&#39;);
                nqp::getattr($the-object, $the-object.WHAT, &#39;$!&#39; ~ $name)
            }
    });
    Interceptor.^compose;

    use nqp;
    nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, &#39;$!the-object&#39;, $the-object);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当我写这篇文章的时候，我发现 &lt;code&gt;.^add_meta_method&lt;/code&gt; 只有在提供给它的方法的第一个参数的名字和 &lt;code&gt;Str&lt;/code&gt; 相同的时候才会工作。起初，我尝试了一个匿名方法，它最终出现在 &lt;code&gt;.^meta_method_table&lt;/code&gt; 中，但从未被调用。我想这个 bug 其实并不重要，因为这个元方法根本没有被记录下来。如果我玩火，我没有权利抱怨烧伤。你会在野外的 &lt;code&gt;Actions.nqp&lt;/code&gt; 中发现这个方法。Class 关键字并没有什么神奇的作用。Rakudo 只是使用 MOP 来构造类型对象。&lt;/p&gt;
&lt;p&gt;我们不能在 Raku 中重载赋值操作符。这其实并不需要，因为赋值是通过调用一个名为 STORE 的方法来实现的。由于我们得到了对 dispatch 的完全控制，我们可以拦截任何方法调用，包括一连串的方法调用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;multi sub methodify(%h, :$deeply!) {
    sub interceptor(%h, $parent = Nil){
        use InterceptAllMethods;
        use nqp;

        class Interceptor is Callable {
            has Mu $!the-object;
            has Mu @!stack;

            method ^find_method(Mu \type, Mu:D $name) {
                my method (Mu \SELF: |c) is raw {
                    my @new-stack = @!stack;
                    my $the-object = $!the-object;

                    if $name eq &#39;STORE&#39; {
                        # workaround for rakudobug#4203
                        $the-object{||@new-stack.head(*-1)}:delete if $the-object{||@new-stack.head(*-1)}:exists;

                        $the-object{||@new-stack} = c;
                        return-rw c
                    } else {
                        @new-stack.push: $name;
                        my \nextlevel = SELF.^new($!the-object, @new-stack, $name);
                        nextlevel
                    }
                }
            }
            method ^introspect(Mu \type, Mu \obj) {
                my method call-it() is raw {
                    $!the-object, @!stack
                }
                obj.&amp;amp;call-it;
            }
            method ^new(Mu \type, $the-object!, @new-stack?, $name?) {
                $name
                    ?? nqp::p6bindattrinvres(
                        nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, &#39;$!the-object&#39;, $the-object),
                        Interceptor, &#39;@!stack&#39;, @new-stack)
                    !! nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, &#39;$!the-object&#39;, $the-object)
                }
        }

        Interceptor.^new(%h)
    }

    interceptor(%h)
}

my %h2;
my $o2 = methodify(%h2, :deeply);
$o2.a.b = 42;
dd %h2;
$o2.a.b.c = &amp;lt;answer&amp;gt;;
dd %h2;
say $o2.a.b.c;
# OUTPUT: Hash %h2 = {:a(${:b(\(42))})}
          Hash %h2 = {:a(${:b(${:c(\(&amp;quot;answer&amp;quot;))})})}
          This type cannot unbox to a native string: P6opaque, Interceptor
            in block &amp;lt;unit&amp;gt; at /home/dex/projects/raku/any-chain.raku line 310
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每当我们调用一个方法时，都会创建一个新的 Interceptor 实例，它存储了前一个方法的名称。这样我们就可以沿着方法调用链移动。由于赋值调用 STORE，我们可以将赋值转移到我们用作实际数据结构的 Hash 中。唉，检索值就不一样了，因为 Raku 不区分方法调用和 FETCH。在这里，龙比我强。我还是包含了这个一半失败的尝试，因为我对 slippy 半列表有很好的利用。这需要使用 &lt;code&gt;v6.e.preview&lt;/code&gt;，让我踩到了一个 bug。可能还有更多这样的情况。所以请使用同样的，这样我们就可以在 &lt;code&gt;.e&lt;/code&gt; 发布到野外之前，把所有的野兽都杀掉。&lt;/p&gt;
&lt;p&gt;能够完全控制方法调用链将是一件好事。也许我们可以用 RakuAST 来做到这一点。&lt;/p&gt;
&lt;p&gt;有了这些已经可以工作的东西，我们可以做一些有趣的事情。那些烦人的异常总是在拖我们的后腿。我们可以用 &lt;code&gt;try&lt;/code&gt; 来化解它们，但那会破坏一个方法调用链。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;constant no-argument-given = Mu.new;
sub try(Mu $obj is raw, Mu $alternate-value = no-argument-given) {
    interceptor(my method (Mu \SELF: $name, |c) {
        my $o = SELF;
        my \m = $o.^lookup($name) orelse {
            my $bt = Backtrace.new;
            my $idx = $bt.next-interesting-index($bt.next-interesting-index + 1);
            (X::Method::NotFound.new(:method($name), :typename($o.^name)) but role :: { method vault-backtrace { False }}).throw(Backtrace.new($idx + 1));
        }

        try {
            $o = $o.&amp;quot;$name&amp;quot;(|c);
        }
 
        $! ~~ Exception
            ?? $alternate-value.WHICH eqv no-argument-given.WHICH
                ?? $o
                !! $alternate-value
            !! $o
    }).($obj)
}

class C {
    has $.greeting;
    method might-throw { die &amp;quot;Not today love!&amp;quot; }
    method greet { say $.greeting }
}

C.new(greeting =&amp;gt; ‚Let&#39;s make love!‘).&amp;amp;try.might-throw.greet;
# OUTPUT: Let&#39;s make love!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;伪方法 try 将会化解任何异常，并允许继续调用 C 语言的方法。我必须用一个特殊的值来标记没有可选的参数 &lt;code&gt;$alternate-value&lt;/code&gt;，因为它实际上可能会把异常对象变成 &lt;code&gt;Nil&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我很肯定还有很多这样的小帮手在等着我们去发现。未来可能会有一个模块，希望能帮助 Raku 成为一个好的&lt;a href=&#34;https://ftp.fau.de/fosdem/2021/D.perl/programming_lang_for_free_software.webm&#34;&gt;编程语言&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href=&#34;https://gfldex.wordpress.com/2021/02/17/method-ish/&#34;&gt;https://gfldex.wordpress.com/2021/02/17/method-ish/&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/raku">Raku</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku-%E5%8D%9A%E5%AE%A2">Raku 博客</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2021-02-17-method-isd/</guid>
                <pubDate>Sun, 28 Feb 2021 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>模式分派</title>
                <link>https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/</link>
                
                
                <description>&lt;blockquote&gt;Pattern Dispatch&lt;/blockquote&gt;&lt;p&gt;一直以来乐于助人的 &lt;a href=&#34;https://stackoverflow.com/users/1077672/raiph&#34;&gt;raiph&lt;/a&gt; 在回答一个关于模式匹配的&lt;a href=&#34;https://stackoverflow.com/questions/66233465/haskell-like-pattern-matching-in-raku&#34;&gt;问题&lt;/a&gt;时希望得到 RakuAST，就像在 Haskell 中一样。有人提出用 MMD 来解决这个问题。这样做，得到一个贯穿的默认路径是无解的。由于 dispatch 简单来说就是模式匹配，我们只需要做一些额外的工作。简而言之，dispatcher 得到一个函数列表和一个带参数的列表。第一个接受所有参数的函数获胜。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;class Hold { has $.key; }
class Press { has $.key; }
class Err { has $.msg; }

sub else(&amp;amp;code) { &amp;amp;code }

sub match($needle, *@tests) {
    for @tests.head(*-1) -&amp;gt; &amp;amp;f {
        if &amp;amp;f.cando(\($needle)) {
            return f($needle);
        }
    }
    @tests.tail.();
}

match Hold.new(:key&amp;lt;a&amp;gt;),
    -&amp;gt; Hold (:$key) { put „holding $key“; },
    -&amp;gt; Press (:$key) { put „pressing $key“; },
    -&amp;gt; Err (:$msg) { warn „ERR: $msg“ },
    else { fail ‚unsopported‘ };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方法 &lt;code&gt;.cando&lt;/code&gt; 需要一个 &lt;a href=&#34;https://docs.raku.org/type/Capture&#34;&gt;Capture&lt;/a&gt; 来告诉我们一个 Routine 是否可以用一个给定的参数列表来调用。为了创建这样一个捕获，我们使用字面的 &lt;code&gt;\($arguments, $go, $here)&lt;/code&gt;。我们不在最后测试默认值。相反，当没有其他函数匹配时，我们会调用该函数。声明 sub &lt;code&gt;else&lt;/code&gt; 只是为了美化。&lt;/p&gt;
&lt;p&gt;由于我们是在函数式的土地上，我们可以使用 Raku 提供给我们的所有方便的功能。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my &amp;amp;key-matcher = &amp;amp;match.assuming(*,[
        -&amp;gt; Hold (:$key) { put „holding $key“; },
        -&amp;gt; Press (:$key) { put „pressing $key“; },
        -&amp;gt; Err (:$msg) { warn „ERR: $msg“ },
        else { fail ‚unsopported‘ };
]);

sub key-source {
    gather loop {
        sleep 1;
        take (Hold.new(:key&amp;lt;a&amp;gt;), Press.new(:key&amp;lt;b&amp;gt;), Err.new(:msg&amp;lt;WELP!&amp;gt;), &#39;unsupported&#39;).pick;
    }
}

.&amp;amp;key-matcher for key-source;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们要帮助 &lt;code&gt;.assuming&lt;/code&gt; 有点理解 slurpies，把函数列表放在一个显式 Array 中。&lt;/p&gt;
&lt;p&gt;总有一种函数式的方法来解决一个问题。有时我们甚至可以从中得到一个整齐的语法。&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href=&#34;https://gfldex.wordpress.com/2021/02/24/pattern-dispatch/&#34;&gt;https://gfldex.wordpress.com/2021/02/24/pattern-dispatch/&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/raku">Raku</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku-%E5%8D%9A%E5%AE%A2">Raku 博客</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/</guid>
                <pubDate>Sun, 28 Feb 2021 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>自定义 when</title>
                <link>https://ohmyweekly.github.io/notes/2021-02-28-custom-when/</link>
                
                
                <description>&lt;blockquote&gt;Custom When&lt;/blockquote&gt;&lt;p&gt;我不太喜欢上一篇文章中使用匹配的语法。它的参数列表中的逗号看起来很奇怪，不合适。也许是因为我的眼睛习惯了给定的块。睡一觉就好了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub accord(&amp;amp;c) { (c(CALLER::&amp;lt;$_&amp;gt;); succeed) if &amp;amp;c.cando(\(CALLER::&amp;lt;$_&amp;gt;)) }

given Err.new(:msg&amp;lt;a&amp;gt;) {
    accord -&amp;gt; Hold (:$key) { put „holding $key“; }
    accord -&amp;gt; Err (:$msg) { warn „ERR: $msg“ }
    default { fail ‚unsupported‘ }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是因为 &lt;code&gt;accord&lt;/code&gt; 模仿了 &lt;code&gt;when&lt;/code&gt; 的工作。它做了一些匹配，当 True 时调用一个块，并在每个块的结尾添加一个 success（通过抛出一个控制异常）。given 所做的只是设置主题。它还充当了 caller 的角色，所以我们可以通过一个伪包来访问它的 &lt;code&gt;$_&lt;/code&gt;。利用 pointy 的签名来做&lt;a href=&#34;https://docs.raku.org/type/Signature#Destructuring_arguments&#34;&gt;解构&lt;/a&gt;是相当强大的。把这个添加到 CORE 中可能是个好主意。&lt;/p&gt;
&lt;p&gt;我们可能要把 Raku 的定义改成: &amp;ldquo;Raku 是一种高度可组合的编程语言&amp;rdquo;, 在这里，所有的东西都会落到实处。&amp;quot;&lt;/p&gt;
&lt;p&gt;更新一下。&lt;/p&gt;
&lt;p&gt;有些情况下，&lt;code&gt;$_&lt;/code&gt; 不是动态的。另外，success 正在抛出一个控制异常，而这些的处理程序是由 when 或默认添加的。这种情况是在编译时发生的，目前不能用宏来解决。第一个问题可以用黑魔法解决。后一个问题需要用默认块。我没有找到一种方法来提供一个合理的错误信息，如果缺少这个块。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;multi sub accord(&amp;amp;c) {
    use nqp;
    $_ := nqp::getlexcaller(&#39;$_&#39;);
    (c($_); succeed) if &amp;amp;c.cando(\($_))
}

for @possibilities.roll(1) -&amp;gt; $needle {
    given $needle {
        accord -&amp;gt; Hold (:$key) { put „holding $key“; }
        accord -&amp;gt; Err (:$msg) { warn „ERR: $msg“ }
        default { warn ‚unsopported‘ }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原文链接: &lt;a href=&#34;https://gfldex.wordpress.com/2021/02/25/custom-when/&#34;&gt;https://gfldex.wordpress.com/2021/02/25/custom-when/&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/raku">Raku</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/rakulang">Rakulang</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2021-02-28-custom-when/</guid>
                <pubDate>Sun, 28 Feb 2021 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>为最年轻的 Raku 贡献力量</title>
                <link>https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/</link>
                
                
                <description>&lt;blockquote&gt;Contributing to Raku&lt;/blockquote&gt;&lt;p&gt;在过去的几周里，我看到了一些&lt;a href=&#34;https://mydeveloperplanet.com/2021/01/20/how-to-start-contributing-to-open-source/&#34;&gt;文章&lt;/a&gt;和&lt;a href=&#34;https://youtu.be/GAqfMNB-YBU&#34;&gt;视频&lt;/a&gt;，讲述了在开源软件中构思是多么的伟大。这次我又想起了另一篇旧文&lt;a href=&#34;http://strangelyconsistent.org/blog/perl-6-is-my-mmorpg&#34;&gt;Raku 是我的 MMORPG&lt;/a&gt;。它说，你可以从以下几个方面受益于开源软件。比如说，可以做一个大侠，基于一些开源软件来写软件。作为写手，可以写博客、微博等，对所选软件产生兴趣。或者你可以成为一个法师 - 实现新的功能和修复 bug。今天小编就带着弓箭手来告诉大家如何成为 &lt;a href=&#34;https://raku.org/&#34;&gt;Raku&lt;/a&gt; 编程语言的法师。&lt;/p&gt;
&lt;h2 id=&#34;选择一个任务&#34;&gt;选择一个任务&lt;/h2&gt;
&lt;p&gt;让我们挑选一些编译器的 bug，并修复它。让我们去 &lt;a href=&#34;https://rakudo.org/&#34;&gt;Rakudo&lt;/a&gt; 编译器 &lt;a href=&#34;https://github.com/rakudo/rakudo/issues&#34;&gt;issues&lt;/a&gt;中选择我们想要修复的 bug。我滚动了一下 bug 列表，遇到了解析 - 运气不错，我前段时间一直在研究&lt;a href=&#34;https://www.apress.com/gp/book/9781484232279&#34;&gt;编译器语法&lt;/a&gt;，看了一本这方面的好书。找到了四个问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rakurs.atroxaper.net/assets/img/posts/2021-02-13-contributing-raku-1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标签为 LTA （Less Than Awesome - 当真实行为与直觉预期不同时）- 我们暂时把它划掉。&lt;/li&gt;
&lt;li&gt;标签 &amp;ldquo;需要共识&amp;rdquo; - 我们只想修复一个不复杂的 bug - 肯定要划掉。&lt;/li&gt;
&lt;li&gt;标签为 &amp;ldquo;grammar and actions&amp;rdquo; 的关于一个可能死的代码是一个很好的候选人的第一个任务。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;任务确定后，现在我们需要配置工作环境。在 Windows、Linux 和 macOS 中，一切应该都差不多。我将通过 macOS 的例子来告诉你。&lt;/p&gt;
&lt;h2 id=&#34;建立工作环境&#34;&gt;建立工作环境&lt;/h2&gt;
&lt;p&gt;为源码和我们建立的编译器建立文件夹。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir ~/dev-rakudo &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir ~/dev-rakudo-install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rakudo 编译器由三部分组成。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;虚拟机。现在有三种 - JVM、JS 和 MoarVM。我们以 MoarVM 为最稳定的一个。&lt;/li&gt;
&lt;li&gt;NQP（Not Quite Perl），是一种低级（中级）语言的实现，它是 Raku 的一个 &amp;ldquo;子集&amp;rdquo;。虚拟机可以执行用 NQP 编写的代码。&lt;/li&gt;
&lt;li&gt;Rakudo 编译器本身，用 NQP 和 Raku 编写。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下载并编译这三个组件。我分别花了一分半钟、半分钟和两分半钟才编好。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/dev-rakudo &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clone git@github.com:MoarVM/MoarVM.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; MoarVM
perl Configure.pl --prefix ~/dev-rakudo-install &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make -j &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install

&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/dev-rakudo &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clone git@github.com:Raku/nqp.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; nqp
perl Configure.pl --backend&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;moar --prefix ~/dev-rakudo-install &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make -j &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install

&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/dev-rakudo &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clone git@github.com:rakudo/rakudo.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; rakudo
perl Configure.pl --backend&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;moar --prefix ~/dev-rakudo-install &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make -j &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意参数。&lt;code&gt;--prefix&lt;/code&gt; 显示了 &lt;code&gt;make install&lt;/code&gt; 命令后可执行文件的复制位置，&lt;code&gt;--backend=moar&lt;/code&gt; 表示正在使用的虚拟机，而 &lt;code&gt;-j 4&lt;/code&gt; 则要求跨多线程并行化（以防加快进度）。现在我们已经建立了 Rakudo 编译器 &lt;code&gt;~/dev-rakudo-install/bin/raku&lt;/code&gt;。我们还需要官方的编译器测试套件。你应该把它和它的代码一起放在文件夹里。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/dev-rakudo/rakudo &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clone https://github.com/Raku/roast.git t/spec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们先进行测试。这种情况很常见，有些测试甚至在新的变化之前就失败了。我们需要辨别出来，这样以后就不会害怕这些变化破坏了一些不必要的东西。&lt;/p&gt;
&lt;p&gt;这里和下面我将在 &lt;code&gt;~/dev-rakudo/rakudo&lt;/code&gt; 文件夹中工作，除非另有说明。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; make spectest
[...]
Test Summary Report
-------------------
t/spec/S32-str/utf8-c8.t    (Wstat: 65280 Tests: 54 Failed: 0)
  Non-zero exit status: 255
  Parse errors: Bad plan.  You planned 66 tests but ran 54.
Files=1346, Tests=117144, 829 wallclock secs (27.70 usr  6.04 sys + 2638.79 cusr 210.98 csys = 2883.51 CPU)
Result: FAIL
make: *** [m-spectest5] Error 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;14分钟内共运行了1,346个文件中的117,144次测试。一些与utf8相关的测试由于某种原因失败了，其他的都能正常工作。我们已经准备好去工作了!&lt;/p&gt;
&lt;h2 id=&#34;让我们来看看问题的陈述&#34;&gt;让我们来看看问题的陈述&lt;/h2&gt;
&lt;p&gt;问题陈述说，某个元运算符 &lt;code&gt;R&lt;/code&gt; 在 colonpair 上出了问题。我打开文档，搜索 R 这个词，但下拉列表中没有这个名字的元运算符。我试着输入 metaop，看到的是反向元操作符(R)。原来，如果你想把二元运算的操作数按相反的顺序写出来，你可以在其符号前使用前缀 R。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;say 3 R- 2 == -1 # Output: True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Colonpair 是命名对的语法。它看起来就像名字前面有一个冒号，前面有一个括号，有一个值。例如 &lt;code&gt;:foo(42)&lt;/code&gt; 是一个名称为 &lt;code&gt;foo&lt;/code&gt;、值为 &lt;code&gt;42&lt;/code&gt; 的对儿。这个语法通常用于在调用函数时，向函数传递一个命名参数中的值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub sub-with-named-parameter(:$foo) {
    say $foo;
}

sub-with-named-parameter(:foo(42)); # Output: 42
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果一个函数参数不是命名的，而是位置的，那么在用命名对调用时，就会出现编译错误。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub sub-without-named-parameter($foo) { # &amp;lt;- 没有冒号
  say $foo;
}

sub-without-named-parameter(:foo(42)); # Unexpected named argument &#39;foo&#39; passed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你在调用这样的函数时用括号包围一个参数，整个参数对将被传递到位置参数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub sub-without-named-parameter($foo) {
  say $foo;
}

sub-without-named-parameter((:foo(42))); # Output: foo =&amp;gt; 42
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 Raku 中，你可以写一个函数来捕获所有传递给它的参数并分析它们。这是在单个参数 - 捕获前用竖线完成的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub sub-with-capture(|foo) { # &amp;lt;- 参数捕获
  say foo;
}

sub-with-capture(:foo(42));     # Output: \(:foo(42))
sub-with-capture(42);           # Output: \(42)
sub-with-capture(:foo(3 Z- 2)); # Output: \(:foo((1,).Seq))
sub-with-capture(:foo(3 R- 2)); # Output: \(-1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;倒数第二行使用了 Z 元操作符 - zip 操作符。它将左右两部分作为一个列表，按顺序每次从它们中抽取一个元素，并进行操作，从而形成一个序列。&lt;/p&gt;
&lt;p&gt;在最后一行，只用了我们需要的 R 元操作符。在这种情况下，它不是一个对，而是一个常量，它被传递到函数中。我们可以假设这是元运算符工作方式的一些特殊性，但用 Z 的例子表明并非如此。其实这是一个 bug - 当一个对被传递到一个使用 R 元运算符的函数中时，它的值会被转换。&lt;/p&gt;
&lt;h2 id=&#34;我们需要一个新的测试&#34;&gt;我们需要一个新的测试&lt;/h2&gt;
&lt;p&gt;为了确保未来的变化能够修复错误的行为，我们需要写一个新的测试。在测试文件中不难找到 R 元操作符的测试（&lt;a href=&#34;https://github.com/Raku/roast/blob/fea1d16d993eb851d2935155e0b0d074fa3593bf/S03-metaops/reverse.t&#34;&gt;S03-metops/reverse.t&lt;/a&gt;）。下面我将补充以下测试。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;# https://github.com/rakudo/rakudo/issues/1632
{
  sub subroutine($expected, |actual) {
    is actual.gist, $expected, &amp;quot;Сolonpair exists&amp;quot;
  }

  subroutine(&#39;\(:foo(-1))&#39;, :foo(3 R- 2));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该测试有一个功能，有两个参数 - 正常和捕获。在函数体中，第一个参数和传递的 Capture 的字符串表示进行比较。你可以使用 &lt;code&gt;make&lt;/code&gt; 对新构建的编译器进行单独测试。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; make t/spec/S03-metaops/reverse.t
[...]
ok 69 - [R~]=
not ok 70 - Colonpair exists
# Failed test &#39;Colonpair exists&#39;
# at t/spec/S03-metaops/reverse.t line 191
# expected: &#39;\(:foo(-1))&#39;
#      got: &#39;\(-1)&#39;
# You planned 69 tests, but ran 70
# You failed 1 test of 70
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可以看到，测试失败了（如预期）。还有一个单独的说明，系统预计69次测试，但收到70次。这是基于 TAP 的测试系统的特点 - 必须在文件的顶部修正传递给 &lt;code&gt;plan&lt;/code&gt; 函数的数字。现在测试崩溃了，但编号没有受到影响。你可以开始修复它。&lt;/p&gt;
&lt;h2 id=&#34;凝视法&#34;&gt;凝视法&lt;/h2&gt;
&lt;p&gt;一开始我很相信任务上的标签 - 如果是解析的话，一定是源码解析阶段的某个地方出现了问题。目前我的认识如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基础解析器代码在文件 &lt;code&gt;rakudo/src/Perl6/Grammar.nqp&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;这个解析器是从 &lt;code&gt;nqp/src/HLL/Grammar.nqp&lt;/code&gt; 文件中的基础解析器继承的。&lt;/li&gt;
&lt;li&gt;元操作符的解析和工作方式都差不多，你可以通过仔细观察来发现不同之处。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我在基础解析器代码中找到了对元操作符的引用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;token infix_prefix_meta_operator:sym&amp;lt;R&amp;gt; {
  &amp;lt;sym&amp;gt; &amp;lt;infixish(&#39;R&#39;)&amp;gt; {}
  &amp;lt;.can_meta($&amp;lt;infixish&amp;gt;, &amp;quot;reverse the args of&amp;quot;)&amp;gt;
  &amp;lt;O=.revO($&amp;lt;infixish&amp;gt;)&amp;gt;
}

token infix_prefix_meta_operator:sym&amp;lt;Z&amp;gt; {
  &amp;lt;sym&amp;gt; &amp;lt;infixish(&#39;Z&#39;)&amp;gt; {}
  &amp;lt;.can_meta($&amp;lt;infixish&amp;gt;, &amp;quot;zip with&amp;quot;)&amp;gt;
  &amp;lt;O(|%list_infix)&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这需要对 Raku grammar 有一定的了解。据我所知，原来这两个元运算符在解析上并没有根本的区别。一段时间后，在解析器的源代码中挖得够多了，我开始怀疑解析工作是否正确。认为代码 &lt;code&gt;my $r = :foo(3 R- 2); say $r; # Output: foo =&amp;gt; -1&lt;/code&gt; 正确工作的建议 - 问题恰恰发生在调用函数时。显然，我白白相信了任务栏上的标签。&lt;/p&gt;
&lt;h2 id=&#34;编译器将帮助我们&#34;&gt;编译器将帮助我们&lt;/h2&gt;
&lt;p&gt;颇为迟钝的我想起了我从一开始就应该做的事情。Rakudo 编译器有 &lt;code&gt;--target&lt;/code&gt; 调试开关。它取编译器阶段的名称，你想将其结果输出到控制台并退出。我想看看 &lt;code&gt;--target=parse&lt;/code&gt;（因为我只知道这一个）。&lt;/p&gt;
&lt;p&gt;我从 &lt;code&gt;~/dev-rakudo/rakudo&lt;/code&gt; 文件夹中使用 &lt;code&gt;rakumo-m&lt;/code&gt;，这样我就不必等待通过 &lt;code&gt;make install&lt;/code&gt; 命令将所需文件复制到 &lt;code&gt;~/dev-rakudo-install&lt;/code&gt;。简单的脚本可以这样运行。更复杂的脚本必须在 &lt;code&gt;make install&lt;/code&gt; 之后从 &lt;code&gt;-install&lt;/code&gt; 中运行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; cat ~/test.raku
sub s(|c) { say c }
s(:foo(3 R- 2));
s(:foo(3 Z- 2));

&amp;gt; ./rakudo-m --target=parse ~/test.raku
[...]
- args: (:foo(3 R- 2))
  - semiarglist: :foo(3 R- 2)
    - arglist: 1 matches
      - EXPR: :foo(3 R- 2)
        - colonpair: :foo(3 R- 2)
          - identifier: foo
          - coloncircumfix: (3 R- 2)
            - circumfix: (3 R- 2)
              - semilist: 3 R- 2
                - statement: 1 matches
                  - EXPR: R- 2
[...]
- args: (:foo(3 Z- 2))
  - semiarglist: :foo(3 Z- 2)
    - arglist: 1 matches
      - EXPR: :foo(3 Z- 2)
        - colonpair: :foo(3 Z- 2)
          - identifier: foo
          - coloncircumfix: (3 Z- 2)
            - circumfix: (3 Z- 2)
              - semilist: 3 Z- 2
                - statement: 1 matches
                  - EXPR: Z- 2
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结论：R 和 Z 的解析是一样的。&lt;/p&gt;
&lt;h2 id=&#34;这不是解析&#34;&gt;这不是解析&lt;/h2&gt;
&lt;p&gt;所有被解析的东西都会被传递给所谓的 Action，把字词变成一棵语法树。在我们的例子中，Actions 位于文件 &lt;code&gt;rakudo/src/Perl6/Actions.nqp&lt;/code&gt; 和 &lt;code&gt;nqp/src/HLL/Actions.nqp&lt;/code&gt; 中。这里就比较容易搞清楚了，毕竟是代码，是 grammar。&lt;/p&gt;
&lt;p&gt;我在主 Actions 中找到了以下代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[...]
elsif $&amp;lt;infix_prefix_meta_operator&amp;gt; {
[...]
  if    $metasym eq &#39;R&#39; { $helper := &#39;&amp;amp;METAOP_REVERSE&#39;; $t := nqp::flip($t) if $t; }
  elsif $metasym eq &#39;X&#39; { $helper := &#39;&amp;amp;METAOP_CROSS&#39;; $t := nqp::uc($t); }
  elsif $metasym eq &#39;Z&#39; { $helper := &#39;&amp;amp;METAOP_ZIP&#39;; $t := nqp::uc($t); }
  
  my $metapast := QAST::Op.new( :op&amp;lt;call&amp;gt;, :name($helper), WANTED($basepast,&#39;infixish&#39;) );
  $metapast.push(QAST::Var.new(:name(baseop_reduce($base&amp;lt;OPER&amp;gt;&amp;lt;O&amp;gt;.made)), :scope&amp;lt;lexical&amp;gt;))
    if $metasym eq &#39;X&#39; || $metasym eq &#39;Z&#39;;
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它说，如果在代码中解析了元操作符 &lt;code&gt;R&lt;/code&gt;、&lt;code&gt;Z&lt;/code&gt; 或 &lt;code&gt;X&lt;/code&gt;，就应该在语法树中添加一些 &lt;code&gt;METAOP_&lt;/code&gt; 函数调用。在 &lt;code&gt;Z&lt;/code&gt; 和 &lt;code&gt;X&lt;/code&gt; 的情况下，它会多一个参数，即某种还原函数。所有这些功能都可以在 &lt;code&gt;rakudo/src/core.c/metaops.pm6&lt;/code&gt; 中找到。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub METAOP_REVERSE(\op) is implementation-detail {
  -&amp;gt; |args { op.(|args.reverse) }
}

sub METAOP_ZIP(\op, &amp;amp;reduce) is implementation-detail {
 nqp::if(op.prec(&#39;thunky&#39;).starts-with(&#39;.&#39;),
  -&amp;gt; +lol {
    my $arity = lol.elems;
    [...]
  },
  -&amp;gt; +lol {
    Seq.new(Rakudo::Iterator.ZipIterablesOp(lol,op))
  }
  )
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;给你：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;\op&lt;/code&gt; 是由我们的元操作符，即-，在前面的操作。&lt;/li&gt;
&lt;li&gt;Trait &lt;code&gt;implementation-detail&lt;/code&gt; 只是表明这不是公共代码，是编译器实现的一部分。&lt;/li&gt;
&lt;li&gt;由于-操作没有笨重的特性，所以 &lt;code&gt;&amp;amp;reduce&lt;/code&gt; 函数不会参与计算，&lt;code&gt;Z&lt;/code&gt; 的结果是 &lt;code&gt;Seq.new(...)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt; 的结果是一个操作调用 - 参数顺序相反。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这时我想起还有一个 - 目标，即星。它将显示行动的结果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; ./rakudo-m --target=ast ~/test.raku
[...]
- QAST::Op(call &amp;amp;s) &amp;lt;sunk&amp;gt; :statement_id&amp;lt;4&amp;gt; s(:foo(3 R- 2))
  - QAST::Op+{QAST::SpecialArg}(call :named&amp;lt;foo&amp;gt;) &amp;lt;wanted&amp;gt; :statement_id&amp;lt;5&amp;gt; :before_promotion&amp;lt;?&amp;gt; R-
    - QAST::Op(call &amp;amp;METAOP_REVERSE) &amp;lt;wanted&amp;gt; :is_pure&amp;lt;?&amp;gt;
      - QAST::Var(lexical &amp;amp;infix:&amp;lt;-&amp;gt;) &amp;lt;wanted&amp;gt;
    - QAST::Want &amp;lt;wanted&amp;gt; 3
      - QAST::WVal(Int)
      - Ii
      - QAST::IVal(3)  3
    - QAST::Want &amp;lt;wanted&amp;gt; 2
      - QAST::WVal(Int)
      - Ii
      - QAST::IVal(2)  2
[...]
- QAST::Op(call &amp;amp;s) &amp;lt;sunk&amp;gt; :statement_id&amp;lt;7&amp;gt; s(:foo(3 Z- 2))
  - QAST::Op+{QAST::SpecialArg}(:named&amp;lt;foo&amp;gt;) &amp;lt;wanted&amp;gt; :statement_id&amp;lt;8&amp;gt; :before_promotion&amp;lt;?&amp;gt; Z-
    - QAST::Op(call &amp;amp;METAOP_ZIP) &amp;lt;wanted&amp;gt; :is_pure&amp;lt;?&amp;gt;
      - QAST::Var(lexical &amp;amp;infix:&amp;lt;-&amp;gt;) &amp;lt;wanted&amp;gt;
      - QAST::Var(lexical &amp;amp;METAOP_REDUCE_LEFT)
    - QAST::Want &amp;lt;wanted&amp;gt; 3
      - QAST::WVal(Int)
      - Ii
      - QAST::IVal(3)  3
    - QAST::Want &amp;lt;wanted&amp;gt; 2
      - QAST::WVal(Int)
      - Ii
      - QAST::IVal(2)  2
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一如所料。除了调用不同的 &lt;code&gt;METAOP_&lt;/code&gt; 函数外，所有的东西几乎都是一样的。从它们的代码中我们可以知道，原则上这些函数的不同之处在于返回值的类型 - 分别是 &lt;code&gt;Int&lt;/code&gt; 和 &lt;code&gt;Seq&lt;/code&gt;。众所周知，Raku 对不同类型的对象的上下文相当敏感&amp;hellip;&amp;hellip;我想，它关注的可能是返回值。我试着用下面的方式修改代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub METAOP_REVERSE(\op) is implementation-detail {
  -&amp;gt; |args { Seq.new(op.(|args.reverse)) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译、运行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; make
[...]
Stage start      :   0.000
Stage parse      :  61.026
Stage syntaxcheck:   0.000
Stage ast        :   0.000
Stage optimize   :   7.076
Stage mast       :  14.120
Stage mbc        :   3.941
[...]
&amp;gt; ./rakudo-m ~/test.raku
\(-1)
\(:foo((1,).Seq))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一切都没有改变。所以，不是返回值&amp;hellip;&amp;hellip;想了想，不知道为什么结果又是 &lt;code&gt;-1&lt;/code&gt; 而不是 &lt;code&gt;(-1,).Seq&lt;/code&gt;。而且，从代码来看，&lt;code&gt;Seq&lt;/code&gt; 根本就没有一个合适的构造函数。下一次，作为一些疯狂的事情，我尝试调用 &lt;code&gt;METAOP_REVERSE&lt;/code&gt; 结果只是为了崩溃。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub METAOP_REVERSE(\op) is implementation-detail {
  -&amp;gt; |args { die }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译、运行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; make
[...]
&amp;gt; ./rakudo-m ~/test.raku
\(-1)
\(:foo((1,).Seq))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;怎么会呢？语法树中包含了对 &lt;code&gt;METAOP_REVERSE&lt;/code&gt; 的调用，它的代码应该是折叠的，但计算仍然进行，我们得到 &lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这些都不是《行动》。&lt;/p&gt;
&lt;p&gt;这里我的目光落在编译器的构建日志上。它是一些阶段被列在那里。我随机试了 &lt;code&gt;--target=mast&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; ./rakudo-m --target=mast ~/test.raku
[...]
MAST::Frame name&amp;lt;s&amp;gt;, cuuid&amp;lt;1&amp;gt;
  Local types: 0&amp;lt;obj&amp;gt;, 1&amp;lt;obj&amp;gt;, 2&amp;lt;obj&amp;gt;, 3&amp;lt;obj&amp;gt;, 4&amp;lt;int&amp;gt;, 5&amp;lt;str&amp;gt;, 6&amp;lt;obj&amp;gt;, 7&amp;lt;obj&amp;gt;, 8&amp;lt;obj&amp;gt;,
  Lexical types: 0&amp;lt;obj&amp;gt;, 1&amp;lt;obj&amp;gt;, 2&amp;lt;obj&amp;gt;, 3&amp;lt;obj&amp;gt;, 4&amp;lt;obj&amp;gt;,
  Lexical names: 0&amp;lt;c&amp;gt;, 1&amp;lt;$¢&amp;gt;, 2&amp;lt;$!&amp;gt;, 3&amp;lt;$/&amp;gt;, 4&amp;lt;$*DISPATCHER&amp;gt;,
  Lexical map: $!&amp;lt;2&amp;gt;, c&amp;lt;0&amp;gt;, $*DISPATCHER&amp;lt;4&amp;gt;, $¢&amp;lt;1&amp;gt;, $/&amp;lt;3&amp;gt;,
  Outer: name&amp;lt;&amp;lt;unit&amp;gt;&amp;gt;, cuuid&amp;lt;2&amp;gt;
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;某种不可读的矩阵。星号和桅杆之间有一个阶段性的优化。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; ./rakudo-m --target=optimize ~/test.raku
[...]
- QAST::Op(callstatic &amp;amp;s) &amp;lt;sunk&amp;gt; :statement_id&amp;lt;4&amp;gt; s(:foo(3 R- 2))
  - QAST::Op(call &amp;amp;infix:&amp;lt;-&amp;gt;)  :METAOP_opt_result&amp;lt;?&amp;gt;
    - QAST::Want &amp;lt;wanted&amp;gt; 2
      - QAST::WVal(Int)
      - Ii
      - QAST::IVal(2)  2
    - QAST::Want &amp;lt;wanted&amp;gt; 3
      - QAST::WVal(Int)
      - Ii
      - QAST::IVal(3)  3
[...]
- QAST::Op(callstatic &amp;amp;s) &amp;lt;sunk&amp;gt; :statement_id&amp;lt;7&amp;gt; s(:foo(3 Z- 2))
  - QAST::Op+{QAST::SpecialArg}(call :named&amp;lt;foo&amp;gt;) &amp;lt;wanted&amp;gt; :statement_id&amp;lt;8&amp;gt; :before_promotion&amp;lt;?&amp;gt; Z-
    - QAST::Op(callstatic &amp;amp;METAOP_ZIP) &amp;lt;wanted&amp;gt; :is_pure&amp;lt;?&amp;gt;
      - QAST::Var(lexical &amp;amp;infix:&amp;lt;-&amp;gt;) &amp;lt;wanted&amp;gt;
      - QAST::Var(lexical &amp;amp;METAOP_REDUCE_LEFT)
    - QAST::Want &amp;lt;wanted&amp;gt; 3
      - QAST::WVal(Int)
      - Ii
      - QAST::IVal(3)  3
    - QAST::Want &amp;lt;wanted&amp;gt; 2
      - QAST::WVal(Int)
      - Ii
      - QAST::IVal(2)  2
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;哈，就是这样。在优化阶段后，行将失踪。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;QAST::Op+{QAST::SpecialArg}(call :named&amp;lt;foo&amp;gt;) &amp;lt;wanted&amp;gt; :statement_id&amp;lt;5&amp;gt; :before_promotion&amp;lt;?&amp;gt; R-.&lt;/code&gt;
并将整个 &lt;code&gt;METAOP_REVERSE&lt;/code&gt; 调用替换为通常的操作 &lt;code&gt;(&amp;amp;infix:&amp;lt;-&amp;gt;)&lt;/code&gt;。所以问题一定在优化器的某个地方。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有在 &lt;code&gt;optim_nameless_call&lt;/code&gt; 方法中才会提到 &lt;code&gt;&amp;amp;METAOP_ASSIGN&lt;/code&gt;，其中 &lt;code&gt;QAST::Op+{QAST::SpecialArg}(call :named&amp;lt;foo&amp;gt;)&lt;/code&gt;。显然，这个操作负责生成一个命名对 - 它已经有了一个名字（命名参数），它需要计算值。从优化 &lt;code&gt;_&lt;/code&gt; 无名方法的执行路径来看，我们可以得出结论，我们对最后一个块感兴趣。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[...]
  elsif self.op_eq_core($metaop, &#39;&amp;amp;METAOP_REVERSE&#39;) {
    return NQPMu unless nqp::istype($metaop[0], QAST::Var)
      &amp;amp;&amp;amp; nqp::elems($op) == 3;
    return QAST::Op.new(:op&amp;lt;call&amp;gt;, :name($metaop[0].name),
      $op[2], $op[1]).annotate_self: &#39;METAOP_opt_result&#39;, 1;
  }
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我提醒你，优化前的树是这样的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[...]
- QAST::Op(call &amp;amp;s) &amp;lt;sunk&amp;gt; :statement_id&amp;lt;4&amp;gt; s(:foo(3 R- 2))
  - QAST::Op+{QAST::SpecialArg}(call :named&amp;lt;foo&amp;gt;) &amp;lt;wanted&amp;gt; :statement_id&amp;lt;5&amp;gt; :before_promotion&amp;lt;?&amp;gt; R-
    - QAST::Op(call &amp;amp;METAOP_REVERSE) &amp;lt;wanted&amp;gt; :is_pure&amp;lt;?&amp;gt;
      - QAST::Var(lexical &amp;amp;infix:&amp;lt;-&amp;gt;) &amp;lt;wanted&amp;gt;
    - QAST::Want &amp;lt;wanted&amp;gt; 3
    - QAST::Want &amp;lt;wanted&amp;gt; 2
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而精简之后，是这样的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[...]
- QAST::Op(callstatic &amp;amp;s) &amp;lt;sunk&amp;gt; :statement_id&amp;lt;4&amp;gt; s(:foo(3 R- 2))
  - QAST::Op(call &amp;amp;infix:&amp;lt;-&amp;gt;)  :METAOP_opt_result&amp;lt;?&amp;gt;
    - QAST::Want &amp;lt;wanted&amp;gt; 2
    - QAST::Want &amp;lt;wanted&amp;gt; 3
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也就是说，优化 &lt;code&gt;_nameless_call&lt;/code&gt; 做了以下工作。&lt;/p&gt;
&lt;p&gt;如果我们的 &lt;code&gt;QAST::Op+{QAST::SpecialArg}&lt;/code&gt; 操作没有三个参数，如果 &lt;code&gt;METAOP_REVERSE&lt;/code&gt; 调用没有一个正确的类型，我们就返回空。这不是我们的情况。
否则，我们将返回一个新的操作，代替我们的 &lt;code&gt;QAST::Op+{QAST::SpecialArg}&lt;/code&gt; 操作，以相反的顺序调用 &lt;code&gt;&amp;amp;infix:&amp;lt;-&amp;gt;&lt;/code&gt; 参数。就是说，把结果打包成一对就没了。&lt;/p&gt;
&lt;p&gt;在摸索了一下如何解决这个问题，并阅读了 &lt;code&gt;QAST::SpecialArg&lt;/code&gt; 和 &lt;code&gt;QAST::Node&lt;/code&gt; 的实现后，我想到了下面的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[...]
  elsif self.op_eq_core($metaop, &#39;&amp;amp;METAOP_REVERSE&#39;) {
    return NQPMu unless nqp::istype($metaop[0], QAST::Var)
      &amp;amp;&amp;amp; nqp::elems($op) == 3;
    my $opt_result := QAST::Op.new(:op&amp;lt;call&amp;gt;, :name($metaop[0].name),
      $op[2], $op[1]).annotate_self: &#39;METAOP_opt_result&#39;, 1;
    if $op.named { $opt_result.named($op.named) } # 添加选项 named 
    if $op.flat { $opt_result.flat($op.flat) }    # 添加选项 flat
    return $opt_result;
  }
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有木头。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[...]
- QAST::Op(callstatic &amp;amp;s) &amp;lt;sunk&amp;gt; :statement_id&amp;lt;4&amp;gt; s(:foo(3 R- 2))
  - QAST::Op+{QAST::SpecialArg}(call &amp;amp;infix:&amp;lt;-&amp;gt; :named&amp;lt;foo&amp;gt;)  :METAOP_opt_result&amp;lt;?&amp;gt;
    - QAST::Want &amp;lt;wanted&amp;gt; 2
    - QAST::Want &amp;lt;wanted&amp;gt; 3
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;命名的参数返回到它的位置。测试也开始通过。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; make t/spec/S03-metaops/reverse.t
[...]
All tests successful.
Files=1, Tests=70,  3 wallclock secs ( 0.03 usr  0.01 sys +  3.61 cusr  0.17 csys =  3.82 CPU)
Result: PASS
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们本可以就此打住，但这是编译器优化器的代码，它的结果是一个有两个整数参数的方法调用。我认为这在某种程度上是次优的。如果我们将返回表达式改为返回 &lt;code&gt;self.visit_op: $opt_result;&lt;/code&gt;，对产生的非优化操作调用优化器，那么产生的树就会像这样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[...]
- QAST::Op(callstatic &amp;amp;s) &amp;lt;sunk&amp;gt; :statement_id&amp;lt;4&amp;gt; s(:foo(3 R- 2))
  - QAST::Want+{QAST::SpecialArg}(:named&amp;lt;foo&amp;gt;)
    - QAST::WVal+{QAST::SpecialArg}(Int :named&amp;lt;foo&amp;gt;)
    - QAST::IVal(-1)
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在一切都很理想。&lt;/p&gt;
&lt;h2 id=&#34;分享成果&#34;&gt;分享成果&lt;/h2&gt;
&lt;p&gt;我们已经到了终点线。现在我们只需要分享我们的经验。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;重要的是：运行所有的 &lt;code&gt;make spectest&lt;/code&gt; 测试，确保没有新的东西被破坏。&lt;/li&gt;
&lt;li&gt;在 GitHub 上使用 Rakudo 编译器和测试制作 fork 仓库。&lt;/li&gt;
&lt;li&gt;将 fork 仓库添加为新的 git 远程仓库。&lt;/li&gt;
&lt;li&gt;cd ~/dev-rakudo/rakudo &amp;amp;&amp;amp; git remote add fork &lt;!-- raw HTML omitted --&gt;。&lt;/li&gt;
&lt;li&gt;cd ~/dev-rakudo/t/spec &amp;amp;&amp;amp; git remote add fork &lt;!-- raw HTML omitted --&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重要：确保两个仓库在 git 中都有正确的用户名和用户邮箱。&lt;/p&gt;
&lt;p&gt;提交到两个版本库，详细说明你为什么做了哪些改动，并添加对原始问题跟踪器的引用。&lt;/p&gt;
&lt;p&gt;运行提交。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~/dev-rakudo/rakudo &amp;amp;&amp;amp; git push fork
cd ~/dev-rakudo/t/spec &amp;amp;&amp;amp; git push fork
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;向两个仓库提出拉取请求。在他们的描述中，最好是相互参照和原任务。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;对开源软件的贡献是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;趣味性和趣味性。&lt;/li&gt;
&lt;li&gt;给你的感觉是，你正在做一些有用的事情，你真的是。&lt;/li&gt;
&lt;li&gt;让你认识新的有趣和专业的人（任何关于 Raku 的问题都会在 &lt;code&gt;#raku IRC&lt;/code&gt; 频道中得到回答）。&lt;/li&gt;
&lt;li&gt;解决非标准任务，没有截止日期的压力，是一种很好的体验。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选择你觉得最舒服的角色等级，去做新的任务吧!&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/rakulang">rakulang</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/rakulang">Rakulang</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/</guid>
                <pubDate>Tue, 16 Feb 2021 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Caesarean Substrings With Raku and Perl</title>
                <link>https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/</link>
                
                
                <description>&lt;blockquote&gt;Caesarean Substrings With Raku and Perl&lt;/blockquote&gt;&lt;p&gt;[113] 发表于2021年1月30日。
这是我对 &lt;a href=&#34;https://perlweeklychallenge.org/blog/perl-weekly-challenge-097/&#34;&gt;Perl 每周挑战#097&lt;/a&gt; 的回应。&lt;/p&gt;
&lt;h2 id=&#34;挑战-0971-凯撒密码&#34;&gt;挑战 #097.1: 凯撒密码&lt;/h2&gt;
&lt;p&gt;给你一个只包含字母 &lt;code&gt;A..Z&lt;/code&gt; 的字符串 &lt;code&gt;$S&lt;/code&gt; 和一个数字 &lt;code&gt;$N&lt;/code&gt;。
写一个脚本，用&lt;a href=&#34;https://en.wikipedia.org/wiki/Caesar_cipher&#34;&gt;凯撒密码&lt;/a&gt;对给定的字符串 &lt;code&gt;$S&lt;/code&gt; 进行加密，左移大小为 &lt;code&gt;$N&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例子:
输入: $S = &amp;ldquo;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&amp;rdquo;, $N = 3
输出: &amp;ldquo;QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Plain:    ABCDEFGHIJKLMNOPQRSTUVWXYZ
Cipher:   XYZABCDEFGHIJKLMNOPQRSTUVW&lt;/p&gt;
&lt;p&gt;Plaintext:  THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG
Ciphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD&lt;/p&gt;
&lt;p&gt;&amp;ldquo;只用字母 &lt;code&gt;A...Z&lt;/code&gt;&amp;rdquo; 的表述是错误的，因为例子中也有几个空格。因此，应该允许这些空格。&lt;/p&gt;
&lt;p&gt;文件: caesar-cipher&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;#! /usr/bin/env raku

subset AZ-space of Str where /^ &amp;lt;[ A .. Z \s ]&amp;gt;+ $/;   # [1]
subset PosInt of Int where -25 &amp;lt;= $_ &amp;lt;= 25;            # [2]

unit sub MAIN (AZ-space $S = &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39;,
               PosInt $N = 3);                         # [3]

say $S.comb.map({ caesar($_, $N) }).join;              # [4]

sub caesar ($char, $shift)
{
  return $char if $char eq &amp;quot; &amp;quot;;                        # [5]

  my $code = $char.ord;                                # [6]

  $code -= $shift;                                     # [7]

  $code += 26 if $code &amp;lt; 65;  # &#39;A&#39;                    # [8]
  $code -= 26 if $code &amp;gt; 90;  # &#39;Z&#39;                    # [8a]

  return $code.chr;                                    # [9]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[1] 所允许的字符 (或 «特定领域字母»).&lt;/p&gt;
&lt;p&gt;[2] 挑战说左移值是一个数字。允许除整数以外的任何东西是没有意义的，所以我把值限制在这个类型。负值应该是可以的，它们意味着右移值（而不是左移）。&lt;/p&gt;
&lt;p&gt;[3] 参数，默认值为挑战中给出的值。&lt;/p&gt;
&lt;p&gt;[4] 将字符串分割成单个字符（用梳子(comb)，在每个字符上应用 &amp;ldquo;caesar&amp;rdquo; 函数（用map），再次将字符连接成一个字符串（用join），然后打印出来。&lt;/p&gt;
&lt;p&gt;[5] 不移动空格。&lt;/p&gt;
&lt;p&gt;[6] 获取字符的代码点。&lt;/p&gt;
&lt;p&gt;[7] 减去移位值（当我们向左移位时，或在字母表中降低移位值）。&lt;/p&gt;
&lt;p&gt;[8] 绕回, 如果我们移出A-Z范围，这里为更低 - 或更高的 [8b]。&lt;/p&gt;
&lt;p&gt;[9] 获取指定代码点的字符。&lt;/p&gt;
&lt;p&gt;查看 docs.raku.org/routine/ord 获取更多关于 ord 的信息。&lt;/p&gt;
&lt;p&gt;查看 docs.raku.org/routine/chr 获取更多关于 chr 的信息。&lt;/p&gt;
&lt;p&gt;运行它:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./caesar-cipher &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39; 3
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD

$ ./caesar-cipher &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39; -3
WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ

$ ./caesar-cipher &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39; 13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT

$ ./caesar-cipher &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39; -13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Raku 有一个 ords 变体，它接收一整个字符串，而不是一个字符作为 ord。还有 chrs，它接收一个代码点数组，并将它们变成一个字符串，而不是像 chr 那样接收一个字符的代码点。让我们用它们来写一个更短的程序。&lt;/p&gt;
&lt;p&gt;文件: caesar-cipher-map&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;#! /usr/bin/env raku

subset AZ-space of Str where /^ &amp;lt;[ A .. Z \s ]&amp;gt;+ $/;
subset PosInt of Int where -25 &amp;lt;= $_ &amp;lt;= 25;

unit sub MAIN (AZ-space $S = &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39;,
               PosInt $N = 3);

say caesar($S, $N);

sub caesar ($string, $shift)
{
  return $string.ords.map({$_ == 32 ?? 32 !! (($_ - $shift - 65) % 26 ) + 65}).chrs;
    # #################### # 1a ############# ############ # 1b  # 1c ## 1d
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[1] 我们使用map来改变各个代码点。我们让代码点为32的空间单独存在[1a]。每一个其他的值我们都还原成0到25之间的数字（通过减去第一个字母的代码点（A：65）和移位值[1b]）。模数运算符 (%) 为我们处理负值，做正确的事情。例如：-2 % 26 -&amp;gt; 24 [1c]。然后我们添加调整值到它们应该在的位置(从A到Z)[1d]，然后我们将整个数组的代码点变成一个字符串。&lt;/p&gt;
&lt;p&gt;查看 docs.raku.org/routine/ords 获取更多关于 ords 的信息。&lt;/p&gt;
&lt;p&gt;查看 docs.raku.org/routine/chrs 获取更多关于 chrs 的信息。&lt;/p&gt;
&lt;p&gt;运行它的结果和之前一样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./caesar-cipher-map &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39; 3
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD

$ ./caesar-cipher-map &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39; -3
WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ

$ ./caesar-cipher-map &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39; 13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT

$ ./caesar-cipher-map &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39; -13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;perl-版本&#34;&gt;Perl 版本&lt;/h2&gt;
&lt;p&gt;这是对第一个 Raku 版的直接翻译。&lt;/p&gt;
&lt;p&gt;File: caesar-cipher-perl&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#! /usr/bin/env perl&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;feature&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;say&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;feature&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;signatures&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;no&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;warnings&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;experimental::signatures&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;@ARGV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;die&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Illegal characters&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=~&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt; /^[A-Z\s]+$/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;@ARGV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;die&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Illegal shift $N&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!~&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/^\-?\d+$/&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;caesar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;caesar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;($char, $shift)
&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$char&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$char&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;nv&#34;&gt;$code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$shift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;nv&#34;&gt;$code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;65&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;#39;A&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;#39;Z&amp;#39;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行它的结果和 Raku 版一样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./caesar-cipher-perl &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39; 3
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD

$ ./caesar-cipher-perl &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39; -3
WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ

$ ./caesar-cipher-perl &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39; 13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT

$ ./caesar-cipher-perl &#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39; -13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;挑战-0972二进制子字符串binary-substrings&#34;&gt;挑战 #097.2：二进制子字符串(Binary Substrings)&lt;/h2&gt;
&lt;p&gt;给你一个二进制字符串 &lt;code&gt;$B&lt;/code&gt; 和一个整数 &lt;code&gt;$S&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;写一个脚本来拆分大小为 &lt;code&gt;$S&lt;/code&gt; 的二进制字符串 &lt;code&gt;$B&lt;/code&gt;，然后找出使其相同的最小翻转次数。&lt;/p&gt;
&lt;p&gt;例 1:
输入: $B = “101100101”, $S = 3
输出: 1&lt;/p&gt;
&lt;p&gt;二进制子字符串:
&amp;ldquo;101&amp;rdquo;: 0 flip
&amp;ldquo;100&amp;rdquo;: 1 flip to make it &amp;ldquo;101&amp;rdquo;
&amp;ldquo;101&amp;rdquo;: 0 flip&lt;/p&gt;
&lt;p&gt;例 2:
输入 $B = “10110111”, $S = 4
输出: 2&lt;/p&gt;
&lt;p&gt;二进制子字符串:
&amp;ldquo;1011&amp;rdquo;: 0 flip
&amp;ldquo;0111&amp;rdquo;: 2 flips to make it &amp;ldquo;1011&amp;rdquo;&lt;/p&gt;
&lt;p&gt;我们先从第一个例子中的二进制子字符串中砍掉3个字符块。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; say &amp;quot;101100101&amp;quot;.comb(3);   # -&amp;gt; (101 100 101)
&amp;gt; say &amp;quot;1011001010&amp;quot;.comb(3);  # -&amp;gt; (101 100 101 0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二行显示了如果长度不匹配会发生什么。这就给了我们一个非法的值，因为我们不能将一位数翻转为三位数的值。所以我们必须添加一个检查。&lt;/p&gt;
&lt;p&gt;然后我们将第一个子串与其余的子串进行比较，一次一个。在这里使用bitwise XOR（Exclusive OR）运算符是一个合理的选择。这给了我们一个二进制值，其中1的数量就是该子串的翻转次数。Raku确实有一个XOR运算符。+^. 但是它 &amp;ldquo;将两个参数都强制为Int，并进行位智XOR操作&amp;rdquo;(根据文档&amp;quot;；参见docs.raku.org/language/operators#infix_+^)。&lt;/p&gt;
&lt;p&gt;我们可以在进行XOR操作之前，将二进制值转换为十进制值。让我们试试。&lt;/p&gt;
&lt;p&gt;获取翻转的次数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; say (&amp;quot;10101&amp;quot;.parse-base(2) +^ &amp;quot;10111&amp;quot;.parse-base(2)).base(2).comb.sum;  # -&amp;gt; 1
&amp;gt; say (&amp;quot;11101&amp;quot;.parse-base(2) +^ &amp;quot;10111&amp;quot;.parse-base(2)).base(2).comb.sum;  # -&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这当然可行，但需要大量的代码。所以我将使用一个更简单的方法 - 逐个比较每个数字。&lt;/p&gt;
&lt;p&gt;File: binary-substring&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;#! /usr/bin/env raku

subset BinaryString where /^ &amp;lt;[01]&amp;gt;+ $/;                    # [1]
subset PosInt of Int where * &amp;gt; 0;                           # [2]

unit sub MAIN (BinaryString $B = &#39;101100101&#39;,               # [1]
               PosInt $S where $B.chars %% $S = 3,          # [2]
	       :v(:$verbose));

my @B     = $B.comb($S.Int);                                # [3]
my $first = @B.shift;                                       # [4]
my $total = 0;                                              # [5]

for @B -&amp;gt; $current                                          # [6]
{
  my $flip = bit-diff($first, $current);                    # [7]
  $total += $flip;                                          # [8]
  say &amp;quot;: $first -&amp;gt; $current -&amp;gt; Flip: $flip&amp;quot; if $verbose;
}

say $total;                                                 # [9]

sub bit-diff ($a, $b)                                       # [7]
{
  my $flip = 0;                                             # [10]

  for ^$a.chars -&amp;gt; $index                                   # [11]
  {
    $flip++ if $a.substr($index,1) ne $b.substr($index,1);  # [12]
  }

  return $flip;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[1] 确保二进制字符串是合法的（只包含 &amp;ldquo;0 &amp;ldquo;和 &amp;ldquo;1&amp;rdquo;）。&lt;/p&gt;
&lt;p&gt;[2] 确保是一个正整数，同时确保字符串是被它偶数分割的。(例如，&amp;ldquo;4 &amp;ldquo;给我们提供了长度为4的子串，如果最后一个较短，程序将中止。)&lt;/p&gt;
&lt;p&gt;[3] 梳子通常用于将一个字符串分割成单个字符，但我们可以通过指定长度来获得每个子字符串中的多个字符，比如这样。&lt;/p&gt;
&lt;p&gt;[4] 例子首先将第一个子串与自己进行比较，给出零翻转。这是愚蠢的(ish)，所以我跳过这一点，把第一个子串移出。&lt;/p&gt;
&lt;p&gt;[5] 结果会到这里。&lt;/p&gt;
&lt;p&gt;[6] 对于每一个子串（除了第一个，见[4]）。&lt;/p&gt;
&lt;p&gt;[7] 获取每个子串的翻转次数。&lt;/p&gt;
&lt;p&gt;[8] 并将其添加到总数中。&lt;/p&gt;
&lt;p&gt;[9] 打印它。&lt;/p&gt;
&lt;p&gt;[10] 翻转的数量会在这里。&lt;/p&gt;
&lt;p&gt;[11] 对于两个子串中的每个索引（具有相同的长度）。&lt;/p&gt;
&lt;p&gt;[12] - 如果给定位置上的字符不同，则在总数的基础上加1，意味着移动。&lt;/p&gt;
&lt;p&gt;See docs.raku.org/routine/comb for more information about comb.&lt;/p&gt;
&lt;p&gt;运行它。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./binary-substring &amp;quot;101100101&amp;quot; 3
 1

$ ./binary-substring -v &amp;quot;101100101&amp;quot; 3
: 101 -&amp;gt; 100 -&amp;gt; Flip: 1
: 101 -&amp;gt; 101 -&amp;gt; Flip: 0
1

$ ./binary-substring &amp;quot;10110111&amp;quot; 4
2

$ ./binary-substring -v &amp;quot;10110111&amp;quot; 4
: 1011 -&amp;gt; 0111 -&amp;gt; Flip: 2
2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看起来不错。&lt;/p&gt;
&lt;h2 id=&#34;perl&#34;&gt;Perl&lt;/h2&gt;
&lt;p&gt;这是对 Raku 版本的直接翻译，只是我必须实现 &amp;ldquo;comb&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;文件： binary-substring-perl&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;#! /usr/bin/env perl

use strict;
use warnings;
use feature &#39;say&#39;;
use feature &#39;signatures&#39;;
use Getopt::Long;

no warnings &amp;quot;experimental::signatures&amp;quot;;

my $verbose = 0;

GetOptions(&amp;quot;verbose&amp;quot;  =&amp;gt; \$verbose);

my $B = shift(@ARGV) // &#39;101100101&#39;;

die &amp;quot;Not a binary number&amp;quot; unless $B =~ /^[01]+$/;

my $S = shift(@ARGV) // 3;

die &amp;quot;Not an integer&amp;quot; unless $S =~ /^[1-9][0-9]*$/;
die &amp;quot;Not a legal length&amp;quot; if length($B) % $S;

my @B     =  comb($B, $S);
my $first = shift(@B);
my $total = 0;

for my $current (@B)
{
  my $flip = bit_diff($first, $current);
  $total += $flip;
  say &amp;quot;: $first -&amp;gt; $current -&amp;gt; Flip: $flip&amp;quot; if $verbose;
}

say $total;

sub bit_diff ($a, $b)
{
  my $flip = 0;

  for my $index (0 .. length($a))
  {
    $flip++ if substr($a, $index,1) ne substr($b, $index,1);
  }

  return $flip;
}

sub comb ($string, $length = 1)  # [1]
{
  my @result;

  while ($string)
  {
    push(@result, substr($string, 0, $length));
    $string = substr($string, $length);
  }
  return @result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[1] 缺失的 Raku 例程 &amp;ldquo;comb&amp;rdquo;。可选的第二个参数指定了它所返回的每个子串中所包含的（第一个参数的）子串长度。&lt;/p&gt;
&lt;p&gt;运行它的结果与 Raku 版本相同。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./binary-substring-perl &amp;quot;101100101&amp;quot; 3
1

$ ./binary-substring-perl -v &amp;quot;101100101&amp;quot; 3
: 101 -&amp;gt; 100 -&amp;gt; Flip: 1
: 101 -&amp;gt; 101 -&amp;gt; Flip: 0
1

$ ./binary-substring-perl &amp;quot;101100111&amp;quot; 3
2

$ ./binary-substring-perl -v &amp;quot;101100111&amp;quot; 3
: 101 -&amp;gt; 100 -&amp;gt; Flip: 1
: 101 -&amp;gt; 111 -&amp;gt; Flip: 1
2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就是这样。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/raku">Raku</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/rakulang">Rakulang</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/</guid>
                <pubDate>Sun, 07 Feb 2021 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>如果集合如我所想</title>
                <link>https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/</link>
                
                
                <description>&lt;blockquote&gt;If Sets Would DWIM&lt;/blockquote&gt;&lt;h1 id=&#34;if-sets-would-dwimhttpsdonaldhwtf202101if-sets-would-dwim&#34;&gt;&lt;a href=&#34;https://donaldh.wtf/2021/01/if-sets-would-dwim/&#34;&gt;If Sets Would DWIM&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;每当我在 Raku 中使用集合的时候，它们经常无法 &lt;a href=&#34;https://docs.raku.org/language/glossary#DWIM&#34;&gt;DWIM&lt;/a&gt;。这是一个简短的探索，看看是否可以改进 DWIMminess。&lt;/p&gt;
&lt;p&gt;我最近重新审视了我前段时间写的一个利用 &lt;code&gt;(-)&lt;/code&gt; 集差运算符的脚本。这段代码有一个 bug 潜伏在那里，显而易见，因为下面的代码并没有按照我的直觉去做。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;  my @allowed = &amp;lt;m c i p l o t&amp;gt;;
  my @chars = &#39;impolitic&#39;.comb;

  my @remainder = @allowed (-) @chars;

  if +@remainder == 0 {
     say &#39;pangram&#39;;
  } else {
     say &amp;quot;unused: [{@remainder.join(&#39; &#39;)}]&amp;quot;;
  }
unused: []
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;错误的原因是 &lt;code&gt;(-)&lt;/code&gt; 产生了一个 Set，而赋值给 &lt;code&gt;@remainder&lt;/code&gt; 会产生1项的 Array。总是这样。但不方便的是，当它是一个空集合时，它就会字符串化为一个空字符串，这只是帮助掩盖了这个潜伏的错误。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my @items = &amp;lt;a b c d e&amp;gt; (-) &amp;lt;a b c d e&amp;gt;;
say @items.raku;
say +@items;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;[Set.new()]
1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解决方法比较简单。只要不赋值给数组就可以了。使用一个标量容器来代替。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my $items = &amp;lt;a b c d e&amp;gt; (-) &amp;lt;a b d&amp;gt;;
say $items.raku;
say +$items;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;Set.new(&amp;quot;e&amp;quot;,&amp;quot;c&amp;quot;)
2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;甚至是关联容器也可以。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my %items = &amp;lt;a b c d e&amp;gt; (-) &amp;lt;a b d&amp;gt;;
say %items.raku;
say +%items;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{:c(Bool::True), :e(Bool::True)}
2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或在赋值前明确地取出键的列表。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my @items = (&amp;lt;a b c d e&amp;gt; (-) &amp;lt;a b d&amp;gt;).keys;
say @items.raku;
say +@items;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;[&amp;quot;e&amp;quot;, &amp;quot;c&amp;quot;]
2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很好，起作用了。只是不要用数组容器来处理 &lt;code&gt;Setty&lt;/code&gt; 这样的东西。只是这并不能阻止我的直觉时不时地碰上这个错误。同一类的 bug 在我的代码中出现过好几次，因为它实在是太容易犯错了。Raku 不会告诉我，我做错了什么，因为也许是故意的。但重要的是， Raku 没有设法 DWIM。&lt;/p&gt;
&lt;p&gt;我可以采取的另一个方法是养成添加类型信息的习惯。这样确实可以让 Raku 在我掉进这个陷阱的时候告诉我。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my Str @a = &amp;lt;a b c d e&amp;gt; (-) &amp;lt;a b d&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;Type check failed in assignment to @a; expected Str but got Set (Set.new(&amp;quot;e&amp;quot;,&amp;quot;c&amp;quot;))
  in sub  at EVAL_0 line 3
  in block &amp;lt;unit&amp;gt; at EVAL_0 line 5
  in block &amp;lt;unit&amp;gt; at -e line 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是一个明显的例子，添加类型信息有助于 Raku 编译器帮助我避免引入这种 bug。&lt;/p&gt;
&lt;h2 id=&#34;实验---为-set-自定义数组存储&#34;&gt;实验 - 为 Set 自定义数组存储&lt;/h2&gt;
&lt;p&gt;我开始研究核心设置(core setting)，看看可以做什么。我惊喜地发现，我可以在 &lt;code&gt;Array.STORE&lt;/code&gt; 的多重分派中添加我正在寻找的语义。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;use MONKEY;

augment class Array {
   multi method STORE(Array:D: Set \item --&amp;gt; Array:D) {
       self.STORE(item.keys)
   }
}

my @a = &amp;lt;a b c d e&amp;gt; (-) &amp;lt;a b d&amp;gt;;
say @a.raku;
say +@a;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;[&amp;quot;c&amp;quot;, &amp;quot;e&amp;quot;]
2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;分享这个似乎是谨慎的，看看我的小 DWIM 是否有任何我没有考虑到的问题或缺点。一个可能的缺点是，如果你需要这样做的话，你需要使用 &lt;code&gt;,&lt;/code&gt; 来强制将一个集合变成一个数组。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my @a = &amp;lt;a b c d e&amp;gt; (-) &amp;lt;a b d&amp;gt; , ;
say @a.raku;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;[Set.new(&amp;quot;e&amp;quot;,&amp;quot;c&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;下一步是什么&#34;&gt;下一步是什么&lt;/h2&gt;
&lt;p&gt;我希望这能引发关于这个问题以及其他我们的直觉和 Raku 的行为不太一致的情况的讨论。也许还有其他相关的语言边缘可以被磨平，以消除这种危害。&lt;/p&gt;
&lt;h2 id=&#34;后续&#34;&gt;后续&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&#34;https://t.co/0QSoMxrSXf?amp=1&#34;&gt;Reddit&lt;/a&gt; 上有一些非常有启发性的讨论，涵盖了语言语义和各种替代方法。公平地说，我建议的方法引入了更多的不一致性，而不是价值，但讨论可能会导致一个语言一致的解决方案。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/flink">Flink</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/rakulang">Rakulang</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/</guid>
                <pubDate>Sun, 07 Feb 2021 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>贪婪 Junction 的奇闻异事</title>
                <link>https://ohmyweekly.github.io/notes/2020-10-04-the-strange-case-of-the-greedy-junction/</link>
                
                
                <description>&lt;blockquote&gt;The Strange Case of the Greedy Junction&lt;/blockquote&gt;&lt;h2 id=&#34;贪婪-junction-的奇闻异事&#34;&gt;贪婪 junction 的奇闻异事&lt;/h2&gt;
&lt;p&gt;说明 Raku 的 junction 是如何贪婪的设计，以及一个建议。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://raku.org/&#34;&gt;Raku&lt;/a&gt; 有一个整洁的功能，叫做 &lt;a href=&#34;https://docs.raku.org/type/Junction&#34;&gt;Junction&lt;/a&gt;。在这篇短文中，我想强调一下 junction 与函数交互的一个特殊后果：它们是贪婪的，我的意思是它们会无意中把函数的其他参数变成 junction。为了说明这种行为，我将使用一个闭包创建一个 &lt;code&gt;pair&lt;/code&gt; 数据结构，它可以接受两个不同类型的值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;enum RGB &amp;lt;R G B&amp;gt;;

# Pair Constructor: the arguments of pair() are captured
# in a closure that is returned
sub pair(\x, \y) {
    sub (&amp;amp;p){ p(x, y) } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以 &lt;code&gt;pair&lt;/code&gt; 接受两个任意类型的参数，并返回一个以函数为参数的闭包。我们将使用这个函数来访问存储在 &lt;code&gt;pair&lt;/code&gt; 中的值。我将把这些访问(accessor)函数称为 &lt;code&gt;fst&lt;/code&gt; 和 &lt;code&gt;snd&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;# Accessors to get the values from the closure
my sub fst (&amp;amp;p) {p( sub (\x,\y){x})}
my sub snd (&amp;amp;p) {p( sub (\x,\y){y})}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;做实际选择的函数是由 &lt;code&gt;fst&lt;/code&gt; 和 &lt;code&gt;snd&lt;/code&gt; 返回的匿名子程序，这纯粹是为了让我可以将它们应用于 &lt;code&gt;pair&lt;/code&gt;，而不是必须将它们作为参数传递。让我们看一个例子，一个 &lt;code&gt;Int&lt;/code&gt; 和一个 &lt;code&gt;RGB&lt;/code&gt; 的 pair。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my \p1 = pair 42, R;

if ( 42 == fst p1) {
    say snd p1;	#=&amp;gt; says &amp;quot;R&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以我们用两个值调用 &lt;code&gt;pair&lt;/code&gt; 来创建一个 pair，并使用 &lt;code&gt;fst&lt;/code&gt; 和 &lt;code&gt;snd&lt;/code&gt; 来访问 pair 中的值。这是一个不可变的数据结构，所以不可能进行更新。&lt;/p&gt;
&lt;p&gt;现在让我们使用 junction 作为其中一个参数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;# Example instance with a &#39;one&#39;-type junction
my Junction \p1j = pair (42^43),R;

if ( 42 == fst p1j) {
    say snd p1j; #=&amp;gt; one(R, R)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里发生的情况是，原始参数 &lt;code&gt;R&lt;/code&gt; 已经不可逆转地变成了与自己的 junction，尽管我们从未明确地在 &lt;code&gt;R&lt;/code&gt; 上创建过 junction，但还是发生了这种情况。这是将 junction 类型应用于函数的结果，它不是一个 bug，只是 junction 行为的一个影响。更详细的解释，请看我的文章&amp;quot;&lt;a href=&#34;https://gist.github.com/wimvanderbauwhede/19cc1e8d04e9a477f58cfe7288a6172e&#34;&gt;重构 Raku 的 Junction&lt;/a&gt;&amp;quot;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.raku.org/type/Junction&#34;&gt;Raku 关于 junction 的文档&lt;/a&gt;中说，你不应该真正尝试从 junction 中获取值。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Junction 是用来作为布尔上下文中的匹配器，不支持 junction 的自省。如果你觉得有自省 junction 的冲动，请使用 Set 或相关类型代替。&amp;rdquo;&lt;/p&gt;
&lt;p&gt;然而，有一个 FAQ &lt;a href=&#34;https://docs.raku.org/language/faq#index-entry-Junction_(FAQ)&#34;&gt;勉强地告诉你如何做&lt;/a&gt;。FAQ 再次警告不要这样做。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;如果你想从 junction 中提取值（特征态），你可能做错了什么，应该用 Set 来代替。&amp;rdquo;&lt;/p&gt;
&lt;p&gt;然而，正如我所举的例子所证明的那样，从 junction 中恢复值是有明确的用例的。当然，仅仅因为另一个值恰好是 junction，存储在 pair 中的其中一个值就变得不可访问，这不是我们的本意。&lt;/p&gt;
&lt;p&gt;因此，我建议增加一个折叠(&lt;code&gt;collapse&lt;/code&gt;)函数，允许将这些无意中出现的 junction 值折叠成它们的原始值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;if ( 42 == fst p1j) {
    say collapse(snd p1j); #=&amp;gt; says &#39;R&#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该函数的实现取自&lt;a href=&#34;https://docs.raku.org/language/faq#index-entry-Junction_(FAQ)&#34;&gt;上述常见问题&lt;/a&gt;，并增加了一个检查，以确保 junction 上的所有值都相同。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub collapse(Junction \j) {    
    my @vvs;
    -&amp;gt; Any \s { push @vvs, s }.(j);    
    my $v =  shift @vvs;        
    my @ts = grep {!($_ ~~ $v)}, @vvs;
    if (@ts.elems==0) {  
        $v
    } else {
        die &amp;quot;Can&#39;t collapse this Junction: elements are not identical: {$v,@vvs}&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果能把这个功能作为一个 &lt;code&gt;collapse&lt;/code&gt; 方法添加到 &lt;code&gt;Junction&lt;/code&gt; 类中就更好了。&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href=&#34;https://gist.github.com/wimvanderbauwhede/85fb4b88ec53a0b8149e6c05740adcf8&#34;&gt;https://gist.github.com/wimvanderbauwhede/85fb4b88ec53a0b8149e6c05740adcf8&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/rakulang">rakulang</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/junction">Junction</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-10-04-the-strange-case-of-the-greedy-junction/</guid>
                <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>重构 Raku 的 Junction</title>
                <link>https://ohmyweekly.github.io/notes/2020-10-04-reconstructing-raku-junctions/</link>
                
                
                <description>&lt;blockquote&gt;Reconstructing Raku&amp;rsquo;s Junctions&lt;/blockquote&gt;&lt;h2 id=&#34;重构-raku-的-junction&#34;&gt;重构 Raku 的 Junction&lt;/h2&gt;
&lt;p&gt;Raku 中的 junction 很酷，但乍一看它们并没有遵循静态类型化的规则。我对它们的形式化类型语义很好奇，所以我从功能、静态类型的角度对 junction 进行了解构和重构。&lt;/p&gt;
&lt;h3 id=&#34;raku-中的-junction&#34;&gt;Raku 中的 Junction&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.raku.org/&#34;&gt;Raku&lt;/a&gt; 有一个整洁的功能叫做 &lt;a href=&#34;https://docs.raku.org/type/Junction&#34;&gt;Junction&lt;/a&gt;。Junction 是一个无序的复合值。当使用 junction 代替值时，会对每个结点(junction)元素进行操作，结果是所有这些操作符的返回值的结点(junction)。当在布尔上下文中使用 junction 时，结点(junction)会折叠成一个值。Junction 的类型可以是 all(&lt;code&gt;&amp;amp;&lt;/code&gt;)、any(&lt;code&gt;|&lt;/code&gt;)、one(&lt;code&gt;^&lt;/code&gt;) 或 &lt;code&gt;none&lt;/code&gt; (空结点)。&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my $j = 11|22; # short for any(11,22)
if 33 == $j + 11 {
    say &#39;yes&#39;;
}

say so 3 == (1..30).one;         #=&amp;gt; True 
say so (&amp;quot;a&amp;quot; ^ &amp;quot;b&amp;quot; ^ &amp;quot;c&amp;quot;) eq &amp;quot;a&amp;quot;; #=&amp;gt; True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数 &lt;code&gt;so&lt;/code&gt; 强制使用布尔上下文。&lt;/p&gt;
&lt;p&gt;Junction 有 &lt;code&gt;Junction&lt;/code&gt; 类型，我很好奇 Junction 的类型规则，因为乍一看有些奇怪。比方说我们有一个函数 &lt;code&gt;sq&lt;/code&gt; 从 &lt;code&gt;Int&lt;/code&gt; 到 &lt;code&gt;Int&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub sq(Int $x --&amp;gt; Int) { $x*$x }

my Int $res = sq(11); # OK
say $res; #=&amp;gt; 121
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在让我们定义一个类型为任何 &lt;code&gt;Int&lt;/code&gt; 值的 Junction。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my Junction $j = 11 | 22; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当我们将 &lt;code&gt;sq&lt;/code&gt; 应用于 &lt;code&gt;$j&lt;/code&gt; 时，我们没有得到一个类型错误，即使函数的类型是 &lt;code&gt;:(Int --&amp;gt; Int)&lt;/code&gt;，Junction 的类型是 &lt;code&gt;Junction&lt;/code&gt;。相反，我们得到的是一个结果的 Junction。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;say sq($j); #=&amp;gt; any(121, 484)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们像之前一样将其赋值给一个类型为 &lt;code&gt;Int&lt;/code&gt; 的变量，我们会得到一个类型错误。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my Int $rj = sq($j); #=&amp;gt; Type check failed in assignment to $rj; expected Int but got Junction (any(121, 484))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;取而代之的是，现在返回值的类型为 &lt;code&gt;Junction&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my Junction $rj = sq(11|22); # OK
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以，Junction 类型可以代替任何其他类型，但这样一来，操作也变成了 Junction。&lt;/p&gt;
&lt;p&gt;另一方面，Junction 是由其组成值隐式类型的，尽管它们看起来是不透明的 &lt;code&gt;Junction&lt;/code&gt; 类型。例如，如果我们创建了一个由 &lt;code&gt;Str&lt;/code&gt; 值组成的 Junction，并试图将这个 Junction 的值传递到 &lt;code&gt;sq&lt;/code&gt; 中，我们会得到一个类型错误。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my $sj = &#39;11&#39; | &#39;22&#39;;
say $sj.WHAT; #=&amp;gt;(Junction)

my Junction $svj = sq($sj); #=&amp;gt; Type check failed in binding to parameter &#39;x&#39;; expected Int but got Str (&amp;quot;11&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;junction-不遵循静态类型规则&#34;&gt;Junction 不遵循静态类型规则&lt;/h3&gt;
&lt;p&gt;虽然这样做是有道理的(如果原始函数期望使用 &lt;code&gt;Int&lt;/code&gt;，我们不希望它与 &lt;code&gt;Str&lt;/code&gt; 一起工作)，但这确实违背了静态类型化的规则，即使是子类型化。如果一个参数的类型是 &lt;code&gt;Int&lt;/code&gt;，那么可以使用类型图中低于它的任何类型来代替。但是 &lt;code&gt;Int&lt;/code&gt; 和 &lt;code&gt;Junction&lt;/code&gt; 的简化类型图如下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Int -&amp;gt; Cool -&amp;gt; Any -&amp;gt; Mu &amp;lt;- Junction
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以 Junction 永远不是 &lt;code&gt;Any&lt;/code&gt; 以下任何东西的子类型。因此，将 Junction 放在类型为 &lt;code&gt;Any&lt;/code&gt; 或其子类型的槽中应该是一个类型错误。&lt;/p&gt;
&lt;p&gt;此外，由于 Junction 类型是不透明的（即它不是一个参数化的类型），它不应该持有任何关于 Junction 内部值的类型的信息。然而它却对这些不可见、不可访问的值进行了类型检查。&lt;/p&gt;
&lt;p&gt;那么这里到底发生了什么？&lt;/p&gt;
&lt;h3 id=&#34;一个工作假设&#34;&gt;一个工作假设&lt;/h3&gt;
&lt;p&gt;一个工作假设是，Junction 类型并不真正取代任何其他类型：它只是一个语法糖，使它看起来如此。&lt;/p&gt;
&lt;h3 id=&#34;重构-junction-的第一部分类型&#34;&gt;重构 Junction 的第一部分：类型&lt;/h3&gt;
&lt;p&gt;让我们试着重建这个。我们的目的是想出一个数据类型和一些动作，以复制观察到的 Raku Junction 的行为。首先我们讨论一下类型，为了清晰起见，使用 Haskell 符号。然后我介绍 Raku 中的实现。这个实现将像 Raku 的原生 Junction 一样，但没有神奇的语法糖。通过这种方式，我证明了 Raku 的 Junction 毕竟遵循了正确的类型规则。&lt;/p&gt;
&lt;h4 id=&#34;junction-类型&#34;&gt;Junction 类型&lt;/h4&gt;
&lt;p&gt;Junction 是一个由 Junction 类型 &lt;code&gt;JType&lt;/code&gt; 和一组值组成的数据结构。为了方便起见，我将这个值集限制为单一类型，同时也是因为混合类型的 Junction 其实没有什么意义。我使用一个列表来模拟这个集合，同样是为了方便。因为 Junction 可以包含任何类型的值，所以它是一个多态的代数数据类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;data JType = JAny | JAll | JOne | JNone

data Junction a = Junction JType [a]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;应用结点&#34;&gt;应用结点&lt;/h4&gt;
&lt;p&gt;对一个 Junction 做任何事情都意味着对它应用一个函数。我们可以考虑三种情况，我为每一种情况介绍一个特别定制的操作符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将非 Junction 函数应用于 Junction 表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;(•￮) :: (a -&amp;gt; b) -&amp;gt; Junction a -&amp;gt;  Junction b
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;将 Junction 函数应用于非 Junction 表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;(￮•) ::  Junction (b -&amp;gt; c) -&amp;gt; b -&amp;gt; Junction c
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;将 Junction 函数应用于 Junction 表达式，创建一个嵌套 Junction。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;(￮￮) ::  Junction (b -&amp;gt; c) -&amp;gt; Junction b -&amp;gt; Junction (Junction c)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了方便，我们还可以在 Junction a 和 a 之间创建自定义比较运算符。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;-- and similar for /-, &amp;gt;, &amp;lt;, &amp;lt;=,&amp;gt;=
(￮==•) :: Junction a -&amp;gt; a -&amp;gt; Bool
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;折叠-junction&#34;&gt;折叠 Junction&lt;/h4&gt;
&lt;p&gt;那么我们就有了 &lt;code&gt;so&lt;/code&gt;，布尔强制函数。它的作用是将一个布尔的 Junction 折叠成一个布尔。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;so :: Junction Bool -&amp;gt; Bool
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后我们有 &lt;code&gt;collapse&lt;/code&gt;，它从一个 Junction 返回值，前提是它是一个 Junction，所有存储的值都是一样的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;collapse :: (Show a,Eq a) =&amp;gt; Junction a -&amp;gt; a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这似乎是一个奇怪的函数，但由于 Junction 的行为，它是必要的。正如我们将看到的，上述语义意味着 Junction 是贪婪的：如果一个函数的一个参数是 Junction，那么所有其他参数也会成为 Junction，但 Junction 中的所有值都是相同的。我已经在&amp;quot;&lt;a href=&#34;https://gist.github.com/wimvanderbauwhede/85fb4b88ec53a0b8149e6c05740adcf8&#34;&gt;贪婪 Junction 的奇怪情况&lt;/a&gt;&amp;ldquo;中讨论过这个问题，但我们现在可以将这种行为形式化。&lt;/p&gt;
&lt;h4 id=&#34;重新审视贪婪-junction-的奇怪情况&#34;&gt;重新审视贪婪 Junction 的奇怪情况&lt;/h4&gt;
&lt;p&gt;假设我们有一个两个参数的函数 &lt;code&gt;f :: a -&amp;gt; b -&amp;gt; c&lt;/code&gt;，我们对第一个参数应用一个结点 &lt;code&gt;j :: Junction&lt;/code&gt; a 应用到第一个参数 &lt;code&gt;f •￮ j&lt;/code&gt; 上，那么结果是一个部分应用的函数，包裹在一个 Junction 上：&lt;code&gt;fp :: Junction b -&amp;gt; c&lt;/code&gt;。如果我们现在想用 &lt;code&gt;fp ￮• v&lt;/code&gt; 将这个函数应用于一个非结点的值 &lt;code&gt;v :: b&lt;/code&gt;，那么结果就是 &lt;code&gt;Junction c&lt;/code&gt; 类型的。&lt;/p&gt;
&lt;p&gt;现在，让我们考虑类型 &lt;code&gt;c&lt;/code&gt; 是 &lt;code&gt;forall d . (a -&amp;gt; b -&amp;gt; d) -&amp;gt; d&lt;/code&gt; 的特殊情况。所以我们有 &lt;code&gt;Junction&lt;/code&gt;(&lt;code&gt;forall d . (a-&amp;gt;b-&amp;gt;d) -&amp;gt; d&lt;/code&gt;)。这是一个函数，它接受一个函数参数并返回该函数的返回类型的东西。我们使用 &lt;code&gt;forall&lt;/code&gt;，所以 &lt;code&gt;d&lt;/code&gt; 可以是任何东西，但在实践中我们希望它是 &lt;code&gt;a&lt;/code&gt; 或 &lt;code&gt;b&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;假设我们将这个函数(称它为 &lt;code&gt;p&lt;/code&gt;)应用于 &lt;code&gt;fst :: a-&amp;gt;b-&amp;gt;a&lt;/code&gt;，使用 &lt;code&gt;p ￮• fst&lt;/code&gt;，那么我们得到 &lt;code&gt;Junction a&lt;/code&gt;。但是如果我们将它应用于 &lt;code&gt;snd :: a-&amp;gt;b-&amp;gt;b&lt;/code&gt;，使用 &lt;code&gt;p ￮• snd&lt;/code&gt;，那么我们得到 &lt;code&gt;Junction b&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这就是形式上基于类型的分析，为什么我们不能从一个 pair 中返回一个非 Junction 的值，在&amp;rdquo;&lt;a href=&#34;https://gist.github.com/wimvanderbauwhede/85fb4b88ec53a0b8149e6c05740adcf8&#34;&gt;贪婪 Junction 的奇怪情况&lt;/a&gt;&amp;ldquo;中已经解释过。而这也是我们需要 &lt;code&gt;collapse&lt;/code&gt; 函数的原因。&lt;/p&gt;
&lt;h4 id=&#34;重构-junction-的第2部分raku-的实现&#34;&gt;重构 Junction 的第2部分：Raku 的实现。&lt;/h4&gt;
&lt;p&gt;我们从创建 Junction 类型开始，为四种 Junction 类型使用一个枚举，为实际的 Junction 数据类型使用一个角色。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;# The types of Junctions
enum JType &amp;lt;JAny  JAll  JOne  JNone &amp;gt;;

# The actual Junction type
role Junction[\jt, @vs] {
    has JType $.junction-type=jt;
    has @.values=@vs;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来是四种类型的 Junction 的构造函数（下划线，避免与内建函数的名称冲突）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;our sub all_(@vs) {
    Junction[ JAll, @vs].new;
}

our sub any_(@vs) {
    Junction[ JAny, @vs].new;
}

our sub one_(@vs) {
    Junction[ JOne, @vs].new;
}

our sub none_(@vs) {
    Junction[ JNone, @vs].new;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将一个（单参数）函数应用于 junction 参数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub infix:&amp;lt;●○&amp;gt;( &amp;amp;f, \j ) is export {
    my \jt=j.junction-type; 
    my @vs = j.values;
  
    Junction[ jt, map( {&amp;amp;f($_)}, @vs)].new;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要将 Junction 内的函数应用于非 Junction 的参数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub infix:&amp;lt;○●&amp;gt;( \jf, \v ) is export {
    my \jt=jf.junction-type; 
    my @fs = jf.values;

    Junction[ jt, map( {$_( v)}, @fs)].new;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将一个函数应用于两个 junction 参数，相当于将一个 junction 内的函数应用于一个 junction。这里有一个复杂的问题。Raku 对嵌套施加了一个排序，即所有的嵌套总是外嵌套。因此，我们必须检查 junction 的类型，如果需要的话，我们必须交换映射。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub infix:&amp;lt;○○&amp;gt;( \jf, \jv ) is export {
    my \jft= jf.junction-type; 
    my @fs = jf.values;
    my \jvt = jv.junction-type;
    my @vs = jv.values;
    if (jvt == JAll and jft != JAll) {        
        Junction[ jvt, map( sub (\v){jf ○● v}, @vs)].new;  
    } else {        
        Junction[ jft, map( sub (&amp;amp;f){ &amp;amp;f ●○ jv}, @fs)].new;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了完整，这里是 &lt;code&gt;○==●&lt;/code&gt; 的定义。&lt;code&gt;○!=●&lt;/code&gt;、&lt;code&gt;○&amp;gt;●&lt;/code&gt; 等的定义是类似的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub infix:&amp;lt; ○==● &amp;gt;( \j, \v ) is export {
    sub (\x){x==v} ●○ j
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来我们有 &lt;code&gt;so&lt;/code&gt;，它把布尔值的 junction 变成了布尔值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;our sub so (\jv) { 
    my @vs = jv.values;
    given jv.junction-type {
        when JAny { elems(grep {$_},  @vs) &amp;gt;0}
        when JAll { elems(grep {!$_}, @vs)==0}
        when JOne { elems(grep {$_},  @vs)==1}
        when JOne { elems(grep {$_},  @vs)==0}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后我们有 &lt;code&gt;collapse&lt;/code&gt;，正如&lt;a href=&#34;https://gist.github.com/wimvanderbauwhede/85fb4b88ec53a0b8149e6c05740adcf8&#34;&gt;贪婪 Junction 的文章&lt;/a&gt;中所定义的那样， &lt;code&gt;collapse&lt;/code&gt; 返回 Junction 的值，只要它们都是一样的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;our sub collapse( \j ) {
    my \jt=j.junction-type; 
    my @vvs = j.values;
    my $v =  shift @vvs;        
    my @ts = grep {!($_ ~~ $v)}, @vvs;
    if (@ts.elems==0) {  
        $v
    } else {
        die &amp;quot;Can&#39;t collapse this Junction: elements are not identical: {$v,@vvs}&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;junction-清理&#34;&gt;Junction 清理&lt;/h3&gt;
&lt;p&gt;现在我们再来看看我们的工作假说，将 Raku 的 Junction 上的动作解释为上述类型和操作符的语法糖。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub sq(Int $x --&amp;gt; Int) { $x*$x }
my Junction $j = 11 | 22; 
my Junction $rj = sq($j); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;去语法塘后这变成了:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my Junction $j = any_ [11,22];
my Junction $rj = &amp;amp;sq ●○ $j;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;类似地,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;if ($j == 42) {...} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;变成了:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;if (so ($j ○==● 42)) {...}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;和其他布尔上下文类似。&lt;/p&gt;
&lt;p&gt;如果我们仔细看&lt;a href=&#34;https://gist.github.com/wimvanderbauwhede/85fb4b88ec53a0b8149e6c05740adcf8&#34;&gt;贪婪 Junction 文章&lt;/a&gt;中的 pair 例子，那么将 junction 应用到一个有多个参数的函数上:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my Junction \p1j = pair R,(42^43);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;去语法塘后变为:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my Junction \p1j = &amp;amp;pair.assuming(R) ●○ one_ [42,43];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们使用 &lt;code&gt;.assuming()&lt;/code&gt; 是因为我们需要部分应用。不管我们是先应用非 Junction 参数还是 Junction 参数，都没有关系。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my \p1jr = ( sub ($y){ &amp;amp;pair.assuming(*,$y) } ●○ one_ [42,43] ) ○● R;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后，举一个两个参数都是 Junction 的例子。由于 &lt;code&gt;○○&lt;/code&gt; 的定义，应用的顺序并不重要。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub m(\x,\y){x*y}

my \p4 = ( sub (\x){ &amp;amp;m.assuming(x) } ●○ any_ [11,22] ) ○○ all_ [33,44];
my \p4r = ( sub (\x){ &amp;amp;m.assuming(*,x) } ●○ all_ [33,44] ) ○○ any_ [11,22];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;结论&#34;&gt;结论&lt;/h3&gt;
&lt;p&gt;从 Raku 的 junction 的神奇类型行为实际上是语法糖的假设出发，我使用多态代数数据类型重构了 junction 类型和它的动作，并表明 Raku 的行为作为语法糖的解释对于所提出的实现是成立的。换句话说，Raku 的 Junction 确实遵循静态类型规则。&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href=&#34;https://gist.github.com/wimvanderbauwhede/19cc1e8d04e9a477f58cfe7288a6172e&#34;&gt;https://gist.github.com/wimvanderbauwhede/19cc1e8d04e9a477f58cfe7288a6172e&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/rakulang">rakulang</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/junction">Junction</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-10-04-reconstructing-raku-junctions/</guid>
                <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>通过函数式编程实现更简洁的代码</title>
                <link>https://ohmyweekly.github.io/notes/2020-07-26-cleaner-code-with-functional-programming/</link>
                
                
                <description>&lt;blockquote&gt;Cleaner code with functional programming&lt;/blockquote&gt;&lt;p&gt;函数式编程是一种编程风格，现代语言或多或少都支持这种风格。在这篇文章中，我想解释一下函数式编程如何为你提供强大的抽象，使你的代码更加简洁。我将用 Raku 和 Python 中的例子来说明这一点，我们将看到这两种语言都是函数式编程的优秀语言。&lt;/p&gt;
&lt;h2 id=&#34;raku-简介&#34;&gt;Raku: 简介&lt;/h2&gt;
&lt;p&gt;本文的代码示例是用 Python 和 Raku 编写的。我想大多数人都熟悉 Python，但 Raku 不太为人所知，所以我先解释一下基础知识。本文中的代码不是很习惯，所以如果你懂得其他编程语言，应该很容易理解。&lt;/p&gt;
&lt;p&gt;Raku 与 Perl 最为相似。两种语言在语法上都与 C/C++、Java 和 JavaScript 相似：基于块，语句用分号隔开，块用大括号分界，参数列表放在括号中，用逗号隔开。将 Perl 和 Raku 与其他语言区分开来的主要特征是使用魔符（&amp;ldquo;有趣的字符&amp;rdquo;）来识别变量的类型：&lt;code&gt;$&lt;/code&gt; 代表标量，&lt;code&gt;@&lt;/code&gt; 代表数组，&lt;code&gt;%&lt;/code&gt; 代表哈希（映射），&lt;code&gt;&amp;amp;&lt;/code&gt; 代表子程序。变量也有关键字来标识它们的作用域，我只用 &lt;code&gt;my&lt;/code&gt; 来标识变量的词法作用域。子程序是用 &lt;code&gt;sub&lt;/code&gt; 关键字来声明的，子程序可以是命名的，也可以是匿名的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;sub square ($x) {
    $x*$x;
}
# anonymous subroutine 
my $anon_square = sub ($x) {
    $x*$x;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 Python 中，这将是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# anonymous subroutine &lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;anon_square&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Raku 支持无符号变量，并使用 &lt;code&gt;\&lt;/code&gt; 语法来声明它们。更多关于普通变量和无符号变量之间的区别，请参见 &lt;a href=&#34;https://docs.raku.org/language/variables#Sigilless_variables&#34;&gt;Raku 文档&lt;/a&gt;。例如(&lt;code&gt;say&lt;/code&gt; 打印它的参数，后面加一个换行)。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my \x = 42; # sigilless
my $y = 43; 
say x + $y; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在本文的代码中，我将尽可能地使用无符号变量。&lt;/p&gt;
&lt;p&gt;Raku 有几种类型的序列数据结构。在下面的代码中，我将使用&lt;a href=&#34;https://docs.raku.org/language/list&#34;&gt;列表和数组&lt;/a&gt;以及&lt;a href=&#34;https://docs.raku.org/type/Range&#34;&gt;范围&lt;/a&gt;。在 Raku 中，列表和数组的主要区别在于，列表是不可变的，这意味着一旦创建，就不能修改。所以它是一个只读的数据结构。要&amp;quot;更新&amp;quot;一个不可变的数据结构，你需要创建一个更新的副本。另一方面，数组是可变的，所以我们可以更新它们的元素，扩展它们，缩小它们等等。所有的更新都发生在原始数据的位置上。&lt;/p&gt;
&lt;p&gt;Raku 的数组类似于 Python 的 list，Raku 的 list 类似于 Python 的 tuple，也是不可变的。除了语法之外，Raku 中的范围与 Python 中的范围相似，都是不可变的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my @array1 = 1,2,3; #=&amp;gt; an array because of the &#39;@&#39; sigil
my \array2 = [1,2,3]; #=&amp;gt; an array, because of the &#39;[...]&#39;

my \range1 = 1 .. 10; #=&amp;gt; a range 1 .. 10
my @array3 = 1 .. 10; #=&amp;gt; an array from a range, because of the &#39;@&#39; sigil

my \list1 = 1,2,3; #=&amp;gt; a list
my $list2 = (1,2,3); #=&amp;gt; also a list
my \list3 = |(1 .. 10);  #=&amp;gt; an array from a range because of the &#39;|&#39; flattening operation
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相应的 Python 代码为:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; a list from a tuple&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; a list, because of the &amp;#39;[...]&amp;#39;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;range1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; a range 1 .. 10&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; a list from a range&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;tuple1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; a tuple&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tuple2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; a tuple from a list&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tuple3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; creates a tuple from a range&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他具体的语法或功能将针对具体的例子进行解释。&lt;/p&gt;
&lt;h2 id=&#34;其他任何名称的函数---作为值的函数&#34;&gt;&lt;em&gt;其他任何名称的函数&lt;/em&gt; - 作为值的函数&lt;/h2&gt;
&lt;p&gt;函数是函数式编程的精髓。正如我在&lt;a href=&#34;https://wimvanderbauwhede.github.io/articles/everything-is-a-function&#34;&gt;&amp;ldquo;万物皆函数&amp;rdquo;&lt;/a&gt;一文中所解释的那样，在适当的函数式语言中，所有的结构都是由函数构建的。&lt;/p&gt;
&lt;p&gt;所有现代编程语言都有函数、程序、子程序或方法的概念。它们是代码重用的重要机制。通常，我们认为函数是对一些输入值进行操作以产生一个或多个输出值的东西。输入值可以是全局声明的，也可以是一个类的属性，或者作为参数传递给函数。同样，输出值可以直接返回，到全局变量，作为类的属性或通过修改输入值。&lt;/p&gt;
&lt;p&gt;要想从函数式编程中获益最多，最好是函数是纯粹的，这意味着对函数的调用总是对相同的输入产生相同的输出。在实践中，如果函数只接受输入作为参数，并直接返回输出，这一点比较容易实现，但这并不是必不可少的。&lt;/p&gt;
&lt;p&gt;函数式编程的关键特征是，函数的输入值和输出值本身可以是函数。所以函数必须是你语言中的值。有时这被称为 &amp;ldquo;函数必须是一等公民&amp;rdquo;，一个接收和/或返回函数的函数有时被称为&amp;quot;高阶函数&amp;quot;。&lt;/p&gt;
&lt;p&gt;如果函数是值，那么我们就可以将它们赋值给变量。特别是我们会将它们赋值给其他函数的参数。但我们也可以将它们赋值给普通的变量。&lt;/p&gt;
&lt;p&gt;让我们考虑以下函数，&lt;code&gt;choose&lt;/code&gt;，它需要三个参数 &lt;code&gt;t&lt;/code&gt;，&lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;c&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub choose (\t, \f, \d) {
    if (d) {t} else {f}
}
# Python
def choose (t, f, d):
  if d:
    return t 
  else:
    return f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先让我们用字符串作为前两个参数的值来调用 &lt;code&gt;choose&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \tstr = &amp;quot;True!&amp;quot;;
my \fstr = &amp;quot;False!&amp;quot;;

my \res_str = choose(tstr, fstr, True);

say res_str; #=&amp;gt; says &amp;quot;True!&amp;quot;
# Python
tstr = &amp;quot;True!&amp;quot;
fstr = &amp;quot;False!&amp;quot;

res_str = choose(tstr,fstr,True)

print(res_str) #=&amp;gt; says &amp;quot;True!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在让我们尝试用函数作为参数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub tt (\s) { say &amp;quot;True {s}!&amp;quot; }
sub ff (\s) { say &amp;quot;False {s}!&amp;quot; }

my &amp;amp;res_f = choose(&amp;amp;tt, &amp;amp;ff, False);

say &amp;amp;res_f; #=&amp;gt; says &amp;amp;ff
res_f(&amp;quot;rumour&amp;quot;); #=&amp;gt; says &amp;quot;False rumour!&amp;quot;
# Python
def tt(s):
  print( &amp;quot;True &amp;quot;+s+&amp;quot;!&amp;quot;)
def ff(s):  
  print( &amp;quot;False&amp;quot;+s+&amp;quot;!&amp;quot;)

res_f = choose(tt,ff,True)

print(res_f) #=&amp;gt; says &amp;lt;function tt at 0x7f829c3aa310&amp;gt;
res_f(&amp;quot;rumour&amp;quot;) #=&amp;gt; says &amp;quot;False rumour!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此，我们的函数 &lt;code&gt;choose&lt;/code&gt;  接收两个函数作为它的前两个参数，并返回一个函数。在 Raku 中，我们需要在函数名上加上 &lt;code&gt;&amp;amp;&lt;/code&gt; 符号，因为否则它们会被求值：像 &lt;code&gt;tt&lt;/code&gt; 这样的裸函数名就等于调用没有参数的函数 &lt;code&gt;tt()&lt;/code&gt;。通过将这个函数赋值给一个变量(&lt;code&gt;res_f&lt;/code&gt;)，我们现在可以将 &lt;code&gt;res_f&lt;/code&gt; 作为一个函数来调用，它最终会根据选择来调用 &lt;code&gt;tt&lt;/code&gt; 或 &lt;code&gt;ff&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;函数不需要名字&#34;&gt;函数不需要名字&lt;/h2&gt;
&lt;p&gt;现在，如果我们可以将函数赋值给变量，它们本身其实并不需要一个名字。所以我们的函数可以是匿名的。大多数语言都支持匿名函数，在函数式语言中，它们通常被称为 &amp;ldquo;lambda 函数&amp;rdquo;。在 Raku 中，我们有两种方法来创建匿名函数。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;sub (...)&lt;/code&gt; 语法:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my \tt = sub (\s) { say &amp;quot;True {s}!&amp;quot; };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者使用&lt;a href=&#34;https://docs.raku.org/language/functions#index-entry-pointy_blocks&#34;&gt;&amp;lsquo;尖号块&amp;rsquo;&lt;/a&gt;语法，这样更紧凑一些:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my \ff = -&amp;gt; \s { say &amp;quot;False {s}!&amp;quot; };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python 使用 &lt;code&gt;lambda&lt;/code&gt; 关键字:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;True &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;False &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以现在我们可以说:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my &amp;amp;res_f = choose(tt, ff, True);

say &amp;amp;res_f; #=&amp;gt; says sub { }
res_f(&amp;quot;story&amp;quot;); #=&amp;gt; says &amp;quot;True story!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当我们打印出函数所绑定的变量时，Raku 返回 &lt;code&gt;sub { }&lt;/code&gt; 来表示该变量包含一个函数。&lt;/p&gt;
&lt;p&gt;在 Python 中:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;res_f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res_f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; says &amp;lt;function &amp;lt;lambda&amp;gt; at 0x7f829b298b80&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;res_f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;story&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; says &amp;#34;True story!&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;例子-map-grep-和-reduce&#34;&gt;例子: &lt;code&gt;map&lt;/code&gt;、 &lt;code&gt;grep&lt;/code&gt; 和 &lt;code&gt;reduce&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;函数的功能有很多用途，我只想重点介绍三个在 Raku 中现成的例子：&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;reduce&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt;。Python 有 &lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;filter&lt;/code&gt;，并通过 &lt;code&gt;functools&lt;/code&gt; 模块提供 &lt;code&gt;reduce&lt;/code&gt;。这些函数的共同点是，它们提供了一种对列表进行 &lt;code&gt;for&lt;/code&gt; 循环的替代方法。&lt;/p&gt;
&lt;h3 id=&#34;map--对列表中的所有元素进行函数应用&#34;&gt;&lt;code&gt;map&lt;/code&gt; : 对列表中的所有元素进行函数应用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; 有两个参数：一个函数和一个列表。它将函数按顺序应用于列表中的所有值，并返回结果，例如将列表中的所有值平方。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my \res = map -&amp;gt; \x {x*x} , 1 .. 10;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 Python 中，我们需要显式地创建元组，但除了语法上的差异，结构是完全一样的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是对传统 &lt;code&gt;for&lt;/code&gt; 循环的功能替代。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \res = [];
for 1 .. 10 -&amp;gt; \x {
    res.push(x*x);
}
# Python
res = []
for x in range(1,11):
    res.append(x*x)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，在 Raku 和 Python 中，我们需要为 &lt;code&gt;for&lt;/code&gt; 循环版本使用一个可变的数据结构，而 &lt;code&gt;map&lt;/code&gt; 版本则使用不可变的数据结构。&lt;/p&gt;
&lt;h3 id=&#34;grep--过滤列表&#34;&gt;&lt;code&gt;grep&lt;/code&gt; : 过滤列表&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; (在 Python 中称为 &lt;code&gt;filter&lt;/code&gt;)也接受参数，一个函数和一个列表，但它只返回函数返回真的列表中的值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \res = grep -&amp;gt; \x { x % 5 == 0 }, 1 .. 30;
# Python
res = tuple(filter( lambda x : x % 5 == 0 ,range(1,31)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然我们也可以用 &lt;code&gt;for&lt;/code&gt; 循环和 &lt;code&gt;if&lt;/code&gt; 语句来写，但这又需要一个可变的数据结构。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \res = [];
for 1 .. 30 -&amp;gt; \x {
    if (x % 5 == 0) {
    res.push(x);
    }
}
# Python
res = []
for x in range(1,31): 
  if (x % 5 == 0):
    res.append(x)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt; 的好处是，你可以很容易地把它们链在一起。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
grep -&amp;gt; \x { x % 5 == 0 }, map -&amp;gt; \x {x*x}, 1..30
# Python
res = tuple(filter( lambda x : x % 5 == 0 ,map( lambda x : x*x ,range(1,31))))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是因为 &lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt; 接受一个列表并返回一个列表，所以只要你需要对一个列表进行操作，就可以通过链式调用来实现。&lt;/p&gt;
&lt;h3 id=&#34;reduce--化整为零&#34;&gt;&lt;code&gt;reduce&lt;/code&gt; : 化整为零&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;reduce&lt;/code&gt; 也接受一个函数和一个 list，但它使用函数将 list 的所有元素合并成一个结果。所以函数必须接受两个参数。第二个参数是从列表中取出的元素，第一个参数作为状态变量来组合所有元素。例如，计算一个数字列表的和:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \sum = reduce sub (\acc,\elt) {acc+elt}, 1 .. 10;

say sum; #=&amp;gt; says 55
# Python
from functools import reduce

sum = reduce(lambda acc,elt: acc+elt, range(1,11))

print( sum); #=&amp;gt; says 55
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里发生的情况是，首先将 &lt;code&gt;acc&lt;/code&gt; 设置为列表中的第一个元素(1)，然后加上第二个元素，所以 &lt;code&gt;acc&lt;/code&gt; 变成 1+2=3；然后加上第三个元素(3)，以此类推。其效果是将列表中的所有数字连续相加。&lt;/p&gt;
&lt;p&gt;为了更清楚地说明这一点，我们来写一个我们自己的 &lt;code&gt;reduce&lt;/code&gt; 版本。&lt;/p&gt;
&lt;h3 id=&#34;编写你自己的&#34;&gt;编写你自己的&lt;/h3&gt;
&lt;p&gt;在许多函数式语言中，从左到右（从最低索引开始）和从右到左（从最高索引开始）的还原是有区别的。这一点很重要，因为根据做还原的函数，如果从左边或右边消耗列表，结果可能会不同。例如，假设我们的化简函数是&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
-&amp;gt; \x,\y {x+y}
# Python
lambda x,y: x+y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么我们从哪个方向遍历列表并不重要。但考虑以下函数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
-&amp;gt; \x,\y { x &amp;lt; y ?? x+y !! x }

# Python
lambda x,y: x+y if x&amp;lt;y else x
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;( &lt;code&gt;... ?? ... !! ...&lt;/code&gt; 是条件操作符的 Raku 句法，在大多数其他语言中是 &lt;code&gt;... ? ... : ...&lt;/code&gt; 在 Python 中是 &lt;code&gt;... if ... else ...&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;在这种情况下，如果列表从左或从右还原，结果会有所不同。在 Raku 和 Python 中，&lt;code&gt;reduce&lt;/code&gt; 是一种从左到右的还原。&lt;/p&gt;
&lt;p&gt;另外，&lt;code&gt;reduce&lt;/code&gt; 函数可以不使用列表的第一个元素，而是取一个额外的参数，通常称为累加器。在函数式语言中，&lt;code&gt;reduce&lt;/code&gt; 通常被称为 &lt;code&gt;fold&lt;/code&gt;，所以我们可以有一个左折和一个右折。让我们来看看如何实现这些。&lt;/p&gt;
&lt;h4 id=&#34;left-fold&#34;&gt;Left fold&lt;/h4&gt;
&lt;p&gt;实现左折的直接方法（所以和 &lt;code&gt;reduce&lt;/code&gt; 一样）是在函数内部使用 &lt;code&gt;for&lt;/code&gt; 循环。这意味着我们必须在循环的每次迭代上更新累加器的值。在 Raku 中，无符号变量是不可变的（我在这里简化了，完整的故事请看 &lt;a href=&#34;https://docs.raku.org/language/containers#Binding&#34;&gt;Raku 文档&lt;/a&gt;），所以我们需要使用一个有符号的变量，&lt;code&gt;$acc&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub foldll (&amp;amp;f, \iacc, \lst) { 
  my $acc = iacc; 
  for lst -&amp;gt; \elt {
    $acc = f($acc,elt);
  }
  $acc;
}

# Python
def foldll (f, iacc, lst):
  acc = iacc
  for elt in lst:
    acc = f(acc,elt)  
  return acc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们只想使用不可变的变量，我们可以使用递归。Raku 使这一点变得简单，因为它允许一个子程序有多个签名(&lt;code&gt;multi sub&lt;/code&gt;)，并且它会调用与签名相匹配的变量。&lt;/p&gt;
&lt;p&gt;我们的 &lt;code&gt;foldl&lt;/code&gt; 将消耗输入列表 &lt;code&gt;lst&lt;/code&gt;，并使用 &lt;code&gt;f&lt;/code&gt; 将其元素组合到累加器 &lt;code&gt;acc&lt;/code&gt; 中，当列表被消耗后，计算结束，我们可以返回 &lt;code&gt;acc&lt;/code&gt; 作为结果。所以我们的第一个变体说，如果输入列表是空的，我们应该返回 &lt;code&gt;acc&lt;/code&gt;。 第二个变体从列表中取出一个元素 &lt;code&gt;elt&lt;/code&gt; (关于 &lt;code&gt;*&lt;/code&gt; 的细节请参见 &lt;a href=&#34;https://docs.raku.org/type/Range&#34;&gt;Raku 文档&lt;/a&gt;)，并将其与 &lt;code&gt;acc&lt;/code&gt; 结合到 &lt;code&gt;f(acc,elt)&lt;/code&gt; 中。然后用这个新的累加器和 list 的剩余部分 &lt;code&gt;rest&lt;/code&gt; 再次调用 &lt;code&gt;foldl&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# When the list is empty, return the accumulator
multi sub foldl (&amp;amp;f, \acc, ()) { acc }
multi sub foldl (&amp;amp;f, \acc, \lst) {
  # Raku&#39;s way of splitting a list in the first elt and the rest
  # The &#39;*&#39; is a shorthand for the end of the list
   my (\elt,\rest) = lst[0, 1 .. * ]; 
   # The actual recursion
   foldl( &amp;amp;f, f(acc, elt), rest);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python 不允许这种模式匹配，所以我们需要使用条件来编写递归。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foldl&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;():&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Python&amp;#39;s way of splitting a tuple in the first elt and the rest&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# rest will be a list, not a tuple, but we&amp;#39;ll let that pass&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt; 
   &lt;span class=&#34;c1&#34;&gt;# The actual recursion&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foldl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个实现中，所有的变量都不会被更新。所以所有的变量都可以是不可变的。&lt;/p&gt;
&lt;h4 id=&#34;right-fold&#34;&gt;Right fold&lt;/h4&gt;
&lt;p&gt;右折与左折颇为相似。对于基于循环的版本，我们所做的只是将列表反转(&lt;code&gt;reverse&lt;/code&gt;)。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub foldrl (&amp;amp;f, \acc, \lst) { 
  my $res = acc;
  for  lst.reverse -&amp;gt; \elt {
    $res = f($res,elt);
  }
  $res;
}

# Python
def foldlr (f, iacc, lst):
  acc = iacc
  for elt in lst.reverse():
    acc = f(acc,elt)  
  return acc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在递归版本中，我们从列表中取最后一个元素而不是第一个元素。关于 &lt;code&gt;..^ * - 1&lt;/code&gt; 语法的细节，请参见 &lt;a href=&#34;https://docs.raku.org/language/operators#infix_..%5E&#34;&gt;Raku 文档&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
multi sub foldr ( &amp;amp;f, \acc, ()) { acc }
multi sub foldr (&amp;amp;f, \acc, \lst) {
    my (\rest,\elt) = lst[0..^*-1, *  ];
    foldr( &amp;amp;f, f(acc, elt), rest);
}

# Python
def foldr (f, acc, lst):
  if lst == (): 
    return acc 
  else:
   (*rest,elt) = lst 
   return foldr( f, f(acc, elt), rest)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;map-and-grep-are-folds&#34;&gt;&lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; are folds&lt;/h4&gt;
&lt;p&gt;现在，&lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt; 呢？我们当然可以用 &lt;code&gt;for&lt;/code&gt; 循环来实现，但我们也可以用我们的 &lt;code&gt;foldl&lt;/code&gt; 来实现它们。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub map (&amp;amp;f,\lst) {
    foldl( sub (\acc,\elt) {
            (|acc,f(elt))
            }, (), lst);
}

# Python
def map (f,lst):
    return foldl( 
      lambda acc,elt:(*acc, f(elt))
      ,()
      ,lst
    )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为函数 &lt;code&gt;f&lt;/code&gt; 是可映射的，所以它只有一个参数。但是 &lt;code&gt;foldl&lt;/code&gt; 需要一个有两个参数的函数，第一个参数为累加器。所以我们用两个参数的匿名函数调用 &lt;code&gt;foldl&lt;/code&gt;。累积器本身是一个空列表。虽然我们前面说过，还原将原来列表的所有元素合并成一个返回值，当然这个返回值可以是任何数据类型，所以也是一个列表。所以我们对原始列表中的每一个元素都调用 &lt;code&gt;f&lt;/code&gt;，并将其添加到累加器列表的末尾。(&lt;code&gt;|&lt;/code&gt; 将列表扁平化，所以 &lt;code&gt;(|acc,f(elt))&lt;/code&gt; 是一个由 &lt;code&gt;acc&lt;/code&gt; 的元素和 &lt;code&gt;f(elt)&lt;/code&gt; 的结果建立的新列表。)&lt;/p&gt;
&lt;p&gt;类似地，我们也可以定义 &lt;code&gt;grep&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub grep (&amp;amp;f,\lst) {
    foldl( sub (\acc,\elt) {
      if (f(elt)) {
          (|acc,elt)
      } else {
          acc
      }
    }, (), lst);
}

# Python
def filter (f,lst):
    return foldl( 
      lambda acc,elt:
        (*acc,elt) if f(elt) else acc
      , (), lst)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就像在 &lt;code&gt;map&lt;/code&gt; 实现中一样，我们用一个匿名函数调用 &lt;code&gt;foldl&lt;/code&gt;。在这个函数中，我们测试 &lt;code&gt;lst&lt;/code&gt; 中的每个 &lt;code&gt;elt&lt;/code&gt; 是否为 &lt;code&gt;f(elt)&lt;/code&gt; 为真。如果是真，我们就从 &lt;code&gt;acc&lt;/code&gt; 和 &lt;code&gt;elt&lt;/code&gt; 创建一个新的列表，否则我们就只返回 &lt;code&gt;acc&lt;/code&gt;。 因为 &lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt; 分别对列表中的每个元素进行操作，所以我们也可以使用右折来实现它们。&lt;/p&gt;
&lt;p&gt;通过这些例子，我希望无论是对函数工作的概念，还是对函数可能的实现方式，都变得更加清晰。递归实现的优点是它允许我们使用不可变的数据结构。&lt;/p&gt;
&lt;h3 id=&#34;为什么是不可变的数据结构&#34;&gt;为什么是不可变的数据结构？&lt;/h3&gt;
&lt;p&gt;你可能会好奇为什么我关注这些不可变的数据结构。正如我们将看到的那样，函数式编程与不可改变的数据结构配合得非常好。而且它们有一个很大的优势：你永远不用担心是否不小心修改了你的数据，也不用担心是否应该做一个副本来确定。所以使用不可变数据结构可以使代码不易出错，更容易调试。它们还具有潜在的性能优势。而我们接下来会看到，在 Raku 中还有另一个优势。&lt;/p&gt;
&lt;h2 id=&#34;返回函数的函数&#34;&gt;返回函数的函数&lt;/h2&gt;
&lt;p&gt;函数也可以返回函数。如果我们想拥有一个可参数化的函数，这一点尤其有用。举个简单的例子，假设我们想要一系列以固定值递增一个数字的函数：&lt;code&gt;add1&lt;/code&gt;、&lt;code&gt;add2&lt;/code&gt; 等。当然，我们可以分别写出每一个函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub add_1 (\x) {x+1}
sub add_2 (\x) {x+2}
sub add_3 (\x) {x+3}
sub add_4 (\x) {x+4}
sub add_5 (\x) {x+5}

say add_1(4); #=&amp;gt; says 5
# Python
def add_1 (x) : return x+1
def add_2 (x) : return x+2
def add_3 (x) : return x+3
def add_4 (x) : return x+4
def add_5 (x) : return x+5

print( add_1(4)) #=&amp;gt; says 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者我们可以使用一个充满匿名函数的列表。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \add =
sub (\x) {x},
sub (\x) {x+1},
sub (\x) {x+2},
sub (\x) {x+3},
sub (\x) {x+4},
sub (\x) {x+5};

say add[0].(4); #=&amp;gt; says 5


# Python
add = (
lambda x : x+1,
lambda x : x+2,
lambda x : x+3,
lambda x : x+4,
lambda x : x+5
)

print( add[0](4)) #=&amp;gt; says 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以做得更好，用一个循环来填充一个匿名函数的数组。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \add = [];
for 0 .. 5 -&amp;gt; \n {
  add.push(sub (\x) {x+n});
}

say add[1].(4); #=&amp;gt; says 5

# Python
add = []
for n in range(0,6):
  add.append(lambda x: x+n)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们每次循环迭代都会创建一个新的匿名函数，并将其添加到数组中。但是，我们可以使用一个函数来创建这些匿名函数，然后我们可以使用 &lt;code&gt;map&lt;/code&gt; 来代替循环，并使用一个不可改变的数据结构。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub gen_add(\n) {  
  sub (\x) {x+n}
}

my \add = map &amp;amp;gen_add, 0..5;

say add[1].(4); #=&amp;gt; says 5

# Python
def gen_add(n):  
  return lambda x : x+n

add = tuple(map( gen_add, range(0,6)))

print( add[1](4)) #=&amp;gt; says 5
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;laziness&#34;&gt;Laziness&lt;/h3&gt;
&lt;p&gt;在 Raku 中，使用(不可改变的)范围有一个额外的好处：我们可以将范围的末端设置为无穷大，在 Raku 中可以写成 &lt;code&gt;∞&lt;/code&gt;(unicode 221E)、&lt;code&gt;*&lt;/code&gt; 或 &lt;code&gt;Inf&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \add = map &amp;amp;gen_add, 0 .. ∞;  

say add[244].(7124); #=&amp;gt; says 7368
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是一个所谓的&amp;quot;懒惰求值&amp;quot;的例子，简称 laziness：Raku 不会尝试（和失败）处理这个无限的列表。相反，它将在我们实际使用该列表中的一个元素时进行处理。表达式的评估会延迟到需要结果的时候，所以当我们调用 &lt;code&gt;add[244]&lt;/code&gt; 时，发生的情况是 &lt;code&gt;gen_add(244)&lt;/code&gt; 被调用来生成该函数。请注意，这在 &lt;code&gt;for&lt;/code&gt; 循环中是行不通的，因为要使用 &lt;code&gt;for&lt;/code&gt; 循环，我们需要一个可变的数据结构，而惰性列表必须是不可变的。所以这是一个很好的例子，说明函数式编程风格如何让你从懒惰中获益。&lt;/p&gt;
&lt;p&gt;这也是为什么我们递归地实现了 &lt;code&gt;foldl&lt;/code&gt;，然后用它来实现我们自己的 &lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt;：基于递归的版本不需要更新任何变量，所以它们可以与不可变的惰性数据结构一起工作。&lt;/p&gt;
&lt;h2 id=&#34;函数组合&#34;&gt;函数组合&lt;/h2&gt;
&lt;p&gt;我们在上面看到，你可以把 &lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt; 的调用链在一起。通常情况下，你只需要将 &lt;code&gt;map&lt;/code&gt; 调用链在一起，例如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
map -&amp;gt; \x { x + 5 }, map -&amp;gt; \x {x*x}, 1..30;

# Python
map( lambda x : x + 5, map( lambda x : x*x, range(1,31)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这种情况下，我们可以做得更有效率一些：比起创建一个列表，然后在这个列表上调用 &lt;code&gt;map&lt;/code&gt;，我们可以通过组合函数一次完成两个计算。Raku 为此提供了一个特殊的操作符。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;map -&amp;gt; \x { x + 5 } ∘ -&amp;gt; \x { x * x }, 1..30;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;操作符 &lt;code&gt;∘&lt;/code&gt;（&amp;ldquo;环形操作符&amp;rdquo;，unicode 2218，但你也可以用普通的 &lt;code&gt;o&lt;/code&gt;）是函数组成操作符，它的发音是 &amp;ldquo;after&amp;rdquo;，所以 &lt;code&gt;f ∘ g&lt;/code&gt; 是 &amp;ldquo;f after g&amp;rdquo;。它的作用是将两个现有的函数组合起来，创建一个新的函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my &amp;amp;h = &amp;amp;f ∘ &amp;amp;g;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;是下面的代码是一样的:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;sub h (\x) {
    f(g(x))
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;组成运算符的优点是，它可以适用于任何函数，包括匿名函数。但实际上，它只是另一个高阶函数。它只是下面函数的运算符形式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub compose(&amp;amp;f,&amp;amp;g) {
    sub (\x) { f(g(x)) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python 没有函数组成操作符，但你也可以很容易地在 Python 中拥有 &lt;code&gt;compose&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Python&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;在这篇文章中，我用 Raku 和 Python 的例子介绍了三种关键的函数式编程技术：对函数进行操作的函数、返回函数的函数和函数组成。我已经展示了你如何使用函数 &lt;code&gt;map&lt;/code&gt;、&lt;code&gt;reduce&lt;/code&gt;(折叠)和 &lt;code&gt;grep&lt;/code&gt;(过滤)来操作不可变的列表。我已经解释了哟(如何用递归和不递归实现这样的函数，以及递归实现的优势是什么。下面是《 &lt;a href=&#34;https://github.com/wimvanderbauwhede/raku-examples/blob/master/decluttering-with-functional-programming.raku&#34;&gt;Raku&lt;/a&gt; 与 &lt;a href=&#34;https://github.com/wimvanderbauwhede/raku-examples/blob/master/decluttering-with-functional-programming.py&#34;&gt;Python&lt;/a&gt;》一文中的代码。&lt;/p&gt;
&lt;p&gt;当然，函数式编程的内容还有很多，我也写了&lt;a href=&#34;https://wimvanderbauwhede.github.io/articles/&#34;&gt;几篇更高级的文章&lt;/a&gt;。本文介绍的概念应该为理解那些更高级的主题打下良好的基础。如果你想了解更多关于函数式编程的知识，你可以考虑我的&lt;a href=&#34;https://www.futurelearn.com/courses/functional-programming-haskell&#34;&gt;免费在线课程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;原文: &lt;a href=&#34;https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/&#34;&gt;https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/functional-programming">functional programming</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-07-26-cleaner-code-with-functional-programming/</guid>
                <pubDate>Sun, 26 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Checklist for Raku 6.d</title>
                <link>https://ohmyweekly.github.io/notes/2020-07-21-checklist-for-6-dot-d/</link>
                
                
                <description>&lt;blockquote&gt;Checklist for 6.d&lt;/blockquote&gt;&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;在 6.d 版本中, 很多东西都发生了变化, 我们至少需要发布一个版本。&lt;a href=&#34;https://github.com/perl6/roast/blob/master/docs/announce/6.d.md&#34;&gt;这里有个列表&lt;/a&gt;。然而, 覆盖面是不完整的。弃用通知采取了不同的形式, 一些新的类型和方法在那里, 一些则没有&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;#2632&lt;/code&gt; 引用这个问题, 并检查项目, 当你的工作, 无论是通过改变后的文档, 看到没有变化, 需要做它。在这种情况下, 请通过评论或如何解释为什么是这种情况。&lt;/p&gt;
&lt;h2 id=&#34;版本控制的变更&#34;&gt;版本控制的变更&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; &lt;code&gt;&amp;amp;await&lt;/code&gt; 在等待的时候不再阻塞线程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; &lt;code&gt;whenever&lt;/code&gt; 不在 &lt;code&gt;react&lt;/code&gt; 抛出的词法作用域内&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; 在 &lt;code&gt;sub MAIN&lt;/code&gt; 里面的 &lt;code&gt;$*ARGFILES&lt;/code&gt; 总是由 &lt;code&gt;$*IN&lt;/code&gt; 馈入&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; 结构(字面上的) &lt;code&gt;$()&lt;/code&gt;、&lt;code&gt;@()&lt;/code&gt; 和 &lt;code&gt;%()&lt;/code&gt; 不复存在&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; 带有 &lt;code&gt;:D&lt;/code&gt;/&lt;code&gt;:U&lt;/code&gt; 类型约束的变量默认为约束类型的类型对象(例如, 你可以在它们身上使用 &lt;code&gt;.new&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; &lt;code&gt;start&lt;/code&gt; 块在 sink 上下文中附加异常处理程序&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; 例程必须使用 &lt;code&gt;return-rw&lt;/code&gt; 来返回一个 &lt;code&gt;Proxy&lt;/code&gt;, 即使例程被标记为 &lt;code&gt;is raw&lt;/code&gt; 或 &lt;code&gt;is rw&lt;/code&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; 原生的 &lt;code&gt;num&lt;/code&gt; 类型默认为 &lt;code&gt;0e0&lt;/code&gt; 而不是 &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; 在子程序名中, 保留了键名为 &lt;code&gt;sym&lt;/code&gt; 的冒号对（如&lt;code&gt;:sym&amp;lt;foo&amp;gt;&lt;/code&gt;）, 以备将来使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;废弃&#34;&gt;废弃&lt;/h2&gt;
&lt;p&gt;这些方法在 6.d 语言中已被废弃, 并将在 6.e 中被删除。实现者可以选择发出弃用警告, 或者在 6.e 版本发布后更长的时间内提供这些方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;&#39;-&#39;&lt;/code&gt; (单连字符)作为 &lt;code&gt;&amp;amp;open&lt;/code&gt; 的特殊路径, 表示特殊的句柄(使用 &lt;code&gt;IO::Special&lt;/code&gt; 对象代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Handle.slurp-rest&lt;/code&gt; (使用 &lt;code&gt;.slurp&lt;/code&gt; 代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Any.flatmap&lt;/code&gt; (使用&lt;code&gt;.flat&lt;/code&gt; 和 &lt;code&gt;.map&lt;/code&gt; 方法的组合来代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cool.path&lt;/code&gt; (使用 &lt;code&gt;.IO&lt;/code&gt; 代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pair.freeze&lt;/code&gt; (使用去容器化的参数的 &lt;code&gt;Pair.new&lt;/code&gt; 来代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Str.subst-mutate&lt;/code&gt; (使用带有 &lt;code&gt;.=&lt;/code&gt; 方法调用赋值元运算符的 &lt;code&gt;Str.subst&lt;/code&gt; 代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rational.norm&lt;/code&gt; (现在 &lt;code&gt;Rational&lt;/code&gt; 类型必须在创建时标准化)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path.child&lt;/code&gt; (使用 &lt;code&gt;.add&lt;/code&gt; 代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;undefine&lt;/code&gt; (直接分配 &lt;code&gt;Empty&lt;/code&gt;/&lt;code&gt;Nil&lt;/code&gt; 代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:count&lt;/code&gt; &lt;code&gt;&amp;amp;lines&lt;/code&gt;/&lt;code&gt;Str.lines&lt;/code&gt; 例程上的参数(使用所返回的 &lt;code&gt;Seq&lt;/code&gt; 上的 &lt;code&gt;.elems&lt;/code&gt; 代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;is_approx&lt;/code&gt; in Test.pm6 (使用与 &lt;code&gt;&amp;amp;is-approx&lt;/code&gt; 非常相似的行为来代替)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新的行为&#34;&gt;新的行为&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过新的可定义的 &lt;code&gt;&amp;amp;RUN-MAIN&lt;/code&gt;、&lt;code&gt;&amp;amp;ARGS-TO-CAPTURE&lt;/code&gt; 和 &lt;code&gt;&amp;amp;GENERATE-USAGE&lt;/code&gt; 子例程改善 &lt;code&gt;sub MAIN&lt;/code&gt; 的自定义处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; 变量中的 &lt;code&gt;QuantHash&lt;/code&gt;/&lt;code&gt;Map&lt;/code&gt; 和 &lt;code&gt;@&lt;/code&gt; 变量中的 &lt;code&gt;List&lt;/code&gt; 可以用 &lt;code&gt;is&lt;/code&gt; 特性来声明（例如，&lt;code&gt;my %h is Set&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;新的 &lt;code&gt;&amp;lt;ww&amp;gt;&lt;/code&gt; regex 规则: 只在单词内匹配&lt;/li&gt;
&lt;li&gt;循环可以从上一条语句的值中产生一个值的列表&lt;/li&gt;
&lt;li&gt;循环中的 &lt;code&gt;next&lt;/code&gt;/&lt;code&gt;last&lt;/code&gt; 收集其最后的语句值, 对它们运行的迭代返回 &lt;code&gt;Empty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.perl&lt;/code&gt; 可以在消耗过的 &lt;code&gt;Seq&lt;/code&gt;、多维数组、&lt;code&gt;Date&lt;/code&gt; 和 &lt;code&gt;CallFrame&lt;/code&gt; 上调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gist&lt;/code&gt; 可以在 &lt;code&gt;Attribute&lt;/code&gt; 上调用&lt;/li&gt;
&lt;li&gt;对自动生成的 &lt;code&gt;USAGE&lt;/code&gt; 信息进行了大量改进&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is hidden-from-USAGE&lt;/code&gt; 特性，从自动生成的 &lt;code&gt;USAGE&lt;/code&gt; 消息中隐藏 &lt;code&gt;sub MAIN&lt;/code&gt; 候选者&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Parameter.perl&lt;/code&gt; 包括可内省的默认值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%*ENV&lt;/code&gt; 值是同素异形的&lt;/li&gt;
&lt;li&gt;尝试使用变量 &lt;code&gt;$;&lt;/code&gt;、&lt;code&gt;$,&lt;/code&gt;、&lt;code&gt;$.&lt;/code&gt;、&lt;code&gt;$\&lt;/code&gt;、&lt;code&gt;$(&lt;/code&gt;、&lt;code&gt;$)&lt;/code&gt;、&lt;code&gt;$&amp;lt;&lt;/code&gt;、&lt;code&gt;$&amp;gt;&lt;/code&gt;、&lt;code&gt;$/&lt;/code&gt;、&lt;code&gt;$\&lt;/code&gt;、&lt;code&gt;$[&lt;/code&gt;、&lt;code&gt;$-&lt;/code&gt;、&lt;code&gt;$+&lt;/code&gt; 和 &lt;code&gt;$@&lt;/code&gt; 会抛出 &lt;code&gt;X::Syntax::Perl5Var&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认的 &lt;code&gt;Hash.keyof&lt;/code&gt; 返回一个 &lt;code&gt;Str(Any)&lt;/code&gt; 强转类型对象&lt;/li&gt;
&lt;li&gt;非 ASCII 数字可以在 &lt;code&gt;:42foo&lt;/code&gt; 冒号对快捷方式中使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StrDistance&lt;/code&gt; 字符串化为 &lt;code&gt;.after&lt;/code&gt; 字符串&lt;/li&gt;
&lt;li&gt;更明确的 Pod 表格格式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enumeration.enums&lt;/code&gt; 返回一个 &lt;code&gt;Map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;各种整数类型的 &lt;code&gt;.Range&lt;/code&gt; 返回它们支持的值的范围&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;/&lt;code&gt;max&lt;/code&gt;  例程也适用于 &lt;code&gt;Hash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Signature&lt;/code&gt; 字面值可以包含字符串/数字字面值以及调用者标记&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List.invert&lt;/code&gt; 通过所需的 &lt;code&gt;Pair&lt;/code&gt; 绑定映射, 导致潜在的类型检查失败&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:exists&lt;/code&gt; 可以与多维关联下标一起使用&lt;/li&gt;
&lt;li&gt;动态创建的列表可以用来定义一个枚举&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;.first&lt;/code&gt; 中, Junction 可以作为匹配器使用&lt;/li&gt;
&lt;li&gt;原生属性可以作为参数中的绑定目标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proc&lt;/code&gt; 可以与其他 &lt;code&gt;Proc&lt;/code&gt; 中的 &lt;code&gt;IO::Pipe&lt;/code&gt; 一起工作&lt;/li&gt;
&lt;li&gt;类型数组可以用 &lt;code&gt;my SomeType @array&lt;/code&gt; 和 &lt;code&gt;my @array of SomeType&lt;/code&gt; 创建&lt;/li&gt;
&lt;li&gt;当把 &lt;code&gt;Mixy&lt;/code&gt; 强转为 &lt;code&gt;Setty&lt;/code&gt;/&lt;code&gt;Baggy &lt;/code&gt; 时, 负数权重的项将被删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nth&lt;/code&gt; 副词在 &lt;code&gt;m//&lt;/code&gt; 上接受一个 &lt;code&gt;Junction&lt;/code&gt; 作为参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CX::Warn&#39; 和 &lt;/code&gt;CX::Done&lt;code&gt;可以在&lt;/code&gt;CONTROL` phaser 中捕获&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt; 可用于 &lt;code&gt;whenever&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;require&lt;/code&gt; 符号不再过境性地暴露出来&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;{...}&lt;/code&gt; 进行多维访问, 类似于 &lt;code&gt;[...]&lt;/code&gt; 的工作方式&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;END&lt;/code&gt; 时间打开的任何手柄都会自动关闭&lt;/li&gt;
&lt;li&gt;在缓存的 &lt;code&gt;Seq&lt;/code&gt; 上, 当 &lt;code&gt;&amp;amp;infix:&amp;lt;eqv&amp;gt;&lt;/code&gt;、&lt;code&gt;.Slip&lt;/code&gt;、&lt;code&gt;.join&lt;/code&gt;、&lt;code&gt;.List&lt;/code&gt;、&lt;code&gt;.list&lt;/code&gt;、&lt;code&gt;.eager&lt;/code&gt;、&lt;code&gt;.Array&lt;/code&gt; 和 &lt;code&gt;.is-lazy&lt;/code&gt; 被调用时, 就会使用缓存列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Handle.encoding&lt;/code&gt; 以 &lt;code&gt;Nil&lt;/code&gt; 表示切换到二进制模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is default&lt;/code&gt; 特质与属性一起工作&lt;/li&gt;
&lt;li&gt;在多重分派中, 带有 &lt;code&gt;is rw&lt;/code&gt; 特性的参数被认为比没有特性的参数窄&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Blob&lt;/code&gt; 和 &lt;code&gt;Map&lt;/code&gt; 的 &lt;code&gt;.gist&lt;/code&gt; 被裁剪成100个元素&lt;/li&gt;
&lt;li&gt;新的 &lt;code&gt;for&lt;/code&gt; 语句修饰符 &lt;code&gt;hyper for&lt;/code&gt;、&lt;code&gt;race for&lt;/code&gt; 和 &lt;code&gt;lazy for&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; 循环自动序列化 &lt;code&gt;RaceSeq&lt;/code&gt;/&lt;code&gt;HyperSeq&lt;/code&gt;；使用新的 &lt;code&gt;for&lt;/code&gt; 语句修饰符&lt;code&gt;hyper for&lt;/code&gt;/&lt;code&gt;race for&lt;/code&gt;避免&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt;does&amp;gt;&lt;/code&gt; 可用于 RHS 上的非组合实例&lt;/li&gt;
&lt;li&gt;数值比较器可以与 &lt;code&gt;DateTime &lt;/code&gt; 对象一起使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pod&lt;/code&gt; 保留空白类型&lt;/li&gt;
&lt;li&gt;定义了带 &lt;code&gt;@&lt;/code&gt;、&lt;code&gt;%&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 魔符常数的语义&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Rational&lt;/code&gt; 总是在创建时被化简, 并在其一生中保持不变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Inf&lt;/code&gt;、&lt;code&gt;Inf&lt;/code&gt; 和 &lt;code&gt;NaN&lt;/code&gt; 可以分别用 &lt;code&gt;&amp;lt;-1/0&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;1/0&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;0/0&lt;/code&gt;&amp;gt; 表示, 通过&lt;code&gt;Rational&lt;/code&gt; 类型进行舍去。零分母 &lt;code&gt;Rational&lt;/code&gt; 被标准化为这三个值之一&lt;/li&gt;
&lt;li&gt;在 ±&lt;code&gt;Inf&lt;/code&gt; 和 &lt;code&gt;NaN&lt;/code&gt; 上调用 &lt;code&gt;.Int&lt;/code&gt;, 会抛出异常&lt;/li&gt;
&lt;li&gt;改进了 &lt;code&gt;Num&lt;/code&gt; 运算符和数学函数的 IEEE 754-2008 合规性&lt;/li&gt;
&lt;li&gt;负零 &lt;code&gt;Num&lt;/code&gt;(&lt;code&gt;-0e0&lt;/code&gt;)被所有例程和语法结构正确处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Num&lt;/code&gt; 类型的字符串化必须是可舍弃到原始 &lt;code&gt;Num&lt;/code&gt; 的&lt;/li&gt;
&lt;li&gt;定义了涉及零的 &lt;code&gt;Complex &lt;/code&gt; 指数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.expmod&lt;/code&gt; 中的负数幂有效&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setsbagsmixesaka-quanthashes和集合运算符&#34;&gt;Sets、Bags、Mixes(aka QuantHashes)和集合运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Set 运算符可以用在任何对象上, 在需要的时候会被强转
&lt;ul&gt;
&lt;li&gt;所以, 不需要也不希望有任何预先的强转&lt;/li&gt;
&lt;li&gt;如果没有 QuantHash 就能实现所需的功能, 那么 Set 运算符可以自由地不创建任何 QuantHash&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对不同类型的 QuantHashes 的 Set 操作将强转到最自由的形式（Set -&amp;gt; Bag -&amp;gt; Mix）&lt;/li&gt;
&lt;li&gt;集合运算符的 set_precedes 家族( &lt;code&gt;(&amp;lt;+)&lt;/code&gt;、&lt;code&gt;≼&lt;/code&gt;、&lt;code&gt;(&amp;gt;+)&lt;/code&gt;、&lt;code&gt;≽&lt;/code&gt;) 已被移除
&lt;ul&gt;
&lt;li&gt;曾经是子集运算符的 Baggy 形式&lt;/li&gt;
&lt;li&gt;QuantHash 升级为最自由的形式, 所以 &lt;code&gt;(&amp;lt;=)&lt;/code&gt;、&lt;code&gt;⊆&lt;/code&gt;、&lt;code&gt;(&amp;gt;=)&lt;/code&gt;、&lt;code&gt;⊇&lt;/code&gt; 做正确的事情&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.classify-list&lt;/code&gt; 方法可用于 &lt;code&gt;Baggy&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.categorize-list&lt;/code&gt; 方法可用于 &lt;code&gt;Baggy&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.invert&lt;/code&gt; 方法可用于核心 &lt;code&gt;QuantHash&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.antipairs&lt;/code&gt; 方法可用于 &lt;code&gt;QuantHash&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QuantHash&lt;/code&gt; 类型有 &lt;code&gt;.new-from-pairs&lt;/code&gt; 和将一个 &lt;code&gt;QuantHash&lt;/code&gt; 类型转换为另一个 &lt;code&gt;QuantHash&lt;/code&gt; 类型的方法(例如 &lt;code&gt;Set&lt;/code&gt; 类型的 &lt;code&gt;.Bag&lt;/code&gt; 方法)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QuantHash&lt;/code&gt; 类型上的 &lt;code&gt;.hash&lt;/code&gt; 对键值进行了字符串化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新的形参和实参&#34;&gt;新的形参和实参&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Date.new&lt;/code&gt; 接受一个 &lt;code&gt;:&amp;amp;formatter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.first&lt;/code&gt; 可以接受 &lt;code&gt;:kv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unique&lt;/code&gt; 和 &lt;code&gt;.repeated&lt;/code&gt; 可以接受 &lt;code&gt;:&amp;amp;as&lt;/code&gt; 和 &lt;code&gt;:&amp;amp;with&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test.pm6 中的 &lt;code&gt;&amp;amp;plan&lt;/code&gt; 可以接受 &lt;code&gt;:skip-all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;run&lt;/code&gt;/&lt;code&gt;&amp;amp;shell&lt;/code&gt; 可以接受 &lt;code&gt;:merge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;note&lt;/code&gt; 可以在没有参数的情况下调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open&lt;/code&gt; 接受 &lt;code&gt;:$out-buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path.resolve&lt;/code&gt; 可以接受 &lt;code&gt;:completely&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path.parent&lt;/code&gt; 可以接受一个 &lt;code&gt;Int&lt;/code&gt; 表示父级&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proc::Async.new&lt;/code&gt; 吞噬位置参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Signature.ACCEPTS&lt;/code&gt; 接受非 &lt;code&gt;Signature&lt;/code&gt;/&lt;code&gt;Capture&lt;/code&gt; 参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;EVAL&lt;/code&gt; 可以接受一个 &lt;code&gt;Blob&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.keep&lt;/code&gt;/&lt;code&gt;.break&lt;/code&gt; 可以在没有参数的情况下调用&lt;/li&gt;
&lt;li&gt;原生数组上的 &lt;code&gt;.sum&lt;/code&gt; 可以接受 &lt;code&gt;:wrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is required&lt;/code&gt; 现在可以接受一个表示理由的参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Socket::Async.listen&lt;/code&gt; 可以绑定到端口 &lt;code&gt;0&lt;/code&gt; 以向操作系统申请免费端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.encode&lt;/code&gt; 可以接受 &lt;code&gt;:translate-nl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新的例程和运算符&#34;&gt;新的例程和运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新的 &lt;code&gt;atomicint&lt;/code&gt; Unicode 运算符和 ASCII 等价物, 保证线程安全, 原子操作:
&lt;code&gt;&amp;amp;infix:&amp;lt;⚛=&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-assign&lt;/code&gt;、&lt;code&gt;&amp;amp;prefix:&amp;lt;⚛&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-fetch&lt;/code&gt;、
&lt;code&gt;&amp;amp;prefix:&amp;lt;++⚛&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-inc-fetch&lt;/code&gt;、&lt;code&gt;&amp;amp;postfix:&amp;lt;⚛++&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-fetch-inc&lt;/code&gt;、
&lt;code&gt;&amp;amp;prefix:&amp;lt;--⚛&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-dec-fetch&lt;/code&gt;、&lt;code&gt;&amp;amp;postfix:&amp;lt;⚛--&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-fetch-dec&lt;/code&gt;、
&lt;code&gt;&amp;amp;infix:&amp;lt;⚛-=&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;infix:&amp;lt;⚛−=&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-fetch-sub&lt;/code&gt; 和 &lt;code&gt;&amp;amp;infix:&amp;lt;⚛+=&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-fetch-add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;cas&lt;/code&gt;: 原子比较与交换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;≤&lt;/code&gt;、&lt;code&gt;≥&lt;/code&gt; 和 &lt;code&gt;≠&lt;/code&gt; 运算符是 Unicode 运算符, 分别等价于 &lt;code&gt;&amp;lt;=&lt;/code&gt;、&lt;code&gt;&amp;gt;=&lt;/code&gt; 和 &lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt;unicmp&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;infix:&amp;lt;coll&amp;gt;&lt;/code&gt;: &lt;code&gt;&amp;amp;infix:&amp;lt;cmp&amp;gt;&lt;/code&gt; 的替代行为&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TR///&lt;/code&gt;: &lt;code&gt;tr///&lt;/code&gt; 的非变异版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;submethod TWEAK&lt;/code&gt;: 与 &lt;code&gt;BUILD&lt;/code&gt; 类似, 除了它与属性默认值兼容之外&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;duckmap&lt;/code&gt;: 应用 &lt;code&gt;&amp;amp;callable&lt;/code&gt; 到每个元素上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;deepmap&lt;/code&gt;: 应用 &lt;code&gt;&amp;amp;callable&lt;/code&gt; 到每个元素上, 下降到 &lt;code&gt;Iterable&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;take-rw&lt;/code&gt;: 像 &lt;code&gt;&amp;amp;take&lt;/code&gt; 一样, 但有一个可写的容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;indir&lt;/code&gt;: 在给定的 &lt;code&gt;$*CWD&lt;/code&gt; 中执行代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;spurt&lt;/code&gt;: 参见 &lt;code&gt;IO::Path.spurt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;prompt&lt;/code&gt;: 提示用户输入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniprops&lt;/code&gt;: &lt;code&gt;uniprop&lt;/code&gt; 的多字符版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;: 建立文件符号链接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link&lt;/code&gt;: 创建文件硬连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.hyper&lt;/code&gt;/&lt;code&gt;.race&lt;/code&gt;: 并行处理值的列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Seq.from-loop&lt;/code&gt;: 从 &lt;code&gt;Callable&lt;/code&gt; 生产一个 &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Str.uniparse&lt;/code&gt;: 将一个或多个 Unicode 字符名解析为实际字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Str.parse-base&lt;/code&gt;: &lt;code&gt;Int.base&lt;/code&gt; 操作的反转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path&lt;/code&gt; 提供了 &lt;code&gt;.ACCEPTS&lt;/code&gt;、&lt;code&gt;.SPEC&lt;/code&gt;、&lt;code&gt;.CWD&lt;/code&gt;、&lt;code&gt;.Numeric&lt;/code&gt;、&lt;code&gt;.add&lt;/code&gt;、&lt;code&gt;.extension&lt;/code&gt;、&lt;code&gt;.mode&lt;/code&gt; 和各种文件测试、&lt;code&gt;.parts&lt;/code&gt;、&lt;code&gt;.sibling&lt;/code&gt; 和 &lt;code&gt;.spurt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Handle&lt;/code&gt; 提供了 &lt;code&gt;.READ&lt;/code&gt;、&lt;code&gt;.WRITE&lt;/code&gt;、&lt;code&gt;.EOF&lt;/code&gt;、&lt;code&gt;.DESTROY&lt;/code&gt;,
&lt;code&gt;.readchars&lt;/code&gt;、&lt;code&gt;.flush&lt;/code&gt;、&lt;code&gt;.lock&lt;/code&gt;、&lt;code&gt;.unlock&lt;/code&gt;、&lt;code&gt;.out-buffer&lt;/code&gt;、&lt;code&gt;.tell&lt;/code&gt;,
&lt;code&gt;.say&lt;/code&gt;、&lt;code&gt;.slurp&lt;/code&gt;、&lt;code&gt;.seek&lt;/code&gt;、&lt;code&gt;.printf&lt;/code&gt;、&lt;code&gt;.print-nl&lt;/code&gt; 和 &lt;code&gt;.watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Pipe&lt;/code&gt; 提供了 &lt;code&gt;.proc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Iterator&lt;/code&gt; 提供了 &lt;code&gt;.skip-one&lt;/code&gt;、&lt;code&gt;.skip-at-least&lt;/code&gt; 和 &lt;code&gt;.skip-at-least-pull-one&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mu.emit&lt;/code&gt;: &lt;code&gt;&amp;amp;emit&lt;/code&gt; 的方法形式&lt;/li&gt;
&lt;li&gt;Test.pm6 模块中的 &lt;code&gt;&amp;amp;fails-like&lt;/code&gt;: 允许测试失败&lt;/li&gt;
&lt;li&gt;Test.pm6 模块中的 &lt;code&gt;&amp;amp;bail-out&lt;/code&gt;: 退出失败的测试套件&lt;/li&gt;
&lt;li&gt;Test.pm6 模块中的 &lt;code&gt;&amp;amp;is-approx&lt;/code&gt;: 测试一个数字近似于另一个&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Buf&lt;/code&gt; 拥有 &lt;code&gt;.allocate&lt;/code&gt;、&lt;code&gt;.reallocate&lt;/code&gt;、&lt;code&gt;.append&lt;/code&gt;、&lt;code&gt;.push&lt;/code&gt;、&lt;code&gt;.pop&lt;/code&gt;、&lt;code&gt;.splice&lt;/code&gt;、&lt;code&gt;.subbuf-rw&lt;/code&gt;、&lt;code&gt;.prepend&lt;/code&gt; 和 &lt;code&gt;.unshift&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Range&lt;/code&gt; 支持了 &lt;code&gt;.rand&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Backtrace&lt;/code&gt; 拥有方法 &lt;code&gt;.map&lt;/code&gt;、&lt;code&gt;.flat&lt;/code&gt;、&lt;code&gt;.concise&lt;/code&gt; 和 &lt;code&gt;.summary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.classify-list&lt;/code&gt; 方法可用于 &lt;code&gt;Hash&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.categorize-list&lt;/code&gt; 方法可用于 &lt;code&gt;Hash&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Code.of&lt;/code&gt;: 返回返回类型约束&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Code.line&lt;/code&gt;/&lt;code&gt;.file&lt;/code&gt;: 返回定义的行/文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proc::Async&lt;/code&gt; 提供了 &lt;code&gt;.Supply&lt;/code&gt;、&lt;code&gt;.ready&lt;/code&gt;、&lt;code&gt;.pid&lt;/code&gt;、&lt;code&gt;.bind-stdin&lt;/code&gt;、&lt;code&gt;.bind-stdout&lt;/code&gt; 和 &lt;code&gt;.bind-stderr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proc.command&lt;/code&gt;/&lt;code&gt;Proc::Async.command&lt;/code&gt;: 我们要执行的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proc&lt;/code&gt; 提供了 &lt;code&gt;.signal&lt;/code&gt;、&lt;code&gt;.pid&lt;/code&gt; 和 &lt;del&gt;&lt;code&gt;.encoding&lt;/code&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Complex&lt;/code&gt; 提供了 &lt;code&gt;.cis&lt;/code&gt;、&lt;code&gt;.reals&lt;/code&gt;、&lt;code&gt;.ceiling&lt;/code&gt;、&lt;code&gt;.floor&lt;/code&gt;、&lt;code&gt;.round&lt;/code&gt;、&lt;code&gt;.truncate&lt;/code&gt; 和 &lt;code&gt;.abs&lt;/code&gt; 方法, 并可以使用 &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 进行比较(只要虚部可以忽略不计)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateTime&lt;/code&gt; 提供了 &lt;code&gt;.offset-in-hours&lt;/code&gt;、&lt;code&gt;.hh-mm-ss&lt;/code&gt; 和 &lt;code&gt;.Date&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateTime&lt;/code&gt; 可以使用 &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 运算符和其它 &lt;code&gt;DateTime&lt;/code&gt; 对象进行比较&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt; 提供了 &lt;code&gt;.DateTime&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt;+&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;infix:&amp;lt;-&amp;gt;&lt;/code&gt; 可以被 &lt;code&gt;Duration&lt;/code&gt;、&lt;code&gt;DateTime&lt;/code&gt; 和 &lt;code&gt;Real&lt;/code&gt; 类型调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enumeration&lt;/code&gt; 提供了 &lt;code&gt;.Int&lt;/code&gt;、&lt;code&gt;.pred&lt;/code&gt;、&lt;code&gt;.succ&lt;/code&gt;、&lt;code&gt;.kv&lt;/code&gt; 和 &lt;code&gt;.pair&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.Date&lt;/code&gt; 可以在 &lt;code&gt;Instant&lt;/code&gt; 上调用&lt;/li&gt;
&lt;li&gt;Junction 能使用 &lt;code&gt;Junction.new&lt;/code&gt; 调用来创建&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt; 类型拥有 &lt;code&gt;.to&lt;/code&gt; 和 &lt;code&gt;.from&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt; type 提供了 &lt;code&gt;Int&lt;/code&gt; 方法, 返回 pair 的数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Any.skip&lt;/code&gt;: 跳过列表中的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Any.batch&lt;/code&gt;: &lt;code&gt;.rotor&lt;/code&gt; 的更基本的表兄弟&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mu.iterator&lt;/code&gt;: 为一个列表中的值生成一个 &lt;code&gt;Iterator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Spec::*&lt;/code&gt; 类型提供了 &lt;code&gt;.tmpdir&lt;/code&gt;、&lt;code&gt;.extension&lt;/code&gt; 和 &lt;code&gt;.path&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pair&lt;/code&gt; 提供了 &lt;code&gt;.ACCEPTS&lt;/code&gt;、&lt;code&gt;.Pair&lt;/code&gt; 和 &lt;code&gt;.invert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.Capture&lt;/code&gt; 方法对所有核心类型都有明确定义&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;.ACCEPTS&lt;/code&gt; 在同素异形体上的语义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Failure.self&lt;/code&gt; 使未处理的 &lt;code&gt;Failure&lt;/code&gt; 爆发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Thread.is-initial-thread&lt;/code&gt;: 我们是在初始线程中运行吗&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Match&lt;/code&gt; 提供了 &lt;code&gt;.Int&lt;/code&gt; 和 &lt;code&gt;.actions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Socket::Async&lt;/code&gt; 提供了 &lt;code&gt;.socket-port&lt;/code&gt; 和 &lt;code&gt;.peer-port&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise&lt;/code&gt; 提供了另一种构造函器 &lt;code&gt;.kept&lt;/code&gt; 和 &lt;code&gt;.broken&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WhateverCode&lt;/code&gt; 提供了 &lt;code&gt;.assuming&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WhateverCode&lt;/code&gt; 和 &lt;code&gt;Block&lt;/code&gt; 提供了 &lt;code&gt;.cando&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.:&amp;lt;…&amp;gt;&lt;/code&gt; 语法用于调用前缀运算符作为后缀&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$*KERNEL&lt;/code&gt; 提供了 &lt;code&gt;.hostname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nil&lt;/code&gt; 拥有定义的 &lt;code&gt;.FALLBACK&lt;/code&gt; 特殊方法来返回 &lt;code&gt;Nil&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新类型&#34;&gt;新类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atomicint&lt;/code&gt;: 原生的 &lt;code&gt;int&lt;/code&gt;, 大小可用于新的原子运算符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lock::Async&lt;/code&gt;: 互斥的非阻塞机制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Encoding::Registry&lt;/code&gt;: 管理可用的编码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Encoding::Encoder&lt;/code&gt;: 编码器, 用于特定的编码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Encoding::Decoder&lt;/code&gt;: 解码器, 用于特定的编码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::CatHandle&lt;/code&gt;: 将多个只读的 &lt;code&gt;IO::Handle&lt;/code&gt; 视同一个&lt;/li&gt;
&lt;li&gt;原生的 &lt;code&gt;str&lt;/code&gt; 数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Supplier::Preserving&lt;/code&gt;: 缓存的实时 &lt;code&gt;Supply&lt;/code&gt; 工厂&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Semaphore&lt;/code&gt;: 控制多线程对共享资源的访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Special&lt;/code&gt;: 特殊I/O设备的路径 (例如 &lt;code&gt;STDOUT&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Exceptions::JSON&lt;/code&gt; 自定义异常处理程序的实现(可与&lt;code&gt;PERL6_EXCEPTIONS_HANDLER&lt;/code&gt; 环境变量一起使用)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SeekType&lt;/code&gt; 枚举: &lt;code&gt;IO::Handle.seek&lt;/code&gt; 中使用的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新的变量&#34;&gt;新的变量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$*USAGE&lt;/code&gt;: 可在 &lt;code&gt;MAIN&lt;/code&gt; 子例程中使用, 包含自动生成的 &lt;code&gt;USAGE&lt;/code&gt; 信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;%*SUB-MAIN-OPTS: 设置 &lt;code&gt;sub MAIN&lt;/code&gt; 的行为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%*SUB-MAIN-OPTS&amp;lt;named-anywhere&amp;gt;&lt;/code&gt; 允许将命名参数放在命令行的任何位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$*COLLATION&lt;/code&gt;: 配置四个 Unicode 校对级别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$*INIT-INSTANT&lt;/code&gt;: 代表程序启动时间的 &lt;code&gt;Instant&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$*HOME&lt;/code&gt;: 用户的主目录, 如果存在的话&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;*chdir&lt;/code&gt;: &lt;code&gt;Callable&lt;/code&gt; 包含 &lt;code&gt;IO::Path.chdir&lt;/code&gt; 的变体, 也设置进程的当前目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PERL6_TEST_DIE_ON_FAIL&lt;/code&gt; 环境变量: 在第一次失败时停止测试套件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PERL6_EXCEPTIONS_HANDLER&lt;/code&gt; 环境变量: 指定自定义异常处理类&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对边缘情况强转行为的澄清&#34;&gt;对边缘情况/强转行为的澄清&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UInt&lt;/code&gt; 与 &lt;code&gt;Int&lt;/code&gt; 类型对象智能匹配为 &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sink&lt;/code&gt; 语句前缀爆炸 &lt;code&gt;Failure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义了1项和0项列表以及负参数和非整数参数的 &lt;code&gt;permutations&lt;/code&gt;/&lt;code&gt;combinations&lt;/code&gt; 的行为&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;val&lt;/code&gt;、&lt;code&gt;Str.Numeric&lt;/code&gt; 和其他 &lt;code&gt;Str&lt;/code&gt; 数字转换方法在试图转换 Unicode &lt;code&gt;No&lt;/code&gt; 字符组或合成数字时会 &lt;code&gt;fail&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:42foo&lt;/code&gt; 冒号对快捷方式中不能使用合成数字&lt;/li&gt;
&lt;li&gt;现在、&lt;code&gt;Enumeration&lt;/code&gt; 可以作为一个数组形状指定器使用&lt;/li&gt;
&lt;li&gt;含有空格的 &lt;code&gt;Str&lt;/code&gt; 的数值转换现在返回 &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;带空的模式参数的 &lt;code&gt;samark&lt;/code&gt;, 简单地返回调用者&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.polymod&lt;/code&gt; 可用于 &lt;code&gt;lazy&lt;/code&gt; 但有限的除数列表&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;.[*-0]&lt;/code&gt; 索引&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.rotor&lt;/code&gt; 中大于子列表的负数空隙抛出异常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.rotor&lt;/code&gt; 的非 &lt;code&gt;Int&lt;/code&gt; 参数被强转为 &lt;code&gt;Int&lt;/code&gt; 参数&lt;/li&gt;
&lt;li&gt;读取 &lt;code&gt;/proc&lt;/code&gt; 文件时定义了 &lt;code&gt;.lines&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义了字符串上后缀/前缀  &lt;code&gt;++&lt;/code&gt;/&lt;code&gt;--&lt;/code&gt; 中泰语数字的行为&lt;/li&gt;
&lt;li&gt;sunk &lt;code&gt;for&lt;/code&gt; 里面的 &lt;code&gt;map&lt;/code&gt; 被视为 sunk&lt;/li&gt;
&lt;li&gt;Sunk &lt;code&gt;for&lt;/code&gt; 循环将上一条语句的方法调用值下沉&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bool&lt;/code&gt; 对象上的 &lt;code&gt;.Int&lt;/code&gt; 返回一个 &lt;code&gt;Int&lt;/code&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splice&lt;/code&gt; 可用于扩展数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;classify&lt;/code&gt; 可以与 &lt;code&gt;Junction&lt;/code&gt; 配合使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pairup&lt;/code&gt; on a type object returns an empty &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pairup&lt;/code&gt; 总是返回一个 &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;拒绝接受  &lt;code&gt;Date&lt;/code&gt;/&lt;code&gt;DateTime&lt;/code&gt; 构造函数中的合成代码点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⸨&lt;/code&gt;/&lt;code&gt;⸩&lt;/code&gt; 对儿现在可以作为引号结构中的匹配字符使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array&lt;/code&gt; 类型对象上的 &lt;code&gt;.flat&lt;/code&gt; 简单地返回该类型对象&lt;/li&gt;
&lt;li&gt;混合级 &lt;code&gt;classify&lt;/code&gt; 在 &lt;code&gt;Hash&lt;/code&gt; 上抛出异常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Junction&lt;/code&gt; 可以用于给 &lt;code&gt;Hash&lt;/code&gt; 指定多个键&lt;/li&gt;
&lt;li&gt;给 &lt;code&gt;.classify-list&lt;/code&gt; 的 &lt;code&gt;Callable&lt;/code&gt; 现在保证每项只执行一次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:delete&lt;/code&gt; 对 &lt;code&gt;Hash&lt;/code&gt; 类型对象进行关联查找时返回 &lt;code&gt;Nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test.pm6 中的 &lt;code&gt;&amp;amp;is-deeply&lt;/code&gt; 会自动 &lt;code&gt;.cache&lt;/code&gt; 作为参数的 &lt;code&gt;Seq&lt;/code&gt;, 并使用返回的 &lt;code&gt;List&lt;/code&gt; 进行测试&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Complex.new()&lt;/code&gt; 给出 &lt;code&gt;&amp;lt;0+0i&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Int.new&lt;/code&gt; 现在可以保证构建一个新的 &lt;code&gt;Int&lt;/code&gt; (而不是, 比如说, 从常量缓存中重用一个)&lt;/li&gt;
&lt;li&gt;定义了一个参数(1-arg)版本的 &lt;code&gt;&amp;amp;infix:&amp;lt;=:=&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;infix:&amp;lt;eqv&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果直接或间接地调用 &lt;code&gt;.BIND-POS&lt;/code&gt;、&lt;code&gt;.BIND-KEY&lt;/code&gt;、&lt;code&gt;.ASSIGN-POS&lt;/code&gt;、&lt;code&gt;.ASSIGN-KEY&lt;/code&gt;、&lt;code&gt;.STORE&lt;/code&gt;、&lt;code&gt;.push&lt;/code&gt;、&lt;code&gt;.append&lt;/code&gt;、&lt;code&gt;.unshift&lt;/code&gt;、&lt;code&gt;.prepend&lt;/code&gt;、&lt;code&gt;Nil&lt;/code&gt; 类型现在抛出异常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nil.ord&lt;/code&gt; 返回一个空的 &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nil.chrs&lt;/code&gt; 返回一个 &lt;code&gt;&amp;quot;\0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Num.new&lt;/code&gt; 强转参数为 &lt;code&gt;Num&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;infix:&amp;lt;Z&amp;gt;()&lt;/code&gt; 返回一个空的 &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.comb&lt;/code&gt; 总是返回一个 &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;&amp;amp;infix:&amp;lt;+&amp;gt;&lt;/code&gt; 化简一个项, 简单地返回该项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()[0]&lt;/code&gt; 返回 &lt;code&gt;Nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;允许在(可能是无限的) &lt;code&gt;Seq&lt;/code&gt; 上使用 Regex 智能匹配&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;Range&lt;/code&gt; 对象的智能匹配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Set&lt;/code&gt; 转换为&lt;code&gt;Mix&lt;/code&gt;/&lt;code&gt;Bag&lt;/code&gt; 不再有 &lt;code&gt;Bool&lt;/code&gt; 权重&lt;/li&gt;
&lt;li&gt;当一个或多个操作数为 &lt;code&gt;0&lt;/code&gt; 时、&lt;code&gt;gcd&lt;/code&gt; 是有定义的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defined&lt;/code&gt; 例程中的 &lt;code&gt;Junction&lt;/code&gt; 自动线程化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum&lt;/code&gt; 可以处理含有 &lt;code&gt;Junction&lt;/code&gt; 的列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Grammar.parse&lt;/code&gt; 让顶级 &lt;code&gt;regex&lt;/code&gt; 回溯&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U+2212 MINUS SIGN [Sm] (-)&lt;/code&gt; 现在得到更多结构的支持, 如 &lt;code&gt;Str.Numeric&lt;/code&gt; 和 &lt;code&gt;&amp;amp;val&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Arity-1 &lt;code&gt;&amp;amp;infix:&amp;lt;~&amp;gt;&lt;/code&gt; 与 &lt;code&gt;Blob&lt;/code&gt; 可以一起工作&lt;/li&gt;
&lt;li&gt;在签名中, 所有的 &lt;code&gt;Numeric&lt;/code&gt; 字面值都支持作为值字面值&lt;/li&gt;
&lt;li&gt;正则表达式中的 &lt;code&gt;\b&lt;/code&gt; 和 &lt;code&gt;\B&lt;/code&gt; 抛出 &lt;code&gt;X::Obsolete&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt; 和 &lt;code&gt;False&lt;/code&gt; 作为签名中的值字面量发出警告&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sort&lt;/code&gt; 和 &lt;code&gt;IO::Spec::Unix.path&lt;/code&gt; 的返回值总是 &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Range&lt;/code&gt; 对象上的 Out-of-range &lt;code&gt;.AT-POS&lt;/code&gt; 返回 &lt;code&gt;Nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于不存在的键、&lt;code&gt;Pair.AT-KEY&lt;/code&gt; 返回 &lt;code&gt;Nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有的 &lt;code&gt;Cool&lt;/code&gt; 类型都提供了 &lt;code&gt;.Rat&lt;/code&gt;/&lt;code&gt;.FatRat&lt;/code&gt; 强转器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path&lt;/code&gt; 文件测试不缓存先前测试执行的结果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Seq&lt;/code&gt; eqv &lt;code&gt;List&lt;/code&gt; 仅根据类型不匹配就定为 &lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 在 &lt;code&gt;Hash &lt;/code&gt;、&lt;code&gt;Hash &lt;/code&gt; 和 &lt;code&gt;QuantHash&lt;/code&gt; 上, 来自 &lt;code&gt;.kv&lt;/code&gt;、&lt;code&gt;.values&lt;/code&gt; 和 &lt;code&gt;.pair&lt;/code&gt; 序列的值是可写的&lt;/del&gt; 参见 &lt;a href=&#34;https://github.com/Raku/roast/issues/614&#34;&gt;Raku/roast#614&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/Raku/doc/issues/3519&#34;&gt;#3519&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt;∘&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;infix:&amp;lt;o&amp;gt;&lt;/code&gt; 保留 LHF 的 &lt;code&gt;.of&lt;/code&gt; 和 RHS 的 &lt;code&gt;.arity&lt;/code&gt; 和 &lt;code&gt;.count&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;完善了 regex 运算符副词中的可接受参数(例如:&lt;code&gt;:in(…)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;完善了 &lt;code&gt;IO::Handle.open&lt;/code&gt; 中可接受的参数组合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path.Str&lt;/code&gt; 不包含 &lt;code&gt;.CWD&lt;/code&gt; 属性的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path&lt;/code&gt; 类型拒绝带有  &lt;code&gt;nul&lt;/code&gt; 字节 (&lt;code&gt;&amp;quot;\0&amp;quot;&lt;/code&gt;) 的路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Pipe&lt;/code&gt; 的 &lt;code&gt;.path&lt;/code&gt;/&lt;code&gt;.IO&lt;/code&gt; 返回一个 &lt;code&gt;IO::Path&lt;/code&gt; 类型对象&lt;/li&gt;
&lt;li&gt;如果目的路径和源路径是一样的 &lt;code&gt;IO::Path&lt;/code&gt; 的 &lt;code&gt;.copy&lt;/code&gt;/&lt;code&gt;.move&lt;/code&gt; 会 &lt;code&gt;fail&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt; 创建的 &lt;code&gt;IO::Path&lt;/code&gt; 绝对性由调用者控制&lt;/li&gt;
&lt;li&gt;更多定义的边缘行为、&lt;code&gt;Callable &lt;/code&gt; 处理、&lt;code&gt;. defined&lt;/code&gt; 调用, 以及 &lt;code&gt;&amp;amp;infix:&amp;lt;andthen&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;amp;infix:&amp;lt;orelse&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;infix:&amp;lt;notandthen&amp;gt;&lt;/code&gt; 操作符的链接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Seq&lt;/code&gt; 的禅切不缓存它们&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List.Capture&lt;/code&gt; 将任何包含的 &lt;code&gt;Pair&lt;/code&gt; 对象的键字符串化&lt;/li&gt;
&lt;li&gt;带处理的 &lt;code&gt;Failure&lt;/code&gt; 参数的 &lt;code&gt;&amp;amp;fail&lt;/code&gt; 把它标记为是未处理的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use lib&lt;/code&gt; 接受 &lt;code&gt;IO::Path&lt;/code&gt; 对象&lt;/li&gt;
&lt;li&gt;锚点 &lt;code&gt;^&lt;/code&gt;、&lt;code&gt;^^&lt;/code&gt;、&lt;code&gt;$&lt;/code&gt; 和 &lt;code&gt;$$&lt;/code&gt; 在环视中有效&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Grammar.made&lt;/code&gt; 支持类型对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.isa&lt;/code&gt; 支持 &lt;code&gt;subset &lt;/code&gt; 类型对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:delete&lt;/code&gt; 可用于惰性数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt;eqv&amp;gt;&lt;/code&gt; 可以在某些情况下对惰性参数起作用&lt;/li&gt;
&lt;li&gt;动态查询(&lt;code&gt;::(...)&lt;/code&gt;) 是限制性的 regex 语法, 并且需要 &lt;code&gt;use MONKEY-SEE-NO-EVAL&lt;/code&gt; 的许可&lt;/li&gt;
&lt;li&gt;定义了带孔数组的 &lt;code&gt;.Slip&lt;/code&gt; 和 &lt;code&gt;.List&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.in&lt;/code&gt;/&lt;code&gt;.at&lt;/code&gt; 和 &lt;code&gt;Supply.interval&lt;/code&gt; 可以用零值和负值工作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Supply.interval&lt;/code&gt; 最小值为 &lt;code&gt;0.001&lt;/code&gt;；较低值被处理为 &lt;code&gt;0.001&lt;/code&gt;, 并发出警告#, 参见 &lt;a href=&#34;https://github.com/Raku/doc/pull/2649&#34;&gt;https://docs.perl6.org/type/Supply#method_interval PR [#2649]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Supply&lt;/code&gt; 提供了 &lt;code&gt;.Seq&lt;/code&gt;、&lt;code&gt;.list&lt;/code&gt; 和 &lt;code&gt;.zip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以在构建方法中绑定到原生类型属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WhateverCode&lt;/code&gt; 传播 &lt;code&gt;use fatal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;say&lt;/code&gt;、&lt;code&gt;note&lt;/code&gt;、&lt;code&gt;put&lt;/code&gt;、&lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;printf&lt;/code&gt; 例程自动线程化 &lt;code&gt;Junction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Handle.eof&lt;/code&gt; 值在 &lt;code&gt;.seek&lt;/code&gt; 过终点后再返回时也会相应改变&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;.succ&#39;、&lt;/code&gt;.pred&lt;code&gt;和&lt;/code&gt;.Bool` 的同质异形体&lt;/li&gt;
&lt;li&gt;在核心 &lt;code&gt;Numeric&lt;/code&gt; 上定义了 &lt;code&gt;.Bridge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 在核心 &lt;code&gt;Numeric&lt;/code&gt; 的类型对象上定义了 &lt;code&gt;.Numeric&lt;/code&gt;/&lt;code&gt;.Real&lt;/code&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;定义了关于零分母有理数的 &lt;code&gt;Rational.Bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;say&lt;/code&gt;/&lt;code&gt;note&lt;/code&gt; 保证在 &lt;code&gt;Str&lt;/code&gt; 的子类上调用 &lt;code&gt;.gist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;Junction.Str&lt;/code&gt; 返回 &lt;code&gt;Junction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;Junction.gist&lt;/code&gt;/&lt;code&gt;.perl&lt;/code&gt; 返回一个 &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt;/&lt;code&gt;Hash&lt;/code&gt; 的 &lt;code&gt;.list&lt;/code&gt;/&lt;code&gt;.cache&lt;/code&gt; 返回一个 &lt;code&gt;List&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;.round&lt;/code&gt; 的返回类型&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;Enumeration:D&lt;/code&gt;  不  &lt;code&gt;.ACCEPT&lt;/code&gt; 一个 &lt;code&gt;Enumeration:U&lt;/code&gt; , 参见 &lt;a href=&#34;https://github.com/rakudo/rakudo/issues/2073&#34;&gt;rakudo/rakudo#2073&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;杂项&#34;&gt;杂项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IO::ArgFiles&lt;/code&gt; 类型只是 &lt;code&gt;IO::CatHandle&lt;/code&gt; 的一个空的子类&lt;/li&gt;
&lt;li&gt;对常量的约束
&lt;ul&gt;
&lt;li&gt;约束是完全强制的&lt;/li&gt;
&lt;li&gt;试图在常量上使用参数化类型约束(例如使用 &lt;code&gt;my Foo constant @int&lt;/code&gt;) 会引发 &lt;code&gt;X::ParametricConstant&lt;/code&gt; 异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pod&lt;/code&gt; &lt;code&gt;=defn&lt;/code&gt;(定义列表)指令可用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pod&lt;/code&gt; 提供了 &lt;code&gt;:numbered&lt;/code&gt; 配置键&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.^ver&lt;/code&gt;、&lt;code&gt;.^auth&lt;/code&gt; 和 &lt;code&gt;.^name&lt;/code&gt; 元方法在 &lt;code&gt;module&lt;/code&gt; 中可用, 而在 &lt;code&gt;package&lt;/code&gt; 中则没有, 这是设计上的原因&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qww&amp;lt;…&amp;gt;&lt;/code&gt; 中支持花哨的引号(&lt;code&gt;’…’&lt;/code&gt;、&lt;code&gt;“…”&lt;/code&gt;、&lt;code&gt;｢…｣&lt;/code&gt; 和变体)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt; &amp;gt;&lt;/code&gt; 支持查找自动生成的 &lt;code&gt;Callables&lt;/code&gt; (例如: &lt;code&gt;&amp;amp;infix:&amp;lt;XX&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;使用命名的 &lt;code&gt;anon&lt;/code&gt; 子例程不再产生重声明警告&lt;/li&gt;
&lt;li&gt;&lt;code&gt;::?MODULE&lt;/code&gt;/&lt;code&gt;$?MODULE&lt;/code&gt; 变量的扩展规范&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub MAIN&lt;/code&gt; 可以接受一个参数上的 &lt;code&gt;Enumeration&lt;/code&gt; 类型约束和 &lt;code&gt;where&lt;/code&gt; 子句&lt;/li&gt;
&lt;li&gt;笑脸型约束可以用在子集上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt; 块和 thunks 得到新的 &lt;code&gt;$/&lt;/code&gt; 和 &lt;code&gt;$!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义了与列表关联运算符一起使用的 &lt;code&gt;R&lt;/code&gt; 元运算符&lt;/li&gt;
&lt;li&gt;类型强转可以用在签名返回类型约束中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt;x&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;infix:&amp;lt;x&amp;gt;&lt;/code&gt; 抛出了 &lt;code&gt;-Inf&lt;/code&gt;/&lt;code&gt;NaN&lt;/code&gt; 重复参数&lt;/li&gt;
&lt;li&gt;字面结构 &lt;code&gt;put&lt;/code&gt; 和 &lt;code&gt;put for&lt;/code&gt; 抛出, 需要使用括号&lt;/li&gt;
&lt;li&gt;扩大了 Unicode 例程和功能的规范覆盖面-将覆盖面升级到 Unicode 第11版&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$.&lt;/code&gt; 方法调用语法能用在元方法中了&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/6.d">6.d</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-07-21-checklist-for-6-dot-d/</guid>
                <pubDate>Tue, 21 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
    </channel>
</rss>


