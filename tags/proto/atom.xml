<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[proto on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/proto/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/proto/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/proto/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/proto/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-15T22:25:29+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/proto/</id>
    
        
        <entry>
            <title type="html"><![CDATA[正确地使用 proto]]></title>
            <link href="https://ohmyweekly.github.io/notes/2016-02-11-multi-thoughts/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2015-10-06-proto-in-raku/?utm_source=atom_feed" rel="related" type="text/html" title="Raku 中的 proto" />
            
                <id>https://ohmyweekly.github.io/notes/2016-02-11-multi-thoughts/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-12T00:00:00+08:00</published>
            <updated>2021-07-12T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Apropos proto: Perl6.c multi thoughts</blockquote><p>Multi 程序相当整洁, 但对于我来说似乎并不完整。一些背景 — 人们可以这样计算阶乘:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">multi</span> <span class="nf">fac</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>
<span class="k">multi</span> <span class="nf">fac</span><span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span> <span class="k">where</span> <span class="mi">1</span><span class="o">..</span><span class="no">Inf</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$n</span> <span class="o">*</span> <span class="nf">fac</span><span class="p">(</span> <span class="nv">$n-1</span> <span class="p">)</span> <span class="p">}</span>
<span class="nb">say</span> <span class="nf">fac</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="c1"># 24</span>
</code></pre></div><p>现在假设我们要把我们的递归 multi-sub 作为一个回调传递会怎样呢？</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">given</span> <span class="nv">&amp;fac</span> <span class="k">-&gt;</span> <span class="nv">$some_fun</span> <span class="p">{</span> <span class="nb">say</span> <span class="p">&#34;</span><span class="nf">some_fun</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="s2">=</span><span class="p">&#34;</span><span class="o">,</span> <span class="nv">$some_fun</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div><p>现在&hellip; 定义一个匿名的 multi-sub 怎么样？</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$anon_fac</span> <span class="o">=</span> <span class="nb">do</span> <span class="p">{</span>
    <span class="k">multi</span> <span class="nf">hidden_fac</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>
    <span class="k">multi</span> <span class="nf">hidden_fac</span><span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span> <span class="k">where</span> <span class="mi">1</span><span class="o">..</span><span class="no">Inf</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$n</span> <span class="o">*</span> <span class="nf">fac</span><span class="p">(</span> <span class="nv">$n</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">}</span>
    <span class="nv">&amp;hidden_fac</span> <span class="p">};</span>

<span class="nb">say</span> <span class="nv">$anon_fac</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="c1"># 24</span>
</code></pre></div><p>这也会有作用, 但是有点 hack 的味道, 并且我们的 multi-sub 并不是真正的匿名。它仅仅是被隐藏了。真正匿名的对象不会在任何作用域中安装, 而在这个例子中, &ldquo;hidden_fac&rdquo; 被安装在 &ldquo;do&rdquo; block 中的本地作用域中。</p>
<p>Raku说明书没有排除匿名的 multi 程序, 而且事实上</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$anon_fac</span> <span class="o">=</span> <span class="k">anon</span> <span class="k">multi</span> <span class="k">sub</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>
</code></pre></div><p>会报一个错误:</p>
<blockquote>
<p>Cannot use &lsquo;anon&rsquo; with individual multi candidates. Please declare an anon-scoped proto instead</p>
</blockquote>
<p>不能对单独的 multi 候选者使用 <code>anon</code>。请声明一个 anon-scoped 的 <strong>proto</strong> 代替。</p>
<p>让我们回到原先那个以 &ldquo;multi fac(0) { 1 }&rdquo; 开始的例子。当编译器看到它, 就会在同一个作用域中为我们创建一个&quot;proto fac&quot; 作为 <em>multi</em> 定义。<em>proto</em> 的作用就像一个分发器(dispatcher) — 从概念上讲, 当我们调用 fac(4) 的时候, 我们让 <em>proto fac</em> 为我们从 <em>multi facs</em> 中挑选一个出来以调用。</p>
<p>我们可以提前显式地定义一个 <em>proto</em>, 而且我们甚至能通过指定它的所有程序都需要 <strong>Int</strong> 类型的参数来对默认的 &ldquo;proto&rdquo; 加以改良。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">proto</span> <span class="nf">fac_with_proto</span><span class="p">(</span><span class="nb">Int</span><span class="p">)</span> <span class="p">{</span> <span class="o">*</span> <span class="p">}</span>
<span class="k">multi</span> <span class="nf">fac_with_proto</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>   <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>
<span class="k">multi</span> <span class="nf">fac_with_proto</span><span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span> <span class="k">where</span> <span class="mi">1</span><span class="o">..</span><span class="no">Inf</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$n</span> <span class="o">*</span> <span class="nf">fac</span><span class="p">(</span> <span class="nv">$n</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">}</span>
<span class="nb">say</span> <span class="nf">fac_with_proto</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="c1"># 24</span>
</code></pre></div><p>因此, <em>anon muiti sub</em> 抛出的错误 — <em>Please declare an anon-scoped proto instead</em> — 正是告诉我们 &ldquo;没有要安装到的作用域, 我不能为你获取一个 proto。 使用你自己的 <em>anon proto</em>, 并把这个程序附加给它&rdquo;。</p>
<p>好的, 花蝴蝶, 感谢你的提醒! 我试试&hellip;</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$fac_proto</span> <span class="o">=</span> <span class="k">anon</span> <span class="k">proto</span> <span class="nf">uninstalled-fac</span><span class="p">(</span><span class="nb">Int</span><span class="p">)</span> <span class="p">{</span> <span class="o">*</span> <span class="p">};</span>
<span class="nb">say</span> <span class="nv">$fac_proto</span><span class="o">.</span><span class="nb">name</span><span class="p">;</span> <span class="c1"># uninstalled-fac</span>
</code></pre></div><p>好极了! 现在所有我们要做的就是给那个 <em>proto</em> 添加 <em>multi</em>s。</p>
<p><strong>$fac_proto</strong> 是一个 <strong>Sub</strong> 对象, 它有方法来告诉你候选者, 但是没有办法设置(<strong>set</strong>) 候选者。并且我找不到任何方式在创建时传递一个候选者列表。</p>
<h2 id="适当的修补">适当的修补</h2>
<hr>
<p>什么会让 <em>proto/multi</em> 干净并且正交是一种方式去</p>
<ul>
<li>在编译时指定候选者</li>
<li>在运行时添加候选者</li>
</ul>
<p>这有点像</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$future_fac</span> <span class="o">=</span> <span class="nf">Proto</span><span class="p">(</span> <span class="p">:</span><span class="s">dispatch</span><span class="p">(</span> <span class="k">sub</span> <span class="p">(</span><span class="nb">Int</span><span class="p">)</span> <span class="p">{</span><span class="o">*</span><span class="p">}</span> <span class="p">)</span><span class="o">,</span>
                        <span class="p">:</span><span class="s">candidates</span><span class="p">(</span> <span class="o">[</span><span class="k">sub</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="mi">1</span><span class="p">}</span><span class="o">]</span> <span class="p">)</span><span class="o">,</span>
                        <span class="p">:</span><span class="s">mutable</span> <span class="p">);</span>

<span class="nv">$future_fac</span><span class="o">.</span><span class="nb">candidates</span><span class="o">.</span><span class="nb">push</span><span class="p">(</span>
    <span class="k">sub</span> <span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span> <span class="k">where</span> <span class="mi">1</span><span class="o">..</span><span class="no">Inf</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$n</span> <span class="o">*</span> <span class="nf">fac</span><span class="p">(</span> <span class="nv">$n-1</span> <span class="p">)</span> <span class="p">}</span>
<span class="p">);</span>

<span class="nv">$future_fac</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="c1"># 24</span>
</code></pre></div><p>我假定了一个 <strong>Sub</strong> 的子类 <strong>Proto</strong> 以揭露 multi 程序的内部工作原理。这个构造函数会允许定义任何 <em>proto</em> 声明符所做的: 签名 <code>&amp;</code> 默认程序和名字。 还有, 它会允许在初始的候选者列表中传递一个属性。</p>
<p>最后, 那个对象自身会让候选者方法返回一个数组, 而不是一个不可变列表, 如果 <em>Proto</em> 是使用 <em>mutable</em> 属性创建的话。不指定 <em>mutable</em> 将意味着所有的 <em>multi</em>s 需要在编译时添加, 而不允许在运行时添加。</p>
<p><a href="http://blogs.perl.org/users/yary/2016/02/apropos-proto-perl6c-multi-thoughts.html">http://blogs.perl.org/users/yary/2016/02/apropos-proto-perl6c-multi-thoughts.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/proto" term="proto" label="proto" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Raku 中的 proto]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-10-06-proto-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2015-10-06-proto-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Proto in Raku</blockquote><h2 id="proto">proto</h2>
<p>proto 意思为原型。proto 从形式上声明了 <code>multi</code> 候选者之间的<code>共性</code>。 proto 充当作能检查但不会修改参数的包裹。看看这个基本的例子:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">proto</span> <span class="nf">congratulate</span><span class="p">(</span><span class="nb">Str</span> <span class="nv">$reason</span><span class="o">,</span> <span class="nb">Str</span> <span class="nv">$name</span><span class="o">,</span> <span class="o">|</span><span class="p">)</span> <span class="p">{</span><span class="o">*</span><span class="p">}</span>

<span class="k">multi</span> <span class="nf">congratulate</span><span class="p">(</span><span class="nv">$reason</span><span class="o">,</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Hooray for your </span><span class="nv">$reason</span><span class="s2">, </span><span class="nv">$name</span><span class="p">&#34;;</span>
<span class="p">}</span>

<span class="k">multi</span> <span class="nf">congratulate</span><span class="p">(</span><span class="nv">$reason</span><span class="o">,</span> <span class="nv">$name</span><span class="o">,</span> <span class="nb">Int</span> <span class="nv">$rank</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Hooray for your </span><span class="nv">$reason</span><span class="s2">, </span><span class="nv">$name</span><span class="s2"> -- you got rank </span><span class="nv">$rank</span><span class="s2">!</span><span class="p">&#34;;</span>
<span class="p">}</span>

<span class="nf">congratulate</span><span class="p">(&#39;</span><span class="s1">being a cool number</span><span class="p">&#39;</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">Fred</span><span class="p">&#39;);</span>     <span class="c1"># OK</span>
<span class="nf">congratulate</span><span class="p">(&#39;</span><span class="s1">being a cool number</span><span class="p">&#39;</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">Fred</span><span class="p">&#39;</span><span class="o">,</span> <span class="mi">42</span><span class="p">);</span> <span class="c1"># OK</span>
<span class="nf">congratulate</span><span class="p">(&#39;</span><span class="s1">being a cool number</span><span class="p">&#39;</span><span class="o">,</span> <span class="mi">42</span><span class="p">);</span>         <span class="c1"># Proto match error</span>
</code></pre></div><p>所有的 <code>multi congratulate</code> 会遵守基本的签名, 这个签名中有两个字符串参数, 后面跟着可选的更多的参数。 <code>|</code> 是一个未命名的 <code>Capture</code> 形参, 这允许 <code>multi</code> 接收额外的参数。第三个 congratulate 调用在编译时失败, 因为第一行的 proto 的签名变成了所有三个 multi congratulate 的共同签名, 而 42 不匹配 <code>Str</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">&amp;congratulate</span><span class="o">.</span><span class="nb">signature</span> <span class="c1">#-&gt; (Str $reason, Str $name, | is raw)</span>
</code></pre></div><p>你可以给 <code>proto</code> 一个函数体, 并且在你想执行 dispatch 的地方放上一个 <code>{*}</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="c1"># attempts to notify someone -- returns False if unsuccessful</span>
<span class="k">proto</span> <span class="nf">notify</span><span class="p">(</span><span class="nb">Str</span> <span class="nv">$user</span><span class="o">,</span><span class="nb">Str</span> <span class="nv">$msg</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">\hour</span> <span class="o">=</span> <span class="nb">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">hour</span><span class="p">;</span>
    <span class="k">if</span> <span class="nb">hour</span> <span class="o">&gt;</span> <span class="mi">8</span> <span class="ow">or</span> <span class="nb">hour</span> <span class="o">&lt;</span> <span class="mi">22</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span><span class="o">*</span><span class="p">};</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1"># we can&#39;t notify someone when they might be sleeping</span>
        <span class="k">return</span> <span class="nb">False</span><span class="p">;</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p><code>{*}</code> 总是分派给带有参数的候选者。默认参数和类型强制转换会起作用单不会传递。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">proto</span> <span class="nf">mistake-proto</span><span class="p">(</span><span class="nb">Str</span><span class="p">()</span> <span class="nv">$str</span><span class="o">,</span> <span class="nb">Int</span> <span class="nv">$number</span> <span class="o">=</span> <span class="mi">42</span><span class="p">)</span> <span class="p">{</span><span class="o">*</span><span class="p">}</span>
<span class="k">multi</span> <span class="nf">mistake-proto</span><span class="p">(</span><span class="nv">$str</span><span class="o">,</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span> <span class="nb">say</span> <span class="nv">$str</span><span class="o">.</span><span class="nb">WHAT</span> <span class="p">}</span>
<span class="nf">mistake-proto</span><span class="p">(</span><span class="mi">7</span><span class="o">,</span><span class="mi">42</span><span class="p">);</span>   <span class="c1">#-&gt; (Int) -- coercions not passed on</span>
<span class="nf">mistake-proto</span><span class="p">(&#39;</span><span class="s1">test</span><span class="p">&#39;);</span> <span class="c1">#!&gt; fails -- defaults not passed on</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/proto" term="proto" label="proto" />
                            
                        
                    
                
            
        </entry>
    
</feed>
