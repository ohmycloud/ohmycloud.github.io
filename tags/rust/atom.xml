<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.79.0">Hugo</generator><title type="html"><![CDATA[Rust on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/rust/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/rust/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/rust/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/rust/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-05-18T22:23:49+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/rust/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Kafka 和 Rust入门 - 第一部分]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-04-14-getting-started-with-kafka-and-rust-part1/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-04-14-a-beginner-guide-to-handling-errors-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Rust 中处理错误的初级指南" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-11-sizedness-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Sizedness in Rust" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-call-site-dependency-injection/?utm_source=atom_feed" rel="related" type="text/html" title="Call Site Dependency Injection" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-for-the-love-of-macros/?utm_source=atom_feed" rel="related" type="text/html" title="For the Love of Macros" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-std-error-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Std Error in Rust" />
            
                <id>https://ohmyweekly.github.io/notes/2021-04-14-getting-started-with-kafka-and-rust-part1/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-04-14T00:00:00+08:00</published>
            <updated>2021-04-14T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Getting Started With Kafka and Rust</blockquote><p>这是一个两部分的系列，帮助你开始使用 Rust 和 Kafka。我们将使用 <a href="https://github.com/fede1024/rust-rdkafka/">rust-rdkafka</a> crate，它本身就是基于 <a href="https://github.com/edenhill/librdkafka">librdkafka</a>（C库）的。</p>
<p>在这篇文章中，我们将介绍 Kafka Producer API。</p>
<h2 id="初始设置">初始设置</h2>
<p>确保你<a href="https://kafka.apache.org/downloads">安装了一个 Kafka broker</a> - 本地设置应该足够了。当然，你也需要<a href="https://www.rust-lang.org/tools/install">安装Rust</a> - 你需要<a href="https://github.com/fede1024/rust-rdkafka#minimum-supported-rust-version-msrv">1.45或以上版本</a>。</p>
<p>在你开始之前，先克隆 GitHub repo。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/abhirockzz/rust-kafka-101
<span class="nb">cd</span> part1
</code></pre></div><p>检查 Cargo.toml 文件:</p>
<pre><code>...
[dependencies]
rdkafka = { version = &quot;0.25&quot;, features = [&quot;cmake-build&quot;,&quot;ssl&quot;] }
...
</code></pre><h2 id="关于-cmake-build-功能的说明">关于 cmake-build 功能的说明</h2>
<p><code>rust-rdkafka</code> 提供了几种解决 <code>librdkafka</code> 依赖关系的方法。我选择了 <code>static</code> 链接，其中 <code>librdkafka</code> 被编译。不过你也可以选择 <code>dynamic</code> 链接来引用本地安装的版本。</p>
<blockquote>
<p>更多内容，请<a href="https://github.com/fede1024/rust-rdkafka/blob/master/rdkafka-sys/README.md#features">参考以下链接</a></p>
</blockquote>
<p>好吧，我们先从基本的开始说起。</p>
<h2 id="简单的生产者">简单的生产者</h2>
<p>这里是一个基于 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/struct.BaseProducer.html">BaseProducer</a> 的简单生产者。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">producer</span>: <span class="nc">BaseProducer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ClientConfig</span>::<span class="n">new</span><span class="p">()</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#34;bootstrap.servers&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;localhost:9092&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#34;security.protocol&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;SASL_SSL&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#34;sasl.mechanisms&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;PLAIN&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#34;sasl.username&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;&lt;update&gt;&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#34;sasl.password&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;&lt;update&gt;&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">create</span><span class="p">()</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;invalid producer config&#34;</span><span class="p">);</span><span class="w">
</span></code></pre></div><p><code>send</code> 方法开始产生消息 - 它是在紧缩 <code>loop</code> 中完成的，中间有一个 <code>thread::sleep</code>(不是在生产中会做的事情)，以使其更容易追踪/跟踪结果。键、值（有效载荷）和目标 Kafka 主题以 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/struct.BaseRecord.html">BaseRecord</a> 的形式表示。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">1</span><span class="p">..</span><span class="mi">100</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;sending message&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">producer</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="w">
</span><span class="w">                </span><span class="n">BaseRecord</span>::<span class="n">to</span><span class="p">(</span><span class="s">&#34;rust&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;key-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">))</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">payload</span><span class="p">(</span><span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;value-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">)),</span><span class="w">
</span><span class="w">            </span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;failed to send message&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">thread</span>::<span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">from_secs</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><blockquote>
<p>你可以在文件 <code>src/1_producer_simple.rs</code> 中查看整个代码。</p>
</blockquote>
<h2 id="要测试生产者是否在工作-">要测试生产者是否在工作 &hellip;</h2>
<p>运行这段代码:</p>
<ul>
<li>只需将文件 <code>src/1_producer_simple.rs</code> 重命名为 <code>main.rs</code>。</li>
<li>执行 <code>cargo run</code></li>
</ul>
<p>你应该看到这个输出:</p>
<pre><code>sending message
sending message
sending message
...
</code></pre><p>到底发生了什么？要弄清楚 - 使用 Kafka CLI 消费者（或其他消费者客户端，如 kafkacat）连接到你的 Kafka 主题（我在上面的例子中使用 rust 作为 Kafka 主题的名称）。你应该看到消息流进来了。</p>
<p>例如</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="p">&amp;</span>KAFKA_HOME/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic rust --from-beginning
</code></pre></div><h2 id="生产者回调">生产者回调</h2>
<p>我们现在是在瞎飞! 除非我们明确地创建一个消费者来查看我们的消息，否则我们不知道它们是否被发送到 Kafka。让我们通过实现 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/trait.ProducerContext.html">ProducerContext</a>(trait)来解决这个问题，以挂接到 produce 事件 - 它就像一个回调。</p>
<p>首先为 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/client/trait.ClientContext.html">ClientContext</a> trait 创建一个结构体和一个空的实现（这是必须的）。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">ProducerCallbackLogger</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">ClientContext</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">ProducerCallbackLogger</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>现在到了主要部分，我们在 <code>ProducerContext</code> trait 中实现 <code>delivery</code> 函数。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">ProducerContext</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">ProduceCallbackLogger</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">DeliveryOpaque</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">delivery</span><span class="p">(</span><span class="w">
</span><span class="w">        </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">delivery_result</span>: <span class="kp">&amp;</span><span class="nc">rdkafka</span>::<span class="n">producer</span>::<span class="n">DeliveryResult</span><span class="o">&lt;</span><span class="na">&#39;_</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">_delivery_opaque</span>: <span class="nc">Self</span>::<span class="n">DeliveryOpaque</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">dr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">delivery_result</span><span class="p">.</span><span class="n">as_ref</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">dr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="nb">Ok</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">key</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="n">msg</span><span class="p">.</span><span class="n">key_view</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">                </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="w">
</span><span class="w">                    </span><span class="s">&#34;produced message with key {} in offset {} of partition {}&#34;</span><span class="p">,</span><span class="w">
</span><span class="w">                    </span><span class="n">key</span><span class="p">,</span><span class="w">
</span><span class="w">                    </span><span class="n">msg</span><span class="p">.</span><span class="n">offset</span><span class="p">(),</span><span class="w">
</span><span class="w">                    </span><span class="n">msg</span><span class="p">.</span><span class="n">partition</span><span class="p">()</span><span class="w">
</span><span class="w">                </span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="nb">Err</span><span class="p">(</span><span class="n">producer_err</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">key</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="n">producer_err</span><span class="p">.</span><span class="mf">1.</span><span class="n">key_view</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">                </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="w">
</span><span class="w">                    </span><span class="s">&#34;failed to produce message with key {} - {}&#34;</span><span class="p">,</span><span class="w">
</span><span class="w">                    </span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="n">producer_err</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">                </span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>我们根据 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/type.DeliveryResult.html">DeliveryResult</a>(毕竟它是一个 <code>Result</code>)来匹配成功(<code>Ok</code>)和失败(<code>Err</code>)的情况。我们所做的只是简单地记录这两种情况下的消息，因为这只是一个例子。你可以在这里做任何你想做的事情（虽然不要太疯狂！）。</p>
<blockquote>
<p>我们忽略了 <code>ProducerContext</code> trait 的关联类型 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/trait.ProducerContext.html#associatedtype.DeliveryOpaque">DeliveryOpaque</a>。</p>
</blockquote>
<p>我们需要确保我们插入了 <code>ProducerContext</code> 的实现。我们通过使用 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/config/struct.ClientConfig.html#method.create_with_context">create_with_context</a> 方法（而不是 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/config/struct.ClientConfig.html#method.create">create</a>）来实现，并确保为 <code>BaseProducer</code> 提供正确的类型。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">producer</span>: <span class="nc">BaseProducer</span><span class="o">&lt;</span><span class="n">ProduceCallbackLogger</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ClientConfig</span>::<span class="n">new</span><span class="p">().</span><span class="n">set</span><span class="p">(....)</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="p">.</span><span class="n">create_with_context</span><span class="p">(</span><span class="n">ProduceCallbackLogger</span><span class="w"> </span><span class="p">{})</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span></code></pre></div><h2 id="如何调用-回调">如何调用 &ldquo;回调&rdquo;？</h2>
<p>好了，我们有了实现，但我们需要一种方法来触发它! 其中一个方法就是在生产者上调用 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/struct.BaseProducer.html#method.flush">flush</a>。所以，我们可以把我们的 producer 写成这样。</p>
<ul>
<li>添加 <code>producer.flush(Duration::from_secs(3));</code>, 并</li>
<li>注释掉 <code>sleep</code> (just for now)</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">        </span><span class="n">producer</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="w">
</span><span class="w">                </span><span class="n">BaseRecord</span>::<span class="n">to</span><span class="p">(</span><span class="s">&#34;rust&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;key-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">))</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">payload</span><span class="p">(</span><span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;value-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">)),</span><span class="w">
</span><span class="w">            </span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;failed to send message&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">producer</span><span class="p">.</span><span class="n">flush</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">from_secs</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;flushed message&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="c1">//thread::sleep(Duration::from_secs(3));
</span></code></pre></div><h2 id="等等我们可以做得更好">等等，我们可以做得更好</h2>
<p><code>send</code> 方法是非阻塞的（默认），但通过在每次 <code>send</code> 后调用 <code>flush</code>，我们现在已经将其转换为同步调用 - 从性能角度来看，不推荐使用。</p>
<p>我们可以通过使用 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/struct.ThreadedProducer.html">ThreadedProducer</a> 来改善这种情况。它负责在后台线程中调用 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/base_producer/struct.BaseProducer.html#method.poll">poll</a> 方法，以确保发送回调通知的传递。这样做非常简单 - 只需将类型从 <code>BaseProducer</code> 改为 <code>ThreadedProducer</code> 即可!</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="err">#</span><span class="w"> </span><span class="n">before</span>: <span class="nc">BaseProducer</span><span class="o">&lt;</span><span class="n">ProduceCallbackLogger</span><span class="o">&gt;</span><span class="w">
</span><span class="w"></span><span class="err">#</span><span class="w"> </span><span class="n">after</span>: <span class="nc">ThreadedProducer</span><span class="o">&lt;</span><span class="n">ProduceCallbackLogger</span><span class="o">&gt;</span><span class="w">
</span></code></pre></div><p>而且，我们也不需要再调用 <code>flush</code> 了。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="c1">//producer.flush(Duration::from_secs(3));
</span><span class="c1">//println!(&#34;flushed message&#34;);
</span><span class="c1"></span><span class="n">thread</span>::<span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">from_secs</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span></code></pre></div><blockquote>
<p>代码在 <code>src/2_threaded_producer.rs</code> 中可以找到。</p>
</blockquote>
<h2 id="再次运行该程序">再次运行该程序</h2>
<ul>
<li>将文件 <code>src/2_threaded_producer.rs</code> 重命名为 <code>main.rs</code>，并且</li>
<li>执行 <code>cargo run</code></li>
</ul>
<p>输出:</p>
<pre><code>sending message
sending message
produced message with key key-1 in offset 6 of partition 2
produced message with key key-2 in offset 3 of partition 0
sending message
produced message with key key-3 in offset 7 of partition 2
</code></pre><p>正如预期的那样，你应该能够看到生产者事件回调，表示消息确实被发送到了 Kafka 主题。当然，你可以直接连接到主题，并再次检查，就像之前一样。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="p">&amp;</span>KAFKA_HOME/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic rust --from-beginning
</code></pre></div><blockquote>
<p>要尝试失败的情况，请尝试使用一个不正确的主题名称，并注意 <code>delivery</code> 实现的 <code>Err</code> 变体是如何被调用的。</p>
</blockquote>
<h2 id="发送-json-消息">发送 JSON 消息</h2>
<p>到目前为止，我们只是发送 <code>String</code> 作为 key 和 value。JSON 是一种常用的消息格式，让我们看看如何使用它。</p>
<p>假设我们要发送 <code>User</code> 信息，将使用这个结构体来表示。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">User</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">id</span>: <span class="kt">i32</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">email</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>然后我们可以使用 <a href="https://docs.serde.rs/serde_json/">serde_json</a> 库将其序列化为 JSON。我们所需要的就是使用 <a href="https://serde.rs/derive.html">serde 中的自定义派生函数</a> - <code>Deserialize</code> 和 <code>Serialize</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">serde</span>::<span class="p">{</span><span class="n">Deserialize</span><span class="p">,</span><span class="w"> </span><span class="n">Serialize</span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(Serialize, Deserialize, Debug)]</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">User</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">id</span>: <span class="kt">i32</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">email</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><h2 id="修改生产者循环">修改生产者循环。</h2>
<ul>
<li>创建一个 <code>User</code> 实例</li>
<li>使用 <a href="https://docs.serde.rs/serde_json/fn.to_string_pretty.html">to_string_pretty</a> 将其序列化为 JSON 字符串。</li>
<li>在有效载荷中加入这一点</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="p">...</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">user_json</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">serde_json</span>::<span class="n">to_string_pretty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">user</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;json serialization failed&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">producer</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="w">
</span><span class="w">                </span><span class="n">BaseRecord</span>::<span class="n">to</span><span class="p">(</span><span class="s">&#34;rust&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;user-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">))</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">payload</span><span class="p">(</span><span class="o">&amp;</span><span class="n">user_json</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;failed to send message&#34;</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span></code></pre></div><blockquote>
<p>你也可以使用 <a href="https://docs.serde.rs/serde_json/fn.to_vec.html">to_vec</a>(而不是 <code>to_string()</code>)将其转换为一个字节的<code>Vec</code>(<code>Vec&lt;u8&gt;</code>)。</p>
</blockquote>
<h2 id="要运行该程序">要运行该程序&hellip;</h2>
<ul>
<li>将文件 <code>src/3_JSON_payload.rs</code> 重命名为 <code>main.rs</code>，然后</li>
<li>执行 <code>cargo run</code></li>
</ul>
<p>从主题中消费:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="p">&amp;</span>KAFKA_HOME/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic rust --from-beginning
</code></pre></div><p>你应该看到带有 <code>String</code> 的键（如 <code>user-34</code>）和 JSON 值的消息。</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">34</span><span class="p">,</span>
  <span class="nt">&#34;email&#34;</span><span class="p">:</span> <span class="s2">&#34;user-34@foobar.com&#34;</span>
<span class="p">}</span>
</code></pre></div><h2 id="有更好的方法吗">有更好的方法吗？</h2>
<p>是的！如果你习惯了 Kafka Java 客户端中的声明式序列化/去序列化方法（可能其他客户端也一样），你可能不喜欢这种 &ldquo;显式&rdquo; 方法。只是为了让大家明白，这是你在 Java 中的做法。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ProducerConfig</span><span class="o">.</span><span class="na">BOOTSTRAP_SERVERS_CONFIG</span><span class="o">,</span> <span class="s">&#34;localhost:9092&#34;</span><span class="o">);</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ProducerConfig</span><span class="o">.</span><span class="na">KEY_SERIALIZER_CLASS_CONFIG</span><span class="o">,</span>
  <span class="s">&#34;org.apache.kafka.common.serialization.StringSerializer&#34;</span><span class="o">);</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ProducerConfig</span><span class="o">.</span><span class="na">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="o">,</span>
  <span class="s">&#34;io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer&#34;</span><span class="o">);</span>

<span class="o">....</span>

<span class="n">ProducerRecord</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">User</span><span class="o">&gt;</span> <span class="n">record</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProducerRecord</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">User</span><span class="o">&gt;(</span><span class="n">topic</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
<span class="n">producer</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">record</span><span class="o">);</span>
</code></pre></div><blockquote>
<p>请注意，您只需将 <code>Producer</code> 配置为使用 <code>KafkaJsonSchemaSerializer</code>，<code>User</code> 类就会被序列化为 JSON。</p>
</blockquote>
<p><code>rust-rdkafka</code> 用 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/message/trait.ToBytes.html">ToBytes</a> trait 提供了类似的东西。下面是它的样子。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">ToBytes</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="sd">/// Converts the provided data to bytes.
</span><span class="sd"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">to_bytes</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">];</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>不言而喻吧？<code>String</code>、<code>Vec&lt;u8&gt;</code> 等都有现有的实现。所以你可以使用这些类型作为键或值，而不需要任何额外的工作 - 这正是我们刚刚做的。但问题是我们的方法是 &ldquo;显式&rdquo; 的，即我们将 <code>User</code> 结构转换为 JSON 字符串，并将其传递出去。</p>
<h2 id="如果我们可以为-user-实现-tobytes-呢">如果我们可以为 <code>User</code> 实现 <code>ToBytes</code> 呢？</h2>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">ToBytes</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">User</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">to_bytes</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">]</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">serde_json</span>::<span class="n">to_vec_pretty</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;json serialization failed&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">b</span><span class="p">.</span><span class="n">as_slice</span><span class="p">()</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>你会看到一个编译器错误。</p>
<pre><code>cannot return value referencing local variable `b`
returns a value referencing data owned by the current function
</code></pre><blockquote>
<p>更多的背景资料，请参考 <a href="https://github.com/fede1024/rust-rdkafka/issues/128">GitHub</a> 的问题。我很乐意看到其他可以与 <code>ToBytes</code> 一起工作的例子 - 如果你有这方面的意见，请在留言中留下。</p>
</blockquote>
<p>TL;DR是，最好坚持用 &ldquo;显式&rdquo; 的方式做事，除非你有一个 <code>ToBytes</code> 的实现，&ldquo;不涉及分配，不能失败&rdquo;。</p>
<h2 id="总结">总结</h2>
<p>第一部分就到这里。第二部分将涉及围绕 Kafka 消费者的话题。</p>
<p>原文链接: <a href="https://dev.to/abhirockzz/getting-started-with-kafka-and-rust-part-1-4hkb">https://dev.to/abhirockzz/getting-started-with-kafka-and-rust-part-1-4hkb</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rustlang" term="rustlang" label="rustlang" />
                             
                                <category scheme="https://ohmyweekly.github.io/categories/kafka" term="kafka" label="kafka" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust" term="rust" label="Rust" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Rust 中处理错误的初级指南]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-04-14-a-beginner-guide-to-handling-errors-in-rust/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-04-14-getting-started-with-kafka-and-rust-part1/?utm_source=atom_feed" rel="related" type="text/html" title="Kafka 和 Rust入门 - 第一部分" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-11-sizedness-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Sizedness in Rust" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-call-site-dependency-injection/?utm_source=atom_feed" rel="related" type="text/html" title="Call Site Dependency Injection" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-for-the-love-of-macros/?utm_source=atom_feed" rel="related" type="text/html" title="For the Love of Macros" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-std-error-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Std Error in Rust" />
            
                <id>https://ohmyweekly.github.io/notes/2021-04-14-a-beginner-guide-to-handling-errors-in-rust/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-04-14T00:00:00+08:00</published>
            <updated>2021-04-14T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>A Beginner&rsquo;s Guide to Handling Errors in Rust</blockquote><p>《Rust 编程语言》中的示例项目对于向新的潜在 Rustaceans 介绍 Rust 的不同方面和特性是非常好的。在这篇文章中，我们将通过扩展《Rust 编程语言》中的 <code>minigrep</code> 项目，看看实现更强大的错误处理基础架构的一些不同方法。</p>
<p><code>minigrep</code> 项目在<a href="https://doc.rust-lang.org/book/ch12-00-an-io-project.html">第12章</a>中介绍，它引导读者构建一个简单版本的 <code>grep</code> 命令行工具，这是一个用于搜索文本的工具。例如，你会传入一个查询，你要搜索的文本，以及文本所在的文件名，然后得到包含查询文本的所有行。</p>
<p>这篇文章的目标是用更强大的错误处理模式来扩展本书的 <code>minigrep</code> 实现，这样你就能更好地了解 Rust 项目中处理错误的不同方法。</p>
<p>作为参考，你可以在<a href="https://github.com/seanchen1991/error-handling-examples/tree/minigrep-control/examples/minigrep">这里</a>找到本书的 <code>minigrep</code> 版本的最终代码。</p>
<h2 id="错误处理用例">错误处理用例</h2>
<p>当涉及到 Rust 项目的结构时，一个常见的模式是有一个 &ldquo;库&rdquo; 的部分和一个 &ldquo;应用&rdquo; 的部分，前者是主要的数据结构、函数和逻辑，后者是将库函数联系在一起。</p>
<p>你可以在原始 <code>minigrep</code> 代码的文件结构中看到这一点：应用逻辑存在于 <code>src/bin/main.rs</code> 文件中，它只是一个薄薄的包裹，包裹着在 <code>src/lib.rs</code> 文件中定义的数据结构和函数；主函数所做的就是调用 <code>minigrep::run</code>。</p>
<p>这一点很重要，因为取决于我们是在构建一个应用程序还是一个库，会改变我们处理错误的方式。</p>
<p>当涉及到一个应用程序时，最终用户很可能不想知道是什么原因导致了一个错误的琐碎细节。事实上，应用程序的最终用户可能只应该在错误无法恢复的情况下被通知错误。在这种情况下，提供关于为什么发生不可恢复的错误的细节也是有用的，特别是当它与用户输入有关时。如果某种可恢复的错误发生在后台，应用程序的消费者可能不需要知道它。</p>
<p>相反，当涉及到一个库时，最终用户是其他开发人员，他们正在使用该库并在其之上构建一些东西。在这种情况下，我们希望尽可能多地提供关于我们的库中发生的任何错误的相关细节。然后，库的消费者将决定他们想要如何处理这些错误。</p>
<p>那么，当我们的项目中既有库部分又有应用部分时，这两种方法是如何一起发挥作用的呢？<code>main</code> 函数执行 <code>minigrep::run</code> 函数，并输出结果中出现的任何错误。所以我们大部分的错误处理工作将集中在库部分。</p>
<h2 id="浮现库错误">浮现库错误</h2>
<p>在 <code>src/lib.rs</code> 中，我们有两个函数，<code>Config::new</code> 和 <code>run</code>，它们可能会返回错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">Config</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="k">mut</span><span class="w"> </span><span class="n">args</span>: <span class="nc">env</span>::<span class="n">Args</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Config</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="nb">&#39;static</span><span class="w"> </span><span class="kt">str</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">arg</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a query string&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">filename</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">arg</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a file name&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">case_sensitive</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">env</span>::<span class="n">var</span><span class="p">(</span><span class="s">&#34;CASE_INSENSITIVE&#34;</span><span class="p">).</span><span class="n">is_err</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">Config</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">query</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">filename</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">case_sensitive</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">})</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="n">config</span>: <span class="nc">Config</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">contents</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span>::<span class="n">read_to_string</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">filename</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">results</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">config</span><span class="p">.</span><span class="n">case_sensitive</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">search</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">.</span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">contents</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">search_case_insensitive</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">.</span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">contents</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">line</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">results</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">line</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="nb">Ok</span><span class="p">(())</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>确切有三个地方在返回错误：两个错误发生在 <code>Config::new</code> 函数中，该函数返回一个 <code>Result&lt;Config，&amp;'static str&gt;</code>。在这种情况下，<code>Result</code> 的错误变体是一个静态字符串切片。</p>
<p>在这里，当用户没有提供查询时，我们会返回一个错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">Some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">arg</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a query string&#34;</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="p">};</span><span class="w">
</span></code></pre></div><p>这里，当用户没有提供文件名时，我们会返回一个错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">filename</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">Some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">arg</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a file name&#34;</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="p">};</span><span class="w">
</span></code></pre></div><p>以这种方式将错误结构化为静态字符串的主要问题是，错误信息并没有被放置在一个中心位置，如果需要的话，我们可以轻松地重构它们。这也使得我们更难在相同类型的错误之间保持错误信息的一致性。</p>
<p>第三种错误发生在 <code>run</code> 函数的顶部，它返回一个 <code>Result&lt;(), Box&lt;dyn Error&gt;&gt;</code>。在这种情况下，错误变体是一个实现  <code>Error</code> <a href="https://doc.rust-lang.org/std/error/trait.Error.html">trait</a> 的 trait 对象。换句话说，这个函数的错误变体是实现 <code>Error</code> trait 的类型的任何实例。</p>
<p>在这里，我们将调用 <code>fs::read_to_string</code> 时可能发生的任何错误冒出来。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">contents</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span>::<span class="n">read_to_string</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">filename</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>这适用于调用 <code>fs::read_to_string</code> 时可能出现的错误，因为这个函数能够返回多种类型的错误。因此，我们需要一种方法来表示这些不同的可能的错误类型；它们之间的共同点是它们都实现了 <code>Error</code> trait！最终，我们要做的是定义所有这些错误类型。</p>
<p>最终，我们要做的是在一个中心位置定义所有这些不同类型的错误，并让它们都成为单一类型的变体。</p>
<h2 id="在一个中心类型中定义错误变种">在一个中心类型中定义错误变种</h2>
<p>我们将创建一个新的 <code>src/error.rs</code> 文件，并定义一个枚举 <code>AppError</code>，并在此过程中派生出 <code>Debug</code> trait，以便我们在需要时可以得到一个调试表示。我们将为这个枚举的每一个变体命名，使它们恰当地代表三种类型的错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#[derive(Debug)]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">AppError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">MissingQuery</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">MissingFilename</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">ConfigLoad</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>第三个变体，<code>ConfigLoad</code>，映射到 <code>Config::run</code> 函数中调用 <code>fs::read_to_string</code> 时可能出现的错误。乍一看，这似乎有点不妥，因为如果该函数出现错误，那就是在读取提供的配置文件时出现了某种I/O问题。那么我们为什么不把它命名为 <code>IOError</code> 或者类似的东西呢？</p>
<p>在这种情况下，由于我们是将一个标准库函数的错误浮出水面，所以描述浮出水面的错误是如何影响它的，而不是简单地重申它，这与我们的应用更相关。当 <code>fs::read_to_string</code> 发生错误时，会阻止我们的 <code>Config</code> 加载，所以这就是为什么我们把它命名为 <code>ConfigLoad</code>。</p>
<p>现在我们有了这个类型，我们需要更新代码中所有返回错误的地方以利用这个 <code>AppError</code> 枚举。</p>
<h2 id="返回-apperror-的变体">返回 <code>AppError</code> 的变体</h2>
<p>在我们的 <code>src/lib.rs</code> 文件的顶部，我们需要声明我们的错误模块，并将 <code>error::AppError</code> 带入作用域。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">mod</span> <span class="nn">error</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">error</span>::<span class="n">AppError</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>在我们的 <code>Config::new</code> 函数中，我们需要更新我们作为错误返回静态字符串切片的地方，以及函数本身的返回类型。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="o">-</span><span class="w"> </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="k">mut</span><span class="w"> </span><span class="n">args</span>: <span class="nc">env</span>::<span class="n">Args</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Config</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="nb">&#39;static</span><span class="w"> </span><span class="kt">str</span><span class="o">&gt;</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w"> </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="k">mut</span><span class="w"> </span><span class="n">args</span>: <span class="nc">env</span>::<span class="n">Args</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Config</span><span class="p">,</span><span class="w"> </span><span class="n">AppError</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="c1">// --snip--
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">arg</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w">       </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a query string&#34;</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">       </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="n">AppError</span>::<span class="n">MissingQuery</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">filename</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">arg</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w">       </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a file name&#34;</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">       </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="n">AppError</span>::<span class="n">MissingFilename</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// --snip--
</span></code></pre></div><p>运行函数中的第三个错误，只需要我们更新它的返回类型，因为 <code>?</code> 操作符已经负责将错误冒出来，并在发生时返回。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="o">-</span><span class="w"> </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="n">config</span>: <span class="nc">Config</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w"> </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="n">config</span>: <span class="nc">Config</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="n">AppError</span><span class="o">&gt;</span><span class="w">
</span></code></pre></div><p>好了，现在我们正在使用我们的错误变体，一旦发生，这些错误变体将被浮现到我们的 <code>main</code> 函数中并打印出来。但是我们不再有之前定义的实际错误信息了！我们可以用 <code>thiserror</code> 注释错误变体。</p>
<h2 id="用-thiserror-注释错误变体">用 <code>thiserror</code> 注释错误变体</h2>
<p><code>thiserror</code> <a href="https://docs.rs/thiserror/1.0.24/thiserror/">crate</a> 是一个常用的工具，它提供了一种符合人体工程学的方式来格式化 Rust 库中的错误信息。</p>
<p>它允许我们在 <code>AppError</code> 枚举中用我们希望显示给最终用户的实际错误信息来注解每个变体。</p>
<p>让我们在 Cargo.toml 中添加它作为依赖。</p>
<div class="highlight"><pre class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">dependencies</span><span class="p">]</span>
<span class="nx">thiserror</span> <span class="p">=</span> <span class="s2">&#34;1&#34;</span>
</code></pre></div><p>在 <code>src/error.rs</code> 中，我们将把 <code>thiserror::Error</code> trait 带入作用域，并让我们的 <code>AppError</code> 类型派生它。我们需要派生这个 trait，以便用 <code>#[error]</code> 块来注解每个枚举变量。现在我们指定我们希望为每个特定变量显示的错误信息。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="o">+</span><span class="w"> </span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">io</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w"> </span><span class="k">use</span><span class="w"> </span><span class="n">thiserror</span>::<span class="n">Error</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w"> </span><span class="cp">#[derive(Debug)]</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w"> </span><span class="cp">#[derive(Debug, Error)]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">AppError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">   </span><span class="cp">#[error(</span><span class="s">&#34;Didn&#39;t get a query string&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w">    </span><span class="n">MissingQuery</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">   </span><span class="cp">#[error(</span><span class="s">&#34;Didn&#39;t get a file name&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w">    </span><span class="n">MissingFilename</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">   </span><span class="cp">#[error(</span><span class="s">&#34;Could not load config&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w">    </span><span class="n">ConfigLoad</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">       </span><span class="cp">#[from]</span><span class="w"> 
</span><span class="w"></span><span class="o">+</span><span class="w">       </span><span class="n">source</span>: <span class="nc">io</span>::<span class="n">Error</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">   </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><code>ConfigLoad</code> 变体中增加了什么额外的东西？由于 <code>ConfigLoad</code> 错误只有在调用 <code>fs::read_to_string</code> 出现底层错误时才会发生，所以 <code>ConfigLoad</code> 变体实际上做的是围绕底层I/O错误提供额外的上下文。</p>
<p><code>thiserror</code> 允许我们通过用 <code>#[from]</code> 来注解一个低级错误，以将源码转换为我们自制的错误类型，从而将其包裹在额外的上下文中。这样一来，当一个I/O错误发生时（比如我们指定了一个要搜索的文件，但实际上并不存在），我们就会得到这样一个错误。</p>
<pre><code>Could not load config: Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; }
</code></pre><p>如果没有它，产生的错误信息看起来像这样。</p>
<pre><code>Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; }
</code></pre><p>对于我们库的消费者来说，要想找出这个错误的来源是比较困难的，额外的上下文帮助很大。</p>
<p>你可以在<a href="https://github.com/seanchen1991/error-handling-examples/tree/minigrep-thiserror/examples/minigrep">这里</a>找到使用这个错误的 <code>minigrep</code> 版本。</p>
<h2 id="更加手动的方法">更加手动的方法</h2>
<p>现在，我们将换个角度，看看如何在不将其作为依赖的情况下，实现与 <code>thiserror</code> 相同的结果。</p>
<p>在引擎盖下，<code>thiserror</code> 用程序宏执行了一些魔法，这对编译速度有明显的影响。在 <code>minigrep</code> 的情况下，我们的错误变体很少，而且项目也很小，所以依赖 <code>thiserror</code> 并不会增加多少编译时间，但是在一个更大更复杂的项目中，这可能是一个考虑因素。</p>
<p>所以在这一点上，我们将把这篇文章撕掉，换成我们自己的手动实现来结束这篇文章。走这条路的好处是，我们只需要修改 <code>src/error.rs</code> 文件就可以实现所有必要的改变（当然，除了从我们的 Cargo.toml 中删除 thiserror 之外）。</p>
<div class="highlight"><pre class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">dependencies</span><span class="p">]</span>
<span class="err">-</span> <span class="nx">thiserror</span> <span class="p">=</span> <span class="s2">&#34;1&#34;</span>
</code></pre></div><p>让我们删除所有 <code>thiserror</code> 提供给我们的注释。我们还将用 <code>std::error::Error</code> trait 替换 <code>thiserror::Error</code> trait。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="o">-</span><span class="w"> </span><span class="k">use</span><span class="w"> </span><span class="n">thiserror</span>::<span class="n">Error</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w"> </span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">error</span>::<span class="n">Error</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w"> </span><span class="cp">#[derive(Debug, Error)]</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w"> </span><span class="cp">#[derive(Error)]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">AppError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w">   </span><span class="cp">#[error(</span><span class="s">&#34;Didn&#39;t get a query string&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w">    </span><span class="n">MissingQuery</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w">   </span><span class="cp">#[error(</span><span class="s">&#34;Didn&#39;t get a file name&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w">    </span><span class="n">MissingFilename</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w">   </span><span class="cp">#[error(</span><span class="s">&#34;Could not load config&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w">    </span><span class="n">ConfigLoad</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w">      </span><span class="cp">#[from]</span><span class="w">
</span><span class="w">       </span><span class="n">source</span>: <span class="nc">io</span>::<span class="n">Error</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>为了恢复我们刚刚擦除的所有功能，我们需要做三件事。</p>
<ol>
<li>为 <code>AppError</code> 实现 <code>Display</code> trait，这样我们的错误变体就可以显示给用户了。</li>
<li>为 <code>AppError</code> 实现 <code>Error</code> trait。这个 trait 代表了对错误类型的基本期望，即它们实现了 <code>Display</code> 和 <code>Debug</code>，再加上获取错误底层源或原因的能力。</li>
<li>为 <code>AppError</code> 实现 <code>From&lt;io::Error&gt;</code>。这是必要的，这样我们就可以将从 <code>fs::read_to_string</code> 返回的I/O错误转换为 <code>AppError</code> 的实例。</li>
</ol>
<p>这里是我们对 <code>AppError</code> 的 <code>Display</code> trait 的实现。它将每个错误变量映射为一个字符串，并将其写入到 <code>Display</code>  formatter 中。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fmt</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Display</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">AppError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">fmt</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">f</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Formatter</span><span class="o">&lt;</span><span class="na">&#39;_</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">fmt</span>::<span class="nb">Result</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="bp">self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">Self</span>::<span class="n">MissingQuery</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">write_str</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a query string&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">Self</span>::<span class="n">MissingFilename</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">write_str</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a file name&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">Self</span>::<span class="n">ConfigLoad</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">source</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">write</span><span class="o">!</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Could not load config: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">source</span><span class="p">),</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>而这就是我们对 <code>Error</code> trait 的实现。要实现的主要方法是 <code>Error::source</code> 方法，它的目的是提供错误源的信息。对于我们的 <code>AppError</code> 类型，只有 <code>ConfigLoad</code> 会暴露任何底层源信息，即调用 <code>fs::read_to_string</code> 可能发生的I/O错误。在其他错误变体的情况下，没有底层的源信息需要暴露。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">error</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">error</span>::<span class="n">Error</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">AppError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">source</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;&amp;</span><span class="p">(</span><span class="n">dyn</span><span class="w"> </span><span class="n">Error</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">&#39;static</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="bp">self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">Self</span>::<span class="n">ConfigLoad</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">source</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">source</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">None</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>返回类型的 <code>&amp;(dyn Error + 'static')</code> 部分类似于我们之前看到的 <code>Box&lt;dyn Error&gt;</code> trait 对象。这里的主要区别是，trait 对象是在一个不可变的引用后面，而不是 <code>Box</code> 指针。这里的 <code>'static</code> lifetime 意味着 trait 对象本身只包含拥有的值，也就是说，它内部不存储任何引用。这是必要的，以便让编译器确信这里没有悬空指针的机会。</p>
<p>最后，我们需要一种将 <code>io::Error</code> 转换为 <code>AppError</code> 的方法。我们将通过为 <code>AppError for From&lt;io::error&gt;</code> 来实现。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="nb">From</span><span class="o">&lt;</span><span class="n">io</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">AppError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">from</span><span class="p">(</span><span class="n">source</span>: <span class="nc">io</span>::<span class="n">Error</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Self</span>::<span class="n">ConfigLoad</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">source</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这个没什么好说的。如果我们得到一个 <code>io::Error</code>，我们要做的就是将其转换为 <code>AppError</code>，并将其封装在 <code>ConfigLoad</code> 变体中。</p>
<p>这就是全部了，伙计们 你可以在<a href="https://github.com/seanchen1991/error-handling-examples/tree/main/examples/minigrep">这里</a>找到这个版本的 <code>minigrep</code> 实现。</p>
<h2 id="总结">总结</h2>
<p>最后，我们讨论了《Rust编程语言》一书中介绍的原始 <code>minigrep</code> 实现在错误处理方面是如何有点欠缺的，以及如何考虑不同的错误处理用例。</p>
<p>从那里，我们展示了如何使用 <code>thiserror</code> crate 将所有可能的错误变体集中到一个类型中。</p>
<p>最后，我们剥开了 <code>thiserror</code> 提供的外衣，展示了如何手动复制同样的功能。</p>
<p>希望大家能从这篇文章中学到一些东西!</p>
<p>原文链接: <a href="https://dev.to/seanchen1991/a-beginner-s-guide-to-handling-errors-in-rust-40k2">https://dev.to/seanchen1991/a-beginner-s-guide-to-handling-errors-in-rust-40k2</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rustlang" term="rustlang" label="rustlang" />
                             
                                <category scheme="https://ohmyweekly.github.io/categories/error" term="error" label="error" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust" term="rust" label="Rust" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Sizedness in Rust]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-04-11-sizedness-in-rust/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-call-site-dependency-injection/?utm_source=atom_feed" rel="related" type="text/html" title="Call Site Dependency Injection" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-for-the-love-of-macros/?utm_source=atom_feed" rel="related" type="text/html" title="For the Love of Macros" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-std-error-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Std Error in Rust" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-two-beautiful-rust-programs/?utm_source=atom_feed" rel="related" type="text/html" title="Two Beautiful Rust Programs" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-20-pest-grammars/?utm_source=atom_feed" rel="related" type="text/html" title="Pest Grammars" />
            
                <id>https://ohmyweekly.github.io/notes/2021-04-11-sizedness-in-rust/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-04-11T00:00:00+08:00</published>
            <updated>2021-04-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Sizedness in Rust</blockquote><h1 id="sizedness-in-rust">Sizedness in Rust</h1>
<p><strong>Table of Contents</strong></p>
<ul>
<li><a href="#intro">Intro</a></li>
<li><a href="#sizedness">Sizedness</a></li>
<li><a href="#sized-trait"><code>Sized</code> Trait</a></li>
<li><a href="#sized-in-generics"><code>Sized</code> in Generics</a></li>
<li><a href="#unsized-types">Unsized Types</a>
<ul>
<li><a href="#slices">Slices</a></li>
<li><a href="#trait-objects">Trait Objects</a></li>
<li><a href="#trait-object-limitations">Trait Object Limitations</a>
<ul>
<li><a href="#cannot-cast-unsized-types-to-trait-objects">Cannot Cast Unsized Types to Trait Objects</a></li>
<li><a href="#cannot-create-multi-trait-objects">Cannot create Multi-Trait Objects</a></li>
</ul>
</li>
<li><a href="#user-defined-unsized-types">User-Defined Unsized Types</a></li>
</ul>
</li>
<li><a href="#zero-sized-types">Zero-Sized Types</a>
<ul>
<li><a href="#unit-type">Unit Type</a></li>
<li><a href="#user-defined-unit-structs">User-Defined Unit Structs</a></li>
<li><a href="#never-type">Never Type</a></li>
<li><a href="#user-defined-pseudo-never-types">User-Defined Pseudo Never Types</a></li>
<li><a href="#phantomdata">PhantomData</a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a></li>
<li><a href="#discuss">Discuss</a></li>
<li><a href="#notifications">Notifications</a></li>
<li><a href="#further-reading">Further Reading</a></li>
</ul>
<h2 id="intro">Intro</h2>
<p>Sizedness是Rust中最重要的概念之一。它与其他语言特性有很多微妙的交集，只是以_&ldquo;x在编译时不知道大小&rdquo;_错误信息的形式出现，而这些错误信息是每个Rustacean都非常熟悉的。在这篇文章中，我们将探讨从大小类型，到无大小类型，再到零大小类型的各种风味，同时研究它们的用例、好处、痛点和变通方法。</p>
<p>我使用的短语表，以及它们的含义。</p>
<table>
<thead>
<tr>
<th>Phrase</th>
<th>Shorthand for</th>
</tr>
</thead>
<tbody>
<tr>
<td>sizedness</td>
<td>property of being sized or unsized</td>
</tr>
<tr>
<td>sized type</td>
<td>type with a known size at compile time</td>
</tr>
<tr>
<td>1) unsized type <em>or</em><!-- raw HTML omitted -->2) DST</td>
<td>dynamically-sized type, i.e. size not known at compile time</td>
</tr>
<tr>
<td>?sized type</td>
<td>type that may or may not be sized</td>
</tr>
<tr>
<td>unsized coercion</td>
<td>coercing a sized type into an unsized type</td>
</tr>
<tr>
<td>ZST</td>
<td>zero-sized type, i.e. instances of the type are 0 bytes in size</td>
</tr>
<tr>
<td>width</td>
<td>single unit of measurement of pointer width</td>
</tr>
<tr>
<td>1) thin pointer <em>or</em><!-- raw HTML omitted -->2) single-width pointer</td>
<td>pointer that is <em>1 width</em></td>
</tr>
<tr>
<td>1) fat pointer <em>or</em><!-- raw HTML omitted -->2) double-width pointer</td>
<td>pointer that is <em>2 widths</em></td>
</tr>
<tr>
<td>1) pointer <em>or</em><!-- raw HTML omitted -->2) reference</td>
<td>some pointer of some width, width will be clarified by context</td>
</tr>
<tr>
<td>slice</td>
<td>double-width pointer to a dynamically sized view into some array</td>
</tr>
</tbody>
</table>
<h2 id="sizedness">Sizedness</h2>
<p>在 Rust 中，如果在编译时可以确定类型的字节大小，那么就可以确定类型的大小。确定一个类型的大小对于能够在栈上为该类型的实例分配足够的空间是很重要的。固定大小的类型可以通过值或引用来传递。如果一个类型的大小不能在编译时确定，那么它被称为不确定大小类型或 DST，动态大小类型。由于不确定大小类型不能被放置在栈上，它们只能通过引用来传递。下面是一些固定大小类型和不确定大小类型的例子。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">mem</span>::<span class="n">size_of</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// primitives
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="kt">f64</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// tuples
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="p">(</span><span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="kt">i32</span><span class="p">)</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// arrays
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="p">[</span><span class="kt">i32</span><span class="p">;</span><span class="w"> </span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="p">[</span><span class="kt">i32</span><span class="p">;</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">struct</span> <span class="nc">Point</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">x</span>: <span class="kt">i32</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">y</span>: <span class="kt">i32</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// structs
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// enums
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="nb">Option</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// get pointer width, will be
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 4 bytes wide on 32-bit targets or
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 8 bytes wide on 64-bit targets
</span><span class="c1"></span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">WIDTH</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="p">()</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// pointers to sized types are 1 width
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="k">mut</span><span class="w"> </span><span class="kt">i32</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="k">fn</span><span class="p">(</span><span class="kt">i32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">i32</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">DOUBLE_WIDTH</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">WIDTH</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// unsized struct
</span><span class="c1"></span><span class="w">    </span><span class="k">struct</span> <span class="nc">Unsized</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">unsized_field</span>: <span class="p">[</span><span class="kt">i32</span><span class="p">],</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// pointers to unsized types are 2 widths
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="kt">str</span><span class="o">&gt;</span><span class="p">());</span><span class="w"> </span><span class="c1">// slice
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span><span class="o">&gt;</span><span class="p">());</span><span class="w"> </span><span class="c1">// slice
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="n">dyn</span><span class="w"> </span><span class="nb">ToString</span><span class="o">&gt;</span><span class="p">());</span><span class="w"> </span><span class="c1">// trait object
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="nb">ToString</span><span class="o">&gt;&gt;</span><span class="p">());</span><span class="w"> </span><span class="c1">// trait object
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="n">Unsized</span><span class="o">&gt;</span><span class="p">());</span><span class="w"> </span><span class="c1">// user-defined unsized type
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="c1">// unsized types
</span><span class="c1"></span><span class="w">    </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="kt">str</span><span class="o">&gt;</span><span class="p">();</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">    </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span><span class="o">&gt;</span><span class="p">();</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">    </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="nb">ToString</span><span class="o">&gt;</span><span class="p">();</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">    </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="n">Unsized</span><span class="o">&gt;</span><span class="p">();</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>我们如何确定固定大小类型的大小是直截了当的：所有原生类型和指针都有已知的大小，所有的结构体、元组、枚举和数组只是由原生类型和指针或其他嵌套的结构体、元组、枚举和数组组成，因此我们只需考虑到填充和对齐所需的额外字节，递归地计数字节即可。我们无法确定不确定大小类型的大小，原因同样简单明了：切片可以有任意数量的元素在其中，因此在运行时可以是任意大小的，trait 对象可以由任意数量的结构或枚举实现，因此在运行时也可以是任意大小的。</p>
<p><strong>专业提示</strong></p>
<ul>
<li>在Rust中，视图到数组中的动态大小的指针被称为切片。例如 <code>&amp;str</code> 是一个&quot;字符串切片&quot;, <code>&amp;[i32]</code> 一个 <em>&ldquo;i32 切片&rdquo;</em>。</li>
<li>切片是双倍宽度的，因为它们存储了一个指向数组的指针和数组中元素的数量。</li>
<li>trait 对象指针是双宽度的，因为它们存储了一个指向数据的指针和一个指向 vtable 的指针。</li>
<li>不确定大小的结构体指针是双倍宽度的，因为它们存储了一个指向结构体数据的指针和结构体的大小。</li>
<li>不确定大小的结构体只能有1个不确定大小的字段，而且必须是结构体中的最后一个字段。</li>
</ul>
<p>为了让大家真正明白关于不确定大小类型的双宽度指针的点，这里有一个比较数组和切片的注释代码示例。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">mem</span>::<span class="n">size_of</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">WIDTH</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="p">()</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">DOUBLE_WIDTH</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">WIDTH</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// data length stored in type
</span><span class="c1"></span><span class="w">    </span><span class="c1">// an [i32; 3] is an array of three i32s
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">nums</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">;</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">];</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// single-width pointer
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">;</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// can iterate over nums safely
</span><span class="c1"></span><span class="w">    </span><span class="c1">// Rust knows it&#39;s exactly 3 elements
</span><span class="c1"></span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">nums</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">sum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">num</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// unsized coercion from [i32; 3] to [i32]
</span><span class="c1"></span><span class="w">    </span><span class="c1">// data length now stored in pointer
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">nums</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">];</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// double-width pointer required to also store data length
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// can iterate over nums safely
</span><span class="c1"></span><span class="w">    </span><span class="c1">// Rust knows it&#39;s exactly 3 elements
</span><span class="c1"></span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">nums</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">sum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">num</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这里还有一个注释的代码例子，比较结构体和 trait 对象。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">mem</span>::<span class="n">size_of</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">WIDTH</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="p">()</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">DOUBLE_WIDTH</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">WIDTH</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">print</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Struct2</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">print</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;struct&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct2</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">print</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;struct2&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">print_struct</span><span class="p">(</span><span class="n">s</span>: <span class="kp">&amp;</span><span class="nc">Struct</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// always prints &#34;struct&#34;
</span><span class="c1"></span><span class="w">    </span><span class="c1">// this is known at compile-time
</span><span class="c1"></span><span class="w">    </span><span class="n">s</span><span class="p">.</span><span class="n">print</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="c1">// single-width pointer
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="n">Struct</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">print_struct2</span><span class="p">(</span><span class="n">s2</span>: <span class="kp">&amp;</span><span class="nc">Struct2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// always prints &#34;struct2&#34;
</span><span class="c1"></span><span class="w">    </span><span class="c1">// this is known at compile-time
</span><span class="c1"></span><span class="w">    </span><span class="n">s2</span><span class="p">.</span><span class="n">print</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="c1">// single-width pointer
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="n">Struct2</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">print_trait</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// print &#34;struct&#34; or &#34;struct2&#34; ?
</span><span class="c1"></span><span class="w">    </span><span class="c1">// this is unknown at compile-time
</span><span class="c1"></span><span class="w">    </span><span class="n">t</span><span class="p">.</span><span class="n">print</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="c1">// Rust has to check the pointer at run-time
</span><span class="c1"></span><span class="w">    </span><span class="c1">// to figure out whether to use Struct&#39;s
</span><span class="c1"></span><span class="w">    </span><span class="c1">// or Struct2&#39;s implementation of &#34;print&#34;
</span><span class="c1"></span><span class="w">    </span><span class="c1">// so the pointer has to be double-width
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// single-width pointer to data
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Struct</span><span class="p">;</span><span class="w"> 
</span><span class="w">    </span><span class="n">print_struct</span><span class="p">(</span><span class="n">s</span><span class="p">);</span><span class="w"> </span><span class="c1">// prints &#34;struct&#34;
</span><span class="c1"></span><span class="w">    
</span><span class="w">    </span><span class="c1">// single-width pointer to data
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">s2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Struct2</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">print_struct2</span><span class="p">(</span><span class="n">s2</span><span class="p">);</span><span class="w"> </span><span class="c1">// prints &#34;struct2&#34;
</span><span class="c1"></span><span class="w">    
</span><span class="w">    </span><span class="c1">// unsized coercion from Struct to dyn Trait
</span><span class="c1"></span><span class="w">    </span><span class="c1">// double-width pointer to point to data AND Struct&#39;s vtable
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Struct</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">print_trait</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w"> </span><span class="c1">// prints &#34;struct&#34;
</span><span class="c1"></span><span class="w">    
</span><span class="w">    </span><span class="c1">// unsized coercion from Struct2 to dyn Trait
</span><span class="c1"></span><span class="w">    </span><span class="c1">// double-width pointer to point to data AND Struct2&#39;s vtable
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Struct2</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">print_trait</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w"> </span><span class="c1">// prints &#34;struct2&#34;
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><strong>关键要点</strong></p>
<ul>
<li>只有固定大小类型的实例才能被放置在栈上，也就是说，可以通过值来传递</li>
<li>不确定大小类型的实例不能放在栈上，必须通过引用来传递</li>
<li>指向不确定大小类型的指针是双宽度的，因为除了指向数据外，它们还需要做额外的记账工作，以跟踪数据的长度或指向一个 vtable</li>
</ul>
<h2 id="sized-trait"><code>Sized</code> Trait</h2>
<p>Rust中的 &ldquo;Sized&rdquo; trait 是一个自动 trait 和一个标记 trait。</p>
<p>自动 trait 是指当一个类型通过某些条件时，自动实现的 trait。标记 trait 是标记一个类型具有特定属性的 trait。标记 trait 没有任何 trait 项，如方法、关联函数、关联常量或关联类型。所有的自动 trait 都是标记 trait，但不是所有的标记 trait 都是自动 trait。自动 trait 必须是标记 trait，所以编译器可以为它们提供一个自动的缺省实现，如果 trait 有任何 trait 项，这是不可能的。</p>
<p>如果一个类型的所有成员也是 &ldquo;确定大小的&rdquo;，那么它就会得到一个自动的 <code>Sized</code> 实现。&ldquo;成员&quot;的含义取决于所包含的类型，例如：结构体的字段、枚举的变体、数组的元素、元组的项等等。一旦一个类型被 &ldquo;标记&rdquo; 了一个 <code>Sized</code> 的实现，这意味着在编译时就知道它的字节大小。</p>
<p>其他自动标记 trait 的例子是 <code>Send</code> 和 <code>Sync</code> trait。如果跨线程发送一个类型是安全的，那么这个类型就是可 <code>Send</code> 的。如果在线程之间共享该类型的引用是安全的，那么该类型就是可 <code>Sync</code> 的。如果一个类型的所有成员都是可 <code>Send</code> 和 <code>Sync</code> 的, 那么这个类型就会得到自动的 <code>Send</code> 和 <code>Sync</code> 实现。<code>Sized</code> 的特殊之处在于它不可能选择退出，不像其他自动标记 trait 可以选择退出。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#![feature(negative_impls)]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// this type is Sized, Send, and Sync
</span><span class="c1"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// opt-out of Send trait
</span><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="o">!</span><span class="nb">Send</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// opt-out of Sync trait
</span><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="o">!</span><span class="nb">Sync</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="o">!</span><span class="nb">Sized</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compile error
</span></code></pre></div><p>这似乎是合理的，因为我们可能有理由不希望我们的类型被跨线程发送或共享，但是很难想象我们会希望编译器 &ldquo;忘记&rdquo; 我们类型的大小，并将其视为一个不确定大小的类型，因为这不会带来任何好处，只会让类型更难处理。</p>
<p>另外，说得迂腐一点，<code>Sized</code> 在技术上并不是一个自动 trait，因为它没有使用 <code>auto</code> 关键字来定义，但是编译器对它的特殊处理使它的行为与自动 trait 非常相似，所以在实践中，把它看作是一个自动 trait 是可以的。</p>
<p><strong>关键要点</strong></p>
<ul>
<li><code>Sized</code> 是一个自动标记 trait</li>
</ul>
<h2 id="泛型中的-sized">泛型中的 <code>Sized</code></h2>
<p>每当我们编写任何泛型代码时，每一个泛型类型参数都会被默认的 <code>Sized</code> trait 自动绑定，这一点并不明显。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// this generic function...
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">func</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// ...desugars to...
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">func</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// ...which we can opt-out of by explicitly setting ?Sized...
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">func</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="c1">// ...which doesn&#39;t compile since t doesn&#39;t have
</span><span class="c1">// a known size so we must put it behind a pointer...
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">func</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">func</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span></code></pre></div><p><strong>专业提示</strong></p>
<ul>
<li><code>?Sized</code> can be pronounced <em>&ldquo;optionally sized&rdquo;</em> or <em>&ldquo;maybe sized&rdquo;</em> and adding it to a type parameter&rsquo;s bounds allows the type to be sized or unsized</li>
<li><code>?Sized</code> in general is referred to as a <em>&ldquo;widening bound&rdquo;</em> or a <em>&ldquo;relaxed bound&rdquo;</em> as it relaxes rather than constrains the type parameter</li>
<li><code>?Sized</code> is the only relaxed bound in Rust</li>
</ul>
<p>So why does this matter? Well, any time we&rsquo;re working with a generic type and that type is behind a pointer we almost always want to opt-out of the default <code>Sized</code> bound to make our function more flexible in what argument types it will accept. Also, if we don&rsquo;t opt-out of the default <code>Sized</code> bound we&rsquo;ll eventually get some surprising and confusing compile error messages.</p>
<p>Let me take you on the journey of the first generic function I ever wrote in Rust. I started learning Rust before the <code>dbg!</code> macro landed in stable so the only way to print debug values was to type out <code>println!(&quot;{:?}&quot;, some_value);</code> every time which is pretty tedious so I decided to write a <code>debug</code> helper function like this:</p>
<ul>
<li><code>?Sized</code> 可以读作 <em>&ldquo;optionally sized&rdquo;</em> 或 <em>&ldquo;maybe sized&rdquo;</em>，将它添加到类型参数的绑定中，可以让类型被确定大小或不确定大小。</li>
<li><code>?Sized</code> 一般被称为 &ldquo;拓宽绑定&rdquo; 或 &ldquo;宽松绑定&rdquo;，因为它放松而不是约束类型参数。</li>
<li><code>?Sized</code> 是 Rust 中唯一的宽松绑定。</li>
</ul>
<p>那么为什么这很重要呢？任何时候，当我们在处理泛型类型，并且该类型在一个指针后面时，我们几乎总是希望选择退出默认的 <code>Sized</code> 绑定，以使我们的函数在接受什么参数类型时更加灵活。另外，如果我们不选择退出默认的 <code>Sized</code> 绑定，我们最终会得到一些令人惊讶和困惑的编译错误信息。</p>
<p>让我带你了解一下我在 Rust 中写的第一个泛型函数的历程。在 <code>dbg!</code> 宏登陆稳定版之前，我就开始学习 Rust 了，所以打印调试值的唯一方法就是每次都要打出 <code>println!(&quot;{:?}&quot;, some_value);</code>，这是很乏味的，所以我决定写一个像这样的调试帮助函数。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fmt</span>::<span class="n">Debug</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">debug</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Debug</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// T: Debug + Sized
</span><span class="c1"></span><span class="w">    </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">t</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">debug</span><span class="p">(</span><span class="s">&#34;my str&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// T = &amp;str, &amp;str: Debug + Sized ✔️
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>到目前为止还不错，但函数会对传递给它的任何值拥有所有权，这有点烦人，所以我把函数改为只接受引用。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fmt</span>::<span class="n">Debug</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">dbg</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Debug</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// T: Debug + Sized
</span><span class="c1"></span><span class="w">    </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">t</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">dbg</span><span class="p">(</span><span class="s">&#34;my str&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// &amp;T = &amp;str, T = str, str: Debug + !Sized ❌
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>现在出现了这个错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0277</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compilation</span><span class="w"> </span><span class="n">time</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">8</span>:<span class="mi">9</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">3</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">fn</span> <span class="nf">dbg</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Debug</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">        </span><span class="o">-</span><span class="w"> </span><span class="n">required</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="n">this</span><span class="w"> </span><span class="n">bound</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="err">`</span><span class="n">dbg</span><span class="err">`</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="mi">8</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="n">dbg</span><span class="p">(</span><span class="s">&#34;my str&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">         </span><span class="o">^^^^^^^^</span><span class="w"> </span><span class="n">doesn</span><span class="na">&#39;t</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compile</span><span class="o">-</span><span class="n">time</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">std</span>::<span class="n">marker</span>::<span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">implemented</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">to</span><span class="w"> </span><span class="n">learn</span><span class="w"> </span><span class="n">more</span><span class="p">,</span><span class="w"> </span><span class="n">visit</span><span class="w"> </span><span class="o">&lt;</span><span class="n">https</span>:<span class="c1">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;
</span><span class="c1"></span><span class="n">help</span>: <span class="nc">consider</span><span class="w"> </span><span class="n">relaxing</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">implicit</span><span class="w"> </span><span class="err">`</span><span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">restriction</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">3</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">fn</span> <span class="nf">dbg</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Debug</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">   
</span></code></pre></div><p>当我第一次看到这个问题时，我发现它令人难以置信的混乱。尽管我的函数对参数的限制比以前更严格，但现在它却莫名其妙地抛出了一个编译错误！这是怎么回事？到底发生了什么？</p>
<p>我已经在上面的代码注释中破坏了答案，但基本上。Rust 在编译过程中把 <code>T</code> 解析为具体类型时，会执行模式匹配。这里有几个表格可以帮助澄清。</p>
<table>
<thead>
<tr>
<th>Type</th>
<th><code>T</code></th>
<th><code>&amp;T</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;str</code></td>
<td><code>T</code> = <code>&amp;str</code></td>
<td><code>T</code> = <code>str</code></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Type</th>
<th><code>Sized</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>str</code></td>
<td>❌</td>
</tr>
<tr>
<td><code>&amp;str</code></td>
<td>✔️</td>
</tr>
<tr>
<td><code>&amp;&amp;str</code></td>
<td>✔️</td>
</tr>
</tbody>
</table>
<p>这也是为什么我不得不在改成取用引用后，加了一个 <code>?Sized</code> 的绑定，使函数能正常工作。下面是可以工作的函数。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fmt</span>::<span class="n">Debug</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">debug</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Debug</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// T: Debug + ?Sized
</span><span class="c1"></span><span class="w">    </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">t</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">debug</span><span class="p">(</span><span class="s">&#34;my str&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// &amp;T = &amp;str, T = str, str: Debug + !Sized ✔️
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><strong>关键要点</strong></p>
<ul>
<li>所有的泛型类型参数默认都是自动绑定 <code>Sized</code>。</li>
<li>如果我们有一个泛型函数，它的参数是指针后面的一些 <code>T</code>，例如 <code>&amp;T</code>、<code>Box&lt;T&gt;</code>、<code>Rc&lt;T&gt;</code> 等，那么我们几乎总是希望用<code>T: ?Sized</code> 来退出默认的 <code>Sized</code> 约束。</li>
</ul>
<h2 id="unsized-类型">Unsized 类型</h2>
<h3 id="切片">切片</h3>
<p>最常见的切片是字符串切片 <code>&amp;str</code> 和数组切片 <code>&amp;[T]</code>。切片的好处是许多其他类型也会对其进行 coerce，所以利用切片和 Rust 的自动类型 coerce，我们可以编写灵活的 API。</p>
<p>类型 coerce 可以发生在几个地方，但最明显的是在函数参数和方法调用时。我们感兴趣的类型 coerce 是 deref coerce 和 unsized coerce。deref coerce 是指当 <code>T</code> 在 deref 操作之后被 coerce 成一个 <code>U</code>，即 <code>T: Deref&lt;Target = U&gt;</code>，例如 <code>String.deref() -&gt; str</code>。不确定大小 coerce 是指 <code>T</code> 被 coerce 成 <code>U</code>，其中 <code>T</code> 是一个确定大小的类型，<code>U</code> 是一个不确定大小的类型，即 <code>T: Unsize&lt;U&gt;</code>，例如 <code>[i32; 3] -&gt; [i32]</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// can now call &#34;method&#34; on
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 1) str or
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 2) String since String: Deref&lt;Target = str&gt;
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// can now call &#34;method&#34; on
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 1) any &amp;[T]
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 2) any U where U: Deref&lt;Target = [T]&gt;, e.g. Vec&lt;T&gt;
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 3) [T; N] for any N, since [T; N]: Unsize&lt;[T]&gt;
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">str_fun</span><span class="p">(</span><span class="n">s</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">slice_fun</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">s</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="n">T</span><span class="p">])</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">str_slice</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="s">&#34;str slice&#34;</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">string</span>: <span class="nb">String</span> <span class="o">=</span><span class="w"> </span><span class="s">&#34;string&#34;</span><span class="p">.</span><span class="n">to_owned</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// function args
</span><span class="c1"></span><span class="w">    </span><span class="n">str_fun</span><span class="p">(</span><span class="n">str_slice</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">str_fun</span><span class="p">(</span><span class="o">&amp;</span><span class="n">string</span><span class="p">);</span><span class="w"> </span><span class="c1">// deref coercion
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="c1">// method calls
</span><span class="c1"></span><span class="w">    </span><span class="n">str_slice</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">string</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// deref coercion
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">slice</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">three_array</span>: <span class="p">[</span><span class="kt">i32</span><span class="p">;</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">];</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">five_array</span>: <span class="p">[</span><span class="kt">i32</span><span class="p">;</span><span class="w"> </span><span class="mi">5</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">];</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">vec</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// function args
</span><span class="c1"></span><span class="w">    </span><span class="n">slice_fun</span><span class="p">(</span><span class="n">slice</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">slice_fun</span><span class="p">(</span><span class="o">&amp;</span><span class="n">vec</span><span class="p">);</span><span class="w"> </span><span class="c1">// deref coercion
</span><span class="c1"></span><span class="w">    </span><span class="n">slice_fun</span><span class="p">(</span><span class="o">&amp;</span><span class="n">three_array</span><span class="p">);</span><span class="w"> </span><span class="c1">// unsized coercion
</span><span class="c1"></span><span class="w">    </span><span class="n">slice_fun</span><span class="p">(</span><span class="o">&amp;</span><span class="n">five_array</span><span class="p">);</span><span class="w"> </span><span class="c1">// unsized coercion
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="c1">// method calls
</span><span class="c1"></span><span class="w">    </span><span class="n">slice</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">vec</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// deref coercion
</span><span class="c1"></span><span class="w">    </span><span class="n">three_array</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// unsized coercion
</span><span class="c1"></span><span class="w">    </span><span class="n">five_array</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// unsized coercion
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><strong>关键要点</strong></p>
<ul>
<li>利用切片和 Rust 的自动类型强制，我们可以编写灵活的 API。</li>
</ul>
<h3 id="trait-对象">Trait 对象</h3>
<p>Traits 默认是 <code>?Sized</code> 的。这个程序:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>抛出这个错误:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span>: <span class="err">`</span><span class="o">?</span><span class="n">Trait</span><span class="err">`</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">permitted</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">supertraits</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">1</span>:<span class="mi">14</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">1</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">              </span><span class="o">^^^^^^</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">traits</span><span class="w"> </span><span class="n">are</span><span class="w"> </span><span class="err">`</span><span class="o">?</span><span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="n">default</span><span class="w">
</span></code></pre></div><p>我们很快就会讨论为什么 trait 默认为 <code>?Sized</code>，但首先让我们问问自己，一个 trait 被 <code>?Sized</code> 的含义是什么？让我们把上面的例子去掉。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">Self</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>好的，默认情况下，trait 允许 <code>self</code> 是一个不确定大小的类型。正如我们前面所学，我们不能通过值来传递不确定大小的类型，所以这限制了我们在 trait 中定义方法的种类。应该是不可能写出一个通过取值来获取或返回 <code>self</code> 的方法，然而这令人惊讶的是，它的编译:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">);</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>然而，当我们试图实现该方法时，无论是通过提供一个默认的实现，还是通过实现一个不确定大小类型的 trait，我们都会得到编译错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>抛出:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0277</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="n">Self</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compilation</span><span class="w"> </span><span class="n">time</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">2</span>:<span class="mi">15</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">2</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">               </span><span class="o">^^^^</span><span class="w"> </span><span class="n">doesn</span><span class="na">&#39;t</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compile</span><span class="o">-</span><span class="n">time</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">std</span>::<span class="n">marker</span>::<span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">implemented</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="err">`</span><span class="n">Self</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">to</span><span class="w"> </span><span class="n">learn</span><span class="w"> </span><span class="n">more</span><span class="p">,</span><span class="w"> </span><span class="n">visit</span><span class="w"> </span><span class="o">&lt;</span><span class="n">https</span>:<span class="c1">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;
</span><span class="c1"></span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">all</span><span class="w"> </span><span class="n">local</span><span class="w"> </span><span class="n">variables</span><span class="w"> </span><span class="n">must</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">statically</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">size</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">unsized</span><span class="w"> </span><span class="n">locals</span><span class="w"> </span><span class="n">are</span><span class="w"> </span><span class="n">gated</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">an</span><span class="w"> </span><span class="n">unstable</span><span class="w"> </span><span class="n">feature</span><span class="w">
</span><span class="w"></span><span class="n">help</span>: <span class="nc">consider</span><span class="w"> </span><span class="n">further</span><span class="w"> </span><span class="n">restricting</span><span class="w"> </span><span class="err">`</span><span class="n">Self</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">2</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">Self</span>: <span class="nc">std</span>::<span class="n">marker</span>::<span class="nb">Sized</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                     </span><span class="o">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">error</span><span class="p">[</span><span class="n">E0277</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compilation</span><span class="w"> </span><span class="n">time</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">6</span>:<span class="mi">15</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">6</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">               </span><span class="o">^^^^</span><span class="w"> </span><span class="n">doesn</span><span class="na">&#39;t</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compile</span><span class="o">-</span><span class="n">time</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">std</span>::<span class="n">marker</span>::<span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">implemented</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">to</span><span class="w"> </span><span class="n">learn</span><span class="w"> </span><span class="n">more</span><span class="p">,</span><span class="w"> </span><span class="n">visit</span><span class="w"> </span><span class="o">&lt;</span><span class="n">https</span>:<span class="c1">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;
</span><span class="c1"></span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">all</span><span class="w"> </span><span class="n">local</span><span class="w"> </span><span class="n">variables</span><span class="w"> </span><span class="n">must</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">statically</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">size</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">unsized</span><span class="w"> </span><span class="n">locals</span><span class="w"> </span><span class="n">are</span><span class="w"> </span><span class="n">gated</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">an</span><span class="w"> </span><span class="n">unstable</span><span class="w"> </span><span class="n">feature</span><span class="w">
</span></code></pre></div><p>如果我们决心通过值来传递 <code>self</code>，我们可以通过显式绑定 trait 与 <code>Sized</code> 来解决第一个错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="nb">Sized</span> <span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>现在抛出:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0277</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compilation</span><span class="w"> </span><span class="n">time</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">7</span>:<span class="mi">6</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">1</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="nb">Sized</span> <span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">              </span><span class="o">-----</span><span class="w"> </span><span class="n">required</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="n">this</span><span class="w"> </span><span class="n">bound</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="err">`</span><span class="n">Trait</span><span class="err">`</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="mi">7</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">      </span><span class="o">^^^^^</span><span class="w"> </span><span class="n">doesn</span><span class="na">&#39;t</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compile</span><span class="o">-</span><span class="n">time</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">std</span>::<span class="n">marker</span>::<span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">implemented</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">to</span><span class="w"> </span><span class="n">learn</span><span class="w"> </span><span class="n">more</span><span class="p">,</span><span class="w"> </span><span class="n">visit</span><span class="w"> </span><span class="o">&lt;</span><span class="n">https</span>:<span class="c1">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;
</span></code></pre></div><p>这并没有问题，因为我们知道，当我们将 trait 与 <code>Sized</code> 绑定后，我们就不能再为诸如 <code>str</code> 这样的不确定大小类型实现它了。另一方面，如果我们真的想为 <code>str</code> 实现 trait，另一种解决方案是保留 <code>?Sized</code> trait，并通过引用传递 <code>self</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>与其将整个 trait 标记为 <code>?Sized</code> 或 <code>Sized</code>，我们有更细化和精确的选择，将单个方法标记为 <code>Sized</code>，像这样。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">Self</span>: <span class="nb">Sized</span> <span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles!?
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="s">&#34;str&#34;</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>令人惊讶的是，Rust编译 <code>impl Trait for str {}</code> 时没有任何抱怨，但当我们试图在一个不确定大小的类型上调用 <code>method</code> 时，它最终还是抓到了错误，所以一切正常。这有点怪异，但为我们提供了一些灵活性，只要我们从不调用 <code>Sized</code> 方法，我们就可以用一些 <code>Sized</code> 方法为不确定大小的类型实现 trait。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">Self</span>: <span class="nb">Sized</span> <span class="p">{}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method2</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// we never call &#34;method&#34; so no errors
</span><span class="c1"></span><span class="w">    </span><span class="s">&#34;str&#34;</span><span class="p">.</span><span class="n">method2</span><span class="p">();</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>现在回到最初的问题，为什么 trait 默认是 <code>?Sized</code>？答案是 trait 对象。trait 对象本质上是不确定大小的，因为任何大小的类型都可以实现 trait，因此我们只有在 <code>Trait: ?Sized</code> 的情况下，才能为 <code>dyn Trait</code> 实现 <code>Trait</code>。用代码来说：</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// the above is REQUIRED for
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// compiler magic here
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// since `dyn Trait` is unsized
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="c1">// and now we can use `dyn Trait` in our program
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span></code></pre></div><p>如果我们尝试实际编译上述程序，我们会得到：</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0371</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="n">object</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="p">(</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">&#39;static</span><span class="p">)</span><span class="err">`</span><span class="w"> </span><span class="n">automatically</span><span class="w"> </span><span class="n">implements</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait</span><span class="err">`</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">5</span>:<span class="mi">1</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">5</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="o">^^^^^^^^^^^^^^^^^^^^^^^^</span><span class="w"> </span><span class="err">`</span><span class="p">(</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">&#39;static</span><span class="p">)</span><span class="err">`</span><span class="w"> </span><span class="n">automatically</span><span class="w"> </span><span class="n">implements</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait</span><span class="err">`</span><span class="w">
</span></code></pre></div><p>这就是编译器告诉我们要冷静，因为它自动为 <code>dyn Trait</code> 提供了 <code>Trait</code> 的实现。同样，由于 <code>dyn Trait</code> 是不确定大小的，编译器只能在 <code>Trait: ?Sized</code> 的情况下提供这个实现。如果我们将 <code>Trait</code> 与 <code>Sized</code> 绑定，那么 <code>Trait</code> 就变成了 &ldquo;对象不安全&rdquo; 的了，这意味着我们不能将实现 <code>Trait</code> 的类型转为 <code>dyn Trait</code> 的 trait 对象。正如预期的那样，这个程序不能编译:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="nb">Sized</span> <span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compile error
</span></code></pre></div><p>抛出:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0038</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">made</span><span class="w"> </span><span class="n">into</span><span class="w"> </span><span class="n">an</span><span class="w"> </span><span class="n">object</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">3</span>:<span class="mi">18</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">1</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="nb">Sized</span> <span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">       </span><span class="o">-----</span><span class="w">  </span><span class="o">-----</span><span class="w"> </span><span class="p">...</span><span class="n">because</span><span class="w"> </span><span class="n">it</span><span class="w"> </span><span class="n">requires</span><span class="w"> </span><span class="err">`</span><span class="n">Self</span>: <span class="nb">Sized</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">       </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">       </span><span class="n">this</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">made</span><span class="w"> </span><span class="n">into</span><span class="w"> </span><span class="n">an</span><span class="w"> </span><span class="n">object</span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="mi">2</span><span class="w"> </span><span class="o">|</span><span class="w"> 
</span><span class="w"></span><span class="mi">3</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                </span><span class="o">^^^^^^^^^^</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">made</span><span class="w"> </span><span class="n">into</span><span class="w"> </span><span class="n">an</span><span class="w"> </span><span class="n">object</span><span class="w">
</span></code></pre></div><p>让我们尝试用 <code>Sized</code> 方法制作一个 <code>?Sized</code> trait，看看能否将它转一个 trait 对象。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">Self</span>: <span class="nb">Sized</span> <span class="p">{}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method2</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">arg</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="w">    </span><span class="n">arg</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">    </span><span class="n">arg</span><span class="p">.</span><span class="n">method2</span><span class="p">();</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>正如我们之前看到的那样，只要我们不调用 trait 对象上的 <code>Sized</code> 方法，一切都没问题。</p>
<p><strong>关键要点</strong></p>
<ul>
<li>所有的 traits 默认都是 <code>?Sized</code> 的。</li>
<li><code>Trait: ?Sized</code> 是 <code>impl Trait for dyn Trait</code> 所必需的。</li>
<li>我们可以在每个方法的基础上要求 <code>Self: Sized</code>。</li>
<li>由 <code>Sized</code> 绑定的 trait 不能成为 trait 对象。</li>
</ul>
<h3 id="trait-对象限制">trait 对象限制</h3>
<p>即使一个 traitt 是对象安全的，也会有一些与大小相关的边缘情况，这些情况限制了哪些类型可以转换为 trait 对象，以及一个 trait 对象可以表示多少个和什么样的 trait。</p>
<h4 id="不能将不确定大小的类型转换为--trait-对象">不能将不确定大小的类型转换为  Trait 对象</h4>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">generic</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nb">ToString</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">trait_object</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="nb">ToString</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">generic</span><span class="p">(</span><span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;String&#34;</span><span class="p">));</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="w">    </span><span class="n">generic</span><span class="p">(</span><span class="s">&#34;str&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="w">    </span><span class="n">trait_object</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;String&#34;</span><span class="p">));</span><span class="w"> </span><span class="c1">// compiles, unsized coercion
</span><span class="c1"></span><span class="w">    </span><span class="n">trait_object</span><span class="p">(</span><span class="s">&#34;str&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// compile error, unsized coercion impossible
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>抛出:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0277</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compilation</span><span class="w"> </span><span class="n">time</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">8</span>:<span class="mi">18</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">8</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="n">trait_object</span><span class="p">(</span><span class="s">&#34;str&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">  </span><span class="o">|</span><span class="w">                  </span><span class="o">^^^^^</span><span class="w"> </span><span class="n">doesn</span><span class="na">&#39;t</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compile</span><span class="o">-</span><span class="n">time</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">std</span>::<span class="n">marker</span>::<span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">implemented</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">to</span><span class="w"> </span><span class="n">learn</span><span class="w"> </span><span class="n">more</span><span class="p">,</span><span class="w"> </span><span class="n">visit</span><span class="w"> </span><span class="o">&lt;</span><span class="n">https</span>:<span class="c1">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;
</span><span class="c1"></span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">required</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">cast</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">object</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="n">dyn</span><span class="w"> </span><span class="n">std</span>::<span class="n">string</span>::<span class="nb">ToString</span><span class="err">`</span><span class="w">
</span></code></pre></div><p>为什么将一个 <code>&amp;String</code> 传给一个期望得到 <code>&amp;dyn ToString</code> 的函数，是因为类型胁迫。<code>String</code> 实现了 <code>ToString</code>，我们可以通过不确定大小的胁迫将 <code>String</code> 这样的确定大小的类型转换成 <code>dyn ToString</code> 这样的不确定大小的类型。<code>str</code> 也实现了 <code>ToString</code>，将 <code>str</code> 转换为 <code>dyn ToString</code> 也需要一个不确定大小的胁迫，但 <code>str</code> 已经是不确定大小的了！我们如何将一个已经是不确定大小的类型，变成另一个不确定大小的类型？</p>
<p><code>&amp;str</code> 指针是双宽的，存储一个数据指针和数据长度。<code>&amp;dyn ToString</code> 指针也是双宽度的，存储一个指向数据的指针和一个指向 vtable 的指针。要把一个 <code>&amp;str</code> 胁迫成一个 <code>&amp;dyn toString</code>，就需要一个三倍宽度的指针来存储一个指向数据的指针、数据长度和一个指向 vtable 的指针。Rust 不支持三倍宽度指针，所以不可能将一个不确定大小的类型转换成一个 trait 对象。</p>
<p>前面2段用表格总结了一下。</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Pointer to Data</th>
<th>Data Length</th>
<th>Pointer to VTable</th>
<th>Total Width</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;String</code></td>
<td>✔️</td>
<td>❌</td>
<td>❌</td>
<td>1 ✔️</td>
</tr>
<tr>
<td><code>&amp;str</code></td>
<td>✔️</td>
<td>✔️</td>
<td>❌</td>
<td>2 ✔️</td>
</tr>
<tr>
<td><code>&amp;String as &amp;dyn ToString</code></td>
<td>✔️</td>
<td>❌</td>
<td>✔️</td>
<td>2 ✔️</td>
</tr>
<tr>
<td><code>&amp;str as &amp;dyn ToString</code></td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>3 ❌</td>
</tr>
</tbody>
</table>
<h4 id="不能创建-multi-trait-对象">不能创建 Multi-Trait 对象</h4>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="p">(</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="p">))</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>抛出:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0225</span><span class="p">]</span>: <span class="nc">only</span><span class="w"> </span><span class="n">auto</span><span class="w"> </span><span class="n">traits</span><span class="w"> </span><span class="n">can</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">used</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">additional</span><span class="w"> </span><span class="n">traits</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">object</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">4</span>:<span class="mi">30</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">4</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="p">(</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="p">))</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                      </span><span class="o">-----</span><span class="w">   </span><span class="o">^^^^^^</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                      </span><span class="o">|</span><span class="w">       </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                      </span><span class="o">|</span><span class="w">       </span><span class="n">additional</span><span class="w"> </span><span class="n">non</span><span class="o">-</span><span class="n">auto</span><span class="w"> </span><span class="k">trait</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                      </span><span class="o">|</span><span class="w">       </span><span class="k">trait</span><span class="w"> </span><span class="n">alias</span><span class="w"> </span><span class="n">used</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">object</span><span class="w"> </span><span class="k">type</span> <span class="p">(</span><span class="n">additional</span><span class="w"> </span><span class="k">use</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                      </span><span class="n">first</span><span class="w"> </span><span class="n">non</span><span class="o">-</span><span class="n">auto</span><span class="w"> </span><span class="k">trait</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                      </span><span class="k">trait</span><span class="w"> </span><span class="n">alias</span><span class="w"> </span><span class="n">used</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">object</span><span class="w"> </span><span class="k">type</span> <span class="p">(</span><span class="n">first</span><span class="w"> </span><span class="k">use</span><span class="p">)</span><span class="w">
</span></code></pre></div><p>请记住，trait 对象指针是双宽度的：存储1个指向数据的指针和另一个指向 vtable 的指针，但这里有2个trait，所以有2个 vtable，这就需要 <code>&amp;(dyn Trait + Trait2)</code> 指针是3个宽度。像 <code>Send</code> 和 <code>Sync</code> 这样的自动 trait 是允许的，因为它们没有方法，因此没有 vtable。</p>
<p>这方面的变通方法是通过使用另一个 trait 来组合 vtable，比如这样。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method2</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait3</span>: <span class="nc">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// auto blanket impl Trait3 for any type that also impls Trait &amp; Trait2
</span><span class="c1"></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Trait3</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">T</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// from `dyn Trait + Trait2` to `dyn Trait3` 
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait3</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">t</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="w">    </span><span class="n">t</span><span class="p">.</span><span class="n">method2</span><span class="p">();</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这个变通方法的一个缺点是，Rust 不支持 supertrait 向上转换。这意味着，如果我们有一个 <code>dyn Trait3</code>，我们不能在需要 <code>dyn Trait</code> 或 <code>dyn Trait2</code> 的地方使用它。这个程序不能编译。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method2</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait3</span>: <span class="nc">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Trait3</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">T</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">takes_trait</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">takes_trait2</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait2</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Struct</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">takes_trait</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">    </span><span class="n">takes_trait2</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>抛出:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0308</span><span class="p">]</span>: <span class="nc">mismatched</span><span class="w"> </span><span class="n">types</span><span class="w">
</span><span class="w">  </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">22</span>:<span class="mi">17</span><span class="w">
</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">22</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="n">takes_trait</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w">
</span><span class="w">   </span><span class="o">|</span><span class="w">                 </span><span class="o">^</span><span class="w"> </span><span class="n">expected</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait</span><span class="err">`</span><span class="p">,</span><span class="w"> </span><span class="n">found</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait3</span><span class="err">`</span><span class="w">
</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">expected</span><span class="w"> </span><span class="n">reference</span><span class="w"> </span><span class="err">`</span><span class="o">&amp;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="err">`</span><span class="w">
</span><span class="w">              </span><span class="n">found</span><span class="w"> </span><span class="n">reference</span><span class="w"> </span><span class="err">`</span><span class="o">&amp;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait3</span><span class="err">`</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">error</span><span class="p">[</span><span class="n">E0308</span><span class="p">]</span>: <span class="nc">mismatched</span><span class="w"> </span><span class="n">types</span><span class="w">
</span><span class="w">  </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">23</span>:<span class="mi">18</span><span class="w">
</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">23</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="n">takes_trait2</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w">
</span><span class="w">   </span><span class="o">|</span><span class="w">                  </span><span class="o">^</span><span class="w"> </span><span class="n">expected</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait2</span><span class="err">`</span><span class="p">,</span><span class="w"> </span><span class="n">found</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait3</span><span class="err">`</span><span class="w">
</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">expected</span><span class="w"> </span><span class="n">reference</span><span class="w"> </span><span class="err">`</span><span class="o">&amp;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait2</span><span class="err">`</span><span class="w">
</span><span class="w">              </span><span class="n">found</span><span class="w"> </span><span class="n">reference</span><span class="w"> </span><span class="err">`</span><span class="o">&amp;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait3</span><span class="err">`</span><span class="w">
</span></code></pre></div><p>这是因为 <code>dyn Trait3</code> 是一个不同于 <code>dyn Trait</code> 和 <code>dyn Trait</code> 的类型，因为它们有不同的 vtable 布局，尽管  <code>dyn Trait3</code> 确实包含 <code>dyn Trait</code> 和 <code>dyn Trait2</code> 的所有方法。这里的变通办法是增加显式转换方法。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait3</span>: <span class="nc">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">as_trait</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">as_trait2</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait2</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Trait3</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">T</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">as_trait</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">as_trait2</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">takes_trait</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">takes_trait2</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait2</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Struct</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">takes_trait</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">as_trait</span><span class="p">());</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="w">    </span><span class="n">takes_trait2</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">as_trait2</span><span class="p">());</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这是一个简单而直接的工作方法，似乎是 Rust 编译器可以为我们自动完成的事情。Rust 并不羞于执行类型胁迫，正如我们在 deref 和 unsized 胁迫中所看到的那样，那么为什么没有 trait 向上胁迫呢？这是一个很好的问题，有一个熟悉的答案：Rust核心团队正在研究其他更高优先级和更高影响的功能。很公平。</p>
<p><strong>关键要点</strong></p>
<ul>
<li>Rust 不支持宽度超过2的指针，所以&hellip;
<ul>
<li>我们不能将不确定大小的类型转换 trait 对象</li>
<li>我们不能有多个 trait 对象，但我们可以通过将多个 trait 强转成一个 trait 来解决这个问题。</li>
</ul>
</li>
</ul>
<h3 id="用户自定义的不确定大小类型">用户自定义的不确定大小类型</h3>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">Unsized</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">unsized_field</span>: <span class="p">[</span><span class="kt">i32</span><span class="p">],</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>我们可以通过赋予结构体一个不确定大小的字段来定义一个不确定大小的结构体。不确定大小的结构体只能有1个不确定大小的字段，而且它必须是结构体中的最后一个字段。这是一个要求，这样编译器就可以在编译时确定结构中每个字段的起始偏移量，这对高效快速的字段访问非常重要。此外，使用双宽度指针最多只能跟踪一个不确定大小的字段，因为更多的不确定大小的字段将需要更多的宽度。</p>
<p>那么我们到底该如何实例化这个东西呢？和我们处理任何不确定大小类型的方式一样：先做一个可确定大小的版本，然后胁迫它变成不确定大小的版本。然而，<code>Unsized</code> 的定义总是不确定大小的，没有办法制作它的可确定大小版本！唯一的变通办法是使结构体通用化，使它可以存在于确定大小的版本中和不确定大小的版本中。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">MaybeSized</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">maybe_sized</span>: <span class="nc">T</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// unsized coercion from MaybeSized&lt;[i32; 3]&gt; to MaybeSized&lt;[i32]&gt;
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">ms</span>: <span class="kp">&amp;</span><span class="nc">MaybeSized</span><span class="o">&lt;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">MaybeSized</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">maybe_sized</span>: <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w"> </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>那么这有什么用处呢？没有什么特别引人注目的，用户定义的不确定大小的类型现在是一个非常半成品的功能，它们的局限性超过了任何好处。这里提到它们纯粹是为了全面性。</p>
<p><strong>有趣的事实：</strong> <code>std::fi::OsStr</code> 和 <code>std::path::Path</code> 是标准库中的2个不确定大小的结构，你可能已经在不知不觉中使用过了。</p>
<p><strong>关键 要点</strong></p>
<ul>
<li>用户定义的不确定大小类型现在是一个半成品的功能，它们的局限性超过了任何好处</li>
</ul>
<h2 id="zero-sized-类型">Zero-Sized 类型</h2>
<p>Zero-Sized 乍听起来很奇异，但到处都在使用。</p>
<h3 id="unit-类型">Unit 类型</h3>
<p>最常见的零大小类型是 Unit 类型: <code>()</code>. 所有的空块 <code>{}</code> 都评估为 <code>()</code>，如果块是非空的，但最后一个表达式用分号 <code>;</code> 丢弃，那么它也评估为 <code>()</code>。例子如下:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">a</span>: <span class="p">()</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{};</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">b</span>: <span class="kt">i32</span> <span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="mi">5</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">c</span>: <span class="p">()</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="mi">5</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>每一个没有显式返回类型的函数都会默认返回 <code>()</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// with sugar
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">()</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// desugared
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="p">()</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>由于 <code>()</code> 是零字节，所以 <code>()</code> 的所有实例都是一样的，这使得 <code>Default</code>、<code>PartialEq</code> 和 <code>Ord</code> 的实现非常简单。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">cmp</span>::<span class="n">Ordering</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="nb">Default</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">default</span><span class="p">()</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="nb">PartialEq</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">eq</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">_other</span>: <span class="kp">&amp;</span><span class="p">())</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kc">true</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">ne</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">_other</span>: <span class="kp">&amp;</span><span class="p">())</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kc">false</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="nb">Ord</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">_other</span>: <span class="kp">&amp;</span><span class="p">())</span><span class="w"> </span>-&gt; <span class="nc">Ordering</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Ordering</span>::<span class="n">Equal</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>编译器理解 <code>()</code> 是零大小的，并优化了与 <code>()</code> 实例的交互。例如，<code>Vec&lt;()&gt;</code> 永远不会进行任何堆分配，从 <code>Vec</code> 中推送和弹出 <code>()</code> 只是增加和减少它的 <code>len</code> 字段。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// zero capacity is all the capacity we need to &#34;store&#34; infinitely many ()
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">vec</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="c1">// causes no heap allocations or vec capacity changes
</span><span class="c1"></span><span class="w">    </span><span class="n">vec</span><span class="p">.</span><span class="n">push</span><span class="p">(());</span><span class="w"> </span><span class="c1">// len++
</span><span class="c1"></span><span class="w">    </span><span class="n">vec</span><span class="p">.</span><span class="n">push</span><span class="p">(());</span><span class="w"> </span><span class="c1">// len++
</span><span class="c1"></span><span class="w">    </span><span class="n">vec</span><span class="p">.</span><span class="n">push</span><span class="p">(());</span><span class="w"> </span><span class="c1">// len++
</span><span class="c1"></span><span class="w">    </span><span class="n">vec</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span><span class="w"> </span><span class="c1">// len--
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="n">vec</span><span class="p">.</span><span class="n">len</span><span class="p">());</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>上面的例子没有实际应用，但是有没有什么情况下，我们可以有意义地利用上面的想法呢？令人惊讶的是，是的，我们可以通过将 <code>Value</code> 设置为 <code>()</code>，从 <code>HashMap&lt;Key，Value&gt;</code> 中得到一个高效的 <code>HashSet&lt;Key&gt;</code> 实现，这正是 Rust 标准库中 <code>HashSet</code> 的工作原理。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// std::collections::HashSet
</span><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">map</span>: <span class="nc">HashMap</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="w"> </span><span class="p">()</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><strong>关键要点</strong></p>
<ul>
<li>ZST 的所有实例都是彼此相等的。</li>
<li>Rust 编译器知道优化与 ZSTs 的交互。</li>
</ul>
<h3 id="用户自定义的-unit-结构体">用户自定义的 Unit 结构体</h3>
<p>Unit 结构体是指不含任何字段的结构体，如</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">Struct</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>属性，使 Unit 结构体比 <code>()</code> 更有用。</p>
<ul>
<li>我们可以在自己的 Unit 结构体上实现任何我们想要的 trait，Rust 的 trait 孤儿规则阻止我们实现标准库中定义的 <code>()</code> 的 trait。</li>
<li>在我们的程序中，Unit 结构体可以被赋予有意义的名称。</li>
<li>Unit 结构体，就像所有结构体一样，默认情况下是不可复制的，这在我们的程序中可能很重要。</li>
</ul>
<h3 id="never-类型">Never 类型</h3>
<p>第二种最常见的 ZST 是 never 类型: <code>!</code>。 之所以称为 never 类型，是因为它代表的是永远不会解析到任何值的计算。</p>
<p><code>!</code> 的几个有趣的特性使它不同于 <code>()</code>。</p>
<ul>
<li><code>!</code> 可以被胁迫成任何其他类型。</li>
<li>不可能创建 <code>!</code> 的实例。</li>
</ul>
<p>第一个有趣的属性对人体工程学非常有用，允许我们使用像这样的方便的宏。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// nice for quick prototyping
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">example</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="n">T</span><span class="p">])</span><span class="w"> </span>-&gt; <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">unimplemented</span><span class="o">!</span><span class="p">()</span><span class="w"> </span><span class="c1">// ! coerced to Vec&lt;T&gt;
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">example2</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="kt">i32</span> <span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// we know this parse call will never fail
</span><span class="c1"></span><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="s">&#34;123&#34;</span><span class="p">.</span><span class="n">parse</span>::<span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Some</span><span class="p">(</span><span class="n">num</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">num</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">unreachable</span><span class="o">!</span><span class="p">(),</span><span class="w"> </span><span class="c1">// ! coerced to i32
</span><span class="c1"></span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">example3</span><span class="p">(</span><span class="n">some_condition</span>: <span class="kt">bool</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nb">&#39;static</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="o">!</span><span class="n">some_condition</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">panic</span><span class="o">!</span><span class="p">()</span><span class="w"> </span><span class="c1">// ! coerced to &amp;str
</span><span class="c1"></span><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="s">&#34;str&#34;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><code>break</code>, <code>continue</code> 和 <code>return</code> 表达式也拥有类型 <code>!</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">example</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="kt">i32</span> <span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// we can set the type of x to anything here
</span><span class="c1"></span><span class="w">    </span><span class="c1">// since the block never evaluates to any value
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">x</span>: <span class="nb">String</span> <span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="mi">123</span><span class="w"> </span><span class="c1">// ! coerced to String
</span><span class="c1"></span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">example2</span><span class="p">(</span><span class="n">nums</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">])</span><span class="w"> </span>-&gt; <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">filtered</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">nums</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">filtered</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="o">*</span><span class="n">num</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="k">break</span><span class="w"> </span><span class="c1">// ! coerced to i32
</span><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="o">*</span><span class="n">num</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="o">*</span><span class="n">num</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="k">continue</span><span class="w"> </span><span class="c1">// ! coerced to i32
</span><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="n">filtered</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><code>!</code> 的第二个有趣的属性允许我们在类型层面上将某些状态标记为不可能。让我们以这个函数签名为例。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">function</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Success</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>我们知道，如果函数返回并成功，<code>Result</code> 将包含一些类型为 <code>Success</code> 的实例，如果函数出错，<code>Result</code> 将包含一些类型为 <code>Error</code> 的实例。现在我们来对比一下这个函数的签名。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">function</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Success</span><span class="p">,</span><span class="w"> </span><span class="o">!&gt;</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>我们知道，如果函数返回并且成功了，<code>Result</code> 将持有一些类型为 <code>Success</code> 的实例，如果出错了&hellip;但等等，它永远不会出错，因为不可能创建 <code>!</code> 的实例。鉴于上面的函数签名，我们知道这个函数永远不会出错。那这个函数签名呢:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">function</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;!</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>前面的反义词现在是真的：如果这个函数返回，我们知道它肯定出错了，因为成功是不可能的。</p>
<p>前一个例子的实际应用是 <code>FromStr</code> 对 <code>String</code> 的实现，因为将 <code>&amp;str</code> 转换为 <code>String</code> 是不可能失败的。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#![feature(never_type)]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="kt">str</span>::<span class="n">FromStr</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">FromStr</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="nb">String</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nb">Err</span> <span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">from_str</span><span class="p">(</span><span class="n">s</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span>::<span class="nb">Err</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Ok</span><span class="p">(</span><span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="n">s</span><span class="p">))</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>后一个例子的实际应用是一个运行无限循环的函数，这个函数永远不打算返回，就像服务器响应客户端的请求一样，除非有一些错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#![feature(never_type)]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">run_server</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;!</span><span class="p">,</span><span class="w"> </span><span class="n">ConnectionError</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">loop</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="w"> </span><span class="n">response</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_request</span><span class="p">()</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">request</span><span class="p">.</span><span class="n">process</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="n">response</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">result</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这个 <code>feature</code> 标记是必要的，因为当 never 类型存在并在 Rust 内部工作时，在用户代码中使用它仍然被认为是实验性的。</p>
<p><strong>要点</strong></p>
<ul>
<li><code>!</code> 可以被胁迫成任何其他类型。</li>
<li>不可能创建 <code>!</code> 的实例，我们可以用它来标记某些状态，在类型级别上是不可能的。</li>
</ul>
<h3 id="用户定义的伪-never-类型">用户定义的伪 Never 类型</h3>
<p>虽然不可能定义一个可以强制到任何其他类型的类型，但可以定义一个不可能创建实例的类型，比如一个 <code>enum</code>，没有任何变体。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">enum</span> <span class="nc">Void</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>这使得我们可以从前面的2个例子中移除 <code>feature</code> 标记，并使用稳定的 Rust 实现它们。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">enum</span> <span class="nc">Void</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// example 1
</span><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="n">FromStr</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="nb">String</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nb">Err</span> <span class="o">=</span><span class="w"> </span><span class="n">Void</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">from_str</span><span class="p">(</span><span class="n">s</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span>::<span class="nb">Err</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Ok</span><span class="p">(</span><span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="n">s</span><span class="p">))</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// example 2
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">run_server</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Void</span><span class="p">,</span><span class="w"> </span><span class="n">ConnectionError</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">loop</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="w"> </span><span class="n">response</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_request</span><span class="p">()</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">request</span><span class="p">.</span><span class="n">process</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="n">response</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">result</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这是 Rust 标准库使用的技术，因为 <code>String</code> 的 <code>FromStr</code> 实现的 <code>Err</code> 类型是 <code>std::convert::Infallible</code>，它被定义为:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">Infallible</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><h3 id="phantomdata">PhantomData</h3>
<p>第三种最常用的 ZST 可能是 <code>PhantomData</code>。<code>PhantomData</code> 是一个零大小的标记结构，它可以用来 &ldquo;标记&rdquo; 一个包含的结构体具有某些属性。它和它的自动标记 trait 表亲如 <code>Sized</code>、<code>Send</code>、<code>Sync</code> 等在目的上是相似的，但作为一个标记结构体的使用方式有点不同。对 <code>PhantomData</code> 进行彻底的解释并探索它的所有用例不在本文的范围内，所以我们只简单地介绍一个简单的例子。回顾一下前面介绍的这个代码片段。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#![feature(negative_impls)]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// this type is Send and Sync
</span><span class="c1"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// opt-out of Send trait
</span><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="o">!</span><span class="nb">Send</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// opt-out of Sync trait
</span><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="o">!</span><span class="nb">Sync</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>很不幸，我们必须使用一个 <code>feature</code> 标记，我们是否可以只使用稳定的 Rust 来达到同样的结果？我们已经了解到，一个类型只有当它的所有成员也是 <code>Send</code> 和 <code>Sync</code> 时才是 <code>Send</code> 和 <code>Sync</code> 的，所以我们可以像 <code>Rc&lt;()&gt;</code> 一样在 <code>Struct</code> 中添加一个 <code>!Send</code> 和 <code>!Sync</code> 成员。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">rc</span>::<span class="n">Rc</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// this type is not Send or Sync
</span><span class="c1"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// adds 8 bytes to every instance
</span><span class="c1"></span><span class="w">    </span><span class="n">_not_send_or_sync</span>: <span class="nc">Rc</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这不太理想，因为它增加了 <code>Struct</code> 的每个实例的大小，而且我们现在每次要创建一个 <code>Struct</code> 时，还得凭空想象出一个  <code>Rc&lt;()&gt;</code>。由于 <code>PhantomData</code> 是一个 ZST，它解决了这两个问题。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">rc</span>::<span class="n">Rc</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">marker</span>::<span class="n">PhantomData</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">type</span> <span class="nc">NotSendOrSyncPhantom</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PhantomData</span><span class="o">&lt;</span><span class="n">Rc</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;&gt;</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// this type is not Send or Sync
</span><span class="c1"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// adds no additional size to instances
</span><span class="c1"></span><span class="w">    </span><span class="n">_not_send_or_sync</span>: <span class="nc">NotSendOrSyncPhantom</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><strong>关键要点</strong></p>
<ul>
<li><code>PhantomData</code> 是一个零大小的标记结构，它可以用来 &ldquo;标记&rdquo; 一个包含的结构体具有某些属性。</li>
</ul>
<h2 id="结论">结论</h2>
<ul>
<li>只有确定大小类型的实例才能被放置在栈上，也就是说，可以通过值来传递</li>
<li>不确定大小类型的实例不能放在栈上，必须通过引用来传递。</li>
<li>指向不确定大小类型的指针是双宽度的，因为除了指向数据外，它们还需要做额外的记账工作，以跟踪数据的长度或指向一个  vtable。</li>
<li><code>Sized</code> 是一个 &ldquo;自动&rdquo; 标记 trait。</li>
<li>所有的泛型类型参数默认都是自动绑定 <code>Sized</code> 的。</li>
<li>如果我们有一个泛型函数，它的参数是指针后面的一些 <code>T</code>，例如 <code>&amp;T</code>、<code>Box&lt;T&gt;</code>、<code>Rc&lt;T&gt;</code> 等，那么我们几乎总是希望用 <code>T: ?Sized</code> 来退出默认的 <code>Sized</code> 约束。</li>
<li>利用切片和 Rust 的自动类型强制，我们可以编写灵活的 API。</li>
<li>所有的 trait 默认为 <code>Sized</code>。</li>
<li><code>Trait: ?Sized</code> 是 <code>impl Trait for dyn Trait</code> 所必需的。</li>
<li>我们可以根据每个方法要求 <code>Self: Sized</code>。</li>
<li>由 <code>Sized </code> 绑定的 trait 不能被制作成 trait 对象。</li>
<li>Rust 不支持宽度超过2的指针，所以&hellip;
<ul>
<li>我们不能将不确定大小的类型转换为 trait 对象</li>
<li>我们不能有多 trait 对象，但我们可以通过将多个 trait 转化成一个 trait 来解决这个问题。</li>
</ul>
</li>
<li>用户定义的不确定大小的类型现在是一个半成品的功能，它们的局限性超过了任何好处</li>
<li>ZST 的所有实例都是彼此相等的。</li>
<li>Rust 编译器知道优化与 ZSTs 的交互。</li>
<li><code>!</code> 可以被胁迫成任何其他类型。</li>
<li>不可能创建 <code>!</code> 的实例，我们可以用它来标记某些状态，在类型级别上是不可能的。</li>
<li><code>PhantomData</code> 是一个零大小的标记结构，它可以用来 &ldquo;标记&rdquo; 一个包含的结构体具有某些属性。</li>
</ul>
<h2 id="讨论">讨论</h2>
<p>在这里讨论本文:</p>
<ul>
<li><a href="https://users.rust-lang.org/t/blog-post-sizedness-in-rust/46293?u=pretzelhammer">official Rust users forum</a></li>
<li><a href="https://www.reddit.com/r/learnrust/comments/hx2jd0/sizedness_in_rust/">learnrust subreddit</a></li>
<li><a href="https://twitter.com/pretzelhammer/status/1286669073137491973">Twitter</a></li>
<li><a href="https://www.reddit.com/r/rust/comments/hxips7/sizedness_in_rust/">rust subreddit</a></li>
<li><a href="https://github.com/pretzelhammer/rust-blog/discussions">Github</a></li>
</ul>
<h2 id="通知">通知</h2>
<p>当发表下一篇博文时，会收到通知:</p>
<ul>
<li><a href="https://twitter.com/pretzelhammer">Following pretzelhammer on Twitter</a> or</li>
<li>Watching this repo&rsquo;s releases (click <code>Watch</code> -&gt; click <code>Custom</code> -&gt; select <code>Releases</code> -&gt; click <code>Apply</code>)</li>
</ul>
<h2 id="更多阅读">更多阅读</h2>
<ul>
<li><a href="./common-rust-lifetime-misconceptions.md">Common Rust Lifetime Misconceptions</a></li>
<li><a href="./tour-of-rusts-standard-library-traits.md">Tour of Rust&rsquo;s Standard Library Traits</a></li>
<li><a href="./learning-rust-in-2020.md">Learning Rust in 2020</a></li>
<li><a href="./too-many-brainfuck-compilers.md">Learn Assembly with Entirely Too Many Brainfuck Compilers</a></li>
</ul>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rustlang" term="rustlang" label="rustlang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust" term="rust" label="Rust" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/sizedness" term="sizedness" label="Sizedness" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Call Site Dependency Injection]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-04-05-call-site-dependency-injection/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-for-the-love-of-macros/?utm_source=atom_feed" rel="related" type="text/html" title="For the Love of Macros" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-std-error-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Std Error in Rust" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-two-beautiful-rust-programs/?utm_source=atom_feed" rel="related" type="text/html" title="Two Beautiful Rust Programs" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-20-pest-grammars/?utm_source=atom_feed" rel="related" type="text/html" title="Pest Grammars" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-19-parser-api-example-ini/?utm_source=atom_feed" rel="related" type="text/html" title="Parser API - 解析 INI" />
            
                <id>https://ohmyweekly.github.io/notes/2021-04-05-call-site-dependency-injection/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-04-05T00:00:00+08:00</published>
            <updated>2021-04-05T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Call Site Dependency Injection</blockquote><p>本帖文档调用站点依赖注入模式。这是一个相当低级的样本，和企业 DI 没有什么关系。这个模式有点 Rust 特有。</p>
<p>通常，当你实现一个需要用户提供一些功能的类型时，首先想到的是在构造函数中提供它。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">Engine</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">config</span>: <span class="nc">Config</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Engine</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">config</span>: <span class="nc">Config</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Engine</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">go</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>在这个例子中，我们实现了 Engine，调用者提供了 Config。</p>
<p>另一种方法是将依赖关系传递给每个方法调用。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">Engine</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Engine</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nc">Engine</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">go</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">config</span>: <span class="kp">&amp;</span><span class="nc">Config</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>在 Rust 中，后者(call-site injection)有时用 lifetime 更好。让我们来看看这些例子吧!</p>
<h2 id="lazy-字段">Lazy 字段</h2>
<p>在第一个例子中，我们想根据其他字段惰性地计算一个字段的值。就像这样:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">Widget</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">name_hash</span>: <span class="nc">Lazy</span><span class="o">&lt;</span><span class="kt">u64</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Widget</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">name</span>: <span class="nb">String</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Widget</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Widget</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">name</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">name_hash</span>: <span class="nc">Lazy</span>::<span class="n">new</span><span class="p">(</span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">compute_hash</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">}),</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这个设计的问题是在 Rust 中无法使用。Lazy 中的闭包需要访问 <strong>self</strong>，而这将创建一个自引用的数据结构!</p>
<p>解决的办法是在使用 Lazy 的地方提供闭包。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">Widget</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">name_hash</span>: <span class="nc">OnceCell</span><span class="o">&lt;</span><span class="kt">u64</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Widget</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">name</span>: <span class="nb">String</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Widget</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Widget</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">name</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">name_hash</span>: <span class="nc">OnceCell</span>::<span class="n">new</span><span class="p">(),</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">name_hash</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">u64</span> <span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">name_hash</span><span class="p">.</span><span class="n">get_or_init</span><span class="p">(</span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">compute_hash</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">})</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><h2 id="间接哈希表">间接哈希表</h2>
<p>下一个例子是关于将一个自定义的哈希函数插入到哈希表中。在 Rust 的标准库中，这只能在类型级别上实现，通过实现类型的 Hash 特性。更通用的设计是在运行时用哈希函数给表做参数。这是 <code>C++</code> 所做的。然而在 Rust 中，这就不够通用了。</p>
<p>考虑一个字符串互译器，它将字符串存储在一个向量中，并额外维护一个基于哈希的索引。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">Interner</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">vec</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">set</span>: <span class="nc">HashSet</span><span class="o">&lt;</span><span class="kt">usize</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Interner</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">intern</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">s</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">usize</span> <span class="p">{</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">lookup</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">i</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="kt">str</span> <span class="p">{</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><strong>set</strong> 字段将字符串存储在一个哈希表中，但它是用相邻 <strong>vec</strong> 的索引来表示它们。</p>
<p>用一个闭包来构造 <strong>set</strong> 不会成功，原因和 Lazy 一样 - 这将创建一个自引用结构。在 <code>C++</code> 中，存在一个变通的方法 - 可以将 <strong>vec</strong> 装箱，并在 <strong>Interner</strong> 和闭包之间共享一个稳定的指针。在 Rust 中，这会产生别名，阻止使用 <strong>&amp;mut Vec</strong>。</p>
<p>奇怪的是，在 std API 中，使用排序的 vec 而不是哈希是可行的。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">Interner</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">vec</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="c1">// Invariant: sorted
</span><span class="c1"></span><span class="w">    </span><span class="n">set</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">usize</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Interner</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">intern</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">s</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">usize</span> <span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">set</span><span class="p">.</span><span class="n">binary_search_by</span><span class="p">(</span><span class="o">|&amp;</span><span class="n">idx</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">vec</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">cmp</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">});</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="nb">Ok</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">set</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span><span class="w">
</span><span class="w">            </span><span class="nb">Err</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">vec</span><span class="p">.</span><span class="n">len</span><span class="p">();</span><span class="w">
</span><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">vec</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span><span class="w">
</span><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">set</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="n">res</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">lookup</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">i</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="kt">str</span> <span class="p">{</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这是因为闭包是在调用站点而不是在构造站点供给的。</p>
<p>hashbrown crate 通过 <a href="https://docs.rs/hashbrown/0.9.1/hashbrown/hash_map/struct.HashMap.html#method.raw_entry_mut">RawEntry</a> 为哈希提供了这种风格的 API。</p>
<h2 id="per-容器分配器">Per 容器分配器</h2>
<p>第三个例子来自 Zig 编程语言。与 Rust 不同，Zig 没有一个祝福的全局分配器。相反，Zig 中的容器有两种风味。&ldquo;Managed&rdquo; 风味接受一个分配器作为构造参数，并将其存储为一个字段（<a href="https://github.com/ziglang/zig/blob/1590ed9d6aea95e5a21e3455e8edba4cdb374f2c/lib/std/array_list.zig#L36-L43">Source</a>）。而 &ldquo;Unmanaged&rdquo; 风味则在每个方法中添加一个分配器参数（<a href="https://github.com/ziglang/zig/blob/1590ed9d6aea95e5a21e3455e8edba4cdb374f2c/lib/std/array_list.zig#L436-L440">Source</a>）。</p>
<p>第二种方式更节俭 - 可以用一个分配器引用与许多容器。</p>
<h2 id="胖指针">胖指针</h2>
<p>最后一个例子来自于 Rust 语言本身。为了实现动态调度，Rust 使用了胖指针，它有两个字宽。第一个字指向对象，第二个字指向 vtable。这些指针是在泛用具体类型的时候制造的。</p>
<p>这与 <code>C++</code> 不同，<code>C++</code> 的 vtable 指针是在构造过程中嵌入到对象本身中的。</p>
<p>看了这些例子后，我对 Scala 式的隐式参数很热衷。考虑一下这段带有 Zig 风格向量的 Rust 代码的假设。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_allocator</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">xs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">ys</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">xs</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">ys</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这里的问题是 Drop - 释放向量需要访问分配器，而如何提供一个分配器并不清楚。Zig 通过使用 defer 语句而不是 destructors 躲避了这个问题。在使用隐式参数的 Rust 中，我想下面的方法可以用。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="o">&lt;</span><span class="n">implicit</span><span class="w"> </span><span class="n">a</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">Allocator</span><span class="p">,</span><span class="w"> </span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="nb">Drop</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="nb">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w">
</span></code></pre></div><p>最后，我想分享最后一个例子，CSDI 思维帮助我发现了一个更好的应用级架构。</p>
<p>rust-analyzer 的很多行为是可以配置的。有嵌套提示的切换，完成度可以调整，一些功能根据编辑器的不同而有不同的工作方式。第一个实现是将一个全局的 Config 结构和其他分析状态一起存储。然后各个子系统读取这个 Config 的位。为了避免通过这个共享结构将不同的功能耦合在一起，配置键是动态的。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">type</span> <span class="nc">Config</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>这个系统是可行的，但感觉相当笨拙。</p>
<p>现在的实现要简单得多。现在每个方法都接受一个特定的 config 参数，而不是将一个单一的 Config 作为状态的一部分来存储。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">get_completions</span><span class="p">(</span><span class="w">
</span><span class="w">    </span><span class="n">analysis</span>: <span class="kp">&amp;</span><span class="nc">Analysis</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">config</span>: <span class="kp">&amp;</span><span class="nc">CompletionConfig</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">file</span>: <span class="nc">FileId</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">offset</span>: <span class="kt">usize</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">get_inlay_hints</span><span class="p">(</span><span class="w">
</span><span class="w">    </span><span class="n">analysis</span>: <span class="kp">&amp;</span><span class="nc">Analysis</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">config</span>: <span class="kp">&amp;</span><span class="nc">HintsConfig</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">file</span>: <span class="nc">FileId</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">)</span><span class="w">
</span></code></pre></div><p>不仅代码更简单，而且更灵活。因为配置不再是状态的一部分，所以可以根据上下文的不同，对同一功能使用不同的配置。例如，显式调用的完成和异步的完成可能是不同的。</p>
<p>在 <a href="https://old.reddit.com/r/rust/comments/kmd41e/blog_post_call_site_dependency_injection/">/r/rust</a> 上讨论。</p>
<p>原文链接: <a href="https://matklad.github.io/2020/12/28/csdi.html">https://matklad.github.io/2020/12/28/csdi.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rust" term="rust" label="Rust" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust" term="rust" label="Rust" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[For the Love of Macros]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-04-05-for-the-love-of-macros/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-call-site-dependency-injection/?utm_source=atom_feed" rel="related" type="text/html" title="Call Site Dependency Injection" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-std-error-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Std Error in Rust" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-two-beautiful-rust-programs/?utm_source=atom_feed" rel="related" type="text/html" title="Two Beautiful Rust Programs" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-20-pest-grammars/?utm_source=atom_feed" rel="related" type="text/html" title="Pest Grammars" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-19-parser-api-example-ini/?utm_source=atom_feed" rel="related" type="text/html" title="Parser API - 解析 INI" />
            
                <id>https://ohmyweekly.github.io/notes/2021-04-05-for-the-love-of-macros/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-04-05T00:00:00+08:00</published>
            <updated>2021-04-05T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>For the Love of Macros</blockquote><p>我一直在重读 Ted Kaminski 关于软件设计的博客。我强烈推荐所有的文章，尤其是早期的文章（这是<a href="https://www.tedinski.com/2018/01/16/how-humans-write-programs.html">第一篇</a>）。他设法提供了既不平凡又合理的设计建议（当然是主观判断），这是一个难得的标本!</p>
<p>无论如何，这一系列的见解之一是，当设计一个抽象的概念时，我们总是要面对权力和属性之间的内在权衡。我们使用一个特定的抽象能表达的越多，我们对使用它的代码能说的就越少。然而，我们人类对更多表达能力的偏爱并非与生俱来。这一点在编程语言社区中很明显，用户不停地要求提供新功能，而语言设计者却说不。</p>
<p>宏是一个在 &ldquo;更强大&quot;方面走得很远的语言功能。宏给了你一种在源代码上抽象的能力。作为交换，你放弃了（自动）推理表面语法的能力。作为一个具体的<a href="https://rust-analyzer.github.io/blog/2020/03/30/macros-vs-rename.html">例子</a>，重命名重构在具有强大宏系统的语言中并不能 100% 可靠地工作。</p>
<p>我确实认为，在理想的世界里，对于一个想要扩展到巨大项目的语言来说，这是一个错误的交易。当你增加了更多的程序员、更多的年限和更多的数百万行代码时，自动推理和转换源代码的能力就会变得越来越重要。但是，请谨慎对待这一点 - 我显然是有偏见的，因为我花了几年时间开发 Rust IDE。</p>
<p>也就是说，宏有巨大的吸引力 - 它们是语言设计师的胶带。宏很少是最好的工具，但它们几乎可以完成任何工作。语言设计是渐进式的。宏系统通过为许多功能提供一个现成的穷人的替代品来缓解设计压力。</p>
<p>在这篇文章中，我想探讨一下 Rust 中宏的用途。目的是为了找到不放弃&quot;推理源代码&quot;属性的解决方案。</p>
<h2 id="字符串插值">字符串插值</h2>
<p>到目前为止，最常见的使用情况是 <code>format!</code> 系列的宏。这里的无宏解决方案很直接 - 字符串插值语法。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;number&#34;</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="mi">92</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f</span><span class="s">&#34;$key: ${values()}&#34;</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w"> </span><span class="s">&#34;number: 92&#34;</span><span class="p">);</span><span class="w">
</span></code></pre></div><p>在 Rust 中，插值可能不应该直接构造一个字符串，而是可以产生一个实现 Display 的值（就像 <code>format_args!</code> 一样），这样可以避免分配。一个有趣的扩展是允许在格式字符串片段上迭代。这样一来，插值语法就可以用于 SQL 语句或命令行参数之类的东西，而不用担心引入注入漏洞。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">arg</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;my dir&#34;</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f</span><span class="s">&#34;ls $arg&#34;</span><span class="p">.</span><span class="n">to_cmd</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w"> </span><span class="s">&#34;ls &#39;my dir&#39;&#34;</span><span class="p">);</span><span class="w">
</span></code></pre></div><p><a href="https://julialang.org/blog/2012/03/shelling-out-sucks/">这篇</a>关于 Julia 编程语言的文章解释了这个问题。 <a href="https://github.com/matklad/xshell">xshell</a> crate 为 Rust 实现了这个想法。</p>
<h2 id="derives">Derives</h2>
<p>我认为在 Rust 中，宏的第二个最常见，也可能是最重要的用法是派生。Rust 是为数不多的能正确实现平等的语言之一（禁止比较苹果和橘子），但这关键取决于 <code>derive(Eq)</code> 的能力。这个领域常见的解决方案是编译器中的特殊 casing（Haskell 的派生）或运行时反射。</p>
<p>但我最感兴趣的解决方案是 <code>C#</code> <a href="https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/">源码生成器</a>。这并不是什么新鲜事 - 这只是老式的（源码）代码生成器，只是具有很好的实现质量。你可以提供自定义的代码，这些代码在构建过程中被运行，它可以读取现有的源码并生成额外的文件，然后再添加到编译中。</p>
<p>这个解决方案的优点在于它将所有的复杂性从语言中移出，移到了编译系统中。这意味着你可以免费获得基线工具支持。生成代码的 Goto 定义？就能用了。调试时想介入一些序列化代码？磁盘上有实际的源码，所以可以放心的去做! 你是比较喜欢用 <code>printf</code> 的人？好吧，你需要说服构建系统不要踩过你的改动，但是，否则，为什么不呢？</p>
<p>此外，源码生成器的表现力明显更强。它们可以调用到 Roslyn 编译器来分析源代码，所以它们能够生成类型导向的代码。</p>
<p>为了有用，源码生成器需要一些语言级别的支持，以便将一个实体分割到多个文件中。在 <code>C#</code> 中，部分类就扮演了这个角色。</p>
<h2 id="特定领域语言">特定领域语言</h2>
<p>宏的存在理由是嵌入式 DSL 的实现。我们希望在语言中引入自定义语法，以简洁地对程序的领域进行建模。例如，可以用宏来嵌入 Rust 代码中的 HTML 片段。</p>
<p>对我个人来说，eDSL 不是要解决的问题，只是一个问题。引入一个新的子语言（即使是小的）会花费大量的认知复杂性预算。如果你偶尔需要它，最好坚持只把有点啰嗦的函数调用链在一起。如果你经常需要它，引入外部的 DSL 是有意义的，它有一个编译器，一个语言服务器，以及所有使编程富有成效的工具。对我来说，基于宏的 DSL 只是在成本效益曲线上不落像一个有趣的点。</p>
<p>也就是说，Kotlin 编程语言很好地解决了强类型化、工具友好型 DSL 的问题（例子）。令人气愤的是，很难指出具体的解决方案是什么。就是&hellip;&hellip;主要是具体的语法。下面是一些成分。</p>
<ul>
<li>闭包的语法是 <code>{ arg -&gt; body }</code>，或者直接是 <code>{ body }</code>，所以闭包在语法上类似于块。</li>
<li>扩展方法（这只是静态方法的语法糖）。</li>
<li>Java 风格的隐式 this，它将名称引入到作用域中，而不需要显式声明。</li>
<li><a href="https://boats.gitlab.io/blog/post/the-problem-of-effects/">TCP-preserving</a> inline closures (这是唯一一个非语法特征)</li>
</ul>
<p>尽管如此，这还不足以实现 Jetpack Compose UI DSL，它还需要一个编译器插件。</p>
<h2 id="sqlx">sqlx</h2>
<p>我想调用的一个有趣的 DSL 案例是 <a href="https://docs.rs/sqlx/0.5.1/sqlx/macro.query.html">sqlx::query</a>。它允许我们写这样的代码。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">account</span><span class="w"> </span><span class="o">=</span><span class="w">
</span><span class="w">  </span><span class="n">sqlx</span>::<span class="n">query</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;select (1) as id, &#39;Herp Derpinson&#39; as name&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="p">.</span><span class="n">fetch_one</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">conn</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="p">.</span><span class="k">await</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// anonymous struct has `#[derive(Debug)]` for convenience
</span><span class="c1"></span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">account</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{}: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">account</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">account</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></code></pre></div><p>这一点我想是eDSL确实很拉风的几个案例之一。没有宏的情况下，我不知道该怎么做。使用字符串插值（高级版本，以保护不被注入），可以指定查询。使用源码生成器，可以检查查询的语法和类型，例如，在这种情况下，会出现类型错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">)</span>: <span class="p">(</span><span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="kt">f32</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w">
</span><span class="w">  </span><span class="n">query</span><span class="p">(</span><span class="s">&#34;select (1) as id, &#39;Herp Derpinson&#39; as name&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="p">.</span><span class="n">fetch_one</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">conn</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="p">.</span><span class="k">await</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>但这还不足以生成一个匿名结构体，也不足以摆脱动态 casts。</p>
<h2 id="有条件编译">有条件编译</h2>
<p>Rust 还使用宏进行条件编译。这个用例令人信服地展示了&quot;缺乏属性&quot;方面的能力。处理特征组合是 Cargo 永远头痛的问题。当特征标志改变时，用户不得不反复重新编译大块的装箱图。在 CI 上用 <code>Cargo test --no-default-features</code> 捕捉类型错误是非常恼人的，尤其是当你在提交 PR 之前确实运行了 <code>Cargo test</code>。&ldquo;添加特性&quot;是一个无法选中的一厢情愿。</p>
<p>在这种情况下，我不知道有什么好的无宏选择。但是，原则上，这似乎是可行的，如果将条件编译进一步推到编译器流水线的下游，推到代码生成和链接阶段。编译器可以在为一个函数生成机器代码之前，选择特定平台的版本，而不是在解析过程中提前丢弃一些代码。在此之前，它会检查该函数的所有条件编译版本是否具有相同的接口。这样一来，平台特定的类型错误就不可能出现了。</p>
<h2 id="占位符语法">占位符语法</h2>
<p>最后一个我想介绍的用例是占位符语法。Rust 的 <code>macro_call!(...)</code> 语法开辟了一个很好的隔离区域，只要小括号是平衡的，任何东西都可以用。理论上，这允许语言设计者在确定某些东西之前先试验临时语法。在实践中，这看起来好像并没有什么好处？有人反对稳定 <code>postfix .await</code>，而不通过中间期与 <code>await!</code> 宏来稳定。而且，稳定之后，所有的语法讨论都立即被遗忘了？另一方面，我们确实有 <code>try! -&gt; ?</code> 转变，但我不认为它有助于发现任何设计上的缺陷？至少，我们成功地稳定了那个<a href="https://internals.rust-lang.org/t/can-try-and-use-the-into-trait-instead-of-from/6714">不必要的限制性</a>去语法糖。</p>
<p>对于结论，我想绕回源码生成器。究竟是什么让它们比宏更容易被工具化？我认为有以下三个特性。第一，无论是输入还是输出，从根本上说，都是文本。没有中间的表示方式（比如 token 树），而这个元程序设施使用的是中间的表示方式。这意味着，它不需要与编译器深度集成。当然，在内部，该工具可以自由地对代码进行任意解析、类型检查和转换。其次，有一个阶段性的区分。源码生成器是一次执行，无序的。在元编程和名称解析之间没有来回，这又可以将&quot;元&quot;的部分保留在外面。第三，源码生成器只能添加代码，不能改变现有代码的含义。这意味着，在代码生成器的存在下，语义上合理的源码转换依然如此。</p>
<p>就这样吧! 在 <a href="https://old.reddit.com/r/rust/comments/ljnkwg/blog_post_for_the_love_of_macros/">/r/rust</a> 上讨论。</p>
<p>原文链接: <a href="https://matklad.github.io/2021/02/14/for-the-love-of-macros.html">https://matklad.github.io/2021/02/14/for-the-love-of-macros.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rustlang" term="rustlang" label="rustlang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust" term="rust" label="Rust" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Std Error in Rust]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-04-05-std-error-in-rust/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-call-site-dependency-injection/?utm_source=atom_feed" rel="related" type="text/html" title="Call Site Dependency Injection" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-for-the-love-of-macros/?utm_source=atom_feed" rel="related" type="text/html" title="For the Love of Macros" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-two-beautiful-rust-programs/?utm_source=atom_feed" rel="related" type="text/html" title="Two Beautiful Rust Programs" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-20-pest-grammars/?utm_source=atom_feed" rel="related" type="text/html" title="Pest Grammars" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-19-parser-api-example-ini/?utm_source=atom_feed" rel="related" type="text/html" title="Parser API - 解析 INI" />
            
                <id>https://ohmyweekly.github.io/notes/2021-04-05-std-error-in-rust/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-04-05T00:00:00+08:00</published>
            <updated>2021-04-05T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Std Error in Rust</blockquote><h1 id="学习-stdioerror">学习 std::io::Error</h1>
<p>在这篇文章中，我们将剖析 Rust 标准库中 std::io::Error 类型的实现。相关代码在这里：<code>library/std/src/io/error.rs</code>。</p>
<p>你可以把这篇文章看成是其中之一。</p>
<ul>
<li>一个标准库的特定位的研究</li>
<li>一个高级错误管理指南</li>
<li>一个漂亮的 API 设计案例</li>
</ul>
<p>文章要求基本熟悉 Rust 错误处理。</p>
<p>在设计一个用于 <code>Result&lt;T，E&gt;</code> 的 Error 类型时，主要的问题是&quot;如何使用这个错误？&quot;。通常，以下情况之一为真。</p>
<ul>
<li>错误被程序化处理。消费者检查错误，所以它的内部结构需要在合理的程度上暴露出来。</li>
<li>错误被传播并显示给用户。消费者不检查 <code>fmt::Display</code> 之外的错误；所以它的内部结构可以被封装。</li>
</ul>
<p>请注意，暴露实现细节和封装细节之间存在紧张关系。实现第一种情况的常见反模式是定义一个厨房水槽枚举。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">Error</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">Tokio</span><span class="p">(</span><span class="n">tokio</span>::<span class="n">io</span>::<span class="n">Error</span><span class="p">),</span><span class="w">
</span><span class="w">  </span><span class="n">ConnectionDiscovery</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">path</span>: <span class="nc">PathBuf</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">reason</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">stderr</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="p">},</span><span class="w">
</span><span class="w">  </span><span class="n">Deserialize</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">source</span>: <span class="nc">serde_json</span>::<span class="n">Error</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">data</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="p">},</span><span class="w">
</span><span class="w">  </span><span class="p">...,</span><span class="w">
</span><span class="w">  </span><span class="n">Generic</span><span class="p">(</span><span class="nb">String</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这种方法有很多问题。</p>
<p>首先，从底层库中暴露错误会使它们成为你的公共 API 的一部分。在你的依赖关系中的主要 semver bump 会要求你也做一个新的主要版本。</p>
<p>其次，它将所有的实现细节都固定下来。例如，如果你注意到 ConnectionDiscovery 的大小是巨大的，那么将这个变体装箱将是一个突破性的变化。</p>
<p>第三，它通常表明了一个更大的设计问题。厨房水槽错误将不同的故障模式打包成一种类型。但是，如果故障模式差异很大，处理起来可能就不合理了! 这说明情况看起来更像案例二。</p>
<p>错误厨房水槽病的一个经常有效的治疗方法是将错误推送给调用者的模式。</p>
<p>考虑这个例子:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">my_function</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="n">MyError</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="kd">let</span><span class="w"> </span><span class="n">thing</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dep_function</span><span class="p">()</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">  </span><span class="p">...</span><span class="w">
</span><span class="w">  </span><span class="nb">Ok</span><span class="p">(</span><span class="mi">92</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><code>my_function</code> 调用 <code>dep_function</code>，所以 <code>MyError</code> 应该可以从 <code>DepError</code> 转换过来。更好的写法可能是这样的。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">my_function</span><span class="p">(</span><span class="n">thing</span>: <span class="nc">DepThing</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="n">MyError</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="p">...</span><span class="w">
</span><span class="w">  </span><span class="nb">Ok</span><span class="p">(</span><span class="mi">92</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>在这个版本中，调用者被迫调用 <code>dep_function</code> 并处理其错误。这就用更多的类型交换了更多的类型安全。<code>MyError</code> 和 <code>DepError</code> 现在是不同的类型，调用者可以分别处理它们。如果 <code>DepError</code> 是 <code>MyError</code> 的变体，那么就需要进行运行时匹配。</p>
<p>这个想法的一个极端版本是 <code>sans-io</code> 编程。大多数错误来自于 IO；如果你把所有的 IO 推给调用者，你就可以跳过大部分的错误处理。</p>
<p>无论枚举方法多么糟糕，它确实实现了第一种情况的最大可检查性。</p>
<p>以传播为中心的第二种情况下的错误管理，通常是通过使用盒状特质对象来处理。像 <code>Box&lt;dyn std::error::Error&gt;</code> 这样的类型可以从任何具体的错误中构造出来，可以通过 <code>Display</code> 打印出来，并且仍然可以选择通过动态下传来暴露底层错误。<code>Anyhow</code> crate 就是这种风格的一个很好的例子。</p>
<p><code>std::io::Error</code> 的例子很有趣，因为它想同时具备上述两种风格。</p>
<ul>
<li>这是 std，所以封装和面向未来是最重要的。</li>
<li>来自操作系统的 IO 错误往往可以被处理（比如 EWOULDBLOCK）。</li>
<li>对于系统编程语言来说，准确地暴露底层 OS 错误是很重要的。</li>
<li>未来潜在的操作系统错误集是没有限制的。</li>
<li><code>io::Error</code> 也是一种词汇类型，应该可以表示一些不完全的 os 错误。例如，Rust Paths 可以包含内部的0字节，打开这样的路径应该在进行 <code>syscall</code> 之前返回一个 <code>io::Error</code>。</li>
</ul>
<p>下面是 <code>std::io::Error</code> 的样子。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Error</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">repr</span>: <span class="nc">Repr</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">enum</span> <span class="nc">Repr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">Os</span><span class="p">(</span><span class="kt">i32</span><span class="p">),</span><span class="w">
</span><span class="w">  </span><span class="n">Simple</span><span class="p">(</span><span class="n">ErrorKind</span><span class="p">),</span><span class="w">
</span><span class="w">  </span><span class="n">Custom</span><span class="p">(</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">Custom</span><span class="o">&gt;</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Custom</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">kind</span>: <span class="nc">ErrorKind</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">error</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">error</span>::<span class="n">Error</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Sync</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>首先要注意的是，它内部是一个枚举，但这是一个隐藏得很好的实现细节。为了允许检查和处理各种错误条件，有一个单独的公共无字段种类枚举。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#[derive(Clone, Copy)]</span><span class="w">
</span><span class="w"></span><span class="cp">#[non_exhaustive]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">ErrorKind</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">NotFound</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">PermissionDenied</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">Interrupted</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="p">...</span><span class="w">
</span><span class="w">  </span><span class="n">Other</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Error</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">kind</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ErrorKind</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">repr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Os</span><span class="p">(</span><span class="n">code</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">sys</span>::<span class="n">decode_error_kind</span><span class="p">(</span><span class="o">*</span><span class="n">code</span><span class="p">),</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Custom</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">c</span><span class="p">.</span><span class="n">kind</span><span class="p">,</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Simple</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="o">*</span><span class="n">kind</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>虽然 ErrorKind 和 Repr 都是枚举，但公开暴露 ErrorKind 就没那么可怕了。一个 <code>#[non_exhaustive]Copy</code> 无字段枚举的设计空间是一个点 - 没有合理的替代方案或兼容性隐患。</p>
<p>有些 <code>io::Errors</code> 只是原始的操作系统错误代码。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">Error</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">from_raw_os_error</span><span class="p">(</span><span class="n">code</span>: <span class="kt">i32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Error</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">Error</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">repr</span>: <span class="nc">Repr</span>::<span class="n">Os</span><span class="p">(</span><span class="n">code</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">raw_os_error</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">repr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Os</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Custom</span><span class="p">(..)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">None</span><span class="p">,</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Simple</span><span class="p">(..)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">None</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>特定平台的 <code>sys::decode_error_kind</code> 函数负责将错误代码映射到 <code>ErrorKind</code> 枚举。所有这些都意味着代码可以通过检查 <code>.kind()</code> 来跨平台处理错误类别。然而，如果需要以一种依赖于操作系统的方式处理一个非常特殊的错误代码，这也是可能的。API 小心翼翼地提供了一个方便的抽象，而没有抽象掉重要的低级细节。</p>
<p>一个 <code>std::io::Error</code> 也可以从一个 <code>ErrorKind</code> 中构造出来。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="nb">From</span><span class="o">&lt;</span><span class="n">ErrorKind</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Error</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="k">fn</span> <span class="nf">from</span><span class="p">(</span><span class="n">kind</span>: <span class="nc">ErrorKind</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Error</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">Error</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">repr</span>: <span class="nc">Repr</span>::<span class="n">Simple</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这提供了跨平台访问错误代码风格的错误处理。如果你需要尽可能快的错误，这很方便。</p>
<p>最后，还有第三种完全自定义的变体表示。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">Error</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">(</span><span class="n">kind</span>: <span class="nc">ErrorKind</span><span class="p">,</span><span class="w"> </span><span class="n">error</span>: <span class="nc">E</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Error</span><span class="w">
</span><span class="w">  </span><span class="k">where</span><span class="w">
</span><span class="w">    </span><span class="n">E</span>: <span class="nb">Into</span><span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">error</span>::<span class="n">Error</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Sync</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">Self</span>::<span class="n">_new</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span><span class="w"> </span><span class="n">error</span><span class="p">.</span><span class="n">into</span><span class="p">())</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="k">fn</span> <span class="nf">_new</span><span class="p">(</span><span class="w">
</span><span class="w">    </span><span class="n">kind</span>: <span class="nc">ErrorKind</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">error</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">error</span>::<span class="n">Error</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Sync</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Error</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">Error</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">repr</span>: <span class="nc">Repr</span>::<span class="n">Custom</span><span class="p">(</span><span class="nb">Box</span>::<span class="n">new</span><span class="p">(</span><span class="n">Custom</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">kind</span><span class="p">,</span><span class="w"> </span><span class="n">error</span><span class="w"> </span><span class="p">})),</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">get_ref</span><span class="p">(</span><span class="w">
</span><span class="w">    </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;&amp;</span><span class="p">(</span><span class="n">dyn</span><span class="w"> </span><span class="n">error</span>::<span class="n">Error</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Sync</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">&#39;static</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">repr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Os</span><span class="p">(..)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">None</span><span class="p">,</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Simple</span><span class="p">(..)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">None</span><span class="p">,</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Custom</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;*</span><span class="n">c</span><span class="p">.</span><span class="n">error</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">into_inner</span><span class="p">(</span><span class="w">
</span><span class="w">    </span><span class="bp">self</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">error</span>::<span class="n">Error</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Sync</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">repr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Os</span><span class="p">(..)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">None</span><span class="p">,</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Simple</span><span class="p">(..)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">None</span><span class="p">,</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Custom</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">error</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>需要注意的地方。</p>
<ul>
<li>
<p>通用的 <code>new</code> 函数委托给单态的 <code>_new</code> 函数。这改善了编译时间，因为在单态化过程中需要重复的代码更少。我认为这也改善了一些运行时：<code>_new</code> 函数没有被标记为内联，所以会在调用处产生一个函数调用。这是好的，因为错误构造是冷路径，节省指令缓存是受欢迎的。</p>
</li>
<li>
<p>自定义变体被框住了 - 这是为了让整体 <code>size_of</code> 更小。错误的 <code>on-the-stack</code> 大小是很重要的：即使没有错误，你也要为此付出代价!</p>
</li>
</ul>
<p>这两种类型都是指&quot;静态错误&quot;。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">type</span> <span class="nc">A</span><span class="w"> </span><span class="o">=</span><span class="w">   </span><span class="o">&amp;</span><span class="p">(</span><span class="n">dyn</span><span class="w"> </span><span class="n">error</span>::<span class="n">Error</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Sync</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">&#39;static</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">type</span> <span class="nc">B</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">error</span>::<span class="n">Error</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Sync</span><span class="o">&gt;</span><span class="w">
</span></code></pre></div><p>在 <code>dyn Trait + '_</code> 中，<code>'_</code> 被省略为 <code>'static</code>，除非 trait 对象是在引用后面，在这种情况下，它被省略为 <code>&amp;'a dyn Trait + 'a</code>。</p>
<p><code>get_ref</code>, <code>get_mut</code> 和 <code>into_inner</code> 提供了对底层错误的完全访问。类似于 <code>os_error</code> 的情况，抽象模糊了细节，但也提供了钩子来获取底层数据的原样。</p>
<p>同样，Display 的实现揭示了内部表示的最重要细节。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Display</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Error</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="k">fn</span> <span class="nf">fmt</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">fmt</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Formatter</span><span class="o">&lt;</span><span class="na">&#39;_</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">fmt</span>::<span class="nb">Result</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">repr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Os</span><span class="p">(</span><span class="n">code</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">detail</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sys</span>::<span class="n">os</span>::<span class="n">error_string</span><span class="p">(</span><span class="o">*</span><span class="n">code</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">write</span><span class="o">!</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;{} (os error {})&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">detail</span><span class="p">,</span><span class="w"> </span><span class="n">code</span><span class="p">)</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Simple</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">write</span><span class="o">!</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">kind</span><span class="p">.</span><span class="n">as_str</span><span class="p">()),</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Custom</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">c</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="n">fmt</span><span class="p">(</span><span class="n">fmt</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>综上所述，std::io::Error:</p>
<ul>
<li>封装了它的内部表现形式，并通过框定大的枚举变体来优化它。</li>
<li>通过 <code>ErrorKind</code> 模式提供了一种方便的方法来处理基于类别的错误。</li>
<li>完全暴露底层操作系统的错误（如果有的话）。</li>
</ul>
<p>可以透明地包裹任何其他错误类型。</p>
<p>最后一点意味着 <code>io::Error</code> 可以用于临时错误，因为 <code>&amp;str</code> 和 String 可以转换为 <code>Box&lt;dyn std::error::Error&gt;</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">io</span>::<span class="n">Error</span>::<span class="n">new</span><span class="p">(</span><span class="n">io</span>::<span class="n">ErrorKind</span>::<span class="n">Other</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;something went wrong&#34;</span><span class="p">)</span><span class="w">
</span></code></pre></div><p>它也可以作为 anyhow 的简单替换。我想一些库可能会用这个来简化他们的错误处理。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">io</span>::<span class="n">Error</span>::<span class="n">new</span><span class="p">(</span><span class="n">io</span>::<span class="n">ErrorKind</span>::<span class="n">InvalidData</span><span class="p">,</span><span class="w"> </span><span class="n">my_specific_error</span><span class="p">)</span><span class="w">
</span></code></pre></div><p>例如，<code>serde_json</code> 提供了以下方法。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">from_reader</span><span class="o">&lt;</span><span class="n">R</span><span class="p">,</span><span class="w"> </span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rdr</span>: <span class="nc">R</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="w"> </span><span class="n">serde_json</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w">
</span><span class="w"></span><span class="k">where</span><span class="w">
</span><span class="w">  </span><span class="n">R</span>: <span class="nc">Read</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">T</span>: <span class="nc">DeserializeOwned</span><span class="p">,</span><span class="w">
</span></code></pre></div><p>读取会因为 <code>io::Error</code> 而失败，所以 <code>serde_json::Error</code> 需要能够在内部表示 <code>io::Error</code>。我认为这是倒退的 (但我不知道整个上下文，如果被证明是错的我会很高兴！)，签名应该是这样的。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">from_reader</span><span class="o">&lt;</span><span class="n">R</span><span class="p">,</span><span class="w"> </span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rdr</span>: <span class="nc">R</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="w"> </span><span class="n">io</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w">
</span><span class="w"></span><span class="k">where</span><span class="w">
</span><span class="w">  </span><span class="n">R</span>: <span class="nc">Read</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">T</span>: <span class="nc">DeserializeOwned</span><span class="p">,</span><span class="w">
</span></code></pre></div><p>那么，<code>serde_json::Error</code> 就不会有 <code>Io</code> 的变体，而会以 <code>InvalidData</code> 的形式被藏到 <code>io::Error</code> 中。
补遗, 2021-01-25</p>
<p>重新阅读这篇文章，我现在认为正确的返回类型应该是：</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">from_reader</span><span class="o">&lt;</span><span class="n">R</span><span class="p">,</span><span class="w"> </span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="w">
</span><span class="w">  </span><span class="n">rdr</span>: <span class="nc">R</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">Result</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="w"> </span><span class="n">serde_json</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">io</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w">
</span><span class="w"></span><span class="k">where</span><span class="w">
</span><span class="w">  </span><span class="n">R</span>: <span class="nc">Read</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">T</span>: <span class="nc">DeserializeOwned</span><span class="p">,</span><span class="w">
</span></code></pre></div><p>这迫使 IO 和反序列化错误分开处理，这在这种情况下是有意义的。IO 错误可能是程序领域之外的硬件/环境问题，而序列化错误很可能是系统中的某个错误。</p>
<p>我认为 <code>std::io::Error</code> 是一个非常了不起的类型，它能够在没有太多妥协的情况下为许多不同的用例服务。但我们是否可以做得更好呢？</p>
<p><code>std::io::Error</code> 的首要问题是，当一个文件系统操作失败时，你不知道它是为哪个路径失败的。这是可以理解的 - Rust 是一种系统语言，所以它不应该比 OS 原生提供的东西增加多少脂肪。OS 返回的是一个整数返回代码，而将其与一个堆分配的 <code>PathBuf</code> 耦合在一起，可能是一个不可接受的开销!</p>
<p>我很惊讶地得知，事实上，<code>std</code> 对每一个与路径相关的系统调用都会进行分配。</p>
<p>它需要以某种形式存在。<code>OS API</code> 需要在字符串的结尾有一个不幸的零字节. 但我想知道对短路径使用堆栈分配的缓冲区是否有意义。可能不会 - 路径通常不会那么短，而且现代分配器能有效地处理瞬时分配。</p>
<p>我不知道这里有什么明显的好办法。一个选择是在编译时（一旦我们得到 <code>std-aware cargo</code>）或运行时（<code>a-la RUST_BACKTRACE</code>）添加开关，以堆分配所有与路径相关的 IO 错误。一个类似形的问题是 <code>io::Error</code> 不携带 backtrace。</p>
<p>另一个问题是，<code>std::io::Error</code> 的效率不高。</p>
<p>它的体积是相当大的。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="n">io</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="p">(),</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="kt">usize</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span></code></pre></div><p>对于自定义的情况，会产生双重的间接和分配。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">    </span><span class="k">enum</span> <span class="nc">Repr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">Os</span><span class="p">(</span><span class="kt">i32</span><span class="p">),</span><span class="w">
</span><span class="w">      </span><span class="n">Simple</span><span class="p">(</span><span class="n">ErrorKind</span><span class="p">),</span><span class="w">
</span><span class="w">      </span><span class="c1">// First Box :|
</span><span class="c1"></span><span class="w">      </span><span class="n">Custom</span><span class="p">(</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">Custom</span><span class="o">&gt;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">struct</span> <span class="nc">Custom</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">kind</span>: <span class="nc">ErrorKind</span><span class="p">,</span><span class="w">
</span><span class="w">      </span><span class="c1">// Second Box :(
</span><span class="c1"></span><span class="w">      </span><span class="n">error</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">error</span>::<span class="n">Error</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Sync</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>我想我们现在可以解决这个问题了</p>
<p>首先，我们可以通过使用一个瘦的特质对象来摆脱双重内向性，比如失败或 anyhow。现在 GlobalAlloc 已经存在，这是一个比较直接的实现。</p>
<p>其次，我们可以利用指针是对齐的这一事实，将 Os 和 Simple 变体都用最小的有效位集储藏到 usize 中。我认为我们甚至可以发挥创意，使用第二个最小有意义的位，把第一个位留作小众。这样一来，即使是像 <code>io::Result&lt;i32&gt;</code> 这样的东西，也可以是指针大小的!</p>
<p>本篇文章到此结束。下一次你要为你的库设计一个错误类型的时候，花点时间去看看 <code>std::io::Error</code> 的源头，你可能会发现一些值得偷的东西。</p>
<p>讨论在 /r/rust.Net 上进行。</p>
<h2 id="额外的谜题">额外的谜题</h2>
<p>看看实现中的这一行。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Display</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Error</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="k">fn</span> <span class="nf">fmt</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">fmt</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Formatter</span><span class="o">&lt;</span><span class="na">&#39;_</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">fmt</span>::<span class="nb">Result</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">repr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Os</span><span class="p">(</span><span class="n">code</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">detail</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sys</span>::<span class="n">os</span>::<span class="n">error_string</span><span class="p">(</span><span class="o">*</span><span class="n">code</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">write</span><span class="o">!</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;{} (os error {})&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">detail</span><span class="p">,</span><span class="w"> </span><span class="n">code</span><span class="p">)</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Simple</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">write</span><span class="o">!</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">kind</span><span class="p">.</span><span class="n">as_str</span><span class="p">()),</span><span class="w">
</span><span class="w">      </span><span class="n">Repr</span>::<span class="n">Custom</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">c</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="n">fmt</span><span class="p">(</span><span class="n">fmt</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>原文链接: <a href="https://matklad.github.io/2020/10/15/study-of-std-io-error.html">https://matklad.github.io/2020/10/15/study-of-std-io-error.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rustlang" term="rustlang" label="rustlang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust" term="rust" label="Rust" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Two Beautiful Rust Programs]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-04-05-two-beautiful-rust-programs/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-call-site-dependency-injection/?utm_source=atom_feed" rel="related" type="text/html" title="Call Site Dependency Injection" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-for-the-love-of-macros/?utm_source=atom_feed" rel="related" type="text/html" title="For the Love of Macros" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-std-error-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Std Error in Rust" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-20-pest-grammars/?utm_source=atom_feed" rel="related" type="text/html" title="Pest Grammars" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-19-parser-api-example-ini/?utm_source=atom_feed" rel="related" type="text/html" title="Parser API - 解析 INI" />
            
                <id>https://ohmyweekly.github.io/notes/2021-04-05-two-beautiful-rust-programs/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-04-05T00:00:00+08:00</published>
            <updated>2021-04-05T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Two Beautiful Rust Programs</blockquote><h1 id="two-beautiful-rust-programs">Two Beautiful Rust Programs</h1>
<p>这是一则 Rust 编程语言的短广告，目标是有经验的 <code>C++</code> 开发者。作为一则广告，它只能吊起你的胃口，具体内容请参考其他资源。</p>
<p>第一个程序:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">xs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">];</span><span class="w">
</span><span class="w">  </span><span class="kd">let</span><span class="w"> </span><span class="n">x</span>: <span class="kp">&amp;</span><span class="kt">i32</span> <span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="w">
</span><span class="w">  </span><span class="n">xs</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">92</span><span class="p">);</span><span class="w">
</span><span class="w">  </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">x</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这个程序创建了一个 32 位整数的向量(<code>std::vector&lt;int32_t&gt;</code>)，接收第一个元素 <code>x</code> 的引用，再向向量推送一个数字，然后使用 <code>x</code>。这个程序是错误的：扩展向量可能会使对元素的引用无效，而且 <code>*x</code> 可能会取消引用一个 danging 指针。</p>
<p>这个程序的好处是它不会被编译。</p>
<pre><code>error[E0502]: cannot borrow xs as mutable
    because it is also borrowed as immutable
 --&gt; src/main.rs:4:5

     let x: &amp;i32 = &amp;xs[0];
                    -- immutable borrow occurs here
     xs.push(92);
     ^^^^^^^^^^^ mutable borrow occurs here
     println!(x);
              - immutable borrow later used here
</code></pre><p>Rust 编译器跟踪每块数据的别名状态，并禁止潜在的别名数据的突变。在这个例子中，<code>x</code> 和 <code>xs</code> 别名了向量在堆中存储的第一个整数。</p>
<p>Rust 不允许做傻事。</p>
<p>第二个程序:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">crossbeam</span>::<span class="n">scope</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">parking_lot</span>::<span class="p">{</span><span class="n">Mutex</span><span class="p">,</span><span class="w"> </span><span class="n">MutexGuard</span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Mutex</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="n">scope</span><span class="p">(</span><span class="o">|</span><span class="n">s</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="p">..</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">s</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="o">|</span><span class="n">_</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="p">..</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">          </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">guard</span>: <span class="nc">MutexGuard</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">counter</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span><span class="w">
</span><span class="w">          </span><span class="o">*</span><span class="n">guard</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">      </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="kd">let</span><span class="w"> </span><span class="n">total</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="kt">i32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">counter</span><span class="p">.</span><span class="n">get_mut</span><span class="p">();</span><span class="w">
</span><span class="w">  </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;total = {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">total</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这个程序创建一个由 mutex 保护的整数计数器，生成10个线程，从每个线程开始将计数器递增10次，并打印出总数。</p>
<p>计数器变量位于堆栈中，这些堆栈数据的指针与其他线程共享。线程必须锁定 mutex 才能进行增量。打印总数时，绕过 mutex 读取计数器，没有任何同步。</p>
<p>这个程序的妙处在于，它的正确性依赖于几位精妙的推理，每一个推理都会被编译器检查。</p>
<p>子线程不会逃离主函数 所以可以从它的堆栈中读取计数器</p>
<p>子线程只通过 mutex 访问 counter。</p>
<p>子线程将在我们从计数器中读出总数而不使用 mutex 时终止。</p>
<p>如果这些约束中的任何一个被破坏，编译器就会拒绝该代码。没有必要使用 <code>std::shared_ptr</code> 只是为了防御性地确保内存不会在你的脚下被释放。</p>
<p>Rust 允许做危险的、聪明的、快速的事情，而不用担心引入未定义的行为。</p>
<p>如果你喜欢你所看到的，这里有两本我推荐的书，可以让你更深入地了解 Rust。</p>
<p>原文链接: <a href="https://matklad.github.io/2020/07/15/two-beautiful-programs.html">https://matklad.github.io/2020/07/15/two-beautiful-programs.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rustlang" term="rustlang" label="rustlang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust" term="rust" label="Rust" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Pest Grammars]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-01-20-pest-grammars/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-01-19-parser-api-example-ini/?utm_source=atom_feed" rel="related" type="text/html" title="Parser API - 解析 INI" />
            
                <id>https://ohmyweekly.github.io/notes/2021-01-20-pest-grammars/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-01-20T00:00:00+08:00</published>
            <updated>2021-01-20T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Pest Grammars</blockquote><h1 id="grammar">Grammar</h1>
<p>与许多解析工具一样，<code>pest</code> 使用与 Rust 代码不同的正式 grammar 进行操作。<code>pest</code> 使用的格式称为解析表达式 grammar，或 PEG。当构建一个项目时，<code>pest</code> 会自动将位于单独文件中的 PEG 编译成您可以调用的普通 Rust 函数。</p>
<h2 id="如何激活-pest">如何激活 <code>pest</code></h2>
<p>大多数项目至少会有两个使用 <code>pest</code> 的文件：解析器 (比如 <code>src/parser/mod.rs</code>) 和 grammar (<code>src/parser/grammar.pest</code>)。假设它们在同一个目录下。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">pest</span>::<span class="n">Parser</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(Parser)]</span><span class="w">
</span><span class="w"></span><span class="cp">#[grammar = </span><span class="s">&#34;parser/grammar.pest&#34;</span><span class="cp">]</span><span class="w"> </span><span class="c1">// relative to project `src`
</span><span class="c1"></span><span class="k">struct</span> <span class="nc">MyParser</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>每当你编译这个文件时，<code>pest</code> 会自动使用 grammar 文件生成这样的项。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">Rules</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="cm">/* ... */</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Parser</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">MyParser</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">parse</span><span class="p">(</span><span class="n">Rules</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">pest</span>::<span class="n">Pairs</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="cm">/* ... */</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>你永远不会看到 <code>enum Rules</code> 或 <code>impl Parser</code> 的纯文本。这些代码只存在于编译过程中。然而，您可以像使用其他枚举一样使用 <code>Rules</code>，并且您可以通过 <a href="https://pest.rs/book/parser_api.html">Parser API 章节</a>中描述的 <code>Pairs</code> 接口使用 <code>parse(...)</code>。</p>
<h2 id="关于-pegs-的警告">关于 PEGs 的警告!</h2>
<p>解析表达式 grammar 看起来和你可能习惯的其他解析工具很相似，比如正则表达式、BNF grammar 和其他工具（Yacc/Bison、LALR、CFG）。然而，PEGs 的行为却有微妙的不同。PEGs 是<a href="https://pest.rs/book/grammars/peg.html#eagerness">急切的</a>、<a href="https://pest.rs/book/grammars/peg.html#non-backtracking">非回溯的</a>、<a href="https://pest.rs/book/grammars/peg.html#ordered-choice">有序的</a>、<a href="https://pest.rs/book/grammars/peg.html#unambiguous">不含糊的</a>。</p>
<p>如果你不认识以上任何一个名字，不要害怕! 你已经比认识的人快了一步 - 当你使用 <code>pest</code> 的 PEGs 时，你不会被与其他工具的比较所绊倒。</p>
<p>如果你之前使用过其他解析工具，一定要仔细阅读下一节。我们会提到一些关于 PEGs 的常见错误。</p>
<h2 id="解析表达式语法">解析表达式语法</h2>
<p>解析表达式语法(PEG)只是严格地表示了如果你用手写一个解析器会写的简单的命令式代码。</p>
<pre><code>number = {            // To recognize a number...
    ASCII_DIGIT+      //   take as many ASCII digits as possible (at least one).
}
expression = {        // To recognize an expression...
    number            //   first try to take a number...
    | &quot;true&quot;          //   or, if that fails, the string &quot;true&quot;.
}
</code></pre><p>事实上，pest 产生的代码与上面注释中的伪代码十分相似。</p>
<h3 id="eagerness">Eagerness</h3>
<p>当在输入字符串上运行<a href="https://pest.rs/book/grammars/syntax.html#repetition">重复的</a> PEG 表达式时。</p>
<pre><code>ASCII_DIGIT+      // one or more characters from '0' to '9'
</code></pre><p>它尽可能多地运行该表达式（&ldquo;急切地&quot;或 &ldquo;贪婪地&quot;匹配）。它要么成功，消耗它所匹配的任何内容，并将剩余的输入传递到解析器的下一步。</p>
<pre><code>&quot;42 boxes&quot;
 ^ Running ASCII_DIGIT+

&quot;42 boxes&quot;
   ^ Successfully took one or more digits!

&quot; boxes&quot;
 ^ Remaining unparsed input.
</code></pre><p>或失败，什么也不消耗。</p>
<pre><code>&quot;galumphing&quot;
 ^ Running ASCII_DIGIT+
   Failed to take one or more digits!

&quot;galumphing&quot;
 ^ Remaining unparsed input (everything).
</code></pre><p>如果一个表达式未能匹配，那么这个失败就会向上传播，最终导致解析失败，除非这个失败在 grammar 中的某个地方被&quot;抓住&rdquo;。选择操作符是&quot;捕获&quot;这种失败的一种方法。</p>
<h3 id="有序选择">有序选择</h3>
<p><a href="https://pest.rs/book/grammars/syntax.html#ordered-choice">选择操作符</a>，写成一条竖线 <code>|</code>，是有序的。PEG 表达式 <code>first | second</code> 的意思是 &ldquo;先试 <code>first</code>，但如果失败了，再试 <code>second</code>&quot;。</p>
<p>在许多情况下，顺序并不重要。例如，<code>&quot;true&quot; | &quot;false&quot;</code> 将匹配字符串 <code>&quot;true&quot;</code> 或字符串 <code>&quot;false&quot;</code>（如果两者都不出现，则失败）。</p>
<p>然而，有时顺序确实很重要。考虑一下 PEG 表达式 <code>&quot;a&quot; | &quot;ab&quot;</code>。你可能期望它能匹配字符串 <code>&quot;a&quot;</code> 或字符串 <code>&quot;ab&quot;</code>。但事实并非如此 - 该表达式的意思是 &ldquo;尝试 <code>&quot;a&quot;</code>；但如果失败，则尝试 <code>&quot;ab&quot;</code>。如果你正在匹配字符串 &ldquo;abc&rdquo;，尝试 <code>&quot;a&quot;</code> 不会失败；相反，它将成功匹配 <code>&quot;a&quot;</code>，留下 <code>&quot;bc&quot;</code> 未被解析。</p>
<p>一般来说，当编写一个有选择的解析器时，把最长或最具体的选择放在前面，而把最短或最一般的选择放在最后。</p>
<h3 id="非回溯">非回溯</h3>
<p>在解析过程中，一个 PEG 表达式要么成功，要么失败。如果成功了，下一步就照常进行。但如果它失败了，整个表达式就会失败。引擎不会后退再试。</p>
<p>请看下面这个 grammar，在字符串 <code>&quot;frumious&quot;</code> 上进行匹配。</p>
<pre><code>word = {     // to recognize a word...
    ANY*     //   take any character, zero or more times...
    ~ ANY    //   followed by any character
}
</code></pre><p>你可能期望这条规则能够解析任何至少包含一个字符（相当于 <code>ANY+</code>）的输入字符串。但它不会。相反，第一个 <code>ANY*</code> 会急切地吃掉整个字符串 - 它会得偿所愿的。然后，下一个 <code>ANY</code> 将一无所有，所以它会失败。</p>
<pre><code>&quot;frumious&quot;
 ^ (word)

&quot;frumious&quot;
         ^ (ANY*) Success! Continue to `ANY` with remaining input &quot;&quot;.

&quot;&quot;
 ^ (ANY) Failure! Expected one character, but found end of string.
</code></pre><p>在有回溯功能的系统中（比如正则表达式），你会往后退一步，&ldquo;吐出&quot;一个字符，然后再试。但 PEG 不会这样做。在规则 <code>first~second</code> 中，一旦 <code>first</code> 解析成功，就已经消耗了一些字符，永远不会再回来，<code>second</code> 只能在 <code>first</code> 没有消耗的输入上运行。</p>
<h3 id="毫不含糊">毫不含糊</h3>
<p>这些规则构成了一个优雅而简单的系统。每个 PEG 规则都会在输入字符串的剩余部分上运行，消耗尽可能多的输入。一旦一个规则完成，剩下的输入就会被传递给解析器的其他部分。</p>
<p>例如，表达式 <code>ASCII_DIGIT+</code>，&ldquo;一个或多个数字&rdquo;，将始终匹配可能的最大的连续数字序列。不存在意外地让后面的规则回溯并以一种不直观和非局部的方式窃取一些数字的危险。</p>
<p>这与其他解析工具形成了鲜明的对比，比如正则表达式和 CFG，在这些工具中，规则的结果往往取决于一些距离的代码。事实上，LR解析器中著名的&quot;移位/还原冲突&quot;在 PEG 中并不存在问题。</p>
<h3 id="不要惊慌">不要惊慌</h3>
<p>这一切在一开始可能有点反常。但正如你所看到的，基本的逻辑是非常简单和直接的。你可以琐碎地逐步完成任何 PEG 表达式的执行。</p>
<ul>
<li>试试这个。</li>
<li>如果它成功了，就尝试下一件事。</li>
<li>否则，尝试另一件事。</li>
</ul>
<pre><code>(this ~ next_thing) | (other_thing)
</code></pre><p>这些规则结合在一起，使得 PEG 成为编写解析器的非常愉快的工具。</p>
<h2 id="pet-解析器的语法">pet 解析器的语法</h2>
<p><code>pet</code> grammar 是规则的列表。规则是这样定义的。</p>
<pre><code>my_rule = { ... }

another_rule = {        // comments are preceded by two slashes
    ...                 // whitespace goes anywhere
}
</code></pre><p>由于规则名被翻译成 Rust enum 变体，所以不允许成为 Rust 关键字。</p>
<p>定义规则的左大括号 <code>{</code> 前面可以有<a href="https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules">影响其操作</a>的符号。</p>
<pre><code>silent_rule = _{ ... }
atomic_rule = @{ ... }
</code></pre><h3 id="表达式">表达式</h3>
<p>Grammar 规则是由表达式建立起来的（因此称为&quot;解析表达式文法&rdquo;）。这些表达式是对如何解析输入字符串的简明、正式的描述。</p>
<p>表达式是可以组合的：它们可以从其他表达式中构建出来，也可以互相嵌套，以产生任意复杂的规则（尽管你应该将非常复杂的表达式分解成多个规则，以使它们更容易管理）。</p>
<p>PEG 表达式既适用于高级意义，如&quot;一个函数签名，后面是一个函数体&rdquo;，也适用于低级意义，如&quot;一个分号，后面是换行&rdquo;。组合形式&quot;后面是&rdquo;，即<a href="https://pest.rs/book/grammars/syntax.html#sequence">序列操作符</a>，在这两种情况下都是一样的。</p>
<h3 id="终端">终端</h3>
<p>最基本的规则是双引号的文字字符串。<code>&quot;text&quot;</code>。</p>
<p>如果一个字符串前面有一个逗号，那么它可以不区分大小写（仅适用于 ASCII 字符）: <code>^&quot;text&quot;</code>。</p>
<p>在一个范围内的单个字符被写成两个单引号字符，用两个点分开：<code>'0'...'9'</code>。</p>
<p>你可以用特殊规则 <code>ANY</code> 来匹配任何单个字符。这相当于 <code>'\u{00}'...'\u{10FFFF}'</code>，任何一个 Unicode 字符。</p>
<pre><code>&quot;a literal string&quot;
^&quot;ASCII case-insensitive string&quot;
'a'..'z'
ANY
</code></pre><p>最后，你可以直接写出其他规则的名称来引用它们，甚至可以递归使用规则。</p>
<pre><code>my_rule = { &quot;slithy &quot; ~ other_rule }
other_rule = { &quot;toves&quot; }
recursive_rule = { &quot;mimsy &quot; ~ recursive_rule }
</code></pre><h3 id="序列">序列</h3>
<p>序列运算符写成一个波浪号 <code>~</code>。</p>
<pre><code>first ~ and_then

(&quot;abc&quot;) ~ (^&quot;def&quot;) ~ ('g'..'z')        // matches &quot;abcDEFr&quot;
</code></pre><p>当匹配一个序列表达式时，尝试匹配 <code>first</code>。如果 <code>first</code> 匹配成功，则接下来尝试 <code>and_then</code>。但是，如果 <code>first</code> 失败，则整个表达式失败。</p>
<p>表达式的列表可以与序列链在一起，这表明所有的组件必须出现，按照指定的顺序。</p>
<h3 id="有序选择-1">有序选择</h3>
<p>选择运算符写成一条竖线 <code>|</code>。</p>
<pre><code>first | or_else

(&quot;abc&quot;) | (^&quot;def&quot;) | ('g'..'z')        // matches &quot;DEF&quot;
</code></pre><p>当匹配一个选择表达式时，尝试匹配 <code>first</code>。如果 <code>first</code> 匹配成功，则整个表达式立即成功。但是，如果 <code>first</code> 失败，接下来会尝试 <code>or_else</code>。</p>
<p>注意，<code>first</code> 和 <code>or_else</code> 总是在同一个位置尝试，即使 <code>first</code> 在失败之前匹配了一些输入。当遇到解析失败时，引擎会尝试下一个有序的选择，就像没有匹配到输入一样。失败的解析永远不会消耗任何输入。</p>
<pre><code>start = { &quot;Beware &quot; ~ creature }
creature = {
    (&quot;the &quot; ~ &quot;Jabberwock&quot;)
    | (&quot;the &quot; ~ &quot;Jubjub bird&quot;)
}

&quot;Beware the Jubjub bird&quot;
 ^ (start) Parses via the second choice of `creature`,
           even though the first choice matched &quot;the &quot; successfully.
</code></pre><p>借用术语，把这种操作看成是&quot;交替&quot;或简单的 &ldquo;OR&rdquo;，有点诱人，但这是误导。之所以特别使用 &ldquo;选择&rdquo; 这个词，是因为这个操作不仅仅是逻辑上的 &ldquo;OR&rdquo;。</p>
<h3 id="重复">重复</h3>
<p>有两个重复运算符：星号 <code>*</code> 和加号 <code>+</code>。它们被放在一个表达式之后。星号 <code>*</code> 表示前面的表达式可以出现零次或多次。加号 <code>+</code> 表示前面的表达式可以出现一次或多次（必须至少出现一次）。</p>
<p>问号运算符 <code>?</code> 类似，但它表示表达式是可选的 - 它可以出现0次或1次。</p>
<pre><code>(&quot;zero&quot; ~ &quot;or&quot; ~ &quot;more&quot;)*
 (&quot;one&quot; | &quot;or&quot; | &quot;more&quot;)+
           (^&quot;optional&quot;)?
</code></pre><p>请注意，<code>expr*</code> 和 <code>expr?</code> 总是会成功，因为它们被允许匹配零次。例如，<code>&quot;a&quot;* ~ &quot;b&quot;?</code> 即使在空的输入字符串上也会成功。</p>
<p>其他重复次数可以用大括号来表示。</p>
<pre><code>expr{n}           // exactly n repetitions
expr{m, n}        // between m and n repetitions, inclusive

expr{, n}         // at most n repetitions
expr{m, }         // at least m repetitions
</code></pre><p>因此，<code>expr*</code> 等同于 <code>expr{0，}</code>；<code>expr+</code> 等同于 <code>expr{1，}</code>；<code>expr?</code> 等同于 <code>expr{0，1}</code>。</p>
<h3 id="谓词">谓词</h3>
<p>在表达式前面加上安括号 <code>&amp;</code> 或感叹号 <code>!</code>，就会变成一个不消耗任何输入的谓词。你可能知道这些运算符为 &ldquo;向前查看&rdquo; 或 &ldquo;不进位&rdquo;。</p>
<p>写成安培符 <code>&amp;</code> 的正式谓词试图匹配其内部表达式。如果内部表达式成功，解析就会继续，但位置与谓词相同 - <code>&amp;foo ~ bar</code> 因此是一种 &ldquo;AND&rdquo; 语句。&ldquo;输入字符串必须匹配 <code>foo</code> AND <code>bar</code>&quot;。如果内部表达式失败，整个表达式也会失败。</p>
<p>写成感叹号的否定谓词 <code>!</code>，试图匹配其内部表达式。如果内部表达式失败，则谓词成功，并在与谓词相同的位置继续解析。如果内部表达式成功，则谓词失败 - <code>!foo ~ bar</code> 因此是一种 &ldquo;NOT&rdquo; 语句。&ldquo;输入的字符串必须与 <code>bar</code> 匹配，但不能是 <code>foo</code>&quot;。</p>
<p>这就引出了一个常见的惯用法，意思是&quot;任何字符但是&rdquo;：</p>
<pre><code>not_space_or_tab = {
    !(                // if the following text is not
        &quot; &quot;           //     a space
        | &quot;\t&quot;        //     or a tab
    )
    ~ ANY             // then consume one character
}

triple_quoted_string = {
    &quot;'''&quot;
    ~ triple_quoted_character*
    ~ &quot;'''&quot;
}
triple_quoted_character = {
    !&quot;'''&quot;        // if the following text is not three apostrophes
    ~ ANY         // then consume one character
}
</code></pre><h3 id="操作符优先级和分组-wip">操作符优先级和分组 (WIP)</h3>
<p>重复运算符星号 <code>*</code>、加号 <code>+</code> 和问号 <code>?</code> 适用于紧接前面的表达式。</p>
<pre><code>&quot;One &quot; ~ &quot;or &quot; ~ &quot;more. &quot;+
&quot;One &quot; ~ &quot;or &quot; ~ (&quot;more. &quot;+)
    are equivalent and match
&quot;One or more. more. more. more. &quot;
</code></pre><p>较大的表达式可以通过用括号包围来重复。</p>
<pre><code>(&quot;One &quot; ~ &quot;or &quot; ~ &quot;more. &quot;)+
    matches
&quot;One or more. One or more. &quot;
</code></pre><p>重复运算符的优先性最高，其次是谓词运算符、序列运算符，最后是有序选择。</p>
<pre><code>my_rule = {
    &quot;a&quot;* ~ &quot;b&quot;?
    | &amp;&quot;b&quot;+ ~ &quot;a&quot;
}

// equivalent to

my_rule = {
      ( (&quot;a&quot;*) ~ (&quot;b&quot;?) )
    | ( (&amp;(&quot;b&quot;+)) ~ &quot;a&quot; )
}
</code></pre><h3 id="输入的开始和结束">输入的开始和结束</h3>
<p>规则 <code>SOI</code> 和 <code>EOI</code> 分别匹配输入字符串的开始和结束。两者都不消耗任何文本。它们只表明解析器当前是否在输入的一个边缘。</p>
<p>例如，为了确保一条规则匹配整个输入，其中任何语法错误都会导致解析失败（而不是成功但不完整的解析）。</p>
<pre><code>main = {
    SOI
    ~ (...)
    ~ EOI
}
</code></pre><h3 id="隐含的空白">隐含的空白</h3>
<p>许多语言和文本格式允许在逻辑标记之间任意留白和注释。例如，Rust 认为 <code>4+5</code> 相当于 <code>4 + 5</code> 和 <code>4 /* comment */ + 5</code>。</p>
<p>可选规则 <code>WHITESPACE</code> 和 <code>COMMENT</code> 实现了这种行为。如果定义了这两个规则中的任何一个(或两个)，它们将被隐式地插入到每个<a href="https://pest.rs/book/grammars/syntax.html#sequence">序列</a>和每个<a href="https://pest.rs/book/grammars/syntax.html#repetition">重复</a>之间(<a href="https://pest.rs/book/grammars/syntax.html#atomic">原子规则</a>除外)。</p>
<pre><code>expression = { &quot;4&quot; ~ &quot;+&quot; ~ &quot;5&quot; }
WHITESPACE = _{ &quot; &quot; }
COMMENT = _{ &quot;/*&quot; ~ (!&quot;*/&quot; ~ ANY)* ~ &quot;*/&quot; }
</code></pre><pre><code>&quot;4+5&quot;
&quot;4 + 5&quot;
&quot;4  +     5&quot;
&quot;4 /* comment */ + 5&quot;
</code></pre><p>正如你所看到的，<code>WHITESPACE</code> 和 <code>COMMENT</code> 是重复运行的，所以它们只需要匹配一个空白字符或一个注释。上面的 grammar 相当于。</p>
<pre><code>expression = {
    &quot;4&quot;   ~ (ws | com)*
    ~ &quot;+&quot; ~ (ws | com)*
    ~ &quot;5&quot;
}
ws = _{ &quot; &quot; }
com = _{ &quot;/*&quot; ~ (!&quot;*/&quot; ~ ANY)* ~ &quot;*/&quot; }
</code></pre><p>请注意，隐式空格不会插入规则的开头或结尾 - 例如，表达式不匹配 <code>&quot; 4+5 &quot;</code>。如果你想在规则的开头和结尾加入隐式空格，你需要把它夹在两个空规则之间（通常是 <code>SOI</code> 和 <code>EOI</code>，<a href="https://pest.rs/book/grammars/syntax.html#start-and-end-of-input">如上所述</a>）。</p>
<pre><code>WHITESPACE = _{ &quot; &quot; }
expression = { &quot;4&quot; ~ &quot;+&quot; ~ &quot;5&quot; }
main = { SOI ~ expression ~ EOI }
</code></pre><pre><code>&quot;4+5&quot;
&quot;  4 + 5   &quot;
</code></pre><p>(请务必将 <code>WHITESPACE</code> 和 <code>COMMENT</code> 规则标记为<a href="https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules">静默</a>规则，除非你想在其他规则中看到它们！)</p>
<h3 id="静默规则和原子规则">静默规则和原子规则</h3>
<p>静默规则就像普通规则一样 - 当运行时，它们的功能是一样的 - 除了它们不产生 <a href="https://pest.rs/book/parser_api.html#pairs">pairs</a>或 <a href="https://pest.rs/book/parser_api.html#tokens">tokens</a>。如果一条规则是静默的，那么它永远不会出现在解析结果中。</p>
<p>要创建一个静默规则，请在左边的大括号 <code>{</code> 前加上一个下划线 <code>_</code>。</p>
<pre><code>silent = _{ ... }
</code></pre><h3 id="原子">原子</h3>
<p>pest 有两种原子规则：原子和复合原子。要做一个，在左大括号 <code>{</code> 前写上一个符号。</p>
<pre><code>atomic = @{ ... }
compound_atomic = ${ ... }
</code></pre><p>这两种原子规则都可以防止<a href="https://pest.rs/book/grammars/syntax.html#implicit-whitespace">隐式空格</a>：在原子规则中，波浪号 <code>~</code> 表示 &ldquo;紧接着&rdquo;，<a href="https://pest.rs/book/grammars/syntax.html#repetition">重复操作符</a>（星号 <code>*</code> 和加号 <code>+</code>）没有隐式分隔。此外，所有从原子规则中调用的其他规则也被视为原子规则。</p>
<p>两者的区别在于它们如何产生内部规则的标记。在一个原子规则中，内部匹配规则是<a href="https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules">静默的</a>。相比之下，复合原子规则会像普通规则一样产生内部 token。</p>
<p>当您要解析的文本忽略空白时，原子规则是很有用的，除了少数情况，例如文字字符串。在这种情况下，您可以编写 <code>WHITESPACE</code> 或 <code>COMMENT</code> 规则，然后使您的字符串匹配规则成为原子规则。</p>
<h3 id="非原子的">非原子的</h3>
<p>有时候，你会想要取消原子解析的效果。例如，你可能想在表达式内部进行字符串插值，里面的表达式仍然可以像正常的一样有空格。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/bin/env python3</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;The answer is {2 + 4}.&#34;</span><span class="p">)</span>
</code></pre></div><p>这是你使用非原子规则的地方。在定义的大括号前面写一个感叹号 <code>!</code> 无论是否从原子规则中调用，该规则都将作为非原子规则运行。</p>
<pre><code>fstring = @{ &quot;\&quot;&quot; ~ ... }
expr = !{ ... }
</code></pre><h3 id="堆栈wip">堆栈(WIP)</h3>
<p>pest 维护了一个可以直接从 grammar 中操作的栈。一个表达式可以用关键字 <code>PUSH</code> 进行匹配并推到栈上，然后再用关键字 <code>PEEK</code> 和 <code>POP</code> 进行精确匹配。</p>
<p>使用栈可以对完全相同的文本进行多次匹配，而不是相同的模式。</p>
<p>例如:</p>
<pre><code>same_text = {
    PUSH( &quot;a&quot; | &quot;b&quot; | &quot;c&quot; )
    ~ POP
}
same_pattern = {
    (&quot;a&quot; | &quot;b&quot; | &quot;c&quot;)
    ~ (&quot;a&quot; | &quot;b&quot; | &quot;c&quot;)
}
</code></pre><p>在这种情况下，<code>same_pattern</code> 会匹配 <code>&quot;ab&quot;</code>，而 <code>same_text</code> 不会。</p>
<p>一个实际的用途是解析 Rust 的 &ldquo;<a href="https://doc.rust-lang.org/book/second-edition/appendix-02-operators.html#non-operator-symbols">原始字符串字面值</a>&quot;，它看起来像这样。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">const</span><span class="w"> </span><span class="n">raw_str</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="s">r###&#34;
</span><span class="s">    Some number of number signs # followed by a quotation mark &#34;.
</span><span class="s">
</span><span class="s">    Quotation marks can be used anywhere inside: &#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;,
</span><span class="s">    as long as one is not followed by a matching number of number signs,
</span><span class="s">    which ends the string: &#34;###</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>当解析一个原始字符串时，我们必须跟踪引号前出现了多少个数字符号 <code>#</code>。我们可以使用栈来完成这个任务。</p>
<pre><code>raw_string = {
    &quot;r&quot; ~ PUSH(&quot;#&quot;*) ~ &quot;\&quot;&quot;    // push the number signs onto the stack
    ~ raw_string_interior
    ~ &quot;\&quot;&quot; ~ POP               // match a quotation mark and the number signs
}
raw_string_interior = {
    (
        !(&quot;\&quot;&quot; ~ PEEK)    // unless the next character is a quotation mark
                          // followed by the correct amount of number signs,
        ~ ANY             // consume one character
    )*
}
</code></pre><h3 id="小抄">小抄</h3>
<table>
<thead>
<tr>
<th style="text-align:left">语法</th>
<th style="text-align:left">含义</th>
<th style="text-align:left">语法</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>foo = { ... }</code></td>
<td style="text-align:left">regular rule</td>
<td style="text-align:left"><code>baz = @{ ... }</code></td>
<td style="text-align:left">atomic</td>
</tr>
<tr>
<td style="text-align:left"><code>bar = _{ ... }</code></td>
<td style="text-align:left">silent<code>	                  | </code>qux = ${ &hellip; }`   | compound-atomic    |</td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"><code>plugh = !{ ... }</code></td>
<td style="text-align:left">non-atomic</td>
</tr>
<tr>
<td style="text-align:left"><code>&quot;abc&quot;</code></td>
<td style="text-align:left">exact string</td>
<td style="text-align:left"><code>^&quot;abc&quot;</code></td>
<td style="text-align:left">case insensitive</td>
</tr>
<tr>
<td style="text-align:left"><code>'a'..'z'</code></td>
<td style="text-align:left">character range</td>
<td style="text-align:left"><code>ANY</code></td>
<td style="text-align:left">any character</td>
</tr>
<tr>
<td style="text-align:left"><code>foo ~ bar</code></td>
<td style="text-align:left">sequence</td>
<td style="text-align:left"><code>baz | qux</code></td>
<td style="text-align:left">ordered choice</td>
</tr>
<tr>
<td style="text-align:left"><code>foo*</code></td>
<td style="text-align:left">zero or more</td>
<td style="text-align:left"><code>bar+</code></td>
<td style="text-align:left">one or more</td>
</tr>
<tr>
<td style="text-align:left"><code>baz?</code></td>
<td style="text-align:left">optional</td>
<td style="text-align:left"><code>qux{n}</code></td>
<td style="text-align:left">exactly n</td>
</tr>
<tr>
<td style="text-align:left"><code>qux{m, n}</code></td>
<td style="text-align:left">between m and n  (inclusive)</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;foo</code></td>
<td style="text-align:left">positive predicate</td>
<td style="text-align:left"><code>!bar</code></td>
<td style="text-align:left">negative predicate</td>
</tr>
<tr>
<td style="text-align:left"><code>PUSH(baz)</code></td>
<td style="text-align:left">match and push</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>POP</code></td>
<td style="text-align:left">match and pop</td>
<td style="text-align:left"><code>PEEK</code></td>
<td style="text-align:left">match without pop</td>
</tr>
</tbody>
</table>
<h2 id="内置规则">内置规则</h2>
<p>除了 <code>ANY</code>，匹配任何单一的 Unicode 字符外，<code>pest</code> 还提供了几条规则，让解析文本更加方便。</p>
<h3 id="ascii-规则">ASCII 规则</h3>
<p>在可打印的 ASCII 字符中，它通常对匹配字母字符和数字很有用。对于数字，pest 提供了常见的（基数）的数字。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Built-in rule</th>
<th style="text-align:left">Equivalent</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>ASCII_DIGIT</code></td>
<td style="text-align:left"><code>'0'..'9'</code></td>
</tr>
<tr>
<td style="text-align:left"><code>ASCII_NONZERO_DIGIT</code></td>
<td style="text-align:left"><code>'1'..'9'</code></td>
</tr>
<tr>
<td style="text-align:left"><code>ASCII_BIN_DIGIT</code></td>
<td style="text-align:left"><code>'0'..'1'</code></td>
</tr>
<tr>
<td style="text-align:left"><code>ASCII_OCT_DIGIT</code></td>
<td style="text-align:left"><code>'0'..'7'</code></td>
</tr>
<tr>
<td style="text-align:left"><code>ASCII_HEX_DIGIT</code></td>
<td style="text-align:left"><code>'0'..'9' | 'a'..'f' | 'A'..'F'</code></td>
</tr>
</tbody>
</table>
<p>对于字母字符，要区分大写和小写。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Built-in rule</th>
<th style="text-align:left">Equivalent</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ASCII_ALPHA_LOWER</td>
<td style="text-align:left"><code>'a'..'z'</code></td>
</tr>
<tr>
<td style="text-align:left">ASCII_ALPHA_UPPER</td>
<td style="text-align:left"><code>'A'..'Z'</code></td>
</tr>
<tr>
<td style="text-align:left">ASCII_ALPHA</td>
<td style="text-align:left"><code>'a'..'z' | 'A'..'Z'</code></td>
</tr>
</tbody>
</table>
<p>And for miscellaneous use:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Built-in rule</th>
<th style="text-align:left">Meaning</th>
<th>Equivalent</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ASCII_ALPHANUMERIC</td>
<td style="text-align:left">any digit or letter</td>
<td><code>ASCII_DIGIT | ASCII_ALPHA</code></td>
</tr>
<tr>
<td style="text-align:left">NEWLINE</td>
<td style="text-align:left">any line feed format</td>
<td><code>&quot;\n&quot; | &quot;\r\n&quot; | &quot;\r&quot;</code></td>
</tr>
</tbody>
</table>
<h3 id="统一码规则">统一码规则</h3>
<p>为了更容易正确解析任意 Unicode 文本，pest 包含了大量对应 Unicode 字符属性的规则。这些规则分为一般类别和二进制属性规则。</p>
<p>Unicode 字符根据其一般用途被划分为不同的类别。每一个字符都属于一个类别，就像每一个 ASCII 字符都是一个控制字符、一个数字、一个字母、一个符号或一个空格一样。</p>
<p>此外，每个 Unicode 字符都有一个二进制属性列表（真或假），它满足或不满足这些属性。字符可以属于任何数量的这些属性，这取决于它们的含义。</p>
<p>例如，字符 &ldquo;A&rdquo;，&ldquo;拉丁文大写字母A&rdquo;，属于一般的 &ldquo;大写字母&rdquo; 类别，因为它的一般用途是字母。它具有 &ldquo;大写字母&rdquo; 的二元属性，但不具有 &ldquo;表情符号&rdquo; 的属性。相比之下，&ldquo;负数平方的拉丁文大写字母A&rdquo; 这个字符，因为在文本中一般不作为字母出现，所以属于一般类别 &ldquo;其他符号&rdquo;。它同时具有 &ldquo;大写字母&rdquo; 和 &ldquo;表情符号&rdquo; 的二元属性。</p>
<p>详情请参考《Unicode 标准》第四章。</p>
<h3 id="一般类别">一般类别</h3>
<p>从形式上看，类别是不重叠的：每个 Unicode 字符正好属于一个类别，没有一个类别包含另一个类别。然而，由于某些类别组经常一起使用，pest 在下面暴露了类别的层次结构。例如，规则 <code>CASED_LETTER</code> 在技术上不是 Unicode 通用类别，而是匹配属于 UPPERCASE_LETTER  或LOWERCASE_LETTER 的字符，这些都是通用类别。</p>
<ul>
<li>LETTER</li>
<li>CASED_LETTER</li>
<li>UPPERCASE_LETTER</li>
<li>LOWERCASE_LETTER</li>
<li>TITLECASE_LETTER</li>
<li>MODIFIER_LETTER</li>
<li>OTHER_LETTER</li>
<li>MARK</li>
<li>NONSPACING_MARK</li>
<li>SPACING_MARK</li>
<li>ENCLOSING_MARK</li>
<li>NUMBER</li>
<li>DECIMAL_NUMBER</li>
<li>LETTER_NUMBER</li>
<li>OTHER_NUMBER</li>
<li>PUNCTUATION</li>
<li>CONNECTOR_PUNCTUATION</li>
<li>DASH_PUNCTUATION</li>
<li>OPEN_PUNCTUATION</li>
<li>CLOSE_PUNCTUATION</li>
<li>INITIAL_PUNCTUATION</li>
<li>FINAL_PUNCTUATION</li>
<li>OTHER_PUNCTUATION</li>
<li>SYMBOL</li>
<li>MATH_SYMBOL</li>
<li>CURRENCY_SYMBOL</li>
<li>MODIFIER_SYMBOL</li>
<li>OTHER_SYMBOL</li>
<li>SEPARATOR</li>
<li>SPACE_SEPARATOR</li>
<li>LINE_SEPARATOR</li>
<li>PARAGRAPH_SEPARATOR</li>
<li>OTHER</li>
<li>CONTROL</li>
<li>FORMAT</li>
<li>SURROGATE</li>
<li>PRIVATE_USE</li>
<li>UNASSIGNED</li>
</ul>
<h3 id="binary-properties">Binary properties</h3>
<p>这些属性中有许多是用来定义 Unicode 文本算法的，如双向算法和文本分割算法。这类属性对于大多数解析器来说可能并不有用。</p>
<p>但是，XID_START 和 XID_CONTINUE 这两个属性特别值得注意，因为它们被定义为 &ldquo;协助标识符的标准处理&rdquo;，&ldquo;如编程语言变量&rdquo;。详见技术报告31。</p>
<ul>
<li>ALPHABETIC</li>
<li>BIDI_CONTROL</li>
<li>CASE_IGNORABLE</li>
<li>CASED</li>
<li>CHANGES_WHEN_CASEFOLDED</li>
<li>CHANGES_WHEN_CASEMAPPED</li>
<li>CHANGES_WHEN_LOWERCASED</li>
<li>CHANGES_WHEN_TITLECASED</li>
<li>CHANGES_WHEN_UPPERCASED</li>
<li>DASH</li>
<li>DEFAULT_IGNORABLE_CODE_POINT</li>
<li>DEPRECATED</li>
<li>DIACRITIC</li>
<li>EXTENDER</li>
<li>GRAPHEME_BASE</li>
<li>GRAPHEME_EXTEND</li>
<li>GRAPHEME_LINK</li>
<li>HEX_DIGIT</li>
<li>HYPHEN</li>
<li>IDS_BINARY_OPERATOR</li>
<li>IDS_TRINARY_OPERATOR</li>
<li>ID_CONTINUE</li>
<li>ID_START</li>
<li>IDEOGRAPHIC</li>
<li>JOIN_CONTROL</li>
<li>LOGICAL_ORDER_EXCEPTION</li>
<li>LOWERCASE</li>
<li>MATH</li>
<li>NONCHARACTER_CODE_POINT</li>
<li>OTHER_ALPHABETIC</li>
<li>OTHER_DEFAULT_IGNORABLE_CODE_POINT</li>
<li>OTHER_GRAPHEME_EXTEND</li>
<li>OTHER_ID_CONTINUE</li>
<li>OTHER_ID_START</li>
<li>OTHER_LOWERCASE</li>
<li>OTHER_MATH</li>
<li>OTHER_UPPERCASE</li>
<li>PATTERN_SYNTAX</li>
<li>PATTERN_WHITE_SPACE</li>
<li>PREPENDED_CONCATENATION_MARK</li>
<li>QUOTATION_MARK</li>
<li>RADICAL</li>
<li>REGIONAL_INDICATOR</li>
<li>SENTENCE_TERMINAL</li>
<li>SOFT_DOTTED</li>
<li>TERMINAL_PUNCTUATION</li>
<li>UNIFIED_IDEOGRAPH</li>
<li>UPPERCASE</li>
<li>VARIATION_SELECTOR</li>
<li>WHITE_SPACE</li>
<li>XID_CONTINUE</li>
<li>XID_START</li>
</ul>
<h2 id="例子-json">例子: JSON</h2>
<p>JSON 是一种流行的数据序列化格式，它源于 JavaScript 的语法。JSON 文档是树状的，并且可能是递归的&ndash;对象和数组这两种数据类型可以包含其他值，包括其他对象和数组。</p>
<p>下面是一个 JSON 文档的例子。</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;nesting&#34;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&#34;inner object&#34;</span><span class="p">:</span> <span class="p">{}</span> <span class="p">},</span>
    <span class="nt">&#34;an array&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mf">1e-6</span><span class="p">],</span>
    <span class="nt">&#34;string with escaped double quotes&#34;</span> <span class="p">:</span> <span class="s2">&#34;\&#34;quick brown foxes\&#34;&#34;</span>
<span class="p">}</span>
</code></pre></div><p>让我们写一个程序，将 JSON 解析成一个 Rust 对象，也就是抽象语法树，然后将 AST 序列化回 JSON。</p>
<h3 id="设置">设置</h3>
<p>我们将从定义 Rust 中的 AST 开始。每个 JSON 数据类型都由一个枚举变体来表示。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">enum</span> <span class="nc">JSONValue</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">Object</span><span class="p">(</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="p">(</span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">JSONValue</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="p">)</span><span class="o">&gt;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">Array</span><span class="p">(</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="n">JSONValue</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;&gt;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="nb">String</span><span class="p">(</span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">Number</span><span class="p">(</span><span class="kt">f64</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">Boolean</span><span class="p">(</span><span class="kt">bool</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">Null</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>为了避免反序列化字符串时的复制，JSONValue 从原始未解析的 JSON 中借用字符串。为了使其工作，我们不能解释字符串转义序列：输入字符串 &ldquo;\n&rdquo; 将由 JSONValue::String(&quot;\n&rdquo;) 表示，这是一个有两个字符的 Rust 字符串，尽管它表示的是一个只有一个字符的 JSON 字符串。</p>
<p>让我们继续看序列化器。为了清晰起见，它使用分配的 Strings，而不是提供 std::fmt::Display 的实现，后者会更习惯。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">serialize_jsonvalue</span><span class="p">(</span><span class="n">val</span>: <span class="kp">&amp;</span><span class="nc">JSONValue</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">String</span> <span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="n">JSONValue</span>::<span class="o">*</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="n">val</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Object</span><span class="p">(</span><span class="n">o</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">contents</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">_</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">o</span><span class="w">
</span><span class="w">                </span><span class="p">.</span><span class="n">iter</span><span class="p">()</span><span class="w">
</span><span class="w">                </span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p">)</span><span class="o">|</span><span class="w">
</span><span class="w">                     </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;\&#34;{}\&#34;:{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">serialize_jsonvalue</span><span class="p">(</span><span class="n">value</span><span class="p">)))</span><span class="w">
</span><span class="w">                </span><span class="p">.</span><span class="n">collect</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{{{}}}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">contents</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#34;,&#34;</span><span class="p">))</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">Array</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">contents</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">_</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="n">serialize_jsonvalue</span><span class="p">).</span><span class="n">collect</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;[{}]&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">contents</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#34;,&#34;</span><span class="p">))</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="nb">String</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;\&#34;{}\&#34;&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="p">),</span><span class="w">
</span><span class="w">        </span><span class="n">Number</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">),</span><span class="w">
</span><span class="w">        </span><span class="n">Boolean</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p">),</span><span class="w">
</span><span class="w">        </span><span class="n">Null</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;null&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>请注意，在对象和数组的情况下，函数会递归地调用自己。这种模式出现在整个解析器中。AST创建函数在解析结果中递归迭代，而语法的规则也包括了自己。</p>
<h3 id="grammar-的编写">grammar 的编写</h3>
<p>让我们从 whitespace 开始。JSON 空格可以出现在任何地方，除了字符串内部（必须单独解析）和数字中的数字之间（不允许）。这使得它很适合 pest 的隐式空白。在 <code>src/json.pest</code>:</p>
<pre><code>WHITESPACE = _{ &quot; &quot; | &quot;\t&quot; | &quot;\r&quot; | &quot;\n&quot; }
</code></pre><p>JSON 规范包括解析 JSON 字符串的图。我们可以直接从该页面写出语法。让我们把 object 写成一个用逗号分隔的对的序列。</p>
<pre><code>object = {
    &quot;{&quot; ~ &quot;}&quot; |
    &quot;{&quot; ~ pair ~ (&quot;,&quot; ~ pair)* ~ &quot;}&quot;
}
pair = { string ~ &quot;:&quot; ~ value }

array = {
    &quot;[&quot; ~ &quot;]&quot; |
    &quot;[&quot; ~ value ~ (&quot;,&quot; ~ value)* ~ &quot;]&quot;
}
</code></pre><p>对象和数组规则展示了如何用分隔符解析一个潜在的空列表。有两种情况：一种是空列表，另一种是至少有一个元素的列表。这是必要的，因为数组中的逗号，如 <code>[0，1，]</code>，在 JSON 中是非法的。</p>
<p>现在我们可以写 value，它代表任何单一的数据类型。我们将模仿我们的 AST，将 boolean 和 null 写成单独的规则。</p>
<pre><code>value = _{ object | array | string | number | boolean | null }

boolean = { &quot;true&quot; | &quot;false&quot; }

null = { &quot;null&quot; }
</code></pre><p>让我们把字符串的逻辑分成三个部分。<code>char</code> 是一个匹配字符串中任何逻辑字符的规则，包括任何反斜杠转义序列。<code>inner</code> 代表字符串的内容，不包括周围的双引号。<code>string</code> 匹配字符串的内部内容，包括周围的双引号。</p>
<p><code>char</code> 规则使用成语 <code>!(...) ~ ANY</code>，它匹配除了括号中给出的字符之外的任何字符。在这种情况下，除了双引号 <code>&quot;&quot;</code> 和反斜杠 <code>\</code> 之外，任何字符在字符串内部都是合法的，这需要单独的解析逻辑。</p>
<pre><code>string = ${ &quot;\&quot;&quot; ~ inner ~ &quot;\&quot;&quot; }
inner = @{ char* }
char = {
    !(&quot;\&quot;&quot; | &quot;\\&quot;) ~ ANY
    | &quot;\\&quot; ~ (&quot;\&quot;&quot; | &quot;\\&quot; | &quot;/&quot; | &quot;b&quot; | &quot;f&quot; | &quot;n&quot; | &quot;r&quot; | &quot;t&quot;)
    | &quot;\\&quot; ~ (&quot;u&quot; ~ ASCII_HEX_DIGIT{4})
}
</code></pre><p>因为 <code>string</code> 被标记为复原子，所以 <code>string</code> token 对也会包含一个 <code>inner</code> 对。因为 <code>inner</code> 被标记为原子，所以在 <code>inner</code> 中不会出现 <code>char</code> 对。由于这些规则是原子性的，所以在不同的标记之间不允许有空格。</p>
<p>数字有四个逻辑部分：一个可选的符号、一个整数部分、一个可选的分数部分和一个可选的指数。我们将把数字标记为原子，这样它的部分之间就不能出现空白。</p>
<pre><code>number = @{
    &quot;-&quot;?
    ~ (&quot;0&quot; | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ (&quot;.&quot; ~ ASCII_DIGIT*)?
    ~ (^&quot;e&quot; ~ (&quot;+&quot; | &quot;-&quot;)? ~ ASCII_DIGIT+)?
}
</code></pre><p>我们需要一个最终规则来表示整个 JSON 文件。JSON 文件的唯一合法内容是一个对象或数组。我们将把这个规则标记为沉默，这样一个解析后的 JSON 文件只包含两个标记对：解析后的值本身，以及 EOI 规则。</p>
<pre><code>json = _{ SOI ~ (object | array) ~ EOI }
</code></pre><h3 id="ast-生成">AST 生成</h3>
<p>让我们把 grammar 编译成 Rust。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">extern</span><span class="w"> </span><span class="k">crate</span><span class="w"> </span><span class="n">pest</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="cp">#[macro_use]</span><span class="w">
</span><span class="w"></span><span class="k">extern</span><span class="w"> </span><span class="k">crate</span><span class="w"> </span><span class="n">pest_derive</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">pest</span>::<span class="n">Parser</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(Parser)]</span><span class="w">
</span><span class="w"></span><span class="cp">#[grammar = </span><span class="s">&#34;json.pest&#34;</span><span class="cp">]</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">JSONParser</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>我们将写一个同时处理解析和 AST 生成的函数。该函数的用户可以在输入字符串上调用它，然后将返回的结果作为 JSONValue 或解析错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">pest</span>::<span class="n">error</span>::<span class="n">Error</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">parse_json_file</span><span class="p">(</span><span class="n">file</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">JSONValue</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&lt;</span><span class="n">Rule</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">json</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">JSONParser</span>::<span class="n">parse</span><span class="p">(</span><span class="n">Rule</span>::<span class="n">json</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>现在我们需要根据规则，递归处理 <code>Pair</code>。我们知道 json 是一个对象或者数组，但是这些值本身可能包含一个对象或者数组！这时，我们就需要写一个辅助递归函数，直接将 <code>Pair</code> 解析成 <code>JSONValue</code>。最合理的处理方式是写一个辅助递归函数，直接将 <code>Pair</code> 解析成 JSONValue。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">parse_json_file</span><span class="p">(</span><span class="n">file</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">JSONValue</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&lt;</span><span class="n">Rule</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// ...
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="n">pest</span>::<span class="n">iterators</span>::<span class="n">Pair</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">parse_value</span><span class="p">(</span><span class="n">pair</span>: <span class="nc">Pair</span><span class="o">&lt;</span><span class="n">Rule</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">JSONValue</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">as_rule</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">Rule</span>::<span class="n">object</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">JSONValue</span>::<span class="n">Object</span><span class="p">(</span><span class="w">
</span><span class="w">                </span><span class="n">pair</span><span class="p">.</span><span class="n">into_inner</span><span class="p">()</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">pair</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">inner_rules</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">into_inner</span><span class="p">();</span><span class="w">
</span><span class="w">                        </span><span class="kd">let</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">inner_rules</span><span class="w">
</span><span class="w">                            </span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w">
</span><span class="w">                            </span><span class="p">.</span><span class="n">unwrap</span><span class="p">()</span><span class="w">
</span><span class="w">                            </span><span class="p">.</span><span class="n">into_inner</span><span class="p">()</span><span class="w">
</span><span class="w">                            </span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w">
</span><span class="w">                            </span><span class="p">.</span><span class="n">unwrap</span><span class="p">()</span><span class="w">
</span><span class="w">                            </span><span class="p">.</span><span class="n">as_str</span><span class="p">();</span><span class="w">
</span><span class="w">                        </span><span class="kd">let</span><span class="w"> </span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">parse_value</span><span class="p">(</span><span class="n">inner_rules</span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">());</span><span class="w">
</span><span class="w">                        </span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p">)</span><span class="w">
</span><span class="w">                    </span><span class="p">})</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">collect</span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">Rule</span>::<span class="n">array</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">JSONValue</span>::<span class="n">Array</span><span class="p">(</span><span class="n">pair</span><span class="p">.</span><span class="n">into_inner</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="n">parse_value</span><span class="p">).</span><span class="n">collect</span><span class="p">()),</span><span class="w">
</span><span class="w">            </span><span class="n">Rule</span>::<span class="n">string</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">JSONValue</span>::<span class="nb">String</span><span class="p">(</span><span class="n">pair</span><span class="p">.</span><span class="n">into_inner</span><span class="p">().</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">as_str</span><span class="p">()),</span><span class="w">
</span><span class="w">            </span><span class="n">Rule</span>::<span class="n">number</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">JSONValue</span>::<span class="n">Number</span><span class="p">(</span><span class="n">pair</span><span class="p">.</span><span class="n">as_str</span><span class="p">().</span><span class="n">parse</span><span class="p">().</span><span class="n">unwrap</span><span class="p">()),</span><span class="w">
</span><span class="w">            </span><span class="n">Rule</span>::<span class="n">boolean</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">JSONValue</span>::<span class="n">Boolean</span><span class="p">(</span><span class="n">pair</span><span class="p">.</span><span class="n">as_str</span><span class="p">().</span><span class="n">parse</span><span class="p">().</span><span class="n">unwrap</span><span class="p">()),</span><span class="w">
</span><span class="w">            </span><span class="n">Rule</span>::<span class="n">null</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">JSONValue</span>::<span class="n">Null</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">Rule</span>::<span class="n">json</span><span class="w">
</span><span class="w">            </span><span class="o">|</span><span class="w"> </span><span class="n">Rule</span>::<span class="n">EOI</span><span class="w">
</span><span class="w">            </span><span class="o">|</span><span class="w"> </span><span class="n">Rule</span>::<span class="n">pair</span><span class="w">
</span><span class="w">            </span><span class="o">|</span><span class="w"> </span><span class="n">Rule</span>::<span class="n">value</span><span class="w">
</span><span class="w">            </span><span class="o">|</span><span class="w"> </span><span class="n">Rule</span>::<span class="n">inner</span><span class="w">
</span><span class="w">            </span><span class="o">|</span><span class="w"> </span><span class="n">Rule</span>::<span class="n">char</span><span class="w">
</span><span class="w">            </span><span class="o">|</span><span class="w"> </span><span class="n">Rule</span>::<span class="n">WHITESPACE</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">unreachable</span><span class="o">!</span><span class="p">(),</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>对象和数组的情况值得特别注意。数组令牌对的内容只是一个值的序列。由于我们使用的是 Rust 迭代器，我们可以简单地将每个值递归地映射到它的解析 AST 节点，然后将它们收集到一个 Vec 中。对于对象，过程是类似的，除了迭代器是在对上，我们需要分别从对上提取名称和值。</p>
<p>数字和布尔的情况下，使用 Rust 的 str::parse 方法将解析后的字符串转换为相应的 Rust 类型。每一个合法的 JSON 数字都可以直接解析成一个 Rust 浮点数！我们在 Rust 的 str::parse 方法上运行 parse_value。</p>
<p>我们对解析结果运行 parse_value 来完成转换。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">parse_json_file</span><span class="p">(</span><span class="n">file</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">JSONValue</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&lt;</span><span class="n">Rule</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// ...
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">parse_value</span><span class="p">(</span><span class="n">json</span><span class="p">))</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><h3 id="精加工">精加工</h3>
<p>我们的主要功能现在非常简单。首先，我们从一个名为 data.json 的文件中读取 JSON 数据。接下来，我们将文件内容解析成一个 JSON AST。最后，我们将 AST 序列化回一个字符串并打印出来。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fs</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">unparsed_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span>::<span class="n">read_to_string</span><span class="p">(</span><span class="s">&#34;data.json&#34;</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;cannot read file&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">json</span>: <span class="nc">JSONValue</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">parse_json_file</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unparsed_file</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;unsuccessful parse&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">serialize_jsonvalue</span><span class="p">(</span><span class="o">&amp;</span><span class="n">json</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>试试吧! 将本章顶部的示例文档复制到 data.json 中，然后运行程序! 你应该看到这样的东西。</p>
<pre><code>$ cargo run
  [ ... ]
{&quot;nesting&quot;:{&quot;inner object&quot;:{}},&quot;an array&quot;:[1.5,true,null,0.000001],&quot;string with escaped double quotes&quot;:&quot;\&quot;quick brown foxes\&quot;&quot;}
</code></pre><h2 id="例子-j-语言">例子: J 语言</h2>
<p>J 语言是一种受 APL 影响的数组编程语言。在 J 语言中，对单个数字(<code>2*3</code>)的操作可以很容易地应用于整个数字列表(<code>2*3 4 5</code>，返回 <code>6 8 10</code>)。</p>
<p>J 中的操作符被称为动词。动词要么是一元的（取一个参数，如 <code>*: 3</code>，&ldquo;3 的平方&rdquo;），要么是二元的（取两个参数，两边各一个，如 <code>5 - 4</code>，&ldquo;5减4&rdquo;）。</p>
<p>下面是一个 J 程序的例子。</p>
<div class="highlight"><pre class="chroma"><code class="language-J" data-lang="J"><span class="s">&#39;A string&#39;</span>

<span class="o">*:</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span>

<span class="nv">matrix</span> <span class="o">=:</span> <span class="mi">2</span> <span class="mi">3</span> <span class="o">$</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span>
<span class="mi">10</span> <span class="o">*</span> <span class="nv">matrix</span>

<span class="mi">1</span> <span class="o">+</span> <span class="mi">10</span> <span class="mi">20</span> <span class="mi">30</span>
<span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">10</span>

<span class="nv">residues</span> <span class="o">=:</span> <span class="mi">2</span> <span class="o">|</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span>
<span class="nv">residues</span>
</code></pre></div><p>使用 J 的<a href="https://jsoftware.com/">解释器</a>运行上述程序，在标准输出上得到如下结果。</p>
<pre><code>A string

1 4 9 16

 70  80  90
100 110 120

11 21 31
11 12 13

0 1 0 1 0 1 0 1
</code></pre><p>在这一节中，我们将为 J 的一个子集写一个 grammar，然后我们将通过一个解析器，通过迭代 <code>pest</code> 给我们的规则来建立一个 AST。你可以在<a href="https://github.com/pest-parser/book/tree/master/examples/jlang-parser">本书的资源库</a>中找到完整的源代码。</p>
<h3 id="grammar-1">Grammar</h3>
<p>我们将从程序规则开始，逐节建立 grammar。</p>
<pre><code>program = _{ SOI ~ &quot;\n&quot;* ~ (stmt ~ &quot;\n&quot;+) * ~ stmt? ~ EOI }
</code></pre><p>每个 J 程序都包含由一个或多个换行符分隔的语句。请注意前面的下划线，它告诉 <code>pest</code> <a href="https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules">屏蔽</a> <code>program</code> 规则 - 我们不想让 <code>program</code> 作为一个 token 出现在解析流中，我们想要的是底层语句。</p>
<p>语句就是一个简单的表达式，由于只有一种这样的可能性，所以我们也将这个 <code>stmt</code> 规则<a href="https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules">屏蔽</a>，这样我们的解析器就会收到一个底层 <code>expr</code> 的迭代器。</p>
<pre><code>stmt = _{ expr }
</code></pre><p>表达式可以是对变量标识符的赋值，也可以是单项表达式、对偶表达式、单个字符串或术语数组。</p>
<pre><code>expr = {
      assgmtExpr
    | monadicExpr
    | dyadicExpr
    | string
    | terms
}
</code></pre><p>一元表达式由一个动词组成，其唯一的操作数在右边；三元表达式的操作数在动词的两边。赋值表达式将标识符与表达式相关联。</p>
<p>在 J 中，没有操作符的优先性 - 求值是右联的（从右到左），括号内的表达式先被求值。</p>
<pre><code>monadicExpr = { verb ~ expr }

dyadicExpr = { (monadicExpr | terms) ~ verb ~ expr }

assgmtExpr = { ident ~ &quot;=:&quot; ~ expr }
</code></pre><p>项的列表应该至少包含一个十进制、整数、标识符或小括号表达式；我们只关心这些基础值，所以我们用前导下划线<a href="https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules">屏蔽</a> <code>term</code> 规则。</p>
<pre><code>terms = { term+ }

term = _{ decimal | integer | ident | &quot;(&quot; ~ expr ~ &quot;)&quot; }
</code></pre><p>J 的几个动词在这个 grammar 中是有定义的，J 的<a href="https://code.jsoftware.com/wiki/NuVoc">全部词汇</a>要广泛得多。</p>
<pre><code>verb = {
    &quot;&gt;:&quot; | &quot;*:&quot; | &quot;-&quot;  | &quot;%&quot; | &quot;#&quot; | &quot;&gt;.&quot;
  | &quot;+&quot;  | &quot;*&quot;  | &quot;&lt;&quot;  | &quot;=&quot; | &quot;^&quot; | &quot;|&quot;
  | &quot;&gt;&quot;  | &quot;$&quot;
}
</code></pre><p>现在我们可以进入词法规则了。J 中的数字和平常一样，除了负数用前导的 <code>_</code> 下划线表示外（因为 <code>-</code> 是一个动词，它作为单项式执行否定，作为对偶式执行减法）。J 中的标识符必须以字母开头，但之后可以包含数字。字符串由单引号包围；引号本身可以通过用附加引号转义来嵌入。</p>
<p>请注意我们如何使用 <code>pest</code> 的 <code>@</code> 修饰符使这些规则中的每一条都是<a href="https://pest.rs/book/grammars/syntax.html#atomic">原子的</a>，这意味着<a href="https://pest.rs/book/grammars/syntax.html#implicit-whitespace">隐式空白</a>是被禁止的，而且内部规则（即 <code>ident</code> 中的 <code>ASCII_ALPHA</code>）变为 <a href="https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules">silent</a> - 当我们的解析器接收到这些 token 时，它们将是终端的。</p>
<pre><code>integer = @{ &quot;_&quot;? ~ ASCII_DIGIT+ }

decimal = @{ &quot;_&quot;? ~ ASCII_DIGIT+ ~ &quot;.&quot; ~ ASCII_DIGIT* }

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | &quot;_&quot;)* }

string = @{ &quot;'&quot; ~ ( &quot;''&quot; | (!&quot;'&quot; ~ ANY) )* ~ &quot;'&quot; }
</code></pre><p>J 中的空白只由空格和制表符组成。换行的意义在于它们是对语句的定界，因此它们不在本规则之内。</p>
<pre><code>WHITESPACE = _{ &quot; &quot; | &quot;\t&quot; }
</code></pre><p>最后，我们必须处理注释。J 中的注释以 <code>NB.</code> 开始，一直到它们所在行的末尾。关键的是，我们决不能消耗注释行末的换行；这是为了将注释之前的任何语句与后续行的语句分开。</p>
<pre><code>COMMENT = _{ &quot;NB.&quot; ~ (!&quot;\n&quot; ~ ANY)* }
</code></pre><h3 id="解析和-ast-生成">解析和 AST 生成</h3>
<p>本节将介绍一个使用上述 grammar 的解析器。这里省略了库中的内容和自明的代码，你可以在<a href="https://github.com/pest-parser/book/tree/master/examples/jlang-parser">本书的资源库</a>中找到解析器的全部内容。</p>
<p>首先我们将枚举我们 grammar 中定义的动词，区分一元动词和二元动词。这些枚举将在我们的 AST 中作为标签使用。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">MonadicVerb</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">Increment</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Square</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Negate</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Reciprocal</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Tally</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Ceiling</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">ShapeOf</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">DyadicVerb</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">Plus</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Times</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">LessThan</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">LargerThan</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Equal</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Minus</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Divide</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Power</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Residue</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="nb">Copy</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">LargerOf</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">LargerOrEqual</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Shape</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>那么我们就来列举一下 AST 的各类节点。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">AstNode</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">Print</span><span class="p">(</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">AstNode</span><span class="o">&gt;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">Integer</span><span class="p">(</span><span class="kt">i32</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">DoublePrecisionFloat</span><span class="p">(</span><span class="kt">f64</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">MonadicOp</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">verb</span>: <span class="nc">MonadicVerb</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">expr</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="n">AstNode</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">},</span><span class="w">
</span><span class="w">    </span><span class="n">DyadicOp</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">verb</span>: <span class="nc">DyadicVerb</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">lhs</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="n">AstNode</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">rhs</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="n">AstNode</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">},</span><span class="w">
</span><span class="w">    </span><span class="n">Terms</span><span class="p">(</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="n">AstNode</span><span class="o">&gt;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">IsGlobal</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">ident</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">expr</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="n">AstNode</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">},</span><span class="w">
</span><span class="w">    </span><span class="n">Ident</span><span class="p">(</span><span class="nb">String</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">Str</span><span class="p">(</span><span class="n">CString</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>为了解析 J 程序中的顶层语句，我们有下面的 <code>parse</code> 函数，它接受一个字符串形式的 J 程序，并将其传递给 <code>pest</code> 进行解析。我们得到一个 <code>Pair</code> 的序列。正如 grammar 中所规定的那样，一个语句只能由一个表达式组成，所以下面的匹配会解析这些顶层表达式中的每一个，并将它们包装在一个 <code>Print</code> AST 节点中，以符合 J 解释器的 REPL 行为。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">parse</span><span class="p">(</span><span class="n">source</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="n">AstNode</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&lt;</span><span class="n">Rule</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">ast</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vec</span><span class="o">!</span><span class="p">[];</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">pairs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">JParser</span>::<span class="n">parse</span><span class="p">(</span><span class="n">Rule</span>::<span class="n">program</span><span class="p">,</span><span class="w"> </span><span class="n">source</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">pair</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">pairs</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">as_rule</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">Rule</span>::<span class="n">expr</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">ast</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Print</span><span class="p">(</span><span class="nb">Box</span>::<span class="n">new</span><span class="p">(</span><span class="n">build_ast_from_expr</span><span class="p">(</span><span class="n">pair</span><span class="p">))));</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">ast</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>AST 节点是通过遍历 <code>Pair</code> 迭代器，按照我们 grammar 文件中设定的期望值，从表达式中构建出来的。常见的行为被抽象出单独的函数，如 <code>parse_monadic_verb</code> 和 <code>parse_dyadic_verb</code>，代表表达式本身的 <code>Pair</code> 则在递归调用 <code>build_ast_from_expr</code> 中传递。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">build_ast_from_expr</span><span class="p">(</span><span class="n">pair</span>: <span class="nc">pest</span>::<span class="n">iterators</span>::<span class="n">Pair</span><span class="o">&lt;</span><span class="n">Rule</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">AstNode</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">as_rule</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Rule</span>::<span class="n">expr</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">build_ast_from_expr</span><span class="p">(</span><span class="n">pair</span><span class="p">.</span><span class="n">into_inner</span><span class="p">().</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">()),</span><span class="w">
</span><span class="w">        </span><span class="n">Rule</span>::<span class="n">monadicExpr</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">pair</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">into_inner</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">verb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">expr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">expr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">build_ast_from_expr</span><span class="p">(</span><span class="n">expr</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">parse_monadic_verb</span><span class="p">(</span><span class="n">verb</span><span class="p">,</span><span class="w"> </span><span class="n">expr</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="c1">// ... other cases elided here ...
</span><span class="c1"></span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>二元动词从它们的字符串表示方式直接映射到 AST 节点。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">parse_dyadic_verb</span><span class="p">(</span><span class="n">pair</span>: <span class="nc">pest</span>::<span class="n">iterators</span>::<span class="n">Pair</span><span class="o">&lt;</span><span class="n">Rule</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">lhs</span>: <span class="nc">AstNode</span><span class="p">,</span><span class="w"> </span><span class="n">rhs</span>: <span class="nc">AstNode</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">AstNode</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">AstNode</span>::<span class="n">DyadicOp</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">lhs</span>: <span class="nb">Box</span>::<span class="n">new</span><span class="p">(</span><span class="n">lhs</span><span class="p">),</span><span class="w">
</span><span class="w">        </span><span class="n">rhs</span>: <span class="nb">Box</span>::<span class="n">new</span><span class="p">(</span><span class="n">rhs</span><span class="p">),</span><span class="w">
</span><span class="w">        </span><span class="n">verb</span>: <span class="nc">match</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">as_str</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;+&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="n">Plus</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;*&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="n">Times</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;-&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="n">Minus</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;&lt;&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="n">LessThan</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;=&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="n">Equal</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;&gt;&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="n">LargerThan</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;%&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="n">Divide</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;^&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="n">Power</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;|&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="n">Residue</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;#&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="nb">Copy</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;&gt;.&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="n">LargerOf</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;&gt;:&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="n">LargerOrEqual</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;$&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">DyadicVerb</span>::<span class="n">Shape</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Unexpected dyadic verb: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">as_str</span><span class="p">()),</span><span class="w">
</span><span class="w">        </span><span class="p">},</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>如同一元动词一样。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">parse_monadic_verb</span><span class="p">(</span><span class="n">pair</span>: <span class="nc">pest</span>::<span class="n">iterators</span>::<span class="n">Pair</span><span class="o">&lt;</span><span class="n">Rule</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">expr</span>: <span class="nc">AstNode</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">AstNode</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">AstNode</span>::<span class="n">MonadicOp</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">verb</span>: <span class="nc">match</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">as_str</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;&gt;:&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">MonadicVerb</span>::<span class="n">Increment</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;*:&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">MonadicVerb</span>::<span class="n">Square</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;-&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">MonadicVerb</span>::<span class="n">Negate</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;%&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">MonadicVerb</span>::<span class="n">Reciprocal</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;#&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">MonadicVerb</span>::<span class="n">Tally</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;&gt;.&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">MonadicVerb</span>::<span class="n">Ceiling</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="s">&#34;$&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">MonadicVerb</span>::<span class="n">ShapeOf</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Unsupported monadic verb: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">as_str</span><span class="p">()),</span><span class="w">
</span><span class="w">        </span><span class="p">},</span><span class="w">
</span><span class="w">        </span><span class="n">expr</span>: <span class="nb">Box</span>::<span class="n">new</span><span class="p">(</span><span class="n">expr</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>最后，我们定义了一个函数来处理数字和字符串等项。数字需要一些操作来处理 J 的前导下划线，表示否定，但除此之外，处理过程是典型的。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">build_ast_from_term</span><span class="p">(</span><span class="n">pair</span>: <span class="nc">pest</span>::<span class="n">iterators</span>::<span class="n">Pair</span><span class="o">&lt;</span><span class="n">Rule</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">AstNode</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">as_rule</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Rule</span>::<span class="n">integer</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">istr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">as_str</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">sign</span><span class="p">,</span><span class="w"> </span><span class="n">istr</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="o">&amp;</span><span class="n">istr</span><span class="p">[..</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="s">&#34;_&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">istr</span><span class="p">[</span><span class="mi">1</span><span class="p">..]),</span><span class="w">
</span><span class="w">                </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">istr</span><span class="p">[..]),</span><span class="w">
</span><span class="w">            </span><span class="p">};</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">integer</span>: <span class="kt">i32</span> <span class="o">=</span><span class="w"> </span><span class="n">istr</span><span class="p">.</span><span class="n">parse</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="n">AstNode</span>::<span class="n">Integer</span><span class="p">(</span><span class="n">sign</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">integer</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">Rule</span>::<span class="n">decimal</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">dstr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pair</span><span class="p">.</span><span class="n">as_str</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">sign</span><span class="p">,</span><span class="w"> </span><span class="n">dstr</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="o">&amp;</span><span class="n">dstr</span><span class="p">[..</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="s">&#34;_&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">dstr</span><span class="p">[</span><span class="mi">1</span><span class="p">..]),</span><span class="w">
</span><span class="w">                </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">dstr</span><span class="p">[..]),</span><span class="w">
</span><span class="w">            </span><span class="p">};</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">flt</span>: <span class="kt">f64</span> <span class="o">=</span><span class="w"> </span><span class="n">dstr</span><span class="p">.</span><span class="n">parse</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">flt</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mf">0.0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="c1">// Avoid negative zeroes; only multiply sign by nonzeroes.
</span><span class="c1"></span><span class="w">                </span><span class="n">flt</span><span class="w"> </span><span class="o">*=</span><span class="w"> </span><span class="n">sign</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="n">AstNode</span>::<span class="n">DoublePrecisionFloat</span><span class="p">(</span><span class="n">flt</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">Rule</span>::<span class="n">expr</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">build_ast_from_expr</span><span class="p">(</span><span class="n">pair</span><span class="p">),</span><span class="w">
</span><span class="w">        </span><span class="n">Rule</span>::<span class="n">ident</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">AstNode</span>::<span class="n">Ident</span><span class="p">(</span><span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="n">pair</span><span class="p">.</span><span class="n">as_str</span><span class="p">())),</span><span class="w">
</span><span class="w">        </span><span class="n">unknown_term</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Unexpected term: {:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">unknown_term</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><h3 id="运行解析器">运行解析器</h3>
<p>现在我们可以定义一个 <code>main</code> 函数，将 J 程序传递给我们的 <code>pest</code>-enabled 解析器。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">unparsed_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span>::<span class="n">fs</span>::<span class="n">read_to_string</span><span class="p">(</span><span class="s">&#34;example.ijs&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">      </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;cannot read ijs file&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">astnode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">parse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unparsed_file</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;unsuccessful parse&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">astnode</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>在 example.ijs 中使用这段代码。</p>
<pre><code>_2.5 ^ 3
*: 4.8
title =: 'Spinning at the Boundary'
*: _1 2 _3 4
1 2 3 + 10 20 30
1 + 10 20 30
1 2 3 + 10
2 | 0 1 2 3 4 5 6 7
another =: 'It''s Escaped'
3 | 0 1 2 3 4 5 6 7
(2+1)*(2+2)
3 * 2 + 1
1 + 3 % 4
x =: 100
x - 1
y =: x - 1
y
</code></pre><p>当我们运行解析器时，我们会在标准输出上得到以下抽象语法树。</p>
<pre><code>$ cargo run
  [ ... ]
[Print(DyadicOp { verb: Power, lhs: DoublePrecisionFloat(-2.5),
    rhs: Integer(3) }),
Print(MonadicOp { verb: Square, expr: DoublePrecisionFloat(4.8) }),
Print(IsGlobal { ident: &quot;title&quot;, expr: Str(&quot;Spinning at the Boundary&quot;) }),
Print(MonadicOp { verb: Square, expr: Terms([Integer(-1), Integer(2),
    Integer(-3), Integer(4)]) }),
Print(DyadicOp { verb: Plus, lhs: Terms([Integer(1), Integer(2), Integer(3)]),
    rhs: Terms([Integer(10), Integer(20), Integer(30)]) }),
Print(DyadicOp { verb: Plus, lhs: Integer(1), rhs: Terms([Integer(10),
    Integer(20), Integer(30)]) }),
Print(DyadicOp { verb: Plus, lhs: Terms([Integer(1), Integer(2), Integer(3)]),
    rhs: Integer(10) }),
Print(DyadicOp { verb: Residue, lhs: Integer(2),
    rhs: Terms([Integer(0), Integer(1), Integer(2), Integer(3), Integer(4),
    Integer(5), Integer(6), Integer(7)]) }),
Print(IsGlobal { ident: &quot;another&quot;, expr: Str(&quot;It\'s Escaped&quot;) }),
Print(DyadicOp { verb: Residue, lhs: Integer(3), rhs: Terms([Integer(0),
    Integer(1), Integer(2), Integer(3), Integer(4), Integer(5),
    Integer(6), Integer(7)]) }),
Print(DyadicOp { verb: Times, lhs: DyadicOp { verb: Plus, lhs: Integer(2),
    rhs: Integer(1) }, rhs: DyadicOp { verb: Plus, lhs: Integer(2),
        rhs: Integer(2) } }),
Print(DyadicOp { verb: Times, lhs: Integer(3), rhs: DyadicOp { verb: Plus,
    lhs: Integer(2), rhs: Integer(1) } }),
Print(DyadicOp { verb: Plus, lhs: Integer(1), rhs: DyadicOp { verb: Divide,
    lhs: Integer(3), rhs: Integer(4) } }),
Print(IsGlobal { ident: &quot;x&quot;, expr: Integer(100) }),
Print(DyadicOp { verb: Minus, lhs: Ident(&quot;x&quot;), rhs: Integer(1) }),
Print(IsGlobal { ident: &quot;y&quot;, expr: DyadicOp { verb: Minus, lhs: Ident(&quot;x&quot;),
    rhs: Integer(1) } }),
Print(Ident(&quot;y&quot;))]
</code></pre>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rust" term="rust" label="Rust" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust" term="rust" label="Rust" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust-grammar" term="rust-grammar" label="Rust Grammar" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Parser API - 解析 INI]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-01-19-parser-api-example-ini/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2021-01-19-parser-api-example-ini/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-01-19T00:00:00+08:00</published>
            <updated>2021-01-19T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Parser API - Example: INI</blockquote><h2 id="例子-ini">例子: INI</h2>
<p>INI(initialization 的简称)文件是简单的配置文件。由于没有标准的格式，我们将编写一个能够解析这个例子文件的程序。</p>
<div class="highlight"><pre class="chroma"><code class="language-ini" data-lang="ini"><span class="na">username</span> <span class="o">=</span> <span class="s">noha</span>
<span class="na">password</span> <span class="o">=</span> <span class="s">plain_text</span>
<span class="na">salt</span> <span class="o">=</span> <span class="s">NaCl</span>

<span class="k">[server_1]</span>
<span class="na">interface</span><span class="o">=</span><span class="s">eth0</span>
<span class="na">ip</span><span class="o">=</span><span class="s">127.0.0.1</span>
<span class="na">document_root</span><span class="o">=</span><span class="s">/var/www/example.org</span>

<span class="k">[empty_section]</span>

<span class="k">[second_server]</span>
<span class="na">document_root</span><span class="o">=</span><span class="s">/var/www/example.com</span>
<span class="na">ip</span><span class="o">=</span>
<span class="na">interface</span><span class="o">=</span><span class="s">eth1</span>
</code></pre></div><p>每一行都包含一个键和值，中间用等号隔开；或者包含一个用方括号括起来的章节名；或者是空白，没有任何意义。</p>
<p>每当出现一个节名，下面的键和值就属于该节，直到下一个节名。文件开头的键值对属于一个隐式的 &ldquo;空&quot;节。</p>
<h2 id="编写-grammar">编写 grammar</h2>
<p>首先使用 Cargo <a href="https://pest.rs/book/examples/csv.html#setup">初始化一个新项目</a>，添加依赖关系 <code>pest = &quot;2.0&quot;</code> 和  <code>pest_derive = &quot;2.0&quot;</code>。创建一个新文件 <code>src/ini.pest</code> 来保存 grammar。</p>
<p>我们文件中感兴趣的文本 - <code>username</code>、<code>/var/www/example.org</code> 等 - 只由几个字符组成。让我们制定一个规则来识别该集合中的单个字符。内置的规则 <code>ASCII_ALPHANUMERIC</code> 是表示任何大写或小写 ASCII 字母或任何数字的快捷方式。</p>
<pre><code>char = { ASCII_ALPHANUMERIC | &quot;.&quot; | &quot;_&quot; | &quot;/&quot; }
</code></pre><p>节名和属性键不能为空，但属性值可以为空（如上文中的 <code>ip=</code> 行）。也就是说，前者由一个或多个字符组成，<code>char+</code>; 后者由零或多个字符组成，<code>char*</code>。我们将其含义分为两条规则。</p>
<pre><code>name = { char+ }
value = { char* }
</code></pre><p>现在很容易表达这两种输入行。</p>
<pre><code>section = { &quot;[&quot; ~ name ~ &quot;]&quot; }
property = { name ~ &quot;=&quot; ~ value }
</code></pre><p>最后，我们需要一个规则来表示整个输入文件。表达式 <code>(section | property)?</code> 匹配 <code>section</code>、<code>property</code>，否则什么也不匹配。使用内置规则 <code>NEWLINE</code> 来匹配行尾。</p>
<pre><code>file = {
    SOI ~
    ((section | property)? ~ NEWLINE)* ~
    EOI
}
</code></pre><p>要将解析器编译成 Rust，我们需要在 <code>src/main.rs</code> 中添加以下内容。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">extern</span><span class="w"> </span><span class="k">crate</span><span class="w"> </span><span class="n">pest</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="cp">#[macro_use]</span><span class="w">
</span><span class="w"></span><span class="k">extern</span><span class="w"> </span><span class="k">crate</span><span class="w"> </span><span class="n">pest_derive</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">pest</span>::<span class="n">Parser</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(Parser)]</span><span class="w">
</span><span class="w"></span><span class="cp">#[grammar = </span><span class="s">&#34;ini.pest&#34;</span><span class="cp">]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">INIParser</span><span class="p">;</span><span class="w">
</span></code></pre></div><h2 id="程序初始化">程序初始化</h2>
<p>现在我们可以读取文件，并用 <code>pest</code> 进行解析。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">collections</span>::<span class="n">HashMap</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fs</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">unparsed_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span>::<span class="n">read_to_string</span><span class="p">(</span><span class="s">&#34;config.ini&#34;</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;cannot read file&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">INIParser</span>::<span class="n">parse</span><span class="p">(</span><span class="n">Rule</span>::<span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">unparsed_file</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;unsuccessful parse&#34;</span><span class="p">)</span><span class="w"> </span><span class="c1">// unwrap the parse result
</span><span class="c1"></span><span class="w">        </span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w"> </span><span class="c1">// get and unwrap the `file` rule; never fails
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>我们将使用嵌套的 <code>HashMap</code> 来表达属性列表。外层哈希 map 将以章节名称作为键，以章节内容（内部哈希 map）作为值。每个内部哈希 map 将有属性键和属性值。例如，要访问 <code>server_1</code> 的 <code>document_root</code>，我们可以写 <code>properties[&quot;server_1&quot;][&quot;document_root&quot;]</code>。隐含的 &ldquo;空&quot;节将由常规部分表示，名称为空字符串 <code>&quot;&quot;</code>，这样 <code>properties[&quot;&quot;][&quot;salt&quot;]</code> 就是有效的。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// ...
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">properties</span>: <span class="nc">HashMap</span><span class="o">&lt;&amp;</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;&amp;</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="kt">str</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HashMap</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>请注意，哈希 map 的键和值都是 <code>&amp;str</code>，即借用的字符串。<code>pest</code> 解析器不会复制他们解析的输入，而是借用。所有用于检查解析结果的方法都会返回从原始解析字符串中借用字符串。</p>
<h2 id="主循环">主循环</h2>
<p>现在我们解释解析结果。我们循环浏览文件的每一行，这一行要么是节名，要么是键值属性对。如果遇到一个节名，我们更新一个变量。如果遇到一个属性对，我们就获取一个对当前章节的哈希 map 的引用，然后把这个属性对插入到这个哈希 map 中。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">    </span><span class="c1">// ...
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">current_section_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">line</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">file</span><span class="p">.</span><span class="n">into_inner</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">line</span><span class="p">.</span><span class="n">as_rule</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">Rule</span>::<span class="n">section</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">inner_rules</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">line</span><span class="p">.</span><span class="n">into_inner</span><span class="p">();</span><span class="w"> </span><span class="c1">// { name }
</span><span class="c1"></span><span class="w">                </span><span class="n">current_section_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">inner_rules</span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">as_str</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="n">Rule</span>::<span class="n">property</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">inner_rules</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">line</span><span class="p">.</span><span class="n">into_inner</span><span class="p">();</span><span class="w"> </span><span class="c1">// { name ~ &#34;=&#34; ~ value }
</span><span class="c1"></span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">name</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="n">inner_rules</span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">as_str</span><span class="p">();</span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">value</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="n">inner_rules</span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">as_str</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">                </span><span class="c1">// Insert an empty inner hash map if the outer hash map hasn&#39;t
</span><span class="c1"></span><span class="w">                </span><span class="c1">// seen this section name before.
</span><span class="c1"></span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">section</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">properties</span><span class="p">.</span><span class="n">entry</span><span class="p">(</span><span class="n">current_section_name</span><span class="p">).</span><span class="n">or_default</span><span class="p">();</span><span class="w">
</span><span class="w">                </span><span class="n">section</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="n">Rule</span>::<span class="n">EOI</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">unreachable</span><span class="o">!</span><span class="p">(),</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// ...
</span></code></pre></div><p>在输出方面，我们用<a href="https://doc.rust-lang.org/std/fmt/index.html#sign0">漂亮的打印</a> <code>Debug</code> 格式简单地转储哈希 map。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// ...
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:#?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">properties</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><h2 id="空白">空白</h2>
<p>如果你把本章顶部的例子 INI 文件复制到 <code>config.ini</code> 文件中并运行程序，它将无法解析。我们已经忘记了等号周围的可选空格!</p>
<p>对于大型 grammar 来说，处理空白会很不方便。显示地编写 <code>whitespace</code> 规则并手动插入空白会让 grammar 变得难以阅读和修改。<code>pest</code> 提供了一个<a href="https://pest.rs/book/grammars/syntax.html#implicit-whitespace">特殊规则 <code>WHITESPACE</code></a> 的解决方案。如果定义了 <code>WHITESPACE</code>，它将被隐式地运行，尽可能多次地在每个波浪号 <code>~</code> 和每个重复之间运行（例如，<code>*</code> 和 <code>+</code>）。对于我们的 INI 解析器，只有空格才是合法的 whitespace。</p>
<pre><code>WHITESPACE = _{ &quot; &quot; }
</code></pre><p>我们用一个前导的下划线 <code>_{ ... }</code> 来标记 <code>WHITESPACE</code> 规则的<a href="https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules">静默</a>。}. 这样，即使它匹配，也不会出现在其他规则中。如果它不是静默的，解析就会复杂得多，因为对  <code>Pairs::next(...)</code> 的每次调用都有可能返回 <code>Rule::WHITESPACE</code> 而不是想要的下一条规则。</p>
<p>但是等等! 节名、键或值中不应该有空格！目前，空格是自动插入的。目前，在 <code>name = { char+ }</code> 中，空格会自动插入字符之间。对空格敏感的规则需要用前导符号 <code>@{ ... }</code> 来标记<a href="https://pest.rs/book/grammars/syntax.html#atomic">原子</a>。}. 在原子规则中，自动的空白处理是被禁用的，而内部规则是静默的。</p>
<pre><code>name = @{ char+ }
value = @{ char* }
</code></pre><h2 id="完工">完工</h2>
<p>试试吧！确保文件 <code>config.ini</code> 存在，然后运行程序! 你应该看到这样的东西。</p>
<pre><code>$ cargo run
  [ ... ]
{
    &quot;&quot;: {
        &quot;password&quot;: &quot;plain_text&quot;,
        &quot;username&quot;: &quot;noha&quot;,
        &quot;salt&quot;: &quot;NaCl&quot;
    },
    &quot;second_server&quot;: {
        &quot;ip&quot;: &quot;&quot;,
        &quot;document_root&quot;: &quot;/var/www/example.com&quot;,
        &quot;interface&quot;: &quot;eth1&quot;
    },
    &quot;server_1&quot;: {
        &quot;interface&quot;: &quot;eth0&quot;,
        &quot;document_root&quot;: &quot;/var/www/example.org&quot;,
        &quot;ip&quot;: &quot;127.0.0.1&quot;
    }
}
</code></pre>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rust" term="rust" label="Rust" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust" term="rust" label="Rust" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/grammar" term="grammar" label="Grammar" />
                            
                        
                    
                
            
        </entry>
    
</feed>
