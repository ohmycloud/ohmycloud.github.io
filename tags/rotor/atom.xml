<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[rotor on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/rotor/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/rotor/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/rotor/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/rotor/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-15T22:25:29+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/rotor/</id>
    
        
        <entry>
            <title type="html"><![CDATA[rotor: 列表操作之王]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-07-14-the-king-of-list-manipulation/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2015-12-14-add-separator/?utm_source=atom_feed" rel="related" type="text/html" title="给数字添加千分位符" />
            
                <id>https://ohmyweekly.github.io/notes/2015-07-14-the-king-of-list-manipulation/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>The King of List Manipulation</blockquote><p>对于 Raku 程序员, <code>.rotor</code> 是一个强大的列表操作工具。</p>
<h2 id="分段">分段</h2>
<p>最简单的, <code>.rotor</code> 接收一个整数 <strong>$number</strong> 并把列表分成多个子列表, 每个子列表含有 <strong>$number</strong> 个元素:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">&lt;</span><span class="s">a b c d e f  g h</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">rotor</span><span class="o">:</span> <span class="mi">3</span>
<span class="c1"># ((a b c) (d e f))</span>
</code></pre></div><p>我们有一个含有 8 个元素的列表, 我们在该列表上调用接收参数 3 的 <code>.rotor</code> 方法, 它返回 2 个列表, 每个列表中含有 3 个元素。不包括原列表中的最后 2 个元素, 因为它们没有组成一个完整的3个元素的列表。然而它们可以被包含进来, 使用 <code>:partial</code> 具名参数设置为 <strong>True</strong>:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">&lt;</span><span class="s">a b c  d e f  g h</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">rotor</span><span class="o">:</span> <span class="mi">3</span><span class="o">,</span> <span class="p">:</span><span class="s">partial</span>
<span class="c1"># ((a b c) (d e f) (g h))</span>

<span class="nb">say</span> <span class="p">&lt;</span><span class="s">a b c  d e f  g h</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">rotor</span><span class="o">:</span> <span class="mi">3</span><span class="o">,</span> <span class="p">:</span><span class="s">partial</span><span class="p">(</span><span class="nb">True</span><span class="p">)</span>
<span class="c1"># ((a b c) (d e f) (g h))</span>

<span class="nb">say</span> <span class="p">&lt;</span><span class="s">a b c  d e f  g h</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">rotor</span><span class="o">:</span> <span class="mi">3</span><span class="o">,</span> <span class="p">:</span><span class="s">partial</span><span class="p">(</span><span class="nb">False</span><span class="p">)</span>
<span class="c1"># ((a b c) (d e f))</span>
</code></pre></div><p>下面应用一下我们刚刚学到的。把字符串分成列宽相等的几段:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">&#34;</span><span class="s2">foobarberboorboozebazmeow</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">comb</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">10</span><span class="o">,</span> <span class="p">:</span><span class="s">partial</span><span class="p">)</span><span class="o">».</span><span class="nb">join</span><span class="o">».</span><span class="nb">say</span><span class="p">;</span>

<span class="c1"># foobarberb</span>
<span class="c1"># oorboozeba</span>
<span class="c1"># zmeow</span>
</code></pre></div><p>分行然后每行前面添加 4 个空格:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">&#34;</span><span class="s2">foobarberboorboozebazmeow</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">comb</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">10</span><span class="o">,</span> <span class="p">:</span><span class="s">partial</span><span class="p">)</span><span class="o">».</span><span class="nb">join</span><span class="o">».</span><span class="nb">indent</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">».</span><span class="nb">say</span><span class="p">;</span>

<span class="c1">#    foobarberb</span>
<span class="c1">#    oorboozeba</span>
<span class="c1">#    zmeow</span>
</code></pre></div><p>但是这最好被写为:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">&#34;</span><span class="s2">foobarberboorboozebazmeow</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">comb</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">».</span><span class="nb">say</span>
</code></pre></div><h2 id="注意缝隙">注意缝隙</h2>
<p>假设你正在接受输入: 你得到一个单词, 它的法语翻译和它的西班牙语翻译, 等一堆单词。你只想输出特定语言, 所以我们需要在我们的列表中跳过某些项。 <code>.rotor</code> 来拯救来了!</p>
<p>指定一对儿(Pair)整数作为 rotor 的参数会让每个列表中含有 <strong>$key</strong> 个元素, 每个列表之间有 <strong>$value</strong> 个空隙。看例子更简单一些:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="o">^</span><span class="mi">10</span> <span class="o">.</span><span class="nb">rotor</span><span class="o">:</span> <span class="mi">3</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="p">:</span><span class="s">partial</span><span class="p">;</span>
<span class="c1"># OUTPUT: ((0 1 2) (4 5 6) (8 9))</span>

<span class="nb">say</span> <span class="o">^</span><span class="mi">10</span> <span class="o">.</span><span class="nb">rotor</span><span class="o">:</span> <span class="mi">2</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="o">,</span> <span class="p">:</span><span class="s">partial</span><span class="p">;</span>
<span class="c1"># OUTPUT: ((0 1) (4 5) (8 9))</span>
</code></pre></div><p>第一个例子我们把缝隙设置为 1, 第二个例子我们把缝隙增加为 2。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">enum</span> <span class="p">&lt;</span><span class="s">English French Spanish</span><span class="p">&gt;;</span>
<span class="nb">say</span> <span class="nb">join</span> <span class="p">&#34;</span><span class="s2"> </span><span class="p">&#34;</span><span class="o">,</span> <span class="p">&lt;</span><span class="s">Good Bon Buenos morning matin días</span><span class="p">&gt;</span><span class="o">[</span><span class="n">French</span><span class="o">..*].</span><span class="nb">rotor</span><span class="o">:</span> <span class="mi">1</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">;</span>
<span class="c1"># OUTPUT: Bon matin</span>
</code></pre></div><p>其中 <code>[French..*]</code> 意思为 <code>[1..*]</code>, 例子中 French 被枚举化为整数 1。</p>
<h2 id="重叠">重叠</h2>
<p>当我们让缝隙变为负数的时候, 分段的列表中就会有元素重叠:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">&lt;</span><span class="s">a a b c c c d</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">rotor</span><span class="o">:</span> <span class="mi">2</span> <span class="o">=&gt;</span> <span class="o">-</span><span class="mi">1</span>
<span class="c1"># OUTPUT: ((a a) (a b) (b c) (c c) (c c) (c d))</span>

<span class="nb">say</span> <span class="p">&lt;</span><span class="s">a a b c c c d</span><span class="p">&gt;</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">2</span> <span class="o">=&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="nb">map</span><span class="o">:</span> <span class="p">{</span><span class="nv">$_</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="ow">eq</span> <span class="nv">$_</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">??</span> <span class="p">&#34;</span><span class="s2">same</span><span class="p">&#34;</span> <span class="o">!!</span> <span class="p">&#34;</span><span class="s2">different</span><span class="p">&#34;}</span>
<span class="c1"># OUTPUT: (same different different same same different)</span>
</code></pre></div><h2 id="全力以赴">全力以赴</h2>
<p><code>.rotor</code> 不单单只能接受单个 <strong>Int</strong> 值或 <strong>Pair</strong>, 你可以指定额外的 <strong>Int</strong> 或 <strong>Pairs</strong> 位置参数来把列表分成不同尺寸大小的子列表, 列表之间的缝隙也不同。下面以一个日志文件为例:</p>
<pre><code>IP: 198.0.1.22
Login: suser
Time: 1454017107
Resource: /report/accounting/x23gs
Input: x=42,y=32
Output: success
===================================================
IP: 198.0.1.23
Login: nanom
Time: 1454027106
Resource: /report/systems/boot
Input: mode=standard
Output: success
</code></pre><p>每段之间有一行双划线。</p>
<p>我们想这样输出: <strong>Header</strong> 里包含 IP, Login, Time, Resource; <strong>Operation</strong> 里包含 Resource, Input, Output。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">for</span> <span class="p">&#39;</span><span class="s1">report.txt</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">lines</span><span class="o">».</span><span class="nb">indent</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span> <span class="mi">4</span> <span class="o">=&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$head</span><span class="o">,</span> <span class="nv">$op</span> <span class="p">{</span>
    <span class="o">.</span><span class="nb">say</span> <span class="k">for</span> <span class="p">&#34;</span><span class="s2">Header:</span><span class="p">&#34;</span><span class="o">,</span>    <span class="o">|</span><span class="nv">$head</span><span class="o">,</span>
             <span class="p">&#34;</span><span class="s2">Operation:</span><span class="p">&#34;</span><span class="o">,</span> <span class="o">|</span><span class="nv">$op</span><span class="o">,</span> <span class="p">&#39;&#39;;</span>
<span class="p">}</span>
</code></pre></div><p>输出:</p>
<pre><code>Header:
    IP: 198.0.1.22
    Login: suser
    Time: 1454017107
    Resource: /report/accounting/x23gs
Operation:
    Resource: /report/accounting/x23gs
    Input: x=42,y=32
    Output: success

Header:
    IP: 198.0.1.23
    Login: nanom
    Time: 1454027106
    Resource: /report/systems/boot
Operation:
    Resource: /report/systems/boot
    Input: mode=standard
    Output: success
</code></pre><p>先是 4 个元素一块, 缝隙为 -1(有重叠), 然后是 3 个元素一块, 缝隙为 1。这就在每个分段的列表中包含了 Resource 字段。因为 <code>$op</code> 和 <code>$head</code> 是列表, 我们使用管道符号 <code>|</code> 来展平列表。</p>
<p>记住, 你提供给 <code>.rotor</code> 方法的模式可以动态地生成! 这儿我们使用 <code>sin</code> 函数来生成:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="o">^</span><span class="mi">92</span> <span class="o">.</span><span class="nb">rotor</span><span class="p">(</span>
    <span class="p">(</span><span class="mf">0.2</span><span class="o">,</span> <span class="mf">0.4</span> <span class="o">...</span> <span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="nb">map</span><span class="o">:</span> <span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="o">*.</span><span class="nb">sin</span><span class="p">)</span><span class="o">.</span><span class="nb">Int</span> <span class="c1"># pattern we supply to .rotor</span>
<span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="o">:</span> <span class="p">&#34;</span><span class="s2">\n</span><span class="p">&#34;&#39;</span><span class="s1">
</span></code></pre></div><p>输出:</p>
<pre><code>0
1 2 3
4 5 6 7 8
9 10 11 12 13 14 15
16 17 18 19 20 21 22 23
24 25 26 27 28 29 30 31 32
33 34 35 36 37 38 39 40 41
42 43 44 45 46 47 48 49 50
51 52 53 54 55 56 57 58 59
60 61 62 63 64 65 66 67 68
69 70 71 72 73 74 75 76
77 78 79 80 81 82
83 84 85 86 87
88 89 90
91
</code></pre><p>再举个例子:</p>
<p>我现在想要将同类的序列（字符串）进行合并，比如有这样一个文件：</p>
<pre><code>&gt;seq-1A
GACACAGTCACCCGAGCCT
&gt;seq-1B
TCAATCAATACTGAAGCGA
&gt;seq-1C
AAAACTAGTCGAGAAGAGAG
&gt;seq-1D
CGTGGAAAACTCCAG
&gt;seq-2A
TAAAAGGCGTTCATTGGATATTTC
&gt;seq-2B
ACTGGCAGTGCATCC
</code></pre><p>我想要进行合并 得到这样的结果：</p>
<pre><code>&gt;seq-1
GACACAGTCACCCGAGCCTTCAATCAATACTGAAGCGAAAAACTAGTCGAGAAGAGAGCGTGGAAAACTCCAG
&gt;seq-2
TAAAAGGCGTTCATTGGATATTTCACTGGCAGTGCATCC
</code></pre><p>使用 <code>rotor</code> 来实现:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">%re</span><span class="p">;</span>
<span class="k">for</span> <span class="p">&#39;</span><span class="s1">input.txt</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">lines</span><span class="o">».</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">2</span><span class="o">,</span> <span class="p">:</span><span class="s">partial</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$header</span><span class="o">,</span> <span class="nv">$data</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
    <span class="nv">$key</span> <span class="o">~~</span> <span class="k">s</span><span class="p">/&lt;</span><span class="nb">upper</span><span class="p">&gt;</span><span class="ni">$</span><span class="p">//;</span>
    <span class="nv">%re</span><span class="p">{</span><span class="nv">$key</span><span class="p">}</span> <span class="o">~=</span> <span class="nv">$data</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">for</span> <span class="nv">%re</span><span class="o">.</span><span class="nb">kv</span> <span class="k">-&gt;</span> <span class="nv">$key</span><span class="o">,</span> <span class="nv">$value</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$key</span><span class="s2">\n</span><span class="nv">$value</span><span class="p">&#34;;</span>
<span class="p">}</span>
</code></pre></div><h2 id="官网的例子">官网的例子</h2>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">method</span> <span class="nb">rotor</span><span class="p">(</span><span class="o">*</span><span class="nv">@cycle</span><span class="o">,</span> <span class="nb">Bool</span><span class="p">()</span> <span class="o">:</span><span class="nv">$partial</span><span class="p">)</span>
</code></pre></div><p>rotor 返回一个 list, 这个 list 的元素也是 list,  其中每个子列表由调用者中的元素组成.  在最简单的情况下, <code>@cycle</code> 只包含一个整数, 这时调用者列表被分割为多个子列表, 每个子列表中的元素尽可能多的为那个整数指定的个数. 如果 <code>:$partial</code> 为 True, 不够分的最后那部分也会被包括进去, 即使它不满足长度的要求:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">(&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">h</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;);</span>           <span class="c1"># a b c|d e f</span>
<span class="nb">say</span> <span class="p">(&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">h</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">3</span><span class="o">,</span> <span class="p">:</span><span class="s">partial</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;);</span> <span class="c1"># a b c|d e f|g h</span>
</code></pre></div><p>如果 <code>@cycle</code> 的元素是一个  <a href="">/type/Pair</a>, 则 Pair 的键指定了所返回子列表的长度(即每个子列表中含有的元素数), Pair 的键值指定两个列表之间的间隙; 负的间隙会产生重叠:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">(&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">h</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">2</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;);</span>  <span class="c1"># a b|d e|g h</span>
<span class="nb">say</span> <span class="p">(&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">h</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">3</span> <span class="o">=&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;);</span> <span class="c1"># a b c|c d e|e f g</span>

<span class="k">my</span> <span class="nv">$pair</span>  <span class="o">=</span> <span class="mi">2</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$key</span>   <span class="o">=</span> <span class="nv">$pair</span><span class="o">.</span><span class="nb">key</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$pair</span><span class="o">.</span><span class="nb">value</span><span class="p">;</span>

<span class="nb">say</span> <span class="p">(&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">h</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;)</span> <span class="c1"># a b|d e|g h</span>
</code></pre></div><p>如果 <code>@cycle</code> 的元素个数大于 1 时,  rotor 会按 <code>@cycle</code> 中的元素依次循环调用者列表, 得到每个子列表:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">(&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">h</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;);</span>      <span class="c1"># a b|c d e|f g</span>
<span class="nb">say</span> <span class="p">(&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">h</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">1</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">|</span><span class="p">&#39;);</span> <span class="c1"># a|c d e|f</span>
</code></pre></div><p>组合多个循环周期和 <code>:partial</code> 也有效:</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">say </span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="n">..</span><span class="s">&#39;h&#39;</span><span class="p">)</span><span class="nf">.rotor</span><span class="p">(</span><span class="m">1</span> <span class="o">=&gt;</span> <span class="m">1</span><span class="p">,</span> <span class="m">3</span> <span class="o">=&gt;</span> <span class="m">-1</span><span class="p">,</span> <span class="o">:</span><span class="n">partial</span><span class="p">)</span><span class="nf">.join</span><span class="p">(</span><span class="s">&#39;|&#39;</span><span class="p">);</span> <span class="c1"># a|c d e|e|g h</span>
</code></pre></div><p>注意, 从 <code>rotor</code> 函数返回的一列列表们赋值给一个变量时会展开为一个数组:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">@maybe_lol</span> <span class="o">=</span> <span class="p">(&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">h</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">2</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
<span class="nv">@maybe_lol</span><span class="o">.</span><span class="nb">raku</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span> <span class="c1">#  [&#34;a&#34;, &#34;b&#34;, &#34;d&#34;, &#34;e&#34;, &#34;g&#34;, &#34;h&#34;]&lt;&gt;</span>
</code></pre></div><p>这可能不是你想要的, 因为 rotor 之后的输出看起来是这样的:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="p">(&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">h</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">2</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="nb">raku</span><span class="p">;</span> <span class="c1"># ((&#34;a&#34;, &#34;b&#34;), (&#34;d&#34;, &#34;e&#34;), (&#34;g&#34;, &#34;h&#34;))</span>
</code></pre></div><p>要强制返回列表的列表, 使用绑定而非赋值:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">@really_lol</span> <span class="o">:=</span> <span class="p">(&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">h</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">2</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
<span class="nv">@really_lol</span><span class="o">.</span><span class="nb">raku</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span> <span class="c1"># ((&#34;a&#34;, &#34;b&#34;), (&#34;d&#34;, &#34;e&#34;), (&#34;g&#34;, &#34;h&#34;))</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rotor" term="rotor" label="rotor" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[给数字添加千分位符]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-12-14-add-separator/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2015-07-14-the-king-of-list-manipulation/?utm_source=atom_feed" rel="related" type="text/html" title="rotor: 列表操作之王" />
            
                <id>https://ohmyweekly.github.io/notes/2015-12-14-add-separator/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Add Separator</blockquote><h2 id="使用链式函数调用">使用链式函数调用</h2>
<p>考虑最简单的一种情况, 不带小数点的数字:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">&#34;</span><span class="s2">1234567890</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">comb</span><span class="o">.</span><span class="nb">reverse</span><span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">3</span><span class="o">,</span><span class="p">:</span><span class="s">partial</span><span class="p">)</span><span class="o">.</span><span class="nb">map</span><span class="p">(</span><span class="o">*.</span><span class="nb">join</span><span class="p">(&#39;&#39;))</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">,</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">comb</span><span class="o">.</span><span class="nb">reverse</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;&#39;)</span>  
<span class="c1"># 1,234,567,890</span>
</code></pre></div><p>使用 <code>\\</code> 转义空白, 使代码对齐:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">&#34;</span><span class="s2">1234567890</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">comb</span>\
            <span class="o">.</span><span class="nb">reverse</span>\
            <span class="o">.</span><span class="nb">rotor</span><span class="p">(</span><span class="mi">3</span><span class="o">,</span><span class="p">:</span><span class="s">partial</span><span class="p">)</span>\
            <span class="o">.</span><span class="nb">map</span><span class="p">(</span><span class="o">*.</span><span class="nb">join</span><span class="p">(</span>‘’<span class="p">))</span>\
            <span class="o">.</span><span class="nb">join</span><span class="p">(</span>‘<span class="o">,</span>’<span class="p">)</span>\
            <span class="o">.</span><span class="nb">comb</span>\
            <span class="o">.</span><span class="nb">reverse</span>\
            <span class="o">.</span><span class="nb">join</span><span class="p">(</span>‘’<span class="p">)</span>\
            <span class="o">.</span><span class="nb">say</span><span class="p">;</span>

</code></pre></div><h2 id="使用正则表达式">使用正则表达式</h2>
<h2 id="使用-grammar">使用 Grammar</h2>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rotor" term="rotor" label="rotor" />
                            
                        
                    
                
            
        </entry>
    
</feed>
