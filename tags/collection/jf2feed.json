{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e这个代码实验室教你如何使用实现 \u003ca href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\"\u003eIterable\u003c/a\u003e类的集合-例如 \u003ca href=\"https://api.dart.dev/stable/dart-core/List-class.html\"\u003eList\u003c/a\u003e和 \u003ca href=\"https://api.dart.dev/stable/dart-core/Set-class.html\"\u003eSet\u003c/a\u003e。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。\u003c/p\u003e\n\u003cp\u003e使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\u003c/p\u003e\n\u003cp\u003e要想从这个 codelab 中获得最大的收获，你应该具备基本的 \u003ca href=\"https://dart.dev/samples\"\u003eDart 语法知识\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e本课程包括以下内容。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如何读取一个 Iterable 的元素。\u003c/li\u003e\n\u003cli\u003e如何检查一个 Iterable 的元素是否满足一个条件。\u003c/li\u003e\n\u003cli\u003e如何过滤一个 Iterable 的内容。\u003c/li\u003e\n\u003cli\u003e如何将一个 Iterable 的内容映射到不同的值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e估计完成这个代码实验所需的时间: 60分钟。\u003c/p\u003e\n\u003ch2 id=\"什么是集合\"\u003e什么是集合?\u003c/h2\u003e\n\u003cp\u003e集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。\u003c/p\u003e\n\u003cp\u003e集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://api.dart.dev/stable/dart-core/List-class.html\"\u003eList\u003c/a\u003e: 用来通过索引读取元素。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://api.dart.dev/stable/dart-core/Set-class.html\"\u003eSet\u003c/a\u003e: 用于包含只能出现一次的元素。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://api.dart.dev/stable/dart-core/Map-class.html\"\u003eMap\u003c/a\u003e：用于通过键来读取元素。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"什么是iterable\"\u003e什么是Iterable?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eIterable\u003c/code\u003e 是一个元素的集合，它可以被依次访问。\u003c/p\u003e\n\u003cp\u003e在 Dart 中，\u003ccode\u003eIterable\u003c/code\u003e 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 \u003ccode\u003eList\u003c/code\u003e 或 \u003ccode\u003eSet\u003c/code\u003e 来创建一个新的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eList\u003c/code\u003e 和 \u003ccode\u003eSet\u003c/code\u003e 都是 \u003ccode\u003eIterable\u003c/code\u003e，所以它们和 \u003ccode\u003eIterable\u003c/code\u003e 类有相同的方法和属性。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMap\u003c/code\u003e 在内部使用不同的数据结构，这取决于它的实现。例如，\u003ca href=\"https://api.dart.dev/stable/dart-collection/HashMap-class.html\"\u003eHashMap\u003c/a\u003e 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 \u003ccode\u003eMap\u003c/code\u003e 的 \u003ccode\u003eentries\u003c/code\u003e 或 \u003ccode\u003evalues\u003c/code\u003e 属性，\u003ccode\u003eMap\u003c/code\u003e 的元素也可以作为 \u003ccode\u003eIterable\u003c/code\u003e 对象读取。\u003c/p\u003e\n\u003cp\u003e这个例子显示了一个 \u003ccode\u003eint\u003c/code\u003e 的 \u003ccode\u003eList\u003c/code\u003e，它也是一个 \u003ccode\u003eint\u003c/code\u003e 的 \u003ccode\u003eIterable\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e与 \u003ccode\u003eList\u003c/code\u003e 的区别在于，使用 \u003ccode\u003eIterable\u003c/code\u003e，你无法保证按索引读取元素的效率。\u003ccode\u003eIterable\u003c/code\u003e 与 \u003ccode\u003eList\u003c/code\u003e 相比，没有 \u003ccode\u003e[]\u003c/code\u003e 操作符。\u003c/p\u003e\n\u003cp\u003e例如，考虑以下代码，这是\u003cstrong\u003e无效的\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你用 \u003ccode\u003e[]\u003c/code\u003e 读取元素，编译器会告诉你 \u003ccode\u003e'[]'\u003c/code\u003e 这个运算符没有为 \u003ccode\u003eIterable\u003c/code\u003e 类定义，这意味着在这种情况下你不能使用 \u003ccode\u003e[index]\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e你可以用 \u003ccode\u003eelementAt()\u003c/code\u003e 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eelementAt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e继续下一节，了解更多关于如何访问 \u003ccode\u003eIterable\u003c/code\u003e 的元素。\u003c/p\u003e\n\u003ch2 id=\"读取元素\"\u003e读取元素\u003c/h2\u003e\n\u003cp\u003e你可以使用 \u003ccode\u003efor-in\u003c/code\u003e 循环，依次读取一个迭代元素。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-for-in-循环\"\u003e例子: 使用 for-in 循环\u003c/h3\u003e\n\u003cp\u003e下面的例子展示了如何使用 \u003ccode\u003efor-in\u003c/code\u003e 循环读取元素。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Salad\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Popcorn\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Toast\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在幕后，\u003ccode\u003efor-in\u003c/code\u003e 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 \u003ccode\u003efor-in\u003c/code\u003e 更容易阅读和理解，而且不容易出错。\u003c/p\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIterable\u003c/strong\u003e: Dart \u003ca href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\"\u003eIterable\u003c/a\u003e 类。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIterator\u003c/strong\u003e: \u003ccode\u003efor-in\u003c/code\u003e 用来从一个 Iterable 对象中读取元素的对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efor-in\u003c/code\u003e 循环: 从一个 Iterable 对象中依次读取元素的简单方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"例子使用第一个和最后一个元素\"\u003e例子：使用第一个和最后一个元素\u003c/h3\u003e\n\u003cp\u003e在某些情况下，你只想访问一个 \u003ccode\u003eIterable\u003c/code\u003e 的第一个或最后一个元素。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003eIterable\u003c/code\u003e 类中，你不能直接访问元素，所以你不能调用 \u003ccode\u003eiterable[0]\u003c/code\u003e 来访问第一个元素。相反，你可以使用 \u003ccode\u003efirst\u003c/code\u003e，它可以获取第一个元素。\u003c/p\u003e\n\u003cp\u003e另外，使用 Iterable 类，你不能使用操作符 \u003ccode\u003e[]\u003c/code\u003e 来访问最后一个元素，但是你可以使用 \u003ccode\u003elast\u003c/code\u003e 属性。\u003c/p\u003e\n\u003cp\u003e因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 \u003ccode\u003elast\u003c/code\u003e 可能会很慢。在一个空的 \u003ccode\u003eIterable\u003c/code\u003e 上使用 \u003ccode\u003efirst\u003c/code\u003e 或 \u003ccode\u003elast\u003c/code\u003e 会导致一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIterable\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Salad\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Popcorn\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Toast\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;The first element is \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;The last element is \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，你看到了如何使用 \u003ccode\u003efirst\u003c/code\u003e 和 \u003ccode\u003elast\u003c/code\u003e 来获得一个 \u003ccode\u003eIterable\u003c/code\u003e 的第一个和最后一个元素。也可以找到满足条件的第一个元素。下一节将展示如何使用名为 \u003ccode\u003efirstWhere()\u003c/code\u003e 的方法来实现这一目标。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-firstwhere\"\u003e例子: 使用 firstWhere()\u003c/h3\u003e\n\u003cp\u003e你已经看到，你可以依次访问一个 \u003ccode\u003eIterable\u003c/code\u003e 的元素，你可以很容易地得到第一个或最后一个元素。\u003c/p\u003e\n\u003cp\u003e现在，你要学习如何使用 \u003ccode\u003efirstWhere()\u003c/code\u003e 来寻找满足某些条件的第一个元素。这个方法需要你传递一个谓词，它是一个函数，如果输入满足一定的条件就返回 true。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e例如，如果你想找到第一个超过 5 个字符的 \u003ccode\u003eString\u003c/code\u003e，你必须传递一个当元素大小大于 5 时返回 true 的谓词。\u003c/p\u003e\n\u003cp\u003e运行下面的例子，看看 \u003ccode\u003efirstWhere()\u003c/code\u003e 是如何工作的。你认为所有的函数都会给出相同的结果吗？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003epredicate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Salad\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Popcorn\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Toast\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Lasagne\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// You can find with a simple expression:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Or try using a function block:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Or even pass in a function reference:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epredicate\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// You can also use an `orElse` function in case no value is found!\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nl\"\u003eorElse:\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;None!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，你可以看到三种不同的方式来写一个谓词。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e作为一个表达式\u003c/strong\u003e: 测试代码中有一行使用了箭头语法(\u003ccode\u003e=\u0026gt;\u003c/code\u003e)。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e作为一个块\u003c/strong\u003e: 测试代码在括号和返回语句之间有多行。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e作为一个函数\u003c/strong\u003e: 测试代码在一个外部函数中，作为参数传递给 \u003ccode\u003efirstWhere()\u003c/code\u003e 方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e没有正确或错误的方式。使用最适合你的方式，并且让你的代码更容易阅读和理解。\u003c/p\u003e\n\u003cp\u003e在这个例子中，\u003ccode\u003efirstWhereWithOrElse()\u003c/code\u003e 调用 \u003ccode\u003efirstWhere()\u003c/code\u003e 时，使用了可选的命名参数 \u003ccode\u003eorElse\u003c/code\u003e，它在没有找到元素时提供了一个替代方案。在这种情况下，返回文本 \u0026ldquo;None!\u0026quot;，因为没有元素满足提供的条件。\u003c/p\u003e\n\u003cp\u003e注意：如果没有元素满足测试谓词，并且没有提供 \u003ccode\u003eorElse\u003c/code\u003e 参数，那么 \u003ccode\u003efirstWhere()\u003c/code\u003e 会抛出一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e快速回顾。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIterable\u003c/code\u003e 的元素必须按顺序访问。\u003c/li\u003e\n\u003cli\u003e迭代所有元素的最简单方法是使用 \u003ccode\u003efor-in\u003c/code\u003e 循环。\u003c/li\u003e\n\u003cli\u003e你可以使用 \u003ccode\u003efirst\u003c/code\u003e 和 \u003ccode\u003elast\u003c/code\u003e getters 来获取第一个和最后一个元素。\u003c/li\u003e\n\u003cli\u003e你也可以用 \u003ccode\u003efirstWhere()\u003c/code\u003e 找到满足条件的第一个元素。\u003c/li\u003e\n\u003cli\u003e你可以把测试谓词写成表达式、块或函数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关键术语。\u003c/p\u003e\n\u003cp\u003e谓词: 当某个条件被满足时，返回 \u003ccode\u003etrue\u003c/code\u003e 的函数。\u003c/p\u003e\n\u003ch3 id=\"练习-练习写一个测试谓词\"\u003e练习: 练习写一个测试谓词\u003c/h3\u003e\n\u003cp\u003e下面的练习是一个失败的单元测试，其中包含一个部分完整的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 \u003ccode\u003emain()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这个练习介绍了 \u003ccode\u003esingleWhere()\u003c/code\u003e 这个方法的工作原理类似于 \u003ccode\u003efirstWhere()\u003c/code\u003e，但在这种情况下，它只期望 \u003ccode\u003eIterable\u003c/code\u003e 中的一个元素满足谓词。如果 \u003ccode\u003eIterable\u003c/code\u003e 中超过一个或没有元素满足谓词条件，那么该方法会抛出一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e 异常。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esingleWhere()\u003c/code\u003e 对整个 \u003ccode\u003eIterable\u003c/code\u003e 进行步进，直到最后一个元素，如果  \u003ccode\u003eIterable\u003c/code\u003e 是无限的或包含一个大的元素集合，这可能会引起问题。\u003c/p\u003e\n\u003cp\u003e你的目标是实现满足以下条件的 \u003ccode\u003esingleWhere()\u003c/code\u003e 谓词。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e元素包含字符 \u0026lsquo;a\u0026rsquo;。\u003c/li\u003e\n\u003cli\u003e该元素以字符 \u0026lsquo;M\u0026rsquo; 开头。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e测试数据中的所有元素都是\u003ca href=\"https://api.dart.dev/stable/dart-core/String-class.html\"\u003e字符串\u003c/a\u003e，你可以查看类文档以获得帮助。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003esingleWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esingleWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estartsWith\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;M\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"检查条件\"\u003e检查条件\u003c/h2\u003e\n\u003cp\u003e在使用 \u003ccode\u003eIterable\u003c/code\u003e 时，有时你需要验证一个集合的所有元素是否满足某些条件。\u003c/p\u003e\n\u003cp\u003e你可能会想用 \u003ccode\u003efor-in\u003c/code\u003e 循环来写一个解决方案，比如这个:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然而，你可以使用 \u003ccode\u003eevery()\u003c/code\u003e 方法实现同样的目的:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用 \u003ccode\u003eevery()\u003c/code\u003e 方法可以使代码更易读、更紧凑、更不容易出错。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-any-和-every\"\u003e例子: 使用 any() 和 every()\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eIterable\u003c/code\u003e 类提供了两个可以用来验证条件的方法。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eany()\u003c/code\u003e: 如果至少有一个元素满足条件，则返回 true。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eevery()\u003c/code\u003e: 如果所有元素都满足条件，则返回 true。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e运行这个练习来看看它们的作用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Salad\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Popcorn\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Toast\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;At least one element contains \u0026#34;a\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;All elements have length \u0026gt;= 5\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003eany()\u003c/code\u003e 验证了至少一个元素包含字符 a，\u003ccode\u003eevery()\u003c/code\u003e 验证了所有元素的长度等于或大于 5。\u003c/p\u003e\n\u003cp\u003e运行代码后，尝试更改 \u003ccode\u003eany()\u003c/code\u003e 的谓词，使其返回 false:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Z\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;At least one element contains \u0026#34;Z\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;No element contains \u0026#34;Z\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你也可以使用 \u003ccode\u003eany()\u003c/code\u003e 来验证一个 \u003ccode\u003eIterable\u003c/code\u003e 中没有元素满足某个条件。\u003c/p\u003e\n\u003ch3 id=\"练习-验证一个-iterable-是否满足一个条件\"\u003e练习： 验证一个 Iterable 是否满足一个条件\u003c/h3\u003e\n\u003cp\u003e下面的练习提供了使用前面例子中描述的 \u003ccode\u003eany()\u003c/code\u003e 和 \u003ccode\u003eevery()\u003c/code\u003e 方法的练习。在本例中，你的工作对象是一组用户，由具有成员字段 \u003ccode\u003eage\u003c/code\u003e 的 \u003ccode\u003eUser\u003c/code\u003e 对象表示。\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003eany()\u003c/code\u003e 和 \u003ccode\u003eevery()\u003c/code\u003e 实现两个函数。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第1部分：实现 \u003ccode\u003eanyUserUnder18()\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e如果至少有一个用户是17岁或更小，则返回 true。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e第2部分：实现 \u003ccode\u003eeveryUserOver13()\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e如果所有用户都是14岁或以上，则返回 true。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eanyUserUnder18\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"m\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eeveryUserOver13\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eUser\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e快速回顾:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e虽然你可以使用 \u003ccode\u003efor-in\u003c/code\u003e 循环来检查条件，但还有更好的方法。\u003c/li\u003e\n\u003cli\u003e方法 \u003ccode\u003eany()\u003c/code\u003e 可以让你检查任何元素是否满足条件。\u003c/li\u003e\n\u003cli\u003e方法 \u003ccode\u003eevery()\u003c/code\u003e 可以让你验证所有元素是否满足条件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"过滤\"\u003e过滤\u003c/h2\u003e\n\u003cp\u003e前面的章节介绍了 \u003ccode\u003efirstWhere()\u003c/code\u003e 或 \u003ccode\u003esingleWhere()\u003c/code\u003e 等方法，这些方法可以帮助你找到满足某个谓词的元素。\u003c/p\u003e\n\u003cp\u003e但是如果你想找到满足某个条件的所有元素呢？你可以使用 \u003ccode\u003ewhere()\u003c/code\u003e 方法来实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEven\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003enumbers\u003c/code\u003e 包含一个有多个 \u003ccode\u003eint\u003c/code\u003e 值的 \u003ccode\u003eIterable\u003c/code\u003e，\u003ccode\u003ewhere()\u003c/code\u003e 可以找到所有偶数的数字。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ewhere()\u003c/code\u003e 的输出是另一个 \u003ccode\u003eIterable\u003c/code\u003e，你可以用它来迭代它或应用其他 \u003ccode\u003eIterable\u003c/code\u003e 方法。在下一个例子中，\u003ccode\u003ewhere()\u003c/code\u003e 的输出直接在 \u003ccode\u003efor-in\u003c/code\u003e 循环中使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEven\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"s1\"\u003e is even\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"例子-使用-where\"\u003e例子: 使用 where()\u003c/h3\u003e\n\u003cp\u003e运行这个例子，看看如何将 \u003ccode\u003ewhere()\u003c/code\u003e 与其他方法如 \u003ccode\u003eany()\u003c/code\u003e 一起使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEven\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"s1\"\u003e is even.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisNegative\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;evenNumbers contains negative numbers.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// If no element satisfies the predicate, the output is empty.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003elargeNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elargeNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;largeNumbers is empty!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003ewhere()\u003c/code\u003e 用于查找所有偶数，然后用 \u003ccode\u003eany()\u003c/code\u003e 检查结果是否包含负数。\u003c/p\u003e\n\u003cp\u003e在本例的后面，再次使用 \u003ccode\u003ewhere()\u003c/code\u003e 来查找所有大于1000的数字，由于没有，结果是一个空的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e注意：如果没有元素满足 \u003ccode\u003ewhere()\u003c/code\u003e 中的谓词，那么该方法返回一个空的 \u003ccode\u003eIterable\u003c/code\u003e。与 \u003ccode\u003esingleWhere()\u003c/code\u003e 或 \u003ccode\u003efirstWhere()\u003c/code\u003e 不同，\u003ccode\u003ewhere()\u003c/code\u003e 不会抛出 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e 异常。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-takewhile\"\u003e例子: 使用 takeWhile\u003c/h3\u003e\n\u003cp\u003e方法 \u003ccode\u003etakeWhile()\u003c/code\u003e 和 \u003ccode\u003eskipWhile()\u003c/code\u003e 也可以帮助你从一个 \u003ccode\u003eIterable\u003c/code\u003e 中过滤元素。\u003c/p\u003e\n\u003cp\u003e运行这个例子，看看 \u003ccode\u003etakeWhile()\u003c/code\u003e 和 \u003ccode\u003eskipWhile()\u003c/code\u003e 如何分割一个包含数字的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbersUntilZero\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etakeWhile\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Numbers until 0: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumbersUntilZero\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbersAfterZero\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eskipWhile\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Numbers after 0: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumbersAfterZero\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eNumbers until 0: (1, 3, -2)\nNumbers after 0: (0, 4, 5)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003etakeWhile()\u003c/code\u003e 返回一个 \u003ccode\u003eIterable\u003c/code\u003e，它包含了通往满足谓词的元素的所有元素。另一方面， \u003ccode\u003eskipWhile()\u003c/code\u003e 返回一个 \u003ccode\u003eIterable\u003c/code\u003e，同时跳过满足谓词的元素之前的所有元素。请注意，满足谓词的元素也会被包含在内。\u003c/p\u003e\n\u003cp\u003e运行该示例后，将 \u003ccode\u003etakeWhile()\u003c/code\u003e 改为取元素，直到到达第一个负数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbersUntilNegative\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etakeWhile\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisNegative\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，条件 \u003ccode\u003enumber.isNegative\u003c/code\u003e 是用 \u003ccode\u003e!\u003c/code\u003e 否定的。\u003c/p\u003e\n\u003ch3 id=\"练习-从列表中过滤元素\"\u003e练习: 从列表中过滤元素\u003c/h3\u003e\n\u003cp\u003e下面的练习提供了使用上一练习中的 \u003ccode\u003eUser\u003c/code\u003e 类的 \u003ccode\u003ewhere()\u003c/code\u003e 方法的练习。\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003ewhere()\u003c/code\u003e 实现两个函数。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第1部分：实现 \u003ccode\u003efilterUnder21()\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e返回一个包含所有21岁以上用户的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e第2部分：实现 \u003ccode\u003efindShortNamed()\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e返回一个包含所有名字长度为 3 或更少的用户的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efilterUnder21\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"m\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efindShortNamed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eUser\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e快速回顾:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用 \u003ccode\u003ewhere()\u003c/code\u003e 过滤一个 \u003ccode\u003eIterable\u003c/code\u003e 的元素。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewhere()\u003c/code\u003e 的输出是另一个 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003etakeWhile()\u003c/code\u003e 和 \u003ccode\u003eskipWhile()\u003c/code\u003e 来获取元素，直到满足一个条件或之后。\u003c/li\u003e\n\u003cli\u003e这些方法的输出可以是一个空的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"map\"\u003eMap\u003c/h2\u003e\n\u003cp\u003e通过 \u003ccode\u003emap()\u003c/code\u003e 方法映射 \u003ccode\u003eIterables\u003c/code\u003e，你可以在每个元素上应用一个函数，用一个新的元素替换每个元素。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"m\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003eIterable\u003c/code\u003e 数字的每个元素都被乘以 10。\u003c/p\u003e\n\u003cp\u003e你也可以使用 \u003ccode\u003emap()\u003c/code\u003e 将一个元素转换为不同的对象-例如，将所有 \u003ccode\u003eint\u003c/code\u003e 转换为 \u003ccode\u003eString\u003c/code\u003e，在下面的例子中可以看到。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意：\u003ccode\u003emap()\u003c/code\u003e 返回一个懒惰的 \u003ccode\u003eIterable\u003c/code\u003e，这意味着只有在元素被迭代时才会调用所提供的函数。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-map-改变元素\"\u003e例子: 使用 map 改变元素\u003c/h3\u003e\n\u003cp\u003e运行这个例子，看看如何使用 \u003ccode\u003emap()\u003c/code\u003e 将一个 \u003ccode\u003eIterable\u003c/code\u003e 中的所有元素乘以2，你认为输出会是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbersByTwo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Numbers: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumbersByTwo\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"练习-映射到不同类型\"\u003e练习: 映射到不同类型\u003c/h3\u003e\n\u003cp\u003e在前面的例子中，你把一个 \u003ccode\u003eIterable\u003c/code\u003e 的元素乘以2，输入和输出都是 \u003ccode\u003eint\u003c/code\u003e 的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在这个练习中，你的代码接收一个 \u003ccode\u003eUser\u003c/code\u003e的 \u003ccode\u003eIterable\u003c/code\u003e，你需要返回一个包含用户名和年龄的字符串的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eIterable\u003c/code\u003e 中的每个字符串必须遵循这样的格式。\u003ccode\u003e'{name} is {age}'\u003c/code\u003e-例如 \u003ccode\u003e'Alice is 21'\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egetNameAndAges\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e is \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eUser\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e快速回顾:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emap()\u003c/code\u003e 将一个函数应用于一个 \u003ccode\u003eIterable\u003c/code\u003e 的所有元素。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emap()\u003c/code\u003e 的输出是另一个 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e在 \u003ccode\u003eIterable\u003c/code\u003e 被迭代之前，函数不会被计算。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"练习-把所有的东西放在一起\"\u003e练习: 把所有的东西放在一起\u003c/h2\u003e\n\u003cp\u003e现在是练习所学知识的时候了，在最后一个练习中。\u003c/p\u003e\n\u003cp\u003e这个练习提供了类 \u003ccode\u003eEmailAddress\u003c/code\u003e，它有一个构造函数，接收一个字符串。另一个提供的函数是 \u003ccode\u003eisValidEmailAddress()\u003c/code\u003e，它测试一个电子邮件地址是否有效。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e构造函数/函数\u003c/th\u003e\n\u003cth\u003e类型签名\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eEmailAddress()\u003c/td\u003e\n\u003ctd\u003eEmailAddress(String address)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e为指定的地址创建一个 EmailAddress。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eisValidEmailAddress()\u003c/td\u003e\n\u003ctd\u003ebool isValidEmailAddress(EmailAddress)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e如果提供的 EmailAddress 有效，返回 true。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e编写以下代码。\u003c/p\u003e\n\u003cp\u003e第1部分：实现 \u003ccode\u003eparseEmailAddresses()\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写函数 \u003ccode\u003eparseEmailAddresses()\u003c/code\u003e，它接收一个包含电子邮件地址的 \u003ccode\u003eIterable\u0026lt;String\u0026gt;\u003c/code\u003e，并返回一个 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用方法 \u003ccode\u003emap()\u003c/code\u003e 从 \u003ccode\u003eString\u003c/code\u003e 映射到 \u003ccode\u003eEmailAddress\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用构造函数 \u003ccode\u003eEmailAddress(String)\u003c/code\u003e 创建 \u003ccode\u003eEmailAddress\u003c/code\u003e 对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第二部分：实现 \u003ccode\u003eanyInvalidEmailAddress()\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写函数 \u003ccode\u003eanyInvalidEmailAddress()\u003c/code\u003e，它接收一个 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e，并在 \u003ccode\u003eIterable\u003c/code\u003e 中的任何 \u003ccode\u003eEmailAddress\u003c/code\u003e 无效时返回 true。\u003c/li\u003e\n\u003cli\u003e使用方法 \u003ccode\u003eany()\u003c/code\u003e 和提供的函 \u003ccode\u003eisValidEmailAddress()\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第3部分：实现 \u003ccode\u003evalidEmailAddresses()\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写函数 \u003ccode\u003evalidEmailAddresses()\u003c/code\u003e，它接收一个 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e 并返回另一个只包含有效地址的 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用方法 \u003ccode\u003ewhere()\u003c/code\u003e 来过滤 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用提供的函数 \u003ccode\u003eisValidEmailAddress()\u003c/code\u003e 来评估一个 \u003ccode\u003eEmailAddress\u003c/code\u003e 是否有效。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eparseEmailAddresses\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eanyInvalidEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eemails\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eemails\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eisValidEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evalidEmailAddresses\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eemails\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eemails\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eisValidEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eEmailAddress\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"kd\"\u003eoperator\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eidentical\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eother\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n              \u003cspan class=\"n\"\u003eruntimeType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eruntimeType\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n              \u003cspan class=\"n\"\u003eaddress\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003ehashCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashCode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;EmailAddress{address: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"s1\"\u003e}\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"下一步是什么\"\u003e下一步是什么?\u003c/h2\u003e\n\u003cp\u003e恭喜你，你完成了 codelab 的学习! 如果你想了解更多，这里有一些下一步的建议。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e玩玩 \u003ca href=\"https://dartpad.dev/\"\u003eDartPad\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e试试另一个\u003ca href=\"https://dart.dev/codelabs\"\u003e代码实验\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e阅读 \u003ca href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\"\u003eIterable API\u003c/a\u003e 参考资料，了解本 codelab 未涉及的方法。\u003c/li\u003e\n\u003c/ul\u003e\n","text":"这个代码实验室教你如何使用实现 Iterable类的集合-例如 List和 Set。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。\n使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\n要想从这个 codelab 中获得最大的收获，你应该具备基本的 Dart 语法知识。\n本课程包括以下内容。\n 如何读取一个 Iterable 的元素。 如何检查一个 Iterable 的元素是否满足一个条件。 如何过滤一个 Iterable 的内容。 如何将一个 Iterable 的内容映射到不同的值。  估计完成这个代码实验所需的时间: 60分钟。\n什么是集合? 集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。\n集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:\n List: 用来通过索引读取元素。 Set: 用于包含只能出现一次的元素。 Map：用于通过键来读取元素。  什么是Iterable? Iterable 是一个元素的集合，它可以被依次访问。\n在 Dart 中，Iterable 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 List 或 Set 来创建一个新的 Iterable。\nList 和 Set 都是 Iterable，所以它们和 Iterable 类有相同的方法和属性。\nMap 在内部使用不同的数据结构，这取决于它的实现。例如，HashMap 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 Map 的 entries 或 values 属性，Map 的元素也可以作为 Iterable 对象读取。\n这个例子显示了一个 int 的 List，它也是一个 int 的 Iterable:\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; 与 List 的区别在于，使用 Iterable，你无法保证按索引读取元素的效率。Iterable 与 List 相比，没有 [] 操作符。\n例如，考虑以下代码，这是无效的:\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; int value = iterable[1]; 如果你用 [] 读取元素，编译器会告诉你 '[]' 这个运算符没有为 Iterable 类定义，这意味着在这种情况下你不能使用 [index]。\n你可以用 elementAt() 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; int value = iterable.elementAt(1); 继续下一节，了解更多关于如何访问 Iterable 的元素。\n读取元素 你可以使用 for-in 循环，依次读取一个迭代元素。\n例子: 使用 for-in 循环 下面的例子展示了如何使用 for-in 循环读取元素。\nvoid main() { var iterable = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; for (var element in iterable) { print(element); } } 在幕后，for-in 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 for-in 更容易阅读和理解，而且不容易出错。\n关键术语:\n Iterable: Dart Iterable 类。 Iterator: for-in 用来从一个 Iterable 对象中读取元素的对象。 for-in 循环: 从一个 Iterable 对象中依次读取元素的简单方法。  例子：使用第一个和最后一个元素 在某些情况下，你只想访问一个 Iterable 的第一个或最后一个元素。\n在 Iterable 类中，你不能直接访问元素，所以你不能调用 iterable[0] 来访问第一个元素。相反，你可以使用 first，它可以获取第一个元素。\n另外，使用 Iterable 类，你不能使用操作符 [] 来访问最后一个元素，但是你可以使用 last 属性。\n因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 last 可能会很慢。在一个空的 Iterable 上使用 first 或 last 会导致一个 StateError。\nvoid main() { Iterable iterable = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; print(\u0026#39;The first element is ${iterable.first}\u0026#39;); print(\u0026#39;The last element is ${iterable.last}\u0026#39;); } 在这个例子中，你看到了如何使用 first 和 last 来获得一个 Iterable 的第一个和最后一个元素。也可以找到满足条件的第一个元素。下一节将展示如何使用名为 firstWhere() 的方法来实现这一目标。\n例子: 使用 firstWhere() 你已经看到，你可以依次访问一个 Iterable 的元素，你可以很容易地得到第一个或最后一个元素。\n现在，你要学习如何使用 firstWhere() 来寻找满足某些条件的第一个元素。这个方法需要你传递一个谓词，它是一个函数，如果输入满足一定的条件就返回 true。\nString element = iterable.firstWhere((element) =\u0026gt; element.length \u0026gt; 5); 例如，如果你想找到第一个超过 5 个字符的 String，你必须传递一个当元素大小大于 5 时返回 true 的谓词。\n运行下面的例子，看看 firstWhere() 是如何工作的。你认为所有的函数都会给出相同的结果吗？\nbool predicate(String element) { return element.length \u0026gt; 5; } main() { var items = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;, \u0026#39;Lasagne\u0026#39;]; // You can find with a simple expression:  var element1 = items.firstWhere((element) =\u0026gt; element.length \u0026gt; 5); print(element1); // Or try using a function block:  var element2 = items.firstWhere((element) { return element.length \u0026gt; 5; }); print(element2); // Or even pass in a function reference:  var element3 = items.firstWhere(predicate); print(element3); // You can also use an `orElse` function in case no value is found!  var element4 = items.firstWhere( (element) =\u0026gt; element.length \u0026gt; 10, orElse: () =\u0026gt; \u0026#39;None!\u0026#39;, ); print(element4); } 在这个例子中，你可以看到三种不同的方式来写一个谓词。\n 作为一个表达式: 测试代码中有一行使用了箭头语法(=\u0026gt;)。 作为一个块: 测试代码在括号和返回语句之间有多行。 作为一个函数: 测试代码在一个外部函数中，作为参数传递给 firstWhere() 方法。  没有正确或错误的方式。使用最适合你的方式，并且让你的代码更容易阅读和理解。\n在这个例子中，firstWhereWithOrElse() 调用 firstWhere() 时，使用了可选的命名参数 orElse，它在没有找到元素时提供了一个替代方案。在这种情况下，返回文本 \u0026ldquo;None!\u0026quot;，因为没有元素满足提供的条件。\n注意：如果没有元素满足测试谓词，并且没有提供 orElse 参数，那么 firstWhere() 会抛出一个 StateError。\n快速回顾。\n Iterable 的元素必须按顺序访问。 迭代所有元素的最简单方法是使用 for-in 循环。 你可以使用 first 和 last getters 来获取第一个和最后一个元素。 你也可以用 firstWhere() 找到满足条件的第一个元素。 你可以把测试谓词写成表达式、块或函数。  关键术语。\n谓词: 当某个条件被满足时，返回 true 的函数。\n练习: 练习写一个测试谓词 下面的练习是一个失败的单元测试，其中包含一个部分完整的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 main()。\n这个练习介绍了 singleWhere() 这个方法的工作原理类似于 firstWhere()，但在这种情况下，它只期望 Iterable 中的一个元素满足谓词。如果 Iterable 中超过一个或没有元素满足谓词条件，那么该方法会抛出一个 StateError 异常。\nsingleWhere() 对整个 Iterable 进行步进，直到最后一个元素，如果 Iterable 是无限的或包含一个大的元素集合，这可能会引起问题。\n你的目标是实现满足以下条件的 singleWhere() 谓词。\n 元素包含字符 \u0026lsquo;a\u0026rsquo;。 该元素以字符 \u0026lsquo;M\u0026rsquo; 开头。  测试数据中的所有元素都是字符串，你可以查看类文档以获得帮助。\nString singleWhere(Iterable\u0026lt;String\u0026gt; items) { return items.singleWhere((element) =\u0026gt; element.startsWith(\u0026#39;M\u0026#39;) \u0026amp;\u0026amp; element.contains(\u0026#39;a\u0026#39;)); } 检查条件 在使用 Iterable 时，有时你需要验证一个集合的所有元素是否满足某些条件。\n你可能会想用 for-in 循环来写一个解决方案，比如这个:\nfor (var item in items) { if (item.length \u0026lt; 5) { return false; } } return true; 然而，你可以使用 every() 方法实现同样的目的:\nreturn items.every((element) =\u0026gt; element.length \u0026gt;= 5); 使用 every() 方法可以使代码更易读、更紧凑、更不容易出错。\n例子: 使用 any() 和 every() Iterable 类提供了两个可以用来验证条件的方法。\n any(): 如果至少有一个元素满足条件，则返回 true。 every(): 如果所有元素都满足条件，则返回 true。  运行这个练习来看看它们的作用。\nvoid main() { var items = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; if (items.any((element) =\u0026gt; element.contains(\u0026#39;a\u0026#39;))) { print(\u0026#39;At least one element contains \u0026#34;a\u0026#34;\u0026#39;); } if (items.every((element) =\u0026gt; element.length \u0026gt;= 5)) { print(\u0026#39;All elements have length \u0026gt;= 5\u0026#39;); } } 在这个例子中，any() 验证了至少一个元素包含字符 a，every() 验证了所有元素的长度等于或大于 5。\n运行代码后，尝试更改 any() 的谓词，使其返回 false:\nif (items.any((element) =\u0026gt; element.contains(\u0026#39;Z\u0026#39;))) { print(\u0026#39;At least one element contains \u0026#34;Z\u0026#34;\u0026#39;); } else { print(\u0026#39;No element contains \u0026#34;Z\u0026#34;\u0026#39;); } 你也可以使用 any() 来验证一个 Iterable 中没有元素满足某个条件。\n练习： 验证一个 Iterable 是否满足一个条件 下面的练习提供了使用前面例子中描述的 any() 和 every() 方法的练习。在本例中，你的工作对象是一组用户，由具有成员字段 age 的 User 对象表示。\n使用 any() 和 every() 实现两个函数。\n 第1部分：实现 anyUserUnder18()。  如果至少有一个用户是17岁或更小，则返回 true。   第2部分：实现 everyUserOver13()。  如果所有用户都是14岁或以上，则返回 true。    bool anyUserUnder18(Iterable\u0026lt;User\u0026gt; users) { return users.any((user) =\u0026gt; user.age \u0026lt; 18); } bool everyUserOver13(Iterable\u0026lt;User\u0026gt; users) { return users.every((user) =\u0026gt; user.age \u0026gt; 13); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n 虽然你可以使用 for-in 循环来检查条件，但还有更好的方法。 方法 any() 可以让你检查任何元素是否满足条件。 方法 every() 可以让你验证所有元素是否满足条件。  过滤 前面的章节介绍了 firstWhere() 或 singleWhere() 等方法，这些方法可以帮助你找到满足某个谓词的元素。\n但是如果你想找到满足某个条件的所有元素呢？你可以使用 where() 方法来实现。\nvar evenNumbers = numbers.where((number) =\u0026gt; number.isEven); 在这个例子中，numbers 包含一个有多个 int 值的 Iterable，where() 可以找到所有偶数的数字。\nwhere() 的输出是另一个 Iterable，你可以用它来迭代它或应用其他 Iterable 方法。在下一个例子中，where() 的输出直接在 for-in 循环中使用。\nvar evenNumbers = numbers.where((number) =\u0026gt; number.isEven); for (var number in evenNumbers) { print(\u0026#39;$numberis even\u0026#39;); } 例子: 使用 where() 运行这个例子，看看如何将 where() 与其他方法如 any() 一起使用。\nmain() { var evenNumbers = [1, -2, 3, 42].where((number) =\u0026gt; number.isEven); for (var number in evenNumbers) { print(\u0026#39;$numberis even.\u0026#39;); } if (evenNumbers.any((number) =\u0026gt; number.isNegative)) { print(\u0026#39;evenNumbers contains negative numbers.\u0026#39;); } // If no element satisfies the predicate, the output is empty.  var largeNumbers = evenNumbers.where((number) =\u0026gt; number \u0026gt; 1000); if (largeNumbers.isEmpty) { print(\u0026#39;largeNumbers is empty!\u0026#39;); } } 在这个例子中，where() 用于查找所有偶数，然后用 any() 检查结果是否包含负数。\n在本例的后面，再次使用 where() 来查找所有大于1000的数字，由于没有，结果是一个空的 Iterable。\n注意：如果没有元素满足 where() 中的谓词，那么该方法返回一个空的 Iterable。与 singleWhere() 或 firstWhere() 不同，where() 不会抛出 StateError 异常。\n例子: 使用 takeWhile 方法 takeWhile() 和 skipWhile() 也可以帮助你从一个 Iterable 中过滤元素。\n运行这个例子，看看 takeWhile() 和 skipWhile() 如何分割一个包含数字的 Iterable。\nmain() { var numbers = [1, 3, -2, 0, 4, 5]; var numbersUntilZero = numbers.takeWhile((number) =\u0026gt; number != 0); print(\u0026#39;Numbers until 0: $numbersUntilZero\u0026#39;); var numbersAfterZero = numbers.skipWhile((number) =\u0026gt; number != 0); print(\u0026#39;Numbers after 0: $numbersAfterZero\u0026#39;); } 输出如下:\nNumbers until 0: (1, 3, -2) Numbers after 0: (0, 4, 5) 在这个例子中，takeWhile() 返回一个 Iterable，它包含了通往满足谓词的元素的所有元素。另一方面， skipWhile() 返回一个 Iterable，同时跳过满足谓词的元素之前的所有元素。请注意，满足谓词的元素也会被包含在内。\n运行该示例后，将 takeWhile() 改为取元素，直到到达第一个负数。\nvar numbersUntilNegative = numbers.takeWhile((number) =\u0026gt; !number.isNegative); 注意，条件 number.isNegative 是用 ! 否定的。\n练习: 从列表中过滤元素 下面的练习提供了使用上一练习中的 User 类的 where() 方法的练习。\n使用 where() 实现两个函数。\n 第1部分：实现 filterUnder21()。  返回一个包含所有21岁以上用户的 Iterable。   第2部分：实现 findShortNamed()。  返回一个包含所有名字长度为 3 或更少的用户的 Iterable。    Iterable\u0026lt;User\u0026gt; filterUnder21(Iterable\u0026lt;User\u0026gt; users) { return users.where((user) =\u0026gt; user.age \u0026gt;= 21); } Iterable\u0026lt;User\u0026gt; findShortNamed(Iterable\u0026lt;User\u0026gt; users) { return users.where((user) =\u0026gt; user.name.length \u0026lt;= 3); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n 用 where() 过滤一个 Iterable 的元素。 where() 的输出是另一个 Iterable。 使用 takeWhile() 和 skipWhile() 来获取元素，直到满足一个条件或之后。 这些方法的输出可以是一个空的 Iterable。  Map 通过 map() 方法映射 Iterables，你可以在每个元素上应用一个函数，用一个新的元素替换每个元素。\nIterable\u0026lt;int\u0026gt; output = numbers.map((number) =\u0026gt; number * 10); 在这个例子中，Iterable 数字的每个元素都被乘以 10。\n你也可以使用 map() 将一个元素转换为不同的对象-例如，将所有 int 转换为 String，在下面的例子中可以看到。\nIterable\u0026lt;String\u0026gt; output = numbers.map((number) =\u0026gt; number.toString()); 注意：map() 返回一个懒惰的 Iterable，这意味着只有在元素被迭代时才会调用所提供的函数。\n例子: 使用 map 改变元素 运行这个例子，看看如何使用 map() 将一个 Iterable 中的所有元素乘以2，你认为输出会是什么？\nmain() { var numbersByTwo = [1, -2, 3, 42].map((number) =\u0026gt; number * 2); print(\u0026#39;Numbers: $numbersByTwo.\u0026#39;); } 练习: 映射到不同类型 在前面的例子中，你把一个 Iterable 的元素乘以2，输入和输出都是 int 的 Iterable。\n在这个练习中，你的代码接收一个 User的 Iterable，你需要返回一个包含用户名和年龄的字符串的 Iterable。\nIterable 中的每个字符串必须遵循这样的格式。'{name} is {age}'-例如 'Alice is 21'。\nIterable\u0026lt;String\u0026gt; getNameAndAges(Iterable\u0026lt;User\u0026gt; users) { return users.map((user) =\u0026gt; \u0026#39;${user.name}is ${user.age}\u0026#39;); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n map() 将一个函数应用于一个 Iterable 的所有元素。 map() 的输出是另一个 Iterable。 在 Iterable 被迭代之前，函数不会被计算。  练习: 把所有的东西放在一起 现在是练习所学知识的时候了，在最后一个练习中。\n这个练习提供了类 EmailAddress，它有一个构造函数，接收一个字符串。另一个提供的函数是 isValidEmailAddress()，它测试一个电子邮件地址是否有效。\n   构造函数/函数 类型签名 描述     EmailAddress() EmailAddress(String address) 为指定的地址创建一个 EmailAddress。   isValidEmailAddress() bool isValidEmailAddress(EmailAddress) 如果提供的 EmailAddress 有效，返回 true。    编写以下代码。\n第1部分：实现 parseEmailAddresses()。\n 编写函数 parseEmailAddresses()，它接收一个包含电子邮件地址的 Iterable\u0026lt;String\u0026gt;，并返回一个 Iterable\u0026lt;EmailAddress\u0026gt;。 使用方法 map() 从 String 映射到 EmailAddress。 使用构造函数 EmailAddress(String) 创建 EmailAddress 对象。  第二部分：实现 anyInvalidEmailAddress()。\n 编写函数 anyInvalidEmailAddress()，它接收一个 Iterable\u0026lt;EmailAddress\u0026gt;，并在 Iterable 中的任何 EmailAddress 无效时返回 true。 使用方法 any() 和提供的函 isValidEmailAddress()。  第3部分：实现 validEmailAddresses()。\n 编写函数 validEmailAddresses()，它接收一个 Iterable\u0026lt;EmailAddress\u0026gt; 并返回另一个只包含有效地址的 Iterable\u0026lt;EmailAddress\u0026gt;。 使用方法 where() 来过滤 Iterable\u0026lt;EmailAddress\u0026gt;。 使用提供的函数 isValidEmailAddress() 来评估一个 EmailAddress 是否有效。  Iterable\u0026lt;EmailAddress\u0026gt; parseEmailAddresses(Iterable\u0026lt;String\u0026gt; strings) { return strings.map((s) =\u0026gt; EmailAddress(s)); } bool anyInvalidEmailAddress(Iterable\u0026lt;EmailAddress\u0026gt; emails) { return emails.any((email) =\u0026gt; !isValidEmailAddress(email)); } Iterable\u0026lt;EmailAddress\u0026gt; validEmailAddresses(Iterable\u0026lt;EmailAddress\u0026gt; emails) { return emails.where((email) =\u0026gt; isValidEmailAddress(email)); } class EmailAddress { String address; EmailAddress(this.address); @override bool operator ==(Object other) =\u0026gt; identical(this, other) || other is EmailAddress \u0026amp;\u0026amp; runtimeType == other.runtimeType \u0026amp;\u0026amp; address == other.address; @override int get hashCode =\u0026gt; address.hashCode; @override String toString() { return \u0026#39;EmailAddress{address: $address}\u0026#39;; } } 下一步是什么? 恭喜你，你完成了 codelab 的学习! 如果你想了解更多，这里有一些下一步的建议。\n 玩玩 DartPad。 试试另一个代码实验。 阅读 Iterable API 参考资料，了解本 codelab 未涉及的方法。  "},"name":"Dart 可迭代集合","published":"2020-06-25T00:00:00Z","summary":"Dart可迭代集合。","type":"entry","url":"https://ohmyweekly.github.io/notes/dart-iterable-collections/"}],"name":"collection","type":"feed","url":"https://ohmyweekly.github.io/tags/collection/"}