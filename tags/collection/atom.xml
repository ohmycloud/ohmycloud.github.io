<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.63.2">Hugo</generator><title type="html"><![CDATA[collection on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/collection/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/collection/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/collection/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/collection/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2020-06-25T22:33:43+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/collection/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Dart 可迭代集合]]></title>
            <link href="https://ohmyweekly.github.io/notes/dart-iterable-collections/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/dart/?utm_source=atom_feed" rel="related" type="text/html" title="Dart 入门" />
                <link href="https://ohmyweekly.github.io/notes/dart-cheatsheet-codelab/?utm_source=atom_feed" rel="related" type="text/html" title="Dart 语言速查表" />
            
                <id>https://ohmyweekly.github.io/notes/dart-iterable-collections/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-06-25T00:00:00+08:00</published>
            <updated>2020-06-25T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote><a href="https://dart.dev/codelabs/iterables">Dart</a>可迭代集合。</blockquote><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>这个代码实验室教你如何使用实现 <a href="https://api.dart.dev/stable/dart-core/Iterable-class.html">Iterable</a>类的集合-例如 <a href="https://api.dart.dev/stable/dart-core/List-class.html">List</a>和 <a href="https://api.dart.dev/stable/dart-core/Set-class.html">Set</a>。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。</p>
<p>使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。</p>
<p>要想从这个 codelab 中获得最大的收获，你应该具备基本的 <a href="https://dart.dev/samples">Dart 语法知识</a>。</p>
<p>本课程包括以下内容。</p>
<ul>
<li>如何读取一个 Iterable 的元素。</li>
<li>如何检查一个 Iterable 的元素是否满足一个条件。</li>
<li>如何过滤一个 Iterable 的内容。</li>
<li>如何将一个 Iterable 的内容映射到不同的值。</li>
</ul>
<p>估计完成这个代码实验所需的时间: 60分钟。</p>
<h2 id="什么是集合">什么是集合?</h2>
<p>集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。</p>
<p>集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:</p>
<ul>
<li><a href="https://api.dart.dev/stable/dart-core/List-class.html">List</a>: 用来通过索引读取元素。</li>
<li><a href="https://api.dart.dev/stable/dart-core/Set-class.html">Set</a>: 用于包含只能出现一次的元素。</li>
<li><a href="https://api.dart.dev/stable/dart-core/Map-class.html">Map</a>：用于通过键来读取元素。</li>
</ul>
<h2 id="什么是iterable">什么是Iterable?</h2>
<p><code>Iterable</code> 是一个元素的集合，它可以被依次访问。</p>
<p>在 Dart 中，<code>Iterable</code> 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 <code>List</code> 或 <code>Set</code> 来创建一个新的 <code>Iterable</code>。</p>
<p><code>List</code> 和 <code>Set</code> 都是 <code>Iterable</code>，所以它们和 <code>Iterable</code> 类有相同的方法和属性。</p>
<p><code>Map</code> 在内部使用不同的数据结构，这取决于它的实现。例如，<a href="https://api.dart.dev/stable/dart-collection/HashMap-class.html">HashMap</a> 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 <code>Map</code> 的 <code>entries</code> 或 <code>values</code> 属性，<code>Map</code> 的元素也可以作为 <code>Iterable</code> 对象读取。</p>
<p>这个例子显示了一个 <code>int</code> 的 <code>List</code>，它也是一个 <code>int</code> 的 <code>Iterable</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">Iterable</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">iterable</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">]</span><span class="p">;</span>
</code></pre></div><p>与 <code>List</code> 的区别在于，使用 <code>Iterable</code>，你无法保证按索引读取元素的效率。<code>Iterable</code> 与 <code>List</code> 相比，没有 <code>[]</code> 操作符。</p>
<p>例如，考虑以下代码，这是<strong>无效的</strong>:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">Iterable</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">iterable</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">]</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">iterable</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="p">;</span>
</code></pre></div><p>如果你用 <code>[]</code> 读取元素，编译器会告诉你 <code>'[]'</code> 这个运算符没有为 <code>Iterable</code> 类定义，这意味着在这种情况下你不能使用 <code>[index]</code>。</p>
<p>你可以用 <code>elementAt()</code> 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">Iterable</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">iterable</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">]</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">iterable</span><span class="p">.</span><span class="n">elementAt</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>继续下一节，了解更多关于如何访问 <code>Iterable</code> 的元素。</p>
<h2 id="读取元素">读取元素</h2>
<p>你可以使用 <code>for-in</code> 循环，依次读取一个迭代元素。</p>
<h3 id="例子-使用-for-in-循环">例子: 使用 for-in 循环</h3>
<p>下面的例子展示了如何使用 <code>for-in</code> 循环读取元素。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="n">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="n">iterable</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;</span><span class="s1">Salad</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">Popcorn</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">Toast</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="n">element</span> <span class="k">in</span> <span class="n">iterable</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">print</span><span class="p">(</span><span class="n">element</span><span class="p">)</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>在幕后，<code>for-in</code> 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 <code>for-in</code> 更容易阅读和理解，而且不容易出错。</p>
<p>关键术语:</p>
<ul>
<li><strong>Iterable</strong>: Dart <a href="https://api.dart.dev/stable/dart-core/Iterable-class.html">Iterable</a> 类。</li>
<li><strong>Iterator</strong>: <code>for-in</code> 用来从一个 Iterable 对象中读取元素的对象。</li>
<li><code>for-in</code> 循环: 从一个 Iterable 对象中依次读取元素的简单方法。</li>
</ul>
<h3 id="例子使用第一个和最后一个元素">例子：使用第一个和最后一个元素</h3>
<p>在某些情况下，你只想访问一个 <code>Iterable</code> 的第一个或最后一个元素。</p>
<p>在 <code>Iterable</code> 类中，你不能直接访问元素，所以你不能调用 <code>iterable[0]</code> 来访问第一个元素。相反，你可以使用 <code>first</code>，它可以获取第一个元素。</p>
<p>另外，使用 Iterable 类，你不能使用操作符 <code>[]</code> 来访问最后一个元素，但是你可以使用 <code>last</code> 属性。</p>
<p>因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 <code>last</code> 可能会很慢。在一个空的 <code>Iterable</code> 上使用 <code>first</code> 或 <code>last</code> 会导致一个 <a href="https://api.dart.dev/stable/dart-core/StateError-class.html">StateError</a>。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="n">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Iterable</span> <span class="n">iterable</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;</span><span class="s1">Salad</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">Popcorn</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">Toast</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">;</span>
  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">The first element is </span><span class="si">${</span><span class="n">iterable</span><span class="p">.</span><span class="n">first</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">The last element is </span><span class="si">${</span><span class="n">iterable</span><span class="p">.</span><span class="n">last</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/programming" term="programming" label="programming" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/iterable" term="iterable" label="iterable" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/collection" term="collection" label="collection" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/dart" term="dart" label="dart" />
                            
                        
                    
                
            
        </entry>
    
</feed>
