<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    collection on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/tags/collection/</link>
        <description>Recent content  in collection
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Thu, 25 Jun 2020 23:04:02 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/tags/collection/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>Dart 可迭代集合</title>
                <link>https://ohmyweekly.github.io/notes/dart-iterable-collections/</link>
                
                
                <description>&lt;blockquote&gt;&lt;a href=&#34;https://dart.dev/codelabs/iterables&#34;&gt;Dart&lt;/a&gt;可迭代集合。&lt;/blockquote&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;这个代码实验室教你如何使用实现 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/Iterable-class.html&#34;&gt;Iterable&lt;/a&gt;类的集合-例如 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/List-class.html&#34;&gt;List&lt;/a&gt;和 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/Set-class.html&#34;&gt;Set&lt;/a&gt;。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。&lt;/p&gt;
&lt;p&gt;使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。&lt;/p&gt;
&lt;p&gt;要想从这个 codelab 中获得最大的收获，你应该具备基本的 &lt;a href=&#34;https://dart.dev/samples&#34;&gt;Dart 语法知识&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本课程包括以下内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何读取一个 Iterable 的元素。&lt;/li&gt;
&lt;li&gt;如何检查一个 Iterable 的元素是否满足一个条件。&lt;/li&gt;
&lt;li&gt;如何过滤一个 Iterable 的内容。&lt;/li&gt;
&lt;li&gt;如何将一个 Iterable 的内容映射到不同的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;估计完成这个代码实验所需的时间: 60分钟。&lt;/p&gt;
&lt;h2 id=&#34;什么是集合&#34;&gt;什么是集合?&lt;/h2&gt;
&lt;p&gt;集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。&lt;/p&gt;
&lt;p&gt;集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-core/List-class.html&#34;&gt;List&lt;/a&gt;: 用来通过索引读取元素。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-core/Set-class.html&#34;&gt;Set&lt;/a&gt;: 用于包含只能出现一次的元素。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-core/Map-class.html&#34;&gt;Map&lt;/a&gt;：用于通过键来读取元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是iterable&#34;&gt;什么是Iterable?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Iterable&lt;/code&gt; 是一个元素的集合，它可以被依次访问。&lt;/p&gt;
&lt;p&gt;在 Dart 中，&lt;code&gt;Iterable&lt;/code&gt; 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 &lt;code&gt;List&lt;/code&gt; 或 &lt;code&gt;Set&lt;/code&gt; 来创建一个新的 &lt;code&gt;Iterable&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt; 和 &lt;code&gt;Set&lt;/code&gt; 都是 &lt;code&gt;Iterable&lt;/code&gt;，所以它们和 &lt;code&gt;Iterable&lt;/code&gt; 类有相同的方法和属性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Map&lt;/code&gt; 在内部使用不同的数据结构，这取决于它的实现。例如，&lt;a href=&#34;https://api.dart.dev/stable/dart-collection/HashMap-class.html&#34;&gt;HashMap&lt;/a&gt; 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 &lt;code&gt;Map&lt;/code&gt; 的 &lt;code&gt;entries&lt;/code&gt; 或 &lt;code&gt;values&lt;/code&gt; 属性，&lt;code&gt;Map&lt;/code&gt; 的元素也可以作为 &lt;code&gt;Iterable&lt;/code&gt; 对象读取。&lt;/p&gt;
&lt;p&gt;这个例子显示了一个 &lt;code&gt;int&lt;/code&gt; 的 &lt;code&gt;List&lt;/code&gt;，它也是一个 &lt;code&gt;int&lt;/code&gt; 的 &lt;code&gt;Iterable&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与 &lt;code&gt;List&lt;/code&gt; 的区别在于，使用 &lt;code&gt;Iterable&lt;/code&gt;，你无法保证按索引读取元素的效率。&lt;code&gt;Iterable&lt;/code&gt; 与 &lt;code&gt;List&lt;/code&gt; 相比，没有 &lt;code&gt;[]&lt;/code&gt; 操作符。&lt;/p&gt;
&lt;p&gt;例如，考虑以下代码，这是&lt;strong&gt;无效的&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你用 &lt;code&gt;[]&lt;/code&gt; 读取元素，编译器会告诉你 &lt;code&gt;&#39;[]&#39;&lt;/code&gt; 这个运算符没有为 &lt;code&gt;Iterable&lt;/code&gt; 类定义，这意味着在这种情况下你不能使用 &lt;code&gt;[index]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;你可以用 &lt;code&gt;elementAt()&lt;/code&gt; 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elementAt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;继续下一节，了解更多关于如何访问 &lt;code&gt;Iterable&lt;/code&gt; 的元素。&lt;/p&gt;
&lt;h2 id=&#34;读取元素&#34;&gt;读取元素&lt;/h2&gt;
&lt;p&gt;你可以使用 &lt;code&gt;for-in&lt;/code&gt; 循环，依次读取一个迭代元素。&lt;/p&gt;
&lt;h3 id=&#34;例子-使用-for-in-循环&#34;&gt;例子: 使用 for-in 循环&lt;/h3&gt;
&lt;p&gt;下面的例子展示了如何使用 &lt;code&gt;for-in&lt;/code&gt; 循环读取元素。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Salad&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Popcorn&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Toast&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在幕后，&lt;code&gt;for-in&lt;/code&gt; 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 &lt;code&gt;for-in&lt;/code&gt; 更容易阅读和理解，而且不容易出错。&lt;/p&gt;
&lt;p&gt;关键术语:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Iterable&lt;/strong&gt;: Dart &lt;a href=&#34;https://api.dart.dev/stable/dart-core/Iterable-class.html&#34;&gt;Iterable&lt;/a&gt; 类。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iterator&lt;/strong&gt;: &lt;code&gt;for-in&lt;/code&gt; 用来从一个 Iterable 对象中读取元素的对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for-in&lt;/code&gt; 循环: 从一个 Iterable 对象中依次读取元素的简单方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;例子使用第一个和最后一个元素&#34;&gt;例子：使用第一个和最后一个元素&lt;/h3&gt;
&lt;p&gt;在某些情况下，你只想访问一个 &lt;code&gt;Iterable&lt;/code&gt; 的第一个或最后一个元素。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Iterable&lt;/code&gt; 类中，你不能直接访问元素，所以你不能调用 &lt;code&gt;iterable[0]&lt;/code&gt; 来访问第一个元素。相反，你可以使用 &lt;code&gt;first&lt;/code&gt;，它可以获取第一个元素。&lt;/p&gt;
&lt;p&gt;另外，使用 Iterable 类，你不能使用操作符 &lt;code&gt;[]&lt;/code&gt; 来访问最后一个元素，但是你可以使用 &lt;code&gt;last&lt;/code&gt; 属性。&lt;/p&gt;
&lt;p&gt;因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 &lt;code&gt;last&lt;/code&gt; 可能会很慢。在一个空的 &lt;code&gt;Iterable&lt;/code&gt; 上使用 &lt;code&gt;first&lt;/code&gt; 或 &lt;code&gt;last&lt;/code&gt; 会导致一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/StateError-class.html&#34;&gt;StateError&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Salad&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Popcorn&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Toast&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;The first element is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;The last element is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/iterable">iterable</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/collection">collection</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/dart">dart</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/dart-iterable-collections/</guid>
                <pubDate>Thu, 25 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
    </channel>
</rss>


