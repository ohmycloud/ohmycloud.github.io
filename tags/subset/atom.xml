<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[subset on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/subset/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/subset/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/subset/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/subset/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-15T22:25:29+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/subset/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Raku Types]]></title>
            <link href="https://ohmyweekly.github.io/notes/2016-08-02-raku-types/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2015-03-19-subset/?utm_source=atom_feed" rel="related" type="text/html" title="Subset" />
            
                <id>https://ohmyweekly.github.io/notes/2016-08-02-raku-types/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-15T00:00:00+08:00</published>
            <updated>2021-07-15T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Raku Types</blockquote><h1 id="raku-types-成人之美">Raku Types: 成人之美</h1>
<p>在我的第一次大学编程语言课中, 我被告知 Pascal 语言在其它类型之外还拥有 <strong>Integer</strong>、<strong>Boolen</strong> 和 <strong>Stirng</strong> 类型。我知道了类型本来就该存在因为计算机很笨。当我在 C 语言中涉猎的时候, 我学到了更多有关 <em>int</em>、 <em>char</em> 和其它像在暖和的地方里地寄生虫, 还有我课桌底下嗡嗡的金属盒的声音。</p>
<p>Perl 5 没有类型, 它给我的感觉就像骑着自行车无拘无束的追风少年, 沿着斜坡而下。不久之后我一门心思钻到计算机硬件的缝隙中。我拥有数据并且我能用它做任何我想做的事, 只要我得到的不是错误的数据。当我搞定的时候, 我从自行车上掉了下来并刮破了我的膝盖。</p>
<p>有了 Raku, 鱼和熊掌可以兼得。你可以使用类型来避免它们。你可以拥有一个广域的类型来接收很多种类的值或窄类型。并且你可以享受代表机器智力的类型的速度, 或者你可以享受你自定义的代表你自己意志的类型的精度, 类型为人类而生。</p>
<h2 id="渐进类型">渐进类型</h2>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span>       <span class="nv">$a</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">whatever</span><span class="p">&#34;;</span>
<span class="k">my</span> <span class="nb">Str</span>   <span class="nv">$b</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">strings only</span><span class="p">&#34;;</span>
<span class="k">my</span> <span class="nb">Str:D</span> <span class="nv">$c</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">defined strings only</span><span class="p">&#34;;</span>
<span class="k">my</span> <span class="nb">int</span>   <span class="nv">$d</span> <span class="o">=</span> <span class="mi">14</span><span class="p">;</span> <span class="c1"># native int</span>

<span class="k">sub</span> <span class="nf">foo</span> <span class="p">(</span><span class="nv">$x</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$x</span> <span class="o">+</span> <span class="mi">2</span> <span class="p">}</span>
<span class="k">sub</span> <span class="nf">bar</span> <span class="p">(</span><span class="nb">Int:D</span> <span class="nv">$x</span><span class="p">)</span> <span class="k">returns</span> <span class="nb">Int</span> <span class="p">{</span> <span class="nv">$x</span> <span class="o">+</span> <span class="mi">2</span> <span class="p">}</span>
</code></pre></div><p>Raku 拥有渐进类型, 这意味着你要么可以使用它们, 要么避免使用它们。所以究竟为什么要打扰它们呢？</p>
<p>首先, 类型约束了你的变量中能包含的, 你的方法或子例程接受的或返回的值的范围。这个函数即作为数据校验又作为安全网以过滤掉不正确代码所生成的垃圾数据。</p>
<p>还有, 当使用原生的, 机器意志的类型的时候, 你可以获得更好地性能并减少内存使用, 假如它们对于你得数据来说是合适的工具的话。</p>
<h2 id="内置类型">内置类型</h2>
<p>有一个名副其实的自助式的 <a href="http://docs.raku.org/type.html">Raku 中得内置类型</a>。如果你的子例程只对整数有意义, 那么为你的参数使用 <strong>Int</strong> 类型。如果负数没有意义, 那么使用 <strong>UInt</strong> - 一个无符号的 <strong>Int</strong> 来进一步限制值的范围。另一方面, 如果你想处理一个较广的范围, 那么 <strong>Numeric</strong> 类型可能更合适。</p>
<p>如果你想一探究竟, Raku 也提供了一系列的映射到你常常见到的, 例如 C 语言中的原生类型。使用这些原生类型可能会提供性能提升或内存使用的减少。可用的原生类型有：int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, num, num32, num64。类型名字中的数字表示可得的字节, 不含数字的类型是平台无关的。</p>
<p>诸如 int1, int2 和 int4 的子字节类型也计划在未来实现。</p>
<h2 id="笑脸符号">笑脸符号</h2>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">multi</span> <span class="nf">foo</span> <span class="p">(</span><span class="nb">Int:U</span> <span class="nv">$x</span><span class="p">)</span> <span class="p">{</span> <span class="p">&#39;</span><span class="s1">Y U NO define $x?</span><span class="p">&#39;</span>         <span class="p">}</span>
<span class="k">multi</span> <span class="nf">foo</span> <span class="p">(</span><span class="nb">Int:D</span> <span class="nv">$x</span><span class="p">)</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">The Square of </span><span class="nv">$x</span><span class="s2"> is </span><span class="p">{</span><span class="nv">$x</span>²<span class="p">}&#34;</span> <span class="p">}</span>

<span class="k">my</span> <span class="nb">Int</span> <span class="nv">$x</span><span class="p">;</span>
<span class="nb">say</span> <span class="n">foo</span> <span class="nv">$x</span><span class="p">;</span>
<span class="nv">$x</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="nb">say</span> <span class="n">foo</span> <span class="nv">$x</span><span class="p">;</span>

<span class="c1"># OUTPUT:</span>
<span class="c1"># Y U NO define $x?</span>
<span class="c1"># The square of 42 is 1764</span>
</code></pre></div><p>笑脸符号是追加在类型名后面的 <em><code>:U</code></em>、<em><code>:D</code></em> 或 <code>:_</code>。在你没有指定笑脸符号的时候, <code>:_</code> 是你获得的默认笑脸符号。<em><code>:U</code></em> 只指定未定义(undefined)值, 而 <code>:D</code> 只指定定义(defined)值。</p>
<p>通过在调用者身上使用两个带有 <em><code>:U</code></em> 和 <em><code>:D</code></em> 的 multis, 我们能知道方法是在类上调用的还是在实例上调用的。如果你在核动力装置上工作, 确保你的鲁棒插入子例程绝对不会插入任何未定义的量也是一件好事情, 我想。</p>
<h2 id="subsets定制的类型">Subsets：定制的类型</h2>
<p>内置的类型很酷, 但是程序员工作的大部分数据没有精确地匹配。这就是 Raku subsets 进场的时候了。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">subset</span> <span class="nc">Prime</span> <span class="k">of</span> <span class="nb">Int</span> <span class="k">where</span> <span class="o">*.</span><span class="nb">is-prime</span><span class="p">;</span>
<span class="k">my</span> <span class="n">Prime</span> <span class="nv">$x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="nv">$x</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span> <span class="c1"># works</span>
<span class="nv">$x</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>  <span class="c1"># 失败, 类型不匹配。</span>
</code></pre></div><p>使用 <em>subset</em> 关键字, 我们就地创建了一个叫做 <strong>Prime</strong> 的类型。它是 <strong>Int</strong> 类型的一个子集(subset), 所以任何非 Int 数不匹配这个类型。我们还使用 <em>where</em> 关键字指定了一个额外的约束；那个约束是在给定值身上调用的 <em>.is-prime</em> 方法必须返回一个 true 值。</p>
<p>使用那个单行代码, 我们创建了一个特定的类型并可以像内置类型那样使用它！我们不仅可以用它来指定变量的类型、子例程/方法的参数类型和返回值类型, 我们还能使用智能匹配操作符来测试任意值, 就像我们在内置类型中做得那样：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">subset</span> <span class="nc">Prime</span> <span class="k">of</span> <span class="nb">Int</span> <span class="k">where</span> <span class="o">*.</span><span class="nb">is-prime</span><span class="p">;</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">It is an Int</span><span class="p">&#34;</span> <span class="k">if</span> <span class="p">&#39;</span><span class="s1">foo</span><span class="p">&#39;</span> <span class="o">~~</span> <span class="nb">Int</span><span class="p">;</span>   <span class="c1"># false, it&#39;s a Str</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">It&#39;s a prime</span><span class="p">&#34;</span> <span class="k">if</span> <span class="mi">31337</span> <span class="o">~~</span> <span class="n">Prime</span><span class="p">;</span> <span class="c1"># true, it&#39;s a prime number</span>
</code></pre></div><p>如果你的类型是一次性的东西, 你只想把它应用到单个变量上呢？你一点也不必单独声明一个 subset！就在变量后面使用 <em>where</em> 关键字好了, 你很好的：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">multi</span> <span class="nf">is-a-prime</span> <span class="p">(</span> <span class="nb">Int</span> <span class="nv">$</span> <span class="k">where</span> <span class="o">*.</span><span class="nb">is-prime</span> <span class="k">--&gt;</span> <span class="p">&#39;</span><span class="s1">Yup</span><span class="p">&#39;</span> <span class="p">)</span> <span class="p">{}</span>
<span class="k">multi</span> <span class="nf">is-a-prime</span> <span class="p">(</span> <span class="nb">Any</span>                    <span class="k">--&gt;</span> <span class="p">&#39;</span><span class="s1">Nope</span><span class="p">&#39;)</span> <span class="p">{}</span>

<span class="nb">say</span> <span class="n">is-a-prime</span> <span class="mi">3</span><span class="p">;</span>     <span class="c1"># Yup</span>
<span class="nb">say</span> <span class="n">is-a-prime</span> <span class="mi">4</span><span class="p">;</span>     <span class="c1"># Nope</span>
<span class="nb">say</span> <span class="n">is-a-prime</span> <span class="p">&#39;</span><span class="s1">foo</span><span class="p">&#39;;</span> <span class="c1"># Nope</span>
</code></pre></div><p>上面的签名中的 <strong><code>--&gt;</code></strong> 是表示返回值类型的另外一种方式, 或者在这种情况下, 是一种具体的返回值。所以我们拥有了两个含有不同签名的 multies。第一个接收一个 <strong>Int</strong> 类型的质数, 第二个接受剩下的任何东西。我们的 multies 函数体中没有任何代码, 就写了一个子例程告诉你一个数字是否是质数！</p>
<h2 id="打包重用">打包重用</h2>
<p>目前为止我们学到的很酷, 但是酷不是 awesome！你可能会很频繁地使用某些你自定义的类型。在厂里面工作, 产品号至多有20个字符, 以某种格式？非常好！我们为它创建一个子类型：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">subset</span> <span class="nc">ProductNumber</span> <span class="k">of</span> <span class="nb">Str</span> <span class="k">where</span> <span class="p">{</span> <span class="o">.</span><span class="nb">chars</span> <span class="o">&lt;=</span><span class="mi">20</span> <span class="ow">and</span> <span class="k">m</span><span class="p">/</span><span class="ni">^</span><span class="sr"> </span><span class="se">\d</span><span class="o">**</span><span class="mi">3</span><span class="sr"> </span><span class="p">&lt;[</span><span class="sr">-#</span><span class="p">]&gt;</span><span class="sr"> </span><span class="p">/</span> <span class="p">};</span>
<span class="k">my</span> <span class="n">ProductNumber</span> <span class="nv">$num</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">333-FOOBAR</span><span class="p">&#39;;</span>
</code></pre></div><p>这好极了, 但是我们不想在所有的地方都重复这个 subset。我们来把它推到一个单独的模块中。我会创建 <code>/opt/local/Raku/Company/Types.pm6</code> 因为 <code>/opt/local/Raku</code> 是包含在我为这个虚构的厂所写的所有 apps 中的模块搜索路径中的路径。在这个文件中, 我会有下面的代码：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">unit</span> <span class="k">module</span> <span class="nn">Company::Types</span><span class="p">;</span>

<span class="k">my</span> <span class="nb">package</span> <span class="nn">EXPORT::DEFAULT</span> <span class="p">{</span>
    <span class="k">subset</span> <span class="nc">ProductNumber</span> <span class="k">of</span> <span class="nb">Str</span> <span class="k">where</span> <span class="p">{</span> <span class="o">.</span><span class="nb">chars</span> <span class="o">&lt;=</span><span class="mi">20</span> <span class="ow">and</span> <span class="k">m</span><span class="p">/</span><span class="ni">^</span><span class="sr"> </span><span class="se">\d</span><span class="o">**</span><span class="mi">3</span><span class="sr"> </span><span class="p">&lt;[</span><span class="sr">-#</span><span class="p">]&gt;</span><span class="sr"> </span><span class="p">/</span> <span class="p">};</span>
<span class="p">}</span>
</code></pre></div><p>我们给我们的模块起了一个名字并默认导出我们可爱的 subsets。我们的代码看起来怎么样了？它看起来酷毙了 - 不, 等等, AWESOME - 这一次：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">use</span> <span class="nn">Company::Types</span><span class="p">;</span>

<span class="k">my</span> <span class="n">ProductNumber</span> <span class="nv">$num1</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">333-FOOBAR</span><span class="p">&#39;;</span> <span class="c1"># succeeds</span>
<span class="k">my</span> <span class="n">ProductNumber</span> <span class="nv">$num2</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">meow</span><span class="p">&#39;;</span>       <span class="c1"># fails</span>
</code></pre></div><p>这样, 我们使用单个 use 语句扩展了 Raku 以为我们提供定制的类型, 它精确地匹配了我们想要的数据成为什么样子。</p>
<h2 id="awesome-error-messages-for-subsets">Awesome Error Messages for Subsets</h2>
<p>如果你尝试过所有这些例子, 你可能注意到一点小瑕疵。你得到的错误信息不够给力！</p>
<pre><code>Type check failed in assignment to $num2;
expected Company::Types::EXPORT::DEFAULT::ProductNumber but got Str (&quot;meow&quot;)
in block &lt;unit&gt; at test.p6 line 3
</code></pre><p>当给你是你的目标的时候, 你肯定有提升那些信息的方法。再次打开我们的 <strong>Company::Types</strong> 文件, 并扩展我们的 <strong>ProductNumber</strong> 的 <em>where</em> 从句以包括给力的错误信息：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">subset</span> <span class="nc">ProductNumber</span> <span class="k">of</span> <span class="nb">Str</span> <span class="k">where</span> <span class="p">{</span>
    <span class="o">.</span><span class="nb">chars</span> <span class="o">&lt;=</span> <span class="mi">20</span> <span class="ow">and</span> <span class="k">m</span><span class="p">/</span><span class="ni">^</span><span class="sr"> </span><span class="se">\d</span><span class="o">**</span><span class="mi">3</span><span class="sr"> </span><span class="p">&lt;[</span><span class="sr">-#</span><span class="p">]&gt;</span><span class="sr"> </span><span class="p">/</span>
        <span class="ow">or</span> <span class="nb">warn</span> <span class="p">&#39;</span><span class="s1">ProductNumber type expects a string at most 20 chars long</span><span class="p">&#39;</span>
            <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> with the first 4 characters in the format of \d\d\d[-|#]</span><span class="p">&#39;</span>
<span class="p">}</span>
</code></pre></div><p>现在, 在东西不匹配我们的类型的时候, 信息会在 <strong>Type</strong> 检查信息和栈追踪之前被包括进来, 为我们提供所期望的东西的更多信息。 如果你想, 这儿你也可以调用 <em>fail</em> 代替 <em>warn</em>, 这时 Type check&hellip; 信息不会被打印出来, 给你更多控制。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/subset" term="subset" label="subset" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Subset]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-03-19-subset/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2015-03-19-subset/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-10T00:00:00+08:00</published>
            <updated>2021-07-10T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Subset</blockquote><h2 id="subset-子集">Subset 子集</h2>
<p>Subset 可用于声明某一类型的子集。</p>
<p>输入一个密码,  要求密码必须满足如下条件：</p>
<p>1、 至少 8 位
2、 必须包含大写字母、小写字母 和 数字</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">subset</span> <span class="nc">Length8</span>      <span class="k">of</span> <span class="nb">Str</span> <span class="k">where</span> <span class="o">*.</span><span class="nb">chars</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span>
<span class="k">subset</span> <span class="nc">UpCase</span>       <span class="k">of</span> <span class="nb">Str</span> <span class="k">where</span> <span class="nb">none</span><span class="p">(&#39;</span><span class="s1">A</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">Z</span><span class="p">&#39;)</span>  <span class="o">∈</span> <span class="o">*.</span><span class="nb">comb</span><span class="o">.</span><span class="nb">Set</span><span class="p">;</span>
<span class="k">subset</span> <span class="nc">LowerCase</span>    <span class="k">of</span> <span class="nb">Str</span> <span class="k">where</span> <span class="nb">none</span><span class="p">(&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">z</span><span class="p">&#39;)</span>  <span class="o">∈</span> <span class="o">*.</span><span class="nb">comb</span><span class="o">.</span><span class="nb">Set</span><span class="p">;</span>
<span class="k">subset</span> <span class="nc">IntNumber</span>    <span class="k">of</span> <span class="nb">Str</span> <span class="k">where</span> <span class="nb">none</span><span class="p">(&#39;</span><span class="s1">0</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">9</span><span class="p">&#39;)</span>  <span class="o">∈</span> <span class="o">*.</span><span class="nb">comb</span><span class="o">.</span><span class="nb">Set</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$guess</span> <span class="o">=</span> <span class="nb">prompt</span><span class="p">(&#39;</span><span class="s1">Enter your password:</span><span class="p">&#39;);</span>

<span class="k">given</span> <span class="nv">$guess</span> <span class="p">{</span>
    <span class="k">when</span> <span class="n">Length8</span>     <span class="p">{</span> <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">密码长度必须为 8 位 以上</span><span class="p">&#39;;</span> <span class="k">proceed</span> <span class="p">}</span>
    <span class="k">when</span>  <span class="n">UpCase</span>     <span class="p">{</span> <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">密码必须包括大写字母</span><span class="p">&#39;;</span>     <span class="k">proceed</span> <span class="p">}</span>
    <span class="k">when</span> <span class="n">LowerCase</span>   <span class="p">{</span> <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">密码必须包含小写字母</span><span class="p">&#39;;</span>     <span class="k">proceed</span> <span class="p">}</span>
    <span class="k">when</span> <span class="n">IntNumber</span>   <span class="p">{</span> <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">密码必须包含数字</span><span class="p">&#39;;</span>                <span class="p">}</span>   
 <span class="p">}</span>
</code></pre></div><p>该程序具有可扩展性, 要增加一种密码验证, 只有添加一个 subset 就好了, 然后在 <code>given/when</code> 里面增加一个处理。</p>
<p><code>proceed</code> 相当于 <code>continue</code>, 不像 C 里面的 falling through, Raku 里面的 proceed 在继续执行下一个 <code>when</code> 语句时会计算 when 后面的条件。所以, 只要有 proceed, 则 proceed 后面的那个条件就会被执行。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/subset" term="subset" label="subset" />
                            
                        
                    
                
            
        </entry>
    
</feed>
