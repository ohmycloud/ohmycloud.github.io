<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    Feed on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/tags/feed/</link>
        <description>Recent content  in Feed
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Sat, 02 Mar 2024 14:30:02 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/tags/feed/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>Feed 运算符</title>
                <link>https://ohmyweekly.github.io/notes/2016-09-18-feed-operator/</link>
                
                
                <description>&lt;blockquote&gt;Feed Operator&lt;/blockquote&gt;&lt;h2 id=&#34;infix-&#34;&gt;infix &lt;code&gt;==&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;这个流操作符(feed operator)从它的左侧接收结果并把结果作为最后一个参数传递给下一个(右侧的)例程(routine)。&lt;/p&gt;
&lt;p&gt;这个操作符的优先级很松散所以你需要使用圆括号把结果赋值给其它变量, 或者你甚至可以使用另外一个流操作符! 在接收单个参数或第一个参数为 block 的程序/方法的例子中, 你必须经常使用圆括号来调用(尽管这对于最后一个例程/方法不是必须的)。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Traditional structure, read bottom-to-top
my @result =
    sort               # (4) Sort, result is &amp;lt;Earth People&amp;gt;
    grep { /&amp;lt;[PE]&amp;gt;/ }, # (3) Look for P or E
    map { .tc },       # (2) Capitalize the words
    &amp;lt;people of earth&amp;gt;; # (1) Start with the input

# Feed (left-to-right) with parentheses, read top-to-bottom
@result = (
    &amp;lt;people of earth&amp;gt;  # (1) Start with the input
    ==&amp;gt; map({ .tc })   # (2) Capitalize the words
    ==&amp;gt; grep /&amp;lt;[PE]&amp;gt;/  # (3) Look for P or E
    ==&amp;gt; sort           # (4) Sort, result is &amp;lt;Earth People&amp;gt;
);

# For illustration, method chaining equivalent, read top-to-bottom
@result =
    &amp;lt;people of earth&amp;gt;  # (1) Start with the input
    .map({ .tc })      # (2) Capitalize the words
    .grep(/&amp;lt;[PE]&amp;gt;/)    # (3) Look for P or E
    .sort;             # (4) Sort, result is &amp;lt;Earth People&amp;gt;

# To assign without the need of parentheses use another feed operator
&amp;lt;people of earth&amp;gt;
    ==&amp;gt; map({ .tc })
    ==&amp;gt; grep /&amp;lt;[PE]&amp;gt;/
    ==&amp;gt; sort()
    ==&amp;gt; @result;

# It can be useful to capture a partial result, however, unlike
# the leftward feed operator, it does require parentheses or a semicolon
&amp;lt;people of earth&amp;gt;
    ==&amp;gt; map({ .tc })
    ==&amp;gt; my @caps; @caps # also could wrap in parentheses instead
    ==&amp;gt; grep /&amp;lt;[PE]&amp;gt;/
    ==&amp;gt; sort()
    ==&amp;gt; @result;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个流操作符能让你在例程之外构建方法链那样的模式并且方法的结果能在不相关的数据上调用。在方法链中, 你被限制于使用数据身上可用的方法或使用之前的方法调用的结果。使用流操作符, 那个限制没有了。写出来的代码比一系列用多个换行符打断的方法调用更加可读。&lt;/p&gt;
&lt;p&gt;注: 在将来, 这个操作符会在它获得并行地运行列表操作的能力之后有所变化。它会强制左侧的操作数作为一个闭包(它能被克隆并运行在子线程中)变得可闭合。&lt;/p&gt;
&lt;h2 id=&#34;infix--1&#34;&gt;infix &lt;code&gt;&amp;lt;==&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;这个向左的流操作符从右侧接收结果并把结果作为最后的一个参数传递给它前面的(左侧的)例程。这为一系列列表操作函数阐明了从右到左的数据流。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Traditional structure, read bottom-to-top
my @result =
    sort                   # (4) Sort, result is &amp;lt;Earth People&amp;gt;
    grep { /&amp;lt;[PE]&amp;gt;/ },     # (3) Look for P or E
    map { .tc },           # (2) Capitalize the words
    &amp;lt;people of earth&amp;gt;;     # (1) Start with the input

# Feed (right-to-left) with parentheses, read bottom-to-top
@result = (
    sort()                 # (4) Sort, result is &amp;lt;Earth People&amp;gt;
    &amp;lt;== grep({ /&amp;lt;[PE]&amp;gt;/ }) # (3) Look for P or E
    &amp;lt;== map({ .tc })       # (2) Capitalize the words
    &amp;lt;== &amp;lt;people of earth&amp;gt;  # (1) Start with the input
);

# To assign without parentheses, use another feed operator
@result
    &amp;lt;== sort()             # (4) Sort, result is &amp;lt;Earth People&amp;gt;
    &amp;lt;== grep({ /&amp;lt;[PE]&amp;gt;/ }) # (3) Look for P or E
    &amp;lt;== map({ .tc })       # (2) Capitalize the words
    &amp;lt;== &amp;lt;people of earth&amp;gt;; # (1) Start with the input

# It can be useful to capture a partial result
@result
    &amp;lt;== sort()
    &amp;lt;== grep({ /&amp;lt;[PE]&amp;gt;/ })
    &amp;lt;== my @caps # unlike ==&amp;gt;, there is no need for additional statement
    &amp;lt;== map({ .tc })
    &amp;lt;== &amp;lt;people of earth&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;和向右的流操作符不一样, 这个结果不能严格地映射为方法链。然而, 和上面传统的结构中每个参数使用一行分割相比, feed 操作符写出的代码比逗号更具描述性。向左的流操作符也允许你打断语句并捕获一个可能对调试来说极其方便的中间结果或者接收那个结果并在最终结果身上创建另外一个变种。&lt;/p&gt;
&lt;p&gt;注意: 在将来, 这个操作符会在它获得并行地运行列表操作的能力之后有所变化。它会强制右侧的操作数作为一个闭包变得可闭合(它能被克隆并运行在子线程中)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.raku.org/language/operators#Sequencer_Precedence&#34;&gt;https://docs.raku.org/language/operators#Sequencer_Precedence&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/rakulang">rakulang</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/feed">feed</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2016-09-18-feed-operator/</guid>
                <pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate>
            </item>
        
    </channel>
</rss>


