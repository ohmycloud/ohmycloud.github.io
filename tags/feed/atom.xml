<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.92.0">Hugo</generator><title type="html"><![CDATA[feed on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/feed/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/feed/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/feed/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/feed/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2022-01-23T16:05:49+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/feed/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Feed 运算符]]></title>
            <link href="https://ohmyweekly.github.io/notes/2016-09-18-feed-operator/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2016-09-18-feed-operator/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-18T00:00:00+00:00</published>
            <updated>2021-07-18T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Feed Operator</blockquote><h2 id="infix-">infix <code>==&gt;</code></h2>
<p>这个流操作符(feed operator)从它的左侧接收结果并把结果作为最后一个参数传递给下一个(右侧的)例程(routine)。</p>
<p>这个操作符的优先级很松散所以你需要使用圆括号把结果赋值给其它变量, 或者你甚至可以使用另外一个流操作符! 在接收单个参数或第一个参数为 block 的程序/方法的例子中, 你必须经常使用圆括号来调用(尽管这对于最后一个例程/方法不是必须的)。</p>
<pre tabindex="0"><code># Traditional structure, read bottom-to-top
my @result =
    sort               # (4) Sort, result is &lt;Earth People&gt;
    grep { /&lt;[PE]&gt;/ }, # (3) Look for P or E
    map { .tc },       # (2) Capitalize the words
    &lt;people of earth&gt;; # (1) Start with the input

# Feed (left-to-right) with parentheses, read top-to-bottom
@result = (
    &lt;people of earth&gt;  # (1) Start with the input
    ==&gt; map({ .tc })   # (2) Capitalize the words
    ==&gt; grep /&lt;[PE]&gt;/  # (3) Look for P or E
    ==&gt; sort           # (4) Sort, result is &lt;Earth People&gt;
);

# For illustration, method chaining equivalent, read top-to-bottom
@result =
    &lt;people of earth&gt;  # (1) Start with the input
    .map({ .tc })      # (2) Capitalize the words
    .grep(/&lt;[PE]&gt;/)    # (3) Look for P or E
    .sort;             # (4) Sort, result is &lt;Earth People&gt;

# To assign without the need of parentheses use another feed operator
&lt;people of earth&gt;
    ==&gt; map({ .tc })
    ==&gt; grep /&lt;[PE]&gt;/
    ==&gt; sort()
    ==&gt; @result;

# It can be useful to capture a partial result, however, unlike
# the leftward feed operator, it does require parentheses or a semicolon
&lt;people of earth&gt;
    ==&gt; map({ .tc })
    ==&gt; my @caps; @caps # also could wrap in parentheses instead
    ==&gt; grep /&lt;[PE]&gt;/
    ==&gt; sort()
    ==&gt; @result;
</code></pre><p>这个流操作符能让你在例程之外构建方法链那样的模式并且方法的结果能在不相关的数据上调用。在方法链中, 你被限制于使用数据身上可用的方法或使用之前的方法调用的结果。使用流操作符, 那个限制没有了。写出来的代码比一系列用多个换行符打断的方法调用更加可读。</p>
<p>注: 在将来, 这个操作符会在它获得并行地运行列表操作的能力之后有所变化。它会强制左侧的操作数作为一个闭包(它能被克隆并运行在子线程中)变得可闭合。</p>
<h2 id="infix--1">infix <code>&lt;==</code></h2>
<p>这个向左的流操作符从右侧接收结果并把结果作为最后的一个参数传递给它前面的(左侧的)例程。这为一系列列表操作函数阐明了从右到左的数据流。</p>
<pre tabindex="0"><code># Traditional structure, read bottom-to-top
my @result =
    sort                   # (4) Sort, result is &lt;Earth People&gt;
    grep { /&lt;[PE]&gt;/ },     # (3) Look for P or E
    map { .tc },           # (2) Capitalize the words
    &lt;people of earth&gt;;     # (1) Start with the input

# Feed (right-to-left) with parentheses, read bottom-to-top
@result = (
    sort()                 # (4) Sort, result is &lt;Earth People&gt;
    &lt;== grep({ /&lt;[PE]&gt;/ }) # (3) Look for P or E
    &lt;== map({ .tc })       # (2) Capitalize the words
    &lt;== &lt;people of earth&gt;  # (1) Start with the input
);

# To assign without parentheses, use another feed operator
@result
    &lt;== sort()             # (4) Sort, result is &lt;Earth People&gt;
    &lt;== grep({ /&lt;[PE]&gt;/ }) # (3) Look for P or E
    &lt;== map({ .tc })       # (2) Capitalize the words
    &lt;== &lt;people of earth&gt;; # (1) Start with the input

# It can be useful to capture a partial result
@result
    &lt;== sort()
    &lt;== grep({ /&lt;[PE]&gt;/ })
    &lt;== my @caps # unlike ==&gt;, there is no need for additional statement
    &lt;== map({ .tc })
    &lt;== &lt;people of earth&gt;;
</code></pre><p>和向右的流操作符不一样, 这个结果不能严格地映射为方法链。然而, 和上面传统的结构中每个参数使用一行分割相比, feed 操作符写出的代码比逗号更具描述性。向左的流操作符也允许你打断语句并捕获一个可能对调试来说极其方便的中间结果或者接收那个结果并在最终结果身上创建另外一个变种。</p>
<p>注意: 在将来, 这个操作符会在它获得并行地运行列表操作的能力之后有所变化。它会强制右侧的操作数作为一个闭包变得可闭合(它能被克隆并运行在子线程中)</p>
<p><a href="https://docs.raku.org/language/operators#Sequencer_Precedence">https://docs.raku.org/language/operators#Sequencer_Precedence</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/feed" term="feed" label="feed" />
                            
                        
                    
                
            
        </entry>
    
</feed>
