<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[proc on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/proc/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/proc/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/proc/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/proc/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-12T22:13:55+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/proc/</id>
    
        
        <entry>
            <title type="html"><![CDATA[在 Raku 中执行有超时的外部程序]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-05-14-execute-an-external-program-with-timeout-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2015-05-14-execute-an-external-program-with-timeout-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Execute an External Program With Timeout in Raku</blockquote><p>Proc::Async 允许我们异步地执行外部程序。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$proc</span> <span class="o">=</span> <span class="nb">Proc::Async</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="s2">curl</span><span class="p">&#34;</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">-s</span><span class="p">&#34;</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">-o</span><span class="p">&#34;</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">index.html</span><span class="p">&#34;</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">http://www.cpan.org</span><span class="p">&#34;);</span>
<span class="k">my</span> <span class="nv">$res</span> <span class="o">=</span> <span class="nb">await</span> <span class="nv">$proc</span><span class="o">.</span><span class="k">start</span><span class="p">;</span>
</code></pre></div><p>我们可以在 Proc::Async 中使用超时吗? Proc::Async 没有正式支持该功能，但是我们可以很容易地实现它。看一下这个：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Proc::Async::Timeout</span> <span class="k">is</span> <span class="nb">Proc::Async</span> <span class="p">{</span>
    <span class="k">has</span> <span class="nv">$.timeout</span> <span class="k">is</span> <span class="k">rw</span><span class="p">;</span>
    <span class="k">method</span> <span class="k">start</span><span class="p">(</span><span class="nv">$self:</span> <span class="o">|</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">callsame</span> <span class="k">unless</span> <span class="nv">$.timeout</span><span class="p">;</span>

        <span class="k">my</span> <span class="nv">$killer</span> <span class="o">=</span> <span class="nb">Promise</span><span class="o">.</span><span class="nb">in</span><span class="p">(</span><span class="nv">$.timeout</span><span class="p">)</span><span class="o">.</span><span class="nb">then</span><span class="o">:</span> <span class="p">{</span> <span class="nv">$self</span><span class="o">.</span><span class="nb">kill</span> <span class="p">};</span>
        <span class="k">my</span> <span class="nv">$promise</span> <span class="o">=</span> <span class="nb">callsame</span><span class="p">;</span>

        <span class="nb">Promise</span><span class="o">.</span><span class="nb">anyof</span><span class="p">(</span><span class="nv">$promise</span><span class="o">,</span> <span class="nv">$killer</span><span class="p">)</span><span class="o">.</span><span class="nb">then</span><span class="o">:</span> <span class="p">{</span> <span class="nv">$promise</span><span class="o">.</span><span class="nb">result</span> <span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$proc</span> <span class="o">=</span> <span class="n">Proc::Async::Timeout</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="s2">perl</span><span class="p">&#34;</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">-E</span><span class="p">&#34;</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">sleep 5; warn &#39;end&#39;</span><span class="p">&#34;);</span>
<span class="nv">$proc</span><span class="o">.</span><span class="nf">timeout</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$res</span> <span class="o">=</span> <span class="nb">await</span> <span class="nv">$proc</span><span class="o">.</span><span class="k">start</span><span class="p">;</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">maybe timeout</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$res</span><span class="o">.</span><span class="nb">signal</span><span class="p">;</span>
</code></pre></div><p>你甚至可以这样做：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$start</span> <span class="o">=</span> <span class="nb">Proc::Async</span><span class="o">.^</span><span class="nb">methods</span><span class="o">.</span><span class="nb">first</span><span class="p">(</span><span class="o">*.</span><span class="nb">name</span> <span class="ow">eq</span> <span class="p">&#34;</span><span class="s2">start</span><span class="p">&#34;);</span>

<span class="nv">$start</span><span class="o">.</span><span class="nb">wrap</span><span class="o">:</span> <span class="k">method</span> <span class="p">(</span><span class="nv">$self:</span> <span class="o">:</span><span class="nv">$timeout</span><span class="o">,</span> <span class="o">|</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">callwith</span><span class="p">(</span><span class="nv">$self</span><span class="o">,</span> <span class="o">|</span><span class="n">c</span><span class="p">)</span> <span class="k">unless</span> <span class="nv">$timeout</span><span class="p">;</span>

    <span class="k">my</span> <span class="nv">$killer</span> <span class="o">=</span> <span class="nb">Promise</span><span class="o">.</span><span class="nb">in</span><span class="p">(</span><span class="nv">$timeout</span><span class="p">)</span><span class="o">.</span><span class="nb">then</span><span class="o">:</span> <span class="p">{</span> <span class="nv">$self</span><span class="o">.</span><span class="nb">kill</span> <span class="p">};</span>
    <span class="k">my</span> <span class="nv">$promise</span> <span class="o">=</span> <span class="nb">callwith</span><span class="p">(</span><span class="nv">$self</span><span class="o">,</span> <span class="o">|</span><span class="n">c</span><span class="p">);</span>
    
    <span class="nb">Promise</span><span class="o">.</span><span class="nb">anyof</span><span class="p">(</span><span class="nv">$promise</span><span class="o">,</span> <span class="nv">$killer</span><span class="p">)</span><span class="o">.</span><span class="nb">then</span><span class="o">:</span> <span class="p">{</span> <span class="nv">$promise</span><span class="o">.</span><span class="nb">result</span> <span class="p">};</span>
<span class="p">};</span>

<span class="nb">say</span> <span class="nb">await</span> <span class="nb">Proc::Async</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="s2">perl</span><span class="p">&#34;</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">-E</span><span class="p">&#34;</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">sleep 3; say &#34;end&#34;</span><span class="p">&#39;)</span><span class="o">.</span><span class="k">start</span><span class="p">(</span><span class="s">timeout</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">);</span>
</code></pre></div><p>哇，哇！如果你发现了更酷的方法，请告诉我。</p>
<p><a href="http://ks0608.hatenablog.com/entry/2016/05/17/001826">http://ks0608.hatenablog.com/entry/2016/05/17/001826</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/proc" term="proc" label="proc" />
                            
                        
                    
                
            
        </entry>
    
</feed>
