<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[example on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/example/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/example/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/example/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/example/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-15T22:25:28+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/example/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Raku 代码示例]]></title>
            <link href="https://ohmyweekly.github.io/notes/2016-02-14-raku-examples/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2016-02-14-raku-examples/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-12T00:00:00+08:00</published>
            <updated>2021-07-12T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Raku Examples</blockquote><h2 id="用类来排序数组">用类来排序数组</h2>
<p>有多列数据, 序号, 学校, 课程… 年份这几列。要如果学校和课程相同就根据年份倒序排列。</p>
<p>先按学校排序, 再按课程排序, 然后按年份倒序排序。</p>
<p>我定义一个类来进行多列数据的排序, 很方便：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Course</span> <span class="p">{</span>
    <span class="k">has</span> <span class="nb">Int</span> <span class="nv">$.numb</span><span class="p">;</span>
    <span class="k">has</span> <span class="nb">Str</span> <span class="nv">$.univ</span><span class="p">;</span>
    <span class="k">has</span> <span class="nb">Str</span> <span class="nv">$.dis</span><span class="p">;</span>
    <span class="k">has</span> <span class="nb">Int</span> <span class="nv">$.paper</span><span class="p">;</span>
    <span class="k">has</span> <span class="nb">Int</span> <span class="nv">$.cited</span><span class="p">;</span>
    <span class="k">has</span> <span class="nb">Int</span> <span class="nv">$.year</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">@headers</span> <span class="o">=</span> <span class="p">&lt;</span><span class="s">numb univ dis paper cited year</span><span class="p">&gt;;</span>
<span class="k">my</span> <span class="nv">@courses</span><span class="p">;</span>

<span class="k">for</span> <span class="nv">$=finish</span><span class="o">.</span><span class="nb">lines</span> <span class="k">-&gt;</span> <span class="nv">$line</span> <span class="p">{</span>
    <span class="nb">next</span> <span class="k">if</span> <span class="nv">$line</span> <span class="o">~~</span> <span class="p">/</span><span class="ni">^</span><span class="sr">num</span><span class="p">/;</span>
    <span class="k">my</span> <span class="nv">@words</span>  <span class="o">=</span> <span class="nv">$line</span><span class="o">.</span><span class="nb">words</span><span class="p">;</span>

    <span class="nv">@words</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">]</span> <span class="o">=</span> <span class="nv">@words</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">]».</span><span class="nb">Int</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">%h</span> <span class="o">=</span> <span class="nv">@headers</span> <span class="ow">Z</span><span class="o">=&gt;</span> <span class="nv">@words</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$course</span> <span class="o">=</span> <span class="n">Course</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="o">|</span><span class="nv">%h</span><span class="p">);</span>
    <span class="nv">@courses</span><span class="o">.</span><span class="nb">push</span><span class="p">(</span><span class="nv">$course</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">@sorted</span>  <span class="o">=</span> <span class="nv">@courses</span><span class="o">.</span><span class="nb">sort</span><span class="p">(</span><span class="o">*.</span><span class="nf">univ</span><span class="p">)</span><span class="o">.</span><span class="nb">sort</span><span class="p">(</span><span class="o">*.</span><span class="nf">dis</span><span class="p">)</span><span class="o">.</span><span class="nb">sort</span><span class="p">(</span><span class="o">-*.</span><span class="nb">year</span><span class="p">);</span>
<span class="k">for</span> <span class="nv">@sorted</span>  <span class="p">{</span>
    <span class="nb">say</span> <span class="nb">join</span> <span class="p">&#34;</span><span class="s2"> </span><span class="p">&#34;</span><span class="o">,</span> <span class="o">.</span><span class="nf">numb</span><span class="o">,</span> <span class="o">.</span><span class="nf">univ</span><span class="o">,</span> <span class="o">.</span><span class="nf">dis</span><span class="o">,</span> <span class="o">.</span><span class="nf">paper</span><span class="o">,</span> <span class="o">.</span><span class="nf">cited</span><span class="o">,</span> <span class="o">.</span><span class="nb">year</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">=finish</span><span class="sd">
</span><span class="sd">num	univ	dis	paper	cited	year
</span><span class="sd">1	Beijing	Physics	193	4555	2005
</span><span class="sd">2	Beijing	Physics	197	2799	2006
</span><span class="sd">3	Beijing	Physics	240	2664	2007
</span><span class="sd">4	Beijing	Physics	200	3191	2008
</span><span class="sd">5	Beijing	Physics	268	2668	2009
</span><span class="sd">6	Beijing	Physics	249	2300	2010
</span><span class="sd">7	Beijing	Physics	262	2080	2011
</span><span class="sd">8	Beijing	Physics	230	2371	2012
</span><span class="sd">9	Beijing	Physics	309	1367	2013
</span><span class="sd">10	Beijing	Physics	284	615	2014
</span><span class="sd">11	Beijing	Chemistry	143	1650	2005
</span><span class="sd">12	Beijing	Chemistry	149	2379	2006
</span><span class="sd">13	Beijing	Chemistry	190	2566	2007
</span><span class="sd">14	Beijing	Chemistry	147	1888	2008
</span><span class="sd">15	Beijing	Chemistry	184	2146	2009
</span><span class="sd">16	Beijing	Chemistry	214	2568	2010
</span><span class="sd">17	Beijing	Chemistry	238	2874	2011
</span><span class="sd">18	Beijing	Chemistry	265	2097	2012
</span><span class="sd">19	Beijing	Chemistry	251	1303	2013
</span><span class="sd">20	Beijing	Chemistry	241	656	2014
</span></code></pre></div><h2 id="斐波拉契数列fibonacci-sequence">斐波拉契数列（Fibonacci Sequence）</h2>
<ul>
<li>analytic</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span> <span class="k">where</span> <span class="mi">0</span><span class="o">..*</span>  <span class="k">--&gt;</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">constant</span> <span class="no">phi</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="nb">sqrt</span> <span class="mi">5</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

    <span class="k">return</span> <span class="nb">round</span><span class="p">(</span> <span class="n">phi</span><span class="o">**</span><span class="p">(</span><span class="nv">$n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="nb">sqrt</span> <span class="mi">5</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span> <span class="mi">0</span><span class="o">..</span><span class="mi">1000</span> <span class="k">-&gt;</span> <span class="nv">$i</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$i</span><span class="o">.</span><span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%3d</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">: </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>这种方法计算前1000个斐波拉契数大约为0.746s（2015.7.Rakudo, 以下都是）。</p>
<ul>
<li>迭代</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">state</span> <span class="nv">@sequence</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="p">;</span>

    <span class="k">while</span> <span class="nv">@sequence</span><span class="o">.</span><span class="nb">elems</span> <span class="o">&lt;=</span> <span class="nv">$n</span> <span class="p">{</span>
        <span class="nv">@sequence</span><span class="o">.</span><span class="nb">push</span><span class="p">(</span> <span class="nv">@sequence</span><span class="o">[*-</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="nv">@sequence</span><span class="o">[*-</span><span class="mi">1</span><span class="o">]</span> <span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">@sequence</span><span class="o">[</span><span class="nv">$n</span><span class="o">]</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">for</span> <span class="mi">0</span><span class="o">..</span><span class="mi">1000</span> <span class="k">-&gt;</span> <span class="nv">$i</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$i</span><span class="o">.</span><span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%3d</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">: </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>这种遍历法大概需要 1 秒多。</p>
<ul>
<li>递归</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span> <span class="k">where</span> <span class="mi">0</span><span class="o">..*</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nv">$n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">|</span> <span class="mi">1</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$n-1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$n-2</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">for</span> <span class="mi">0</span><span class="o">..</span><span class="mi">1000</span> <span class="k">-&gt;</span> <span class="nv">$i</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$i</span><span class="o">.</span><span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%3d</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">: </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>比较慢。第 20 个之后越来越慢。</p>
<ul>
<li>递归 - 超运算符</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span> <span class="k">where</span> <span class="mi">0</span><span class="o">..*</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nv">$n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">|</span> <span class="mi">1</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">[+]</span> <span class="p">(</span><span class="nv">$n-1</span><span class="o">,</span> <span class="nv">$n-2</span><span class="p">)</span><span class="o">».</span><span class="nv">&amp;fibonacci</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">for</span> <span class="mi">0</span><span class="o">..</span><span class="mi">1000</span> <span class="k">-&gt;</span> <span class="nv">$i</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$i</span><span class="o">.</span><span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%3d</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">: </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>和上面差不多。</p>
<ul>
<li>递归 - map</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span> <span class="k">where</span> <span class="mi">0</span><span class="o">..*</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nv">$n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">|</span> <span class="mi">1</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">[+]</span> <span class="nb">map</span> <span class="nv">&amp;fibonacci</span><span class="o">,</span> <span class="p">(</span><span class="nv">$n-1</span><span class="o">,</span> <span class="nv">$n-2</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">for</span> <span class="mi">0</span><span class="o">..</span><span class="mi">1000</span> <span class="k">-&gt;</span> <span class="nv">$i</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$i</span><span class="o">.</span><span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%3d</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">: </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>同上。</p>
<ul>
<li>递归 - multi</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">multi</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>

<span class="k">multi</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>

<span class="k">multi</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span> <span class="k">--&gt;</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$n-1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$n-2</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span> <span class="mi">0</span><span class="o">..</span><span class="mi">1000</span> <span class="k">-&gt;</span> <span class="nv">$i</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$i</span><span class="o">.</span><span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%3d</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">: </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>比上一个稍快。</p>
<ul>
<li>递归 - multi_cached</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">multi</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>
<span class="k">multi</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>

<span class="k">my</span> <span class="nv">%cached</span><span class="p">;</span>

<span class="k">multi</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span> <span class="k">--&gt;</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">%cached</span><span class="p">{</span><span class="nv">$n</span><span class="p">}</span> <span class="o">//=</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$n-1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$n-2</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span> <span class="mi">0</span><span class="o">..</span><span class="mi">1000</span> <span class="k">-&gt;</span> <span class="nv">$i</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$i</span><span class="o">.</span><span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%3d</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">: </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>花费 0.849s 执行完毕。</p>
<ul>
<li>递归 - multi_cached_state</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">multi</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>
<span class="k">multi</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>

<span class="k">multi</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span> <span class="k">--&gt;</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">state</span> <span class="nv">%cached</span><span class="p">;</span>
    <span class="k">return</span> <span class="nv">%cached</span><span class="p">{</span><span class="nv">$n</span><span class="p">}</span> <span class="o">//=</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$n-1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$n-2</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span> <span class="mi">0</span><span class="o">..</span><span class="mi">1000</span> <span class="k">-&gt;</span> <span class="nv">$i</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$i</span><span class="o">.</span><span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%3d</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">: </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>花费了 0.885s。</p>
<ul>
<li>递归 - multi_cached_trait</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">multi</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>
<span class="k">multi</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>

<span class="k">multi</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span> <span class="k">--&gt;</span> <span class="nb">Int</span><span class="p">)</span> <span class="k">is</span> <span class="k">cached</span> <span class="p">{</span>
    <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$n-1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$n-2</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span> <span class="mi">0</span><span class="o">..</span><span class="mi">1000</span> <span class="k">-&gt;</span> <span class="nv">$i</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$i</span><span class="o">.</span><span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%3d</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">: </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>目前报错。</p>
<ul>
<li>序列</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">constant</span> <span class="nv">@sequence</span> <span class="o">:=</span>  <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="o">*+*</span> <span class="o">...</span> <span class="o">*</span><span class="p">;</span>
    <span class="k">return</span> <span class="nv">@sequence</span><span class="o">[</span><span class="nv">$n</span><span class="o">]</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">for</span> <span class="mi">0</span><span class="o">..</span><span class="mi">1000</span> <span class="k">-&gt;</span> <span class="nv">$i</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$i</span><span class="o">.</span><span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%3d</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">: </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>花费了 1.6s 多。 其中 <code>:=</code> 是惰性赋值。按需求值。</p>
<ul>
<li>序列 - inline</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">fibonacci</span> <span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="o">*+*</span> <span class="o">...</span> <span class="o">*</span><span class="p">)</span><span class="o">[</span><span class="nv">$n</span><span class="o">]</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">for</span> <span class="mi">0</span><span class="o">..</span><span class="mi">1000</span> <span class="k">-&gt;</span> <span class="nv">$i</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="nv">$i</span><span class="o">.</span><span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%3d</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">: </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>花费了 133.808s。</p>
<h2 id="排序">排序</h2>
<ul>
<li>bogosort</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">sub</span> <span class="nf">bogosort</span> <span class="p">(</span> <span class="o">*</span><span class="nv">@list</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">until</span> <span class="o">[!</span><span class="nb">after</span><span class="o">]</span> <span class="nv">@list</span> <span class="p">{</span>
        <span class="nv">@list</span> <span class="o">.=</span> <span class="nb">pick</span><span class="p">(</span><span class="o">*</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">@list</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">#my @data = 6, 7, 2, 1, 8, 9, 2;</span>
<span class="k">my</span> <span class="nv">@data</span> <span class="o">=</span>  <span class="p">&lt;</span><span class="s"> p e r l s i x </span><span class="p">&gt;;</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">input  = </span><span class="p">&#39;</span> <span class="o">~</span>          <span class="nv">@data</span><span class="p">;</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">output = </span><span class="p">&#39;</span> <span class="o">~</span> <span class="n">bogosort</span> <span class="nv">@data</span><span class="p">;</span>
</code></pre></div><p>输出：</p>
<pre><code>input  = p e r l s i x
output = e i l p r s x
[Finished in 1.326s]
</code></pre><ul>
<li>mergesort</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">sub</span> <span class="nb">merge</span> <span class="p">(</span><span class="nv">@a</span><span class="o">,</span> <span class="nv">@b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">gather</span> <span class="k">while</span> <span class="nv">@a</span> <span class="o">&amp;&amp;</span> <span class="nv">@b</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nv">@a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="ow">before</span> <span class="nv">@b</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">{</span> <span class="nb">take</span> <span class="nv">@a</span><span class="o">.</span><span class="nb">shift</span> <span class="p">}</span>
        <span class="k">else</span>                  <span class="p">{</span> <span class="nb">take</span> <span class="nv">@b</span><span class="o">.</span><span class="nb">shift</span> <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>
    <span class="nv">@a</span><span class="o">,</span>
    <span class="nv">@b</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">mergesort</span> <span class="p">(</span> <span class="o">*</span><span class="nv">@list</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">@list</span> <span class="k">if</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">elems</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">my</span> <span class="nv">$middle</span> <span class="o">=</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">elems</span> <span class="ow">div</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">@left</span>   <span class="o">=</span> <span class="n">mergesort</span> <span class="nv">@list</span><span class="o">[</span> <span class="mi">0</span> <span class="o">..^</span> <span class="nv">$middle</span> <span class="o">]</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">@right</span>  <span class="o">=</span> <span class="n">mergesort</span> <span class="nv">@list</span><span class="o">[</span> <span class="nv">$middle</span> <span class="o">..</span> <span class="o">*</span>  <span class="o">]</span><span class="p">;</span>

    <span class="k">return</span> <span class="nb">merge</span><span class="p">(</span><span class="nv">@left</span><span class="o">,</span> <span class="nv">@right</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1"># my @data = 6, 7, 2, 1, 8, 9, 5, 3, 4;</span>
<span class="k">my</span> <span class="nv">@data</span> <span class="o">=</span> <span class="p">&lt;</span><span class="s"> p e r l s i x </span><span class="p">&gt;;</span>

<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">input  = </span><span class="p">{</span>           <span class="nv">@data</span>  <span class="p">}&#34;;</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">output = </span><span class="p">{</span> <span class="nf">mergesort</span><span class="p">(</span><span class="nv">@data</span><span class="p">)</span> <span class="p">}&#34;;</span>
</code></pre></div><p>输出：</p>
<pre><code>input  = p e r l s i x
output = e i l p r s x
[Finished in 0.337s]
</code></pre><ul>
<li>mergesort_functional</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">multi</span> <span class="nb">merge</span> <span class="p">(</span><span class="o">[],</span> <span class="nv">@ys</span><span class="p">)</span> <span class="p">{</span> <span class="nv">@ys</span> <span class="p">}</span>
<span class="k">multi</span> <span class="nb">merge</span> <span class="p">(</span><span class="nv">@xs</span><span class="o">,</span> <span class="o">[]</span><span class="p">)</span> <span class="p">{</span> <span class="nv">@xs</span> <span class="p">}</span>

<span class="k">multi</span> <span class="nb">merge</span> <span class="p">(</span><span class="o">[</span><span class="nv">$x</span><span class="o">,</span> <span class="o">*</span><span class="nv">@xs</span><span class="o">],</span> <span class="o">[</span><span class="nv">$y</span><span class="o">,</span> <span class="o">*</span><span class="nv">@ys</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$x</span> <span class="ow">before</span> <span class="nv">$y</span> <span class="o">??</span> <span class="p">(</span><span class="nv">$x</span><span class="o">,</span> <span class="nb">merge</span> <span class="nv">@xs</span><span class="o">,</span> <span class="o">[</span><span class="nv">$y</span><span class="o">,</span> <span class="nv">@ys</span><span class="o">]</span><span class="p">)</span>
                 <span class="o">!!</span> <span class="p">(</span><span class="nv">$y</span><span class="o">,</span> <span class="nb">merge</span> <span class="o">[</span><span class="nv">$x</span><span class="o">,</span> <span class="nv">@xs</span><span class="o">],</span> <span class="nv">@ys</span><span class="p">)</span>
<span class="p">}</span>


<span class="k">multi</span> <span class="nf">mergesort</span> <span class="p">(</span> <span class="o">[]</span> <span class="p">)</span> <span class="p">{</span>  <span class="o">[]</span>  <span class="p">}</span>
<span class="k">multi</span> <span class="nf">mergesort</span> <span class="p">(</span><span class="o">[</span><span class="nv">$x</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span> <span class="o">[</span><span class="nv">$x</span><span class="o">]</span> <span class="p">}</span>

<span class="k">multi</span> <span class="nf">mergesort</span> <span class="p">(</span><span class="nv">@xs</span><span class="p">)</span>  <span class="p">{</span>
    <span class="nb">merge</span>
        <span class="nf">mergesort</span><span class="p">(</span> <span class="nv">@xs</span><span class="o">[</span><span class="mi">0</span> <span class="o">..^</span> <span class="nv">@xs</span><span class="o">.</span><span class="nb">elems</span> <span class="ow">div</span> <span class="mi">2</span><span class="o">]</span> <span class="p">)</span><span class="o">,</span>
        <span class="nf">mergesort</span><span class="p">(</span> <span class="nv">@xs</span><span class="o">[</span><span class="nv">@xs</span><span class="o">.</span><span class="nb">elems</span> <span class="ow">div</span> <span class="mi">2</span> <span class="o">..</span> <span class="o">*</span> <span class="o">]</span> <span class="p">)</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">@data</span> <span class="o">=</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="p">;</span>
<span class="c1">#my @data = &lt; p e r l s i x &gt;;</span>

<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">input  = </span><span class="p">{</span>           <span class="nv">@data</span>  <span class="p">}&#34;;</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">output = </span><span class="p">{</span> <span class="nf">mergesort</span><span class="p">(</span><span class="nv">@data</span><span class="p">)</span> <span class="p">}&#34;;</span>
</code></pre></div><p>输出：</p>
<pre><code>input  = 6 7 2 1 8 9 5 3 4
output = 1 2 3 4 5 6 7 8 9
[Finished in 0.373s]
</code></pre><ul>
<li>mergesort_functional_given</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">multi</span> <span class="nb">merge</span> <span class="p">(</span><span class="o">[],</span> <span class="nv">@ys</span><span class="p">)</span> <span class="p">{</span> <span class="nv">@ys</span> <span class="p">}</span>
<span class="k">multi</span> <span class="nb">merge</span> <span class="p">(</span><span class="nv">@xs</span><span class="o">,</span> <span class="o">[]</span><span class="p">)</span> <span class="p">{</span> <span class="nv">@xs</span> <span class="p">}</span>

<span class="k">multi</span> <span class="nb">merge</span> <span class="p">(</span><span class="o">[</span><span class="nv">$x</span><span class="o">,</span> <span class="o">*</span><span class="nv">@xs</span><span class="o">],</span> <span class="o">[</span><span class="nv">$y</span><span class="o">,</span> <span class="o">*</span><span class="nv">@ys</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$x</span> <span class="ow">before</span> <span class="nv">$y</span> <span class="o">??</span> <span class="p">(</span><span class="nv">$x</span><span class="o">,</span> <span class="nb">merge</span> <span class="nv">@xs</span><span class="o">,</span> <span class="o">[</span><span class="nv">$y</span><span class="o">,</span> <span class="nv">@ys</span><span class="o">]</span><span class="p">)</span>
                 <span class="o">!!</span> <span class="p">(</span><span class="nv">$y</span><span class="o">,</span> <span class="nb">merge</span> <span class="o">[</span><span class="nv">$x</span><span class="o">,</span> <span class="nv">@xs</span><span class="o">],</span> <span class="nv">@ys</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">multi</span> <span class="nf">mergesort</span> <span class="p">(</span> <span class="o">[]</span> <span class="p">)</span> <span class="p">{</span>  <span class="o">[]</span>  <span class="p">}</span>
<span class="k">multi</span> <span class="nf">mergesort</span> <span class="p">(</span><span class="o">[</span><span class="nv">$x</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span> <span class="o">[</span><span class="nv">$x</span><span class="o">]</span> <span class="p">}</span>

<span class="k">multi</span> <span class="nf">mergesort</span> <span class="p">(</span><span class="nv">@xs</span><span class="p">)</span>  <span class="p">{</span>
    <span class="k">given</span> <span class="nv">@xs</span><span class="o">.</span><span class="nb">elems</span> <span class="ow">div</span> <span class="mi">2</span> <span class="k">-&gt;</span> <span class="nv">$middle</span> <span class="p">{</span>
        <span class="nb">merge</span>
            <span class="nf">mergesort</span><span class="p">(</span> <span class="nv">@xs</span><span class="o">[</span> <span class="mi">0</span> <span class="o">..^</span> <span class="nv">$middle</span> <span class="o">]</span> <span class="p">)</span><span class="o">,</span>
            <span class="nf">mergesort</span><span class="p">(</span> <span class="nv">@xs</span><span class="o">[</span> <span class="nv">$middle</span> <span class="o">..</span> <span class="o">*</span>  <span class="o">]</span> <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="k">my</span> <span class="nv">@data</span> <span class="o">=</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="p">;</span>
<span class="c1">#my @data = &lt; p e r l s i x &gt;;</span>

<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">input  = </span><span class="p">{</span>           <span class="nv">@data</span>  <span class="p">}&#34;;</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">output = </span><span class="p">{</span> <span class="nf">mergesort</span><span class="p">(</span><span class="nv">@data</span><span class="p">)</span> <span class="p">}&#34;;</span>
</code></pre></div><p>输出：</p>
<pre><code>input  = 6 7 2 1 8 9 5 3 4
output = 1 2 3 4 5 6 7 8 9
[Finished in 0.375s]
</code></pre><ul>
<li>mergesort_functional_interleaved</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">multi</span> <span class="nb">merge</span> <span class="p">(</span><span class="o">[],</span> <span class="nv">@ys</span><span class="p">)</span> <span class="p">{</span> <span class="nv">@ys</span> <span class="p">}</span>
<span class="k">multi</span> <span class="nb">merge</span> <span class="p">(</span><span class="nv">@xs</span><span class="o">,</span> <span class="o">[]</span><span class="p">)</span> <span class="p">{</span> <span class="nv">@xs</span> <span class="p">}</span>

<span class="k">multi</span> <span class="nb">merge</span> <span class="p">(</span><span class="o">[</span><span class="nv">$x</span><span class="o">,</span> <span class="o">*</span><span class="nv">@xs</span><span class="o">],</span> <span class="o">[</span><span class="nv">$y</span><span class="o">,</span> <span class="o">*</span><span class="nv">@ys</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$x</span> <span class="ow">before</span> <span class="nv">$y</span> <span class="o">??</span> <span class="p">(</span><span class="nv">$x</span><span class="o">,</span> <span class="nb">merge</span> <span class="nv">@xs</span><span class="o">,</span> <span class="o">[</span><span class="nv">$y</span><span class="o">,</span> <span class="nv">@ys</span><span class="o">]</span><span class="p">)</span>
                 <span class="o">!!</span> <span class="p">(</span><span class="nv">$y</span><span class="o">,</span> <span class="nb">merge</span> <span class="o">[</span><span class="nv">$x</span><span class="o">,</span> <span class="nv">@xs</span><span class="o">],</span> <span class="nv">@ys</span><span class="p">)</span>
<span class="p">}</span>


<span class="k">multi</span> <span class="nf">mergesort</span> <span class="p">(</span> <span class="o">[]</span> <span class="p">)</span> <span class="p">{</span>  <span class="o">[]</span>  <span class="p">}</span>
<span class="k">multi</span> <span class="nf">mergesort</span> <span class="p">(</span><span class="o">[</span><span class="nv">$x</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span> <span class="o">[</span><span class="nv">$x</span><span class="o">]</span> <span class="p">}</span>

<span class="k">multi</span> <span class="nf">mergesort</span> <span class="p">(</span><span class="nv">@xs</span><span class="p">)</span>  <span class="p">{</span>
    <span class="nb">merge</span>
        <span class="nf">mergesort</span><span class="p">(</span> <span class="nv">@xs</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">...*]</span> <span class="p">)</span><span class="o">,</span>
        <span class="nf">mergesort</span><span class="p">(</span> <span class="nv">@xs</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">...*]</span> <span class="p">)</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">@data</span> <span class="o">=</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="p">;</span>
<span class="c1">#my @data = &lt; p e r l s i x &gt;;</span>

<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">input  = </span><span class="p">{</span>           <span class="nv">@data</span>  <span class="p">}&#34;;</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">output = </span><span class="p">{</span> <span class="nf">mergesort</span><span class="p">(</span><span class="nv">@data</span><span class="p">)</span> <span class="p">}&#34;;</span>
</code></pre></div><p>输出：</p>
<pre><code>input  = 6 7 2 1 8 9 5 3 4
output = 1 2 3 4 5 6 7 8 9
[Finished in 0.34s]
</code></pre><ul>
<li>quicksort</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">sub</span> <span class="nf">quicksort</span><span class="p">(</span> <span class="o">*</span><span class="nv">@list</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">@list</span> <span class="k">if</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">elems</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span>

    <span class="k">my</span> <span class="nv">$pivot</span> <span class="o">=</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">shift</span><span class="p">;</span>
    <span class="c1"># my $pivot = @list.=pick(*).shift;</span>

    <span class="k">my</span> <span class="p">(</span><span class="nv">@before</span><span class="o">,</span> <span class="nv">@after</span><span class="p">);</span>
    <span class="k">for</span> <span class="nv">@list</span> <span class="k">-&gt;</span> <span class="nv">$elem</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nv">$elem</span> <span class="ow">before</span> <span class="nv">$pivot</span> <span class="p">{</span> <span class="nv">@before</span><span class="o">.</span><span class="nb">push</span><span class="p">(</span><span class="nv">$elem</span><span class="p">);</span> <span class="p">}</span>
        <span class="k">else</span>                   <span class="p">{</span> <span class="nv">@after</span><span class="o">.</span><span class="nb">push</span><span class="p">(</span><span class="nv">$elem</span><span class="p">);</span>  <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nf">quicksort</span><span class="p">(</span><span class="nv">@before</span><span class="p">)</span><span class="o">,</span>
        <span class="nv">$pivot</span><span class="o">,</span>
        <span class="nf">quicksort</span><span class="p">(</span><span class="nv">@after</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">#my @data = 6, 7, 2, 1, 8, 9, 5, 3, 4;</span>
<span class="k">my</span> <span class="nv">@data</span> <span class="o">=</span> <span class="p">&lt;</span><span class="s"> p e r l s i x </span><span class="p">&gt;;</span>

<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">input  = </span><span class="p">{</span>           <span class="nv">@data</span>  <span class="p">}&#34;;</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">output = </span><span class="p">{</span> <span class="nf">quicksort</span><span class="p">(</span><span class="nv">@data</span><span class="p">)</span> <span class="p">}&#34;;</span>
</code></pre></div><p>输出：</p>
<pre><code>input  = p e r l s i x
output = e i l p r s x
[Finished in 0.246s]
</code></pre><ul>
<li>quicksort_classify</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">multi</span> <span class="nf">quicksort</span><span class="p">(</span>  <span class="o">[]</span>  <span class="p">)</span> <span class="p">{</span>    <span class="p">};</span>
<span class="k">multi</span> <span class="nf">quicksort</span><span class="p">(</span>  <span class="nb">Mu</span>  <span class="p">)</span> <span class="p">{</span>    <span class="p">};</span>
<span class="k">multi</span> <span class="nf">quicksort</span><span class="p">(</span> <span class="o">[</span><span class="nv">$x</span><span class="o">]</span> <span class="p">)</span> <span class="p">{</span> <span class="nv">$x</span> <span class="p">};</span>

<span class="k">multi</span> <span class="nf">quicksort</span><span class="p">(</span> <span class="o">[</span><span class="nv">$pivot</span><span class="o">,</span> <span class="o">*</span><span class="nv">@xs</span><span class="o">]</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">given</span> <span class="nv">@xs</span><span class="o">.</span><span class="nb">classify</span><span class="o">:</span><span class="p">{</span> <span class="nv">$^elem</span> <span class="ow">before</span> <span class="nv">$pivot</span> <span class="o">??</span> <span class="p">&#39;</span><span class="s1">pre</span><span class="p">&#39;</span> <span class="o">!!</span> <span class="p">&#39;</span><span class="s1">post</span><span class="p">&#39;}</span> <span class="p">{</span>
        <span class="nf">quicksort</span><span class="p">(</span> <span class="o">.</span><span class="p">&lt;</span><span class="s">pre</span><span class="p">&gt;</span>  <span class="p">)</span><span class="o">,</span>
        <span class="nv">$pivot</span><span class="o">,</span>
        <span class="nf">quicksort</span><span class="p">(</span> <span class="o">.</span><span class="p">&lt;</span><span class="s">post</span><span class="p">&gt;</span> <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">#my @data = 6, 7, 2, 1, 8, 9, 5, 3, 4;</span>
<span class="k">my</span> <span class="nv">@data</span> <span class="o">=</span> <span class="p">&lt;</span><span class="s"> p e r l s i x </span><span class="p">&gt;;</span>

<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">input  = </span><span class="p">{</span>           <span class="nv">@data</span>  <span class="p">}&#34;;</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">output = </span><span class="p">{</span> <span class="nf">quicksort</span><span class="p">(</span><span class="nv">@data</span><span class="p">)</span> <span class="p">}&#34;;</span>
</code></pre></div><p>输出：</p>
<pre><code>input  = p e r l s i x
output =  e i  l p  r  s x
[Finished in 0.303s]
</code></pre><ul>
<li>quicksort_functional</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">multi</span> <span class="nf">quicksort</span><span class="p">(</span>  <span class="o">[]</span>  <span class="p">)</span> <span class="p">{</span>    <span class="p">};</span>
<span class="k">multi</span> <span class="nf">quicksort</span><span class="p">(</span> <span class="o">[</span><span class="nv">$x</span><span class="o">]</span> <span class="p">)</span> <span class="p">{</span> <span class="nv">$x</span> <span class="p">};</span>

<span class="k">multi</span> <span class="nf">quicksort</span><span class="p">(</span> <span class="o">[</span><span class="nv">$pivot</span><span class="o">,</span> <span class="o">*</span><span class="nv">@xs</span><span class="o">]</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nf">quicksort</span><span class="p">(</span><span class="nv">@xs</span><span class="o">.</span><span class="nb">grep</span><span class="o">:</span> <span class="o">*</span> <span class="ow">before</span> <span class="nv">$pivot</span><span class="p">)</span><span class="o">,</span>
    <span class="nv">$pivot</span><span class="o">,</span>
    <span class="nf">quicksort</span><span class="p">(</span><span class="nv">@xs</span><span class="o">.</span><span class="nb">grep</span><span class="o">:</span> <span class="o">*</span> <span class="o">!</span><span class="ow">before</span> <span class="nv">$pivot</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">#my @data = 6, 7, 2, 1, 8, 9, 5, 3, 4;</span>
<span class="k">my</span> <span class="nv">@data</span> <span class="o">=</span> <span class="p">&lt;</span><span class="s"> p e r l s i x </span><span class="p">&gt;;</span>

<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">input  = </span><span class="p">{</span>           <span class="nv">@data</span>  <span class="p">}&#34;;</span>
<span class="nb">say</span> <span class="p">&#34;</span><span class="s2">output = </span><span class="p">{</span> <span class="nf">quicksort</span><span class="p">(</span><span class="nv">@data</span><span class="p">)</span> <span class="p">}&#34;;</span>
</code></pre></div><p>输出:</p>
<pre><code>input  = p e r l s i x
output =  e i l  p  r  s x
[Finished in 0.27s]
</code></pre><h2 id="pm-模块">pm 模块</h2>
<p>首先把自定义的 Bank.pm 模块复制到 Raku 的 lib 目录下：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">cp</span> <span class="n">Bank</span><span class="o">.</span><span class="nf">pm</span> <span class="o">~/.</span><span class="nf">rakudobrew</span><span class="o">/</span><span class="n">moar-nom</span><span class="o">/</span><span class="nb">install</span><span class="o">/</span><span class="nb">share</span><span class="o">/</span><span class="nb">raku</span><span class="o">/</span><span class="n">site</span><span class="o">/</span><span class="nb">lib</span>
</code></pre></div><p>Bank.pm</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/raku</span>

<span class="k">class</span> <span class="nc">Ident</span> <span class="p">{</span>
    <span class="k">subset</span> <span class="nc">Pattern</span> <span class="k">of</span> <span class="nb">Str</span> <span class="k">where</span> <span class="o">/</span> \<span class="nb">d</span><span class="o">**</span><span class="mi">3</span> <span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span> \<span class="nb">d</span><span class="o">**</span><span class="mi">3</span> <span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span> \<span class="nb">d</span><span class="o">**</span><span class="mi">3</span> <span class="o">/</span><span class="p">;</span>

    <span class="k">has</span> <span class="nb">Str</span> <span class="nv">$.name</span>              <span class="o">=</span> <span class="p">&#39;</span><span class="s1">????</span><span class="p">&#39;;</span>
    <span class="k">has</span> <span class="nb">Str</span> <span class="nv">$.ID</span>  <span class="k">where</span> <span class="n">Pattern</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">000-000-000</span><span class="p">&#39;;</span>
<span class="p">}</span>

<span class="k">role</span> <span class="nc">Taxable</span> <span class="o">[:</span><span class="nv">$THRESHOLD</span> <span class="o">=</span> <span class="mi">100_000</span><span class="o">]</span> <span class="p">{</span>
    <span class="k">constant</span> <span class="no">GENERAL_TAX_RATE</span> <span class="o">=</span> <span class="mf">0.01</span><span class="p">;</span>

    <span class="k">has</span> <span class="nv">%.tax_record</span><span class="p">;</span>

    <span class="k">method</span> <span class="nf">tax_credits</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>

    <span class="k">method</span> <span class="nf">calculate_tax</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$tax_payable</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$.balance</span> <span class="nb">min</span> <span class="nv">$THRESHOLD</span><span class="p">)</span> <span class="o">*</span> <span class="n">GENERAL_TAX_RATE</span>
                          <span class="o">-</span> <span class="nv">$.tax_credits</span><span class="p">;</span>

        <span class="nv">%!tax_record</span><span class="p">{</span><span class="nb">now</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$tax_payable</span><span class="p">;</span>

        <span class="k">return</span> <span class="nv">$tax_payable</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Account</span> <span class="k">does</span> <span class="nc">Taxable</span> <span class="p">{</span>
    <span class="k">subset</span> <span class="nc">ID</span> <span class="k">of</span> <span class="nb">Str</span> <span class="k">where</span> <span class="o">/</span> <span class="p">&lt;</span><span class="s">alpha</span><span class="p">&gt;</span><span class="o">**</span><span class="mi">4</span> <span class="o">&lt;</span><span class="n">digit</span><span class="o">&gt;**</span><span class="mi">5</span> <span class="o">/</span><span class="p">;</span>

    <span class="k">state</span> <span class="n">ID</span> <span class="nv">$next_account_ID</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">AAAA00001</span><span class="p">&#39;;</span>

    <span class="k">has</span> <span class="nb">Str</span>     <span class="nv">$.name</span>        <span class="o">=</span> <span class="nb">die</span> <span class="p">&#39;</span><span class="s1">Must provide account name</span><span class="p">&#39;;</span>
    <span class="k">has</span> <span class="nb">Numeric</span> <span class="nv">$.balance</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">has</span> <span class="n">ID</span>      <span class="nv">$.ID</span>          <span class="o">=</span> <span class="nv">$next_account_ID</span><span class="o">++</span><span class="p">;</span>

    <span class="k">method</span> <span class="nf">deposit</span><span class="p">(</span><span class="nb">Numeric</span> <span class="nv">$amount</span> <span class="k">where</span> <span class="o">*&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$!balance</span> <span class="o">+=</span> <span class="nv">$amount</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">withdraw</span><span class="p">(</span><span class="nb">Numeric</span> <span class="nv">$amount</span> <span class="k">where</span> <span class="o">*&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">fail</span> <span class="p">&#34;</span><span class="s2">Insufficient funds to withdraw </span><span class="nv">$amount</span><span class="p">&#34;</span>
            <span class="k">if</span> <span class="nv">$.balance</span> <span class="o">&lt;</span> <span class="nv">$amount</span><span class="p">;</span>
        <span class="nv">$!balance</span> <span class="o">-=</span> <span class="nv">$amount</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">description</span> <span class="p">()</span> <span class="p">{</span>
        <span class="p">&#34;</span><span class="nv">$.ID</span><span class="s2"> (</span><span class="nv">$.name</span><span class="s2">): balance=</span><span class="nv">$.balance</span><span class="p">&#34;;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">tax_credits</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Bank</span> <span class="p">{</span>
    <span class="k">has</span> <span class="n">Ident</span>   <span class="nv">$!ident</span>     <span class="nb">handles</span><span class="p">&lt;</span><span class="s"> name ID </span><span class="p">&gt;;</span>
    <span class="k">has</span> <span class="n">Account</span> <span class="nv">%!accounts</span><span class="p">;</span>

    <span class="k">submethod</span> <span class="nb">BUILD</span> <span class="p">(</span><span class="o">|</span><span class="nb">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$!ident</span> <span class="o">.=</span> <span class="nb">new</span><span class="p">(</span><span class="o">|</span><span class="nb">args</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">add_account</span><span class="p">(</span><span class="n">Account</span> <span class="nv">$account</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">%!accounts</span><span class="p">{</span><span class="nv">$account</span><span class="o">.</span><span class="nf">ID</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$account</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">close_account</span><span class="p">(</span><span class="nb">Str</span> <span class="nv">$ID</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">%!accounts</span><span class="p">{</span><span class="nv">$ID</span><span class="p">}</span> <span class="p">:</span><span class="s">delete</span>
            <span class="p">//</span> <span class="nb">fail</span> <span class="p">&#34;</span><span class="s2">No such account</span><span class="p">&#34;;</span>
    <span class="p">}</span>

    <span class="k">multi</span> <span class="k">method</span> <span class="nf">get_account</span><span class="p">(</span><span class="n">Account::ID</span> <span class="nv">$ID</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">%!accounts</span><span class="p">{</span><span class="nv">$ID</span><span class="p">}</span> <span class="o">//</span> <span class="nb">fail</span> <span class="p">&#34;</span><span class="s2">No such account</span><span class="p">&#34;;</span>
    <span class="p">}</span>

    <span class="k">multi</span> <span class="k">method</span> <span class="nf">get_account</span><span class="p">(</span><span class="nb">Any</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1"># return %!accounts.values.grep({.name ~~ $name});</span>
        <span class="nb">self</span><span class="o">.</span><span class="nf">for_each_account</span><span class="p">({</span><span class="o">.</span><span class="nb">take</span> <span class="k">if</span> <span class="o">.</span><span class="nb">name</span> <span class="o">~~</span> <span class="nv">$name</span><span class="p">});</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">for_each_account</span> <span class="p">(</span><span class="nv">&amp;action_on</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">gather</span> <span class="k">for</span> <span class="nv">%!accounts</span><span class="o">.</span><span class="nb">values</span> <span class="k">-&gt;</span> <span class="nv">$account</span> <span class="k">is</span> <span class="k">rw</span> <span class="p">{</span>
            <span class="nf">action_on</span><span class="p">(</span><span class="nv">$account</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">collect_taxes</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nb">self</span><span class="o">.</span><span class="nf">for_each_account:</span> <span class="p">{</span>
            <span class="k">my</span> <span class="nv">$tax</span> <span class="o">=</span> <span class="o">.</span><span class="nf">calculate_tax</span><span class="p">();</span>
            <span class="o">.</span><span class="nf">withdraw</span><span class="p">(</span><span class="nv">$tax</span><span class="p">);</span>
            <span class="nb">take</span> <span class="o">.</span><span class="s">ID</span> <span class="o">=&gt;</span> <span class="nv">$tax</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nb">report</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">[ </span><span class="p">{</span><span class="nb">self</span><span class="o">.</span><span class="nf">ID</span><span class="p">}</span><span class="s2"> [</span><span class="p">{</span><span class="nb">self</span><span class="o">.</span><span class="nb">name</span><span class="p">}</span><span class="s2">] ]</span><span class="p">&#34;;</span>         <span class="c1"># Or: say &#34;[ $.ID [$.name] ]&#34;;</span>
        <span class="nb">self</span><span class="o">.</span><span class="nf">for_each_account</span><span class="p">(</span><span class="o">*.</span><span class="nf">description</span><span class="o">.</span><span class="nb">say</span><span class="p">);</span>
        <span class="nb">say</span> <span class="p">&#39;&#39;;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Account::Corporate</span>
    <span class="k">is</span> <span class="nc">Account</span>
    <span class="k">does</span> <span class="nc">Taxable</span><span class="o">[</span><span class="s">THRESHOLD</span> <span class="o">=&gt;</span> <span class="mi">1_000_000</span><span class="o">]</span>
<span class="p">{</span>
    <span class="k">has</span> <span class="nb">Str</span> <span class="nv">$.company_ID</span><span class="p">;</span>

    <span class="k">method</span> <span class="nf">tax_credits</span> <span class="p">{</span> <span class="mi">5_000</span> <span class="p">}</span>

    <span class="k">method</span> <span class="nf">description</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nb">callsame</span><span class="p">()</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2">  [</span><span class="nv">$.company_ID</span><span class="s2">]</span><span class="p">&#34;;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>该模块的功能是计算银行存款汇率等。下面使用这个模块：</p>
<ul>
<li>demo</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">use</span> <span class="nn">Bank</span><span class="p">;</span>

<span class="k">my</span> <span class="n">Bank</span> <span class="nv">$bank</span> <span class="o">.=</span> <span class="nb">new</span><span class="p">(:</span><span class="s">ID</span><span class="p">(&#39;</span><span class="s1">123-456-789</span><span class="p">&#39;));</span>

<span class="nv">$bank</span><span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">Leslie Grace</span><span class="p">&#39;)</span>                  <span class="p">);</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">Dana McKenna</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span><span class="mi">10_000</span><span class="p">));</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">AstroDynamic</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span>   <span class="mf">2e7</span><span class="p">));</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">Jan van Quod</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span> <span class="mi">9_999</span><span class="p">));</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">OmniCorp LLC</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span>   <span class="mf">1e6</span><span class="p">));</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nb">report</span><span class="p">;</span>

<span class="nv">$bank</span><span class="o">.</span><span class="nf">get_account</span><span class="p">(&#39;</span><span class="s1">AAAA00003</span><span class="p">&#39;)</span><span class="o">.</span><span class="nf">deposit</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nf">get_account</span><span class="p">(&#39;</span><span class="s1">Jan van Quod</span><span class="p">&#39;)</span><span class="o">».</span><span class="nf">deposit</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nf">get_account</span><span class="p">(/</span><span class="sr">D</span><span class="ni">.</span><span class="sr">na</span><span class="p">/)</span><span class="o">».</span><span class="nf">deposit</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="c1">#$bank.get_account(*)».deposit(99);</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nb">report</span><span class="p">;</span>

<span class="k">given</span> <span class="nv">$bank</span><span class="o">.</span><span class="nf">close_account</span><span class="p">(&#39;</span><span class="s1">AAAA00005</span><span class="p">&#39;)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Closed </span><span class="nv">$^account</span><span class="o">.</span><span class="nf">perl</span><span class="p">()</span><span class="s2">\n</span><span class="p">&#34;;</span>
    <span class="nv">$bank</span><span class="o">.</span><span class="nb">report</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$bank</span><span class="o">.</span><span class="nf">close_account</span><span class="p">(&#39;</span><span class="s1">ZZZZ99999</span><span class="p">&#39;);</span>

<span class="nv">$bank</span><span class="o">.</span><span class="nf">get_account</span><span class="p">(&#39;</span><span class="s1">AAAA00001</span><span class="p">&#39;)</span><span class="o">.</span><span class="nf">withdraw</span><span class="p">(</span><span class="mi">1001</span><span class="p">);</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nb">report</span><span class="p">;</span>
</code></pre></div><p>输出：</p>
<pre><code>[ 123-456-789 [????] ]
AAAA00004 (Jan van Quod): balance=9999
AAAA00001 (Leslie Grace): balance=0
AAAA00005 (OmniCorp LLC): balance=1000000
AAAA00002 (Dana McKenna): balance=10000
AAAA00003 (AstroDynamic): balance=20000000

[ 123-456-789 [????] ]
AAAA00004 (Jan van Quod): balance=10001
AAAA00001 (Leslie Grace): balance=0
AAAA00005 (OmniCorp LLC): balance=1000000
AAAA00002 (Dana McKenna): balance=10002
AAAA00003 (AstroDynamic): balance=20000102

Closed Account.new(name =&gt; &quot;OmniCorp LLC&quot;, balance =&gt; 1000000e0, ID =&gt; &quot;AAAA00005&quot;, tax_record =&gt; {}&lt;&gt;)

[ 123-456-789 [????] ]
AAAA00004 (Jan van Quod): balance=10001
AAAA00001 (Leslie Grace): balance=0
AAAA00002 (Dana McKenna): balance=10002
AAAA00003 (AstroDynamic): balance=20000102

No such account
  in method close_account at ~/.rakudobrew/moar-nom/install/share/raku/site/lib/Bank.pm:67

Actually thrown at:
  in block &lt;unit&gt; at ~/04.bank_demo.pl:26
[Finished in 0.768s]
</code></pre><ul>
<li>demo_inheritance</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">sub</span> <span class="nf">show</span> <span class="p">(</span><span class="nv">$text</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#39;&#39;;</span>
    <span class="nb">say</span> <span class="p">(&#39;</span><span class="s1">____/ </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$text</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1"> \_________________________________________________</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">substr</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">50</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">use</span> <span class="nn">Bank</span><span class="p">;</span>

<span class="k">my</span> <span class="n">Bank</span> <span class="nv">$bank</span> <span class="o">.=</span> <span class="nb">new</span><span class="p">(:</span><span class="s">ID</span><span class="p">(&#39;</span><span class="s1">123-456-789</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">Bank of Evil</span><span class="p">&#39;));</span>

<span class="nv">$bank</span><span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">Leslie Grace</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span> <span class="mi">1_000</span><span class="p">));</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">Dana McKenna</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span><span class="mi">10_000</span><span class="p">));</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">Jan van Quod</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span> <span class="mi">9_999</span><span class="p">));</span>

<span class="nv">$bank</span><span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account::Corporate</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">AstroDynamic</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span><span class="mf">2e7</span><span class="p">)</span> <span class="p">:</span><span class="s">company_ID</span><span class="p">(&#39;</span><span class="s1">ASDY</span><span class="p">&#39;));</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account::Corporate</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">OmniCorp LLC</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span><span class="mf">1e6</span><span class="p">)</span> <span class="p">:</span><span class="s">company_ID</span><span class="p">(&#39;</span><span class="s1">OMNI</span><span class="p">&#39;));</span>

<span class="n">show</span> <span class="p">&#39;</span><span class="s1">Status</span><span class="p">&#39;;</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nb">report</span><span class="p">;</span>

<span class="n">show</span> <span class="p">&#39;</span><span class="s1">Taxes collected</span><span class="p">&#39;;</span>
<span class="o">.</span><span class="nb">say</span> <span class="k">for</span> <span class="nv">$bank</span><span class="o">.</span><span class="nf">collect_taxes</span><span class="p">();</span>

<span class="n">show</span> <span class="p">&#39;</span><span class="s1">Status</span><span class="p">&#39;;</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nb">report</span><span class="p">;</span>

<span class="nv">$bank</span><span class="o">.</span><span class="nf">collect_taxes</span><span class="p">();</span>

<span class="n">show</span> <span class="p">&#39;</span><span class="s1">Tax records</span><span class="p">&#39;;</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nf">for_each_account</span><span class="p">({</span> <span class="nb">say</span> <span class="o">.</span><span class="nb">name</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">: </span><span class="p">&#39;</span><span class="o">,</span> <span class="o">.</span><span class="nf">tax_record</span> <span class="p">});</span>

<span class="n">show</span> <span class="p">&#39;</span><span class="s1">Culling acounts</span><span class="p">&#39;;</span>
<span class="k">given</span> <span class="nv">$bank</span> <span class="p">{</span>
    <span class="o">.</span><span class="nf">for_each_account:</span> <span class="p">{</span>
        <span class="o">.</span><span class="nf">close_account</span><span class="p">(</span><span class="nv">$^account</span><span class="o">.</span><span class="nf">ID</span><span class="p">)</span><span class="o">.</span><span class="nb">say</span>
            <span class="k">if</span> <span class="nv">$^account</span><span class="o">.</span><span class="nf">balance</span> <span class="o">&lt;</span> <span class="mi">10_000</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">show</span> <span class="p">&#39;</span><span class="s1">Status</span><span class="p">&#39;;</span>
<span class="nv">$bank</span><span class="o">.</span><span class="nb">report</span><span class="p">;</span>
</code></pre></div><p>输出：</p>
<pre><code>____/ Status \____________________________________
[ 123-456-789 [Bank of Evil] ]
AAAA00004 (AstroDynamic): balance=20000000  [ASDY]
AAAA00001 (Leslie Grace): balance=1000
AAAA00005 (OmniCorp LLC): balance=1000000  [OMNI]
AAAA00002 (Dana McKenna): balance=10000
AAAA00003 (Jan van Quod): balance=9999


____/ Taxes collected \___________________________
AAAA00004 =&gt; 5000
AAAA00001 =&gt; 10
AAAA00005 =&gt; 5000
AAAA00002 =&gt; 100
AAAA00003 =&gt; 99.99

____/ Status \____________________________________
[ 123-456-789 [Bank of Evil] ]
AAAA00004 (AstroDynamic): balance=19995000  [ASDY]
AAAA00001 (Leslie Grace): balance=990
AAAA00005 (OmniCorp LLC): balance=995000  [OMNI]
AAAA00002 (Dana McKenna): balance=9900
AAAA00003 (Jan van Quod): balance=9899.01

____/ Tax records \_______________________________
AstroDynamic: Instant:1440413601.447466 =&gt; 5000, Instant:1440413601.463112 =&gt; 5000
Leslie Grace: Instant:1440413601.450753 =&gt; 10, Instant:1440413601.465823 =&gt; 9.9
OmniCorp LLC: Instant:1440413601.452933 =&gt; 5000, Instant:1440413601.468346 =&gt; 4950
Dana McKenna: Instant:1440413601.454860 =&gt; 100, Instant:1440413601.470238 =&gt; 99
Jan van Quod: Instant:1440413601.457399 =&gt; 99.99, Instant:1440413601.471551 =&gt; 98.9901
____/ Culling acounts \___________________________
Account.new(name =&gt; &quot;Leslie Grace&quot;, balance =&gt; 980.1, ID =&gt; &quot;AAAA00001&quot;, tax_record =&gt; {&quot;Instant:1440413601.450753&quot; =&gt; 10.0, &quot;Instant:1440413601.465823&quot; =&gt; 9.9}&lt;&gt;)
Account.new(name =&gt; &quot;Dana McKenna&quot;, balance =&gt; 9801.0, ID =&gt; &quot;AAAA00002&quot;, tax_record =&gt; {&quot;Instant:1440413601.454860&quot; =&gt; 100.0, &quot;Instant:1440413601.470238&quot; =&gt; 99.0}&lt;&gt;)
Account.new(name =&gt; &quot;Jan van Quod&quot;, balance =&gt; 9800.0199, ID =&gt; &quot;AAAA00003&quot;, tax_record =&gt; {&quot;Instant:1440413601.457399&quot; =&gt; 99.99, &quot;Instant:1440413601.471551&quot; =&gt; 98.9901}&lt;&gt;)

____/ Status \____________________________________
[ 123-456-789 [Bank of Evil] ]
AAAA00004 (AstroDynamic): balance=19990000  [ASDY]
AAAA00005 (OmniCorp LLC): balance=990050  [OMNI]

[Finished in 0.817s]
</code></pre><ul>
<li>demo_unary_dot</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">use</span> <span class="nn">Bank</span><span class="p">;</span>

<span class="k">my</span> <span class="n">Bank</span> <span class="nv">$bank</span> <span class="o">.=</span> <span class="nb">new</span><span class="p">(:</span><span class="s">ID</span><span class="p">(&#39;</span><span class="s1">123-456-789</span><span class="p">&#39;));</span>

<span class="k">given</span> <span class="nv">$bank</span> <span class="p">{</span>
    <span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">Leslie Grace</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span> <span class="mi">1_000</span><span class="p">));</span>
    <span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">Dana McKenna</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span><span class="mi">10_000</span><span class="p">));</span>
    <span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">AstroDynamic</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span>   <span class="mf">2e7</span><span class="p">));</span>
    <span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">Jan van Quod</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span> <span class="mi">9_999</span><span class="p">));</span>
    <span class="o">.</span><span class="nf">add_account:</span> <span class="n">Account</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">OmniCorp LLC</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">balance</span><span class="p">(</span>   <span class="mf">1e6</span><span class="p">));</span>
    <span class="o">.</span><span class="nb">report</span><span class="p">;</span>

    <span class="o">.</span><span class="nf">get_account</span><span class="p">(&#39;</span><span class="s1">AAAA00003</span><span class="p">&#39;)</span><span class="o">.</span><span class="nf">deposit</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
    <span class="o">.</span><span class="nb">report</span><span class="p">;</span>

    <span class="nb">say</span> <span class="o">.</span><span class="nf">close_account</span><span class="p">(&#39;</span><span class="s1">AAAA00005</span><span class="p">&#39;);</span>
    <span class="o">.</span><span class="nb">report</span><span class="p">;</span>

    <span class="o">.</span><span class="nf">get_account</span><span class="p">(&#39;</span><span class="s1">AAAA00001</span><span class="p">&#39;)</span><span class="o">.</span><span class="nf">withdraw</span><span class="p">(</span><span class="mi">1001</span><span class="p">);</span>
    <span class="o">.</span><span class="nb">report</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>输出：</p>
<pre><code>[ 123-456-789 [????] ]
AAAA00004 (Jan van Quod): balance=9999
AAAA00001 (Leslie Grace): balance=1000
AAAA00005 (OmniCorp LLC): balance=1000000
AAAA00002 (Dana McKenna): balance=10000
AAAA00003 (AstroDynamic): balance=20000000

[ 123-456-789 [????] ]
AAAA00004 (Jan van Quod): balance=9999
AAAA00001 (Leslie Grace): balance=1000
AAAA00005 (OmniCorp LLC): balance=1000000
AAAA00002 (Dana McKenna): balance=10000
AAAA00003 (AstroDynamic): balance=20000100

Account.new(name =&gt; &quot;OmniCorp LLC&quot;, balance =&gt; 1000000e0, ID =&gt; &quot;AAAA00005&quot;, tax_record =&gt; {}&lt;&gt;)
[ 123-456-789 [????] ]
AAAA00004 (Jan van Quod): balance=9999
AAAA00001 (Leslie Grace): balance=1000
AAAA00002 (Dana McKenna): balance=10000
AAAA00003 (AstroDynamic): balance=20000100

Insufficient funds to withdraw 1001
  in method withdraw at ~/.rakudobrew/moar-nom/install/share/raku/site/lib/Bank.pm:43
  in block &lt;unit&gt; at ~04.bank_demo_unary_dot.pl:22

[Finished in 0.738s]
</code></pre><h2 id="lzw">LZW</h2>
<p>LZW 算法:</p>
<ul>
<li>demo</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">sub</span> <span class="nf">compress</span><span class="p">(</span><span class="nb">Str</span> <span class="nv">$uncompressed</span> <span class="k">--&gt;</span> <span class="nb">List</span><span class="p">)</span>  <span class="p">{</span>
    <span class="c1"># Build a look-up table of encoded representations</span>
    <span class="c1"># (each ASCII char represented by its equivalent codepoint)</span>
    <span class="k">my</span> <span class="nv">%code_for</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span> <span class="nv">$^ASCII</span><span class="o">.</span><span class="s">chr</span> <span class="o">=&gt;</span> <span class="nv">$^ASCII</span> <span class="p">}</span>, <span class="o">^</span><span class="mi">256</span><span class="p">;</span>

    <span class="c1"># Loop and collect each encoding...</span>
    <span class="k">gather</span> <span class="p">{</span>
        <span class="c1"># Track which characters we&#39;ve seen but not yet encoded</span>
        <span class="k">my</span> <span class="nv">$already_seen</span> <span class="o">=</span> <span class="p">&#34;&#34;;</span>

        <span class="c1"># Walk through each single character...</span>
        <span class="k">for</span> <span class="nv">$uncompressed</span><span class="o">.</span><span class="nb">comb</span> <span class="k">-&gt;</span> <span class="nv">$next_char</span> <span class="p">{</span>
            <span class="c1"># Now we&#39;ve seen that next character as well</span>
            <span class="k">my</span> <span class="nv">$now_seen</span> <span class="o">=</span> <span class="nv">$already_seen</span> <span class="o">~</span> <span class="nv">$next_char</span><span class="p">;</span>

            <span class="c1"># If new char sequence is known, keep looking</span>
            <span class="k">if</span> <span class="nv">%code_for</span><span class="p">{</span><span class="nv">$now_seen</span><span class="p">}:</span><span class="s">exists</span> <span class="p">{</span>
                <span class="nv">$already_seen</span> <span class="o">=</span> <span class="nv">$now_seen</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1"># Otherwise, we have an unknown sequence of chars</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="c1"># Emit encoding for what we&#39;ve previously seen</span>
                <span class="nb">take</span> <span class="nv">%code_for</span><span class="p">{</span><span class="nv">$already_seen</span><span class="p">};</span>
                <span class="c1"># Add encoding for new unknown sequence to table</span>
                <span class="nv">%code_for</span><span class="p">{</span><span class="nv">$now_seen</span><span class="p">}</span> <span class="o">=</span> <span class="nv">%code_for</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span>
                <span class="c1"># Restart the current sequence from this char</span>
                <span class="nv">$already_seen</span> <span class="o">=</span> <span class="nv">$next_char</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1"># Emit the encoding for the final sequence (if any)</span>
        <span class="nb">take</span> <span class="nv">%code_for</span><span class="p">{</span><span class="nv">$already_seen</span><span class="p">}</span> <span class="k">if</span> <span class="nv">$already_seen</span> <span class="ow">ne</span> <span class="p">&#34;&#34;;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># Convert to codepoints...</span>
<span class="k">my</span> <span class="nv">@codes</span> <span class="o">=</span> <span class="nf">compress</span><span class="p">(&#39;</span><span class="s1">To be or not to be. That be the question, matey!</span><span class="p">&#39;);</span>
<span class="nb">say</span> <span class="nv">@codes</span><span class="p">;</span>
<span class="n">separator</span><span class="p">;</span>

<span class="c1"># Emit as characters...</span>
<span class="nb">say</span> <span class="nv">@codes</span><span class="o">».</span><span class="nb">chr</span><span class="p">;</span>
<span class="n">separator</span><span class="p">;</span>

<span class="c1"># Convert to a binary sequence...</span>
<span class="k">my</span> <span class="nv">$bits_per_code</span> <span class="o">=</span> <span class="nv">@codes</span><span class="o">.</span><span class="nb">max</span><span class="o">.</span><span class="nb">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="nb">ceiling</span><span class="p">();</span>
<span class="k">my</span> <span class="nv">$format</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">%0</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$bits_per_code</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">b</span><span class="p">&#39;;</span>
<span class="k">my</span> <span class="nv">$bits</span> <span class="o">=</span> <span class="nv">@codes</span><span class="o">».</span><span class="nb">fmt</span><span class="p">(</span><span class="nv">$format</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$bits</span><span class="p">;</span>
<span class="n">separator</span><span class="p">;</span>

<span class="nb">say</span> <span class="nv">$bits</span><span class="o">.</span><span class="nb">comb</span><span class="p">(/</span><span class="ni">.</span><span class="o">**</span><span class="mi">1</span><span class="o">..</span><span class="mi">7</span><span class="p">/)</span><span class="o">.</span><span class="nb">map</span><span class="p">({:</span><span class="mi">2</span><span class="p">(</span><span class="nv">$^bitpattern</span><span class="p">)</span><span class="o">.</span><span class="nb">chr</span><span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
<span class="n">separator</span><span class="p">;</span>

<span class="k">sub</span> <span class="nf">separator</span> <span class="p">{</span> <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">_</span><span class="p">&#39;</span> <span class="nb">x</span> <span class="mi">50</span> <span class="p">}</span>
</code></pre></div><p>输出：</p>
<pre><code>84 111 32 98 101 32 111 114 32 110 111 116 32 116 257 259 46 32 84 104 97 267 259 268 104 260 113 117 101 115 116 105 111 110 44 32 109 276 101 121 33
__________________________________________________
T o   b e   o r   n o t   t ā ă .   T h a ċ ă Č h Ą q u e s t i o n ,   m Ĕ e y !
__________________________________________________
001010100001101111000100000001100010001100101000100000001101111001110010000100000001101110001101111001110100000100000001110100100000001100000011000101110000100000001010100001101000001100001100001011100000011100001100001101000100000100001110001001110101001100101001110011001110100001101001001101111001101110000101100000100000001101101100010100001100101001111001000100001
__________________________________________________
x@1QoB\7NAt@0\
C aBp4 CDu'h4Ms8,l(2O
__________________________________________________
[Finished in 0.429s]
</code></pre><ul>
<li>LZW_functional</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="c1"># To compress a string...</span>
<span class="k">sub</span> <span class="nf">compress</span><span class="p">(</span><span class="nb">Str</span> <span class="nv">$uncompressed</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1"># Encode the character list via a dictionary, from the start</span>
    <span class="nb">encode</span><span class="p">(</span> <span class="nv">$uncompressed</span><span class="o">.</span><span class="nb">comb</span><span class="o">,</span> <span class="s">code</span> <span class="o">=&gt;</span> <span class="nb">hash</span><span class="p">(</span><span class="nb">map</span> <span class="p">{</span><span class="nv">$^ASCII</span><span class="o">.</span><span class="s">chr</span> <span class="o">=&gt;</span> <span class="nv">$^ASCII</span><span class="p">}</span>, <span class="o">^</span><span class="mi">256</span><span class="p">)</span><span class="o">,</span> <span class="s">seen</span> <span class="o">=&gt;</span> <span class="p">&#34;&#34;</span> <span class="p">)</span>
<span class="p">}</span>

<span class="c1"># Encode an empty list where nothing already seen as nothing</span>
<span class="k">multi</span> <span class="nb">encode</span><span class="p">(</span><span class="o">[],</span> <span class="o">:</span><span class="nv">%code</span><span class="o">,</span> <span class="o">:</span><span class="nv">$seen</span> <span class="k">where</span> <span class="p">&#34;&#34;)</span> <span class="p">{}</span>

<span class="c1"># Encode an empty list where something already seen by look-up</span>
<span class="k">multi</span> <span class="nb">encode</span><span class="p">(</span><span class="o">[],</span> <span class="o">:</span><span class="nv">%code</span><span class="o">,</span> <span class="o">:</span><span class="nv">$seen</span><span class="p">)</span>          <span class="p">{</span> <span class="nv">%code</span><span class="p">{</span><span class="nv">$seen</span><span class="p">}</span> <span class="p">}</span>

<span class="c1"># Encode an list of one or more uncompressed characters...</span>
<span class="k">multi</span> <span class="nb">encode</span><span class="p">(</span><span class="o">[</span><span class="nv">$next</span><span class="o">,</span> <span class="o">*</span><span class="nv">@uncompressed</span><span class="o">],</span> <span class="o">:</span><span class="nv">%code</span><span class="o">,</span> <span class="o">:</span><span class="nv">$seen</span><span class="p">)</span>  <span class="p">{</span>
    <span class="c1"># If [already-seen plus next char] is a known sequence...</span>
    <span class="nv">%code</span><span class="p">{</span> <span class="nv">$seen</span><span class="o">~</span><span class="nv">$next</span> <span class="p">}:</span><span class="s">exists</span>
         <span class="c1"># Then encode all of that together</span>
        <span class="o">??</span> <span class="nb">encode</span><span class="p">(</span><span class="nv">@uncompressed</span><span class="o">,</span> <span class="o">:</span><span class="nv">%code</span><span class="o">,</span> <span class="s">seen</span> <span class="o">=&gt;</span> <span class="nv">$seen</span><span class="o">~</span><span class="nv">$next</span><span class="p">)</span>

         <span class="c1"># Else emit encoding for the already-seen sequence</span>
        <span class="o">!!</span> <span class="p">(</span> <span class="nv">%code</span><span class="p">{</span><span class="nv">$seen</span><span class="p">}</span><span class="o">,</span>
             <span class="c1"># Plus the encoding for the rest of the string...</span>
             <span class="nb">encode</span><span class="p">(</span> <span class="nv">@uncompressed</span><span class="o">,</span>
                     <span class="c1"># Add encoding for new sequence to table</span>
                     <span class="s">code</span> <span class="o">=&gt;</span> <span class="nv">%</span><span class="p">(</span> <span class="nv">%code</span>, <span class="nv">$seen</span><span class="o">~</span><span class="nv">$next</span> <span class="o">=&gt;</span> <span class="nv">%code</span><span class="o">.</span><span class="nb">elems</span> <span class="p">)</span><span class="o">,</span>
                     <span class="c1"># Continue encoding from next character</span>
                     <span class="s">seen</span> <span class="o">=&gt;</span> <span class="nv">$next</span>
             <span class="p">)</span>
           <span class="p">)</span>
<span class="p">}</span>

<span class="c1"># Convert to codepoints...</span>
<span class="k">my</span> <span class="nv">@codes</span> <span class="o">=</span> <span class="nf">compress</span><span class="p">(&#39;</span><span class="s1">To be or not to be. That be the question, matey!</span><span class="p">&#39;);</span>
<span class="nb">say</span> <span class="nv">@codes</span><span class="p">;</span>
<span class="n">separator</span><span class="p">;</span>

<span class="c1"># Emit as characters...</span>
<span class="nb">say</span> <span class="nv">@codes</span><span class="o">».</span><span class="nb">chr</span><span class="p">;</span>
<span class="n">separator</span><span class="p">;</span>

<span class="c1"># Convert to a binary sequence...</span>
<span class="k">my</span> <span class="nv">$bits_per_code</span> <span class="o">=</span> <span class="nv">@codes</span><span class="o">.</span><span class="nb">max</span><span class="o">.</span><span class="nb">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="nb">ceiling</span><span class="p">();</span>
<span class="k">my</span> <span class="nv">$format</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">%0</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$bits_per_code</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">b</span><span class="p">&#39;;</span>
<span class="k">my</span> <span class="nv">$bits</span> <span class="o">=</span> <span class="nv">@codes</span><span class="o">».</span><span class="nb">fmt</span><span class="p">(</span><span class="nv">$format</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$bits</span><span class="p">;</span>
<span class="n">separator</span><span class="p">;</span>

<span class="nb">say</span> <span class="nv">$bits</span><span class="o">.</span><span class="nb">comb</span><span class="p">(/</span><span class="ni">.</span><span class="o">**</span><span class="mi">1</span><span class="o">..</span><span class="mi">7</span><span class="p">/)</span><span class="o">.</span><span class="nb">map</span><span class="p">({:</span><span class="mi">2</span><span class="p">(</span><span class="nv">$^bitpattern</span><span class="p">)</span><span class="o">.</span><span class="nb">chr</span><span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
<span class="n">separator</span><span class="p">;</span>

<span class="k">sub</span> <span class="nf">separator</span> <span class="p">{</span> <span class="nb">say</span> <span class="p">&#39;</span><span class="s1">_</span><span class="p">&#39;</span> <span class="nb">x</span> <span class="mi">50</span> <span class="p">}</span>
</code></pre></div><p>输出：</p>
<pre><code>84 111 32 98 101 32 111 114 32 110 111 116 32 116 257 259 46 32 84 104 97 267 259 268 104 260 113 117 101 115 116 105 111 110 44 32 109 276 101 121 33
__________________________________________________
T o   b e   o r   n o t   t ā ă .   T h a ċ ă Č h Ą q u e s t i o n ,   m Ĕ e y !
__________________________________________________
001010100001101111000100000001100010001100101000100000001101111001110010000100000001101110001101111001110100000100000001110100100000001100000011000101110000100000001010100001101000001100001100001011100000011100001100001101000100000100001110001001110101001100101001110011001110100001101001001101111001101110000101100000100000001101101100010100001100101001111001000100001
__________________________________________________
x@1QoB\7NAt@0\
C aBp4 CDu'h4Ms8,l(2O
__________________________________________________
[Finished in 0.658s]
</code></pre><ul>
<li>validation_concurrent</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">my</span> <span class="nv">@records</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{</span> <span class="p">:</span><span class="s">Name</span><span class="p">&lt;</span><span class="s">Damian Conway</span><span class="p">&gt;</span><span class="o">,</span> <span class="p">:</span><span class="s">Age</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">ID</span><span class="p">(&#39;</span><span class="s1">00012345</span><span class="p">&#39;)</span>  <span class="p">}</span><span class="o">,</span>
    <span class="p">{</span> <span class="p">:</span><span class="s">Name</span><span class="p">&lt;</span><span class="s">Leslie Duvall</span><span class="p">&gt;</span><span class="o">,</span> <span class="p">:</span><span class="s">Age</span><span class="p">(</span><span class="mi">29</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">ID</span><span class="p">(&#39;</span><span class="s1">668</span><span class="p">&#39;)</span>       <span class="p">}</span><span class="o">,</span>
    <span class="p">{</span> <span class="p">:</span><span class="s">Name</span><span class="p">&lt;</span><span class="s">Sam Georgious</span><span class="p">&gt;</span><span class="o">,</span> <span class="p">:</span><span class="s">Age</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">ID</span><span class="p">(&#39;</span><span class="s1">00000007</span><span class="p">&#39;)</span>  <span class="p">}</span><span class="o">,</span>
<span class="p">);</span>

<span class="k">sub</span> <span class="nf">normalize_data</span> <span class="p">(</span><span class="nb">Hash</span> <span class="nv">$record</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$record</span><span class="p">&lt;</span><span class="s">Name</span><span class="p">&gt;</span>  <span class="o">.=</span> <span class="nb">subst</span><span class="p">(/&lt;</span><span class="nb">lower</span><span class="p">&gt;/</span><span class="o">,</span><span class="p">{</span><span class="nv">$&lt;lower&gt;</span><span class="o">.</span><span class="nb">uc</span><span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
    <span class="nv">$record</span><span class="p">&lt;</span><span class="s">Age</span><span class="p">&gt;</span> <span class="nb">max</span><span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
    <span class="nv">$record</span><span class="p">&lt;</span><span class="s">ID</span><span class="p">&gt;</span>    <span class="o">.=</span> <span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%08d</span><span class="p">&#39;);</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nb">report</span> <span class="p">(</span><span class="nv">$outcome</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">\tInvalid record (</span><span class="nv">$outcome</span><span class="s2">)</span><span class="p">&#34;;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">invalid_name</span> <span class="p">(</span><span class="nv">$rec</span><span class="p">)</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">Bad name: </span><span class="nv">$rec</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$rec</span><span class="p">&lt;</span><span class="s">Name</span><span class="p">&gt;</span> <span class="o">!~~</span> <span class="p">/</span><span class="se">\S</span><span class="p">/;</span>        <span class="p">}</span>
<span class="k">sub</span> <span class="nf">invalid_age</span>  <span class="p">(</span><span class="nv">$rec</span><span class="p">)</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">Bad age:  </span><span class="nv">$rec</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$rec</span><span class="p">&lt;</span><span class="s">Age</span><span class="p">&gt;</span>  <span class="o">&lt;</span> <span class="mi">18</span><span class="p">;</span>            <span class="p">}</span>
<span class="k">sub</span> <span class="nf">invalid_ID</span>   <span class="p">(</span><span class="nv">$rec</span><span class="p">)</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">Bad ID:   </span><span class="nv">$rec</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$rec</span><span class="p">&lt;</span><span class="s">ID</span><span class="p">&gt;</span>   <span class="o">!~~</span> <span class="p">/</span><span class="ni">^</span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">8</span><span class="ni">$</span><span class="p">/;</span> <span class="p">}</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">Validating...</span><span class="p">&#39;;</span>
<span class="k">my</span> <span class="nv">@invalidations</span> <span class="o">=</span> <span class="p">(</span>
    <span class="nv">@records</span><span class="o">».</span><span class="nv">&amp;invalid_name</span><span class="o">,</span>
    <span class="nv">@records</span><span class="o">».</span><span class="nv">&amp;invalid_age</span><span class="o">,</span>
    <span class="nv">@records</span><span class="o">».</span><span class="nv">&amp;invalid_ID</span><span class="o">,</span>
<span class="p">);</span>

<span class="nv">@invalidations</span><span class="o">».</span><span class="nv">&amp;report</span><span class="p">;</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">Normalizing...</span><span class="p">&#39;;</span>
<span class="nv">@records</span><span class="o">».</span><span class="nv">&amp;normalize_data</span><span class="p">;</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">Revalidating...</span><span class="p">&#39;;</span>

<span class="nv">@invalidations</span> <span class="o">=</span> <span class="p">(</span>
    <span class="nv">@records</span><span class="o">».</span><span class="nv">&amp;invalid_name</span><span class="o">,</span>
    <span class="nv">@records</span><span class="o">».</span><span class="nv">&amp;invalid_age</span><span class="o">,</span>
    <span class="nv">@records</span><span class="o">».</span><span class="nv">&amp;invalid_ID</span><span class="o">,</span>
<span class="p">);</span>

<span class="nv">@invalidations</span><span class="o">».</span><span class="nv">&amp;report</span><span class="p">;</span>
</code></pre></div><p>输出：</p>
<pre><code>Validating...
postcircumfix:&lt;{ }&gt; not defined for type Str
</code></pre><ul>
<li>validation_imperative</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">my</span> <span class="nv">@records</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{</span> <span class="p">:</span><span class="s">Name</span><span class="p">&lt;</span><span class="s">Damian Conway</span><span class="p">&gt;</span><span class="o">,</span> <span class="p">:</span><span class="s">Age</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">ID</span><span class="p">(&#39;</span><span class="s1">00012345</span><span class="p">&#39;)</span>  <span class="p">}</span><span class="o">,</span>
    <span class="p">{</span> <span class="p">:</span><span class="s">Name</span><span class="p">&lt;</span><span class="s">Leslie Duvall</span><span class="p">&gt;</span><span class="o">,</span> <span class="p">:</span><span class="s">Age</span><span class="p">(</span><span class="mi">29</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">ID</span><span class="p">(&#39;</span><span class="s1">668</span><span class="p">&#39;)</span>       <span class="p">}</span><span class="o">,</span>
    <span class="p">{</span> <span class="p">:</span><span class="s">Name</span><span class="p">&lt;</span><span class="s">Sam Georgious</span><span class="p">&gt;</span><span class="o">,</span> <span class="p">:</span><span class="s">Age</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">ID</span><span class="p">(&#39;</span><span class="s1">00000007</span><span class="p">&#39;)</span>  <span class="p">}</span><span class="o">,</span>
<span class="p">);</span>

<span class="k">sub</span> <span class="nf">normalize_data</span> <span class="p">(</span><span class="nb">Hash</span> <span class="nv">$record</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$record</span><span class="p">&lt;</span><span class="s">Name</span><span class="p">&gt;</span>  <span class="o">.=</span> <span class="nb">subst</span><span class="p">(/&lt;</span><span class="nb">lower</span><span class="p">&gt;/</span><span class="o">,</span><span class="p">{</span><span class="nv">$&lt;lower&gt;</span><span class="o">.</span><span class="nb">uc</span><span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
    <span class="nv">$record</span><span class="p">&lt;</span><span class="s">Age</span><span class="p">&gt;</span> <span class="nb">max</span><span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
    <span class="nv">$record</span><span class="p">&lt;</span><span class="s">ID</span><span class="p">&gt;</span>    <span class="o">.=</span> <span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%08d</span><span class="p">&#39;);</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nb">report</span> <span class="p">(</span><span class="nv">$outcome</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">\tInvalid record (</span><span class="nv">$outcome</span><span class="s2">)</span><span class="p">&#34;;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">invalid_name</span> <span class="p">(</span><span class="nv">$rec</span><span class="p">)</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">Bad name: </span><span class="nv">$rec</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$rec</span><span class="p">&lt;</span><span class="s">Name</span><span class="p">&gt;</span> <span class="o">!~~</span> <span class="p">/</span><span class="se">\S</span><span class="p">/;</span>        <span class="p">}</span>
<span class="k">sub</span> <span class="nf">invalid_age</span>  <span class="p">(</span><span class="nv">$rec</span><span class="p">)</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">Bad age:  </span><span class="nv">$rec</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$rec</span><span class="p">&lt;</span><span class="s">Age</span><span class="p">&gt;</span>  <span class="o">&lt;</span> <span class="mi">18</span><span class="p">;</span>            <span class="p">}</span>
<span class="k">sub</span> <span class="nf">invalid_ID</span>   <span class="p">(</span><span class="nv">$rec</span><span class="p">)</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">Bad ID:   </span><span class="nv">$rec</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$rec</span><span class="p">&lt;</span><span class="s">ID</span><span class="p">&gt;</span>   <span class="o">!~~</span> <span class="p">/</span><span class="ni">^</span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">8</span><span class="ni">$</span><span class="p">/;</span> <span class="p">}</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">Validating...</span><span class="p">&#39;;</span>
<span class="k">my</span> <span class="nv">@invalidations</span> <span class="o">=</span> <span class="k">gather</span> <span class="k">for</span> <span class="nv">@records</span> <span class="k">-&gt;</span> <span class="nv">$record</span> <span class="p">{</span>
    <span class="nb">take</span> <span class="nf">invalid_name</span><span class="p">(</span><span class="nv">$record</span><span class="p">);</span>
    <span class="nb">take</span> <span class="nf">invalid_age</span><span class="p">(</span><span class="nv">$record</span><span class="p">);</span>
    <span class="nb">take</span> <span class="nf">invalid_ID</span><span class="p">(</span><span class="nv">$record</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span> <span class="nv">@invalidations</span> <span class="k">-&gt;</span> <span class="nv">$errmsg</span> <span class="p">{</span>
    <span class="nb">report</span><span class="p">(</span> <span class="nv">$errmsg</span> <span class="p">);</span>
<span class="p">}</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">Normalizing...</span><span class="p">&#39;;</span>
<span class="k">for</span> <span class="nv">@records</span> <span class="k">-&gt;</span> <span class="nv">$record</span> <span class="p">{</span>
    <span class="nf">normalize_data</span><span class="p">(</span><span class="nv">$record</span><span class="p">);</span>
<span class="p">}</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">Revalidating...</span><span class="p">&#39;;</span>

<span class="nv">@invalidations</span> <span class="o">=</span> <span class="k">gather</span> <span class="k">for</span> <span class="nv">@records</span> <span class="k">-&gt;</span> <span class="nv">$record</span> <span class="p">{</span>
    <span class="nb">take</span> <span class="nf">invalid_name</span><span class="p">(</span><span class="nv">$record</span><span class="p">);</span>
    <span class="nb">take</span> <span class="nf">invalid_age</span><span class="p">(</span><span class="nv">$record</span><span class="p">);</span>
    <span class="nb">take</span> <span class="nf">invalid_ID</span><span class="p">(</span><span class="nv">$record</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span> <span class="nv">@invalidations</span> <span class="k">-&gt;</span> <span class="nv">$errmsg</span> <span class="p">{</span>
    <span class="nb">report</span><span class="p">(</span> <span class="nv">$errmsg</span> <span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>输出：</p>
<pre><code>Validating...
	Invalid record (Bad ID:   Name	Leslie Duvall Age	29 ID	668)
	Invalid record (Bad age:  Name	Sam Georgious Age	-2 ID	00000007)
Normalizing...
Revalidating...
</code></pre><ul>
<li>validation_junctions</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">my</span> <span class="nv">@records</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{</span> <span class="p">:</span><span class="s">Name</span><span class="p">&lt;</span><span class="s">Damian Conway</span><span class="p">&gt;</span><span class="o">,</span> <span class="p">:</span><span class="s">Age</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">ID</span><span class="p">(&#39;</span><span class="s1">00012345</span><span class="p">&#39;)</span>  <span class="p">}</span><span class="o">,</span>
    <span class="p">{</span> <span class="p">:</span><span class="s">Name</span><span class="p">&lt;</span><span class="s">Leslie Duvall</span><span class="p">&gt;</span><span class="o">,</span> <span class="p">:</span><span class="s">Age</span><span class="p">(</span><span class="mi">29</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">ID</span><span class="p">(&#39;</span><span class="s1">668</span><span class="p">&#39;)</span>       <span class="p">}</span><span class="o">,</span>
    <span class="p">{</span> <span class="p">:</span><span class="s">Name</span><span class="p">&lt;</span><span class="s">Sam Georgious</span><span class="p">&gt;</span><span class="o">,</span> <span class="p">:</span><span class="s">Age</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">ID</span><span class="p">(&#39;</span><span class="s1">00000007</span><span class="p">&#39;)</span>  <span class="p">}</span><span class="o">,</span>
<span class="p">);</span>

<span class="k">sub</span> <span class="nf">normalize_data</span> <span class="p">(</span><span class="nb">Hash</span> <span class="nv">$record</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$record</span><span class="p">&lt;</span><span class="s">Name</span><span class="p">&gt;</span>  <span class="o">.=</span> <span class="nb">subst</span><span class="p">(/&lt;</span><span class="nb">lower</span><span class="p">&gt;/</span><span class="o">,</span><span class="p">{</span><span class="nv">$&lt;lower&gt;</span><span class="o">.</span><span class="nb">uc</span><span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
    <span class="nv">$record</span><span class="p">&lt;</span><span class="s">Age</span><span class="p">&gt;</span> <span class="nb">max</span><span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
    <span class="nv">$record</span><span class="p">&lt;</span><span class="s">ID</span><span class="p">&gt;</span>    <span class="o">.=</span> <span class="nb">fmt</span><span class="p">(&#39;</span><span class="s1">%08d</span><span class="p">&#39;);</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nb">report</span> <span class="p">(</span><span class="nv">$outcome</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">\tInvalid record (</span><span class="nv">$outcome</span><span class="s2">)</span><span class="p">&#34;;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">invalid_name</span> <span class="p">(</span><span class="nv">$rec</span><span class="p">)</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">Bad name: </span><span class="nv">$rec</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$rec</span><span class="p">&lt;</span><span class="s">Name</span><span class="p">&gt;</span> <span class="o">!~~</span> <span class="p">/</span><span class="se">\S</span><span class="p">/;</span>        <span class="p">}</span>
<span class="k">sub</span> <span class="nf">invalid_age</span>  <span class="p">(</span><span class="nv">$rec</span><span class="p">)</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">Bad age:  </span><span class="nv">$rec</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$rec</span><span class="p">&lt;</span><span class="s">Age</span><span class="p">&gt;</span>  <span class="o">&lt;</span> <span class="mi">18</span><span class="p">;</span>            <span class="p">}</span>
<span class="k">sub</span> <span class="nf">invalid_ID</span>   <span class="p">(</span><span class="nv">$rec</span><span class="p">)</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">Bad ID:   </span><span class="nv">$rec</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$rec</span><span class="p">&lt;</span><span class="s">ID</span><span class="p">&gt;</span>   <span class="o">!~~</span> <span class="p">/</span><span class="ni">^</span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">8</span><span class="ni">$</span><span class="p">/;</span> <span class="p">}</span>

<span class="k">my</span> <span class="nv">$invalid_record</span> <span class="o">=</span> <span class="nv">&amp;invalid_name</span> <span class="o">|</span> <span class="nv">&amp;invalid_age</span> <span class="o">|</span> <span class="nv">&amp;invalid_ID</span><span class="p">;</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">Validating...</span><span class="p">&#39;;</span>
<span class="nb">report</span><span class="p">(</span> <span class="nv">$invalid_record</span><span class="p">(</span><span class="nb">all</span> <span class="nv">@records</span><span class="p">)</span> <span class="p">);</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">Normalizing...</span><span class="p">&#39;;</span>
<span class="nf">normalize_data</span><span class="p">(</span><span class="nb">all</span> <span class="nv">@records</span><span class="p">);</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">Revalidating...</span><span class="p">&#39;;</span>
<span class="nb">report</span><span class="p">(</span> <span class="nv">$invalid_record</span><span class="p">(</span><span class="nb">all</span> <span class="nv">@records</span><span class="p">)</span> <span class="p">);</span>
</code></pre></div><p>输出：</p>
<pre><code>Validating...
	Invalid record (Bad ID:   Name	Leslie Duvall Age	29 ID	668)
	Invalid record (Bad age:  Name	Sam Georgious Age	-2 ID	00000007)
Normalizing...
Revalidating...
</code></pre><ul>
<li>prime_demo</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">sub</span> <span class="nf">is_prime</span><span class="p">(</span><span class="nb">Int</span> <span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$n</span> <span class="nv">%</span> <span class="nb">all</span><span class="p">(</span><span class="mi">2</span><span class="o">..</span><span class="nv">$n</span><span class="o">.</span><span class="nb">sqrt</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span> <span class="mi">1</span><span class="o">..</span><span class="mi">1001</span> <span class="k">-&gt;</span> <span class="nv">$n</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$n</span><span class="s2"> is prime</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nf">is_prime</span><span class="p">(</span><span class="nv">$n</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>输出：</p>
<pre><code>1 is prime
3 is prime
5 is prime
7 is prime
11 is prime
...
991 is prime
997 is prime
</code></pre><ul>
<li>统计</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">my</span> <span class="nv">@values</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">99</span><span class="p">);</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">mean (a) = </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">mean_a</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">mean (g) = </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">mean_g</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">    mode = </span><span class="p">&#39;</span><span class="o">,</span>   <span class="nb">mode</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">  median = </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">median</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>

<span class="k">sub</span> <span class="nf">mean_a</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">(</span><span class="o">[+]</span> <span class="nv">@list</span><span class="p">)</span> <span class="o">/</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">mean_g</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">(</span><span class="o">[*]</span> <span class="nv">@list</span><span class="p">)</span> <span class="o">**</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nv">@list</span><span class="o">.</span><span class="nb">elems</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nb">mode</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">given</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">Bag</span> <span class="p">{</span>
        <span class="o">.</span><span class="nb">pairs</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span><span class="nv">$^elem</span><span class="o">.</span><span class="nb">value</span> <span class="o">==</span> <span class="o">.</span><span class="nb">values</span><span class="o">.</span><span class="nb">max</span><span class="p">})</span><span class="o">».</span><span class="nb">key</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">median</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">given</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">sort</span> <span class="p">{</span>
        <span class="o">.</span><span class="nb">elems</span> <span class="nv">%%</span> <span class="mi">2</span>
            <span class="o">??</span> <span class="nf">mean_a</span><span class="p">(</span> <span class="o">.[*/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">*/</span><span class="mi">2</span><span class="o">]</span> <span class="p">)</span>
            <span class="o">!!</span>         <span class="o">.[*/</span><span class="mi">2</span><span class="o">]</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>输出：</p>
<pre><code>mean (a) = 10.444444
mean (g) = 4.95872541158849
    mode = 7 4
  median = 5
</code></pre><ul>
<li>stats_hybird</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">my</span> <span class="nv">@values</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">99</span><span class="p">);</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">mean (a) = </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">mean_a</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">mean (g) = </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">mean_g</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">    mode = </span><span class="p">&#39;</span><span class="o">,</span>   <span class="nb">mode</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">  median = </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">median</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>

<span class="k">sub</span> <span class="nf">mean_a</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$sum</span> <span class="o">=</span> <span class="o">[+]</span> <span class="nv">@list</span><span class="p">;</span>
    <span class="k">return</span> <span class="nv">$sum</span> <span class="o">/</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">mean_g</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$product</span> <span class="o">=</span> <span class="o">[*]</span> <span class="nv">@list</span><span class="p">;</span>
    <span class="k">return</span> <span class="nv">$product</span> <span class="o">**</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nv">@list</span><span class="o">.</span><span class="nb">elems</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nb">mode</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$frequencies</span> <span class="o">=</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">Bag</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$list_elems</span>  <span class="o">=</span> <span class="nv">$frequencies</span><span class="o">.</span><span class="nb">pairs</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$max_freq</span>    <span class="o">=</span> <span class="nv">$frequencies</span><span class="o">.</span><span class="nb">values</span><span class="o">.</span><span class="nb">max</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">@max_vals</span>    <span class="o">=</span> <span class="nv">$list_elems</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span><span class="o">.</span><span class="nb">value</span> <span class="o">==</span> <span class="nv">$max_freq</span><span class="p">});</span>

    <span class="k">return</span> <span class="nv">@max_vals</span><span class="o">».</span><span class="nb">key</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">median</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">@sorted</span> <span class="o">=</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
    <span class="k">return</span> <span class="nv">@sorted</span><span class="o">.</span><span class="nb">elems</span> <span class="nv">%%</span> <span class="mi">2</span> <span class="o">??</span> <span class="nf">mean_a</span><span class="p">(</span><span class="nv">@sorted</span><span class="o">.[*/</span><span class="mi">2</span><span class="o">,</span> <span class="o">*/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
                              <span class="o">!!</span>        <span class="nv">@sorted</span><span class="o">.[*/</span><span class="mi">2</span><span class="o">]</span>
<span class="p">}</span>
</code></pre></div><p>输出：</p>
<pre><code>mean (a) = 10.444444
mean (g) = 4.95872541158849
    mode = 7 4
  median = 5
</code></pre><ul>
<li>stats_imperative</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">my</span> <span class="nv">@values</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">99</span><span class="p">);</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">mean (a) = </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">mean_a</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">mean (g) = </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">mean_g</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">    mode = </span><span class="p">&#39;</span><span class="o">,</span>   <span class="nb">mode</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">  median = </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">median</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>

<span class="k">sub</span> <span class="nf">mean_a</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$sum</span><span class="p">;</span>
    <span class="k">for</span> <span class="nv">@list</span> <span class="k">-&gt;</span> <span class="nv">$elem</span> <span class="p">{</span>
        <span class="nv">$sum</span> <span class="o">+=</span> <span class="nv">$elem</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$sum</span> <span class="o">/</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">mean_g</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$product</span><span class="p">;</span>
    <span class="k">for</span> <span class="nv">@list</span> <span class="k">-&gt;</span> <span class="nv">$elem</span> <span class="p">{</span>
        <span class="nv">$product</span> <span class="o">*=</span> <span class="nv">$elem</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$product</span> <span class="o">**</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nv">@list</span><span class="o">.</span><span class="nb">elems</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nb">mode</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">%counts</span><span class="p">;</span>
    <span class="nv">%counts</span><span class="p">{</span><span class="nv">$_</span><span class="p">}</span><span class="o">++</span> <span class="k">for</span> <span class="nv">@list</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$max</span> <span class="o">=</span> <span class="nv">%counts</span><span class="o">.</span><span class="nb">values</span><span class="o">.</span><span class="nb">max</span><span class="p">;</span>
    <span class="k">return</span> <span class="nv">%counts</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">value</span> <span class="o">==</span> <span class="nv">$max</span> <span class="p">})</span><span class="o">».</span><span class="nb">key</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">median</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">@list</span><span class="o">.=</span><span class="nb">sort</span><span class="p">();</span>

    <span class="k">return</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">elems</span> <span class="nv">%%</span> <span class="mi">2</span>
            <span class="o">??</span> <span class="nf">mean_a</span><span class="p">(</span> <span class="nv">@list</span><span class="o">[*/</span><span class="mi">2</span><span class="o">,</span> <span class="o">*/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="p">)</span>
            <span class="o">!!</span>         <span class="nv">@list</span><span class="o">[*/</span><span class="mi">2</span><span class="o">]</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>输出：</p>
<pre><code>mean (a) = 10.444444
mean (g) = 4.95872541158849
    mode = 4 7
  median = 5
</code></pre><ul>
<li>stats_mode_func</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">my</span> <span class="nv">@values</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">99</span><span class="p">);</span>

<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">mean (a) = </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">mean_a</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">mean (g) = </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">mean_g</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">    mode = </span><span class="p">&#39;</span><span class="o">,</span>   <span class="nb">mode</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>
<span class="nb">say</span> <span class="p">&#39;</span><span class="s1">  median = </span><span class="p">&#39;</span><span class="o">,</span> <span class="nf">median</span><span class="p">(</span><span class="nv">@values</span><span class="p">);</span>

<span class="k">sub</span> <span class="nf">mean_a</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">sub</span> <span class="nb">sum</span> <span class="p">{</span> <span class="o">[+]</span> <span class="nv">@list</span> <span class="p">}</span>
    <span class="k">return</span> <span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">mean_g</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">sub</span> <span class="nf">product</span> <span class="p">{</span> <span class="o">[*]</span> <span class="nv">@list</span> <span class="p">}</span>
    <span class="k">return</span> <span class="nf">product</span><span class="p">()</span> <span class="o">**</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nv">@list</span><span class="o">.</span><span class="nb">elems</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nb">mode</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">sub</span> <span class="nf">frequencies</span> <span class="p">{</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">Bag</span>                             <span class="p">}</span>
    <span class="k">sub</span> <span class="nf">list_elems</span>  <span class="p">{</span> <span class="n">frequencies</span><span class="o">.</span><span class="nb">pairs</span>                     <span class="p">}</span>
    <span class="k">sub</span> <span class="nf">max_freq</span>    <span class="p">{</span> <span class="n">frequencies</span><span class="o">.</span><span class="nb">values</span><span class="o">.</span><span class="nb">max</span>                <span class="p">}</span>
    <span class="k">sub</span> <span class="nf">max_vals</span>    <span class="p">{</span> <span class="n">list_elems</span><span class="o">.</span><span class="nb">grep</span><span class="o">:</span> <span class="p">{</span><span class="o">.</span><span class="nb">value</span> <span class="o">==</span> <span class="n">max_freq</span><span class="p">}</span> <span class="p">}</span>

    <span class="k">return</span> <span class="n">max_vals</span><span class="o">».</span><span class="nb">keys</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">median</span> <span class="p">(</span><span class="o">*</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">sub</span> <span class="nf">sorted</span> <span class="p">{</span> <span class="nv">@list</span><span class="o">.</span><span class="nb">sort</span> <span class="p">}</span>
    <span class="k">return</span> <span class="n">sorted</span><span class="o">.</span><span class="nb">elems</span> <span class="nv">%%</span> <span class="mi">2</span>
                <span class="o">??</span> <span class="nf">mean_a</span><span class="p">(</span><span class="n">sorted</span><span class="o">.[*/</span><span class="mi">2</span><span class="o">,</span> <span class="o">*/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
                <span class="o">!!</span>        <span class="n">sorted</span><span class="o">.[*/</span><span class="mi">2</span><span class="o">]</span>
<span class="p">}</span>
</code></pre></div><p>输出：</p>
<pre><code>mean (a) = 10.444444
mean (g) = 4.95872541158849
    mode = 7 4
  median = 5
</code></pre><ul>
<li>stats_OO</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">class</span> <span class="nc">StatList</span> <span class="k">is</span> <span class="nb">List</span> <span class="p">{</span>

    <span class="k">method</span> <span class="nf">mean_a</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">sub</span> <span class="nb">sum</span> <span class="p">{</span> <span class="o">[+]</span> <span class="nb">self</span> <span class="p">}</span>
        <span class="k">return</span> <span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="nb">self</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">mean_g</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">sub</span> <span class="nf">product</span> <span class="p">{</span> <span class="o">[*]</span> <span class="nb">self</span> <span class="p">}</span>
        <span class="k">return</span> <span class="nf">product</span><span class="p">()</span> <span class="o">**</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nb">self</span><span class="o">.</span><span class="nb">elems</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">median</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">sub</span> <span class="nf">sorted</span> <span class="p">{</span> <span class="nb">self</span><span class="o">.</span><span class="nb">sort</span> <span class="p">}</span>
        <span class="k">return</span> <span class="n">sorted</span><span class="o">.</span><span class="nb">elems</span> <span class="nv">%%</span> <span class="mi">2</span>
                    <span class="o">??</span> <span class="n">StatList</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="n">sorted</span><span class="o">.[*/</span><span class="mi">2</span><span class="o">,</span> <span class="o">*/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="nf">mean_a</span><span class="p">()</span>
                    <span class="o">!!</span>              <span class="n">sorted</span><span class="o">.[*/</span><span class="mi">2</span><span class="o">]</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nb">mode</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">sub</span> <span class="nf">frequencies</span> <span class="p">{</span> <span class="nb">self</span><span class="o">.</span><span class="nb">Bag</span>                              <span class="p">}</span>
        <span class="k">sub</span> <span class="nf">list_elems</span>  <span class="p">{</span> <span class="n">frequencies</span><span class="o">.</span><span class="nb">pairs</span>                     <span class="p">}</span>
        <span class="k">sub</span> <span class="nf">max_freq</span>    <span class="p">{</span> <span class="n">frequencies</span><span class="o">.</span><span class="nb">values</span><span class="o">.</span><span class="nb">max</span>                <span class="p">}</span>
        <span class="k">sub</span> <span class="nf">max_vals</span>    <span class="p">{</span> <span class="n">list_elems</span><span class="o">.</span><span class="nb">grep</span><span class="o">:</span> <span class="p">{</span><span class="o">.</span><span class="nb">value</span> <span class="o">==</span> <span class="n">max_freq</span><span class="p">}</span> <span class="p">}</span>

        <span class="k">return</span>  <span class="n">max_vals</span><span class="o">».</span><span class="nb">keys</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$list</span> <span class="o">=</span> <span class="n">StatList</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">11</span><span class="p">);</span>

<span class="nb">say</span> <span class="nv">$list</span><span class="o">.</span><span class="nf">mean_a</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$list</span><span class="o">.</span><span class="nf">mean_g</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$list</span><span class="o">.</span><span class="nf">median</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$list</span><span class="o">.</span><span class="nb">mode</span><span class="p">;</span>
</code></pre></div><p>输出：</p>
<pre><code>6
4.68393277169202
13
8
</code></pre><blockquote>
<p>以上所有文件都可以在<a href="http://www.bit.do/P6TP">这儿</a> 下载到 - a Raku introductory tutorial by Damian Conway</p>
</blockquote>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/example" term="example" label="example" />
                            
                        
                    
                
            
        </entry>
    
</feed>
