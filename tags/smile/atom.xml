<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[smile on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/smile/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/smile/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/smile/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/smile/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-12T22:13:55+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/smile/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Raku 中的 Smile 类型]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-11-05-smile-type-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2015-11-05-smile-type-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Smile Type in Raku</blockquote><p>一个裸的 <strong>:D</strong>、<strong>:U</strong>、<strong>:T</strong> 或 <strong>:_</strong> 是限制默认类型为定义、未定义、类型对象或任何对象的类型约束。所以:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Con</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">man</span><span class="p">(:</span><span class="s">U</span><span class="o">:</span> <span class="p">:</span><span class="s">D</span> <span class="nv">$x</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>其签名等价于 <code>(Con:U: Any:D $x)</code>。</p>
<p><code>Con:U</code> 是调用者, 在调用者后面加上一个冒号。要标记一个显式的调用者, 在它后面放上一个冒号就好了:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">method</span> <span class="nf">doit</span> <span class="p">(</span><span class="nv">$x:</span> <span class="nv">$a</span><span class="o">,</span> <span class="nv">$b</span><span class="o">,</span> <span class="nv">$c</span><span class="p">)</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</code></pre></div><h3 id="abstract-vs-concrete-types">Abstract vs Concrete types</h3>
<p>　
对于任何有名字的类型, 某些其它子集类型可以自动地通过在类型的名字后面追加一个合适的状语来派生出来：</p>
<pre><code>Int:_       允许定义或未定的 Int 值
Int:D       只允许有定义的(强制的)Int 值
Int:U       只允许未定义值(抽象或失败)Int 值
Int:T       允许Int只作为类型对象
</code></pre><p>即, 它们的意思有点像:</p>
<pre><code>Int:D       Int:_ where DEFINITE($_)
Int:U       Int:_ where not(DEFINITE($_))
Int:T       Int:U where none(Failure)
</code></pre><p><code>where DEFINITE</code> 是一个布尔宏, 它说正处理的对象是否有一个合法的强制表示。(查看下面的自省) .</p>
<p>在 Raku 中, <strong>Int</strong> 通常假定意为 <code>Int:_</code>, 除了调用者, 其中默认为 <code>Int:D</code>。（默认的 new 方法有一个原型, 它的调用者是 <code>:T</code>, 所以所有的 new 方法都默认允许类型对象。）</p>
<p>这些默认可以通过各种编译指令在词法作用域中更改。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">use</span> <span class="nn">parameters</span> <span class="p">:</span><span class="s">D</span><span class="p">;</span>
</code></pre></div><p>会让非调用者的参数默认为 <code>:D</code>。</p>
<p>作为对比,</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">use</span> <span class="nb">variables</span> <span class="p">:</span><span class="s">D</span><span class="p">;</span>
</code></pre></div><p>会对用于变量声明中的类型做同样的事情。
在这样的词法作用域中, 你可以使用 <code>:_</code> 形式回到标准的行为。特别地, 因为调用者默认为定义的:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">use</span> <span class="nb">invocant</span> <span class="p">:</span><span class="s">_</span><span class="p">;</span>
</code></pre></div><p>会让调用者允许任何类型的有定义的和未定义的调用者。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/smile" term="smile" label="smile" />
                            
                        
                    
                
            
        </entry>
    
</feed>
