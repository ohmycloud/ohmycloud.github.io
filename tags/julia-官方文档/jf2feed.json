{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003ch1 id=\"元编程\"\u003e元编程\u003c/h1\u003e\n\u003cp\u003e在Julia语言中，Lisp最强的遗产是它对元编程的支持。和Lisp一样，Julia也将自己的代码表示为语言本身的数据结构。由于代码是由可以在语言内部创建和操作的对象来表示的，所以程序可以转换和生成自己的代码。这使得复杂的代码生成不需要额外的构建步骤，也允许真正的Lisp式的宏在\u003ca href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\"\u003e抽象语法树\u003c/a\u003e的层次上操作。相比之下，预处理器的 \u0026ldquo;宏 \u0026ldquo;系统，就像C和C++一样，在任何实际的解析或解释发生之前，都会进行文本操作和替换。由于Julia中所有的数据类型和代码都是由Julia数据结构来表示的，因此，强大的\u003ca href=\"https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\"\u003e反射\u003c/a\u003e功能可以像其他数据一样探索程序及其类型的内部。\u003c/p\u003e\n\u003ch2 id=\"程序表示\"\u003e程序表示\u003c/h2\u003e\n\u003cp\u003e每个Julia程序都是以字符串的形式开始的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprog\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;1 + 1\u0026#34;\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;1 + 1\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e接下来会发生什么？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e下一步是将每个字符串\u003ca href=\"https://en.wikipedia.org/wiki/Parsing#Computer_languages\"\u003e解析\u003c/a\u003e成一个对象，称为表达式，用Julia类型 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Core.Expr\"\u003eExpr\u003c/a\u003e 表示。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprog\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eExpr对象包含两部分。\u003c/p\u003e\n\u003cp\u003ea 符号标识表达式的种类。符号是一个内嵌的字符串标识符（下文将详细讨论）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e表达式参数，可以是符号、其他表达式或文字值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e:+\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也可以直接用前缀符号构造表达式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:call\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面构造的两个表达式\u0026ndash;通过解析和直接构造\u0026ndash;是等价的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eex2\u003c/span\u003e\n\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里的关键点是，Julia代码在内部被表示为一个数据结构，可以从语言本身访问。\u003c/p\u003e\n\u003cp\u003edump函数提供了Expr对象的缩进和注释显示。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003ecall\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}((\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,))\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eExpr对象也可以被嵌套。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;(4 + 4) / 2\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e另一种查看表达式的方法是使用Meta.show_sexpr，它可以显示给定Expr的S表达式形式，这对于Lisp的用户来说可能看起来非常熟悉。下面是一个例子，说明如何在嵌套的Expr上显示。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshow_sexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:call\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:/\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:call\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e符号\u003c/p\u003e\n\u003cp\u003e在Julia中，:字符有两种语法用途。第一种形式是创建一个Symbol，一个内部字符串，作为表达式的一个构件。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"ss\"\u003e:foo\u003c/span\u003e\n\u003cspan class=\"ss\"\u003e:foo\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e符号构造函数接受任何数量的参数，并通过将它们的字符串表示连接在一起来创建一个新的符号。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"ss\"\u003e:foo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;func\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"ss\"\u003e:func10\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:var\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"sc\"\u003e\u0026#39;_\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sym\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"ss\"\u003e:var_sym\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，要使用 : 语法，符号的名称必须是一个有效的标识符。否则必须使用Symbol(str)构造函数。\u003c/p\u003e\n\u003cp\u003e在表达式的上下文中，符号用于指示对变量的访问；当表达式被评估时，符号会被替换为在适当的作用域中与该符号绑定的值。\u003c/p\u003e\n\u003cp\u003e有时，为了避免在解析时产生歧义，需要在 : 的参数周围加括号。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e表达式和评价\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e引用\u003c/dt\u003e\n\u003cdd\u003e\n\u003cp\u003e字符的第二个语法目的是在不使用显式Expr构造函数的情况下创建表达式对象。这就是所谓的引用。在Julia代码的单条语句周围，用成对的括号跟上 : 字符，就可以根据所附的代码生成一个Expr对象。下面是用于引用一个算术表达式的简短形式的例子。\u003c/p\u003e\n\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e(要查看这个表达式的结构，可以试试ex.head和ex.args，或者使用上面的dump或Meta.@dump)\u003c/p\u003e\n\u003cp\u003e注意，可以使用Meta.parse或直接使用Expr形式构造等价的表达式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e      \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e       \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n       \u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a + b*c + 1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n       \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:call\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:a\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:call\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:b\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:c\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e解析器提供的表达式一般只有符号、其他表达式和字面值作为其args，而Julia代码构建的表达式可以有任意的运行时值，没有字面形式作为args。在这个具体的例子中，+和a是符号，*(b,c)是一个子表达式，1是一个64位有符号整数的文字形式。\u003c/p\u003e\n\u003cp\u003e对于多个表达式，还有第二种引用的语法形式：用引号\u0026hellip;\u0026hellip;结尾括起来的代码块。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e\n           \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n           \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n           \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:2 =#\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:3 =#\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:4 =#\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e插值\u003c/p\u003e\n\u003cp\u003e用值参数直接构造Expr对象是很强大的，但与 \u0026ldquo;正常的 \u0026ldquo;Julia语法相比，Expr构造函数可能很乏味。作为一种替代方法，Julia允许将字元或表达式插值到引用的表达式中。插值由前缀$表示。\u003c/p\u003e\n\u003cp\u003e在这个例子中，变量a的值被内插了。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e不支持向未引用的表达式插值，并会导致编译时错误。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"n\"\u003eERROR\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esyntax\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;$\u0026#34;\u003c/span\u003e \u003cspan class=\"n\"\u003eexpression\u003c/span\u003e \u003cspan class=\"n\"\u003eoutside\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，元组(1,2,3)作为表达式被内插到一个条件测试中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e$:\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在表达式插值中使用$是有意让人联想到字符串插值和命令插值。表达式插值可以方便的、可读的程序化构造复杂的Julia表达式。\u003c/p\u003e\n\u003cp\u003e劈叉插值\u003c/p\u003e\n\u003cp\u003e请注意，$插值语法只允许在一个包围表达式中插入一个表达式。偶尔，你有一个表达式数组，需要它们全部成为包围表达式的参数。这可以用语法$(xs\u0026hellip;)来完成。例如，下面的代码生成了一个函数调用，其中的参数数是通过编程确定的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:x\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:y\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:z\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ez\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e嵌套引用\u003c/p\u003e\n\u003cp\u003e自然，引号表达式有可能包含其他引号表达式。在这些情况下，理解内插是如何工作的可能有点棘手。考虑一下这个例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:1 =#\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:quote\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:1 =#\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:$\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:x\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，结果中包含$x，这意味着x还没有被评估。换句话说，$表达式 \u0026ldquo;属于 \u0026ldquo;内部引号表达式，因此它的参数只有在内部引号表达式时才会被评估。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:1 =#\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但是，外引号表达式能够对内引号中的$内的值进行插值。这是用多个$来完成的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e \u003cspan class=\"o\"\u003e$$\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:1 =#\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:quote\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:1 =#\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:$\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意到(1+2)现在出现在结果中，而不是符号x。对这个表达式进行评估，得到一个内插的3。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003equote\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e#= none:1 =#\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种行为背后的直觉是，x对每个$都会被评估一次：一个$的工作原理类似于eval(:x)，给出x的值，而两个$的工作原理相当于eval(eval(:x))。\u003c/p\u003e\n\u003cp\u003eQuoteNode\u003c/p\u003e\n\u003cp\u003e引号形式在AST中的通常表示是一个带头:quote的Expr。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;:(1+2)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}((\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,))\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003ecall\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}((\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,))\u003c/span\u003e\n        \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n        \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n        \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e正如我们所看到的，这类表达式支持用$进行插值，但是在某些情况下，有必要在不进行插值的情况下引用代码。这种引用还没有语法，但在内部表示为一个类型为QuoteNode的对象。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:$\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))))\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eQuoteNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:$\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:$\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e该解析器产生的QuoteNodes用于简单的引用项目，如符号。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMeta\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;:x\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eQuoteNode\u003c/span\u003e\n  \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eQuoteNode还可以用于某些高级元编程任务。\u003c/p\u003e\n\u003cp\u003e评估表达式\u003c/p\u003e\n\u003cp\u003e给定一个表达式对象，可以使用eval使Julia在全局范围内对其进行评估（执行）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eERROR\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eUndefVarError\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"n\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003edefined\u003c/span\u003e\n\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e每个模块都有自己的 eval 函数，它可以在全局范围内评估表达式。传递给eval的表达式并不局限于返回值\u0026ndash;它们也可以产生副作用，改变模块环境的状态。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003cspan class=\"n\"\u003eERROR\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eUndefVarError\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"n\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003edefined\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这里，对表达式对象的评价会导致一个值被分配给全局变量x。\u003c/p\u003e\n\u003cp\u003e由于表达式只是Expr对象，可以通过编程构造，然后进行评估，因此可以动态生成任意代码，然后使用eval进行运行。下面是一个简单的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:call\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:b\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ea的值用于构造表达式ex，该表达式将+函数应用于值1和变量b，注意a和b的使用方式的重要区别。\u003c/p\u003e\n\u003cp\u003e变量a的值在表达式构造时被用作表达式中的即时值。因此，当表达式被评估时，a的值不再重要：表达式中的值已经是1，无论a的值是多少，都是独立的。\n另一方面，在表达式的构造中使用了符号:b，所以变量b的值在那个时候是无关紧要的\u0026ndash;:b只是一个符号，变量b甚至不需要被定义。但在表达式评估时，符号:b的值是通过查找变量b的值来解决的。\n表达式上的函数\u003c/p\u003e\n\u003cp\u003e如上所述，Julia的一个极其有用的特性是在Julia本身内部生成和操作Julia代码的能力。我们已经看到了一个函数返回Expr对象的例子：parse函数，它接收一串Julia代码并返回相应的Expr。一个函数也可以接受一个或多个Expr对象作为参数，并返回另一个Expr。下面是一个简单的、激励性的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003emath_expr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:call\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003emath_expr\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e  \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emath_expr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:call\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e21\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e作为另一个例子，这里有一个函数，它可以将任何数字参数翻倍，但不考虑表达式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003emake_expr2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopr1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopr2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eopr1f\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopr2f\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003eisa\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eopr1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopr2\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eretexpr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:call\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopr1f\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eopr2f\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eretexpr\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003emake_expr2\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emake_expr2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emake_expr2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:+\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:call\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"宏\"\u003e宏\u003c/h2\u003e\n\u003cp\u003e宏提供了一种将生成的代码包含在程序的最后主体中的方法。宏将一个参数元组映射到一个返回的表达式，生成的表达式直接被编译，而不需要运行时 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.eval\"\u003eeval\u003c/a\u003e 调用。宏参数可以包括表达式、字面值和符号。\u003c/p\u003e\n\u003ch3 id=\"基础知识\"\u003e基础知识\u003c/h3\u003e\n\u003cp\u003e这里有一个特别简单的宏。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003esayhello\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, world!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@sayhello\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Julia 的语法中，宏有一个专门的字符：\u003ccode\u003e@\u003c/code\u003e(at 符号)，后面是 \u003ccode\u003emacro NAME ... end\u003c/code\u003e 块中声明的唯一名称\u0026hellip;.。在这个例子中，编译器将用 \u003ccode\u003e@sayhello\u003c/code\u003e 替换所有的实例。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, world!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当在 REPL 中输入 \u003ccode\u003e@sayhello\u003c/code\u003e 时，表达式会立即执行，因此我们只看到求值结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@sayhello\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eworld!\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在，考虑一个稍微复杂的宏。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003esayhello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@sayhello\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个宏只取一个参数：\u003ccode\u003ename\u003c/code\u003e。当遇到 \u003ccode\u003e@sayhello\u003c/code\u003e 时，引用的表达式会被展开，将参数的值内插到最终的表达式中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@sayhello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;human\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehuman\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们可以使用函数 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.macroexpand\"\u003emacroexpand\u003c/a\u003e 查看引用的返回表达式（重要提示：这是调试宏的一个极其有用的工具）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emacroexpand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nd\"\u003e@sayhello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;human\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;human\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们可以看到，\u0026ldquo;human\u0026rdquo; 的字面值已经被插进了表达式中。\u003c/p\u003e\n\u003cp\u003e此外，还存在一个宏 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.@macroexpand\"\u003e@macroexpand\u003c/a\u003e，也许比 \u003ccode\u003emacroexpand\u003c/code\u003e 函数更方便一些。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@macroexpand\u003c/span\u003e \u003cspan class=\"nd\"\u003e@sayhello\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;human\u0026#34;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;human\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"等等为什么是宏\"\u003e等等：为什么是宏？\u003c/h3\u003e\n\u003cp\u003e我们在前一节已经看到了一个函数 \u003ccode\u003ef(::Expr...) -\u0026gt; Expr\u003c/code\u003e。其实，\u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.macroexpand\"\u003emacroexpand\u003c/a\u003e 也是这样一个函数。那么，为什么要有宏的存在呢？\u003c/p\u003e\n\u003cp\u003e宏是必要的，因为它们在代码解析时执行，因此，宏允许程序员在完整程序运行之前生成并包含自定义代码的片段。为了说明两者的区别，请考虑下面的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003etwostep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;I execute at parse time. The argument is: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;I execute at runtime. The argument is: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003earg\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@twostep\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emacroexpand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nd\"\u003e@twostep\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eI\u003c/span\u003e \u003cspan class=\"n\"\u003eexecute\u003c/span\u003e \u003cspan class=\"n\"\u003eat\u003c/span\u003e \u003cspan class=\"n\"\u003eparse\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eThe\u003c/span\u003e \u003cspan class=\"n\"\u003eargument\u003c/span\u003e \u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当调用 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.macroexpand\"\u003emacroexpand\u003c/a\u003e 时，会执行对 \u003ca href=\"https://docs.julialang.org/en/v1/base/io-network/#Base.println\"\u003eprintln\u003c/a\u003e 的第一次调用。结果的表达式只包含第二个 \u003ccode\u003eprintln\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;I execute at runtime. The argument is: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:copyast\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eQuoteNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)))))))))\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eI\u003c/span\u003e \u003cspan class=\"n\"\u003eexecute\u003c/span\u003e \u003cspan class=\"n\"\u003eat\u003c/span\u003e \u003cspan class=\"n\"\u003eruntime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"n\"\u003eThe\u003c/span\u003e \u003cspan class=\"n\"\u003eargument\u003c/span\u003e \u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"宏调用\"\u003e宏调用\u003c/h3\u003e\n\u003cp\u003e宏的调用有以下一般语法。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"nd\"\u003e@name\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr1\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr2\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@name\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意在宏名前有区别的 \u003ccode\u003e@\u003c/code\u003e，第一种形式的参数表达式之间没有逗号，第二种形式的 \u003ccode\u003e@\u003c/code\u003e 名后没有空格。两种样式不能混用。例如，下面的语法与上面的例子不同，它将元组 (expr1, expr2, \u0026hellip;) 作为一个参数传递给宏。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"nd\"\u003e@name\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpr2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在数组字面量（或解析）上调用宏的另一种方法是将两者并列，而不使用括号。在这种情况下，数组将是唯一输入宏的表达式。下面的语法是等价的（与 \u003ccode\u003e@name [a b] * v\u003c/code\u003e 不同）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"nd\"\u003e@name\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@name\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e需要强调的是，宏以表达式、字面值或符号的形式接收其参数。探索宏参数的一种方法是在宏体中调用 \u003ca href=\"https://docs.julialang.org/en/v1/base/io-network/#Base.show-Tuple%7BIO,Any%7D\"\u003eshow\u003c/a\u003e 函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003eshowarg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eshow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"c\"\u003e# ... remainder of macro, returning an expression\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@showarg\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@showarg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"ss\"\u003e:a\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@showarg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@showarg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Yo!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Yo!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e除了给定的参数列表之外，每个宏都会被传递额外的参数 \u003ccode\u003e__source__\u003c/code\u003e 和 \u003ccode\u003e__module__\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e参数 \u003ccode\u003e__source__\u003c/code\u003e 提供了关于来自宏调用的 \u003ccode\u003e@\u003c/code\u003e 符号的解析器位置的信息（以 \u003ccode\u003eLineNumberNode\u003c/code\u003e 对象的形式）。这使得宏能够包含更好的错误诊断信息，并且通常被日志、字符串解析器宏和文档等使用，例如，也被用来实现 \u003ca href=\"https://docs.julialang.org/en/v1/base/file/#Base.@__LINE__\"\u003e@\u003cstrong\u003eLINE\u003c/strong\u003e\u003c/a\u003e、\u003ca href=\"https://docs.julialang.org/en/v1/base/file/#Base.@__FILE__\"\u003e@\u003cstrong\u003eFILE\u003c/strong\u003e\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/base/file/#Base.@__DIR__\"\u003e@\u003cstrong\u003eDIR\u003c/strong\u003e\u003c/a\u003e 宏。\u003c/p\u003e\n\u003cp\u003e位置信息可以通过引用 \u003ccode\u003e__source__.line\u003c/code\u003e 和 \u003ccode\u003e__source__.file\u003c/code\u003e 来访问。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003e__LOCATION__\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kt\"\u003eQuoteNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__source__\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@__LOCATION__\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"nd\"\u003e@__LOCATION__\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n       \u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eLineNumberNode\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003enone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e参数 \u003ccode\u003e__module__\u003c/code\u003e 提供了关于宏调用的扩展上下文的信息（以 \u003ccode\u003eModule\u003c/code\u003e 对象的形式）。这允许宏查找上下文信息，如现有的绑定，或者将该值作为额外的参数插入到在当前模块中做自省的运行时函数调用中。\u003c/p\u003e\n\u003ch3 id=\"构建一个高级宏\"\u003e构建一个高级宏\u003c/h3\u003e\n\u003cp\u003e这里是 Julia 的 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.@assert\"\u003e@assert\u003c/a\u003e 宏的简化定义。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e))))\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@assert\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个宏可以这样使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@assert\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@assert\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003cspan class=\"n\"\u003eERROR\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e宏调用在解析时扩展到它的返回结果。这就相当于写。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;1 == 1.0\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;1 == 0\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也就是说，在第一次调用中，表达式 \u003ccode\u003e:(1 == 1.0)\u003c/code\u003e 被拼接到测试条件槽中，而 \u003ccode\u003estring(:(1 == 1.0))\u003c/code\u003e 的值被拼接到断言消息槽中。这样构造出来的整个表达式，就被放到了发生 \u003ccode\u003e@assert\u003c/code\u003e 宏调用的语法树中。然后在执行时，如果测试表达式评估为真，那么返回 \u003ca href=\"https://docs.julialang.org/en/v1/base/constants/#Core.nothing\"\u003enothing\u003c/a\u003e，而如果测试为假，则会引发一个错误，表明断言表达式是假的。注意，如果把这个写成函数就不行了，因为只有条件的值，不可能在错误信息中显示计算条件的表达式。\u003c/p\u003e\n\u003cp\u003eJulia Base 中 \u003ccode\u003e@assert\u003c/code\u003e 的实际定义比较复杂。它允许用户有选择地指定自己的错误信息，而不是只打印失败的表达式。就像在参数数可变的函数（\u003ca href=\"https://docs.julialang.org/en/v1/manual/functions/#Varargs-Functions\"\u003eVarargs Functions\u003c/a\u003e）中一样，在最后一个参数后面用省略号来指定。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emsgs\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003emsg_body\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eisempty\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsgs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emsgs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n           \u003cspan class=\"n\"\u003emsg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg_body\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@assert\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在 \u003ccode\u003e@assert\u003c/code\u003e 有两种操作模式，取决于它接收到的参数数量！如果只有一个参数，那么 \u003ccode\u003emsgs\u003c/code\u003e 捕获的表达式元组将是空的，它的行为和上面的简单定义一样。如果只有一个参数，msgs 捕获的表达式元组将是空的，它的行为与上面的简单定义相同。但现在如果用户指定了第二个参数，它将被打印在消息正文中，而不是失败的表达式。你可以用 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.@macroexpand\"\u003e@macroexpand\u003c/a\u003e 宏来检查宏扩展的结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@macroexpand\u003c/span\u003e \u003cspan class=\"nd\"\u003e@assert\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enothing\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a == b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@macroexpand\u003c/span\u003e \u003cspan class=\"nd\"\u003e@assert\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;a should equal b!\u0026#34;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enothing\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eAssertionError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a should equal b!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e实际的 \u003ccode\u003e@assert\u003c/code\u003e 宏还可以处理另一种情况：如果除了打印 \u0026ldquo;a should equal b\u0026rdquo; 之外，我们还想打印它们的值呢？人们可能会天真地尝试在自定义消息中使用字符串插值，例如，\u003ccode\u003e@assert a==b \u0026quot;a ($a) should equal b ($b)!\u0026quot;\u003c/code\u003e，但这在上面的宏中不会像预期的那样工作。你能明白为什么吗？从\u003ca href=\"https://docs.julialang.org/en/v1/manual/strings/#string-interpolation\"\u003e字符串插值\u003c/a\u003e回想一下，插值后的字符串会被改写成对\u003ca href=\"https://docs.julialang.org/en/v1/base/strings/#Base.string\"\u003e字符串\u003c/a\u003e的调用。比较一下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a should equal b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a (\u003c/span\u003e\u003cspan class=\"si\"\u003e$a\u003c/span\u003e\u003cspan class=\"s\"\u003e) should equal b (\u003c/span\u003e\u003cspan class=\"si\"\u003e$b\u003c/span\u003e\u003cspan class=\"s\"\u003e)!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a (\u003c/span\u003e\u003cspan class=\"si\"\u003e$a\u003c/span\u003e\u003cspan class=\"s\"\u003e) should equal b (\u003c/span\u003e\u003cspan class=\"si\"\u003e$b\u003c/span\u003e\u003cspan class=\"s\"\u003e)!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eExpr\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}((\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,))\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;a (\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;) should equal b (\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;)!\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因此，现在宏不是在 \u003ccode\u003emsg_body\u003c/code\u003e 中得到一个普通的字符串，而是接收一个完整的表达式，这个表达式需要被评估，以便按照预期的方式显示。这可以直接拼接到返回的表达式中，作为\u003ca href=\"https://docs.julialang.org/en/v1/base/strings/#Base.string\"\u003e字符串\u003c/a\u003e调用的一个参数；完整的实现请参见 \u003ca href=\"https://github.com/JuliaLang/julia/blob/master/base/error.jl\"\u003eerror.jl\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e@assert\u003c/code\u003e 宏很好地利用了拼接成引号的表达式，简化了宏体内部对表达式的操作。\u003c/p\u003e\n\u003ch3 id=\"卫生宏\"\u003e卫生宏\u003c/h3\u003e\n\u003cp\u003e在比较复杂的宏中会出现一个问题，那就是\u003ca href=\"https://en.wikipedia.org/wiki/Hygienic_macro\"\u003e卫生\u003c/a\u003e问题。简而言之，宏必须确保它们在返回的表达式中引入的变量不会意外地与它们扩展到的周围代码中的现有变量发生冲突。相反，作为参数传入宏中的表达式往往要在周围代码的上下文中进行评估，与现有变量进行交互和修改。另一个关注点来自于一个事实，即一个宏可能会在与它被定义的模块不同的地方被调用。在这种情况下，我们需要确保所有的全局变量被解析到正确的模块中。与具有文本宏扩展的语言（如C语言）相比，Julia 已经有了很大的优势，因为它只需要考虑返回的表达式。所有其他的变量（比如上面 \u003ccode\u003e@assert\u003c/code\u003e 中的 \u003ccode\u003emsg\u003c/code\u003e）都遵循\u003ca href=\"https://docs.julialang.org/en/v1/manual/variables-and-scoping/#scope-of-variables\"\u003e正常的作用域块行为\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e为了证明这些问题，让我们考虑写一个 \u003ccode\u003e@time\u003c/code\u003e 宏，它接受一个表达式作为参数，记录时间，评估表达式，再次记录时间，打印前后时间的差值，然后以表达式的值作为其最终值。这个宏可能是这样的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003equote\u003c/span\u003e\n        \u003cspan class=\"k\"\u003elocal\u003c/span\u003e \u003cspan class=\"n\"\u003et0\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etime_ns\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"k\"\u003elocal\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\n        \u003cspan class=\"k\"\u003elocal\u003c/span\u003e \u003cspan class=\"n\"\u003et1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etime_ns\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;elapsed time: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003et0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mf\"\u003e1e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; seconds\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eval\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这里，我们希望 \u003ccode\u003et0\u003c/code\u003e、\u003ccode\u003et1\u003c/code\u003e 和 \u003ccode\u003eval\u003c/code\u003e 是私有的临时变量，我们希望 \u003ccode\u003etime\u003c/code\u003e 引用 Julia Base 中的 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.Libc.time-Tuple%7B%7D\"\u003etime\u003c/a\u003e 函数，而不是用户可能拥有的任何 \u003ccode\u003etime\u003c/code\u003e 变量（同样适用于 \u003ccode\u003eprintln\u003c/code\u003e）。想象一下，如果用户表达式 \u003ccode\u003eex\u003c/code\u003e 也包含了对一个叫 \u003ccode\u003et0\u003c/code\u003e 的变量的赋值，或者定义了自己的 \u003ccode\u003etime\u003c/code\u003e 变量，可能会出现的问题。我们可能会得到错误，或者神秘的不正确行为。\u003c/p\u003e\n\u003cp\u003eJulia 的宏扩展器用以下方式解决了这些问题。首先，宏结果中的变量被分为局部或全局。如果一个变量被分配给（而不是声明为全局）、声明为局部，或者被用作函数参数名，那么它被认为是局部的。否则，它被认为是全局变量。局部变量就会被重命名为唯一的（使用 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.gensym\"\u003egensym\u003c/a\u003e 函数，生成新的符号），全局变量则在宏定义环境中解决。因此，上述两个问题都得到了处理；宏的局部变量不会与任何用户变量冲突，\u003ccode\u003etime\u003c/code\u003e 和 \u003ccode\u003eprintln\u003c/code\u003e 将引用 Julia Base 定义。\u003c/p\u003e\n\u003cp\u003e然而，仍然存在一个问题。考虑下面这个宏的使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eMyModule\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nd\"\u003e@time\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"c\"\u003e# compute something\u003c/span\u003e\n\n\u003cspan class=\"nd\"\u003e@time\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里的用户表达式 \u003ccode\u003eex\u003c/code\u003e 是对 \u003ccode\u003etime\u003c/code\u003e 的调用，但不是宏使用的那个 \u003ccode\u003etime\u003c/code\u003e 函数。它显然是指 \u003ccode\u003eMyModule.time\u003c/code\u003e。因此我们必须安排 \u003ccode\u003eex\u003c/code\u003e 中的代码在宏调用环境中进行解析。这可以通过用 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.esc\"\u003eesc\u003c/a\u003e 对表达式进行\u0026quot;转义\u0026quot;来实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"k\"\u003elocal\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eesc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以这种方式包装的表达式，宏扩展器不会管它，只需逐字粘贴到输出中即可。因此它将在宏调用环境中被解析。\u003c/p\u003e\n\u003cp\u003e在必要的时候，可以利用这种转义机制来\u0026quot;违反\u0026quot;卫生，以便引入或操作用户变量。例如，下面的宏在调用环境中将 \u003ccode\u003ex\u003c/code\u003e 设为零。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ezerox\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eesc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@zerox\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n           \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n           \u003cspan class=\"nd\"\u003e@zerox\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"c\"\u003e# is zero\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种对变量的操作应谨慎使用，但偶尔也很方便。\u003c/p\u003e\n\u003cp\u003e掌握正确的卫生规则可能是一个艰巨的挑战。在使用宏之前，你可能需要考虑一个函数闭包是否足够。另一个有用的策略是将尽可能多的工作推迟到运行时。例如，许多宏简单地将其参数包裹在 QuoteNode 或其他类似的 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Core.Expr\"\u003eExpr\u003c/a\u003e 中。一些例子包括 \u003ccode\u003e@task body\u003c/code\u003e，它简单地返回 \u003ccode\u003eschedule(Task(()-\u0026gt; $body))\u003c/code\u003e，以及 \u003ccode\u003e@eval expr\u003c/code\u003e，它简单地返回 \u003ccode\u003eeval(QuoteNode(expr))\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e为了演示，我们可以将上面的 \u003ccode\u003e@time\u003c/code\u003e 例子重写为。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimeit\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eesc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e))))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003etimeit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003et0\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etime_ns\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003et1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etime_ns\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;elapsed time: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003et0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mf\"\u003e1e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; seconds\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然而，我们不这样做是有充分的理由的：将 \u003ccode\u003eexpr\u003c/code\u003e 包装在一个新的作用域块中（匿名函数）也会稍微改变表达式的含义（其中任何变量的作用域），同时我们希望 \u003ccode\u003e@time\u003c/code\u003e 可以使用，而对被包装的代码影响最小。\u003c/p\u003e\n\u003ch3 id=\"宏和调度\"\u003e宏和调度\u003c/h3\u003e\n\u003cp\u003e宏，就像 Julia 函数一样，是通用的。这意味着它们也可以有多个方法定义，这要归功于多重分派。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"n\"\u003emethods\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"s\"\u003e arguments\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Two arguments\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"n\"\u003emethods\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;asd\u0026#34;\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003earguments\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"n\"\u003eTwo\u003c/span\u003e \u003cspan class=\"n\"\u003earguments\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然而我们应该记住，宏调度是基于交给宏的 AST 类型，而不是 AST 在运行时评估的类型。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;An Integer\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"n\"\u003emethods\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"n\"\u003eAn\u003c/span\u003e \u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@m\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003earguments\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"代码生成\"\u003e代码生成\u003c/h2\u003e\n\u003cp\u003e当需要大量重复的模板代码时，通常会以编程方式生成，以避免冗余。在大多数语言中，这需要一个额外的构建步骤，以及一个单独的程序来生成重复的代码。在 Julia 中，表达式插值和 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.eval\"\u003eeval\u003c/a\u003e 允许这样的代码生成在程序执行的正常过程中进行。例如，考虑以下自定义类型\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"kt\"\u003eMyNumber\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# output\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们想为其添加一些方法。我们可以在下面的循环中以编程的方式进行。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:sin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:cos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:tan\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:log\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:exp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003equote\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.$\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# output\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在我们可以用我们的自定义类型来使用这些函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eπ\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e3.141592653589793\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.2246467991473532e-16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecos\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这样一来，Julia 就像自己的\u003ca href=\"https://en.wikipedia.org/wiki/Preprocessor\"\u003e预处理器\u003c/a\u003e一样，可以从语言内部生成代码。上面的代码可以使用 \u003ccode\u003e:\u003c/code\u003e 前缀引号的形式，写得稍显生硬。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:sin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:cos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:tan\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:log\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:exp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.$\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e))))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e不过，这种使用 \u003ccode\u003eeval(quote(...))\u003c/code\u003e 模式生成的语言内代码很常见，所以 Julia 自带了一个宏来缩写这种模式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:sin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:cos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:tan\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:log\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:exp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nd\"\u003e@eval\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.$\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.@eval\"\u003e@eval\u003c/a\u003e 宏重写了这个调用，使之与上述较长版本的调用完全等同。对于较长的生成代码块，给 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.@eval\"\u003e@eval\u003c/a\u003e 的表达式参数可以是一个块。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-juliaa\" data-lang=\"juliaa\"\u003e@eval begin\n    # multiple lines\nend\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"非标准字符串字面值\"\u003e非标准字符串字面值\u003c/h2\u003e\n\u003cp\u003e从 \u003ca href=\"https://docs.julialang.org/en/v1/manual/strings/#non-standard-string-literals\"\u003eStrings\u003c/a\u003e 中回想一下，以标识符为前缀的字符串字元称为非标准字符串字元，其语义可能与未加前缀的字符串字面值不同。例如\u003c/p\u003e\n\u003cp\u003er\u0026rdquo;^\\s*(?:#|$) \u0026ldquo;产生一个正则表达式对象，而不是一个字符串。\nb \u0026ldquo;DATA\\xff\\u2200 \u0026ldquo;是一个[68,65,84,65,255,226,136,128]的字节数组文字。\n也许令人惊讶的是，这些行为并没有被硬编码到Julia解析器或编译器中。相反，它们是由一个通用机制提供的自定义行为，任何人都可以使用：前缀的字符串字元被解析为对特别命名的宏的调用。例如，正则表达式宏就如下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003er_str\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eRegex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e就是这样。这个宏表示应该将字符串字词r\u0026rdquo;^\\s*(?:#|$) \u0026ldquo;的字面内容传递给@r_str宏，并将扩展的结果放入字符串字词出现的语法树中。换句话说，表达式r\u0026rdquo;^\\s*(?:#|$) \u0026ldquo;相当于将下面的对象直接放入语法树中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"kt\"\u003eRegex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;^\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s\"\u003es*(?:#|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\$\u003c/span\u003e\u003cspan class=\"s\"\u003e)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e字符串形式不仅更短、更方便，而且效率更高：由于正则表达式是编译的，而Regex对象实际上是在代码编译时创建的，所以编译只发生一次，而不是每次执行代码时。考虑一下如果正则表达式发生在循环中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elines\u003c/span\u003e\n    \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ematch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003er\u003c/span\u003e\u003cspan class=\"sr\"\u003e\u0026#34;^\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"sr\"\u003es*(?:#|$)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e# non-comment\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e# comment\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于正则表达式r\u0026rdquo;^/ds*(?:#|$) \u0026ldquo;在解析这段代码时被编译并插入语法树中，所以该表达式只被编译一次，而不是每次循环执行时都被编译。为了在不使用宏的情况下实现这个目标，必须这样写这个循环。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ere\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eRegex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;^\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s\"\u003es*(?:#|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\$\u003c/span\u003e\u003cspan class=\"s\"\u003e)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elines\u003c/span\u003e\n    \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ematch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e# non-comment\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e# comment\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e此外，如果编译器不能确定regex对象在所有循环中都是恒定的，某些优化可能就无法实现，这就使得这个版本的效率仍然不如上面更方便的文字形式。当然，在有些情况下，非字面形式还是比较方便的：如果需要在正则表达式中插入一个变量，就必须采取这种比较啰嗦的方式；在正则表达式模式本身是动态的，有可能在每次循环迭代时发生变化的情况下，必须在每次迭代时构造一个新的正则表达式对象。然而，在绝大多数用例中，正则表达式并不是基于运行时数据来构造的。在这大多数情况下，将正则表达式写成编译时值的能力是非常宝贵的。\u003c/p\u003e\n\u003cp\u003e与非标准字符串字元一样，非标准命令字元也是使用命令字元语法的前缀变体存在的。命令字元custom\u003ccode\u003eliteral\u003c/code\u003e被解析为@custom_cmd \u0026ldquo;literal\u0026rdquo;。Julia本身不包含任何非标准的命令字元，但包可以利用这种语法。除了语法不同和用_cmd后缀代替_str后缀外，非标准命令字元的行为与非标准字符串字元完全相同。\u003c/p\u003e\n\u003cp\u003e如果两个模块提供了名称相同的非标准字符串或命令字元，可以用模块名称来限定字符串或命令字元。例如，如果Foo和Bar都提供了非标准的字符串字元@x_str，那么可以写成Foo.x \u0026ldquo;字元 \u0026ldquo;或Bar.x \u0026ldquo;字元 \u0026ldquo;来区分两者。\u003c/p\u003e\n\u003cp\u003e用户定义字符串字元的机制是深刻的、强大的。不仅Julia的非标准字元用它来实现，而且命令字元语法（\u003ccode\u003eecho \u0026quot;Hello, $person\u0026quot;\u003c/code\u003e）也用下面这个看似无害的宏来实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd_gen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eshell_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])))\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当然，这个宏定义中使用的函数中隐藏着大量的复杂性，但它们只是函数，完全是用Julia编写的。你可以阅读它们的源码，并精确地看到它们的作用\u0026ndash;它们所做的只是构造表达式对象，以便插入到你的程序的语法树中。\u003c/p\u003e\n\u003cp\u003e生成的函数\u003c/p\u003e\n\u003cp\u003e一个非常特殊的宏是@generated，它允许你定义所谓的生成函数。这些函数能够根据其参数的类型生成专门的代码，其灵活性和/或代码量比使用多重调度时更少。宏在解析时与表达式一起工作，不能访问其输入的类型，而生成函数在参数类型已知时得到扩展，但函数尚未编译。\u003c/p\u003e\n\u003cp\u003e生成函数声明不是执行一些计算或动作，而是返回一个引号的表达式，然后形成与参数类型相对应的方法的主体。当一个生成函数被调用时，它返回的表达式会被编译，然后运行。为了提高效率，通常会对结果进行缓存。而为了使之可推断，只有有限的语言子集可以使用。因此，生成函数提供了一种灵活的方式，将工作从运行时转移到编译时，但代价是对允许的构造有更大的限制。\u003c/p\u003e\n\u003cp\u003e在定义生成函数时，与普通函数有五个主要区别。\u003c/p\u003e\n\u003cp\u003e你用 @generated 宏来注释函数声明。这在AST中添加了一些信息，让编译器知道这是一个生成函数。\n在生成函数的主体中，你只能访问参数的类型，而不能访问它们的值。\n你不是计算一些东西或执行一些操作，而是返回一个引号的表达式，当它被评估时，就会执行你想要的东西。\n生成函数只允许调用在生成函数定义之前定义的函数。(如果不遵守这一点，可能会得到引用未来世界时代函数的MethodErrors。)\n生成的函数不得突变或观察任何非常态的全局状态（包括，例如，IO、锁、非本地字典或使用hasmethod）。这意味着它们只能读取全局常量，不能有任何副作用。换句话说，它们必须是完全纯粹的。由于实现上的限制，这也意味着它们目前不能定义闭包或生成器。\n用一个例子来说明这一点是最简单的。我们可以将一个生成函数foo声明为\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eCore\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，函数体返回的是一个引号表达式，即:(x * x)，而不仅仅是x * x的值。\u003c/p\u003e\n\u003cp\u003e从调用者的角度来看，这和正则函数是一样的；事实上，你不必知道你调用的是正则函数还是生成函数。让我们来看看foo是如何表现的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c\"\u003e# note: output is from println() statement in the body\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e           \u003cspan class=\"c\"\u003e# now we print x\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;barbar\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所以，我们看到，在生成函数的主体中，x是传递的参数的类型，而生成函数返回的值，是我们从定义中返回的引用表达式的评估结果，现在的值是x。\u003c/p\u003e\n\u003cp\u003e如果我们用已经使用过的类型再次评估foo，会发生什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，没有打印出Int64的结果。我们可以看到，这里只针对特定的参数类型集执行了一次生成函数的主体，结果被缓存。之后，对于本例来说，第一次调用时生成函数返回的表达式被重新用作方法体。但是，实际的缓存行为是一种实现定义的性能优化，所以过于依赖这种行为是无效的。\u003c/p\u003e\n\u003cp\u003e生成函数的次数可能只有一次，但也可能更频繁，或者看起来根本没有发生。因此，你永远不应该写一个有副作用的生成函数\u0026ndash;副作用何时发生，多久发生一次，都是没有定义的。(这对宏来说也是如此\u0026ndash;就像对宏一样，在生成函数中使用eval是一个标志，表明你做了一些错误的事情。) 然而，与宏不同的是，运行时系统无法正确处理对eval的调用，所以不允许使用它。\u003c/p\u003e\n\u003cp\u003e同样重要的是看@生成函数如何与方法重新定义交互。按照正确的@生成函数不能观察任何可突变的状态或引起任何全局状态的突变的原则，我们看到以下行为。观察生成函数不能调用任何在生成函数本身定义之前没有定义的方法。\u003c/p\u003e\n\u003cp\u003e最初f(x)有一个定义\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;original definition\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e定义其他使用f(x)的操作。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"n\"\u003egen1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"n\"\u003egen2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在我们为f(x)添加一些新的定义。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;definition for Int\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eType\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;definition for Type{Int}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e并比较这些结果有何不同。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;definition for Int\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;definition for Int\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egen1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;original definition\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egen2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;definition for Int\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生成函数的每个方法都有自己的定义函数视图。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"n\"\u003egen1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eReal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egen1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;definition for Type{Int}\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面的生成函数foo例子并没有做任何普通函数foo(x) = x * x不能做的事情（除了在第一次调用时打印类型，并产生较高的开销）。然而，生成函数的强大之处在于它能够根据传递给它的类型计算不同的引号表达式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kt\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;:\u003c/span\u003e \u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\n               \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n               \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebar\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;baz\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;baz\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e(当然，这个人为的例子可以更容易地使用多个调度来实现\u0026hellip;)\u003c/p\u003e\n\u003cp\u003e滥用这一点将破坏运行时系统并导致未定义的行为。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ebaz\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mf\"\u003e.9\u003c/span\u003e\n               \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n               \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;boo!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebaz\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于生成的函数主体是非确定的，所以它的行为以及所有后续代码的行为都是未定义的。\u003c/p\u003e\n\u003cp\u003e不要抄袭这些例子!\u003c/p\u003e\n\u003cp\u003e这些例子希望对说明生成函数的工作方式有所帮助，包括在定义端和调用端；但是，不要复制它们，原因如下。\u003c/p\u003e\n\u003cp\u003efoo函数有副作用 (对Core.println的调用), 而这些副作用究竟何时发生, 多久发生一次, 或发生多少次, 都是没有定义的\nbar函数解决了一个问题，而这个问题最好用多重调度来解决\u0026ndash;定义bar(x) = x和bar(x::Integer) = x ^ 2会做同样的事情，但它既简单又快速。\nbaz函数是病态的\n请注意，在生成的函数中不应该尝试的操作集是没有限制的，运行时系统目前只能检测到无效操作的一个子集。还有许多其他的操作会在不通知的情况下简单地破坏运行时系统，通常以微妙的方式与坏定义没有明显的联系。因为函数生成器是在推理过程中运行的，它必须尊重该代码的所有限制。\u003c/p\u003e\n\u003cp\u003e一些不应该尝试的操作包括。\u003c/p\u003e\n\u003cp\u003e缓存本地指针\n以任何方式与Core.Compiler的内容或方法进行交互。\n观察任何可变状态。\u003c/p\u003e\n\u003cp\u003e对生成的函数的推理可以在任何时候运行，包括在您的代码试图观察或突变此状态时。\n占用任何锁。你调用的C代码可以在内部使用锁，（例如，调用malloc是没有问题的，即使大多数实现在内部需要锁），但不要试图在执行Julia代码时持有或获取任何锁。\n调用在生成函数主体之后定义的任何函数。对于增量加载的预编译模块，这个条件是放宽的，允许调用模块中的任何函数。\n好了，现在我们对生成函数的工作原理有了更好的理解，让我们用它们来构建一些更高级的（有效的）功能\u0026hellip;\u003c/p\u003e\n\u003cp\u003e一个高级的例子\u003c/p\u003e\n\u003cp\u003e茱莉亚的基础库有一个内部的sub2ind函数，用来计算一个线性索引到n维数组中，基于n个多线性索引的集合，换句话说，就是计算可以用A[i]来索引到数组A中的索引i，而不是A[x,y,z,\u0026hellip;]。一种可能的实现方式如下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_loop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eNTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"kt\"\u003eN\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eind\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n           \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"n\"\u003e👎1\u003c/span\u003e\n               \u003cspan class=\"n\"\u003eind\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eind\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eind\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003esub2ind_loop\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_loop\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e同样的事情也可以用递归来完成。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{})\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{},\u003c/span\u003e \u003cspan class=\"n\"\u003ei1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n           \u003cspan class=\"n\"\u003ei1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eBoundsError\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eVararg\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e}},\u003c/span\u003e \u003cspan class=\"n\"\u003ei1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eVararg\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e}},\u003c/span\u003e \u003cspan class=\"n\"\u003ei1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n           \u003cspan class=\"n\"\u003ei1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etail\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_rec\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这两种实现虽然不同，但本质上都是一样的：在数组的维度上进行运行时循环，将每个维度的偏移量收集到最后的索引中。\u003c/p\u003e\n\u003cp\u003e然而，我们在循环中所需要的所有信息都嵌入在参数的类型信息中。因此，我们可以利用生成函数将迭代移动到编译时；用编译器的说法，我们使用生成函数手动展开循环。身体变得几乎相同，但我们不是计算线性指数，而是建立一个计算指数的表达式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eNTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"kt\"\u003eN\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003e👎1\u003c/span\u003e\n               \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003esub2ind_gen\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将产生什么代码呢？\u003c/p\u003e\n\u003cp\u003e一个简单的方法是将主体提取到另一个（常规）函数中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eNTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"kt\"\u003eN\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003esub2ind_gen\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eType\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"kt\"\u003eT\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;:\u003c/span\u003e \u003cspan class=\"kt\"\u003eNTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"kt\"\u003eN\u003c/span\u003e\n           \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;partial indexing is unsupported\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n           \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003e👎1\u003c/span\u003e\n               \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"n\"\u003esub2ind_gen_impl\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egeneric\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在我们可以执行sub2ind_gen_impl并检查它返回的表达式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ejulia\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(((\u003c/span\u003e\u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所以，这里要用到的方法体根本不包含循环\u0026ndash;只是索引到两个元组，乘法和加/减法。所有的循环都是在编译时进行的，我们完全避免了执行过程中的循环。因此，我们对每个类型只进行一次循环，在本例中，每N个类型只循环一次（除非在函数生成一次以上的边缘情况下\u0026ndash;见上面的免责声明）。\u003c/p\u003e\n\u003cp\u003e可选生成的函数\u003c/p\u003e\n\u003cp\u003e生成函数可以在运行时实现高效率，但也有编译时间成本：每一个具体参数类型的组合都必须生成一个新的函数体。通常情况下，Julia能够编译 \u0026ldquo;通用 \u0026ldquo;版本的函数，这些函数将适用于任何参数，但对于生成函数，这是不可能的。这意味着大量使用生成函数的程序可能无法静态编译。\u003c/p\u003e\n\u003cp\u003e为了解决这个问题，语言提供了编写正常的、非生成函数的替代实现的语法。应用到上面的sub2ind例子中，会是这样的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003esub2ind_gen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eNTuple\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"kt\"\u003eN\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eArgumentError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Number of dimensions must match number of indices.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nd\"\u003e@generated\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003e👎1\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eind\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003e👎1\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eind\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edims\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eind\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eind\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在内部，这段代码创建了函数的两个实现：一个是生成的，其中使用了if @generated中的第一个块，另一个是正常的，其中使用了 else块。在if @generated块的then部分内部，代码的语义与其他生成函数相同：参数名指的是类型，代码应该返回一个表达式。可能会出现多个if @生成块，在这种情况下，生成的实现使用所有的then块，而备用的实现使用所有的else块。\u003c/p\u003e\n\u003cp\u003e注意，我们在函数的顶部添加了一个错误检查。这段代码在两个版本中都是通用的，并且在两个版本中都是运行时代码（它将被引用并作为生成版本的表达式返回）。这意味着局部变量的值和类型在代码生成时是不可用的\u0026ndash;代码生成代码只能看到参数的类型。\u003c/p\u003e\n\u003cp\u003e在这种风格的定义中，代码生成功能本质上是一种可选的优化。编译器在方便的情况下会使用它，但其他情况下可能会选择使用正常的实现来代替。这种风格是首选，因为它允许编译器做出更多的决定，并以更多的方式编译程序，而且正常代码比代码生成代码更易读。但是，使用哪种实现取决于编译器的实现细节，所以两种实现的行为必须完全相同。\u003c/p\u003e\n","text":"元编程 在Julia语言中，Lisp最强的遗产是它对元编程的支持。和Lisp一样，Julia也将自己的代码表示为语言本身的数据结构。由于代码是由可以在语言内部创建和操作的对象来表示的，所以程序可以转换和生成自己的代码。这使得复杂的代码生成不需要额外的构建步骤，也允许真正的Lisp式的宏在抽象语法树的层次上操作。相比之下，预处理器的 \u0026ldquo;宏 \u0026ldquo;系统，就像C和C++一样，在任何实际的解析或解释发生之前，都会进行文本操作和替换。由于Julia中所有的数据类型和代码都是由Julia数据结构来表示的，因此，强大的反射功能可以像其他数据一样探索程序及其类型的内部。\n程序表示 每个Julia程序都是以字符串的形式开始的。\njulia\u0026gt; prog = \u0026#34;1 + 1\u0026#34; \u0026#34;1 + 1\u0026#34; 接下来会发生什么？\n下一步是将每个字符串解析成一个对象，称为表达式，用Julia类型 Expr 表示。\njulia\u0026gt; ex1 = Meta.parse(prog) :(1 + 1) julia\u0026gt; typeof(ex1) Expr Expr对象包含两部分。\na 符号标识表达式的种类。符号是一个内嵌的字符串标识符（下文将详细讨论）。\njulia\u0026gt; ex1.head :call 表达式参数，可以是符号、其他表达式或文字值。\njulia\u0026gt; ex1.args 3-element Array{Any,1}: :+ 1 1 也可以直接用前缀符号构造表达式。\njulia\u0026gt; ex2 = Expr(:call, :+, 1, 1) :(1 + 1) 上面构造的两个表达式\u0026ndash;通过解析和直接构造\u0026ndash;是等价的。\njulia\u0026gt; ex1 == ex2 true 这里的关键点是，Julia代码在内部被表示为一个数据结构，可以从语言本身访问。\ndump函数提供了Expr对象的缩进和注释显示。\njulia\u0026gt; dump(ex2) Expr head: Symbol call args: Array{Any}((3,)) 1: Symbol + 2: Int64 1 3: Int64 1 Expr对象也可以被嵌套。\njulia\u0026gt; ex3 = Meta.parse(\u0026#34;(4 + 4) / 2\u0026#34;) :((4 + 4) / 2) 另一种查看表达式的方法是使用Meta.show_sexpr，它可以显示给定Expr的S表达式形式，这对于Lisp的用户来说可能看起来非常熟悉。下面是一个例子，说明如何在嵌套的Expr上显示。\njulia\u0026gt; Meta.show_sexpr(ex3) (:call, :/, (:call, :+, 4, 4), 2) 符号\n在Julia中，:字符有两种语法用途。第一种形式是创建一个Symbol，一个内部字符串，作为表达式的一个构件。\njulia\u0026gt; :foo :foo julia\u0026gt; typeof(ans) Symbol 符号构造函数接受任何数量的参数，并通过将它们的字符串表示连接在一起来创建一个新的符号。\njulia\u0026gt; :foo == Symbol(\u0026#34;foo\u0026#34;) true julia\u0026gt; Symbol(\u0026#34;func\u0026#34;,10) :func10 julia\u0026gt; Symbol(:var,\u0026#39;_\u0026#39;,\u0026#34;sym\u0026#34;) :var_sym 请注意，要使用 : 语法，符号的名称必须是一个有效的标识符。否则必须使用Symbol(str)构造函数。\n在表达式的上下文中，符号用于指示对变量的访问；当表达式被评估时，符号会被替换为在适当的作用域中与该符号绑定的值。\n有时，为了避免在解析时产生歧义，需要在 : 的参数周围加括号。\njulia\u0026gt; :(:) :(:) julia\u0026gt; :(::) :(::) 表达式和评价\n 引用  字符的第二个语法目的是在不使用显式Expr构造函数的情况下创建表达式对象。这就是所谓的引用。在Julia代码的单条语句周围，用成对的括号跟上 : 字符，就可以根据所附的代码生成一个Expr对象。下面是用于引用一个算术表达式的简短形式的例子。\n  julia\u0026gt; ex = :(a+b*c+1) :(a + b * c + 1) julia\u0026gt; typeof(ex) Expr (要查看这个表达式的结构，可以试试ex.head和ex.args，或者使用上面的dump或Meta.@dump)\n注意，可以使用Meta.parse或直接使用Expr形式构造等价的表达式。\njulia\u0026gt; :(a + b*c + 1) == Meta.parse(\u0026#34;a + b*c + 1\u0026#34;) == Expr(:call, :+, :a, Expr(:call, :*, :b, :c), 1) true 解析器提供的表达式一般只有符号、其他表达式和字面值作为其args，而Julia代码构建的表达式可以有任意的运行时值，没有字面形式作为args。在这个具体的例子中，+和a是符号，*(b,c)是一个子表达式，1是一个64位有符号整数的文字形式。\n对于多个表达式，还有第二种引用的语法形式：用引号\u0026hellip;\u0026hellip;结尾括起来的代码块。\njulia\u0026gt; ex = quote x = 1 y = 2 x + y end quote #= none:2 =# x = 1 #= none:3 =# y = 2 #= none:4 =# x + y end julia\u0026gt; typeof(ex) Expr 插值\n用值参数直接构造Expr对象是很强大的，但与 \u0026ldquo;正常的 \u0026ldquo;Julia语法相比，Expr构造函数可能很乏味。作为一种替代方法，Julia允许将字元或表达式插值到引用的表达式中。插值由前缀$表示。\n在这个例子中，变量a的值被内插了。\njulia\u0026gt; a = 1; julia\u0026gt; ex = :($a + b) :(1 + b) 不支持向未引用的表达式插值，并会导致编译时错误。\njulia\u0026gt; $a + b ERROR: syntax: \u0026#34;$\u0026#34; expression outside quote 在这个例子中，元组(1,2,3)作为表达式被内插到一个条件测试中。\njulia\u0026gt; ex = :(a in $:((1,2,3)) ) :(a in (1, 2, 3)) 在表达式插值中使用$是有意让人联想到字符串插值和命令插值。表达式插值可以方便的、可读的程序化构造复杂的Julia表达式。\n劈叉插值\n请注意，$插值语法只允许在一个包围表达式中插入一个表达式。偶尔，你有一个表达式数组，需要它们全部成为包围表达式的参数。这可以用语法$(xs\u0026hellip;)来完成。例如，下面的代码生成了一个函数调用，其中的参数数是通过编程确定的。\njulia\u0026gt; args = [:x, :y, :z]; julia\u0026gt; :(f(1, $(args...))) :(f(1, x, y, z)) 嵌套引用\n自然，引号表达式有可能包含其他引号表达式。在这些情况下，理解内插是如何工作的可能有点棘手。考虑一下这个例子。\njulia\u0026gt; x = :(1 + 2); julia\u0026gt; e = quote quote $x end end quote #= none:1 =# $(Expr(:quote, quote #= none:1 =# $(Expr(:$, :x)) end)) end 注意，结果中包含$x，这意味着x还没有被评估。换句话说，$表达式 \u0026ldquo;属于 \u0026ldquo;内部引号表达式，因此它的参数只有在内部引号表达式时才会被评估。\njulia\u0026gt; eval(e) quote #= none:1 =# 1 + 2 end 但是，外引号表达式能够对内引号中的$内的值进行插值。这是用多个$来完成的。\njulia\u0026gt; e = quote quote $$x end end quote #= none:1 =# $(Expr(:quote, quote #= none:1 =# $(Expr(:$, :(1 + 2))) end)) end 注意到(1+2)现在出现在结果中，而不是符号x。对这个表达式进行评估，得到一个内插的3。\njulia\u0026gt; eval(e) quote #= none:1 =# 3 end 这种行为背后的直觉是，x对每个$都会被评估一次：一个$的工作原理类似于eval(:x)，给出x的值，而两个$的工作原理相当于eval(eval(:x))。\nQuoteNode\n引号形式在AST中的通常表示是一个带头:quote的Expr。\njulia\u0026gt; dump(Meta.parse(\u0026#34;:(1+2)\u0026#34;)) Expr head: Symbol quote args: Array{Any}((1,)) 1: Expr head: Symbol call args: Array{Any}((3,)) 1: Symbol + 2: Int64 1 3: Int64 2 正如我们所看到的，这类表达式支持用$进行插值，但是在某些情况下，有必要在不进行插值的情况下引用代码。这种引用还没有语法，但在内部表示为一个类型为QuoteNode的对象。\njulia\u0026gt; eval(Meta.quot(Expr(:$, :(1+2)))) 3 julia\u0026gt; eval(QuoteNode(Expr(:$, :(1+2)))) :($(Expr(:$, :(1 + 2)))) 该解析器产生的QuoteNodes用于简单的引用项目，如符号。\njulia\u0026gt; dump(Meta.parse(\u0026#34;:x\u0026#34;)) QuoteNode value: Symbol x QuoteNode还可以用于某些高级元编程任务。\n评估表达式\n给定一个表达式对象，可以使用eval使Julia在全局范围内对其进行评估（执行）。\njulia\u0026gt; :(1 + 2) :(1 + 2) julia\u0026gt; eval(ans) 3 julia\u0026gt; ex = :(a + b) :(a + b) julia\u0026gt; eval(ex) ERROR: UndefVarError: b not defined [...] julia\u0026gt; a = 1; b = 2; julia\u0026gt; eval(ex) 3 每个模块都有自己的 eval 函数，它可以在全局范围内评估表达式。传递给eval的表达式并不局限于返回值\u0026ndash;它们也可以产生副作用，改变模块环境的状态。\njulia\u0026gt; ex = :(x = 1) :(x = 1) julia\u0026gt; x ERROR: UndefVarError: x not defined julia\u0026gt; eval(ex) 1 julia\u0026gt; x 1 在这里，对表达式对象的评价会导致一个值被分配给全局变量x。\n由于表达式只是Expr对象，可以通过编程构造，然后进行评估，因此可以动态生成任意代码，然后使用eval进行运行。下面是一个简单的例子。\njulia\u0026gt; a = 1; julia\u0026gt; ex = Expr(:call, :+, a, :b) :(1 + b) julia\u0026gt; a = 0; b = 2; julia\u0026gt; eval(ex) 3 a的值用于构造表达式ex，该表达式将+函数应用于值1和变量b，注意a和b的使用方式的重要区别。\n变量a的值在表达式构造时被用作表达式中的即时值。因此，当表达式被评估时，a的值不再重要：表达式中的值已经是1，无论a的值是多少，都是独立的。 另一方面，在表达式的构造中使用了符号:b，所以变量b的值在那个时候是无关紧要的\u0026ndash;:b只是一个符号，变量b甚至不需要被定义。但在表达式评估时，符号:b的值是通过查找变量b的值来解决的。 表达式上的函数\n如上所述，Julia的一个极其有用的特性是在Julia本身内部生成和操作Julia代码的能力。我们已经看到了一个函数返回Expr对象的例子：parse函数，它接收一串Julia代码并返回相应的Expr。一个函数也可以接受一个或多个Expr对象作为参数，并返回另一个Expr。下面是一个简单的、激励性的例子。\njulia\u0026gt; function math_expr(op, op1, op2) expr = Expr(:call, op, op1, op2) return expr end math_expr (generic function with 1 method) julia\u0026gt; ex = math_expr(:+, 1, Expr(:call, :*, 4, 5)) :(1 + 4 * 5) julia\u0026gt; eval(ex) 21 作为另一个例子，这里有一个函数，它可以将任何数字参数翻倍，但不考虑表达式。\njulia\u0026gt; function make_expr2(op, opr1, opr2) opr1f, opr2f = map(x -\u0026gt; isa(x, Number) ? 2*x : x, (opr1, opr2)) retexpr = Expr(:call, op, opr1f, opr2f) return retexpr end make_expr2 (generic function with 1 method) julia\u0026gt; make_expr2(:+, 1, 2) :(2 + 4) julia\u0026gt; ex = make_expr2(:+, 1, Expr(:call, :*, 5, 8)) :(2 + 5 * 8) julia\u0026gt; eval(ex) 42 宏 宏提供了一种将生成的代码包含在程序的最后主体中的方法。宏将一个参数元组映射到一个返回的表达式，生成的表达式直接被编译，而不需要运行时 eval 调用。宏参数可以包括表达式、字面值和符号。\n基础知识 这里有一个特别简单的宏。\njulia\u0026gt; macro sayhello() return :( println(\u0026#34;Hello, world!\u0026#34;) ) end @sayhello (macro with 1 method) 在 Julia 的语法中，宏有一个专门的字符：@(at 符号)，后面是 macro NAME ... end 块中声明的唯一名称\u0026hellip;.。在这个例子中，编译器将用 @sayhello 替换所有的实例。\n:( println(\u0026#34;Hello, world!\u0026#34;) ) 当在 REPL 中输入 @sayhello 时，表达式会立即执行，因此我们只看到求值结果。\njulia\u0026gt; @sayhello() Hello, world! 现在，考虑一个稍微复杂的宏。\njulia\u0026gt; macro sayhello(name) return :( println(\u0026#34;Hello, \u0026#34;, $name) ) end @sayhello (macro with 1 method) 这个宏只取一个参数：name。当遇到 @sayhello 时，引用的表达式会被展开，将参数的值内插到最终的表达式中。\njulia\u0026gt; @sayhello(\u0026#34;human\u0026#34;) Hello, human 我们可以使用函数 macroexpand 查看引用的返回表达式（重要提示：这是调试宏的一个极其有用的工具）。\njulia\u0026gt; ex = macroexpand(Main, :(@sayhello(\u0026#34;human\u0026#34;)) ) :(Main.println(\u0026#34;Hello, \u0026#34;, \u0026#34;human\u0026#34;)) julia\u0026gt; typeof(ex) Expr 我们可以看到，\u0026ldquo;human\u0026rdquo; 的字面值已经被插进了表达式中。\n此外，还存在一个宏 @macroexpand，也许比 macroexpand 函数更方便一些。\njulia\u0026gt; @macroexpand @sayhello \u0026#34;human\u0026#34; :(println(\u0026#34;Hello, \u0026#34;, \u0026#34;human\u0026#34;)) 等等：为什么是宏？ 我们在前一节已经看到了一个函数 f(::Expr...) -\u0026gt; Expr。其实，macroexpand 也是这样一个函数。那么，为什么要有宏的存在呢？\n宏是必要的，因为它们在代码解析时执行，因此，宏允许程序员在完整程序运行之前生成并包含自定义代码的片段。为了说明两者的区别，请考虑下面的例子。\njulia\u0026gt; macro twostep(arg) println(\u0026#34;I execute at parse time. The argument is: \u0026#34;, arg) return :(println(\u0026#34;I execute at runtime. The argument is: \u0026#34;, $arg)) end @twostep (macro with 1 method) julia\u0026gt; ex = macroexpand(Main, :(@twostep :(1, 2, 3)) ); I execute at parse time. The argument is: :((1, 2, 3)) 当调用 macroexpand 时，会执行对 println 的第一次调用。结果的表达式只包含第二个 println。\njulia\u0026gt; typeof(ex) Expr julia\u0026gt; ex :(println(\u0026#34;I execute at runtime. The argument is: \u0026#34;, $(Expr(:copyast, :($(QuoteNode(:((1, 2, 3))))))))) julia\u0026gt; eval(ex) I execute at runtime. The argument is: (1, 2, 3) 宏调用 宏的调用有以下一般语法。\n@name expr1 expr2 ... @name(expr1, expr2, ...) 注意在宏名前有区别的 @，第一种形式的参数表达式之间没有逗号，第二种形式的 @ 名后没有空格。两种样式不能混用。例如，下面的语法与上面的例子不同，它将元组 (expr1, expr2, \u0026hellip;) 作为一个参数传递给宏。\n@name (expr1, expr2, ...) 在数组字面量（或解析）上调用宏的另一种方法是将两者并列，而不使用括号。在这种情况下，数组将是唯一输入宏的表达式。下面的语法是等价的（与 @name [a b] * v 不同）。\n@name[a b] * v @name([a b]) * v 需要强调的是，宏以表达式、字面值或符号的形式接收其参数。探索宏参数的一种方法是在宏体中调用 show 函数。\njulia\u0026gt; macro showarg(x) show(x) # ... remainder of macro, returning an expression end @showarg (macro with 1 method) julia\u0026gt; @showarg(a) :a julia\u0026gt; @showarg(1+1) :(1 + 1) julia\u0026gt; @showarg(println(\u0026#34;Yo!\u0026#34;)) :(println(\u0026#34;Yo!\u0026#34;)) 除了给定的参数列表之外，每个宏都会被传递额外的参数 __source__ 和 __module__。\n参数 __source__ 提供了关于来自宏调用的 @ 符号的解析器位置的信息（以 LineNumberNode 对象的形式）。这使得宏能够包含更好的错误诊断信息，并且通常被日志、字符串解析器宏和文档等使用，例如，也被用来实现 @LINE、@FILE 和 @DIR 宏。\n位置信息可以通过引用 __source__.line 和 __source__.file 来访问。\njulia\u0026gt; macro __LOCATION__(); return QuoteNode(__source__); end @__LOCATION__ (macro with 1 method) julia\u0026gt; dump( @__LOCATION__( )) LineNumberNode line: Int64 2 file: Symbol none 参数 __module__ 提供了关于宏调用的扩展上下文的信息（以 Module 对象的形式）。这允许宏查找上下文信息，如现有的绑定，或者将该值作为额外的参数插入到在当前模块中做自省的运行时函数调用中。\n构建一个高级宏 这里是 Julia 的 @assert 宏的简化定义。\njulia\u0026gt; macro assert(ex) return :( $ex ? nothing : throw(AssertionError($(string(ex)))) ) end @assert (macro with 1 method) 这个宏可以这样使用。\njulia\u0026gt; @assert 1 == 1.0 julia\u0026gt; @assert 1 == 0 ERROR: AssertionError: 1 == 0 宏调用在解析时扩展到它的返回结果。这就相当于写。\n1 == 1.0 ? nothing : throw(AssertionError(\u0026#34;1 == 1.0\u0026#34;)) 1 == 0 ? nothing : throw(AssertionError(\u0026#34;1 == 0\u0026#34;)) 也就是说，在第一次调用中，表达式 :(1 == 1.0) 被拼接到测试条件槽中，而 string(:(1 == 1.0)) 的值被拼接到断言消息槽中。这样构造出来的整个表达式，就被放到了发生 @assert 宏调用的语法树中。然后在执行时，如果测试表达式评估为真，那么返回 nothing，而如果测试为假，则会引发一个错误，表明断言表达式是假的。注意，如果把这个写成函数就不行了，因为只有条件的值，不可能在错误信息中显示计算条件的表达式。\nJulia Base 中 @assert 的实际定义比较复杂。它允许用户有选择地指定自己的错误信息，而不是只打印失败的表达式。就像在参数数可变的函数（Varargs Functions）中一样，在最后一个参数后面用省略号来指定。\njulia\u0026gt; macro assert(ex, msgs...) msg_body = isempty(msgs) ? ex : msgs[1] msg = string(msg_body) return :($ex ? nothing : throw(AssertionError($msg))) end @assert (macro with 1 method) 现在 @assert 有两种操作模式，取决于它接收到的参数数量！如果只有一个参数，那么 msgs 捕获的表达式元组将是空的，它的行为和上面的简单定义一样。如果只有一个参数，msgs 捕获的表达式元组将是空的，它的行为与上面的简单定义相同。但现在如果用户指定了第二个参数，它将被打印在消息正文中，而不是失败的表达式。你可以用 @macroexpand 宏来检查宏扩展的结果。\njulia\u0026gt; @macroexpand @assert a == b :(if Main.a == Main.b Main.nothing else Main.throw(Main.AssertionError(\u0026#34;a == b\u0026#34;)) end) julia\u0026gt; @macroexpand @assert a==b \u0026#34;a should equal b!\u0026#34; :(if Main.a == Main.b Main.nothing else Main.throw(Main.AssertionError(\u0026#34;a should equal b!\u0026#34;)) end) 实际的 @assert 宏还可以处理另一种情况：如果除了打印 \u0026ldquo;a should equal b\u0026rdquo; 之外，我们还想打印它们的值呢？人们可能会天真地尝试在自定义消息中使用字符串插值，例如，@assert a==b \u0026quot;a ($a) should equal b ($b)!\u0026quot;，但这在上面的宏中不会像预期的那样工作。你能明白为什么吗？从字符串插值回想一下，插值后的字符串会被改写成对字符串的调用。比较一下。\njulia\u0026gt; typeof(:(\u0026#34;a should equal b\u0026#34;)) String julia\u0026gt; typeof(:(\u0026#34;a ($a) should equal b ($b)!\u0026#34;)) Expr julia\u0026gt; dump(:(\u0026#34;a ($a) should equal b ($b)!\u0026#34;)) Expr head: Symbol string args: Array{Any}((5,)) 1: String \u0026#34;a (\u0026#34; 2: Symbol a 3: String \u0026#34;) should equal b (\u0026#34; 4: Symbol b 5: String \u0026#34;)!\u0026#34; 因此，现在宏不是在 msg_body 中得到一个普通的字符串，而是接收一个完整的表达式，这个表达式需要被评估，以便按照预期的方式显示。这可以直接拼接到返回的表达式中，作为字符串调用的一个参数；完整的实现请参见 error.jl。\n@assert 宏很好地利用了拼接成引号的表达式，简化了宏体内部对表达式的操作。\n卫生宏 在比较复杂的宏中会出现一个问题，那就是卫生问题。简而言之，宏必须确保它们在返回的表达式中引入的变量不会意外地与它们扩展到的周围代码中的现有变量发生冲突。相反，作为参数传入宏中的表达式往往要在周围代码的上下文中进行评估，与现有变量进行交互和修改。另一个关注点来自于一个事实，即一个宏可能会在与它被定义的模块不同的地方被调用。在这种情况下，我们需要确保所有的全局变量被解析到正确的模块中。与具有文本宏扩展的语言（如C语言）相比，Julia 已经有了很大的优势，因为它只需要考虑返回的表达式。所有其他的变量（比如上面 @assert 中的 msg）都遵循正常的作用域块行为。\n为了证明这些问题，让我们考虑写一个 @time 宏，它接受一个表达式作为参数，记录时间，评估表达式，再次记录时间，打印前后时间的差值，然后以表达式的值作为其最终值。这个宏可能是这样的。\nmacro time(ex) return quote local t0 = time_ns() local val = $ex local t1 = time_ns() println(\u0026#34;elapsed time: \u0026#34;, (t1-t0)/1e9, \u0026#34; seconds\u0026#34;) val end end 在这里，我们希望 t0、t1 和 val 是私有的临时变量，我们希望 time 引用 Julia Base 中的 time 函数，而不是用户可能拥有的任何 time 变量（同样适用于 println）。想象一下，如果用户表达式 ex 也包含了对一个叫 t0 的变量的赋值，或者定义了自己的 time 变量，可能会出现的问题。我们可能会得到错误，或者神秘的不正确行为。\nJulia 的宏扩展器用以下方式解决了这些问题。首先，宏结果中的变量被分为局部或全局。如果一个变量被分配给（而不是声明为全局）、声明为局部，或者被用作函数参数名，那么它被认为是局部的。否则，它被认为是全局变量。局部变量就会被重命名为唯一的（使用 gensym 函数，生成新的符号），全局变量则在宏定义环境中解决。因此，上述两个问题都得到了处理；宏的局部变量不会与任何用户变量冲突，time 和 println 将引用 Julia Base 定义。\n然而，仍然存在一个问题。考虑下面这个宏的使用。\nmodule MyModule import Base.@time time() = ... # compute something @time time() end 这里的用户表达式 ex 是对 time 的调用，但不是宏使用的那个 time 函数。它显然是指 MyModule.time。因此我们必须安排 ex 中的代码在宏调用环境中进行解析。这可以通过用 esc 对表达式进行\u0026quot;转义\u0026quot;来实现。\nmacro time(ex) ... local val = $(esc(ex)) ... end 以这种方式包装的表达式，宏扩展器不会管它，只需逐字粘贴到输出中即可。因此它将在宏调用环境中被解析。\n在必要的时候，可以利用这种转义机制来\u0026quot;违反\u0026quot;卫生，以便引入或操作用户变量。例如，下面的宏在调用环境中将 x 设为零。\njulia\u0026gt; macro zerox() return esc(:(x = 0)) end @zerox (macro with 1 method) julia\u0026gt; function foo() x = 1 @zerox return x # is zero end foo (generic function with 1 method) julia\u0026gt; foo() 0 这种对变量的操作应谨慎使用，但偶尔也很方便。\n掌握正确的卫生规则可能是一个艰巨的挑战。在使用宏之前，你可能需要考虑一个函数闭包是否足够。另一个有用的策略是将尽可能多的工作推迟到运行时。例如，许多宏简单地将其参数包裹在 QuoteNode 或其他类似的 Expr 中。一些例子包括 @task body，它简单地返回 schedule(Task(()-\u0026gt; $body))，以及 @eval expr，它简单地返回 eval(QuoteNode(expr))。\n为了演示，我们可以将上面的 @time 例子重写为。\nmacro time(expr) return :(timeit(() -\u0026gt; $(esc(expr)))) end function timeit(f) t0 = time_ns() val = f() t1 = time_ns() println(\u0026#34;elapsed time: \u0026#34;, (t1-t0)/1e9, \u0026#34; seconds\u0026#34;) return val end 然而，我们不这样做是有充分的理由的：将 expr 包装在一个新的作用域块中（匿名函数）也会稍微改变表达式的含义（其中任何变量的作用域），同时我们希望 @time 可以使用，而对被包装的代码影响最小。\n宏和调度 宏，就像 Julia 函数一样，是通用的。这意味着它们也可以有多个方法定义，这要归功于多重分派。\njulia\u0026gt; macro m end @m (macro with 0 methods) julia\u0026gt; macro m(args...) println(\u0026#34;$(length(args))arguments\u0026#34;) end @m (macro with 1 method) julia\u0026gt; macro m(x,y) println(\u0026#34;Two arguments\u0026#34;) end @m (macro with 2 methods) julia\u0026gt; @m \u0026#34;asd\u0026#34; 1 arguments julia\u0026gt; @m 1 2 Two arguments 然而我们应该记住，宏调度是基于交给宏的 AST 类型，而不是 AST 在运行时评估的类型。\njulia\u0026gt; macro m(::Int) println(\u0026#34;An Integer\u0026#34;) end @m (macro with 3 methods) julia\u0026gt; @m 2 An Integer julia\u0026gt; x = 2 2 julia\u0026gt; @m x 1 arguments 代码生成 当需要大量重复的模板代码时，通常会以编程方式生成，以避免冗余。在大多数语言中，这需要一个额外的构建步骤，以及一个单独的程序来生成重复的代码。在 Julia 中，表达式插值和 eval 允许这样的代码生成在程序执行的正常过程中进行。例如，考虑以下自定义类型\nstruct MyNumber x::Float64 end # output 我们想为其添加一些方法。我们可以在下面的循环中以编程的方式进行。\nfor op = (:sin, :cos, :tan, :log, :exp) eval(quote Base.$op(a::MyNumber) = MyNumber($op(a.x)) end) end # output 现在我们可以用我们的自定义类型来使用这些函数。\njulia\u0026gt; x = MyNumber(π) MyNumber(3.141592653589793) julia\u0026gt; sin(x) MyNumber(1.2246467991473532e-16) julia\u0026gt; cos(x) MyNumber(-1.0) 这样一来，Julia 就像自己的预处理器一样，可以从语言内部生成代码。上面的代码可以使用 : 前缀引号的形式，写得稍显生硬。\nfor op = (:sin, :cos, :tan, :log, :exp) eval(:(Base.$op(a::MyNumber) = MyNumber($op(a.x)))) end 不过，这种使用 eval(quote(...)) 模式生成的语言内代码很常见，所以 Julia 自带了一个宏来缩写这种模式。\nfor op = (:sin, :cos, :tan, :log, :exp) @eval Base.$op(a::MyNumber) = MyNumber($op(a.x)) end @eval 宏重写了这个调用，使之与上述较长版本的调用完全等同。对于较长的生成代码块，给 @eval 的表达式参数可以是一个块。\n@eval begin # multiple lines end 非标准字符串字面值 从 Strings 中回想一下，以标识符为前缀的字符串字元称为非标准字符串字元，其语义可能与未加前缀的字符串字面值不同。例如\nr\u0026rdquo;^\\s*(?:#|$) \u0026ldquo;产生一个正则表达式对象，而不是一个字符串。 b \u0026ldquo;DATA\\xff\\u2200 \u0026ldquo;是一个[68,65,84,65,255,226,136,128]的字节数组文字。 也许令人惊讶的是，这些行为并没有被硬编码到Julia解析器或编译器中。相反，它们是由一个通用机制提供的自定义行为，任何人都可以使用：前缀的字符串字元被解析为对特别命名的宏的调用。例如，正则表达式宏就如下。\nmacro r_str(p) Regex(p) end 就是这样。这个宏表示应该将字符串字词r\u0026rdquo;^\\s*(?:#|$) \u0026ldquo;的字面内容传递给@r_str宏，并将扩展的结果放入字符串字词出现的语法树中。换句话说，表达式r\u0026rdquo;^\\s*(?:#|$) \u0026ldquo;相当于将下面的对象直接放入语法树中。\nRegex(\u0026#34;^\\\\s*(?:#|\\$)\u0026#34;) 字符串形式不仅更短、更方便，而且效率更高：由于正则表达式是编译的，而Regex对象实际上是在代码编译时创建的，所以编译只发生一次，而不是每次执行代码时。考虑一下如果正则表达式发生在循环中。\nfor line = lines m = match(r\u0026#34;^\\s*(?:#|$)\u0026#34;, line) if m === nothing # non-comment else # comment end end 由于正则表达式r\u0026rdquo;^/ds*(?:#|$) \u0026ldquo;在解析这段代码时被编译并插入语法树中，所以该表达式只被编译一次，而不是每次循环执行时都被编译。为了在不使用宏的情况下实现这个目标，必须这样写这个循环。\nre = Regex(\u0026#34;^\\\\s*(?:#|\\$)\u0026#34;) for line = lines m = match(re, line) if m === nothing # non-comment else # comment end end 此外，如果编译器不能确定regex对象在所有循环中都是恒定的，某些优化可能就无法实现，这就使得这个版本的效率仍然不如上面更方便的文字形式。当然，在有些情况下，非字面形式还是比较方便的：如果需要在正则表达式中插入一个变量，就必须采取这种比较啰嗦的方式；在正则表达式模式本身是动态的，有可能在每次循环迭代时发生变化的情况下，必须在每次迭代时构造一个新的正则表达式对象。然而，在绝大多数用例中，正则表达式并不是基于运行时数据来构造的。在这大多数情况下，将正则表达式写成编译时值的能力是非常宝贵的。\n与非标准字符串字元一样，非标准命令字元也是使用命令字元语法的前缀变体存在的。命令字元customliteral被解析为@custom_cmd \u0026ldquo;literal\u0026rdquo;。Julia本身不包含任何非标准的命令字元，但包可以利用这种语法。除了语法不同和用_cmd后缀代替_str后缀外，非标准命令字元的行为与非标准字符串字元完全相同。\n如果两个模块提供了名称相同的非标准字符串或命令字元，可以用模块名称来限定字符串或命令字元。例如，如果Foo和Bar都提供了非标准的字符串字元@x_str，那么可以写成Foo.x \u0026ldquo;字元 \u0026ldquo;或Bar.x \u0026ldquo;字元 \u0026ldquo;来区分两者。\n用户定义字符串字元的机制是深刻的、强大的。不仅Julia的非标准字元用它来实现，而且命令字元语法（echo \u0026quot;Hello, $person\u0026quot;）也用下面这个看似无害的宏来实现。\nmacro cmd(str) :(cmd_gen($(shell_parse(str)[1]))) end 当然，这个宏定义中使用的函数中隐藏着大量的复杂性，但它们只是函数，完全是用Julia编写的。你可以阅读它们的源码，并精确地看到它们的作用\u0026ndash;它们所做的只是构造表达式对象，以便插入到你的程序的语法树中。\n生成的函数\n一个非常特殊的宏是@generated，它允许你定义所谓的生成函数。这些函数能够根据其参数的类型生成专门的代码，其灵活性和/或代码量比使用多重调度时更少。宏在解析时与表达式一起工作，不能访问其输入的类型，而生成函数在参数类型已知时得到扩展，但函数尚未编译。\n生成函数声明不是执行一些计算或动作，而是返回一个引号的表达式，然后形成与参数类型相对应的方法的主体。当一个生成函数被调用时，它返回的表达式会被编译，然后运行。为了提高效率，通常会对结果进行缓存。而为了使之可推断，只有有限的语言子集可以使用。因此，生成函数提供了一种灵活的方式，将工作从运行时转移到编译时，但代价是对允许的构造有更大的限制。\n在定义生成函数时，与普通函数有五个主要区别。\n你用 @generated 宏来注释函数声明。这在AST中添加了一些信息，让编译器知道这是一个生成函数。 在生成函数的主体中，你只能访问参数的类型，而不能访问它们的值。 你不是计算一些东西或执行一些操作，而是返回一个引号的表达式，当它被评估时，就会执行你想要的东西。 生成函数只允许调用在生成函数定义之前定义的函数。(如果不遵守这一点，可能会得到引用未来世界时代函数的MethodErrors。) 生成的函数不得突变或观察任何非常态的全局状态（包括，例如，IO、锁、非本地字典或使用hasmethod）。这意味着它们只能读取全局常量，不能有任何副作用。换句话说，它们必须是完全纯粹的。由于实现上的限制，这也意味着它们目前不能定义闭包或生成器。 用一个例子来说明这一点是最简单的。我们可以将一个生成函数foo声明为\njulia\u0026gt; @generated function foo(x) Core.println(x) return :(x * x) end foo (generic function with 1 method) 请注意，函数体返回的是一个引号表达式，即:(x * x)，而不仅仅是x * x的值。\n从调用者的角度来看，这和正则函数是一样的；事实上，你不必知道你调用的是正则函数还是生成函数。让我们来看看foo是如何表现的。\njulia\u0026gt; x = foo(2); # note: output is from println() statement in the body Int64 julia\u0026gt; x # now we print x 4 julia\u0026gt; y = foo(\u0026#34;bar\u0026#34;); String julia\u0026gt; y \u0026#34;barbar\u0026#34; 所以，我们看到，在生成函数的主体中，x是传递的参数的类型，而生成函数返回的值，是我们从定义中返回的引用表达式的评估结果，现在的值是x。\n如果我们用已经使用过的类型再次评估foo，会发生什么？\njulia\u0026gt; foo(4) 16 注意，没有打印出Int64的结果。我们可以看到，这里只针对特定的参数类型集执行了一次生成函数的主体，结果被缓存。之后，对于本例来说，第一次调用时生成函数返回的表达式被重新用作方法体。但是，实际的缓存行为是一种实现定义的性能优化，所以过于依赖这种行为是无效的。\n生成函数的次数可能只有一次，但也可能更频繁，或者看起来根本没有发生。因此，你永远不应该写一个有副作用的生成函数\u0026ndash;副作用何时发生，多久发生一次，都是没有定义的。(这对宏来说也是如此\u0026ndash;就像对宏一样，在生成函数中使用eval是一个标志，表明你做了一些错误的事情。) 然而，与宏不同的是，运行时系统无法正确处理对eval的调用，所以不允许使用它。\n同样重要的是看@生成函数如何与方法重新定义交互。按照正确的@生成函数不能观察任何可突变的状态或引起任何全局状态的突变的原则，我们看到以下行为。观察生成函数不能调用任何在生成函数本身定义之前没有定义的方法。\n最初f(x)有一个定义\njulia\u0026gt; f(x) = \u0026#34;original definition\u0026#34;; 定义其他使用f(x)的操作。\njulia\u0026gt; g(x) = f(x); julia\u0026gt; @generated gen1(x) = f(x); julia\u0026gt; @generated gen2(x) = :(f(x)); 现在我们为f(x)添加一些新的定义。\njulia\u0026gt; f(x::Int) = \u0026#34;definition for Int\u0026#34;; julia\u0026gt; f(x::Type{Int}) = \u0026#34;definition for Type{Int}\u0026#34;; 并比较这些结果有何不同。\njulia\u0026gt; f(1) \u0026#34;definition for Int\u0026#34; julia\u0026gt; g(1) \u0026#34;definition for Int\u0026#34; julia\u0026gt; gen1(1) \u0026#34;original definition\u0026#34; julia\u0026gt; gen2(1) \u0026#34;definition for Int\u0026#34; 生成函数的每个方法都有自己的定义函数视图。\njulia\u0026gt; @generated gen1(x::Real) = f(x); julia\u0026gt; gen1(1) \u0026#34;definition for Type{Int}\u0026#34; 上面的生成函数foo例子并没有做任何普通函数foo(x) = x * x不能做的事情（除了在第一次调用时打印类型，并产生较高的开销）。然而，生成函数的强大之处在于它能够根据传递给它的类型计算不同的引号表达式。\njulia\u0026gt; @generated function bar(x) if x \u0026lt;: Integer return :(x ^ 2) else return :(x) end end bar (generic function with 1 method) julia\u0026gt; bar(4) 16 julia\u0026gt; bar(\u0026#34;baz\u0026#34;) \u0026#34;baz\u0026#34; (当然，这个人为的例子可以更容易地使用多个调度来实现\u0026hellip;)\n滥用这一点将破坏运行时系统并导致未定义的行为。\njulia\u0026gt; @generated function baz(x) if rand() \u0026lt; .9 return :(x^2) else return :(\u0026#34;boo!\u0026#34;) end end baz (generic function with 1 method) 由于生成的函数主体是非确定的，所以它的行为以及所有后续代码的行为都是未定义的。\n不要抄袭这些例子!\n这些例子希望对说明生成函数的工作方式有所帮助，包括在定义端和调用端；但是，不要复制它们，原因如下。\nfoo函数有副作用 (对Core.println的调用), 而这些副作用究竟何时发生, 多久发生一次, 或发生多少次, 都是没有定义的 bar函数解决了一个问题，而这个问题最好用多重调度来解决\u0026ndash;定义bar(x) = x和bar(x::Integer) = x ^ 2会做同样的事情，但它既简单又快速。 baz函数是病态的 请注意，在生成的函数中不应该尝试的操作集是没有限制的，运行时系统目前只能检测到无效操作的一个子集。还有许多其他的操作会在不通知的情况下简单地破坏运行时系统，通常以微妙的方式与坏定义没有明显的联系。因为函数生成器是在推理过程中运行的，它必须尊重该代码的所有限制。\n一些不应该尝试的操作包括。\n缓存本地指针 以任何方式与Core.Compiler的内容或方法进行交互。 观察任何可变状态。\n对生成的函数的推理可以在任何时候运行，包括在您的代码试图观察或突变此状态时。 占用任何锁。你调用的C代码可以在内部使用锁，（例如，调用malloc是没有问题的，即使大多数实现在内部需要锁），但不要试图在执行Julia代码时持有或获取任何锁。 调用在生成函数主体之后定义的任何函数。对于增量加载的预编译模块，这个条件是放宽的，允许调用模块中的任何函数。 好了，现在我们对生成函数的工作原理有了更好的理解，让我们用它们来构建一些更高级的（有效的）功能\u0026hellip;\n一个高级的例子\n茱莉亚的基础库有一个内部的sub2ind函数，用来计算一个线性索引到n维数组中，基于n个多线性索引的集合，换句话说，就是计算可以用A[i]来索引到数组A中的索引i，而不是A[x,y,z,\u0026hellip;]。一种可能的实现方式如下。\njulia\u0026gt; function sub2ind_loop(dims::NTuple{N}, I::Integer...) where N ind = I[N] - 1 for i = N-1👎1 ind = I[i]-1 + dims[i]*ind end return ind + 1 end sub2ind_loop (generic function with 1 method) julia\u0026gt; sub2ind_loop((3, 5), 1, 2) 4 同样的事情也可以用递归来完成。\njulia\u0026gt; sub2ind_rec(dims::Tuple{}) = 1; julia\u0026gt; sub2ind_rec(dims::Tuple{}, i1::Integer, I::Integer...) = i1 == 1 ? sub2ind_rec(dims, I...) : throw(BoundsError()); julia\u0026gt; sub2ind_rec(dims::Tuple{Integer, Vararg{Integer}}, i1::Integer) = i1; julia\u0026gt; sub2ind_rec(dims::Tuple{Integer, Vararg{Integer}}, i1::Integer, I::Integer...) = i1 + dims[1] * (sub2ind_rec(Base.tail(dims), I...) - 1); julia\u0026gt; sub2ind_rec((3, 5), 1, 2) 4 这两种实现虽然不同，但本质上都是一样的：在数组的维度上进行运行时循环，将每个维度的偏移量收集到最后的索引中。\n然而，我们在循环中所需要的所有信息都嵌入在参数的类型信息中。因此，我们可以利用生成函数将迭代移动到编译时；用编译器的说法，我们使用生成函数手动展开循环。身体变得几乎相同，但我们不是计算线性指数，而是建立一个计算指数的表达式。\njulia\u0026gt; @generated function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N ex = :(I[$N] - 1) for i = (N - 1)👎1 ex = :(I[$i] - 1 + dims[$i] * $ex) end return :($ex + 1) end sub2ind_gen (generic function with 1 method) julia\u0026gt; sub2ind_gen((3, 5), 1, 2) 4 这将产生什么代码呢？\n一个简单的方法是将主体提取到另一个（常规）函数中。\njulia\u0026gt; @generated function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N return sub2ind_gen_impl(dims, I...) end sub2ind_gen (generic function with 1 method) julia\u0026gt; function sub2ind_gen_impl(dims::Type{T}, I...) where T \u0026lt;: NTuple{N,Any} where N length(I) == N || return :(error(\u0026#34;partial indexing is unsupported\u0026#34;)) ex = :(I[$N] - 1) for i = (N - 1)👎1 ex = :(I[$i] - 1 + dims[$i] * $ex) end return :($ex + 1) end sub2ind_gen_impl (generic function with 1 method) 现在我们可以执行sub2ind_gen_impl并检查它返回的表达式。\njulia\u0026gt; sub2ind_gen_impl(Tuple{Int,Int}, Int, Int) :(((I[1] - 1) + dims[1] * (I[2] - 1)) + 1) 所以，这里要用到的方法体根本不包含循环\u0026ndash;只是索引到两个元组，乘法和加/减法。所有的循环都是在编译时进行的，我们完全避免了执行过程中的循环。因此，我们对每个类型只进行一次循环，在本例中，每N个类型只循环一次（除非在函数生成一次以上的边缘情况下\u0026ndash;见上面的免责声明）。\n可选生成的函数\n生成函数可以在运行时实现高效率，但也有编译时间成本：每一个具体参数类型的组合都必须生成一个新的函数体。通常情况下，Julia能够编译 \u0026ldquo;通用 \u0026ldquo;版本的函数，这些函数将适用于任何参数，但对于生成函数，这是不可能的。这意味着大量使用生成函数的程序可能无法静态编译。\n为了解决这个问题，语言提供了编写正常的、非生成函数的替代实现的语法。应用到上面的sub2ind例子中，会是这样的。\nfunction sub2ind_gen(dims::NTuple{N}, I::Integer...) where N if N != length(I) throw(ArgumentError(\u0026#34;Number of dimensions must match number of indices.\u0026#34;)) end if @generated ex = :(I[$N] - 1) for i = (N - 1)👎1 ex = :(I[$i] - 1 + dims[$i] * $ex) end return :($ex + 1) else ind = I[N] - 1 for i = (N - 1)👎1 ind = I[i] - 1 + dims[i]*ind end return ind + 1 end end 在内部，这段代码创建了函数的两个实现：一个是生成的，其中使用了if @generated中的第一个块，另一个是正常的，其中使用了 else块。在if @generated块的then部分内部，代码的语义与其他生成函数相同：参数名指的是类型，代码应该返回一个表达式。可能会出现多个if @生成块，在这种情况下，生成的实现使用所有的then块，而备用的实现使用所有的else块。\n注意，我们在函数的顶部添加了一个错误检查。这段代码在两个版本中都是通用的，并且在两个版本中都是运行时代码（它将被引用并作为生成版本的表达式返回）。这意味着局部变量的值和类型在代码生成时是不可用的\u0026ndash;代码生成代码只能看到参数的类型。\n在这种风格的定义中，代码生成功能本质上是一种可选的优化。编译器在方便的情况下会使用它，但其他情况下可能会选择使用正常的实现来代替。这种风格是首选，因为它允许编译器做出更多的决定，并以更多的方式编译程序，而且正常代码比代码生成代码更易读。但是，使用哪种实现取决于编译器的实现细节，所以两种实现的行为必须完全相同。\n"},"name":"元编程","published":"2020-12-29T00:00:00Z","summary":"Metaprogramming","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-12-29-metaprogramming/"},{"content":{"html":"\u003ch2 id=\"julia-repl\"\u003eJulia REPL\u003c/h2\u003e\n\u003cp\u003eJulia 在 \u003ccode\u003ejulia\u003c/code\u003e 可执行文件中内置了一个功能齐全的交互式命令行 REPL（read-eval-print loop）。除了允许快速、简单地评估 Julia 语句外，它还具有可搜索的历史记录、tab-补全、许多有用的键绑定以及专门的帮助和 \u003ccode\u003eshell\u003c/code\u003e 模式。REPL 可以通过简单地调用 \u003ccode\u003ejulia\u003c/code\u003e 而不使用参数或双击可执行文件来启动。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ julia\n\n               _\n   _       _ _\u003cspan class=\"o\"\u003e(\u003c/span\u003e_\u003cspan class=\"o\"\u003e)\u003c/span\u003e_     \u003cspan class=\"p\"\u003e|\u003c/span\u003e  Documentation: https://docs.julialang.org\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003e_\u003cspan class=\"o\"\u003e)\u003c/span\u003e     \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e_\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e_\u003cspan class=\"o\"\u003e)\u003c/span\u003e    \u003cspan class=\"p\"\u003e|\u003c/span\u003e\n   _ _   _\u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e_  __ _   \u003cspan class=\"p\"\u003e|\u003c/span\u003e  Type \u003cspan class=\"s2\"\u003e\u0026#34;?\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e help, \u003cspan class=\"s2\"\u003e\u0026#34;]?\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e Pkg help.\n  \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e/ _\u003cspan class=\"sb\"\u003e`\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"p\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e_\u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e_\u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"p\"\u003e|\u003c/span\u003e  Version 1.5.0 \u003cspan class=\"o\"\u003e(\u003c/span\u003e2020-08-01\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n _/ \u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e_\u003cspan class=\"s1\"\u003e\u0026#39;_|_|_|\\__\u0026#39;\u003c/span\u003e_\u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"p\"\u003e|\u003c/span\u003e  Official https://julialang.org/ release\n\u003cspan class=\"p\"\u003e|\u003c/span\u003e__/                   \u003cspan class=\"p\"\u003e|\u003c/span\u003e\n\n\njulia\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e要退出交互式会话，请键入 \u003ccode\u003e^D\u003c/code\u003e - 控制键与 \u003ccode\u003ed\u003c/code\u003e 键一起在空行上键入，或键入 \u003ccode\u003eexit()\u003c/code\u003e 后跟回车或回车键。REPL 会用一个横幅和 \u003ccode\u003ejulia\u0026gt;\u003c/code\u003e 提示来欢迎您。\u003c/p\u003e\n\u003ch3 id=\"不同的提示模式\"\u003e不同的提示模式\u003c/h3\u003e\n\u003ch4 id=\"朱利安模式\"\u003e朱利安模式\u003c/h4\u003e\n\u003cp\u003eREPL 有四种主要的操作模式。第一种也是最常见的是 Julian 提示。这是默认的操作模式；每个新行都以 \u003ccode\u003ejulia\u0026gt;\u003c/code\u003e 开始。在这里您可以输入 Julia 表达式。在输入完整的表达式后点击回车或回车将评估该条目并显示最后一个表达式的结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; string\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e + 2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在交互式工作中，有许多独特的有用功能。除了显示结果之外，REPL 还将结果绑定到变量 \u003ccode\u003eans\u003c/code\u003e 上。行上的分号可以作为一个标志来抑制显示结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; string\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e * 4\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; ans\n\u003cspan class=\"s2\"\u003e\u0026#34;12\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Julia 模式下，REPL 支持称为提示粘贴(\u003cem\u003eprompt pasting\u003c/em\u003e)的东西。当把以 \u003ccode\u003ejulia\u0026gt;\u003c/code\u003e 开头的文本粘贴到 REPL 中时，这个功能会被激活。在这种情况下，只有以 \u003ccode\u003ejulia\u0026gt;\u003c/code\u003e 开头的表达式会被解析，其他表达式会被删除。这使得您可以粘贴从 REPL 会话中复制的代码块，而无需清除提示和输出。这个功能默认是启用的，但可以通过 \u003ccode\u003eREPL.enable_promptpaste(::Bool)\u003c/code\u003e 来禁用或启用。如果启用了，您可以直接将本段上面的代码块粘贴到 REPL 中试试。这个功能在标准的 Windows 命令提示符上不起作用，因为它在检测粘贴发生时的局限性。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eusing REPL\nREPL.enable_promptpaste\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 禁用 prompt pasting\u003c/span\u003e\nREPL.enable_promptpaste\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 启用 prompt pasting\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对象在 REPL 中使用带有特定 \u003ca href=\"https://docs.julialang.org/en/v1/base/io-network/#Base.IOContext\"\u003eIOContext\u003c/a\u003e 的 \u003ca href=\"https://docs.julialang.org/en/v1/base/io-network/#Base.show-Tuple%7BIO,Any%7D\"\u003eshow\u003c/a\u003e 函数进行打印。特别是，\u003ccode\u003e:limit\u003c/code\u003e 属性被设置为 true。其他属性可以在某些 \u003ccode\u003eshow\u003c/code\u003e 方法中接收一个默认值，如果它还没有被设置，比如 \u003ccode\u003e:compact\u003c/code\u003e。作为实验性功能，可以通过 \u003ccode\u003eBase.active_repl.options.iocontext\u003c/code\u003e 字典来指定 REPL 使用的属性（将值关联到属性）。例如:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; rand\u003cspan class=\"o\"\u003e(\u003c/span\u003e2, 2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2×2 Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eFloat64,2\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 0.8833    0.329197\n 0.719708  0.59114\n\njulia\u0026gt; show\u003cspan class=\"o\"\u003e(\u003c/span\u003eIOContext\u003cspan class=\"o\"\u003e(\u003c/span\u003estdout, :compact \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;text/plain\u0026#34;\u003c/span\u003e, rand\u003cspan class=\"o\"\u003e(\u003c/span\u003e2, 2\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n 0.43540323669187075  0.15759787870609387\n 0.2540832269192739   0.4597637838786053\njulia\u0026gt; Base.active_repl.options.iocontext\u003cspan class=\"o\"\u003e[\u003c/span\u003e:compact\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e false\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; rand\u003cspan class=\"o\"\u003e(\u003c/span\u003e2, 2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2×2 Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eFloat64,2\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 0.2083967319174056  0.13330606013126012\n 0.6244375177790158  0.9777957560761545\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e为了在启动时自动定义这个字典的值，可以使用 \u003ccode\u003e~/.julia/config/startup.jl\u003c/code\u003e 文件中的 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/REPL/#Base.atreplinit\"\u003e\u003ccode\u003eatreplinit\u003c/code\u003e\u003c/a\u003e 函数，例如:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003eatreplinit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"n\"\u003erepl\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiocontext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:compact\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"帮助模式\"\u003e帮助模式\u003c/h4\u003e\n\u003cp\u003e当光标在行首时，可以通过键入 \u003ccode\u003e?\u003c/code\u003e 来将提示变为帮助模式。Julia 将尝试打印帮助模式下输入的任何内容的帮助或文档。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; ? \u003cspan class=\"c1\"\u003e# upon typing ?, the prompt changes (in place) to: help?\u0026gt;\u003c/span\u003e\n\nhelp?\u0026gt; string\nsearch: string String Cstring Cwstring RevString randstring bytestring SubString\n\n  string\u003cspan class=\"o\"\u003e(\u003c/span\u003exs...\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n  Create a string from any values using the print \u003cspan class=\"k\"\u003efunction\u003c/span\u003e.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也可以查询宏、类型和变量:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ehelp?\u0026gt; @time\n  @time\n\n  A macro to execute an expression, printing the \u003cspan class=\"nb\"\u003etime\u003c/span\u003e it took to execute, the number of allocations,\n  and the total number of bytes its execution caused to be allocated, before returning the value of the\n  expression.\n\n  See also @timev, @timed, @elapsed, and @allocated.\n\nhelp?\u0026gt; Int32\nsearch: Int32 UInt32\n\n  Int32 \u0026lt;: Signed\n\n  32-bit signed integer type.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e按行首的退格键可以退出帮助模式。\u003c/p\u003e\n\u003ch4 id=\"shell-模式\"\u003eShell 模式\u003c/h4\u003e\n\u003cp\u003e就像帮助模式对于快速访问文档很有用一样，另一个常见的任务是使用系统 shell 来执行系统命令。就像 \u003ccode\u003e?\u003c/code\u003e 进入帮助模式时一样, 在行首按下分号(\u003ccode\u003e;\u003c/code\u003e)会进入 shell 模式。而且可以在行首按退格键退出。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# upon typing ;, the prompt changes (in place) to: shell\u0026gt;\u003c/span\u003e\n\nshell\u0026gt; \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e hello\nhello\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意:\u003c/p\u003e\n\u003cp\u003e对于 Windows 用户来说，Julia 的 shell 模式不暴露 windows shell 命令。因此，这将会失败:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# upon typing ;, the prompt changes (in place) to: shell\u0026gt;\u003c/span\u003e\n\nshell\u0026gt; dir\nERROR: IOError: could not spawn \u003cspan class=\"sb\"\u003e`\u003c/span\u003edir\u003cspan class=\"sb\"\u003e`\u003c/span\u003e: no such file or directory \u003cspan class=\"o\"\u003e(\u003c/span\u003eENOENT\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nStacktrace!\n.......\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e不过，你可以像这样访问 PowerShell:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# upon typing ;, the prompt changes (in place) to: shell\u0026gt;\u003c/span\u003e\n\nshell\u0026gt; powershell\nWindows PowerShell\nCopyright \u003cspan class=\"o\"\u003e(\u003c/span\u003eC\u003cspan class=\"o\"\u003e)\u003c/span\u003e Microsoft Corporation. All rights reserved.\nPS C:\u003cspan class=\"se\"\u003e\\U\u003c/span\u003esers\u003cspan class=\"se\"\u003e\\e\u003c/span\u003elm\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u0026hellip;而且对 \u003ccode\u003ecmd.exe\u003c/code\u003e 的访问是这样的（见 \u003ccode\u003edir\u003c/code\u003e 命令）:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# upon typing ;, the prompt changes (in place) to: shell\u0026gt;\u003c/span\u003e\n\nshell\u0026gt; cmd\nMicrosoft Windows \u003cspan class=\"o\"\u003e[\u003c/span\u003eversion 10.0.17763.973\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003ec\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"m\"\u003e2018\u003c/span\u003e Microsoft Corporation. All rights reserved.\nC:\u003cspan class=\"se\"\u003e\\U\u003c/span\u003esers\u003cspan class=\"se\"\u003e\\e\u003c/span\u003elm\u0026gt;dir\n Volume in drive C has no label\n Volume Serial Number is 1643-0CD7\n  Directory of C:\u003cspan class=\"se\"\u003e\\U\u003c/span\u003esers\u003cspan class=\"se\"\u003e\\e\u003c/span\u003elm\n\n29/01/2020  22:15    \u0026lt;DIR\u0026gt;          .\n29/01/2020  22:15    \u0026lt;DIR\u0026gt;          ..\n02/02/2020  08:06    \u0026lt;DIR\u0026gt;          .atom\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"搜索模式\"\u003e搜索模式\u003c/h4\u003e\n\u003cp\u003e在上述所有模式中，执行的行数都会被保存到历史文件中，可以进行搜索。要在以前的历史记录中进行增量搜索，输入 \u003ccode\u003e^R\u003c/code\u003e\u0026ndash;控制键和 \u003ccode\u003er\u003c/code\u003e 键。提示符将变为(\u003ccode\u003ereverse-i-search\u003c/code\u003e):，当你输入搜索查询时，搜索查询将出现在引号中。当你输入更多的内容时，与查询相匹配的最新结果会动态地更新到冒号的右边。如果要使用相同的查询找到一个较早的结果，只需再次输入 \u003ccode\u003e^R\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e就像 \u003ccode\u003e^R\u003c/code\u003e 是反向搜索一样，\u003ccode\u003e^S\u003c/code\u003e 是正向搜索，并提示(\u003ccode\u003ei-search\u003c/code\u003e):。两者可以相互结合使用，分别在上一个或下一个匹配结果中移动。\u003c/p\u003e\n\u003ch3 id=\"键绑定\"\u003e键绑定\u003c/h3\u003e\n\u003cp\u003eJulia REPL 大量使用了键绑定。上面已经介绍了几个控制键绑定（\u003ccode\u003e^D\u003c/code\u003e 用于退出，\u003ccode\u003e^R\u003c/code\u003e 和 \u003ccode\u003e^S\u003c/code\u003e 用于搜索），但还有更多。除了控制键，还有元键绑定。这些因平台不同而变化较大，但大多数终端默认使用 \u003ccode\u003ealt-\u003c/code\u003e 或 \u003ccode\u003eoption-\u003c/code\u003e 按住键发送元键（也可以配置成这样），或者按 \u003ccode\u003eEsc\u003c/code\u003e 键，然后按键。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eKeybinding\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eProgram control\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e^D\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e退出(当缓存为空时)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e^C\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e中断或取消\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e^L\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e清理控制台屏幕\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eReturn/Enter, \u003ccode\u003e^J\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e新行，如果完成了就执行\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003emeta-Return/Enter\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e插入新行而不执行\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e?\u003c/code\u003e 或 \u003ccode\u003e;\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e进入帮助或shell模式(当在行的开头时)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e^R\u003c/code\u003e, \u003ccode\u003e^S\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e递增式历史检索，如上所述\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"自定义键绑定\"\u003e自定义键绑定\u003c/h3\u003e\n\u003cp\u003eJulia 的 REPL 键绑定可以通过向 \u003ccode\u003eREPL.setup_interface\u003c/code\u003e 传递一个字典来完全定制用户的偏好。这个字典的键可以是字符或字符串。键 \u0026lsquo;*\u0026rsquo; 指的是默认操作。控制加字符x的绑定用\u0026quot;^x\u0026quot;表示。Meta 加x可以写成 \u0026ldquo;\\M-x\u0026rdquo; 或 \u0026ldquo;\\ex\u0026rdquo;，Control 加 x 可以写成 \u0026ldquo;\\C-x\u0026rdquo; 或 \u0026ldquo;^x\u0026rdquo;。自定义 keymap 的值必须是 nothing(表示输入应该被忽略)或接受签名的函数(\u003ccode\u003ePromptState\u003c/code\u003e, \u003ccode\u003eAbstractREPL\u003c/code\u003e, \u003ccode\u003eChar\u003c/code\u003e)。\u003ccode\u003eREPL.setup_interface\u003c/code\u003e 函数必须在 REPL 初始化之前被调用，通过在 atreplinit 注册操作。例如，要绑定上下方向键来移动历史记录而不需要前缀搜索，可以在 \u003ccode\u003e~/.julia/config/startup.jl\u003c/code\u003e 中放入以下代码。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003emykeys\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eDict\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}(\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e# Up Arrow\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;\\e[A\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eo\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eedit_move_up\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehistory_prev\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehist\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e# Down Arrow\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;\\e[B\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eo\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eedit_move_down\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehistory_next\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLineEdit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehist\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ecustomize_keys\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einterface\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetup_interface\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eextra_repl_keymap\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emykeys\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eatreplinit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecustomize_keys\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用户应该参考 \u003ccode\u003eLineEdit.jl\u003c/code\u003e 来发现键输入的可用操作。\u003c/p\u003e\n\u003ch3 id=\"tab-补全\"\u003eTab 补全\u003c/h3\u003e\n\u003cp\u003e在 REPL 的 Julian 和帮助模式下，可以输入函数或类型的前几个字符，然后按tab键，得到一个所有匹配的列表:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; stri\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\nstride     strides     string      strip\n\njulia\u0026gt; Stri\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\nStridedArray    StridedMatrix    StridedVecOrMat  StridedVector    String\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003etab 键也可以用来用它们的 Unicode 等价物替代 LaTeX 数学符号，并获得 LaTeX 匹配列表。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"se\"\u003e\\p\u003c/span\u003ei\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\njulia\u0026gt; π\n\u003cspan class=\"nv\"\u003eπ\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 3.1415926535897...\n\njulia\u0026gt; e\u003cspan class=\"se\"\u003e\\_\u003c/span\u003e1\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e1,0\u003cspan class=\"o\"\u003e]\u003c/span\u003e\njulia\u0026gt; e₁ \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e1,0\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n2-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eInt64,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\njulia\u0026gt; e\u003cspan class=\"se\"\u003e\\^\u003c/span\u003e1\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e 0\u003cspan class=\"o\"\u003e]\u003c/span\u003e\njulia\u0026gt; e¹ \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e 0\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n1×2 Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eInt64,2\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n \u003cspan class=\"m\"\u003e1\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\njulia\u0026gt; \u003cspan class=\"se\"\u003e\\s\u003c/span\u003eqrt\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# √ is equivalent to the sqrt function\u003c/span\u003e\njulia\u0026gt; √2\n1.4142135623730951\n\njulia\u0026gt; \u003cspan class=\"se\"\u003e\\h\u003c/span\u003ebar\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e](\u003c/span\u003eh\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e h / 2\u003cspan class=\"se\"\u003e\\p\u003c/span\u003ei\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\njulia\u0026gt; ħ\u003cspan class=\"o\"\u003e(\u003c/span\u003eh\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e h / 2π\nħ \u003cspan class=\"o\"\u003e(\u003c/span\u003egeneric \u003cspan class=\"k\"\u003efunction\u003c/span\u003e with \u003cspan class=\"m\"\u003e1\u003c/span\u003e method\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; \u003cspan class=\"se\"\u003e\\h\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"se\"\u003e\\h\u003c/span\u003eat              \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eermitconjmatrix  \u003cspan class=\"se\"\u003e\\h\u003c/span\u003ekswarow          \u003cspan class=\"se\"\u003e\\h\u003c/span\u003erectangle\n\u003cspan class=\"se\"\u003e\\h\u003c/span\u003eatapprox        \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eexagon           \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eookleftarrow     \u003cspan class=\"se\"\u003e\\h\u003c/span\u003erectangleblack\n\u003cspan class=\"se\"\u003e\\h\u003c/span\u003ebar             \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eexagonblack      \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eookrightarrow    \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eslash\n\u003cspan class=\"se\"\u003e\\h\u003c/span\u003eeartsuit        \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eksearow          \u003cspan class=\"se\"\u003e\\h\u003c/span\u003eouse             \u003cspan class=\"se\"\u003e\\h\u003c/span\u003espace\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003eα\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\\alpha[TAB]\u0026#34;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# LaTeX completion also works in strings\u003c/span\u003e\njulia\u0026gt; \u003cspan class=\"nv\"\u003eα\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;α\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e完整的tab-补全列表可以在手册的 \u003ca href=\"https://docs.julialang.org/en/v1/manual/unicode-input/#Unicode-Input-1\"\u003eUnicode 输入\u003c/a\u003e部分找到。\u003c/p\u003e\n\u003cp\u003e路径补全适用于字符串和 julia 的 shell 模式:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/[TAB]\u0026#34;\u003c/span\u003e\n.dockerenv  .juliabox/   boot/        etc/         lib/         media/       opt/         root/        sbin/        sys/         usr/\n.dockerinit bin/         dev/         home/        lib64/       mnt/         proc/        run/         srv/         tmp/         var/\nshell\u0026gt; /\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n.dockerenv  .juliabox/   boot/        etc/         lib/         media/       opt/         root/        sbin/        sys/         usr/\n.dockerinit bin/         dev/         home/        lib64/       mnt/         proc/        run/         srv/         tmp/         var/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTab 补全可以帮助调查匹配输入参数的可用方法。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; max\u003cspan class=\"o\"\u003e([\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"c1\"\u003e# All methods are displayed, not shown here due to size of the list\u003c/span\u003e\n\njulia\u0026gt; max\u003cspan class=\"o\"\u003e([\u003c/span\u003e1, 2\u003cspan class=\"o\"\u003e]\u003c/span\u003e, \u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"c1\"\u003e# All methods where `Vector{Int}` matches as first argument\u003c/span\u003e\nmax\u003cspan class=\"o\"\u003e(\u003c/span\u003ex, y\u003cspan class=\"o\"\u003e)\u003c/span\u003e in Base at operators.jl:215\nmax\u003cspan class=\"o\"\u003e(\u003c/span\u003ea, b, c, xs...\u003cspan class=\"o\"\u003e)\u003c/span\u003e in Base at operators.jl:281\n\njulia\u0026gt; max\u003cspan class=\"o\"\u003e([\u003c/span\u003e1, 2\u003cspan class=\"o\"\u003e]\u003c/span\u003e, max\u003cspan class=\"o\"\u003e(\u003c/span\u003e1, 2\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"c1\"\u003e# All methods matching the arguments.\u003c/span\u003e\nmax\u003cspan class=\"o\"\u003e(\u003c/span\u003ex, y\u003cspan class=\"o\"\u003e)\u003c/span\u003e in Base at operators.jl:215\nmax\u003cspan class=\"o\"\u003e(\u003c/span\u003ea, b, c, xs...\u003cspan class=\"o\"\u003e)\u003c/span\u003e in Base at operators.jl:281\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e关键词也显示在 \u003ccode\u003e;\u003c/code\u003e 后面的建议方法中，见下面一行，其中 \u003ccode\u003elimit\u003c/code\u003e 和 \u003ccode\u003ekeepempty\u003c/code\u003e 是关键词参数:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; split\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;1 1 1\u0026#34;\u003c/span\u003e, \u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\nsplit\u003cspan class=\"o\"\u003e(\u003c/span\u003estr::AbstractString\u003cspan class=\"p\"\u003e;\u003c/span\u003e limit, keepempty\u003cspan class=\"o\"\u003e)\u003c/span\u003e in Base at strings/util.jl:302\nsplit\u003cspan class=\"o\"\u003e(\u003c/span\u003estr::T, splitter\u003cspan class=\"p\"\u003e;\u003c/span\u003e limit, keepempty\u003cspan class=\"o\"\u003e)\u003c/span\u003e where T\u0026lt;:AbstractString in Base at strings/util.jl:277\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e方法的补全使用类型推断，因此即使参数是函数输出的，也能看到参数是否匹配。函数需要类型稳定，完成才能够删除不匹配的方法。\u003c/p\u003e\n\u003cp\u003eTab 补全也可以帮助补全字段:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; import UUIDs\n\njulia\u0026gt; UUIDs.uuid\u003cspan class=\"o\"\u003e[\u003c/span\u003eTAB\u003cspan class=\"o\"\u003e]\u003c/span\u003e\nuuid1        uuid4         uuid_version\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也可以补全函数输出的字段:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-sshell\" data-lang=\"sshell\"\u003ejulia\u0026gt; split(\u0026quot;\u0026quot;,\u0026quot;\u0026quot;)[1].[TAB]\nlastindex  offset  string\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e函数输出的字段完成采用类型推断，只有在函数类型稳定的情况下，它才能建议字段。\u003c/p\u003e\n\u003cp\u003e字典键也可以用 tab 补全:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Dict\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;qwer1\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt;1, \u003cspan class=\"s2\"\u003e\u0026#34;qwer2\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt;2, \u003cspan class=\"s2\"\u003e\u0026#34;asdf\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt;3\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDict\u003cspan class=\"o\"\u003e{\u003c/span\u003eString,Int64\u003cspan class=\"o\"\u003e}\u003c/span\u003e with \u003cspan class=\"m\"\u003e3\u003c/span\u003e entries:\n  \u003cspan class=\"s2\"\u003e\u0026#34;qwer2\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; \u003cspan class=\"m\"\u003e2\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026#34;asdf\u0026#34;\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; \u003cspan class=\"m\"\u003e3\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026#34;qwer1\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\njulia\u0026gt; foo\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;q[TAB]\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003eqwer1\u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003eqwer2\u003cspan class=\"s2\"\u003e\u0026#34;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003ejulia\u0026gt; foo[\u0026#34;\u003c/span\u003eqwer\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"自定义颜色\"\u003e自定义颜色\u003c/h3\u003e\n\u003cp\u003eJulia 和 REPL 所使用的颜色也是可以自定义的。要改变 Julia 提示符的颜色，您可以在您的 \u003ccode\u003e~/.julia/config/startup.jl\u003c/code\u003e 文件中添加以下内容，该文件应放在您的主目录中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ecustomize_colors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprompt_color\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_colors\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:cyan\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eatreplinit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecustomize_colors\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可用的颜色键可以通过在 REPL 的帮助模式下输入 \u003ccode\u003eBase.text_colors\u003c/code\u003e 来查看。此外，对于支持 256 色的终端来说，整数 0 到 255 可以用作颜色键。\u003c/p\u003e\n\u003cp\u003e也可以通过在上面的 \u003ccode\u003ecustomize_colors\u003c/code\u003e 函数中设置 \u003ccode\u003erepl\u003c/code\u003e 的相应字段（分别为 \u003ccode\u003ehelp_color\u003c/code\u003e、\u003ccode\u003eshell_color\u003c/code\u003e、\u003ccode\u003einput_color\u003c/code\u003e 和 \u003ccode\u003eanswer_color\u003c/code\u003e）来改变帮助和 shell 提示符以及输入和回答文字的颜色。对于后两者，要确保 \u003ccode\u003eenvcolors\u003c/code\u003e 字段也设置为 false。\u003c/p\u003e\n\u003cp\u003e也可以通过使用 \u003ccode\u003eBase.text_colors[:bold]\u003c/code\u003e 作为颜色来应用粗体格式。例如，要用粗体字打印答案，可以使用下面的 \u003ccode\u003e~/.julia/config/startup.jl\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003ecustomize_colors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eenvcolors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erepl\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eanswer_color\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_colors\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:bold\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eatreplinit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecustomize_colors\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你也可以通过设置适当的环境变量来定制用于渲染警告和信息消息的颜色。例如，要分别用洋红色、黄色和青色来渲染错误、警告和信息消息，你可以在 \u003ccode\u003e~/.julia/config/startup.jl\u003c/code\u003e 文件中添加以下内容:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"nb\"\u003eENV\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;JULIA_ERROR_COLOR\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"ss\"\u003e:magenta\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eENV\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;JULIA_WARN_COLOR\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"ss\"\u003e:yellow\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eENV\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;JULIA_INFO_COLOR\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"ss\"\u003e:cyan\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"terminalmenus\"\u003eTerminalMenus\u003c/h3\u003e\n\u003cp\u003eTerminalMenus 是 Julia REPL 的一个子模块，可以在终端中实现小型、低配的交互式菜单。\u003c/p\u003e\n\u003ch4 id=\"例子\"\u003e例子\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTerminalMenus\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eoptions\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;apple\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;orange\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;grape\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;strawberry\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"s\"\u003e\u0026#34;blueberry\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;peach\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;lemon\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;lime\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"radiomenu\"\u003eRadioMenu\u003c/h4\u003e\n\u003cp\u003eRadioMenu 允许用户从列表中选择一个选项。\u003ccode\u003erequest\u003c/code\u003e 函数显示交互式菜单并返回所选选项的索引。如果用户按 \u0026lsquo;q\u0026rsquo; 或 \u003ccode\u003ectrl-c\u003c/code\u003e，\u003ccode\u003erequest\u003c/code\u003e 将返回 \u003ccode\u003e-1\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"c\"\u003e# `pagesize` is the number of items to be displayed at a time.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#  The UI will scroll if the number of options is greater\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   than the `pagesize`\u003c/span\u003e\n\u003cspan class=\"n\"\u003emenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRadioMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epagesize\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# `request` displays the menu and returns the index after the\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   user has selected a choice\u003c/span\u003e\n\u003cspan class=\"n\"\u003echoice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Choose your favorite fruit:\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emenu\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003echoice\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Your favorite fruit is \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003echoice\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Menu canceled.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eChoose your favorite fruit:\n^  grape\n   strawberry\n \u0026gt; blueberry\nv  peach\nYour favorite fruit is blueberry!\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"multiselectmenu\"\u003eMultiSelectMenu\u003c/h4\u003e\n\u003cp\u003e多重选择菜单（MultiSelectMenu）允许用户从一个列表中选择许多选择。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"c\"\u003e# here we use the default `pagesize` 10\u003c/span\u003e\n\u003cspan class=\"n\"\u003emenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMultiSelectMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# `request` returns a `Set` of selected indices\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# if the menu us canceled (ctrl-c or q), return an empty set\u003c/span\u003e\n\u003cspan class=\"n\"\u003echoices\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Select the fruits you like:\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emenu\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echoices\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;You like the following fruits:\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003echoices\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;  - \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Menu canceled.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSelect the fruits you like:\n[press: d=done, a=all, n=none]\n   [ ] apple\n \u0026gt; [X] orange\n   [X] grape\n   [ ] strawberry\n   [ ] blueberry\n   [X] peach\n   [ ] lemon\n   [ ] lime\nYou like the following fruits:\n  - orange\n  - grape\n  - peach\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"customization--configuration\"\u003eCustomization / Configuration\u003c/h4\u003e\n\u003cp\u003e所有的界面定制都是通过关键字 \u003ccode\u003eTerminalMenus.config()\u003c/code\u003e 函数完成的。\u003c/p\u003e\n\u003ch5 id=\"参数\"\u003e参数\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echarset::Symbol=:na\u003c/code\u003e: 要使用的ui字符(\u003ccode\u003e:ascii\u003c/code\u003e 或 \u003ccode\u003e:unicode\u003c/code\u003e); 被其他参数覆盖。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecursor::Char='\u0026gt;'|'→'\u003c/code\u003e: 光标使用的字符。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eup_arrow::Char='^'|'↑'\u003c/code\u003e: 用于向上箭头的字符。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edown_arrow::Char='v'|'↓'\u003c/code\u003e: 用于向下箭头的字符。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003echecked::String=\u0026quot;[X]\u0026quot;|\u0026quot;✓\u0026quot;\u003c/code\u003e：用于检查的字符串。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunchecked::String=\u0026quot;[]\u0026quot;|\u0026quot;⬚\u0026quot;)\u003c/code\u003e：用于未选中的字符串。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escroll::Symbol=:na\u003c/code\u003e: 如果 \u003ccode\u003e:wrap\u003c/code\u003e，则将光标环绕在顶部和底部，如果 \u003ccode\u003e:nowrap\u003c/code\u003e 则不环绕光标。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esupress_output::Bool=false\u003c/code\u003e。用于测试。如果为真，菜单不会被打印到控制台。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ectrl_c_interrupt::Bool=true\u003c/code\u003e: 如果为假，在 \u003ccode\u003e^C\u003c/code\u003e 时返回空，如果为真，在 \u003ccode\u003e^C\u003c/code\u003e 时抛出 InterruptException()。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"例子-1\"\u003e例子\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003emenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e MultiSelectMenu\u003cspan class=\"o\"\u003e(\u003c/span\u003eoptions, \u003cspan class=\"nv\"\u003epagesize\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; request\u003cspan class=\"o\"\u003e(\u003c/span\u003emenu\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# ASCII is used by default\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003epress: \u003cspan class=\"nv\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e, \u003cspan class=\"nv\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eall, \u003cspan class=\"nv\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003enone\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n   \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e apple\n   \u003cspan class=\"o\"\u003e[\u003c/span\u003eX\u003cspan class=\"o\"\u003e]\u003c/span\u003e orange\n   \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e grape\n \u0026gt; \u003cspan class=\"o\"\u003e[\u003c/span\u003eX\u003cspan class=\"o\"\u003e]\u003c/span\u003e strawberry\nv  \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e blueberry\nSet\u003cspan class=\"o\"\u003e([\u003c/span\u003e4, 2\u003cspan class=\"o\"\u003e])\u003c/span\u003e\n\njulia\u0026gt; TerminalMenus.config\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003echarset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e:unicode\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; request\u003cspan class=\"o\"\u003e(\u003c/span\u003emenu\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003epress: \u003cspan class=\"nv\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e, \u003cspan class=\"nv\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eall, \u003cspan class=\"nv\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003enone\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n   ⬚ apple\n   ✓ orange\n   ⬚ grape\n → ✓ strawberry\n↓  ⬚ blueberry\nSet\u003cspan class=\"o\"\u003e([\u003c/span\u003e4, 2\u003cspan class=\"o\"\u003e])\u003c/span\u003e\n\njulia\u0026gt; TerminalMenus.config\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003echecked\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;YEP!\u0026#34;\u003c/span\u003e, \u003cspan class=\"nv\"\u003eunchecked\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;NOPE\u0026#34;\u003c/span\u003e, \u003cspan class=\"nv\"\u003ecursor\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;⧐\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; request\u003cspan class=\"o\"\u003e(\u003c/span\u003emenu\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003epress: \u003cspan class=\"nv\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e, \u003cspan class=\"nv\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eall, \u003cspan class=\"nv\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003enone\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n   NOPE apple\n   YEP! orange\n   NOPE grape\n ⧐ YEP! strawberry\n↓  NOPE blueberry\nSet\u003cspan class=\"o\"\u003e([\u003c/span\u003e4, 2\u003cspan class=\"o\"\u003e])\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"参考\"\u003e参考\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://docs.julialang.org/en/v1/stdlib/REPL/#Base.atreplinit\"\u003eBase.atreplinit\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eatreplinit(f)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e注册一个单参数函数，在交互式会话中，在 REPL 接口初始化之前被调用；这对自定义接口很有用。f 的参数是 REPL 对象。这个函数应该在 \u003ccode\u003e~/.julia/config/startup.jl\u003c/code\u003e 初始化文件中调用。\u003c/p\u003e\n","text":"Julia REPL Julia 在 julia 可执行文件中内置了一个功能齐全的交互式命令行 REPL（read-eval-print loop）。除了允许快速、简单地评估 Julia 语句外，它还具有可搜索的历史记录、tab-补全、许多有用的键绑定以及专门的帮助和 shell 模式。REPL 可以通过简单地调用 julia 而不使用参数或双击可执行文件来启动。\n$ julia _ _ _ _(_)_ | Documentation: https://docs.julialang.org (_) | (_) (_) | _ _ _| |_ __ _ | Type \u0026#34;?\u0026#34; for help, \u0026#34;]?\u0026#34; for Pkg help. | | | | | | |/ _` | | | | |_| | | | (_| | | Version 1.5.0 (2020-08-01) _/ |\\__\u0026#39;_|_|_|\\__\u0026#39;_| | Official https://julialang.org/ release |__/ | julia\u0026gt; 要退出交互式会话，请键入 ^D - 控制键与 d 键一起在空行上键入，或键入 exit() 后跟回车或回车键。REPL 会用一个横幅和 julia\u0026gt; 提示来欢迎您。\n不同的提示模式 朱利安模式 REPL 有四种主要的操作模式。第一种也是最常见的是 Julian 提示。这是默认的操作模式；每个新行都以 julia\u0026gt; 开始。在这里您可以输入 Julia 表达式。在输入完整的表达式后点击回车或回车将评估该条目并显示最后一个表达式的结果。\njulia\u0026gt; string(1 + 2) \u0026#34;3\u0026#34; 在交互式工作中，有许多独特的有用功能。除了显示结果之外，REPL 还将结果绑定到变量 ans 上。行上的分号可以作为一个标志来抑制显示结果。\njulia\u0026gt; string(3 * 4); julia\u0026gt; ans \u0026#34;12\u0026#34; 在 Julia 模式下，REPL 支持称为提示粘贴(prompt pasting)的东西。当把以 julia\u0026gt; 开头的文本粘贴到 REPL 中时，这个功能会被激活。在这种情况下，只有以 julia\u0026gt; 开头的表达式会被解析，其他表达式会被删除。这使得您可以粘贴从 REPL 会话中复制的代码块，而无需清除提示和输出。这个功能默认是启用的，但可以通过 REPL.enable_promptpaste(::Bool) 来禁用或启用。如果启用了，您可以直接将本段上面的代码块粘贴到 REPL 中试试。这个功能在标准的 Windows 命令提示符上不起作用，因为它在检测粘贴发生时的局限性。\nusing REPL REPL.enable_promptpaste(false) # 禁用 prompt pasting REPL.enable_promptpaste(true) # 启用 prompt pasting 对象在 REPL 中使用带有特定 IOContext 的 show 函数进行打印。特别是，:limit 属性被设置为 true。其他属性可以在某些 show 方法中接收一个默认值，如果它还没有被设置，比如 :compact。作为实验性功能，可以通过 Base.active_repl.options.iocontext 字典来指定 REPL 使用的属性（将值关联到属性）。例如:\njulia\u0026gt; rand(2, 2) 2×2 Array{Float64,2}: 0.8833 0.329197 0.719708 0.59114 julia\u0026gt; show(IOContext(stdout, :compact =\u0026gt; false), \u0026#34;text/plain\u0026#34;, rand(2, 2)) 0.43540323669187075 0.15759787870609387 0.2540832269192739 0.4597637838786053 julia\u0026gt; Base.active_repl.options.iocontext[:compact] = false; julia\u0026gt; rand(2, 2) 2×2 Array{Float64,2}: 0.2083967319174056 0.13330606013126012 0.6244375177790158 0.9777957560761545 为了在启动时自动定义这个字典的值，可以使用 ~/.julia/config/startup.jl 文件中的 atreplinit 函数，例如:\natreplinit() do repl repl.options.iocontext[:compact] = false end 帮助模式 当光标在行首时，可以通过键入 ? 来将提示变为帮助模式。Julia 将尝试打印帮助模式下输入的任何内容的帮助或文档。\njulia\u0026gt; ? # upon typing ?, the prompt changes (in place) to: help?\u0026gt; help?\u0026gt; string search: string String Cstring Cwstring RevString randstring bytestring SubString string(xs...) Create a string from any values using the print function. 也可以查询宏、类型和变量:\nhelp?\u0026gt; @time @time A macro to execute an expression, printing the time it took to execute, the number of allocations, and the total number of bytes its execution caused to be allocated, before returning the value of the expression. See also @timev, @timed, @elapsed, and @allocated. help?\u0026gt; Int32 search: Int32 UInt32 Int32 \u0026lt;: Signed 32-bit signed integer type. 按行首的退格键可以退出帮助模式。\nShell 模式 就像帮助模式对于快速访问文档很有用一样，另一个常见的任务是使用系统 shell 来执行系统命令。就像 ? 进入帮助模式时一样, 在行首按下分号(;)会进入 shell 模式。而且可以在行首按退格键退出。\njulia\u0026gt; ; # upon typing ;, the prompt changes (in place) to: shell\u0026gt; shell\u0026gt; echo hello hello 注意:\n对于 Windows 用户来说，Julia 的 shell 模式不暴露 windows shell 命令。因此，这将会失败:\njulia\u0026gt; ; # upon typing ;, the prompt changes (in place) to: shell\u0026gt; shell\u0026gt; dir ERROR: IOError: could not spawn `dir`: no such file or directory (ENOENT) Stacktrace! ....... 不过，你可以像这样访问 PowerShell:\njulia\u0026gt; ; # upon typing ;, the prompt changes (in place) to: shell\u0026gt; shell\u0026gt; powershell Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\elm\u0026gt; \u0026hellip;而且对 cmd.exe 的访问是这样的（见 dir 命令）:\njulia\u0026gt; ; # upon typing ;, the prompt changes (in place) to: shell\u0026gt; shell\u0026gt; cmd Microsoft Windows [version 10.0.17763.973] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Users\\elm\u0026gt;dir Volume in drive C has no label Volume Serial Number is 1643-0CD7 Directory of C:\\Users\\elm 29/01/2020 22:15 \u0026lt;DIR\u0026gt; . 29/01/2020 22:15 \u0026lt;DIR\u0026gt; .. 02/02/2020 08:06 \u0026lt;DIR\u0026gt; .atom 搜索模式 在上述所有模式中，执行的行数都会被保存到历史文件中，可以进行搜索。要在以前的历史记录中进行增量搜索，输入 ^R\u0026ndash;控制键和 r 键。提示符将变为(reverse-i-search):，当你输入搜索查询时，搜索查询将出现在引号中。当你输入更多的内容时，与查询相匹配的最新结果会动态地更新到冒号的右边。如果要使用相同的查询找到一个较早的结果，只需再次输入 ^R。\n就像 ^R 是反向搜索一样，^S 是正向搜索，并提示(i-search):。两者可以相互结合使用，分别在上一个或下一个匹配结果中移动。\n键绑定 Julia REPL 大量使用了键绑定。上面已经介绍了几个控制键绑定（^D 用于退出，^R 和 ^S 用于搜索），但还有更多。除了控制键，还有元键绑定。这些因平台不同而变化较大，但大多数终端默认使用 alt- 或 option- 按住键发送元键（也可以配置成这样），或者按 Esc 键，然后按键。\n   Keybinding Description     Program control    ^D 退出(当缓存为空时)   ^C 中断或取消   ^L 清理控制台屏幕   Return/Enter, ^J 新行，如果完成了就执行   meta-Return/Enter 插入新行而不执行   ? 或 ; 进入帮助或shell模式(当在行的开头时)   ^R, ^S 递增式历史检索，如上所述    自定义键绑定 Julia 的 REPL 键绑定可以通过向 REPL.setup_interface 传递一个字典来完全定制用户的偏好。这个字典的键可以是字符或字符串。键 \u0026lsquo;*\u0026rsquo; 指的是默认操作。控制加字符x的绑定用\u0026quot;^x\u0026quot;表示。Meta 加x可以写成 \u0026ldquo;\\M-x\u0026rdquo; 或 \u0026ldquo;\\ex\u0026rdquo;，Control 加 x 可以写成 \u0026ldquo;\\C-x\u0026rdquo; 或 \u0026ldquo;^x\u0026rdquo;。自定义 keymap 的值必须是 nothing(表示输入应该被忽略)或接受签名的函数(PromptState, AbstractREPL, Char)。REPL.setup_interface 函数必须在 REPL 初始化之前被调用，通过在 atreplinit 注册操作。例如，要绑定上下方向键来移动历史记录而不需要前缀搜索，可以在 ~/.julia/config/startup.jl 中放入以下代码。\nimport REPL import REPL.LineEdit const mykeys = Dict{Any,Any}( # Up Arrow \u0026#34;\\e[A\u0026#34; =\u0026gt; (s,o...)-\u0026gt;(LineEdit.edit_move_up(s) || LineEdit.history_prev(s, LineEdit.mode(s).hist)), # Down Arrow \u0026#34;\\e[B\u0026#34; =\u0026gt; (s,o...)-\u0026gt;(LineEdit.edit_move_down(s) || LineEdit.history_next(s, LineEdit.mode(s).hist)) ) function customize_keys(repl) repl.interface = REPL.setup_interface(repl; extra_repl_keymap = mykeys) end atreplinit(customize_keys) 用户应该参考 LineEdit.jl 来发现键输入的可用操作。\nTab 补全 在 REPL 的 Julian 和帮助模式下，可以输入函数或类型的前几个字符，然后按tab键，得到一个所有匹配的列表:\njulia\u0026gt; stri[TAB] stride strides string strip julia\u0026gt; Stri[TAB] StridedArray StridedMatrix StridedVecOrMat StridedVector String tab 键也可以用来用它们的 Unicode 等价物替代 LaTeX 数学符号，并获得 LaTeX 匹配列表。\njulia\u0026gt; \\pi[TAB] julia\u0026gt; π π = 3.1415926535897... julia\u0026gt; e\\_1[TAB] = [1,0] julia\u0026gt; e₁ = [1,0] 2-element Array{Int64,1}: 1 0 julia\u0026gt; e\\^1[TAB] = [1 0] julia\u0026gt; e¹ = [1 0] 1×2 Array{Int64,2}: 1 0 julia\u0026gt; \\sqrt[TAB]2 # √ is equivalent to the sqrt function julia\u0026gt; √2 1.4142135623730951 julia\u0026gt; \\hbar[TAB](h) = h / 2\\pi[TAB] julia\u0026gt; ħ(h) = h / 2π ħ (generic function with 1 method) julia\u0026gt; \\h[TAB] \\hat \\hermitconjmatrix \\hkswarow \\hrectangle \\hatapprox \\hexagon \\hookleftarrow \\hrectangleblack \\hbar \\hexagonblack \\hookrightarrow \\hslash \\heartsuit \\hksearow \\house \\hspace julia\u0026gt; α=\u0026#34;\\alpha[TAB]\u0026#34; # LaTeX completion also works in strings julia\u0026gt; α=\u0026#34;α\u0026#34; 完整的tab-补全列表可以在手册的 Unicode 输入部分找到。\n路径补全适用于字符串和 julia 的 shell 模式:\njulia\u0026gt; path=\u0026#34;/[TAB]\u0026#34; .dockerenv .juliabox/ boot/ etc/ lib/ media/ opt/ root/ sbin/ sys/ usr/ .dockerinit bin/ dev/ home/ lib64/ mnt/ proc/ run/ srv/ tmp/ var/ shell\u0026gt; /[TAB] .dockerenv .juliabox/ boot/ etc/ lib/ media/ opt/ root/ sbin/ sys/ usr/ .dockerinit bin/ dev/ home/ lib64/ mnt/ proc/ run/ srv/ tmp/ var/ Tab 补全可以帮助调查匹配输入参数的可用方法。\njulia\u0026gt; max([TAB] # All methods are displayed, not shown here due to size of the list julia\u0026gt; max([1, 2], [TAB] # All methods where `Vector{Int}` matches as first argument max(x, y) in Base at operators.jl:215 max(a, b, c, xs...) in Base at operators.jl:281 julia\u0026gt; max([1, 2], max(1, 2), [TAB] # All methods matching the arguments. max(x, y) in Base at operators.jl:215 max(a, b, c, xs...) in Base at operators.jl:281 关键词也显示在 ; 后面的建议方法中，见下面一行，其中 limit 和 keepempty 是关键词参数:\njulia\u0026gt; split(\u0026#34;1 1 1\u0026#34;, [TAB] split(str::AbstractString; limit, keepempty) in Base at strings/util.jl:302 split(str::T, splitter; limit, keepempty) where T\u0026lt;:AbstractString in Base at strings/util.jl:277 方法的补全使用类型推断，因此即使参数是函数输出的，也能看到参数是否匹配。函数需要类型稳定，完成才能够删除不匹配的方法。\nTab 补全也可以帮助补全字段:\njulia\u0026gt; import UUIDs julia\u0026gt; UUIDs.uuid[TAB] uuid1 uuid4 uuid_version 也可以补全函数输出的字段:\njulia\u0026gt; split(\u0026quot;\u0026quot;,\u0026quot;\u0026quot;)[1].[TAB] lastindex offset string 函数输出的字段完成采用类型推断，只有在函数类型稳定的情况下，它才能建议字段。\n字典键也可以用 tab 补全:\njulia\u0026gt; foo = Dict(\u0026#34;qwer1\u0026#34;=\u0026gt;1, \u0026#34;qwer2\u0026#34;=\u0026gt;2, \u0026#34;asdf\u0026#34;=\u0026gt;3) Dict{String,Int64} with 3 entries: \u0026#34;qwer2\u0026#34; =\u0026gt; 2 \u0026#34;asdf\u0026#34; =\u0026gt; 3 \u0026#34;qwer1\u0026#34; =\u0026gt; 1 julia\u0026gt; foo[\u0026#34;q[TAB] \u0026#34;qwer1\u0026#34; \u0026#34;qwer2\u0026#34; julia\u0026gt; foo[\u0026#34;qwer 自定义颜色 Julia 和 REPL 所使用的颜色也是可以自定义的。要改变 Julia 提示符的颜色，您可以在您的 ~/.julia/config/startup.jl 文件中添加以下内容，该文件应放在您的主目录中。\nfunction customize_colors(repl) repl.prompt_color = Base.text_colors[:cyan] end atreplinit(customize_colors) 可用的颜色键可以通过在 REPL 的帮助模式下输入 Base.text_colors 来查看。此外，对于支持 256 色的终端来说，整数 0 到 255 可以用作颜色键。\n也可以通过在上面的 customize_colors 函数中设置 repl 的相应字段（分别为 help_color、shell_color、input_color 和 answer_color）来改变帮助和 shell 提示符以及输入和回答文字的颜色。对于后两者，要确保 envcolors 字段也设置为 false。\n也可以通过使用 Base.text_colors[:bold] 作为颜色来应用粗体格式。例如，要用粗体字打印答案，可以使用下面的 ~/.julia/config/startup.jl:\nfunction customize_colors(repl) repl.envcolors = false repl.answer_color = Base.text_colors[:bold] end atreplinit(customize_colors) 你也可以通过设置适当的环境变量来定制用于渲染警告和信息消息的颜色。例如，要分别用洋红色、黄色和青色来渲染错误、警告和信息消息，你可以在 ~/.julia/config/startup.jl 文件中添加以下内容:\nENV[\u0026#34;JULIA_ERROR_COLOR\u0026#34;] = :magenta ENV[\u0026#34;JULIA_WARN_COLOR\u0026#34;] = :yellow ENV[\u0026#34;JULIA_INFO_COLOR\u0026#34;] = :cyan TerminalMenus TerminalMenus 是 Julia REPL 的一个子模块，可以在终端中实现小型、低配的交互式菜单。\n例子 import REPL using REPL.TerminalMenus options = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;grape\u0026#34;, \u0026#34;strawberry\u0026#34;, \u0026#34;blueberry\u0026#34;, \u0026#34;peach\u0026#34;, \u0026#34;lemon\u0026#34;, \u0026#34;lime\u0026#34;] RadioMenu RadioMenu 允许用户从列表中选择一个选项。request 函数显示交互式菜单并返回所选选项的索引。如果用户按 \u0026lsquo;q\u0026rsquo; 或 ctrl-c，request 将返回 -1。\n# `pagesize` is the number of items to be displayed at a time. # The UI will scroll if the number of options is greater # than the `pagesize` menu = RadioMenu(options, pagesize=4) # `request` displays the menu and returns the index after the # user has selected a choice choice = request(\u0026#34;Choose your favorite fruit:\u0026#34;, menu) if choice != -1 println(\u0026#34;Your favorite fruit is \u0026#34;, options[choice], \u0026#34;!\u0026#34;) else println(\u0026#34;Menu canceled.\u0026#34;) end 输出:\nChoose your favorite fruit: ^ grape strawberry \u0026gt; blueberry v peach Your favorite fruit is blueberry! MultiSelectMenu 多重选择菜单（MultiSelectMenu）允许用户从一个列表中选择许多选择。\n# here we use the default `pagesize` 10 menu = MultiSelectMenu(options) # `request` returns a `Set` of selected indices # if the menu us canceled (ctrl-c or q), return an empty set choices = request(\u0026#34;Select the fruits you like:\u0026#34;, menu) if length(choices) \u0026gt; 0 println(\u0026#34;You like the following fruits:\u0026#34;) for i in choices println(\u0026#34; - \u0026#34;, options[i]) end else println(\u0026#34;Menu canceled.\u0026#34;) end 输出:\nSelect the fruits you like: [press: d=done, a=all, n=none] [ ] apple \u0026gt; [X] orange [X] grape [ ] strawberry [ ] blueberry [X] peach [ ] lemon [ ] lime You like the following fruits: - orange - grape - peach Customization / Configuration 所有的界面定制都是通过关键字 TerminalMenus.config() 函数完成的。\n参数  charset::Symbol=:na: 要使用的ui字符(:ascii 或 :unicode); 被其他参数覆盖。 cursor::Char='\u0026gt;'|'→': 光标使用的字符。 up_arrow::Char='^'|'↑': 用于向上箭头的字符。 down_arrow::Char='v'|'↓': 用于向下箭头的字符。 checked::String=\u0026quot;[X]\u0026quot;|\u0026quot;✓\u0026quot;：用于检查的字符串。 unchecked::String=\u0026quot;[]\u0026quot;|\u0026quot;⬚\u0026quot;)：用于未选中的字符串。 scroll::Symbol=:na: 如果 :wrap，则将光标环绕在顶部和底部，如果 :nowrap 则不环绕光标。 supress_output::Bool=false。用于测试。如果为真，菜单不会被打印到控制台。 ctrl_c_interrupt::Bool=true: 如果为假，在 ^C 时返回空，如果为真，在 ^C 时抛出 InterruptException()。  例子 julia\u0026gt; menu = MultiSelectMenu(options, pagesize=5); julia\u0026gt; request(menu) # ASCII is used by default [press: d=done, a=all, n=none] [ ] apple [X] orange [ ] grape \u0026gt; [X] strawberry v [ ] blueberry Set([4, 2]) julia\u0026gt; TerminalMenus.config(charset=:unicode) julia\u0026gt; request(menu) [press: d=done, a=all, n=none] ⬚ apple ✓ orange ⬚ grape → ✓ strawberry ↓ ⬚ blueberry Set([4, 2]) julia\u0026gt; TerminalMenus.config(checked=\u0026#34;YEP!\u0026#34;, unchecked=\u0026#34;NOPE\u0026#34;, cursor=\u0026#39;⧐\u0026#39;) julia\u0026gt; request(menu) [press: d=done, a=all, n=none] NOPE apple YEP! orange NOPE grape ⧐ YEP! strawberry ↓ NOPE blueberry Set([4, 2]) 参考 Base.atreplinit\n atreplinit(f)\n 注册一个单参数函数，在交互式会话中，在 REPL 接口初始化之前被调用；这对自定义接口很有用。f 的参数是 REPL 对象。这个函数应该在 ~/.julia/config/startup.jl 初始化文件中调用。\n"},"name":"Julia 中的 REPL","published":"2020-08-21T00:00:00Z","summary":"REPL in Julia","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-21-repl-in-julia/"}],"name":"Julia 官方文档","type":"feed","url":"https://ohmyweekly.github.io/tags/julia-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/"}