{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003cp\u003eKoalas 是一个开源项目，它为 pandas 提供了一个 drop-in 的替代品，可以高效地扩展到数百个工人节点，用于日常的数据科学和机器学习。自去年首次推出以来，\u003ca href=\"https://databricks.com/session/official-announcement-of-koalas-open-source-project\"\u003e经过一年多的开发\u003c/a\u003e，\u003ca href=\"https://databricks.com/blog/2020/06/24/introducing-koalas-1-0.html\"\u003eKoalas 1.0 已经发布\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003epandas 是数据科学家中常用的 Python 包，但它并不能扩展到大数据。当他们的数据变得庞大时，他们必须从一开始就选择和学习另一个系统，如 Apache Spark，以采用和转换他们现有的工作负载。 Koalas 通过提供 pandas 等效的 API 来填补这个空白，这些 API 可以在 Apache Spark 上工作。其中很多在之前的\u003ca href=\"https://databricks.com/blog/2020/03/31/10-minutes-from-pandas-to-koalas-on-apache-spark.html\"\u003e博文\u003c/a\u003e中已经介绍过，其中还包括使用 Koalas 时的最佳实践。\u003c/p\u003e\n\u003cp\u003eKoalas 不仅对 pandas 用户有用，对 PySpark 用户也很有用，因为 Koalas 支持很多 PySpark 难以实现的功能。例如，Spark 用户可以通过 \u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/frame.html#plotting\"\u003eKoalas 绘图 API\u003c/a\u003e 直接从 PySpark DataFrame 中绘制数据，类似于 pandas。PySpark DataFrame 更符合 SQL 标准，而 Koalas DataFrame 更接近 Python 本身，这为在某些情况下使用 Python 提供了更直观的工作方式。在 \u003ca href=\"https://koalas.readthedocs.io/en/latest/\"\u003eKoalas 文档\u003c/a\u003e中，有各种 pandas 对应的 API 实现。\u003c/p\u003e\n\u003cp\u003e在这篇博文中，我们重点介绍 PySpark 用户如何利用自己的知识和 PySpark 与 Koalas 之间的原生交互，更快地编写代码。我们包含了许多自带的例子，如果你\u003ca href=\"https://koalas.readthedocs.io/en/latest/getting_started/install.html\"\u003e安装了带 Koalas\u003c/a\u003e 的 Spark，或者你正在使用 Databricks Runtime，你可以运行这些例子。从 Databricks Runtime 7.1 开始，Koalas 就被打包在一起，所以您无需手动安装就可以运行。\u003c/p\u003e\n\u003ch2 id=\"koalas-和-pyspark-dataframes\"\u003eKoalas 和 PySpark DataFrames\u003c/h2\u003e\n\u003cp\u003e在深究之前，我们先来看看 Koalas 和 PySpark DataFrames 的一般区别。\u003c/p\u003e\n\u003cp\u003e从外观上看，它们是不同的。Koalas DataFrames 无缝地沿用了 pandas DataFrames 的结构，并在底层下实现了一个索引/标识符。而 PySpark DataFrame 则更趋向于符合关系型数据库中的关系/表，并且没有唯一的行标识符。\u003c/p\u003e\n\u003cp\u003e在内部，Koalas DataFrames 是建立在 PySpark DataFrames 上的。Koalas 将 pandas APIs 翻译成 Spark SQL 的逻辑计划。该计划由复杂而强大的 Spark SQL 引擎优化和执行，Spark 社区不断对其进行改进。Koalas 还沿用 Spark 的懒惰评估语义，以实现性能的最大化。为了实现 pandas DataFrame 结构和 pandas 丰富的 API，需要隐式排序，Koalas DataFrames 的内部元数据表示 pandas 等价的索引和列标签映射到 PySpark DataFrame 中的列。\u003c/p\u003e\n\u003cp\u003e即使 Koalas 利用 PySpark 作为执行引擎，但与 PySpark 相比，你仍然可能面临轻微的性能下降。正如在 \u003ca href=\"https://databricks.com/blog/2019/08/22/guest-blog-how-virgin-hyperloop-one-reduced-processing-time-from-hours-to-minutes-with-koalas.html\"\u003eVirgin Hyperloop One 的迁移经验\u003c/a\u003e中所讨论的，主要原因通常是:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用了默认索引。构建默认索引的开销取决于数据大小、集群组成等。因此，总是希望避免使用默认索引。关于这一点将在下面的其他章节中详细讨论。\u003c/li\u003e\n\u003cli\u003ePySpark 和 pandas 中的一些 API 名称相同，但语义不同。例如，Koalas DataFrame 和 PySpark DataFrame 都有 count API。前者统计每列/行的非 NA/null 条目数，后者统计检索到的行数，包括包含 null 的行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDataFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e]})\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003ea\u003c/span\u003e    \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003cspan class=\"n\"\u003eb\u003c/span\u003e    \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateDataFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e     \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e]],\u003c/span\u003e \u003cspan class=\"n\"\u003eschema\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"从-pyspark-dataframes-转换到-pyspark-dataframes\"\u003e从 PySpark DataFrames 转换到 PySpark DataFrames\u003c/h2\u003e\n\u003cp\u003e对于一个 PySpark 用户来说，很高兴知道你可以很容易地在 Koalas DataFrame 和 PySpark DataFrame 之间来回切换，以及在底层发生了什么，这样你就不需要害怕进入 Koalas 世界，在 Spark 上应用高扩展性的 pandas API。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eto_koalas()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当导入 Koalas 包时，它会自动将 to_koalas()方法附加到 PySpark DataFrames 中。你可以简单地使用这个方法将 PySpark DataFrames 转换为 Koalas DataFrames。\u003c/p\u003e\n\u003cp\u003e假设你有一个 PySpark DataFrame。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esdf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateDataFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e([(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)],\u003c/span\u003e\u003cspan class=\"n\"\u003eschema\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;y\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;z\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+---+----+---+\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e   \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+---+----+---+\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+---+----+---+\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e首先，导入 Koalas 包。传统上使用 ks 作为包的别名。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003edatabricks.koalas\u003c/span\u003e \u003cspan class=\"kn\"\u003eas\u003c/span\u003e \u003cspan class=\"nn\"\u003eks\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如上所述，用 to_koalas()方法将 Spark DataFrame 转换为 Koalas DataFrame。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_koalas\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e     \u003cspan class=\"n\"\u003ey\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e   \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ekdf 是一个由 PySpark DataFrame 创建的 Koalas DataFrame。当真正需要数据时，计算会被懒惰地执行，例如显示或存储计算的数据，与 PySpark 相同。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eto_spark()\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e接下来，你还应该知道如何从 Koalas 回到 PySpark DataFrame。你可以在 Koalas DataFrame 上使用 to_spark()方法。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esdf_from_kdf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_spark\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esdf_from_kdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+---+----+---+\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e   \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+---+----+---+\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+---+----+---+\u003c/span\u003e   \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在你又有了一个 PySpark DataFrame。请注意，现在已经没有 Koalas DataFrame 中包含的索引列了。下面将讨论处理索引的最佳实践。\u003c/p\u003e\n\u003ch3 id=\"索引和-index_col\"\u003e索引和 index_col\u003c/h3\u003e\n\u003cp\u003e如上图所示，Koalas 内部管理了几列作为 \u0026ldquo;索引 \u0026ldquo;列，以表示 pandas 的索引。这些 \u0026ldquo;索引 \u0026ldquo;列用于通过 loc/iloc 索引器访问行，或者用于 sort_index()方法中，而不指定排序键列，甚至用于结合两个以上 DataFrame 或 Series 的操作时匹配相应的行，例如 df1+df2，等等。\u003c/p\u003e\n\u003cp\u003e如果 PySpark DataFrame 中已经有这样的列，可以使用 index_col 参数来指定索引列。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_with_index_col\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_koalas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# or index_col=[\u0026#39;x\u0026#39;]\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_with_index_col\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ey\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\n\u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e    \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这时，列 x 不被视为常规列之一，而是索引。\u003c/p\u003e\n\u003cp\u003e如果你有多个列作为索引，你可以传递列名列表。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_koalas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;y\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ez\u003c/span\u003e\n\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当回到 PySpark DataFrame 时，你还可以使用 index_col 参数来保存索引列。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_with_index_col\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_spark\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# or index_col=[\u0026#39;index\u0026#39;]\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+-----+----+---+\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e   \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+-----+----+---+\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e    \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e    \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e    \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+-----+----+---+\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e否则，就会失去指数，如下图。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_with_index_col\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_spark\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+----+---+\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e   \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+----+---+\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+----+---+\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e列名的数量应与索引列的数量一致。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_spark\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index1\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;index2\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003eTraceback\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emost\u003c/span\u003e \u003cspan class=\"n\"\u003erecent\u003c/span\u003e \u003cspan class=\"n\"\u003ecall\u003c/span\u003e \u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"ne\"\u003eValueError\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003eindex\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumns\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ehowever\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"n\"\u003egiven\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;index_col\u0026#39;\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.\u003c/span\u003e  \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"默认索引\"\u003e默认索引\u003c/h3\u003e\n\u003cp\u003e正如你所看到的，如果你不指定 index_col 参数，就会创建一个新的列作为索引。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_koalas\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e     \u003cspan class=\"n\"\u003ey\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e0\u003c/span\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e列从哪里来？\u003c/p\u003e\n\u003cp\u003e答案是 \u0026ldquo;默认索引\u0026rdquo;。如果没有指定 index_col 参数，Koalas 会自动将一列作为索引附加到 DataFrame 中。有三种类型的默认索引。\u0026ldquo;sequence\u0026rdquo;、\u0026ldquo;distributed-sequence \u0026ldquo;和 \u0026ldquo;distributed\u0026rdquo;。每种类型都有其独特的特点和局限性，比如性能惩罚。为了减少性能开销，强烈建议在从 PySpark DataFrame 转换时通过 index_col 指定索引列。\u003c/p\u003e\n\u003cp\u003e当 Koalas 不知道哪一列是用来做索引时，也会使用默认索引。例如，reset_index()没有任何参数，它试图将所有的索引数据转换为常规列，并重新创建一个索引。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_with_index_col\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereset_index\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e     \u003cspan class=\"n\"\u003ey\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e0\u003c/span\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以通过设置 Koalas 选项 \u0026ldquo;compute.default_index_type\u0026rdquo; 来改变默认的索引类型。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eset_option\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;compute.default_index_type\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;sequence\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecompute\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edefault_index_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;sequence\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e顺序型\n目前 Koalas 中默认使用 \u0026ldquo;序列 \u0026ldquo;类型，因为它像 pandas 一样保证了索引的连续递增。但是，它内部使用了一个非分区窗口函数，这意味着所有的数据都需要收集到一个节点中。如果节点的内存不足，性能会明显下降，或者出现 OutOfMemoryError。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eset_option\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;compute.default_index_type\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;sequence\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_koalas\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eid\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e   \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e   \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e   \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e   \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e   \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e分散式\n当使用 \u0026ldquo;分布式-序列 \u0026ldquo;索引时，性能惩罚没有 \u0026ldquo;序列 \u0026ldquo;类型那么显著。它以分布式的方式计算和生成索引，但它需要另一个额外的 Spark Job 来内部生成全局序列。它也不能保证结果的自然顺序。一般来说，它会变成一个不断增加的数字。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eset_option\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;compute.default_index_type\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;distributed-sequence\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_koalas\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eid\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e   \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e   \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e   \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e   \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e   \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e分散型\n\u0026ldquo;分布式 \u0026ldquo;索引几乎没有性能上的惩罚，而且总是创建单调增加的数字。如果索引只是需要作为每行的唯一数字，或行的顺序，这种索引类型将是最佳选择。但是，这些数字有一个不确定的间隙。这意味着这种索引类型不太可能被用作结合两个以上 DataFrames 或 Series 的操作的索引。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eset_option\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;compute.default_index_type\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;distributed\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_koalas\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eid\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e17179869184\u003c/span\u003e   \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e34359738368\u003c/span\u003e   \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e60129542144\u003c/span\u003e   \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e77309411328\u003c/span\u003e   \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e94489280512\u003c/span\u003e   \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e比较\n正如你所看到的，每种索引类型都有其独特的特征，如下表所示。考虑到你的工作负载，应该谨慎选择默认的索引类型。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e分布式计算\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eMap 端操作\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e连续递增\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e性能\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003esequence\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eNo, 在单个 worker 节点中\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eNo, 需要 shuffle\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eYes\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003edistributed-sequence\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eYes\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eYes, 但需要另一个 Spark job\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eYes, 在大多数情况下\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003edistributed\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eYes\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eYes\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eNo\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e参见 \u003ca href=\"https://koalas.readthedocs.io/en/latest/user_guide/options.html#default-index-type\"\u003eKoalas 文档中的默认索引类型\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"使用-spark-io\"\u003e使用 Spark I/O\u003c/h2\u003e\n\u003cp\u003e在 pandas 中，有很多函数可以读写数据，在 Koalas 中也是如此。\u003c/p\u003e\n\u003cp\u003e下面是 pandas 中的函数列表，Koalas 在下面使用了 Spark I/O。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.DataFrame.to_csv.html\"\u003eDataFrame.to_csv\u003c/a\u003e / \u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.read_csv.html\"\u003eks.read_csv\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.DataFrame.to_json.html\"\u003eDataFrame.to_json\u003c/a\u003e / \u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.read_json.html\"\u003eks.read_json\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.DataFrame.to_parquet.html\"\u003eDataFrame.to_parquet\u003c/a\u003e / \u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.read_parquet.html\"\u003eks.read_parquet\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.read_sql_table.html\"\u003eks.read_sql_table\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.read_sql_query.html\"\u003eks.read_sql_query\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAPI 和它们的参数沿用了 pandas 对应的 API。不过，目前在行为上有细微的差别。例如，pandas 的 read_csv 可以通过 http 协议读取文件，但 Koalas 仍然不支持，因为底层的 Spark 引擎本身并不支持。\u003c/p\u003e\n\u003cp\u003e这些 Koalas 函数还有 index_col 参数，用来指定哪些列应该被用作索引，或者索引列名应该是什么，类似于上面介绍的 to_koalas()或 to_spark()函数。如果你不指定，就会附加默认的索引，或者索引列丢失。\u003c/p\u003e\n\u003cp\u003e例如，如果你不指定 index_col 参数，默认索引就会被附加，如下图所示\u0026ndash;为了简单起见，使用了分布式默认索引。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_csv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/path/to/test.csv\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_read_csv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread_csv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/path/to/test.csv\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_read_csv\u003c/span\u003e\n                \u003cspan class=\"n\"\u003ex\u003c/span\u003e     \u003cspan class=\"n\"\u003ey\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e            \u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e8589934592\u003c/span\u003e   \u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e17179869184\u003c/span\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e而如果指定 index_col 参数，指定的列就会变成一个索引。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_csv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/path/to/test.csv\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_read_csv_with_index_col\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread_csv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/path/to/test.csv\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_read_csv_with_index_col\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ex\u003c/span\u003e     \u003cspan class=\"n\"\u003ey\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\n\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e      \u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e      \u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e      \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e此外，每个函数都需要关键字参数来设置 Spark 中 DataFrameWriter 和 DataFrameReader 的选项。给定的键直接传递给它们的选项并配置行为。当 pandas-origin 参数不足以操作你的数据，但 PySpark 支持缺失的功能时，这很有用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# nullValue is the option specific to Spark’s CSV I/O.\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread_csv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/path/to/test.csv\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enullValue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ex\u003c/span\u003e     \u003cspan class=\"n\"\u003ey\u003c/span\u003e     \u003cspan class=\"n\"\u003ez\u003c/span\u003e\n\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e      \u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e     \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e      \u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e  \u003cspan class=\"bp\"\u003eNone\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e      \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e     \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"koalas-特定的-io-功能\"\u003eKoalas 特定的 I/O 功能\u003c/h3\u003e\n\u003cp\u003e除了以上来自 pandas 的功能外，Koalas 还有自己的功能。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.DataFrame.to_table.html\"\u003eDataFrame.to_table\u003c/a\u003e / \u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.read_table.html\"\u003eks.read_table\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.DataFrame.to_spark_io.html\"\u003eDataFrame.to_spark_io\u003c/a\u003e / \u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.read_spark_io.html\"\u003eks.read_spark_io\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.DataFrame.to_delta.html\"\u003eDataFrame.to_delta\u003c/a\u003e / \u003ca href=\"https://koalas.readthedocs.io/en/latest/reference/api/databricks.koalas.read_delta.html\"\u003eks.read_delta\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e首先，DataFrame.to_table 和 ks.read_table 是只需指定表名就可以写入和读取 Spark 表。这分别类似于 Spark 中的 DataFrameWriter.saveAsTable 和 DataFrameReader.table。\u003c/p\u003e\n\u003cp\u003e其次，DataFrame.to_spark_io 和 ks.read_spark_io 是用于一般的 Spark I/O。为了方便使用，有几个可选的参数，其他都是关键字参数。你可以自由设置 Spark 中 DataFrameWriter.save 和 DataFrameReader.load 使用的选项。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# \u0026#39;compression\u0026#39; is a Spark specific option.\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_spark_io\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/path/to/test.orc\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;orc\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompression\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;snappy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_read_spark_io\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread_spark_io\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/path/to/test.orc\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;orc\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_read_spark_io\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ex\u003c/span\u003e     \u003cspan class=\"n\"\u003ey\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\n\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e      \u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e      \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e      \u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上例中的 ORC 格式在 pandas 中是不支持的，但 Koalas 可以写和读，因为底层的 Spark I/O 支持它。\u003c/p\u003e\n\u003cp\u003e最后，如果你\u003ca href=\"https://docs.delta.io/latest/quick-start.html#set-up-apache-spark-with-delta-lake\"\u003e安装\u003c/a\u003e了 Delta Lake，Koalas 也可以写和读 Delta 表。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.delta.io/latest/delta-intro.html\"\u003eDelta Lake\u003c/a\u003e 是一个开源的存储层，为数据湖带来了可靠性。Delta Lake 提供了 ACID 事务、可扩展的元数据处理，并统一了流式和批处理数据。\u003c/p\u003e\n\u003cp\u003e与其他文件源不同的是，read_delta 函数可以让用户指定表的版本来进行时间旅行。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_delta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/path/to/test.delta\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_read_delta\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread_delta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/path/to/test.delta\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf_read_delta\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ex\u003c/span\u003e     \u003cspan class=\"n\"\u003ey\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\n\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e      \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e      \u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e      \u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Update the data and overwrite the Delta table\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;y\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;y\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_delta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/path/to/test.delta\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Read the latest data\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread_delta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/path/to/test.delta\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ex\u003c/span\u003e      \u003cspan class=\"n\"\u003ey\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\n\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e      \u003cspan class=\"mi\"\u003e22\u003c/span\u003e  \u003cspan class=\"mf\"\u003e100.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e      \u003cspan class=\"mi\"\u003e24\u003c/span\u003e  \u003cspan class=\"mf\"\u003e200.0\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e      \u003cspan class=\"mi\"\u003e26\u003c/span\u003e  \u003cspan class=\"mf\"\u003e300.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Read the data of version 0\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread_delta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/path/to/test.delta\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eversion\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ex\u003c/span\u003e     \u003cspan class=\"n\"\u003ey\u003c/span\u003e  \u003cspan class=\"n\"\u003ez\u003c/span\u003e\n\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e      \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mf\"\u003e10.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e      \u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mf\"\u003e20.0\u003c/span\u003e  \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e      \u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mf\"\u003e30.0\u003c/span\u003e  \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e详情请看 \u003ca href=\"https://delta.io/\"\u003eDelta Lake\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"spark-accessor\"\u003eSpark accessor\u003c/h3\u003e\n\u003cp\u003eKoalas 为用户提供了 spark 接入器，让用户更容易地利用现有的 PySpark API。\u003c/p\u003e\n\u003ch4 id=\"seriessparktransform-和-seriessparkapply\"\u003eSeries.spark.transform 和 Series.spark.apply\u003c/h4\u003e\n\u003cp\u003eSeries.spark accessor 有变换和应用函数来处理底层的 Spark Column 对象。\u003c/p\u003e\n\u003cp\u003e例如，假设你有以下 Koalas DataFrame。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDataFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]]})\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以使用 astype 函数来铸造类型，但如果你还不习惯，你可以使用 Series.spark.transform 函数来铸造 Spark 列。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003enumpy\u003c/span\u003e \u003cspan class=\"kn\"\u003eas\u003c/span\u003e \u003cspan class=\"nn\"\u003enp\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003epyspark.sql.types\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eDoubleType\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a_astype_double\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eastype\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a_cast_double\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etransform\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003escol\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003escol\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDoubleType\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;a_astype_double\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;a_cast_double\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e  \u003cspan class=\"n\"\u003ea_astype_double\u003c/span\u003e  \u003cspan class=\"n\"\u003ea_cast_double\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e              \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e            \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e              \u003cspan class=\"mf\"\u003e2.0\u003c/span\u003e            \u003cspan class=\"mf\"\u003e2.0\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e              \u003cspan class=\"mf\"\u003e3.0\u003c/span\u003e            \u003cspan class=\"mf\"\u003e3.0\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mi\"\u003e4\u003c/span\u003e              \u003cspan class=\"mf\"\u003e4.0\u003c/span\u003e            \u003cspan class=\"mf\"\u003e4.0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e传递给 Series.spark.transform 函数的用户函数取用 Spark 的 Column 对象，可以使用 PySpark 函数对其进行操作。\u003c/p\u003e\n\u003cp\u003e也可以在 transform/apply 函数中使用 pyspark.sql.function 的函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003epyspark.sql\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003efunctions\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003eF\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a_sqrt\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etransform\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003escol\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eF\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003escol\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a_log\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etransform\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003escol\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eF\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003escol\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;a_sqrt\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;a_log\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e    \u003cspan class=\"n\"\u003ea_sqrt\u003c/span\u003e     \u003cspan class=\"n\"\u003ea_log\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mf\"\u003e1.000000\u003c/span\u003e  \u003cspan class=\"mf\"\u003e0.000000\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mf\"\u003e1.414214\u003c/span\u003e  \u003cspan class=\"mf\"\u003e0.693147\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mf\"\u003e1.732051\u003c/span\u003e  \u003cspan class=\"mf\"\u003e1.098612\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e  \u003cspan class=\"mi\"\u003e4\u003c/span\u003e  \u003cspan class=\"mf\"\u003e2.000000\u003c/span\u003e  \u003cspan class=\"mf\"\u003e1.386294\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSeries.spark.transform 的用户函数应该返回与其输入相同长度的 Spark 列，而 Series.spark.apply 的用户函数可以返回不同长度的 Spark 列，比如调用聚合函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eapply\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003escol\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eF\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecollect_list\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003escol\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e    \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"n\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edtype\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eobject\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"dataframesparkapply\"\u003eDataFrame.spark.apply\u003c/h4\u003e\n\u003cp\u003e同样，DataFrame.spark accessor 也有一个 apply 函数。用户函数接受并返回一个 Spark DataFrame，并可以应用任何转换。如果你想在 Spark DataFrame 中保留索引列，你可以设置 index_col 参数。在这种情况下，用户函数必须在返回的 Spark DataFrame 中包含一个同名的列。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eapply\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003esdf\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselectExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;index * 10 as index\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;a + 1 as a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;index\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e      \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e10\u003c/span\u003e     \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e20\u003c/span\u003e     \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e30\u003c/span\u003e     \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你省略 index_col，它将使用默认的索引。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eapply\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003esdf\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselectExpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;a + 1 as a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e17179869184\u003c/span\u003e  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e42949672960\u003c/span\u003e  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e68719476736\u003c/span\u003e  \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e94489280512\u003c/span\u003e  \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"spark-schema\"\u003eSpark schema\u003c/h4\u003e\n\u003cp\u003e你可以通过 DataFrame.spark.schema 和 DataFrame.spark.print_schema 查看当前的底层 Spark 模式。如果你想知道包括索引列在内的模式，它们都需要 index_col 参数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003enumpy\u003c/span\u003e \u003cspan class=\"kn\"\u003eas\u003c/span\u003e \u003cspan class=\"nn\"\u003enp\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003epandas\u003c/span\u003e \u003cspan class=\"kn\"\u003eas\u003c/span\u003e \u003cspan class=\"nn\"\u003epd\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDataFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;abc\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e                     \u003cspan class=\"s1\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e                     \u003cspan class=\"s1\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003enp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003earange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eastype\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;i1\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e                     \u003cspan class=\"s1\"\u003e\u0026#39;d\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003enp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003earange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e4.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e7.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edtype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;float64\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e                     \u003cspan class=\"s1\"\u003e\u0026#39;e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"bp\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003eFalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e                     \u003cspan class=\"s1\"\u003e\u0026#39;f\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003epd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edate_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;20130101\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eperiods\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)},\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e                    \u003cspan class=\"n\"\u003ecolumns\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;d\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;f\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Print the schema out in Spark’s DDL formatted string\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eschema\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esimpleString\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e\u0026#39;struct\u0026lt;a:string,b:bigint,c:tinyint,d:double,e:boolean,f:timestamp\u0026gt;\u0026#39;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eschema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esimpleString\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e\u0026#39;struct\u0026lt;index:bigint,a:string,b:bigint,c:tinyint,d:double,e:boolean,f:timestamp\u0026gt;\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Print out the schema as same as Spark’s DataFrame.printSchema()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprint_schema\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003elong\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ebyte\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edouble\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eboolean\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprint_schema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindex_col\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003elong\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003elong\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ebyte\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edouble\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eboolean\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|--\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enullable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"解释-spark-计划\"\u003e解释 Spark 计划\u003c/h4\u003e\n\u003cp\u003e如果你想知道当前的 Spark 计划，你可以使用 DataFrame.spark.explain()。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Same as Spark’s DataFrame.explain()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexplain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ePhysical\u003c/span\u003e \u003cspan class=\"n\"\u003ePlan\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003cspan class=\"n\"\u003eScan\u003c/span\u003e \u003cspan class=\"n\"\u003eExistingRDD\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexplain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eParsed\u003c/span\u003e \u003cspan class=\"n\"\u003eLogical\u003c/span\u003e \u003cspan class=\"n\"\u003ePlan\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eAnalyzed\u003c/span\u003e \u003cspan class=\"n\"\u003eLogical\u003c/span\u003e \u003cspan class=\"n\"\u003ePlan\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eOptimized\u003c/span\u003e \u003cspan class=\"n\"\u003eLogical\u003c/span\u003e \u003cspan class=\"n\"\u003ePlan\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ePhysical\u003c/span\u003e \u003cspan class=\"n\"\u003ePlan\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003cspan class=\"n\"\u003eScan\u003c/span\u003e \u003cspan class=\"n\"\u003eExistingRDD\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# New style of mode introduced from Spark 3.0.\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexplain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emode\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;extended\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eParsed\u003c/span\u003e \u003cspan class=\"n\"\u003eLogical\u003c/span\u003e \u003cspan class=\"n\"\u003ePlan\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eAnalyzed\u003c/span\u003e \u003cspan class=\"n\"\u003eLogical\u003c/span\u003e \u003cspan class=\"n\"\u003ePlan\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eOptimized\u003c/span\u003e \u003cspan class=\"n\"\u003eLogical\u003c/span\u003e \u003cspan class=\"n\"\u003ePlan\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ePhysical\u003c/span\u003e \u003cspan class=\"n\"\u003ePlan\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003cspan class=\"n\"\u003eScan\u003c/span\u003e \u003cspan class=\"n\"\u003eExistingRDD\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"缓存\"\u003e缓存\u003c/h4\u003e\n\u003cp\u003espark 访问器还提供了缓存相关的函数，cache、persist、unpersist 和 store_level 属性。你可以使用 cache 函数作为上下文管理器来解除缓存的 persist。让我们看一个例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003epyspark\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eStorageLevel\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ecached\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e   \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecached\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estorage_level\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"n\"\u003eDisk\u003c/span\u003e \u003cspan class=\"n\"\u003eMemory\u003c/span\u003e \u003cspan class=\"n\"\u003eDeserialized\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"n\"\u003eReplicated\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epersist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eStorageLevel\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMEMORY_ONLY\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ecached\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e   \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecached\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estorage_level\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"n\"\u003eMemory\u003c/span\u003e \u003cspan class=\"n\"\u003eSerialized\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"n\"\u003eReplicated\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当上下文完成后，缓存会自动清除。如果你想保留它的缓存，你可以按照下面的方法来做。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecached\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecached\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estorage_level\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eDisk\u003c/span\u003e \u003cspan class=\"n\"\u003eMemory\u003c/span\u003e \u003cspan class=\"n\"\u003eDeserialized\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"n\"\u003eReplicated\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当不再需要它时，你必须显式调用 DataFrame.spark.unpersist()来从缓存中删除它。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecached\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eunpersist\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"提示\"\u003e提示\u003c/h4\u003e\n\u003cp\u003e在 Koalas 中，有一些类似于 join 的操作，比如合并、加入和更新。虽然实际的 join 方法取决于底层的 Spark 计划器，但你仍然可以用 ks.broadcast()函数或 DataFrame.spark.hint()方法指定一个提示。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDataFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;foo\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;bar\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;baz\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;foo\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e                      \u003cspan class=\"s1\"\u003e\u0026#39;value\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]},\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e                     \u003cspan class=\"n\"\u003ecolumns\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;value\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDataFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;foo\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;bar\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;baz\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;foo\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e                      \u003cspan class=\"s1\"\u003e\u0026#39;value\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e]},\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e                     \u003cspan class=\"n\"\u003ecolumns\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;value\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emerge\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekdf2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexplain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ePhysical\u003c/span\u003e \u003cspan class=\"n\"\u003ePlan\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"n\"\u003eSortMergeJoin\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emerge\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eks\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebroadcast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekdf2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexplain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ePhysical\u003c/span\u003e \u003cspan class=\"n\"\u003ePlan\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"n\"\u003eBroadcastHashJoin\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ekdf1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emerge\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekdf2\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;broadcast\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexplain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ePhysical\u003c/span\u003e \u003cspan class=\"n\"\u003ePlan\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"n\"\u003eBroadcastHashJoin\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e特别是，如果底层 Spark 是 3.0 或以上版本，DataFrame.spark.hint()更有用，因为 Spark 3.0 中提供了更多的提示。\u003c/p\u003e\n\u003ch2 id=\"结束语\"\u003e结束语\u003c/h2\u003e\n\u003cp\u003eKoalas DataFrame 与 PySpark DataFrame 相似，因为 Koalas 内部使用 PySpark DataFrame。在外部，Koalas DataFrame 的工作方式就像 pandas DataFrame 一样。\u003c/p\u003e\n\u003cp\u003e为了填补这个空白，Koalas 有许多功能，对于熟悉 PySpark 的用户来说，可以轻松地使用 Koalas 和 PySpark DataFrame。虽然在转换过程中需要额外的注意处理索引，但 Koalas 为 PySpark 用户提供了两种 DataFrame 之间的简单转换，为 PySpark 提供了读/写的输入/输出 API，并提供了 spark 访问器以暴露 PySpark 友好的功能，如缓存和内部探索 DataFrame。此外，spark 访问器还提供了一种自然的方式来玩弄 Koalas 系列和 PySpark 列。\u003c/p\u003e\n\u003cp\u003ePySpark 用户可以从 Koalas 中获益，如上图所示。请在 Databricks Runtime 中试用这些示例并了解更多信息。\u003c/p\u003e\n\u003ch2 id=\"阅读更多\"\u003e阅读更多\u003c/h2\u003e\n\u003cp\u003e要了解更多关于 Koalas 的信息，请看以下资源。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e试试附带的\u003ca href=\"https://databricks.com/notebooks/interoperability-koalas-apache-spark.html\"\u003e笔记本\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e在 Apache Spark 上阅读之前的博客《\u003ca href=\"https://databricks.com/blog/2020/03/31/10-minutes-from-pandas-to-koalas-on-apache-spark.html\"\u003e从 pandas 到 Koalas 的 10 分钟\u003c/a\u003e》。\u003c/li\u003e\n\u003cli\u003eSpark+AI 峰会 2020 演讲 \u0026ldquo;\u003ca href=\"https://databricks.com/session_na20/koalas-pandas-on-apache-spark\"\u003eKoalas: Pandas on Apache Spark\u003c/a\u003e\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eSpark+AI 峰会 2020 演讲 \u0026ldquo;\u003ca href=\"https://databricks.com/session_na20/koalas-making-an-easy-transition-from-pandas-to-apache-spark\"\u003eKoalas: 从 Pandas 轻松过渡到 Apache Spark\u003c/a\u003e\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e原文链接: \u003ca href=\"https://databricks.com/blog/2020/08/11/interoperability-between-koalas-and-apache-spark.html\"\u003ehttps://databricks.com/blog/2020/08/11/interoperability-between-koalas-and-apache-spark.html\u003c/a\u003e\u003c/p\u003e\n","text":"Koalas 是一个开源项目，它为 pandas 提供了一个 drop-in 的替代品，可以高效地扩展到数百个工人节点，用于日常的数据科学和机器学习。自去年首次推出以来，经过一年多的开发，Koalas 1.0 已经发布。\npandas 是数据科学家中常用的 Python 包，但它并不能扩展到大数据。当他们的数据变得庞大时，他们必须从一开始就选择和学习另一个系统，如 Apache Spark，以采用和转换他们现有的工作负载。 Koalas 通过提供 pandas 等效的 API 来填补这个空白，这些 API 可以在 Apache Spark 上工作。其中很多在之前的博文中已经介绍过，其中还包括使用 Koalas 时的最佳实践。\nKoalas 不仅对 pandas 用户有用，对 PySpark 用户也很有用，因为 Koalas 支持很多 PySpark 难以实现的功能。例如，Spark 用户可以通过 Koalas 绘图 API 直接从 PySpark DataFrame 中绘制数据，类似于 pandas。PySpark DataFrame 更符合 SQL 标准，而 Koalas DataFrame 更接近 Python 本身，这为在某些情况下使用 Python 提供了更直观的工作方式。在 Koalas 文档中，有各种 pandas 对应的 API 实现。\n在这篇博文中，我们重点介绍 PySpark 用户如何利用自己的知识和 PySpark 与 Koalas 之间的原生交互，更快地编写代码。我们包含了许多自带的例子，如果你安装了带 Koalas 的 Spark，或者你正在使用 Databricks Runtime，你可以运行这些例子。从 Databricks Runtime 7.1 开始，Koalas 就被打包在一起，所以您无需手动安装就可以运行。\nKoalas 和 PySpark DataFrames 在深究之前，我们先来看看 Koalas 和 PySpark DataFrames 的一般区别。\n从外观上看，它们是不同的。Koalas DataFrames 无缝地沿用了 pandas DataFrames 的结构，并在底层下实现了一个索引/标识符。而 PySpark DataFrame 则更趋向于符合关系型数据库中的关系/表，并且没有唯一的行标识符。\n在内部，Koalas DataFrames 是建立在 PySpark DataFrames 上的。Koalas 将 pandas APIs 翻译成 Spark SQL 的逻辑计划。该计划由复杂而强大的 Spark SQL 引擎优化和执行，Spark 社区不断对其进行改进。Koalas 还沿用 Spark 的懒惰评估语义，以实现性能的最大化。为了实现 pandas DataFrame 结构和 pandas 丰富的 API，需要隐式排序，Koalas DataFrames 的内部元数据表示 pandas 等价的索引和列标签映射到 PySpark DataFrame 中的列。\n即使 Koalas 利用 PySpark 作为执行引擎，但与 PySpark 相比，你仍然可能面临轻微的性能下降。正如在 Virgin Hyperloop One 的迁移经验中所讨论的，主要原因通常是:\n 使用了默认索引。构建默认索引的开销取决于数据大小、集群组成等。因此，总是希望避免使用默认索引。关于这一点将在下面的其他章节中详细讨论。 PySpark 和 pandas 中的一些 API 名称相同，但语义不同。例如，Koalas DataFrame 和 PySpark DataFrame 都有 count API。前者统计每列/行的非 NA/null 条目数，后者统计检索到的行数，包括包含 null 的行。  \u0026gt;\u0026gt;\u0026gt; ks.DataFrame({\u0026#39;a\u0026#39;: [1, 2, 3], \u0026#39;b\u0026#39;: [4, 5, 6]}).count() a 3 b 3 \u0026gt;\u0026gt;\u0026gt; spark.createDataFrame( ... [[1, 4], [2, 5], [3, 6]], schema=[\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;]).count() 3 从 PySpark DataFrames 转换到 PySpark DataFrames 对于一个 PySpark 用户来说，很高兴知道你可以很容易地在 Koalas DataFrame 和 PySpark DataFrame 之间来回切换，以及在底层发生了什么，这样你就不需要害怕进入 Koalas 世界，在 Spark 上应用高扩展性的 pandas API。\n to_koalas()  当导入 Koalas 包时，它会自动将 to_koalas()方法附加到 PySpark DataFrames 中。你可以简单地使用这个方法将 PySpark DataFrames 转换为 Koalas DataFrames。\n假设你有一个 PySpark DataFrame。\n\u0026gt;\u0026gt;\u0026gt; sdf = spark.createDataFrame([(1, 10.0, \u0026#39;a\u0026#39;), (2, 20.0, \u0026#39;b\u0026#39;), (3, 30.0, \u0026#39;c\u0026#39;)],schema=[\u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;z\u0026#39;]) \u0026gt;\u0026gt;\u0026gt; sdf.show() +---+----+---+ | x| y| z| +---+----+---+ | 1|10.0| a| | 2|20.0| b| | 3|30.0| c| +---+----+---+ 首先，导入 Koalas 包。传统上使用 ks 作为包的别名。\n\u0026gt;\u0026gt;\u0026gt; import databricks.koalas as ks 如上所述，用 to_koalas()方法将 Spark DataFrame 转换为 Koalas DataFrame。\n\u0026gt;\u0026gt;\u0026gt; kdf = sdf.to_koalas() \u0026gt;\u0026gt;\u0026gt; kdf x y z 0 1 10.0 a 1 2 20.0 b 2 3 30.0 c kdf 是一个由 PySpark DataFrame 创建的 Koalas DataFrame。当真正需要数据时，计算会被懒惰地执行，例如显示或存储计算的数据，与 PySpark 相同。\n to_spark()  接下来，你还应该知道如何从 Koalas 回到 PySpark DataFrame。你可以在 Koalas DataFrame 上使用 to_spark()方法。\n\u0026gt;\u0026gt;\u0026gt; sdf_from_kdf = kdf.to_spark() \u0026gt;\u0026gt;\u0026gt; sdf_from_kdf.show() +---+----+---+ | x| y| z| +---+----+---+ | 1|10.0| a| | 2|20.0| b| | 3|30.0| c| +---+----+---+ 现在你又有了一个 PySpark DataFrame。请注意，现在已经没有 Koalas DataFrame 中包含的索引列了。下面将讨论处理索引的最佳实践。\n索引和 index_col 如上图所示，Koalas 内部管理了几列作为 \u0026ldquo;索引 \u0026ldquo;列，以表示 pandas 的索引。这些 \u0026ldquo;索引 \u0026ldquo;列用于通过 loc/iloc 索引器访问行，或者用于 sort_index()方法中，而不指定排序键列，甚至用于结合两个以上 DataFrame 或 Series 的操作时匹配相应的行，例如 df1+df2，等等。\n如果 PySpark DataFrame 中已经有这样的列，可以使用 index_col 参数来指定索引列。\n\u0026gt;\u0026gt;\u0026gt; kdf_with_index_col = sdf.to_koalas(index_col=\u0026#39;x\u0026#39;) # or index_col=[\u0026#39;x\u0026#39;] \u0026gt;\u0026gt;\u0026gt; kdf_with_index_col y z x 1 10.0 a 2 20.0 b 3 30.0 c 这时，列 x 不被视为常规列之一，而是索引。\n如果你有多个列作为索引，你可以传递列名列表。\n\u0026gt;\u0026gt;\u0026gt; sdf.to_koalas(index_col=[\u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;]) z x y 1 10.0 a 2 20.0 b 3 30.0 c 当回到 PySpark DataFrame 时，你还可以使用 index_col 参数来保存索引列。\n\u0026gt;\u0026gt;\u0026gt; kdf_with_index_col.to_spark(index_col=\u0026#39;index\u0026#39;).show() # or index_col=[\u0026#39;index\u0026#39;] +-----+----+---+ |index| y| z| +-----+----+---+ | 1|10.0| a| | 2|20.0| b| | 3|30.0| c| +-----+----+---+ 否则，就会失去指数，如下图。\n\u0026gt;\u0026gt;\u0026gt; kdf_with_index_col.to_spark().show() +----+---+ | y| z| +----+---+ |10.0| a| |20.0| b| |30.0| c| +----+---+ 列名的数量应与索引列的数量一致。\n\u0026gt;\u0026gt;\u0026gt; kdf.to_spark(index_col=[\u0026#39;index1\u0026#39;, \u0026#39;index2\u0026#39;]).show() Traceback (most recent call last): ... ValueError: length of index columns is 1; however, the length of the given \u0026#39;index_col\u0026#39; is 2. 默认索引 正如你所看到的，如果你不指定 index_col 参数，就会创建一个新的列作为索引。\n\u0026gt;\u0026gt;\u0026gt; sdf.to_koalas() x y z 0 1 10.0 a 1 2 20.0 b 2 3 30.0 c 列从哪里来？\n答案是 \u0026ldquo;默认索引\u0026rdquo;。如果没有指定 index_col 参数，Koalas 会自动将一列作为索引附加到 DataFrame 中。有三种类型的默认索引。\u0026ldquo;sequence\u0026rdquo;、\u0026ldquo;distributed-sequence \u0026ldquo;和 \u0026ldquo;distributed\u0026rdquo;。每种类型都有其独特的特点和局限性，比如性能惩罚。为了减少性能开销，强烈建议在从 PySpark DataFrame 转换时通过 index_col 指定索引列。\n当 Koalas 不知道哪一列是用来做索引时，也会使用默认索引。例如，reset_index()没有任何参数，它试图将所有的索引数据转换为常规列，并重新创建一个索引。\n\u0026gt;\u0026gt;\u0026gt; kdf_with_index_col.reset_index() x y z 0 1 10.0 a 1 2 20.0 b 2 3 30.0 c 你可以通过设置 Koalas 选项 \u0026ldquo;compute.default_index_type\u0026rdquo; 来改变默认的索引类型。\nks.set_option(\u0026#39;compute.default_index_type\u0026#39;, \u0026#39;sequence\u0026#39;) 或\nks.options.compute.default_index_type = \u0026#39;sequence\u0026#39; 顺序型 目前 Koalas 中默认使用 \u0026ldquo;序列 \u0026ldquo;类型，因为它像 pandas 一样保证了索引的连续递增。但是，它内部使用了一个非分区窗口函数，这意味着所有的数据都需要收集到一个节点中。如果节点的内存不足，性能会明显下降，或者出现 OutOfMemoryError。\n\u0026gt;\u0026gt;\u0026gt; ks.set_option(\u0026#39;compute.default_index_type\u0026#39;, \u0026#39;sequence\u0026#39;) \u0026gt;\u0026gt;\u0026gt; spark.range(5).to_koalas() id 0 0 1 1 2 2 3 3 4 4 分散式 当使用 \u0026ldquo;分布式-序列 \u0026ldquo;索引时，性能惩罚没有 \u0026ldquo;序列 \u0026ldquo;类型那么显著。它以分布式的方式计算和生成索引，但它需要另一个额外的 Spark Job 来内部生成全局序列。它也不能保证结果的自然顺序。一般来说，它会变成一个不断增加的数字。\n\u0026gt;\u0026gt;\u0026gt; ks.set_option(\u0026#39;compute.default_index_type\u0026#39;, \u0026#39;distributed-sequence\u0026#39;) \u0026gt;\u0026gt;\u0026gt; spark.range(5).to_koalas() id 3 3 1 1 2 2 4 4 0 0 分散型 \u0026ldquo;分布式 \u0026ldquo;索引几乎没有性能上的惩罚，而且总是创建单调增加的数字。如果索引只是需要作为每行的唯一数字，或行的顺序，这种索引类型将是最佳选择。但是，这些数字有一个不确定的间隙。这意味着这种索引类型不太可能被用作结合两个以上 DataFrames 或 Series 的操作的索引。\n\u0026gt;\u0026gt;\u0026gt; ks.set_option(\u0026#39;compute.default_index_type\u0026#39;, \u0026#39;distributed\u0026#39;) \u0026gt;\u0026gt;\u0026gt; spark.range(5).to_koalas() id 17179869184 0 34359738368 1 60129542144 2 77309411328 3 94489280512 4 比较 正如你所看到的，每种索引类型都有其独特的特征，如下表所示。考虑到你的工作负载，应该谨慎选择默认的索引类型。\n   分布式计算 Map 端操作 连续递增 性能     sequence No, 在单个 worker 节点中 No, 需要 shuffle Yes   distributed-sequence Yes Yes, 但需要另一个 Spark job Yes, 在大多数情况下   distributed Yes Yes No    参见 Koalas 文档中的默认索引类型。\n使用 Spark I/O 在 pandas 中，有很多函数可以读写数据，在 Koalas 中也是如此。\n下面是 pandas 中的函数列表，Koalas 在下面使用了 Spark I/O。\n DataFrame.to_csv / ks.read_csv DataFrame.to_json / ks.read_json DataFrame.to_parquet / ks.read_parquet ks.read_sql_table ks.read_sql_query  API 和它们的参数沿用了 pandas 对应的 API。不过，目前在行为上有细微的差别。例如，pandas 的 read_csv 可以通过 http 协议读取文件，但 Koalas 仍然不支持，因为底层的 Spark 引擎本身并不支持。\n这些 Koalas 函数还有 index_col 参数，用来指定哪些列应该被用作索引，或者索引列名应该是什么，类似于上面介绍的 to_koalas()或 to_spark()函数。如果你不指定，就会附加默认的索引，或者索引列丢失。\n例如，如果你不指定 index_col 参数，默认索引就会被附加，如下图所示\u0026ndash;为了简单起见，使用了分布式默认索引。\n\u0026gt;\u0026gt;\u0026gt; kdf.to_csv(\u0026#39;/path/to/test.csv\u0026#39;) \u0026gt;\u0026gt;\u0026gt; kdf_read_csv = ks.read_csv(\u0026#39;/path/to/test.csv\u0026#39;) \u0026gt;\u0026gt;\u0026gt; kdf_read_csv x y z 0 2 20.0 b 8589934592 3 30.0 c 17179869184 1 10.0 a 而如果指定 index_col 参数，指定的列就会变成一个索引。\n\u0026gt;\u0026gt;\u0026gt; kdf.to_csv(\u0026#39;/path/to/test.csv\u0026#39;, index_col=\u0026#39;index\u0026#39;) \u0026gt;\u0026gt;\u0026gt; kdf_read_csv_with_index_col = ks.read_csv(\u0026#34;/path/to/test.csv\u0026#34;, index_col=\u0026#39;index\u0026#39;) \u0026gt;\u0026gt;\u0026gt; kdf_read_csv_with_index_col x y z index 2 3 30.0 c 1 2 20.0 b 0 1 10.0 a 此外，每个函数都需要关键字参数来设置 Spark 中 DataFrameWriter 和 DataFrameReader 的选项。给定的键直接传递给它们的选项并配置行为。当 pandas-origin 参数不足以操作你的数据，但 PySpark 支持缺失的功能时，这很有用。\n\u0026gt;\u0026gt;\u0026gt; # nullValue is the option specific to Spark’s CSV I/O. \u0026gt;\u0026gt;\u0026gt; ks.read_csv(\u0026#39;/path/to/test.csv\u0026#39;, index_col=\u0026#39;index\u0026#39;, nullValue=\u0026#39;b\u0026#39;) x y z index 2 3 30.0 c 1 2 20.0 None 0 1 10.0 a Koalas 特定的 I/O 功能 除了以上来自 pandas 的功能外，Koalas 还有自己的功能。\n DataFrame.to_table / ks.read_table DataFrame.to_spark_io / ks.read_spark_io DataFrame.to_delta / ks.read_delta  首先，DataFrame.to_table 和 ks.read_table 是只需指定表名就可以写入和读取 Spark 表。这分别类似于 Spark 中的 DataFrameWriter.saveAsTable 和 DataFrameReader.table。\n其次，DataFrame.to_spark_io 和 ks.read_spark_io 是用于一般的 Spark I/O。为了方便使用，有几个可选的参数，其他都是关键字参数。你可以自由设置 Spark 中 DataFrameWriter.save 和 DataFrameReader.load 使用的选项。\n\u0026gt;\u0026gt;\u0026gt; # \u0026#39;compression\u0026#39; is a Spark specific option. \u0026gt;\u0026gt;\u0026gt; kdf.to_spark_io(\u0026#39;/path/to/test.orc\u0026#39;, format=\u0026#39;orc\u0026#39;, index_col=\u0026#39;index\u0026#39;, compression=\u0026#34;snappy\u0026#34;) \u0026gt;\u0026gt;\u0026gt; kdf_read_spark_io = ks.read_spark_io(\u0026#39;/path/to/test.orc\u0026#39;, format=\u0026#39;orc\u0026#39;, index_col=\u0026#39;index\u0026#39;) \u0026gt;\u0026gt;\u0026gt; kdf_read_spark_io x y z index 1 2 20.0 b 0 1 10.0 a 2 3 30.0 c 上例中的 ORC 格式在 pandas 中是不支持的，但 Koalas 可以写和读，因为底层的 Spark I/O 支持它。\n最后，如果你安装了 Delta Lake，Koalas 也可以写和读 Delta 表。\nDelta Lake 是一个开源的存储层，为数据湖带来了可靠性。Delta Lake 提供了 ACID 事务、可扩展的元数据处理，并统一了流式和批处理数据。\n与其他文件源不同的是，read_delta 函数可以让用户指定表的版本来进行时间旅行。\n\u0026gt;\u0026gt;\u0026gt; kdf.to_delta(\u0026#39;/path/to/test.delta\u0026#39;, index_col=\u0026#39;index\u0026#39;) \u0026gt;\u0026gt;\u0026gt; kdf_read_delta = ks.read_delta(\u0026#39;/path/to/test.delta\u0026#39;, index_col=\u0026#39;index\u0026#39;) \u0026gt;\u0026gt;\u0026gt; kdf_read_delta x y z index 0 1 10.0 a 1 2 20.0 b 2 3 30.0 c \u0026gt;\u0026gt;\u0026gt; # Update the data and overwrite the Delta table \u0026gt;\u0026gt;\u0026gt; kdf[\u0026#39;x\u0026#39;] = kdf[\u0026#39;x\u0026#39;] + 10 \u0026gt;\u0026gt;\u0026gt; kdf[\u0026#39;y\u0026#39;] = kdf[\u0026#39;y\u0026#39;] * 10 \u0026gt;\u0026gt;\u0026gt; kdf[\u0026#39;x\u0026#39;] = kdf[\u0026#39;x\u0026#39;] * 2 \u0026gt;\u0026gt;\u0026gt; kdf.to_delta(\u0026#39;/path/to/test.delta\u0026#39;, index_col=\u0026#39;index\u0026#39;) \u0026gt;\u0026gt;\u0026gt; # Read the latest data \u0026gt;\u0026gt;\u0026gt; ks.read_delta(\u0026#39;/path/to/test.delta\u0026#39;, index_col=\u0026#39;index\u0026#39;) x y z index 0 22 100.0 a 1 24 200.0 b 2 26 300.0 c \u0026gt;\u0026gt;\u0026gt; # Read the data of version 0 \u0026gt;\u0026gt;\u0026gt; ks.read_delta(\u0026#39;/path/to/test.delta\u0026#39;, version=0, index_col=\u0026#39;index\u0026#39;) x y z index 0 1 10.0 a 1 2 20.0 b 2 3 30.0 c 详情请看 Delta Lake。\nSpark accessor Koalas 为用户提供了 spark 接入器，让用户更容易地利用现有的 PySpark API。\nSeries.spark.transform 和 Series.spark.apply Series.spark accessor 有变换和应用函数来处理底层的 Spark Column 对象。\n例如，假设你有以下 Koalas DataFrame。\n\u0026gt;\u0026gt;\u0026gt; kdf = ks.DataFrame({\u0026#39;a\u0026#39;: [1, 2, 3, 4]]}) \u0026gt;\u0026gt;\u0026gt; kdf a 0 1 1 2 2 3 3 4 你可以使用 astype 函数来铸造类型，但如果你还不习惯，你可以使用 Series.spark.transform 函数来铸造 Spark 列。\n\u0026gt;\u0026gt;\u0026gt; import numpy as np \u0026gt;\u0026gt;\u0026gt; from pyspark.sql.types import DoubleType \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; kdf[\u0026#39;a_astype_double\u0026#39;] = kdf.a.astype(np.float64) \u0026gt;\u0026gt;\u0026gt; kdf[\u0026#39;a_cast_double\u0026#39;] = kdf.a.spark.transform(lambda scol: scol.cast(DoubleType())) \u0026gt;\u0026gt;\u0026gt; kdf[[\u0026#39;a\u0026#39;, \u0026#39;a_astype_double\u0026#39;, \u0026#39;a_cast_double\u0026#39;]] a a_astype_double a_cast_double 0 1 1.0 1.0 1 2 2.0 2.0 2 3 3.0 3.0 3 4 4.0 4.0 传递给 Series.spark.transform 函数的用户函数取用 Spark 的 Column 对象，可以使用 PySpark 函数对其进行操作。\n也可以在 transform/apply 函数中使用 pyspark.sql.function 的函数。\n\u0026gt;\u0026gt;\u0026gt; from pyspark.sql import functions as F \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; kdf[\u0026#39;a_sqrt\u0026#39;] = kdf.a.spark.transform(lambda scol: F.sqrt(scol)) \u0026gt;\u0026gt;\u0026gt; kdf[\u0026#39;a_log\u0026#39;] = kdf.a.spark.transform(lambda scol: F.log(scol)) \u0026gt;\u0026gt;\u0026gt; kdf[[\u0026#39;a\u0026#39;, \u0026#39;a_sqrt\u0026#39;, \u0026#39;a_log\u0026#39;]] a a_sqrt a_log 0 1 1.000000 0.000000 1 2 1.414214 0.693147 2 3 1.732051 1.098612 3 4 2.000000 1.386294 Series.spark.transform 的用户函数应该返回与其输入相同长度的 Spark 列，而 Series.spark.apply 的用户函数可以返回不同长度的 Spark 列，比如调用聚合函数。\n\u0026gt;\u0026gt;\u0026gt; kdf.a.spark.apply(lambda scol: F.collect_list(scol)) 0 [1, 2, 3, 4] Name: a, dtype: object DataFrame.spark.apply 同样，DataFrame.spark accessor 也有一个 apply 函数。用户函数接受并返回一个 Spark DataFrame，并可以应用任何转换。如果你想在 Spark DataFrame 中保留索引列，你可以设置 index_col 参数。在这种情况下，用户函数必须在返回的 Spark DataFrame 中包含一个同名的列。\n\u0026gt;\u0026gt;\u0026gt; kdf.spark.apply(lambda sdf: sdf.selectExpr(\u0026#34;index * 10 as index\u0026#34;, \u0026#34;a + 1 as a\u0026#34;), index_col=\u0026#34;index\u0026#34;) a index 0 2 10 3 20 4 30 5 如果你省略 index_col，它将使用默认的索引。\n\u0026gt;\u0026gt;\u0026gt; kdf.spark.apply(lambda sdf: sdf.selectExpr(\u0026#34;a + 1 as a\u0026#34;)) a 17179869184 2 42949672960 3 68719476736 4 94489280512 5 Spark schema 你可以通过 DataFrame.spark.schema 和 DataFrame.spark.print_schema 查看当前的底层 Spark 模式。如果你想知道包括索引列在内的模式，它们都需要 index_col 参数。\n\u0026gt;\u0026gt;\u0026gt; import numpy as np \u0026gt;\u0026gt;\u0026gt; import pandas as pd \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; kdf = ks.DataFrame({\u0026#39;a\u0026#39;: list(\u0026#39;abc\u0026#39;), ... \u0026#39;b\u0026#39;: list(range(1, 4)), ... \u0026#39;c\u0026#39;: np.arange(3, 6).astype(\u0026#39;i1\u0026#39;), ... \u0026#39;d\u0026#39;: np.arange(4.0, 7.0, dtype=\u0026#39;float64\u0026#39;), ... \u0026#39;e\u0026#39;: [True, False, True], ... \u0026#39;f\u0026#39;: pd.date_range(\u0026#39;20130101\u0026#39;, periods=3)}, ... columns=[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;]) \u0026gt;\u0026gt;\u0026gt; # Print the schema out in Spark’s DDL formatted string \u0026gt;\u0026gt;\u0026gt; kdf.spark.schema().simpleString() \u0026#39;struct\u0026lt;a:string,b:bigint,c:tinyint,d:double,e:boolean,f:timestamp\u0026gt;\u0026#39; \u0026gt;\u0026gt;\u0026gt; kdf.spark.schema(index_col=\u0026#39;index\u0026#39;).simpleString() \u0026#39;struct\u0026lt;index:bigint,a:string,b:bigint,c:tinyint,d:double,e:boolean,f:timestamp\u0026gt;\u0026#39; \u0026gt;\u0026gt;\u0026gt; # Print out the schema as same as Spark’s DataFrame.printSchema() \u0026gt;\u0026gt;\u0026gt; kdf.spark.print_schema() root |-- a: string (nullable = false) |-- b: long (nullable = false) |-- c: byte (nullable = false) |-- d: double (nullable = false) |-- e: boolean (nullable = false) |-- f: timestamp (nullable = false) \u0026gt;\u0026gt;\u0026gt; kdf.spark.print_schema(index_col=\u0026#39;index\u0026#39;) root |-- index: long (nullable = false) |-- a: string (nullable = false) |-- b: long (nullable = false) |-- c: byte (nullable = false) |-- d: double (nullable = false) |-- e: boolean (nullable = false) |-- f: timestamp (nullable = false) 解释 Spark 计划 如果你想知道当前的 Spark 计划，你可以使用 DataFrame.spark.explain()。\n\u0026gt;\u0026gt;\u0026gt; # Same as Spark’s DataFrame.explain() \u0026gt;\u0026gt;\u0026gt; kdf.spark.explain() == Physical Plan == Scan ExistingRDD[...] \u0026gt;\u0026gt;\u0026gt; kdf.spark.explain(True) == Parsed Logical Plan == ... == Analyzed Logical Plan == ... == Optimized Logical Plan == ... == Physical Plan == Scan ExistingRDD[...] \u0026gt;\u0026gt;\u0026gt; # New style of mode introduced from Spark 3.0. \u0026gt;\u0026gt;\u0026gt; kdf.spark.explain(mode=\u0026#34;extended\u0026#34;) == Parsed Logical Plan == ... == Analyzed Logical Plan == ... == Optimized Logical Plan == ... == Physical Plan == Scan ExistingRDD[...] 缓存 spark 访问器还提供了缓存相关的函数，cache、persist、unpersist 和 store_level 属性。你可以使用 cache 函数作为上下文管理器来解除缓存的 persist。让我们看一个例子。\n\u0026gt;\u0026gt;\u0026gt; from pyspark import StorageLevel \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; with kdf.spark.cache() as cached: ... print(cached.spark.storage_level) ... Disk Memory Deserialized 1x Replicated \u0026gt;\u0026gt;\u0026gt; with kdf.spark.persist(StorageLevel.MEMORY_ONLY) as cached: ... print(cached.spark.storage_level) ... Memory Serialized 1x Replicated 当上下文完成后，缓存会自动清除。如果你想保留它的缓存，你可以按照下面的方法来做。\n\u0026gt;\u0026gt;\u0026gt; cached = kdf.spark.cache() \u0026gt;\u0026gt;\u0026gt; print(cached.spark.storage_level) Disk Memory Deserialized 1x Replicated 当不再需要它时，你必须显式调用 DataFrame.spark.unpersist()来从缓存中删除它。\n\u0026gt;\u0026gt;\u0026gt; cached.spark.unpersist() 提示 在 Koalas 中，有一些类似于 join 的操作，比如合并、加入和更新。虽然实际的 join 方法取决于底层的 Spark 计划器，但你仍然可以用 ks.broadcast()函数或 DataFrame.spark.hint()方法指定一个提示。\n\u0026gt;\u0026gt;\u0026gt; kdf1 = ks.DataFrame({\u0026#39;key\u0026#39;: [\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;, \u0026#39;baz\u0026#39;, \u0026#39;foo\u0026#39;], ... \u0026#39;value\u0026#39;: [1, 2, 3, 5]}, ... columns=[\u0026#39;key\u0026#39;, \u0026#39;value\u0026#39;]) \u0026gt;\u0026gt;\u0026gt; kdf2 = ks.DataFrame({\u0026#39;key\u0026#39;: [\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;, \u0026#39;baz\u0026#39;, \u0026#39;foo\u0026#39;], ... \u0026#39;value\u0026#39;: [5, 6, 7, 8]}, ... columns=[\u0026#39;key\u0026#39;, \u0026#39;value\u0026#39;]) \u0026gt;\u0026gt;\u0026gt; kdf1.merge(kdf2, on=\u0026#39;key\u0026#39;).explain() == Physical Plan == ... ... SortMergeJoin ... ... \u0026gt;\u0026gt;\u0026gt; kdf1.merge(ks.broadcast(kdf2), on=\u0026#39;key\u0026#39;).explain() == Physical Plan == ... ... BroadcastHashJoin ... ... \u0026gt;\u0026gt;\u0026gt; kdf1.merge(kdf2.spark.hint(\u0026#39;broadcast\u0026#39;), on=\u0026#39;key\u0026#39;).explain() == Physical Plan == ... ... BroadcastHashJoin ... ... 特别是，如果底层 Spark 是 3.0 或以上版本，DataFrame.spark.hint()更有用，因为 Spark 3.0 中提供了更多的提示。\n结束语 Koalas DataFrame 与 PySpark DataFrame 相似，因为 Koalas 内部使用 PySpark DataFrame。在外部，Koalas DataFrame 的工作方式就像 pandas DataFrame 一样。\n为了填补这个空白，Koalas 有许多功能，对于熟悉 PySpark 的用户来说，可以轻松地使用 Koalas 和 PySpark DataFrame。虽然在转换过程中需要额外的注意处理索引，但 Koalas 为 PySpark 用户提供了两种 DataFrame 之间的简单转换，为 PySpark 提供了读/写的输入/输出 API，并提供了 spark 访问器以暴露 PySpark 友好的功能，如缓存和内部探索 DataFrame。此外，spark 访问器还提供了一种自然的方式来玩弄 Koalas 系列和 PySpark 列。\nPySpark 用户可以从 Koalas 中获益，如上图所示。请在 Databricks Runtime 中试用这些示例并了解更多信息。\n阅读更多 要了解更多关于 Koalas 的信息，请看以下资源。\n 试试附带的笔记本 在 Apache Spark 上阅读之前的博客《从 pandas 到 Koalas 的 10 分钟》。 Spark+AI 峰会 2020 演讲 \u0026ldquo;Koalas: Pandas on Apache Spark\u0026rdquo; Spark+AI 峰会 2020 演讲 \u0026ldquo;Koalas: 从 Pandas 轻松过渡到 Apache Spark\u0026rdquo;  原文链接: https://databricks.com/blog/2020/08/11/interoperability-between-koalas-and-apache-spark.html\n"},"name":"Koalas 和 Apache Spark 之间的互操作性","published":"2020-10-04T00:00:00+08:00","summary":"How PySpark users effectively work with Koalas","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-10-04-interoperability-between-koalas-and-apache-spark/"}],"name":"PySpark","type":"feed","url":"https://ohmyweekly.github.io/tags/pyspark/"}