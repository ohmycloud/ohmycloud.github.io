<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[Raku roast on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/raku-roast/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/raku-roast/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/raku-roast/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/raku-roast/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-12T22:13:55+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/raku-roast/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Learn Raku From Roast]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-06-05-learn-raku-from-roast/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-04-15-raku-multiple-dispatch-with-the-new-moarvm-dispatcher/?utm_source=atom_feed" rel="related" type="text/html" title="Raku Multiple Dispatch With the New MoarVM Dispatcher" />
                <link href="https://ohmyweekly.github.io/notes/2021-05-19-a-tour-of-rust-standard-library-traits/?utm_source=atom_feed" rel="related" type="text/html" title="Rust 的标准库 Trait 之旅" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-psql/?utm_source=atom_feed" rel="related" type="text/html" title="Psql" />
                <link href="https://ohmyweekly.github.io/notes/2021-03-15-towards-a-new-general-dispatch-mechanism-in-moarvm/?utm_source=atom_feed" rel="related" type="text/html" title="争取在 MoarVM 中建立一个新的总调度机制" />
                <link href="https://ohmyweekly.github.io/notes/2021-03-07-difference-between-build-and-tweak-in-raku/?utm_source=atom_feed" rel="related" type="text/html" title="BUILD 和 TWEAK 的区别" />
            
                <id>https://ohmyweekly.github.io/notes/2021-06-05-learn-raku-from-roast/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-06-05T00:00:00+08:00</published>
            <updated>2021-06-05T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Learn Raku From Roast</blockquote><p>Raku 的 <a href="https://github.com/Raku/roast">Roast</a> 仓库是一个测试套件, 我们可以从这个仓库中学习到很多 Raku 的知识。</p>
<h2 id="元运算符">元运算符</h2>
<ul>
<li>cross</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span> <span class="ow">X</span> <span class="p">&lt;</span><span class="s">c d</span><span class="p">&gt;</span>
<span class="c1"># Output: ((&#34;a&#34;, &#34;c&#34;), (&#34;a&#34;, &#34;d&#34;), (&#34;b&#34;, &#34;c&#34;), (&#34;b&#34;, &#34;d&#34;)).Seq</span>


<span class="n">dd</span> <span class="mi">1</span> <span class="ow">X</span> <span class="mi">1</span> <span class="ow">X</span> <span class="mi">1</span> <span class="ow">X</span> <span class="mi">1</span>
<span class="c1"># Output: ((1, 1, 1, 1),).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span> <span class="ow">X</span><span class="o">**</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span>
<span class="c1"># Output: 1, 1, 4, 16, 9, 81).Seq</span>


<span class="k">my</span> <span class="nv">@result</span> <span class="o">=</span> <span class="k">gather</span> <span class="p">{</span>
    <span class="k">for</span> <span class="mi">1</span><span class="o">..</span><span class="mi">3</span> <span class="ow">X</span> <span class="p">&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">b</span><span class="p">&#39;</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nv">$n</span><span class="o">,</span> <span class="nv">$a</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">take</span> <span class="p">&#34;</span><span class="nv">$n</span><span class="s2">|</span><span class="nv">$a</span><span class="p">&#34;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">dd</span> <span class="nv">@result</span><span class="p">;</span>
<span class="c1"># Output: Array @result = [&#34;1|a&#34;, &#34;1|b&#34;, &#34;2|a&#34;, &#34;2|b&#34;, &#34;3|a&#34;, &#34;3|b&#34;]</span>


<span class="k">my</span> <span class="nv">@result</span> <span class="o">=</span> <span class="k">gather</span> <span class="k">for</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">3</span> <span class="ow">X</span> <span class="p">&#39;</span><span class="s1">A</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">B</span><span class="p">&#39;)</span> <span class="k">-&gt;</span> <span class="nv">$na</span> <span class="p">{</span>
    <span class="nb">take</span> <span class="nv">$na</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">:</span><span class="p">&#39;);</span>
<span class="p">}</span>

<span class="n">dd</span> <span class="nv">@result</span><span class="p">;</span>
<span class="c1"># Output: Array @result = [&#34;1:A&#34;, &#34;1:B&#34;, &#34;2:A&#34;, &#34;2:B&#34;, &#34;3:A&#34;, &#34;3:B&#34;]</span>


<span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span> <span class="ow">X</span><span class="o">,</span> <span class="p">&lt;</span><span class="s">c d</span><span class="p">&gt;;</span>
<span class="c1"># Output: ((&#34;a&#34;, &#34;c&#34;), (&#34;a&#34;, &#34;d&#34;), (&#34;b&#34;, &#34;c&#34;), (&#34;b&#34;, &#34;d&#34;)).Seq</span>


<span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span> <span class="ow">X</span><span class="o">~</span> <span class="p">&lt;</span><span class="s">1 2</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;a1&#34;, &#34;a2&#34;, &#34;b1&#34;, &#34;b2&#34;).Seq</span>


<span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span> <span class="ow">X</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span><span class="mi">2</span> <span class="ow">X</span><span class="o">,</span> <span class="p">&lt;</span><span class="s">x y</span><span class="p">&gt;;</span>
<span class="c1"># Output: ((&#34;a&#34;, 1, &#34;x&#34;), (&#34;a&#34;, 1, &#34;y&#34;), (&#34;a&#34;, 2, &#34;x&#34;), (&#34;a&#34;, 2, &#34;y&#34;), (&#34;b&#34;, 1, &#34;x&#34;), (&#34;b&#34;, 1, &#34;y&#34;), (&#34;b&#34;, 2, &#34;x&#34;), (&#34;b&#34;, 2, &#34;y&#34;)).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span><span class="mi">2</span> <span class="ow">X</span><span class="o">*</span> <span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">;</span>
<span class="c1"># Output: (3, 4, 6, 8).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span><span class="mi">2</span> <span class="n">Xcmp</span> <span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">0</span><span class="p">;</span>
<span class="c1"># Output: (Order::Less, Order::Less, Order::More, Order::Less, Order::Same, Order::More).Seq</span>


<span class="n">dd</span> <span class="mi">1</span> <span class="ow">X</span><span class="o">*</span> <span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">;</span>
<span class="c1"># Output: (3, 4).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span> <span class="ow">X</span><span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
<span class="c1"># Output: (3, 6).Seq</span>


<span class="n">dd</span> <span class="mi">1</span> <span class="ow">X</span><span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
<span class="c1"># Output: (3,).Seq</span>


<span class="c1"># $[] does not flatten</span>
<span class="n">dd</span> <span class="nv">$</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">]</span> <span class="ow">X</span><span class="o">~</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span>
<span class="c1"># Output: (&#34;1 2a&#34;, &#34;1 2b&#34;).Seq</span>
</code></pre></div><ul>
<li>zip</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span> <span class="ow">Z</span> <span class="p">&lt;</span><span class="s">c d</span><span class="p">&gt;;</span>
<span class="c1"># Output: ((&#34;a&#34;, &#34;c&#34;), (&#34;b&#34;, &#34;d&#34;)).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span> <span class="ow">Z</span><span class="o">**</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="p">;</span>
<span class="c1"># Output: (1, 16).Seq</span>


<span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span> <span class="ow">Z</span><span class="o">~</span> <span class="p">&lt;</span><span class="s">1 2</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;a1&#34;, &#34;b2&#34;).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span><span class="mi">2</span> <span class="ow">Z</span><span class="o">*</span> <span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">;</span>
<span class="c1"># Output: (3, 8).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span><span class="mi">2</span> <span class="n">Zcmp</span> <span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">0</span><span class="p">;</span>
<span class="c1"># Output: (Order::Less, Order::Same).Seq</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">..*</span> <span class="ow">Z</span><span class="o">**</span> <span class="mi">1</span><span class="o">..*</span><span class="p">)</span><span class="o">.[^</span><span class="mi">5</span><span class="o">]</span><span class="p">;</span>
<span class="c1"># Output: (1, 4, 27, 256, 3125)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">..*</span> <span class="ow">Z</span><span class="o">+</span> <span class="p">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span> <span class="o">...</span> <span class="o">*</span><span class="p">))</span><span class="o">.[^</span><span class="mi">5</span><span class="o">]</span><span class="p">;</span>
<span class="c1"># Output: (4, 4, 4, 4, 4)</span>


<span class="n">dd</span> <span class="mi">1</span> <span class="ow">Z</span><span class="o">*</span> <span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">;</span>
<span class="c1"># Output: (3,).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span> <span class="ow">Z</span><span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
<span class="c1"># Output: (3,).Seq</span>


<span class="n">dd</span> <span class="mi">1</span> <span class="ow">Z</span><span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
<span class="c1"># Output: (3,).Seq</span>


<span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b c d</span><span class="p">&gt;</span> <span class="ow">Z</span> <span class="p">&#39;</span><span class="s1">x</span><span class="p">&#39;</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">z</span><span class="p">&#39;</span><span class="o">,</span> <span class="o">*</span><span class="p">;</span>
<span class="c1"># Output: ((&#34;a&#34;, &#34;x&#34;), (&#34;b&#34;, &#34;z&#34;), (&#34;c&#34;, &#34;z&#34;), (&#34;d&#34;, &#34;z&#34;)).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="o">*</span> <span class="ow">Z</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">50</span><span class="p">;</span>
<span class="c1"># Output: ((1, 10), (2, 20), (3, 30), (3, 40), (3, 50)).Seq</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="o">*</span> <span class="ow">Z</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="o">*</span><span class="p">)</span><span class="o">.[^</span><span class="mi">5</span><span class="o">]</span><span class="p">;</span>
<span class="c1"># Output: ((2, 3), (10, 4), (10, 5), (10, 5), (10, 5))</span>


<span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b c d</span><span class="p">&gt;</span> <span class="ow">Z</span><span class="o">~</span> <span class="p">&#39;</span><span class="s1">x</span><span class="p">&#39;</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">z</span><span class="p">&#39;</span><span class="o">,</span> <span class="o">*</span><span class="p">;</span>
<span class="c1"># Output: (&#34;ax&#34;, &#34;bz&#34;, &#34;cz&#34;, &#34;dz&#34;).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="o">*</span> <span class="ow">Z</span><span class="o">+</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">50</span><span class="p">;</span>
<span class="c1"># Output: (11, 22, 33, 43, 53).Seq</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="o">*</span> <span class="ow">Z</span><span class="o">*</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="o">*</span><span class="p">)</span><span class="o">.[^</span><span class="mi">5</span><span class="o">]</span><span class="p">;</span>
<span class="c1"># Output: (6, 40, 50, 50, 50)</span>


<span class="n">dd</span> <span class="o">[</span><span class="ow">Z</span><span class="o">]</span><span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="p">;</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="p">;</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="p">);</span>
<span class="c1"># Output: ((1, 4, 7), (2, 5, 8), (3, 6, 9)).Seq</span>


<span class="n">dd</span> <span class="o">[</span><span class="ow">Z</span><span class="o">&lt;]</span><span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="p">;</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="p">;</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="p">);</span>
<span class="p">(</span><span class="nb">Bool</span><span class="o">:</span><span class="p">:</span><span class="s">True</span><span class="o">,</span> <span class="nb">Bool</span><span class="o">:</span><span class="p">:</span><span class="s">True</span><span class="o">,</span> <span class="nb">Bool</span><span class="o">:</span><span class="p">:</span><span class="s">True</span><span class="p">)</span><span class="o">.</span><span class="nb">Seq</span>
</code></pre></div><ul>
<li>hyper</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$a</span>      <span class="o">:=</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">$b</span>      <span class="o">:=</span> <span class="p">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">6</span><span class="p">);</span>


<span class="c1"># 以下表达式都输出  (3, 6, 9)</span>

<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&gt;&gt;+&lt;&lt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">»+«</span>  <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&gt;&gt;+&gt;&gt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">»+»</span>  <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&lt;</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">&gt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">«+»</span>  <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&lt;&lt;+&lt;&lt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">«+«</span>  <span class="nv">$b</span><span class="p">;</span>

<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&gt;&gt;[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]&lt;&lt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">»[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]«</span>  <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&gt;&gt;[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]&gt;&gt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">»[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]»</span>  <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&lt;&lt;[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]&gt;&gt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">«[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]»</span>  <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&lt;&lt;[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]&lt;&lt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">«[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]«</span>  <span class="nv">$b</span><span class="p">;</span>
</code></pre></div><p><code>»*«</code> 运算符的优先级比 <code>»+«</code> 运算符的优先级高:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">»+«</span> <span class="p">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">30</span><span class="p">)</span> <span class="o">»*«</span> <span class="p">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="p">);</span>
<span class="c1"># Output: (21, 62, 123)</span>
</code></pre></div><p>unary postfix(一元后缀运算符)</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">@r</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="nv">@r</span><span class="o">»++</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">@r</span><span class="p">;</span>
<span class="c1"># Output: Array @r = [2, 3, 4]</span>
</code></pre></div><p>unary prefix(一元前缀运算符)</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">@r</span><span class="p">;</span>
<span class="nv">@r</span> <span class="o">=</span> <span class="o">-«</span> <span class="p">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="n">dd</span> <span class="nv">@r</span><span class="p">;</span>
<span class="c1"># Output: Array @r = [-3, -2, -1]</span>
</code></pre></div><p>dimension upgrade(升维), auto dimension upgrade on rhs/lhs ASCII notation</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">@r</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&gt;&gt;+&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">@r</span><span class="p">;</span>
<span class="c1"># Output: Array @r = [2, 3, 4]</span>


<span class="k">my</span> <span class="nv">@r</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">&lt;&lt;*&lt;&lt;</span> <span class="p">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">30</span><span class="p">);</span>
<span class="n">dd</span> <span class="nv">@r</span><span class="p">;</span>
<span class="c1"># Output: Array @r = [20, 40, 60]</span>
</code></pre></div><p>both-dwim and non-dwim sanity:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">&lt;&lt;~&gt;&gt;</span> <span class="p">&lt;</span><span class="s">A B C D E</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;3C&#34;, &#34;1D&#34;, &#34;2E&#34;)</span>
</code></pre></div><p>extension(扩展)</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;~&gt;&gt;</span> <span class="p">&lt;</span><span class="s">A B C D E</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;3C&#34;, &#34;4D&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="p">)</span> <span class="o">&lt;&lt;~&lt;&lt;</span> <span class="p">&lt;</span><span class="s">A B C D</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;3C&#34;, &#34;4D&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;~&gt;&gt;</span> <span class="p">&lt;</span><span class="s">A B C</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;3C&#34;, &#34;4A&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">&lt;&lt;~&lt;&lt;</span> <span class="p">&lt;</span><span class="s">A B C D</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;3C&#34;, &#34;1D&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;~&gt;&gt;</span> <span class="p">&lt;</span><span class="s">A B</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;3A&#34;, &#34;4B&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;~&lt;&lt;</span> <span class="p">&lt;</span><span class="s">A B C D</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;1C&#34;, &#34;2D&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;~&gt;&gt;</span> <span class="p">&lt;</span><span class="s">A</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2A&#34;, &#34;3A&#34;, &#34;4A&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="p">)</span> <span class="o">&lt;&lt;~&lt;&lt;</span> <span class="p">&lt;</span><span class="s">A B C D</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;1B&#34;, &#34;1C&#34;, &#34;1D&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;~&gt;&gt;</span> <span class="p">&#39;</span><span class="s1">A</span><span class="p">&#39;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2A&#34;, &#34;3A&#34;, &#34;4A&#34;)</span>


<span class="n">dd</span> <span class="mi">1</span> <span class="o">&lt;&lt;~&lt;&lt;</span> <span class="p">&lt;</span><span class="s">A B C D</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;1B&#34;, &#34;1C&#34;, &#34;1D&#34;)</span>
</code></pre></div><h2 id="枚举">枚举</h2>
<ul>
<li>匿名枚举</li>
</ul>
<p>匿名枚举返回一个 Map:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$e</span> <span class="o">=</span> <span class="k">enum</span> <span class="p">&lt;</span><span class="s"> ook! ook. ook? </span><span class="p">&gt;;</span> <span class="c1"># Map.new((ook! =&gt; 0, ook. =&gt; 1, ook? =&gt; 2))</span>
<span class="nb">say</span> <span class="nv">$e</span><span class="o">.</span><span class="nb">keys</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span> <span class="c1">#  3</span>
<span class="nb">say</span> <span class="nv">$e</span><span class="p">&lt;</span><span class="s">ook!</span><span class="p">&gt;;</span>      <span class="c1">#  0</span>
<span class="nb">say</span> <span class="nv">$e</span><span class="p">&lt;</span><span class="s">ook.</span><span class="p">&gt;;</span>      <span class="c1">#  1</span>
<span class="nb">say</span> <span class="nv">$e</span><span class="p">&lt;</span><span class="s">ook?</span><span class="p">&gt;;</span>      <span class="c1">#  2 </span>
<span class="nb">say</span> <span class="nb">so</span> <span class="nv">$e</span> <span class="o">~~</span> <span class="nb">Map</span><span class="p">;</span>  <span class="c1">#  True</span>
<span class="nb">say</span> <span class="nv">$e</span><span class="o">.</span><span class="nb">keys</span><span class="p">;</span>       <span class="c1">#  (ook? ook! ook.)</span>
</code></pre></div><p><code>anon enum &lt;un&gt;</code> 等价于 <code>enum :: &lt;un&gt;</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">anon</span> <span class="k">enum</span> <span class="p">&lt;</span><span class="s">un</span><span class="p">&gt;;</span> <span class="c1">#  Map.new((un =&gt; 0))</span>
<span class="nb">say</span> <span class="o">+</span><span class="n">un</span><span class="p">;</span>        <span class="c1">#  0</span>

<span class="k">my</span> <span class="nv">%e</span> <span class="o">=</span> <span class="k">enum</span> <span class="o">::</span> <span class="p">&lt;</span><span class="s"> foo bar baz </span><span class="p">&gt;;</span> <span class="c1">#  {bar =&gt; 1, baz =&gt; 2, foo =&gt; 0}</span>
<span class="nb">say</span> <span class="nv">%e</span><span class="p">&lt;</span><span class="s">bar</span><span class="p">&gt;;</span> <span class="c1">#  1</span>
<span class="nb">say</span> <span class="n">baz</span><span class="p">;</span>     <span class="c1">#  baz</span>
<span class="nb">say</span> <span class="o">+</span><span class="n">baz</span><span class="p">;</span>    <span class="c1">#  2</span>
</code></pre></div><ul>
<li>枚举作为角色</li>
</ul>
<p>枚举可以用在 <code>but</code> 或 <code>does</code> 中, 用以命令一个想要的属性:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">enum</span> <span class="n">Maybe</span> <span class="p">&lt;</span><span class="s">No Yes Dunno</span><span class="p">&gt;;</span>
<span class="k">class</span> <span class="nc">Bar</span> <span class="p">{</span> <span class="p">}</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="k">does</span> <span class="nc">Maybe</span> <span class="p">{}</span>
<span class="k">my</span> <span class="nv">$x</span> <span class="o">=</span> <span class="n">Foo</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="s">Maybe</span> <span class="o">=&gt;</span> <span class="n">No</span><span class="p">);</span>

<span class="nb">say</span> <span class="nv">$x</span><span class="o">.</span><span class="nf">No</span><span class="p">;</span>    <span class="c1"># True</span>
<span class="nb">say</span> <span class="nv">$x</span><span class="o">.</span><span class="nf">Yes</span><span class="p">;</span>   <span class="c1"># False</span>
<span class="nb">say</span> <span class="nv">$x</span><span class="o">.</span><span class="nf">Dunno</span><span class="p">;</span> <span class="c1"># False</span>

<span class="k">my</span> <span class="nv">$y</span> <span class="o">=</span> <span class="n">Bar</span><span class="o">.</span><span class="nb">new</span><span class="p">()</span> <span class="k">does</span> <span class="nc">Maybe</span><span class="p">(</span><span class="n">Yes</span><span class="p">);</span>
<span class="nb">say</span> <span class="nv">$y</span><span class="o">.</span><span class="nf">Yes</span><span class="p">;</span>   <span class="c1"># True</span>
<span class="nb">say</span> <span class="nv">$y</span><span class="o">.</span><span class="nf">No</span><span class="p">;</span>    <span class="c1"># False</span>
<span class="nb">say</span> <span class="nv">$y</span><span class="o">.</span><span class="nf">Dunno</span><span class="p">;</span> <span class="c1"># False</span>


<span class="k">my</span> <span class="nv">$z</span> <span class="o">=</span> <span class="n">Bar</span><span class="o">.</span><span class="nb">new</span><span class="p">()</span> <span class="k">but</span> <span class="nc">Maybe</span><span class="p">(</span><span class="n">Dunno</span><span class="p">);</span>
<span class="nb">say</span> <span class="nv">$z</span><span class="o">.</span><span class="nf">No</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$z</span><span class="o">.</span><span class="nf">Yes</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$z</span><span class="o">.</span><span class="nf">Dunno</span><span class="p">;</span>
</code></pre></div><h2 id="属性">属性</h2>
<ul>
<li>代理</li>
</ul>
<p>官方文档关于 <a href="https://docs.raku.org/routine/handles">handles</a> 的介绍很粗糙, 看完依然不知道怎么使用。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku-roast" term="raku-roast" label="Raku roast" />
                            
                        
                    
                
            
        </entry>
    
</feed>
