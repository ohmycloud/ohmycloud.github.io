<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    Raku roast on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/tags/raku-roast/</link>
        <description>Recent content  in Raku roast
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Sat, 19 Jun 2021 21:58:43 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/tags/raku-roast/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>Learn Raku From Roast</title>
                <link>https://ohmyweekly.github.io/notes/2021-06-05-learn-raku-from-roast/</link>
                
                
                <description>&lt;blockquote&gt;Learn Raku From Roast&lt;/blockquote&gt;&lt;p&gt;Raku 的 &lt;a href=&#34;https://github.com/Raku/roast&#34;&gt;Roast&lt;/a&gt; 仓库是一个测试套件, 我们可以从这个仓库中学习到很多 Raku 的知识。&lt;/p&gt;
&lt;h2 id=&#34;元运算符&#34;&gt;元运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cross&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;dd &amp;lt;a b&amp;gt; X &amp;lt;c d&amp;gt;
# Output: ((&amp;quot;a&amp;quot;, &amp;quot;c&amp;quot;), (&amp;quot;a&amp;quot;, &amp;quot;d&amp;quot;), (&amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;), (&amp;quot;b&amp;quot;, &amp;quot;d&amp;quot;)).Seq


dd 1 X 1 X 1 X 1
# Output: ((1, 1, 1, 1),).Seq


dd 1, 2, 3 X** 2, 4
# Output: 1, 1, 4, 16, 9, 81).Seq


my @result = gather {
    for 1..3 X &#39;a&#39;..&#39;b&#39; -&amp;gt; ($n, $a) {
        take &amp;quot;$n|$a&amp;quot;
    }
}

dd @result;
# Output: Array @result = [&amp;quot;1|a&amp;quot;, &amp;quot;1|b&amp;quot;, &amp;quot;2|a&amp;quot;, &amp;quot;2|b&amp;quot;, &amp;quot;3|a&amp;quot;, &amp;quot;3|b&amp;quot;]


my @result = gather for (1..3 X &#39;A&#39;..&#39;B&#39;) -&amp;gt; $na {
    take $na.join(&#39;:&#39;);
}

dd @result;
# Output: Array @result = [&amp;quot;1:A&amp;quot;, &amp;quot;1:B&amp;quot;, &amp;quot;2:A&amp;quot;, &amp;quot;2:B&amp;quot;, &amp;quot;3:A&amp;quot;, &amp;quot;3:B&amp;quot;]


dd &amp;lt;a b&amp;gt; X, &amp;lt;c d&amp;gt;;
# Output: ((&amp;quot;a&amp;quot;, &amp;quot;c&amp;quot;), (&amp;quot;a&amp;quot;, &amp;quot;d&amp;quot;), (&amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;), (&amp;quot;b&amp;quot;, &amp;quot;d&amp;quot;)).Seq


dd &amp;lt;a b&amp;gt; X~ &amp;lt;1 2&amp;gt;;
# Output: (&amp;quot;a1&amp;quot;, &amp;quot;a2&amp;quot;, &amp;quot;b1&amp;quot;, &amp;quot;b2&amp;quot;).Seq


dd &amp;lt;a b&amp;gt; X, 1,2 X, &amp;lt;x y&amp;gt;;
# Output: ((&amp;quot;a&amp;quot;, 1, &amp;quot;x&amp;quot;), (&amp;quot;a&amp;quot;, 1, &amp;quot;y&amp;quot;), (&amp;quot;a&amp;quot;, 2, &amp;quot;x&amp;quot;), (&amp;quot;a&amp;quot;, 2, &amp;quot;y&amp;quot;), (&amp;quot;b&amp;quot;, 1, &amp;quot;x&amp;quot;), (&amp;quot;b&amp;quot;, 1, &amp;quot;y&amp;quot;), (&amp;quot;b&amp;quot;, 2, &amp;quot;x&amp;quot;), (&amp;quot;b&amp;quot;, 2, &amp;quot;y&amp;quot;)).Seq


dd 1,2 X* 3,4;
# Output: (3, 4, 6, 8).Seq


dd 1,2 Xcmp 3,2,0;
# Output: (Order::Less, Order::Less, Order::More, Order::Less, Order::Same, Order::More).Seq


dd 1 X* 3,4;
# Output: (3, 4).Seq


dd 1, 2 X* 3;
# Output: (3, 6).Seq


dd 1 X* 3;
# Output: (3,).Seq


# $[] does not flatten
dd $[1,2] X~ &amp;lt;a b&amp;gt;
# Output: (&amp;quot;1 2a&amp;quot;, &amp;quot;1 2b&amp;quot;).Seq
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;zip&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;dd &amp;lt;a b&amp;gt; Z &amp;lt;c d&amp;gt;;
# Output: ((&amp;quot;a&amp;quot;, &amp;quot;c&amp;quot;), (&amp;quot;b&amp;quot;, &amp;quot;d&amp;quot;)).Seq


dd 1, 2, 3 Z** 2, 4;
# Output: (1, 16).Seq


dd &amp;lt;a b&amp;gt; Z~ &amp;lt;1 2&amp;gt;;
# Output: (&amp;quot;a1&amp;quot;, &amp;quot;b2&amp;quot;).Seq


dd 1,2 Z* 3,4;
# Output: (3, 8).Seq


dd 1,2 Zcmp 3,2,0;
# Output: (Order::Less, Order::Same).Seq


dd (1..* Z** 1..*).[^5];
# Output: (1, 4, 27, 256, 3125)


dd (1..* Z+ (3, 2 ... *)).[^5];
# Output: (4, 4, 4, 4, 4)


dd 1 Z* 3,4;
# Output: (3,).Seq


dd 1, 2 Z* 3;
# Output: (3,).Seq


dd 1 Z* 3;
# Output: (3,).Seq


dd &amp;lt;a b c d&amp;gt; Z &#39;x&#39;, &#39;z&#39;, *;
# Output: ((&amp;quot;a&amp;quot;, &amp;quot;x&amp;quot;), (&amp;quot;b&amp;quot;, &amp;quot;z&amp;quot;), (&amp;quot;c&amp;quot;, &amp;quot;z&amp;quot;), (&amp;quot;d&amp;quot;, &amp;quot;z&amp;quot;)).Seq


dd 1, 2, 3, * Z 10, 20, 30, 40, 50;
# Output: ((1, 10), (2, 20), (3, 30), (3, 40), (3, 50)).Seq


dd (2, 10, * Z 3, 4, 5, *).[^5];
# Output: ((2, 3), (10, 4), (10, 5), (10, 5), (10, 5))


dd &amp;lt;a b c d&amp;gt; Z~ &#39;x&#39;, &#39;z&#39;, *;
# Output: (&amp;quot;ax&amp;quot;, &amp;quot;bz&amp;quot;, &amp;quot;cz&amp;quot;, &amp;quot;dz&amp;quot;).Seq


dd 1, 2, 3, * Z+ 10, 20, 30, 40, 50;
# Output: (11, 22, 33, 43, 53).Seq


dd (2, 10, * Z* 3, 4, 5, *).[^5];
# Output: (6, 40, 50, 50, 50)


dd [Z](1,2,3;4,5,6;7,8,9);
# Output: ((1, 4, 7), (2, 5, 8), (3, 6, 9)).Seq


dd [Z&amp;lt;](1,2,3;4,5,6;7,8,9);
(Bool::True, Bool::True, Bool::True).Seq
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;hyper&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my $a      := (1,2,3);
my $b      := (2,4,6);


# 以下表达式都输出  (3, 6, 9)

dd $a &amp;gt;&amp;gt;+&amp;lt;&amp;lt; $b;
dd $a  »+«  $b;
dd $a &amp;gt;&amp;gt;+&amp;gt;&amp;gt; $b;
dd $a  »+»  $b;
dd $a &amp;lt;&amp;lt;+&amp;gt;&amp;gt; $b;
dd $a  «+»  $b;
dd $a &amp;lt;&amp;lt;+&amp;lt;&amp;lt; $b;
dd $a  «+«  $b;

dd $a &amp;gt;&amp;gt;[&amp;amp;infix:&amp;lt;+&amp;gt;]&amp;lt;&amp;lt; $b;
dd $a  »[&amp;amp;infix:&amp;lt;+&amp;gt;]«  $b;
dd $a &amp;gt;&amp;gt;[&amp;amp;infix:&amp;lt;+&amp;gt;]&amp;gt;&amp;gt; $b;
dd $a  »[&amp;amp;infix:&amp;lt;+&amp;gt;]»  $b;
dd $a &amp;lt;&amp;lt;[&amp;amp;infix:&amp;lt;+&amp;gt;]&amp;gt;&amp;gt; $b;
dd $a  «[&amp;amp;infix:&amp;lt;+&amp;gt;]»  $b;
dd $a &amp;lt;&amp;lt;[&amp;amp;infix:&amp;lt;+&amp;gt;]&amp;lt;&amp;lt; $b;
dd $a  «[&amp;amp;infix:&amp;lt;+&amp;gt;]«  $b;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;»*«&lt;/code&gt; 运算符的优先级比 &lt;code&gt;»+«&lt;/code&gt; 运算符的优先级高:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;dd (1, 2, 3) »+« (10, 20, 30) »*« (2, 3, 4);
# Output: (21, 62, 123)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;unary postfix(一元后缀运算符)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my @r = (1, 2, 3);
@r»++;
dd @r;
# Output: Array @r = [2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;unary prefix(一元前缀运算符)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my @r;
@r = -« (3, 2, 1);
dd @r;
# Output: Array @r = [-3, -2, -1]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dimension upgrade(升维), auto dimension upgrade on rhs/lhs ASCII notation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my @r = (1, 2, 3) &amp;gt;&amp;gt;+&amp;gt;&amp;gt; 1;
dd @r;
# Output: Array @r = [2, 3, 4]


my @r = 2 &amp;lt;&amp;lt;*&amp;lt;&amp;lt; (10, 20, 30);
dd @r;
# Output: Array @r = [20, 40, 60]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;both-dwim and non-dwim sanity:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;dd (1,2,3) &amp;lt;&amp;lt;~&amp;gt;&amp;gt; &amp;lt;A B C D E&amp;gt;;
# Output: (&amp;quot;1A&amp;quot;, &amp;quot;2B&amp;quot;, &amp;quot;3C&amp;quot;, &amp;quot;1D&amp;quot;, &amp;quot;2E&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;extension(扩展)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;dd (1,2,3,4) &amp;gt;&amp;gt;~&amp;gt;&amp;gt; &amp;lt;A B C D E&amp;gt;;
# Output: (&amp;quot;1A&amp;quot;, &amp;quot;2B&amp;quot;, &amp;quot;3C&amp;quot;, &amp;quot;4D&amp;quot;)


dd (1,2,3,4,5) &amp;lt;&amp;lt;~&amp;lt;&amp;lt; &amp;lt;A B C D&amp;gt;;
# Output: (&amp;quot;1A&amp;quot;, &amp;quot;2B&amp;quot;, &amp;quot;3C&amp;quot;, &amp;quot;4D&amp;quot;)


dd (1,2,3,4) &amp;gt;&amp;gt;~&amp;gt;&amp;gt; &amp;lt;A B C&amp;gt;;
# Output: (&amp;quot;1A&amp;quot;, &amp;quot;2B&amp;quot;, &amp;quot;3C&amp;quot;, &amp;quot;4A&amp;quot;)


dd (1,2,3) &amp;lt;&amp;lt;~&amp;lt;&amp;lt; &amp;lt;A B C D&amp;gt;;
# Output: (&amp;quot;1A&amp;quot;, &amp;quot;2B&amp;quot;, &amp;quot;3C&amp;quot;, &amp;quot;1D&amp;quot;)


dd (1,2,3,4) &amp;gt;&amp;gt;~&amp;gt;&amp;gt; &amp;lt;A B&amp;gt;;
# Output: (&amp;quot;1A&amp;quot;, &amp;quot;2B&amp;quot;, &amp;quot;3A&amp;quot;, &amp;quot;4B&amp;quot;)


dd (1,2) &amp;lt;&amp;lt;~&amp;lt;&amp;lt; &amp;lt;A B C D&amp;gt;;
# Output: (&amp;quot;1A&amp;quot;, &amp;quot;2B&amp;quot;, &amp;quot;1C&amp;quot;, &amp;quot;2D&amp;quot;)


dd (1,2,3,4) &amp;gt;&amp;gt;~&amp;gt;&amp;gt; &amp;lt;A&amp;gt;;
# Output: (&amp;quot;1A&amp;quot;, &amp;quot;2A&amp;quot;, &amp;quot;3A&amp;quot;, &amp;quot;4A&amp;quot;)


dd (1,) &amp;lt;&amp;lt;~&amp;lt;&amp;lt; &amp;lt;A B C D&amp;gt;;
# Output: (&amp;quot;1A&amp;quot;, &amp;quot;1B&amp;quot;, &amp;quot;1C&amp;quot;, &amp;quot;1D&amp;quot;)


dd (1,2,3,4) &amp;gt;&amp;gt;~&amp;gt;&amp;gt; &#39;A&#39;;
# Output: (&amp;quot;1A&amp;quot;, &amp;quot;2A&amp;quot;, &amp;quot;3A&amp;quot;, &amp;quot;4A&amp;quot;)


dd 1 &amp;lt;&amp;lt;~&amp;lt;&amp;lt; &amp;lt;A B C D&amp;gt;;
# Output: (&amp;quot;1A&amp;quot;, &amp;quot;1B&amp;quot;, &amp;quot;1C&amp;quot;, &amp;quot;1D&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;枚举&#34;&gt;枚举&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;匿名枚举&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;匿名枚举返回一个 Map:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;my $e = enum &amp;lt; ook! ook. ook? &amp;gt;; # Map.new((ook! =&amp;gt; 0, ook. =&amp;gt; 1, ook? =&amp;gt; 2))
say $e.keys.elems; #  3
say $e&amp;lt;ook!&amp;gt;;      #  0
say $e&amp;lt;ook.&amp;gt;;      #  1
say $e&amp;lt;ook?&amp;gt;;      #  2 
say so $e ~~ Map;  #  True
say $e.keys;       #  (ook? ook! ook.)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;anon enum &amp;lt;un&amp;gt;&lt;/code&gt; 等价于 &lt;code&gt;enum :: &amp;lt;un&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;anon enum &amp;lt;un&amp;gt;; #  Map.new((un =&amp;gt; 0))
say +un;        #  0

my %e = enum :: &amp;lt; foo bar baz &amp;gt;; #  {bar =&amp;gt; 1, baz =&amp;gt; 2, foo =&amp;gt; 0}
say %e&amp;lt;bar&amp;gt;; #  1
say baz;     #  baz
say +baz;    #  2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;枚举作为角色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;枚举可以用在 &lt;code&gt;but&lt;/code&gt; 或 &lt;code&gt;does&lt;/code&gt; 中, 用以命令一个想要的属性:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;enum Maybe &amp;lt;No Yes Dunno&amp;gt;;
class Bar { }

class Foo does Maybe {}
my $x = Foo.new(Maybe =&amp;gt; No);

say $x.No;    # True
say $x.Yes;   # False
say $x.Dunno; # False

my $y = Bar.new() does Maybe(Yes);
say $y.Yes;   # True
say $y.No;    # False
say $y.Dunno; # False


my $z = Bar.new() but Maybe(Dunno);
say $z.No;
say $z.Yes;
say $z.Dunno;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;属性&#34;&gt;属性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;代理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方文档关于 &lt;a href=&#34;https://docs.raku.org/routine/handles&#34;&gt;handles&lt;/a&gt; 的介绍很粗糙, 看完依然不知道怎么使用。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/raku">Raku</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">Raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku-roast">Raku roast</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2021-06-05-learn-raku-from-roast/</guid>
                <pubDate>Sat, 05 Jun 2021 00:00:00 +0800</pubDate>
            </item>
        
    </channel>
</rss>


