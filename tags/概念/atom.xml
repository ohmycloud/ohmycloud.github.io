<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.79.0">Hugo</generator><title type="html"><![CDATA[概念 on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/%E6%A6%82%E5%BF%B5/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/%E6%A6%82%E5%BF%B5/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/%E6%A6%82%E5%BF%B5/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/%E6%A6%82%E5%BF%B5/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2020-12-23T22:58:28+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/%E6%A6%82%E5%BF%B5/</id>
    
        
        <entry>
            <title type="html"><![CDATA[概念]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-20-concepts-overview/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-20-flink-architecture/?utm_source=atom_feed" rel="related" type="text/html" title="Flink 的架构" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-20-timely-stream-processing/?utm_source=atom_feed" rel="related" type="text/html" title="及时的流处理" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-20-stateful-stream-processing/?utm_source=atom_feed" rel="related" type="text/html" title="有状态的流处理" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-20-glossary/?utm_source=atom_feed" rel="related" type="text/html" title="术语表" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-19-intro-to-the-datastream-api/?utm_source=atom_feed" rel="related" type="text/html" title="DataStream API 介绍" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-20-concepts-overview/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-20T00:00:00+08:00</published>
            <updated>2020-08-20T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Concepts</blockquote><h2 id="概念">概念</h2>
<p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/">实践培训</a>解释了作为 Flink 的 API 基础的有状态和及时流处理的基本概念，并提供了这些机制如何在应用中使用的例子。有状态的流处理是在<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/etl.html#stateful-transformations">数据管道</a>和ETL的背景下介绍的，并在<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/fault_tolerance.html">容错</a>部分进一步发展。在<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/streaming_analytics.html">&ldquo;流分析&rdquo;</a>一节中介绍了及时的流处理。</p>
<p>本概念深度部分提供了对 Flink 的架构和运行时如何实现这些概念的更深入的理解。</p>
<h2 id="flink-的-api">Flink 的 API</h2>
<p>Flink 为开发流式/批量应用提供了不同层次的抽象。</p>
<p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/levels_of_abstraction.svg" alt="img"></p>
<ul>
<li>
<p>最底层的抽象只是提供<strong>有状态和及时的流处理</strong>。它通过 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/process_function.html">Process Function</a> 嵌入到 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/datastream_api.html">DataStream API</a> 中。它允许用户自由处理来自一个或多个流的事件，并提供一致的、容错的状态。此外，用户还可以注册事件时间和处理时间的回调，使程序可以实现复杂的计算。</p>
</li>
<li>
<p>在实际应用中，很多应用程序并不需要上述的低级抽象，而是可以针对 <strong>Core APIs</strong> 进行编程：<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/datastream_api.html">DataStream API</a>（有界/无界流）和 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/batch/">DataSet API</a>（有界数据集）。这些流畅的 API 为数据处理提供了常见的构件，比如各种形式的用户指定的转换、连接、聚合、窗口、状态等。在这些 API 中处理的数据类型在各自的编程语言中被表示为类。</p>
</li>
</ul>
<p>低级 Process Function 与 DataStream API 相集成，因此可以根据需要使用低级抽象。DataSet API 提供了关于有界数据集的附加原语，如循环/迭代。</p>
<ul>
<li><strong>Table API</strong> 是以表为中心的声明式 DSL，它可能是动态变化的表（当表示流时）。<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/">Table API</a> 遵循（扩展的）关系模型。表有一个附加的模式（类似于关系数据库中的表），API 提供了可比较的操作，如select、project、join、group-by、aggregation 等。Table API 程序声明式地定义了应该做什么逻辑操作，而不是具体规定操作的代码是怎样的。虽然 Table API 可以通过各种类型的用户定义函数进行扩展，但它的表现力不如 Core API，使用起来更简洁（写的代码更少）。此外，Table API 程序在执行前还要经过一个优化器，应用优化规则。</li>
</ul>
<p>人们可以在表和 DataStream/DataSet 之间无缝转换，允许程序将 Table API 与 DataStream 和 DataSet API 混合使用。</p>
<ul>
<li>Flink 提供的最高级抽象是 <strong>SQL</strong>。这个抽象在语义和表现形式上都与 Table API 相似，但将程序表示为 SQL 查询表达式。<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11//ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/#sql">SQL</a> 抽象与 Table API 紧密交互，SQL 查询可以在 Table API 中定义的表上执行。</li>
</ul>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/programming" term="programming" label="programming" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink" term="flink" label="Flink" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/%E6%A6%82%E5%BF%B5" term="%E6%A6%82%E5%BF%B5" label="概念" />
                            
                        
                    
                
            
        </entry>
    
</feed>
