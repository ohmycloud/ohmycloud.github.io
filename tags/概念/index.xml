<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    概念 on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/tags/%E6%A6%82%E5%BF%B5/</link>
        <description>Recent content  in 概念
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Sat, 02 Mar 2024 13:39:19 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/tags/%E6%A6%82%E5%BF%B5/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>概念</title>
                <link>https://ohmyweekly.github.io/notes/2020-08-20-concepts-overview/</link>
                
                
                <description>&lt;blockquote&gt;Concepts&lt;/blockquote&gt;&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/&#34;&gt;实践培训&lt;/a&gt;解释了作为 Flink 的 API 基础的有状态和及时流处理的基本概念，并提供了这些机制如何在应用中使用的例子。有状态的流处理是在&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/etl.html#stateful-transformations&#34;&gt;数据管道&lt;/a&gt;和ETL的背景下介绍的，并在&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/fault_tolerance.html&#34;&gt;容错&lt;/a&gt;部分进一步发展。在&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/streaming_analytics.html&#34;&gt;&amp;ldquo;流分析&amp;rdquo;&lt;/a&gt;一节中介绍了及时的流处理。&lt;/p&gt;
&lt;p&gt;本概念深度部分提供了对 Flink 的架构和运行时如何实现这些概念的更深入的理解。&lt;/p&gt;
&lt;h2 id=&#34;flink-的-api&#34;&gt;Flink 的 API&lt;/h2&gt;
&lt;p&gt;Flink 为开发流式/批量应用提供了不同层次的抽象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/levels_of_abstraction.svg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最底层的抽象只是提供&lt;strong&gt;有状态和及时的流处理&lt;/strong&gt;。它通过 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/process_function.html&#34;&gt;Process Function&lt;/a&gt; 嵌入到 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/datastream_api.html&#34;&gt;DataStream API&lt;/a&gt; 中。它允许用户自由处理来自一个或多个流的事件，并提供一致的、容错的状态。此外，用户还可以注册事件时间和处理时间的回调，使程序可以实现复杂的计算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在实际应用中，很多应用程序并不需要上述的低级抽象，而是可以针对 &lt;strong&gt;Core APIs&lt;/strong&gt; 进行编程：&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/datastream_api.html&#34;&gt;DataStream API&lt;/a&gt;（有界/无界流）和 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/batch/&#34;&gt;DataSet API&lt;/a&gt;（有界数据集）。这些流畅的 API 为数据处理提供了常见的构件，比如各种形式的用户指定的转换、连接、聚合、窗口、状态等。在这些 API 中处理的数据类型在各自的编程语言中被表示为类。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;低级 Process Function 与 DataStream API 相集成，因此可以根据需要使用低级抽象。DataSet API 提供了关于有界数据集的附加原语，如循环/迭代。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Table API&lt;/strong&gt; 是以表为中心的声明式 DSL，它可能是动态变化的表（当表示流时）。&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/&#34;&gt;Table API&lt;/a&gt; 遵循（扩展的）关系模型。表有一个附加的模式（类似于关系数据库中的表），API 提供了可比较的操作，如select、project、join、group-by、aggregation 等。Table API 程序声明式地定义了应该做什么逻辑操作，而不是具体规定操作的代码是怎样的。虽然 Table API 可以通过各种类型的用户定义函数进行扩展，但它的表现力不如 Core API，使用起来更简洁（写的代码更少）。此外，Table API 程序在执行前还要经过一个优化器，应用优化规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人们可以在表和 DataStream/DataSet 之间无缝转换，允许程序将 Table API 与 DataStream 和 DataSet API 混合使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flink 提供的最高级抽象是 &lt;strong&gt;SQL&lt;/strong&gt;。这个抽象在语义和表现形式上都与 Table API 相似，但将程序表示为 SQL 查询表达式。&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11//ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/#sql&#34;&gt;SQL&lt;/a&gt; 抽象与 Table API 紧密交互，SQL 查询可以在 Table API 中定义的表上执行。&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flink">Flink</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/%E6%A6%82%E5%BF%B5">概念</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-08-20-concepts-overview/</guid>
                <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
            </item>
        
    </channel>
</rss>


