<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[set on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/set/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/set/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/set/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/set/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-13T22:14:20+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/set/</id>
    
        
        <entry>
            <title type="html"><![CDATA[找到两个文件中共有的行]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-06-18-find-the-common-lines-in-two-files/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2015-06-18-find-the-common-lines-in-two-files/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Find the Common Lines in Two Files</blockquote><h2 id="找出两个文件中共有的行-顺序无关紧要">找出两个文件中共有的行, 顺序无关紧要</h2>
<p>在 Perl 5 里, 你可以这样:</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="ch">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="mf">5.010</span><span class="p">;</span> <span class="k">use</span> <span class="nn">warnings</span><span class="p">;</span> <span class="k">use</span> <span class="nn">strict</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%filea</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span> <span class="nv">$_</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span> <span class="k">do</span> <span class="p">{</span> <span class="nb">open</span> <span class="k">my</span> <span class="nv">$fa</span><span class="p">,</span> <span class="s">&#39;&lt;&#39;</span><span class="p">,</span> <span class="s">&#39;filea&#39;</span> <span class="ow">or</span> <span class="nb">die</span> <span class="vg">$!</span><span class="p">;</span> <span class="sr">&lt;$fa&gt;</span> <span class="p">};</span>
<span class="k">my</span> <span class="nv">%fileb</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span> <span class="nv">$_</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span> <span class="k">do</span> <span class="p">{</span> <span class="nb">open</span> <span class="k">my</span> <span class="nv">$fb</span><span class="p">,</span> <span class="s">&#39;&lt;&#39;</span><span class="p">,</span> <span class="s">&#39;fileb&#39;</span> <span class="ow">or</span> <span class="nb">die</span> <span class="vg">$!</span><span class="p">;</span> <span class="sr">&lt;$fb&gt;</span> <span class="p">};</span>
<span class="k">for</span><span class="p">(</span> <span class="nb">keys</span> <span class="nv">%filea</span> <span class="p">){</span>
    <span class="k">print</span> <span class="k">if</span> <span class="nv">$fileb</span><span class="p">{</span><span class="nv">$_</span><span class="p">};</span>
<span class="p">}</span>
</code></pre></div><p>在 Raku 中就长这样:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#!/usr/bin/env raku</span>

<span class="k">my</span> <span class="nv">@a</span> <span class="o">:=</span> <span class="p">&#34;</span><span class="s2">filea</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">lines</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">@b</span> <span class="o">:=</span> <span class="p">&#34;</span><span class="s2">fileb</span><span class="p">&#34;</span><span class="o">.</span><span class="nb">IO</span><span class="o">.</span><span class="nb">lines</span><span class="p">;</span>
<span class="o">.</span><span class="nb">say</span> <span class="k">for</span> <span class="nb">keys</span><span class="p">(</span> <span class="nv">@a</span> <span class="o">∩</span> <span class="nv">@b</span> <span class="p">);</span>
</code></pre></div><p>因为  Raku 中的&quot;惰性列表”, 底层实现能把工作分割成不同的任务并行执行, 然后在需要结果的时候返回给它们。所以, 这种情况下, <code>@a</code> 和 <code>@b</code> 的填充可以同时运行.但是要点是, 如果你有耗费时间, 不彼此依赖的操作, 或者函数 A 要传递一个 item 列表给函数 B, 这些操作可能并行执行, 提高速度, 你不需要做任何线程相关的东西。非常赞!</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/set" term="set" label="set" />
                            
                        
                    
                
            
        </entry>
    
</feed>
