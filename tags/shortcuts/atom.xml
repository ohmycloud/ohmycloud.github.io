<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.92.0">Hugo</generator><title type="html"><![CDATA[shortcuts on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/shortcuts/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/shortcuts/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/shortcuts/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/shortcuts/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2022-01-23T16:05:49+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/shortcuts/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Raku 快捷方式(第一部分)]]></title>
            <link href="https://ohmyweekly.github.io/notes/2016-08-31-raku-shortcuts-part-one/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2016-08-31-raku-shortcuts-part-one/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-18T00:00:00+00:00</published>
            <updated>2021-07-18T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Raku Shortcuts Part One</blockquote><p>快捷方式(Shortcuts)是一个具有争议性的话题。有些人认为它让代码更快更易读。有些人认为它让代码变得更难读, 如果人们不熟悉那些快捷方式的话。这篇文章仅仅告诉你 Shortcuts 的东西, 用不用取决于你。让我们开始吧。</p>
<h2 id="类属性的公开-gettersetter">类属性的公开 Getter/Setter</h2>
<p>&ldquo;getter&rdquo; 和 &ldquo;setter&rdquo; 的概念在很多语言中是共通的: 在你的类中有一个&quot;东西&quot;, 并且你写了一个方法来设置或获取那个东西的值。以啰嗦的 Raku 方式来写, 这样的一个设置看起来像这样:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
    <span class="k">has</span> <span class="nv">$!attr</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
    <span class="k">method</span> <span class="n">attr</span> <span class="k">is</span> <span class="k">rw</span> <span class="p">{</span> <span class="nv">$!attr</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span>  <span class="nv">$obj</span> <span class="o">=</span> <span class="n">Foo</span><span class="o">.</span><span class="nb">new</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$obj</span><span class="o">.</span><span class="nf">attr</span><span class="p">;</span>
    <span class="nv">$obj</span><span class="o">.</span><span class="nf">attr</span> <span class="o">=</span> <span class="mi">72</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$obj</span><span class="o">.</span><span class="nf">attr</span><span class="p">;</span>

<span class="c1"># 输出</span>
<span class="c1"># 42</span>
<span class="c1"># 72</span>
</code></pre></div><p>这就像它本来的那样简洁, 但公共属性通常足以使编写这点儿代码变得恼人。这就是为什么 <code>$.</code> twigil 存在的原因。单独使用它会创建一个 &ldquo;getter&rdquo;; 如果你还想要一个 &ldquo;setter&rdquo;, 则需要使用 <code>is rw</code> 特性:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span> <span class="k">has</span> <span class="nv">$.attr</span> <span class="k">is</span> <span class="k">rw</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span> <span class="p">}</span>

<span class="k">my</span>  <span class="nv">$obj</span> <span class="o">=</span> <span class="n">Foo</span><span class="o">.</span><span class="nb">new</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$obj</span><span class="o">.</span><span class="nf">attr</span><span class="p">;</span>
    <span class="nv">$obj</span><span class="o">.</span><span class="nf">attr</span> <span class="o">=</span> <span class="mi">72</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$obj</span><span class="o">.</span><span class="nf">attr</span><span class="p">;</span>

<span class="c1"># 输出</span>
<span class="c1"># 42</span>
<span class="c1"># 72</span>
</code></pre></div><p>我们把属性上的 <code>$!</code> twigil 更改为 <code>$.</code> twigil, 并且它为我们创建了一个公共的方法。继续!</p>
<h2 id="在方法调用中省略圆括号">在方法调用中省略圆括号</h2>
<p>下面这样的代码你不会经常看见, 代码末尾有一整吨的圆括号。确保它们都能匹配!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nv">$foo</span><span class="o">.</span><span class="nb">log</span><span class="p">(</span> <span class="nv">$obj</span><span class="o">.</span><span class="nf">nukanate</span><span class="p">(</span> <span class="nv">$foo</span><span class="o">.</span><span class="nb">grep</span><span class="p">(</span><span class="o">*.</span><span class="nf">bar</span><span class="p">)</span><span class="o">.</span><span class="nb">map</span><span class="p">(</span><span class="o">*.</span><span class="nf">ber</span><span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
</code></pre></div><p>对于那些想起  <a href="https://xkcd.com/297/">popular webcomic</a> 的人来说, Raku 还有一个备选项:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nv">$foo</span><span class="o">.</span><span class="nb">log</span><span class="o">:</span> <span class="nv">$obj</span><span class="o">.</span><span class="nf">nukanate</span><span class="o">:</span> <span class="nv">$foo</span><span class="o">.</span><span class="nb">grep</span><span class="p">(</span><span class="o">*.</span><span class="nf">bar</span><span class="p">)</span><span class="o">.</span><span class="nb">map</span><span class="o">:</span> <span class="o">*.</span><span class="nf">ber</span><span class="p">;</span>
</code></pre></div><p>如果方法在方法调用链的最后, 你可以省略它的圆括号并使用一个冒号 <code>:</code> 代替。除了 <code>.grep</code>, 我们上面所有的调用在链中都是最后的(last in chain), 所以我们避免了很多圆括号。有时我也喜欢在冒号后面换行开始写东西。</p>
<p>还要注意: 你总是可以省略方法调用中的圆括号, 如果你没有提供任何参数的话; 也不需要分号。</p>
<h2 id="没有逗号的具名参数">没有逗号的具名参数</h2>
<p>如果你正调用一个提供只有具名参数的方法或子例程的话, 你可以省略参数之间的逗号。有时候, 我也喜欢把每个参数作为新行叠放在一块儿:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">baz</span> <span class="p">(</span><span class="o">:</span><span class="nv">$foo</span><span class="o">,</span> <span class="o">:</span><span class="nv">$bar</span><span class="o">,</span> <span class="o">:</span><span class="nv">$ber</span><span class="p">)</span> <span class="p">{</span> <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">[</span><span class="nv">$foo</span><span class="s2">, </span><span class="nv">$bar</span><span class="s2">, </span><span class="nv">$ber</span><span class="s2">]</span><span class="p">&#34;</span> <span class="p">}</span>
<span class="p">}</span>
    <span class="k">sub</span>    <span class="nf">baz</span> <span class="p">(</span><span class="o">:</span><span class="nv">$foo</span><span class="o">,</span> <span class="o">:</span><span class="nv">$bar</span><span class="o">,</span> <span class="o">:</span><span class="nv">$ber</span><span class="p">)</span> <span class="p">{</span> <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">[</span><span class="nv">$foo</span><span class="s2">, </span><span class="nv">$bar</span><span class="s2">, </span><span class="nv">$ber</span><span class="s2">]</span><span class="p">&#34;</span> <span class="p">}</span>

<span class="n">Foo</span><span class="o">.</span><span class="nf">baz</span><span class="o">:</span>
    <span class="p">:</span><span class="s">foo</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
    <span class="p">:</span><span class="s">bar</span><span class="p">(</span><span class="mi">72</span><span class="p">)</span>
    <span class="p">:</span><span class="s">ber</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>

<span class="n">baz</span> <span class="p">:</span><span class="s">foo</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="p">:</span><span class="s">bar</span><span class="p">(</span><span class="mi">72</span><span class="p">)</span> <span class="p">:</span><span class="s">ber</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>

<span class="c1"># OUTPUT&gt;&gt;:</span>
<span class="c1"># [42, 72, 100]</span>
<span class="c1"># [42, 72, 100]</span>
</code></pre></div><p>再次, 这在当你提供只有具名参数的时候才有效。有很多很多其它使用同样形式提供参数或 Pairs 但是你又不能省略逗号的地方。</p>
<h2 id="具名参数pairs-中的整数">具名参数/Pairs 中的整数</h2>
<p>如果参数或 Pair 接收一个正整数作为值, 就把数字写在冒号和键的名字之间:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nb">DateTime</span><span class="o">.</span><span class="nb">new</span><span class="o">:</span> <span class="p">:</span><span class="mi">2016</span><span class="s">year</span> <span class="p">:</span><span class="mi">2</span><span class="s">month</span> <span class="p">:</span><span class="mi">1</span><span class="s">day</span> <span class="p">:</span><span class="mi">16</span><span class="s">hour</span> <span class="p">:</span><span class="mi">32</span><span class="s">minute</span><span class="p">;</span>

<span class="c1"># 输出</span>
<span class="c1"># 2016-02-01T16:32:00Z</span>
</code></pre></div><p>这是其中之一当你第一次学习它的时候看起来不和谐的东西, 但是你会很快习惯它。它读起来很像英语:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">%ingredients</span> <span class="o">=</span> <span class="p">:</span><span class="mi">4</span><span class="s">eggs</span><span class="o">,</span> <span class="p">:</span><span class="mi">2</span><span class="s">sticks-of-butter</span><span class="o">,</span> <span class="p">:</span><span class="mi">4</span><span class="s">cups-of-suger</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">%ingredients</span><span class="p">;</span>

<span class="c1"># OUTPUT</span>
<span class="c1"># cups-of-sugar =&gt; 4, eggs =&gt; 4, sticks-of-butter =&gt; 2</span>
</code></pre></div><h2 id="具名参数pairs-中的布尔值">具名参数/Pairs 中的布尔值</h2>
<p>使用键自身的名字来标示 <strong>True</strong>, 在键名和冒号之间插入一个感叹号来标示 <strong>False</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">foo</span> <span class="p">(</span><span class="o">:</span><span class="nv">$bar</span><span class="o">,</span> <span class="o">:</span><span class="nv">$ber</span><span class="p">)</span> <span class="p">{</span> <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$bar</span><span class="s2">, </span><span class="nv">$ber</span><span class="p">&#34;</span> <span class="p">}</span>
<span class="n">foo</span> <span class="p">:</span><span class="o">!</span><span class="s">bar</span> <span class="p">:</span><span class="s">ber</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%hash</span> <span class="o">=</span> <span class="p">:</span><span class="o">!</span><span class="s">bar</span><span class="o">,</span> <span class="p">:</span><span class="s">ber</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">%hash</span><span class="p">;</span>

<span class="c1"># OUTPUT</span>
<span class="c1"># False, True</span>
<span class="c1"># bar =&gt; False, ber =&gt; True</span>
</code></pre></div><p>注意: 这也能应用在副词上!</p>
<h2 id="具名参数pairs-中的-lists">具名参数/Pairs 中的 Lists</h2>
<p>如果你正提供一个 quote-word 结构给一个期望某种 listy 的具名参数/pair, 那么你可以省略圆括号; 在键和  quote-words 之间不留任何空格就是了:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">foo</span> <span class="p">(</span><span class="o">:</span><span class="nv">@args</span><span class="p">)</span> <span class="p">{</span> <span class="nb">say</span> <span class="nv">@args</span> <span class="p">}</span>
<span class="n">foo</span> <span class="p">:</span><span class="s">args</span><span class="p">&lt;</span><span class="s">foo bar ber</span><span class="p">&gt;;</span>

<span class="k">my</span> <span class="nv">%hash</span> <span class="o">=</span> <span class="p">:</span><span class="s">ingredients</span><span class="p">&lt;</span><span class="s">milk eggs butter</span><span class="p">&gt;;</span>
<span class="nb">say</span> <span class="nv">%hash</span><span class="p">;</span>

<span class="c1"># OUTPUT</span>
<span class="c1"># (foo bar ber)</span>
<span class="c1"># ingredients =&gt; (milk eggs butter)</span>
</code></pre></div><h2 id="传递变量给具名参数pairs">传递变量给具名参数/Pairs</h2>
<p>你认为具名参数就这样了吗？还有一个更酷的 shortcut: 假设你有一个变量并且它和具名参数拥有相同的名字… 就通过使用变量自身把它传递进来好了, 代替键, 在冒号之后:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">hashify</span> <span class="p">(</span><span class="o">:</span><span class="nv">$bar</span><span class="o">,</span> <span class="o">:</span><span class="nv">@ber</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">%hash</span> <span class="o">=</span> <span class="o">:</span><span class="nv">$bar</span><span class="o">,</span> <span class="o">:</span><span class="nv">@ber</span><span class="p">;</span>
    <span class="nb">say</span> <span class="nv">%hash</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">my</span> <span class="p">(</span> <span class="nv">$bar</span><span class="o">,</span> <span class="nv">@ber</span> <span class="p">)</span>  <span class="o">=</span> <span class="mi">42</span><span class="o">,</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">3</span><span class="p">);</span>
<span class="n">hashify</span> <span class="o">:</span><span class="nv">$bar</span> <span class="o">:</span><span class="nv">@ber</span><span class="p">;</span>

<span class="c1"># OUTPUT</span>
<span class="c1"># bar =&gt; 42, ber =&gt; [1..3]</span>
</code></pre></div><p>注意我们既没有在 sub 调用中也没有在我们创建的 hash 中重复键的名字。它们是从变量的名字中派生出来的。</p>
<h2 id="subs-作为方法调用">Subs 作为方法调用</h2>
<p>如果你有一个 sub 想在某些东西上作为方法调用, 就在 sub 那儿前置一个 <code>&amp;</code> 符号就好。 调用者会是第一个位置参数, 所有其它参数像往常那样传递。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">be-wise</span> <span class="p">(</span><span class="nv">$self</span><span class="o">,</span> <span class="nv">$who</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">Anonymous</span><span class="p">&#39;)</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">Konw your </span><span class="nv">$self</span><span class="s2">, </span><span class="nv">$who</span><span class="s2">!</span><span class="p">&#34;</span> <span class="p">}</span>

<span class="p">&#39;</span><span class="s1">ABC</span><span class="p">&#39;</span><span class="o">.&amp;</span><span class="nf">be-wise</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>
<span class="p">&#39;</span><span class="s1">ABC</span><span class="p">&#39;</span><span class="o">.&amp;</span><span class="nf">be-wise</span><span class="p">(&#39;</span><span class="s1">Zoffix</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>

<span class="c1"># OUTPUT</span>
<span class="c1"># Know your ABC, Anonymous!</span>
<span class="c1"># Know your ABC, Zoffix!</span>
</code></pre></div><p>这实质上是一种不那么难看的在某个实例上调用 <code>.map</code> 的方式, 但是多数时候它的可读性更好。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">be-wise</span> <span class="p">(</span><span class="nv">$self</span><span class="o">,</span> <span class="nv">$who</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">Anonymous</span><span class="p">&#39;)</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">Know your </span><span class="nv">$self</span><span class="s2">, </span><span class="nv">$who</span><span class="s2">!</span><span class="p">&#34;</span> <span class="p">}</span>

<span class="p">&#39;</span><span class="s1">ABC</span><span class="p">&#39;</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span><span class="n">be-wise</span> <span class="nv">$_</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">Zoffix</span><span class="p">&#39;})</span><span class="o">».</span><span class="nb">say</span><span class="p">;</span>
<span class="nb">say</span> <span class="n">be-wise</span> <span class="p">&#39;</span><span class="s1">ABC</span><span class="p">&#39;</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">Zoffix</span><span class="p">&#39;;</span>

<span class="c1"># OUTPUT</span>
<span class="c1"># Know your ABC, Zoffix!</span>
<span class="c1"># Know your ABC, Zoffix!</span>
</code></pre></div><p>为了完整性, 但不是过度使用, 你可以内联调用甚至使用一个 pointy block 来设置签名!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="p">&#39;</span><span class="s1">ABC</span><span class="p">&#39;</span><span class="o">.&amp;</span><span class="p">(&#39;</span><span class="s1">Know your </span><span class="p">&#39;</span> <span class="o">~</span> <span class="o">*</span><span class="p">)</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>
<span class="p">&#39;</span><span class="s1">ABC</span><span class="p">&#39;</span><span class="o">.&amp;</span><span class="p">(</span> <span class="k">-&gt;</span> <span class="nv">$self</span><span class="o">,</span> <span class="nv">$who</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">Anonymous</span><span class="p">&#39;</span> <span class="p">{&#34;</span><span class="s2">Know your </span><span class="nv">$self</span><span class="s2">, </span><span class="nv">$who</span><span class="s2">!</span><span class="p">&#34;}</span> <span class="p">)(&#39;</span><span class="s1">Zoffix</span><span class="p">&#39;)</span>
    <span class="o">.</span><span class="nb">say</span><span class="p">;</span>

<span class="c1"># OUTPUT</span>
<span class="c1"># Know your ABC</span>
<span class="c1"># Know your ABC, Zoffix!</span>
</code></pre></div><h2 id="hyper-方法调用">Hyper 方法调用</h2>
<p>因为我们谈到了 <code>.map</code> 的快捷方式, 记住 <code>»</code> hyper 操作符。在方法调用的点号之前使用它以标示你想在调用者的每个元素身上调用点号后面跟着的方法, 而不是调用者本身。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="p">)</span><span class="o">».</span><span class="nb">is-prime</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>
<span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="p">)</span><span class="o">&gt;&gt;.</span><span class="nb">is-prime</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>

<span class="c1"># OUTPUT</span>
<span class="c1"># (False True True)</span>
<span class="c1"># (False True True)</span>
</code></pre></div><h2 id="总结">总结</h2>
<ul>
<li>使用 <code>$.</code> twigil 来声明公共属性</li>
<li>使用 <code>:</code> 代替圆括号</li>
<li>只含具名参数的 Methods/sub 调用不需要逗号</li>
<li>通过把整数值写在键和冒号之间传递 Int 值</li>
<li>使用键自身来指定一个 True 布尔值</li>
<li>使用键自身, 并在键名和冒号之间插入一个 <code>!</code> 号来指定一个 <strong>False</strong> 值</li>
<li>当值是 quote-word 结构时, 把它写在键后面, 不含任何圆括号</li>
<li>当变量和键的名字相同时, 把它直接用作键(包括符号), 不用指定任何值</li>
<li>在 sub 那儿前置一个 <code>&amp;</code>, 当把它作为方法调用时</li>
<li>使用 <code>»</code> 操作符来对列表中的每个元素调用一个方法</li>
</ul>
<p><a href="http://blogs.perl.org/users/zoffix_znet/2016/02/perl-6-shortcuts-part-1.html">http://blogs.perl.org/users/zoffix_znet/2016/02/perl-6-shortcuts-part-1.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/shortcuts" term="shortcuts" label="shortcuts" />
                            
                        
                    
                
            
        </entry>
    
</feed>
