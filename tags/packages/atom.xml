<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.79.0">Hugo</generator><title type="html"><![CDATA[packages on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/packages/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/packages/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/packages/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/packages/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-02-08T15:20:01+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/packages/</id>
    
        
        <entry>
            <title type="html"><![CDATA[创建包]]></title>
            <link href="https://ohmyweekly.github.io/notes/creating-packages/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/publishing-packages/?utm_source=atom_feed" rel="related" type="text/html" title="发布包" />
                <link href="https://ohmyweekly.github.io/notes/how-to-use-packages/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用包" />
                <link href="https://ohmyweekly.github.io/notes/commonly-used-packages/?utm_source=atom_feed" rel="related" type="text/html" title="常用的包" />
                <link href="https://ohmyweekly.github.io/notes/write-http-clients/?utm_source=atom_feed" rel="related" type="text/html" title="编写HTTP客户端和服务器" />
                <link href="https://ohmyweekly.github.io/notes/write-your-first-flutter-app/?utm_source=atom_feed" rel="related" type="text/html" title="编写你的第一个 Flutter 应用，第一部分" />
            
                <id>https://ohmyweekly.github.io/notes/creating-packages/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-06-30T00:00:00+08:00</published>
            <updated>2020-06-30T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Creating packages</blockquote><p>Dart 生态系统使用<a href="https://dart.dev/guides/packages">包</a>来共享软件，如库和工具。本页告诉你如何创建一个包，重点是最常见的一种包，<a href="https://dart.dev/tools/pub/glossary#library-package">库包</a>。</p>
<h2 id="是什么造就了一个库包">是什么造就了一个库包</h2>
<p>下图是最简单的库包的布局:</p>
<p><img src="https://dart.dev/assets/libraries/simple-lib2-81ebdc20fdb53d3abbc4364956141eb0f6f8f275d1636064fc3e1db959b93c1a.png" alt="img"></p>
<p>一个库的最低要求是</p>
<p><strong>pubspec 文件</strong></p>
<p>库的 <code>pubspec.yaml</code> 文件和应用程序包的文件是一样的-没有特别的名称来表示这个包是一个库。</p>
<p><strong>lib 目录</strong></p>
<p>正如你所期望的那样，库代码存在于 <code>lib</code> 目录下，对其他包是公开的。你可以根据需要在 <code>lib</code> 下创建任何层次结构。按照惯例，实现代码被放在 <code>lib/src</code> 下。<code>lib/src</code> 下的代码被认为是私有的；其他包不应该需要导入 <code>src/...</code>。要使 <code>lib/src</code> 下的 API 公开，您可以从直接位于 <code>lib</code> 下的文件导出 <code>lib/src</code> 文件。</p>
<p>注意：当没有指定 <code>library</code> 指令时，会根据每个库的路径和文件名为其生成一个唯一的标签。因此，我们建议您从代码中省略 <code>library</code> 指令，除非您计划<a href="https://dart.dev/guides/libraries/create-library-packages#documenting-a-library">生成库级文档</a>。</p>
<h2 id="组织一个库包">组织一个库包</h2>
<p>当你创建小的、单独的库（称为迷你库）时，库包的维护、扩展和测试是最容易的。在大多数情况下，每个类都应该在自己的迷你库中，除非你有两个类是紧密耦合的情况。</p>
<p>注意：你可能听说过 <code>part</code> 指令，它允许你将一个库分割成多个 Dart 文件。我们建议你避免使用 <code>part</code> 指令，而是创建迷你库。</p>
<p>直接在 <code>lib</code> 下创建一个&quot;主&quot;库文件，<code>lib/&lt;package-name&gt;.dart</code>，导出所有的公共 API。这样用户就可以通过导入一个文件来获得一个库的所有功能。</p>
<p><code>lib</code> 目录也可能包含其他可导入的、非src的库。例如，也许你的主库可以跨平台使用，但是你创建了单独的库，这些库依赖于 <code>dart:io</code> 或者 <code>dart:html</code>。有些包有单独的库，这些库是要用前缀导入的，而主库不是。</p>
<p>让我们来看看一个现实世界中的库包的组织： shelf。<a href="https://github.com/dart-lang/shelf">shelf</a> 包提供了一种使用 Dart 创建 web 服务器的简单方法，它的布局结构是 Dart 库包常用的:</p>
<p><img src="https://dart.dev/assets/libraries/shelf-02e5fd43b660fcef7dbe6a883c40159e0379c8ee2088288ca60ed7dc8781bafd.png" alt="img"></p>
<p>直接在 <code>lib</code> 下，主库文件 <code>shelf.dart</code> 从 <code>lib/src</code> 导出几个文件:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="k">export</span> <span class="s1">&#39;src/cascade.dart&#39;</span><span class="p">;</span>
<span class="k">export</span> <span class="s1">&#39;src/handler.dart&#39;</span><span class="p">;</span>
<span class="k">export</span> <span class="s1">&#39;src/handlers/logger.dart&#39;</span><span class="p">;</span>
<span class="k">export</span> <span class="s1">&#39;src/hijack_exception.dart&#39;</span><span class="p">;</span>
<span class="k">export</span> <span class="s1">&#39;src/middleware.dart&#39;</span><span class="p">;</span>
<span class="k">export</span> <span class="s1">&#39;src/pipeline.dart&#39;</span><span class="p">;</span>
<span class="k">export</span> <span class="s1">&#39;src/request.dart&#39;</span><span class="p">;</span>
<span class="k">export</span> <span class="s1">&#39;src/response.dart&#39;</span><span class="p">;</span>
<span class="k">export</span> <span class="s1">&#39;src/server.dart&#39;</span><span class="p">;</span>
<span class="k">export</span> <span class="s1">&#39;src/server_handler.dart&#39;</span><span class="p">;</span>
</code></pre></div><p>shelf 包还包含一个迷你库： <code>shelf_io</code>。这个适配器处理来自 <code>dart:io</code> 的 <code>HttpRequest</code> 对象。</p>
<p>对网络应用的提示: 为了在使用 <a href="https://dart.dev/tools/dartdevc">dartdevc</a> 开发时获得最佳性能，请将<a href="https://dart.dev/tools/pub/package-layout#implementation-files">实现文件</a>放在 <code>/lib/src</code> 下，而不是放在 <code>/lib</code> 下的其他地方。同时，避免导入 <code>package:package_name/src/...</code> 的文件。</p>
<h2 id="导入库文件">导入库文件</h2>
<p>当从其他包中导入一个库文件时，使用 <code>package:</code> 指令来指定该文件的 URI。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="k">import</span> <span class="s1">&#39;package:utilities/utilities.dart&#39;</span><span class="p">;</span>
</code></pre></div><p>当从自己的包中导入一个库文件时，当两个文件都在 lib 内，或者两个文件都在 lib 外时，使用相对路径。使用 <code>:package</code> 当导入的文件在 lib 内，而导入者在 lib 外时。</p>
<p>下图显示了如何从 lib 和 web 中导入 <code>lib/foo/a.dart</code>。</p>
<p><img src="https://dart.dev/assets/libraries/import-lib-rules-e1777e235dd56aa23f770babcccedb6a12be80af2c3e63065640b889d78be595.png" alt="img"></p>
<h2 id="有条件地导入和导出库文件">有条件地导入和导出库文件</h2>
<p>如果你的库支持多个平台，那么你可能需要有条件地导入或导出库文件。一个常见的用例是一个同时支持 web 和原生平台的库。</p>
<p>要有条件的导入或导出，你需要检查 <code>dart:*</code> 库的存在。下面是一个有条件导出代码的例子，它检查 <code>dart:io</code> 和 <code>dart:html</code> 的存在:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="k">export</span> <span class="s1">&#39;src/hw_none.dart&#39;</span> <span class="err">//</span> <span class="n">Stub</span> <span class="n">implementation</span>
    <span class="n">if</span> <span class="err">(</span><span class="n">dart</span><span class="err">.</span><span class="n">library</span><span class="err">.</span><span class="n">io</span><span class="err">)</span> <span class="s1">&#39;src/hw_io.dart&#39;</span> <span class="err">//</span> <span class="n">dart</span><span class="err">:</span><span class="n">io</span> <span class="n">implementation</span>
    <span class="n">if</span> <span class="err">(</span><span class="n">dart</span><span class="err">.</span><span class="n">library</span><span class="err">.</span><span class="n">html</span><span class="err">)</span> <span class="s1">&#39;src/hw_html.dart&#39;</span><span class="p">;</span> <span class="c1">// dart:html implementation
</span></code></pre></div><p>下面是这段代码的作用。</p>
<ul>
<li>在一个可以使用 <code>dart:io</code> 的应用程序中(例如，一个命令行应用程序)，导出 <code>src/hw_io.dart</code></li>
<li>在一个可以使用 <code>dart:html</code> 的应用程序中(一个 web 应用程序)，导出 <code>src/hw_html.dart</code></li>
<li>否则，导出 <code>src/hw_none.dart</code></li>
</ul>
<p>要有条件地导入一个文件，使用与上面相同的代码，但将 <code>exporrt</code> 改为 <code>import</code>。</p>
<p>注意：有条件的导入或导出只检查库在当前平台上是否可用，而不是检查是否实际导入或使用。</p>
<p>所有有条件导出的库都必须实现相同的 API。例如，这里是 <code>dart:io</code> 的实现:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="k">import</span> <span class="s1">&#39;dart:io&#39;</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">alarm</span><span class="p">([</span><span class="kt">String</span> <span class="n">text</span><span class="p">])</span> <span class="p">{</span>
  <span class="n">stderr</span><span class="p">.</span><span class="n">writeln</span><span class="p">(</span><span class="n">text</span> <span class="o">??</span> <span class="n">message</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">String</span> <span class="kd">get</span> <span class="n">message</span> <span class="o">=&gt;</span> <span class="s1">&#39;Hello World from the VM!&#39;</span><span class="p">;</span>
</code></pre></div><p>这里是默认的实现，它是一个抛出 UnsupportedErrors 的 stub。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="n">alarm</span><span class="p">([</span><span class="kt">String</span> <span class="n">text</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="k">throw</span> <span class="n">UnsupportedError</span><span class="p">(</span><span class="s1">&#39;hw_none alarm&#39;</span><span class="p">);</span>

<span class="kt">String</span> <span class="kd">get</span> <span class="n">message</span> <span class="o">=&gt;</span> <span class="k">throw</span> <span class="n">UnsupportedError</span><span class="p">(</span><span class="s1">&#39;hw_none message&#39;</span><span class="p">);</span>
</code></pre></div><p>在任何平台上，你都可以导入有条件导出代码的库。</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="k">import</span> <span class="s1">&#39;package:hw_mp/hw_mp.dart&#39;</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><h2 id="提供补充文件">提供补充文件</h2>
<p>一个设计良好的库包是很容易测试的。我们建议你使用 <a href="https://github.com/dart-lang/test">test</a> 包来编写测试，将测试代码放在测试包顶部的 <code>test</code> 目录中。</p>
<p>如果你创建了任何旨在供公众使用的命令行工具，请将这些工具放在 <code>bin</code> 目录下，这是公共的。启用从命令行运行工具，使用 <a href="https://dart.dev/tools/pub/cmd/pub-global#activating-a-package">pub global activate</a>。将工具列在 pubspec 的<a href="https://dart.dev/tools/pub/pubspec#executables">可执行文件部分</a>，允许用户直接运行它，而无需调用 <a href="https://dart.dev/tools/pub/cmd/pub-global#running-a-script-using-pub-global-run">pub global run</a>。</p>
<p>如果你包含了一个如何使用你的库的例子，这将会很有帮助。这将被放入软件包顶部的 <code>example</code> 目录中。</p>
<p>你在开发过程中创建的任何工具或可执行文件，如果不是公开使用的，都会进入 <code>tool</code> 目录。</p>
<p>如果你把你的库发布到 pub.dev 站点，其他需要的文件，如 <code>README.md</code> 和 <code>CHANGELOG.md</code>，将在<a href="https://dart.dev/tools/pub/publishing">发布软件包</a>中描述。有关如何组织包目录的更多信息，请参见 <a href="https://dart.dev/tools/pub/package-layout">pub 包布局惯例</a>。</p>
<h2 id="编写库文档">编写库文档</h2>
<p>你可以使用 <a href="https://github.com/dart-lang/dartdoc#dartdoc">dartdoc</a> 工具为你的库生成 API 文档。Dartdoc 解析源码寻找<a href="https://dart.dev/guides/language/effective-dart/documentation#doc-comments">文档注释</a>，其中使用了 <code>///</code> 语法:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="c1">/// The event handler responsible for updating the badge in the UI.
</span><span class="c1"></span><span class="kt">void</span> <span class="n">updateBadge</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div><p>关于生成文档的例子，请看 <a href="https://pub.dev/documentation/shelf/latest">shelf 文档</a>。</p>
<p>注意：要在生成的文档中包含任何库级文档，你必须指定 <code>library</code> 指令。请参阅 <a href="https://github.com/dart-lang/dartdoc/issues/1082">问题 1082</a>。</p>
<h2 id="分发一个开源库">分发一个开源库</h2>
<p>如果你的库是开源的，我们建议在 <a href="https://pub.dev/">pub.dev</a> 站点上分享它。要发布或更新库，请使用 <a href="https://dart.dev/tools/pub/cmd/pub-lish">pub publish</a>，它可以上传您的包并创建或更新其页面。例如，请看 <a href="https://pub.dev/packages/shelf">shelf 包</a>的页面。有关如何准备发布软件包的详细信息，请参见<a href="https://dart.dev/tools/pub/publishing">发布包</a>。</p>
<p>pub.dev 站点不仅托管您的软件包，而且还生成和托管您软件包的 API 参考文档。最新生成的文档的链接在软件包的 <strong>About</strong> 框中；例如，请看 shelf 包的 <a href="https://pub.dev/documentation/shelf">API 文档</a>。到以前版本的文档的链接在软件包页面的版本选项卡中。</p>
<p>要确保你的软件包的 API 文档在 pub.dev 网站上看起来不错，请按照以下步骤进行。</p>
<ul>
<li>在发布你的软件包之前，运行 <a href="https://github.com/dart-lang/dartdoc#dartdoc">dartdoc</a> 工具，以确保你的 docs 成功生成，并且看起来符合预期。</li>
<li>发布软件包后，检查 <strong>Versions</strong> 选项卡以确保文档成功生成。</li>
<li>如果文档根本没有生成，点击 <strong>Verrsions</strong> 选项卡中的 <strong>failed</strong>，查看 dartdoc 的输出。</li>
</ul>
<h2 id="资源">资源</h2>
<p>使用以下资源了解更多关于库包的信息。</p>
<ul>
<li><a href="https://dart.dev/guides/language/language-tour">语言之旅</a>中的<a href="https://dart.dev/guides/language/language-tour#libraries-and-visibility">库和可见性</a>包括使用库文件。</li>
<li><a href="https://dart.dev/guides/packages">包</a>文档很有用，特别是<a href="https://dart.dev/tools/pub/package-layout">包的布局约定</a>。</li>
<li><a href="https://dart.dev/guides/libraries/private-files">不应提交的内容</a>涵盖了哪些不应该被检查到源代码库中。</li>
<li><a href="https://github.com/dart-lang">dart-lang</a> 组织下的较新的库包倾向于展示最佳实践。可以考虑研究这些例子：<a href="https://github.com/dart-lang/dart_style">dart_style</a>、<a href="https://github.com/dart-lang/path">path</a>、<a href="https://github.com/dart-lang/shelf">shelf</a>、<a href="https://github.com/dart-lang/source_gen">source_gen</a> 和 <a href="https://github.com/dart-lang/test">test</a>。</li>
</ul>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/programming" term="programming" label="programming" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flutter" term="flutter" label="flutter" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/packages" term="packages" label="packages" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[发布包]]></title>
            <link href="https://ohmyweekly.github.io/notes/publishing-packages/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/creating-packages/?utm_source=atom_feed" rel="related" type="text/html" title="创建包" />
                <link href="https://ohmyweekly.github.io/notes/how-to-use-packages/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用包" />
                <link href="https://ohmyweekly.github.io/notes/commonly-used-packages/?utm_source=atom_feed" rel="related" type="text/html" title="常用的包" />
                <link href="https://ohmyweekly.github.io/notes/write-http-clients/?utm_source=atom_feed" rel="related" type="text/html" title="编写HTTP客户端和服务器" />
                <link href="https://ohmyweekly.github.io/notes/write-your-first-flutter-app/?utm_source=atom_feed" rel="related" type="text/html" title="编写你的第一个 Flutter 应用，第一部分" />
            
                <id>https://ohmyweekly.github.io/notes/publishing-packages/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-06-30T00:00:00+08:00</published>
            <updated>2020-06-30T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Publishing packages</blockquote><p><a href="https://dart.dev/guides/packages">pub 软件包管理器</a>不仅仅是用来使用别人的软件包。它还允许你与世界分享你的软件包。如果您有一个有用的项目，并且您希望其他人能够使用它，请使用 <code>pub publish</code> 命令。</p>
<p>注意: 如果要发布到 pub.dev 以外的其他位置，或者要防止在任何地方发布，请使用 <a href="https://dart.dev/tools/pub/pubspec">pubspec</a> 中定义的  <code>publish_to</code> 字段。</p>
<h2 id="发布是永远的">发布是永远的</h2>
<p>请记住，发布是永远的。只要你发布你的包，用户就可以依赖它。一旦他们开始这样做，删除包就会破坏他们的包。为了避免这种情况，<a href="https://pub.dev/policy">pub.dev 政策</a>不允许取消发布软件包，除非是极少数情况。</p>
<p>你可以随时上传你的包的新版本，但旧的包将继续为那些还没有准备好升级的用户提供服务。</p>
<p>对于已经发布的包，如果不再相关或正在维护，你可以<a href="https://dart.dev/tools/pub/publishing#discontinue">将其标记为停止发布</a>。</p>
<h2 id="准备发布">准备发布</h2>
<p>当发布一个软件包时，遵循 <a href="https://dart.dev/tools/pub/pubspec">pubspec 格式</a>和<a href="https://dart.dev/tools/pub/package-layout">包布局惯例</a>是很重要的。其中有些是必须的，以便其他人能够使用你的软件包。另一些则是为了帮助用户更容易理解和使用您的软件包而提出的建议。在这两种情况下，pub 都会尝试帮助你，指出哪些改变会帮助你的软件包在 Dart 生态系统中发挥得更好。上传包有一些额外的要求:</p>
<ul>
<li>
<p>你必须包含一个包含<a href="https://opensource.org/">开源许可证</a>的 <code>LICENSE</code> 文件。我们推荐 <a href="https://opensource.org/licenses/BSD-3-Clause">BSD 许可证</a>，这是 Dart 自己使用的。你也必须有合法的权利来重新发布你上传的任何东西作为你的包的一部分。</p>
</li>
<li>
<p>你的软件包在经过 gzip 压缩后必须小于 10 MB。如果太大，可以考虑将其分割成多个包，或者减少包含的资源或例子的数量。</p>
</li>
<li>
<p>你的包应该只依赖托管的依赖项(来自默认的 pub 包服务器)和 SDK 依赖项(<code>sdk: flutter</code>)。这些限制确保了你的包的依赖性不会在未来变得不可用。</p>
</li>
<li>
<p>您必须有一个 <a href="https://support.google.com/accounts/answer/27441">Google 帐户</a>，pub 用来管理包的上传权限。您的 Google 账户可以与 Gmail 地址或任何其他电子邮件地址关联。</p>
</li>
</ul>
<p>注意：除非您使用<a href="https://dart.dev/tools/pub/verified-publishers">已验证的发布者</a>发布，否则 pub.dev 会显示与您的 Google 帐户关联的电子邮件地址。</p>
<h3 id="重要文件">重要文件</h3>
<p>Pub 使用一些文件的内容为你的包创建一个页面，地址是 <code>pub.dev/packages/&lt;your_package&gt;</code>。以下是影响你的包的页面外观的文件。</p>
<ul>
<li>README.md: <code>README.md</code> 文件是你的包页面中的主要内容。该文件的内容以 <a href="https://pub.dev/packages/markdown">Markdown</a> 的形式呈现。</li>
<li>CHANGELOG.md：<code>CHANGELOG.md</code> 文件是你的包页面中的主要内容。你的包的 <code>CHANGELOG.md</code> 文件，如果找到的话，也会在你的包页面的一个标签中显示，这样开发者就可以直接从 pub.dev 中读取它。该文件的内容会以 <a href="https://pub.dev/packages/markdown">Markdown</a> 的形式呈现。</li>
<li>pubspec: 你的包的 <code>pubspec.yaml</code> 文件用来在你的包的页面右侧填写关于你的包的详细信息，比如它的描述、主页等。</li>
</ul>
<h3 id="使用经过验证的发布者的优势">使用经过验证的发布者的优势</h3>
<p>您可以使用已验证的发布者（推荐）或独立的谷歌账户发布软件包。使用经过验证的发布者有以下优势。</p>
<ul>
<li>您的包的消费者知道发布者的域名已经被验证。</li>
<li>您可以避免让 pub.dev 显示您的个人电子邮件地址。取而代之的是，pub.dev会显示发布者的域名和联系地址。</li>
<li>经验证的发布者徽章 pub.dev 经验证的发布者标识会在搜索页面和单个软件包页面上显示在您的软件包名称旁边。</li>
</ul>
<h3 id="创建一个验证过的发布者">创建一个验证过的发布者</h3>
<p>要创建一个已验证的发布者，请按照以下步骤进行。</p>
<ol>
<li>进入 <a href="https://pub.dev/">pub.dev</a>。</li>
<li>使用 Google 账户登录 pub.dev。</li>
<li>在右上角的用户菜单中，选择创建发布者。</li>
<li>输入您要与您的发布者相关联的域名(例如，<code>dart.dev</code>)，然后单击&quot;创建发布者&quot;。</li>
<li>在确认对话框中，选择&quot;确定&quot;。</li>
<li>如果提示，完成验证流程，这将打开 <a href="https://search.google.com/search-console/about">Google 搜索控制台</a>。</li>
</ol>
<ul>
<li>在添加 DNS 记录时，可能需要几个小时后，搜索控制台才会反映出变化。</li>
<li>验证流程完成后，返回步骤4。</li>
</ul>
<h2 id="发布你的包">发布你的包</h2>
<p>使用 <a href="https://dart.dev/tools/pub/cmd/pub-lish">pub publish</a> 命令来首次发布您的软件包，或将其更新到新版本。</p>
<h3 id="执行-dry-run">执行 dry run</h3>
<p>为了测试 <code>pub publish</code> 的工作情况，你可以进行一次 dry run:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ pub publish --dry-run
</code></pre></div><p>Pub 会确保你的软件包遵循 <a href="https://dart.dev/tools/pub/pubspec">pubspec 格式</a>和<a href="https://dart.dev/tools/pub/package-layout">包布局约定</a>，然后将你的软件包上传到 <a href="https://pub.dev/">pub.dev</a>。Pub 还会向你展示它打算发布的所有文件。下面是一个发布名为 <code>transmogrify</code> 的软件包的例子:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="l">Publishing transmogrify 1.0.0</span><span class="w">
</span><span class="w">    </span><span class="l">.gitignore</span><span class="w">
</span><span class="w">    </span><span class="l">CHANGELOG.md</span><span class="w">
</span><span class="w">    </span><span class="l">README.md</span><span class="w">
</span><span class="w">    </span><span class="l">lib</span><span class="w">
</span><span class="w">        </span><span class="l">transmogrify.dart</span><span class="w">
</span><span class="w">        </span><span class="l">src</span><span class="w">
</span><span class="w">            </span><span class="l">transmogrifier.dart</span><span class="w">
</span><span class="w">            </span><span class="l">transmogrification.dart</span><span class="w">
</span><span class="w">    </span><span class="l">pubspec.yaml</span><span class="w">
</span><span class="w">    </span><span class="l">test</span><span class="w">
</span><span class="w">        </span><span class="l">transmogrify_test.dart</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="l">Package has 0 warnings.</span><span class="w">
</span></code></pre></div><h3 id="发布">发布</h3>
<p>当你准备好发布你的包时，请删除 <code>--dry-run</code> 参数:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ pub publish
</code></pre></div><p>注意: pub 命令目前不支持直接将新软件包发布到已验证的发布者。作为一个临时的变通方法，可以将新的软件包发布到Google账户，然后将包<a href="https://dart.dev/tools/pub/publishing#transferring-a-package-to-a-verified-publisher">转移到发布者</a>。</p>
<p>一旦软件包被转移到发布者，你就可以使用 <code>pub publish</code> 更新软件包。</p>
<p>当你的包成功上传到 pub.dev 后，任何 pub 用户都可以下载它或在他们的项目中依赖它。例如，如果你刚刚发布了 1.0.0 版本的 <code>transmogrify</code> 包，那么另一个 Dart 开发者可以在他们的 <code>pubspec.yaml</code> 中添加它作为依赖:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">dependencies</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">transmogrify</span><span class="p">:</span><span class="w"> </span><span class="l">^1.0.0</span><span class="w">
</span></code></pre></div><h3 id="将软件包传输给已验证的发布者">将软件包传输给已验证的发布者</h3>
<p>要将一个软件包转移到已验证的发布者，您必须是该软件包的<a href="https://dart.dev/tools/pub/publishing#uploaders">上传者</a>和已验证发布者的管理员。</p>
<p>注意：这个过程是不可逆的。一旦你将一个软件包转移到一个发布者，你不能将它转移回个人账户。</p>
<p>以下是如何将软件包转移到已验证的发布者:</p>
<ol>
<li>用一个被列为软件包上传者的 Google 账户登录到 <a href="https://pub.dev/">pub.dev</a>。</li>
<li>进入软件包的详细信息页面(例如，<code>https://pub.dev/packages/http</code>)。</li>
<li>选择&quot;管理&quot;选项卡。</li>
<li>输入发布者的名称，然后单击&quot;传输到发布者&quot;。</li>
</ol>
<h3 id="哪些文件会被发布">哪些文件会被发布？</h3>
<p>您的软件包中的<strong>所有</strong>文件都包含在已发布的软件包中，但有以下例外:</p>
<ul>
<li>任何包的目录。</li>
<li>您的软件包的 <a href="https://dart.dev/tools/pub/glossary#lockfile">lockfile</a> 文件。</li>
<li>如果你没有使用 Git，所有隐藏的文件（也就是名字以 <code>.</code> 开头的文件）。</li>
<li>如果使用 Git，则是所有被 <code>.gitignore</code> 文件忽略的文件。</li>
</ul>
<p>请确保删除任何你不想包含的文件(或将它们添加到 <code>.gitignore</code> 中)。 <code>pub publish</code> 在上传你的包之前列出了它要发布的所有文件，所以在完成上传之前要仔细检查列表。</p>
<h2 id="上传者">上传者</h2>
<p>谁发布了软件包的第一个版本，谁就会自动成为第一个也是唯一一个被授权上传该软件包其他版本的人。要允许或不允许其他人上传版本，请使用 <a href="https://dart.dev/tools/pub/cmd/pub-uploader">pub uploader</a> 命令或将软件包转移到<a href="https://dart.dev/tools/pub/verified-publishers">已验证的发布者</a>那里。</p>
<p>如果一个软件包有一个经过验证的发布者，那么该软件包的 pub.dev 页面会显示发布者的域名。否则，该页面将显示该软件包的授权上传者的电子邮件地址。</p>
<h2 id="发布预发包">发布预发包</h2>
<p>当你在做一个包的时候，考虑把它作为一个预发布。当以下任何一种情况发生时，预发布都是有用的。</p>
<ul>
<li>你正在积极开发软件包的下一个主要版本。</li>
<li>你想为软件包的下一个发行候选版本招募测试者。</li>
<li>该包依赖于 Dart 或 Flutter SDK 的不稳定版本。</li>
</ul>
<p>正如在<a href="https://semver.org/spec/v2.0.0-rc.1.html">语义版本化</a>中所描述的那样，为了使一个版本的预发布，你要给版本附加一个后缀。例如，要对 <code>2.0.0</code> 版本进行预发布，你可以使用 <code>2.0.0-dev.1</code> 版本。以后，当你发布 <code>2.0.0</code> 版本时，它将优先于所有 <code>2.0.0-XXX</code> 预发布版本。</p>
<p>因为 pub 更倾向于在可用的时候发布稳定版，所以一个预发布包的用户可能需要改变他们的依赖约束。例如，如果用户想要测试 2.1 版本的预发布包，那么他们可以指定 <code>^2.1.0-dev.1</code>，而不是 <code>^2.0.0</code> 或 <code>^2.1.0</code>。</p>
<p>注意: 如果依赖关系图中的稳定包依赖于一个 prerelease，那么 pub 会选择那个 prerelease 而不是稳定版本。</p>
<p>当一个 prerelease 被发布到 pub.dev 时，软件包页面会同时显示到 prerelease 和稳定版的链接。prerelease 不会影响分析得分，不会出现在搜索结果中，也不会替换包的 <code>README.md</code> 和文档。</p>
<h2 id="将软件包标记为已停产的软件包">将软件包标记为已停产的软件包</h2>
<p>尽管软件包总是保持发布，但向开发者发出信号，表明一个软件包不再被积极维护，是很有用的。为此，您可以将一个软件包标记为 <code>discontinued</code>。一个已停用的软件包仍然可以在 pub.dev 上发布和查看，但它有一个清晰的 DISCONTINUED 徽章，并且不会出现在 pub.dev 的搜索结果中。</p>
<p>要将软件包标记为已停用，请使用该软件包的上传者或已验证的发布者管理员的 Google 帐户登录 pub.dev。然后使用单个软件包的管理选项卡将该软件包标记为已停用。</p>
<h2 id="资源">资源</h2>
<p>有关更多信息，请参见以下 pub 命令的参考页面。</p>
<ul>
<li><a href="https://dart.dev/tools/pub/cmd/pub-lish">pub publish</a></li>
<li><a href="https://dart.dev/tools/pub/cmd/pub-uploader">pub uploader</a></li>
</ul>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/programming" term="programming" label="programming" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flutter" term="flutter" label="flutter" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/packages" term="packages" label="packages" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[如何使用包]]></title>
            <link href="https://ohmyweekly.github.io/notes/how-to-use-packages/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/commonly-used-packages/?utm_source=atom_feed" rel="related" type="text/html" title="常用的包" />
                <link href="https://ohmyweekly.github.io/notes/write-your-first-flutter-app/?utm_source=atom_feed" rel="related" type="text/html" title="编写你的第一个 Flutter 应用，第一部分" />
                <link href="https://ohmyweekly.github.io/notes/write-your-first-flutter-app-part-two/?utm_source=atom_feed" rel="related" type="text/html" title="编写你的第一个 Flutter 应用，第二部分" />
            
                <id>https://ohmyweekly.github.io/notes/how-to-use-packages/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-06-29T00:00:00+08:00</published>
            <updated>2020-06-29T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Dart 包管理工具 - pub</blockquote><p>Dart 生态系统使用包来管理共享软件，如库和工具。要获得 Dart 包，你可以使用 <code>pub</code> 包管理器。你可以在 <a href="https://pub.dev/">pub.dev</a> 网站上找到公开的包，也可以从本地文件系统或其他地方加载包，比如 Git 仓库。无论你的包来自哪里，pub 都会管理版本依赖关系，帮助你获得相互之间以及与 SDK 版本兼容的包版本。</p>
<p>大多数精通 Dart 的 <a href="https://dart.dev/tools#ides-and-editors">IDE</a> 都提供了对 pub 的支持，包括创建、下载、更新和发布包。或者你可以<a href="https://dart.dev/tools/pub/cmd">在命令行中使用 pub</a>。</p>
<p>至少，一个 Dart 包是一个包含 <a href="https://dart.dev/tools/pub/pubspec">pubspec 文件</a>的目录。pubspec 包含一些关于包的元数据。此外，一个包可以包含依赖关系(在 pubspec 中列出)，Dart 库，应用程序，资源，测试，图像和例子。</p>
<p>要使用一个包，请执行以下操作:</p>
<ul>
<li>创建一个 pubspec(一个名为 <code>pubspec.yaml</code> 的文件，它列出了软件包的依赖关系，并包含其他元数据，如版本号)。</li>
<li>使用 <code>pub</code> 来获取你的包的依赖关系。</li>
<li>如果你的 Dart 代码依赖于软件包中的一个库，则导入该库。</li>
</ul>
<h2 id="创建一个-pubspec">创建一个 pubspec</h2>
<p>pubspec 是一个名为 <code>pubspec.yaml</code> 的文件，它位于你的应用程序的顶级目录中。最简单的 pubspec 只列出了包名:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="nl">name:</span> <span class="n">my_app</span>
</code></pre></div><p>下面是一个 pubspec 的例子，它声明了两个包(<code>js</code> 和 <code>intl</code>)的依赖关系，这两个包都托管在 pub.dev 站点上:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="nl">name:</span> <span class="n">my_app</span>
<span class="nl">dependencies:</span>
  <span class="nl">js:</span> <span class="o">^</span><span class="m">0.6</span><span class="p">.</span><span class="m">0</span>
  <span class="nl">intl:</span> <span class="o">^</span><span class="m">0.15</span><span class="p">.</span><span class="m">8</span>
</code></pre></div><p>关于创建 pubspec 的详细信息，请参见 <a href="https://dart.dev/tools/pub/pubspec">pubspec 文档</a>和你要使用的包的文档。</p>
<h2 id="获取软件包">获取软件包</h2>
<p>一旦你有了 pubspec，你就可以从你的应用程序的顶级目录中运行 <code>pub get</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ <span class="nb">cd</span> &lt;path-to-my_app&gt;
$ pub get
</code></pre></div><p>这个过程被称为获取依赖关系。</p>
<p><code>pub get</code> 命令可以确定您的应用程序依赖于哪些软件包，并将它们放在中央<a href="https://dart.dev/tools/pub/glossary#system-cache">系统缓存</a>中。如果您的应用程序依赖于已发布的包，pub 会从 <a href="https://pub.dev/">pub.dev</a> 站点下载该包。对于  <a href="https://dart.dev/tools/pub/dependencies#git-packages">Git 依赖</a>，pub 会克隆 Git 仓库。还包括了过渡性依赖。例如，如果 <code>js</code> 包依赖于 <code>test</code> 包，<code>pub</code> 会同时抓取 <code>js</code> 包和 <code>test</code> 包。</p>
<p>Pub 会创建一个 <code>.packages</code> 文件(在你的应用程序的顶层目录下)，将你的应用程序所依赖的每个包名映射到系统缓存中的对应包。</p>
<h2 id="从包中导入库">从包中导入库</h2>
<p>要导入在包中找到的库，使用 <code>package:</code> 前缀:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="k">import</span> <span class="s1">&#39;package:js/js.dart&#39;</span> <span class="k">as</span> <span class="n">js</span><span class="p">;</span>
<span class="k">import</span> <span class="s1">&#39;package:intl/intl.dart&#39;</span><span class="p">;</span>
</code></pre></div><p>Dart 运行时在 <code>package:</code> 之后的所有内容都会在应用程序的 <code>.package</code> 文件中进行查找。</p>
<p>你也可以使用这种风格从你自己的包中导入库。比方说，<code>transmogrify</code> 包的布局如下:</p>
<div class="highlight"><pre class="chroma"><code class="language-txt" data-lang="txt">transmogrify/
  lib/
    transmogrify.dart
    parser.dart
  test/
    parser/
      parser_test.dart
</code></pre></div><p><code>parser_test.dart</code> 文件可以这样导入 <code>parser.dart</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="k">import</span> <span class="s1">&#39;package:transmogrify/parser.dart&#39;</span><span class="p">;</span>
</code></pre></div><h2 id="升级依赖关系">升级依赖关系</h2>
<p>当你第一次为你的软件包获取一个新的依赖关系时，pub 会下载与你的其他依赖关系兼容的最新版本。然后，它通过创建一个 <strong>lockfile</strong> 锁文件来锁定您的软件包，使其始终使用该版本。这是一个名为 <code>pubspec.lock</code> 的文件，由 pub 创建并存储在 pubspec 的旁边。它列出了您的软件包所使用的每个依赖关系的特定版本 (即时的和过渡的)。</p>
<p>如果你的包是一个应用程序包，你应该把这个文件检查到<a href="https://dart.dev/guides/libraries/private-files">源代码控制</a>中。这样，在你的应用程序上工作的每个人都会使用所有包的相同版本。在 lockfile 文件中检查也可以确保你部署的应用使用相同版本的代码。</p>
<p>当你准备好将你的依赖项升级到最新版本时，使用 <a href="https://dart.dev/tools/pub/cmd/pub-upgrade">pub upgrade</a> 命令:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">$</span> <span class="n">pub</span> <span class="n">upgrade</span>
</code></pre></div><p><code>pub upgrade</code> 命令告诉 pub 使用你的包的依赖关系的最新版本来重新生成 lockfile 文件。如果你只想升级一个依赖关系，你可以指定要升级的软件包:</p>
<div class="highlight"><pre class="chroma"><code class="language-dart" data-lang="dart"><span class="n">$</span> <span class="n">pub</span> <span class="n">upgrade</span> <span class="n">transmogrify</span>
</code></pre></div><p>该命令将 <code>transmogrify</code> 升级到最新版本，但其他一切都保持不变。</p>
<p>由于 pubspec 中有冲突的版本限制，<a href="https://dart.dev/tools/pub/cmd/pub-upgrade">pub upgrade</a> 命令并不能总是将每个软件包升级到最新版本。要识别需要编辑 pubspec 的过期软件包，请使用 <a href="https://dart.dev/tools/pub/cmd/pub-outdated">pub outdated</a>。</p>
<h2 id="更多信息">更多信息</h2>
<p>下面的页面有更多关于软件包和 pub 包管理器的信息。</p>
<p>如何使用</p>
<ul>
<li><a href="https://dart.dev/guides/libraries/create-library-packages">创建包</a></li>
<li><a href="https://dart.dev/tools/pub/publishing">发布包</a></li>
</ul>
<p>参考</p>
<ul>
<li><a href="https://dart.dev/tools/pub/dependencies">Pub 依赖</a></li>
<li><a href="https://dart.dev/tools/pub/environment-variables">Pub 环境变量</a></li>
<li><a href="https://dart.dev/tools/pub/glossary">Pub 词汇表</a></li>
<li><a href="https://dart.dev/tools/pub/package-layout">Pub 包布局约定</a></li>
<li><a href="https://dart.dev/tools/pub/versioning">Pub 版本哲学</a></li>
<li><a href="https://dart.dev/tools/pub/pubspec">Pubspec 格式化</a></li>
</ul>
<p>Pub 命令</p>
<p><code>pub</code> 工具提供了以下命令:</p>
<ul>
<li><a href="https://dart.dev/tools/pub/cmd/pub-cache">pub cache</a></li>
<li><a href="https://dart.dev/tools/pub/cmd/pub-deps">pub deps</a></li>
<li><a href="https://dart.dev/tools/pub/cmd/pub-downgrade">pub downgrade</a></li>
<li><a href="https://dart.dev/tools/pub/cmd/pub-get">pub get</a></li>
<li><a href="https://dart.dev/tools/pub/cmd/pub-global">pub global</a></li>
<li><a href="https://dart.dev/tools/pub/cmd/pub-outdated">pub outdated</a></li>
<li><a href="https://dart.dev/tools/pub/cmd/pub-lish">pub publish</a></li>
<li><a href="https://dart.dev/tools/pub/cmd/pub-run">pub run</a></li>
<li><a href="https://dart.dev/tools/pub/cmd/pub-upgrade">pub upgrade</a></li>
<li><a href="https://dart.dev/tools/pub/cmd/pub-uploader">pub uploader</a></li>
</ul>
<p>有关所有 pub 命令的概述，请参阅 <a href="https://dart.dev/tools/pub/cmd">pub 工具文档</a>。</p>
<p>疑难解答</p>
<p><a href="https://dart.dev/tools/pub/troubleshoot">故障排除 pub</a> 提供了使用 pub 时可能遇到的问题的解决方案。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/programming" term="programming" label="programming" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flutter" term="flutter" label="flutter" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/packages" term="packages" label="packages" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[常用的包]]></title>
            <link href="https://ohmyweekly.github.io/notes/commonly-used-packages/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/how-to-use-packages/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用包" />
                <link href="https://ohmyweekly.github.io/notes/write-your-first-flutter-app/?utm_source=atom_feed" rel="related" type="text/html" title="编写你的第一个 Flutter 应用，第一部分" />
                <link href="https://ohmyweekly.github.io/notes/write-your-first-flutter-app-part-two/?utm_source=atom_feed" rel="related" type="text/html" title="编写你的第一个 Flutter 应用，第二部分" />
            
                <id>https://ohmyweekly.github.io/notes/commonly-used-packages/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-06-29T00:00:00+08:00</published>
            <updated>2020-06-29T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Commonly used packages</blockquote><p>本页列出了一些  Dart 开发者发布的最流行和最有用的<a href="https://dart.dev/guides/packages">包</a>。要找到更多的软件包&ndash;也可以搜索<a href="https://dart.dev/guides/libraries">核心库</a>&ndash;请使用 <a href="https://pub.dev/">pub.dev</a> 网站。</p>
<p>常用的软件包可分为三类:</p>
<ul>
<li><a href="https://dart.dev/guides/libraries/useful-libraries#general-purpose-packages">通用包</a></li>
<li><a href="https://dart.dev/guides/libraries/useful-libraries#packages-that-correspond-to-sdk-libraries">扩展 Dart 核心库的包</a></li>
<li><a href="https://dart.dev/guides/libraries/useful-libraries#specialized-packages">特定的包</a></li>
</ul>
<h2 id="通用包">通用包</h2>
<p>以下包对各种项目都很有用:</p>
<table>
<thead>
<tr>
<th style="text-align:left">包</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">常用的 API</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/archive">archive</a></td>
<td style="text-align:left">对各种档案和压缩格式进行编码和解码。</td>
<td style="text-align:left">Archive, ArchiveFile, TarEncoder, TarDecoder, ZipEncoder, ZipDecoder</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/characters">characters</a></td>
<td style="text-align:left">对用户感知的字符进行字符串操作(Unicode 字符簇)</td>
<td style="text-align:left">String.characters, Characters, CharacterRange</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/http">http</a></td>
<td style="text-align:left">一组高级的函数和类，使其易于消费 HTTP 资源</td>
<td style="text-align:left">delete(), get(), post(), read()</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/intl">intl</a></td>
<td style="text-align:left">国际化和本地化设施，支持复数和性别、日期和数字格式化和解析以及双向文本</td>
<td style="text-align:left">Bidi, DateFormat, MicroMoney, TextDirection</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/json_serializable">json_serializable</a></td>
<td style="text-align:left">一个易于使用的代码生成包。更多信息，请参阅 <a href="https://dart.dev/guides/json">JSON 支持</a></td>
<td style="text-align:left">@JsonSerializable</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/logging">logging</a></td>
<td style="text-align:left">一个可配置的机制，为你的应用程序添加消息记录</td>
<td style="text-align:left">LoggerHandler, Level, LogRecord</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/mockito">mockito</a></td>
<td style="text-align:left">一个在测试中模拟对象的流行框架。如果你正在编写依赖注入的测试，特别有用。与 <a href="https://pub.dev/packages/test">test</a> 包一起使用</td>
<td style="text-align:left">Answering, Expectation, Verification</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/path">path</a></td>
<td style="text-align:left">操作不同类型路径的常用操作。更多信息，请参见<a href="https://news.dartlang.org/2016/06/unboxing-packages-path.html">拆包: path</a></td>
<td style="text-align:left">absolute(), basename(), extension(), join(), normalize(), relative(), split()</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/quiver">quiver</a></td>
<td style="text-align:left">实用工具，使 Dart 核心库的使用更加方便。Quiver 提供额外支持的一些库包括 async、cache、collection、core、iterables、pattern 和 测试</td>
<td style="text-align:left">CountdownTimer (quiver.async); MapCache (quiver.cache); MultiMap, TreeSet (quiver.collection); EnumerateIterable (quiver.iterables); center(), compareIgnoreCase(), isWhiteSpace() (quiver.strings)</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/shelf">shelf</a></td>
<td style="text-align:left">Dart 的 Web 服务器中间件。Shelf 使它能轻松地创建和组成 Web 服务器，以及 Web 服务器的一部分</td>
<td style="text-align:left">Cascade, Pipeline, Request, Response, Server</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/stack_trace">stack_trace</a></td>
<td style="text-align:left">用于解析、检查和处理由底层 Dart 实现产生的堆栈痕迹的方法。还提供了以比原生 StackTrace 实现更可读的格式生成堆栈跟踪的字符串表示的函数,  更多信息，请参见<a href="https://news.dartlang.org/2016/01/unboxing-packages-stacktrace.html">拆包: stack_trace</a></td>
<td style="text-align:left">Trace.current(), Trace.format(), Trace.from()</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/stagehand">stagehand</a></td>
<td style="text-align:left">一个 Dart 项目生成器。当你创建一个新的应用程序时，WebStorm 和 IntelliJ 使用 Stagehand 模板，但你也可以从命令行使用模板</td>
<td style="text-align:left">一般通过 IDE 或 <code>stagehand</code> 命令来使用</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/test">test</a></td>
<td style="text-align:left">在 Dart 中编写和运行测试的标准方法</td>
<td style="text-align:left">expect(), group(), test()</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/yaml">yaml</a></td>
<td style="text-align:left">YAML 解析器</td>
<td style="text-align:left">loadYaml(), loadYamlStream()</td>
</tr>
</tbody>
</table>
<h2 id="扩展-dart-核心库的包">扩展 Dart 核心库的包</h2>
<p>以下每个包都建立在一个<a href="https://dart.dev/guides/libraries">核心库</a>的基础上，增加了功能并填补了缺失的功能:</p>
<table>
<thead>
<tr>
<th style="text-align:left">包</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">常用的 API</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/async">async</a></td>
<td style="text-align:left">在 dart:async 的基础上进行了扩展，增加了实用类来处理异步计算。更多信息，请参见<a href="https://news.dartlang.org/2016/03/unboxing-packages-async-part-1.html">拆包: async 第1部分</a>、<a href="https://news.dartlang.org/2016/03/unboxing-packages-async-part-2.html">第2部分</a>和<a href="https://news.dartlang.org/2016/04/unboxing-packages-async-part-3.html">第3部分</a></td>
<td style="text-align:left">AsyncMemoizer, CancelableOperation, FutureGroup, LazyStream, Result, StreamCompleter, StreamGroup, StreamSplitter</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/collection">collection</a></td>
<td style="text-align:left">在 dart:collection 的基础上进行了扩展，增加了实用函数和类，使处理集合的工作变得更加容易。更多信息，请看<a href="https://news.dartlang.org/2016/01/unboxing-packages-collection.html">拆包：collection</a></td>
<td style="text-align:left">Equality, CanonicalizedMap, MapKeySet, MapValueSet, PriorityQueue, QueueList</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/convert">convert</a></td>
<td style="text-align:left">在 dart:convert 的基础上，增加了编码器和解码器，用于在不同的数据表现形式之间进行转换。其中一种数据表示方式是百分比编码，也被称为 URL 编码</td>
<td style="text-align:left">HexDecoder, PercentDecoder</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pub.dev/packages/io">io</a></td>
<td style="text-align:left">包含两个库，ansi和io，以简化对文件、标准流和进程的处理。使用 ansi 库可以自定义终端输出。io 库有处理进程、stdin 和文件复制的 API</td>
<td style="text-align:left">copyPath(), isExecutable(), ExitCode, ProcessManager, sharedStdIn</td>
</tr>
</tbody>
</table>
<h2 id="专用包">专用包</h2>
<p>下面是一些寻找比较专业的包的技巧，比如手机的包(Flutter)和网页开发的包。</p>
<h3 id="flutter-包">Flutter 包</h3>
<p>请看 Flutter 网站上的<a href="https://flutter.dev/docs/development/packages-and-plugins/using-packages">使用包</a>。或者使用 pub.dev 网站<a href="https://pub.dev/flutter">搜索 Flutter 包</a>。</p>
<h3 id="网络包">网络包</h3>
<p>参见<a href="https://dart.dev/web/libraries">网络库和包</a>。或者使用 pub.dev 站点<a href="https://pub.dev/web">搜索 web 包</a>。</p>
<h3 id="命令行和服务器软件包">命令行和服务器软件包</h3>
<p>参见<a href="https://dart.dev/server/libraries">命令行和服务器库和包</a>。或者使用 pub.dev 站点<a href="https://pub.dev/">搜索其他包</a>。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/programming" term="programming" label="programming" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flutter" term="flutter" label="flutter" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/packages" term="packages" label="packages" />
                            
                        
                    
                
            
        </entry>
    
</feed>
