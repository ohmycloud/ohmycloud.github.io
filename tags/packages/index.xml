<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    packages on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/tags/packages/</link>
        <description>Recent content  in packages
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Thu, 15 Apr 2021 20:34:16 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/tags/packages/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>创建包</title>
                <link>https://ohmyweekly.github.io/notes/creating-packages/</link>
                
                
                <description>&lt;blockquote&gt;Creating packages&lt;/blockquote&gt;&lt;p&gt;Dart 生态系统使用&lt;a href=&#34;https://dart.dev/guides/packages&#34;&gt;包&lt;/a&gt;来共享软件，如库和工具。本页告诉你如何创建一个包，重点是最常见的一种包，&lt;a href=&#34;https://dart.dev/tools/pub/glossary#library-package&#34;&gt;库包&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;是什么造就了一个库包&#34;&gt;是什么造就了一个库包&lt;/h2&gt;
&lt;p&gt;下图是最简单的库包的布局:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dart.dev/assets/libraries/simple-lib2-81ebdc20fdb53d3abbc4364956141eb0f6f8f275d1636064fc3e1db959b93c1a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个库的最低要求是&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pubspec 文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;库的 &lt;code&gt;pubspec.yaml&lt;/code&gt; 文件和应用程序包的文件是一样的-没有特别的名称来表示这个包是一个库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lib 目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正如你所期望的那样，库代码存在于 &lt;code&gt;lib&lt;/code&gt; 目录下，对其他包是公开的。你可以根据需要在 &lt;code&gt;lib&lt;/code&gt; 下创建任何层次结构。按照惯例，实现代码被放在 &lt;code&gt;lib/src&lt;/code&gt; 下。&lt;code&gt;lib/src&lt;/code&gt; 下的代码被认为是私有的；其他包不应该需要导入 &lt;code&gt;src/...&lt;/code&gt;。要使 &lt;code&gt;lib/src&lt;/code&gt; 下的 API 公开，您可以从直接位于 &lt;code&gt;lib&lt;/code&gt; 下的文件导出 &lt;code&gt;lib/src&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;注意：当没有指定 &lt;code&gt;library&lt;/code&gt; 指令时，会根据每个库的路径和文件名为其生成一个唯一的标签。因此，我们建议您从代码中省略 &lt;code&gt;library&lt;/code&gt; 指令，除非您计划&lt;a href=&#34;https://dart.dev/guides/libraries/create-library-packages#documenting-a-library&#34;&gt;生成库级文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;组织一个库包&#34;&gt;组织一个库包&lt;/h2&gt;
&lt;p&gt;当你创建小的、单独的库（称为迷你库）时，库包的维护、扩展和测试是最容易的。在大多数情况下，每个类都应该在自己的迷你库中，除非你有两个类是紧密耦合的情况。&lt;/p&gt;
&lt;p&gt;注意：你可能听说过 &lt;code&gt;part&lt;/code&gt; 指令，它允许你将一个库分割成多个 Dart 文件。我们建议你避免使用 &lt;code&gt;part&lt;/code&gt; 指令，而是创建迷你库。&lt;/p&gt;
&lt;p&gt;直接在 &lt;code&gt;lib&lt;/code&gt; 下创建一个&amp;quot;主&amp;quot;库文件，&lt;code&gt;lib/&amp;lt;package-name&amp;gt;.dart&lt;/code&gt;，导出所有的公共 API。这样用户就可以通过导入一个文件来获得一个库的所有功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lib&lt;/code&gt; 目录也可能包含其他可导入的、非src的库。例如，也许你的主库可以跨平台使用，但是你创建了单独的库，这些库依赖于 &lt;code&gt;dart:io&lt;/code&gt; 或者 &lt;code&gt;dart:html&lt;/code&gt;。有些包有单独的库，这些库是要用前缀导入的，而主库不是。&lt;/p&gt;
&lt;p&gt;让我们来看看一个现实世界中的库包的组织： shelf。&lt;a href=&#34;https://github.com/dart-lang/shelf&#34;&gt;shelf&lt;/a&gt; 包提供了一种使用 Dart 创建 web 服务器的简单方法，它的布局结构是 Dart 库包常用的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dart.dev/assets/libraries/shelf-02e5fd43b660fcef7dbe6a883c40159e0379c8ee2088288ca60ed7dc8781bafd.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;直接在 &lt;code&gt;lib&lt;/code&gt; 下，主库文件 &lt;code&gt;shelf.dart&lt;/code&gt; 从 &lt;code&gt;lib/src&lt;/code&gt; 导出几个文件:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/cascade.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/handler.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/handlers/logger.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/hijack_exception.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/middleware.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/pipeline.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/request.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/response.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/server.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/server_handler.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;shelf 包还包含一个迷你库： &lt;code&gt;shelf_io&lt;/code&gt;。这个适配器处理来自 &lt;code&gt;dart:io&lt;/code&gt; 的 &lt;code&gt;HttpRequest&lt;/code&gt; 对象。&lt;/p&gt;
&lt;p&gt;对网络应用的提示: 为了在使用 &lt;a href=&#34;https://dart.dev/tools/dartdevc&#34;&gt;dartdevc&lt;/a&gt; 开发时获得最佳性能，请将&lt;a href=&#34;https://dart.dev/tools/pub/package-layout#implementation-files&#34;&gt;实现文件&lt;/a&gt;放在 &lt;code&gt;/lib/src&lt;/code&gt; 下，而不是放在 &lt;code&gt;/lib&lt;/code&gt; 下的其他地方。同时，避免导入 &lt;code&gt;package:package_name/src/...&lt;/code&gt; 的文件。&lt;/p&gt;
&lt;h2 id=&#34;导入库文件&#34;&gt;导入库文件&lt;/h2&gt;
&lt;p&gt;当从其他包中导入一个库文件时，使用 &lt;code&gt;package:&lt;/code&gt; 指令来指定该文件的 URI。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;package:utilities/utilities.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当从自己的包中导入一个库文件时，当两个文件都在 lib 内，或者两个文件都在 lib 外时，使用相对路径。使用 &lt;code&gt;:package&lt;/code&gt; 当导入的文件在 lib 内，而导入者在 lib 外时。&lt;/p&gt;
&lt;p&gt;下图显示了如何从 lib 和 web 中导入 &lt;code&gt;lib/foo/a.dart&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dart.dev/assets/libraries/import-lib-rules-e1777e235dd56aa23f770babcccedb6a12be80af2c3e63065640b889d78be595.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;有条件地导入和导出库文件&#34;&gt;有条件地导入和导出库文件&lt;/h2&gt;
&lt;p&gt;如果你的库支持多个平台，那么你可能需要有条件地导入或导出库文件。一个常见的用例是一个同时支持 web 和原生平台的库。&lt;/p&gt;
&lt;p&gt;要有条件的导入或导出，你需要检查 &lt;code&gt;dart:*&lt;/code&gt; 库的存在。下面是一个有条件导出代码的例子，它检查 &lt;code&gt;dart:io&lt;/code&gt; 和 &lt;code&gt;dart:html&lt;/code&gt; 的存在:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/hw_none.dart&amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stub&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dart&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/hw_io.dart&amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dart&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dart&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src/hw_html.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// dart:html implementation
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是这段代码的作用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在一个可以使用 &lt;code&gt;dart:io&lt;/code&gt; 的应用程序中(例如，一个命令行应用程序)，导出 &lt;code&gt;src/hw_io.dart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在一个可以使用 &lt;code&gt;dart:html&lt;/code&gt; 的应用程序中(一个 web 应用程序)，导出 &lt;code&gt;src/hw_html.dart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;否则，导出 &lt;code&gt;src/hw_none.dart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要有条件地导入一个文件，使用与上面相同的代码，但将 &lt;code&gt;exporrt&lt;/code&gt; 改为 &lt;code&gt;import&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注意：有条件的导入或导出只检查库在当前平台上是否可用，而不是检查是否实际导入或使用。&lt;/p&gt;
&lt;p&gt;所有有条件导出的库都必须实现相同的 API。例如，这里是 &lt;code&gt;dart:io&lt;/code&gt; 的实现:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dart:io&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alarm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello World from the VM!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里是默认的实现，它是一个抛出 UnsupportedErrors 的 stub。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alarm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UnsupportedError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hw_none alarm&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UnsupportedError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hw_none message&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在任何平台上，你都可以导入有条件导出代码的库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;package:hw_mp/hw_mp.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;提供补充文件&#34;&gt;提供补充文件&lt;/h2&gt;
&lt;p&gt;一个设计良好的库包是很容易测试的。我们建议你使用 &lt;a href=&#34;https://github.com/dart-lang/test&#34;&gt;test&lt;/a&gt; 包来编写测试，将测试代码放在测试包顶部的 &lt;code&gt;test&lt;/code&gt; 目录中。&lt;/p&gt;
&lt;p&gt;如果你创建了任何旨在供公众使用的命令行工具，请将这些工具放在 &lt;code&gt;bin&lt;/code&gt; 目录下，这是公共的。启用从命令行运行工具，使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-global#activating-a-package&#34;&gt;pub global activate&lt;/a&gt;。将工具列在 pubspec 的&lt;a href=&#34;https://dart.dev/tools/pub/pubspec#executables&#34;&gt;可执行文件部分&lt;/a&gt;，允许用户直接运行它，而无需调用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-global#running-a-script-using-pub-global-run&#34;&gt;pub global run&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果你包含了一个如何使用你的库的例子，这将会很有帮助。这将被放入软件包顶部的 &lt;code&gt;example&lt;/code&gt; 目录中。&lt;/p&gt;
&lt;p&gt;你在开发过程中创建的任何工具或可执行文件，如果不是公开使用的，都会进入 &lt;code&gt;tool&lt;/code&gt; 目录。&lt;/p&gt;
&lt;p&gt;如果你把你的库发布到 pub.dev 站点，其他需要的文件，如 &lt;code&gt;README.md&lt;/code&gt; 和 &lt;code&gt;CHANGELOG.md&lt;/code&gt;，将在&lt;a href=&#34;https://dart.dev/tools/pub/publishing&#34;&gt;发布软件包&lt;/a&gt;中描述。有关如何组织包目录的更多信息，请参见 &lt;a href=&#34;https://dart.dev/tools/pub/package-layout&#34;&gt;pub 包布局惯例&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;编写库文档&#34;&gt;编写库文档&lt;/h2&gt;
&lt;p&gt;你可以使用 &lt;a href=&#34;https://github.com/dart-lang/dartdoc#dartdoc&#34;&gt;dartdoc&lt;/a&gt; 工具为你的库生成 API 文档。Dartdoc 解析源码寻找&lt;a href=&#34;https://dart.dev/guides/language/effective-dart/documentation#doc-comments&#34;&gt;文档注释&lt;/a&gt;，其中使用了 &lt;code&gt;///&lt;/code&gt; 语法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;c1&#34;&gt;/// The event handler responsible for updating the badge in the UI.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;updateBadge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于生成文档的例子，请看 &lt;a href=&#34;https://pub.dev/documentation/shelf/latest&#34;&gt;shelf 文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;注意：要在生成的文档中包含任何库级文档，你必须指定 &lt;code&gt;library&lt;/code&gt; 指令。请参阅 &lt;a href=&#34;https://github.com/dart-lang/dartdoc/issues/1082&#34;&gt;问题 1082&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;分发一个开源库&#34;&gt;分发一个开源库&lt;/h2&gt;
&lt;p&gt;如果你的库是开源的，我们建议在 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt; 站点上分享它。要发布或更新库，请使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-lish&#34;&gt;pub publish&lt;/a&gt;，它可以上传您的包并创建或更新其页面。例如，请看 &lt;a href=&#34;https://pub.dev/packages/shelf&#34;&gt;shelf 包&lt;/a&gt;的页面。有关如何准备发布软件包的详细信息，请参见&lt;a href=&#34;https://dart.dev/tools/pub/publishing&#34;&gt;发布包&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;pub.dev 站点不仅托管您的软件包，而且还生成和托管您软件包的 API 参考文档。最新生成的文档的链接在软件包的 &lt;strong&gt;About&lt;/strong&gt; 框中；例如，请看 shelf 包的 &lt;a href=&#34;https://pub.dev/documentation/shelf&#34;&gt;API 文档&lt;/a&gt;。到以前版本的文档的链接在软件包页面的版本选项卡中。&lt;/p&gt;
&lt;p&gt;要确保你的软件包的 API 文档在 pub.dev 网站上看起来不错，请按照以下步骤进行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在发布你的软件包之前，运行 &lt;a href=&#34;https://github.com/dart-lang/dartdoc#dartdoc&#34;&gt;dartdoc&lt;/a&gt; 工具，以确保你的 docs 成功生成，并且看起来符合预期。&lt;/li&gt;
&lt;li&gt;发布软件包后，检查 &lt;strong&gt;Versions&lt;/strong&gt; 选项卡以确保文档成功生成。&lt;/li&gt;
&lt;li&gt;如果文档根本没有生成，点击 &lt;strong&gt;Verrsions&lt;/strong&gt; 选项卡中的 &lt;strong&gt;failed&lt;/strong&gt;，查看 dartdoc 的输出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;资源&#34;&gt;资源&lt;/h2&gt;
&lt;p&gt;使用以下资源了解更多关于库包的信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/language/language-tour&#34;&gt;语言之旅&lt;/a&gt;中的&lt;a href=&#34;https://dart.dev/guides/language/language-tour#libraries-and-visibility&#34;&gt;库和可见性&lt;/a&gt;包括使用库文件。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/packages&#34;&gt;包&lt;/a&gt;文档很有用，特别是&lt;a href=&#34;https://dart.dev/tools/pub/package-layout&#34;&gt;包的布局约定&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/private-files&#34;&gt;不应提交的内容&lt;/a&gt;涵盖了哪些不应该被检查到源代码库中。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang&#34;&gt;dart-lang&lt;/a&gt; 组织下的较新的库包倾向于展示最佳实践。可以考虑研究这些例子：&lt;a href=&#34;https://github.com/dart-lang/dart_style&#34;&gt;dart_style&lt;/a&gt;、&lt;a href=&#34;https://github.com/dart-lang/path&#34;&gt;path&lt;/a&gt;、&lt;a href=&#34;https://github.com/dart-lang/shelf&#34;&gt;shelf&lt;/a&gt;、&lt;a href=&#34;https://github.com/dart-lang/source_gen&#34;&gt;source_gen&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/dart-lang/test&#34;&gt;test&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/packages">packages</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/creating-packages/</guid>
                <pubDate>Tue, 30 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>发布包</title>
                <link>https://ohmyweekly.github.io/notes/publishing-packages/</link>
                
                
                <description>&lt;blockquote&gt;Publishing packages&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://dart.dev/guides/packages&#34;&gt;pub 软件包管理器&lt;/a&gt;不仅仅是用来使用别人的软件包。它还允许你与世界分享你的软件包。如果您有一个有用的项目，并且您希望其他人能够使用它，请使用 &lt;code&gt;pub publish&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;注意: 如果要发布到 pub.dev 以外的其他位置，或者要防止在任何地方发布，请使用 &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec&lt;/a&gt; 中定义的  &lt;code&gt;publish_to&lt;/code&gt; 字段。&lt;/p&gt;
&lt;h2 id=&#34;发布是永远的&#34;&gt;发布是永远的&lt;/h2&gt;
&lt;p&gt;请记住，发布是永远的。只要你发布你的包，用户就可以依赖它。一旦他们开始这样做，删除包就会破坏他们的包。为了避免这种情况，&lt;a href=&#34;https://pub.dev/policy&#34;&gt;pub.dev 政策&lt;/a&gt;不允许取消发布软件包，除非是极少数情况。&lt;/p&gt;
&lt;p&gt;你可以随时上传你的包的新版本，但旧的包将继续为那些还没有准备好升级的用户提供服务。&lt;/p&gt;
&lt;p&gt;对于已经发布的包，如果不再相关或正在维护，你可以&lt;a href=&#34;https://dart.dev/tools/pub/publishing#discontinue&#34;&gt;将其标记为停止发布&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;准备发布&#34;&gt;准备发布&lt;/h2&gt;
&lt;p&gt;当发布一个软件包时，遵循 &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec 格式&lt;/a&gt;和&lt;a href=&#34;https://dart.dev/tools/pub/package-layout&#34;&gt;包布局惯例&lt;/a&gt;是很重要的。其中有些是必须的，以便其他人能够使用你的软件包。另一些则是为了帮助用户更容易理解和使用您的软件包而提出的建议。在这两种情况下，pub 都会尝试帮助你，指出哪些改变会帮助你的软件包在 Dart 生态系统中发挥得更好。上传包有一些额外的要求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;你必须包含一个包含&lt;a href=&#34;https://opensource.org/&#34;&gt;开源许可证&lt;/a&gt;的 &lt;code&gt;LICENSE&lt;/code&gt; 文件。我们推荐 &lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;BSD 许可证&lt;/a&gt;，这是 Dart 自己使用的。你也必须有合法的权利来重新发布你上传的任何东西作为你的包的一部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你的软件包在经过 gzip 压缩后必须小于 10 MB。如果太大，可以考虑将其分割成多个包，或者减少包含的资源或例子的数量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你的包应该只依赖托管的依赖项(来自默认的 pub 包服务器)和 SDK 依赖项(&lt;code&gt;sdk: flutter&lt;/code&gt;)。这些限制确保了你的包的依赖性不会在未来变得不可用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;您必须有一个 &lt;a href=&#34;https://support.google.com/accounts/answer/27441&#34;&gt;Google 帐户&lt;/a&gt;，pub 用来管理包的上传权限。您的 Google 账户可以与 Gmail 地址或任何其他电子邮件地址关联。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：除非您使用&lt;a href=&#34;https://dart.dev/tools/pub/verified-publishers&#34;&gt;已验证的发布者&lt;/a&gt;发布，否则 pub.dev 会显示与您的 Google 帐户关联的电子邮件地址。&lt;/p&gt;
&lt;h3 id=&#34;重要文件&#34;&gt;重要文件&lt;/h3&gt;
&lt;p&gt;Pub 使用一些文件的内容为你的包创建一个页面，地址是 &lt;code&gt;pub.dev/packages/&amp;lt;your_package&amp;gt;&lt;/code&gt;。以下是影响你的包的页面外观的文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;README.md: &lt;code&gt;README.md&lt;/code&gt; 文件是你的包页面中的主要内容。该文件的内容以 &lt;a href=&#34;https://pub.dev/packages/markdown&#34;&gt;Markdown&lt;/a&gt; 的形式呈现。&lt;/li&gt;
&lt;li&gt;CHANGELOG.md：&lt;code&gt;CHANGELOG.md&lt;/code&gt; 文件是你的包页面中的主要内容。你的包的 &lt;code&gt;CHANGELOG.md&lt;/code&gt; 文件，如果找到的话，也会在你的包页面的一个标签中显示，这样开发者就可以直接从 pub.dev 中读取它。该文件的内容会以 &lt;a href=&#34;https://pub.dev/packages/markdown&#34;&gt;Markdown&lt;/a&gt; 的形式呈现。&lt;/li&gt;
&lt;li&gt;pubspec: 你的包的 &lt;code&gt;pubspec.yaml&lt;/code&gt; 文件用来在你的包的页面右侧填写关于你的包的详细信息，比如它的描述、主页等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用经过验证的发布者的优势&#34;&gt;使用经过验证的发布者的优势&lt;/h3&gt;
&lt;p&gt;您可以使用已验证的发布者（推荐）或独立的谷歌账户发布软件包。使用经过验证的发布者有以下优势。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;您的包的消费者知道发布者的域名已经被验证。&lt;/li&gt;
&lt;li&gt;您可以避免让 pub.dev 显示您的个人电子邮件地址。取而代之的是，pub.dev会显示发布者的域名和联系地址。&lt;/li&gt;
&lt;li&gt;经验证的发布者徽章 pub.dev 经验证的发布者标识会在搜索页面和单个软件包页面上显示在您的软件包名称旁边。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建一个验证过的发布者&#34;&gt;创建一个验证过的发布者&lt;/h3&gt;
&lt;p&gt;要创建一个已验证的发布者，请按照以下步骤进行。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进入 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;使用 Google 账户登录 pub.dev。&lt;/li&gt;
&lt;li&gt;在右上角的用户菜单中，选择创建发布者。&lt;/li&gt;
&lt;li&gt;输入您要与您的发布者相关联的域名(例如，&lt;code&gt;dart.dev&lt;/code&gt;)，然后单击&amp;quot;创建发布者&amp;quot;。&lt;/li&gt;
&lt;li&gt;在确认对话框中，选择&amp;quot;确定&amp;quot;。&lt;/li&gt;
&lt;li&gt;如果提示，完成验证流程，这将打开 &lt;a href=&#34;https://search.google.com/search-console/about&#34;&gt;Google 搜索控制台&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;在添加 DNS 记录时，可能需要几个小时后，搜索控制台才会反映出变化。&lt;/li&gt;
&lt;li&gt;验证流程完成后，返回步骤4。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;发布你的包&#34;&gt;发布你的包&lt;/h2&gt;
&lt;p&gt;使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-lish&#34;&gt;pub publish&lt;/a&gt; 命令来首次发布您的软件包，或将其更新到新版本。&lt;/p&gt;
&lt;h3 id=&#34;执行-dry-run&#34;&gt;执行 dry run&lt;/h3&gt;
&lt;p&gt;为了测试 &lt;code&gt;pub publish&lt;/code&gt; 的工作情况，你可以进行一次 dry run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ pub publish --dry-run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pub 会确保你的软件包遵循 &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec 格式&lt;/a&gt;和&lt;a href=&#34;https://dart.dev/tools/pub/package-layout&#34;&gt;包布局约定&lt;/a&gt;，然后将你的软件包上传到 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt;。Pub 还会向你展示它打算发布的所有文件。下面是一个发布名为 &lt;code&gt;transmogrify&lt;/code&gt; 的软件包的例子:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;l&#34;&gt;Publishing transmogrify 1.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;.gitignore&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CHANGELOG.md&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;README.md&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;transmogrify.dart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;transmogrifier.dart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;transmogrification.dart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pubspec.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;transmogrify_test.dart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Package has 0 warnings.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;发布&#34;&gt;发布&lt;/h3&gt;
&lt;p&gt;当你准备好发布你的包时，请删除 &lt;code&gt;--dry-run&lt;/code&gt; 参数:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ pub publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意: pub 命令目前不支持直接将新软件包发布到已验证的发布者。作为一个临时的变通方法，可以将新的软件包发布到Google账户，然后将包&lt;a href=&#34;https://dart.dev/tools/pub/publishing#transferring-a-package-to-a-verified-publisher&#34;&gt;转移到发布者&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;一旦软件包被转移到发布者，你就可以使用 &lt;code&gt;pub publish&lt;/code&gt; 更新软件包。&lt;/p&gt;
&lt;p&gt;当你的包成功上传到 pub.dev 后，任何 pub 用户都可以下载它或在他们的项目中依赖它。例如，如果你刚刚发布了 1.0.0 版本的 &lt;code&gt;transmogrify&lt;/code&gt; 包，那么另一个 Dart 开发者可以在他们的 &lt;code&gt;pubspec.yaml&lt;/code&gt; 中添加它作为依赖:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;dependencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transmogrify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;^1.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;将软件包传输给已验证的发布者&#34;&gt;将软件包传输给已验证的发布者&lt;/h3&gt;
&lt;p&gt;要将一个软件包转移到已验证的发布者，您必须是该软件包的&lt;a href=&#34;https://dart.dev/tools/pub/publishing#uploaders&#34;&gt;上传者&lt;/a&gt;和已验证发布者的管理员。&lt;/p&gt;
&lt;p&gt;注意：这个过程是不可逆的。一旦你将一个软件包转移到一个发布者，你不能将它转移回个人账户。&lt;/p&gt;
&lt;p&gt;以下是如何将软件包转移到已验证的发布者:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用一个被列为软件包上传者的 Google 账户登录到 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;进入软件包的详细信息页面(例如，&lt;code&gt;https://pub.dev/packages/http&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;选择&amp;quot;管理&amp;quot;选项卡。&lt;/li&gt;
&lt;li&gt;输入发布者的名称，然后单击&amp;quot;传输到发布者&amp;quot;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;哪些文件会被发布&#34;&gt;哪些文件会被发布？&lt;/h3&gt;
&lt;p&gt;您的软件包中的&lt;strong&gt;所有&lt;/strong&gt;文件都包含在已发布的软件包中，但有以下例外:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何包的目录。&lt;/li&gt;
&lt;li&gt;您的软件包的 &lt;a href=&#34;https://dart.dev/tools/pub/glossary#lockfile&#34;&gt;lockfile&lt;/a&gt; 文件。&lt;/li&gt;
&lt;li&gt;如果你没有使用 Git，所有隐藏的文件（也就是名字以 &lt;code&gt;.&lt;/code&gt; 开头的文件）。&lt;/li&gt;
&lt;li&gt;如果使用 Git，则是所有被 &lt;code&gt;.gitignore&lt;/code&gt; 文件忽略的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请确保删除任何你不想包含的文件(或将它们添加到 &lt;code&gt;.gitignore&lt;/code&gt; 中)。 &lt;code&gt;pub publish&lt;/code&gt; 在上传你的包之前列出了它要发布的所有文件，所以在完成上传之前要仔细检查列表。&lt;/p&gt;
&lt;h2 id=&#34;上传者&#34;&gt;上传者&lt;/h2&gt;
&lt;p&gt;谁发布了软件包的第一个版本，谁就会自动成为第一个也是唯一一个被授权上传该软件包其他版本的人。要允许或不允许其他人上传版本，请使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-uploader&#34;&gt;pub uploader&lt;/a&gt; 命令或将软件包转移到&lt;a href=&#34;https://dart.dev/tools/pub/verified-publishers&#34;&gt;已验证的发布者&lt;/a&gt;那里。&lt;/p&gt;
&lt;p&gt;如果一个软件包有一个经过验证的发布者，那么该软件包的 pub.dev 页面会显示发布者的域名。否则，该页面将显示该软件包的授权上传者的电子邮件地址。&lt;/p&gt;
&lt;h2 id=&#34;发布预发包&#34;&gt;发布预发包&lt;/h2&gt;
&lt;p&gt;当你在做一个包的时候，考虑把它作为一个预发布。当以下任何一种情况发生时，预发布都是有用的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你正在积极开发软件包的下一个主要版本。&lt;/li&gt;
&lt;li&gt;你想为软件包的下一个发行候选版本招募测试者。&lt;/li&gt;
&lt;li&gt;该包依赖于 Dart 或 Flutter SDK 的不稳定版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正如在&lt;a href=&#34;https://semver.org/spec/v2.0.0-rc.1.html&#34;&gt;语义版本化&lt;/a&gt;中所描述的那样，为了使一个版本的预发布，你要给版本附加一个后缀。例如，要对 &lt;code&gt;2.0.0&lt;/code&gt; 版本进行预发布，你可以使用 &lt;code&gt;2.0.0-dev.1&lt;/code&gt; 版本。以后，当你发布 &lt;code&gt;2.0.0&lt;/code&gt; 版本时，它将优先于所有 &lt;code&gt;2.0.0-XXX&lt;/code&gt; 预发布版本。&lt;/p&gt;
&lt;p&gt;因为 pub 更倾向于在可用的时候发布稳定版，所以一个预发布包的用户可能需要改变他们的依赖约束。例如，如果用户想要测试 2.1 版本的预发布包，那么他们可以指定 &lt;code&gt;^2.1.0-dev.1&lt;/code&gt;，而不是 &lt;code&gt;^2.0.0&lt;/code&gt; 或 &lt;code&gt;^2.1.0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注意: 如果依赖关系图中的稳定包依赖于一个 prerelease，那么 pub 会选择那个 prerelease 而不是稳定版本。&lt;/p&gt;
&lt;p&gt;当一个 prerelease 被发布到 pub.dev 时，软件包页面会同时显示到 prerelease 和稳定版的链接。prerelease 不会影响分析得分，不会出现在搜索结果中，也不会替换包的 &lt;code&gt;README.md&lt;/code&gt; 和文档。&lt;/p&gt;
&lt;h2 id=&#34;将软件包标记为已停产的软件包&#34;&gt;将软件包标记为已停产的软件包&lt;/h2&gt;
&lt;p&gt;尽管软件包总是保持发布，但向开发者发出信号，表明一个软件包不再被积极维护，是很有用的。为此，您可以将一个软件包标记为 &lt;code&gt;discontinued&lt;/code&gt;。一个已停用的软件包仍然可以在 pub.dev 上发布和查看，但它有一个清晰的 DISCONTINUED 徽章，并且不会出现在 pub.dev 的搜索结果中。&lt;/p&gt;
&lt;p&gt;要将软件包标记为已停用，请使用该软件包的上传者或已验证的发布者管理员的 Google 帐户登录 pub.dev。然后使用单个软件包的管理选项卡将该软件包标记为已停用。&lt;/p&gt;
&lt;h2 id=&#34;资源&#34;&gt;资源&lt;/h2&gt;
&lt;p&gt;有关更多信息，请参见以下 pub 命令的参考页面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-lish&#34;&gt;pub publish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-uploader&#34;&gt;pub uploader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/packages">packages</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/publishing-packages/</guid>
                <pubDate>Tue, 30 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>如何使用包</title>
                <link>https://ohmyweekly.github.io/notes/how-to-use-packages/</link>
                
                
                <description>&lt;blockquote&gt;Dart 包管理工具 - pub&lt;/blockquote&gt;&lt;p&gt;Dart 生态系统使用包来管理共享软件，如库和工具。要获得 Dart 包，你可以使用 &lt;code&gt;pub&lt;/code&gt; 包管理器。你可以在 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt; 网站上找到公开的包，也可以从本地文件系统或其他地方加载包，比如 Git 仓库。无论你的包来自哪里，pub 都会管理版本依赖关系，帮助你获得相互之间以及与 SDK 版本兼容的包版本。&lt;/p&gt;
&lt;p&gt;大多数精通 Dart 的 &lt;a href=&#34;https://dart.dev/tools#ides-and-editors&#34;&gt;IDE&lt;/a&gt; 都提供了对 pub 的支持，包括创建、下载、更新和发布包。或者你可以&lt;a href=&#34;https://dart.dev/tools/pub/cmd&#34;&gt;在命令行中使用 pub&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;至少，一个 Dart 包是一个包含 &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec 文件&lt;/a&gt;的目录。pubspec 包含一些关于包的元数据。此外，一个包可以包含依赖关系(在 pubspec 中列出)，Dart 库，应用程序，资源，测试，图像和例子。&lt;/p&gt;
&lt;p&gt;要使用一个包，请执行以下操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个 pubspec(一个名为 &lt;code&gt;pubspec.yaml&lt;/code&gt; 的文件，它列出了软件包的依赖关系，并包含其他元数据，如版本号)。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;pub&lt;/code&gt; 来获取你的包的依赖关系。&lt;/li&gt;
&lt;li&gt;如果你的 Dart 代码依赖于软件包中的一个库，则导入该库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建一个-pubspec&#34;&gt;创建一个 pubspec&lt;/h2&gt;
&lt;p&gt;pubspec 是一个名为 &lt;code&gt;pubspec.yaml&lt;/code&gt; 的文件，它位于你的应用程序的顶级目录中。最简单的 pubspec 只列出了包名:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;nl&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是一个 pubspec 的例子，它声明了两个包(&lt;code&gt;js&lt;/code&gt; 和 &lt;code&gt;intl&lt;/code&gt;)的依赖关系，这两个包都托管在 pub.dev 站点上:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;nl&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_app&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;dependencies:&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;js:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;intl:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于创建 pubspec 的详细信息，请参见 &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec 文档&lt;/a&gt;和你要使用的包的文档。&lt;/p&gt;
&lt;h2 id=&#34;获取软件包&#34;&gt;获取软件包&lt;/h2&gt;
&lt;p&gt;一旦你有了 pubspec，你就可以从你的应用程序的顶级目录中运行 &lt;code&gt;pub get&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &amp;lt;path-to-my_app&amp;gt;
$ pub get
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个过程被称为获取依赖关系。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pub get&lt;/code&gt; 命令可以确定您的应用程序依赖于哪些软件包，并将它们放在中央&lt;a href=&#34;https://dart.dev/tools/pub/glossary#system-cache&#34;&gt;系统缓存&lt;/a&gt;中。如果您的应用程序依赖于已发布的包，pub 会从 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt; 站点下载该包。对于  &lt;a href=&#34;https://dart.dev/tools/pub/dependencies#git-packages&#34;&gt;Git 依赖&lt;/a&gt;，pub 会克隆 Git 仓库。还包括了过渡性依赖。例如，如果 &lt;code&gt;js&lt;/code&gt; 包依赖于 &lt;code&gt;test&lt;/code&gt; 包，&lt;code&gt;pub&lt;/code&gt; 会同时抓取 &lt;code&gt;js&lt;/code&gt; 包和 &lt;code&gt;test&lt;/code&gt; 包。&lt;/p&gt;
&lt;p&gt;Pub 会创建一个 &lt;code&gt;.packages&lt;/code&gt; 文件(在你的应用程序的顶层目录下)，将你的应用程序所依赖的每个包名映射到系统缓存中的对应包。&lt;/p&gt;
&lt;h2 id=&#34;从包中导入库&#34;&gt;从包中导入库&lt;/h2&gt;
&lt;p&gt;要导入在包中找到的库，使用 &lt;code&gt;package:&lt;/code&gt; 前缀:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;package:js/js.dart&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;js&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;package:intl/intl.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dart 运行时在 &lt;code&gt;package:&lt;/code&gt; 之后的所有内容都会在应用程序的 &lt;code&gt;.package&lt;/code&gt; 文件中进行查找。&lt;/p&gt;
&lt;p&gt;你也可以使用这种风格从你自己的包中导入库。比方说，&lt;code&gt;transmogrify&lt;/code&gt; 包的布局如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;transmogrify/
  lib/
    transmogrify.dart
    parser.dart
  test/
    parser/
      parser_test.dart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;parser_test.dart&lt;/code&gt; 文件可以这样导入 &lt;code&gt;parser.dart&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;package:transmogrify/parser.dart&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;升级依赖关系&#34;&gt;升级依赖关系&lt;/h2&gt;
&lt;p&gt;当你第一次为你的软件包获取一个新的依赖关系时，pub 会下载与你的其他依赖关系兼容的最新版本。然后，它通过创建一个 &lt;strong&gt;lockfile&lt;/strong&gt; 锁文件来锁定您的软件包，使其始终使用该版本。这是一个名为 &lt;code&gt;pubspec.lock&lt;/code&gt; 的文件，由 pub 创建并存储在 pubspec 的旁边。它列出了您的软件包所使用的每个依赖关系的特定版本 (即时的和过渡的)。&lt;/p&gt;
&lt;p&gt;如果你的包是一个应用程序包，你应该把这个文件检查到&lt;a href=&#34;https://dart.dev/guides/libraries/private-files&#34;&gt;源代码控制&lt;/a&gt;中。这样，在你的应用程序上工作的每个人都会使用所有包的相同版本。在 lockfile 文件中检查也可以确保你部署的应用使用相同版本的代码。&lt;/p&gt;
&lt;p&gt;当你准备好将你的依赖项升级到最新版本时，使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-upgrade&#34;&gt;pub upgrade&lt;/a&gt; 命令:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;upgrade&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pub upgrade&lt;/code&gt; 命令告诉 pub 使用你的包的依赖关系的最新版本来重新生成 lockfile 文件。如果你只想升级一个依赖关系，你可以指定要升级的软件包:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;upgrade&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transmogrify&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该命令将 &lt;code&gt;transmogrify&lt;/code&gt; 升级到最新版本，但其他一切都保持不变。&lt;/p&gt;
&lt;p&gt;由于 pubspec 中有冲突的版本限制，&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-upgrade&#34;&gt;pub upgrade&lt;/a&gt; 命令并不能总是将每个软件包升级到最新版本。要识别需要编辑 pubspec 的过期软件包，请使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-outdated&#34;&gt;pub outdated&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;更多信息&#34;&gt;更多信息&lt;/h2&gt;
&lt;p&gt;下面的页面有更多关于软件包和 pub 包管理器的信息。&lt;/p&gt;
&lt;p&gt;如何使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/create-library-packages&#34;&gt;创建包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/publishing&#34;&gt;发布包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/dependencies&#34;&gt;Pub 依赖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/environment-variables&#34;&gt;Pub 环境变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/glossary&#34;&gt;Pub 词汇表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/package-layout&#34;&gt;Pub 包布局约定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/versioning&#34;&gt;Pub 版本哲学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;Pubspec 格式化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pub 命令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pub&lt;/code&gt; 工具提供了以下命令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-cache&#34;&gt;pub cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-deps&#34;&gt;pub deps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-downgrade&#34;&gt;pub downgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-get&#34;&gt;pub get&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-global&#34;&gt;pub global&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-outdated&#34;&gt;pub outdated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-lish&#34;&gt;pub publish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-run&#34;&gt;pub run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-upgrade&#34;&gt;pub upgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-uploader&#34;&gt;pub uploader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关所有 pub 命令的概述，请参阅 &lt;a href=&#34;https://dart.dev/tools/pub/cmd&#34;&gt;pub 工具文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;疑难解答&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dart.dev/tools/pub/troubleshoot&#34;&gt;故障排除 pub&lt;/a&gt; 提供了使用 pub 时可能遇到的问题的解决方案。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/packages">packages</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/how-to-use-packages/</guid>
                <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>常用的包</title>
                <link>https://ohmyweekly.github.io/notes/commonly-used-packages/</link>
                
                
                <description>&lt;blockquote&gt;Commonly used packages&lt;/blockquote&gt;&lt;p&gt;本页列出了一些  Dart 开发者发布的最流行和最有用的&lt;a href=&#34;https://dart.dev/guides/packages&#34;&gt;包&lt;/a&gt;。要找到更多的软件包&amp;ndash;也可以搜索&lt;a href=&#34;https://dart.dev/guides/libraries&#34;&gt;核心库&lt;/a&gt;&amp;ndash;请使用 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt; 网站。&lt;/p&gt;
&lt;p&gt;常用的软件包可分为三类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/useful-libraries#general-purpose-packages&#34;&gt;通用包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/useful-libraries#packages-that-correspond-to-sdk-libraries&#34;&gt;扩展 Dart 核心库的包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/useful-libraries#specialized-packages&#34;&gt;特定的包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通用包&#34;&gt;通用包&lt;/h2&gt;
&lt;p&gt;以下包对各种项目都很有用:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;包&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;常用的 API&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/archive&#34;&gt;archive&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对各种档案和压缩格式进行编码和解码。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Archive, ArchiveFile, TarEncoder, TarDecoder, ZipEncoder, ZipDecoder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/characters&#34;&gt;characters&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对用户感知的字符进行字符串操作(Unicode 字符簇)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;String.characters, Characters, CharacterRange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/http&#34;&gt;http&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一组高级的函数和类，使其易于消费 HTTP 资源&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;delete(), get(), post(), read()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/intl&#34;&gt;intl&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;国际化和本地化设施，支持复数和性别、日期和数字格式化和解析以及双向文本&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bidi, DateFormat, MicroMoney, TextDirection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/json_serializable&#34;&gt;json_serializable&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个易于使用的代码生成包。更多信息，请参阅 &lt;a href=&#34;https://dart.dev/guides/json&#34;&gt;JSON 支持&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@JsonSerializable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/logging&#34;&gt;logging&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个可配置的机制，为你的应用程序添加消息记录&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;LoggerHandler, Level, LogRecord&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/mockito&#34;&gt;mockito&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个在测试中模拟对象的流行框架。如果你正在编写依赖注入的测试，特别有用。与 &lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;test&lt;/a&gt; 包一起使用&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Answering, Expectation, Verification&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/path&#34;&gt;path&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;操作不同类型路径的常用操作。更多信息，请参见&lt;a href=&#34;https://news.dartlang.org/2016/06/unboxing-packages-path.html&#34;&gt;拆包: path&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;absolute(), basename(), extension(), join(), normalize(), relative(), split()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/quiver&#34;&gt;quiver&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;实用工具，使 Dart 核心库的使用更加方便。Quiver 提供额外支持的一些库包括 async、cache、collection、core、iterables、pattern 和 测试&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CountdownTimer (quiver.async); MapCache (quiver.cache); MultiMap, TreeSet (quiver.collection); EnumerateIterable (quiver.iterables); center(), compareIgnoreCase(), isWhiteSpace() (quiver.strings)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/shelf&#34;&gt;shelf&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Dart 的 Web 服务器中间件。Shelf 使它能轻松地创建和组成 Web 服务器，以及 Web 服务器的一部分&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cascade, Pipeline, Request, Response, Server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/stack_trace&#34;&gt;stack_trace&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于解析、检查和处理由底层 Dart 实现产生的堆栈痕迹的方法。还提供了以比原生 StackTrace 实现更可读的格式生成堆栈跟踪的字符串表示的函数,  更多信息，请参见&lt;a href=&#34;https://news.dartlang.org/2016/01/unboxing-packages-stacktrace.html&#34;&gt;拆包: stack_trace&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Trace.current(), Trace.format(), Trace.from()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/stagehand&#34;&gt;stagehand&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个 Dart 项目生成器。当你创建一个新的应用程序时，WebStorm 和 IntelliJ 使用 Stagehand 模板，但你也可以从命令行使用模板&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一般通过 IDE 或 &lt;code&gt;stagehand&lt;/code&gt; 命令来使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;test&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在 Dart 中编写和运行测试的标准方法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;expect(), group(), test()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/yaml&#34;&gt;yaml&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;YAML 解析器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;loadYaml(), loadYamlStream()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;扩展-dart-核心库的包&#34;&gt;扩展 Dart 核心库的包&lt;/h2&gt;
&lt;p&gt;以下每个包都建立在一个&lt;a href=&#34;https://dart.dev/guides/libraries&#34;&gt;核心库&lt;/a&gt;的基础上，增加了功能并填补了缺失的功能:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;包&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;常用的 API&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/async&#34;&gt;async&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在 dart:async 的基础上进行了扩展，增加了实用类来处理异步计算。更多信息，请参见&lt;a href=&#34;https://news.dartlang.org/2016/03/unboxing-packages-async-part-1.html&#34;&gt;拆包: async 第1部分&lt;/a&gt;、&lt;a href=&#34;https://news.dartlang.org/2016/03/unboxing-packages-async-part-2.html&#34;&gt;第2部分&lt;/a&gt;和&lt;a href=&#34;https://news.dartlang.org/2016/04/unboxing-packages-async-part-3.html&#34;&gt;第3部分&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AsyncMemoizer, CancelableOperation, FutureGroup, LazyStream, Result, StreamCompleter, StreamGroup, StreamSplitter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/collection&#34;&gt;collection&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在 dart:collection 的基础上进行了扩展，增加了实用函数和类，使处理集合的工作变得更加容易。更多信息，请看&lt;a href=&#34;https://news.dartlang.org/2016/01/unboxing-packages-collection.html&#34;&gt;拆包：collection&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Equality, CanonicalizedMap, MapKeySet, MapValueSet, PriorityQueue, QueueList&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/convert&#34;&gt;convert&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在 dart:convert 的基础上，增加了编码器和解码器，用于在不同的数据表现形式之间进行转换。其中一种数据表示方式是百分比编码，也被称为 URL 编码&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;HexDecoder, PercentDecoder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/io&#34;&gt;io&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;包含两个库，ansi和io，以简化对文件、标准流和进程的处理。使用 ansi 库可以自定义终端输出。io 库有处理进程、stdin 和文件复制的 API&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;copyPath(), isExecutable(), ExitCode, ProcessManager, sharedStdIn&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;专用包&#34;&gt;专用包&lt;/h2&gt;
&lt;p&gt;下面是一些寻找比较专业的包的技巧，比如手机的包(Flutter)和网页开发的包。&lt;/p&gt;
&lt;h3 id=&#34;flutter-包&#34;&gt;Flutter 包&lt;/h3&gt;
&lt;p&gt;请看 Flutter 网站上的&lt;a href=&#34;https://flutter.dev/docs/development/packages-and-plugins/using-packages&#34;&gt;使用包&lt;/a&gt;。或者使用 pub.dev 网站&lt;a href=&#34;https://pub.dev/flutter&#34;&gt;搜索 Flutter 包&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;网络包&#34;&gt;网络包&lt;/h3&gt;
&lt;p&gt;参见&lt;a href=&#34;https://dart.dev/web/libraries&#34;&gt;网络库和包&lt;/a&gt;。或者使用 pub.dev 站点&lt;a href=&#34;https://pub.dev/web&#34;&gt;搜索 web 包&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;命令行和服务器软件包&#34;&gt;命令行和服务器软件包&lt;/h3&gt;
&lt;p&gt;参见&lt;a href=&#34;https://dart.dev/server/libraries&#34;&gt;命令行和服务器库和包&lt;/a&gt;。或者使用 pub.dev 站点&lt;a href=&#34;https://pub.dev/&#34;&gt;搜索其他包&lt;/a&gt;。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/packages">packages</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/commonly-used-packages/</guid>
                <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
    </channel>
</rss>


