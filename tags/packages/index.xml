<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    packages on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/tags/packages/</link>
        <description>Recent content  in packages
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Mon, 29 Jun 2020 21:48:32 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/tags/packages/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>如何使用包</title>
                <link>https://ohmyweekly.github.io/notes/how-to-use-packages/</link>
                
                
                <description>&lt;blockquote&gt;Dart 包管理工具 - pub&lt;/blockquote&gt;&lt;p&gt;Dart 生态系统使用包来管理共享软件，如库和工具。要获得 Dart 包，你可以使用 &lt;code&gt;pub&lt;/code&gt; 包管理器。你可以在 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt; 网站上找到公开的包，也可以从本地文件系统或其他地方加载包，比如 Git 仓库。无论你的包来自哪里，pub 都会管理版本依赖关系，帮助你获得相互之间以及与 SDK 版本兼容的包版本。&lt;/p&gt;
&lt;p&gt;大多数精通 Dart 的 &lt;a href=&#34;https://dart.dev/tools#ides-and-editors&#34;&gt;IDE&lt;/a&gt; 都提供了对 pub 的支持，包括创建、下载、更新和发布包。或者你可以&lt;a href=&#34;https://dart.dev/tools/pub/cmd&#34;&gt;在命令行中使用 pub&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;至少，一个 Dart 包是一个包含 &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec 文件&lt;/a&gt;的目录。pubspec 包含一些关于包的元数据。此外，一个包可以包含依赖关系(在 pubspec 中列出)，Dart 库，应用程序，资源，测试，图像和例子。&lt;/p&gt;
&lt;p&gt;要使用一个包，请执行以下操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个 pubspec(一个名为 &lt;code&gt;pubspec.yaml&lt;/code&gt; 的文件，它列出了软件包的依赖关系，并包含其他元数据，如版本号)。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;pub&lt;/code&gt; 来获取你的包的依赖关系。&lt;/li&gt;
&lt;li&gt;如果你的 Dart 代码依赖于软件包中的一个库，则导入该库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建一个-pubspec&#34;&gt;创建一个 pubspec&lt;/h2&gt;
&lt;p&gt;pubspec 是一个名为 &lt;code&gt;pubspec.yaml&lt;/code&gt; 的文件，它位于你的应用程序的顶级目录中。最简单的 pubspec 只列出了包名:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;nl&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是一个 pubspec 的例子，它声明了两个包(&lt;code&gt;js&lt;/code&gt; 和 &lt;code&gt;intl&lt;/code&gt;)的依赖关系，这两个包都托管在 pub.dev 站点上:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;nl&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_app&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;dependencies:&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;js:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;intl:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于创建 pubspec 的详细信息，请参见 &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec 文档&lt;/a&gt;和你要使用的包的文档。&lt;/p&gt;
&lt;h2 id=&#34;获取软件包&#34;&gt;获取软件包&lt;/h2&gt;
&lt;p&gt;一旦你有了 pubspec，你就可以从你的应用程序的顶级目录中运行 &lt;code&gt;pub get&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &amp;lt;path-to-my_app&amp;gt;
$ pub get
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个过程被称为获取依赖关系。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pub get&lt;/code&gt; 命令可以确定您的应用程序依赖于哪些软件包，并将它们放在中央&lt;a href=&#34;https://dart.dev/tools/pub/glossary#system-cache&#34;&gt;系统缓存&lt;/a&gt;中。如果您的应用程序依赖于已发布的包，pub 会从 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt; 站点下载该包。对于  &lt;a href=&#34;https://dart.dev/tools/pub/dependencies#git-packages&#34;&gt;Git 依赖&lt;/a&gt;，pub 会克隆 Git 仓库。还包括了过渡性依赖。例如，如果 &lt;code&gt;js&lt;/code&gt; 包依赖于 &lt;code&gt;test&lt;/code&gt; 包，&lt;code&gt;pub&lt;/code&gt; 会同时抓取 &lt;code&gt;js&lt;/code&gt; 包和 &lt;code&gt;test&lt;/code&gt; 包。&lt;/p&gt;
&lt;p&gt;Pub 会创建一个 &lt;code&gt;.packages&lt;/code&gt; 文件(在你的应用程序的顶层目录下)，将你的应用程序所依赖的每个包名映射到系统缓存中的对应包。&lt;/p&gt;
&lt;h2 id=&#34;从包中导入库&#34;&gt;从包中导入库&lt;/h2&gt;
&lt;p&gt;要导入在包中找到的库，使用 &lt;code&gt;package:&lt;/code&gt; 前缀:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:js/js.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;js&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:intl/intl.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dart 运行时在 &lt;code&gt;package:&lt;/code&gt; 之后的所有内容都会在应用程序的 &lt;code&gt;.package&lt;/code&gt; 文件中进行查找。&lt;/p&gt;
&lt;p&gt;你也可以使用这种风格从你自己的包中导入库。比方说，&lt;code&gt;transmogrify&lt;/code&gt; 包的布局如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;transmogrify/
  lib/
    transmogrify.dart
    parser.dart
  test/
    parser/
      parser_test.dart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;parser_test.dart&lt;/code&gt; 文件可以这样导入 &lt;code&gt;parser.dart&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:transmogrify/parser.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;升级依赖关系&#34;&gt;升级依赖关系&lt;/h2&gt;
&lt;p&gt;当你第一次为你的软件包获取一个新的依赖关系时，pub 会下载与你的其他依赖关系兼容的最新版本。然后，它通过创建一个 &lt;strong&gt;lockfile&lt;/strong&gt; 锁文件来锁定您的软件包，使其始终使用该版本。这是一个名为 &lt;code&gt;pubspec.lock&lt;/code&gt; 的文件，由 pub 创建并存储在 pubspec 的旁边。它列出了您的软件包所使用的每个依赖关系的特定版本 (即时的和过渡的)。&lt;/p&gt;
&lt;p&gt;如果你的包是一个应用程序包，你应该把这个文件检查到&lt;a href=&#34;https://dart.dev/guides/libraries/private-files&#34;&gt;源代码控制&lt;/a&gt;中。这样，在你的应用程序上工作的每个人都会使用所有包的相同版本。在 lockfile 文件中检查也可以确保你部署的应用使用相同版本的代码。&lt;/p&gt;
&lt;p&gt;当你准备好将你的依赖项升级到最新版本时，使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-upgrade&#34;&gt;pub upgrade&lt;/a&gt; 命令:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;upgrade&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pub upgrade&lt;/code&gt; 命令告诉 pub 使用你的包的依赖关系的最新版本来重新生成 lockfile 文件。如果你只想升级一个依赖关系，你可以指定要升级的软件包:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;upgrade&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transmogrify&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该命令将 &lt;code&gt;transmogrify&lt;/code&gt; 升级到最新版本，但其他一切都保持不变。&lt;/p&gt;
&lt;p&gt;由于 pubspec 中有冲突的版本限制，&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-upgrade&#34;&gt;pub upgrade&lt;/a&gt; 命令并不能总是将每个软件包升级到最新版本。要识别需要编辑 pubspec 的过期软件包，请使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-outdated&#34;&gt;pub outdated&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;更多信息&#34;&gt;更多信息&lt;/h2&gt;
&lt;p&gt;下面的页面有更多关于软件包和 pub 包管理器的信息。&lt;/p&gt;
&lt;p&gt;如何使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/create-library-packages&#34;&gt;创建包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/publishing&#34;&gt;发布包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/dependencies&#34;&gt;Pub 依赖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/environment-variables&#34;&gt;Pub 环境变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/glossary&#34;&gt;Pub 词汇表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/package-layout&#34;&gt;Pub 包布局约定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/versioning&#34;&gt;Pub 版本哲学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;Pubspec 格式化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pub 命令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pub&lt;/code&gt; 工具提供了以下命令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-cache&#34;&gt;pub cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-deps&#34;&gt;pub deps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-downgrade&#34;&gt;pub downgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-get&#34;&gt;pub get&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-global&#34;&gt;pub global&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-outdated&#34;&gt;pub outdated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-lish&#34;&gt;pub publish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-run&#34;&gt;pub run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-upgrade&#34;&gt;pub upgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-uploader&#34;&gt;pub uploader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关所有 pub 命令的概述，请参阅 &lt;a href=&#34;https://dart.dev/tools/pub/cmd&#34;&gt;pub 工具文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;疑难解答&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dart.dev/tools/pub/troubleshoot&#34;&gt;故障排除 pub&lt;/a&gt; 提供了使用 pub 时可能遇到的问题的解决方案。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/packages">packages</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/how-to-use-packages/</guid>
                <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>常用的包</title>
                <link>https://ohmyweekly.github.io/notes/commonly-used-packages/</link>
                
                
                <description>&lt;blockquote&gt;Commonly used packages&lt;/blockquote&gt;&lt;p&gt;本页列出了一些  Dart 开发者发布的最流行和最有用的&lt;a href=&#34;https://dart.dev/guides/packages&#34;&gt;包&lt;/a&gt;。要找到更多的软件包&amp;ndash;也可以搜索&lt;a href=&#34;https://dart.dev/guides/libraries&#34;&gt;核心库&lt;/a&gt;&amp;ndash;请使用 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt; 网站。&lt;/p&gt;
&lt;p&gt;常用的软件包可分为三类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/useful-libraries#general-purpose-packages&#34;&gt;通用包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/useful-libraries#packages-that-correspond-to-sdk-libraries&#34;&gt;扩展 Dart 核心库的包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/useful-libraries#specialized-packages&#34;&gt;特定的包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通用包&#34;&gt;通用包&lt;/h2&gt;
&lt;p&gt;以下包对各种项目都很有用:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;包&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;常用的 API&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/archive&#34;&gt;archive&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对各种档案和压缩格式进行编码和解码。&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Archive, ArchiveFile, TarEncoder, TarDecoder, ZipEncoder, ZipDecoder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/characters&#34;&gt;characters&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对用户感知的字符进行字符串操作(Unicode 字符簇)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String.characters, Characters, CharacterRange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/http&#34;&gt;http&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一组高级的函数和类，使其易于消费 HTTP 资源&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;delete(), get(), post(), read()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/intl&#34;&gt;intl&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;国际化和本地化设施，支持复数和性别、日期和数字格式化和解析以及双向文本&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bidi, DateFormat, MicroMoney, TextDirection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/json_serializable&#34;&gt;json_serializable&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个易于使用的代码生成包。更多信息，请参阅 &lt;a href=&#34;https://dart.dev/guides/json&#34;&gt;JSON 支持&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;@JsonSerializable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/logging&#34;&gt;logging&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个可配置的机制，为你的应用程序添加消息记录&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LoggerHandler, Level, LogRecord&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/mockito&#34;&gt;mockito&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个在测试中模拟对象的流行框架。如果你正在编写依赖注入的测试，特别有用。与 &lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;test&lt;/a&gt; 包一起使用&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Answering, Expectation, Verification&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/path&#34;&gt;path&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;操作不同类型路径的常用操作。更多信息，请参见&lt;a href=&#34;https://news.dartlang.org/2016/06/unboxing-packages-path.html&#34;&gt;拆包: path&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;absolute(), basename(), extension(), join(), normalize(), relative(), split()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/quiver&#34;&gt;quiver&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;实用工具，使 Dart 核心库的使用更加方便。Quiver 提供额外支持的一些库包括 async、cache、collection、core、iterables、pattern 和 测试&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CountdownTimer (quiver.async); MapCache (quiver.cache); MultiMap, TreeSet (quiver.collection); EnumerateIterable (quiver.iterables); center(), compareIgnoreCase(), isWhiteSpace() (quiver.strings)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/shelf&#34;&gt;shelf&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dart 的 Web 服务器中间件。Shelf 使它能轻松地创建和组成 Web 服务器，以及 Web 服务器的一部分&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cascade, Pipeline, Request, Response, Server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/stack_trace&#34;&gt;stack_trace&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用于解析、检查和处理由底层 Dart 实现产生的堆栈痕迹的方法。还提供了以比原生 StackTrace 实现更可读的格式生成堆栈跟踪的字符串表示的函数,  更多信息，请参见&lt;a href=&#34;https://news.dartlang.org/2016/01/unboxing-packages-stacktrace.html&#34;&gt;拆包: stack_trace&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Trace.current(), Trace.format(), Trace.from()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/stagehand&#34;&gt;stagehand&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个 Dart 项目生成器。当你创建一个新的应用程序时，WebStorm 和 IntelliJ 使用 Stagehand 模板，但你也可以从命令行使用模板&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般通过 IDE 或 &lt;code&gt;stagehand&lt;/code&gt; 命令来使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;test&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 Dart 中编写和运行测试的标准方法&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;expect(), group(), test()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/yaml&#34;&gt;yaml&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;YAML 解析器&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;loadYaml(), loadYamlStream()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;扩展-dart-核心库的包&#34;&gt;扩展 Dart 核心库的包&lt;/h2&gt;
&lt;p&gt;以下每个包都建立在一个&lt;a href=&#34;https://dart.dev/guides/libraries&#34;&gt;核心库&lt;/a&gt;的基础上，增加了功能并填补了缺失的功能:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;包&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;常用的 API&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/async&#34;&gt;async&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 dart:async 的基础上进行了扩展，增加了实用类来处理异步计算。更多信息，请参见&lt;a href=&#34;https://news.dartlang.org/2016/03/unboxing-packages-async-part-1.html&#34;&gt;拆包: async 第1部分&lt;/a&gt;、&lt;a href=&#34;https://news.dartlang.org/2016/03/unboxing-packages-async-part-2.html&#34;&gt;第2部分&lt;/a&gt;和&lt;a href=&#34;https://news.dartlang.org/2016/04/unboxing-packages-async-part-3.html&#34;&gt;第3部分&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AsyncMemoizer, CancelableOperation, FutureGroup, LazyStream, Result, StreamCompleter, StreamGroup, StreamSplitter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/collection&#34;&gt;collection&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 dart:collection 的基础上进行了扩展，增加了实用函数和类，使处理集合的工作变得更加容易。更多信息，请看&lt;a href=&#34;https://news.dartlang.org/2016/01/unboxing-packages-collection.html&#34;&gt;拆包：collection&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Equality, CanonicalizedMap, MapKeySet, MapValueSet, PriorityQueue, QueueList&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/convert&#34;&gt;convert&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 dart:convert 的基础上，增加了编码器和解码器，用于在不同的数据表现形式之间进行转换。其中一种数据表示方式是百分比编码，也被称为 URL 编码&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HexDecoder, PercentDecoder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/io&#34;&gt;io&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;包含两个库，ansi和io，以简化对文件、标准流和进程的处理。使用 ansi 库可以自定义终端输出。io 库有处理进程、stdin 和文件复制的 API&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;copyPath(), isExecutable(), ExitCode, ProcessManager, sharedStdIn&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;专用包&#34;&gt;专用包&lt;/h2&gt;
&lt;p&gt;下面是一些寻找比较专业的包的技巧，比如手机的包(Flutter)和网页开发的包。&lt;/p&gt;
&lt;h3 id=&#34;flutter-包&#34;&gt;Flutter 包&lt;/h3&gt;
&lt;p&gt;请看 Flutter 网站上的&lt;a href=&#34;https://flutter.dev/docs/development/packages-and-plugins/using-packages&#34;&gt;使用包&lt;/a&gt;。或者使用 pub.dev 网站&lt;a href=&#34;https://pub.dev/flutter&#34;&gt;搜索 Flutter 包&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;网络包&#34;&gt;网络包&lt;/h3&gt;
&lt;p&gt;参见&lt;a href=&#34;https://dart.dev/web/libraries&#34;&gt;网络库和包&lt;/a&gt;。或者使用 pub.dev 站点&lt;a href=&#34;https://pub.dev/web&#34;&gt;搜索 web 包&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;命令行和服务器软件包&#34;&gt;命令行和服务器软件包&lt;/h3&gt;
&lt;p&gt;参见&lt;a href=&#34;https://dart.dev/server/libraries&#34;&gt;命令行和服务器库和包&lt;/a&gt;。或者使用 pub.dev 站点&lt;a href=&#34;https://pub.dev/&#34;&gt;搜索其他包&lt;/a&gt;。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/packages">packages</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/commonly-used-packages/</guid>
                <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
    </channel>
</rss>


