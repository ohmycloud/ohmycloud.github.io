<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.79.0">Hugo</generator><title type="html"><![CDATA[Sizedness on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/sizedness/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/sizedness/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/sizedness/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/sizedness/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-06-22T21:24:19+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/sizedness/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Sizedness in Rust]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-04-11-sizedness-in-rust/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-call-site-dependency-injection/?utm_source=atom_feed" rel="related" type="text/html" title="Call Site Dependency Injection" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-for-the-love-of-macros/?utm_source=atom_feed" rel="related" type="text/html" title="For the Love of Macros" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-std-error-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Std Error in Rust" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-two-beautiful-rust-programs/?utm_source=atom_feed" rel="related" type="text/html" title="Two Beautiful Rust Programs" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-20-pest-grammars/?utm_source=atom_feed" rel="related" type="text/html" title="Pest Grammars" />
            
                <id>https://ohmyweekly.github.io/notes/2021-04-11-sizedness-in-rust/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-04-11T00:00:00+08:00</published>
            <updated>2021-04-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Sizedness in Rust</blockquote><h1 id="sizedness-in-rust">Sizedness in Rust</h1>
<p><strong>Table of Contents</strong></p>
<ul>
<li><a href="#intro">Intro</a></li>
<li><a href="#sizedness">Sizedness</a></li>
<li><a href="#sized-trait"><code>Sized</code> Trait</a></li>
<li><a href="#sized-in-generics"><code>Sized</code> in Generics</a></li>
<li><a href="#unsized-types">Unsized Types</a>
<ul>
<li><a href="#slices">Slices</a></li>
<li><a href="#trait-objects">Trait Objects</a></li>
<li><a href="#trait-object-limitations">Trait Object Limitations</a>
<ul>
<li><a href="#cannot-cast-unsized-types-to-trait-objects">Cannot Cast Unsized Types to Trait Objects</a></li>
<li><a href="#cannot-create-multi-trait-objects">Cannot create Multi-Trait Objects</a></li>
</ul>
</li>
<li><a href="#user-defined-unsized-types">User-Defined Unsized Types</a></li>
</ul>
</li>
<li><a href="#zero-sized-types">Zero-Sized Types</a>
<ul>
<li><a href="#unit-type">Unit Type</a></li>
<li><a href="#user-defined-unit-structs">User-Defined Unit Structs</a></li>
<li><a href="#never-type">Never Type</a></li>
<li><a href="#user-defined-pseudo-never-types">User-Defined Pseudo Never Types</a></li>
<li><a href="#phantomdata">PhantomData</a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a></li>
<li><a href="#discuss">Discuss</a></li>
<li><a href="#notifications">Notifications</a></li>
<li><a href="#further-reading">Further Reading</a></li>
</ul>
<h2 id="intro">Intro</h2>
<p>Sizedness是Rust中最重要的概念之一。它与其他语言特性有很多微妙的交集，只是以_&ldquo;x在编译时不知道大小&rdquo;_错误信息的形式出现，而这些错误信息是每个Rustacean都非常熟悉的。在这篇文章中，我们将探讨从大小类型，到无大小类型，再到零大小类型的各种风味，同时研究它们的用例、好处、痛点和变通方法。</p>
<p>我使用的短语表，以及它们的含义。</p>
<table>
<thead>
<tr>
<th>Phrase</th>
<th>Shorthand for</th>
</tr>
</thead>
<tbody>
<tr>
<td>sizedness</td>
<td>property of being sized or unsized</td>
</tr>
<tr>
<td>sized type</td>
<td>type with a known size at compile time</td>
</tr>
<tr>
<td>1) unsized type <em>or</em><!-- raw HTML omitted -->2) DST</td>
<td>dynamically-sized type, i.e. size not known at compile time</td>
</tr>
<tr>
<td>?sized type</td>
<td>type that may or may not be sized</td>
</tr>
<tr>
<td>unsized coercion</td>
<td>coercing a sized type into an unsized type</td>
</tr>
<tr>
<td>ZST</td>
<td>zero-sized type, i.e. instances of the type are 0 bytes in size</td>
</tr>
<tr>
<td>width</td>
<td>single unit of measurement of pointer width</td>
</tr>
<tr>
<td>1) thin pointer <em>or</em><!-- raw HTML omitted -->2) single-width pointer</td>
<td>pointer that is <em>1 width</em></td>
</tr>
<tr>
<td>1) fat pointer <em>or</em><!-- raw HTML omitted -->2) double-width pointer</td>
<td>pointer that is <em>2 widths</em></td>
</tr>
<tr>
<td>1) pointer <em>or</em><!-- raw HTML omitted -->2) reference</td>
<td>some pointer of some width, width will be clarified by context</td>
</tr>
<tr>
<td>slice</td>
<td>double-width pointer to a dynamically sized view into some array</td>
</tr>
</tbody>
</table>
<h2 id="sizedness">Sizedness</h2>
<p>在 Rust 中，如果在编译时可以确定类型的字节大小，那么就可以确定类型的大小。确定一个类型的大小对于能够在栈上为该类型的实例分配足够的空间是很重要的。固定大小的类型可以通过值或引用来传递。如果一个类型的大小不能在编译时确定，那么它被称为不确定大小类型或 DST，动态大小类型。由于不确定大小类型不能被放置在栈上，它们只能通过引用来传递。下面是一些固定大小类型和不确定大小类型的例子。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">mem</span>::<span class="n">size_of</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// primitives
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="kt">f64</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// tuples
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="p">(</span><span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="kt">i32</span><span class="p">)</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// arrays
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="p">[</span><span class="kt">i32</span><span class="p">;</span><span class="w"> </span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="p">[</span><span class="kt">i32</span><span class="p">;</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">struct</span> <span class="nc">Point</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">x</span>: <span class="kt">i32</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">y</span>: <span class="kt">i32</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// structs
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// enums
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="nb">Option</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// get pointer width, will be
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 4 bytes wide on 32-bit targets or
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 8 bytes wide on 64-bit targets
</span><span class="c1"></span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">WIDTH</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="p">()</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// pointers to sized types are 1 width
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="k">mut</span><span class="w"> </span><span class="kt">i32</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="k">fn</span><span class="p">(</span><span class="kt">i32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">i32</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">DOUBLE_WIDTH</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">WIDTH</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// unsized struct
</span><span class="c1"></span><span class="w">    </span><span class="k">struct</span> <span class="nc">Unsized</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">unsized_field</span>: <span class="p">[</span><span class="kt">i32</span><span class="p">],</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// pointers to unsized types are 2 widths
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="kt">str</span><span class="o">&gt;</span><span class="p">());</span><span class="w"> </span><span class="c1">// slice
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span><span class="o">&gt;</span><span class="p">());</span><span class="w"> </span><span class="c1">// slice
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="n">dyn</span><span class="w"> </span><span class="nb">ToString</span><span class="o">&gt;</span><span class="p">());</span><span class="w"> </span><span class="c1">// trait object
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="nb">ToString</span><span class="o">&gt;&gt;</span><span class="p">());</span><span class="w"> </span><span class="c1">// trait object
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="n">Unsized</span><span class="o">&gt;</span><span class="p">());</span><span class="w"> </span><span class="c1">// user-defined unsized type
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="c1">// unsized types
</span><span class="c1"></span><span class="w">    </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="kt">str</span><span class="o">&gt;</span><span class="p">();</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">    </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span><span class="o">&gt;</span><span class="p">();</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">    </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="nb">ToString</span><span class="o">&gt;</span><span class="p">();</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">    </span><span class="n">size_of</span>::<span class="o">&lt;</span><span class="n">Unsized</span><span class="o">&gt;</span><span class="p">();</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>我们如何确定固定大小类型的大小是直截了当的：所有原生类型和指针都有已知的大小，所有的结构体、元组、枚举和数组只是由原生类型和指针或其他嵌套的结构体、元组、枚举和数组组成，因此我们只需考虑到填充和对齐所需的额外字节，递归地计数字节即可。我们无法确定不确定大小类型的大小，原因同样简单明了：切片可以有任意数量的元素在其中，因此在运行时可以是任意大小的，trait 对象可以由任意数量的结构或枚举实现，因此在运行时也可以是任意大小的。</p>
<p><strong>专业提示</strong></p>
<ul>
<li>在Rust中，视图到数组中的动态大小的指针被称为切片。例如 <code>&amp;str</code> 是一个&quot;字符串切片&quot;, <code>&amp;[i32]</code> 一个 <em>&ldquo;i32 切片&rdquo;</em>。</li>
<li>切片是双倍宽度的，因为它们存储了一个指向数组的指针和数组中元素的数量。</li>
<li>trait 对象指针是双宽度的，因为它们存储了一个指向数据的指针和一个指向 vtable 的指针。</li>
<li>不确定大小的结构体指针是双倍宽度的，因为它们存储了一个指向结构体数据的指针和结构体的大小。</li>
<li>不确定大小的结构体只能有1个不确定大小的字段，而且必须是结构体中的最后一个字段。</li>
</ul>
<p>为了让大家真正明白关于不确定大小类型的双宽度指针的点，这里有一个比较数组和切片的注释代码示例。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">mem</span>::<span class="n">size_of</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">WIDTH</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="p">()</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">DOUBLE_WIDTH</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">WIDTH</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// data length stored in type
</span><span class="c1"></span><span class="w">    </span><span class="c1">// an [i32; 3] is an array of three i32s
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">nums</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">;</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">];</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// single-width pointer
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">;</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// can iterate over nums safely
</span><span class="c1"></span><span class="w">    </span><span class="c1">// Rust knows it&#39;s exactly 3 elements
</span><span class="c1"></span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">nums</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">sum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">num</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// unsized coercion from [i32; 3] to [i32]
</span><span class="c1"></span><span class="w">    </span><span class="c1">// data length now stored in pointer
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">nums</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">];</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// double-width pointer required to also store data length
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// can iterate over nums safely
</span><span class="c1"></span><span class="w">    </span><span class="c1">// Rust knows it&#39;s exactly 3 elements
</span><span class="c1"></span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">nums</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">sum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">num</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这里还有一个注释的代码例子，比较结构体和 trait 对象。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">mem</span>::<span class="n">size_of</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">WIDTH</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="p">()</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">DOUBLE_WIDTH</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">WIDTH</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">print</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Struct2</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">print</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;struct&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct2</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">print</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;struct2&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">print_struct</span><span class="p">(</span><span class="n">s</span>: <span class="kp">&amp;</span><span class="nc">Struct</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// always prints &#34;struct&#34;
</span><span class="c1"></span><span class="w">    </span><span class="c1">// this is known at compile-time
</span><span class="c1"></span><span class="w">    </span><span class="n">s</span><span class="p">.</span><span class="n">print</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="c1">// single-width pointer
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="n">Struct</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">print_struct2</span><span class="p">(</span><span class="n">s2</span>: <span class="kp">&amp;</span><span class="nc">Struct2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// always prints &#34;struct2&#34;
</span><span class="c1"></span><span class="w">    </span><span class="c1">// this is known at compile-time
</span><span class="c1"></span><span class="w">    </span><span class="n">s2</span><span class="p">.</span><span class="n">print</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="c1">// single-width pointer
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="n">Struct2</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">print_trait</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// print &#34;struct&#34; or &#34;struct2&#34; ?
</span><span class="c1"></span><span class="w">    </span><span class="c1">// this is unknown at compile-time
</span><span class="c1"></span><span class="w">    </span><span class="n">t</span><span class="p">.</span><span class="n">print</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="c1">// Rust has to check the pointer at run-time
</span><span class="c1"></span><span class="w">    </span><span class="c1">// to figure out whether to use Struct&#39;s
</span><span class="c1"></span><span class="w">    </span><span class="c1">// or Struct2&#39;s implementation of &#34;print&#34;
</span><span class="c1"></span><span class="w">    </span><span class="c1">// so the pointer has to be double-width
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">DOUBLE_WIDTH</span><span class="p">,</span><span class="w"> </span><span class="n">size_of</span>::<span class="o">&lt;&amp;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// single-width pointer to data
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Struct</span><span class="p">;</span><span class="w"> 
</span><span class="w">    </span><span class="n">print_struct</span><span class="p">(</span><span class="n">s</span><span class="p">);</span><span class="w"> </span><span class="c1">// prints &#34;struct&#34;
</span><span class="c1"></span><span class="w">    
</span><span class="w">    </span><span class="c1">// single-width pointer to data
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">s2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Struct2</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">print_struct2</span><span class="p">(</span><span class="n">s2</span><span class="p">);</span><span class="w"> </span><span class="c1">// prints &#34;struct2&#34;
</span><span class="c1"></span><span class="w">    
</span><span class="w">    </span><span class="c1">// unsized coercion from Struct to dyn Trait
</span><span class="c1"></span><span class="w">    </span><span class="c1">// double-width pointer to point to data AND Struct&#39;s vtable
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Struct</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">print_trait</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w"> </span><span class="c1">// prints &#34;struct&#34;
</span><span class="c1"></span><span class="w">    
</span><span class="w">    </span><span class="c1">// unsized coercion from Struct2 to dyn Trait
</span><span class="c1"></span><span class="w">    </span><span class="c1">// double-width pointer to point to data AND Struct2&#39;s vtable
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Struct2</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">print_trait</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w"> </span><span class="c1">// prints &#34;struct2&#34;
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><strong>关键要点</strong></p>
<ul>
<li>只有固定大小类型的实例才能被放置在栈上，也就是说，可以通过值来传递</li>
<li>不确定大小类型的实例不能放在栈上，必须通过引用来传递</li>
<li>指向不确定大小类型的指针是双宽度的，因为除了指向数据外，它们还需要做额外的记账工作，以跟踪数据的长度或指向一个 vtable</li>
</ul>
<h2 id="sized-trait"><code>Sized</code> Trait</h2>
<p>Rust中的 &ldquo;Sized&rdquo; trait 是一个自动 trait 和一个标记 trait。</p>
<p>自动 trait 是指当一个类型通过某些条件时，自动实现的 trait。标记 trait 是标记一个类型具有特定属性的 trait。标记 trait 没有任何 trait 项，如方法、关联函数、关联常量或关联类型。所有的自动 trait 都是标记 trait，但不是所有的标记 trait 都是自动 trait。自动 trait 必须是标记 trait，所以编译器可以为它们提供一个自动的缺省实现，如果 trait 有任何 trait 项，这是不可能的。</p>
<p>如果一个类型的所有成员也是 &ldquo;确定大小的&rdquo;，那么它就会得到一个自动的 <code>Sized</code> 实现。&ldquo;成员&quot;的含义取决于所包含的类型，例如：结构体的字段、枚举的变体、数组的元素、元组的项等等。一旦一个类型被 &ldquo;标记&rdquo; 了一个 <code>Sized</code> 的实现，这意味着在编译时就知道它的字节大小。</p>
<p>其他自动标记 trait 的例子是 <code>Send</code> 和 <code>Sync</code> trait。如果跨线程发送一个类型是安全的，那么这个类型就是可 <code>Send</code> 的。如果在线程之间共享该类型的引用是安全的，那么该类型就是可 <code>Sync</code> 的。如果一个类型的所有成员都是可 <code>Send</code> 和 <code>Sync</code> 的, 那么这个类型就会得到自动的 <code>Send</code> 和 <code>Sync</code> 实现。<code>Sized</code> 的特殊之处在于它不可能选择退出，不像其他自动标记 trait 可以选择退出。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#![feature(negative_impls)]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// this type is Sized, Send, and Sync
</span><span class="c1"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// opt-out of Send trait
</span><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="o">!</span><span class="nb">Send</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// opt-out of Sync trait
</span><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="o">!</span><span class="nb">Sync</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="o">!</span><span class="nb">Sized</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compile error
</span></code></pre></div><p>这似乎是合理的，因为我们可能有理由不希望我们的类型被跨线程发送或共享，但是很难想象我们会希望编译器 &ldquo;忘记&rdquo; 我们类型的大小，并将其视为一个不确定大小的类型，因为这不会带来任何好处，只会让类型更难处理。</p>
<p>另外，说得迂腐一点，<code>Sized</code> 在技术上并不是一个自动 trait，因为它没有使用 <code>auto</code> 关键字来定义，但是编译器对它的特殊处理使它的行为与自动 trait 非常相似，所以在实践中，把它看作是一个自动 trait 是可以的。</p>
<p><strong>关键要点</strong></p>
<ul>
<li><code>Sized</code> 是一个自动标记 trait</li>
</ul>
<h2 id="泛型中的-sized">泛型中的 <code>Sized</code></h2>
<p>每当我们编写任何泛型代码时，每一个泛型类型参数都会被默认的 <code>Sized</code> trait 自动绑定，这一点并不明显。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// this generic function...
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">func</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// ...desugars to...
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">func</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// ...which we can opt-out of by explicitly setting ?Sized...
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">func</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="c1">// ...which doesn&#39;t compile since t doesn&#39;t have
</span><span class="c1">// a known size so we must put it behind a pointer...
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">func</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">func</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span></code></pre></div><p><strong>专业提示</strong></p>
<ul>
<li><code>?Sized</code> can be pronounced <em>&ldquo;optionally sized&rdquo;</em> or <em>&ldquo;maybe sized&rdquo;</em> and adding it to a type parameter&rsquo;s bounds allows the type to be sized or unsized</li>
<li><code>?Sized</code> in general is referred to as a <em>&ldquo;widening bound&rdquo;</em> or a <em>&ldquo;relaxed bound&rdquo;</em> as it relaxes rather than constrains the type parameter</li>
<li><code>?Sized</code> is the only relaxed bound in Rust</li>
</ul>
<p>So why does this matter? Well, any time we&rsquo;re working with a generic type and that type is behind a pointer we almost always want to opt-out of the default <code>Sized</code> bound to make our function more flexible in what argument types it will accept. Also, if we don&rsquo;t opt-out of the default <code>Sized</code> bound we&rsquo;ll eventually get some surprising and confusing compile error messages.</p>
<p>Let me take you on the journey of the first generic function I ever wrote in Rust. I started learning Rust before the <code>dbg!</code> macro landed in stable so the only way to print debug values was to type out <code>println!(&quot;{:?}&quot;, some_value);</code> every time which is pretty tedious so I decided to write a <code>debug</code> helper function like this:</p>
<ul>
<li><code>?Sized</code> 可以读作 <em>&ldquo;optionally sized&rdquo;</em> 或 <em>&ldquo;maybe sized&rdquo;</em>，将它添加到类型参数的绑定中，可以让类型被确定大小或不确定大小。</li>
<li><code>?Sized</code> 一般被称为 &ldquo;拓宽绑定&rdquo; 或 &ldquo;宽松绑定&rdquo;，因为它放松而不是约束类型参数。</li>
<li><code>?Sized</code> 是 Rust 中唯一的宽松绑定。</li>
</ul>
<p>那么为什么这很重要呢？任何时候，当我们在处理泛型类型，并且该类型在一个指针后面时，我们几乎总是希望选择退出默认的 <code>Sized</code> 绑定，以使我们的函数在接受什么参数类型时更加灵活。另外，如果我们不选择退出默认的 <code>Sized</code> 绑定，我们最终会得到一些令人惊讶和困惑的编译错误信息。</p>
<p>让我带你了解一下我在 Rust 中写的第一个泛型函数的历程。在 <code>dbg!</code> 宏登陆稳定版之前，我就开始学习 Rust 了，所以打印调试值的唯一方法就是每次都要打出 <code>println!(&quot;{:?}&quot;, some_value);</code>，这是很乏味的，所以我决定写一个像这样的调试帮助函数。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fmt</span>::<span class="n">Debug</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">debug</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Debug</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// T: Debug + Sized
</span><span class="c1"></span><span class="w">    </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">t</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">debug</span><span class="p">(</span><span class="s">&#34;my str&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// T = &amp;str, &amp;str: Debug + Sized ✔️
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>到目前为止还不错，但函数会对传递给它的任何值拥有所有权，这有点烦人，所以我把函数改为只接受引用。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fmt</span>::<span class="n">Debug</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">dbg</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Debug</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// T: Debug + Sized
</span><span class="c1"></span><span class="w">    </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">t</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">dbg</span><span class="p">(</span><span class="s">&#34;my str&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// &amp;T = &amp;str, T = str, str: Debug + !Sized ❌
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>现在出现了这个错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0277</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compilation</span><span class="w"> </span><span class="n">time</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">8</span>:<span class="mi">9</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">3</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">fn</span> <span class="nf">dbg</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Debug</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">        </span><span class="o">-</span><span class="w"> </span><span class="n">required</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="n">this</span><span class="w"> </span><span class="n">bound</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="err">`</span><span class="n">dbg</span><span class="err">`</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="mi">8</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="n">dbg</span><span class="p">(</span><span class="s">&#34;my str&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">         </span><span class="o">^^^^^^^^</span><span class="w"> </span><span class="n">doesn</span><span class="na">&#39;t</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compile</span><span class="o">-</span><span class="n">time</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">std</span>::<span class="n">marker</span>::<span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">implemented</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">to</span><span class="w"> </span><span class="n">learn</span><span class="w"> </span><span class="n">more</span><span class="p">,</span><span class="w"> </span><span class="n">visit</span><span class="w"> </span><span class="o">&lt;</span><span class="n">https</span>:<span class="c1">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;
</span><span class="c1"></span><span class="n">help</span>: <span class="nc">consider</span><span class="w"> </span><span class="n">relaxing</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">implicit</span><span class="w"> </span><span class="err">`</span><span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">restriction</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">3</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">fn</span> <span class="nf">dbg</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Debug</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">   
</span></code></pre></div><p>当我第一次看到这个问题时，我发现它令人难以置信的混乱。尽管我的函数对参数的限制比以前更严格，但现在它却莫名其妙地抛出了一个编译错误！这是怎么回事？到底发生了什么？</p>
<p>我已经在上面的代码注释中破坏了答案，但基本上。Rust 在编译过程中把 <code>T</code> 解析为具体类型时，会执行模式匹配。这里有几个表格可以帮助澄清。</p>
<table>
<thead>
<tr>
<th>Type</th>
<th><code>T</code></th>
<th><code>&amp;T</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;str</code></td>
<td><code>T</code> = <code>&amp;str</code></td>
<td><code>T</code> = <code>str</code></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Type</th>
<th><code>Sized</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>str</code></td>
<td>❌</td>
</tr>
<tr>
<td><code>&amp;str</code></td>
<td>✔️</td>
</tr>
<tr>
<td><code>&amp;&amp;str</code></td>
<td>✔️</td>
</tr>
</tbody>
</table>
<p>这也是为什么我不得不在改成取用引用后，加了一个 <code>?Sized</code> 的绑定，使函数能正常工作。下面是可以工作的函数。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fmt</span>::<span class="n">Debug</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">debug</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Debug</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// T: Debug + ?Sized
</span><span class="c1"></span><span class="w">    </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">t</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">debug</span><span class="p">(</span><span class="s">&#34;my str&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// &amp;T = &amp;str, T = str, str: Debug + !Sized ✔️
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><strong>关键要点</strong></p>
<ul>
<li>所有的泛型类型参数默认都是自动绑定 <code>Sized</code>。</li>
<li>如果我们有一个泛型函数，它的参数是指针后面的一些 <code>T</code>，例如 <code>&amp;T</code>、<code>Box&lt;T&gt;</code>、<code>Rc&lt;T&gt;</code> 等，那么我们几乎总是希望用<code>T: ?Sized</code> 来退出默认的 <code>Sized</code> 约束。</li>
</ul>
<h2 id="unsized-类型">Unsized 类型</h2>
<h3 id="切片">切片</h3>
<p>最常见的切片是字符串切片 <code>&amp;str</code> 和数组切片 <code>&amp;[T]</code>。切片的好处是许多其他类型也会对其进行 coerce，所以利用切片和 Rust 的自动类型 coerce，我们可以编写灵活的 API。</p>
<p>类型 coerce 可以发生在几个地方，但最明显的是在函数参数和方法调用时。我们感兴趣的类型 coerce 是 deref coerce 和 unsized coerce。deref coerce 是指当 <code>T</code> 在 deref 操作之后被 coerce 成一个 <code>U</code>，即 <code>T: Deref&lt;Target = U&gt;</code>，例如 <code>String.deref() -&gt; str</code>。不确定大小 coerce 是指 <code>T</code> 被 coerce 成 <code>U</code>，其中 <code>T</code> 是一个确定大小的类型，<code>U</code> 是一个不确定大小的类型，即 <code>T: Unsize&lt;U&gt;</code>，例如 <code>[i32; 3] -&gt; [i32]</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// can now call &#34;method&#34; on
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 1) str or
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 2) String since String: Deref&lt;Target = str&gt;
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// can now call &#34;method&#34; on
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 1) any &amp;[T]
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 2) any U where U: Deref&lt;Target = [T]&gt;, e.g. Vec&lt;T&gt;
</span><span class="c1"></span><span class="w">    </span><span class="c1">// 3) [T; N] for any N, since [T; N]: Unsize&lt;[T]&gt;
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">str_fun</span><span class="p">(</span><span class="n">s</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">slice_fun</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">s</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="n">T</span><span class="p">])</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">str_slice</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="s">&#34;str slice&#34;</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">string</span>: <span class="nb">String</span> <span class="o">=</span><span class="w"> </span><span class="s">&#34;string&#34;</span><span class="p">.</span><span class="n">to_owned</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// function args
</span><span class="c1"></span><span class="w">    </span><span class="n">str_fun</span><span class="p">(</span><span class="n">str_slice</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">str_fun</span><span class="p">(</span><span class="o">&amp;</span><span class="n">string</span><span class="p">);</span><span class="w"> </span><span class="c1">// deref coercion
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="c1">// method calls
</span><span class="c1"></span><span class="w">    </span><span class="n">str_slice</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">string</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// deref coercion
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">slice</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">three_array</span>: <span class="p">[</span><span class="kt">i32</span><span class="p">;</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">];</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">five_array</span>: <span class="p">[</span><span class="kt">i32</span><span class="p">;</span><span class="w"> </span><span class="mi">5</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">];</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">vec</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// function args
</span><span class="c1"></span><span class="w">    </span><span class="n">slice_fun</span><span class="p">(</span><span class="n">slice</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">slice_fun</span><span class="p">(</span><span class="o">&amp;</span><span class="n">vec</span><span class="p">);</span><span class="w"> </span><span class="c1">// deref coercion
</span><span class="c1"></span><span class="w">    </span><span class="n">slice_fun</span><span class="p">(</span><span class="o">&amp;</span><span class="n">three_array</span><span class="p">);</span><span class="w"> </span><span class="c1">// unsized coercion
</span><span class="c1"></span><span class="w">    </span><span class="n">slice_fun</span><span class="p">(</span><span class="o">&amp;</span><span class="n">five_array</span><span class="p">);</span><span class="w"> </span><span class="c1">// unsized coercion
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="c1">// method calls
</span><span class="c1"></span><span class="w">    </span><span class="n">slice</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">vec</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// deref coercion
</span><span class="c1"></span><span class="w">    </span><span class="n">three_array</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// unsized coercion
</span><span class="c1"></span><span class="w">    </span><span class="n">five_array</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// unsized coercion
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><strong>关键要点</strong></p>
<ul>
<li>利用切片和 Rust 的自动类型强制，我们可以编写灵活的 API。</li>
</ul>
<h3 id="trait-对象">Trait 对象</h3>
<p>Traits 默认是 <code>?Sized</code> 的。这个程序:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>抛出这个错误:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span>: <span class="err">`</span><span class="o">?</span><span class="n">Trait</span><span class="err">`</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">permitted</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">supertraits</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">1</span>:<span class="mi">14</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">1</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">              </span><span class="o">^^^^^^</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">traits</span><span class="w"> </span><span class="n">are</span><span class="w"> </span><span class="err">`</span><span class="o">?</span><span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="n">default</span><span class="w">
</span></code></pre></div><p>我们很快就会讨论为什么 trait 默认为 <code>?Sized</code>，但首先让我们问问自己，一个 trait 被 <code>?Sized</code> 的含义是什么？让我们把上面的例子去掉。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">Self</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>好的，默认情况下，trait 允许 <code>self</code> 是一个不确定大小的类型。正如我们前面所学，我们不能通过值来传递不确定大小的类型，所以这限制了我们在 trait 中定义方法的种类。应该是不可能写出一个通过取值来获取或返回 <code>self</code> 的方法，然而这令人惊讶的是，它的编译:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">);</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>然而，当我们试图实现该方法时，无论是通过提供一个默认的实现，还是通过实现一个不确定大小类型的 trait，我们都会得到编译错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>抛出:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0277</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="n">Self</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compilation</span><span class="w"> </span><span class="n">time</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">2</span>:<span class="mi">15</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">2</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">               </span><span class="o">^^^^</span><span class="w"> </span><span class="n">doesn</span><span class="na">&#39;t</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compile</span><span class="o">-</span><span class="n">time</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">std</span>::<span class="n">marker</span>::<span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">implemented</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="err">`</span><span class="n">Self</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">to</span><span class="w"> </span><span class="n">learn</span><span class="w"> </span><span class="n">more</span><span class="p">,</span><span class="w"> </span><span class="n">visit</span><span class="w"> </span><span class="o">&lt;</span><span class="n">https</span>:<span class="c1">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;
</span><span class="c1"></span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">all</span><span class="w"> </span><span class="n">local</span><span class="w"> </span><span class="n">variables</span><span class="w"> </span><span class="n">must</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">statically</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">size</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">unsized</span><span class="w"> </span><span class="n">locals</span><span class="w"> </span><span class="n">are</span><span class="w"> </span><span class="n">gated</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">an</span><span class="w"> </span><span class="n">unstable</span><span class="w"> </span><span class="n">feature</span><span class="w">
</span><span class="w"></span><span class="n">help</span>: <span class="nc">consider</span><span class="w"> </span><span class="n">further</span><span class="w"> </span><span class="n">restricting</span><span class="w"> </span><span class="err">`</span><span class="n">Self</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">2</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">Self</span>: <span class="nc">std</span>::<span class="n">marker</span>::<span class="nb">Sized</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                     </span><span class="o">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">error</span><span class="p">[</span><span class="n">E0277</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compilation</span><span class="w"> </span><span class="n">time</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">6</span>:<span class="mi">15</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">6</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">               </span><span class="o">^^^^</span><span class="w"> </span><span class="n">doesn</span><span class="na">&#39;t</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compile</span><span class="o">-</span><span class="n">time</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">std</span>::<span class="n">marker</span>::<span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">implemented</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">to</span><span class="w"> </span><span class="n">learn</span><span class="w"> </span><span class="n">more</span><span class="p">,</span><span class="w"> </span><span class="n">visit</span><span class="w"> </span><span class="o">&lt;</span><span class="n">https</span>:<span class="c1">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;
</span><span class="c1"></span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">all</span><span class="w"> </span><span class="n">local</span><span class="w"> </span><span class="n">variables</span><span class="w"> </span><span class="n">must</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">statically</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">size</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">unsized</span><span class="w"> </span><span class="n">locals</span><span class="w"> </span><span class="n">are</span><span class="w"> </span><span class="n">gated</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">an</span><span class="w"> </span><span class="n">unstable</span><span class="w"> </span><span class="n">feature</span><span class="w">
</span></code></pre></div><p>如果我们决心通过值来传递 <code>self</code>，我们可以通过显式绑定 trait 与 <code>Sized</code> 来解决第一个错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="nb">Sized</span> <span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>现在抛出:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0277</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compilation</span><span class="w"> </span><span class="n">time</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">7</span>:<span class="mi">6</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">1</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="nb">Sized</span> <span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">              </span><span class="o">-----</span><span class="w"> </span><span class="n">required</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="n">this</span><span class="w"> </span><span class="n">bound</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="err">`</span><span class="n">Trait</span><span class="err">`</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="mi">7</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">      </span><span class="o">^^^^^</span><span class="w"> </span><span class="n">doesn</span><span class="na">&#39;t</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compile</span><span class="o">-</span><span class="n">time</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">std</span>::<span class="n">marker</span>::<span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">implemented</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">to</span><span class="w"> </span><span class="n">learn</span><span class="w"> </span><span class="n">more</span><span class="p">,</span><span class="w"> </span><span class="n">visit</span><span class="w"> </span><span class="o">&lt;</span><span class="n">https</span>:<span class="c1">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;
</span></code></pre></div><p>这并没有问题，因为我们知道，当我们将 trait 与 <code>Sized</code> 绑定后，我们就不能再为诸如 <code>str</code> 这样的不确定大小类型实现它了。另一方面，如果我们真的想为 <code>str</code> 实现 trait，另一种解决方案是保留 <code>?Sized</code> trait，并通过引用传递 <code>self</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>与其将整个 trait 标记为 <code>?Sized</code> 或 <code>Sized</code>，我们有更细化和精确的选择，将单个方法标记为 <code>Sized</code>，像这样。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">Self</span>: <span class="nb">Sized</span> <span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles!?
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="s">&#34;str&#34;</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>令人惊讶的是，Rust编译 <code>impl Trait for str {}</code> 时没有任何抱怨，但当我们试图在一个不确定大小的类型上调用 <code>method</code> 时，它最终还是抓到了错误，所以一切正常。这有点怪异，但为我们提供了一些灵活性，只要我们从不调用 <code>Sized</code> 方法，我们就可以用一些 <code>Sized</code> 方法为不确定大小的类型实现 trait。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">Self</span>: <span class="nb">Sized</span> <span class="p">{}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method2</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// we never call &#34;method&#34; so no errors
</span><span class="c1"></span><span class="w">    </span><span class="s">&#34;str&#34;</span><span class="p">.</span><span class="n">method2</span><span class="p">();</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>现在回到最初的问题，为什么 trait 默认是 <code>?Sized</code>？答案是 trait 对象。trait 对象本质上是不确定大小的，因为任何大小的类型都可以实现 trait，因此我们只有在 <code>Trait: ?Sized</code> 的情况下，才能为 <code>dyn Trait</code> 实现 <code>Trait</code>。用代码来说：</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// the above is REQUIRED for
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// compiler magic here
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// since `dyn Trait` is unsized
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="c1">// and now we can use `dyn Trait` in our program
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compiles
</span></code></pre></div><p>如果我们尝试实际编译上述程序，我们会得到：</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0371</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="n">object</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="p">(</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">&#39;static</span><span class="p">)</span><span class="err">`</span><span class="w"> </span><span class="n">automatically</span><span class="w"> </span><span class="n">implements</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait</span><span class="err">`</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">5</span>:<span class="mi">1</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">5</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="o">^^^^^^^^^^^^^^^^^^^^^^^^</span><span class="w"> </span><span class="err">`</span><span class="p">(</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">&#39;static</span><span class="p">)</span><span class="err">`</span><span class="w"> </span><span class="n">automatically</span><span class="w"> </span><span class="n">implements</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait</span><span class="err">`</span><span class="w">
</span></code></pre></div><p>这就是编译器告诉我们要冷静，因为它自动为 <code>dyn Trait</code> 提供了 <code>Trait</code> 的实现。同样，由于 <code>dyn Trait</code> 是不确定大小的，编译器只能在 <code>Trait: ?Sized</code> 的情况下提供这个实现。如果我们将 <code>Trait</code> 与 <code>Sized</code> 绑定，那么 <code>Trait</code> 就变成了 &ldquo;对象不安全&rdquo; 的了，这意味着我们不能将实现 <code>Trait</code> 的类型转为 <code>dyn Trait</code> 的 trait 对象。正如预期的那样，这个程序不能编译:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="nb">Sized</span> <span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// compile error
</span></code></pre></div><p>抛出:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0038</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">made</span><span class="w"> </span><span class="n">into</span><span class="w"> </span><span class="n">an</span><span class="w"> </span><span class="n">object</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">3</span>:<span class="mi">18</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">1</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span>: <span class="nb">Sized</span> <span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">       </span><span class="o">-----</span><span class="w">  </span><span class="o">-----</span><span class="w"> </span><span class="p">...</span><span class="n">because</span><span class="w"> </span><span class="n">it</span><span class="w"> </span><span class="n">requires</span><span class="w"> </span><span class="err">`</span><span class="n">Self</span>: <span class="nb">Sized</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">       </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">       </span><span class="n">this</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">made</span><span class="w"> </span><span class="n">into</span><span class="w"> </span><span class="n">an</span><span class="w"> </span><span class="n">object</span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="mi">2</span><span class="w"> </span><span class="o">|</span><span class="w"> 
</span><span class="w"></span><span class="mi">3</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                </span><span class="o">^^^^^^^^^^</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">made</span><span class="w"> </span><span class="n">into</span><span class="w"> </span><span class="n">an</span><span class="w"> </span><span class="n">object</span><span class="w">
</span></code></pre></div><p>让我们尝试用 <code>Sized</code> 方法制作一个 <code>?Sized</code> trait，看看能否将它转一个 trait 对象。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">Self</span>: <span class="nb">Sized</span> <span class="p">{}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method2</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">arg</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="w">    </span><span class="n">arg</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">    </span><span class="n">arg</span><span class="p">.</span><span class="n">method2</span><span class="p">();</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>正如我们之前看到的那样，只要我们不调用 trait 对象上的 <code>Sized</code> 方法，一切都没问题。</p>
<p><strong>关键要点</strong></p>
<ul>
<li>所有的 traits 默认都是 <code>?Sized</code> 的。</li>
<li><code>Trait: ?Sized</code> 是 <code>impl Trait for dyn Trait</code> 所必需的。</li>
<li>我们可以在每个方法的基础上要求 <code>Self: Sized</code>。</li>
<li>由 <code>Sized</code> 绑定的 trait 不能成为 trait 对象。</li>
</ul>
<h3 id="trait-对象限制">trait 对象限制</h3>
<p>即使一个 traitt 是对象安全的，也会有一些与大小相关的边缘情况，这些情况限制了哪些类型可以转换为 trait 对象，以及一个 trait 对象可以表示多少个和什么样的 trait。</p>
<h4 id="不能将不确定大小的类型转换为--trait-对象">不能将不确定大小的类型转换为  Trait 对象</h4>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">generic</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nb">ToString</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">trait_object</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="nb">ToString</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">generic</span><span class="p">(</span><span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;String&#34;</span><span class="p">));</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="w">    </span><span class="n">generic</span><span class="p">(</span><span class="s">&#34;str&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="w">    </span><span class="n">trait_object</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;String&#34;</span><span class="p">));</span><span class="w"> </span><span class="c1">// compiles, unsized coercion
</span><span class="c1"></span><span class="w">    </span><span class="n">trait_object</span><span class="p">(</span><span class="s">&#34;str&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// compile error, unsized coercion impossible
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>抛出:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0277</span><span class="p">]</span>: <span class="nc">the</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w"> </span><span class="n">cannot</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compilation</span><span class="w"> </span><span class="n">time</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">8</span>:<span class="mi">18</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">8</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="n">trait_object</span><span class="p">(</span><span class="s">&#34;str&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">  </span><span class="o">|</span><span class="w">                  </span><span class="o">^^^^^</span><span class="w"> </span><span class="n">doesn</span><span class="na">&#39;t</span><span class="w"> </span><span class="n">have</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="n">known</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">compile</span><span class="o">-</span><span class="n">time</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">help</span>: <span class="nc">the</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">std</span>::<span class="n">marker</span>::<span class="nb">Sized</span><span class="err">`</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">implemented</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="err">`</span><span class="kt">str</span><span class="err">`</span><span class="w">
</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">to</span><span class="w"> </span><span class="n">learn</span><span class="w"> </span><span class="n">more</span><span class="p">,</span><span class="w"> </span><span class="n">visit</span><span class="w"> </span><span class="o">&lt;</span><span class="n">https</span>:<span class="c1">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;
</span><span class="c1"></span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">required</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">cast</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">object</span><span class="w"> </span><span class="k">type</span> <span class="err">`</span><span class="n">dyn</span><span class="w"> </span><span class="n">std</span>::<span class="n">string</span>::<span class="nb">ToString</span><span class="err">`</span><span class="w">
</span></code></pre></div><p>为什么将一个 <code>&amp;String</code> 传给一个期望得到 <code>&amp;dyn ToString</code> 的函数，是因为类型胁迫。<code>String</code> 实现了 <code>ToString</code>，我们可以通过不确定大小的胁迫将 <code>String</code> 这样的确定大小的类型转换成 <code>dyn ToString</code> 这样的不确定大小的类型。<code>str</code> 也实现了 <code>ToString</code>，将 <code>str</code> 转换为 <code>dyn ToString</code> 也需要一个不确定大小的胁迫，但 <code>str</code> 已经是不确定大小的了！我们如何将一个已经是不确定大小的类型，变成另一个不确定大小的类型？</p>
<p><code>&amp;str</code> 指针是双宽的，存储一个数据指针和数据长度。<code>&amp;dyn ToString</code> 指针也是双宽度的，存储一个指向数据的指针和一个指向 vtable 的指针。要把一个 <code>&amp;str</code> 胁迫成一个 <code>&amp;dyn toString</code>，就需要一个三倍宽度的指针来存储一个指向数据的指针、数据长度和一个指向 vtable 的指针。Rust 不支持三倍宽度指针，所以不可能将一个不确定大小的类型转换成一个 trait 对象。</p>
<p>前面2段用表格总结了一下。</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Pointer to Data</th>
<th>Data Length</th>
<th>Pointer to VTable</th>
<th>Total Width</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;String</code></td>
<td>✔️</td>
<td>❌</td>
<td>❌</td>
<td>1 ✔️</td>
</tr>
<tr>
<td><code>&amp;str</code></td>
<td>✔️</td>
<td>✔️</td>
<td>❌</td>
<td>2 ✔️</td>
</tr>
<tr>
<td><code>&amp;String as &amp;dyn ToString</code></td>
<td>✔️</td>
<td>❌</td>
<td>✔️</td>
<td>2 ✔️</td>
</tr>
<tr>
<td><code>&amp;str as &amp;dyn ToString</code></td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>3 ❌</td>
</tr>
</tbody>
</table>
<h4 id="不能创建-multi-trait-对象">不能创建 Multi-Trait 对象</h4>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="p">(</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="p">))</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>抛出:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0225</span><span class="p">]</span>: <span class="nc">only</span><span class="w"> </span><span class="n">auto</span><span class="w"> </span><span class="n">traits</span><span class="w"> </span><span class="n">can</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">used</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">additional</span><span class="w"> </span><span class="n">traits</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">object</span><span class="w">
</span><span class="w"> </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">4</span>:<span class="mi">30</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">4</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="p">(</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="p">))</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                      </span><span class="o">-----</span><span class="w">   </span><span class="o">^^^^^^</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                      </span><span class="o">|</span><span class="w">       </span><span class="o">|</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                      </span><span class="o">|</span><span class="w">       </span><span class="n">additional</span><span class="w"> </span><span class="n">non</span><span class="o">-</span><span class="n">auto</span><span class="w"> </span><span class="k">trait</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                      </span><span class="o">|</span><span class="w">       </span><span class="k">trait</span><span class="w"> </span><span class="n">alias</span><span class="w"> </span><span class="n">used</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">object</span><span class="w"> </span><span class="k">type</span> <span class="p">(</span><span class="n">additional</span><span class="w"> </span><span class="k">use</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                      </span><span class="n">first</span><span class="w"> </span><span class="n">non</span><span class="o">-</span><span class="n">auto</span><span class="w"> </span><span class="k">trait</span><span class="w">
</span><span class="w">  </span><span class="o">|</span><span class="w">                      </span><span class="k">trait</span><span class="w"> </span><span class="n">alias</span><span class="w"> </span><span class="n">used</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">object</span><span class="w"> </span><span class="k">type</span> <span class="p">(</span><span class="n">first</span><span class="w"> </span><span class="k">use</span><span class="p">)</span><span class="w">
</span></code></pre></div><p>请记住，trait 对象指针是双宽度的：存储1个指向数据的指针和另一个指向 vtable 的指针，但这里有2个trait，所以有2个 vtable，这就需要 <code>&amp;(dyn Trait + Trait2)</code> 指针是3个宽度。像 <code>Send</code> 和 <code>Sync</code> 这样的自动 trait 是允许的，因为它们没有方法，因此没有 vtable。</p>
<p>这方面的变通方法是通过使用另一个 trait 来组合 vtable，比如这样。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method2</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait3</span>: <span class="nc">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// auto blanket impl Trait3 for any type that also impls Trait &amp; Trait2
</span><span class="c1"></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Trait3</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">T</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// from `dyn Trait + Trait2` to `dyn Trait3` 
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait3</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">t</span><span class="p">.</span><span class="n">method</span><span class="p">();</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="w">    </span><span class="n">t</span><span class="p">.</span><span class="n">method2</span><span class="p">();</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这个变通方法的一个缺点是，Rust 不支持 supertrait 向上转换。这意味着，如果我们有一个 <code>dyn Trait3</code>，我们不能在需要 <code>dyn Trait</code> 或 <code>dyn Trait2</code> 的地方使用它。这个程序不能编译。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">method2</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait3</span>: <span class="nc">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Trait3</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">T</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">takes_trait</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">takes_trait2</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait2</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Struct</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">takes_trait</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="w">    </span><span class="n">takes_trait2</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w"> </span><span class="c1">// compile error
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>抛出:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">error</span><span class="p">[</span><span class="n">E0308</span><span class="p">]</span>: <span class="nc">mismatched</span><span class="w"> </span><span class="n">types</span><span class="w">
</span><span class="w">  </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">22</span>:<span class="mi">17</span><span class="w">
</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">22</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="n">takes_trait</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w">
</span><span class="w">   </span><span class="o">|</span><span class="w">                 </span><span class="o">^</span><span class="w"> </span><span class="n">expected</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait</span><span class="err">`</span><span class="p">,</span><span class="w"> </span><span class="n">found</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait3</span><span class="err">`</span><span class="w">
</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">expected</span><span class="w"> </span><span class="n">reference</span><span class="w"> </span><span class="err">`</span><span class="o">&amp;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="err">`</span><span class="w">
</span><span class="w">              </span><span class="n">found</span><span class="w"> </span><span class="n">reference</span><span class="w"> </span><span class="err">`</span><span class="o">&amp;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait3</span><span class="err">`</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">error</span><span class="p">[</span><span class="n">E0308</span><span class="p">]</span>: <span class="nc">mismatched</span><span class="w"> </span><span class="n">types</span><span class="w">
</span><span class="w">  </span><span class="o">-</span>-&gt; <span class="nc">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span>:<span class="mi">23</span>:<span class="mi">18</span><span class="w">
</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="mi">23</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="n">takes_trait2</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w">
</span><span class="w">   </span><span class="o">|</span><span class="w">                  </span><span class="o">^</span><span class="w"> </span><span class="n">expected</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait2</span><span class="err">`</span><span class="p">,</span><span class="w"> </span><span class="n">found</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="err">`</span><span class="n">Trait3</span><span class="err">`</span><span class="w">
</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="n">note</span>: <span class="nc">expected</span><span class="w"> </span><span class="n">reference</span><span class="w"> </span><span class="err">`</span><span class="o">&amp;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait2</span><span class="err">`</span><span class="w">
</span><span class="w">              </span><span class="n">found</span><span class="w"> </span><span class="n">reference</span><span class="w"> </span><span class="err">`</span><span class="o">&amp;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Trait3</span><span class="err">`</span><span class="w">
</span></code></pre></div><p>这是因为 <code>dyn Trait3</code> 是一个不同于 <code>dyn Trait</code> 和 <code>dyn Trait</code> 的类型，因为它们有不同的 vtable 布局，尽管  <code>dyn Trait3</code> 确实包含 <code>dyn Trait</code> 和 <code>dyn Trait2</code> 的所有方法。这里的变通办法是增加显式转换方法。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">trait</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Trait3</span>: <span class="nc">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">as_trait</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">as_trait2</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait2</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Trait</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Trait2</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Trait3</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">T</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">as_trait</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">as_trait2</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Trait2</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">takes_trait</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">takes_trait2</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait2</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">t</span>: <span class="kp">&amp;</span><span class="nc">dyn</span><span class="w"> </span><span class="n">Trait3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Struct</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">takes_trait</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">as_trait</span><span class="p">());</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="w">    </span><span class="n">takes_trait2</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">as_trait2</span><span class="p">());</span><span class="w"> </span><span class="c1">// compiles
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这是一个简单而直接的工作方法，似乎是 Rust 编译器可以为我们自动完成的事情。Rust 并不羞于执行类型胁迫，正如我们在 deref 和 unsized 胁迫中所看到的那样，那么为什么没有 trait 向上胁迫呢？这是一个很好的问题，有一个熟悉的答案：Rust核心团队正在研究其他更高优先级和更高影响的功能。很公平。</p>
<p><strong>关键要点</strong></p>
<ul>
<li>Rust 不支持宽度超过2的指针，所以&hellip;
<ul>
<li>我们不能将不确定大小的类型转换 trait 对象</li>
<li>我们不能有多个 trait 对象，但我们可以通过将多个 trait 强转成一个 trait 来解决这个问题。</li>
</ul>
</li>
</ul>
<h3 id="用户自定义的不确定大小类型">用户自定义的不确定大小类型</h3>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">Unsized</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">unsized_field</span>: <span class="p">[</span><span class="kt">i32</span><span class="p">],</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>我们可以通过赋予结构体一个不确定大小的字段来定义一个不确定大小的结构体。不确定大小的结构体只能有1个不确定大小的字段，而且它必须是结构体中的最后一个字段。这是一个要求，这样编译器就可以在编译时确定结构中每个字段的起始偏移量，这对高效快速的字段访问非常重要。此外，使用双宽度指针最多只能跟踪一个不确定大小的字段，因为更多的不确定大小的字段将需要更多的宽度。</p>
<p>那么我们到底该如何实例化这个东西呢？和我们处理任何不确定大小类型的方式一样：先做一个可确定大小的版本，然后胁迫它变成不确定大小的版本。然而，<code>Unsized</code> 的定义总是不确定大小的，没有办法制作它的可确定大小版本！唯一的变通办法是使结构体通用化，使它可以存在于确定大小的版本中和不确定大小的版本中。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">MaybeSized</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">maybe_sized</span>: <span class="nc">T</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// unsized coercion from MaybeSized&lt;[i32; 3]&gt; to MaybeSized&lt;[i32]&gt;
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">ms</span>: <span class="kp">&amp;</span><span class="nc">MaybeSized</span><span class="o">&lt;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">MaybeSized</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">maybe_sized</span>: <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w"> </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>那么这有什么用处呢？没有什么特别引人注目的，用户定义的不确定大小的类型现在是一个非常半成品的功能，它们的局限性超过了任何好处。这里提到它们纯粹是为了全面性。</p>
<p><strong>有趣的事实：</strong> <code>std::fi::OsStr</code> 和 <code>std::path::Path</code> 是标准库中的2个不确定大小的结构，你可能已经在不知不觉中使用过了。</p>
<p><strong>关键 要点</strong></p>
<ul>
<li>用户定义的不确定大小类型现在是一个半成品的功能，它们的局限性超过了任何好处</li>
</ul>
<h2 id="zero-sized-类型">Zero-Sized 类型</h2>
<p>Zero-Sized 乍听起来很奇异，但到处都在使用。</p>
<h3 id="unit-类型">Unit 类型</h3>
<p>最常见的零大小类型是 Unit 类型: <code>()</code>. 所有的空块 <code>{}</code> 都评估为 <code>()</code>，如果块是非空的，但最后一个表达式用分号 <code>;</code> 丢弃，那么它也评估为 <code>()</code>。例子如下:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">a</span>: <span class="p">()</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{};</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">b</span>: <span class="kt">i32</span> <span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="mi">5</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">c</span>: <span class="p">()</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="mi">5</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>每一个没有显式返回类型的函数都会默认返回 <code>()</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// with sugar
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">()</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// desugared
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="p">()</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>由于 <code>()</code> 是零字节，所以 <code>()</code> 的所有实例都是一样的，这使得 <code>Default</code>、<code>PartialEq</code> 和 <code>Ord</code> 的实现非常简单。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">cmp</span>::<span class="n">Ordering</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="nb">Default</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">default</span><span class="p">()</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="nb">PartialEq</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">eq</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">_other</span>: <span class="kp">&amp;</span><span class="p">())</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kc">true</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">ne</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">_other</span>: <span class="kp">&amp;</span><span class="p">())</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kc">false</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="nb">Ord</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">_other</span>: <span class="kp">&amp;</span><span class="p">())</span><span class="w"> </span>-&gt; <span class="nc">Ordering</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Ordering</span>::<span class="n">Equal</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>编译器理解 <code>()</code> 是零大小的，并优化了与 <code>()</code> 实例的交互。例如，<code>Vec&lt;()&gt;</code> 永远不会进行任何堆分配，从 <code>Vec</code> 中推送和弹出 <code>()</code> 只是增加和减少它的 <code>len</code> 字段。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// zero capacity is all the capacity we need to &#34;store&#34; infinitely many ()
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">vec</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="c1">// causes no heap allocations or vec capacity changes
</span><span class="c1"></span><span class="w">    </span><span class="n">vec</span><span class="p">.</span><span class="n">push</span><span class="p">(());</span><span class="w"> </span><span class="c1">// len++
</span><span class="c1"></span><span class="w">    </span><span class="n">vec</span><span class="p">.</span><span class="n">push</span><span class="p">(());</span><span class="w"> </span><span class="c1">// len++
</span><span class="c1"></span><span class="w">    </span><span class="n">vec</span><span class="p">.</span><span class="n">push</span><span class="p">(());</span><span class="w"> </span><span class="c1">// len++
</span><span class="c1"></span><span class="w">    </span><span class="n">vec</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span><span class="w"> </span><span class="c1">// len--
</span><span class="c1"></span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="n">vec</span><span class="p">.</span><span class="n">len</span><span class="p">());</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>上面的例子没有实际应用，但是有没有什么情况下，我们可以有意义地利用上面的想法呢？令人惊讶的是，是的，我们可以通过将 <code>Value</code> 设置为 <code>()</code>，从 <code>HashMap&lt;Key，Value&gt;</code> 中得到一个高效的 <code>HashSet&lt;Key&gt;</code> 实现，这正是 Rust 标准库中 <code>HashSet</code> 的工作原理。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// std::collections::HashSet
</span><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">map</span>: <span class="nc">HashMap</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="w"> </span><span class="p">()</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><strong>关键要点</strong></p>
<ul>
<li>ZST 的所有实例都是彼此相等的。</li>
<li>Rust 编译器知道优化与 ZSTs 的交互。</li>
</ul>
<h3 id="用户自定义的-unit-结构体">用户自定义的 Unit 结构体</h3>
<p>Unit 结构体是指不含任何字段的结构体，如</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">Struct</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>属性，使 Unit 结构体比 <code>()</code> 更有用。</p>
<ul>
<li>我们可以在自己的 Unit 结构体上实现任何我们想要的 trait，Rust 的 trait 孤儿规则阻止我们实现标准库中定义的 <code>()</code> 的 trait。</li>
<li>在我们的程序中，Unit 结构体可以被赋予有意义的名称。</li>
<li>Unit 结构体，就像所有结构体一样，默认情况下是不可复制的，这在我们的程序中可能很重要。</li>
</ul>
<h3 id="never-类型">Never 类型</h3>
<p>第二种最常见的 ZST 是 never 类型: <code>!</code>。 之所以称为 never 类型，是因为它代表的是永远不会解析到任何值的计算。</p>
<p><code>!</code> 的几个有趣的特性使它不同于 <code>()</code>。</p>
<ul>
<li><code>!</code> 可以被胁迫成任何其他类型。</li>
<li>不可能创建 <code>!</code> 的实例。</li>
</ul>
<p>第一个有趣的属性对人体工程学非常有用，允许我们使用像这样的方便的宏。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// nice for quick prototyping
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">example</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="n">T</span><span class="p">])</span><span class="w"> </span>-&gt; <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">unimplemented</span><span class="o">!</span><span class="p">()</span><span class="w"> </span><span class="c1">// ! coerced to Vec&lt;T&gt;
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">example2</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="kt">i32</span> <span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// we know this parse call will never fail
</span><span class="c1"></span><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="s">&#34;123&#34;</span><span class="p">.</span><span class="n">parse</span>::<span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Some</span><span class="p">(</span><span class="n">num</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">num</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">unreachable</span><span class="o">!</span><span class="p">(),</span><span class="w"> </span><span class="c1">// ! coerced to i32
</span><span class="c1"></span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">example3</span><span class="p">(</span><span class="n">some_condition</span>: <span class="kt">bool</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nb">&#39;static</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="o">!</span><span class="n">some_condition</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">panic</span><span class="o">!</span><span class="p">()</span><span class="w"> </span><span class="c1">// ! coerced to &amp;str
</span><span class="c1"></span><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="s">&#34;str&#34;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><code>break</code>, <code>continue</code> 和 <code>return</code> 表达式也拥有类型 <code>!</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">example</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="kt">i32</span> <span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// we can set the type of x to anything here
</span><span class="c1"></span><span class="w">    </span><span class="c1">// since the block never evaluates to any value
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">x</span>: <span class="nb">String</span> <span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="mi">123</span><span class="w"> </span><span class="c1">// ! coerced to String
</span><span class="c1"></span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">example2</span><span class="p">(</span><span class="n">nums</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">])</span><span class="w"> </span>-&gt; <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">filtered</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">nums</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">filtered</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="o">*</span><span class="n">num</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="k">break</span><span class="w"> </span><span class="c1">// ! coerced to i32
</span><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="o">*</span><span class="n">num</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="o">*</span><span class="n">num</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="k">continue</span><span class="w"> </span><span class="c1">// ! coerced to i32
</span><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="n">filtered</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><code>!</code> 的第二个有趣的属性允许我们在类型层面上将某些状态标记为不可能。让我们以这个函数签名为例。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">function</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Success</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>我们知道，如果函数返回并成功，<code>Result</code> 将包含一些类型为 <code>Success</code> 的实例，如果函数出错，<code>Result</code> 将包含一些类型为 <code>Error</code> 的实例。现在我们来对比一下这个函数的签名。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">function</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Success</span><span class="p">,</span><span class="w"> </span><span class="o">!&gt;</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>我们知道，如果函数返回并且成功了，<code>Result</code> 将持有一些类型为 <code>Success</code> 的实例，如果出错了&hellip;但等等，它永远不会出错，因为不可能创建 <code>!</code> 的实例。鉴于上面的函数签名，我们知道这个函数永远不会出错。那这个函数签名呢:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">function</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;!</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>前面的反义词现在是真的：如果这个函数返回，我们知道它肯定出错了，因为成功是不可能的。</p>
<p>前一个例子的实际应用是 <code>FromStr</code> 对 <code>String</code> 的实现，因为将 <code>&amp;str</code> 转换为 <code>String</code> 是不可能失败的。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#![feature(never_type)]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="kt">str</span>::<span class="n">FromStr</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">FromStr</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="nb">String</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nb">Err</span> <span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">from_str</span><span class="p">(</span><span class="n">s</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span>::<span class="nb">Err</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Ok</span><span class="p">(</span><span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="n">s</span><span class="p">))</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>后一个例子的实际应用是一个运行无限循环的函数，这个函数永远不打算返回，就像服务器响应客户端的请求一样，除非有一些错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#![feature(never_type)]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">run_server</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;!</span><span class="p">,</span><span class="w"> </span><span class="n">ConnectionError</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">loop</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="w"> </span><span class="n">response</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_request</span><span class="p">()</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">request</span><span class="p">.</span><span class="n">process</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="n">response</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">result</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这个 <code>feature</code> 标记是必要的，因为当 never 类型存在并在 Rust 内部工作时，在用户代码中使用它仍然被认为是实验性的。</p>
<p><strong>要点</strong></p>
<ul>
<li><code>!</code> 可以被胁迫成任何其他类型。</li>
<li>不可能创建 <code>!</code> 的实例，我们可以用它来标记某些状态，在类型级别上是不可能的。</li>
</ul>
<h3 id="用户定义的伪-never-类型">用户定义的伪 Never 类型</h3>
<p>虽然不可能定义一个可以强制到任何其他类型的类型，但可以定义一个不可能创建实例的类型，比如一个 <code>enum</code>，没有任何变体。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">enum</span> <span class="nc">Void</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>这使得我们可以从前面的2个例子中移除 <code>feature</code> 标记，并使用稳定的 Rust 实现它们。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">enum</span> <span class="nc">Void</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// example 1
</span><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="n">FromStr</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="nb">String</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nb">Err</span> <span class="o">=</span><span class="w"> </span><span class="n">Void</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">from_str</span><span class="p">(</span><span class="n">s</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span>::<span class="nb">Err</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Ok</span><span class="p">(</span><span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="n">s</span><span class="p">))</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// example 2
</span><span class="c1"></span><span class="k">fn</span> <span class="nf">run_server</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Void</span><span class="p">,</span><span class="w"> </span><span class="n">ConnectionError</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">loop</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="w"> </span><span class="n">response</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_request</span><span class="p">()</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">request</span><span class="p">.</span><span class="n">process</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="n">response</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">result</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这是 Rust 标准库使用的技术，因为 <code>String</code> 的 <code>FromStr</code> 实现的 <code>Err</code> 类型是 <code>std::convert::Infallible</code>，它被定义为:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">Infallible</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><h3 id="phantomdata">PhantomData</h3>
<p>第三种最常用的 ZST 可能是 <code>PhantomData</code>。<code>PhantomData</code> 是一个零大小的标记结构，它可以用来 &ldquo;标记&rdquo; 一个包含的结构体具有某些属性。它和它的自动标记 trait 表亲如 <code>Sized</code>、<code>Send</code>、<code>Sync</code> 等在目的上是相似的，但作为一个标记结构体的使用方式有点不同。对 <code>PhantomData</code> 进行彻底的解释并探索它的所有用例不在本文的范围内，所以我们只简单地介绍一个简单的例子。回顾一下前面介绍的这个代码片段。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#![feature(negative_impls)]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// this type is Send and Sync
</span><span class="c1"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// opt-out of Send trait
</span><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="o">!</span><span class="nb">Send</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// opt-out of Sync trait
</span><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="o">!</span><span class="nb">Sync</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Struct</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>很不幸，我们必须使用一个 <code>feature</code> 标记，我们是否可以只使用稳定的 Rust 来达到同样的结果？我们已经了解到，一个类型只有当它的所有成员也是 <code>Send</code> 和 <code>Sync</code> 时才是 <code>Send</code> 和 <code>Sync</code> 的，所以我们可以像 <code>Rc&lt;()&gt;</code> 一样在 <code>Struct</code> 中添加一个 <code>!Send</code> 和 <code>!Sync</code> 成员。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">rc</span>::<span class="n">Rc</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// this type is not Send or Sync
</span><span class="c1"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// adds 8 bytes to every instance
</span><span class="c1"></span><span class="w">    </span><span class="n">_not_send_or_sync</span>: <span class="nc">Rc</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这不太理想，因为它增加了 <code>Struct</code> 的每个实例的大小，而且我们现在每次要创建一个 <code>Struct</code> 时，还得凭空想象出一个  <code>Rc&lt;()&gt;</code>。由于 <code>PhantomData</code> 是一个 ZST，它解决了这两个问题。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">rc</span>::<span class="n">Rc</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">marker</span>::<span class="n">PhantomData</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">type</span> <span class="nc">NotSendOrSyncPhantom</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PhantomData</span><span class="o">&lt;</span><span class="n">Rc</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;&gt;</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// this type is not Send or Sync
</span><span class="c1"></span><span class="k">struct</span> <span class="nc">Struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// adds no additional size to instances
</span><span class="c1"></span><span class="w">    </span><span class="n">_not_send_or_sync</span>: <span class="nc">NotSendOrSyncPhantom</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><strong>关键要点</strong></p>
<ul>
<li><code>PhantomData</code> 是一个零大小的标记结构，它可以用来 &ldquo;标记&rdquo; 一个包含的结构体具有某些属性。</li>
</ul>
<h2 id="结论">结论</h2>
<ul>
<li>只有确定大小类型的实例才能被放置在栈上，也就是说，可以通过值来传递</li>
<li>不确定大小类型的实例不能放在栈上，必须通过引用来传递。</li>
<li>指向不确定大小类型的指针是双宽度的，因为除了指向数据外，它们还需要做额外的记账工作，以跟踪数据的长度或指向一个  vtable。</li>
<li><code>Sized</code> 是一个 &ldquo;自动&rdquo; 标记 trait。</li>
<li>所有的泛型类型参数默认都是自动绑定 <code>Sized</code> 的。</li>
<li>如果我们有一个泛型函数，它的参数是指针后面的一些 <code>T</code>，例如 <code>&amp;T</code>、<code>Box&lt;T&gt;</code>、<code>Rc&lt;T&gt;</code> 等，那么我们几乎总是希望用 <code>T: ?Sized</code> 来退出默认的 <code>Sized</code> 约束。</li>
<li>利用切片和 Rust 的自动类型强制，我们可以编写灵活的 API。</li>
<li>所有的 trait 默认为 <code>Sized</code>。</li>
<li><code>Trait: ?Sized</code> 是 <code>impl Trait for dyn Trait</code> 所必需的。</li>
<li>我们可以根据每个方法要求 <code>Self: Sized</code>。</li>
<li>由 <code>Sized </code> 绑定的 trait 不能被制作成 trait 对象。</li>
<li>Rust 不支持宽度超过2的指针，所以&hellip;
<ul>
<li>我们不能将不确定大小的类型转换为 trait 对象</li>
<li>我们不能有多 trait 对象，但我们可以通过将多个 trait 转化成一个 trait 来解决这个问题。</li>
</ul>
</li>
<li>用户定义的不确定大小的类型现在是一个半成品的功能，它们的局限性超过了任何好处</li>
<li>ZST 的所有实例都是彼此相等的。</li>
<li>Rust 编译器知道优化与 ZSTs 的交互。</li>
<li><code>!</code> 可以被胁迫成任何其他类型。</li>
<li>不可能创建 <code>!</code> 的实例，我们可以用它来标记某些状态，在类型级别上是不可能的。</li>
<li><code>PhantomData</code> 是一个零大小的标记结构，它可以用来 &ldquo;标记&rdquo; 一个包含的结构体具有某些属性。</li>
</ul>
<h2 id="讨论">讨论</h2>
<p>在这里讨论本文:</p>
<ul>
<li><a href="https://users.rust-lang.org/t/blog-post-sizedness-in-rust/46293?u=pretzelhammer">official Rust users forum</a></li>
<li><a href="https://www.reddit.com/r/learnrust/comments/hx2jd0/sizedness_in_rust/">learnrust subreddit</a></li>
<li><a href="https://twitter.com/pretzelhammer/status/1286669073137491973">Twitter</a></li>
<li><a href="https://www.reddit.com/r/rust/comments/hxips7/sizedness_in_rust/">rust subreddit</a></li>
<li><a href="https://github.com/pretzelhammer/rust-blog/discussions">Github</a></li>
</ul>
<h2 id="通知">通知</h2>
<p>当发表下一篇博文时，会收到通知:</p>
<ul>
<li><a href="https://twitter.com/pretzelhammer">Following pretzelhammer on Twitter</a> or</li>
<li>Watching this repo&rsquo;s releases (click <code>Watch</code> -&gt; click <code>Custom</code> -&gt; select <code>Releases</code> -&gt; click <code>Apply</code>)</li>
</ul>
<h2 id="更多阅读">更多阅读</h2>
<ul>
<li><a href="./common-rust-lifetime-misconceptions.md">Common Rust Lifetime Misconceptions</a></li>
<li><a href="./tour-of-rusts-standard-library-traits.md">Tour of Rust&rsquo;s Standard Library Traits</a></li>
<li><a href="./learning-rust-in-2020.md">Learning Rust in 2020</a></li>
<li><a href="./too-many-brainfuck-compilers.md">Learn Assembly with Entirely Too Many Brainfuck Compilers</a></li>
</ul>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rustlang" term="rustlang" label="rustlang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust" term="rust" label="Rust" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/sizedness" term="sizedness" label="Sizedness" />
                            
                        
                    
                
            
        </entry>
    
</feed>
