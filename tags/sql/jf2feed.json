{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003ch1 id=\"alter-语句\"\u003eALTER 语句\u003c/h1\u003e\n\u003cp\u003eALTER 语句用于修改目录中注册的表/视图/函数定义。\u003c/p\u003e\n\u003cp\u003eFlink SQL 目前支持以下 ALTER 语句。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eALTER TABLE\u003c/li\u003e\n\u003cli\u003eALTER DATABASE\u003c/li\u003e\n\u003cli\u003eALTER FUNCTION\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"运行-alter-语句\"\u003e运行 ALTER 语句\u003c/h2\u003e\n\u003cp\u003eALTER 语句可以用 TableEnvironment 的 executeSql()方法执行，也可以在 SQL CLI 中执行。executeSql()方法在 ALTER 操作成功时返回 \u0026ldquo;OK\u0026rdquo;，否则将抛出一个异常。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 ALTER 语句。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003esettings\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e()...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esettings\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// register a table named \u0026#34;Orders\u0026#34;\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// a string array: [\u0026#34;Orders\u0026#34;]\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etables\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elistTables\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// or tableEnv.executeSql(\u0026#34;SHOW TABLES\u0026#34;).print()\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// rename \u0026#34;Orders\u0026#34; to \u0026#34;NewOrders\u0026#34;\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;ALTER TABLE Orders RENAME TO NewOrders;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// a string array: [\u0026#34;NewOrders\u0026#34;]\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etables\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elistTables\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// or tableEnv.executeSql(\u0026#34;SHOW TABLES\u0026#34;).print()\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"alter-table\"\u003eALTER TABLE\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eRename Table\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eALTER\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.][\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"k\"\u003etable_name\u003c/span\u003e \u003cspan class=\"k\"\u003eRENAME\u003c/span\u003e \u003cspan class=\"k\"\u003eTO\u003c/span\u003e \u003cspan class=\"n\"\u003enew_table_name\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e将给定的表名重命名为另一个新表名。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e设置或更改表属性\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eALTER\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.][\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"k\"\u003etable_name\u003c/span\u003e \u003cspan class=\"k\"\u003eSET\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eval1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eval2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e设置指定表格中的一个或多个属性。如果某个属性已经在表中被设置，则用新的属性覆盖旧的值。\u003c/p\u003e\n\u003ch2 id=\"alter-database\"\u003eALTER DATABASE\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eALTER\u003c/span\u003e \u003cspan class=\"k\"\u003eDATABASE\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e \u003cspan class=\"k\"\u003eSET\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eval1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eval2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在指定的数据库中设置一个或多个属性。如果某个属性已经在数据库中被设置，则用新的属性覆盖旧的值。\u003c/p\u003e\n\u003ch2 id=\"alter-function\"\u003eALTER FUNCTION\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eALTER\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eTEMPORARY\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"k\"\u003eTEMPORARY\u003c/span\u003e \u003cspan class=\"k\"\u003eSYSTEM\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003eFUNCTION\u003c/span\u003e \n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eIF\u003c/span\u003e \u003cspan class=\"k\"\u003eEXISTS\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.][\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"n\"\u003efunction_name\u003c/span\u003e \n  \u003cspan class=\"k\"\u003eAS\u003c/span\u003e \u003cspan class=\"n\"\u003eidentifier\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eLANGUAGE\u003c/span\u003e \u003cspan class=\"n\"\u003eJAVA\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eSCALA\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ePYTHON\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用新的标识符和可选的语言标签改变一个目录函数。如果一个函数在目录中不存在，就会抛出一个异常。\u003c/p\u003e\n\u003cp\u003e如果语言标签是 JAVA/SCALA，标识符是 UDF 的完整 classpath。关于 Java/Scala UDF 的实现，请参考 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/functions/udfs.html\"\u003eUser-defined Functions\u003c/a\u003e 了解详情。\u003c/p\u003e\n\u003cp\u003e如果语言标签是 PYTHON，标识符是 UDF 的完全限定名，例如 pyflink.table.test.test_udf.add。关于 Python UDF 的实现，更多细节请参考 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/python/user-guide/table/udfs/python_udfs.html\"\u003ePython UDFs\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTEMPORARY\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e改变具有目录和数据库命名空间的临时目录功能，并覆盖目录功能。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTEMPORARY SYSTEM\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e更改没有命名空间的临时系统函数，并覆盖内置函数。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIF EXISTS\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果函数不存在，就不会发生任何事情。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLANGUAGE JAVA|SCALA|PYTHON\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e语言标签，用于指导 flink 运行时如何执行函数。目前只支持 JAVA、SCALA 和 PYTHON，函数的默认语言是 JAVA。\u003c/p\u003e\n\u003cp\u003e原文链接: \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/alter.html\"\u003ehttps://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/alter.html\u003c/a\u003e\u003c/p\u003e\n","text":"ALTER 语句 ALTER 语句用于修改目录中注册的表/视图/函数定义。\nFlink SQL 目前支持以下 ALTER 语句。\n ALTER TABLE ALTER DATABASE ALTER FUNCTION  运行 ALTER 语句 ALTER 语句可以用 TableEnvironment 的 executeSql()方法执行，也可以在 SQL CLI 中执行。executeSql()方法在 ALTER 操作成功时返回 \u0026ldquo;OK\u0026rdquo;，否则将抛出一个异常。\n下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 ALTER 语句。\nval settings = EnvironmentSettings.newInstance()... val tableEnv = TableEnvironment.create(settings) // register a table named \u0026#34;Orders\u0026#34; tableEnv.executeSql(\u0026#34;CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...)\u0026#34;); // a string array: [\u0026#34;Orders\u0026#34;] val tables = tableEnv.listTables() // or tableEnv.executeSql(\u0026#34;SHOW TABLES\u0026#34;).print()  // rename \u0026#34;Orders\u0026#34; to \u0026#34;NewOrders\u0026#34; tableEnv.executeSql(\u0026#34;ALTER TABLE Orders RENAME TO NewOrders;\u0026#34;) // a string array: [\u0026#34;NewOrders\u0026#34;] val tables = tableEnv.listTables() // or tableEnv.executeSql(\u0026#34;SHOW TABLES\u0026#34;).print() ALTER TABLE  Rename Table  ALTER TABLE [catalog_name.][db_name.]table_name RENAME TO new_table_name 将给定的表名重命名为另一个新表名。\n 设置或更改表属性  ALTER TABLE [catalog_name.][db_name.]table_name SET (key1=val1, key2=val2, ...) 设置指定表格中的一个或多个属性。如果某个属性已经在表中被设置，则用新的属性覆盖旧的值。\nALTER DATABASE ALTER DATABASE [catalog_name.]db_name SET (key1=val1, key2=val2, ...) 在指定的数据库中设置一个或多个属性。如果某个属性已经在数据库中被设置，则用新的属性覆盖旧的值。\nALTER FUNCTION ALTER [TEMPORARY|TEMPORARY SYSTEM] FUNCTION [IF EXISTS] [catalog_name.][db_name.]function_name AS identifier [LANGUAGE JAVA|SCALA|PYTHON] 用新的标识符和可选的语言标签改变一个目录函数。如果一个函数在目录中不存在，就会抛出一个异常。\n如果语言标签是 JAVA/SCALA，标识符是 UDF 的完整 classpath。关于 Java/Scala UDF 的实现，请参考 User-defined Functions 了解详情。\n如果语言标签是 PYTHON，标识符是 UDF 的完全限定名，例如 pyflink.table.test.test_udf.add。关于 Python UDF 的实现，更多细节请参考 Python UDFs。\nTEMPORARY\n改变具有目录和数据库命名空间的临时目录功能，并覆盖目录功能。\nTEMPORARY SYSTEM\n更改没有命名空间的临时系统函数，并覆盖内置函数。\nIF EXISTS\n如果函数不存在，就不会发生任何事情。\nLANGUAGE JAVA|SCALA|PYTHON\n语言标签，用于指导 flink 运行时如何执行函数。目前只支持 JAVA、SCALA 和 PYTHON，函数的默认语言是 JAVA。\n原文链接: https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/alter.html\n"},"name":"Alter 语句","published":"2020-08-22T00:00:00+08:00","summary":"ALTER Statements","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-22-alter-statements/"},{"content":{"html":"\u003ch1 id=\"drop-语句\"\u003eDROP 语句\u003c/h1\u003e\n\u003cp\u003eDROP 语句用于从当前或指定的目录中删除一个注册的表/视图/函数。\u003c/p\u003e\n\u003cp\u003eFlink SQL 目前支持以下 DROP 语句。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDROP TABLE\u003c/li\u003e\n\u003cli\u003eDROP DATABASE\u003c/li\u003e\n\u003cli\u003eDROP VIEW\u003c/li\u003e\n\u003cli\u003eDROP FUNCTION\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"运行一个-drop-语句\"\u003e运行一个 DROP 语句\u003c/h2\u003e\n\u003cp\u003eDROP 语句可以用 TableEnvironment 的 executeSql()方法执行，也可以在 SQL CLI 中执行。executeSql()方法对于一个成功的 DROP 操作会返回\u0026rsquo;OK'，否则会抛出一个异常。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 DROP 语句。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003esettings\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e()...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esettings\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// register a table named \u0026#34;Orders\u0026#34;\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// a string array: [\u0026#34;Orders\u0026#34;]\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etables\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elistTables\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// or tableEnv.executeSql(\u0026#34;SHOW TABLES\u0026#34;).print()\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// drop \u0026#34;Orders\u0026#34; table from catalog\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;DROP TABLE Orders\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// an empty string array\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etables\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elistTables\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// or tableEnv.executeSql(\u0026#34;SHOW TABLES\u0026#34;).print()\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"drop-table\"\u003eDROP TABLE\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eDROP\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eIF\u003c/span\u003e \u003cspan class=\"k\"\u003eEXISTS\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.][\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"k\"\u003etable_name\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e删除一个给定表名的表。如果要删除的表不存在，则抛出一个异常。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIF EXISTS\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果该表不存在，就不会发生任何事情。\u003c/p\u003e\n\u003ch2 id=\"drop-database\"\u003eDROP DATABASE\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eDROP\u003c/span\u003e \u003cspan class=\"k\"\u003eDATABASE\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eIF\u003c/span\u003e \u003cspan class=\"k\"\u003eEXISTS\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eRESTRICT\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"k\"\u003eCASCADE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e删除一个给定数据库名称的数据库，如果要删除的数据库不存在，会产生异常。如果要删除的数据库不存在，则抛出一个异常。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIF EXISTS\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果数据库不存在，则不会发生任何事情。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRESTRICT\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e丢弃非空数据库会触发异常。默认为启用。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCASCADE\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e丢弃一个非空的数据库也会丢弃所有相关的表和函数。\u003c/p\u003e\n\u003ch2 id=\"drop-view\"\u003eDROP VIEW\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eDROP\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eTEMPORARY\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003eVIEW\u003c/span\u003e  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eIF\u003c/span\u003e \u003cspan class=\"k\"\u003eEXISTS\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.][\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"n\"\u003eview_name\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e丢弃一个有目录和数据库命名空间的视图。如果要删除的视图不存在，则会产生一个异常。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTEMPORARY\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e删除具有目录和数据库命名空间的临时视图。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIF EXISTS\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果视图不存在，则不会发生任何事情。\u003c/p\u003e\n\u003cp\u003e维护依赖关系 Flink 没有通过 CASCADE/RESTRICT 关键字来维护视图的依赖关系，当前的方式是当用户试图在诸如视图的底层表被删除的情况下使用视图时，会产生延迟错误消息。\u003c/p\u003e\n\u003ch2 id=\"drop-function\"\u003eDROP FUNCTION\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eDROP\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eTEMPORARY\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"k\"\u003eTEMPORARY\u003c/span\u003e \u003cspan class=\"k\"\u003eSYSTEM\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003eFUNCTION\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eIF\u003c/span\u003e \u003cspan class=\"k\"\u003eEXISTS\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.][\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"n\"\u003efunction_name\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e删除一个有目录和数据库命名空间的目录函数。如果要放弃的函数不存在，则会产生一个异常。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTEMPORARY\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e丢弃具有目录和数据库命名空间的临时目录功能。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTEMPORARY SYSTEM\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e删除没有命名空间的临时系统函数。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIF EXISTS\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果函数不存在，就不会发生任何事情。\u003c/p\u003e\n\u003cp\u003e原文链接: \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/drop.html\"\u003ehttps://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/drop.html\u003c/a\u003e\u003c/p\u003e\n","text":"DROP 语句 DROP 语句用于从当前或指定的目录中删除一个注册的表/视图/函数。\nFlink SQL 目前支持以下 DROP 语句。\n DROP TABLE DROP DATABASE DROP VIEW DROP FUNCTION  运行一个 DROP 语句 DROP 语句可以用 TableEnvironment 的 executeSql()方法执行，也可以在 SQL CLI 中执行。executeSql()方法对于一个成功的 DROP 操作会返回\u0026rsquo;OK'，否则会抛出一个异常。\n下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 DROP 语句。\nval settings = EnvironmentSettings.newInstance()... val tableEnv = TableEnvironment.create(settings) // register a table named \u0026#34;Orders\u0026#34; tableEnv.executeSql(\u0026#34;CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...)\u0026#34;) // a string array: [\u0026#34;Orders\u0026#34;] val tables = tableEnv.listTables() // or tableEnv.executeSql(\u0026#34;SHOW TABLES\u0026#34;).print()  // drop \u0026#34;Orders\u0026#34; table from catalog tableEnv.executeSql(\u0026#34;DROP TABLE Orders\u0026#34;) // an empty string array val tables = tableEnv.listTables() // or tableEnv.executeSql(\u0026#34;SHOW TABLES\u0026#34;).print() DROP TABLE DROP TABLE [IF EXISTS] [catalog_name.][db_name.]table_name 删除一个给定表名的表。如果要删除的表不存在，则抛出一个异常。\nIF EXISTS\n如果该表不存在，就不会发生任何事情。\nDROP DATABASE DROP DATABASE [IF EXISTS] [catalog_name.]db_name [ (RESTRICT | CASCADE) ] 删除一个给定数据库名称的数据库，如果要删除的数据库不存在，会产生异常。如果要删除的数据库不存在，则抛出一个异常。\nIF EXISTS\n如果数据库不存在，则不会发生任何事情。\nRESTRICT\n丢弃非空数据库会触发异常。默认为启用。\nCASCADE\n丢弃一个非空的数据库也会丢弃所有相关的表和函数。\nDROP VIEW DROP [TEMPORARY] VIEW [IF EXISTS] [catalog_name.][db_name.]view_name 丢弃一个有目录和数据库命名空间的视图。如果要删除的视图不存在，则会产生一个异常。\nTEMPORARY\n删除具有目录和数据库命名空间的临时视图。\nIF EXISTS\n如果视图不存在，则不会发生任何事情。\n维护依赖关系 Flink 没有通过 CASCADE/RESTRICT 关键字来维护视图的依赖关系，当前的方式是当用户试图在诸如视图的底层表被删除的情况下使用视图时，会产生延迟错误消息。\nDROP FUNCTION DROP [TEMPORARY|TEMPORARY SYSTEM] FUNCTION [IF EXISTS] [catalog_name.][db_name.]function_name; 删除一个有目录和数据库命名空间的目录函数。如果要放弃的函数不存在，则会产生一个异常。\nTEMPORARY\n丢弃具有目录和数据库命名空间的临时目录功能。\nTEMPORARY SYSTEM\n删除没有命名空间的临时系统函数。\nIF EXISTS\n如果函数不存在，就不会发生任何事情。\n原文链接: https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/drop.html\n"},"name":"Drop 语句","published":"2020-08-22T00:00:00+08:00","summary":"Drop Statements","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-22-drop-statements/"},{"content":{"html":"\u003ch1 id=\"explain-语句\"\u003eEXPLAIN 语句\u003c/h1\u003e\n\u003cp\u003eEXPLAIN 语句用于解释一个查询或 INSERT 语句的逻辑和优化查询计划。\u003c/p\u003e\n\u003ch2 id=\"运行-explain-语句\"\u003e运行 EXPLAIN 语句\u003c/h2\u003e\n\u003cp\u003eEXPLAIN 语句可以用 \u003ccode\u003eTableEnvironment 的 executeSql()\u003c/code\u003e 方法执行，也可以在 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sqlClient.html\"\u003eSQL CLI\u003c/a\u003e 中执行。\u003ccode\u003eexecuteSql()\u003c/code\u003e 方法在 EXPLAIN 操作成功后返回解释结果，否则将抛出一个异常。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 EXPLAIN 语句。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eStreamExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eStreamTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// register a table named \u0026#34;Orders\u0026#34;\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE MyTable1 (count bigint, work VARCHAR(256) WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE MyTable2 (count bigint, work VARCHAR(256) WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// explain SELECT statement through TableEnvironment.explainSql()\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eexplanation\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexplainSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;SELECT count, word FROM MyTable1 WHERE word LIKE \u0026#39;F%\u0026#39; \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;UNION ALL \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \n  \u003cspan class=\"s\"\u003e\u0026#34;SELECT count, word FROM MyTable2\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexplanation\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// explain SELECT statement through TableEnvironment.executeSql()\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etableResult\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;EXPLAIN PLAN FOR \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \n  \u003cspan class=\"s\"\u003e\u0026#34;SELECT count, word FROM MyTable1 WHERE word LIKE \u0026#39;F%\u0026#39; \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;UNION ALL \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \n  \u003cspan class=\"s\"\u003e\u0026#34;SELECT count, word FROM MyTable2\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etableResult\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEXPLAIN 的结果是：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e== Abstract Syntax Tree ==\nLogicalUnion(all=[true])\n  LogicalFilter(condition=[LIKE($1, _UTF-16LE'F%')])\n    FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, MyTable1]], fields=[count, word])\n  FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, MyTable2]], fields=[count, word])\n  \n\n== Optimized Logical Plan ==\nDataStreamUnion(all=[true], union all=[count, word])\n  DataStreamCalc(select=[count, word], where=[LIKE(word, _UTF-16LE'F%')])\n    TableSourceScan(table=[[default_catalog, default_database, MyTable1]], fields=[count, word])\n  TableSourceScan(table=[[default_catalog, default_database, MyTable2]], fields=[count, word])\n\n== Physical Execution Plan ==\nStage 1 : Data Source\n\tcontent : collect elements with CollectionInputFormat\n\nStage 2 : Data Source\n\tcontent : collect elements with CollectionInputFormat\n\n\tStage 3 : Operator\n\t\tcontent : from: (count, word)\n\t\tship_strategy : REBALANCE\n\n\t\tStage 4 : Operator\n\t\t\tcontent : where: (LIKE(word, _UTF-16LE'F%')), select: (count, word)\n\t\t\tship_strategy : FORWARD\n\n\t\t\tStage 5 : Operator\n\t\t\t\tcontent : from: (count, word)\n\t\t\t\tship_strategy : REBALANCE\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"语法\"\u003e语法\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eEXPLAIN\u003c/span\u003e \u003cspan class=\"n\"\u003ePLAN\u003c/span\u003e \u003cspan class=\"k\"\u003eFOR\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003equery_statement_or_insert_statement\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e关于查询语法，请参考\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/queries.html#supported-syntax\"\u003e查询\u003c/a\u003e页面。关于 INSERT，请参考 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/insert.html\"\u003eINSERT\u003c/a\u003e 页面。\u003c/p\u003e\n","text":"EXPLAIN 语句 EXPLAIN 语句用于解释一个查询或 INSERT 语句的逻辑和优化查询计划。\n运行 EXPLAIN 语句 EXPLAIN 语句可以用 TableEnvironment 的 executeSql() 方法执行，也可以在 SQL CLI 中执行。executeSql() 方法在 EXPLAIN 操作成功后返回解释结果，否则将抛出一个异常。\n下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 EXPLAIN 语句。\nval env = StreamExecutionEnvironment.getExecutionEnvironment() val tEnv = StreamTableEnvironment.create(env) // register a table named \u0026#34;Orders\u0026#34; tEnv.executeSql(\u0026#34;CREATE TABLE MyTable1 (count bigint, work VARCHAR(256) WITH (...)\u0026#34;) tEnv.executeSql(\u0026#34;CREATE TABLE MyTable2 (count bigint, work VARCHAR(256) WITH (...)\u0026#34;) // explain SELECT statement through TableEnvironment.explainSql() val explanation = tEnv.explainSql( \u0026#34;SELECT count, word FROM MyTable1 WHERE word LIKE \u0026#39;F%\u0026#39; \u0026#34; + \u0026#34;UNION ALL \u0026#34; + \u0026#34;SELECT count, word FROM MyTable2\u0026#34;) println(explanation) // explain SELECT statement through TableEnvironment.executeSql() val tableResult = tEnv.executeSql( \u0026#34;EXPLAIN PLAN FOR \u0026#34; + \u0026#34;SELECT count, word FROM MyTable1 WHERE word LIKE \u0026#39;F%\u0026#39; \u0026#34; + \u0026#34;UNION ALL \u0026#34; + \u0026#34;SELECT count, word FROM MyTable2\u0026#34;) tableResult.print() EXPLAIN 的结果是：\n== Abstract Syntax Tree == LogicalUnion(all=[true]) LogicalFilter(condition=[LIKE($1, _UTF-16LE'F%')]) FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, MyTable1]], fields=[count, word]) FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, MyTable2]], fields=[count, word]) == Optimized Logical Plan == DataStreamUnion(all=[true], union all=[count, word]) DataStreamCalc(select=[count, word], where=[LIKE(word, _UTF-16LE'F%')]) TableSourceScan(table=[[default_catalog, default_database, MyTable1]], fields=[count, word]) TableSourceScan(table=[[default_catalog, default_database, MyTable2]], fields=[count, word]) == Physical Execution Plan == Stage 1 : Data Source content : collect elements with CollectionInputFormat Stage 2 : Data Source content : collect elements with CollectionInputFormat Stage 3 : Operator content : from: (count, word) ship_strategy : REBALANCE Stage 4 : Operator content : where: (LIKE(word, _UTF-16LE'F%')), select: (count, word) ship_strategy : FORWARD Stage 5 : Operator content : from: (count, word) ship_strategy : REBALANCE 语法 EXPLAIN PLAN FOR \u0026lt;query_statement_or_insert_statement\u0026gt; 关于查询语法，请参考查询页面。关于 INSERT，请参考 INSERT 页面。\n"},"name":"Explan 语句","published":"2020-08-22T00:00:00+08:00","summary":"Explan Statements","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-22-explan-statements/"},{"content":{"html":"\u003ch1 id=\"insert-语句\"\u003eINSERT 语句\u003c/h1\u003e\n\u003cp\u003eINSERT 语句用于向表中添加行。\u003c/p\u003e\n\u003ch2 id=\"运行-insert-语句\"\u003e运行 INSERT 语句\u003c/h2\u003e\n\u003cp\u003e单条 INSERT 语句可以通过 TableEnvironment 的 \u003ccode\u003eexecuteSql()\u003c/code\u003e 方法执行，也可以在 SQL CLI 中执行。INSERT 语句的 \u003ccode\u003eexecuteSql()\u003c/code\u003e 方法会立即提交一个 Flink 作业，并返回一个与提交的作业相关联的 TableResult 实例。多个 INSERT 语句可以通过 StatementSet 的 \u003ccode\u003eaddInsertSql()\u003c/code\u003e 方法执行，StatementSet 可以由 \u003ccode\u003eTableEnvironment.createStatementSet()\u003c/code\u003e 方法创建。\u003ccode\u003eaddInsertSql()\u003c/code\u003e 方法是一种懒惰的执行方式，它们只有在调用 \u003ccode\u003eStatementSet.execute()\u003c/code\u003e 时才会被执行。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了如何在 TableEnvironment 中运行一条 INSERT 语句，以及在 SQL CLI 中，在 StatementSet 中运行多条 INSERT 语句。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eFlink SQL\u0026gt; CREATE TABLE Orders \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003euser\u003cspan class=\"sb\"\u003e`\u003c/span\u003e BIGINT, product STRING, amount INT\u003cspan class=\"o\"\u003e)\u003c/span\u003e WITH \u003cspan class=\"o\"\u003e(\u003c/span\u003e...\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eINFO\u003cspan class=\"o\"\u003e]\u003c/span\u003e Table has been created.\n\nFlink SQL\u0026gt; CREATE TABLE RubberOrders\u003cspan class=\"o\"\u003e(\u003c/span\u003eproduct STRING, amount INT\u003cspan class=\"o\"\u003e)\u003c/span\u003e WITH \u003cspan class=\"o\"\u003e(\u003c/span\u003e...\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\nFlink SQL\u0026gt; SHOW TABLES\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nOrders\nRubberOrders\n\nFlink SQL\u0026gt; INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE \u003cspan class=\"s1\"\u003e\u0026#39;%Rubber%\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eINFO\u003cspan class=\"o\"\u003e]\u003c/span\u003e Submitting SQL update statement to the cluster...\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eINFO\u003cspan class=\"o\"\u003e]\u003c/span\u003e Table update statement has been successfully submitted to the cluster:\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003esettings\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e()...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esettings\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// register a source table named \u0026#34;Orders\u0026#34; and a sink table named \u0026#34;RubberOrders\u0026#34;\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE RubberOrders(product STRING, amount INT) WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// run a single INSERT query on the registered source table and emit the result to registered sink table\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etableResult1\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE \u0026#39;%Rubber%\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// get job status through TableResult\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etableResult1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetJobClient\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003egetJobStatus\u003c/span\u003e\u003cspan class=\"o\"\u003e())\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e//----------------------------------------------------------------------------\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// register another sink table named \u0026#34;GlassOrders\u0026#34; for multiple INSERT queries\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE GlassOrders(product VARCHAR, amount INT) WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// run multiple INSERT queries on the registered source table and emit the result to registered sink tables\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003estmtSet\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateStatementSet\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// only single INSERT query can be accepted by `addInsertSql` method\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003estmtSet\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddInsertSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE \u0026#39;%Rubber%\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003estmtSet\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddInsertSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;INSERT INTO GlassOrders SELECT product, amount FROM Orders WHERE product LIKE \u0026#39;%Glass%\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// execute all statements together\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etableResult2\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estmtSet\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecute\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// get job status through TableResult\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etableResult2\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetJobClient\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003egetJobStatus\u003c/span\u003e\u003cspan class=\"o\"\u003e())\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"insert-from-select-queries\"\u003eInsert from select queries\u003c/h2\u003e\n\u003cp\u003e查询结果可以通过使用插入子句插入到表中。\u003c/p\u003e\n\u003ch3 id=\"语法\"\u003e语法\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eINSERT\u003c/span\u003e \u003cspan class=\"err\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003eINTO\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eOVERWRITE\u003c/span\u003e \u003cspan class=\"err\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.][\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"k\"\u003etable_name\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ePARTITION\u003c/span\u003e \u003cspan class=\"n\"\u003epart_spec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"n\"\u003eselect_statement\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003epart_spec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epart_col_name1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eval1\u003c/span\u003e \u003cspan class=\"p\"\u003e[,\u003c/span\u003e \u003cspan class=\"n\"\u003epart_col_name2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eval2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...])\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eOVERWRITE\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eINSERT OVERWRITE 将覆盖表或分区中的任何现有数据。否则，将追加新数据。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePARTITION\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003ePARTITION 子句应包含本次插入的静态分区列。\u003c/p\u003e\n\u003ch3 id=\"例子\"\u003e例子\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"c1\"\u003e-- Creates a partitioned table\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"n\"\u003ecountry_page_view\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003euser\u003c/span\u003e \u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecnt\u003c/span\u003e \u003cspan class=\"nb\"\u003eINT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003edate\u003c/span\u003e \u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecountry\u003c/span\u003e \u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003ePARTITIONED\u003c/span\u003e \u003cspan class=\"k\"\u003eBY\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003edate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecountry\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(...)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e-- Appends rows into the static partition (date=\u0026#39;2019-8-30\u0026#39;, country=\u0026#39;China\u0026#39;)\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eINSERT\u003c/span\u003e \u003cspan class=\"k\"\u003eINTO\u003c/span\u003e \u003cspan class=\"n\"\u003ecountry_page_view\u003c/span\u003e \u003cspan class=\"n\"\u003ePARTITION\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003edate\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;2019-8-30\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecountry\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;China\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecnt\u003c/span\u003e \u003cspan class=\"k\"\u003eFROM\u003c/span\u003e \u003cspan class=\"n\"\u003epage_view_source\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e-- Appends rows into partition (date, country), where date is static partition with value \u0026#39;2019-8-30\u0026#39;,\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e-- country is dynamic partition whose value is dynamic determined by each row.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eINSERT\u003c/span\u003e \u003cspan class=\"k\"\u003eINTO\u003c/span\u003e \u003cspan class=\"n\"\u003ecountry_page_view\u003c/span\u003e \u003cspan class=\"n\"\u003ePARTITION\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003edate\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;2019-8-30\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecnt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecountry\u003c/span\u003e \u003cspan class=\"k\"\u003eFROM\u003c/span\u003e \u003cspan class=\"n\"\u003epage_view_source\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e-- Overwrites rows into static partition (date=\u0026#39;2019-8-30\u0026#39;, country=\u0026#39;China\u0026#39;)\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eINSERT\u003c/span\u003e \u003cspan class=\"n\"\u003eOVERWRITE\u003c/span\u003e \u003cspan class=\"n\"\u003ecountry_page_view\u003c/span\u003e \u003cspan class=\"n\"\u003ePARTITION\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003edate\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;2019-8-30\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecountry\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;China\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecnt\u003c/span\u003e \u003cspan class=\"k\"\u003eFROM\u003c/span\u003e \u003cspan class=\"n\"\u003epage_view_source\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e-- Overwrites rows into partition (date, country), where date is static partition with value \u0026#39;2019-8-30\u0026#39;,\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e-- country is dynamic partition whose value is dynamic determined by each row.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eINSERT\u003c/span\u003e \u003cspan class=\"n\"\u003eOVERWRITE\u003c/span\u003e \u003cspan class=\"n\"\u003ecountry_page_view\u003c/span\u003e \u003cspan class=\"n\"\u003ePARTITION\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003edate\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;2019-8-30\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecnt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecountry\u003c/span\u003e \u003cspan class=\"k\"\u003eFROM\u003c/span\u003e \u003cspan class=\"n\"\u003epage_view_source\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"insert-values-into-tables\"\u003eInsert values into tables\u003c/h2\u003e\n\u003cp\u003eINSERT\u0026hellip;VALUES 语句可以用来直接从 SQL 中向表中插入数据。\u003c/p\u003e\n\u003ch3 id=\"语法-1\"\u003e语法\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eINSERT\u003c/span\u003e \u003cspan class=\"err\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003eINTO\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eOVERWRITE\u003c/span\u003e \u003cspan class=\"err\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.][\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"k\"\u003etable_name\u003c/span\u003e \u003cspan class=\"k\"\u003eVALUES\u003c/span\u003e \u003cspan class=\"n\"\u003evalues_row\u003c/span\u003e \u003cspan class=\"p\"\u003e[,\u003c/span\u003e \u003cspan class=\"n\"\u003evalues_row\u003c/span\u003e \u003cspan class=\"p\"\u003e...]\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003evalues_row\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval1\u003c/span\u003e \u003cspan class=\"p\"\u003e[,\u003c/span\u003e \u003cspan class=\"n\"\u003eval2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...])\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eOVERWRITE\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eINSERT OVERWRITE 将覆盖表中的任何现有数据。否则，将追加新数据。\u003c/p\u003e\n\u003ch3 id=\"例子-1\"\u003e例子\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"n\"\u003estudents\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"nb\"\u003eINT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egpa\u003c/span\u003e \u003cspan class=\"nb\"\u003eDECIMAL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(...);\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eINSERT\u003c/span\u003e \u003cspan class=\"k\"\u003eINTO\u003c/span\u003e \u003cspan class=\"n\"\u003estudents\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eVALUES\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;fred flintstone\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e35\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e28\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;barney rubble\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e原文链接: \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/insert.html\"\u003ehttps://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/insert.html\u003c/a\u003e\u003c/p\u003e\n","text":"INSERT 语句 INSERT 语句用于向表中添加行。\n运行 INSERT 语句 单条 INSERT 语句可以通过 TableEnvironment 的 executeSql() 方法执行，也可以在 SQL CLI 中执行。INSERT 语句的 executeSql() 方法会立即提交一个 Flink 作业，并返回一个与提交的作业相关联的 TableResult 实例。多个 INSERT 语句可以通过 StatementSet 的 addInsertSql() 方法执行，StatementSet 可以由 TableEnvironment.createStatementSet() 方法创建。addInsertSql() 方法是一种懒惰的执行方式，它们只有在调用 StatementSet.execute() 时才会被执行。\n下面的例子展示了如何在 TableEnvironment 中运行一条 INSERT 语句，以及在 SQL CLI 中，在 StatementSet 中运行多条 INSERT 语句。\nFlink SQL\u0026gt; CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...); [INFO] Table has been created. Flink SQL\u0026gt; CREATE TABLE RubberOrders(product STRING, amount INT) WITH (...); Flink SQL\u0026gt; SHOW TABLES; Orders RubberOrders Flink SQL\u0026gt; INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE \u0026#39;%Rubber%\u0026#39;; [INFO] Submitting SQL update statement to the cluster... [INFO] Table update statement has been successfully submitted to the cluster: val settings = EnvironmentSettings.newInstance()... val tEnv = TableEnvironment.create(settings) // register a source table named \u0026#34;Orders\u0026#34; and a sink table named \u0026#34;RubberOrders\u0026#34; tEnv.executeSql(\u0026#34;CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...)\u0026#34;) tEnv.executeSql(\u0026#34;CREATE TABLE RubberOrders(product STRING, amount INT) WITH (...)\u0026#34;) // run a single INSERT query on the registered source table and emit the result to registered sink table val tableResult1 = tEnv.executeSql( \u0026#34;INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE \u0026#39;%Rubber%\u0026#39;\u0026#34;) // get job status through TableResult println(tableResult1.getJobClient().get().getJobStatus()) //---------------------------------------------------------------------------- // register another sink table named \u0026#34;GlassOrders\u0026#34; for multiple INSERT queries tEnv.executeSql(\u0026#34;CREATE TABLE GlassOrders(product VARCHAR, amount INT) WITH (...)\u0026#34;) // run multiple INSERT queries on the registered source table and emit the result to registered sink tables val stmtSet = tEnv.createStatementSet() // only single INSERT query can be accepted by `addInsertSql` method stmtSet.addInsertSql( \u0026#34;INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE \u0026#39;%Rubber%\u0026#39;\u0026#34;) stmtSet.addInsertSql( \u0026#34;INSERT INTO GlassOrders SELECT product, amount FROM Orders WHERE product LIKE \u0026#39;%Glass%\u0026#39;\u0026#34;) // execute all statements together val tableResult2 = stmtSet.execute() // get job status through TableResult println(tableResult2.getJobClient().get().getJobStatus()) Insert from select queries 查询结果可以通过使用插入子句插入到表中。\n语法 INSERT { INTO | OVERWRITE } [catalog_name.][db_name.]table_name [PARTITION part_spec] select_statement part_spec: (part_col_name1=val1 [, part_col_name2=val2, ...]) OVERWRITE\nINSERT OVERWRITE 将覆盖表或分区中的任何现有数据。否则，将追加新数据。\nPARTITION\nPARTITION 子句应包含本次插入的静态分区列。\n例子 -- Creates a partitioned table CREATE TABLE country_page_view (user STRING, cnt INT, date STRING, country STRING) PARTITIONED BY (date, country) WITH (...) -- Appends rows into the static partition (date=\u0026#39;2019-8-30\u0026#39;, country=\u0026#39;China\u0026#39;) INSERT INTO country_page_view PARTITION (date=\u0026#39;2019-8-30\u0026#39;, country=\u0026#39;China\u0026#39;) SELECT user, cnt FROM page_view_source; -- Appends rows into partition (date, country), where date is static partition with value \u0026#39;2019-8-30\u0026#39;, -- country is dynamic partition whose value is dynamic determined by each row. INSERT INTO country_page_view PARTITION (date=\u0026#39;2019-8-30\u0026#39;) SELECT user, cnt, country FROM page_view_source; -- Overwrites rows into static partition (date=\u0026#39;2019-8-30\u0026#39;, country=\u0026#39;China\u0026#39;) INSERT OVERWRITE country_page_view PARTITION (date=\u0026#39;2019-8-30\u0026#39;, country=\u0026#39;China\u0026#39;) SELECT user, cnt FROM page_view_source; -- Overwrites rows into partition (date, country), where date is static partition with value \u0026#39;2019-8-30\u0026#39;, -- country is dynamic partition whose value is dynamic determined by each row. INSERT OVERWRITE country_page_view PARTITION (date=\u0026#39;2019-8-30\u0026#39;) SELECT user, cnt, country FROM page_view_source; Insert values into tables INSERT\u0026hellip;VALUES 语句可以用来直接从 SQL 中向表中插入数据。\n语法 INSERT { INTO | OVERWRITE } [catalog_name.][db_name.]table_name VALUES values_row [, values_row ...] values_row: : (val1 [, val2, ...]) OVERWRITE\nINSERT OVERWRITE 将覆盖表中的任何现有数据。否则，将追加新数据。\n例子 CREATE TABLE students (name STRING, age INT, gpa DECIMAL(3, 2)) WITH (...); INSERT INTO students VALUES (\u0026#39;fred flintstone\u0026#39;, 35, 1.28), (\u0026#39;barney rubble\u0026#39;, 32, 2.32); 原文链接: https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/insert.html\n"},"name":"Insert 语句","published":"2020-08-22T00:00:00+08:00","summary":"Insert Statements","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-22-insert-statements/"},{"content":{"html":"\u003ch1 id=\"show-语句\"\u003eSHOW 语句\u003c/h1\u003e\n\u003cp\u003eSHOW 语句用于列出所有目录，或列出当前目录中的所有数据库，或列出当前目录和当前数据库中的所有表/视图，或列出当前目录和当前数据库中的所有函数，包括临时系统函数、系统函数、临时目录函数和目录函数。\u003c/p\u003e\n\u003cp\u003eFlink SQL 目前支持以下 SHOW 语句。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSHOW CATALOGS\u003c/li\u003e\n\u003cli\u003eSHOW DATABASES\u003c/li\u003e\n\u003cli\u003eSHOW TABLES\u003c/li\u003e\n\u003cli\u003eSHOW VIEWS\u003c/li\u003e\n\u003cli\u003eSHOW FUNCTIONS\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"运行-show-语句\"\u003e运行 SHOW 语句\u003c/h2\u003e\n\u003cp\u003eSHOW 语句可以用 TableEnvironment 的 executeSql()方法执行，也可以在 SQL CLI 中执行。executeSql()方法会对成功的 SHOW 操作返回对象，否则会抛出一个异常。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了如何在 TableEnvironment 和 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sqlClient.html\"\u003eSQL CLI\u003c/a\u003e 中运行 SHOW 语句。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eFlink SQL\u0026gt; SHOW CATALOGS\u003cspan class=\"p\"\u003e;\u003c/span\u003e\ndefault_catalog\n\nFlink SQL\u0026gt; SHOW DATABASES\u003cspan class=\"p\"\u003e;\u003c/span\u003e\ndefault_database\n\nFlink SQL\u0026gt; CREATE TABLE my_table \u003cspan class=\"o\"\u003e(\u003c/span\u003e...\u003cspan class=\"o\"\u003e)\u003c/span\u003e WITH \u003cspan class=\"o\"\u003e(\u003c/span\u003e...\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eINFO\u003cspan class=\"o\"\u003e]\u003c/span\u003e Table has been created.\n\nFlink SQL\u0026gt; SHOW TABLES\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nmy_table\n\nFlink SQL\u0026gt; CREATE VIEW my_view AS ...\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eINFO\u003cspan class=\"o\"\u003e]\u003c/span\u003e View has been created.\n\nFlink SQL\u0026gt; SHOW VIEWS\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nmy_view\n\nFlink SQL\u0026gt; SHOW FUNCTIONS\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nmod\nsha256\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eStreamExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eStreamTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// show catalogs\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;SHOW CATALOGS\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// +-----------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// |    catalog name |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +-----------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// | default_catalog |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +-----------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// show databases\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;SHOW DATABASES\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// +------------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// |    database name |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +------------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// | default_database |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +------------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// create a table\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE my_table (...) WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// show tables\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;SHOW TABLES\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// +------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// | table name |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// |   my_table |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// create a view\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE VIEW my_view AS ...\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// show views\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;SHOW VIEWS\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// +-----------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// | view name |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +-----------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// |   my_view |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +-----------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// show functions\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;SHOW FUNCTIONS\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// +---------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// | function name |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +---------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// |           mod |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// |        sha256 |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// |           ... |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +---------------+\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"show-catalogs\"\u003eSHOW CATALOGS\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eSHOW\u003c/span\u003e \u003cspan class=\"n\"\u003eCATALOGS\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e显示所有目录。\u003c/p\u003e\n\u003ch2 id=\"show-databases\"\u003eSHOW DATABASES\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eSHOW\u003c/span\u003e \u003cspan class=\"n\"\u003eDATABASES\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e显示当前目录中的所有数据库。\u003c/p\u003e\n\u003ch2 id=\"show-tables\"\u003eSHOW TABLES\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eSHOW\u003c/span\u003e \u003cspan class=\"n\"\u003eTABLES\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e显示当前目录和当前数据库中的所有表。\u003c/p\u003e\n\u003ch2 id=\"show-views\"\u003eSHOW VIEWS\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eSHOW\u003c/span\u003e \u003cspan class=\"n\"\u003eVIEWS\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e显示当前目录和当前数据库中的所有视图。\u003c/p\u003e\n\u003ch2 id=\"show-functions\"\u003eSHOW FUNCTIONS\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eSHOW\u003c/span\u003e \u003cspan class=\"n\"\u003eFUNCTIONS\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e显示当前目录和当前数据库中的所有功能，包括临时系统功能、系统功能、临时目录功能和目录功能。\u003c/p\u003e\n\u003cp\u003e原文链接: \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/show.html\"\u003ehttps://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/show.html\u003c/a\u003e\u003c/p\u003e\n","text":"SHOW 语句 SHOW 语句用于列出所有目录，或列出当前目录中的所有数据库，或列出当前目录和当前数据库中的所有表/视图，或列出当前目录和当前数据库中的所有函数，包括临时系统函数、系统函数、临时目录函数和目录函数。\nFlink SQL 目前支持以下 SHOW 语句。\n SHOW CATALOGS SHOW DATABASES SHOW TABLES SHOW VIEWS SHOW FUNCTIONS  运行 SHOW 语句 SHOW 语句可以用 TableEnvironment 的 executeSql()方法执行，也可以在 SQL CLI 中执行。executeSql()方法会对成功的 SHOW 操作返回对象，否则会抛出一个异常。\n下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 SHOW 语句。\nFlink SQL\u0026gt; SHOW CATALOGS; default_catalog Flink SQL\u0026gt; SHOW DATABASES; default_database Flink SQL\u0026gt; CREATE TABLE my_table (...) WITH (...); [INFO] Table has been created. Flink SQL\u0026gt; SHOW TABLES; my_table Flink SQL\u0026gt; CREATE VIEW my_view AS ...; [INFO] View has been created. Flink SQL\u0026gt; SHOW VIEWS; my_view Flink SQL\u0026gt; SHOW FUNCTIONS; mod sha256 ... val env = StreamExecutionEnvironment.getExecutionEnvironment() val tEnv = StreamTableEnvironment.create(env) // show catalogs tEnv.executeSql(\u0026#34;SHOW CATALOGS\u0026#34;).print() // +-----------------+ // | catalog name | // +-----------------+ // | default_catalog | // +-----------------+  // show databases tEnv.executeSql(\u0026#34;SHOW DATABASES\u0026#34;).print() // +------------------+ // | database name | // +------------------+ // | default_database | // +------------------+  // create a table tEnv.executeSql(\u0026#34;CREATE TABLE my_table (...) WITH (...)\u0026#34;) // show tables tEnv.executeSql(\u0026#34;SHOW TABLES\u0026#34;).print() // +------------+ // | table name | // +------------+ // | my_table | // +------------+  // create a view tEnv.executeSql(\u0026#34;CREATE VIEW my_view AS ...\u0026#34;) // show views tEnv.executeSql(\u0026#34;SHOW VIEWS\u0026#34;).print() // +-----------+ // | view name | // +-----------+ // | my_view | // +-----------+  // show functions tEnv.executeSql(\u0026#34;SHOW FUNCTIONS\u0026#34;).print() // +---------------+ // | function name | // +---------------+ // | mod | // | sha256 | // | ... | // +---------------+ SHOW CATALOGS SHOW CATALOGS 显示所有目录。\nSHOW DATABASES SHOW DATABASES 显示当前目录中的所有数据库。\nSHOW TABLES SHOW TABLES 显示当前目录和当前数据库中的所有表。\nSHOW VIEWS SHOW VIEWS 显示当前目录和当前数据库中的所有视图。\nSHOW FUNCTIONS SHOW FUNCTIONS 显示当前目录和当前数据库中的所有功能，包括临时系统功能、系统功能、临时目录功能和目录功能。\n原文链接: https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/show.html\n"},"name":"Show 语句","published":"2020-08-22T00:00:00+08:00","summary":"Show Statements","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-22-show-statements/"},{"content":{"html":"\u003ch1 id=\"sql-提示\"\u003eSQL 提示\u003c/h1\u003e\n\u003cp\u003eSQL 提示可以与 SQL 语句一起使用，以改变执行计划。本章解释了如何使用提示来强制各种方法。\u003c/p\u003e\n\u003cp\u003e一般来说，一个提示可以用来。\u003c/p\u003e\n\u003cp\u003e强制执行计划器：没有完美的计划器，所以实现提示让用户更好地控制执行是有意义的。\nAppend meta data(或统计)：一些统计，比如\u0026quot;扫描的表索引\u0026quot;和 \u0026ldquo;一些 shuffle 键的 skew info\u0026rdquo;，对于查询来说是有些动态的，用提示来配置它们会非常方便，因为我们从 planner 得到的规划元数据往往不是那么准确。\n运算符资源约束：对于很多情况，我们会给执行运算符一个默认的资源配置，比如最小并行或管理内存（耗费资源的 UDF）或特殊的资源需求（GPU 或 SSD 磁盘）等等，用提示对每个查询（而不是 Job）的资源进行配置会非常灵活。\u003c/p\u003e\n\u003ch2 id=\"动态表选项\"\u003e动态表选项\u003c/h2\u003e\n\u003cp\u003e动态表选项允许动态指定或覆盖表选项，与 SQL DDL 或连接 API 定义的静态表选项不同，这些选项可以在每个查询中的每个表范围内灵活指定。\u003c/p\u003e\n\u003cp\u003e因此，它非常适用于交互式终端的临时查询，例如，在 SQL-CLI 中，只需添加一个动态选项 \u003ccode\u003e/*+ OPTIONS('csv.ignore-parse-errors'='true') */\u003c/code\u003e，就可以指定忽略 CSV 源的解析错误。\u003c/p\u003e\n\u003cp\u003e注意：动态表选项默认是禁止使用的，因为它可能会改变查询的语义。您需要将配置选项 table.dynamic-table-options.enabled 显式地设置为 true（默认为 false），有关如何设置配置选项的详细信息，请参阅\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/config.html\"\u003e配置\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"语法\"\u003e语法\u003c/h3\u003e\n\u003cp\u003e为了不破坏 SQL 的兼容性，我们使用 Oracle 风格的 SQL 提示语法。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etable_path /*+ OPTIONS(key=val [, key=val]*) */\n\nkey:\n    stringLiteral\nval:\n    stringLiteral\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"例子\"\u003e例子\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"n\"\u003ekafka_table1\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e \u003cspan class=\"nb\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"nb\"\u003eINT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(...);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"n\"\u003ekafka_table2\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e \u003cspan class=\"nb\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"nb\"\u003eINT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(...);\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e-- override table options in query source\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"n\"\u003ekafka_table1\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*+ OPTIONS(\u0026#39;scan.startup.mode\u0026#39;=\u0026#39;earliest-offset\u0026#39;) */\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e-- override table options in join\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekafka_table1\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*+ OPTIONS(\u0026#39;scan.startup.mode\u0026#39;=\u0026#39;earliest-offset\u0026#39;) */\u003c/span\u003e \u003cspan class=\"n\"\u003et1\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ejoin\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekafka_table2\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*+ OPTIONS(\u0026#39;scan.startup.mode\u0026#39;=\u0026#39;earliest-offset\u0026#39;) */\u003c/span\u003e \u003cspan class=\"n\"\u003et2\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003et1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003et2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e-- override table options for INSERT target table\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003einsert\u003c/span\u003e \u003cspan class=\"k\"\u003einto\u003c/span\u003e \u003cspan class=\"n\"\u003ekafka_table1\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*+ OPTIONS(\u0026#39;sink.partitioner\u0026#39;=\u0026#39;round-robin\u0026#39;) */\u003c/span\u003e \u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"n\"\u003ekafka_table2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e原文链接: \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/hints.html\"\u003ehttps://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/hints.html\u003c/a\u003e\u003c/p\u003e\n","text":"SQL 提示 SQL 提示可以与 SQL 语句一起使用，以改变执行计划。本章解释了如何使用提示来强制各种方法。\n一般来说，一个提示可以用来。\n强制执行计划器：没有完美的计划器，所以实现提示让用户更好地控制执行是有意义的。 Append meta data(或统计)：一些统计，比如\u0026quot;扫描的表索引\u0026quot;和 \u0026ldquo;一些 shuffle 键的 skew info\u0026rdquo;，对于查询来说是有些动态的，用提示来配置它们会非常方便，因为我们从 planner 得到的规划元数据往往不是那么准确。 运算符资源约束：对于很多情况，我们会给执行运算符一个默认的资源配置，比如最小并行或管理内存（耗费资源的 UDF）或特殊的资源需求（GPU 或 SSD 磁盘）等等，用提示对每个查询（而不是 Job）的资源进行配置会非常灵活。\n动态表选项 动态表选项允许动态指定或覆盖表选项，与 SQL DDL 或连接 API 定义的静态表选项不同，这些选项可以在每个查询中的每个表范围内灵活指定。\n因此，它非常适用于交互式终端的临时查询，例如，在 SQL-CLI 中，只需添加一个动态选项 /*+ OPTIONS('csv.ignore-parse-errors'='true') */，就可以指定忽略 CSV 源的解析错误。\n注意：动态表选项默认是禁止使用的，因为它可能会改变查询的语义。您需要将配置选项 table.dynamic-table-options.enabled 显式地设置为 true（默认为 false），有关如何设置配置选项的详细信息，请参阅配置。\n语法 为了不破坏 SQL 的兼容性，我们使用 Oracle 风格的 SQL 提示语法。\ntable_path /*+ OPTIONS(key=val [, key=val]*) */ key: stringLiteral val: stringLiteral 例子 CREATE TABLE kafka_table1 (id BIGINT, name STRING, age INT) WITH (...); CREATE TABLE kafka_table2 (id BIGINT, name STRING, age INT) WITH (...); -- override table options in query source select id, name from kafka_table1 /*+ OPTIONS(\u0026#39;scan.startup.mode\u0026#39;=\u0026#39;earliest-offset\u0026#39;) */; -- override table options in join select * from kafka_table1 /*+ OPTIONS(\u0026#39;scan.startup.mode\u0026#39;=\u0026#39;earliest-offset\u0026#39;) */ t1 join kafka_table2 /*+ OPTIONS(\u0026#39;scan.startup.mode\u0026#39;=\u0026#39;earliest-offset\u0026#39;) */ t2 on t1.id = t2.id; -- override table options for INSERT target table insert into kafka_table1 /*+ OPTIONS(\u0026#39;sink.partitioner\u0026#39;=\u0026#39;round-robin\u0026#39;) */ select * from kafka_table2; 原文链接: https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/hints.html\n"},"name":"SQL 提示","published":"2020-08-22T00:00:00+08:00","summary":"SQL Hints","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-22-sql-hints/"},{"content":{"html":"\u003ch1 id=\"use-语句\"\u003eUSE 语句\u003c/h1\u003e\n\u003cp\u003eUSE 语句用于设置当前数据库或目录。\u003c/p\u003e\n\u003ch2 id=\"运行-use-语句\"\u003e运行 USE 语句\u003c/h2\u003e\n\u003cp\u003eUSE 语句可以通过 TableEnvironment 的 executeSql() 方法执行，也可以在 SQL CLI 中执行。executeSql() 方法会对一个成功的 USE 操作返回 \u0026lsquo;OK\u0026rsquo;， 否则会抛出一个异常。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了如何在 TableEnvironment 和 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sqlClient.html\"\u003eSQL CLI\u003c/a\u003e 中运行一条 USE 语句。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eStreamExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eStreamTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// create a catalog\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE CATALOG cat1 WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;SHOW CATALOGS\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// +-----------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// |    catalog name |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +-----------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// | default_catalog |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// | cat1            |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +-----------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// change default catalog\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;USE CATALOG cat1\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;SHOW DATABASES\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// databases are empty\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +---------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// | database name |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +---------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +---------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// create a database\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE DATABASE db1 WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;SHOW DATABASES\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// +---------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// | database name |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +---------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// |        db1    |\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// +---------------+\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// change default database\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;USE db1\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"use-catloag\"\u003eUSE CATLOAG\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"n\"\u003eUSE\u003c/span\u003e \u003cspan class=\"k\"\u003eCATALOG\u003c/span\u003e \u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e设置当前目录。所有没有明确指定目录的后续命令将使用这个目录。如果所提供的目录不存在，则会抛出一个异常。默认的当前目录是default_catalog。\u003c/p\u003e\n\u003ch2 id=\"use\"\u003eUSE\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"n\"\u003eUSE\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"n\"\u003edatabase_name\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e设置当前数据库。所有没有明确指定数据库的后续命令将使用这个数据库。如果提供的数据库不存在，则会抛出一个异常。默认的当前数据库是default_database。\u003c/p\u003e\n\u003cp\u003e原文链接: \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/use.html\"\u003ehttps://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/use.html\u003c/a\u003e\u003c/p\u003e\n","text":"USE 语句 USE 语句用于设置当前数据库或目录。\n运行 USE 语句 USE 语句可以通过 TableEnvironment 的 executeSql() 方法执行，也可以在 SQL CLI 中执行。executeSql() 方法会对一个成功的 USE 操作返回 \u0026lsquo;OK\u0026rsquo;， 否则会抛出一个异常。\n下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行一条 USE 语句。\nval env = StreamExecutionEnvironment.getExecutionEnvironment() val tEnv = StreamTableEnvironment.create(env) // create a catalog tEnv.executeSql(\u0026#34;CREATE CATALOG cat1 WITH (...)\u0026#34;) tEnv.executeSql(\u0026#34;SHOW CATALOGS\u0026#34;).print() // +-----------------+ // | catalog name | // +-----------------+ // | default_catalog | // | cat1 | // +-----------------+  // change default catalog tEnv.executeSql(\u0026#34;USE CATALOG cat1\u0026#34;) tEnv.executeSql(\u0026#34;SHOW DATABASES\u0026#34;).print() // databases are empty // +---------------+ // | database name | // +---------------+ // +---------------+  // create a database tEnv.executeSql(\u0026#34;CREATE DATABASE db1 WITH (...)\u0026#34;) tEnv.executeSql(\u0026#34;SHOW DATABASES\u0026#34;).print() // +---------------+ // | database name | // +---------------+ // | db1 | // +---------------+  // change default database tEnv.executeSql(\u0026#34;USE db1\u0026#34;) USE CATLOAG USE CATALOG catalog_name 设置当前目录。所有没有明确指定目录的后续命令将使用这个目录。如果所提供的目录不存在，则会抛出一个异常。默认的当前目录是default_catalog。\nUSE USE [catalog_name.]database_name 设置当前数据库。所有没有明确指定数据库的后续命令将使用这个数据库。如果提供的数据库不存在，则会抛出一个异常。默认的当前数据库是default_database。\n原文链接: https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/use.html\n"},"name":"Use 语句","published":"2020-08-22T00:00:00+08:00","summary":"Use Statements","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-22-use-statements/"},{"content":{"html":"\u003ch1 id=\"describe-语句\"\u003eDESCRIBE 语句\u003c/h1\u003e\n\u003cp\u003eDESCRIBE 语句用于描述表或视图的模式。\u003c/p\u003e\n\u003ch2 id=\"运行一个describe语句\"\u003e运行一个DESCRIBE语句\u003c/h2\u003e\n\u003cp\u003eDESCRIBE语句可以用TableEnvironment的executeSql()方法执行，也可以在SQL CLI中执行。executeSql()方法对于一个成功的DESCRIBE操作会返回给定表的模式，否则会抛出一个异常。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了如何在TableEnvironment和SQL CLI中运行DESCRIBE语句。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003esettings\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e()...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esettings\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// register a table named \u0026#34;Orders\u0026#34;\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e \u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE Orders (\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\u0026#34; `user` BIGINT NOT NULl,\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\u0026#34; product VARCHAR(32),\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\u0026#34; amount INT,\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\u0026#34; ts TIMESTAMP(3),\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\u0026#34; ptime AS PROCTIME(),\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\u0026#34; PRIMARY KEY(`user`) NOT ENFORCED,\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\u0026#34; WATERMARK FOR ts AS ts - INTERVAL \u0026#39;1\u0026#39; SECONDS\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\u0026#34;) with (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// print the schema\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;DESCRIBE Orders\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003eFlink SQL\u0026gt; CREATE TABLE Orders (\n\u0026gt;  `user` BIGINT NOT NULl,\n\u0026gt;  product VARCHAR(32),\n\u0026gt;  amount INT,\n\u0026gt;  ts TIMESTAMP(3),\n\u0026gt;  ptime AS PROCTIME(),\n\u0026gt;  PRIMARY KEY(`user`) NOT ENFORCED,\n\u0026gt;  WATERMARK FOR ts AS ts - INTERVAL '1' SECONDS\n\u0026gt; ) with (\n\u0026gt;  ...\n\u0026gt; );\n[INFO] Table has been created.\n\nFlink SQL\u0026gt; DESCRIBE Orders;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003eroot\n |-- user: BIGINT NOT NULL\n |-- product: VARCHAR(32)\n |-- amount: INT\n |-- ts: TIMESTAMP(3) *ROWTIME*\n |-- ptime: TIMESTAMP(3) NOT NULL *PROCTIME* AS PROCTIME()\n |-- WATERMARK FOR ts AS `ts` - INTERVAL '1' SECOND\n |-- CONSTRAINT PK_3599338 PRIMARY KEY (user)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上述例子的结果是：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e+---------+----------------------------------+-------+-----------+-----------------+----------------------------+\n|    name |                             type |  null |       key | computed column |                  watermark |\n+---------+----------------------------------+-------+-----------+-----------------+----------------------------+\n|    user |                           BIGINT | false | PRI(user) |                 |                            |\n| product |                      VARCHAR(32) |  true |           |                 |                            |\n|  amount |                              INT |  true |           |                 |                            |\n|      ts |           TIMESTAMP(3) *ROWTIME* |  true |           |                 | `ts` - INTERVAL '1' SECOND |\n|   ptime | TIMESTAMP(3) NOT NULL *PROCTIME* | false |           |      PROCTIME() |                            |\n+---------+----------------------------------+-------+-----------+-----------------+----------------------------+\n5 rows in set\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"语法\"\u003e语法\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eDESCRIBE\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.][\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"k\"\u003etable_name\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e原文链接: \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/describe.html\"\u003ehttps://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/describe.html\u003c/a\u003e\u003c/p\u003e\n","text":"DESCRIBE 语句 DESCRIBE 语句用于描述表或视图的模式。\n运行一个DESCRIBE语句 DESCRIBE语句可以用TableEnvironment的executeSql()方法执行，也可以在SQL CLI中执行。executeSql()方法对于一个成功的DESCRIBE操作会返回给定表的模式，否则会抛出一个异常。\n下面的例子展示了如何在TableEnvironment和SQL CLI中运行DESCRIBE语句。\nval settings = EnvironmentSettings.newInstance()... val tableEnv = TableEnvironment.create(settings) // register a table named \u0026#34;Orders\u0026#34;  tableEnv.executeSql( \u0026#34;CREATE TABLE Orders (\u0026#34; + \u0026#34; `user` BIGINT NOT NULl,\u0026#34; + \u0026#34; product VARCHAR(32),\u0026#34; + \u0026#34; amount INT,\u0026#34; + \u0026#34; ts TIMESTAMP(3),\u0026#34; + \u0026#34; ptime AS PROCTIME(),\u0026#34; + \u0026#34; PRIMARY KEY(`user`) NOT ENFORCED,\u0026#34; + \u0026#34; WATERMARK FOR ts AS ts - INTERVAL \u0026#39;1\u0026#39; SECONDS\u0026#34; + \u0026#34;) with (...)\u0026#34;) // print the schema tableEnv.executeSql(\u0026#34;DESCRIBE Orders\u0026#34;).print() Flink SQL\u0026gt; CREATE TABLE Orders ( \u0026gt; `user` BIGINT NOT NULl, \u0026gt; product VARCHAR(32), \u0026gt; amount INT, \u0026gt; ts TIMESTAMP(3), \u0026gt; ptime AS PROCTIME(), \u0026gt; PRIMARY KEY(`user`) NOT ENFORCED, \u0026gt; WATERMARK FOR ts AS ts - INTERVAL '1' SECONDS \u0026gt; ) with ( \u0026gt; ... \u0026gt; ); [INFO] Table has been created. Flink SQL\u0026gt; DESCRIBE Orders; root |-- user: BIGINT NOT NULL |-- product: VARCHAR(32) |-- amount: INT |-- ts: TIMESTAMP(3) *ROWTIME* |-- ptime: TIMESTAMP(3) NOT NULL *PROCTIME* AS PROCTIME() |-- WATERMARK FOR ts AS `ts` - INTERVAL '1' SECOND |-- CONSTRAINT PK_3599338 PRIMARY KEY (user) 上述例子的结果是：\n+---------+----------------------------------+-------+-----------+-----------------+----------------------------+ | name | type | null | key | computed column | watermark | +---------+----------------------------------+-------+-----------+-----------------+----------------------------+ | user | BIGINT | false | PRI(user) | | | | product | VARCHAR(32) | true | | | | | amount | INT | true | | | | | ts | TIMESTAMP(3) *ROWTIME* | true | | | `ts` - INTERVAL '1' SECOND | | ptime | TIMESTAMP(3) NOT NULL *PROCTIME* | false | | PROCTIME() | | +---------+----------------------------------+-------+-----------+-----------------+----------------------------+ 5 rows in set 语法 DESCRIBE [catalog_name.][db_name.]table_name 原文链接: https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/describe.html\n"},"name":"运行 Describe 语句","published":"2020-08-22T00:00:00+08:00","summary":"Run a Describe Statement","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-22-run-a-describe-statement/"}],"name":"SQL","type":"feed","url":"https://ohmyweekly.github.io/tags/sql/"}