<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.79.0">Hugo</generator><title type="html"><![CDATA[SQL on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/sql/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/sql/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/sql/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/sql/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2020-12-23T23:14:06+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/sql/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Alter 语句]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-22-alter-statements/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-drop-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Drop 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-explan-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Explan 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-insert-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Insert 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-sql-hints/?utm_source=atom_feed" rel="related" type="text/html" title="SQL 提示" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-show-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Show 语句" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-22-alter-statements/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-22T00:00:00+08:00</published>
            <updated>2020-08-22T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>ALTER Statements</blockquote><h1 id="alter-语句">ALTER 语句</h1>
<p>ALTER 语句用于修改目录中注册的表/视图/函数定义。</p>
<p>Flink SQL 目前支持以下 ALTER 语句。</p>
<ul>
<li>ALTER TABLE</li>
<li>ALTER DATABASE</li>
<li>ALTER FUNCTION</li>
</ul>
<h2 id="运行-alter-语句">运行 ALTER 语句</h2>
<p>ALTER 语句可以用 TableEnvironment 的 executeSql()方法执行，也可以在 SQL CLI 中执行。executeSql()方法在 ALTER 操作成功时返回 &ldquo;OK&rdquo;，否则将抛出一个异常。</p>
<p>下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 ALTER 语句。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">settings</span> <span class="k">=</span> <span class="nc">EnvironmentSettings</span><span class="o">.</span><span class="n">newInstance</span><span class="o">()...</span>
<span class="k">val</span> <span class="n">tableEnv</span> <span class="k">=</span> <span class="nc">TableEnvironment</span><span class="o">.</span><span class="n">create</span><span class="o">(</span><span class="n">settings</span><span class="o">)</span>

<span class="c1">// register a table named &#34;Orders&#34;
</span><span class="c1"></span><span class="n">tableEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...)&#34;</span><span class="o">);</span>

<span class="c1">// a string array: [&#34;Orders&#34;]
</span><span class="c1"></span><span class="k">val</span> <span class="n">tables</span> <span class="k">=</span> <span class="n">tableEnv</span><span class="o">.</span><span class="n">listTables</span><span class="o">()</span>
<span class="c1">// or tableEnv.executeSql(&#34;SHOW TABLES&#34;).print()
</span><span class="c1"></span>
<span class="c1">// rename &#34;Orders&#34; to &#34;NewOrders&#34;
</span><span class="c1"></span><span class="n">tableEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;ALTER TABLE Orders RENAME TO NewOrders;&#34;</span><span class="o">)</span>

<span class="c1">// a string array: [&#34;NewOrders&#34;]
</span><span class="c1"></span><span class="k">val</span> <span class="n">tables</span> <span class="k">=</span> <span class="n">tableEnv</span><span class="o">.</span><span class="n">listTables</span><span class="o">()</span>
<span class="c1">// or tableEnv.executeSql(&#34;SHOW TABLES&#34;).print()
</span></code></pre></div><h2 id="alter-table">ALTER TABLE</h2>
<ul>
<li>Rename Table</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="p">[</span><span class="k">catalog_name</span><span class="p">.][</span><span class="n">db_name</span><span class="p">.]</span><span class="k">table_name</span> <span class="k">RENAME</span> <span class="k">TO</span> <span class="n">new_table_name</span>
</code></pre></div><p>将给定的表名重命名为另一个新表名。</p>
<ul>
<li>设置或更改表属性</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="p">[</span><span class="k">catalog_name</span><span class="p">.][</span><span class="n">db_name</span><span class="p">.]</span><span class="k">table_name</span> <span class="k">SET</span> <span class="p">(</span><span class="n">key1</span><span class="o">=</span><span class="n">val1</span><span class="p">,</span> <span class="n">key2</span><span class="o">=</span><span class="n">val2</span><span class="p">,</span> <span class="p">...)</span>
</code></pre></div><p>设置指定表格中的一个或多个属性。如果某个属性已经在表中被设置，则用新的属性覆盖旧的值。</p>
<h2 id="alter-database">ALTER DATABASE</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">ALTER</span> <span class="k">DATABASE</span> <span class="p">[</span><span class="k">catalog_name</span><span class="p">.]</span><span class="n">db_name</span> <span class="k">SET</span> <span class="p">(</span><span class="n">key1</span><span class="o">=</span><span class="n">val1</span><span class="p">,</span> <span class="n">key2</span><span class="o">=</span><span class="n">val2</span><span class="p">,</span> <span class="p">...)</span>
</code></pre></div><p>在指定的数据库中设置一个或多个属性。如果某个属性已经在数据库中被设置，则用新的属性覆盖旧的值。</p>
<h2 id="alter-function">ALTER FUNCTION</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">ALTER</span> <span class="p">[</span><span class="k">TEMPORARY</span><span class="o">|</span><span class="k">TEMPORARY</span> <span class="k">SYSTEM</span><span class="p">]</span> <span class="k">FUNCTION</span> 
  <span class="p">[</span><span class="k">IF</span> <span class="k">EXISTS</span><span class="p">]</span> <span class="p">[</span><span class="k">catalog_name</span><span class="p">.][</span><span class="n">db_name</span><span class="p">.]</span><span class="n">function_name</span> 
  <span class="k">AS</span> <span class="n">identifier</span> <span class="p">[</span><span class="k">LANGUAGE</span> <span class="n">JAVA</span><span class="o">|</span><span class="n">SCALA</span><span class="o">|</span><span class="n">PYTHON</span><span class="p">]</span>
</code></pre></div><p>用新的标识符和可选的语言标签改变一个目录函数。如果一个函数在目录中不存在，就会抛出一个异常。</p>
<p>如果语言标签是 JAVA/SCALA，标识符是 UDF 的完整 classpath。关于 Java/Scala UDF 的实现，请参考 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/functions/udfs.html">User-defined Functions</a> 了解详情。</p>
<p>如果语言标签是 PYTHON，标识符是 UDF 的完全限定名，例如 pyflink.table.test.test_udf.add。关于 Python UDF 的实现，更多细节请参考 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/python/user-guide/table/udfs/python_udfs.html">Python UDFs</a>。</p>
<p><strong>TEMPORARY</strong></p>
<p>改变具有目录和数据库命名空间的临时目录功能，并覆盖目录功能。</p>
<p><strong>TEMPORARY SYSTEM</strong></p>
<p>更改没有命名空间的临时系统函数，并覆盖内置函数。</p>
<p><strong>IF EXISTS</strong></p>
<p>如果函数不存在，就不会发生任何事情。</p>
<p><strong>LANGUAGE JAVA|SCALA|PYTHON</strong></p>
<p>语言标签，用于指导 flink 运行时如何执行函数。目前只支持 JAVA、SCALA 和 PYTHON，函数的默认语言是 JAVA。</p>
<p>原文链接: <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/alter.html">https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/alter.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/flink" term="flink" label="Flink" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink" term="flink" label="Flink" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" term="flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" label="Flink 官方文档" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/table-api-sql" term="table-api-sql" label="Table API &amp; SQL" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/sql" term="sql" label="SQL" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Drop 语句]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-22-drop-statements/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-alter-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Alter 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-explan-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Explan 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-insert-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Insert 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-sql-hints/?utm_source=atom_feed" rel="related" type="text/html" title="SQL 提示" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-show-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Show 语句" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-22-drop-statements/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-22T00:00:00+08:00</published>
            <updated>2020-08-22T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Drop Statements</blockquote><h1 id="drop-语句">DROP 语句</h1>
<p>DROP 语句用于从当前或指定的目录中删除一个注册的表/视图/函数。</p>
<p>Flink SQL 目前支持以下 DROP 语句。</p>
<ul>
<li>DROP TABLE</li>
<li>DROP DATABASE</li>
<li>DROP VIEW</li>
<li>DROP FUNCTION</li>
</ul>
<h2 id="运行一个-drop-语句">运行一个 DROP 语句</h2>
<p>DROP 语句可以用 TableEnvironment 的 executeSql()方法执行，也可以在 SQL CLI 中执行。executeSql()方法对于一个成功的 DROP 操作会返回&rsquo;OK'，否则会抛出一个异常。</p>
<p>下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 DROP 语句。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">settings</span> <span class="k">=</span> <span class="nc">EnvironmentSettings</span><span class="o">.</span><span class="n">newInstance</span><span class="o">()...</span>
<span class="k">val</span> <span class="n">tableEnv</span> <span class="k">=</span> <span class="nc">TableEnvironment</span><span class="o">.</span><span class="n">create</span><span class="o">(</span><span class="n">settings</span><span class="o">)</span>

<span class="c1">// register a table named &#34;Orders&#34;
</span><span class="c1"></span><span class="n">tableEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...)&#34;</span><span class="o">)</span>

<span class="c1">// a string array: [&#34;Orders&#34;]
</span><span class="c1"></span><span class="k">val</span> <span class="n">tables</span> <span class="k">=</span> <span class="n">tableEnv</span><span class="o">.</span><span class="n">listTables</span><span class="o">()</span>
<span class="c1">// or tableEnv.executeSql(&#34;SHOW TABLES&#34;).print()
</span><span class="c1"></span>
<span class="c1">// drop &#34;Orders&#34; table from catalog
</span><span class="c1"></span><span class="n">tableEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;DROP TABLE Orders&#34;</span><span class="o">)</span>

<span class="c1">// an empty string array
</span><span class="c1"></span><span class="k">val</span> <span class="n">tables</span> <span class="k">=</span> <span class="n">tableEnv</span><span class="o">.</span><span class="n">listTables</span><span class="o">()</span>
<span class="c1">// or tableEnv.executeSql(&#34;SHOW TABLES&#34;).print()
</span></code></pre></div><h2 id="drop-table">DROP TABLE</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DROP</span> <span class="k">TABLE</span> <span class="p">[</span><span class="k">IF</span> <span class="k">EXISTS</span><span class="p">]</span> <span class="p">[</span><span class="k">catalog_name</span><span class="p">.][</span><span class="n">db_name</span><span class="p">.]</span><span class="k">table_name</span>
</code></pre></div><p>删除一个给定表名的表。如果要删除的表不存在，则抛出一个异常。</p>
<p><strong>IF EXISTS</strong></p>
<p>如果该表不存在，就不会发生任何事情。</p>
<h2 id="drop-database">DROP DATABASE</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DROP</span> <span class="k">DATABASE</span> <span class="p">[</span><span class="k">IF</span> <span class="k">EXISTS</span><span class="p">]</span> <span class="p">[</span><span class="k">catalog_name</span><span class="p">.]</span><span class="n">db_name</span> <span class="p">[</span> <span class="p">(</span><span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">CASCADE</span><span class="p">)</span> <span class="p">]</span>
</code></pre></div><p>删除一个给定数据库名称的数据库，如果要删除的数据库不存在，会产生异常。如果要删除的数据库不存在，则抛出一个异常。</p>
<p><strong>IF EXISTS</strong></p>
<p>如果数据库不存在，则不会发生任何事情。</p>
<p><strong>RESTRICT</strong></p>
<p>丢弃非空数据库会触发异常。默认为启用。</p>
<p><strong>CASCADE</strong></p>
<p>丢弃一个非空的数据库也会丢弃所有相关的表和函数。</p>
<h2 id="drop-view">DROP VIEW</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DROP</span> <span class="p">[</span><span class="k">TEMPORARY</span><span class="p">]</span> <span class="k">VIEW</span>  <span class="p">[</span><span class="k">IF</span> <span class="k">EXISTS</span><span class="p">]</span> <span class="p">[</span><span class="k">catalog_name</span><span class="p">.][</span><span class="n">db_name</span><span class="p">.]</span><span class="n">view_name</span>
</code></pre></div><p>丢弃一个有目录和数据库命名空间的视图。如果要删除的视图不存在，则会产生一个异常。</p>
<p><strong>TEMPORARY</strong></p>
<p>删除具有目录和数据库命名空间的临时视图。</p>
<p><strong>IF EXISTS</strong></p>
<p>如果视图不存在，则不会发生任何事情。</p>
<p>维护依赖关系 Flink 没有通过 CASCADE/RESTRICT 关键字来维护视图的依赖关系，当前的方式是当用户试图在诸如视图的底层表被删除的情况下使用视图时，会产生延迟错误消息。</p>
<h2 id="drop-function">DROP FUNCTION</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DROP</span> <span class="p">[</span><span class="k">TEMPORARY</span><span class="o">|</span><span class="k">TEMPORARY</span> <span class="k">SYSTEM</span><span class="p">]</span> <span class="k">FUNCTION</span> <span class="p">[</span><span class="k">IF</span> <span class="k">EXISTS</span><span class="p">]</span> <span class="p">[</span><span class="k">catalog_name</span><span class="p">.][</span><span class="n">db_name</span><span class="p">.]</span><span class="n">function_name</span><span class="p">;</span>
</code></pre></div><p>删除一个有目录和数据库命名空间的目录函数。如果要放弃的函数不存在，则会产生一个异常。</p>
<p><strong>TEMPORARY</strong></p>
<p>丢弃具有目录和数据库命名空间的临时目录功能。</p>
<p><strong>TEMPORARY SYSTEM</strong></p>
<p>删除没有命名空间的临时系统函数。</p>
<p><strong>IF EXISTS</strong></p>
<p>如果函数不存在，就不会发生任何事情。</p>
<p>原文链接: <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/drop.html">https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/drop.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/flink" term="flink" label="Flink" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink" term="flink" label="Flink" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" term="flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" label="Flink 官方文档" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/table-api-sql" term="table-api-sql" label="Table API &amp; SQL" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/sql" term="sql" label="SQL" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Explan 语句]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-22-explan-statements/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-alter-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Alter 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-drop-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Drop 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-insert-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Insert 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-sql-hints/?utm_source=atom_feed" rel="related" type="text/html" title="SQL 提示" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-show-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Show 语句" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-22-explan-statements/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-22T00:00:00+08:00</published>
            <updated>2020-08-22T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Explan Statements</blockquote><h1 id="explain-语句">EXPLAIN 语句</h1>
<p>EXPLAIN 语句用于解释一个查询或 INSERT 语句的逻辑和优化查询计划。</p>
<h2 id="运行-explain-语句">运行 EXPLAIN 语句</h2>
<p>EXPLAIN 语句可以用 <code>TableEnvironment 的 executeSql()</code> 方法执行，也可以在 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sqlClient.html">SQL CLI</a> 中执行。<code>executeSql()</code> 方法在 EXPLAIN 操作成功后返回解释结果，否则将抛出一个异常。</p>
<p>下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 EXPLAIN 语句。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">env</span> <span class="k">=</span> <span class="nc">StreamExecutionEnvironment</span><span class="o">.</span><span class="n">getExecutionEnvironment</span><span class="o">()</span>
<span class="k">val</span> <span class="n">tEnv</span> <span class="k">=</span> <span class="nc">StreamTableEnvironment</span><span class="o">.</span><span class="n">create</span><span class="o">(</span><span class="n">env</span><span class="o">)</span>

<span class="c1">// register a table named &#34;Orders&#34;
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;CREATE TABLE MyTable1 (count bigint, work VARCHAR(256) WITH (...)&#34;</span><span class="o">)</span>
<span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;CREATE TABLE MyTable2 (count bigint, work VARCHAR(256) WITH (...)&#34;</span><span class="o">)</span>

<span class="c1">// explain SELECT statement through TableEnvironment.explainSql()
</span><span class="c1"></span><span class="k">val</span> <span class="n">explanation</span> <span class="k">=</span> <span class="n">tEnv</span><span class="o">.</span><span class="n">explainSql</span><span class="o">(</span>
  <span class="s">&#34;SELECT count, word FROM MyTable1 WHERE word LIKE &#39;F%&#39; &#34;</span> <span class="o">+</span>
  <span class="s">&#34;UNION ALL &#34;</span> <span class="o">+</span> 
  <span class="s">&#34;SELECT count, word FROM MyTable2&#34;</span><span class="o">)</span>
<span class="n">println</span><span class="o">(</span><span class="n">explanation</span><span class="o">)</span>

<span class="c1">// explain SELECT statement through TableEnvironment.executeSql()
</span><span class="c1"></span><span class="k">val</span> <span class="n">tableResult</span> <span class="k">=</span> <span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span>
  <span class="s">&#34;EXPLAIN PLAN FOR &#34;</span> <span class="o">+</span> 
  <span class="s">&#34;SELECT count, word FROM MyTable1 WHERE word LIKE &#39;F%&#39; &#34;</span> <span class="o">+</span>
  <span class="s">&#34;UNION ALL &#34;</span> <span class="o">+</span> 
  <span class="s">&#34;SELECT count, word FROM MyTable2&#34;</span><span class="o">)</span>
<span class="n">tableResult</span><span class="o">.</span><span class="n">print</span><span class="o">()</span>
</code></pre></div><p>EXPLAIN 的结果是：</p>
<pre><code>== Abstract Syntax Tree ==
LogicalUnion(all=[true])
  LogicalFilter(condition=[LIKE($1, _UTF-16LE'F%')])
    FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, MyTable1]], fields=[count, word])
  FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, MyTable2]], fields=[count, word])
  

== Optimized Logical Plan ==
DataStreamUnion(all=[true], union all=[count, word])
  DataStreamCalc(select=[count, word], where=[LIKE(word, _UTF-16LE'F%')])
    TableSourceScan(table=[[default_catalog, default_database, MyTable1]], fields=[count, word])
  TableSourceScan(table=[[default_catalog, default_database, MyTable2]], fields=[count, word])

== Physical Execution Plan ==
Stage 1 : Data Source
	content : collect elements with CollectionInputFormat

Stage 2 : Data Source
	content : collect elements with CollectionInputFormat

	Stage 3 : Operator
		content : from: (count, word)
		ship_strategy : REBALANCE

		Stage 4 : Operator
			content : where: (LIKE(word, _UTF-16LE'F%')), select: (count, word)
			ship_strategy : FORWARD

			Stage 5 : Operator
				content : from: (count, word)
				ship_strategy : REBALANCE
</code></pre><h2 id="语法">语法</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">EXPLAIN</span> <span class="n">PLAN</span> <span class="k">FOR</span> <span class="o">&lt;</span><span class="n">query_statement_or_insert_statement</span><span class="o">&gt;</span>
</code></pre></div><p>关于查询语法，请参考<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/queries.html#supported-syntax">查询</a>页面。关于 INSERT，请参考 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/insert.html">INSERT</a> 页面。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/flink" term="flink" label="Flink" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink" term="flink" label="Flink" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" term="flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" label="Flink 官方文档" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/table-api-sql" term="table-api-sql" label="Table API &amp; SQL" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/sql" term="sql" label="SQL" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Insert 语句]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-22-insert-statements/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-alter-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Alter 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-drop-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Drop 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-explan-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Explan 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-sql-hints/?utm_source=atom_feed" rel="related" type="text/html" title="SQL 提示" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-show-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Show 语句" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-22-insert-statements/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-22T00:00:00+08:00</published>
            <updated>2020-08-22T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Insert Statements</blockquote><h1 id="insert-语句">INSERT 语句</h1>
<p>INSERT 语句用于向表中添加行。</p>
<h2 id="运行-insert-语句">运行 INSERT 语句</h2>
<p>单条 INSERT 语句可以通过 TableEnvironment 的 <code>executeSql()</code> 方法执行，也可以在 SQL CLI 中执行。INSERT 语句的 <code>executeSql()</code> 方法会立即提交一个 Flink 作业，并返回一个与提交的作业相关联的 TableResult 实例。多个 INSERT 语句可以通过 StatementSet 的 <code>addInsertSql()</code> 方法执行，StatementSet 可以由 <code>TableEnvironment.createStatementSet()</code> 方法创建。<code>addInsertSql()</code> 方法是一种懒惰的执行方式，它们只有在调用 <code>StatementSet.execute()</code> 时才会被执行。</p>
<p>下面的例子展示了如何在 TableEnvironment 中运行一条 INSERT 语句，以及在 SQL CLI 中，在 StatementSet 中运行多条 INSERT 语句。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">Flink SQL&gt; CREATE TABLE Orders <span class="o">(</span><span class="sb">`</span>user<span class="sb">`</span> BIGINT, product STRING, amount INT<span class="o">)</span> WITH <span class="o">(</span>...<span class="o">)</span><span class="p">;</span>
<span class="o">[</span>INFO<span class="o">]</span> Table has been created.

Flink SQL&gt; CREATE TABLE RubberOrders<span class="o">(</span>product STRING, amount INT<span class="o">)</span> WITH <span class="o">(</span>...<span class="o">)</span><span class="p">;</span>

Flink SQL&gt; SHOW TABLES<span class="p">;</span>
Orders
RubberOrders

Flink SQL&gt; INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE <span class="s1">&#39;%Rubber%&#39;</span><span class="p">;</span>
<span class="o">[</span>INFO<span class="o">]</span> Submitting SQL update statement to the cluster...
<span class="o">[</span>INFO<span class="o">]</span> Table update statement has been successfully submitted to the cluster:
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">settings</span> <span class="k">=</span> <span class="nc">EnvironmentSettings</span><span class="o">.</span><span class="n">newInstance</span><span class="o">()...</span>
<span class="k">val</span> <span class="n">tEnv</span> <span class="k">=</span> <span class="nc">TableEnvironment</span><span class="o">.</span><span class="n">create</span><span class="o">(</span><span class="n">settings</span><span class="o">)</span>

<span class="c1">// register a source table named &#34;Orders&#34; and a sink table named &#34;RubberOrders&#34;
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...)&#34;</span><span class="o">)</span>
<span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;CREATE TABLE RubberOrders(product STRING, amount INT) WITH (...)&#34;</span><span class="o">)</span>

<span class="c1">// run a single INSERT query on the registered source table and emit the result to registered sink table
</span><span class="c1"></span><span class="k">val</span> <span class="n">tableResult1</span> <span class="k">=</span> <span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span>
  <span class="s">&#34;INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE &#39;%Rubber%&#39;&#34;</span><span class="o">)</span>
<span class="c1">// get job status through TableResult
</span><span class="c1"></span><span class="n">println</span><span class="o">(</span><span class="n">tableResult1</span><span class="o">.</span><span class="n">getJobClient</span><span class="o">().</span><span class="n">get</span><span class="o">().</span><span class="n">getJobStatus</span><span class="o">())</span>

<span class="c1">//----------------------------------------------------------------------------
</span><span class="c1">// register another sink table named &#34;GlassOrders&#34; for multiple INSERT queries
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;CREATE TABLE GlassOrders(product VARCHAR, amount INT) WITH (...)&#34;</span><span class="o">)</span>

<span class="c1">// run multiple INSERT queries on the registered source table and emit the result to registered sink tables
</span><span class="c1"></span><span class="k">val</span> <span class="n">stmtSet</span> <span class="k">=</span> <span class="n">tEnv</span><span class="o">.</span><span class="n">createStatementSet</span><span class="o">()</span>
<span class="c1">// only single INSERT query can be accepted by `addInsertSql` method
</span><span class="c1"></span><span class="n">stmtSet</span><span class="o">.</span><span class="n">addInsertSql</span><span class="o">(</span>
  <span class="s">&#34;INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE &#39;%Rubber%&#39;&#34;</span><span class="o">)</span>
<span class="n">stmtSet</span><span class="o">.</span><span class="n">addInsertSql</span><span class="o">(</span>
  <span class="s">&#34;INSERT INTO GlassOrders SELECT product, amount FROM Orders WHERE product LIKE &#39;%Glass%&#39;&#34;</span><span class="o">)</span>
<span class="c1">// execute all statements together
</span><span class="c1"></span><span class="k">val</span> <span class="n">tableResult2</span> <span class="k">=</span> <span class="n">stmtSet</span><span class="o">.</span><span class="n">execute</span><span class="o">()</span>
<span class="c1">// get job status through TableResult
</span><span class="c1"></span><span class="n">println</span><span class="o">(</span><span class="n">tableResult2</span><span class="o">.</span><span class="n">getJobClient</span><span class="o">().</span><span class="n">get</span><span class="o">().</span><span class="n">getJobStatus</span><span class="o">())</span>
</code></pre></div><h2 id="insert-from-select-queries">Insert from select queries</h2>
<p>查询结果可以通过使用插入子句插入到表中。</p>
<h3 id="语法">语法</h3>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">INSERT</span> <span class="err">{</span> <span class="k">INTO</span> <span class="o">|</span> <span class="n">OVERWRITE</span> <span class="err">}</span> <span class="p">[</span><span class="k">catalog_name</span><span class="p">.][</span><span class="n">db_name</span><span class="p">.]</span><span class="k">table_name</span> <span class="p">[</span><span class="n">PARTITION</span> <span class="n">part_spec</span><span class="p">]</span> <span class="n">select_statement</span>

<span class="n">part_spec</span><span class="p">:</span>
  <span class="p">(</span><span class="n">part_col_name1</span><span class="o">=</span><span class="n">val1</span> <span class="p">[,</span> <span class="n">part_col_name2</span><span class="o">=</span><span class="n">val2</span><span class="p">,</span> <span class="p">...])</span>
</code></pre></div><p><strong>OVERWRITE</strong></p>
<p>INSERT OVERWRITE 将覆盖表或分区中的任何现有数据。否则，将追加新数据。</p>
<p><strong>PARTITION</strong></p>
<p>PARTITION 子句应包含本次插入的静态分区列。</p>
<h3 id="例子">例子</h3>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- Creates a partitioned table
</span><span class="c1"></span><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">country_page_view</span> <span class="p">(</span><span class="k">user</span> <span class="n">STRING</span><span class="p">,</span> <span class="n">cnt</span> <span class="nb">INT</span><span class="p">,</span> <span class="nb">date</span> <span class="n">STRING</span><span class="p">,</span> <span class="n">country</span> <span class="n">STRING</span><span class="p">)</span>
<span class="n">PARTITIONED</span> <span class="k">BY</span> <span class="p">(</span><span class="nb">date</span><span class="p">,</span> <span class="n">country</span><span class="p">)</span>
<span class="k">WITH</span> <span class="p">(...)</span>

<span class="c1">-- Appends rows into the static partition (date=&#39;2019-8-30&#39;, country=&#39;China&#39;)
</span><span class="c1"></span><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">country_page_view</span> <span class="n">PARTITION</span> <span class="p">(</span><span class="nb">date</span><span class="o">=</span><span class="s1">&#39;2019-8-30&#39;</span><span class="p">,</span> <span class="n">country</span><span class="o">=</span><span class="s1">&#39;China&#39;</span><span class="p">)</span>
  <span class="k">SELECT</span> <span class="k">user</span><span class="p">,</span> <span class="n">cnt</span> <span class="k">FROM</span> <span class="n">page_view_source</span><span class="p">;</span>

<span class="c1">-- Appends rows into partition (date, country), where date is static partition with value &#39;2019-8-30&#39;,
</span><span class="c1">-- country is dynamic partition whose value is dynamic determined by each row.
</span><span class="c1"></span><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">country_page_view</span> <span class="n">PARTITION</span> <span class="p">(</span><span class="nb">date</span><span class="o">=</span><span class="s1">&#39;2019-8-30&#39;</span><span class="p">)</span>
  <span class="k">SELECT</span> <span class="k">user</span><span class="p">,</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">country</span> <span class="k">FROM</span> <span class="n">page_view_source</span><span class="p">;</span>

<span class="c1">-- Overwrites rows into static partition (date=&#39;2019-8-30&#39;, country=&#39;China&#39;)
</span><span class="c1"></span><span class="k">INSERT</span> <span class="n">OVERWRITE</span> <span class="n">country_page_view</span> <span class="n">PARTITION</span> <span class="p">(</span><span class="nb">date</span><span class="o">=</span><span class="s1">&#39;2019-8-30&#39;</span><span class="p">,</span> <span class="n">country</span><span class="o">=</span><span class="s1">&#39;China&#39;</span><span class="p">)</span>
  <span class="k">SELECT</span> <span class="k">user</span><span class="p">,</span> <span class="n">cnt</span> <span class="k">FROM</span> <span class="n">page_view_source</span><span class="p">;</span>

<span class="c1">-- Overwrites rows into partition (date, country), where date is static partition with value &#39;2019-8-30&#39;,
</span><span class="c1">-- country is dynamic partition whose value is dynamic determined by each row.
</span><span class="c1"></span><span class="k">INSERT</span> <span class="n">OVERWRITE</span> <span class="n">country_page_view</span> <span class="n">PARTITION</span> <span class="p">(</span><span class="nb">date</span><span class="o">=</span><span class="s1">&#39;2019-8-30&#39;</span><span class="p">)</span>
  <span class="k">SELECT</span> <span class="k">user</span><span class="p">,</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">country</span> <span class="k">FROM</span> <span class="n">page_view_source</span><span class="p">;</span>
</code></pre></div><h2 id="insert-values-into-tables">Insert values into tables</h2>
<p>INSERT&hellip;VALUES 语句可以用来直接从 SQL 中向表中插入数据。</p>
<h3 id="语法-1">语法</h3>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">INSERT</span> <span class="err">{</span> <span class="k">INTO</span> <span class="o">|</span> <span class="n">OVERWRITE</span> <span class="err">}</span> <span class="p">[</span><span class="k">catalog_name</span><span class="p">.][</span><span class="n">db_name</span><span class="p">.]</span><span class="k">table_name</span> <span class="k">VALUES</span> <span class="n">values_row</span> <span class="p">[,</span> <span class="n">values_row</span> <span class="p">...]</span>

<span class="n">values_row</span><span class="p">:</span>
    <span class="p">:</span> <span class="p">(</span><span class="n">val1</span> <span class="p">[,</span> <span class="n">val2</span><span class="p">,</span> <span class="p">...])</span>
</code></pre></div><p><strong>OVERWRITE</strong></p>
<p>INSERT OVERWRITE 将覆盖表中的任何现有数据。否则，将追加新数据。</p>
<h3 id="例子-1">例子</h3>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">students</span> <span class="p">(</span><span class="n">name</span> <span class="n">STRING</span><span class="p">,</span> <span class="n">age</span> <span class="nb">INT</span><span class="p">,</span> <span class="n">gpa</span> <span class="nb">DECIMAL</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="k">WITH</span> <span class="p">(...);</span>

<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">students</span>
  <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;fred flintstone&#39;</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">28</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;barney rubble&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">2</span><span class="p">.</span><span class="mi">32</span><span class="p">);</span>
</code></pre></div><p>原文链接: <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/insert.html">https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/insert.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/flink" term="flink" label="Flink" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink" term="flink" label="Flink" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" term="flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" label="Flink 官方文档" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/table-api-sql" term="table-api-sql" label="Table API &amp; SQL" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/sql" term="sql" label="SQL" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Show 语句]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-22-show-statements/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-alter-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Alter 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-drop-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Drop 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-explan-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Explan 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-insert-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Insert 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-sql-hints/?utm_source=atom_feed" rel="related" type="text/html" title="SQL 提示" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-22-show-statements/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-22T00:00:00+08:00</published>
            <updated>2020-08-22T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Show Statements</blockquote><h1 id="show-语句">SHOW 语句</h1>
<p>SHOW 语句用于列出所有目录，或列出当前目录中的所有数据库，或列出当前目录和当前数据库中的所有表/视图，或列出当前目录和当前数据库中的所有函数，包括临时系统函数、系统函数、临时目录函数和目录函数。</p>
<p>Flink SQL 目前支持以下 SHOW 语句。</p>
<ul>
<li>SHOW CATALOGS</li>
<li>SHOW DATABASES</li>
<li>SHOW TABLES</li>
<li>SHOW VIEWS</li>
<li>SHOW FUNCTIONS</li>
</ul>
<h2 id="运行-show-语句">运行 SHOW 语句</h2>
<p>SHOW 语句可以用 TableEnvironment 的 executeSql()方法执行，也可以在 SQL CLI 中执行。executeSql()方法会对成功的 SHOW 操作返回对象，否则会抛出一个异常。</p>
<p>下面的例子展示了如何在 TableEnvironment 和 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sqlClient.html">SQL CLI</a> 中运行 SHOW 语句。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">Flink SQL&gt; SHOW CATALOGS<span class="p">;</span>
default_catalog

Flink SQL&gt; SHOW DATABASES<span class="p">;</span>
default_database

Flink SQL&gt; CREATE TABLE my_table <span class="o">(</span>...<span class="o">)</span> WITH <span class="o">(</span>...<span class="o">)</span><span class="p">;</span>
<span class="o">[</span>INFO<span class="o">]</span> Table has been created.

Flink SQL&gt; SHOW TABLES<span class="p">;</span>
my_table

Flink SQL&gt; CREATE VIEW my_view AS ...<span class="p">;</span>
<span class="o">[</span>INFO<span class="o">]</span> View has been created.

Flink SQL&gt; SHOW VIEWS<span class="p">;</span>
my_view

Flink SQL&gt; SHOW FUNCTIONS<span class="p">;</span>
mod
sha256
...
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">env</span> <span class="k">=</span> <span class="nc">StreamExecutionEnvironment</span><span class="o">.</span><span class="n">getExecutionEnvironment</span><span class="o">()</span>
<span class="k">val</span> <span class="n">tEnv</span> <span class="k">=</span> <span class="nc">StreamTableEnvironment</span><span class="o">.</span><span class="n">create</span><span class="o">(</span><span class="n">env</span><span class="o">)</span>

<span class="c1">// show catalogs
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;SHOW CATALOGS&#34;</span><span class="o">).</span><span class="n">print</span><span class="o">()</span>
<span class="c1">// +-----------------+
</span><span class="c1">// |    catalog name |
</span><span class="c1">// +-----------------+
</span><span class="c1">// | default_catalog |
</span><span class="c1">// +-----------------+
</span><span class="c1"></span>
<span class="c1">// show databases
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;SHOW DATABASES&#34;</span><span class="o">).</span><span class="n">print</span><span class="o">()</span>
<span class="c1">// +------------------+
</span><span class="c1">// |    database name |
</span><span class="c1">// +------------------+
</span><span class="c1">// | default_database |
</span><span class="c1">// +------------------+
</span><span class="c1"></span>
<span class="c1">// create a table
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;CREATE TABLE my_table (...) WITH (...)&#34;</span><span class="o">)</span>
<span class="c1">// show tables
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;SHOW TABLES&#34;</span><span class="o">).</span><span class="n">print</span><span class="o">()</span>
<span class="c1">// +------------+
</span><span class="c1">// | table name |
</span><span class="c1">// +------------+
</span><span class="c1">// |   my_table |
</span><span class="c1">// +------------+
</span><span class="c1"></span>
<span class="c1">// create a view
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;CREATE VIEW my_view AS ...&#34;</span><span class="o">)</span>
<span class="c1">// show views
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;SHOW VIEWS&#34;</span><span class="o">).</span><span class="n">print</span><span class="o">()</span>
<span class="c1">// +-----------+
</span><span class="c1">// | view name |
</span><span class="c1">// +-----------+
</span><span class="c1">// |   my_view |
</span><span class="c1">// +-----------+
</span><span class="c1"></span>
<span class="c1">// show functions
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;SHOW FUNCTIONS&#34;</span><span class="o">).</span><span class="n">print</span><span class="o">()</span>
<span class="c1">// +---------------+
</span><span class="c1">// | function name |
</span><span class="c1">// +---------------+
</span><span class="c1">// |           mod |
</span><span class="c1">// |        sha256 |
</span><span class="c1">// |           ... |
</span><span class="c1">// +---------------+
</span></code></pre></div><h2 id="show-catalogs">SHOW CATALOGS</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SHOW</span> <span class="n">CATALOGS</span>
</code></pre></div><p>显示所有目录。</p>
<h2 id="show-databases">SHOW DATABASES</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SHOW</span> <span class="n">DATABASES</span>
</code></pre></div><p>显示当前目录中的所有数据库。</p>
<h2 id="show-tables">SHOW TABLES</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SHOW</span> <span class="n">TABLES</span>
</code></pre></div><p>显示当前目录和当前数据库中的所有表。</p>
<h2 id="show-views">SHOW VIEWS</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SHOW</span> <span class="n">VIEWS</span>
</code></pre></div><p>显示当前目录和当前数据库中的所有视图。</p>
<h2 id="show-functions">SHOW FUNCTIONS</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SHOW</span> <span class="n">FUNCTIONS</span>
</code></pre></div><p>显示当前目录和当前数据库中的所有功能，包括临时系统功能、系统功能、临时目录功能和目录功能。</p>
<p>原文链接: <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/show.html">https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/show.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/flink" term="flink" label="Flink" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink" term="flink" label="Flink" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" term="flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" label="Flink 官方文档" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/table-api-sql" term="table-api-sql" label="Table API &amp; SQL" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/sql" term="sql" label="SQL" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[SQL 提示]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-22-sql-hints/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-alter-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Alter 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-drop-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Drop 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-explan-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Explan 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-insert-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Insert 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-show-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Show 语句" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-22-sql-hints/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-22T00:00:00+08:00</published>
            <updated>2020-08-22T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>SQL Hints</blockquote><h1 id="sql-提示">SQL 提示</h1>
<p>SQL 提示可以与 SQL 语句一起使用，以改变执行计划。本章解释了如何使用提示来强制各种方法。</p>
<p>一般来说，一个提示可以用来。</p>
<p>强制执行计划器：没有完美的计划器，所以实现提示让用户更好地控制执行是有意义的。
Append meta data(或统计)：一些统计，比如&quot;扫描的表索引&quot;和 &ldquo;一些 shuffle 键的 skew info&rdquo;，对于查询来说是有些动态的，用提示来配置它们会非常方便，因为我们从 planner 得到的规划元数据往往不是那么准确。
运算符资源约束：对于很多情况，我们会给执行运算符一个默认的资源配置，比如最小并行或管理内存（耗费资源的 UDF）或特殊的资源需求（GPU 或 SSD 磁盘）等等，用提示对每个查询（而不是 Job）的资源进行配置会非常灵活。</p>
<h2 id="动态表选项">动态表选项</h2>
<p>动态表选项允许动态指定或覆盖表选项，与 SQL DDL 或连接 API 定义的静态表选项不同，这些选项可以在每个查询中的每个表范围内灵活指定。</p>
<p>因此，它非常适用于交互式终端的临时查询，例如，在 SQL-CLI 中，只需添加一个动态选项 <code>/*+ OPTIONS('csv.ignore-parse-errors'='true') */</code>，就可以指定忽略 CSV 源的解析错误。</p>
<p>注意：动态表选项默认是禁止使用的，因为它可能会改变查询的语义。您需要将配置选项 table.dynamic-table-options.enabled 显式地设置为 true（默认为 false），有关如何设置配置选项的详细信息，请参阅<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/config.html">配置</a>。</p>
<h3 id="语法">语法</h3>
<p>为了不破坏 SQL 的兼容性，我们使用 Oracle 风格的 SQL 提示语法。</p>
<pre><code>table_path /*+ OPTIONS(key=val [, key=val]*) */

key:
    stringLiteral
val:
    stringLiteral
</code></pre><h3 id="例子">例子</h3>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">kafka_table1</span> <span class="p">(</span><span class="n">id</span> <span class="nb">BIGINT</span><span class="p">,</span> <span class="n">name</span> <span class="n">STRING</span><span class="p">,</span> <span class="n">age</span> <span class="nb">INT</span><span class="p">)</span> <span class="k">WITH</span> <span class="p">(...);</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">kafka_table2</span> <span class="p">(</span><span class="n">id</span> <span class="nb">BIGINT</span><span class="p">,</span> <span class="n">name</span> <span class="n">STRING</span><span class="p">,</span> <span class="n">age</span> <span class="nb">INT</span><span class="p">)</span> <span class="k">WITH</span> <span class="p">(...);</span>

<span class="c1">-- override table options in query source
</span><span class="c1"></span><span class="k">select</span> <span class="n">id</span><span class="p">,</span> <span class="n">name</span> <span class="k">from</span> <span class="n">kafka_table1</span> <span class="cm">/*+ OPTIONS(&#39;scan.startup.mode&#39;=&#39;earliest-offset&#39;) */</span><span class="p">;</span>

<span class="c1">-- override table options in join
</span><span class="c1"></span><span class="k">select</span> <span class="o">*</span> <span class="k">from</span>
    <span class="n">kafka_table1</span> <span class="cm">/*+ OPTIONS(&#39;scan.startup.mode&#39;=&#39;earliest-offset&#39;) */</span> <span class="n">t1</span>
    <span class="k">join</span>
    <span class="n">kafka_table2</span> <span class="cm">/*+ OPTIONS(&#39;scan.startup.mode&#39;=&#39;earliest-offset&#39;) */</span> <span class="n">t2</span>
    <span class="k">on</span> <span class="n">t1</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">t2</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>

<span class="c1">-- override table options for INSERT target table
</span><span class="c1"></span><span class="k">insert</span> <span class="k">into</span> <span class="n">kafka_table1</span> <span class="cm">/*+ OPTIONS(&#39;sink.partitioner&#39;=&#39;round-robin&#39;) */</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">kafka_table2</span><span class="p">;</span>
</code></pre></div><p>原文链接: <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/hints.html">https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/hints.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/flink" term="flink" label="Flink" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink" term="flink" label="Flink" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" term="flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" label="Flink 官方文档" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/table-api-sql" term="table-api-sql" label="Table API &amp; SQL" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/sql" term="sql" label="SQL" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Use 语句]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-22-use-statements/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-alter-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Alter 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-drop-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Drop 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-explan-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Explan 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-insert-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Insert 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-sql-hints/?utm_source=atom_feed" rel="related" type="text/html" title="SQL 提示" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-22-use-statements/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-22T00:00:00+08:00</published>
            <updated>2020-08-22T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Use Statements</blockquote><h1 id="use-语句">USE 语句</h1>
<p>USE 语句用于设置当前数据库或目录。</p>
<h2 id="运行-use-语句">运行 USE 语句</h2>
<p>USE 语句可以通过 TableEnvironment 的 executeSql() 方法执行，也可以在 SQL CLI 中执行。executeSql() 方法会对一个成功的 USE 操作返回 &lsquo;OK&rsquo;， 否则会抛出一个异常。</p>
<p>下面的例子展示了如何在 TableEnvironment 和 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sqlClient.html">SQL CLI</a> 中运行一条 USE 语句。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">env</span> <span class="k">=</span> <span class="nc">StreamExecutionEnvironment</span><span class="o">.</span><span class="n">getExecutionEnvironment</span><span class="o">()</span>
<span class="k">val</span> <span class="n">tEnv</span> <span class="k">=</span> <span class="nc">StreamTableEnvironment</span><span class="o">.</span><span class="n">create</span><span class="o">(</span><span class="n">env</span><span class="o">)</span>

<span class="c1">// create a catalog
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;CREATE CATALOG cat1 WITH (...)&#34;</span><span class="o">)</span>
<span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;SHOW CATALOGS&#34;</span><span class="o">).</span><span class="n">print</span><span class="o">()</span>
<span class="c1">// +-----------------+
</span><span class="c1">// |    catalog name |
</span><span class="c1">// +-----------------+
</span><span class="c1">// | default_catalog |
</span><span class="c1">// | cat1            |
</span><span class="c1">// +-----------------+
</span><span class="c1"></span>
<span class="c1">// change default catalog
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;USE CATALOG cat1&#34;</span><span class="o">)</span>

<span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;SHOW DATABASES&#34;</span><span class="o">).</span><span class="n">print</span><span class="o">()</span>
<span class="c1">// databases are empty
</span><span class="c1">// +---------------+
</span><span class="c1">// | database name |
</span><span class="c1">// +---------------+
</span><span class="c1">// +---------------+
</span><span class="c1"></span>
<span class="c1">// create a database
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;CREATE DATABASE db1 WITH (...)&#34;</span><span class="o">)</span>
<span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;SHOW DATABASES&#34;</span><span class="o">).</span><span class="n">print</span><span class="o">()</span>
<span class="c1">// +---------------+
</span><span class="c1">// | database name |
</span><span class="c1">// +---------------+
</span><span class="c1">// |        db1    |
</span><span class="c1">// +---------------+
</span><span class="c1"></span>
<span class="c1">// change default database
</span><span class="c1"></span><span class="n">tEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;USE db1&#34;</span><span class="o">)</span>
</code></pre></div><h2 id="use-catloag">USE CATLOAG</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">USE</span> <span class="k">CATALOG</span> <span class="k">catalog_name</span>
</code></pre></div><p>设置当前目录。所有没有明确指定目录的后续命令将使用这个目录。如果所提供的目录不存在，则会抛出一个异常。默认的当前目录是default_catalog。</p>
<h2 id="use">USE</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">USE</span> <span class="p">[</span><span class="k">catalog_name</span><span class="p">.]</span><span class="n">database_name</span>
</code></pre></div><p>设置当前数据库。所有没有明确指定数据库的后续命令将使用这个数据库。如果提供的数据库不存在，则会抛出一个异常。默认的当前数据库是default_database。</p>
<p>原文链接: <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/use.html">https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/use.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/flink" term="flink" label="Flink" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink" term="flink" label="Flink" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" term="flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" label="Flink 官方文档" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/table-api-sql" term="table-api-sql" label="Table API &amp; SQL" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/sql" term="sql" label="SQL" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[运行 Describe 语句]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-22-run-a-describe-statement/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-alter-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Alter 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-drop-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Drop 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-explan-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Explan 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-insert-statements/?utm_source=atom_feed" rel="related" type="text/html" title="Insert 语句" />
                <link href="https://ohmyweekly.github.io/notes/2020-08-22-sql-hints/?utm_source=atom_feed" rel="related" type="text/html" title="SQL 提示" />
            
                <id>https://ohmyweekly.github.io/notes/2020-08-22-run-a-describe-statement/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-22T00:00:00+08:00</published>
            <updated>2020-08-22T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Run a Describe Statement</blockquote><h1 id="describe-语句">DESCRIBE 语句</h1>
<p>DESCRIBE 语句用于描述表或视图的模式。</p>
<h2 id="运行一个describe语句">运行一个DESCRIBE语句</h2>
<p>DESCRIBE语句可以用TableEnvironment的executeSql()方法执行，也可以在SQL CLI中执行。executeSql()方法对于一个成功的DESCRIBE操作会返回给定表的模式，否则会抛出一个异常。</p>
<p>下面的例子展示了如何在TableEnvironment和SQL CLI中运行DESCRIBE语句。</p>
<div class="highlight"><pre class="chroma"><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">settings</span> <span class="k">=</span> <span class="nc">EnvironmentSettings</span><span class="o">.</span><span class="n">newInstance</span><span class="o">()...</span>
<span class="k">val</span> <span class="n">tableEnv</span> <span class="k">=</span> <span class="nc">TableEnvironment</span><span class="o">.</span><span class="n">create</span><span class="o">(</span><span class="n">settings</span><span class="o">)</span>

<span class="c1">// register a table named &#34;Orders&#34;
</span><span class="c1"></span> <span class="n">tableEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span>
        <span class="s">&#34;CREATE TABLE Orders (&#34;</span> <span class="o">+</span>
        <span class="s">&#34; `user` BIGINT NOT NULl,&#34;</span> <span class="o">+</span>
        <span class="s">&#34; product VARCHAR(32),&#34;</span> <span class="o">+</span>
        <span class="s">&#34; amount INT,&#34;</span> <span class="o">+</span>
        <span class="s">&#34; ts TIMESTAMP(3),&#34;</span> <span class="o">+</span>
        <span class="s">&#34; ptime AS PROCTIME(),&#34;</span> <span class="o">+</span>
        <span class="s">&#34; PRIMARY KEY(`user`) NOT ENFORCED,&#34;</span> <span class="o">+</span>
        <span class="s">&#34; WATERMARK FOR ts AS ts - INTERVAL &#39;1&#39; SECONDS&#34;</span> <span class="o">+</span>
        <span class="s">&#34;) with (...)&#34;</span><span class="o">)</span>

<span class="c1">// print the schema
</span><span class="c1"></span><span class="n">tableEnv</span><span class="o">.</span><span class="n">executeSql</span><span class="o">(</span><span class="s">&#34;DESCRIBE Orders&#34;</span><span class="o">).</span><span class="n">print</span><span class="o">()</span>
</code></pre></div><pre><code>Flink SQL&gt; CREATE TABLE Orders (
&gt;  `user` BIGINT NOT NULl,
&gt;  product VARCHAR(32),
&gt;  amount INT,
&gt;  ts TIMESTAMP(3),
&gt;  ptime AS PROCTIME(),
&gt;  PRIMARY KEY(`user`) NOT ENFORCED,
&gt;  WATERMARK FOR ts AS ts - INTERVAL '1' SECONDS
&gt; ) with (
&gt;  ...
&gt; );
[INFO] Table has been created.

Flink SQL&gt; DESCRIBE Orders;
</code></pre><pre><code>root
 |-- user: BIGINT NOT NULL
 |-- product: VARCHAR(32)
 |-- amount: INT
 |-- ts: TIMESTAMP(3) *ROWTIME*
 |-- ptime: TIMESTAMP(3) NOT NULL *PROCTIME* AS PROCTIME()
 |-- WATERMARK FOR ts AS `ts` - INTERVAL '1' SECOND
 |-- CONSTRAINT PK_3599338 PRIMARY KEY (user)
</code></pre><p>上述例子的结果是：</p>
<pre><code>+---------+----------------------------------+-------+-----------+-----------------+----------------------------+
|    name |                             type |  null |       key | computed column |                  watermark |
+---------+----------------------------------+-------+-----------+-----------------+----------------------------+
|    user |                           BIGINT | false | PRI(user) |                 |                            |
| product |                      VARCHAR(32) |  true |           |                 |                            |
|  amount |                              INT |  true |           |                 |                            |
|      ts |           TIMESTAMP(3) *ROWTIME* |  true |           |                 | `ts` - INTERVAL '1' SECOND |
|   ptime | TIMESTAMP(3) NOT NULL *PROCTIME* | false |           |      PROCTIME() |                            |
+---------+----------------------------------+-------+-----------+-----------------+----------------------------+
5 rows in set
</code></pre><h2 id="语法">语法</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DESCRIBE</span> <span class="p">[</span><span class="k">catalog_name</span><span class="p">.][</span><span class="n">db_name</span><span class="p">.]</span><span class="k">table_name</span>
</code></pre></div><p>原文链接: <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/describe.html">https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/describe.html</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/flink" term="flink" label="Flink" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink" term="flink" label="Flink" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" term="flink-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" label="Flink 官方文档" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/table-api-sql" term="table-api-sql" label="Table API &amp; SQL" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/sql" term="sql" label="SQL" />
                            
                        
                    
                
            
        </entry>
    
</feed>
