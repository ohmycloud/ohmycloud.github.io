<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[role on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/role/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/role/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/role/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/role/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-11T22:08:29+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/role/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Raku 中的 Role]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-07-15-roles-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2015-07-15-roles-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Roles in Raku</blockquote><ul>
<li>Composition and mix-ins</li>
<li>Sigils</li>
<li>Typed data structures</li>
<li>Traits</li>
</ul>
<p>所以到底什么是 <code>role</code> 呢？ role 是零个或多个方法和属性的集合。</p>
<p>role 不像 class，它不能被实例化（如果你尝试了，会生成一个 class）。Raku 中 Classes 是可变的，而 roles 是不可变的。</p>
<h2 id="申明-roles-就像申明-class-一样">申明 Roles 就像申明 Class 一样</h2>
<p>使用关键字 <code>role</code> 来引入 role, 在 role 中声明属性和方法就像在 Raku 的类中声明属性和方法那样。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="nc">DebugLog</span> <span class="p">{</span>
    <span class="k">has</span> <span class="nv">@.log_lines</span><span class="p">;</span>
    <span class="k">has</span> <span class="nv">$.log_size</span> <span class="k">is</span> <span class="k">rw</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

    <span class="k">method</span> <span class="nf">log_message</span><span class="p">(</span><span class="nv">$message</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">@!log_lines</span><span class="o">.</span><span class="nb">shift</span> <span class="k">if</span>
        <span class="nv">@!log_lines</span><span class="o">.</span><span class="nb">elems</span> <span class="o">&gt;=</span> <span class="nv">$!log_size</span><span class="p">;</span>
        <span class="nv">@!log_lines</span><span class="o">.</span><span class="nb">push</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="role-composition">Role Composition</h2>
<ul>
<li>使用 <code>does</code> trait 将 role 组合到 Class 中：</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">WebCrawler</span> <span class="k">does</span> <span class="nc">DebugLog</span> <span class="p">{</span>
    <span class="o">...</span>
<span class="p">}</span>
</code></pre></div><ul>
<li>这会把方法和属性添加到 class WebCrawler 里面去。</li>
<li>结果就像它们起初被写到 class 中一样。</li>
</ul>
<h2 id="mix-ins">Mix-ins</h2>
<ul>
<li>允许 role 的功能被添加到每个对象的根上</li>
<li>不影响其它的类实例</li>
<li>role 中的方法总是覆盖对象中已经存在的方法</li>
</ul>
<h2 id="mix-ins-example">Mix-ins Example</h2>
<ul>
<li>假设我们想跟踪某个对象发生了什么</li>
<li>Mix in the DebugLog role</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nv">$acount</span> <span class="k">does</span> <span class="nc">DebugLog</span><span class="p">;</span>
</code></pre></div><ul>
<li>然后, 我们可以输出被登记的行</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nv">$account</span><span class="o">.</span><span class="nf">log_lines</span><span class="o">».</span><span class="nb">say</span><span class="p">;</span>
</code></pre></div><ul>
<li>现在我们只需给 <code>log_message</code> 方法添加调用</li>
<li>我们可以使用 <code>.?</code> 操作符, 这会调用某个方法, 如果方法存在的话</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Account</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nf">change_password</span><span class="p">(</span><span class="nv">$new</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">self</span><span class="o">.?</span><span class="nf">log_message</span><span class="p">(</span>
            <span class="p">&#34;</span><span class="s2">changing password to </span><span class="nv">$new</span><span class="p">&#34;;</span>
        <span class="p">)</span>
        <span class="o">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="sigil--接口协定">Sigil = 接口协定</h2>
<ul>
<li>在 Raku 中, 符号表明接口协定</li>
<li>这个接口协定由 role 定义</li>
<li>你可以只把东西放在带有符号的变量中, 如果该变量遵守(<code>does</code>)了要求的 role 的话</li>
<li>例外: 带有 <code>$</code> 的变量可以存储任何东西(如果没有使用类型约束的话)</li>
</ul>
<h2 id="--positional">@ = Positional</h2>
<ul>
<li><code>@</code> 符号表明它是一个 <code>Positional</code> role</li>
<li>保证会有一个方法后环缀让你能调用</li>
<li>This is that gets called when you do an index positionally into something</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">@fact</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">@fact</span><span class="o">.</span><span class="nf">postcircumfix:</span><span class="p">&lt;</span><span class="s">[ ]</span><span class="p">&gt;(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div><ul>
<li>注意: 优化器(如果有的话)可能发出更轻量级的东西</li>
</ul>
<h2 id="--associative">% = Associative</h2>
<ul>
<li><code>%</code> 表明它是一个关联型(Associative)的 role</li>
<li>要有一个方法后环缀 <code>postcircumfix:&lt;{}&gt;</code> 让你调用</li>
<li>This is that gets called when you do an index associatively into something</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">%price</span><span class="p">&lt;</span><span class="s">Cheese</span><span class="p">&gt;;</span>
<span class="nb">say</span> <span class="nv">%price</span><span class="o">.</span><span class="nf">postcircumfix:</span><span class="p">&lt;</span><span class="s">{ }</span><span class="p">&gt;(&#39;</span><span class="s1">Cheese</span><span class="p">&#39;);</span>
</code></pre></div><h2 id="--callable">&amp; = Callable</h2>
<ul>
<li><code>&amp;</code> 表明它是一个 Callable 的 role</li>
<li>东西要能被调用</li>
<li>这个 role 被诸如 <code>Block</code>、<code>Sub</code>、<code>Method</code>之类的东西遵守</li>
<li>要求实现后环缀 <code>postcircumfix:&lt;()&gt;</code></li>
</ul>
<p>使用带有 block 的 class 关键字引入一个类：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Puppy</span> <span class="p">{</span>
    <span class="o">...</span>
<span class="p">}</span>
</code></pre></div><p>或使用</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Puppy</span><span class="p">;</span>
<span class="o">...</span>

<span class="mi">1</span><span class="p">;</span>
</code></pre></div><p>把类相关的东西单独写进一个文件</p>
<h2 id="role-也可以被初始化">Role 也可以被初始化</h2>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="nc">BarChart</span> <span class="p">{</span>
    <span class="k">has</span> <span class="nb">Int</span> <span class="nv">@.bar-values</span><span class="p">;</span>
    <span class="k">has</span> <span class="nv">$.b</span> <span class="k">is</span> <span class="k">rw</span><span class="p">;</span>

    <span class="k">method</span> <span class="nf">plot</span> <span class="p">{</span>
        <span class="nb">say</span> <span class="nv">@.bar-values</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$chart</span> <span class="o">=</span> <span class="n">BarChart</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="s">bar-values</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span>,<span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">],</span> <span class="s">b</span> <span class="o">=&gt;</span> <span class="p">&#34;</span><span class="s2">Camelia</span><span class="p">&#34;);</span>

<span class="nb">say</span> <span class="nv">$chart</span><span class="o">.</span><span class="nf">b</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$chart</span><span class="o">.</span><span class="nf">bar-values</span><span class="p">;</span>
<span class="nv">$chart</span><span class="o">.</span><span class="nf">b</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Rakudo</span><span class="p">&#34;;</span>
<span class="nb">say</span> <span class="nv">$chart</span><span class="o">.</span><span class="nf">b</span><span class="p">;</span>
<span class="nb">say</span> <span class="n">BarChart</span><span class="o">.^</span><span class="nb">methods</span><span class="p">;</span>
</code></pre></div><p>如果你初始化了 role, 那么它就变为类了。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/role" term="role" label="role" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Roles or When One Is Many]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-06-22-roles-or-when-one-is-many/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-06-17-raku-syntax-i-miss-in-other-languages/?utm_source=atom_feed" rel="related" type="text/html" title="Raku Syntax I Miss in Other Languages" />
                <link href="https://ohmyweekly.github.io/notes/2021-06-05-learn-raku-from-roast/?utm_source=atom_feed" rel="related" type="text/html" title="Learn Raku From Roast" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-15-raku-multiple-dispatch-with-the-new-moarvm-dispatcher/?utm_source=atom_feed" rel="related" type="text/html" title="Raku Multiple Dispatch With the New MoarVM Dispatcher" />
                <link href="https://ohmyweekly.github.io/notes/2021-05-19-a-tour-of-rust-standard-library-traits/?utm_source=atom_feed" rel="related" type="text/html" title="Rust 的标准库 Trait 之旅" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-psql/?utm_source=atom_feed" rel="related" type="text/html" title="Psql" />
            
                <id>https://ohmyweekly.github.io/notes/2021-06-22-roles-or-when-one-is-many/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-06-22T00:00:00+08:00</published>
            <updated>2021-06-22T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Roles or When One Is Many</blockquote><p>让 Raku 与 Perl 相当不同的一点是，<a href="https://raku.org/">Raku</a> 避免了魔法。有几个地方人们可以说，&ldquo;它神奇地发生了&rdquo;。但仔细看一下，通常会发现行为背后有相当好解释的机制。这就像看魔术师的把戏：我们总是知道有解释，而且它们肯定是符合逻辑的。</p>
<p>因此，我有个小把戏给你。看一下代码，告诉我：你在这里看到了多少个角色？</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="ow">R</span><span class="p">[</span><span class="o">:</span><span class="p">:</span><span class="s">T</span><span class="p">]</span> <span class="p">{</span> <span class="k">has</span> <span class="nb">T</span> <span class="nv">$.a</span><span class="p">;</span> <span class="p">}</span>
<span class="k">class</span> <span class="nc">C</span> <span class="k">does</span> <span class="ow">R</span><span class="p">[</span><span class="nb">Int</span><span class="p">]</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div><p>直观的答案当然是 1，这也是事实。但这里的部分技巧是术语的替换：在使用&quot;角色&quot;一词的地方，更准确的术语应该是&quot;角色类型对象&quot;。现在，试着猜出正确答案。而且，要确定的是，它不止一个。</p>
<h2 id="raku-魔术是如何不神奇的">Raku 魔术是如何不神奇的</h2>
<p>Raku 的最大优点之一，随着时间的推移，我越来越学会重视，就是它做任何事情都要保持逻辑性。有时这并不意味着要有直觉。有些行为一开始甚至可能使初学者感到困惑。但是，在解释时，逻辑通常是相当有说服力的。Raku 提供的一套广泛的内省工具，通常对理解它有很大帮助。在这篇文章中，我将尝试以&quot;魔术师&quot;的方式演示如何使用其中的一些工具来将一只兔子变成许多只。</p>
<p>我还将在很大程度上依赖于 <a href="https://rakudo.org/">Rakudo</a> 对 Raku 的实现，它是基于 <a href="https://vrurg.github.io/arfb-publication/02-everything-is-an-object-mop/#rakudo-nqp-runtime-vm-and-implementation-stack">NQP</a> 的，这使得在某些情况下相当容易看到 Raku 语法的幕后。顺便说一下，这也是 Raku 中的魔法量处于可忽略不计的水平的另一个原因。你们当中有多少人，我的读者，曾经研究过 Perl 或任何你最喜欢的语言的来源？如果我为自己回答，那么就是一个词：从未。尽管 C 语言是我多年来的首选语言。但现在我会坚持要求你在你的主目录下的某个地方做 git clone <a href="https://github.com/rakudo/rakudo.git">https://github.com/rakudo/rakudo.git</a>，所有其他项目都放在那里。然后，只要你遇到问题，答案很可能就在 Rakudo 项目的 src/Perl6/Metamodel 目录下的一个文件里。</p>
<h2 id="四位一体">四位一体</h2>
<p>我不得不谷歌一下这个词。从第一部《黑客帝国》电影开始，&ldquo;三位一体&quot;对我来说就很熟悉了，但对这一行中的其他词却不熟悉。是的，这个词就是这个棘手问题的答案。Raku 角色是四位一体。这篇文章将一步一步地告诉你为什么。</p>
<p>在这一点上，我想提醒的是，反省和乐库元模型的一般知识将是非常有益的。一些信息可以在本周期的前几篇文章中找到，一些可以在Raku文档中找到。</p>
<h3 id="第1步-多重性">第1步: 多重性</h3>
<p>让我们从最简单的自省开始。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku">⇒ <span class="nb">raku</span> <span class="o">-</span><span class="no">e</span> <span class="p">&#39;</span><span class="s1">role R[::T] { }; say R.WHAT</span><span class="p">&#39;</span>
<span class="p">(</span><span class="ow">R</span><span class="err">)</span>
</code></pre></div><p>不要和 &lsquo;⇒&rsquo; 字符混淆，这只是我最喜欢的命令行提示。</p>
<p>注意，我们只用方括号来声明角色，而不是对它调用方法。还要注意的是，这个角色报告自己只是 <code>R</code>；同样，没有涉及方括号。</p>
<p>接下来，你可能已经知道，在 Raku 中，同一个角色有可能有不同的变体。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku">⇒ <span class="nb">raku</span> <span class="o">-</span><span class="no">e</span> <span class="p">&#39;</span><span class="s1">role R[::T] { }; role R { }; say R.WHAT</span><span class="p">&#39;</span>
<span class="p">(</span><span class="ow">R</span><span class="err">)</span>
</code></pre></div><p>我们有两个声明，但仍然只使用 <code>R</code> 来调用 <code>WHAT</code>。</p>
<p>让我们换个角度，看看这个角色是如何实现的。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku">⇒ <span class="nb">raku</span> <span class="o">-</span><span class="no">e</span> <span class="p">&#39;</span><span class="s1">role R[::T] { }; say R.HOW.^name</span><span class="p">&#39;</span>
<span class="n">Perl6::Metamodel::ParametricRoleGroupHOW</span>
</code></pre></div><p>注意名字中的 <code>Group</code> 部分。新手可能会对这个词感到困惑，只要他们只使用一个角色的变体。但是当他们到了本节第二个例子的时候，事情就开始变得比较清楚了。让我再把它们变得更加混乱。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="ow">R</span><span class="p">[</span><span class="o">:</span><span class="p">:</span><span class="s">T</span><span class="p">]</span> <span class="p">{</span> <span class="k">method</span> <span class="nf">foo</span> <span class="p">{</span> <span class="mi">42</span> <span class="p">}</span> <span class="p">}</span>
<span class="k">role</span> <span class="nc">R</span> <span class="p">{</span> <span class="p">}</span>
<span class="nb">say</span> <span class="ow">R</span><span class="o">.^</span><span class="err">lookup(&#39;foo&#39;);</span>
</code></pre></div><p>你希望这段代码能输出什么？根据<a href="https://docs.raku.org/routine/lookup">文档</a>，在一个类上这样做会得到相当可预测的结果。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span> <span class="k">method</span> <span class="nf">foo</span> <span class="p">{</span> <span class="p">}</span> <span class="p">};</span> 
<span class="nb">say</span> <span class="n">Foo</span><span class="o">.^</span><span class="nb">lookup</span><span class="p">(&#34;</span><span class="s2">foo</span><span class="p">&#34;);</span> <span class="c1"># foo</span>
</code></pre></div><p>现在，忘记这个经验吧。因为对于上面的例子中的 <code>R</code>，我们会得到 <code>(Mu)</code>，意思是没有找到方法！而对于 <code>R</code>，我们会得到 <code>(Mu)</code>。</p>
<p>在这一点上，我想退一步说。如果你读了 Raku 的文档或书，做了关于角色和参数化的部分，有一个细节可能会让你觉得相当熟悉。如果这也是我要指出的&quot;东西&rdquo;，那么你就不会错了：参数化是关于参数的；有了参数，就有了签名！&quot;。现在这段代码一定是完全有意义的。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="ow">R</span><span class="err">[Int</span><span class="o">:</span><span class="err">D</span> <span class="nv">$a</span><span class="o">,</span> <span class="nb">Str:D</span> <span class="nv">$b</span><span class="o">]</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</code></pre></div><p>角色声明中被方括号括起来的部分是一个签名，这有另一层意思，我将在后面再谈。</p>
<p>不幸的是，我在写这篇文章的时候有点超时，它应该在涉及到几个更基本的主题之后再完成。出于这个原因，我为下面的一点离题而道歉。</p>
<h2 id="多重分派">多重分派</h2>
<p>人们可以在 Raku 文档中找到这一<a href="https://docs.raku.org/language/glossary#Multi-dispatch">部分</a>。<a href="https://docs.raku.org/syntax/multi">另一节</a>阐述了其语法和功能。但我想简单地谈谈这个功能的内部实现。让我们从一个基本的声明开始。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">proto</span> <span class="nf">foo</span><span class="ow">(|)</span> <span class="p">{</span><span class="o">*</span><span class="p">}</span>
<span class="k">multi</span> <span class="nf">foo</span><span class="p">(</span><span class="nb">Int:D</span> <span class="nv">$i</span><span class="p">)</span> <span class="p">{}</span>
<span class="k">multi</span> <span class="nf">foo</span><span class="p">(</span><span class="nb">Str:D</span> <span class="nv">$s</span><span class="p">)</span> <span class="p">{}</span>
<span class="nb">say</span> <span class="nv">&amp;foo</span><span class="o">.</span><span class="nb">raku</span><span class="p">;</span> <span class="c1"># proto sub foo (|) {*}</span>
</code></pre></div><p>正如你所看到的，<code>raku</code> 方法只报告了 <code>proto</code>。另外，如果我们对 <code>&amp;foo</code> 调用 <code>is_dispatcher</code> 方法，它将返回 <code>True</code>。好的，但是这两个 <code>multi</code> 在哪里，当我们调用 <code>foo(&quot;bar&quot;)</code> 时会发生什么？用两句话来说，Raku 首先会找到 <code>proto</code> 方法。如果它通过检查 <code>is_dispatcher</code> 的返回值识别出它是这样的，那么它就会通过调用 <code>&amp;foo.candidates</code> 来获取已知的候选列表。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">&amp;foo</span><span class="o">.</span><span class="nb">candidates</span><span class="o">.</span><span class="nb">map</span><span class="p">(</span><span class="o">*.</span><span class="nb">raku</span><span class="p">)</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="s2">\n</span><span class="p">&#34;);</span>
<span class="c1"># multi sub foo (Int:D $i) { #`(Sub|140560053018928) ... }</span>
<span class="c1"># multi sub foo (Str:D $s) { #`(Sub|140560053019072) ... }</span>
</code></pre></div><p>然后，它试图将提供的参数与每个候选者的签名绑定。如果绑定成功，则调用该候选程序（如果没有找到，则抛出一个异常）。</p>
<p>显然，在现实生活中，事情要复杂得多，但我们还不需要知道这些&hellip;&hellip;</p>
<h2 id="回到多重角色的问题上">回到多重角色的问题上</h2>
<p>有时我对不能在文章的纯文本中递归到一个子主题感到奇怪。就把这一节的标题看成是上一节的 <code>return</code> 语句&hellip;&hellip;啊，算了！不说了。</p>
<p>好吧，我的观点是什么，就是要讲述多重调度的故事？当我们看到 <code>R.HOW</code> 在类名中报告了一个 <code>Group</code>，就可以和多重调度实现中的 <code>proto</code> 相提并论了。事实上，我们调用 <code>HOW</code> 方法的类型对象 <code>R</code> 是一个伞状的实体，在其共同的名字下代表了角色的所有变体。而且，当我们把 <code>R[Int]</code> 应用于一个类时，实际发生的过程是一种多重分派，Raku 试图把方括号中的参数与角色候选者的签名相匹配。类似于我们如何列出 <code>&amp;foo</code> 的候选者，我们也可以列出 <code>R</code> 的候选者。</p>
<p>``raku
say R.^candidates.map(*.^name).join(&quot;, &ldquo;); # R, R</p>
<pre><code>
唯一不同的是，这次我们使用了一个元方法 `.^candidates`。

在这一点上，还有一个谜团没有被揭开。还记得使用 `.^lookup` 的那个例子吗？为什么它不能找到这个方法？

`Perl6::Metamodel::ParametricRoleGroupHOW` 所支持的类型对象并不是一个我们可以实际使用的角色。它既没有方法也没有属性。然而，在某些情况下，我们可能希望它假装是一个成熟的角色。为了做到这一点，它选择了一个候选角色作为默认角色，然后在其上重新分配外部请求。当有一个没有签名的候选者时（如我们的 `role R {}`），它就成为隐式默认。否则，第一个声明的有签名的候选者就会成为默认的候选者。

回到我们的例子，`R.^lookup('foo')` 失败了，因为 `role R {}` 没有声明一个有这个名字的方法。

### 第二步: 候选者

直奔主题，让我们对候选者本身进行自省。

```raku
say R.^candidates.map({ .HOW.^name }).join(&quot;, &quot;);
</code></pre><p>这看起来一定很熟悉，只是我们加入了.HOW的调用。下面是我们用它得到的东西。</p>
<pre><code>Perl6::Metamodel::ParametricRoleHOW, Perl6::Metamodel::ParametricRoleHOW
</code></pre><p>它看起来也很熟悉，除了&hellip;&hellip;是的，在类名称中没有 <code>Group</code>，我想欢迎我们的第二种角色! 实际上，我们已经知道了。如果我像这样挥舞着我的手，让我的观众分心，用&hellip;</p>
<p>哎呀，最后一句话应该是落在另一个窗口里的! 对于你，我的观众，我还有一行代码。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="nc">R</span> <span class="p">{}</span><span class="o">.</span><span class="nb">HOW</span><span class="o">.^</span><span class="nb">name</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span> <span class="c1"># Perl6::Metamodel::ParametricRoleHOW</span>
</code></pre></div><p>BTW，这是一个很好的例子，说明无处不在的 Raku 概念，即所有东西都是一个对象。甚至声明也是；而且，只是为了好玩。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">{</span> <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">foo</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">.^</span><span class="nb">name</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span> <span class="c1"># Block</span>
</code></pre></div><p>但是我分心了&hellip;</p>
<p>所以，这里真正重要的是，当我们声明一个角色时，Raku 为我们创建一个 <code>Perl6::Metamodel::ParametricRoleHOW</code> 类的实例。每个声明都有一个独特的类的实例支持，它负责持有角色类型对象的每个细节。例如，要想知道它是否可以被参数化，可以这样做。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">is_parameterized</span><span class="p">(</span><span class="nb">Mu</span> \<span class="nb">r</span> <span class="k">--&gt;</span> <span class="nb">Bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="o">?</span> <span class="nb">r</span><span class="o">.^</span><span class="nf">signatured</span>
<span class="p">}</span>
<span class="nb">say</span> <span class="nf">is_parameterized</span><span class="p">(</span><span class="k">role</span> <span class="ow">R</span><span class="p">[</span><span class="o">:</span><span class="p">:</span><span class="s">T</span><span class="p">]</span> <span class="p">{});</span> <span class="c1"># True</span>
<span class="nb">say</span> <span class="nf">is_parameterized</span><span class="p">(</span><span class="k">role</span> <span class="ow">R</span> <span class="p">{});</span> <span class="c1"># False</span>
</code></pre></div><p>请注意，由于 <code>signatured</code> 是在 NQP 中实现的方法，它不知道高级类型，并返回0或1。有时情况会变得更糟糕。我上面提到的查找元方法实际上返回 <code>nqp::null()</code>，这是一种 VM 级的对象。它决不能出现在 Raku 上。因此语言把它变成了 <code>Mu</code>，这是最基本的 Raku 类。</p>
<p>关于 <code>Perl6::Metamodel::ParametricRoleHOW</code>，在这一点上没有什么可说的。但我们稍后会回到它上面去。</p>
<h3 id="第三步-不确定性">第三步: 不确定性</h3>
<p>为了更接近我们的第三种角色，我们从下面这个片段开始。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="nc">R1</span><span class="o">[:</span><span class="p">:</span><span class="s">T</span> <span class="nb">Stringy</span><span class="o">,</span> <span class="o">:</span><span class="p">:</span><span class="s">V</span><span class="o">]</span> <span class="p">{</span> <span class="k">method</span> <span class="nf">foo</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">stringy</span><span class="p">&#34;</span> <span class="p">}</span> <span class="p">}</span>
<span class="k">role</span> <span class="nc">R1</span><span class="o">[:</span><span class="p">:</span><span class="s">T</span> <span class="nb">Numeric</span><span class="o">,</span> <span class="o">:</span><span class="p">:</span><span class="s">V</span><span class="o">]</span> <span class="p">{</span> <span class="k">method</span> <span class="nf">foo</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2">numeric</span><span class="p">&#34;</span> <span class="p">}</span> <span class="p">}</span>
<span class="k">my</span> <span class="nv">\r</span> <span class="o">=</span> <span class="k">role</span> <span class="nc">R2</span><span class="o">[:</span><span class="p">:</span><span class="s">T</span><span class="o">]</span> <span class="k">does</span> <span class="nc">R1</span><span class="o">[</span><span class="nb">Int</span><span class="o">,</span> <span class="nb">T</span><span class="o">]</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div><p>让我们自省一下 <code>R1</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="c1"># We know there is only one role, </span>
<span class="c1"># hence .head for prettier output</span>
<span class="nb">say</span> <span class="nb">r</span><span class="o">.^</span><span class="nf">roles</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="o">.^</span><span class="nb">name</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2"> of </span><span class="p">&#34;</span> <span class="o">~</span> <span class="o">.</span><span class="nb">HOW</span><span class="o">.^</span><span class="nb">name</span> <span class="p">})</span><span class="o">.</span><span class="nb">head</span><span class="p">;</span>
<span class="c1"># R1[Int,T] of Perl6::Metamodel::CurriedRoleHOW</span>
</code></pre></div><p>输出显示了两个明显的变化。首先，角色名称现在报告了它的参数。第二，元对象现在属于 <code>Perl6::Metamodel::CurriedRoleHOW</code> 类。这是 Rakudo 在幕后做的另一种&quot;魔法&rdquo;，我将在本节中披露。</p>
<p>在上面的例子中，R2 声明最引人注目的特点是什么？事实上，在它消耗 <code>R1</code> 的地方，我们只知道第一个参数，而第二个参数仍然是一个通用参数。为了表示这种情况，我们对角色的了解是不完整的，Rakudo 使用了柯里化的角色。</p>
<p>从起源的角度来看，柯里化角色与前两种角色的关键区别在于，没有办法声明一个角色。柯里化只能是一个组的参数化的结果。而且，实际上，我很清楚，正式的组在 Raku 语法中并没有表示。但是只要它作为第一个角色声明的结果出现，我们就可以说它是由它产生的。而柯里化则完全由参数化产生。</p>
<p>也许有些令人惊讶，但在所有参数都为编译器所熟知的情况下，也可以发现柯里化的存在。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="n">R2</span><span class="o">[</span><span class="nb">Str</span><span class="o">].</span><span class="nb">HOW</span><span class="o">.^</span><span class="nb">name</span><span class="p">;</span> <span class="c1"># Perl6::Metamodel::CurriedRoleHOW</span>
</code></pre></div><p>部分原因是，当我们使用这样的角色时，我们所需要的也许是一些内省、类型检查或任何其他不需要具体对象的操作。比如说。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">foo</span><span class="p">(</span><span class="n">R1</span><span class="o">[</span><span class="nb">Int</span><span class="o">,</span> <span class="nb">Str</span><span class="o">]</span> <span class="nv">$a</span><span class="p">)</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</code></pre></div><p>我们在这里需要的是 <code>foo</code> 参数，以通过对 <code>R1[Int, Str]</code> 的类型检查。因为柯里化会帮我们完成这个工作，所以 Rakudo 在这里使用它。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">&amp;foo</span><span class="o">.</span><span class="nb">signature</span><span class="o">.</span><span class="nb">params</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="nb">type</span><span class="o">.</span><span class="nb">HOW</span><span class="o">.^</span><span class="nb">name</span><span class="p">;</span>
<span class="c1"># Perl6::Metamodel::CurriedRoleHOW</span>
</code></pre></div><p>这是因为:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="n">R2</span><span class="o">[</span><span class="nb">Str</span><span class="o">]</span> <span class="o">~~</span> <span class="n">R1</span><span class="o">[</span><span class="nb">Int</span><span class="o">,</span> <span class="nb">Str</span><span class="o">]</span><span class="p">;</span> <span class="c1"># True</span>
<span class="nb">say</span> <span class="n">R2</span><span class="o">[</span><span class="nb">Int</span><span class="o">]</span> <span class="o">~~</span> <span class="n">R1</span><span class="o">[</span><span class="nb">Int</span><span class="o">,</span> <span class="nb">Str</span><span class="o">]</span><span class="p">;</span> <span class="c1"># False</span>
</code></pre></div><p>但还有一个主要原因。它将在下一节中披露。</p>
<h3 id="第4步-具体性">第4步: 具体性</h3>
<p>任何角色的命运都是被一个类所吞噬。(BTW，这里的双关语也不例外。)现在是时候考虑这最后阶段了。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="nc">R1</span><span class="o">[:</span><span class="p">:</span><span class="s">T</span><span class="o">]</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">role</span> <span class="nc">R2</span><span class="o">[:</span><span class="p">:</span><span class="s">T</span><span class="o">]</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">role</span> <span class="nc">R3</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">class</span> <span class="nc">C</span> <span class="k">does</span> <span class="nc">R1</span><span class="o">[</span><span class="nb">Int</span><span class="o">]</span> <span class="k">does</span> <span class="nc">R2</span><span class="o">[</span><span class="nb">Str</span><span class="o">]</span> <span class="k">does</span> <span class="nc">R3</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div><p>通过反省类，我们会遇到所有的老朋友。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="n">C</span><span class="o">.^</span><span class="nf">roles</span>
     <span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="o">.^</span><span class="nb">name</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2"> of </span><span class="p">&#34;</span> <span class="o">~</span> <span class="o">.</span><span class="nb">HOW</span><span class="o">.^</span><span class="nb">name</span> <span class="p">})</span>
     <span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="s2">\n</span><span class="p">&#34;);</span>
<span class="c1"># R3 of Perl6::Metamodel::ParametricRoleGroupHOW</span>
<span class="c1"># R2[Str] of Perl6::Metamodel::CurriedRoleHOW</span>
<span class="c1"># R1[Int] of Perl6::Metamodel::CurriedRoleHOW</span>
</code></pre></div><p>有趣的是，我们在这里发现了不同种类的角色的混合。其原因是浮在上面的：与 <code>R3</code> 相反，另外两个角色是参数化的。</p>
<p>但由于我喜欢迷惑听众，所以我要告诉你：这些其实不是这个类所建立的角色！这是另一个操作。</p>
<p>当然，这是另一种操作。完整的短语必须是使用这个。&ldquo;不是直接使用的角色&rdquo;。</p>
<p>当我们尝试另一种方法时，情况就会大不相同。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="n">C</span><span class="o">.^</span><span class="nb">mro</span><span class="p">(:</span><span class="s">roles</span><span class="p">)</span>
     <span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="o">.^</span><span class="nb">name</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2"> of </span><span class="p">&#34;</span> <span class="o">~</span> <span class="o">.</span><span class="nb">HOW</span><span class="o">.^</span><span class="nb">name</span> <span class="p">})</span>
     <span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="s2">\n</span><span class="p">&#34;);</span>
<span class="c1"># C of Perl6::Metamodel::ClassHOW</span>
<span class="c1"># R3 of Perl6::Metamodel::ConcreteRoleHOW</span>
<span class="c1"># R2 of Perl6::Metamodel::ConcreteRoleHOW</span>
<span class="c1"># R1 of Perl6::Metamodel::ConcreteRoleHOW</span>
</code></pre></div><p><code>.^roles</code> 和 <code>.^mro</code> 的区别在于，前者为我们提供了用于声明类的内容；而后者则为我们提供了实际构建的内容。</p>
<p>正如 <code>HOW</code> 类的名字所暗示的，我们现在处理的是角色的具体表现。换句话说，这是一种所有细节都知道的角色，它们是为这个特定的类专门设计的。这里强调的是目的：这个过程被称为特化；而 specialize 是实现它的元模型方法的名称。</p>
<p>我还想提醒你一下上一节的最后一句话。为什么每当人们使用 <code>R[Int]</code> 或类似形式的角色参数化时，他们都要处理一个柯里化的角色，原因是完全的特化需要角色被消耗的类。稍后我将说明原因。</p>
<p>我们现在可以退一步，概述一下角色的生命周期。</p>
<ol>
<li>一个 <code>Perl6::Metamodel::ParametricRoleGroupHOW</code> 被创建。</li>
<li>一个 <code>Perl6::Metamodel::ParametricRoleHOW</code> 被创建并添加到该组。</li>
<li>一个类被声明并 <code>does</code> 这个角色。编译器尝试对角色进行参数化，如果需要参数化，<code>Perl6::Metamodel::CurriedRoleHOW</code> 就会被创建；否则就会使用原来的 <code>Perl6::Metamodel::ParametricRoleHOW</code>。</li>
<li>参数化的结果被添加到类的角色列表中。</li>
<li>当类被组成时，所有在上一步中添加的角色都被赋予了各自的参数和类的类型对象。在这一点上，我们得到了由 <code>Perl6::Metamodel::ConcreteRoleHOW</code> 支持的角色类型对象，或者换句话说，角色具体化。</li>
<li>这些具体化被添加到类中。</li>
<li>具体化是通过将其属性和方法迁移到类的类型对象中来应用的。</li>
</ol>
<p>值得注意的是，具体化被保留为独立的实体，与它们所产生的角色分开。这就是我们在上面通过使用 <code>.^roles</code> 和 <code>.^mro</code> 进行内省观察到的。它们也可以使用 <code>.^concretizations</code> 元模型方法来访问。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="n">C</span><span class="o">.^</span><span class="nf">concretizations</span>
     <span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="o">.^</span><span class="nb">name</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2"> of </span><span class="p">&#34;</span> <span class="o">~</span> <span class="o">.</span><span class="nb">HOW</span><span class="o">.^</span><span class="nb">name</span> <span class="p">})</span>
     <span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="s2">\n</span><span class="p">&#34;);</span>
<span class="c1"># R3 of Perl6::Metamodel::ConcreteRoleHOW</span>
<span class="c1"># R2 of Perl6::Metamodel::ConcreteRoleHOW</span>
<span class="c1"># R1 of Perl6::Metamodel::ConcreteRoleHOW</span>
</code></pre></div><p>在这一点上，有两个相当大的主题仍然故意不清楚：一个角色候选人是如何被选择的？ 以及特化是做什么的？第一个问题我也许可以或多或少地完整地介绍一下。第二个问题对本文来说太复杂了，但有几个关键点绝对值得一提。</p>
<h3 id="第1a步-选择">第1a步: 选择</h3>
<p>震惊一个无辜的读者在媒体中非常流行。虽然我勉强算是个记者，但只要我把这篇文章称为文章&ndash;我有什么资格打破规则？所以，请坐好，握紧你的大脑。</p>
<p>我们开始了&hellip;&hellip;准备好了没有&hellip;&hellip;真相即将揭晓！&quot;。</p>
<p>角色是一种例程。</p>
<p>很好，开始了。我说了！我一直想说的!</p>
<p>说真的，正如经常发现的关于点击率的新闻一样，这并不完全是真的，但有一点是真的。我想让你考虑一个例子。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="nc">R</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">inside the role</span><span class="p">&#34;;</span>
<span class="p">}</span>
<span class="k">module</span> <span class="nn">Foo</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">inside Foo</span><span class="p">&#34;;</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">C</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">inside the class</span><span class="p">&#34;;</span>
<span class="p">}</span>
<span class="c1"># inside Foo</span>
<span class="c1"># inside the class</span>
</code></pre></div><p>我们只看到两行输出，让我们了解到类的声明与模块的行为是一样的。但不是角色。让我们在这个例子中再加一行。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ow">R</span><span class="o">.^</span><span class="err">candidates[0</span><span class="o">].^</span><span class="nf">body_block</span><span class="o">.</span><span class="p">(</span><span class="n">C</span><span class="p">);</span>
<span class="c1"># inside the role</span>
</code></pre></div><p>为什么是这样，为什么我把 <code>C</code> 作为一个参数传递，我将在下面关于特化的部分尝试回答。</p>
<p>现在我建议对主体块进行内省，但首先要在上述片段中增加一个角色的变体。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">\r</span> <span class="o">=</span> <span class="k">role</span> <span class="ow">R</span><span class="err">[</span><span class="o">::</span><span class="err">T</span><span class="o">,</span> <span class="o">:</span><span class="p">:</span><span class="s">V</span> <span class="nb">Numeric</span><span class="o">]</span> <span class="p">{</span> <span class="p">}</span>
<span class="nb">say</span> <span class="nb">r</span><span class="o">.^</span><span class="nf">body_block</span><span class="o">.</span><span class="nb">raku</span><span class="p">;</span>
<span class="c1"># multi sub (::$?CLASS ::::?CLASS Mu $, ::T Mu $, ::V Numeric $) { #`(Sub|94052949943024) ... }</span>
</code></pre></div><p>现在有印象了吗？<code>sub</code> 前面的 <code>multi</code> 这个词说明了一切，我现在的工作已经减少到所需的最小的措辞。</p>
<p>当编译器建立一个角色组时，它也创建了一个多调度例程。在内部，它被称为选择器。在每一个新添加的参数化角色中，它的主体块（实际上是一个 <code>multi sub</code>）都会被抽取出来，并作为一个多重调度候选程序添加到选择器中。现在，当人们在他们的代码中写下像 <code>R[Int, Str]</code> 这样的东西时，编译器会做一个类似于选择多重调度例程候选者的过程。基于进程提供的主体块候选，它选择了该块所属的角色。</p>
<p>所以，现在当我们提到角色签名时，一定会有更多的意义。因为它是一个签名，作为一个事实。如果我把一个角色声明 <code>role R[::T, ::V] {}</code> 以某种更适合人类程序员阅读的方式重新表述，它可能看起来像。</p>
<blockquote>
<p>声明一个候选角色 <code>R</code>，其主体为块<code>sub (::T, ::V) {...}</code>。</p>
</blockquote>
<p>很好，我们现在已经解决了这个问题。但是，我细心的读者，是不是有什么事情困扰着你？上面的&quot;类似&quot;一词是不是意味着某种&hellip;&hellip;呃&hellip;&hellip;惊喜？好吧，不幸的是，候选的选择并不遵循完整的多重调度协议，因为它缺乏对命名参数的支持。这是由于类型参数化的低级实现的限制。这意味着下面的两个声明被认为是相同的。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="ow">R</span><span class="err">[Int</span><span class="o">,</span> <span class="nb">Bool</span> <span class="o">:</span><span class="nv">$foo</span><span class="o">]</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
<span class="k">role</span> <span class="ow">R</span><span class="err">[Int</span><span class="o">,</span> <span class="nb">Str:D</span> <span class="o">:</span><span class="nv">$bar</span><span class="o">]</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</code></pre></div><p>希望当新的分派机制到达 Raku 时，情况会有所改变，但我在此不做任何承诺。</p>
<p>与此同时，你仍然可以使用这些名字，只是不要依靠它们来唯一地识别你的角色候选人。</p>
<h2 id="一个黑魔法塞恩斯">一个黑魔法塞恩斯</h2>
<p>这其实与选择候选者无关，但我不能忍受不给你看一些棘手的东西。此外，在许多小说和童话故事中，黑魔法是一种可以让你实现目标的东西，但有一个附加的价格标签。有时这个标签是相当血腥的，但这不是我的情况。实际上，我的目标和代价是一样的：我想用不同的东西来吸引你。</p>
<p>这就是要施的法术。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">use</span> <span class="nb">nqp</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">\r</span> <span class="o">=</span> <span class="k">role</span> <span class="ow">R</span><span class="err">[</span><span class="o">::</span><span class="err">T</span><span class="o">,</span> <span class="o">:</span><span class="p">:</span><span class="s">V</span> <span class="nb">Numeric</span><span class="o">]</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">class</span> <span class="nc">C</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">my</span> <span class="nv">\tenv</span> <span class="o">=</span> <span class="nb">r</span><span class="o">.^</span><span class="nf">body_block</span><span class="p">()</span><span class="o">.</span><span class="p">(</span><span class="n">C</span><span class="o">,</span> <span class="nb">Str</span><span class="o">,</span> <span class="nb">Int</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">\ctx</span> <span class="o">=</span> <span class="nf">nqp::atpos</span><span class="p">(</span><span class="n">tenv</span><span class="o">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">\iter</span> <span class="o">=</span> <span class="nf">nqp::iterator</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
<span class="k">while</span> <span class="n">iter</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">\elem</span> <span class="o">=</span> <span class="nf">nqp::shift</span><span class="p">(</span><span class="n">iter</span><span class="p">);</span>
    <span class="nb">say</span> <span class="nf">nqp::iterkey_s</span><span class="p">(</span><span class="n">elem</span><span class="p">)</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2"> =&gt; </span><span class="p">&#34;</span><span class="o">,</span> <span class="nf">nqp::iterval</span><span class="p">(</span><span class="n">elem</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>只要主体块是一个例程，显然我们可以自己调用它。为了理解剩下的几行和所有使用的 <code>nqp:: ops</code>，人们需要参考 <a href="https://github.com/Raku/nqp/blob/master/docs/ops.markdown">NQP ops</a> 文档。</p>
<p>总之，&ldquo;咒语&quot;产生的输出可能看起来像这样。</p>
<pre><code>::?CLASS =&gt; (C)
$?ROLE =&gt; (R)
T =&gt; (Str)
$?CONCRETIZATION =&gt; (Mu)
$?PACKAGE =&gt; (R)
::?PACKAGE =&gt; (R)
V =&gt; (Int)
::?ROLE =&gt; (R)
$?CLASS =&gt; (C)
$_ =&gt; (Mu)
</code></pre><p>用两个字来说，角色体块返回一个包含两个元素的数组。第二个元素是符号名称到其具体值的映射。也就是说，在 <code>=&gt;</code> 箭头左侧的键中，你可以很容易地从角色签名中发现我们的 <code>T</code> 和 <code>V</code> 类型捕获；以及编译器常量，如 <code>::?CLASS</code> 和其他。</p>
<p>总的来说，代码返回的东西被称为内部类型环境，并被用于另一种广泛采用的机制，即泛型实例化。但这个话题肯定远远超出了本文的目的。这里确实值得一提的是，所有包含在环境中的符号实际上都是角色体词法。例如，如果我们把我的 <code>FOO = 42</code> 加入到主体中，那么上面的输出就会有以下一行加入到其中。</p>
<pre><code>FOO =&gt; 42
</code></pre><p>另外，看着这些符号，你现在甚至可以更好地理解为什么角色的特化需要一个类来消耗它。你下次在做类似的事情时可能会考虑到这一点。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">method</span> <span class="nf">foo</span><span class="p">(</span><span class="vg">::?CLASS:D</span><span class="o">:</span> <span class="o">|</span><span class="p">)</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</code></pre></div><p>最后我想指出的一点是 <code>$?CONCRETIZATION</code> 符号，它还没有被记录下来。它只在角色主体和角色方法中可用，并且当它可用时被绑定到角色的具体化中。这个符号主要是用于自省的目的。</p>
<h3 id="步骤4a-特化">步骤4a: 特化</h3>
<p>所以，我们有一个候选者。我们知道具体的参数。我们知道消耗它的类。因此，我们确实知道了一切，可以进行特化，并得到具体化，最终将这个角色纳入消费它的类中。</p>
<p>正如我在上面已经提到的，特化是一个相当复杂的过程。在 Rakudo 元模型的实现中，它分布在几个源文件中，并涉及到一些其他的内部机制，如通用实例化，我在上面也暗示过。我最好不要深究其中的细节，而是专注于主要的阶段。那些真正好奇的人可以从 Rakudo 编译器源文件 src/Perl6/Metamodel/ParametricRoleHOW.nqp 中的方法特化开始。</p>
<p>特化一个新的角色，首先要创建一个 <code>Perl6::Metamodel::ConcreteRoleHOW</code> 的新实例和相应的具体角色类型对象。然后调用 body block 来获得一个类型环境结构。我将重点介绍一下这个。像往常一样，我们先举一个例子。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="nc">R</span> <span class="p">{</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">inside the role, class is </span><span class="p">&#34;</span><span class="o">,</span> <span class="vg">::?CLASS</span><span class="o">.^</span><span class="nb">name</span><span class="p">;</span>
    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">class is composed? </span><span class="p">&#34;</span><span class="o">,</span> <span class="vg">::?CLASS</span><span class="o">.^</span><span class="nf">is_composed</span> <span class="o">??</span> <span class="p">&#34;</span><span class="s2">yes</span><span class="p">&#34;</span> <span class="o">!!</span> <span class="p">&#34;</span><span class="s2">no</span><span class="p">&#34;;</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">C1</span> <span class="k">does</span> <span class="nc">R</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">class</span> <span class="nc">C2</span> <span class="k">does</span> <span class="nc">R</span> <span class="p">{</span> <span class="p">}</span>
<span class="c1"># inside the role, class is C1</span>
<span class="c1"># class is composed? no</span>
<span class="c1"># inside the role, class is C2</span>
<span class="c1"># class is composed? no</span>
</code></pre></div><p>我们在这里观察到的是，角色主体已经被调用了两次，它知道它所应用的类，而且这个类还没有被组成（我在<a href="https://vrurg.github.io/arfb-publication/02-everything-is-an-object-mop/#raku-metamodel">另一篇文章</a>中介绍了一些关于类生命周期的信息）。另外，正如我已经提到的，具体化在这一点上存在。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="nc">R</span> <span class="p">{</span>
	<span class="nb">say</span> <span class="nv">$?CONCRETIZATION</span><span class="o">.^</span><span class="nb">name</span><span class="p">;</span> <span class="c1"># R</span>
<span class="p">}</span>
</code></pre></div><p>但它还是空的。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$?CONCRETIZATION</span><span class="o">.^</span><span class="nb">attributes</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span> <span class="c1"># 0</span>
<span class="nb">say</span> <span class="nv">$?CONCRETIZATION</span><span class="o">.^</span><span class="nb">methods</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span>    <span class="c1"># 0</span>
</code></pre></div><p>而且，很明显，没有组成。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="nb">say</span> <span class="nv">$?CONCRETIZATION</span><span class="o">.^</span><span class="nf">is_composed</span> <span class="o">??</span> <span class="p">&#34;</span><span class="s2">yes</span><span class="p">&#34;</span> <span class="o">!!</span> <span class="p">&#34;</span><span class="s2">no</span><span class="p">&#34;;</span> <span class="c1"># no</span>
</code></pre></div><p>所有这些使得角色体成为一个好地方，可以在角色被实际消费时做需要做的事情。</p>
<p>现在，有了所有必要的信息，元模型通过实例化原始参数化或柯里化角色的属性和方法，并将它们安装到新创建的具体化中来最终完成专业化。例如这个片段的例子。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="ow">R</span><span class="p">[</span><span class="o">:</span><span class="p">:</span><span class="s">T</span><span class="p">]</span> <span class="p">{</span> <span class="k">has</span> <span class="nb">T</span> <span class="nv">$.attr</span> <span class="p">}</span>
<span class="k">class</span> <span class="nc">C</span> <span class="ow">R</span><span class="p">[</span><span class="nb">Str</span><span class="p">]</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div><p>如果我们转储原始角色和具体化的属性，我们可能会看到类似于下面的输出。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="nc">attr:</span> <span class="p">(</span><span class="nb">Attribute</span><span class="o">|</span><span class="mi">94613946040184</span> <span class="nb">T</span> <span class="nv">$!attr</span><span class="p">)</span>
<span class="nf">concretization</span> <span class="n">attr:</span> <span class="p">(</span><span class="nb">Attribute</span><span class="o">|</span><span class="mi">94613946043184</span> <span class="nb">Str</span> <span class="nv">$!attr</span><span class="p">)</span>
</code></pre></div><p>当用属性和方法完成时，任何被消耗的角色都会被实例化和具体化。例如，对于这个声明。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">role</span> <span class="nc">R1</span><span class="o">[:</span><span class="p">:</span><span class="s">T</span><span class="o">,</span> <span class="o">:</span><span class="p">:</span><span class="s">V</span><span class="o">]</span> <span class="k">does</span> <span class="nc">R2</span><span class="o">[:</span><span class="p">:</span><span class="s">T</span><span class="o">]</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</code></pre></div><p><code>R2</code> 的具体化将被添加到 <code>R1</code> 的具体化中，然后 <code>R2</code> 的具体化将被添加到 <code>R1</code> 的具体化中。</p>
<p>最后，如果有任何父类添加到角色中，它们也会被实例化和添加。</p>
<p>当所有上述准备工作完成后，我们的具体化就被组成了。它现在已经准备好被添加到它的消费类中。</p>
<p>故事就这样结束了。</p>
<h2 id="偿还债务">偿还债务</h2>
<p>知道很久以前的承诺最终得到了兑现，真的让人松了一口气。不幸的是，为了涵盖这个主题，我已经跳过了其他一些更基本的主题。例如，让读者更好地了解多重调度、类型对象的组成，以及 Rakudo、NQP 和后端虚拟机是如何相互作用的，这对读者是有益的。如果我写了足够多的文章，并考虑把这些材料编成一本书，那么由这段文字组成的章节将被放在离书的开头更远的地方。</p>
<p>不管怎么说，我已经尽了最大的努力，远离那些还未被提及的概念，希望你在这里找到有用的信息。</p>
<p>原文链接: <a href="https://vrurg.github.io/arfb-publication/07-roles-or-when-one-is-many/">https://vrurg.github.io/arfb-publication/07-roles-or-when-one-is-many/</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/role" term="role" label="Role" />
                            
                        
                    
                
            
        </entry>
    
</feed>
