<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[method on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/method/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/method/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/method/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/method/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-15T22:25:29+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/method/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Sneaky Methods]]></title>
            <link href="https://ohmyweekly.github.io/notes/2015-05-01-sneaky-methods/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2015-05-01-sneaky-methods/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-07-11T00:00:00+08:00</published>
            <updated>2021-07-11T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Sneaky Methods</blockquote><p>就像你想的那样, 在类的定义中可以声明和定义方法。你期望不高的甚至文档中都很少提及是用 <code>my</code> 关键字声明的免费浮点方法。现在为什么你想要:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="k">method</span> <span class="nf">foo</span><span class="p">(</span><span class="n">SomeClass:D:</span><span class="p">)</span> <span class="p">{</span> <span class="nb">self</span> <span class="p">}</span>
</code></pre></div><p>明显的答案是<a href="https://docs.raku.org/language/mop">元对象协议</a>中的 <a href="https://docs.raku.org/type/Metamodel$COLON$COLONMethodContainer#method_add_method">add_method</a> 方法, 在 Rakudo 里你能找到它：</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">src</span><span class="o">/</span><span class="n">core</span><span class="o">/</span><span class="nb">Bool</span><span class="o">.</span><span class="nf">pm</span>
<span class="mi">32</span><span class="o">:</span>    <span class="nb">Bool</span><span class="o">.^</span><span class="nb">add_method</span><span class="p">(&#39;</span><span class="s1">pred</span><span class="p">&#39;</span><span class="o">,</span>  <span class="k">my</span> <span class="k">method</span> <span class="nb">pred</span><span class="p">()</span> <span class="p">{</span> <span class="nb">Bool</span><span class="o">:</span><span class="p">:</span><span class="s">False</span> <span class="p">});</span>
<span class="mi">33</span><span class="o">:</span>    <span class="nb">Bool</span><span class="o">.^</span><span class="nb">add_method</span><span class="p">(&#39;</span><span class="s1">succ</span><span class="p">&#39;</span><span class="o">,</span>  <span class="k">my</span> <span class="k">method</span> <span class="nb">succ</span><span class="p">()</span> <span class="p">{</span> <span class="nb">Bool</span><span class="o">:</span><span class="p">:</span><span class="s">True</span> <span class="p">});</span>
<span class="mi">35</span><span class="o">:</span>    <span class="nb">Bool</span><span class="o">.^</span><span class="nb">add_method</span><span class="p">(&#39;</span><span class="s1">enums</span><span class="p">&#39;</span><span class="o">,</span> <span class="k">my</span> <span class="k">method</span> <span class="nb">enums</span><span class="p">()</span> <span class="p">{</span> <span class="nb">self</span><span class="o">.^</span><span class="nb">enum_values</span> <span class="p">});</span>
</code></pre></div><p>这种方法还有另外一种更诡异的用法。你可能很想知道在链式方法调用中究竟发生了什么。我们可以扯开最上面的那个表达式并插入一个短的变量, 输出我们的调试, 并且继续链式调用。好的名字很重要并且把它们浪费在一个短变量上没有必要。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span><span class="o">.&amp;</span><span class="p">(</span><span class="k">my</span> <span class="k">method</span> <span class="nf">::</span><span class="p">(</span><span class="nb">List:D</span><span class="p">)</span> <span class="p">{</span> <span class="n">dd</span> <span class="nb">self</span><span class="p">;</span> <span class="nb">self</span> <span class="p">}</span> <span class="p">)</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>

<span class="c1"># output</span>
<span class="c1"># (&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)</span>
<span class="c1"># (a b c)</span>
</code></pre></div><p>没有显式调用我们就不能没有名字, 因为 Raku 不允许我们这样做, 所以我们使用了空的作用域 <code>::</code> 以使解析器高兴。使用一个合适的调用, 我们就不需要它了。还有, 那个匿名方法不是 List 中的一员。我们需要使用后缀 <code>.&amp;</code> 来调用它。如果我们需要多次使用那个方法我们可以把它拉出来并给它一个名字。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="k">multi</span> <span class="k">method</span> <span class="nf">debug</span><span class="p">(</span><span class="nb">List</span><span class="p">:</span><span class="s">D</span><span class="o">:</span><span class="p">)</span> <span class="p">{</span> <span class="n">dd</span> <span class="nb">self</span><span class="p">;</span> <span class="nb">self</span> <span class="p">};</span>
<span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span><span class="o">.&amp;</span><span class="nf">debug</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span>

<span class="c1"># output</span>
<span class="p">(&#34;</span><span class="s2">a</span><span class="p">&#34;</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">b</span><span class="p">&#34;</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">c</span><span class="p">&#34;)</span>
<span class="p">(</span><span class="n">a</span> <span class="n">b</span> <span class="n">c</span><span class="p">)</span>
</code></pre></div><p>或者, 如果我们想允许回调的话, 我们可以把它作为默认参数赋值。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nb">f</span><span class="p">(</span><span class="nv">@l</span><span class="o">,</span> <span class="o">:</span><span class="nv">&amp;debug</span> <span class="o">=</span> <span class="k">my</span> <span class="k">method</span> <span class="p">(</span><span class="nb">List</span><span class="p">:</span><span class="s">D</span><span class="o">:</span><span class="p">){</span><span class="nb">self</span><span class="p">})</span> <span class="p">{</span> <span class="nv">@l</span><span class="o">.&amp;</span><span class="nf">debug</span><span class="o">.</span><span class="nb">say</span> <span class="p">};</span>
<span class="nb">f</span> <span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span><span class="o">,</span> <span class="s">debug</span> <span class="o">=&gt;</span> <span class="k">my</span> <span class="k">method</span> <span class="nf">::</span><span class="p">(</span><span class="nb">List:D</span><span class="p">){</span><span class="n">dd</span> <span class="nb">self</span><span class="p">;</span> <span class="nb">self</span><span class="p">};</span>

<span class="c1"># output</span>
<span class="c1">#(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)</span>
<span class="c1"># (a b c)</span>
</code></pre></div><p>在 Raku 中基本上所有的东西都是类, 包括<a href="https://docs.raku.org/type/Method">方法</a>。 如果它是类它可以是一个对象并且我们能在我们喜欢的任何地方溜进去。</p>
<p><a href="https://gfldex.wordpress.com/2016/07/20/sneaky-methods/">https://gfldex.wordpress.com/2016/07/20/sneaky-methods/</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rakulang" term="rakulang" label="rakulang" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/method" term="method" label="method" />
                            
                        
                    
                
            
        </entry>
    
</feed>
