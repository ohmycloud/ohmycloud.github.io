{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003cp\u003e空值安全是我们在 Dart 2.0 中用\u003ca href=\"https://dart.dev/guides/language/type-system\"\u003e健全的静态类型系统\u003c/a\u003e取代了原来的不健全的可选类型系统后，对 Dart 做出的最大改变。当 Dart 刚推出的时候，编译时空安全是一个罕见的功能，需要长时间的介绍。今天，Kotlin、Swift、Rust 和其他语言都有自己的答案，这已经成为一个非常\u003ca href=\"https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/\"\u003e熟悉的问题\u003c/a\u003e。下面是一个例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Without null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你在没有 null 安全的情况下运行这个 Dart 程序，它就会在调用.length 时抛出一个 NoSuchMethodError 异常。\u003ccode\u003enull\u003c/code\u003e 值是 \u003ccode\u003eNull\u003c/code\u003e 类的一个实例，而 Null 没有 \u0026ldquo;length\u0026rdquo; getter。运行时的失败很糟糕。这在像 Dart 这样的语言中尤其如此，因为它被设计成在终端用户的设备上运行。如果一个服务器应用程序失败了，你通常可以在任何人注意到之前重新启动它。但是当一个 Flutter 应用在用户的手机上崩溃时，他们并不高兴。当你的用户不高兴时，你也不高兴。\u003c/p\u003e\n\u003cp\u003e开发者喜欢像 Dart 这样的静态类型语言，因为它们可以让类型检查器在编译时发现代码中的错误，通常就在 IDE 中。越早发现错误，就能越早修复它。当语言设计者谈论 \u0026ldquo;修复空值引用错误\u0026quot;时，他们的意思是丰富静态类型检查器，使语言能够检测到像上面试图在一个可能是空的值上调用 \u003ccode\u003e.length\u003c/code\u003e 这样的错误。\u003c/p\u003e\n\u003cp\u003e对于这个问题，没有一个真正的解决方案。Rust 和 Kotlin 都有自己的方法，在这些语言的上下文中是有意义的。这个文档详细介绍了我们对 Dart 的答案。它包括对静态类型系统的修改，以及一系列其他的修改和新的语言特性，让你不仅能写出空值安全的代码，而且希望能享受这样做的乐趣。\u003c/p\u003e\n\u003cp\u003e这个文档很长。如果你想看一些较短的文件，它只涵盖了你需要知道的东西，以便开始运行，请从\u003ca href=\"https://dart.dev/null-safety\"\u003e概述\u003c/a\u003e开始。当你准备好了更深入的理解，并且有时间的时候，请回到这里，这样你就可以理解这个语言是如何处理 \u003ccode\u003enull\u003c/code\u003e 的，为什么我们要这样设计它，以及如何写出习惯的，现代的，空值安全的 Dart。(Spoiler alert: 它最终会出人意料地接近你今天写 Dart 的方式。)\u003c/p\u003e\n\u003cp\u003e语言处理空值引用错误的各种方法各有优缺点。这些原则指导了我们的选择。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e代码默认情况下应该是安全的。如果你写了新的 Dart 代码，并且没有使用任何显式的不安全特性，它永远不会在运行时抛出一个空值引用错误。所有可能的空值引用错误都会被静态地捕获。如果你想将一些检查推迟到运行时以获得更大的灵活性，你可以，但你必须通过使用一些在代码中文本可见的功能来选择。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e换句话说，我们并不是给你一件救生衣，让你每次出海时都记得穿上它。相反，我们给你一艘不沉的船。除非你跳海，否则你会保持干燥。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e空值安全代码应该很容易写。大多数现有的 Dart 代码都是动态正确的，不会出现空值引用错误。你喜欢你的 Dart 程序现在的样子，我们希望你能够继续这样写代码。安全性不应该要求牺牲可用性，对类型检查器进行忏悔，或者必须显著改变你的思维方式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e由此产生的空安全代码应该是完全健全的。在静态检查的上下文中，\u0026ldquo;健全\u0026quot;对不同的人意味着不同的东西。对我们来说，在空值安全的上下文中，这意味着如果一个表达式的静态类型不允许空，那么该表达式的任何可能的执行都不可能评估为空。语言主要通过静态检查来提供这种保证，但也可以涉及一些运行时检查。虽然，注意第一个原则：任何发生这些运行时检查的地方都将是你的选择）。\u003c/p\u003e\n\u003cp\u003e健全性对于用户的信心很重要。一艘大部分时间都保持漂浮的船，并不是你热衷于在公海上冒险的船。但它对我们无畏的编译器黑客来说也很重要。当语言对程序的语义属性做出硬性保证时，意味着编译器可以执行假设这些属性为真的优化。当涉及到 \u003ccode\u003enull\u003c/code\u003e 时，这意味着我们可以生成更小的代码，消除不需要的 \u003ccode\u003enull\u003c/code\u003e 检查，以及更快的代码，不需要在调用方法之前验证接收器是非 null。\u003c/p\u003e\n\u003cp\u003e有一个注意事项：我们只保证完全空值安全的 Dart 程序的健全性。Dart 支持包含新的空值安全代码和旧的遗留代码混合的程序。在这些混合版本的程序中，仍然可能发生空值引用错误。在一个混合版本的程序中，你可以在空值安全的部分获得所有的静态安全优势，但是在整个应用程序是空安全的之前，你不能获得完整的运行时健全性。\u003c/p\u003e\n\u003cp\u003e请注意，消除 \u003ccode\u003enull\u003c/code\u003e 并不是一个目标。\u003ccode\u003enull\u003c/code\u003e 没有什么不好。相反，能够表示一个值的缺失真的很有用。直接在语言中构建对特殊的 \u0026ldquo;absence\u0026rdquo; 值的支持，使得处理缺失的工作变得灵活和可用。它是可选参数、方便的 \u003ccode\u003e?.\u003c/code\u003e null-aware 操作符和默认初始化的基础。并不是 null 不好，而是让 null 去了你想不到的地方才会引起问题。\u003c/p\u003e\n\u003cp\u003e因此，有了 null 安全，我们的目标是让你控制和洞察 null 可以流经你的程序的地方，并确定它不能流到某个地方，从而导致崩溃。\u003c/p\u003e\n\u003ch2 id=\"类型系统中的空值\"\u003e类型系统中的空值\u003c/h2\u003e\n\u003cp\u003e空值安全始于静态类型系统，因为其他一切都建立在静态类型系统之上。你的 Dart 程序中有一个完整的类型宇宙：像 int 和 String 这样的基元类型，像 List 这样的集合类型，以及所有你和你使用的包所定义的类和类型。在 null 安全之前，静态类型系统允许值 null 流入任何这些类型的表达式中。\u003c/p\u003e\n\u003cp\u003e在类型理论的行话中，Null 类型被视为所有类型的一个子类型。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/null-safety/understanding-null-safety/hierarchy-before.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在某些表达式上允许的操作集 - getters、setters、methods 和 operator - 由其类型定义。如果类型是 List，你可以对它调用. \u003ccode\u003eadd()\u003c/code\u003e 或 \u003ccode\u003e[]\u003c/code\u003e。如果它是 int，你可以调用 \u003ccode\u003e+\u003c/code\u003e。但是空值并没有定义任何这些方法。允许 null 流入其他类型的表达式意味着任何这些操作都可能失败。这就是 null 引用错误的真正症结所在 - 每一次失败都来自于试图在 null 上查找一个它没有的方法或属性。\u003c/p\u003e\n\u003ch2 id=\"非可空类型和可空类型\"\u003e非可空类型和可空类型\u003c/h2\u003e\n\u003cp\u003eNull 安全通过改变类型层次结构，从根本上消除了这个问题。Null 类型仍然存在，但它不再是所有类型的子类型。取而代之的是，类型层次结构是这样的。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/null-safety/understanding-null-safety/hierarchy-after.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e由于 Null 不再是子类型, 除了特殊的 \u003ccode\u003eNull\u003c/code\u003e 类之外，没有任何类型允许值为 null。我们已经将所有类型默认为不可空值。如果你有一个 String 类型的变量，它将总是包含一个字符串。在那里，我们已经修复了所有的空值引用错误。\u003c/p\u003e\n\u003cp\u003e如果我们认为 null 根本没有用，我们可以在这里停止。但是 null 是有用的，所以我们仍然需要一种方法来处理它。可选参数就是一个很好的说明性案例。考虑一下这个 null 安全的 Dart 代码。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003emakeCoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ecoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003edairy\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edairy\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ecoffee\u003c/span\u003e\u003cspan class=\"s1\"\u003e with \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003edairy\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Black \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ecoffee\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这里，我们希望允许 dairy 参数接受任何字符串，或者接受 null 值，而不接受其他任何值。为了表达这一点，我们在底层基类型 String 的结尾处加上 \u003ccode\u003e?\u003c/code\u003e。 从本质上讲，这就是定义了一个底层类型和 Null 类型的\u003ca href=\"https://en.wikipedia.org/wiki/Union_type\"\u003e联合\u003c/a\u003e。所以，如果 Dart 有全功能的联合类型，那么 \u003ccode\u003eString?\u003c/code\u003e 将是 \u003ccode\u003eString|Null\u003c/code\u003e 的简写。\u003c/p\u003e\n\u003ch2 id=\"使用可空类型\"\u003e使用可空类型\u003c/h2\u003e\n\u003cp\u003e如果你有一个可空类型的表达式，你可以用这个结果做什么？由于我们的原则默认是安全的，所以答案是不多，我们不能让你对它调用底层类型的方法，因为如果值是空的，这些方法可能会失败。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Hypothetical unsound null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ebad\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003emaybeString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emaybeString\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ebad\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果我们让你运行它，就会崩溃。我们唯一可以安全地让你访问的方法和属性是由底层类型和 Null 类定义的。那就是 \u003ccode\u003etoString()\u003c/code\u003e、\u003ccode\u003e==\u003c/code\u003e 和 \u003ccode\u003ehashCode\u003c/code\u003e。因此，你可以使用可空类型作为映射键，将它们存储在集合中，将它们与其他值进行比较，并在字符串插值中使用它们，但仅此而已。\u003c/p\u003e\n\u003cp\u003e它们如何与非可空类型交互？将一个不可空值类型传递给期望空值类型的东西总是安全的。如果一个函数接受 String 吗，那么传递一个 String 是允许的，因为它不会引起任何问题。我们通过使每个可空类型成为其底层类型的超类型来建立模型。你也可以安全地把 null 传给期望是可空类型的东西，所以 Null 也是每个可空类型的一个子类型。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/null-safety/understanding-null-safety/nullable-hierarchy.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e但是反过来说，把一个可空类型传递给期待底层非可空类型的东西是不安全的。期待一个 String 的代码可以在值上调用 String 方法。如果你把一个 \u003ccode\u003eString?\u003c/code\u003e 传给它，null 可能会流进来，这可能会失败。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Hypothetical unsound null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003erequireStringNotNull\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003edefinitelyString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edefinitelyString\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003emaybeString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Or not!\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003erequireStringNotNull\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emaybeString\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个程序不安全，我们不应该允许它。然而，Dart 一直有这个东西，叫做隐式下传。例如，如果你把一个 Object 类型的值传递给一个期望为 String 的函数，类型检查器就会允许它。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Without null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003erequireStringNotObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003edefinitelyString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edefinitelyString\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003emaybeString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;it is\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erequireStringNotObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emaybeString\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e为了保持合理性，编译器在 requireStringNotObject() 的参数上默默地插入了一个 \u003ccode\u003eas String\u003c/code\u003e cast。这个转码可能会在运行时失败并抛出一个异常，但在编译时，Dart 说这是确定的。由于非可空类型被建模为可空类型的子类型，所以隐式下投会让你把一个 \u003ccode\u003eString?\u003c/code\u003e 传递给期待一个 String 的东西。允许这样做会违反我们默认安全的目标。所以，有了空值安全，我们就完全取消了隐式下传。\u003c/p\u003e\n\u003cp\u003e这使得对 requireStringNotNull() 的调用会产生一个编译错误，这是你想要的。但这也意味着所有的隐式下包都会成为编译错误，包括对 requireStringNotObject() 的调用。你必须自己添加显式下传。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003erequireStringNotObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003edefinitelyString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edefinitelyString\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003emaybeString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;it is\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erequireStringNotObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emaybeString\u003c/span\u003e \u003cspan class=\"o\"\u003eas\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们认为这总体上是一个好的变化。在我们的印象中，大多数用户从来都不喜欢隐性降频。尤其是，你可能之前就被这个烧过。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Without null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efilterEvens\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eints\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eints\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEven\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e发现错误了吗？\u003ccode\u003e.where()\u003c/code\u003e 方法是懒惰的，所以它返回的是一个 Iterable，而不是 List。这个程序在编译时，当它试图将 Iterable 投射到 filterEvens 声明它返回的 List 类型时，会在运行时抛出一个异常。移除隐式下投后，这就变成了一个编译错误。\u003c/p\u003e\n\u003cp\u003e我们说到哪里了？对了，好吧，就好像我们把你程序中的类型宇宙分成了两半。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/null-safety/understanding-null-safety/bifurcate.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e有一个非空值类型的区域。这些类型让你可以访问所有有趣的方法，但永远不能包含 null。然后是一个由所有相应的可空类型组成的平行家族。这些类型允许 null，但你不能对它们做太多事情。我们让值从非可空侧流向可空侧，因为这样做是安全的，但不是其他方向。\u003c/p\u003e\n\u003cp\u003e这样看来，可空类型基本上是无用的。它们没有方法，你无法摆脱它们。别担心，我们有一整套的功能来帮助你把值从可空型的一半移到另一边，我们很快就会讲到。\u003c/p\u003e\n\u003cp\u003e顶部和底部\n这一部分有点深奥。你可以跳过它，除了最后的两个子弹，除非你对类型系统感兴趣。想象一下，在你的程序中，所有的类型之间都有边缘，它们是彼此的子类型和超类型。如果你把它画出来，就像这个文档中的图一样，它将形成一个巨大的有向图，上面有像 Object 这样的超类型，下面有像你自己的类型这样的叶子类。\u003c/p\u003e\n\u003cp\u003e如果这个有向图到了顶部，有一个单一的类型是超类型（直接或间接），这个类型就被称为顶部类型。同样，如果在那个底部有一个奇怪的类型是每个类型的子类型，你就有一个底部类型。在这种情况下，你的有向图是一个网格）。\u003c/p\u003e\n\u003cp\u003e如果你的类型系统有顶层和底层类型，那是很方便的，因为这意味着像最小上界这样的类型级操作（类型推理使用它来根据一个条件表达式的两个分支的类型找出它的类型）总是可以产生一个类型。在 null 安全之前，Object 是 Dart 的顶层类型，Null 是其底层类型。\u003c/p\u003e\n\u003cp\u003e由于现在 Object 是不可空的，所以它不再是顶类型。Null 不是它的子类型。Dart 没有命名的顶类型。如果你需要一个顶类型，你要 Object? 同样，Null 也不再是底层类型。如果是的话，一切都还会是 null。相反，我们添加了一个新的底层类型，名为 Never。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/null-safety/understanding-null-safety/top-and-bottom.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在实践中，这意味着。\u003c/p\u003e\n\u003cp\u003e如果你想表明你允许任何类型的值，就用 Object? 而不是 Object. 事实上，使用 Object 就变得很不寻常了，因为该类型意味着 \u0026ldquo;可能是任何可能的值，除了这个奇怪的禁止值 null\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e在极少数情况下，你需要一个底层类型，用 Never 代替 Null。如果你不知道是否需要底层类型，你可能不需要。\u003c/p\u003e\n\u003ch2 id=\"确保正确性\"\u003e确保正确性\u003c/h2\u003e\n\u003cp\u003e我们将类型的宇宙分为可空和不可空的两半。为了保持健全性和我们的原则，即除非你要求，否则你永远不会在运行时得到一个 null 引用错误，我们需要保证 null 永远不会出现在非 nullable 端的任何类型中。\u003c/p\u003e\n\u003cp\u003e摆脱隐式下传，去掉 Null 这个底层类型，涵盖了类型在程序中跨赋值流转和在函数调用中从参数流转到参数的所有主要地方。剩下的主要的 null 可以潜入的地方是当一个变量第一次出现和离开一个函数的时候。所以会出现一些额外的编译错误。\u003c/p\u003e\n\u003ch3 id=\"无效返回\"\u003e无效返回\u003c/h3\u003e\n\u003cp\u003e如果一个函数的返回类型是非空的，那么通过该函数的每一条路径都必须到达一个返回值的返回语句。在 null 安全之前，Dart 对于缺失返回的情况非常宽松。比如说\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Without null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emissingReturn\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// No return.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你分析这个，你就会得到一个温柔的提示，也许你忘了一个返回，但如果没有，也没什么大不了的。这是因为如果执行到了函数体的末端，那么 Dart 就会隐式返回 null。由于每个类型都是可空的，所以从技术上讲，这个函数是安全的，尽管它可能不是你想要的。\u003c/p\u003e\n\u003cp\u003e对于健全的非可空类型，这个程序是完全错误的，不安全的。在空值安全下，如果一个具有非可空值返回类型的函数不能可靠地返回一个值，你会得到一个编译错误。所谓 \u0026ldquo;可靠\u0026rdquo;，是指语言分析了所有通过函数的控制流路径。只要它们都能返回一些东西，它就满足了。这个分析是相当聪明的，所以即使这个函数也是可以的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ealwaysReturns\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;zero\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eArgumentError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Negative values not allowed.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;big\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们将在下一节更深入地研究新的流程分析。\u003c/p\u003e\n\u003ch3 id=\"未初始化的变量\"\u003e未初始化的变量\u003c/h3\u003e\n\u003cp\u003e当你声明一个变量时，如果你没有给它一个显式的初始化器，Dart 默认用 null 初始化变量。这很方便，但如果变量的类型是不可空的，显然是完全不安全的。所以我们必须对不可空值的变量进行严格的规定。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e顶级变量和静态字段的声明必须有一个初始化器。由于这些变量可以在程序中的任何地方被访问和赋值，编译器不可能保证变量在被使用之前就已经被赋予了一个值。唯一安全的选择是要求声明本身有一个初始化表达式，产生一个正确类型的值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etopLevel\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSomeClass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003estaticField\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e实例字段必须在声明时有一个初始化器，使用初始化形式，或者在构造函数的初始化列表中初始化。这有很多行话。下面是例子。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSomeClass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eatDeclaration\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003einitializingFormal\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003einitializationList\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eSomeClass\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einitializingFormal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003einitializationList\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e换句话说，只要字段在到达构造函数体之前就有一个值，就可以了。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e局部变量是最灵活的情况。一个不可空的局部变量不需要有一个初始化器。这完全可以。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etracingFibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etracingFibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003etracingFibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e规则只是局部变量在使用前必须肯定分配。我们也可以依靠我所提到的新流分析来实现。只要每个通往变量使用的路径都先初始化它，使用就可以了。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e可选参数必须有一个默认值。如果你没有为一个可选的位置参数或命名参数传递一个参数，那么语言就会用默认值来填充它。如果你不指定默认值，那么默认的默认值就是 null，如果参数的类型是不可空的，那就飞不起来了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以，如果你想让一个参数是可选的，你需要让它变成 null，或者指定一个有效的非空的默认值。\u003c/p\u003e\n\u003cp\u003e这些限制听起来很繁琐，但在实践中并不太坏。它们与现有的围绕最终变量的限制非常相似，而且你可能已经使用这些限制多年，甚至没有真正注意到。另外，请记住，这些限制只适用于不可空值的变量。你总是可以让类型可空，然后让默认初始化为空。\u003c/p\u003e\n\u003cp\u003e即便如此，这些规则也会造成摩擦。幸运的是，我们有一套新的语言特性来润滑最常见的模式，在这些新的限制下，你的速度变慢了。不过，首先，是时候谈谈流分析了。\u003c/p\u003e\n\u003ch2 id=\"流程分析\"\u003e流程分析\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Control_flow_analysis\"\u003e控制流分析\u003c/a\u003e在编译器中已经存在多年。它大多被用户隐藏起来，在编译器优化过程中使用，但一些新的语言已经开始使用同样的技术来实现可见的语言功能。Dart 已经在类型推广的形式下有了一抹流分析。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// With (or without) null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eisEmptyList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobject\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026lt;-- OK!\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，在标记行中，我们可以在对象上调用 isEmpty。该方法定义在 List 上，而不是 Object 上。这是因为类型检查器会查看程序中所有的 is 表达式和控制流路径。如果某个控制流构造体只有在变量上的某个 is 表达式为真时才会执行，那么在这个构造体里面，变量的类型就会被 \u0026ldquo;推广 \u0026ldquo;到测试类型。\u003c/p\u003e\n\u003cp\u003e在这里的例子中，if 语句的 then 分支只有在 object 实际包含一个 list 时才会运行。因此，Dart 将对象推广到 List 类型，而不是其声明的 Object 类型。这是一个方便的功能，但它是相当有限的。在 null 安全之前，下面的功能相同的程序无法工作。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Without null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eisEmptyList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobject\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026lt;-- Error!\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e同样，只有当对象包含一个 list 时，才能达到.isEmpty 的调用，所以这个程序是动态正确的。但是类型推广规则不够聪明，没有看到返回语句意味着只有当对象是一个 list 时才能到达第二个语句。\u003c/p\u003e\n\u003cp\u003e对于空安全，我们把这种有限的分析方法，在几个方面做得更加强大。\u003c/p\u003e\n\u003ch3 id=\"可到达性分析\"\u003e可到达性分析\u003c/h3\u003e\n\u003cp\u003e首先，我们修复了\u003ca href=\"https://github.com/dart-lang/sdk/issues/18921\"\u003e长期以来的抱怨\u003c/a\u003e，即类型推广对早期返回和其他无法到达的代码路径并不聪明。当分析一个函数时，它现在会考虑到返回、break、抛出以及函数中任何其他可能提前终止执行的方式。在空安全下，这个函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eisEmptyList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobject\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在是完全有效的。因为 if 语句会在对象不是 List 时退出函数，所以 Dart 会在第二条语句中促进对象成为 List。这是一个非常好的改进，它帮助了很多 Dart 代码，甚至是与 nullability 无关的东西。\u003c/p\u003e\n\u003ch3 id=\"never---不可达到的代码\"\u003eNever - 不可达到的代码\u003c/h3\u003e\n\u003cp\u003e您也可以对这种可达到性分析进行编程。新的底类型 Never 没有值。(什么样的值同时是 String、bool 和 int 呢？)那么一个表达式具有 Never 类型意味着什么呢？意味着该表达式永远不能成功完成评估。它必须抛出一个异常，中止，或者以其他方式确保期望表达式结果的周围代码永远不会运行。\u003c/p\u003e\n\u003cp\u003e事实上，根据语言的规定，抛出表达式的静态类型是 Never。Never 类型在核心库中被声明，你可以将其作为类型注释。也许你有一个帮助函数，以方便抛出某种异常。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eNever\u003c/span\u003e \u003cspan class=\"n\"\u003ewrongType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eArgumentError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Expected \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"s1\"\u003e, but was \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eruntimeType\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以这样使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePoint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"kd\"\u003eoperator\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eother\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ewrongType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Point\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Constructor and hashCode...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个程序分析起来没有错误。请注意，==方法的最后一行访问了其他的.x 和.y。尽管函数没有任何返回或抛出，但它已经被提升为 Point。控制流分析知道，wrongType()的声明类型是 Never，这意味着 if 语句的 then 分支必须以某种方式中止。由于第二条语句只有在 other 是 Point 时才能到达，所以 Dart 提倡使用它。\u003c/p\u003e\n\u003cp\u003e换句话说，在你自己的 API 中使用 Never 可以让你扩展 Dart 的可达性分析。\u003c/p\u003e\n\u003ch3 id=\"确定赋值分析\"\u003e确定赋值分析\u003c/h3\u003e\n\u003cp\u003e这个我简单的提到了局部变量。Dart 需要确保一个不可空的局部变量在读取之前总是被初始化。我们使用确定赋值分析来尽可能灵活地处理这个问题。该语言分析每个函数体，并通过所有控制流路径跟踪局部变量和参数的赋值。只要在每一条到达某个使用变量的路径上都对变量进行了赋值，就认为该变量已经初始化。这让你可以在没有初始化器的情况下声明一个变量，然后在之后使用复杂的控制流对其进行初始化，即使该变量具有不可空值的类型。\u003c/p\u003e\n\u003cp\u003e我们还使用确定赋值分析来使最终变量更加灵活。在空安全之前，如果你需要以任何一种有趣的方式对局部变量进行初始化，那么使用 final 是很困难的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etracingFibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etracingFibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003etracingFibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将是一个错误，因为结果变量是 final，但没有初始化器。在空安全下进行更智能的流分析，这个程序是没有问题的。分析可以知道，在每条控制流路径上，result 肯定是精确地初始化了一次，所以标记变量 final 的约束条件是满足的。\u003c/p\u003e\n\u003ch3 id=\"对空检查的类型提升\"\u003e对空检查的类型提升\u003c/h3\u003e\n\u003cp\u003e更加智能的流程分析帮助了很多 Dart 代码，甚至是与空性无关的代码。但我们现在做这些改变并不是偶然的。我们把类型分为可空性和非可空性集。如果你有一个可空类型的值，你就不能真正对它做任何有用的事情。在值为空的情况下，这种限制是好的。它可以防止你崩溃。\u003c/p\u003e\n\u003cp\u003e但如果值不是空的，能够把它移到非可空的一面，这样你就可以对它调用方法，这将是一件好事。对于局部变量和参数来说，流程分析是实现这一点的主要方法之一。我们已经扩展了类型提升，还可以查看 \u003ccode\u003e== null\u003c/code\u003e 和 \u003ccode\u003e!= null\u003c/code\u003e 表达式。\u003c/p\u003e\n\u003cp\u003e如果你检查一个可空类型的变量，看看它是不是空的，Dart 就会把这个变量推广到底层的非可空类型。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emakeCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eexecutable\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;?\u003c/span\u003e \u003cspan class=\"n\"\u003earguments\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexecutable\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earguments\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003earguments\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里，arguments 有一个可空的类型。通常，这禁止你对它调用.join()。但是由于我们在 if 语句中对该调用进行了保护，检查以确保该值不是空的，所以 Dart 将其从  \u003ccode\u003eList\u0026lt;String\u0026gt;\u003c/code\u003e 提升为 \u003ccode\u003eList\u0026lt;String\u0026gt;\u003c/code\u003e，并允许你在其上调用方法或将其传递给期望非空值列表的函数。\u003c/p\u003e\n\u003cp\u003e这听起来是一件相当小的事情，但这种基于流程的对 null 检查的推广是使大多数现有 Dart 代码在 null 安全下工作的原因。大多数 Dart 代码都是动态正确的，并且确实通过在调用方法之前检查空值来避免抛出空值引用错误。新的关于 null 检查的流程分析将这种动态正确性变成了可证明的静态正确性。\u003c/p\u003e\n\u003cp\u003e当然，它也能配合我们对可到达性的更智能的分析。上面的函数也可以写成一样。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emakeCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eexecutable\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;?\u003c/span\u003e \u003cspan class=\"n\"\u003earguments\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexecutable\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earguments\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003earguments\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e语言也比较聪明，什么样的表达方式会引起推广。显式 \u003ccode\u003e== null\u003c/code\u003e 或 \u003ccode\u003e!= null\u003c/code\u003e 当然可以。但是，使用 as、assignments 或我们即将提到的后缀 \u003ccode\u003e!\u003c/code\u003e 操作符的显式投掷也会导致提升。总的目标是，如果代码是动态正确的，而且静态地找出这一点是合理的，分析应该足够聪明。\u003c/p\u003e\n\u003ch3 id=\"不必要的代码警告\"\u003e不必要的代码警告\u003c/h3\u003e\n\u003cp\u003e拥有更智能的可达性分析，并知道 null 可能流经你的程序的地方，有助于确保你添加代码来处理 null。但我们也可以用同样的分析来检测你不需要的代码。在 null 安全之前，如果你写了这样的东西。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003echeckList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Got nothing\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Got something\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDart 没有办法知道那个 \u003ccode\u003enull-aware?\u003c/code\u003e 操作符是否有用。它只知道，你可以把 null 传给函数。但是在 null safe Dart 中，如果你用现在不可空的 List 类型注释了那个函数，那么它知道 list 永远不会是 null。这就意味着这个 \u003ccode\u003e?.\u003c/code\u003e 永远不会做任何有用的事情，你可以而且应该只使用 \u003ccode\u003e.\u003c/code\u003e 类型。\u003c/p\u003e\n\u003cp\u003e为了帮助你简化你的代码，我们已经为这样的不必要的代码添加了警告，现在静态分析已经精确到可以检测到它了。在一个不可空类型上使用一个 null-aware 操作符，甚至是像\u003ccode\u003e== null\u003c/code\u003e 或 \u003ccode\u003e!= null\u003c/code\u003e 这样的检查，都会被报告为一个警告。\u003c/p\u003e\n\u003cp\u003e当然，这也与非空类型的晋升有关。一旦一个变量被推广到一个不可空类型，如果你再次对它进行多余的 null 检查，你会得到一个警告。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003echeckList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;No list\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Empty list\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Got something\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你在这里得到了一个警告，因为在它执行的时候，我们已经知道 list 不能为空。这些警告的目的不仅仅是清理无意义的代码。通过删除不需要的 null 检查，我们确保剩下的有意义的检查能够脱颖而出。我们希望您能够查看您的代码，并看到 null 可以在哪里流动。\u003c/p\u003e\n\u003ch2 id=\"使用可空类型-1\"\u003e使用可空类型\u003c/h2\u003e\n\u003cp\u003e我们现在已经把 null 收进了可空类型的集合。通过流程分析，我们可以安全地让一些非空值越过栅栏跳到非可空类型的一边，在那里我们可以使用它们。这是一个很大的进步，但如果我们在这里停下来，所产生的系统仍然是痛苦的限制。流程分析只对局部和参数有帮助。\u003c/p\u003e\n\u003cp\u003e为了尽量恢复 Dart 在 null 安全之前的灵活性\u0026ndash;并且在某些地方超越它，我们有一些其他的新特性。\u003c/p\u003e\n\u003ch3 id=\"更加智能的空感知方法\"\u003e更加智能的空感知方法\u003c/h3\u003e\n\u003cp\u003eDart 的 null aware 操作符 \u003ccode\u003e?.\u003c/code\u003e 比 null safety 更早。运行时语义规定，如果接收者为空，那么右侧的属性访问将被跳过，表达式评价为空。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Without null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003enotAString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enotAString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这不是抛出一个异常，而是打印 \u0026ldquo;null\u0026rdquo;。null-aware 操作符是一个很好的工具，它使可空类型在 Dart 中可用。虽然我们不能让你在可空类型上调用方法，但我们可以也确实让你在它们上使用 null-aware 操作符。空值后安全版本的程序是。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003enotAString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enotAString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e它的工作原理和之前的一样。\u003c/p\u003e\n\u003cp\u003e然而，如果你曾经在 Dart 中使用过 null-aware 操作符，当你在方法链中使用它们时，你可能会遇到一个烦恼。比方说，你想看看一个可能不存在的字符串的长度是否是一个偶数（不是一个特别现实的问题，我知道，但请和我一起工作）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003enotAString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enotAString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEven\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e即使这个程序使用了?，但在运行时还是会抛出一个异常。问题在于.isEven 表达式的接收者是它左边的整个 notAString?.length 表达式的结果。该表达式的值为 null，所以我们在尝试调用.isEven 时得到一个空值引用错误。如果你曾经在 Dart 中使用过?.，你可能学到了一个苦涩的方法，那就是在你使用过一次之后，你必须将 null-aware 操作符应用到链中的每个属性或方法。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003enotAString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enotAString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEven\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这很烦人，但更糟糕的是，它掩盖了重要信息。考虑一下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eshowGizmo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eThing\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003ething\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ething\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edoohickey\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egizmo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我有个问题要问你。Thing 上的 doohickey getter 可以返回 null 吗？看起来可以，因为你在结果上使用了?。但可能只是第二个?.只是为了处理 thing 为 null 的情况，而不是 doohickey 的结果。你无法判断。\u003c/p\u003e\n\u003cp\u003e为了解决这个问题，我们借鉴了 C#设计相同功能的一个聪明的想法。当你在一个方法链中使用一个 null-aware 操作符时，如果接收者评估为 null，那么整个方法链的其余部分都会被短路并跳过。这意味着如果 doohickey 有一个不可空的返回类型，那么你可以也应该写。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eshowGizmo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eThing\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003ething\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ething\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edoohickey\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egizmo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e事实上，如果你不这样做，你会在第二个?上得到一个不必要的代码警告。如果你看到这样的代码。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eshowGizmo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eThing\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003ething\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ething\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edoohickey\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egizmo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e那么你就可以肯定地知道，这意味着 doohickey 本身有一个可空的返回类型。每一个?对应一个可以导致 null 流入方法链的唯一路径。这使得方法链中的 null-aware 操作符既更简洁又更精确。\u003c/p\u003e\n\u003cp\u003e在这时，我们又增加了几个其他的空感知操作符。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Null-aware cascade:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ereceiver\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Null-aware index operator:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ereceiver\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e没有一个 null-aware 函数调用操作符，但你可以写。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Allowed with or without null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003efunction\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earg1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earg2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"null-断言运算符\"\u003eNull 断言运算符\u003c/h3\u003e\n\u003cp\u003e使用流式分析将一个可空型变量移到非可空型变量的伟大之处在于，这样做被证明是安全的。你可以在之前的可空型变量上调用方法，而不会放弃非可空型的任何安全或性能。\u003c/p\u003e\n\u003cp\u003e但是，可空类型的许多有效用途无法以取悦静态分析的方式证明其安全性。比如说\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety, incorrectly:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHttpResponse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eHttpResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eok\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ecode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eHttpResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enotFound\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ecode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e404\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eerror\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Not found\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"m\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;OK\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;ERROR \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoUpperCase\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你尝试运行这个，你在调用 toUpperCase()时得到一个编译错误。错误字段是可空的，因为它在成功的响应中不会有一个值。我们通过检查类可以看到，当错误信息为空时，我们永远不会访问它。但这需要理解代码的值和错误的可空性之间的关系。类型检查器是看不到这种联系的。\u003c/p\u003e\n\u003cp\u003e换句话说，我们这些代码的人类维护者知道错误在我们使用它的时候不会是空的，我们需要一种方法来断言这一点。通常情况下，你使用 as cast 来断言类型，在这里你也可以做同样的事情。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"m\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;OK\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;ERROR \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e \u003cspan class=\"o\"\u003eas\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003etoUpperCase\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果投递失败，将错误地投递到不可空的 String 类型，会抛出一个运行时异常。否则，它将为我们提供一个非空值字符串，我们可以在其上调用方法。\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;投弃可空性 \u0026ldquo;经常出现，以至于我们有了一种新的速记语法。一个后缀的感叹号 (!) 将左边的表达式并将其投射到其底层的不可空类型上。所以上面的函数相当于\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"m\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;OK\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;ERROR \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoUpperCase\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当底层类型是啰嗦的时候，这个单字符的 \u0026ldquo;bang 操作符 \u0026ldquo;特别方便。如果仅仅为了从某个类型中投弃一个单一的?，而不得不写成 Map\u0026lt;TransactionProviderFactory, List\u0026lt;Set\u003c!-- raw HTML omitted --\u003e\u0026gt;，那就真的很烦人了。\u003c/p\u003e\n\u003cp\u003e当然，就像任何投射一样，使用 !的同时也会损失静态安全。必须在运行时检查投射以保持合理性，而且可能会失败并抛出一个异常。但是你可以控制这些转码被插入的位置，你可以通过查看你的代码随时看到它们。\u003c/p\u003e\n\u003ch3 id=\"late-变量\"\u003eLate 变量\u003c/h3\u003e\n\u003cp\u003e类型检查器不能证明代码安全的最常见的地方是围绕顶层变量和字段。下面是一个例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety, incorrectly:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCoffee\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eheat\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;hot\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003echill\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;iced\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eserve\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39; coffee\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ecoffee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ecoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eheat\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ecoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eserve\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里，heat()方法是在服务()之前调用的。这意味着 _temperature 在使用之前会被初始化为一个非空值。但是静态分析来确定这一点是不可行的。(对于像这个微不足道的例子来说可能是可行的，但是一般情况下，试图跟踪一个类的每一个实例的状态是难以解决的。)。\u003c/p\u003e\n\u003cp\u003e因为类型检查器不能分析字段和顶层变量的用途，它有一个保守的规则，即不可空值字段必须在声明时初始化（或者在实例字段的构造函数初始化列表中）。所以 Dart 在这个类上报告了一个编译错误。\u003c/p\u003e\n\u003cp\u003e你可以通过使字段可空，然后在用途上使用 null 断言操作符来修复这个错误。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCoffee\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eheat\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;hot\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003echill\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;iced\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eserve\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39; coffee\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这样做很好，但它给类的维护者发出了一个混乱的信号。但它给类的维护者发出了一个混乱的信号。通过标记 _temperature 为 nullable，你暗示 null 对于该字段来说是一个有用的、有意义的值。但这不是我们的目的。_temperature 字段永远不应该在其 null 状态下被观察到。\u003c/p\u003e\n\u003cp\u003e为了处理常见的延迟初始化的状态模式，我们添加了一个新的修饰符 late。你可以像这样使用它。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCoffee\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003elate\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eheat\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;hot\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003echill\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;iced\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eserve\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39; coffee\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，_temperature 字段的类型不可空，但没有初始化。另外，在使用它的时候也没有明确的空断言。有一些模型可以应用到迟到的语义中，但我是这样想的。晚期修饰符的意思是 \u0026ldquo;在运行时执行这个变量的约束，而不是在编译时执行\u0026rdquo;。这几乎就像 \u0026ldquo;late \u0026ldquo;这个词描述的是什么时候执行变量的保证。\u003c/p\u003e\n\u003cp\u003e在这种情况下，由于该字段还没有确定初始化，所以每次读取该字段时，都会插入一个运行时检查，以确保它已经被分配了一个值。如果没有，就会抛出一个异常。给变量类型为 String 意味着 \u0026ldquo;你应该永远不会看到我的值不是字符串\u0026rdquo;，而后期修饰符意味着 \u0026ldquo;在运行时验证\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e在某些方面，迟到修饰符比使用? \u0026ldquo;神奇\u0026rdquo;，因为对字段的任何使用都可能失败，而且在使用现场没有任何文字可见。但你确实必须在声明处写晚期才能得到这种行为，我们的信念是，在那里看到修饰符已经足够明确，这一点是可以维护的。\u003c/p\u003e\n\u003cp\u003e作为回报，你可以得到比使用可空类型更好的静态安全。因为现在字段的类型是非可空的，所以试图将 null 或可空的 String 分配给字段是一个编译错误。晚期修饰符可以让你推迟初始化，但仍然禁止你把它当作一个可空变量来处理。\u003c/p\u003e\n\u003ch3 id=\"惰性初始化\"\u003e惰性初始化\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003elate\u003c/code\u003e 修饰符也有一些其他的特殊能力。这可能看起来很矛盾，但你可以在一个有初始化器的字段上使用 late。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eWeather\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003elate\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_readThermometer\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当你这样做的时候，初始化器会变得懒惰。它不是在实例构造完成后立即运行，而是在第一次访问该字段时就延迟并缓慢运行。换句话说，它的工作方式与顶层变量或静态字段的初始化器完全一样。当初始化表达式的成本很高且可能不需要时，这可以很方便。\u003c/p\u003e\n\u003cp\u003e当你在实例字段上使用后期，懒惰地运行初始化器会给你一个额外的奖励。通常实例字段初始化器不能访问这个，因为在所有字段初始化器完成之前，你不能访问新对象。但有了迟来的字段，就不再是这样了，所以你可以访问这个，调用方法，或者访问实例上的字段。\u003c/p\u003e\n\u003ch3 id=\"late-final-变量\"\u003elate final 变量\u003c/h3\u003e\n\u003cp\u003e你也可以把 \u003ccode\u003elate\u003c/code\u003e 和 \u003ccode\u003efinal\u003c/code\u003e 结合起来。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCoffee\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003elate\u003c/span\u003e \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eheat\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;hot\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003echill\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;iced\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eserve\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39; coffee\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e与普通的 final 字段不同，您不必在声明中或在构造函数初始化列表中初始化该字段。你可以在以后的运行时对它进行赋值。但是你只能对它赋值一次，而且这个事实会在运行时被检查。如果你试图对它进行不止一次的赋值，就像这里同时调用 heat() 和 chill() 一样，第二次赋值就会抛出一个异常。这是对最终被初始化且之后不可改变的状态进行建模的好方法。\u003c/p\u003e\n\u003cp\u003e换句话说，新的 late 修饰符结合 Dart 的其他变量修饰符，覆盖了 Kotlin 中 lateinit 和 Swift 中 lazy 的大部分功能空间。如果你想在局部变量上使用它，你甚至可以在局部变量上使用它，如果你想进行一点局部的懒惰评估。\u003c/p\u003e\n\u003ch3 id=\"所需的命名参数\"\u003e所需的命名参数\u003c/h3\u003e\n\u003cp\u003e为了保证你永远不会看到一个具有不可空类型的空参数，类型检查器要求所有可选参数要么具有可空类型，要么具有默认值。如果你想让一个命名的参数有一个可空的类型而没有默认值呢？那就意味着你想要求调用者总是传递它。换句话说，你想要一个命名的参数，但不是可选的。\u003c/p\u003e\n\u003cp\u003e我用这个表直观地展示了 Dart 参数的各种类型。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e             mandatory    optional\n            +------------+------------+\npositional  | f(int x)   | f([int x]) |\n            +------------+------------+\nnamed       | ???        | f({int x}) |\n            +------------+------------+\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e由于不清楚的原因，Dart 长期以来一直支持这个表的三个角，但把 named+mandatory 的组合空了。在空安全的情况下，我们填补了这一点。你在参数前放上 required，就可以声明一个必要的命名参数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erequired\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erequired\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这里，所有的参数都必须以名字传递。参数 a 和 c 是可选的，可以省略。参数 b 和 d 是必填的，必须传递。注意，要求性与可空性无关。可空类型的命名参数可以是必需的，不可空类型的命名参数可以是可选的（如果它们有一个默认值）。\u003c/p\u003e\n\u003cp\u003e这是另一个我认为无论空值安全性如何都能让 Dart 变得更好的特性之一。它只是让我觉得这个语言更加完整。\u003c/p\u003e\n\u003ch3 id=\"抽象字段\"\u003e抽象字段\u003c/h3\u003e\n\u003cp\u003eDart 的一个特点是它坚持了一个叫做统一访问原则的东西。用人话说就是字段与 getter 和 setter 是没有区别的。在某个 Dart 类中的 \u0026ldquo;属性 \u0026ldquo;是计算还是存储，这是一个实现细节。正因为如此，在使用抽象类定义接口的时候，一般都会使用字段声明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCup\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eBeverage\u003c/span\u003e \u003cspan class=\"n\"\u003econtents\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e其目的是让用户只实现该类，而不要扩展它。字段语法只是写一个 getter/setter 对的较短方式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCup\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eBeverage\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003econtents\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eset\u003c/span\u003e \u003cspan class=\"n\"\u003econtents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBeverage\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但 Dart 不知道这个类永远不会被用作具体类型。它把那个内容声明看作是一个真实的字段。而且，不幸的是，这个字段是不可空的，也没有初始化器，所以你得到一个编译错误。\u003c/p\u003e\n\u003cp\u003e一个解决方法是使用显式的抽象 getter/setter 声明，就像第二个例子中那样。但这有点啰嗦，所以在 null 安全的情况下，我们还增加了对显式抽象字段声明的支持。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCup\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e \u003cspan class=\"n\"\u003eBeverage\u003c/span\u003e \u003cspan class=\"n\"\u003econtents\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这和第二个例子的行为完全一样。它只是用给定的名称和类型声明了一个抽象的 getter 和 setter。\u003c/p\u003e\n\u003ch3 id=\"使用可空字段\"\u003e使用可空字段\u003c/h3\u003e\n\u003cp\u003e这些新特性涵盖了许多常见的模式，并且在大多数时间里，让处理 null 的工作变得相当轻松。但即便如此，我们的经验是，可空字段仍然是困难的。在你能让字段迟到且不可空的情况下，你是金子般的存在。但在很多情况下，你需要检查字段是否有值，这就需要让它可空，这样你就可以观察到空。\u003c/p\u003e\n\u003cp\u003e你可能会期望这样做是可行的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety, incorrectly:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCoffee\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eheat\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;hot\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003echill\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;iced\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003echeckTemp\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Ready to serve \u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eserve\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39; coffee\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 checkTemp()里面，我们检查 _temperature 是否为空。如果不是，我们访问它，并最终调用+。不幸的是，这是不允许的。基于流式的类型推广并不适用于字段，因为静态分析无法证明字段的值在你检查 null 和你使用它的点之间没有变化。考虑到在病理情况下，字段本身可能会被子类中的 getter 覆盖，在第二次调用时返回 null）。\u003c/p\u003e\n\u003cp\u003e所以，既然我们关心健全性，那么字段就不会推广，上面的方法就不会编译。这是很烦人的。在像这里这样简单的情况下，你最好的选择是在字段的使用上打上一个! 这似乎是多余的，但这多少是 Dart 如今的行为方式。\u003c/p\u003e\n\u003cp\u003e另一个有用的模式是先把字段复制到一个本地变量中，然后再使用它。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003echeckTemp\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003etemperature\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_temperature\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etemperature\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Ready to serve \u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003etemperature\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于类型推广确实适用于本地人，所以现在可以正常使用。如果你需要改变值，只要记得存储回字段，而不仅仅是本地。\u003c/p\u003e\n\u003ch3 id=\"无效性和属性\"\u003e无效性和属性\u003c/h3\u003e\n\u003cp\u003e像大多数现代静态类型的语言一样，Dart 有通用类和通用方法。它们与可空性的交互方式有一些看似反直觉的地方，但一旦你想清楚了其中的含义，就会明白。首先是 \u0026ldquo;这个类型是可空性的吗？\u0026ldquo;不再是一个简单的是或否的问题。考虑一下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBox\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eBox\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eBox\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a string\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eBox\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Box 的定义中，T 是一个可空类型还是一个不可空类型？正如你所看到的，它可以被实例化为任何一种类型。答案是 T 是一个潜在的可空类型。在一个通用类或方法的主体中，潜在可空类型具有可空类型和不可空类型的所有限制。\u003c/p\u003e\n\u003cp\u003e前者意味着除了在 Object 上定义的少量方法外，你不能调用它的任何方法。后者意味着你必须在使用该类型的任何字段或变量之前初始化它们。这可能会使类型参数变得相当难处理。\u003c/p\u003e\n\u003cp\u003e在实践中，有几种模式表现出来。在类似集合的类中，类型参数可以用任何类型实例化，你只需要处理这些限制。在大多数情况下，就像这里的例子一样，这意味着只要你需要处理一个类型参数的值，就必须确保你确实可以访问这个类型参数的值。幸运的是，集合类很少对其元素调用方法。\u003c/p\u003e\n\u003cp\u003e在你无法访问一个值的地方，你可以使类型参数的使用是可空的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBox\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eBox\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eBox\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efull\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意对象声明上的? 现在这个字段有一个显式可空的类型，所以可以不初始化它。\u003c/p\u003e\n\u003cp\u003e当你使一个类型参数类型像这里的 T? 一样可空的时候，你可能需要把可空性抛掉。正确的方法是使用显式为 T 的转写，而不是使用 !操作符。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBox\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eBox\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eBox\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efull\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003eunbox\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eobject\u003c/span\u003e \u003cspan class=\"o\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e!操作符总是在值为 null 时抛出。但是如果类型参数已经被实例化为一个可空类型，那么 null 对于 T 来说是一个完全有效的值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ebox\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBox\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efull\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebox\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eunbox\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个程序应该无误地运行。使用 T 就可以实现这一点。使用 !会抛出一个异常。\u003c/p\u003e\n\u003cp\u003e其他通用类型有一些约束，限制了可以应用的类型参数的种类。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eInterval\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"kt\"\u003enum\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eInterval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果绑定是不可空的，那么类型参数也是不可空的，这意味着你有不可空类型的限制\u0026ndash;你不能让字段和变量不初始化。这意味着你有不可空值类型的限制\u0026ndash;你不能让字段和变量不初始化。这里的示例类必须有一个初始化字段的构造函数。\u003c/p\u003e\n\u003cp\u003e作为这种限制的回报，你可以调用在其绑定上声明的参数类型的值的任何方法。然而，拥有一个不可空的绑定确实会阻止你的通用类的用户用一个可空的类型参数来实例化它。对于大多数类来说，这可能是一个合理的限制。\u003c/p\u003e\n\u003cp\u003e你也可以使用一个可空的绑定。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eInterval\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"kt\"\u003enum\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003elocalMin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003elocalMax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// No min or max means an open-ended interval.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elocalMin\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003elocalMax\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003elocalMax\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003elocalMin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这意味着在类的主体中，你可以灵活地将类型参数处理为 nullable。请注意，这次我们没有构造函数，这也没关系。字段将被隐式初始化为 null。你可以声明类型参数类型的未初始化变量。\u003c/p\u003e\n\u003cp\u003e但是你也有 nullability 的限制\u0026ndash;你不能在该类型的变量上调用任何东西，除非你先处理好 nullability。在这里的例子中，我们复制局部变量中的字段，并检查这些局部变量是否为空，以便在使用\u0026lt;=之前，流分析将它们推广到非可空性类型。\u003c/p\u003e\n\u003cp\u003e请注意，可空性绑定并不妨碍用户用非空类型实例化类。一个可空的边界意味着类型参数可以是可空的，而不是说它必须是可空的。事实上，如果你不写扩展子句，类型参数的默认约束是可空值约束 Object? 没有办法要求类型参数是可空的。如果你想让类型参数的使用可靠地是可空的，你可以在类的主体里面使用 T?\u003c/p\u003e\n\u003ch2 id=\"核心库的变化\"\u003e核心库的变化\u003c/h2\u003e\n\u003cp\u003e语言中还有一些其他的调整，但都是次要的。例如，没有 on 子句的 catch 的默认类型现在是 Object 而不是动态的。开关语句中的跌穿分析使用了新的流分析。\u003c/p\u003e\n\u003cp\u003e剩下的真正对你有意义的变化是在核心库中。在我们开始进行空值安全大冒险之前，我们担心原来没有办法在不大规模破坏世界的情况下让我们的核心库实现空值安全。结果并没有那么可怕。有一些重大的变化，但大多数情况下，迁移很顺利。大多数核心库要么不接受 null，自然而然地迁移到非可空类型，要么接受并优雅地用可空类型接受它。\u003c/p\u003e\n\u003cp\u003e不过有几个重要的角落。\u003c/p\u003e\n\u003ch3 id=\"map-索引操作符是可空的\"\u003eMap 索引操作符是可空的\u003c/h3\u003e\n\u003cp\u003e这并不是真正的改变，更多的是一个需要知道的事情。Map 类的 index [] 操作符如果键不存在，则返回 null。这意味着该操作符的返回类型必须是可空的。V?\u003c/p\u003e\n\u003cp\u003e我们可以将该方法改为当键不存在时抛出一个异常，然后给它一个更容易使用的非空值返回类型。但是，使用索引操作符并检查 null 以查看键是否不存在的代码是非常常见的，根据我们的分析，约占所有使用的一半。打破所有这些代码会让 Dart 生态系统燃起熊熊大火。\u003c/p\u003e\n\u003cp\u003e相反，运行时的行为是一样的，因此返回类型必须是可空的。这意味着你一般不能立即使用 map 查询的结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety, incorrectly:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003emap\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;value\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Error.\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当你试图在一个可空字符串上调用.length 时，会出现编译错误。在你知道键存在的情况下，你可以通过使用！.length 来教导类型检查器。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Using null safety:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003emap\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;value\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// OK.\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们考虑过在 Map 中添加另一个方法来为你做这件事：查找 key，如果没有找到就抛出，否则就返回一个非空值。但是该怎么称呼它呢？没有一个名字比单字符的 !更短，也没有一个方法的名字比在调用现场看到一个内置语义的 !更清晰。所以，在地图中访问一个已知存在元素的习惯性方式是使用[]! 你会习惯的。\u003c/p\u003e\n\u003ch3 id=\"没有未命名的-list-构造函数\"\u003e没有未命名的 List 构造函数\u003c/h3\u003e\n\u003cp\u003eList 上的未命名构造函数创建了一个给定大小的新列表，但没有初始化任何元素。如果你创建了一个非可空类型的 list，然后访问一个元素，这将会在健全性保证中留下一个非常大的漏洞。\u003c/p\u003e\n\u003cp\u003e为了避免这种情况，我们完全删除了构造函数。在空安全代码中调用 List()是一个错误，即使是可空类型。这听起来很吓人，但实际上，大多数代码都是使用 list literals、List.filled()、List.generate()或者作为转换其他集合的结果来创建列表的。对于想要创建某种类型的空列表的边缘情况，我们添加了一个新的 List.empty()构造函数。\u003c/p\u003e\n\u003cp\u003e在 Dart 中，创建一个完全未初始化的列表的模式一直让人觉得格格不入，现在更是如此。如果你的代码被这一点破坏了，你可以随时通过使用许多其他的方法来产生一个列表来修复它。\u003c/p\u003e\n\u003ch3 id=\"不能在不可空的列表上设置较大的长度\"\u003e不能在不可空的列表上设置较大的长度\u003c/h3\u003e\n\u003cp\u003e这一点鲜为人知，但 List 上的 length getter 也有一个相应的 setter。你可以将长度设置为一个较短的值来截断列表。你也可以将它设置为一个较长的长度，以便用未初始化的元素填充列表。\u003c/p\u003e\n\u003cp\u003e如果你对一个非空值类型的列表这样做，当你以后访问那些未写入的元素时，你会违反健全性。为了防止这种情况发生，如果（也只有当）列表的元素类型是不可空的，而你又将其设置为较长的长度时，长度设置器会抛出一个运行时异常。截断所有类型的列表仍然是可以的，你可以增长可空类型的列表。\u003c/p\u003e\n\u003cp\u003e如果你定义了自己的列表类型，扩展了 ListBase 或应用了 ListMixin，那么这有一个重要的后果。这两种类型都提供了 insert()的实现，之前通过设置长度为插入的元素腾出空间。这样做会因空安全而失败，所以我们将 ListMixin（ListBase 共享）中 insert()的实现改为调用 add()。如果你想能够使用继承的 insert()方法，你的自定义列表类应该提供 add()的定义。\u003c/p\u003e\n\u003ch3 id=\"不能在迭代之前或之后访问-iteratorcurrent\"\u003e不能在迭代之前或之后访问 Iterator.current\u003c/h3\u003e\n\u003cp\u003eIterator 类是一个可变的 \u0026ldquo;游标 \u0026ldquo;类，用于遍历实现 Iterable 的类型的元素。在访问任何元素之前，你应该调用 moveNext()来前进到第一个元素。当该方法返回 false 时，你已经到达了终点，没有更多的元素。\u003c/p\u003e\n\u003cp\u003e过去，如果你在第一次调用 moveNext()之前或在迭代结束后调用它，current 会返回 null。有了 null 安全，那就要求 current 的返回类型是 E? 而不是 E。这又意味着每个元素的访问都需要进行运行时空检查。\u003c/p\u003e\n\u003cp\u003e鉴于几乎没有人以那种错误的方式访问当前元素，这些检查将毫无用处。由于在迭代之前或之后可能会有一个该类型的值，所以我们让迭代器的行为没有被定义，如果你在不应该调用它的时候调用它。大多数 Iterator 的实现都会抛出一个 StateError。\u003c/p\u003e\n\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\n\u003cp\u003e这是一个非常详细的关于 null 安全的语言和库变化的介绍。这是一个很大的东西，但这是一个相当大的语言变化。更重要的是，我们希望达到一个点，让 Dart 仍然感觉到凝聚力和可用性。这不仅需要改变类型系统，还需要改变其他一些围绕它的可用性功能。我们不希望它让人感觉像被栓上了 null safety。\u003c/p\u003e\n\u003cp\u003e要带走的核心点是。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e类型在默认情况下是不可空值的，而通过添加 \u003ccode\u003e?.\u003c/code\u003e 来实现空值化。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e可选参数必须是可空的，或者有一个默认值。可以使用 required 使命名参数成为非可选参数。不可空值的顶层变量和静态字段必须有初始化器。不可空值的实例字段必须在构造函数主体开始之前初始化。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e如果接收者为空，则空感知操作符后的方法链会短路。有新的空感知级联(\u003ccode\u003e?..\u003c/code\u003e)和索引(\u003ccode\u003e?[]\u003c/code\u003e)运算符。后缀的空断言 \u0026ldquo;bang\u0026rdquo; 运算符(!)将其可空操作数投射到底层的非可空类型。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e流程分析让你可以安全地将可空的局部变量和参数转化为可用的非可空变量。新的流分析还对类型提升、缺失返回、不可达代码和变量初始化有更智能的规则。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003elate 修饰符让你可以在其他地方使用不可空类型和 final，否则你可能无法使用，但会牺牲运行时检查。它还为你提供了惰性初始化的字段。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eList 类被修改为防止未初始化元素。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e最后，一旦你吸收了所有这些，并让你的代码进入 null 安全的世界，你就会得到一个健全的程序，编译器可以优化，并且在你的代码中可以看到每一个可能发生运行时错误的地方。我们希望你觉得这样的努力是值得的。\u003c/p\u003e\n\u003cp\u003e原文链接: \u003ca href=\"https://dart.dev/null-safety/understanding-null-safety\"\u003ehttps://dart.dev/null-safety/understanding-null-safety\u003c/a\u003e\u003c/p\u003e\n","text":"空值安全是我们在 Dart 2.0 中用健全的静态类型系统取代了原来的不健全的可选类型系统后，对 Dart 做出的最大改变。当 Dart 刚推出的时候，编译时空安全是一个罕见的功能，需要长时间的介绍。今天，Kotlin、Swift、Rust 和其他语言都有自己的答案，这已经成为一个非常熟悉的问题。下面是一个例子。\n// Without null safety: bool isEmpty(String string) =\u0026gt; string.length == 0; main() { isEmpty(null); } 如果你在没有 null 安全的情况下运行这个 Dart 程序，它就会在调用.length 时抛出一个 NoSuchMethodError 异常。null 值是 Null 类的一个实例，而 Null 没有 \u0026ldquo;length\u0026rdquo; getter。运行时的失败很糟糕。这在像 Dart 这样的语言中尤其如此，因为它被设计成在终端用户的设备上运行。如果一个服务器应用程序失败了，你通常可以在任何人注意到之前重新启动它。但是当一个 Flutter 应用在用户的手机上崩溃时，他们并不高兴。当你的用户不高兴时，你也不高兴。\n开发者喜欢像 Dart 这样的静态类型语言，因为它们可以让类型检查器在编译时发现代码中的错误，通常就在 IDE 中。越早发现错误，就能越早修复它。当语言设计者谈论 \u0026ldquo;修复空值引用错误\u0026quot;时，他们的意思是丰富静态类型检查器，使语言能够检测到像上面试图在一个可能是空的值上调用 .length 这样的错误。\n对于这个问题，没有一个真正的解决方案。Rust 和 Kotlin 都有自己的方法，在这些语言的上下文中是有意义的。这个文档详细介绍了我们对 Dart 的答案。它包括对静态类型系统的修改，以及一系列其他的修改和新的语言特性，让你不仅能写出空值安全的代码，而且希望能享受这样做的乐趣。\n这个文档很长。如果你想看一些较短的文件，它只涵盖了你需要知道的东西，以便开始运行，请从概述开始。当你准备好了更深入的理解，并且有时间的时候，请回到这里，这样你就可以理解这个语言是如何处理 null 的，为什么我们要这样设计它，以及如何写出习惯的，现代的，空值安全的 Dart。(Spoiler alert: 它最终会出人意料地接近你今天写 Dart 的方式。)\n语言处理空值引用错误的各种方法各有优缺点。这些原则指导了我们的选择。\n 代码默认情况下应该是安全的。如果你写了新的 Dart 代码，并且没有使用任何显式的不安全特性，它永远不会在运行时抛出一个空值引用错误。所有可能的空值引用错误都会被静态地捕获。如果你想将一些检查推迟到运行时以获得更大的灵活性，你可以，但你必须通过使用一些在代码中文本可见的功能来选择。  换句话说，我们并不是给你一件救生衣，让你每次出海时都记得穿上它。相反，我们给你一艘不沉的船。除非你跳海，否则你会保持干燥。\n 空值安全代码应该很容易写。大多数现有的 Dart 代码都是动态正确的，不会出现空值引用错误。你喜欢你的 Dart 程序现在的样子，我们希望你能够继续这样写代码。安全性不应该要求牺牲可用性，对类型检查器进行忏悔，或者必须显著改变你的思维方式。  由此产生的空安全代码应该是完全健全的。在静态检查的上下文中，\u0026ldquo;健全\u0026quot;对不同的人意味着不同的东西。对我们来说，在空值安全的上下文中，这意味着如果一个表达式的静态类型不允许空，那么该表达式的任何可能的执行都不可能评估为空。语言主要通过静态检查来提供这种保证，但也可以涉及一些运行时检查。虽然，注意第一个原则：任何发生这些运行时检查的地方都将是你的选择）。\n健全性对于用户的信心很重要。一艘大部分时间都保持漂浮的船，并不是你热衷于在公海上冒险的船。但它对我们无畏的编译器黑客来说也很重要。当语言对程序的语义属性做出硬性保证时，意味着编译器可以执行假设这些属性为真的优化。当涉及到 null 时，这意味着我们可以生成更小的代码，消除不需要的 null 检查，以及更快的代码，不需要在调用方法之前验证接收器是非 null。\n有一个注意事项：我们只保证完全空值安全的 Dart 程序的健全性。Dart 支持包含新的空值安全代码和旧的遗留代码混合的程序。在这些混合版本的程序中，仍然可能发生空值引用错误。在一个混合版本的程序中，你可以在空值安全的部分获得所有的静态安全优势，但是在整个应用程序是空安全的之前，你不能获得完整的运行时健全性。\n请注意，消除 null 并不是一个目标。null 没有什么不好。相反，能够表示一个值的缺失真的很有用。直接在语言中构建对特殊的 \u0026ldquo;absence\u0026rdquo; 值的支持，使得处理缺失的工作变得灵活和可用。它是可选参数、方便的 ?. null-aware 操作符和默认初始化的基础。并不是 null 不好，而是让 null 去了你想不到的地方才会引起问题。\n因此，有了 null 安全，我们的目标是让你控制和洞察 null 可以流经你的程序的地方，并确定它不能流到某个地方，从而导致崩溃。\n类型系统中的空值 空值安全始于静态类型系统，因为其他一切都建立在静态类型系统之上。你的 Dart 程序中有一个完整的类型宇宙：像 int 和 String 这样的基元类型，像 List 这样的集合类型，以及所有你和你使用的包所定义的类和类型。在 null 安全之前，静态类型系统允许值 null 流入任何这些类型的表达式中。\n在类型理论的行话中，Null 类型被视为所有类型的一个子类型。\n在某些表达式上允许的操作集 - getters、setters、methods 和 operator - 由其类型定义。如果类型是 List，你可以对它调用. add() 或 []。如果它是 int，你可以调用 +。但是空值并没有定义任何这些方法。允许 null 流入其他类型的表达式意味着任何这些操作都可能失败。这就是 null 引用错误的真正症结所在 - 每一次失败都来自于试图在 null 上查找一个它没有的方法或属性。\n非可空类型和可空类型 Null 安全通过改变类型层次结构，从根本上消除了这个问题。Null 类型仍然存在，但它不再是所有类型的子类型。取而代之的是，类型层次结构是这样的。\n由于 Null 不再是子类型, 除了特殊的 Null 类之外，没有任何类型允许值为 null。我们已经将所有类型默认为不可空值。如果你有一个 String 类型的变量，它将总是包含一个字符串。在那里，我们已经修复了所有的空值引用错误。\n如果我们认为 null 根本没有用，我们可以在这里停止。但是 null 是有用的，所以我们仍然需要一种方法来处理它。可选参数就是一个很好的说明性案例。考虑一下这个 null 安全的 Dart 代码。\n// Using null safety: makeCoffee(String coffee, [String? dairy]) { if (dairy != null) { print(\u0026#39;$coffeewith $dairy\u0026#39;); } else { print(\u0026#39;Black $coffee\u0026#39;); } } 在这里，我们希望允许 dairy 参数接受任何字符串，或者接受 null 值，而不接受其他任何值。为了表达这一点，我们在底层基类型 String 的结尾处加上 ?。 从本质上讲，这就是定义了一个底层类型和 Null 类型的联合。所以，如果 Dart 有全功能的联合类型，那么 String? 将是 String|Null 的简写。\n使用可空类型 如果你有一个可空类型的表达式，你可以用这个结果做什么？由于我们的原则默认是安全的，所以答案是不多，我们不能让你对它调用底层类型的方法，因为如果值是空的，这些方法可能会失败。\n// Hypothetical unsound null safety: bad(String? maybeString) { print(maybeString.length); } main() { bad(null); } 如果我们让你运行它，就会崩溃。我们唯一可以安全地让你访问的方法和属性是由底层类型和 Null 类定义的。那就是 toString()、== 和 hashCode。因此，你可以使用可空类型作为映射键，将它们存储在集合中，将它们与其他值进行比较，并在字符串插值中使用它们，但仅此而已。\n它们如何与非可空类型交互？将一个不可空值类型传递给期望空值类型的东西总是安全的。如果一个函数接受 String 吗，那么传递一个 String 是允许的，因为它不会引起任何问题。我们通过使每个可空类型成为其底层类型的超类型来建立模型。你也可以安全地把 null 传给期望是可空类型的东西，所以 Null 也是每个可空类型的一个子类型。\n但是反过来说，把一个可空类型传递给期待底层非可空类型的东西是不安全的。期待一个 String 的代码可以在值上调用 String 方法。如果你把一个 String? 传给它，null 可能会流进来，这可能会失败。\n// Hypothetical unsound null safety: requireStringNotNull(String definitelyString) { print(definitelyString.length); } main() { String? maybeString = null; // Or not!  requireStringNotNull(maybeString); } 这个程序不安全，我们不应该允许它。然而，Dart 一直有这个东西，叫做隐式下传。例如，如果你把一个 Object 类型的值传递给一个期望为 String 的函数，类型检查器就会允许它。\n// Without null safety: requireStringNotObject(String definitelyString) { print(definitelyString.length); } main() { Object maybeString = \u0026#39;it is\u0026#39;; requireStringNotObject(maybeString); } 为了保持合理性，编译器在 requireStringNotObject() 的参数上默默地插入了一个 as String cast。这个转码可能会在运行时失败并抛出一个异常，但在编译时，Dart 说这是确定的。由于非可空类型被建模为可空类型的子类型，所以隐式下投会让你把一个 String? 传递给期待一个 String 的东西。允许这样做会违反我们默认安全的目标。所以，有了空值安全，我们就完全取消了隐式下传。\n这使得对 requireStringNotNull() 的调用会产生一个编译错误，这是你想要的。但这也意味着所有的隐式下包都会成为编译错误，包括对 requireStringNotObject() 的调用。你必须自己添加显式下传。\n// Using null safety: requireStringNotObject(String definitelyString) { print(definitelyString.length); } main() { Object maybeString = \u0026#39;it is\u0026#39;; requireStringNotObject(maybeString as String); } 我们认为这总体上是一个好的变化。在我们的印象中，大多数用户从来都不喜欢隐性降频。尤其是，你可能之前就被这个烧过。\n// Without null safety: List\u0026lt;int\u0026gt; filterEvens(List\u0026lt;int\u0026gt; ints) { return ints.where((n) =\u0026gt; n.isEven); } 发现错误了吗？.where() 方法是懒惰的，所以它返回的是一个 Iterable，而不是 List。这个程序在编译时，当它试图将 Iterable 投射到 filterEvens 声明它返回的 List 类型时，会在运行时抛出一个异常。移除隐式下投后，这就变成了一个编译错误。\n我们说到哪里了？对了，好吧，就好像我们把你程序中的类型宇宙分成了两半。\n有一个非空值类型的区域。这些类型让你可以访问所有有趣的方法，但永远不能包含 null。然后是一个由所有相应的可空类型组成的平行家族。这些类型允许 null，但你不能对它们做太多事情。我们让值从非可空侧流向可空侧，因为这样做是安全的，但不是其他方向。\n这样看来，可空类型基本上是无用的。它们没有方法，你无法摆脱它们。别担心，我们有一整套的功能来帮助你把值从可空型的一半移到另一边，我们很快就会讲到。\n顶部和底部 这一部分有点深奥。你可以跳过它，除了最后的两个子弹，除非你对类型系统感兴趣。想象一下，在你的程序中，所有的类型之间都有边缘，它们是彼此的子类型和超类型。如果你把它画出来，就像这个文档中的图一样，它将形成一个巨大的有向图，上面有像 Object 这样的超类型，下面有像你自己的类型这样的叶子类。\n如果这个有向图到了顶部，有一个单一的类型是超类型（直接或间接），这个类型就被称为顶部类型。同样，如果在那个底部有一个奇怪的类型是每个类型的子类型，你就有一个底部类型。在这种情况下，你的有向图是一个网格）。\n如果你的类型系统有顶层和底层类型，那是很方便的，因为这意味着像最小上界这样的类型级操作（类型推理使用它来根据一个条件表达式的两个分支的类型找出它的类型）总是可以产生一个类型。在 null 安全之前，Object 是 Dart 的顶层类型，Null 是其底层类型。\n由于现在 Object 是不可空的，所以它不再是顶类型。Null 不是它的子类型。Dart 没有命名的顶类型。如果你需要一个顶类型，你要 Object? 同样，Null 也不再是底层类型。如果是的话，一切都还会是 null。相反，我们添加了一个新的底层类型，名为 Never。\n在实践中，这意味着。\n如果你想表明你允许任何类型的值，就用 Object? 而不是 Object. 事实上，使用 Object 就变得很不寻常了，因为该类型意味着 \u0026ldquo;可能是任何可能的值，除了这个奇怪的禁止值 null\u0026rdquo;。\n在极少数情况下，你需要一个底层类型，用 Never 代替 Null。如果你不知道是否需要底层类型，你可能不需要。\n确保正确性 我们将类型的宇宙分为可空和不可空的两半。为了保持健全性和我们的原则，即除非你要求，否则你永远不会在运行时得到一个 null 引用错误，我们需要保证 null 永远不会出现在非 nullable 端的任何类型中。\n摆脱隐式下传，去掉 Null 这个底层类型，涵盖了类型在程序中跨赋值流转和在函数调用中从参数流转到参数的所有主要地方。剩下的主要的 null 可以潜入的地方是当一个变量第一次出现和离开一个函数的时候。所以会出现一些额外的编译错误。\n无效返回 如果一个函数的返回类型是非空的，那么通过该函数的每一条路径都必须到达一个返回值的返回语句。在 null 安全之前，Dart 对于缺失返回的情况非常宽松。比如说\n// Without null safety: String missingReturn() { // No return. } 如果你分析这个，你就会得到一个温柔的提示，也许你忘了一个返回，但如果没有，也没什么大不了的。这是因为如果执行到了函数体的末端，那么 Dart 就会隐式返回 null。由于每个类型都是可空的，所以从技术上讲，这个函数是安全的，尽管它可能不是你想要的。\n对于健全的非可空类型，这个程序是完全错误的，不安全的。在空值安全下，如果一个具有非可空值返回类型的函数不能可靠地返回一个值，你会得到一个编译错误。所谓 \u0026ldquo;可靠\u0026rdquo;，是指语言分析了所有通过函数的控制流路径。只要它们都能返回一些东西，它就满足了。这个分析是相当聪明的，所以即使这个函数也是可以的。\n// Using null safety: String alwaysReturns(int n) { if (n == 0) { return \u0026#39;zero\u0026#39;; } else if (n \u0026lt; 0) { throw ArgumentError(\u0026#39;Negative values not allowed.\u0026#39;); } else { if (n \u0026gt; 1000) { return \u0026#39;big\u0026#39;; } else { return n.toString(); } } } 我们将在下一节更深入地研究新的流程分析。\n未初始化的变量 当你声明一个变量时，如果你没有给它一个显式的初始化器，Dart 默认用 null 初始化变量。这很方便，但如果变量的类型是不可空的，显然是完全不安全的。所以我们必须对不可空值的变量进行严格的规定。\n 顶级变量和静态字段的声明必须有一个初始化器。由于这些变量可以在程序中的任何地方被访问和赋值，编译器不可能保证变量在被使用之前就已经被赋予了一个值。唯一安全的选择是要求声明本身有一个初始化表达式，产生一个正确类型的值。  // Using null safety: int topLevel = 0; class SomeClass { static int staticField = 0; }  实例字段必须在声明时有一个初始化器，使用初始化形式，或者在构造函数的初始化列表中初始化。这有很多行话。下面是例子。  // Using null safety: class SomeClass { int atDeclaration = 0; int initializingFormal; int initializationList; SomeClass(this.initializingFormal) : initializationList = 0; } 换句话说，只要字段在到达构造函数体之前就有一个值，就可以了。\n 局部变量是最灵活的情况。一个不可空的局部变量不需要有一个初始化器。这完全可以。  // Using null safety: int tracingFibonacci(int n) { int result; if (n \u0026lt; 2) { result = n; } else { result = tracingFibonacci(n - 2) + tracingFibonacci(n - 1); } print(result); return result; } 规则只是局部变量在使用前必须肯定分配。我们也可以依靠我所提到的新流分析来实现。只要每个通往变量使用的路径都先初始化它，使用就可以了。\n 可选参数必须有一个默认值。如果你没有为一个可选的位置参数或命名参数传递一个参数，那么语言就会用默认值来填充它。如果你不指定默认值，那么默认的默认值就是 null，如果参数的类型是不可空的，那就飞不起来了。  所以，如果你想让一个参数是可选的，你需要让它变成 null，或者指定一个有效的非空的默认值。\n这些限制听起来很繁琐，但在实践中并不太坏。它们与现有的围绕最终变量的限制非常相似，而且你可能已经使用这些限制多年，甚至没有真正注意到。另外，请记住，这些限制只适用于不可空值的变量。你总是可以让类型可空，然后让默认初始化为空。\n即便如此，这些规则也会造成摩擦。幸运的是，我们有一套新的语言特性来润滑最常见的模式，在这些新的限制下，你的速度变慢了。不过，首先，是时候谈谈流分析了。\n流程分析 控制流分析在编译器中已经存在多年。它大多被用户隐藏起来，在编译器优化过程中使用，但一些新的语言已经开始使用同样的技术来实现可见的语言功能。Dart 已经在类型推广的形式下有了一抹流分析。\n// With (or without) null safety: bool isEmptyList(Object object) { if (object is List) { return object.isEmpty; // \u0026lt;-- OK!  } else { return false; } } 请注意，在标记行中，我们可以在对象上调用 isEmpty。该方法定义在 List 上，而不是 Object 上。这是因为类型检查器会查看程序中所有的 is 表达式和控制流路径。如果某个控制流构造体只有在变量上的某个 is 表达式为真时才会执行，那么在这个构造体里面，变量的类型就会被 \u0026ldquo;推广 \u0026ldquo;到测试类型。\n在这里的例子中，if 语句的 then 分支只有在 object 实际包含一个 list 时才会运行。因此，Dart 将对象推广到 List 类型，而不是其声明的 Object 类型。这是一个方便的功能，但它是相当有限的。在 null 安全之前，下面的功能相同的程序无法工作。\n// Without null safety: bool isEmptyList(Object object) { if (object is! List) return false; return object.isEmpty; // \u0026lt;-- Error! } 同样，只有当对象包含一个 list 时，才能达到.isEmpty 的调用，所以这个程序是动态正确的。但是类型推广规则不够聪明，没有看到返回语句意味着只有当对象是一个 list 时才能到达第二个语句。\n对于空安全，我们把这种有限的分析方法，在几个方面做得更加强大。\n可到达性分析 首先，我们修复了长期以来的抱怨，即类型推广对早期返回和其他无法到达的代码路径并不聪明。当分析一个函数时，它现在会考虑到返回、break、抛出以及函数中任何其他可能提前终止执行的方式。在空安全下，这个函数。\n// Using null safety: bool isEmptyList(Object object) { if (object is! List) return false; return object.isEmpty; } 现在是完全有效的。因为 if 语句会在对象不是 List 时退出函数，所以 Dart 会在第二条语句中促进对象成为 List。这是一个非常好的改进，它帮助了很多 Dart 代码，甚至是与 nullability 无关的东西。\nNever - 不可达到的代码 您也可以对这种可达到性分析进行编程。新的底类型 Never 没有值。(什么样的值同时是 String、bool 和 int 呢？)那么一个表达式具有 Never 类型意味着什么呢？意味着该表达式永远不能成功完成评估。它必须抛出一个异常，中止，或者以其他方式确保期望表达式结果的周围代码永远不会运行。\n事实上，根据语言的规定，抛出表达式的静态类型是 Never。Never 类型在核心库中被声明，你可以将其作为类型注释。也许你有一个帮助函数，以方便抛出某种异常。\n// Using null safety: Never wrongType(String type, Object value) { throw ArgumentError(\u0026#39;Expected $type, but was ${value.runtimeType}.\u0026#39;); } 你可以这样使用。\n// Using null safety: class Point { final double x, y; bool operator ==(Object other) { if (other is! Point) wrongType(\u0026#39;Point\u0026#39;, other); return x == other.x \u0026amp;\u0026amp; y == other.y; } // Constructor and hashCode... } 这个程序分析起来没有错误。请注意，==方法的最后一行访问了其他的.x 和.y。尽管函数没有任何返回或抛出，但它已经被提升为 Point。控制流分析知道，wrongType()的声明类型是 Never，这意味着 if 语句的 then 分支必须以某种方式中止。由于第二条语句只有在 other 是 Point 时才能到达，所以 Dart 提倡使用它。\n换句话说，在你自己的 API 中使用 Never 可以让你扩展 Dart 的可达性分析。\n确定赋值分析 这个我简单的提到了局部变量。Dart 需要确保一个不可空的局部变量在读取之前总是被初始化。我们使用确定赋值分析来尽可能灵活地处理这个问题。该语言分析每个函数体，并通过所有控制流路径跟踪局部变量和参数的赋值。只要在每一条到达某个使用变量的路径上都对变量进行了赋值，就认为该变量已经初始化。这让你可以在没有初始化器的情况下声明一个变量，然后在之后使用复杂的控制流对其进行初始化，即使该变量具有不可空值的类型。\n我们还使用确定赋值分析来使最终变量更加灵活。在空安全之前，如果你需要以任何一种有趣的方式对局部变量进行初始化，那么使用 final 是很困难的。\n// Using null safety: int tracingFibonacci(int n) { final int result; if (n \u0026lt; 2) { result = n; } else { result = tracingFibonacci(n - 2) + tracingFibonacci(n - 1); } print(result); return result; } 这将是一个错误，因为结果变量是 final，但没有初始化器。在空安全下进行更智能的流分析，这个程序是没有问题的。分析可以知道，在每条控制流路径上，result 肯定是精确地初始化了一次，所以标记变量 final 的约束条件是满足的。\n对空检查的类型提升 更加智能的流程分析帮助了很多 Dart 代码，甚至是与空性无关的代码。但我们现在做这些改变并不是偶然的。我们把类型分为可空性和非可空性集。如果你有一个可空类型的值，你就不能真正对它做任何有用的事情。在值为空的情况下，这种限制是好的。它可以防止你崩溃。\n但如果值不是空的，能够把它移到非可空的一面，这样你就可以对它调用方法，这将是一件好事。对于局部变量和参数来说，流程分析是实现这一点的主要方法之一。我们已经扩展了类型提升，还可以查看 == null 和 != null 表达式。\n如果你检查一个可空类型的变量，看看它是不是空的，Dart 就会把这个变量推广到底层的非可空类型。\n// Using null safety: String makeCommand(String executable, [List\u0026lt;String\u0026gt;? arguments]) { var result = executable; if (arguments != null) { result += \u0026#39; \u0026#39; + arguments.join(\u0026#39; \u0026#39;); } } 这里，arguments 有一个可空的类型。通常，这禁止你对它调用.join()。但是由于我们在 if 语句中对该调用进行了保护，检查以确保该值不是空的，所以 Dart 将其从 List\u0026lt;String\u0026gt; 提升为 List\u0026lt;String\u0026gt;，并允许你在其上调用方法或将其传递给期望非空值列表的函数。\n这听起来是一件相当小的事情，但这种基于流程的对 null 检查的推广是使大多数现有 Dart 代码在 null 安全下工作的原因。大多数 Dart 代码都是动态正确的，并且确实通过在调用方法之前检查空值来避免抛出空值引用错误。新的关于 null 检查的流程分析将这种动态正确性变成了可证明的静态正确性。\n当然，它也能配合我们对可到达性的更智能的分析。上面的函数也可以写成一样。\n// Using null safety: String makeCommand(String executable, [List\u0026lt;String\u0026gt;? arguments]) { var result = executable; if (arguments == null) return result; return result + \u0026#39; \u0026#39; + arguments.join(\u0026#39; \u0026#39;); } 语言也比较聪明，什么样的表达方式会引起推广。显式 == null 或 != null 当然可以。但是，使用 as、assignments 或我们即将提到的后缀 ! 操作符的显式投掷也会导致提升。总的目标是，如果代码是动态正确的，而且静态地找出这一点是合理的，分析应该足够聪明。\n不必要的代码警告 拥有更智能的可达性分析，并知道 null 可能流经你的程序的地方，有助于确保你添加代码来处理 null。但我们也可以用同样的分析来检测你不需要的代码。在 null 安全之前，如果你写了这样的东西。\n// Using null safety: String checkList(List list) { if (list?.isEmpty) { return \u0026#39;Got nothing\u0026#39;; } return \u0026#39;Got something\u0026#39;; } Dart 没有办法知道那个 null-aware? 操作符是否有用。它只知道，你可以把 null 传给函数。但是在 null safe Dart 中，如果你用现在不可空的 List 类型注释了那个函数，那么它知道 list 永远不会是 null。这就意味着这个 ?. 永远不会做任何有用的事情，你可以而且应该只使用 . 类型。\n为了帮助你简化你的代码，我们已经为这样的不必要的代码添加了警告，现在静态分析已经精确到可以检测到它了。在一个不可空类型上使用一个 null-aware 操作符，甚至是像== null 或 != null 这样的检查，都会被报告为一个警告。\n当然，这也与非空类型的晋升有关。一旦一个变量被推广到一个不可空类型，如果你再次对它进行多余的 null 检查，你会得到一个警告。\n// Using null safety: checkList(List? list) { if (list == null) return \u0026#39;No list\u0026#39;; if (list?.isEmpty) { return \u0026#39;Empty list\u0026#39;; } return \u0026#39;Got something\u0026#39;; } 你在这里得到了一个警告，因为在它执行的时候，我们已经知道 list 不能为空。这些警告的目的不仅仅是清理无意义的代码。通过删除不需要的 null 检查，我们确保剩下的有意义的检查能够脱颖而出。我们希望您能够查看您的代码，并看到 null 可以在哪里流动。\n使用可空类型 我们现在已经把 null 收进了可空类型的集合。通过流程分析，我们可以安全地让一些非空值越过栅栏跳到非可空类型的一边，在那里我们可以使用它们。这是一个很大的进步，但如果我们在这里停下来，所产生的系统仍然是痛苦的限制。流程分析只对局部和参数有帮助。\n为了尽量恢复 Dart 在 null 安全之前的灵活性\u0026ndash;并且在某些地方超越它，我们有一些其他的新特性。\n更加智能的空感知方法 Dart 的 null aware 操作符 ?. 比 null safety 更早。运行时语义规定，如果接收者为空，那么右侧的属性访问将被跳过，表达式评价为空。\n// Without null safety: String notAString = null; print(notAString?.length); 这不是抛出一个异常，而是打印 \u0026ldquo;null\u0026rdquo;。null-aware 操作符是一个很好的工具，它使可空类型在 Dart 中可用。虽然我们不能让你在可空类型上调用方法，但我们可以也确实让你在它们上使用 null-aware 操作符。空值后安全版本的程序是。\n// Using null safety: String? notAString = null; print(notAString?.length); 它的工作原理和之前的一样。\n然而，如果你曾经在 Dart 中使用过 null-aware 操作符，当你在方法链中使用它们时，你可能会遇到一个烦恼。比方说，你想看看一个可能不存在的字符串的长度是否是一个偶数（不是一个特别现实的问题，我知道，但请和我一起工作）。\n// Using null safety: String? notAString = null; print(notAString?.length.isEven); 即使这个程序使用了?，但在运行时还是会抛出一个异常。问题在于.isEven 表达式的接收者是它左边的整个 notAString?.length 表达式的结果。该表达式的值为 null，所以我们在尝试调用.isEven 时得到一个空值引用错误。如果你曾经在 Dart 中使用过?.，你可能学到了一个苦涩的方法，那就是在你使用过一次之后，你必须将 null-aware 操作符应用到链中的每个属性或方法。\nString? notAString = null; print(notAString?.length?.isEven); 这很烦人，但更糟糕的是，它掩盖了重要信息。考虑一下：\n// Using null safety: showGizmo(Thing? thing) { print(thing?.doohickey?.gizmo); } 我有个问题要问你。Thing 上的 doohickey getter 可以返回 null 吗？看起来可以，因为你在结果上使用了?。但可能只是第二个?.只是为了处理 thing 为 null 的情况，而不是 doohickey 的结果。你无法判断。\n为了解决这个问题，我们借鉴了 C#设计相同功能的一个聪明的想法。当你在一个方法链中使用一个 null-aware 操作符时，如果接收者评估为 null，那么整个方法链的其余部分都会被短路并跳过。这意味着如果 doohickey 有一个不可空的返回类型，那么你可以也应该写。\n// Using null safety: showGizmo(Thing? thing) { print(thing?.doohickey.gizmo); } 事实上，如果你不这样做，你会在第二个?上得到一个不必要的代码警告。如果你看到这样的代码。\n// Using null safety: showGizmo(Thing? thing) { print(thing?.doohickey?.gizmo); } 那么你就可以肯定地知道，这意味着 doohickey 本身有一个可空的返回类型。每一个?对应一个可以导致 null 流入方法链的唯一路径。这使得方法链中的 null-aware 操作符既更简洁又更精确。\n在这时，我们又增加了几个其他的空感知操作符。\n// Using null safety:  // Null-aware cascade: receiver?..method(); // Null-aware index operator: receiver?[index]; 没有一个 null-aware 函数调用操作符，但你可以写。\n// Allowed with or without null safety: function?.call(arg1, arg2); Null 断言运算符 使用流式分析将一个可空型变量移到非可空型变量的伟大之处在于，这样做被证明是安全的。你可以在之前的可空型变量上调用方法，而不会放弃非可空型的任何安全或性能。\n但是，可空类型的许多有效用途无法以取悦静态分析的方式证明其安全性。比如说\n// Using null safety, incorrectly: class HttpResponse { final int code; final String? error; HttpResponse.ok() : code = 200; HttpResponse.notFound() : code = 404, error = \u0026#39;Not found\u0026#39;; String toString() { if (code == 200) return \u0026#39;OK\u0026#39;; return \u0026#39;ERROR $code${error.toUpperCase()}\u0026#39;; } } 如果你尝试运行这个，你在调用 toUpperCase()时得到一个编译错误。错误字段是可空的，因为它在成功的响应中不会有一个值。我们通过检查类可以看到，当错误信息为空时，我们永远不会访问它。但这需要理解代码的值和错误的可空性之间的关系。类型检查器是看不到这种联系的。\n换句话说，我们这些代码的人类维护者知道错误在我们使用它的时候不会是空的，我们需要一种方法来断言这一点。通常情况下，你使用 as cast 来断言类型，在这里你也可以做同样的事情。\n// Using null safety: String toString() { if (code == 200) return \u0026#39;OK\u0026#39;; return \u0026#39;ERROR $code${(error as String).toUpperCase()}\u0026#39;; } 如果投递失败，将错误地投递到不可空的 String 类型，会抛出一个运行时异常。否则，它将为我们提供一个非空值字符串，我们可以在其上调用方法。\n\u0026ldquo;投弃可空性 \u0026ldquo;经常出现，以至于我们有了一种新的速记语法。一个后缀的感叹号 (!) 将左边的表达式并将其投射到其底层的不可空类型上。所以上面的函数相当于\n// Using null safety: String toString() { if (code == 200) return \u0026#39;OK\u0026#39;; return \u0026#39;ERROR $code${error!.toUpperCase()}\u0026#39;; } 当底层类型是啰嗦的时候，这个单字符的 \u0026ldquo;bang 操作符 \u0026ldquo;特别方便。如果仅仅为了从某个类型中投弃一个单一的?，而不得不写成 Map\u0026lt;TransactionProviderFactory, List\u0026lt;Set\u0026gt;，那就真的很烦人了。\n当然，就像任何投射一样，使用 !的同时也会损失静态安全。必须在运行时检查投射以保持合理性，而且可能会失败并抛出一个异常。但是你可以控制这些转码被插入的位置，你可以通过查看你的代码随时看到它们。\nLate 变量 类型检查器不能证明代码安全的最常见的地方是围绕顶层变量和字段。下面是一个例子。\n// Using null safety, incorrectly: class Coffee { String _temperature; void heat() { _temperature = \u0026#39;hot\u0026#39;; } void chill() { _temperature = \u0026#39;iced\u0026#39;; } String serve() =\u0026gt; _temperature + \u0026#39; coffee\u0026#39;; } main() { var coffee = Coffee(); coffee.heat(); coffee.serve(); } 这里，heat()方法是在服务()之前调用的。这意味着 _temperature 在使用之前会被初始化为一个非空值。但是静态分析来确定这一点是不可行的。(对于像这个微不足道的例子来说可能是可行的，但是一般情况下，试图跟踪一个类的每一个实例的状态是难以解决的。)。\n因为类型检查器不能分析字段和顶层变量的用途，它有一个保守的规则，即不可空值字段必须在声明时初始化（或者在实例字段的构造函数初始化列表中）。所以 Dart 在这个类上报告了一个编译错误。\n你可以通过使字段可空，然后在用途上使用 null 断言操作符来修复这个错误。\n// Using null safety: class Coffee { String? _temperature; void heat() { _temperature = \u0026#39;hot\u0026#39;; } void chill() { _temperature = \u0026#39;iced\u0026#39;; } String serve() =\u0026gt; _temperature! + \u0026#39; coffee\u0026#39;; } 这样做很好，但它给类的维护者发出了一个混乱的信号。但它给类的维护者发出了一个混乱的信号。通过标记 _temperature 为 nullable，你暗示 null 对于该字段来说是一个有用的、有意义的值。但这不是我们的目的。_temperature 字段永远不应该在其 null 状态下被观察到。\n为了处理常见的延迟初始化的状态模式，我们添加了一个新的修饰符 late。你可以像这样使用它。\n// Using null safety: class Coffee { late String _temperature; void heat() { _temperature = \u0026#39;hot\u0026#39;; } void chill() { _temperature = \u0026#39;iced\u0026#39;; } String serve() =\u0026gt; _temperature + \u0026#39; coffee\u0026#39;; } 请注意，_temperature 字段的类型不可空，但没有初始化。另外，在使用它的时候也没有明确的空断言。有一些模型可以应用到迟到的语义中，但我是这样想的。晚期修饰符的意思是 \u0026ldquo;在运行时执行这个变量的约束，而不是在编译时执行\u0026rdquo;。这几乎就像 \u0026ldquo;late \u0026ldquo;这个词描述的是什么时候执行变量的保证。\n在这种情况下，由于该字段还没有确定初始化，所以每次读取该字段时，都会插入一个运行时检查，以确保它已经被分配了一个值。如果没有，就会抛出一个异常。给变量类型为 String 意味着 \u0026ldquo;你应该永远不会看到我的值不是字符串\u0026rdquo;，而后期修饰符意味着 \u0026ldquo;在运行时验证\u0026rdquo;。\n在某些方面，迟到修饰符比使用? \u0026ldquo;神奇\u0026rdquo;，因为对字段的任何使用都可能失败，而且在使用现场没有任何文字可见。但你确实必须在声明处写晚期才能得到这种行为，我们的信念是，在那里看到修饰符已经足够明确，这一点是可以维护的。\n作为回报，你可以得到比使用可空类型更好的静态安全。因为现在字段的类型是非可空的，所以试图将 null 或可空的 String 分配给字段是一个编译错误。晚期修饰符可以让你推迟初始化，但仍然禁止你把它当作一个可空变量来处理。\n惰性初始化 late 修饰符也有一些其他的特殊能力。这可能看起来很矛盾，但你可以在一个有初始化器的字段上使用 late。\n// Using null safety: class Weather { late int _temperature = _readThermometer(); } 当你这样做的时候，初始化器会变得懒惰。它不是在实例构造完成后立即运行，而是在第一次访问该字段时就延迟并缓慢运行。换句话说，它的工作方式与顶层变量或静态字段的初始化器完全一样。当初始化表达式的成本很高且可能不需要时，这可以很方便。\n当你在实例字段上使用后期，懒惰地运行初始化器会给你一个额外的奖励。通常实例字段初始化器不能访问这个，因为在所有字段初始化器完成之前，你不能访问新对象。但有了迟来的字段，就不再是这样了，所以你可以访问这个，调用方法，或者访问实例上的字段。\nlate final 变量 你也可以把 late 和 final 结合起来。\n// Using null safety: class Coffee { late final String _temperature; void heat() { _temperature = \u0026#39;hot\u0026#39;; } void chill() { _temperature = \u0026#39;iced\u0026#39;; } String serve() =\u0026gt; _temperature + \u0026#39; coffee\u0026#39;; } 与普通的 final 字段不同，您不必在声明中或在构造函数初始化列表中初始化该字段。你可以在以后的运行时对它进行赋值。但是你只能对它赋值一次，而且这个事实会在运行时被检查。如果你试图对它进行不止一次的赋值，就像这里同时调用 heat() 和 chill() 一样，第二次赋值就会抛出一个异常。这是对最终被初始化且之后不可改变的状态进行建模的好方法。\n换句话说，新的 late 修饰符结合 Dart 的其他变量修饰符，覆盖了 Kotlin 中 lateinit 和 Swift 中 lazy 的大部分功能空间。如果你想在局部变量上使用它，你甚至可以在局部变量上使用它，如果你想进行一点局部的懒惰评估。\n所需的命名参数 为了保证你永远不会看到一个具有不可空类型的空参数，类型检查器要求所有可选参数要么具有可空类型，要么具有默认值。如果你想让一个命名的参数有一个可空的类型而没有默认值呢？那就意味着你想要求调用者总是传递它。换句话说，你想要一个命名的参数，但不是可选的。\n我用这个表直观地展示了 Dart 参数的各种类型。\n mandatory optional +------------+------------+ positional | f(int x) | f([int x]) | +------------+------------+ named | ??? | f({int x}) | +------------+------------+ 由于不清楚的原因，Dart 长期以来一直支持这个表的三个角，但把 named+mandatory 的组合空了。在空安全的情况下，我们填补了这一点。你在参数前放上 required，就可以声明一个必要的命名参数。\n// Using null safety: function({int? a, required int? b, int? c, required int? d}) {} 在这里，所有的参数都必须以名字传递。参数 a 和 c 是可选的，可以省略。参数 b 和 d 是必填的，必须传递。注意，要求性与可空性无关。可空类型的命名参数可以是必需的，不可空类型的命名参数可以是可选的（如果它们有一个默认值）。\n这是另一个我认为无论空值安全性如何都能让 Dart 变得更好的特性之一。它只是让我觉得这个语言更加完整。\n抽象字段 Dart 的一个特点是它坚持了一个叫做统一访问原则的东西。用人话说就是字段与 getter 和 setter 是没有区别的。在某个 Dart 类中的 \u0026ldquo;属性 \u0026ldquo;是计算还是存储，这是一个实现细节。正因为如此，在使用抽象类定义接口的时候，一般都会使用字段声明。\nabstract class Cup { Beverage contents; } 其目的是让用户只实现该类，而不要扩展它。字段语法只是写一个 getter/setter 对的较短方式。\nabstract class Cup { Beverage get contents; set contents(Beverage); } 但 Dart 不知道这个类永远不会被用作具体类型。它把那个内容声明看作是一个真实的字段。而且，不幸的是，这个字段是不可空的，也没有初始化器，所以你得到一个编译错误。\n一个解决方法是使用显式的抽象 getter/setter 声明，就像第二个例子中那样。但这有点啰嗦，所以在 null 安全的情况下，我们还增加了对显式抽象字段声明的支持。\nabstract class Cup { abstract Beverage contents; } 这和第二个例子的行为完全一样。它只是用给定的名称和类型声明了一个抽象的 getter 和 setter。\n使用可空字段 这些新特性涵盖了许多常见的模式，并且在大多数时间里，让处理 null 的工作变得相当轻松。但即便如此，我们的经验是，可空字段仍然是困难的。在你能让字段迟到且不可空的情况下，你是金子般的存在。但在很多情况下，你需要检查字段是否有值，这就需要让它可空，这样你就可以观察到空。\n你可能会期望这样做是可行的。\n// Using null safety, incorrectly: class Coffee { String? _temperature; void heat() { _temperature = \u0026#39;hot\u0026#39;; } void chill() { _temperature = \u0026#39;iced\u0026#39;; } void checkTemp() { if (_temperature != null) { print(\u0026#39;Ready to serve \u0026#39; + _temperature + \u0026#39;!\u0026#39;); } } String serve() =\u0026gt; _temperature! + \u0026#39; coffee\u0026#39;; } 在 checkTemp()里面，我们检查 _temperature 是否为空。如果不是，我们访问它，并最终调用+。不幸的是，这是不允许的。基于流式的类型推广并不适用于字段，因为静态分析无法证明字段的值在你检查 null 和你使用它的点之间没有变化。考虑到在病理情况下，字段本身可能会被子类中的 getter 覆盖，在第二次调用时返回 null）。\n所以，既然我们关心健全性，那么字段就不会推广，上面的方法就不会编译。这是很烦人的。在像这里这样简单的情况下，你最好的选择是在字段的使用上打上一个! 这似乎是多余的，但这多少是 Dart 如今的行为方式。\n另一个有用的模式是先把字段复制到一个本地变量中，然后再使用它。\n// Using null safety: void checkTemp() { var temperature = _temperature; if (temperature != null) { print(\u0026#39;Ready to serve \u0026#39; + temperature + \u0026#39;!\u0026#39;); } } 由于类型推广确实适用于本地人，所以现在可以正常使用。如果你需要改变值，只要记得存储回字段，而不仅仅是本地。\n无效性和属性 像大多数现代静态类型的语言一样，Dart 有通用类和通用方法。它们与可空性的交互方式有一些看似反直觉的地方，但一旦你想清楚了其中的含义，就会明白。首先是 \u0026ldquo;这个类型是可空性的吗？\u0026ldquo;不再是一个简单的是或否的问题。考虑一下。\n// Using null safety: class Box\u0026lt;T\u0026gt; { final T object; Box(this.object); } main() { Box\u0026lt;String\u0026gt;(\u0026#39;a string\u0026#39;); Box\u0026lt;int?\u0026gt;(null); } 在 Box 的定义中，T 是一个可空类型还是一个不可空类型？正如你所看到的，它可以被实例化为任何一种类型。答案是 T 是一个潜在的可空类型。在一个通用类或方法的主体中，潜在可空类型具有可空类型和不可空类型的所有限制。\n前者意味着除了在 Object 上定义的少量方法外，你不能调用它的任何方法。后者意味着你必须在使用该类型的任何字段或变量之前初始化它们。这可能会使类型参数变得相当难处理。\n在实践中，有几种模式表现出来。在类似集合的类中，类型参数可以用任何类型实例化，你只需要处理这些限制。在大多数情况下，就像这里的例子一样，这意味着只要你需要处理一个类型参数的值，就必须确保你确实可以访问这个类型参数的值。幸运的是，集合类很少对其元素调用方法。\n在你无法访问一个值的地方，你可以使类型参数的使用是可空的。\n// Using null safety: class Box\u0026lt;T\u0026gt; { T? object; Box.empty(); Box.full(this.object); } 注意对象声明上的? 现在这个字段有一个显式可空的类型，所以可以不初始化它。\n当你使一个类型参数类型像这里的 T? 一样可空的时候，你可能需要把可空性抛掉。正确的方法是使用显式为 T 的转写，而不是使用 !操作符。\n// Using null safety: class Box\u0026lt;T\u0026gt; { final T? object; Box.empty(); Box.full(this.object); T unbox() =\u0026gt; object as T; } !操作符总是在值为 null 时抛出。但是如果类型参数已经被实例化为一个可空类型，那么 null 对于 T 来说是一个完全有效的值。\n// Using null safety: main() { var box = Box\u0026lt;int?\u0026gt;.full(null); print(box.unbox()); } 这个程序应该无误地运行。使用 T 就可以实现这一点。使用 !会抛出一个异常。\n其他通用类型有一些约束，限制了可以应用的类型参数的种类。\n// Using null safety: class Interval\u0026lt;T extends num\u0026gt; { T min, max; Interval(this.min, this.max); bool get isEmpty =\u0026gt; max \u0026lt;= min; } 如果绑定是不可空的，那么类型参数也是不可空的，这意味着你有不可空类型的限制\u0026ndash;你不能让字段和变量不初始化。这意味着你有不可空值类型的限制\u0026ndash;你不能让字段和变量不初始化。这里的示例类必须有一个初始化字段的构造函数。\n作为这种限制的回报，你可以调用在其绑定上声明的参数类型的值的任何方法。然而，拥有一个不可空的绑定确实会阻止你的通用类的用户用一个可空的类型参数来实例化它。对于大多数类来说，这可能是一个合理的限制。\n你也可以使用一个可空的绑定。\n// Using null safety: class Interval\u0026lt;T extends num?\u0026gt; { T min, max; bool get isEmpty { var localMin = min; var localMax = max; // No min or max means an open-ended interval.  if (localMin == null || localMax == null) return false; return localMax \u0026lt;= localMin; } } 这意味着在类的主体中，你可以灵活地将类型参数处理为 nullable。请注意，这次我们没有构造函数，这也没关系。字段将被隐式初始化为 null。你可以声明类型参数类型的未初始化变量。\n但是你也有 nullability 的限制\u0026ndash;你不能在该类型的变量上调用任何东西，除非你先处理好 nullability。在这里的例子中，我们复制局部变量中的字段，并检查这些局部变量是否为空，以便在使用\u0026lt;=之前，流分析将它们推广到非可空性类型。\n请注意，可空性绑定并不妨碍用户用非空类型实例化类。一个可空的边界意味着类型参数可以是可空的，而不是说它必须是可空的。事实上，如果你不写扩展子句，类型参数的默认约束是可空值约束 Object? 没有办法要求类型参数是可空的。如果你想让类型参数的使用可靠地是可空的，你可以在类的主体里面使用 T?\n核心库的变化 语言中还有一些其他的调整，但都是次要的。例如，没有 on 子句的 catch 的默认类型现在是 Object 而不是动态的。开关语句中的跌穿分析使用了新的流分析。\n剩下的真正对你有意义的变化是在核心库中。在我们开始进行空值安全大冒险之前，我们担心原来没有办法在不大规模破坏世界的情况下让我们的核心库实现空值安全。结果并没有那么可怕。有一些重大的变化，但大多数情况下，迁移很顺利。大多数核心库要么不接受 null，自然而然地迁移到非可空类型，要么接受并优雅地用可空类型接受它。\n不过有几个重要的角落。\nMap 索引操作符是可空的 这并不是真正的改变，更多的是一个需要知道的事情。Map 类的 index [] 操作符如果键不存在，则返回 null。这意味着该操作符的返回类型必须是可空的。V?\n我们可以将该方法改为当键不存在时抛出一个异常，然后给它一个更容易使用的非空值返回类型。但是，使用索引操作符并检查 null 以查看键是否不存在的代码是非常常见的，根据我们的分析，约占所有使用的一半。打破所有这些代码会让 Dart 生态系统燃起熊熊大火。\n相反，运行时的行为是一样的，因此返回类型必须是可空的。这意味着你一般不能立即使用 map 查询的结果。\n// Using null safety, incorrectly: var map = {\u0026#39;key\u0026#39;: \u0026#39;value\u0026#39;}; print(map[\u0026#39;key\u0026#39;].length); // Error. 当你试图在一个可空字符串上调用.length 时，会出现编译错误。在你知道键存在的情况下，你可以通过使用！.length 来教导类型检查器。\n// Using null safety: var map = {\u0026#39;key\u0026#39;: \u0026#39;value\u0026#39;}; print(map[\u0026#39;key\u0026#39;]!.length); // OK. 我们考虑过在 Map 中添加另一个方法来为你做这件事：查找 key，如果没有找到就抛出，否则就返回一个非空值。但是该怎么称呼它呢？没有一个名字比单字符的 !更短，也没有一个方法的名字比在调用现场看到一个内置语义的 !更清晰。所以，在地图中访问一个已知存在元素的习惯性方式是使用[]! 你会习惯的。\n没有未命名的 List 构造函数 List 上的未命名构造函数创建了一个给定大小的新列表，但没有初始化任何元素。如果你创建了一个非可空类型的 list，然后访问一个元素，这将会在健全性保证中留下一个非常大的漏洞。\n为了避免这种情况，我们完全删除了构造函数。在空安全代码中调用 List()是一个错误，即使是可空类型。这听起来很吓人，但实际上，大多数代码都是使用 list literals、List.filled()、List.generate()或者作为转换其他集合的结果来创建列表的。对于想要创建某种类型的空列表的边缘情况，我们添加了一个新的 List.empty()构造函数。\n在 Dart 中，创建一个完全未初始化的列表的模式一直让人觉得格格不入，现在更是如此。如果你的代码被这一点破坏了，你可以随时通过使用许多其他的方法来产生一个列表来修复它。\n不能在不可空的列表上设置较大的长度 这一点鲜为人知，但 List 上的 length getter 也有一个相应的 setter。你可以将长度设置为一个较短的值来截断列表。你也可以将它设置为一个较长的长度，以便用未初始化的元素填充列表。\n如果你对一个非空值类型的列表这样做，当你以后访问那些未写入的元素时，你会违反健全性。为了防止这种情况发生，如果（也只有当）列表的元素类型是不可空的，而你又将其设置为较长的长度时，长度设置器会抛出一个运行时异常。截断所有类型的列表仍然是可以的，你可以增长可空类型的列表。\n如果你定义了自己的列表类型，扩展了 ListBase 或应用了 ListMixin，那么这有一个重要的后果。这两种类型都提供了 insert()的实现，之前通过设置长度为插入的元素腾出空间。这样做会因空安全而失败，所以我们将 ListMixin（ListBase 共享）中 insert()的实现改为调用 add()。如果你想能够使用继承的 insert()方法，你的自定义列表类应该提供 add()的定义。\n不能在迭代之前或之后访问 Iterator.current Iterator 类是一个可变的 \u0026ldquo;游标 \u0026ldquo;类，用于遍历实现 Iterable 的类型的元素。在访问任何元素之前，你应该调用 moveNext()来前进到第一个元素。当该方法返回 false 时，你已经到达了终点，没有更多的元素。\n过去，如果你在第一次调用 moveNext()之前或在迭代结束后调用它，current 会返回 null。有了 null 安全，那就要求 current 的返回类型是 E? 而不是 E。这又意味着每个元素的访问都需要进行运行时空检查。\n鉴于几乎没有人以那种错误的方式访问当前元素，这些检查将毫无用处。由于在迭代之前或之后可能会有一个该类型的值，所以我们让迭代器的行为没有被定义，如果你在不应该调用它的时候调用它。大多数 Iterator 的实现都会抛出一个 StateError。\n总结 这是一个非常详细的关于 null 安全的语言和库变化的介绍。这是一个很大的东西，但这是一个相当大的语言变化。更重要的是，我们希望达到一个点，让 Dart 仍然感觉到凝聚力和可用性。这不仅需要改变类型系统，还需要改变其他一些围绕它的可用性功能。我们不希望它让人感觉像被栓上了 null safety。\n要带走的核心点是。\n  类型在默认情况下是不可空值的，而通过添加 ?. 来实现空值化。\n  可选参数必须是可空的，或者有一个默认值。可以使用 required 使命名参数成为非可选参数。不可空值的顶层变量和静态字段必须有初始化器。不可空值的实例字段必须在构造函数主体开始之前初始化。\n  如果接收者为空，则空感知操作符后的方法链会短路。有新的空感知级联(?..)和索引(?[])运算符。后缀的空断言 \u0026ldquo;bang\u0026rdquo; 运算符(!)将其可空操作数投射到底层的非可空类型。\n  流程分析让你可以安全地将可空的局部变量和参数转化为可用的非可空变量。新的流分析还对类型提升、缺失返回、不可达代码和变量初始化有更智能的规则。\n  late 修饰符让你可以在其他地方使用不可空类型和 final，否则你可能无法使用，但会牺牲运行时检查。它还为你提供了惰性初始化的字段。\n  List 类被修改为防止未初始化元素。\n  最后，一旦你吸收了所有这些，并让你的代码进入 null 安全的世界，你就会得到一个健全的程序，编译器可以优化，并且在你的代码中可以看到每一个可能发生运行时错误的地方。我们希望你觉得这样的努力是值得的。\n原文链接: https://dart.dev/null-safety/understanding-null-safety\n"},"name":"Understanding Null Safety","published":"2021-03-05T00:00:00+08:00","summary":"Understanding Null Safety","type":"entry","url":"https://ohmyweekly.github.io/notes/2021-03-05-understanding-null-safety/"},{"content":{"html":"\u003cp\u003e\u003ca href=\"https://dart.dev/codelabs/async-await\"\u003easync-await\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e这个 codelab 教你如何使用 \u003ccode\u003efutures\u003c/code\u003e、\u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\u003c/p\u003e\n\u003cp\u003e要想从这个 codelab 中获得最大的收获，你应该具备以下条件。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e掌握\u003ca href=\"https://dart.dev/samples\"\u003e基本的 Dart 语法\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e有用其他语言编写异步代码的经验。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这个 codelab 包括以下材料。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如何以及何时使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 如何影响执行顺序。\u003c/li\u003e\n\u003cli\u003e如何在 \u003ccode\u003easync\u003c/code\u003e 函数中使用 \u003ccode\u003etry-catch\u003c/code\u003e 表达式处理异步调用中的错误。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e估计完成这个代码实验的时间。40-60分钟\u003c/p\u003e\n\u003cp\u003e注意：本页面使用嵌入式 DartPads 来显示示例和练习。如果你看到的是空框而不是 DartPads，请转到 \u003ca href=\"https://dart.dev/tools/dartpad/troubleshoot\"\u003eDartPad 故障排除页面\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"为什么异步代码很重要\"\u003e为什么异步代码很重要\u003c/h2\u003e\n\u003cp\u003e异步操作让你的程序在等待另一个操作完成时完成工作。下面是一些常见的异步操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过网络获取数据。\u003c/li\u003e\n\u003cli\u003e写入数据库。\u003c/li\u003e\n\u003cli\u003e从文件中读取数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e要在 Dart 中执行异步操作，你可以使用 \u003ccode\u003eFuture\u003c/code\u003e 类以及 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字。\u003c/p\u003e\n\u003ch3 id=\"例子-错误地使用异步函数\"\u003e例子: 错误地使用异步函数\u003c/h3\u003e\n\u003cp\u003e下面的例子显示了使用异步函数(\u003ccode\u003efetchUserOrder()\u003c/code\u003e)的错误方法。稍后你将使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 来修复这个例子。在运行这个例子之前，试着发现这个问题-你认为输出会是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// This example shows how *not* to write asynchronous Dart code.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Your order is: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Imagine that this function is more complex and slow.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Large Latte\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下面是这个例子为什么不能打印 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 最终产生的值。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efetchUserOrder()\u003c/code\u003e 是一个异步函数，在延迟之后，提供一个描述用户订单的字符串：\u0026ldquo;Large Latte\u0026rdquo;。\u003c/li\u003e\n\u003cli\u003e为了得到用户的订单，\u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 应该调用 \u003ccode\u003efetchUserOrder()\u003c/code\u003e，并等待其完成。由于 \u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 没有等待 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 完成，\u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 无法获得 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 最终提供的字符串值。\u003c/li\u003e\n\u003cli\u003e取而代之的是，\u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 得到的是待完成工作的表示：一个未完成的未来。您将在下一节了解更多关于未来的信息。\u003c/li\u003e\n\u003cli\u003e因为 \u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 没有得到描述用户订单的值，所以这个例子没有打印 \u0026ldquo;Large Latte\u0026rdquo; 到控制台，而是打印 \u0026ldquo;Your order is: Instance of \u0026lsquo;_Future\u0026rsquo;\u0026quot;。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在接下来的章节中，你将学习关于 futures 和关于使用 futures 的工作（使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e），这样你就能编写必要的代码，使 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 向控制台打印所需的值(\u0026ldquo;Large Latte\u0026rdquo;)。\u003c/p\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e同步操作: 同步操作会阻止其他操作的执行，直到它完成。\u003c/li\u003e\n\u003cli\u003e同步函数：同步函数只执行同步操作。\u003c/li\u003e\n\u003cli\u003e异步操作：异步操作一旦启动，就允许其他操作在它完成之前执行。\u003c/li\u003e\n\u003cli\u003e异步函数：异步函数至少执行一个异步操作，也可以执行同步操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"什么是未来\"\u003e什么是未来？\u003c/h2\u003e\n\u003cp\u003efuture(小写 \u0026ldquo;f\u0026rdquo;)是 \u003ca href=\"https://api.dart.dev/stable/dart-async/Future-class.html\"\u003eFuture\u003c/a\u003e（大写 \u0026ldquo;F\u0026rdquo;）类的一个实例。一个 future 代表异步操作的结果，可以有两种状态：未完成或完成。\u003c/p\u003e\n\u003cp\u003e注意：未完成是一个 Dart 术语，指的是一个未来的状态，在它产生一个值之前。\u003c/p\u003e\n\u003ch3 id=\"未完成的\"\u003e未完成的\u003c/h3\u003e\n\u003cp\u003e当你调用一个异步函数时，它会返回一个未完成的未来。这个未来正在等待函数的异步操作完成或抛出一个错误。\u003c/p\u003e\n\u003ch3 id=\"已完成的\"\u003e已完成的\u003c/h3\u003e\n\u003cp\u003e如果异步操作成功，未来就以一个值完成。否则它将以一个错误完成。\u003c/p\u003e\n\u003ch3 id=\"用一个值来完成\"\u003e用一个值来完成\u003c/h3\u003e\n\u003cp\u003e类型为 \u003ccode\u003eFuture\u0026lt;T\u0026gt;\u003c/code\u003e 的 future 用一个类型为 \u003ccode\u003eT\u003c/code\u003e 的值来完成。例如，一个类型为 \u003ccode\u003eFuture\u0026lt;String\u0026gt;\u003c/code\u003e 的 future 会产生一个字符串值。如果一个 future 没有产生一个可用的值，那么 future 的类型是 \u003ccode\u003eFuture\u0026lt;void\u0026gt;\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"用一个错误来完成\"\u003e用一个错误来完成\u003c/h3\u003e\n\u003cp\u003e如果函数执行的异步操作因为任何原因而失败，future 就会以错误的方式完成。\u003c/p\u003e\n\u003ch3 id=\"例子-介绍-future\"\u003e例子: 介绍 future\u003c/h3\u003e\n\u003cp\u003e在下面的例子中，\u003ccode\u003efetchUserOrder()\u003c/code\u003e 返回一个在打印到控制台后完成的 future。因为它没有返回一个可用的值，\u003ccode\u003efetchUserOrder()\u003c/code\u003e 的类型是 \u003ccode\u003eFuture\u0026lt;void\u0026gt;\u003c/code\u003e。在运行这个例子之前，试着预测一下哪个会先打印：\u0026ldquo;Large Latte\u0026rdquo; 或 \u0026ldquo;Fetching user order\u0026hellip;\u0026quot;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Imagine that this function is fetching user info from another service or database.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Large Latte\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Fetching user order...\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在前面的例子中，尽管 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 在第8行的 \u003ccode\u003eprint()\u003c/code\u003e 调用之前执行，控制台还是在 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 的输出 (\u0026ldquo;Large Latte\u0026rdquo;) 之前显示了第8行的输出 (\u0026ldquo;Fetching user order\u0026hellip;\u0026quot;)。这是因为 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 在打印 \u0026ldquo;Large Latte\u0026rdquo; 之前会有延迟。\u003c/p\u003e\n\u003ch3 id=\"例子-完成时出现错误\"\u003e例子: 完成时出现错误\u003c/h3\u003e\n\u003cp\u003e运行下面的例子，看看未来如何完成一个错误。稍后你将学习如何处理错误。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Imagine that this function is fetching user info but encounters a bug\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Logout failed: user ID is invalid\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Fetching user order...\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003efetchUserOrder()\u003c/code\u003e 完成时出现错误，表明用户ID无效。\u003c/p\u003e\n\u003cp\u003e你已经学习了 future 和它们如何完成，但你如何使用异步函数的结果呢？在下一节中，你将学习如何使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字来获取结果。\u003c/p\u003e\n\u003cp\u003e快速回顾:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个 \u003ccode\u003eFuture\u0026lt;T\u0026gt;\u003c/code\u003e 实例会产生一个 \u003ccode\u003eT\u003c/code\u003e 类型的值。\u003c/li\u003e\n\u003cli\u003e如果一个 future 没有产生一个可用的值，那么 future 的类型是 \u003ccode\u003eFuture\u0026lt;void\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e一个 future 可以处于两种状态之一：未完成或完成。\u003c/li\u003e\n\u003cli\u003e当你调用一个返回 future 的函数时，函数会把要做的工作排队，并返回一个未完成的 future。\u003c/li\u003e\n\u003cli\u003e当一个 future 的操作完成时，future 以一个值或以一个错误完成。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFuture: Dart \u003ca href=\"https://api.dart.dev/stable/dart-async/Future-class.html\"\u003eFuture\u003c/a\u003e 类。\u003c/li\u003e\n\u003cli\u003efuture：Dart \u003ccode\u003eFuture\u003c/code\u003e 类的一个实例。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"使用-futureasync-和-await\"\u003e使用 future：async 和 await\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字提供了一种声明式的方式来定义异步函数并使用它们的结果。在使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 时，请记住以下两个基本准则。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e要定义一个异步函数，请在函数主体前添加 \u003ccode\u003easync\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eawait\u003c/code\u003e 关键字只能在 \u003ccode\u003easync\u003c/code\u003e 函数中使用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下面是一个将 \u003ccode\u003emain()\u003c/code\u003e 从同步函数转换为异步函数的例子。\u003c/p\u003e\n\u003cp\u003e首先，在函数体前添加 \u003ccode\u003easync\u003c/code\u003e 关键字:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"err\"\u003e···\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果函数有声明的返回类型，那么更新类型为 \u003ccode\u003eFuture\u0026lt;T\u0026gt;\u003c/code\u003e，其中 T 是函数返回的值的类型。如果函数没有明确返回值，那么返回类型为 \u003ccode\u003eFuture\u0026lt;void\u0026gt;\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"err\"\u003e···\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在你已经有了一个 \u003ccode\u003easync\u003c/code\u003e 函数，你可以使用 \u003ccode\u003eawait\u003c/code\u003e 关键字来等待一个 future 的完成:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e正如下面两个例子所显示的，\u003ccode\u003easync\u003c/code\u003e 和a \u003ccode\u003ewait\u003c/code\u003e 关键字导致异步代码看起来很像同步代码。唯一的区别在异步示例中突出显示，如果你的窗口足够宽，它就在同步示例的右边。\u003c/p\u003e\n\u003cp\u003e示例：同步函数\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Your order is: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Imagine that this function is\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// more complex and slow.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Large Latte\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Fetching user order...\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eFetching user order...\nYour order is: Instance of _Future\u0026lt;String\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e例子：异步函数\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Your order is: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Imagine that this function is\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// more complex and slow.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Large Latte\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Fetching user order...\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eFetching user order...\nYour order is: Large Latte\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e异步示例在三个方面有所不同。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 的返回类型从 \u003ccode\u003eString\u003c/code\u003e 变为 \u003ccode\u003eFuture\u0026lt;String\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003easync\u003c/code\u003e 关键字出现在 \u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 和 \u003ccode\u003emain()\u003c/code\u003e 的函数体之前。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eawait\u003c/code\u003e 关键字出现在调用异步函数 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 和 \u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 之前。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003easync: 你可以在一个函数的主体前使用 \u003ccode\u003easync\u003c/code\u003e 关键字来标记它为异步函数。\u003c/li\u003e\n\u003cli\u003easync 函数: \u003ccode\u003easync\u003c/code\u003e 函数是一个标有 \u003ccode\u003easync\u003c/code\u003e 关键字的函数。\u003c/li\u003e\n\u003cli\u003eawait：可以使用 \u003ccode\u003eawait\u003c/code\u003e 关键字来获取异步表达式的完成结果。\u003ccode\u003eawait\u003c/code\u003e 关键字只在 \u003ccode\u003easync\u003c/code\u003e 函数中起作用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"使用-async-和-await-的执行流程\"\u003e使用 async 和 await 的执行流程\u003c/h3\u003e\n\u003cp\u003e一个异步函数在第一个 \u003ccode\u003eawait\u003c/code\u003e 关键字之前是同步运行的。这意味着在一个 \u003ccode\u003easync\u003c/code\u003e 函数体中，第一个 \u003ccode\u003eawait\u003c/code\u003e 关键字之前的所有同步代码都会立即执行。\u003c/p\u003e\n\u003cp\u003e版本说明：在 Dart 2.0 之前，一个异步函数立即返回，而不会在异步函数体中执行任何代码。\u003c/p\u003e\n\u003ch3 id=\"例子在异步函数内执行在异步函数中执行\"\u003e例子：在异步函数内执行。在异步函数中执行\u003c/h3\u003e\n\u003cp\u003e运行下面的例子，看看如何在异步函数体中执行。你认为输出会是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprintOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Awaiting user order...\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Your order is: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Imagine that this function is more complex and slow.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Large Latte\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ecountSeconds\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eprintOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// You can ignore this function - it\u0026#39;s here to visualize delay time in this example.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ecountSeconds\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e运行上例中的代码后，尝试将第2行和第3行反过来。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Awaiting user order...\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意到输出的时间发生了变化，现在 \u003ccode\u003eprint('Awaiting user order')\u003c/code\u003e 出现在 \u003ccode\u003eprintOrderMessage()\u003c/code\u003e 中第一个 \u003ccode\u003eawait\u003c/code\u003e 关键字之后。\u003c/p\u003e\n\u003ch3 id=\"练习-练习使用-async-和-await\"\u003e练习: 练习使用 async 和 await\u003c/h3\u003e\n\u003cp\u003e下面的练习是一个失败的单元测试，其中包含部分完成的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 \u003ccode\u003emain()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e为了模拟异步操作，调用以下函数，这些函数是为你提供的。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e函数\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e类型签名\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003efetchRole()\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eFuture\u003c!-- raw HTML omitted --\u003e fetchRole()\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e获取用户角色的简短描述。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003efetchLoginAmount()\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eFuture\u003c!-- raw HTML omitted --\u003e fetchLoginAmount()\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e获取用户的登录次数。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e第1部分：\u003ccode\u003ereportUserRole()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e为 \u003ccode\u003ereportUserRole()\u003c/code\u003e 函数添加代码，使其执行以下操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e返回一个以下列字符串完成的 future： \u003ccode\u003e\u0026quot;User role: \u0026lt;user role\u0026gt;\u0026quot;\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e注意：你必须使用 \u003ccode\u003efetchRole()\u003c/code\u003e 返回的实际值；复制和粘贴示例返回值不会使测试通过。\u003c/li\u003e\n\u003cli\u003e示例返回值: \u0026ldquo;User role: tester\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e通过调用提供的函数 \u003ccode\u003efetchRole()\u003c/code\u003e 获取用户角色。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第二部分：\u003ccode\u003ereportLogins()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e实现一个异步函数 \u003ccode\u003ereportLogins()\u003c/code\u003e，使其执行以下操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e返回字符串 \u0026ldquo;Total number of logins: \u0026lt;# of logins\u0026gt;\u0026quot;。\n\u003cul\u003e\n\u003cli\u003e注意：你必须使用 \u003ccode\u003efetchLoginAmount()\u003c/code\u003e 返回的实际值；复制和粘贴示例返回值不会使测试通过。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereportLogins()\u003c/code\u003e 的返回值示例: \u003ccode\u003e\u0026quot;Total number of logins: 57\u0026quot;\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e通过调用提供的函数 \u003ccode\u003efetchLoginAmount()\u003c/code\u003e 来获取登录次数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ereportUserRole\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eusername\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchRole\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;User role: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eusername\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ereportLogins\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003elogins\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchLoginAmount\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Total number of logins: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003elogins\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意：如果你的代码通过了测试，你可以忽略信息级的消息。\u003c/p\u003e\n\u003ch2 id=\"处理错误\"\u003e处理错误\u003c/h2\u003e\n\u003cp\u003e要处理 \u003ccode\u003easync\u003c/code\u003e 函数中的错误，使用 \u003ccode\u003etry-catch\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Awaiting user order...\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Caught error: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在一个 \u003ccode\u003easync\u003c/code\u003e 函数中，你可以像在同步代码中一样编写 \u003ccode\u003etry-catch\u003c/code\u003e 子句。\u003c/p\u003e\n\u003ch3 id=\"例子async-和-await-的-try-catch-子句\"\u003e例子：\u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 的 \u003ccode\u003etry-catch\u003c/code\u003e 子句\u003c/h3\u003e\n\u003cp\u003e运行下面的例子，看看如何处理一个异步函数的错误。你认为输出会是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprintOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Awaiting user order...\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Caught error: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Imagine that this function is more complex.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Cannot locate user order\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eprintOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"练习-练习处理错误\"\u003e练习: 练习处理错误\u003c/h3\u003e\n\u003cp\u003e下面的练习提供了使用异步代码处理错误的练习，使用上一节中描述的方法。为了模拟异步操作，你的代码将调用以下函数，该函数为你提供。\u003c/p\u003e\n\u003cp\u003e| 函数                | 类型签名 | 描述 |\n| fetchNewUsername() | Future\u003c!-- raw HTML omitted --\u003e fetchNewUsername() |\t返回你可以用来替换旧用户名的新用户名。|\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 来实现一个异步的 \u003ccode\u003echangeUsername()\u003c/code\u003e 函数，该函数执行以下操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e调用提供的异步函数 \u003ccode\u003efetchNewUsername()\u003c/code\u003e 并返回其结果。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echangeUsername()\u003c/code\u003e 的返回值示例: \u0026ldquo;jane_smith_92\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e捕获任何发生的错误并返回错误的字符串值。\n\u003cul\u003e\n\u003cli\u003e你可以使用 \u003ca href=\"https://api.dart.dev/stable/dart-core/ArgumentError/toString.html\"\u003etoString()\u003c/a\u003e 方法对 \u003ca href=\"https://api.dart.dev/stable/dart-core/Exception-class.html\"\u003eExceptions\u003c/a\u003e 和\u003ca href=\"https://api.dart.dev/stable/dart-core/Error-class.html\"\u003eErrors\u003c/a\u003e 进行字符串化。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003echangeUsername\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchNewUsername\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"练习-把所有的东西放在一起\"\u003e练习: 把所有的东西放在一起\u003c/h3\u003e\n\u003cp\u003e现在是时候在最后一个练习中练习所学的知识了。为了模拟异步操作，本练习提供了异步函数 \u003ccode\u003efetchUsername()\u003c/code\u003e 和 \u003ccode\u003elogoutUser()\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e| 函数             | 类型签名                        | 描述 |\n| fetchUsername() |\tFuture\u003c!-- raw HTML omitted --\u003e fetchUsername() | 返回与当前用户相关联的名称。 |\n| logoutUser()\t  | Future\u003c!-- raw HTML omitted --\u003e logoutUser()\t   | 执行当前用户的注销，并返回被注销的用户名。 |\u003c/p\u003e\n\u003cp\u003e编写以下内容。\u003c/p\u003e\n\u003cp\u003e第一部分：\u003ccode\u003eaddHello()\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写一个函数 \u003ccode\u003eaddHello()\u003c/code\u003e，它接受一个单一的 \u003ccode\u003eString\u003c/code\u003e 参数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaddHello()\u003c/code\u003e 返回它的 \u003ccode\u003eString\u003c/code\u003e 参数，前面加 \u0026lsquo;Hello\u0026rsquo;。\n例如：\u003ccode\u003eaddHello('Jon')\u003c/code\u003e 返回 \u0026lsquo;Hello Jon\u0026rsquo;。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第二部分：\u003ccode\u003egreetUser()\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写一个不接受参数的函数 \u003ccode\u003egreetUser()\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e为了得到用户名，\u003ccode\u003egreetUser()\u003c/code\u003e 调用提供的异步函数 \u003ccode\u003efetchUsername()\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egreetUser()\u003c/code\u003e 通过调用 \u003ccode\u003eaddHello()\u003c/code\u003e 为用户创建一个问候语，传递用户名，并返回结果。\n例子: 如果 \u003ccode\u003efetchUsername()\u003c/code\u003e 返回 \u0026lsquo;Jenny\u0026rsquo;, 那么 \u003ccode\u003egreetUser()\u003c/code\u003e 返回 \u0026lsquo;Hello Jenny\u0026rsquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第三部分：\u003ccode\u003esayGoodbye()\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e编写一个函数 \u003ccode\u003esayGoodbye()\u003c/code\u003e，它的功能如下。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不接受任何参数\u003c/li\u003e\n\u003cli\u003e捕获任何错误。\u003c/li\u003e\n\u003cli\u003e调用所提供的异步函数 logoutUser().\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e如果 \u003ccode\u003elogoutUser()\u003c/code\u003e 失败，\u003ccode\u003esayGoodbye()\u003c/code\u003e 返回任何你喜欢的字符串。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e如果 \u003ccode\u003elogoutUser()\u003c/code\u003e 成功，\u003ccode\u003esayGoodbye()\u003c/code\u003e 返回字符串 \u003ccode\u003e'\u0026lt;result\u0026gt; Thanks, see you next time'\u003c/code\u003e，其中 \u003ccode\u003e\u0026lt;result\u0026gt;\u003c/code\u003e 是调用 \u003ccode\u003elogoutUser()\u003c/code\u003e 返回的字符串值。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eaddHello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Hello \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egreetUser\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eusername\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUsername\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eaddHello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esayGoodbye\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003elogoutUser\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"s1\"\u003e Thanks, see you next time\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Failed to logout user: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"下一步是什么\"\u003e下一步是什么？\u003c/h2\u003e\n\u003cp\u003e恭喜你，你已经完成了 codelab 的学习！如果你还想了解更多，这里有一些下一步的建议。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e玩玩 \u003ca href=\"https://dartpad.dev/\"\u003eDartPad\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e尝试另一个 \u003ca href=\"https://dart.dev/codelabs\"\u003ecodelab\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e学习更多关于 futures 和异步的知识。\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tutorials/language/streams\"\u003eStreams tutorial\u003c/a\u003e: 学习如何使用异步事件的序列。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/playlist?list=PLjxrf2q8roU0Net_g1NT5_vOO3s_FR02J\"\u003e来自 Google 的 Dart视频\u003c/a\u003e: 观看一个或多个关于异步编码的视频。或者，如果你喜欢，阅读基于这些视频的文章。(从\u003ca href=\"https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a\"\u003e隔离和事件循环\u003c/a\u003e开始。)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/get-dart\"\u003e获取 Dart SDK\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果你对使用嵌入式 DartPads 感兴趣，就像这个 codelab 一样，请看\u003ca href=\"https://dart.dev/resources/dartpad-best-practices\"\u003e教程中使用 DartPad 的最佳实践\u003c/a\u003e。\u003c/p\u003e\n","text":"async-await\n这个 codelab 教你如何使用 futures、async 和 await 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\n要想从这个 codelab 中获得最大的收获，你应该具备以下条件。\n 掌握基本的 Dart 语法 有用其他语言编写异步代码的经验。  这个 codelab 包括以下材料。\n 如何以及何时使用 async 和 await 关键字。 使用 async 和 await 如何影响执行顺序。 如何在 async 函数中使用 try-catch 表达式处理异步调用中的错误。  估计完成这个代码实验的时间。40-60分钟\n注意：本页面使用嵌入式 DartPads 来显示示例和练习。如果你看到的是空框而不是 DartPads，请转到 DartPad 故障排除页面。\n为什么异步代码很重要 异步操作让你的程序在等待另一个操作完成时完成工作。下面是一些常见的异步操作。\n 通过网络获取数据。 写入数据库。 从文件中读取数据。  要在 Dart 中执行异步操作，你可以使用 Future 类以及 async 和 await 关键字。\n例子: 错误地使用异步函数 下面的例子显示了使用异步函数(fetchUserOrder())的错误方法。稍后你将使用 async 和 await 来修复这个例子。在运行这个例子之前，试着发现这个问题-你认为输出会是什么？\n// This example shows how *not* to write asynchronous Dart code.  String createOrderMessage() { var order = fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); void main() { print(createOrderMessage()); } 下面是这个例子为什么不能打印 fetchUserOrder() 最终产生的值。\n fetchUserOrder() 是一个异步函数，在延迟之后，提供一个描述用户订单的字符串：\u0026ldquo;Large Latte\u0026rdquo;。 为了得到用户的订单，createOrderMessage() 应该调用 fetchUserOrder()，并等待其完成。由于 createOrderMessage() 没有等待 fetchUserOrder() 完成，createOrderMessage() 无法获得 fetchUserOrder() 最终提供的字符串值。 取而代之的是，createOrderMessage() 得到的是待完成工作的表示：一个未完成的未来。您将在下一节了解更多关于未来的信息。 因为 createOrderMessage() 没有得到描述用户订单的值，所以这个例子没有打印 \u0026ldquo;Large Latte\u0026rdquo; 到控制台，而是打印 \u0026ldquo;Your order is: Instance of \u0026lsquo;_Future\u0026rsquo;\u0026quot;。  在接下来的章节中，你将学习关于 futures 和关于使用 futures 的工作（使用 async 和 await），这样你就能编写必要的代码，使 fetchUserOrder() 向控制台打印所需的值(\u0026ldquo;Large Latte\u0026rdquo;)。\n关键术语:\n 同步操作: 同步操作会阻止其他操作的执行，直到它完成。 同步函数：同步函数只执行同步操作。 异步操作：异步操作一旦启动，就允许其他操作在它完成之前执行。 异步函数：异步函数至少执行一个异步操作，也可以执行同步操作。  什么是未来？ future(小写 \u0026ldquo;f\u0026rdquo;)是 Future（大写 \u0026ldquo;F\u0026rdquo;）类的一个实例。一个 future 代表异步操作的结果，可以有两种状态：未完成或完成。\n注意：未完成是一个 Dart 术语，指的是一个未来的状态，在它产生一个值之前。\n未完成的 当你调用一个异步函数时，它会返回一个未完成的未来。这个未来正在等待函数的异步操作完成或抛出一个错误。\n已完成的 如果异步操作成功，未来就以一个值完成。否则它将以一个错误完成。\n用一个值来完成 类型为 Future\u0026lt;T\u0026gt; 的 future 用一个类型为 T 的值来完成。例如，一个类型为 Future\u0026lt;String\u0026gt; 的 future 会产生一个字符串值。如果一个 future 没有产生一个可用的值，那么 future 的类型是 Future\u0026lt;void\u0026gt;。\n用一个错误来完成 如果函数执行的异步操作因为任何原因而失败，future 就会以错误的方式完成。\n例子: 介绍 future 在下面的例子中，fetchUserOrder() 返回一个在打印到控制台后完成的 future。因为它没有返回一个可用的值，fetchUserOrder() 的类型是 Future\u0026lt;void\u0026gt;。在运行这个例子之前，试着预测一下哪个会先打印：\u0026ldquo;Large Latte\u0026rdquo; 或 \u0026ldquo;Fetching user order\u0026hellip;\u0026quot;。\nFuture\u0026lt;void\u0026gt; fetchUserOrder() { // Imagine that this function is fetching user info from another service or database.  return Future.delayed(Duration(seconds: 2), () =\u0026gt; print(\u0026#39;Large Latte\u0026#39;)); } void main() { fetchUserOrder(); print(\u0026#39;Fetching user order...\u0026#39;); } 在前面的例子中，尽管 fetchUserOrder() 在第8行的 print() 调用之前执行，控制台还是在 fetchUserOrder() 的输出 (\u0026ldquo;Large Latte\u0026rdquo;) 之前显示了第8行的输出 (\u0026ldquo;Fetching user order\u0026hellip;\u0026quot;)。这是因为 fetchUserOrder() 在打印 \u0026ldquo;Large Latte\u0026rdquo; 之前会有延迟。\n例子: 完成时出现错误 运行下面的例子，看看未来如何完成一个错误。稍后你将学习如何处理错误。\nFuture\u0026lt;void\u0026gt; fetchUserOrder() { // Imagine that this function is fetching user info but encounters a bug  return Future.delayed(Duration(seconds: 2), () =\u0026gt; throw Exception(\u0026#39;Logout failed: user ID is invalid\u0026#39;)); } void main() { fetchUserOrder(); print(\u0026#39;Fetching user order...\u0026#39;); } 在这个例子中，fetchUserOrder() 完成时出现错误，表明用户ID无效。\n你已经学习了 future 和它们如何完成，但你如何使用异步函数的结果呢？在下一节中，你将学习如何使用 async 和 await 关键字来获取结果。\n快速回顾:\n 一个 Future\u0026lt;T\u0026gt; 实例会产生一个 T 类型的值。 如果一个 future 没有产生一个可用的值，那么 future 的类型是 Future\u0026lt;void\u0026gt;。 一个 future 可以处于两种状态之一：未完成或完成。 当你调用一个返回 future 的函数时，函数会把要做的工作排队，并返回一个未完成的 future。 当一个 future 的操作完成时，future 以一个值或以一个错误完成。  关键术语:\n Future: Dart Future 类。 future：Dart Future 类的一个实例。  使用 future：async 和 await async 和 await 关键字提供了一种声明式的方式来定义异步函数并使用它们的结果。在使用 async 和 await 时，请记住以下两个基本准则。\n 要定义一个异步函数，请在函数主体前添加 async。 await 关键字只能在 async 函数中使用。  下面是一个将 main() 从同步函数转换为异步函数的例子。\n首先，在函数体前添加 async 关键字:\nvoid main() async { ··· } 如果函数有声明的返回类型，那么更新类型为 Future\u0026lt;T\u0026gt;，其中 T 是函数返回的值的类型。如果函数没有明确返回值，那么返回类型为 Future\u0026lt;void\u0026gt;。\nFuture\u0026lt;void\u0026gt; main() async { ··· } 现在你已经有了一个 async 函数，你可以使用 await 关键字来等待一个 future 的完成:\nprint(await createOrderMessage()); 正如下面两个例子所显示的，async 和a wait 关键字导致异步代码看起来很像同步代码。唯一的区别在异步示例中突出显示，如果你的窗口足够宽，它就在同步示例的右边。\n示例：同步函数\nString createOrderMessage() { var order = fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is  // more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); void main() { print(\u0026#39;Fetching user order...\u0026#39;); print(createOrderMessage()); } Fetching user order... Your order is: Instance of _Future\u0026lt;String\u0026gt; 例子：异步函数\nFuture\u0026lt;String\u0026gt; createOrderMessage() async { var order = await fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is  // more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); Future\u0026lt;void\u0026gt; main() async { print(\u0026#39;Fetching user order...\u0026#39;); print(await createOrderMessage()); } Fetching user order... Your order is: Large Latte 异步示例在三个方面有所不同。\n createOrderMessage() 的返回类型从 String 变为 Future\u0026lt;String\u0026gt;。 async 关键字出现在 createOrderMessage() 和 main() 的函数体之前。 await 关键字出现在调用异步函数 fetchUserOrder() 和 createOrderMessage() 之前。  关键术语:\n async: 你可以在一个函数的主体前使用 async 关键字来标记它为异步函数。 async 函数: async 函数是一个标有 async 关键字的函数。 await：可以使用 await 关键字来获取异步表达式的完成结果。await 关键字只在 async 函数中起作用。  使用 async 和 await 的执行流程 一个异步函数在第一个 await 关键字之前是同步运行的。这意味着在一个 async 函数体中，第一个 await 关键字之前的所有同步代码都会立即执行。\n版本说明：在 Dart 2.0 之前，一个异步函数立即返回，而不会在异步函数体中执行任何代码。\n例子：在异步函数内执行。在异步函数中执行 运行下面的例子，看看如何在异步函数体中执行。你认为输出会是什么？\nFuture\u0026lt;void\u0026gt; printOrderMessage() async { print(\u0026#39;Awaiting user order...\u0026#39;); var order = await fetchUserOrder(); print(\u0026#39;Your order is: $order\u0026#39;); } Future\u0026lt;String\u0026gt; fetchUserOrder() { // Imagine that this function is more complex and slow.  return Future.delayed(Duration(seconds: 4), () =\u0026gt; \u0026#39;Large Latte\u0026#39;); } Future\u0026lt;void\u0026gt; main() async { countSeconds(4); await printOrderMessage(); } // You can ignore this function - it\u0026#39;s here to visualize delay time in this example. void countSeconds(int s) { for (var i = 1; i \u0026lt;= s; i++) { Future.delayed(Duration(seconds: i), () =\u0026gt; print(i)); } } 运行上例中的代码后，尝试将第2行和第3行反过来。\nvar order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); 注意到输出的时间发生了变化，现在 print('Awaiting user order') 出现在 printOrderMessage() 中第一个 await 关键字之后。\n练习: 练习使用 async 和 await 下面的练习是一个失败的单元测试，其中包含部分完成的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 main()。\n为了模拟异步操作，调用以下函数，这些函数是为你提供的。\n   函数 类型签名 描述     fetchRole() FuturefetchRole() 获取用户角色的简短描述。   fetchLoginAmount() FuturefetchLoginAmount() 获取用户的登录次数。    第1部分：reportUserRole()\n为 reportUserRole() 函数添加代码，使其执行以下操作。\n 返回一个以下列字符串完成的 future： \u0026quot;User role: \u0026lt;user role\u0026gt;\u0026quot;。  注意：你必须使用 fetchRole() 返回的实际值；复制和粘贴示例返回值不会使测试通过。 示例返回值: \u0026ldquo;User role: tester\u0026rdquo;   通过调用提供的函数 fetchRole() 获取用户角色。  第二部分：reportLogins()\n实现一个异步函数 reportLogins()，使其执行以下操作。\n 返回字符串 \u0026ldquo;Total number of logins: \u0026lt;# of logins\u0026gt;\u0026quot;。  注意：你必须使用 fetchLoginAmount() 返回的实际值；复制和粘贴示例返回值不会使测试通过。 reportLogins() 的返回值示例: \u0026quot;Total number of logins: 57\u0026quot;。   通过调用提供的函数 fetchLoginAmount() 来获取登录次数。  Future\u0026lt;String\u0026gt; reportUserRole() async { var username = await fetchRole(); return \u0026#39;User role: $username\u0026#39;; } Future\u0026lt;String\u0026gt; reportLogins() async { var logins = await fetchLoginAmount(); return \u0026#39;Total number of logins: $logins\u0026#39;; } 注意：如果你的代码通过了测试，你可以忽略信息级的消息。\n处理错误 要处理 async 函数中的错误，使用 try-catch:\ntry { var order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); } catch (err) { print(\u0026#39;Caught error: $err\u0026#39;); } 在一个 async 函数中，你可以像在同步代码中一样编写 try-catch 子句。\n例子：async 和 await 的 try-catch 子句 运行下面的例子，看看如何处理一个异步函数的错误。你认为输出会是什么？\nFuture\u0026lt;void\u0026gt; printOrderMessage() async { try { var order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); print(order); } catch (err) { print(\u0026#39;Caught error: $err\u0026#39;); } } Future\u0026lt;String\u0026gt; fetchUserOrder() { // Imagine that this function is more complex.  var str = Future.delayed( Duration(seconds: 4), () =\u0026gt; throw \u0026#39;Cannot locate user order\u0026#39;); return str; } Future\u0026lt;void\u0026gt; main() async { await printOrderMessage(); } 练习: 练习处理错误 下面的练习提供了使用异步代码处理错误的练习，使用上一节中描述的方法。为了模拟异步操作，你的代码将调用以下函数，该函数为你提供。\n| 函数 | 类型签名 | 描述 | | fetchNewUsername() | FuturefetchNewUsername() |\t返回你可以用来替换旧用户名的新用户名。|\n使用 async 和 await 来实现一个异步的 changeUsername() 函数，该函数执行以下操作。\n 调用提供的异步函数 fetchNewUsername() 并返回其结果。  changeUsername() 的返回值示例: \u0026ldquo;jane_smith_92\u0026rdquo;   捕获任何发生的错误并返回错误的字符串值。  你可以使用 toString() 方法对 Exceptions 和Errors 进行字符串化。    Future\u0026lt;String\u0026gt; changeUsername () async { try { return await fetchNewUsername(); } catch (err) { return err.toString(); } } 练习: 把所有的东西放在一起 现在是时候在最后一个练习中练习所学的知识了。为了模拟异步操作，本练习提供了异步函数 fetchUsername() 和 logoutUser():\n| 函数 | 类型签名 | 描述 | | fetchUsername() |\tFuturefetchUsername() | 返回与当前用户相关联的名称。 | | logoutUser()\t| FuturelogoutUser()\t| 执行当前用户的注销，并返回被注销的用户名。 |\n编写以下内容。\n第一部分：addHello()\n 编写一个函数 addHello()，它接受一个单一的 String 参数。 addHello() 返回它的 String 参数，前面加 \u0026lsquo;Hello\u0026rsquo;。 例如：addHello('Jon') 返回 \u0026lsquo;Hello Jon\u0026rsquo;。  第二部分：greetUser()\n 编写一个不接受参数的函数 greetUser()。 为了得到用户名，greetUser() 调用提供的异步函数 fetchUsername()。 greetUser() 通过调用 addHello() 为用户创建一个问候语，传递用户名，并返回结果。 例子: 如果 fetchUsername() 返回 \u0026lsquo;Jenny\u0026rsquo;, 那么 greetUser() 返回 \u0026lsquo;Hello Jenny\u0026rsquo;.  第三部分：sayGoodbye()\n  编写一个函数 sayGoodbye()，它的功能如下。\n 不接受任何参数 捕获任何错误。 调用所提供的异步函数 logoutUser().    如果 logoutUser() 失败，sayGoodbye() 返回任何你喜欢的字符串。\n  如果 logoutUser() 成功，sayGoodbye() 返回字符串 '\u0026lt;result\u0026gt; Thanks, see you next time'，其中 \u0026lt;result\u0026gt; 是调用 logoutUser() 返回的字符串值。\n  String addHello(user) =\u0026gt; \u0026#39;Hello $user\u0026#39;; Future\u0026lt;String\u0026gt; greetUser() async { var username = await fetchUsername(); return addHello(username); } Future\u0026lt;String\u0026gt; sayGoodbye() async { try { var result = await logoutUser(); return \u0026#39;$resultThanks, see you next time\u0026#39;; } catch (e) { return \u0026#39;Failed to logout user: $e\u0026#39;; } } 下一步是什么？ 恭喜你，你已经完成了 codelab 的学习！如果你还想了解更多，这里有一些下一步的建议。\n 玩玩 DartPad。 尝试另一个 codelab。 学习更多关于 futures 和异步的知识。  Streams tutorial: 学习如何使用异步事件的序列。 来自 Google 的 Dart视频: 观看一个或多个关于异步编码的视频。或者，如果你喜欢，阅读基于这些视频的文章。(从隔离和事件循环开始。)   获取 Dart SDK。  如果你对使用嵌入式 DartPads 感兴趣，就像这个 codelab 一样，请看教程中使用 DartPad 的最佳实践。\n"},"name":"异步编程：futures、async、await。","published":"2020-06-27T00:00:00+08:00","summary":"这个 codelab 教你如何使用 futures、async 和 await 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。","type":"entry","url":"https://ohmyweekly.github.io/notes/futures-async-await/"},{"content":{"html":"\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch2 id=\"dart-help\"\u003e重要的概念\u003c/h2\u003e\n\u003cp\u003e与 Java 不同，Dart 没有关键字 \u0026ldquo;public\u0026rdquo;, \u0026ldquo;protected\u0026rdquo; 和 \u0026ldquo;private\u0026rdquo;。 如果标识符以下划线（\u003ccode\u003e_\u003c/code\u003e）开头，则它相对于库是私有的。 有关更多信息，参考\u003ca href=\"https://www.dartcn.com/guides/language/language-tour#%E5%BA%93%E5%92%8C%E5%8F%AF%E8%A7%81%E6%80%A7\"\u003e库和可见性\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"变量\"\u003e变量\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Bob\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 类型推断\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"kt\"\u003edynamic\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Bob\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 动态类型\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e  \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Bob\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 显式声明\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"默认值\"\u003e默认值\u003c/h3\u003e\n\u003cp\u003e未初始化的变量默认值是 \u003ccode\u003enull\u003c/code\u003e。即使变量是数字, 类型默认值也是 null, 因为在 Dart 中一切都是对象，数字类型也不例外。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003elineCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elineCount\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"final-和-const\"\u003efinal 和 const\u003c/h3\u003e\n\u003cp\u003e使用 \u003ccode\u003efinal\u003c/code\u003e 关键字声明的变量, 其值只能被设置一次, 使用 \u003ccode\u003econst\u003c/code\u003e 关键字声明的变量, 其值在编译时就已固定:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Bob\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 不使用类型注解\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003enickname\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Bobby\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Alice\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// Error: final 变量只能被设置一次\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003econst\u003c/code\u003e 声明一个在\u003cstrong\u003e编译\u003c/strong\u003e时就固定不变的值, 例如数字字面量、字符串字面量:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1000000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e              \u003cspan class=\"c1\"\u003e// 压力单位(dynes/cm2)\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eatm\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1.01325\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 一个标准大气压强\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"内置类型\"\u003e内置类型\u003c/h2\u003e\n\u003cp\u003eDart 语言支持以下内置类型:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e类型\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e字面量\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e对象\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eNumber\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2⁶³ -1\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eString\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lsquo;Hello\u0026rsquo;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eBoolean\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003etrue,false\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eList\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e[1,2,3]\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eSet\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e{\u0026lsquo;raku\u0026rsquo;,\u0026lsquo;perl\u0026rsquo;}\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eMap\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e{\u0026lsquo;lan\u0026rsquo;: \u0026lsquo;raku\u0026rsquo;}\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eRune\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\\u2665, \\u{1f600}\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eSymbol\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e#dadix, #bar\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n","text":"重要的概念 与 Java 不同，Dart 没有关键字 \u0026ldquo;public\u0026rdquo;, \u0026ldquo;protected\u0026rdquo; 和 \u0026ldquo;private\u0026rdquo;。 如果标识符以下划线（_）开头，则它相对于库是私有的。 有关更多信息，参考库和可见性。\n变量 var name = \u0026#39;Bob\u0026#39;; // 类型推断  dynamic name = \u0026#39;Bob\u0026#39;; // 动态类型 String name = \u0026#39;Bob\u0026#39;; // 显式声明 默认值 未初始化的变量默认值是 null。即使变量是数字, 类型默认值也是 null, 因为在 Dart 中一切都是对象，数字类型也不例外。\nint lineCount; assert(lineCount == null); final 和 const 使用 final 关键字声明的变量, 其值只能被设置一次, 使用 const 关键字声明的变量, 其值在编译时就已固定:\nfinal name = \u0026#39;Bob\u0026#39;; // 不使用类型注解 final String nickname = \u0026#39;Bobby\u0026#39;; name = \u0026#39;Alice\u0026#39;; // Error: final 变量只能被设置一次 const 声明一个在编译时就固定不变的值, 例如数字字面量、字符串字面量:\nconst bar = 1000000; // 压力单位(dynes/cm2) const double atm = 1.01325 * bar; // 一个标准大气压强 内置类型 Dart 语言支持以下内置类型:\n   类型 字面量 对象     Number 2⁶³ -1    String \u0026lsquo;Hello\u0026rsquo;    Boolean true,false    List [1,2,3]    Set {\u0026lsquo;raku\u0026rsquo;,\u0026lsquo;perl\u0026rsquo;}    Map {\u0026lsquo;lan\u0026rsquo;: \u0026lsquo;raku\u0026rsquo;}    Rune \\u2665, \\u{1f600}    Symbol #dadix, #bar     "},"name":"Dart 入门","published":"2020-06-25T00:00:00+08:00","summary":"Dart入门指南。","type":"entry","url":"https://ohmyweekly.github.io/notes/dart/"},{"content":{"html":"\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e这个代码实验室教你如何使用实现 \u003ca href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\"\u003eIterable\u003c/a\u003e类的集合-例如 \u003ca href=\"https://api.dart.dev/stable/dart-core/List-class.html\"\u003eList\u003c/a\u003e和 \u003ca href=\"https://api.dart.dev/stable/dart-core/Set-class.html\"\u003eSet\u003c/a\u003e。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。\u003c/p\u003e\n\u003cp\u003e使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\u003c/p\u003e\n\u003cp\u003e要想从这个 codelab 中获得最大的收获，你应该具备基本的 \u003ca href=\"https://dart.dev/samples\"\u003eDart 语法知识\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e本课程包括以下内容。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如何读取一个 Iterable 的元素。\u003c/li\u003e\n\u003cli\u003e如何检查一个 Iterable 的元素是否满足一个条件。\u003c/li\u003e\n\u003cli\u003e如何过滤一个 Iterable 的内容。\u003c/li\u003e\n\u003cli\u003e如何将一个 Iterable 的内容映射到不同的值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e估计完成这个代码实验所需的时间: 60分钟。\u003c/p\u003e\n\u003ch2 id=\"什么是集合\"\u003e什么是集合?\u003c/h2\u003e\n\u003cp\u003e集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。\u003c/p\u003e\n\u003cp\u003e集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://api.dart.dev/stable/dart-core/List-class.html\"\u003eList\u003c/a\u003e: 用来通过索引读取元素。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://api.dart.dev/stable/dart-core/Set-class.html\"\u003eSet\u003c/a\u003e: 用于包含只能出现一次的元素。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://api.dart.dev/stable/dart-core/Map-class.html\"\u003eMap\u003c/a\u003e：用于通过键来读取元素。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"什么是iterable\"\u003e什么是Iterable?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eIterable\u003c/code\u003e 是一个元素的集合，它可以被依次访问。\u003c/p\u003e\n\u003cp\u003e在 Dart 中，\u003ccode\u003eIterable\u003c/code\u003e 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 \u003ccode\u003eList\u003c/code\u003e 或 \u003ccode\u003eSet\u003c/code\u003e 来创建一个新的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eList\u003c/code\u003e 和 \u003ccode\u003eSet\u003c/code\u003e 都是 \u003ccode\u003eIterable\u003c/code\u003e，所以它们和 \u003ccode\u003eIterable\u003c/code\u003e 类有相同的方法和属性。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMap\u003c/code\u003e 在内部使用不同的数据结构，这取决于它的实现。例如，\u003ca href=\"https://api.dart.dev/stable/dart-collection/HashMap-class.html\"\u003eHashMap\u003c/a\u003e 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 \u003ccode\u003eMap\u003c/code\u003e 的 \u003ccode\u003eentries\u003c/code\u003e 或 \u003ccode\u003evalues\u003c/code\u003e 属性，\u003ccode\u003eMap\u003c/code\u003e 的元素也可以作为 \u003ccode\u003eIterable\u003c/code\u003e 对象读取。\u003c/p\u003e\n\u003cp\u003e这个例子显示了一个 \u003ccode\u003eint\u003c/code\u003e 的 \u003ccode\u003eList\u003c/code\u003e，它也是一个 \u003ccode\u003eint\u003c/code\u003e 的 \u003ccode\u003eIterable\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e与 \u003ccode\u003eList\u003c/code\u003e 的区别在于，使用 \u003ccode\u003eIterable\u003c/code\u003e，你无法保证按索引读取元素的效率。\u003ccode\u003eIterable\u003c/code\u003e 与 \u003ccode\u003eList\u003c/code\u003e 相比，没有 \u003ccode\u003e[]\u003c/code\u003e 操作符。\u003c/p\u003e\n\u003cp\u003e例如，考虑以下代码，这是\u003cstrong\u003e无效的\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你用 \u003ccode\u003e[]\u003c/code\u003e 读取元素，编译器会告诉你 \u003ccode\u003e'[]'\u003c/code\u003e 这个运算符没有为 \u003ccode\u003eIterable\u003c/code\u003e 类定义，这意味着在这种情况下你不能使用 \u003ccode\u003e[index]\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e你可以用 \u003ccode\u003eelementAt()\u003c/code\u003e 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eelementAt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e继续下一节，了解更多关于如何访问 \u003ccode\u003eIterable\u003c/code\u003e 的元素。\u003c/p\u003e\n\u003ch2 id=\"读取元素\"\u003e读取元素\u003c/h2\u003e\n\u003cp\u003e你可以使用 \u003ccode\u003efor-in\u003c/code\u003e 循环，依次读取一个迭代元素。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-for-in-循环\"\u003e例子: 使用 for-in 循环\u003c/h3\u003e\n\u003cp\u003e下面的例子展示了如何使用 \u003ccode\u003efor-in\u003c/code\u003e 循环读取元素。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Salad\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Popcorn\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Toast\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在幕后，\u003ccode\u003efor-in\u003c/code\u003e 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 \u003ccode\u003efor-in\u003c/code\u003e 更容易阅读和理解，而且不容易出错。\u003c/p\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIterable\u003c/strong\u003e: Dart \u003ca href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\"\u003eIterable\u003c/a\u003e 类。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIterator\u003c/strong\u003e: \u003ccode\u003efor-in\u003c/code\u003e 用来从一个 Iterable 对象中读取元素的对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efor-in\u003c/code\u003e 循环: 从一个 Iterable 对象中依次读取元素的简单方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"例子使用第一个和最后一个元素\"\u003e例子：使用第一个和最后一个元素\u003c/h3\u003e\n\u003cp\u003e在某些情况下，你只想访问一个 \u003ccode\u003eIterable\u003c/code\u003e 的第一个或最后一个元素。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003eIterable\u003c/code\u003e 类中，你不能直接访问元素，所以你不能调用 \u003ccode\u003eiterable[0]\u003c/code\u003e 来访问第一个元素。相反，你可以使用 \u003ccode\u003efirst\u003c/code\u003e，它可以获取第一个元素。\u003c/p\u003e\n\u003cp\u003e另外，使用 Iterable 类，你不能使用操作符 \u003ccode\u003e[]\u003c/code\u003e 来访问最后一个元素，但是你可以使用 \u003ccode\u003elast\u003c/code\u003e 属性。\u003c/p\u003e\n\u003cp\u003e因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 \u003ccode\u003elast\u003c/code\u003e 可能会很慢。在一个空的 \u003ccode\u003eIterable\u003c/code\u003e 上使用 \u003ccode\u003efirst\u003c/code\u003e 或 \u003ccode\u003elast\u003c/code\u003e 会导致一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIterable\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Salad\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Popcorn\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Toast\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;The first element is \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;The last element is \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，你看到了如何使用 \u003ccode\u003efirst\u003c/code\u003e 和 \u003ccode\u003elast\u003c/code\u003e 来获得一个 \u003ccode\u003eIterable\u003c/code\u003e 的第一个和最后一个元素。也可以找到满足条件的第一个元素。下一节将展示如何使用名为 \u003ccode\u003efirstWhere()\u003c/code\u003e 的方法来实现这一目标。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-firstwhere\"\u003e例子: 使用 firstWhere()\u003c/h3\u003e\n\u003cp\u003e你已经看到，你可以依次访问一个 \u003ccode\u003eIterable\u003c/code\u003e 的元素，你可以很容易地得到第一个或最后一个元素。\u003c/p\u003e\n\u003cp\u003e现在，你要学习如何使用 \u003ccode\u003efirstWhere()\u003c/code\u003e 来寻找满足某些条件的第一个元素。这个方法需要你传递一个谓词，它是一个函数，如果输入满足一定的条件就返回 true。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e例如，如果你想找到第一个超过 5 个字符的 \u003ccode\u003eString\u003c/code\u003e，你必须传递一个当元素大小大于 5 时返回 true 的谓词。\u003c/p\u003e\n\u003cp\u003e运行下面的例子，看看 \u003ccode\u003efirstWhere()\u003c/code\u003e 是如何工作的。你认为所有的函数都会给出相同的结果吗？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003epredicate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Salad\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Popcorn\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Toast\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Lasagne\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// You can find with a simple expression:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Or try using a function block:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Or even pass in a function reference:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epredicate\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// You can also use an `orElse` function in case no value is found!\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nl\"\u003eorElse:\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;None!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，你可以看到三种不同的方式来写一个谓词。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e作为一个表达式\u003c/strong\u003e: 测试代码中有一行使用了箭头语法(\u003ccode\u003e=\u0026gt;\u003c/code\u003e)。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e作为一个块\u003c/strong\u003e: 测试代码在括号和返回语句之间有多行。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e作为一个函数\u003c/strong\u003e: 测试代码在一个外部函数中，作为参数传递给 \u003ccode\u003efirstWhere()\u003c/code\u003e 方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e没有正确或错误的方式。使用最适合你的方式，并且让你的代码更容易阅读和理解。\u003c/p\u003e\n\u003cp\u003e在这个例子中，\u003ccode\u003efirstWhereWithOrElse()\u003c/code\u003e 调用 \u003ccode\u003efirstWhere()\u003c/code\u003e 时，使用了可选的命名参数 \u003ccode\u003eorElse\u003c/code\u003e，它在没有找到元素时提供了一个替代方案。在这种情况下，返回文本 \u0026ldquo;None!\u0026quot;，因为没有元素满足提供的条件。\u003c/p\u003e\n\u003cp\u003e注意：如果没有元素满足测试谓词，并且没有提供 \u003ccode\u003eorElse\u003c/code\u003e 参数，那么 \u003ccode\u003efirstWhere()\u003c/code\u003e 会抛出一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e快速回顾。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIterable\u003c/code\u003e 的元素必须按顺序访问。\u003c/li\u003e\n\u003cli\u003e迭代所有元素的最简单方法是使用 \u003ccode\u003efor-in\u003c/code\u003e 循环。\u003c/li\u003e\n\u003cli\u003e你可以使用 \u003ccode\u003efirst\u003c/code\u003e 和 \u003ccode\u003elast\u003c/code\u003e getters 来获取第一个和最后一个元素。\u003c/li\u003e\n\u003cli\u003e你也可以用 \u003ccode\u003efirstWhere()\u003c/code\u003e 找到满足条件的第一个元素。\u003c/li\u003e\n\u003cli\u003e你可以把测试谓词写成表达式、块或函数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关键术语。\u003c/p\u003e\n\u003cp\u003e谓词: 当某个条件被满足时，返回 \u003ccode\u003etrue\u003c/code\u003e 的函数。\u003c/p\u003e\n\u003ch3 id=\"练习-练习写一个测试谓词\"\u003e练习: 练习写一个测试谓词\u003c/h3\u003e\n\u003cp\u003e下面的练习是一个失败的单元测试，其中包含一个部分完整的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 \u003ccode\u003emain()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这个练习介绍了 \u003ccode\u003esingleWhere()\u003c/code\u003e 这个方法的工作原理类似于 \u003ccode\u003efirstWhere()\u003c/code\u003e，但在这种情况下，它只期望 \u003ccode\u003eIterable\u003c/code\u003e 中的一个元素满足谓词。如果 \u003ccode\u003eIterable\u003c/code\u003e 中超过一个或没有元素满足谓词条件，那么该方法会抛出一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e 异常。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esingleWhere()\u003c/code\u003e 对整个 \u003ccode\u003eIterable\u003c/code\u003e 进行步进，直到最后一个元素，如果  \u003ccode\u003eIterable\u003c/code\u003e 是无限的或包含一个大的元素集合，这可能会引起问题。\u003c/p\u003e\n\u003cp\u003e你的目标是实现满足以下条件的 \u003ccode\u003esingleWhere()\u003c/code\u003e 谓词。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e元素包含字符 \u0026lsquo;a\u0026rsquo;。\u003c/li\u003e\n\u003cli\u003e该元素以字符 \u0026lsquo;M\u0026rsquo; 开头。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e测试数据中的所有元素都是\u003ca href=\"https://api.dart.dev/stable/dart-core/String-class.html\"\u003e字符串\u003c/a\u003e，你可以查看类文档以获得帮助。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003esingleWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esingleWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estartsWith\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;M\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"检查条件\"\u003e检查条件\u003c/h2\u003e\n\u003cp\u003e在使用 \u003ccode\u003eIterable\u003c/code\u003e 时，有时你需要验证一个集合的所有元素是否满足某些条件。\u003c/p\u003e\n\u003cp\u003e你可能会想用 \u003ccode\u003efor-in\u003c/code\u003e 循环来写一个解决方案，比如这个:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然而，你可以使用 \u003ccode\u003eevery()\u003c/code\u003e 方法实现同样的目的:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用 \u003ccode\u003eevery()\u003c/code\u003e 方法可以使代码更易读、更紧凑、更不容易出错。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-any-和-every\"\u003e例子: 使用 any() 和 every()\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eIterable\u003c/code\u003e 类提供了两个可以用来验证条件的方法。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eany()\u003c/code\u003e: 如果至少有一个元素满足条件，则返回 true。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eevery()\u003c/code\u003e: 如果所有元素都满足条件，则返回 true。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e运行这个练习来看看它们的作用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Salad\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Popcorn\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Toast\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;At least one element contains \u0026#34;a\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;All elements have length \u0026gt;= 5\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003eany()\u003c/code\u003e 验证了至少一个元素包含字符 a，\u003ccode\u003eevery()\u003c/code\u003e 验证了所有元素的长度等于或大于 5。\u003c/p\u003e\n\u003cp\u003e运行代码后，尝试更改 \u003ccode\u003eany()\u003c/code\u003e 的谓词，使其返回 false:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Z\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;At least one element contains \u0026#34;Z\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;No element contains \u0026#34;Z\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你也可以使用 \u003ccode\u003eany()\u003c/code\u003e 来验证一个 \u003ccode\u003eIterable\u003c/code\u003e 中没有元素满足某个条件。\u003c/p\u003e\n\u003ch3 id=\"练习-验证一个-iterable-是否满足一个条件\"\u003e练习： 验证一个 Iterable 是否满足一个条件\u003c/h3\u003e\n\u003cp\u003e下面的练习提供了使用前面例子中描述的 \u003ccode\u003eany()\u003c/code\u003e 和 \u003ccode\u003eevery()\u003c/code\u003e 方法的练习。在本例中，你的工作对象是一组用户，由具有成员字段 \u003ccode\u003eage\u003c/code\u003e 的 \u003ccode\u003eUser\u003c/code\u003e 对象表示。\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003eany()\u003c/code\u003e 和 \u003ccode\u003eevery()\u003c/code\u003e 实现两个函数。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第1部分：实现 \u003ccode\u003eanyUserUnder18()\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e如果至少有一个用户是17岁或更小，则返回 true。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e第2部分：实现 \u003ccode\u003eeveryUserOver13()\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e如果所有用户都是14岁或以上，则返回 true。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eanyUserUnder18\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"m\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eeveryUserOver13\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eUser\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e快速回顾:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e虽然你可以使用 \u003ccode\u003efor-in\u003c/code\u003e 循环来检查条件，但还有更好的方法。\u003c/li\u003e\n\u003cli\u003e方法 \u003ccode\u003eany()\u003c/code\u003e 可以让你检查任何元素是否满足条件。\u003c/li\u003e\n\u003cli\u003e方法 \u003ccode\u003eevery()\u003c/code\u003e 可以让你验证所有元素是否满足条件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"过滤\"\u003e过滤\u003c/h2\u003e\n\u003cp\u003e前面的章节介绍了 \u003ccode\u003efirstWhere()\u003c/code\u003e 或 \u003ccode\u003esingleWhere()\u003c/code\u003e 等方法，这些方法可以帮助你找到满足某个谓词的元素。\u003c/p\u003e\n\u003cp\u003e但是如果你想找到满足某个条件的所有元素呢？你可以使用 \u003ccode\u003ewhere()\u003c/code\u003e 方法来实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEven\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003enumbers\u003c/code\u003e 包含一个有多个 \u003ccode\u003eint\u003c/code\u003e 值的 \u003ccode\u003eIterable\u003c/code\u003e，\u003ccode\u003ewhere()\u003c/code\u003e 可以找到所有偶数的数字。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ewhere()\u003c/code\u003e 的输出是另一个 \u003ccode\u003eIterable\u003c/code\u003e，你可以用它来迭代它或应用其他 \u003ccode\u003eIterable\u003c/code\u003e 方法。在下一个例子中，\u003ccode\u003ewhere()\u003c/code\u003e 的输出直接在 \u003ccode\u003efor-in\u003c/code\u003e 循环中使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEven\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"s1\"\u003e is even\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"例子-使用-where\"\u003e例子: 使用 where()\u003c/h3\u003e\n\u003cp\u003e运行这个例子，看看如何将 \u003ccode\u003ewhere()\u003c/code\u003e 与其他方法如 \u003ccode\u003eany()\u003c/code\u003e 一起使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEven\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"s1\"\u003e is even.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisNegative\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;evenNumbers contains negative numbers.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// If no element satisfies the predicate, the output is empty.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003elargeNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elargeNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;largeNumbers is empty!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003ewhere()\u003c/code\u003e 用于查找所有偶数，然后用 \u003ccode\u003eany()\u003c/code\u003e 检查结果是否包含负数。\u003c/p\u003e\n\u003cp\u003e在本例的后面，再次使用 \u003ccode\u003ewhere()\u003c/code\u003e 来查找所有大于1000的数字，由于没有，结果是一个空的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e注意：如果没有元素满足 \u003ccode\u003ewhere()\u003c/code\u003e 中的谓词，那么该方法返回一个空的 \u003ccode\u003eIterable\u003c/code\u003e。与 \u003ccode\u003esingleWhere()\u003c/code\u003e 或 \u003ccode\u003efirstWhere()\u003c/code\u003e 不同，\u003ccode\u003ewhere()\u003c/code\u003e 不会抛出 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e 异常。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-takewhile\"\u003e例子: 使用 takeWhile\u003c/h3\u003e\n\u003cp\u003e方法 \u003ccode\u003etakeWhile()\u003c/code\u003e 和 \u003ccode\u003eskipWhile()\u003c/code\u003e 也可以帮助你从一个 \u003ccode\u003eIterable\u003c/code\u003e 中过滤元素。\u003c/p\u003e\n\u003cp\u003e运行这个例子，看看 \u003ccode\u003etakeWhile()\u003c/code\u003e 和 \u003ccode\u003eskipWhile()\u003c/code\u003e 如何分割一个包含数字的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbersUntilZero\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etakeWhile\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Numbers until 0: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumbersUntilZero\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbersAfterZero\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eskipWhile\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Numbers after 0: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumbersAfterZero\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eNumbers until 0: (1, 3, -2)\nNumbers after 0: (0, 4, 5)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003etakeWhile()\u003c/code\u003e 返回一个 \u003ccode\u003eIterable\u003c/code\u003e，它包含了通往满足谓词的元素的所有元素。另一方面， \u003ccode\u003eskipWhile()\u003c/code\u003e 返回一个 \u003ccode\u003eIterable\u003c/code\u003e，同时跳过满足谓词的元素之前的所有元素。请注意，满足谓词的元素也会被包含在内。\u003c/p\u003e\n\u003cp\u003e运行该示例后，将 \u003ccode\u003etakeWhile()\u003c/code\u003e 改为取元素，直到到达第一个负数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbersUntilNegative\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etakeWhile\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisNegative\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，条件 \u003ccode\u003enumber.isNegative\u003c/code\u003e 是用 \u003ccode\u003e!\u003c/code\u003e 否定的。\u003c/p\u003e\n\u003ch3 id=\"练习-从列表中过滤元素\"\u003e练习: 从列表中过滤元素\u003c/h3\u003e\n\u003cp\u003e下面的练习提供了使用上一练习中的 \u003ccode\u003eUser\u003c/code\u003e 类的 \u003ccode\u003ewhere()\u003c/code\u003e 方法的练习。\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003ewhere()\u003c/code\u003e 实现两个函数。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第1部分：实现 \u003ccode\u003efilterUnder21()\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e返回一个包含所有21岁以上用户的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e第2部分：实现 \u003ccode\u003efindShortNamed()\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e返回一个包含所有名字长度为 3 或更少的用户的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efilterUnder21\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"m\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efindShortNamed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eUser\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e快速回顾:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用 \u003ccode\u003ewhere()\u003c/code\u003e 过滤一个 \u003ccode\u003eIterable\u003c/code\u003e 的元素。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewhere()\u003c/code\u003e 的输出是另一个 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003etakeWhile()\u003c/code\u003e 和 \u003ccode\u003eskipWhile()\u003c/code\u003e 来获取元素，直到满足一个条件或之后。\u003c/li\u003e\n\u003cli\u003e这些方法的输出可以是一个空的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"map\"\u003eMap\u003c/h2\u003e\n\u003cp\u003e通过 \u003ccode\u003emap()\u003c/code\u003e 方法映射 \u003ccode\u003eIterables\u003c/code\u003e，你可以在每个元素上应用一个函数，用一个新的元素替换每个元素。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"m\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003eIterable\u003c/code\u003e 数字的每个元素都被乘以 10。\u003c/p\u003e\n\u003cp\u003e你也可以使用 \u003ccode\u003emap()\u003c/code\u003e 将一个元素转换为不同的对象-例如，将所有 \u003ccode\u003eint\u003c/code\u003e 转换为 \u003ccode\u003eString\u003c/code\u003e，在下面的例子中可以看到。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意：\u003ccode\u003emap()\u003c/code\u003e 返回一个懒惰的 \u003ccode\u003eIterable\u003c/code\u003e，这意味着只有在元素被迭代时才会调用所提供的函数。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-map-改变元素\"\u003e例子: 使用 map 改变元素\u003c/h3\u003e\n\u003cp\u003e运行这个例子，看看如何使用 \u003ccode\u003emap()\u003c/code\u003e 将一个 \u003ccode\u003eIterable\u003c/code\u003e 中的所有元素乘以2，你认为输出会是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbersByTwo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Numbers: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumbersByTwo\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"练习-映射到不同类型\"\u003e练习: 映射到不同类型\u003c/h3\u003e\n\u003cp\u003e在前面的例子中，你把一个 \u003ccode\u003eIterable\u003c/code\u003e 的元素乘以2，输入和输出都是 \u003ccode\u003eint\u003c/code\u003e 的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在这个练习中，你的代码接收一个 \u003ccode\u003eUser\u003c/code\u003e的 \u003ccode\u003eIterable\u003c/code\u003e，你需要返回一个包含用户名和年龄的字符串的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eIterable\u003c/code\u003e 中的每个字符串必须遵循这样的格式。\u003ccode\u003e'{name} is {age}'\u003c/code\u003e-例如 \u003ccode\u003e'Alice is 21'\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egetNameAndAges\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e is \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eUser\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e快速回顾:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emap()\u003c/code\u003e 将一个函数应用于一个 \u003ccode\u003eIterable\u003c/code\u003e 的所有元素。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emap()\u003c/code\u003e 的输出是另一个 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e在 \u003ccode\u003eIterable\u003c/code\u003e 被迭代之前，函数不会被计算。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"练习-把所有的东西放在一起\"\u003e练习: 把所有的东西放在一起\u003c/h2\u003e\n\u003cp\u003e现在是练习所学知识的时候了，在最后一个练习中。\u003c/p\u003e\n\u003cp\u003e这个练习提供了类 \u003ccode\u003eEmailAddress\u003c/code\u003e，它有一个构造函数，接收一个字符串。另一个提供的函数是 \u003ccode\u003eisValidEmailAddress()\u003c/code\u003e，它测试一个电子邮件地址是否有效。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e构造函数/函数\u003c/th\u003e\n\u003cth\u003e类型签名\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eEmailAddress()\u003c/td\u003e\n\u003ctd\u003eEmailAddress(String address)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e为指定的地址创建一个 EmailAddress。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eisValidEmailAddress()\u003c/td\u003e\n\u003ctd\u003ebool isValidEmailAddress(EmailAddress)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e如果提供的 EmailAddress 有效，返回 true。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e编写以下代码。\u003c/p\u003e\n\u003cp\u003e第1部分：实现 \u003ccode\u003eparseEmailAddresses()\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写函数 \u003ccode\u003eparseEmailAddresses()\u003c/code\u003e，它接收一个包含电子邮件地址的 \u003ccode\u003eIterable\u0026lt;String\u0026gt;\u003c/code\u003e，并返回一个 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用方法 \u003ccode\u003emap()\u003c/code\u003e 从 \u003ccode\u003eString\u003c/code\u003e 映射到 \u003ccode\u003eEmailAddress\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用构造函数 \u003ccode\u003eEmailAddress(String)\u003c/code\u003e 创建 \u003ccode\u003eEmailAddress\u003c/code\u003e 对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第二部分：实现 \u003ccode\u003eanyInvalidEmailAddress()\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写函数 \u003ccode\u003eanyInvalidEmailAddress()\u003c/code\u003e，它接收一个 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e，并在 \u003ccode\u003eIterable\u003c/code\u003e 中的任何 \u003ccode\u003eEmailAddress\u003c/code\u003e 无效时返回 true。\u003c/li\u003e\n\u003cli\u003e使用方法 \u003ccode\u003eany()\u003c/code\u003e 和提供的函 \u003ccode\u003eisValidEmailAddress()\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第3部分：实现 \u003ccode\u003evalidEmailAddresses()\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写函数 \u003ccode\u003evalidEmailAddresses()\u003c/code\u003e，它接收一个 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e 并返回另一个只包含有效地址的 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用方法 \u003ccode\u003ewhere()\u003c/code\u003e 来过滤 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用提供的函数 \u003ccode\u003eisValidEmailAddress()\u003c/code\u003e 来评估一个 \u003ccode\u003eEmailAddress\u003c/code\u003e 是否有效。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eparseEmailAddresses\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eanyInvalidEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eemails\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eemails\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eisValidEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evalidEmailAddresses\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eemails\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eemails\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eisValidEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eEmailAddress\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"kd\"\u003eoperator\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eidentical\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eother\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n              \u003cspan class=\"n\"\u003eruntimeType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eruntimeType\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n              \u003cspan class=\"n\"\u003eaddress\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003ehashCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashCode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;EmailAddress{address: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"s1\"\u003e}\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"下一步是什么\"\u003e下一步是什么?\u003c/h2\u003e\n\u003cp\u003e恭喜你，你完成了 codelab 的学习! 如果你想了解更多，这里有一些下一步的建议。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e玩玩 \u003ca href=\"https://dartpad.dev/\"\u003eDartPad\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e试试另一个\u003ca href=\"https://dart.dev/codelabs\"\u003e代码实验\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e阅读 \u003ca href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\"\u003eIterable API\u003c/a\u003e 参考资料，了解本 codelab 未涉及的方法。\u003c/li\u003e\n\u003c/ul\u003e\n","text":"这个代码实验室教你如何使用实现 Iterable类的集合-例如 List和 Set。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。\n使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\n要想从这个 codelab 中获得最大的收获，你应该具备基本的 Dart 语法知识。\n本课程包括以下内容。\n 如何读取一个 Iterable 的元素。 如何检查一个 Iterable 的元素是否满足一个条件。 如何过滤一个 Iterable 的内容。 如何将一个 Iterable 的内容映射到不同的值。  估计完成这个代码实验所需的时间: 60分钟。\n什么是集合? 集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。\n集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:\n List: 用来通过索引读取元素。 Set: 用于包含只能出现一次的元素。 Map：用于通过键来读取元素。  什么是Iterable? Iterable 是一个元素的集合，它可以被依次访问。\n在 Dart 中，Iterable 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 List 或 Set 来创建一个新的 Iterable。\nList 和 Set 都是 Iterable，所以它们和 Iterable 类有相同的方法和属性。\nMap 在内部使用不同的数据结构，这取决于它的实现。例如，HashMap 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 Map 的 entries 或 values 属性，Map 的元素也可以作为 Iterable 对象读取。\n这个例子显示了一个 int 的 List，它也是一个 int 的 Iterable:\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; 与 List 的区别在于，使用 Iterable，你无法保证按索引读取元素的效率。Iterable 与 List 相比，没有 [] 操作符。\n例如，考虑以下代码，这是无效的:\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; int value = iterable[1]; 如果你用 [] 读取元素，编译器会告诉你 '[]' 这个运算符没有为 Iterable 类定义，这意味着在这种情况下你不能使用 [index]。\n你可以用 elementAt() 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; int value = iterable.elementAt(1); 继续下一节，了解更多关于如何访问 Iterable 的元素。\n读取元素 你可以使用 for-in 循环，依次读取一个迭代元素。\n例子: 使用 for-in 循环 下面的例子展示了如何使用 for-in 循环读取元素。\nvoid main() { var iterable = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; for (var element in iterable) { print(element); } } 在幕后，for-in 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 for-in 更容易阅读和理解，而且不容易出错。\n关键术语:\n Iterable: Dart Iterable 类。 Iterator: for-in 用来从一个 Iterable 对象中读取元素的对象。 for-in 循环: 从一个 Iterable 对象中依次读取元素的简单方法。  例子：使用第一个和最后一个元素 在某些情况下，你只想访问一个 Iterable 的第一个或最后一个元素。\n在 Iterable 类中，你不能直接访问元素，所以你不能调用 iterable[0] 来访问第一个元素。相反，你可以使用 first，它可以获取第一个元素。\n另外，使用 Iterable 类，你不能使用操作符 [] 来访问最后一个元素，但是你可以使用 last 属性。\n因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 last 可能会很慢。在一个空的 Iterable 上使用 first 或 last 会导致一个 StateError。\nvoid main() { Iterable iterable = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; print(\u0026#39;The first element is ${iterable.first}\u0026#39;); print(\u0026#39;The last element is ${iterable.last}\u0026#39;); } 在这个例子中，你看到了如何使用 first 和 last 来获得一个 Iterable 的第一个和最后一个元素。也可以找到满足条件的第一个元素。下一节将展示如何使用名为 firstWhere() 的方法来实现这一目标。\n例子: 使用 firstWhere() 你已经看到，你可以依次访问一个 Iterable 的元素，你可以很容易地得到第一个或最后一个元素。\n现在，你要学习如何使用 firstWhere() 来寻找满足某些条件的第一个元素。这个方法需要你传递一个谓词，它是一个函数，如果输入满足一定的条件就返回 true。\nString element = iterable.firstWhere((element) =\u0026gt; element.length \u0026gt; 5); 例如，如果你想找到第一个超过 5 个字符的 String，你必须传递一个当元素大小大于 5 时返回 true 的谓词。\n运行下面的例子，看看 firstWhere() 是如何工作的。你认为所有的函数都会给出相同的结果吗？\nbool predicate(String element) { return element.length \u0026gt; 5; } main() { var items = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;, \u0026#39;Lasagne\u0026#39;]; // You can find with a simple expression:  var element1 = items.firstWhere((element) =\u0026gt; element.length \u0026gt; 5); print(element1); // Or try using a function block:  var element2 = items.firstWhere((element) { return element.length \u0026gt; 5; }); print(element2); // Or even pass in a function reference:  var element3 = items.firstWhere(predicate); print(element3); // You can also use an `orElse` function in case no value is found!  var element4 = items.firstWhere( (element) =\u0026gt; element.length \u0026gt; 10, orElse: () =\u0026gt; \u0026#39;None!\u0026#39;, ); print(element4); } 在这个例子中，你可以看到三种不同的方式来写一个谓词。\n 作为一个表达式: 测试代码中有一行使用了箭头语法(=\u0026gt;)。 作为一个块: 测试代码在括号和返回语句之间有多行。 作为一个函数: 测试代码在一个外部函数中，作为参数传递给 firstWhere() 方法。  没有正确或错误的方式。使用最适合你的方式，并且让你的代码更容易阅读和理解。\n在这个例子中，firstWhereWithOrElse() 调用 firstWhere() 时，使用了可选的命名参数 orElse，它在没有找到元素时提供了一个替代方案。在这种情况下，返回文本 \u0026ldquo;None!\u0026quot;，因为没有元素满足提供的条件。\n注意：如果没有元素满足测试谓词，并且没有提供 orElse 参数，那么 firstWhere() 会抛出一个 StateError。\n快速回顾。\n Iterable 的元素必须按顺序访问。 迭代所有元素的最简单方法是使用 for-in 循环。 你可以使用 first 和 last getters 来获取第一个和最后一个元素。 你也可以用 firstWhere() 找到满足条件的第一个元素。 你可以把测试谓词写成表达式、块或函数。  关键术语。\n谓词: 当某个条件被满足时，返回 true 的函数。\n练习: 练习写一个测试谓词 下面的练习是一个失败的单元测试，其中包含一个部分完整的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 main()。\n这个练习介绍了 singleWhere() 这个方法的工作原理类似于 firstWhere()，但在这种情况下，它只期望 Iterable 中的一个元素满足谓词。如果 Iterable 中超过一个或没有元素满足谓词条件，那么该方法会抛出一个 StateError 异常。\nsingleWhere() 对整个 Iterable 进行步进，直到最后一个元素，如果 Iterable 是无限的或包含一个大的元素集合，这可能会引起问题。\n你的目标是实现满足以下条件的 singleWhere() 谓词。\n 元素包含字符 \u0026lsquo;a\u0026rsquo;。 该元素以字符 \u0026lsquo;M\u0026rsquo; 开头。  测试数据中的所有元素都是字符串，你可以查看类文档以获得帮助。\nString singleWhere(Iterable\u0026lt;String\u0026gt; items) { return items.singleWhere((element) =\u0026gt; element.startsWith(\u0026#39;M\u0026#39;) \u0026amp;\u0026amp; element.contains(\u0026#39;a\u0026#39;)); } 检查条件 在使用 Iterable 时，有时你需要验证一个集合的所有元素是否满足某些条件。\n你可能会想用 for-in 循环来写一个解决方案，比如这个:\nfor (var item in items) { if (item.length \u0026lt; 5) { return false; } } return true; 然而，你可以使用 every() 方法实现同样的目的:\nreturn items.every((element) =\u0026gt; element.length \u0026gt;= 5); 使用 every() 方法可以使代码更易读、更紧凑、更不容易出错。\n例子: 使用 any() 和 every() Iterable 类提供了两个可以用来验证条件的方法。\n any(): 如果至少有一个元素满足条件，则返回 true。 every(): 如果所有元素都满足条件，则返回 true。  运行这个练习来看看它们的作用。\nvoid main() { var items = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; if (items.any((element) =\u0026gt; element.contains(\u0026#39;a\u0026#39;))) { print(\u0026#39;At least one element contains \u0026#34;a\u0026#34;\u0026#39;); } if (items.every((element) =\u0026gt; element.length \u0026gt;= 5)) { print(\u0026#39;All elements have length \u0026gt;= 5\u0026#39;); } } 在这个例子中，any() 验证了至少一个元素包含字符 a，every() 验证了所有元素的长度等于或大于 5。\n运行代码后，尝试更改 any() 的谓词，使其返回 false:\nif (items.any((element) =\u0026gt; element.contains(\u0026#39;Z\u0026#39;))) { print(\u0026#39;At least one element contains \u0026#34;Z\u0026#34;\u0026#39;); } else { print(\u0026#39;No element contains \u0026#34;Z\u0026#34;\u0026#39;); } 你也可以使用 any() 来验证一个 Iterable 中没有元素满足某个条件。\n练习： 验证一个 Iterable 是否满足一个条件 下面的练习提供了使用前面例子中描述的 any() 和 every() 方法的练习。在本例中，你的工作对象是一组用户，由具有成员字段 age 的 User 对象表示。\n使用 any() 和 every() 实现两个函数。\n 第1部分：实现 anyUserUnder18()。  如果至少有一个用户是17岁或更小，则返回 true。   第2部分：实现 everyUserOver13()。  如果所有用户都是14岁或以上，则返回 true。    bool anyUserUnder18(Iterable\u0026lt;User\u0026gt; users) { return users.any((user) =\u0026gt; user.age \u0026lt; 18); } bool everyUserOver13(Iterable\u0026lt;User\u0026gt; users) { return users.every((user) =\u0026gt; user.age \u0026gt; 13); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n 虽然你可以使用 for-in 循环来检查条件，但还有更好的方法。 方法 any() 可以让你检查任何元素是否满足条件。 方法 every() 可以让你验证所有元素是否满足条件。  过滤 前面的章节介绍了 firstWhere() 或 singleWhere() 等方法，这些方法可以帮助你找到满足某个谓词的元素。\n但是如果你想找到满足某个条件的所有元素呢？你可以使用 where() 方法来实现。\nvar evenNumbers = numbers.where((number) =\u0026gt; number.isEven); 在这个例子中，numbers 包含一个有多个 int 值的 Iterable，where() 可以找到所有偶数的数字。\nwhere() 的输出是另一个 Iterable，你可以用它来迭代它或应用其他 Iterable 方法。在下一个例子中，where() 的输出直接在 for-in 循环中使用。\nvar evenNumbers = numbers.where((number) =\u0026gt; number.isEven); for (var number in evenNumbers) { print(\u0026#39;$numberis even\u0026#39;); } 例子: 使用 where() 运行这个例子，看看如何将 where() 与其他方法如 any() 一起使用。\nmain() { var evenNumbers = [1, -2, 3, 42].where((number) =\u0026gt; number.isEven); for (var number in evenNumbers) { print(\u0026#39;$numberis even.\u0026#39;); } if (evenNumbers.any((number) =\u0026gt; number.isNegative)) { print(\u0026#39;evenNumbers contains negative numbers.\u0026#39;); } // If no element satisfies the predicate, the output is empty.  var largeNumbers = evenNumbers.where((number) =\u0026gt; number \u0026gt; 1000); if (largeNumbers.isEmpty) { print(\u0026#39;largeNumbers is empty!\u0026#39;); } } 在这个例子中，where() 用于查找所有偶数，然后用 any() 检查结果是否包含负数。\n在本例的后面，再次使用 where() 来查找所有大于1000的数字，由于没有，结果是一个空的 Iterable。\n注意：如果没有元素满足 where() 中的谓词，那么该方法返回一个空的 Iterable。与 singleWhere() 或 firstWhere() 不同，where() 不会抛出 StateError 异常。\n例子: 使用 takeWhile 方法 takeWhile() 和 skipWhile() 也可以帮助你从一个 Iterable 中过滤元素。\n运行这个例子，看看 takeWhile() 和 skipWhile() 如何分割一个包含数字的 Iterable。\nmain() { var numbers = [1, 3, -2, 0, 4, 5]; var numbersUntilZero = numbers.takeWhile((number) =\u0026gt; number != 0); print(\u0026#39;Numbers until 0: $numbersUntilZero\u0026#39;); var numbersAfterZero = numbers.skipWhile((number) =\u0026gt; number != 0); print(\u0026#39;Numbers after 0: $numbersAfterZero\u0026#39;); } 输出如下:\nNumbers until 0: (1, 3, -2) Numbers after 0: (0, 4, 5) 在这个例子中，takeWhile() 返回一个 Iterable，它包含了通往满足谓词的元素的所有元素。另一方面， skipWhile() 返回一个 Iterable，同时跳过满足谓词的元素之前的所有元素。请注意，满足谓词的元素也会被包含在内。\n运行该示例后，将 takeWhile() 改为取元素，直到到达第一个负数。\nvar numbersUntilNegative = numbers.takeWhile((number) =\u0026gt; !number.isNegative); 注意，条件 number.isNegative 是用 ! 否定的。\n练习: 从列表中过滤元素 下面的练习提供了使用上一练习中的 User 类的 where() 方法的练习。\n使用 where() 实现两个函数。\n 第1部分：实现 filterUnder21()。  返回一个包含所有21岁以上用户的 Iterable。   第2部分：实现 findShortNamed()。  返回一个包含所有名字长度为 3 或更少的用户的 Iterable。    Iterable\u0026lt;User\u0026gt; filterUnder21(Iterable\u0026lt;User\u0026gt; users) { return users.where((user) =\u0026gt; user.age \u0026gt;= 21); } Iterable\u0026lt;User\u0026gt; findShortNamed(Iterable\u0026lt;User\u0026gt; users) { return users.where((user) =\u0026gt; user.name.length \u0026lt;= 3); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n 用 where() 过滤一个 Iterable 的元素。 where() 的输出是另一个 Iterable。 使用 takeWhile() 和 skipWhile() 来获取元素，直到满足一个条件或之后。 这些方法的输出可以是一个空的 Iterable。  Map 通过 map() 方法映射 Iterables，你可以在每个元素上应用一个函数，用一个新的元素替换每个元素。\nIterable\u0026lt;int\u0026gt; output = numbers.map((number) =\u0026gt; number * 10); 在这个例子中，Iterable 数字的每个元素都被乘以 10。\n你也可以使用 map() 将一个元素转换为不同的对象-例如，将所有 int 转换为 String，在下面的例子中可以看到。\nIterable\u0026lt;String\u0026gt; output = numbers.map((number) =\u0026gt; number.toString()); 注意：map() 返回一个懒惰的 Iterable，这意味着只有在元素被迭代时才会调用所提供的函数。\n例子: 使用 map 改变元素 运行这个例子，看看如何使用 map() 将一个 Iterable 中的所有元素乘以2，你认为输出会是什么？\nmain() { var numbersByTwo = [1, -2, 3, 42].map((number) =\u0026gt; number * 2); print(\u0026#39;Numbers: $numbersByTwo.\u0026#39;); } 练习: 映射到不同类型 在前面的例子中，你把一个 Iterable 的元素乘以2，输入和输出都是 int 的 Iterable。\n在这个练习中，你的代码接收一个 User的 Iterable，你需要返回一个包含用户名和年龄的字符串的 Iterable。\nIterable 中的每个字符串必须遵循这样的格式。'{name} is {age}'-例如 'Alice is 21'。\nIterable\u0026lt;String\u0026gt; getNameAndAges(Iterable\u0026lt;User\u0026gt; users) { return users.map((user) =\u0026gt; \u0026#39;${user.name}is ${user.age}\u0026#39;); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n map() 将一个函数应用于一个 Iterable 的所有元素。 map() 的输出是另一个 Iterable。 在 Iterable 被迭代之前，函数不会被计算。  练习: 把所有的东西放在一起 现在是练习所学知识的时候了，在最后一个练习中。\n这个练习提供了类 EmailAddress，它有一个构造函数，接收一个字符串。另一个提供的函数是 isValidEmailAddress()，它测试一个电子邮件地址是否有效。\n   构造函数/函数 类型签名 描述     EmailAddress() EmailAddress(String address) 为指定的地址创建一个 EmailAddress。   isValidEmailAddress() bool isValidEmailAddress(EmailAddress) 如果提供的 EmailAddress 有效，返回 true。    编写以下代码。\n第1部分：实现 parseEmailAddresses()。\n 编写函数 parseEmailAddresses()，它接收一个包含电子邮件地址的 Iterable\u0026lt;String\u0026gt;，并返回一个 Iterable\u0026lt;EmailAddress\u0026gt;。 使用方法 map() 从 String 映射到 EmailAddress。 使用构造函数 EmailAddress(String) 创建 EmailAddress 对象。  第二部分：实现 anyInvalidEmailAddress()。\n 编写函数 anyInvalidEmailAddress()，它接收一个 Iterable\u0026lt;EmailAddress\u0026gt;，并在 Iterable 中的任何 EmailAddress 无效时返回 true。 使用方法 any() 和提供的函 isValidEmailAddress()。  第3部分：实现 validEmailAddresses()。\n 编写函数 validEmailAddresses()，它接收一个 Iterable\u0026lt;EmailAddress\u0026gt; 并返回另一个只包含有效地址的 Iterable\u0026lt;EmailAddress\u0026gt;。 使用方法 where() 来过滤 Iterable\u0026lt;EmailAddress\u0026gt;。 使用提供的函数 isValidEmailAddress() 来评估一个 EmailAddress 是否有效。  Iterable\u0026lt;EmailAddress\u0026gt; parseEmailAddresses(Iterable\u0026lt;String\u0026gt; strings) { return strings.map((s) =\u0026gt; EmailAddress(s)); } bool anyInvalidEmailAddress(Iterable\u0026lt;EmailAddress\u0026gt; emails) { return emails.any((email) =\u0026gt; !isValidEmailAddress(email)); } Iterable\u0026lt;EmailAddress\u0026gt; validEmailAddresses(Iterable\u0026lt;EmailAddress\u0026gt; emails) { return emails.where((email) =\u0026gt; isValidEmailAddress(email)); } class EmailAddress { String address; EmailAddress(this.address); @override bool operator ==(Object other) =\u0026gt; identical(this, other) || other is EmailAddress \u0026amp;\u0026amp; runtimeType == other.runtimeType \u0026amp;\u0026amp; address == other.address; @override int get hashCode =\u0026gt; address.hashCode; @override String toString() { return \u0026#39;EmailAddress{address: $address}\u0026#39;; } } 下一步是什么? 恭喜你，你完成了 codelab 的学习! 如果你想了解更多，这里有一些下一步的建议。\n 玩玩 DartPad。 试试另一个代码实验。 阅读 Iterable API 参考资料，了解本 codelab 未涉及的方法。  "},"name":"Dart 可迭代集合","published":"2020-06-25T00:00:00+08:00","summary":"Dart可迭代集合。","type":"entry","url":"https://ohmyweekly.github.io/notes/dart-iterable-collections/"},{"content":{"html":"\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch2 id=\"字符串插值\"\u003e字符串插值\u003c/h2\u003e\n\u003cp\u003e使用 \u003ccode\u003e${expression}\u003c/code\u003e 将表达式的值放到字符串里面。如果表达式是一个标识符, 就可以省略 \u003ccode\u003e{}\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e下面是字符串插值的例子:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e字符串\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e结果\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lsquo;${3 + 2}\u0026rsquo;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lsquo;5\u0026rsquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lsquo;${\u0026ldquo;word\u0026rdquo;.toUpperCase()}\u0026rsquo;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lsquo;WORD\u0026rsquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lsquo;$myObject\u0026rsquo;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eThe value of myObject.toString()\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"代码示例\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e下面的函数接收两个整数作为参数。使其返回一个包含两个整数的字符串，并以空格分隔。例如 \u003ccode\u003estringify(2, 3)\u003c/code\u003e 应该返回 \u0026lsquo;2 3\u0026rsquo;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003estringify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"null-无感知操作符\"\u003eNull 无感知操作符\u003c/h2\u003e\n\u003cp\u003eDart 提供了一些方便的操作符来处理可能为空的值。其中一个是 \u003ccode\u003e??=\u003c/code\u003e 赋值运算符，只有当一个变量当前为空时，它才会给这个变量赋值:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// a 的初始值为 null\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e??=\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 打印 3\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e??=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 仍然打印 3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e另一个 null-aware 操作符是 \u003ccode\u003e??\u003c/code\u003e，它返回其左边的表达式，除非该表达式的值为 null，在这种情况下，它计算并返回其右边的表达式:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 打印 1\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"m\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 打印 12 \n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-1\"\u003e代码示例\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;a string\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Unassigned objects are null by default.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// makes \u0026#39;a string\u0026#39; be assigned to baz.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ebaz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eupdateSomeVars\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// makes \u0026#39;a string\u0026#39; be assigned to bar.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003ebar\u003c/span\u003e \u003cspan class=\"o\"\u003e??=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;a string\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"有条件的属性访问\"\u003e有条件的属性访问\u003c/h2\u003e\n\u003cp\u003e要保护对对象的一个可能为空的属性或方法的访问，请在点(.)前加上一个问号(?):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emyObject\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esomeProperty\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上述代码等同于以下代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emyObject\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003emyObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esomeProperty\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以在一个表达式中把 \u003ccode\u003e?.\u003c/code\u003e 的多个使用链接在一起:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emyObject\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esomeProperty\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esomeMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果 \u003ccode\u003emyObject\u003c/code\u003e 或 \u003ccode\u003emyObject.someProperty\u003c/code\u003e 为 null，前面的代码将返回 null(并且从不调用 \u003ccode\u003esomeMethod()\u003c/code\u003e)。\u003c/p\u003e\n\u003ch3 id=\"代码示例-2\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e尝试使用条件属性访问来完成下面的代码片段。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// This method should return the uppercase version of `str`\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// or null if `str` is null.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eupperCaseIt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Try conditionally accessing the `toUpperCase` method here.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoUpperCase\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"集合字面量\"\u003e集合字面量\u003c/h2\u003e\n\u003cp\u003eDart 内置了对列表、映射和集合的支持。你可以使用字面量创建它们:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaListOfStrings\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;one\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;two\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;three\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaSetOfStrings\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;one\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;two\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;three\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaMapOfStringsToInts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;one\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;two\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;three\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e  \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDart 的类型推理可以为你分配类型给这些变量。在本例中，推断的类型是 \u003ccode\u003eList\u0026lt;String\u0026gt;\u003c/code\u003e、\u003ccode\u003eSet\u0026lt;String\u0026gt;\u003c/code\u003e 和 \u003ccode\u003eMap\u0026lt;String, int\u0026gt;\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e或者你可以自己指定类型:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaListOfInts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaSetOfInts\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaMapOfIntToDouble\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当你用子类型的内容初始化一个列表，但仍然希望列表是 \u003ccode\u003eList\u0026lt;BaseType\u0026gt;\u003c/code\u003e 时，指定类型是很方便的:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaListOfBaseType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eBaseType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubType\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eSubType\u003c/span\u003e\u003cspan class=\"p\"\u003e()];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-3\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e尝试将以下变量设置为指定的值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Assign this a list containing \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, and \u0026#39;c\u0026#39; in that order:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaListOfStrings\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Assign this a set containing 3, 4, and 5:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaSetOfInts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Assign this a map of String to int so that aMapOfStringsToInts[\u0026#39;myKey\u0026#39;] returns 12:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaMapOfStringsToInts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;myKey\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Assign this an empty List\u0026lt;double\u0026gt;:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eanEmptyListOfDouble\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Assign this an empty Set\u0026lt;String\u0026gt;:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eanEmptySetOfString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Assign this an empty Map of double to int:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eanEmptyMapOfDoublesToInts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"箭头语法\"\u003e箭头语法\u003c/h2\u003e\n\u003cp\u003e你可能在 Dart 代码中看到过 \u003ccode\u003e=\u0026gt;\u003c/code\u003e 符号。这种箭头语法是一种定义函数的方式，该函数执行其右边的表达式并返回其值。\u003c/p\u003e\n\u003cp\u003e例如，考虑这个对 \u003ccode\u003eList\u003c/code\u003e 类的 \u003ccode\u003eany()\u003c/code\u003e 方法的调用:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003ehasEmpty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eaListOfStrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里有一个更简单的方法来写这个代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003ehasEmpty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eaListOfStrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-4\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e试着完成以下使用箭头语法的语句:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyClass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_value1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_value2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_value3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Returns the product of the above values:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003eproduct\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_value1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003e_value2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003e_value3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \n  \u003cspan class=\"c1\"\u003e// Adds one to _value1:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eincrementValue1\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_value1\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n  \n  \u003cspan class=\"c1\"\u003e// Returns a string containing each item in the\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// list, separated by commas (e.g. \u0026#39;a,b,c\u0026#39;): \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ejoinWithCommas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;,\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"级联\"\u003e级联\u003c/h2\u003e\n\u003cp\u003e要对同一对象进行一系列操作，可以使用级联(\u003ccode\u003e...\u003c/code\u003e)。我们都见过这样的表达式:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emyObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esomeMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e它在 \u003ccode\u003emyObject\u003c/code\u003e 上调用 \u003ccode\u003esomeMethod()\u003c/code\u003e，表达式的结果是 \u003ccode\u003esomeMethod()\u003c/code\u003e 的返回值。\u003c/p\u003e\n\u003cp\u003e下面是同样的表达式，有一个级联:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emyObject\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003esomeMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e虽然它仍然在 \u003ccode\u003emyObject\u003c/code\u003e 上调用 \u003ccode\u003esomeMethod()\u003c/code\u003e，但表达式的结果并不是返回值-它是对 \u003ccode\u003emyObject\u003c/code\u003e 的引用! 使用级联，你可以将原本需要单独语句的操作串联起来。例如，请看以下代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ebutton\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;#confirm\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Confirm\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclasses\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;important\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eonClick\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elisten\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ewindow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ealert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Confirmed!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e有了级联，代码就会变得短得多，而且你也不需要 \u003ccode\u003ebutton\u003c/code\u003e 变量:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;#confirm\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Confirm\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;important\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eonClick\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elisten\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ewindow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ealert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Confirmed!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-5\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e使用级联来创建一个单一的语句，将一个 \u003ccode\u003eBigObject\u003c/code\u003e 的 \u003ccode\u003eanInt\u003c/code\u003e、\u003ccode\u003eaString\u003c/code\u003e 和 \u003ccode\u003eaList\u003c/code\u003e 属性设置为 1、\u0026lsquo;String!\u0026rsquo; 和 \u003ccode\u003e[3.0]\u003c/code\u003e(分别地)，然后调用 \u003ccode\u003eallDone()\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBigObject\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eanInt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eaString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eaList\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003e_done\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eallDone\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003e_done\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e    \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eBigObject\u003c/span\u003e \u003cspan class=\"n\"\u003efillBigObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBigObject\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eanInt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eaString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;String!\u0026#39;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eaList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eallDone\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"getters-和-setters\"\u003egetters 和 setters\u003c/h2\u003e\n\u003cp\u003e当你需要对一个属性进行更多的控制时，你可以定义 getter 和 setter，而不是简单的字段。\u003c/p\u003e\n\u003cp\u003e例如，你可以确保一个属性的值是有效的:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyClass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_aProperty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003eaProperty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_aProperty\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003eset\u003c/span\u003e \u003cspan class=\"n\"\u003eaProperty\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003e_aProperty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e    \n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你也可以使用 getter 来定义计算属性:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyClass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_values\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eaddValue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e_values\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e    \n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// 一个计算属性\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003e_values\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-6\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e想象一下，你有一个购物车类，它保存了一个私有的 \u003ccode\u003eList\u0026lt;double\u0026gt;\u003c/code\u003e 的价格。添加以下内容:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个叫做 \u003ccode\u003etotal\u003c/code\u003e 的 getter，返回价格的总和。\u003c/li\u003e\n\u003cli\u003e用一个新的列表替换列表的 setter，只要新的列表不包含任何负价格(在这种情况下，setter 应该抛出一个 \u003ccode\u003eInvalidPriceException\u003c/code\u003e)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eInvalidPriceException\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eShoppingCart\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_prices\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n  \n  \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_prices\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efold\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \n  \u003cspan class=\"kd\"\u003eset\u003c/span\u003e \u003cspan class=\"n\"\u003eprices\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eInvalidPriceException\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \n    \u003cspan class=\"n\"\u003e_prices\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"可选位置参数\"\u003e可选位置参数\u003c/h2\u003e\n\u003cp\u003eDart 有两种函数参数：位置参数和命名参数。位置参数是你可能熟悉的那种:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esumUp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e  \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esumUp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Dart 中，你可以将这些位置参数用括号包裹起来，使其成为可选的参数:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esumUpToFive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esumUpToFive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eotherTotal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esumUpToFive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可选的位置参数在函数的参数列表中总是最后一个。它们的默认值是空的，除非你提供了另一个默认值:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esumUpToFive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003enewTotal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esumUpToFive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enewTotal\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026lt;-- prints 15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-7\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e实现一个名为 \u003ccode\u003ejoinWithCommas()\u003c/code\u003e 的函数，接受 1 到 5 个整数，然后返回一个用逗号分隔的数字字符串。下面是一些函数调用和返回值的例子:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e函数调用\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e返回值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003ejoinWithCommas(1)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lsquo;1\u0026rsquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003ejoinWithCommas(1, 2, 3)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lsquo;1,2,3\u0026rsquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003ejoinWithCommas(1, 1, 1, 1, 1)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lsquo;1,1,1,1,1\u0026rsquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejoinWithCommas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ejoinWithCommas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n  \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;,\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"可选命名参数\"\u003e可选命名参数\u003c/h2\u003e\n\u003cp\u003e使用大括号语法，你可以定义有名称的可选参数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eprintName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003esuffix\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003efirstName\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003elastName\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003esuffix\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eprintName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Avinash\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Gupta\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprintName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Poshmeister\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Moneybuckets\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nl\"\u003esuffix:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;IV\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e正如你所期望的，这些参数的值默认为空，但你可以提供默认值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eprintName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003esuffix\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003efirstName\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003elastName\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003esuffix\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e一个函数不能同时拥有可选的位置参数和可选的命名参数。\u003c/p\u003e\n\u003ch3 id=\"代码示例-8\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e为 \u003ccode\u003eMyDataObject\u003c/code\u003e 类添加一个 \u003ccode\u003ecopyWith()\u003c/code\u003e 实例方法。它应该接受三个命名参数:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eint newInt\u003c/li\u003e\n\u003cli\u003eString newString\u003c/li\u003e\n\u003cli\u003edouble newDouble\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当调用时，\u003ccode\u003ecopyWith()\u003c/code\u003e 应该基于当前实例返回一个新的 \u003ccode\u003eMyDataObject\u003c/code\u003e，并将前面参数（如果有的话）的数据复制到对象的属性中。例如，如果 \u003ccode\u003enewInt\u003c/code\u003e 是非空的，那么将其值复制到 \u003ccode\u003eanInt\u003c/code\u003e 中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyDataObject\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eanInt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eaString\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eaDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eMyDataObject\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\n     \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eanInt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n     \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Old!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n     \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaDouble\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e2.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eMyDataObject\u003c/span\u003e \u003cspan class=\"n\"\u003ecopyWith\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003enewInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003enewString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003enewDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eMyDataObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003eanInt:\u003c/span\u003e      \u003cspan class=\"n\"\u003enewInt\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eanInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003eaString:\u003c/span\u003e \u003cspan class=\"n\"\u003enewString\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003eaDouble:\u003c/span\u003e \u003cspan class=\"n\"\u003enewDouble\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"异常\"\u003e异常\u003c/h2\u003e\n\u003cp\u003eDart 代码可以抛出和捕获异常。与 Java 相比，Dart 的所有异常都是未检查的异常。方法不声明它们可能会抛出哪些异常，你也不需要捕捉任何异常。\u003c/p\u003e\n\u003cp\u003eDart 提供了 \u003ccode\u003eException\u003c/code\u003e 和 \u003ccode\u003eError\u003c/code\u003e 类型，但你可以抛出任何非空对象:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Something bad happened.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Waaaaaaah!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在处理异常时使用 \u003ccode\u003etry\u003c/code\u003e、\u003ccode\u003eon\u003c/code\u003e 和 \u003ccode\u003ecatch\u003c/code\u003e 关键字:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ebreedMoreLlamas\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003eOutOfLlamasException\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// A specific exception\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003ebuyMoreLlamas\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Anything else that is an exception\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Unknown exception: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// No specified type, handles all\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Something really unknown: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003etry\u003c/code\u003e 关键字的工作原理和其他大多数语言一样。使用 \u003ccode\u003eon\u003c/code\u003e 关键字按类型过滤特定的异常，使用 \u003ccode\u003ecatch\u003c/code\u003e 关键字获取异常对象的引用。\u003c/p\u003e\n\u003cp\u003e如果不能完全处理异常，可以使用 \u003ccode\u003erethrow\u003c/code\u003e 关键字来传播异常:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ebreedMoreLlamas\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;I was just trying to breed llamas!.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e无论是否抛出异常，都要执行代码，使用 \u003ccode\u003efinal\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ebreedMoreLlamas\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// ... handle exception ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003efinally\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Always clean up, even if an exception is thrown.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003ecleanLlamaStalls\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-9\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e实现下面的 \u003ccode\u003etryFunction()\u003c/code\u003e。它应该执行一个不可信的方法，然后做如下操作:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果 \u003ccode\u003euntrustworthy()\u003c/code\u003e 抛出一个 \u003ccode\u003eExceptionWithMessage\u003c/code\u003e，调用 \u003ccode\u003elogger.logException\u003c/code\u003e，并提供异常类型和消息(尝试使用 \u003ccode\u003eon\u003c/code\u003e 和 \u003ccode\u003ecatch\u003c/code\u003e)。\u003c/li\u003e\n\u003cli\u003e如果 \u003ccode\u003euntrustworthy()\u003c/code\u003e 抛出一个 \u003ccode\u003eExceptio\u003c/code\u003en，调用 \u003ccode\u003elogger.logException\u003c/code\u003e，并注明异常类型(尝试使用 \u003ccode\u003eon\u003c/code\u003e)。\u003c/li\u003e\n\u003cli\u003e如果 \u003ccode\u003euntrustworthy()\u003c/code\u003e 抛出任何其他对象，不要捕获异常。\u003c/li\u003e\n\u003cli\u003e当所有的东西都被捕获和处理后，调用 \u003ccode\u003elogger.doneLogging\u003c/code\u003e(尝试使用 \u003ccode\u003efinally\u003c/code\u003e)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003eVoidFunction\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eFunction\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eExceptionWithMessage\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eExceptionWithMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eLogger\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003elogException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eType\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003edoneLogging\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003etryFunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVoidFunction\u003c/span\u003e \u003cspan class=\"n\"\u003euntrustworthy\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLogger\u003c/span\u003e \u003cspan class=\"n\"\u003elogger\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003euntrustworthy\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003eExceptionWithMessage\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elogger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elogException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eruntimeType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elogger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elogException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003efinally\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elogger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edoneLogging\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"在构造函数中使用-this\"\u003e在构造函数中使用 \u003ccode\u003ethis\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eDart 提供了一个方便的快捷方式来为构造函数中的属性赋值：在声明构造函数时使用 \u003ccode\u003ethis.propertyName\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyColor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eMyColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e    \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ecolor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMyColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e128\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种技术也适用于命名参数。属性名成为参数的名称:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyColor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eMyColor\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e    \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ecolor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMyColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003ered:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nl\"\u003egreen:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nl\"\u003eblue:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对于可选参数，默认值按预期工作:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eMyColor\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// or\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eMyColor\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-10\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e为 \u003ccode\u003eMyClass\u003c/code\u003e 添加一个单行构造函数，使用 \u003ccode\u003ethis.\u003c/code\u003e 语法来接收和分配类的三个属性的值:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyClass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eanInt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eaString\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eaDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \n  \u003cspan class=\"n\"\u003eMyClass\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eanInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"初始化器列表\"\u003e初始化器列表\u003c/h2\u003e\n\u003cp\u003e有时候，当你实现一个构造函数时，你需要在构造函数体执行之前做一些设置。例如，在构造函数体执行之前，\u003ccode\u003efinal\u003c/code\u003e 字段必须有值。在一个初始化器列表中做这些工作，它位于构造函数的签名和它的主体之间。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efromJson\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003enum\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;y\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;In Point.fromJson(): (\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"s1\"\u003e, \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"s1\"\u003e)\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e初始化器列表也是一个方便放置断言的地方，它只在开发过程中运行:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eNonNegativePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;I just made a NonNegativePoint: (\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"s1\"\u003e, \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"s1\"\u003e)\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e        \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-11\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e完成下面的 \u003ccode\u003eFirstTwoLetters\u003c/code\u003e 构造函数。使用初始化器列表将 \u003ccode\u003eword\u003c/code\u003e 中的前两个字符分配给 \u003ccode\u003eletterOne\u003c/code\u003e 和 \u003ccode\u003eLetterTwo\u003c/code\u003e 属性。为了获得额外的积分，可以添加一个断言来捕获少于两个字符的单词。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFirstTwoLetters\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eletterOne\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eletterTwo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Create a constructor with an initializer list here:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eFirstTwoLetters\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eletterOne\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eletterTwo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"命名构造器\"\u003e命名构造器\u003c/h2\u003e\n\u003cp\u003e为了允许类有多个构造函数，Dart 支持命名构造函数:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePoint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eorigin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e    \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e要使用命名构造函数，请使用它的全名来调用它:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003emyPoint\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eorigin\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-12\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e给 \u003ccode\u003eColor\u003c/code\u003e 类一个名为 \u003ccode\u003eColor.black\u003c/code\u003e 的构造函数，将三个属性都设置为 0。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eColor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \n  \u003cspan class=\"n\"\u003eColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eColor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblack\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ered\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003egreen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eblue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"工厂构造函数\"\u003e工厂构造函数\u003c/h2\u003e\n\u003cp\u003eDart 支持工厂构造函数，它可以返回子类型甚至 null。要创建一个工厂构造函数，请使用 \u003ccode\u003efactory\u003c/code\u003e 关键字:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSquare\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eShape\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCircle\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eShape\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eShape\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eShape\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003efactory\u003c/span\u003e \u003cspan class=\"n\"\u003eShape\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efromTypeName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etypeName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etypeName\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;square\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eSquare\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etypeName\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;circle\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;I don\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003et recognize \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003etypeName\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e    \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-13\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e填入名为 \u003ccode\u003eIntegerHolder.fromList\u003c/code\u003e 的工厂构造函数，使其做以下工作:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果列表有一个值，就用这个值创建一个 \u003ccode\u003eIntegerSingle\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e如果列表有两个值，则用该值依次创建一个 \u003ccode\u003eIntegerDouble\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e如果列表有三个值，则按顺序创建一个 \u003ccode\u003eIntegerTriple\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e否则，返回 null。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eIntegerHolder\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIntegerHolder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \n  \u003cspan class=\"kd\"\u003efactory\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerHolder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efromList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerSingle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerTriple\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eIntegerSingle\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerHolder\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIntegerSingle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eIntegerDouble\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerHolder\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIntegerDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eIntegerTriple\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerHolder\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIntegerTriple\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"重定向构造函数\"\u003e重定向构造函数\u003c/h2\u003e\n\u003cp\u003e有时，一个构造函数的唯一目的是重定向到同一类中的另一个构造函数。重定向构造函数的主体是空的，构造函数调用出现在冒号(:)之后。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eAutomobile\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emodel\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003empg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// 这个类的主构造函数\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eAutomobile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emodel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003empg\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// 代理到主构造函数\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eAutomobile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehybrid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emodel\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emodel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e60\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// 代理到命名构造函数\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eAutomobile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efancyHybrid\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehybrid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Futurecar\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Mark 2\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-14\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e还记得上面的 \u003ccode\u003eColor\u003c/code\u003e 类吗？创建一个名为 \u003ccode\u003eblack\u003c/code\u003e 的命名构造函数，但不是手动分配属性，而是将其重定向到默认构造函数，参数为 0。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eColor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \n  \u003cspan class=\"n\"\u003eColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eColor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblack\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"常量构造函数\"\u003e常量构造函数\u003c/h2\u003e\n\u003cp\u003e如果你的类产生的对象永远不会改变，你可以让这些对象成为编译时常量。要做到这一点，请定义一个 \u003ccode\u003econst\u003c/code\u003e 构造函数，并确保所有的实例变量都是最终变量。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eImmutablePoint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eImmutablePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eImmutablePoint\u003c/span\u003e \u003cspan class=\"n\"\u003eorigin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eImmutablePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-15\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e修改 \u003ccode\u003eRecipe\u003c/code\u003e 类，使它的实例可以是常量，并创建一个常量构造函数，执行以下操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e有三个参数： \u003ccode\u003eingredients\u003c/code\u003e, \u003ccode\u003ecalories\u003c/code\u003e 和 \u003ccode\u003emilligramsOfSodium\u003c/code\u003e(按顺序)。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003ethis.\u003c/code\u003e 语法，自动将参数值分配给同名的对象属性。\u003c/li\u003e\n\u003cli\u003e是常量，在构造函数声明中，\u003ccode\u003econst\u003c/code\u003e 关键字就在 \u003ccode\u003eRecipe\u003c/code\u003e 前面。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRecipe\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eingredients\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecalories\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003emilligramsOfSodium\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eRecipe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eingredients\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecalories\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emilligramsOfSodium\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"下一步是什么\"\u003e下一步是什么？\u003c/h2\u003e\n\u003cp\u003e我们希望你喜欢使用这个 codelab 来学习或测试你对 Dart 语言一些最有趣的功能的知识。这里有一些关于现在要做什么的建议。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e试试\u003ca href=\"https://dart.dev/codelabs\"\u003e其他的 Dart 代码实验室\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e阅读 \u003ca href=\"https://dart.dev/guides/language/language-tour\"\u003eDart 语言之旅\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e玩 \u003ca href=\"https://dartpad.dev/\"\u003eDartPad\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e获取 \u003ca href=\"https://dart.dev/get-dart\"\u003eDart SDK\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n","text":"字符串插值 使用 ${expression} 将表达式的值放到字符串里面。如果表达式是一个标识符, 就可以省略 {}。\n下面是字符串插值的例子:\n   字符串 结果     \u0026lsquo;${3 + 2}\u0026rsquo; \u0026lsquo;5\u0026rsquo;   \u0026lsquo;${\u0026ldquo;word\u0026rdquo;.toUpperCase()}\u0026rsquo; \u0026lsquo;WORD\u0026rsquo;   \u0026lsquo;$myObject\u0026rsquo; The value of myObject.toString()    代码示例 下面的函数接收两个整数作为参数。使其返回一个包含两个整数的字符串，并以空格分隔。例如 stringify(2, 3) 应该返回 \u0026lsquo;2 3\u0026rsquo;。\nString stringify(int x, int y) { return \u0026#39;$x$y\u0026#39;; } Null 无感知操作符 Dart 提供了一些方便的操作符来处理可能为空的值。其中一个是 ??= 赋值运算符，只有当一个变量当前为空时，它才会给这个变量赋值:\nint a; // a 的初始值为 null a ??= 3; print(a); // 打印 3  a ??= 5; print(a); // 仍然打印 3 另一个 null-aware 操作符是 ??，它返回其左边的表达式，除非该表达式的值为 null，在这种情况下，它计算并返回其右边的表达式:\nprint(1 ?? 3); // 打印 1 print(null ?? 12); // 打印 12 代码示例 String foo = \u0026#39;a string\u0026#39;; String bar; // Unassigned objects are null by default.  // makes \u0026#39;a string\u0026#39; be assigned to baz. String baz = foo ?? bar; void updateSomeVars() { // makes \u0026#39;a string\u0026#39; be assigned to bar.  bar ??= \u0026#39;a string\u0026#39;; } 有条件的属性访问 要保护对对象的一个可能为空的属性或方法的访问，请在点(.)前加上一个问号(?):\nmyObject?.someProperty 上述代码等同于以下代码:\n(myObject != null) ? myObject.someProperty : null 你可以在一个表达式中把 ?. 的多个使用链接在一起:\nmyObject?.someProperty?.someMethod() 如果 myObject 或 myObject.someProperty 为 null，前面的代码将返回 null(并且从不调用 someMethod())。\n代码示例 尝试使用条件属性访问来完成下面的代码片段。\n// This method should return the uppercase version of `str` // or null if `str` is null. String upperCaseIt(String str) { // Try conditionally accessing the `toUpperCase` method here.  return str?.toUpperCase(); } 集合字面量 Dart 内置了对列表、映射和集合的支持。你可以使用字面量创建它们:\nfinal aListOfStrings = [\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;]; final aSetOfStrings = {\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;}; final aMapOfStringsToInts = { \u0026#39;one\u0026#39;: 1, \u0026#39;two\u0026#39;: 2, \u0026#39;three\u0026#39;: 3, } Dart 的类型推理可以为你分配类型给这些变量。在本例中，推断的类型是 List\u0026lt;String\u0026gt;、Set\u0026lt;String\u0026gt; 和 Map\u0026lt;String, int\u0026gt;。\n或者你可以自己指定类型:\nfinal aListOfInts = \u0026lt;int\u0026gt;[]; final aSetOfInts = \u0026lt;int\u0026gt;{}; final aMapOfIntToDouble = \u0026lt;int, double\u0026gt;{}; 当你用子类型的内容初始化一个列表，但仍然希望列表是 List\u0026lt;BaseType\u0026gt; 时，指定类型是很方便的:\nfinal aListOfBaseType = \u0026lt;BaseType\u0026gt;[SubType(), SubType()]; 代码示例 尝试将以下变量设置为指定的值。\n// Assign this a list containing \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, and \u0026#39;c\u0026#39; in that order: final aListOfStrings = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]; // Assign this a set containing 3, 4, and 5: final aSetOfInts = {3, 4, 5}; // Assign this a map of String to int so that aMapOfStringsToInts[\u0026#39;myKey\u0026#39;] returns 12: final aMapOfStringsToInts = {\u0026#39;myKey\u0026#39;: 12}; // Assign this an empty List\u0026lt;double\u0026gt;: final anEmptyListOfDouble = \u0026lt;double\u0026gt;[]; // Assign this an empty Set\u0026lt;String\u0026gt;: final anEmptySetOfString = \u0026lt;String\u0026gt;{}; // Assign this an empty Map of double to int: final anEmptyMapOfDoublesToInts = \u0026lt;double, int\u0026gt;{}; 箭头语法 你可能在 Dart 代码中看到过 =\u0026gt; 符号。这种箭头语法是一种定义函数的方式，该函数执行其右边的表达式并返回其值。\n例如，考虑这个对 List 类的 any() 方法的调用:\nbool hasEmpty = aListOfStrings.any((s) { return s.isEmpty; }); 这里有一个更简单的方法来写这个代码:\nbool hasEmpty = aListOfStrings.any((s) =\u0026gt; s.isEmpty); 代码示例 试着完成以下使用箭头语法的语句:\nclass MyClass { int _value1 = 2; int _value2 = 3; int _value3 = 5; // Returns the product of the above values:  int get product =\u0026gt; _value1 * _value2 * _value3; // Adds one to _value1:  void incrementValue1() =\u0026gt; _value1++; // Returns a string containing each item in the  // list, separated by commas (e.g. \u0026#39;a,b,c\u0026#39;):  String joinWithCommas(List\u0026lt;String\u0026gt; strings) =\u0026gt; strings.join(\u0026#39;,\u0026#39;); } 级联 要对同一对象进行一系列操作，可以使用级联(...)。我们都见过这样的表达式:\nmyObject.someMethod() 它在 myObject 上调用 someMethod()，表达式的结果是 someMethod() 的返回值。\n下面是同样的表达式，有一个级联:\nmyObject..someMethod() 虽然它仍然在 myObject 上调用 someMethod()，但表达式的结果并不是返回值-它是对 myObject 的引用! 使用级联，你可以将原本需要单独语句的操作串联起来。例如，请看以下代码:\nvar button = querySelector(\u0026#39;#confirm\u0026#39;); button.text = \u0026#39;Confirm\u0026#39;; button.classes.add(\u0026#39;important\u0026#39;); button.onClick.listen((e) =\u0026gt; window.alert(\u0026#39;Confirmed!\u0026#39;)); 有了级联，代码就会变得短得多，而且你也不需要 button 变量:\nquerySelector(\u0026#39;#confirm\u0026#39;) ..text = \u0026#39;Confirm\u0026#39; ..class.add(\u0026#39;important\u0026#39;) ..onClick.listen((e) =\u0026gt; window.alert(\u0026#39;Confirmed!\u0026#39;)); 代码示例 使用级联来创建一个单一的语句，将一个 BigObject 的 anInt、aString 和 aList 属性设置为 1、\u0026lsquo;String!\u0026rsquo; 和 [3.0](分别地)，然后调用 allDone()。\nclass BigObject{ int anInt = 0; String aString = \u0026#39;\u0026#39;; List\u0026lt;double\u0026gt; aList = []; bool _done = false; void allDone() { _done = true; } } BigObject fillBigObject(BigObject obj) { return obj ..anInt = 1 ..aString = \u0026#39;String!\u0026#39; ..aList.add(3) ..allDone(); } getters 和 setters 当你需要对一个属性进行更多的控制时，你可以定义 getter 和 setter，而不是简单的字段。\n例如，你可以确保一个属性的值是有效的:\nclass MyClass { int _aProperty = 0; int get aProperty =\u0026gt; _aProperty; set aProperty(int value) { if (value \u0026gt;= 0) { _aProperty = value; } } } 你也可以使用 getter 来定义计算属性:\nclass MyClass { List\u0026lt;int\u0026gt; _values = []; void addValue(int value) { _values.add(value); } // 一个计算属性  int get count { return _values.length; } } 代码示例 想象一下，你有一个购物车类，它保存了一个私有的 List\u0026lt;double\u0026gt; 的价格。添加以下内容:\n 一个叫做 total 的 getter，返回价格的总和。 用一个新的列表替换列表的 setter，只要新的列表不包含任何负价格(在这种情况下，setter 应该抛出一个 InvalidPriceException)。  class InvalidPriceException {} class ShoppingCart { List\u0026lt;double\u0026gt; _prices = []; double get total =\u0026gt; _prices.fold(0, (e, t) =\u0026gt; e + t); set prices(List\u0026lt;double\u0026gt; value) { if (value.any((p) =\u0026gt; p \u0026lt; 0)) { throw InvalidPriceException(); } _prices = value; } } 可选位置参数 Dart 有两种函数参数：位置参数和命名参数。位置参数是你可能熟悉的那种:\nint sumUp(int a, int b, int c) { return a + b + c; } // ... int total = sumUp(1, 2, 3); 在 Dart 中，你可以将这些位置参数用括号包裹起来，使其成为可选的参数:\nint sumUpToFive(int a, [int b, int c, int d, int e]) { int sum = a; if (b != null) sum += b; if (c != null) sum += c; if (d != null) sum += d; if (e != null) sum += e; return sum; } // ... int total = sumUpToFive(1,2); int otherTotal = sumUpToFive(1, 2, 3, 4, 5); 可选的位置参数在函数的参数列表中总是最后一个。它们的默认值是空的，除非你提供了另一个默认值:\nint sumUpToFive(int a, [int b = 2, int c = 3, int d = 4, int e = 5]) { // ··· } // ··· int newTotal = sumUpToFive(1); print(newTotal); // \u0026lt;-- prints 15 代码示例 实现一个名为 joinWithCommas() 的函数，接受 1 到 5 个整数，然后返回一个用逗号分隔的数字字符串。下面是一些函数调用和返回值的例子:\n   函数调用 返回值     joinWithCommas(1) \u0026lsquo;1\u0026rsquo;   joinWithCommas(1, 2, 3) \u0026lsquo;1,2,3\u0026rsquo;   joinWithCommas(1, 1, 1, 1, 1) \u0026lsquo;1,1,1,1,1\u0026rsquo;    main() { var res = joinWithCommas(1,2,3,4); print(res); } String joinWithCommas(int a, [int b, int c, int d, int e]) { List\u0026lt;int\u0026gt; sum = []; sum.add(a); if (b != null) sum.add(b); if (c != null) sum.add(c); if (d != null) sum.add(d); if (e != null) sum.add(e); return sum.join(\u0026#39;,\u0026#39;); } 可选命名参数 使用大括号语法，你可以定义有名称的可选参数。\nvoid printName(String firstName, String lastName, {String suffix}) { print(\u0026#39;$firstName$lastName${suffix ?? \u0026#39;\u0026#39;}\u0026#39;); } // ··· printName(\u0026#39;Avinash\u0026#39;, \u0026#39;Gupta\u0026#39;); printName(\u0026#39;Poshmeister\u0026#39;, \u0026#39;Moneybuckets\u0026#39;, suffix: \u0026#39;IV\u0026#39;); 正如你所期望的，这些参数的值默认为空，但你可以提供默认值。\nvoid printName(String firstName, String lastName, {String suffix = \u0026#39;\u0026#39;}) { print(\u0026#39;$firstName$lastName$suffix\u0026#39;); } 一个函数不能同时拥有可选的位置参数和可选的命名参数。\n代码示例 为 MyDataObject 类添加一个 copyWith() 实例方法。它应该接受三个命名参数:\n int newInt String newString double newDouble  当调用时，copyWith() 应该基于当前实例返回一个新的 MyDataObject，并将前面参数（如果有的话）的数据复制到对象的属性中。例如，如果 newInt 是非空的，那么将其值复制到 anInt 中。\nclass MyDataObject { final int anInt; final String aString; final double aDouble; MyDataObject({ this.anInt = 1, this.aString = \u0026#39;Old!\u0026#39;, this.aDouble = 2.0, }); MyDataObject copyWith({int newInt, String newString, double newDouble}) { return MyDataObject( anInt: newInt ?? this.anInt, aString: newString ?? this.aString, aDouble: newDouble ?? this.aDouble, ); } } 异常 Dart 代码可以抛出和捕获异常。与 Java 相比，Dart 的所有异常都是未检查的异常。方法不声明它们可能会抛出哪些异常，你也不需要捕捉任何异常。\nDart 提供了 Exception 和 Error 类型，但你可以抛出任何非空对象:\nthrow Exception(\u0026#39;Something bad happened.\u0026#39;); throw \u0026#39;Waaaaaaah!\u0026#39;; 在处理异常时使用 try、on 和 catch 关键字:\ntry { breedMoreLlamas(); } on OutOfLlamasException { // A specific exception  buyMoreLlamas(); } on Exception catch (e) { // Anything else that is an exception  print(\u0026#39;Unknown exception: $e\u0026#39;); } catch (e) { // No specified type, handles all  print(\u0026#39;Something really unknown: $e\u0026#39;); } try 关键字的工作原理和其他大多数语言一样。使用 on 关键字按类型过滤特定的异常，使用 catch 关键字获取异常对象的引用。\n如果不能完全处理异常，可以使用 rethrow 关键字来传播异常:\ntry { breedMoreLlamas(); } catch (e) { print(\u0026#39;I was just trying to breed llamas!.\u0026#39;); rethrow; } 无论是否抛出异常，都要执行代码，使用 final:\ntry { breedMoreLlamas(); } catch (e) { // ... handle exception ... } finally { // Always clean up, even if an exception is thrown.  cleanLlamaStalls(); } 代码示例 实现下面的 tryFunction()。它应该执行一个不可信的方法，然后做如下操作:\n 如果 untrustworthy() 抛出一个 ExceptionWithMessage，调用 logger.logException，并提供异常类型和消息(尝试使用 on 和 catch)。 如果 untrustworthy() 抛出一个 Exception，调用 logger.logException，并注明异常类型(尝试使用 on)。 如果 untrustworthy() 抛出任何其他对象，不要捕获异常。 当所有的东西都被捕获和处理后，调用 logger.doneLogging(尝试使用 finally)。  typedef VoidFunction = void Function(); class ExceptionWithMessage { final String message; const ExceptionWithMessage(this.message); } abstract class Logger { void logException(Type t, [String msg]); void doneLogging(); } void tryFunction(VoidFunction untrustworthy, Logger logger) { try { untrustworthy(); } on ExceptionWithMessage catch (e) { logger.logException(e.runtimeType, e.message); } on Exception { logger.logException(Exception); } finally { logger.doneLogging(); } } 在构造函数中使用 this Dart 提供了一个方便的快捷方式来为构造函数中的属性赋值：在声明构造函数时使用 this.propertyName:\nclass MyColor { int red; int green; int blue; MyColor(this.red, this.green, this.blue) } final color = MyColor(80, 80, 128); 这种技术也适用于命名参数。属性名成为参数的名称:\nclass MyColor { ... MyColor({this.red, this.green, this.blue}); } final color = MyColor(red: 80, green: 80, blue: 80); 对于可选参数，默认值按预期工作:\nMyColor([this.red = 0, this.green = 0, this.blue = 0]); // or MyColor({this.red = 0, this.green = 0, this.blue = 0}); 代码示例 为 MyClass 添加一个单行构造函数，使用 this. 语法来接收和分配类的三个属性的值:\nclass MyClass { final int anInt; final String aString; final double aDouble; MyClass(this.anInt, this.aString, this.aDouble); } 初始化器列表 有时候，当你实现一个构造函数时，你需要在构造函数体执行之前做一些设置。例如，在构造函数体执行之前，final 字段必须有值。在一个初始化器列表中做这些工作，它位于构造函数的签名和它的主体之间。\nPoint.fromJson(Map\u0026lt;String, num\u0026gt; json) : x = json[\u0026#39;x\u0026#39;], y = json[\u0026#39;y\u0026#39;] { print(\u0026#39;In Point.fromJson(): ($x, $y)\u0026#39;); } 初始化器列表也是一个方便放置断言的地方，它只在开发过程中运行:\nNonNegativePoint(this.x, this.y) : assert(x \u0026gt;= 0), assert(y \u0026gt;= 0) { print(\u0026#39;I just made a NonNegativePoint: ($x, $y)\u0026#39;); } 代码示例 完成下面的 FirstTwoLetters 构造函数。使用初始化器列表将 word 中的前两个字符分配给 letterOne 和 LetterTwo 属性。为了获得额外的积分，可以添加一个断言来捕获少于两个字符的单词。\nclass FirstTwoLetters { final String letterOne; final String letterTwo; // Create a constructor with an initializer list here:  FirstTwoLetters(String word) : assert(word.length \u0026gt;=2), letterOne = word[0], letterTwo = word[1]; } 命名构造器 为了允许类有多个构造函数，Dart 支持命名构造函数:\nclass Point { double x, y; Point(this.x, this.y); Point.origin() { x = 0; y = 0; } } 要使用命名构造函数，请使用它的全名来调用它:\nfinal myPoint = Point.origin(); 代码示例 给 Color 类一个名为 Color.black 的构造函数，将三个属性都设置为 0。\nclass Color { int red; int green; int blue; Color(this.red, this.green, this.blue); Color.black() { red = 0; green = 0; blue = 0; } } 工厂构造函数 Dart 支持工厂构造函数，它可以返回子类型甚至 null。要创建一个工厂构造函数，请使用 factory 关键字:\nclass Square extends Shape {} class Circle extends Shape {} class Shape { Shape(); factory Shape.fromTypeName(String typeName) { if (typeName == \u0026#39;square\u0026#39;) return Square(); if (typeName == \u0026#39;circle\u0026#39;) return Circle(); print(\u0026#39;I don\\\u0026#39;t recognize $typeName\u0026#39;); return null } } 代码示例 填入名为 IntegerHolder.fromList 的工厂构造函数，使其做以下工作:\n 如果列表有一个值，就用这个值创建一个 IntegerSingle。 如果列表有两个值，则用该值依次创建一个 IntegerDouble。 如果列表有三个值，则按顺序创建一个 IntegerTriple。 否则，返回 null。  class IntegerHolder { IntegerHolder(); factory IntegerHolder.fromList(List\u0026lt;int\u0026gt; list) { if (list?.length == 1) { return IntegerSingle(list[0]); } else if (list?.length == 2) { return IntegerDouble(list[0], list[1]); } else if (list?.length == 3) { return IntegerTriple(list[0], list[1], list[2]); } else { return null; } } } class IntegerSingle extends IntegerHolder { final int a; IntegerSingle(this.a); } class IntegerDouble extends IntegerHolder { final int a; final int b; IntegerDouble(this.a, this.b); } class IntegerTriple extends IntegerHolder { final int a; final int b; final int c; IntegerTriple(this.a, this.b, this.c); } 重定向构造函数 有时，一个构造函数的唯一目的是重定向到同一类中的另一个构造函数。重定向构造函数的主体是空的，构造函数调用出现在冒号(:)之后。\nclass Automobile { String make; String model; int mpg; // 这个类的主构造函数  Automobile(this.make, this.model, this.mpg); // 代理到主构造函数  Automobile.hybrid(String make, String model) : this(make, model, 60); // 代理到命名构造函数  Automobile.fancyHybrid() : this.hybrid(\u0026#39;Futurecar\u0026#39;, \u0026#39;Mark 2\u0026#39;); } 代码示例 还记得上面的 Color 类吗？创建一个名为 black 的命名构造函数，但不是手动分配属性，而是将其重定向到默认构造函数，参数为 0。\nclass Color { int red; int green; int blue; Color(this.red, this.green, this.blue); Color.black() : this(0, 0, 0); } 常量构造函数 如果你的类产生的对象永远不会改变，你可以让这些对象成为编译时常量。要做到这一点，请定义一个 const 构造函数，并确保所有的实例变量都是最终变量。\nclass ImmutablePoint { const ImmutablePoint(this.x, this.y); final int x; final int y; static const ImmutablePoint origin = ImmutablePoint(0, 0); } 代码示例 修改 Recipe 类，使它的实例可以是常量，并创建一个常量构造函数，执行以下操作。\n 有三个参数： ingredients, calories 和 milligramsOfSodium(按顺序)。 使用 this. 语法，自动将参数值分配给同名的对象属性。 是常量，在构造函数声明中，const 关键字就在 Recipe 前面。  class Recipe { final List\u0026lt;String\u0026gt; ingredients; final int calories; final double milligramsOfSodium; const Recipe(this.ingredients, this.calories, this.milligramsOfSodium); } 下一步是什么？ 我们希望你喜欢使用这个 codelab 来学习或测试你对 Dart 语言一些最有趣的功能的知识。这里有一些关于现在要做什么的建议。\n 试试其他的 Dart 代码实验室. 阅读 Dart 语言之旅。 玩 DartPad。 获取 Dart SDK。  "},"name":"Dart 语言速查表","published":"2020-06-25T00:00:00+08:00","summary":"Dart速查表。","type":"entry","url":"https://ohmyweekly.github.io/notes/dart-cheatsheet-codelab/"}],"name":"Dart","type":"feed","url":"https://ohmyweekly.github.io/tags/dart/"}