<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    Oneliner on
                
            
            焉知非鱼</title>
        <link>https://ohmycloud.github.io/tags/oneliner/</link>
        <description>Recent content  in Oneliner
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Sat, 02 Mar 2024 17:02:33 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmycloud.github.io/tags/oneliner/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>Raku 中的单行程序</title>
                <link>https://ohmycloud.github.io/notes/2015-08-25-one-liners-in-raku/</link>
                
                
                <description>&lt;blockquote&gt;One Liners in Raku&lt;/blockquote&gt;&lt;h1 id=&#34;raku-单行程序httpsgithubcomdnmfarrellraku-one-liners&#34;&gt;&lt;a href=&#34;https://github.com/dnmfarrell/Raku-One-Liners&#34;&gt;Raku 单行程序&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;这本书在进行之中。我希望你能觉得它有趣，甚至可能有用！如果你想贡献反馈的话，那么很欢迎提问题还有新的或有提升的正则表达式。&lt;/p&gt;
&lt;h2 id=&#34;作者&#34;&gt;作者&lt;/h2&gt;
&lt;p&gt;戴维法瑞尔 &lt;a href=&#34;PerlTricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;版本&#34;&gt;版本&lt;/h2&gt;
&lt;p&gt;版本 0.01&lt;/p&gt;
&lt;h2 id=&#34;许可&#34;&gt;许可&lt;/h2&gt;
&lt;p&gt;FreeBSD&lt;/p&gt;
&lt;h2 id=&#34;贡献者&#34;&gt;贡献者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Alexander Moquin&lt;/li&gt;
&lt;li&gt;Bruce Gray&lt;/li&gt;
&lt;li&gt;Carl Mäsak&lt;/li&gt;
&lt;li&gt;David H. Adler&lt;/li&gt;
&lt;li&gt;FROGGS&lt;/li&gt;
&lt;li&gt;Helmut Wollmersdorfer&lt;/li&gt;
&lt;li&gt;japhb&lt;/li&gt;
&lt;li&gt;Larry Wall&lt;/li&gt;
&lt;li&gt;Matt Oates&lt;/li&gt;
&lt;li&gt;Moritz Lenz&lt;/li&gt;
&lt;li&gt;Mouq&lt;/li&gt;
&lt;li&gt;Salve J Nilsen&lt;/li&gt;
&lt;li&gt;Sam S&lt;/li&gt;
&lt;li&gt;Skids&lt;/li&gt;
&lt;li&gt;timotimo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;致谢&#34;&gt;致谢&lt;/h2&gt;
&lt;p&gt;启发于 Peteris Krumins 的 Perl 5 example &lt;a href=&#34;http://www.catonmat.net/download/perl1line.txt&#34;&gt;文件&lt;/a&gt;。他逐字逐句地写了一本关于 Perl 5 单行 的&lt;a href=&#34;http://www.nostarch.com/perloneliners&#34;&gt;书&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://webchat.freenode.net/?channels=raku&amp;amp;nick=&#34;&gt;irc&lt;/a&gt;上有很好地 folks。&lt;/p&gt;
&lt;h2 id=&#34;内容&#34;&gt;内容&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;介绍&lt;/li&gt;
&lt;li&gt;教程&lt;/li&gt;
&lt;li&gt;文件间距&lt;/li&gt;
&lt;li&gt;行号&lt;/li&gt;
&lt;li&gt;计算&lt;/li&gt;
&lt;li&gt;创建字符串和创建数组&lt;/li&gt;
&lt;li&gt;文本转换和替换&lt;/li&gt;
&lt;li&gt;文本分析&lt;/li&gt;
&lt;li&gt;选择性的行打印&lt;/li&gt;
&lt;li&gt;使用管道转换数据(进行中)&lt;/li&gt;
&lt;li&gt;WWW(进行中)&lt;/li&gt;
&lt;li&gt;转换到 Windows&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;介绍&#34;&gt;介绍&lt;/h3&gt;
&lt;p&gt;把 Perl 和其它语言区别开的一件事情是在单行代码中写小程序的能力，即人们所熟知的&amp;quot;单行&amp;quot;。在终端里直接键入一个程序比写一个废弃的脚本往往更快。并且单行程序也很强大；它们是羽翼丰满的程序，能够加载外部库，但是也能集成到终端中。你可以在单行程序中输入或输出数据。&lt;/p&gt;
&lt;p&gt;像 Perl 5 一样， Raku支持单行程序。还有就像 Raku 到处清理着 Perl 5 的毒瘤一样，Raku 的单行语法也更好了。它拥有更少的特殊变量和选项因此更容易记忆。这本书提供了很多有用的 Raku 单行例子，从找出文件中得重复行到运行一个 web 服务器，它几乎能做所有事情。尽管 Raku 拥有更少的特殊变量，但是由于它高级的面向对象的语法，Raku 中的大部分单行程序比等价的 Perl 5 单行程序更短。&lt;/p&gt;
&lt;p&gt;这本书可以以多种方式阅读。如果你是单行程序的新手，从教程开始。它带领你掌握单行程序的核心概念；不要担心，一旦你理解了它会很容易。如果你精通 Perl，Bash，或 Sed/Awk，你可以立马开始工作。随意跳过和浏览你所感兴趣的东西。如果有些代码你不理解，那么在终端中试试！这个仓库中包含的无处不在的文件是 example.txt，它会在很多单行程序中用到。&lt;/p&gt;
&lt;p&gt;使用单行编程仅仅是 Raku 擅长的一个范例。这样的代码小而美，但是同时你正学习的是一种生产力技能，记住你正在学的是一种新的编程语言。检查 &lt;a href=&#34;raku.org&#34;&gt;raku.org&lt;/a&gt; 网站获取官方文档。&lt;/p&gt;
&lt;h3 id=&#34;教程&#34;&gt;教程&lt;/h3&gt;
&lt;p&gt;要开始单行程序，所有你要掌握的是 &lt;strong&gt;-e&lt;/strong&gt; 选项。这告诉 Perl 把它后面所跟的东西作为一个程序去执行。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;raku&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;say &amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们来一步步剖析这段代码。 &lt;code&gt;raku&lt;/code&gt; 引用了 Raku 程序， &lt;code&gt;-e&lt;/code&gt; 告诉 Raku 去执行，而 &lt;code&gt;&#39;say &amp;quot;Hello, World!&amp;quot;&#39;&lt;/code&gt;是要执行的程序。每个程序都必须被包围在单引号中（除了在 Windows 上，查看 &lt;a href=&#34;https://github.com/dnmfarrell/Raku-One-Liners#converting-for-windows&#34;&gt;转换到 Windows&lt;/a&gt;）。要运行单行程序，就把它键入到终端中好了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ba&#34; data-lang=&#34;ba&#34;&gt;&amp;gt; raku -e &amp;#39;say &amp;#34;Hello, World!&amp;#34;&amp;#39;
Hello, World!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你想加载一个文件，就把文件路径添加到程序代码的后面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;for (lines) {say $_}&amp;#39;&lt;/span&gt; /path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个程序打印出了 &lt;code&gt;path/to/file.txt&lt;/code&gt; 的每一行。你可能知道 &lt;code&gt;$_&lt;/code&gt; 是默认变量，它在这儿是指正被循环的当前行。&lt;code&gt;lines&lt;/code&gt; 是一个列表，当你传递一个文件路径给单行程序的时候会自动为你创建这个列表。现在我们来重写那个单行程序，一步一步。它们都是等价的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;for (lines) { say $_ }&amp;#39;&lt;/span&gt; /path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;for (lines) { $_.say }&amp;#39;&lt;/span&gt; /path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;for (lines) { .say }&amp;#39;&lt;/span&gt; /path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say for (lines)&amp;#39;&lt;/span&gt; /path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say for lines&amp;#39;&lt;/span&gt; /path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就像 &lt;code&gt;$_&lt;/code&gt; 是默认变量一样，在默认变量身上调用的方法可以省略掉变量引用。它们变成了默认方法。所以 &lt;code&gt;$_.say&lt;/code&gt; 变成 &lt;code&gt;.say&lt;/code&gt;。回报给写单行程序的人的东西是 - 更少的键入！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-n&lt;/code&gt; 选项改变了程序的行为：它为文件中的每一行执行一次代码。所以，大写并打印 &lt;code&gt;path/to/file.txt&lt;/code&gt; 的每一行你会键入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.uc.say&amp;#39;&lt;/span&gt; /path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-p&lt;/code&gt; 选项就像 &lt;code&gt;-n&lt;/code&gt;, 除了它会自动打印 &lt;code&gt;$_&lt;/code&gt; 之外。所以大写文件中的所有行的另外一种方法是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;$_ = .uc&amp;#39;&lt;/span&gt; /path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者两个做同样事情的更短的版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;.=uc&amp;#39;&lt;/span&gt; /path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe .&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;uc   /path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在第二个例子中，我们可以完全移除周围的单引号。这种场景很少遇到，但是如果你的单行程序中没有空格并且没有符号或引号，那么你通常可以移除外部的引号。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-n&lt;/code&gt; 和 &lt;code&gt;-p&lt;/code&gt; 选项真的很有用。本书中也有很多使用它们的单行例子。&lt;/p&gt;
&lt;p&gt;最后一件你要知道的事情是怎么加载模块。 &lt;code&gt;-M&lt;/code&gt; 开关代表着加载模块：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -M URI::Encode -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say encode_uri(&amp;#34;example.com/10 ways to crush it with Raku&amp;#34;)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-M URI::Encode&lt;/code&gt; 加载了 &lt;code&gt;URI::Encode&lt;/code&gt; 模块，它导入了 &lt;em&gt;encode_uri&lt;/em&gt; 子例程。 你可以多次使用 &lt;code&gt;-M&lt;/code&gt; 来加载多个模块：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -M URI::Encode -M URI -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;your code here&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你有一个还没有安装的本地模块呢？ 简单， 仅仅传递一个 &lt;code&gt;-I&lt;/code&gt; 开关来包含那个目录好了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -I lib -M URI::Encode -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;your code here&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在 Raku 会在 &lt;code&gt;lib&lt;/code&gt; 目录中搜索 &lt;code&gt;URI::Encode&lt;/code&gt; 模块，和标准的安装位置一样。&lt;/p&gt;
&lt;p&gt;要查看 Raku 命令行开关有哪些， 使用 &lt;code&gt;-h&lt;/code&gt; 选项查看帮助：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这打印可获得的不错的统计。&lt;/p&gt;
&lt;h3 id=&#34;文件间距&#34;&gt;文件间距&lt;/h3&gt;
&lt;p&gt;Double space a file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;$_ ~= &amp;#34;\n&amp;#34;&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;N-space a file (例如. 4倍空白)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;$_ ~= &amp;#34;\n&amp;#34; x 4&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在每一行前面添加一个空行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;say &amp;#34;&amp;#34;&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;移除所有空行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;raku&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;ow&#34;&gt;ne&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.say if /\S/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#39;&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;raku&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;ow&#34;&gt;ne&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.say if .chars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;移除所有的连续空白行，只保留一行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;$*ARGFILES.slurp.subst(/\n+/, &amp;#34;\n\n&amp;#34;, :g).say&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;行号&#34;&gt;行号&lt;/h3&gt;
&lt;p&gt;给文件中的所有行编号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say &amp;#34;{++$} $_&amp;#34;&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say $*ARGFILES.ins ~ &amp;#34; $_ &amp;#34;&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只给文件中得非空行编号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;$_ = &amp;#34;{++$} $_&amp;#34; if /\S/&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;给所有行编号但是只打印非空行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;$_ = $*ARGFILES.ins ~ &amp;#34; $_ &amp;#34; if /\S/&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印文件中行数的总数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say lines.elems&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say lines.Int&amp;#39;&lt;/span&gt;   example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;lines.Int.say&amp;#39;&lt;/span&gt;   example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印出文件中非空行的总数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;lines.grep(/\S/.elems.say)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印文件中空行的数量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;lines.grep(/^\s*$/).elems.say&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;计算&#34;&gt;计算&lt;/h3&gt;
&lt;p&gt;检查一个数是否是质数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say &amp;#34;7 is prime&amp;#34; if 7.is-prime&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印一行中所有字段的和：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say [+] .split(&amp;#34;\t&amp;#34;)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印所有行的所有字段的和：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say [+] lines.split(&amp;#34;\t&amp;#34;)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打乱行中的所有字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.split(&amp;#34;\t&amp;#34;).pick(*).join(&amp;#34;\t&amp;#34;).say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出一行中最小的元素：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.split(&amp;#34;\t&amp;#34;).min.say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出所有行的最小的元素：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;lines.split(&amp;#34;\t&amp;#34;).min.say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出一行中最大的元素：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.split(&amp;#34;\t&amp;#34;).max.say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出所有行的最大的元素：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;lines.split(&amp;#34;\t&amp;#34;).max.say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出一行中得数值化最小元素：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.split(&amp;#34;\t&amp;#34;)».Numeric.min.say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出一行中得数值化最大元素：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.split(&amp;#34;\t&amp;#34;)».Numeric.max.say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用字段的绝对值替换每个字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.split(&amp;#34;\t&amp;#34;).map(*.abs).join(&amp;#34;\t&amp;#34;)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出每行中字符的总数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.chars.say&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出每行中单词的总数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.words.elems.say&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出每行中由逗号分隔的元素的总数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.split(&amp;#34;,&amp;#34;).elems.say&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出所有行的字段（单词）的总数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say lines.split(&amp;#34;\t&amp;#34;).elems&amp;#39;&lt;/span&gt; example.txt  &lt;span class=&#34;c1&#34;&gt;# fields&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say lines.words.elems&amp;#39;&lt;/span&gt; example.txt        &lt;span class=&#34;c1&#34;&gt;# words&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印匹配某个模式的字段的总数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say lines.split(&amp;#34;\t&amp;#34;).comb(/pattern/).elems&amp;#39;&lt;/span&gt; example.txt &lt;span class=&#34;c1&#34;&gt;# fields&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say lines.words.comb(/pattern/).elems&amp;#39;&lt;/span&gt; example.txt       &lt;span class=&#34;c1&#34;&gt;# words&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印匹配某个模式的行的总数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say lines.grep(/in/.elems)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印数字 PI 到 n 位小数点(例如. 10位)：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say pi.fmt(&amp;#34;%.10f&amp;#34;);&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印数字 PI 到 15 位小数点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say π&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印数字 E 到 n 位小数点(例如. 10位)：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say e.fmt(&amp;#34;%.10f&amp;#34;);&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印数字 E 到 15 位小数点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say e&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印 UNIX 时间 (seconds since Jan 1, 1970, 00:00:00 UTC)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say time&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印 GMT (格林威治标准时间)和地方计算机时间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -MDateTime::TimeZone -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say to-timezone(&amp;#34;GMT&amp;#34;,DateTime.now)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say DateTime.now&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以 H:M:S 格式打印当地计算机时间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say DateTime.now.map({$_.hour, $_.minute, $_.second.round}).join(&amp;#34;:&amp;#34;)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印昨天的日期：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say DateTime.now.earlier(:1day)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印日期： 14 个月, 9 天，和 7 秒之前&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say DateTime.now.earlier(:14months).earlier(:9days).earlier(:7seconds)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在标准输出前加上时间戳（GMT，地方时间）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tail -f logfile &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; raku -MDateTime::TimeZone -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say to-timezone(&amp;#34;GMT&amp;#34;,DateTime.now) ~ &amp;#34;\t$_&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tail -f logfile &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say DateTime.now ~ &amp;#34;\t$_&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;计算 5 的阶乘：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say [*] 1..5&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;计算最大公约数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say [gcd] @list_of_numbers&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用欧几里得算法计算数字 20 和 35 的最大公约数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say (20, 35, *%* ... 0)[*-2]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;计算 20 和 35 的最小公倍数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say 20 lcm 35&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用欧几里得算法: n*m/gcd(n,m) 计算数字 20 和 35 的最小公倍数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say 20 * 35 / (20 gcd 35)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成 10 个 5 到 15（不包括 15）之间的随机数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say for (5..^15).roll(10)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出并打印列表的全排列：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say .join for [1..5].permutations&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成幂集&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say for &amp;lt;1 2 3&amp;gt;.combinations&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把 IP 地址转换为无符号整数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say :256[&amp;#34;127.0.0.1&amp;#34;.comb(/\d+/)]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say +&amp;#34;:256[{q/127.0.0.1/.subst(:g,/\./,q/,/)}]&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say Buf.new(+«&amp;#34;127.0.0.1&amp;#34;.split(&amp;#34;.&amp;#34;)).unpack(&amp;#34;N&amp;#34;)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把无符号整数转换为 IP 地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say join &amp;#34;.&amp;#34;, @(pack &amp;#34;N&amp;#34;, 2130706433)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say join &amp;#34;.&amp;#34;, map { ((2130706433+&amp;gt;(8*$_))+&amp;amp;0xFF) }, (3...0)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;创建字符串和创建数组&#34;&gt;创建字符串和创建数组&lt;/h3&gt;
&lt;p&gt;生成并打印字母表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say for &amp;#34;a&amp;#34;..&amp;#34;z&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成并打印所有从 &amp;ldquo;a&amp;rdquo; 到 &amp;ldquo;zz&amp;rdquo; 的字符串：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say for &amp;#34;a&amp;#34;..&amp;#34;zz&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把整数转换为十六进制：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say 255.base(16)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say sprintf(&amp;#34;%x&amp;#34;, 255)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把整数打印为十六进制转换表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say sprintf(&amp;#34;%3i =&amp;gt; %2x&amp;#34;, $_, $_) for 0..255&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把整数编码为百分数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say sprintf(&amp;#34;%%%x&amp;#34;, 255)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成一个随机的 10 个 a-z 字符长度的字符串：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;print roll 10, &amp;#34;a&amp;#34;..&amp;#34;z&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;print roll &amp;#34;a&amp;#34;..&amp;#34;z&amp;#34;: 10&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成一个随机的 15 个 ASCII 字符长度的密码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;print roll 15, &amp;#34;0&amp;#34;..&amp;#34;z&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;print roll &amp;#34;0&amp;#34;..&amp;#34;z&amp;#34;: 15&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建一个指定长度的字符串：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;print &amp;#34;a&amp;#34; x 50&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成并打印从 1 到 100 数字为偶数的数组：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;(1..100).grep(* %% 2).say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出字符串的长度：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34;storm in a teacup&amp;#34;.chars.say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找出数组的元素个数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;my @letters = &amp;#34;a&amp;#34;..&amp;#34;z&amp;#34;; @letters.Int.say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;文本转换和替换&#34;&gt;文本转换和替换&lt;/h3&gt;
&lt;p&gt;对文件进行 ROT 13 加密：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;tr/A..Za..z/N..ZA..Mn..za..m/&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对字符串进行 Base64 编码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -MMIME::Base64 -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;print MIME::Base64.encode-str($_)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对字符串进行 Base64 解码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -MMIME::Base64 -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;print MIME::Base64.decode-str($_)&amp;#39;&lt;/span&gt; base64.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对字符串进行 URL 转义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -MURI::Encode -le &lt;span class=&#34;s1&#34;&gt;&amp;#39;say uri_encode($string)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;URL-unescape a string&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -MURI::Encode -le &lt;span class=&#34;s1&#34;&gt;&amp;#39;say uri_decode($string)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;HTML-encode a string&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -MHTML::Entity -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;print encode-entities($string)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;HTML-decode a string&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -MHTML::Entity -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;print decode-entities($string)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把所有文本转换为大写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;.=uc&amp;#39;&lt;/span&gt;    example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say .uc&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把所有文本转换为小写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;.=lc&amp;#39;&lt;/span&gt;    example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say .lc&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只把每行的第一个单词转换为大写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say s/(\w+){}/{$0.uc}/&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;颠倒字母的大小写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;tr/a..zA..Z/A..Za..z/&amp;#39;&lt;/span&gt;           example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say tr/a..zA..Z/A..Za..z/.after&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对每行进行驼峰式大小写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say .wordcase&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在每行的开头去掉前置空白（空格、tabs）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say .trim-leading&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从每行的末尾去掉结尾的空白（空格、tabs）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say .trim-trailing&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从每行中去除行首和行尾的空白：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say .trim&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把 UNIX 换行符转换为 DOS/Windows 换行符：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;print .subst(/\n/, &amp;#34;\r\n&amp;#34;)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把 DOS/Windows  换行符转换为 UNIX 换行符：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;print .subst(/\r\n/, &amp;#34;\n&amp;#34;)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把每行中所有的 &amp;ldquo;ut&amp;rdquo; 实体用 &amp;ldquo;foo&amp;rdquo; 替换掉：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;s:g/ut/foo/&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把包含 &amp;ldquo;lorem&amp;rdquo; 的每行中所有的 &amp;ldquo;ut&amp;rdquo; 实体用 &amp;ldquo;foo&amp;rdquo; 替换掉：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;s:g/ut/foo/ if /Lorem/&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把文件转换为 JSON 格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -M JSON::Tiny -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say to-json(lines)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从文件的每一行中随机挑选 5 个单词：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;say .words.pick(5)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;文本分析&#34;&gt;文本分析&lt;/h3&gt;
&lt;p&gt;Print n-grams of a string&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;my $n=2; say &amp;#34;banana&amp;#34;.comb.rotor($n,$n-1).map({[~] @$_})&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;打印唯一的 n-grams
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;```&lt;/span&gt;bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;my $n=2; say &amp;#34;banana&amp;#34;.comb.rotor($n,$n-1).map({[~] @$_}).Set.sort&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印 n-grams 的出现次数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;my $n=2; say &amp;#34;banana&amp;#34;.comb.rotor($n,$n-1).map({[~] @$_}).Bag.sort.join(&amp;#34;\n&amp;#34;)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印单词的出现次数(1-grams)：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say lines[0].words.map({[~] @$_}).Bag.sort.join(&amp;#34;\n&amp;#34;)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基于一组 1-grams 打印 Dice 相似系数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;my $a=&amp;#34;banana&amp;#34;.comb;my $b=&amp;#34;anna&amp;#34;.comb;say ($a (&amp;amp;) $b)/($a.Set + $b.Set)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基于 1-grams 打印卡得杰相似系数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;my $a=&amp;#34;banana&amp;#34;.comb;my $b=&amp;#34;anna&amp;#34;.comb;say ($a (&amp;amp;) $b) / ($a (|) $b)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基于 1-grams 打印重叠系数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;my $a=&amp;#34;banana&amp;#34;.comb;my $b=&amp;#34;anna&amp;#34;.comb;say ($a (&amp;amp;) $b)/($a.Set.elems,$b.Set.elems).min&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基于 1-grams 打印类似的余弦：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;my $a=&amp;#34;banana&amp;#34;.comb;my $b=&amp;#34;anna&amp;#34;.comb;say ($a (&amp;amp;) $b)/($a.Set.elems.sqrt*$b.Set.elems.sqrt)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 上面的命令提示 Seq 已经被消费&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;my $a=&amp;#34;banana&amp;#34;.comb;my $b=&amp;#34;anna&amp;#34;.comb;say ($a.cache (&amp;amp;) $b.cache)/($a.cache.Set.elems.sqrt*$b.cache.Set.elems.sqrt)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建字符串中字符的索引并打印出来：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say {}.push: %(&amp;#34;banana&amp;#34;.comb.pairs).invert&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建一行中单词的所以并打印出来：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;({}.push: %(lines[0].words.pairs).invert).sort.join(&amp;#34;\n&amp;#34;).say&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;选择性的行打印&#34;&gt;选择性的行打印&lt;/h3&gt;
&lt;p&gt;打印文件的第一行（模仿 head -1）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say;exit&amp;#39;&lt;/span&gt;      example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;lines[0].say&amp;#39;&lt;/span&gt;    example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;lines.shift.say&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印文件的前 10 行（模仿 head -10）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;exit if ++$ &amp;gt; 10&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say if ++$ &amp;lt; 11&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印文件的最后一行（模仿 tail -1）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;lines.pop.say&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印文件的最后 5 行（模仿 tail -5）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say for lines[*-5..*]&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只打印包含元音的行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;lt;[aeiou]&amp;gt;/ &amp;amp;&amp;amp; .print&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印包含所有元音的行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say if .comb (&amp;gt;=) &amp;lt;a e i o u&amp;gt;&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say if .comb ⊇ &amp;lt;a e i o u&amp;gt;&amp;#39;&lt;/span&gt;    example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印字符数大于或等于 80 的行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.print if .chars &amp;gt;= 80&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.chars &amp;gt;= 80 &amp;amp;&amp;amp; .print&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只打印第二行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.print if ++$ == 2&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印除了第二行的所有行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;next if ++$ == 2&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印第一行到第三行之间的所有行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.print if (1..3).any == ++$&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印两个正则表达式之间（包含匹配那个正则表达式的行）的所有行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.print if /^Lorem/../laborum\.$/&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印最长的行的长度：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say lines.max.chars&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;state $l=0; $l = .chars if .chars &amp;gt; $l;END { $l.say }&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印长度最长的行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say lines.max&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;my $l=&amp;#34;&amp;#34;; for (lines) {$l = $_ if .chars &amp;gt; $l.chars};END { $l.say }&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印包含数字的所有行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say if /\d/&amp;#39;&lt;/span&gt;             example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say for lines.grep(/\d/)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;/\d/ &amp;amp;&amp;amp; .say&amp;#39;&lt;/span&gt;             example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;next if ! $_.match(/\d/)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印只包含数字的所有行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say if /^\d+$/&amp;#39;&lt;/span&gt;             example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say for lines.grep(/^\d+$/)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;/^\d+$/ &amp;amp;&amp;amp; .say&amp;#39;&lt;/span&gt;             example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;next if ! $_.match(/^\d+$/)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印每个奇数行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say if ++$ % 2&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印每个偶数行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say if ! (++$ % 2)&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印所有重复的行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;state %l;.say if ++%l{$_}==2&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印唯一的行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;state %l;.say if ++%l{$_}==1&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印每一行中的第一个字段（单词）（模仿 cut -f 1 -d &amp;rsquo; &amp;lsquo;）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.words[0].say&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用管道转换数据&#34;&gt;使用管道转换数据&lt;/h3&gt;
&lt;p&gt;Raku程序直接集成到了命令行中。你可以使用 &lt;code&gt;|&lt;/code&gt; 管道符号从单行程序中输出数据和输入数据到单行程序中。为了 从管道中输入数据， Raku 自动地把 STDIN 设置为 &lt;code&gt;$*IN&lt;/code&gt;。就像对文件那样，从管道输入的数据在单行中也能使用 &lt;code&gt;-n&lt;/code&gt; 来进行循环迭代。从单行程序中输出数据就使用 print 或 say 好了。&lt;/p&gt;
&lt;p&gt;在当前目录中对所有文件进行 JSON 编码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; raku -M JSON::Tiny -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say to-json(lines)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印文件中的大约 5% 的随机样本行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.say if 1.rand &amp;lt;= 0.05&amp;#39;&lt;/span&gt; /usr/share/dict/words
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;颜色转换， 从 HTML 到 RGB&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#ffff00&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.comb(/\w\w/).map({:16($_)}).say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;颜色转换， 从 RGB 到 HTML&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#ffff00&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;.comb(/\w\w/).map({:16($_)}).say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;www&#34;&gt;WWW&lt;/h3&gt;
&lt;p&gt;下载一个页面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -M HTTP::UserAgent -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say HTTP::UserAgent.new.get(&amp;#34;google.com&amp;#34;).content&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载一个页面并剥离 HTML：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget -O - &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://raku.org&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; raku -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;s:g/\&amp;lt;.+?\&amp;gt;//.say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载一个页面并剥离并解码 HTML：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget -O - &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://raku.org&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; raku -MHTML::Strip -ne &lt;span class=&#34;s1&#34;&gt;&amp;#39;strip_html($_).say&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开启一个简单地 web 服务器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -M HTTP::Server::Simple -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;HTTP::Server::Simple.new.run&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;转换到-windows&#34;&gt;转换到 Windows&lt;/h3&gt;
&lt;p&gt;一旦你知道了里面的门道之后那么在 Windows 上运行单行程序就是小草一碟。单行程序既可以在 cmd.exe 中运行，又可以在 Powershell 中运行。主要的规则是：用双引号替换掉外部的单引号，在单行程序的内部使用插值引用操作符 &lt;code&gt;qq//&lt;/code&gt; 来把字符串括起来。对于非插值的引起，你可以使用单引号。我们来看几个例子。&lt;/p&gt;
&lt;p&gt;这儿有一个打印时间的单行程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say DateTime.now&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要在 Windows 上运行，我们仅仅用双引号替换掉单引号好了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;say DateTime.now&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个单行程序给文件中每一行添加了一个换行符，使用了插值字符串：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s1&#34;&gt;&amp;#39;$_ ~= &amp;#34;\n&amp;#34;&amp;#39;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Windows 上这应该写为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -pe &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ~= qq/\n/&amp;#34;&lt;/span&gt; example.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种情况下，我们想对换行符进行插值，并且不为该行字面地添加反斜线和字符&amp;quot;n&amp;quot;，所以我们必须使用 qq。但是你通常也可以像这样在单行程序中使用单引号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;say &amp;#34;Hello, World!&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Windows 上这应该写为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;say &amp;#39;hello, World!&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;简单地输出重定向工作起来像基于 Unix 系统那样。 这个单行程序使用 &lt;code&gt;&amp;gt;&lt;/code&gt; 把 ASCII 字符索引表打印到一个文件中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;raku -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;say .chr ~ &amp;#39; &amp;#39; ~ &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; for 0..255&amp;#34;&lt;/span&gt; &amp;gt; ascii_codes.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在使用 &lt;code&gt;&amp;gt;&lt;/code&gt; 的时候，如果文件不存在就会创建一个。如果文件确实存在，它会被重写。你可能更想追加到文件，使用 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 代替。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmycloud.github.io/categories/rakulang">rakulang</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmycloud.github.io/tags/oneliner">oneliner</category>
                                
                            
                        
                    
                
                <guid>https://ohmycloud.github.io/notes/2015-08-25-one-liners-in-raku/</guid>
                <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
            </item>
        
    </channel>
</rss>


