{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003ch1 id=\"raku-单行程序httpsgithubcomdnmfarrellraku-one-liners\"\u003e\u003ca href=\"https://github.com/dnmfarrell/Raku-One-Liners\"\u003eRaku 单行程序\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e这本书在进行之中。我希望你能觉得它有趣，甚至可能有用！如果你想贡献反馈的话，那么很欢迎提问题还有新的或有提升的正则表达式。\u003c/p\u003e\n\u003ch2 id=\"作者\"\u003e作者\u003c/h2\u003e\n\u003cp\u003e戴维法瑞尔 \u003ca href=\"PerlTricks.com\"\u003ePerlTricks.com\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"版本\"\u003e版本\u003c/h2\u003e\n\u003cp\u003e版本 0.01\u003c/p\u003e\n\u003ch2 id=\"许可\"\u003e许可\u003c/h2\u003e\n\u003cp\u003eFreeBSD\u003c/p\u003e\n\u003ch2 id=\"贡献者\"\u003e贡献者\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAlexander Moquin\u003c/li\u003e\n\u003cli\u003eBruce Gray\u003c/li\u003e\n\u003cli\u003eCarl Mäsak\u003c/li\u003e\n\u003cli\u003eDavid H. Adler\u003c/li\u003e\n\u003cli\u003eFROGGS\u003c/li\u003e\n\u003cli\u003eHelmut Wollmersdorfer\u003c/li\u003e\n\u003cli\u003ejaphb\u003c/li\u003e\n\u003cli\u003eLarry Wall\u003c/li\u003e\n\u003cli\u003eMatt Oates\u003c/li\u003e\n\u003cli\u003eMoritz Lenz\u003c/li\u003e\n\u003cli\u003eMouq\u003c/li\u003e\n\u003cli\u003eSalve J Nilsen\u003c/li\u003e\n\u003cli\u003eSam S\u003c/li\u003e\n\u003cli\u003eSkids\u003c/li\u003e\n\u003cli\u003etimotimo\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"致谢\"\u003e致谢\u003c/h2\u003e\n\u003cp\u003e启发于 Peteris Krumins 的 Perl 5 example \u003ca href=\"http://www.catonmat.net/download/perl1line.txt\"\u003e文件\u003c/a\u003e。他逐字逐句地写了一本关于 Perl 5 单行 的\u003ca href=\"http://www.nostarch.com/perloneliners\"\u003e书\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://webchat.freenode.net/?channels=raku\u0026amp;nick=\"\u003eirc\u003c/a\u003e上有很好地 folks。\u003c/p\u003e\n\u003ch2 id=\"内容\"\u003e内容\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e介绍\u003c/li\u003e\n\u003cli\u003e教程\u003c/li\u003e\n\u003cli\u003e文件间距\u003c/li\u003e\n\u003cli\u003e行号\u003c/li\u003e\n\u003cli\u003e计算\u003c/li\u003e\n\u003cli\u003e创建字符串和创建数组\u003c/li\u003e\n\u003cli\u003e文本转换和替换\u003c/li\u003e\n\u003cli\u003e文本分析\u003c/li\u003e\n\u003cli\u003e选择性的行打印\u003c/li\u003e\n\u003cli\u003e使用管道转换数据(进行中)\u003c/li\u003e\n\u003cli\u003eWWW(进行中)\u003c/li\u003e\n\u003cli\u003e转换到 Windows\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"介绍\"\u003e介绍\u003c/h3\u003e\n\u003cp\u003e把 Perl 和其它语言区别开的一件事情是在单行代码中写小程序的能力，即人们所熟知的\u0026quot;单行\u0026quot;。在终端里直接键入一个程序比写一个废弃的脚本往往更快。并且单行程序也很强大；它们是羽翼丰满的程序，能够加载外部库，但是也能集成到终端中。你可以在单行程序中输入或输出数据。\u003c/p\u003e\n\u003cp\u003e像 Perl 5 一样， Raku支持单行程序。还有就像 Raku 到处清理着 Perl 5 的毒瘤一样，Raku 的单行语法也更好了。它拥有更少的特殊变量和选项因此更容易记忆。这本书提供了很多有用的 Raku 单行例子，从找出文件中得重复行到运行一个 web 服务器，它几乎能做所有事情。尽管 Raku 拥有更少的特殊变量，但是由于它高级的面向对象的语法，Raku 中的大部分单行程序比等价的 Perl 5 单行程序更短。\u003c/p\u003e\n\u003cp\u003e这本书可以以多种方式阅读。如果你是单行程序的新手，从教程开始。它带领你掌握单行程序的核心概念；不要担心，一旦你理解了它会很容易。如果你精通 Perl，Bash，或 Sed/Awk，你可以立马开始工作。随意跳过和浏览你所感兴趣的东西。如果有些代码你不理解，那么在终端中试试！这个仓库中包含的无处不在的文件是 example.txt，它会在很多单行程序中用到。\u003c/p\u003e\n\u003cp\u003e使用单行编程仅仅是 Raku 擅长的一个范例。这样的代码小而美，但是同时你正学习的是一种生产力技能，记住你正在学的是一种新的编程语言。检查 \u003ca href=\"raku.org\"\u003eraku.org\u003c/a\u003e 网站获取官方文档。\u003c/p\u003e\n\u003ch3 id=\"教程\"\u003e教程\u003c/h3\u003e\n\u003cp\u003e要开始单行程序，所有你要掌握的是 \u003cstrong\u003e-e\u003c/strong\u003e 选项。这告诉 Perl 把它后面所跟的东西作为一个程序去执行。例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nb\"\u003eraku\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"no\"\u003ee\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esay \u0026#34;Hello, World!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们来一步步剖析这段代码。 \u003ccode\u003eraku\u003c/code\u003e 引用了 Raku 程序， \u003ccode\u003e-e\u003c/code\u003e 告诉 Raku 去执行，而 \u003ccode\u003e'say \u0026quot;Hello, World!\u0026quot;'\u003c/code\u003e是要执行的程序。每个程序都必须被包围在单引号中（除了在 Windows 上，查看 \u003ca href=\"https://github.com/dnmfarrell/Raku-One-Liners#converting-for-windows\"\u003e转换到 Windows\u003c/a\u003e）。要运行单行程序，就把它键入到终端中好了：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-ba\" data-lang=\"ba\"\u003e\u0026gt; raku -e 'say \u0026quot;Hello, World!\u0026quot;'\nHello, World!\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果你想加载一个文件，就把文件路径添加到程序代码的后面：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;for (lines) {say $_}\u0026#39;\u003c/span\u003e /path/to/file.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个程序打印出了 \u003ccode\u003epath/to/file.txt\u003c/code\u003e 的每一行。你可能知道 \u003ccode\u003e$_\u003c/code\u003e 是默认变量，它在这儿是指正被循环的当前行。\u003ccode\u003elines\u003c/code\u003e 是一个列表，当你传递一个文件路径给单行程序的时候会自动为你创建这个列表。现在我们来重写那个单行程序，一步一步。它们都是等价的：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;for (lines) { say $_ }\u0026#39;\u003c/span\u003e /path/to/file.txt\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;for (lines) { $_.say }\u0026#39;\u003c/span\u003e /path/to/file.txt\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;for (lines) { .say }\u0026#39;\u003c/span\u003e /path/to/file.txt\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;.say for (lines)\u0026#39;\u003c/span\u003e /path/to/file.txt\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;.say for lines\u0026#39;\u003c/span\u003e /path/to/file.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e就像 \u003ccode\u003e$_\u003c/code\u003e 是默认变量一样，在默认变量身上调用的方法可以省略掉变量引用。它们变成了默认方法。所以 \u003ccode\u003e$_.say\u003c/code\u003e 变成 \u003ccode\u003e.say\u003c/code\u003e。回报给写单行程序的人的东西是 - 更少的键入！\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e-n\u003c/code\u003e 选项改变了程序的行为：它为文件中的每一行执行一次代码。所以，大写并打印 \u003ccode\u003epath/to/file.txt\u003c/code\u003e 的每一行你会键入：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.uc.say\u0026#39;\u003c/span\u003e /path/to/file.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e-p\u003c/code\u003e 选项就像 \u003ccode\u003e-n\u003c/code\u003e, 除了它会自动打印 \u003ccode\u003e$_\u003c/code\u003e 之外。所以大写文件中的所有行的另外一种方法是：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;$_ = .uc\u0026#39;\u003c/span\u003e /path/to/file.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者两个做同样事情的更短的版本：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;.=uc\u0026#39;\u003c/span\u003e /path/to/file.txt\nraku -pe .\u003cspan class=\"o\"\u003e=\u003c/span\u003euc   /path/to/file.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在第二个例子中，我们可以完全移除周围的单引号。这种场景很少遇到，但是如果你的单行程序中没有空格并且没有符号或引号，那么你通常可以移除外部的引号。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e-n\u003c/code\u003e 和 \u003ccode\u003e-p\u003c/code\u003e 选项真的很有用。本书中也有很多使用它们的单行例子。\u003c/p\u003e\n\u003cp\u003e最后一件你要知道的事情是怎么加载模块。 \u003ccode\u003e-M\u003c/code\u003e 开关代表着加载模块：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -M URI::Encode -e \u003cspan class=\"s1\"\u003e\u0026#39;say encode_uri(\u0026#34;example.com/10 ways to crush it with Raku\u0026#34;)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e-M URI::Encode\u003c/code\u003e 加载了 \u003ccode\u003eURI::Encode\u003c/code\u003e 模块，它导入了 \u003cem\u003eencode_uri\u003c/em\u003e 子例程。 你可以多次使用 \u003ccode\u003e-M\u003c/code\u003e 来加载多个模块：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -M URI::Encode -M URI -e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026lt;your code here\u0026gt;\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你有一个还没有安装的本地模块呢？ 简单， 仅仅传递一个 \u003ccode\u003e-I\u003c/code\u003e 开关来包含那个目录好了：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -I lib -M URI::Encode -e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026lt;your code here\u0026gt;\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在 Raku 会在 \u003ccode\u003elib\u003c/code\u003e 目录中搜索 \u003ccode\u003eURI::Encode\u003c/code\u003e 模块，和标准的安装位置一样。\u003c/p\u003e\n\u003cp\u003e要查看 Raku 命令行开关有哪些， 使用 \u003ccode\u003e-h\u003c/code\u003e 选项查看帮助：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -h\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这打印可获得的不错的统计。\u003c/p\u003e\n\u003ch3 id=\"文件间距\"\u003e文件间距\u003c/h3\u003e\n\u003cp\u003eDouble space a file\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;$_ ~= \u0026#34;\\n\u0026#34;\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eN-space a file (例如. 4倍空白)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;$_ ~= \u0026#34;\\n\u0026#34; x 4\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在每一行前面添加一个空行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;say \u0026#34;\u0026#34;\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e移除所有空行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nb\"\u003eraku\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"ow\"\u003ene\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e.say if /\\S/\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e   \u003cspan class=\"n\"\u003eexample\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etxt\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eraku\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"ow\"\u003ene\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e.say if .chars\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"n\"\u003eexample\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etxt\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e移除所有的连续空白行，只保留一行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;$*ARGFILES.slurp.subst(/\\n+/, \u0026#34;\\n\\n\u0026#34;, :g).say\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"行号\"\u003e行号\u003c/h3\u003e\n\u003cp\u003e给文件中的所有行编号：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say \u0026#34;{++$} $_\u0026#34;\u0026#39;\u003c/span\u003e example.txt\nraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say $*ARGFILES.ins ~ \u0026#34; $_ \u0026#34;\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e只给文件中得非空行编号：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;$_ = \u0026#34;{++$} $_\u0026#34; if /\\S/\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e给所有行编号但是只打印非空行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;$_ = $*ARGFILES.ins ~ \u0026#34; $_ \u0026#34; if /\\S/\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印文件中行数的总数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say lines.elems\u0026#39;\u003c/span\u003e example.txt\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say lines.Int\u0026#39;\u003c/span\u003e   example.txt\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;lines.Int.say\u0026#39;\u003c/span\u003e   example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印出文件中非空行的总数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;lines.grep(/\\S/.elems.say)\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印文件中空行的数量：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;lines.grep(/^\\s*$/).elems.say\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"计算\"\u003e计算\u003c/h3\u003e\n\u003cp\u003e检查一个数是否是质数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say \u0026#34;7 is prime\u0026#34; if 7.is-prime\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印一行中所有字段的和：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say [+] .split(\u0026#34;\\t\u0026#34;)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印所有行的所有字段的和：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say [+] lines.split(\u0026#34;\\t\u0026#34;)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打乱行中的所有字段：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.split(\u0026#34;\\t\u0026#34;).pick(*).join(\u0026#34;\\t\u0026#34;).say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出一行中最小的元素：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.split(\u0026#34;\\t\u0026#34;).min.say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出所有行的最小的元素：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;lines.split(\u0026#34;\\t\u0026#34;).min.say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出一行中最大的元素：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.split(\u0026#34;\\t\u0026#34;).max.say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出所有行的最大的元素：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;lines.split(\u0026#34;\\t\u0026#34;).max.say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出一行中得数值化最小元素：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.split(\u0026#34;\\t\u0026#34;)».Numeric.min.say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出一行中得数值化最大元素：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.split(\u0026#34;\\t\u0026#34;)».Numeric.max.say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用字段的绝对值替换每个字段：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.split(\u0026#34;\\t\u0026#34;).map(*.abs).join(\u0026#34;\\t\u0026#34;)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出每行中字符的总数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.chars.say\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出每行中单词的总数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.words.elems.say\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出每行中由逗号分隔的元素的总数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.split(\u0026#34;,\u0026#34;).elems.say\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出所有行的字段（单词）的总数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say lines.split(\u0026#34;\\t\u0026#34;).elems\u0026#39;\u003c/span\u003e example.txt  \u003cspan class=\"c1\"\u003e# fields\u003c/span\u003e\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say lines.words.elems\u0026#39;\u003c/span\u003e example.txt        \u003cspan class=\"c1\"\u003e# words\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印匹配某个模式的字段的总数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say lines.split(\u0026#34;\\t\u0026#34;).comb(/pattern/).elems\u0026#39;\u003c/span\u003e example.txt \u003cspan class=\"c1\"\u003e# fields\u003c/span\u003e\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say lines.words.comb(/pattern/).elems\u0026#39;\u003c/span\u003e example.txt       \u003cspan class=\"c1\"\u003e# words\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印匹配某个模式的行的总数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say lines.grep(/in/.elems)\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印数字 PI 到 n 位小数点(例如. 10位)：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say pi.fmt(\u0026#34;%.10f\u0026#34;);\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印数字 PI 到 15 位小数点：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say π\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印数字 E 到 n 位小数点(例如. 10位)：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say e.fmt(\u0026#34;%.10f\u0026#34;);\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印数字 E 到 15 位小数点：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say e\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印 UNIX 时间 (seconds since Jan 1, 1970, 00:00:00 UTC)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say time\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印 GMT (格林威治标准时间)和地方计算机时间：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -MDateTime::TimeZone -e \u003cspan class=\"s1\"\u003e\u0026#39;say to-timezone(\u0026#34;GMT\u0026#34;,DateTime.now)\u0026#39;\u003c/span\u003e\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say DateTime.now\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以 H:M:S 格式打印当地计算机时间：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say DateTime.now.map({$_.hour, $_.minute, $_.second.round}).join(\u0026#34;:\u0026#34;)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印昨天的日期：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say DateTime.now.earlier(:1day)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印日期： 14 个月, 9 天，和 7 秒之前\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say DateTime.now.earlier(:14months).earlier(:9days).earlier(:7seconds)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在标准输出前加上时间戳（GMT，地方时间）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003etail -f logfile \u003cspan class=\"p\"\u003e|\u003c/span\u003e raku -MDateTime::TimeZone -ne \u003cspan class=\"s1\"\u003e\u0026#39;say to-timezone(\u0026#34;GMT\u0026#34;,DateTime.now) ~ \u0026#34;\\t$_\u0026#34;\u0026#39;\u003c/span\u003e\ntail -f logfile \u003cspan class=\"p\"\u003e|\u003c/span\u003e raku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say DateTime.now ~ \u0026#34;\\t$_\u0026#34;\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e计算 5 的阶乘：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say [*] 1..5\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e计算最大公约数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say [gcd] @list_of_numbers\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用欧几里得算法计算数字 20 和 35 的最大公约数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say (20, 35, *%* ... 0)[*-2]\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e计算 20 和 35 的最小公倍数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say 20 lcm 35\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用欧几里得算法: n*m/gcd(n,m) 计算数字 20 和 35 的最小公倍数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say 20 * 35 / (20 gcd 35)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生成 10 个 5 到 15（不包括 15）之间的随机数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;.say for (5..^15).roll(10)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出并打印列表的全排列：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say .join for [1..5].permutations\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生成幂集\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;.say for \u0026lt;1 2 3\u0026gt;.combinations\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把 IP 地址转换为无符号整数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say :256[\u0026#34;127.0.0.1\u0026#34;.comb(/\\d+/)]\u0026#39;\u003c/span\u003e\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say +\u0026#34;:256[{q/127.0.0.1/.subst(:g,/\\./,q/,/)}]\u0026#34;\u0026#39;\u003c/span\u003e\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say Buf.new(+«\u0026#34;127.0.0.1\u0026#34;.split(\u0026#34;.\u0026#34;)).unpack(\u0026#34;N\u0026#34;)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把无符号整数转换为 IP 地址：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say join \u0026#34;.\u0026#34;, @(pack \u0026#34;N\u0026#34;, 2130706433)\u0026#39;\u003c/span\u003e\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say join \u0026#34;.\u0026#34;, map { ((2130706433+\u0026gt;(8*$_))+\u0026amp;0xFF) }, (3...0)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"创建字符串和创建数组\"\u003e创建字符串和创建数组\u003c/h3\u003e\n\u003cp\u003e生成并打印字母表：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;.say for \u0026#34;a\u0026#34;..\u0026#34;z\u0026#34;\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生成并打印所有从 \u0026ldquo;a\u0026rdquo; 到 \u0026ldquo;zz\u0026rdquo; 的字符串：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;.say for \u0026#34;a\u0026#34;..\u0026#34;zz\u0026#34;\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把整数转换为十六进制：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say 255.base(16)\u0026#39;\u003c/span\u003e\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say sprintf(\u0026#34;%x\u0026#34;, 255)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把整数打印为十六进制转换表：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say sprintf(\u0026#34;%3i =\u0026gt; %2x\u0026#34;, $_, $_) for 0..255\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把整数编码为百分数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say sprintf(\u0026#34;%%%x\u0026#34;, 255)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生成一个随机的 10 个 a-z 字符长度的字符串：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;print roll 10, \u0026#34;a\u0026#34;..\u0026#34;z\u0026#34;\u0026#39;\u003c/span\u003e\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;print roll \u0026#34;a\u0026#34;..\u0026#34;z\u0026#34;: 10\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生成一个随机的 15 个 ASCII 字符长度的密码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;print roll 15, \u0026#34;0\u0026#34;..\u0026#34;z\u0026#34;\u0026#39;\u003c/span\u003e\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;print roll \u0026#34;0\u0026#34;..\u0026#34;z\u0026#34;: 15\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e创建一个指定长度的字符串：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;print \u0026#34;a\u0026#34; x 50\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生成并打印从 1 到 100 数字为偶数的数组：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;(1..100).grep(* %% 2).say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出字符串的长度：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#34;storm in a teacup\u0026#34;.chars.say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找出数组的元素个数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;my @letters = \u0026#34;a\u0026#34;..\u0026#34;z\u0026#34;; @letters.Int.say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"文本转换和替换\"\u003e文本转换和替换\u003c/h3\u003e\n\u003cp\u003e对文件进行 ROT 13 加密：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;tr/A..Za..z/N..ZA..Mn..za..m/\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对字符串进行 Base64 编码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -MMIME::Base64 -ne \u003cspan class=\"s1\"\u003e\u0026#39;print MIME::Base64.encode-str($_)\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对字符串进行 Base64 解码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -MMIME::Base64 -ne \u003cspan class=\"s1\"\u003e\u0026#39;print MIME::Base64.decode-str($_)\u0026#39;\u003c/span\u003e base64.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对字符串进行 URL 转义：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -MURI::Encode -le \u003cspan class=\"s1\"\u003e\u0026#39;say uri_encode($string)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eURL-unescape a string\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -MURI::Encode -le \u003cspan class=\"s1\"\u003e\u0026#39;say uri_decode($string)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHTML-encode a string\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -MHTML::Entity -e \u003cspan class=\"s1\"\u003e\u0026#39;print encode-entities($string)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHTML-decode a string\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -MHTML::Entity -e \u003cspan class=\"s1\"\u003e\u0026#39;print decode-entities($string)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把所有文本转换为大写：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;.=uc\u0026#39;\u003c/span\u003e    example.txt\nraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say .uc\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把所有文本转换为小写：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;.=lc\u0026#39;\u003c/span\u003e    example.txt\nraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say .lc\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e只把每行的第一个单词转换为大写：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say s/(\\w+){}/{$0.uc}/\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e颠倒字母的大小写：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;tr/a..zA..Z/A..Za..z/\u0026#39;\u003c/span\u003e           example.txt\nraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say tr/a..zA..Z/A..Za..z/.after\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对每行进行驼峰式大小写：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say .wordcase\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在每行的开头去掉前置空白（空格、tabs）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say .trim-leading\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e从每行的末尾去掉结尾的空白（空格、tabs）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say .trim-trailing\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e从每行中去除行首和行尾的空白：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say .trim\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把 UNIX 换行符转换为 DOS/Windows 换行符：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;print .subst(/\\n/, \u0026#34;\\r\\n\u0026#34;)\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把 DOS/Windows  换行符转换为 UNIX 换行符：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;print .subst(/\\r\\n/, \u0026#34;\\n\u0026#34;)\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把每行中所有的 \u0026ldquo;ut\u0026rdquo; 实体用 \u0026ldquo;foo\u0026rdquo; 替换掉：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;s:g/ut/foo/\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把包含 \u0026ldquo;lorem\u0026rdquo; 的每行中所有的 \u0026ldquo;ut\u0026rdquo; 实体用 \u0026ldquo;foo\u0026rdquo; 替换掉：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;s:g/ut/foo/ if /Lorem/\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把文件转换为 JSON 格式：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -M JSON::Tiny -e \u003cspan class=\"s1\"\u003e\u0026#39;say to-json(lines)\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e从文件的每一行中随机挑选 5 个单词：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;say .words.pick(5)\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"文本分析\"\u003e文本分析\u003c/h3\u003e\n\u003cp\u003ePrint n-grams of a string\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;my $n=2; say \u0026#34;banana\u0026#34;.comb.rotor($n,$n-1).map({[~] @$_})\u0026#39;\u003c/span\u003e\n\n打印唯一的 n-grams\n\n\u003cspan class=\"sb\"\u003e```\u003c/span\u003ebash\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;my $n=2; say \u0026#34;banana\u0026#34;.comb.rotor($n,$n-1).map({[~] @$_}).Set.sort\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印 n-grams 的出现次数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;my $n=2; say \u0026#34;banana\u0026#34;.comb.rotor($n,$n-1).map({[~] @$_}).Bag.sort.join(\u0026#34;\\n\u0026#34;)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印单词的出现次数(1-grams)：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say lines[0].words.map({[~] @$_}).Bag.sort.join(\u0026#34;\\n\u0026#34;)\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e基于一组 1-grams 打印 Dice 相似系数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;my $a=\u0026#34;banana\u0026#34;.comb;my $b=\u0026#34;anna\u0026#34;.comb;say ($a (\u0026amp;) $b)/($a.Set + $b.Set)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e基于 1-grams 打印卡得杰相似系数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;my $a=\u0026#34;banana\u0026#34;.comb;my $b=\u0026#34;anna\u0026#34;.comb;say ($a (\u0026amp;) $b) / ($a (|) $b)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e基于 1-grams 打印重叠系数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;my $a=\u0026#34;banana\u0026#34;.comb;my $b=\u0026#34;anna\u0026#34;.comb;say ($a (\u0026amp;) $b)/($a.Set.elems,$b.Set.elems).min\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e基于 1-grams 打印类似的余弦：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;my $a=\u0026#34;banana\u0026#34;.comb;my $b=\u0026#34;anna\u0026#34;.comb;say ($a (\u0026amp;) $b)/($a.Set.elems.sqrt*$b.Set.elems.sqrt)\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# 上面的命令提示 Seq 已经被消费\u003c/span\u003e\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;my $a=\u0026#34;banana\u0026#34;.comb;my $b=\u0026#34;anna\u0026#34;.comb;say ($a.cache (\u0026amp;) $b.cache)/($a.cache.Set.elems.sqrt*$b.cache.Set.elems.sqrt)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e创建字符串中字符的索引并打印出来：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say {}.push: %(\u0026#34;banana\u0026#34;.comb.pairs).invert\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e创建一行中单词的所以并打印出来：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;({}.push: %(lines[0].words.pairs).invert).sort.join(\u0026#34;\\n\u0026#34;).say\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"选择性的行打印\"\u003e选择性的行打印\u003c/h3\u003e\n\u003cp\u003e打印文件的第一行（模仿 head -1）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.say;exit\u0026#39;\u003c/span\u003e      example.txt\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;lines[0].say\u0026#39;\u003c/span\u003e    example.txt\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;lines.shift.say\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印文件的前 10 行（模仿 head -10）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;exit if ++$ \u0026gt; 10\u0026#39;\u003c/span\u003e example.txt\nraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.say if ++$ \u0026lt; 11\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印文件的最后一行（模仿 tail -1）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;lines.pop.say\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印文件的最后 5 行（模仿 tail -5）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;.say for lines[*-5..*]\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e只打印包含元音的行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;/\u0026lt;[aeiou]\u0026gt;/ \u0026amp;\u0026amp; .print\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印包含所有元音的行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.say if .comb (\u0026gt;=) \u0026lt;a e i o u\u0026gt;\u0026#39;\u003c/span\u003e example.txt\nraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.say if .comb ⊇ \u0026lt;a e i o u\u0026gt;\u0026#39;\u003c/span\u003e    example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印字符数大于或等于 80 的行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.print if .chars \u0026gt;= 80\u0026#39;\u003c/span\u003e example.txt\nraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.chars \u0026gt;= 80 \u0026amp;\u0026amp; .print\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e只打印第二行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.print if ++$ == 2\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印除了第二行的所有行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;next if ++$ == 2\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印第一行到第三行之间的所有行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.print if (1..3).any == ++$\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印两个正则表达式之间（包含匹配那个正则表达式的行）的所有行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.print if /^Lorem/../laborum\\.$/\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印最长的行的长度：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say lines.max.chars\u0026#39;\u003c/span\u003e example.txt\nraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;state $l=0; $l = .chars if .chars \u0026gt; $l;END { $l.say }\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印长度最长的行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say lines.max\u0026#39;\u003c/span\u003e example.txt\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;my $l=\u0026#34;\u0026#34;; for (lines) {$l = $_ if .chars \u0026gt; $l.chars};END { $l.say }\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印包含数字的所有行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.say if /\\d/\u0026#39;\u003c/span\u003e             example.txt\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;.say for lines.grep(/\\d/)\u0026#39;\u003c/span\u003e example.txt\nraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;/\\d/ \u0026amp;\u0026amp; .say\u0026#39;\u003c/span\u003e             example.txt\nraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;next if ! $_.match(/\\d/)\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印只包含数字的所有行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.say if /^\\d+$/\u0026#39;\u003c/span\u003e             example.txt\nraku -e \u003cspan class=\"s1\"\u003e\u0026#39;.say for lines.grep(/^\\d+$/)\u0026#39;\u003c/span\u003e example.txt\nraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;/^\\d+$/ \u0026amp;\u0026amp; .say\u0026#39;\u003c/span\u003e             example.txt\nraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;next if ! $_.match(/^\\d+$/)\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印每个奇数行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.say if ++$ % 2\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印每个偶数行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.say if ! (++$ % 2)\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印所有重复的行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;state %l;.say if ++%l{$_}==2\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印唯一的行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;state %l;.say if ++%l{$_}==1\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印每一行中的第一个字段（单词）（模仿 cut -f 1 -d ' \u0026lsquo;）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.words[0].say\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"使用管道转换数据\"\u003e使用管道转换数据\u003c/h3\u003e\n\u003cp\u003eRaku程序直接集成到了命令行中。你可以使用 \u003ccode\u003e|\u003c/code\u003e 管道符号从单行程序中输出数据和输入数据到单行程序中。为了 从管道中输入数据， Raku 自动地把 STDIN 设置为 \u003ccode\u003e$*IN\u003c/code\u003e。就像对文件那样，从管道输入的数据在单行中也能使用 \u003ccode\u003e-n\u003c/code\u003e 来进行循环迭代。从单行程序中输出数据就使用 print 或 say 好了。\u003c/p\u003e\n\u003cp\u003e在当前目录中对所有文件进行 JSON 编码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003els \u003cspan class=\"p\"\u003e|\u003c/span\u003e raku -M JSON::Tiny -e \u003cspan class=\"s1\"\u003e\u0026#39;say to-json(lines)\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印文件中的大约 5% 的随机样本行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.say if 1.rand \u0026lt;= 0.05\u0026#39;\u003c/span\u003e /usr/share/dict/words\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e颜色转换， 从 HTML 到 RGB\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;#ffff00\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e raku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.comb(/\\w\\w/).map({:16($_)}).say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e颜色转换， 从 RGB 到 HTML\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;#ffff00\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e raku -ne \u003cspan class=\"s1\"\u003e\u0026#39;.comb(/\\w\\w/).map({:16($_)}).say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"www\"\u003eWWW\u003c/h3\u003e\n\u003cp\u003e下载一个页面：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -M HTTP::UserAgent -e \u003cspan class=\"s1\"\u003e\u0026#39;say HTTP::UserAgent.new.get(\u0026#34;google.com\u0026#34;).content\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下载一个页面并剥离 HTML：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget -O - \u003cspan class=\"s2\"\u003e\u0026#34;http://raku.org\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e raku -ne \u003cspan class=\"s1\"\u003e\u0026#39;s:g/\\\u0026lt;.+?\\\u0026gt;//.say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下载一个页面并剥离并解码 HTML：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget -O - \u003cspan class=\"s2\"\u003e\u0026#34;http://raku.org\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e raku -MHTML::Strip -ne \u003cspan class=\"s1\"\u003e\u0026#39;strip_html($_).say\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e开启一个简单地 web 服务器：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -M HTTP::Server::Simple -e \u003cspan class=\"s1\"\u003e\u0026#39;HTTP::Server::Simple.new.run\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"转换到-windows\"\u003e转换到 Windows\u003c/h3\u003e\n\u003cp\u003e一旦你知道了里面的门道之后那么在 Windows 上运行单行程序就是小草一碟。单行程序既可以在 cmd.exe 中运行，又可以在 Powershell 中运行。主要的规则是：用双引号替换掉外部的单引号，在单行程序的内部使用插值引用操作符 \u003ccode\u003eqq//\u003c/code\u003e 来把字符串括起来。对于非插值的引起，你可以使用单引号。我们来看几个例子。\u003c/p\u003e\n\u003cp\u003e这儿有一个打印时间的单行程序：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say DateTime.now\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e要在 Windows 上运行，我们仅仅用双引号替换掉单引号好了：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s2\"\u003e\u0026#34;say DateTime.now\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个单行程序给文件中每一行添加了一个换行符，使用了插值字符串：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s1\"\u003e\u0026#39;$_ ~= \u0026#34;\\n\u0026#34;\u0026#39;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Windows 上这应该写为：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -pe \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"s2\"\u003e ~= qq/\\n/\u0026#34;\u003c/span\u003e example.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种情况下，我们想对换行符进行插值，并且不为该行字面地添加反斜线和字符\u0026quot;n\u0026quot;，所以我们必须使用 qq。但是你通常也可以像这样在单行程序中使用单引号：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s1\"\u003e\u0026#39;say \u0026#34;Hello, World!\u0026#34;\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Windows 上这应该写为：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s2\"\u003e\u0026#34;say \u0026#39;hello, World!\u0026#39;\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e简单地输出重定向工作起来像基于 Unix 系统那样。 这个单行程序使用 \u003ccode\u003e\u0026gt;\u003c/code\u003e 把 ASCII 字符索引表打印到一个文件中：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eraku -e \u003cspan class=\"s2\"\u003e\u0026#34;say .chr ~ \u0026#39; \u0026#39; ~ \u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"s2\"\u003e for 0..255\u0026#34;\u003c/span\u003e \u0026gt; ascii_codes.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在使用 \u003ccode\u003e\u0026gt;\u003c/code\u003e 的时候，如果文件不存在就会创建一个。如果文件确实存在，它会被重写。你可能更想追加到文件，使用 \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e 代替。\u003c/p\u003e\n","text":"Raku 单行程序 这本书在进行之中。我希望你能觉得它有趣，甚至可能有用！如果你想贡献反馈的话，那么很欢迎提问题还有新的或有提升的正则表达式。\n作者 戴维法瑞尔 PerlTricks.com\n版本 版本 0.01\n许可 FreeBSD\n贡献者  Alexander Moquin Bruce Gray Carl Mäsak David H. Adler FROGGS Helmut Wollmersdorfer japhb Larry Wall Matt Oates Moritz Lenz Mouq Salve J Nilsen Sam S Skids timotimo  致谢 启发于 Peteris Krumins 的 Perl 5 example 文件。他逐字逐句地写了一本关于 Perl 5 单行 的书。\nirc上有很好地 folks。\n内容  介绍 教程 文件间距 行号 计算 创建字符串和创建数组 文本转换和替换 文本分析 选择性的行打印 使用管道转换数据(进行中) WWW(进行中) 转换到 Windows  介绍 把 Perl 和其它语言区别开的一件事情是在单行代码中写小程序的能力，即人们所熟知的\u0026quot;单行\u0026quot;。在终端里直接键入一个程序比写一个废弃的脚本往往更快。并且单行程序也很强大；它们是羽翼丰满的程序，能够加载外部库，但是也能集成到终端中。你可以在单行程序中输入或输出数据。\n像 Perl 5 一样， Raku支持单行程序。还有就像 Raku 到处清理着 Perl 5 的毒瘤一样，Raku 的单行语法也更好了。它拥有更少的特殊变量和选项因此更容易记忆。这本书提供了很多有用的 Raku 单行例子，从找出文件中得重复行到运行一个 web 服务器，它几乎能做所有事情。尽管 Raku 拥有更少的特殊变量，但是由于它高级的面向对象的语法，Raku 中的大部分单行程序比等价的 Perl 5 单行程序更短。\n这本书可以以多种方式阅读。如果你是单行程序的新手，从教程开始。它带领你掌握单行程序的核心概念；不要担心，一旦你理解了它会很容易。如果你精通 Perl，Bash，或 Sed/Awk，你可以立马开始工作。随意跳过和浏览你所感兴趣的东西。如果有些代码你不理解，那么在终端中试试！这个仓库中包含的无处不在的文件是 example.txt，它会在很多单行程序中用到。\n使用单行编程仅仅是 Raku 擅长的一个范例。这样的代码小而美，但是同时你正学习的是一种生产力技能，记住你正在学的是一种新的编程语言。检查 raku.org 网站获取官方文档。\n教程 要开始单行程序，所有你要掌握的是 -e 选项。这告诉 Perl 把它后面所跟的东西作为一个程序去执行。例如：\nraku -e \u0026#39;say \u0026#34;Hello, World!\u0026#34;\u0026#39; 我们来一步步剖析这段代码。 raku 引用了 Raku 程序， -e 告诉 Raku 去执行，而 'say \u0026quot;Hello, World!\u0026quot;'是要执行的程序。每个程序都必须被包围在单引号中（除了在 Windows 上，查看 转换到 Windows）。要运行单行程序，就把它键入到终端中好了：\n\u0026gt; raku -e 'say \u0026quot;Hello, World!\u0026quot;' Hello, World! 如果你想加载一个文件，就把文件路径添加到程序代码的后面：\nraku -e \u0026#39;for (lines) {say $_}\u0026#39; /path/to/file.txt 这个程序打印出了 path/to/file.txt 的每一行。你可能知道 $_ 是默认变量，它在这儿是指正被循环的当前行。lines 是一个列表，当你传递一个文件路径给单行程序的时候会自动为你创建这个列表。现在我们来重写那个单行程序，一步一步。它们都是等价的：\nraku -e \u0026#39;for (lines) { say $_ }\u0026#39; /path/to/file.txt raku -e \u0026#39;for (lines) { $_.say }\u0026#39; /path/to/file.txt raku -e \u0026#39;for (lines) { .say }\u0026#39; /path/to/file.txt raku -e \u0026#39;.say for (lines)\u0026#39; /path/to/file.txt raku -e \u0026#39;.say for lines\u0026#39; /path/to/file.txt 就像 $_ 是默认变量一样，在默认变量身上调用的方法可以省略掉变量引用。它们变成了默认方法。所以 $_.say 变成 .say。回报给写单行程序的人的东西是 - 更少的键入！\n-n 选项改变了程序的行为：它为文件中的每一行执行一次代码。所以，大写并打印 path/to/file.txt 的每一行你会键入：\nraku -ne \u0026#39;.uc.say\u0026#39; /path/to/file.txt -p 选项就像 -n, 除了它会自动打印 $_ 之外。所以大写文件中的所有行的另外一种方法是：\nraku -pe \u0026#39;$_ = .uc\u0026#39; /path/to/file.txt 或者两个做同样事情的更短的版本：\nraku -pe \u0026#39;.=uc\u0026#39; /path/to/file.txt raku -pe .=uc /path/to/file.txt 在第二个例子中，我们可以完全移除周围的单引号。这种场景很少遇到，但是如果你的单行程序中没有空格并且没有符号或引号，那么你通常可以移除外部的引号。\n-n 和 -p 选项真的很有用。本书中也有很多使用它们的单行例子。\n最后一件你要知道的事情是怎么加载模块。 -M 开关代表着加载模块：\nraku -M URI::Encode -e \u0026#39;say encode_uri(\u0026#34;example.com/10 ways to crush it with Raku\u0026#34;)\u0026#39; -M URI::Encode 加载了 URI::Encode 模块，它导入了 encode_uri 子例程。 你可以多次使用 -M 来加载多个模块：\nraku -M URI::Encode -M URI -e \u0026#39;\u0026lt;your code here\u0026gt;\u0026#39; 如果你有一个还没有安装的本地模块呢？ 简单， 仅仅传递一个 -I 开关来包含那个目录好了：\nraku -I lib -M URI::Encode -e \u0026#39;\u0026lt;your code here\u0026gt;\u0026#39; 现在 Raku 会在 lib 目录中搜索 URI::Encode 模块，和标准的安装位置一样。\n要查看 Raku 命令行开关有哪些， 使用 -h 选项查看帮助：\nraku -h 这打印可获得的不错的统计。\n文件间距 Double space a file\nraku -pe \u0026#39;$_ ~= \u0026#34;\\n\u0026#34;\u0026#39; example.txt N-space a file (例如. 4倍空白)\nraku -pe \u0026#39;$_ ~= \u0026#34;\\n\u0026#34; x 4\u0026#39; example.txt 在每一行前面添加一个空行：\nraku -pe \u0026#39;say \u0026#34;\u0026#34;\u0026#39; example.txt 移除所有空行：\nraku -ne \u0026#39;.say if /\\S/\u0026#39; example.txt raku -ne \u0026#39;.say if .chars\u0026#39; example.txt 移除所有的连续空白行，只保留一行：\nraku -e \u0026#39;$*ARGFILES.slurp.subst(/\\n+/, \u0026#34;\\n\\n\u0026#34;, :g).say\u0026#39; example.txt 行号 给文件中的所有行编号：\nraku -ne \u0026#39;say \u0026#34;{++$} $_\u0026#34;\u0026#39; example.txt raku -ne \u0026#39;say $*ARGFILES.ins ~ \u0026#34; $_ \u0026#34;\u0026#39; example.txt 只给文件中得非空行编号：\nraku -pe \u0026#39;$_ = \u0026#34;{++$} $_\u0026#34; if /\\S/\u0026#39; example.txt 给所有行编号但是只打印非空行：\nraku -pe \u0026#39;$_ = $*ARGFILES.ins ~ \u0026#34; $_ \u0026#34; if /\\S/\u0026#39; example.txt 打印文件中行数的总数：\nraku -e \u0026#39;say lines.elems\u0026#39; example.txt raku -e \u0026#39;say lines.Int\u0026#39; example.txt raku -e \u0026#39;lines.Int.say\u0026#39; example.txt 打印出文件中非空行的总数：\nraku -e \u0026#39;lines.grep(/\\S/.elems.say)\u0026#39; example.txt 打印文件中空行的数量：\nraku -e \u0026#39;lines.grep(/^\\s*$/).elems.say\u0026#39; example.txt 计算 检查一个数是否是质数：\nraku -e \u0026#39;say \u0026#34;7 is prime\u0026#34; if 7.is-prime\u0026#39; 打印一行中所有字段的和：\nraku -ne \u0026#39;say [+] .split(\u0026#34;\\t\u0026#34;)\u0026#39; 打印所有行的所有字段的和：\nraku -e \u0026#39;say [+] lines.split(\u0026#34;\\t\u0026#34;)\u0026#39; 打乱行中的所有字段：\nraku -ne \u0026#39;.split(\u0026#34;\\t\u0026#34;).pick(*).join(\u0026#34;\\t\u0026#34;).say\u0026#39; 找出一行中最小的元素：\nraku -ne \u0026#39;.split(\u0026#34;\\t\u0026#34;).min.say\u0026#39; 找出所有行的最小的元素：\nraku -e \u0026#39;lines.split(\u0026#34;\\t\u0026#34;).min.say\u0026#39; 找出一行中最大的元素：\nraku -ne \u0026#39;.split(\u0026#34;\\t\u0026#34;).max.say\u0026#39; 找出所有行的最大的元素：\nraku -e \u0026#39;lines.split(\u0026#34;\\t\u0026#34;).max.say\u0026#39; 找出一行中得数值化最小元素：\nraku -ne \u0026#39;.split(\u0026#34;\\t\u0026#34;)».Numeric.min.say\u0026#39; 找出一行中得数值化最大元素：\nraku -ne \u0026#39;.split(\u0026#34;\\t\u0026#34;)».Numeric.max.say\u0026#39; 使用字段的绝对值替换每个字段：\nraku -ne \u0026#39;.split(\u0026#34;\\t\u0026#34;).map(*.abs).join(\u0026#34;\\t\u0026#34;)\u0026#39; 找出每行中字符的总数：\nraku -ne \u0026#39;.chars.say\u0026#39; example.txt 找出每行中单词的总数：\nraku -ne \u0026#39;.words.elems.say\u0026#39; example.txt 找出每行中由逗号分隔的元素的总数：\nraku -ne \u0026#39;.split(\u0026#34;,\u0026#34;).elems.say\u0026#39; example.txt 找出所有行的字段（单词）的总数：\nraku -e \u0026#39;say lines.split(\u0026#34;\\t\u0026#34;).elems\u0026#39; example.txt # fields raku -e \u0026#39;say lines.words.elems\u0026#39; example.txt # words 打印匹配某个模式的字段的总数：\nraku -e \u0026#39;say lines.split(\u0026#34;\\t\u0026#34;).comb(/pattern/).elems\u0026#39; example.txt # fields raku -e \u0026#39;say lines.words.comb(/pattern/).elems\u0026#39; example.txt # words 打印匹配某个模式的行的总数：\nraku -e \u0026#39;say lines.grep(/in/.elems)\u0026#39; example.txt 打印数字 PI 到 n 位小数点(例如. 10位)：\nraku -e \u0026#39;say pi.fmt(\u0026#34;%.10f\u0026#34;);\u0026#39; 打印数字 PI 到 15 位小数点：\nraku -e \u0026#39;say π\u0026#39; 打印数字 E 到 n 位小数点(例如. 10位)：\nraku -e \u0026#39;say e.fmt(\u0026#34;%.10f\u0026#34;);\u0026#39; 打印数字 E 到 15 位小数点：\nraku -e \u0026#39;say e\u0026#39; 打印 UNIX 时间 (seconds since Jan 1, 1970, 00:00:00 UTC)\nraku -e \u0026#39;say time\u0026#39; 打印 GMT (格林威治标准时间)和地方计算机时间：\nraku -MDateTime::TimeZone -e \u0026#39;say to-timezone(\u0026#34;GMT\u0026#34;,DateTime.now)\u0026#39; raku -e \u0026#39;say DateTime.now\u0026#39; 以 H:M:S 格式打印当地计算机时间：\nraku -e \u0026#39;say DateTime.now.map({$_.hour, $_.minute, $_.second.round}).join(\u0026#34;:\u0026#34;)\u0026#39; 打印昨天的日期：\nraku -e \u0026#39;say DateTime.now.earlier(:1day)\u0026#39; 打印日期： 14 个月, 9 天，和 7 秒之前\nraku -e \u0026#39;say DateTime.now.earlier(:14months).earlier(:9days).earlier(:7seconds)\u0026#39; 在标准输出前加上时间戳（GMT，地方时间）：\ntail -f logfile | raku -MDateTime::TimeZone -ne \u0026#39;say to-timezone(\u0026#34;GMT\u0026#34;,DateTime.now) ~ \u0026#34;\\t$_\u0026#34;\u0026#39; tail -f logfile | raku -ne \u0026#39;say DateTime.now ~ \u0026#34;\\t$_\u0026#34;\u0026#39; 计算 5 的阶乘：\nraku -e \u0026#39;say [*] 1..5\u0026#39; 计算最大公约数：\nraku -e \u0026#39;say [gcd] @list_of_numbers\u0026#39; 使用欧几里得算法计算数字 20 和 35 的最大公约数：\nraku -e \u0026#39;say (20, 35, *%* ... 0)[*-2]\u0026#39; 计算 20 和 35 的最小公倍数：\nraku -e \u0026#39;say 20 lcm 35\u0026#39; 使用欧几里得算法: n*m/gcd(n,m) 计算数字 20 和 35 的最小公倍数：\nraku -e \u0026#39;say 20 * 35 / (20 gcd 35)\u0026#39; 生成 10 个 5 到 15（不包括 15）之间的随机数：\nraku -e \u0026#39;.say for (5..^15).roll(10)\u0026#39; 找出并打印列表的全排列：\nraku -e \u0026#39;say .join for [1..5].permutations\u0026#39; 生成幂集\nraku -e \u0026#39;.say for \u0026lt;1 2 3\u0026gt;.combinations\u0026#39; 把 IP 地址转换为无符号整数：\nraku -e \u0026#39;say :256[\u0026#34;127.0.0.1\u0026#34;.comb(/\\d+/)]\u0026#39; raku -e \u0026#39;say +\u0026#34;:256[{q/127.0.0.1/.subst(:g,/\\./,q/,/)}]\u0026#34;\u0026#39; raku -e \u0026#39;say Buf.new(+«\u0026#34;127.0.0.1\u0026#34;.split(\u0026#34;.\u0026#34;)).unpack(\u0026#34;N\u0026#34;)\u0026#39; 把无符号整数转换为 IP 地址：\nraku -e \u0026#39;say join \u0026#34;.\u0026#34;, @(pack \u0026#34;N\u0026#34;, 2130706433)\u0026#39; raku -e \u0026#39;say join \u0026#34;.\u0026#34;, map { ((2130706433+\u0026gt;(8*$_))+\u0026amp;0xFF) }, (3...0)\u0026#39; 创建字符串和创建数组 生成并打印字母表：\nraku -e \u0026#39;.say for \u0026#34;a\u0026#34;..\u0026#34;z\u0026#34;\u0026#39; 生成并打印所有从 \u0026ldquo;a\u0026rdquo; 到 \u0026ldquo;zz\u0026rdquo; 的字符串：\nraku -e \u0026#39;.say for \u0026#34;a\u0026#34;..\u0026#34;zz\u0026#34;\u0026#39; 把整数转换为十六进制：\nraku -e \u0026#39;say 255.base(16)\u0026#39; raku -e \u0026#39;say sprintf(\u0026#34;%x\u0026#34;, 255)\u0026#39; 把整数打印为十六进制转换表：\nraku -e \u0026#39;say sprintf(\u0026#34;%3i =\u0026gt; %2x\u0026#34;, $_, $_) for 0..255\u0026#39; 把整数编码为百分数：\nraku -e \u0026#39;say sprintf(\u0026#34;%%%x\u0026#34;, 255)\u0026#39; 生成一个随机的 10 个 a-z 字符长度的字符串：\nraku -e \u0026#39;print roll 10, \u0026#34;a\u0026#34;..\u0026#34;z\u0026#34;\u0026#39; raku -e \u0026#39;print roll \u0026#34;a\u0026#34;..\u0026#34;z\u0026#34;: 10\u0026#39; 生成一个随机的 15 个 ASCII 字符长度的密码：\nraku -e \u0026#39;print roll 15, \u0026#34;0\u0026#34;..\u0026#34;z\u0026#34;\u0026#39; raku -e \u0026#39;print roll \u0026#34;0\u0026#34;..\u0026#34;z\u0026#34;: 15\u0026#39; 创建一个指定长度的字符串：\nraku -e \u0026#39;print \u0026#34;a\u0026#34; x 50\u0026#39; 生成并打印从 1 到 100 数字为偶数的数组：\nraku -e \u0026#39;(1..100).grep(* %% 2).say\u0026#39; 找出字符串的长度：\nraku -e \u0026#39;\u0026#34;storm in a teacup\u0026#34;.chars.say\u0026#39; 找出数组的元素个数：\nraku -e \u0026#39;my @letters = \u0026#34;a\u0026#34;..\u0026#34;z\u0026#34;; @letters.Int.say\u0026#39; 文本转换和替换 对文件进行 ROT 13 加密：\nraku -pe \u0026#39;tr/A..Za..z/N..ZA..Mn..za..m/\u0026#39; example.txt 对字符串进行 Base64 编码：\nraku -MMIME::Base64 -ne \u0026#39;print MIME::Base64.encode-str($_)\u0026#39; example.txt 对字符串进行 Base64 解码：\nraku -MMIME::Base64 -ne \u0026#39;print MIME::Base64.decode-str($_)\u0026#39; base64.txt 对字符串进行 URL 转义：\nraku -MURI::Encode -le \u0026#39;say uri_encode($string)\u0026#39; URL-unescape a string\nraku -MURI::Encode -le \u0026#39;say uri_decode($string)\u0026#39; HTML-encode a string\nraku -MHTML::Entity -e \u0026#39;print encode-entities($string)\u0026#39; HTML-decode a string\nraku -MHTML::Entity -e \u0026#39;print decode-entities($string)\u0026#39; 把所有文本转换为大写：\nraku -pe \u0026#39;.=uc\u0026#39; example.txt raku -ne \u0026#39;say .uc\u0026#39; example.txt 把所有文本转换为小写：\nraku -pe \u0026#39;.=lc\u0026#39; example.txt raku -ne \u0026#39;say .lc\u0026#39; example.txt 只把每行的第一个单词转换为大写：\nraku -ne \u0026#39;say s/(\\w+){}/{$0.uc}/\u0026#39; example.txt 颠倒字母的大小写：\nraku -pe \u0026#39;tr/a..zA..Z/A..Za..z/\u0026#39; example.txt raku -ne \u0026#39;say tr/a..zA..Z/A..Za..z/.after\u0026#39; example.txt 对每行进行驼峰式大小写：\nraku -ne \u0026#39;say .wordcase\u0026#39; example.txt 在每行的开头去掉前置空白（空格、tabs）：\nraku -ne \u0026#39;say .trim-leading\u0026#39; example.txt 从每行的末尾去掉结尾的空白（空格、tabs）：\nraku -ne \u0026#39;say .trim-trailing\u0026#39; example.txt 从每行中去除行首和行尾的空白：\nraku -ne \u0026#39;say .trim\u0026#39; example.txt 把 UNIX 换行符转换为 DOS/Windows 换行符：\nraku -ne \u0026#39;print .subst(/\\n/, \u0026#34;\\r\\n\u0026#34;)\u0026#39; example.txt 把 DOS/Windows 换行符转换为 UNIX 换行符：\nraku -ne \u0026#39;print .subst(/\\r\\n/, \u0026#34;\\n\u0026#34;)\u0026#39; example.txt 把每行中所有的 \u0026ldquo;ut\u0026rdquo; 实体用 \u0026ldquo;foo\u0026rdquo; 替换掉：\nraku -pe \u0026#39;s:g/ut/foo/\u0026#39; example.txt 把包含 \u0026ldquo;lorem\u0026rdquo; 的每行中所有的 \u0026ldquo;ut\u0026rdquo; 实体用 \u0026ldquo;foo\u0026rdquo; 替换掉：\nraku -pe \u0026#39;s:g/ut/foo/ if /Lorem/\u0026#39; example.txt 把文件转换为 JSON 格式：\nraku -M JSON::Tiny -e \u0026#39;say to-json(lines)\u0026#39; example.txt 从文件的每一行中随机挑选 5 个单词：\nraku -ne \u0026#39;say .words.pick(5)\u0026#39; example.txt 文本分析 Print n-grams of a string\nraku -e \u0026#39;my $n=2; say \u0026#34;banana\u0026#34;.comb.rotor($n,$n-1).map({[~] @$_})\u0026#39; 打印唯一的 n-grams ```bash raku -e \u0026#39;my $n=2; say \u0026#34;banana\u0026#34;.comb.rotor($n,$n-1).map({[~] @$_}).Set.sort\u0026#39; 打印 n-grams 的出现次数：\nraku -e \u0026#39;my $n=2; say \u0026#34;banana\u0026#34;.comb.rotor($n,$n-1).map({[~] @$_}).Bag.sort.join(\u0026#34;\\n\u0026#34;)\u0026#39; 打印单词的出现次数(1-grams)：\nraku -e \u0026#39;say lines[0].words.map({[~] @$_}).Bag.sort.join(\u0026#34;\\n\u0026#34;)\u0026#39; example.txt 基于一组 1-grams 打印 Dice 相似系数：\nraku -e \u0026#39;my $a=\u0026#34;banana\u0026#34;.comb;my $b=\u0026#34;anna\u0026#34;.comb;say ($a (\u0026amp;) $b)/($a.Set + $b.Set)\u0026#39; 基于 1-grams 打印卡得杰相似系数：\nraku -e \u0026#39;my $a=\u0026#34;banana\u0026#34;.comb;my $b=\u0026#34;anna\u0026#34;.comb;say ($a (\u0026amp;) $b) / ($a (|) $b)\u0026#39; 基于 1-grams 打印重叠系数：\nraku -e \u0026#39;my $a=\u0026#34;banana\u0026#34;.comb;my $b=\u0026#34;anna\u0026#34;.comb;say ($a (\u0026amp;) $b)/($a.Set.elems,$b.Set.elems).min\u0026#39; 基于 1-grams 打印类似的余弦：\nraku -e \u0026#39;my $a=\u0026#34;banana\u0026#34;.comb;my $b=\u0026#34;anna\u0026#34;.comb;say ($a (\u0026amp;) $b)/($a.Set.elems.sqrt*$b.Set.elems.sqrt)\u0026#39; # 上面的命令提示 Seq 已经被消费 raku -e \u0026#39;my $a=\u0026#34;banana\u0026#34;.comb;my $b=\u0026#34;anna\u0026#34;.comb;say ($a.cache (\u0026amp;) $b.cache)/($a.cache.Set.elems.sqrt*$b.cache.Set.elems.sqrt)\u0026#39; 创建字符串中字符的索引并打印出来：\nraku -e \u0026#39;say {}.push: %(\u0026#34;banana\u0026#34;.comb.pairs).invert\u0026#39; 创建一行中单词的所以并打印出来：\nraku -e \u0026#39;({}.push: %(lines[0].words.pairs).invert).sort.join(\u0026#34;\\n\u0026#34;).say\u0026#39; example.txt 选择性的行打印 打印文件的第一行（模仿 head -1）：\nraku -ne \u0026#39;.say;exit\u0026#39; example.txt raku -e \u0026#39;lines[0].say\u0026#39; example.txt raku -e \u0026#39;lines.shift.say\u0026#39; example.txt 打印文件的前 10 行（模仿 head -10）\nraku -pe \u0026#39;exit if ++$ \u0026gt; 10\u0026#39; example.txt raku -ne \u0026#39;.say if ++$ \u0026lt; 11\u0026#39; example.txt 打印文件的最后一行（模仿 tail -1）：\nraku -e \u0026#39;lines.pop.say\u0026#39; example.txt 打印文件的最后 5 行（模仿 tail -5）：\nraku -e \u0026#39;.say for lines[*-5..*]\u0026#39; example.txt 只打印包含元音的行：\nraku -ne \u0026#39;/\u0026lt;[aeiou]\u0026gt;/ \u0026amp;\u0026amp; .print\u0026#39; example.txt 打印包含所有元音的行：\nraku -ne \u0026#39;.say if .comb (\u0026gt;=) \u0026lt;a e i o u\u0026gt;\u0026#39; example.txt raku -ne \u0026#39;.say if .comb ⊇ \u0026lt;a e i o u\u0026gt;\u0026#39; example.txt 打印字符数大于或等于 80 的行：\nraku -ne \u0026#39;.print if .chars \u0026gt;= 80\u0026#39; example.txt raku -ne \u0026#39;.chars \u0026gt;= 80 \u0026amp;\u0026amp; .print\u0026#39; example.txt 只打印第二行：\nraku -ne \u0026#39;.print if ++$ == 2\u0026#39; example.txt 打印除了第二行的所有行：\nraku -pe \u0026#39;next if ++$ == 2\u0026#39; example.txt 打印第一行到第三行之间的所有行：\nraku -ne \u0026#39;.print if (1..3).any == ++$\u0026#39; example.txt 打印两个正则表达式之间（包含匹配那个正则表达式的行）的所有行：\nraku -ne \u0026#39;.print if /^Lorem/../laborum\\.$/\u0026#39; example.txt 打印最长的行的长度：\nraku -e \u0026#39;say lines.max.chars\u0026#39; example.txt raku -ne \u0026#39;state $l=0; $l = .chars if .chars \u0026gt; $l;END { $l.say }\u0026#39; example.txt 打印长度最长的行：\nraku -e \u0026#39;say lines.max\u0026#39; example.txt raku -e \u0026#39;my $l=\u0026#34;\u0026#34;; for (lines) {$l = $_ if .chars \u0026gt; $l.chars};END { $l.say }\u0026#39; example.txt 打印包含数字的所有行：\nraku -ne \u0026#39;.say if /\\d/\u0026#39; example.txt raku -e \u0026#39;.say for lines.grep(/\\d/)\u0026#39; example.txt raku -ne \u0026#39;/\\d/ \u0026amp;\u0026amp; .say\u0026#39; example.txt raku -pe \u0026#39;next if ! $_.match(/\\d/)\u0026#39; example.txt 打印只包含数字的所有行：\nraku -ne \u0026#39;.say if /^\\d+$/\u0026#39; example.txt raku -e \u0026#39;.say for lines.grep(/^\\d+$/)\u0026#39; example.txt raku -ne \u0026#39;/^\\d+$/ \u0026amp;\u0026amp; .say\u0026#39; example.txt raku -pe \u0026#39;next if ! $_.match(/^\\d+$/)\u0026#39; example.txt 打印每个奇数行：\nraku -ne \u0026#39;.say if ++$ % 2\u0026#39; example.txt 打印每个偶数行：\nraku -ne \u0026#39;.say if ! (++$ % 2)\u0026#39; example.txt 打印所有重复的行：\nraku -ne \u0026#39;state %l;.say if ++%l{$_}==2\u0026#39; example.txt 打印唯一的行：\nraku -ne \u0026#39;state %l;.say if ++%l{$_}==1\u0026#39; example.txt 打印每一行中的第一个字段（单词）（模仿 cut -f 1 -d ' \u0026lsquo;）\nraku -ne \u0026#39;.words[0].say\u0026#39; example.txt 使用管道转换数据 Raku程序直接集成到了命令行中。你可以使用 | 管道符号从单行程序中输出数据和输入数据到单行程序中。为了 从管道中输入数据， Raku 自动地把 STDIN 设置为 $*IN。就像对文件那样，从管道输入的数据在单行中也能使用 -n 来进行循环迭代。从单行程序中输出数据就使用 print 或 say 好了。\n在当前目录中对所有文件进行 JSON 编码：\nls | raku -M JSON::Tiny -e \u0026#39;say to-json(lines)\u0026#39; 打印文件中的大约 5% 的随机样本行：\nraku -ne \u0026#39;.say if 1.rand \u0026lt;= 0.05\u0026#39; /usr/share/dict/words 颜色转换， 从 HTML 到 RGB\necho \u0026#34;#ffff00\u0026#34; | raku -ne \u0026#39;.comb(/\\w\\w/).map({:16($_)}).say\u0026#39; 颜色转换， 从 RGB 到 HTML\necho \u0026#34;#ffff00\u0026#34; | raku -ne \u0026#39;.comb(/\\w\\w/).map({:16($_)}).say\u0026#39; WWW 下载一个页面：\nraku -M HTTP::UserAgent -e \u0026#39;say HTTP::UserAgent.new.get(\u0026#34;google.com\u0026#34;).content\u0026#39; 下载一个页面并剥离 HTML：\nwget -O - \u0026#34;http://raku.org\u0026#34; | raku -ne \u0026#39;s:g/\\\u0026lt;.+?\\\u0026gt;//.say\u0026#39; 下载一个页面并剥离并解码 HTML：\nwget -O - \u0026#34;http://raku.org\u0026#34; | raku -MHTML::Strip -ne \u0026#39;strip_html($_).say\u0026#39; 开启一个简单地 web 服务器：\nraku -M HTTP::Server::Simple -e \u0026#39;HTTP::Server::Simple.new.run\u0026#39; 转换到 Windows 一旦你知道了里面的门道之后那么在 Windows 上运行单行程序就是小草一碟。单行程序既可以在 cmd.exe 中运行，又可以在 Powershell 中运行。主要的规则是：用双引号替换掉外部的单引号，在单行程序的内部使用插值引用操作符 qq// 来把字符串括起来。对于非插值的引起，你可以使用单引号。我们来看几个例子。\n这儿有一个打印时间的单行程序：\nraku -e \u0026#39;say DateTime.now\u0026#39; 要在 Windows 上运行，我们仅仅用双引号替换掉单引号好了：\nraku -e \u0026#34;say DateTime.now\u0026#34; 这个单行程序给文件中每一行添加了一个换行符，使用了插值字符串：\nraku -pe \u0026#39;$_ ~= \u0026#34;\\n\u0026#34;\u0026#39; example.txt 在 Windows 上这应该写为：\nraku -pe \u0026#34;$_~= qq/\\n/\u0026#34; example.txt 这种情况下，我们想对换行符进行插值，并且不为该行字面地添加反斜线和字符\u0026quot;n\u0026quot;，所以我们必须使用 qq。但是你通常也可以像这样在单行程序中使用单引号：\nraku -e \u0026#39;say \u0026#34;Hello, World!\u0026#34;\u0026#39; 在 Windows 上这应该写为：\nraku -e \u0026#34;say \u0026#39;hello, World!\u0026#39;\u0026#34; 简单地输出重定向工作起来像基于 Unix 系统那样。 这个单行程序使用 \u0026gt; 把 ASCII 字符索引表打印到一个文件中：\nraku -e \u0026#34;say .chr ~ \u0026#39; \u0026#39; ~ $_for 0..255\u0026#34; \u0026gt; ascii_codes.txt 在使用 \u0026gt; 的时候，如果文件不存在就会创建一个。如果文件确实存在，它会被重写。你可能更想追加到文件，使用 \u0026gt;\u0026gt; 代替。\n"},"name":"Raku 中的单行程序","published":"2021-07-11T00:00:00Z","summary":"One Liners in Raku","type":"entry","url":"https://ohmyweekly.github.io/notes/2015-08-25-one-liners-in-raku/"}],"name":"oneliner","type":"feed","url":"https://ohmyweekly.github.io/tags/oneliner/"}