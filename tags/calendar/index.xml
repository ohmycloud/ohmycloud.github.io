<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    calendar on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/tags/calendar/</link>
        <description>Recent content  in calendar
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Wed, 07 Jul 2021 23:01:08 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/tags/calendar/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>Raku 圣诞月历 - 2014</title>
                <link>https://ohmyweekly.github.io/notes/2014-12-19-raku-calendar/</link>
                
                
                <description>&lt;blockquote&gt;Raku Calendar&lt;/blockquote&gt;&lt;h2 id=&#34;data-munging-in-raku&#34;&gt;Data munging in Raku&lt;/h2&gt;
&lt;p&gt;案例学习: 生成成绩报告单&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;example.txt
STDOUT
Peter	B
Celine	A-
Zsófia	B+
João	F
Maryam	B+
秀英	B-
Finn	D+
Aarav	A
Emma	F
Omar	B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出报告单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Zsófia&amp;#39;s grade: B+
List of students with a failing grade:
  João, Emma
Distribution of grades by letter:
  A: 2 students
  B: 5 students
  D: 1 student
  F: 2 students
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;example.txt 是一个文本文件, 每行一个学生姓名和分数, 中间用空格分割。
我们希望我们的脚本能解析这样的文件并打印含有如下信息的报告：&lt;/p&gt;
&lt;p&gt;学生名为 “Zsófia” 的成绩&lt;br&gt;
所有不及格学生的名字 (i.e. worse than D-),&lt;br&gt;
根据字母( 不带 &lt;code&gt;+&lt;/code&gt;/&lt;code&gt;-&lt;/code&gt; ) 把成绩分组。得到学生成绩的分布。&lt;/p&gt;
&lt;p&gt;让我们一步步来, 添加 shebang 行:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env raku&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Raku 中所有这些都为我们做好了。&lt;/p&gt;
&lt;p&gt;读取并解析输入:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;&lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%grade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;grades.txt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;lines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;ni&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&amp;lt;[&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&amp;gt;&amp;lt;[&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;+-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&amp;gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;ni&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;
        &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;die&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Can&amp;#39;t parse line &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#34;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Raku 中, 对文件名字符串调用 &lt;a href=&#34;https://docs.raku.org/type/IO::Path&#34;&gt;.IO&lt;/a&gt; 方法会返回一个代表文件系统路径的对象, 我们可以继续在这个对象上调用 &lt;a href=&#34;https://docs.raku.org/routine/lines&#34;&gt;.lines&lt;/a&gt; 方法, 得到文件的所有行的一个惰性列表。“Lazy” 意味着它只会从磁盘中按需读取新行, 当我们使用 &lt;a href=&#34;https://docs.raku.org/routine/map&#34;&gt;.map&lt;/a&gt; 方法遍历列表元素的时候, 这样能使用单个赋值操作就能优雅地初始化一个散列。&lt;/p&gt;
&lt;p&gt;我们不需要让文件句柄识别 Unicode, 也不用管文件句柄是否正确关闭, 这在 Raku 中都是默认发生的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;method: ...&lt;/code&gt; 语法也可以写为 &lt;code&gt;.method(...)&lt;/code&gt;, 前者使 map 看起来更像一个 block 语句, 并减少了括号凌乱。
&lt;code&gt;:s&lt;/code&gt;(&amp;ldquo;sigspace&amp;rdquo;) 正则修饰符使解析 token 间的空白更优雅。但 Raku 中的字符类比 Perl 5 复杂了一丢丢。
正则捕获结果变量(&lt;code&gt;$0&lt;/code&gt;, &lt;code&gt;$1&lt;/code&gt;, …) 返回一个完整的 &lt;a href=&#34;https://docs.raku.org/type/Match&#34;&gt;Match&lt;/a&gt; 对象 - 它为复杂使用场景增加了很多灵活性, 但是这里我们只想保留字符串, 所以使用 &lt;a href=&#34;https://docs.raku.org/routine/~&#34;&gt;~&lt;/a&gt; 前置操作符字符串化了匹配对象。&lt;/p&gt;
&lt;p&gt;查看数据的特定项:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;&lt;span class=&#34;nb&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Zsófia&amp;#39;s grade: &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%grade&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;Zsófia&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;#34;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Raku 总是把散列中 &lt;code&gt;{ }&lt;/code&gt; 中的东西解析为表达式, 使用 &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; 表示字面值。&lt;/p&gt;
&lt;p&gt;过滤数据:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;&lt;span class=&#34;nb&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;List of students with a failing grade:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#34;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%grade&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;grep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;ge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#34;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;».&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#34;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Raku 中允许我们按执行顺序把一些列方法写为链式操作。有一个重要区别：Raku 能让我们直接遍历散列的项, 散列中每一项都是一个 &lt;a href=&#34;https://docs.raku.org/type/Pair&#34;&gt;Pair&lt;/a&gt; 对象(Pair 对象能使用 &lt;a href=&#34;https://docs.raku.org/type/Pair#method_key&#34;&gt;.key&lt;/a&gt; 和 &lt;a href=&#34;https://docs.raku.org/type/Pair#method_value&#34;&gt;.value&lt;/a&gt; 方法)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; &lt;a href=&#34;https://docs.raku.org/type/Whatever&#34;&gt;Whatever&lt;/a&gt; star 用于定义一个简单的回调, 而不用写一个花括号块。
&lt;code&gt;».&lt;/code&gt; &lt;a href=&#34;https://docs.raku.org/language/operators#index-entry-hyper_%3C%3C-hyper_%3E%3E-hyper_%C2%AB-hyper_%C2%BB-Hyper_operators&#34;&gt;hyper operator&lt;/a&gt; 用于对 &lt;a href=&#34;https://docs.raku.org/routine/grep&#34;&gt;.grep&lt;/a&gt; 返回的 Pairs 的每个 Pair 上调用 一次 .key 方法, 得出姓名列表&lt;/p&gt;
&lt;p&gt;从数据中创建频率分布:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;&lt;span class=&#34;nb&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Distribution of grades by letter:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#34;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#34;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;#34;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%grade&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;classify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;comb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;计数和分组实在太常见了, Raku 提供了 &lt;a href=&#34;https://docs.raku.org/routine/classify&#34;&gt;.classify&lt;/a&gt; 方法。
classify 方法里需要指定要分组的项(这里是代表 &lt;code&gt;%grade&lt;/code&gt; 条目的 Pair 对象), 这些项应该根据什么规则进行分组(这里是根据第一个字母的值, 它代表分数(没有 &lt;code&gt;+&lt;/code&gt;/&lt;code&gt;-&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;这生成一个匿名的散列, 散列的值是匿名数组。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;%(&amp;#34;B&amp;#34; =&amp;gt; [&amp;#34;Peter&amp;#34; =&amp;gt; &amp;#34;B&amp;#34;, &amp;#34;Zsófia&amp;#34; =&amp;gt; &amp;#34;B+&amp;#34;, &amp;#34;Maryam&amp;#34; =&amp;gt; &amp;#34;B+&amp;#34;,
 &amp;#34;秀英&amp;#34; =&amp;gt; &amp;#34;B-&amp;#34;, &amp;#34;Omar&amp;#34; =&amp;gt; &amp;#34;B&amp;#34;], &amp;#34;A&amp;#34; =&amp;gt; [&amp;#34;Celine&amp;#34; =&amp;gt; &amp;#34;A-&amp;#34;, &amp;#34;Aarav&amp;#34; =&amp;gt; &amp;#34;A&amp;#34;], &amp;#34;F&amp;#34; =&amp;gt; [&amp;#34;João&amp;#34; =&amp;gt; &amp;#34;F&amp;#34;, &amp;#34;Emma&amp;#34; =&amp;gt; &amp;#34;F&amp;#34;], &amp;#34;D&amp;#34; =&amp;gt; [&amp;#34;Finn&amp;#34; =&amp;gt; &amp;#34;D+&amp;#34;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为我们只对每组元素的个数感兴趣, 我们使用 &lt;a href=&#34;https://docs.raku.org/routine/+&#34;&gt;+&lt;/a&gt; 前置操作符数字化每个值然后打印它, 在数组前面添加 &lt;code&gt;+&lt;/code&gt; 符号会得到数组元素的个数。&lt;/p&gt;
&lt;p&gt;在 term 位置上一个单独的 &lt;code&gt;.method&lt;/code&gt; 方法等价于 &lt;code&gt;$_.method&lt;/code&gt;, 意思是对当前循环变量调用该方法。任意代码的返回值能使用花括号 &lt;code&gt;{}&lt;/code&gt; 插值到字符串中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt; 语句能被用作表达式 - 当条件为 false 时, 返回空列表, 然后被字符串化为空字符串。对字符串调用不带参数的 &lt;a href=&#34;https://docs.raku.org/routine/comb&#34;&gt;.comb&lt;/a&gt; 会生成该字符串的一个字符列表。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/rakulang">rakulang</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/calendar">calendar</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2014-12-19-raku-calendar/</guid>
                <pubDate>Wed, 07 Jul 2021 00:00:00 +0800</pubDate>
            </item>
        
    </channel>
</rss>


