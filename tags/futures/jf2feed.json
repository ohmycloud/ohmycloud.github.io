{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003cp\u003e\u003ca href=\"https://dart.dev/codelabs/async-await\"\u003easync-await\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e这个 codelab 教你如何使用 \u003ccode\u003efutures\u003c/code\u003e、\u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\u003c/p\u003e\n\u003cp\u003e要想从这个 codelab 中获得最大的收获，你应该具备以下条件。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e掌握\u003ca href=\"https://dart.dev/samples\"\u003e基本的 Dart 语法\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e有用其他语言编写异步代码的经验。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这个 codelab 包括以下材料。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如何以及何时使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 如何影响执行顺序。\u003c/li\u003e\n\u003cli\u003e如何在 \u003ccode\u003easync\u003c/code\u003e 函数中使用 \u003ccode\u003etry-catch\u003c/code\u003e 表达式处理异步调用中的错误。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e估计完成这个代码实验的时间。40-60分钟\u003c/p\u003e\n\u003cp\u003e注意：本页面使用嵌入式 DartPads 来显示示例和练习。如果你看到的是空框而不是 DartPads，请转到 \u003ca href=\"https://dart.dev/tools/dartpad/troubleshoot\"\u003eDartPad 故障排除页面\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"为什么异步代码很重要\"\u003e为什么异步代码很重要\u003c/h2\u003e\n\u003cp\u003e异步操作让你的程序在等待另一个操作完成时完成工作。下面是一些常见的异步操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过网络获取数据。\u003c/li\u003e\n\u003cli\u003e写入数据库。\u003c/li\u003e\n\u003cli\u003e从文件中读取数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e要在 Dart 中执行异步操作，你可以使用 \u003ccode\u003eFuture\u003c/code\u003e 类以及 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字。\u003c/p\u003e\n\u003ch3 id=\"例子-错误地使用异步函数\"\u003e例子: 错误地使用异步函数\u003c/h3\u003e\n\u003cp\u003e下面的例子显示了使用异步函数(\u003ccode\u003efetchUserOrder()\u003c/code\u003e)的错误方法。稍后你将使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 来修复这个例子。在运行这个例子之前，试着发现这个问题-你认为输出会是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// This example shows how *not* to write asynchronous Dart code.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eYour order is: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Imagine that this function is more complex and slow.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLarge Latte\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下面是这个例子为什么不能打印 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 最终产生的值。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efetchUserOrder()\u003c/code\u003e 是一个异步函数，在延迟之后，提供一个描述用户订单的字符串：\u0026ldquo;Large Latte\u0026rdquo;。\u003c/li\u003e\n\u003cli\u003e为了得到用户的订单，\u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 应该调用 \u003ccode\u003efetchUserOrder()\u003c/code\u003e，并等待其完成。由于 \u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 没有等待 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 完成，\u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 无法获得 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 最终提供的字符串值。\u003c/li\u003e\n\u003cli\u003e取而代之的是，\u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 得到的是待完成工作的表示：一个未完成的未来。您将在下一节了解更多关于未来的信息。\u003c/li\u003e\n\u003cli\u003e因为 \u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 没有得到描述用户订单的值，所以这个例子没有打印 \u0026ldquo;Large Latte\u0026rdquo; 到控制台，而是打印 \u0026ldquo;Your order is: Instance of \u0026lsquo;_Future\u0026rsquo;\u0026quot;。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在接下来的章节中，你将学习关于 futures 和关于使用 futures 的工作（使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e），这样你就能编写必要的代码，使 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 向控制台打印所需的值(\u0026ldquo;Large Latte\u0026rdquo;)。\u003c/p\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e同步操作: 同步操作会阻止其他操作的执行，直到它完成。\u003c/li\u003e\n\u003cli\u003e同步函数：同步函数只执行同步操作。\u003c/li\u003e\n\u003cli\u003e异步操作：异步操作一旦启动，就允许其他操作在它完成之前执行。\u003c/li\u003e\n\u003cli\u003e异步函数：异步函数至少执行一个异步操作，也可以执行同步操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"什么是未来\"\u003e什么是未来？\u003c/h2\u003e\n\u003cp\u003efuture(小写 \u0026ldquo;f\u0026rdquo;)是 \u003ca href=\"https://api.dart.dev/stable/dart-async/Future-class.html\"\u003eFuture\u003c/a\u003e（大写 \u0026ldquo;F\u0026rdquo;）类的一个实例。一个 future 代表异步操作的结果，可以有两种状态：未完成或完成。\u003c/p\u003e\n\u003cp\u003e注意：未完成是一个 Dart 术语，指的是一个未来的状态，在它产生一个值之前。\u003c/p\u003e\n\u003ch3 id=\"未完成的\"\u003e未完成的\u003c/h3\u003e\n\u003cp\u003e当你调用一个异步函数时，它会返回一个未完成的未来。这个未来正在等待函数的异步操作完成或抛出一个错误。\u003c/p\u003e\n\u003ch3 id=\"已完成的\"\u003e已完成的\u003c/h3\u003e\n\u003cp\u003e如果异步操作成功，未来就以一个值完成。否则它将以一个错误完成。\u003c/p\u003e\n\u003ch3 id=\"用一个值来完成\"\u003e用一个值来完成\u003c/h3\u003e\n\u003cp\u003e类型为 \u003ccode\u003eFuture\u0026lt;T\u0026gt;\u003c/code\u003e 的 future 用一个类型为 \u003ccode\u003eT\u003c/code\u003e 的值来完成。例如，一个类型为 \u003ccode\u003eFuture\u0026lt;String\u0026gt;\u003c/code\u003e 的 future 会产生一个字符串值。如果一个 future 没有产生一个可用的值，那么 future 的类型是 \u003ccode\u003eFuture\u0026lt;void\u0026gt;\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"用一个错误来完成\"\u003e用一个错误来完成\u003c/h3\u003e\n\u003cp\u003e如果函数执行的异步操作因为任何原因而失败，future 就会以错误的方式完成。\u003c/p\u003e\n\u003ch3 id=\"例子-介绍-future\"\u003e例子: 介绍 future\u003c/h3\u003e\n\u003cp\u003e在下面的例子中，\u003ccode\u003efetchUserOrder()\u003c/code\u003e 返回一个在打印到控制台后完成的 future。因为它没有返回一个可用的值，\u003ccode\u003efetchUserOrder()\u003c/code\u003e 的类型是 \u003ccode\u003eFuture\u0026lt;void\u0026gt;\u003c/code\u003e。在运行这个例子之前，试着预测一下哪个会先打印：\u0026ldquo;Large Latte\u0026rdquo; 或 \u0026ldquo;Fetching user order\u0026hellip;\u0026quot;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Imagine that this function is fetching user info from another service or database.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLarge Latte\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eFetching user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在前面的例子中，尽管 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 在第8行的 \u003ccode\u003eprint()\u003c/code\u003e 调用之前执行，控制台还是在 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 的输出 (\u0026ldquo;Large Latte\u0026rdquo;) 之前显示了第8行的输出 (\u0026ldquo;Fetching user order\u0026hellip;\u0026quot;)。这是因为 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 在打印 \u0026ldquo;Large Latte\u0026rdquo; 之前会有延迟。\u003c/p\u003e\n\u003ch3 id=\"例子-完成时出现错误\"\u003e例子: 完成时出现错误\u003c/h3\u003e\n\u003cp\u003e运行下面的例子，看看未来如何完成一个错误。稍后你将学习如何处理错误。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Imagine that this function is fetching user info but encounters a bug\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLogout failed: user ID is invalid\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eFetching user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003efetchUserOrder()\u003c/code\u003e 完成时出现错误，表明用户ID无效。\u003c/p\u003e\n\u003cp\u003e你已经学习了 future 和它们如何完成，但你如何使用异步函数的结果呢？在下一节中，你将学习如何使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字来获取结果。\u003c/p\u003e\n\u003cp\u003e快速回顾:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个 \u003ccode\u003eFuture\u0026lt;T\u0026gt;\u003c/code\u003e 实例会产生一个 \u003ccode\u003eT\u003c/code\u003e 类型的值。\u003c/li\u003e\n\u003cli\u003e如果一个 future 没有产生一个可用的值，那么 future 的类型是 \u003ccode\u003eFuture\u0026lt;void\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e一个 future 可以处于两种状态之一：未完成或完成。\u003c/li\u003e\n\u003cli\u003e当你调用一个返回 future 的函数时，函数会把要做的工作排队，并返回一个未完成的 future。\u003c/li\u003e\n\u003cli\u003e当一个 future 的操作完成时，future 以一个值或以一个错误完成。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFuture: Dart \u003ca href=\"https://api.dart.dev/stable/dart-async/Future-class.html\"\u003eFuture\u003c/a\u003e 类。\u003c/li\u003e\n\u003cli\u003efuture：Dart \u003ccode\u003eFuture\u003c/code\u003e 类的一个实例。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"使用-futureasync-和-await\"\u003e使用 future：async 和 await\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字提供了一种声明式的方式来定义异步函数并使用它们的结果。在使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 时，请记住以下两个基本准则。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e要定义一个异步函数，请在函数主体前添加 \u003ccode\u003easync\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eawait\u003c/code\u003e 关键字只能在 \u003ccode\u003easync\u003c/code\u003e 函数中使用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下面是一个将 \u003ccode\u003emain()\u003c/code\u003e 从同步函数转换为异步函数的例子。\u003c/p\u003e\n\u003cp\u003e首先，在函数体前添加 \u003ccode\u003easync\u003c/code\u003e 关键字:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"err\"\u003e·\u003c/span\u003e\u003cspan class=\"err\"\u003e·\u003c/span\u003e\u003cspan class=\"err\"\u003e·\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果函数有声明的返回类型，那么更新类型为 \u003ccode\u003eFuture\u0026lt;T\u0026gt;\u003c/code\u003e，其中 T 是函数返回的值的类型。如果函数没有明确返回值，那么返回类型为 \u003ccode\u003eFuture\u0026lt;void\u0026gt;\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"err\"\u003e·\u003c/span\u003e\u003cspan class=\"err\"\u003e·\u003c/span\u003e\u003cspan class=\"err\"\u003e·\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在你已经有了一个 \u003ccode\u003easync\u003c/code\u003e 函数，你可以使用 \u003ccode\u003eawait\u003c/code\u003e 关键字来等待一个 future 的完成:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e正如下面两个例子所显示的，\u003ccode\u003easync\u003c/code\u003e 和a \u003ccode\u003ewait\u003c/code\u003e 关键字导致异步代码看起来很像同步代码。唯一的区别在异步示例中突出显示，如果你的窗口足够宽，它就在同步示例的右边。\u003c/p\u003e\n\u003cp\u003e示例：同步函数\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eYour order is: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Imagine that this function is\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// more complex and slow.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLarge Latte\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eFetching user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eFetching user order...\nYour order is: Instance of _Future\u0026lt;String\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e例子：异步函数\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eYour order is: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Imagine that this function is\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// more complex and slow.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLarge Latte\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eFetching user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eFetching user order...\nYour order is: Large Latte\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e异步示例在三个方面有所不同。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 的返回类型从 \u003ccode\u003eString\u003c/code\u003e 变为 \u003ccode\u003eFuture\u0026lt;String\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003easync\u003c/code\u003e 关键字出现在 \u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 和 \u003ccode\u003emain()\u003c/code\u003e 的函数体之前。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eawait\u003c/code\u003e 关键字出现在调用异步函数 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 和 \u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 之前。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003easync: 你可以在一个函数的主体前使用 \u003ccode\u003easync\u003c/code\u003e 关键字来标记它为异步函数。\u003c/li\u003e\n\u003cli\u003easync 函数: \u003ccode\u003easync\u003c/code\u003e 函数是一个标有 \u003ccode\u003easync\u003c/code\u003e 关键字的函数。\u003c/li\u003e\n\u003cli\u003eawait：可以使用 \u003ccode\u003eawait\u003c/code\u003e 关键字来获取异步表达式的完成结果。\u003ccode\u003eawait\u003c/code\u003e 关键字只在 \u003ccode\u003easync\u003c/code\u003e 函数中起作用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"使用-async-和-await-的执行流程\"\u003e使用 async 和 await 的执行流程\u003c/h3\u003e\n\u003cp\u003e一个异步函数在第一个 \u003ccode\u003eawait\u003c/code\u003e 关键字之前是同步运行的。这意味着在一个 \u003ccode\u003easync\u003c/code\u003e 函数体中，第一个 \u003ccode\u003eawait\u003c/code\u003e 关键字之前的所有同步代码都会立即执行。\u003c/p\u003e\n\u003cp\u003e版本说明：在 Dart 2.0 之前，一个异步函数立即返回，而不会在异步函数体中执行任何代码。\u003c/p\u003e\n\u003ch3 id=\"例子在异步函数内执行在异步函数中执行\"\u003e例子：在异步函数内执行。在异步函数中执行\u003c/h3\u003e\n\u003cp\u003e运行下面的例子，看看如何在异步函数体中执行。你认为输出会是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprintOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAwaiting user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eYour order is: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Imagine that this function is more complex and slow.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLarge Latte\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ecountSeconds\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eprintOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// You can ignore this function - it\u0026#39;s here to visualize delay time in this example.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ecountSeconds\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e运行上例中的代码后，尝试将第2行和第3行反过来。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAwaiting user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意到输出的时间发生了变化，现在 \u003ccode\u003eprint('Awaiting user order')\u003c/code\u003e 出现在 \u003ccode\u003eprintOrderMessage()\u003c/code\u003e 中第一个 \u003ccode\u003eawait\u003c/code\u003e 关键字之后。\u003c/p\u003e\n\u003ch3 id=\"练习-练习使用-async-和-await\"\u003e练习: 练习使用 async 和 await\u003c/h3\u003e\n\u003cp\u003e下面的练习是一个失败的单元测试，其中包含部分完成的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 \u003ccode\u003emain()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e为了模拟异步操作，调用以下函数，这些函数是为你提供的。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e函数\u003c/th\u003e\n\u003cth align=\"left\"\u003e类型签名\u003c/th\u003e\n\u003cth align=\"left\"\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003efetchRole()\u003c/td\u003e\n\u003ctd align=\"left\"\u003eFuture\u003c!-- raw HTML omitted --\u003e fetchRole()\u003c/td\u003e\n\u003ctd align=\"left\"\u003e获取用户角色的简短描述。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003efetchLoginAmount()\u003c/td\u003e\n\u003ctd align=\"left\"\u003eFuture\u003c!-- raw HTML omitted --\u003e fetchLoginAmount()\u003c/td\u003e\n\u003ctd align=\"left\"\u003e获取用户的登录次数。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e第1部分：\u003ccode\u003ereportUserRole()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e为 \u003ccode\u003ereportUserRole()\u003c/code\u003e 函数添加代码，使其执行以下操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e返回一个以下列字符串完成的 future： \u003ccode\u003e\u0026quot;User role: \u0026lt;user role\u0026gt;\u0026quot;\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e注意：你必须使用 \u003ccode\u003efetchRole()\u003c/code\u003e 返回的实际值；复制和粘贴示例返回值不会使测试通过。\u003c/li\u003e\n\u003cli\u003e示例返回值: \u0026ldquo;User role: tester\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e通过调用提供的函数 \u003ccode\u003efetchRole()\u003c/code\u003e 获取用户角色。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第二部分：\u003ccode\u003ereportLogins()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e实现一个异步函数 \u003ccode\u003ereportLogins()\u003c/code\u003e，使其执行以下操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e返回字符串 \u0026ldquo;Total number of logins: \u0026lt;# of logins\u0026gt;\u0026rdquo;。\n\u003cul\u003e\n\u003cli\u003e注意：你必须使用 \u003ccode\u003efetchLoginAmount()\u003c/code\u003e 返回的实际值；复制和粘贴示例返回值不会使测试通过。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereportLogins()\u003c/code\u003e 的返回值示例: \u003ccode\u003e\u0026quot;Total number of logins: 57\u0026quot;\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e通过调用提供的函数 \u003ccode\u003efetchLoginAmount()\u003c/code\u003e 来获取登录次数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ereportUserRole\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eusername\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchRole\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eUser role: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eusername\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ereportLogins\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003elogins\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchLoginAmount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eTotal number of logins: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003elogins\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意：如果你的代码通过了测试，你可以忽略信息级的消息。\u003c/p\u003e\n\u003ch2 id=\"处理错误\"\u003e处理错误\u003c/h2\u003e\n\u003cp\u003e要处理 \u003ccode\u003easync\u003c/code\u003e 函数中的错误，使用 \u003ccode\u003etry-catch\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAwaiting user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eCaught error: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在一个 \u003ccode\u003easync\u003c/code\u003e 函数中，你可以像在同步代码中一样编写 \u003ccode\u003etry-catch\u003c/code\u003e 子句。\u003c/p\u003e\n\u003ch3 id=\"例子async-和-await-的-try-catch-子句\"\u003e例子：\u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 的 \u003ccode\u003etry-catch\u003c/code\u003e 子句\u003c/h3\u003e\n\u003cp\u003e运行下面的例子，看看如何处理一个异步函数的错误。你认为输出会是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprintOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAwaiting user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eCaught error: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Imagine that this function is more complex.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eCannot locate user order\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eprintOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"练习-练习处理错误\"\u003e练习: 练习处理错误\u003c/h3\u003e\n\u003cp\u003e下面的练习提供了使用异步代码处理错误的练习，使用上一节中描述的方法。为了模拟异步操作，你的代码将调用以下函数，该函数为你提供。\u003c/p\u003e\n\u003cp\u003e| 函数                | 类型签名 | 描述 |\n| fetchNewUsername() | Future\u003c!-- raw HTML omitted --\u003e fetchNewUsername() |\t返回你可以用来替换旧用户名的新用户名。|\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 来实现一个异步的 \u003ccode\u003echangeUsername()\u003c/code\u003e 函数，该函数执行以下操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e调用提供的异步函数 \u003ccode\u003efetchNewUsername()\u003c/code\u003e 并返回其结果。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echangeUsername()\u003c/code\u003e 的返回值示例: \u0026ldquo;jane_smith_92\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e捕获任何发生的错误并返回错误的字符串值。\n\u003cul\u003e\n\u003cli\u003e你可以使用 \u003ca href=\"https://api.dart.dev/stable/dart-core/ArgumentError/toString.html\"\u003etoString()\u003c/a\u003e 方法对 \u003ca href=\"https://api.dart.dev/stable/dart-core/Exception-class.html\"\u003eExceptions\u003c/a\u003e 和\u003ca href=\"https://api.dart.dev/stable/dart-core/Error-class.html\"\u003eErrors\u003c/a\u003e 进行字符串化。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003echangeUsername\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchNewUsername\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"练习-把所有的东西放在一起\"\u003e练习: 把所有的东西放在一起\u003c/h3\u003e\n\u003cp\u003e现在是时候在最后一个练习中练习所学的知识了。为了模拟异步操作，本练习提供了异步函数 \u003ccode\u003efetchUsername()\u003c/code\u003e 和 \u003ccode\u003elogoutUser()\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e| 函数             | 类型签名                        | 描述 |\n| fetchUsername() |\tFuture\u003c!-- raw HTML omitted --\u003e fetchUsername() | 返回与当前用户相关联的名称。 |\n| logoutUser()\t  | Future\u003c!-- raw HTML omitted --\u003e logoutUser()\t   | 执行当前用户的注销，并返回被注销的用户名。 |\u003c/p\u003e\n\u003cp\u003e编写以下内容。\u003c/p\u003e\n\u003cp\u003e第一部分：\u003ccode\u003eaddHello()\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写一个函数 \u003ccode\u003eaddHello()\u003c/code\u003e，它接受一个单一的 \u003ccode\u003eString\u003c/code\u003e 参数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaddHello()\u003c/code\u003e 返回它的 \u003ccode\u003eString\u003c/code\u003e 参数，前面加 \u0026lsquo;Hello\u0026rsquo;。\n例如：\u003ccode\u003eaddHello('Jon')\u003c/code\u003e 返回 \u0026lsquo;Hello Jon\u0026rsquo;。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第二部分：\u003ccode\u003egreetUser()\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写一个不接受参数的函数 \u003ccode\u003egreetUser()\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e为了得到用户名，\u003ccode\u003egreetUser()\u003c/code\u003e 调用提供的异步函数 \u003ccode\u003efetchUsername()\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egreetUser()\u003c/code\u003e 通过调用 \u003ccode\u003eaddHello()\u003c/code\u003e 为用户创建一个问候语，传递用户名，并返回结果。\n例子: 如果 \u003ccode\u003efetchUsername()\u003c/code\u003e 返回 \u0026lsquo;Jenny\u0026rsquo;, 那么 \u003ccode\u003egreetUser()\u003c/code\u003e 返回 \u0026lsquo;Hello Jenny\u0026rsquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第三部分：\u003ccode\u003esayGoodbye()\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e编写一个函数 \u003ccode\u003esayGoodbye()\u003c/code\u003e，它的功能如下。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不接受任何参数\u003c/li\u003e\n\u003cli\u003e捕获任何错误。\u003c/li\u003e\n\u003cli\u003e调用所提供的异步函数 logoutUser().\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e如果 \u003ccode\u003elogoutUser()\u003c/code\u003e 失败，\u003ccode\u003esayGoodbye()\u003c/code\u003e 返回任何你喜欢的字符串。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e如果 \u003ccode\u003elogoutUser()\u003c/code\u003e 成功，\u003ccode\u003esayGoodbye()\u003c/code\u003e 返回字符串 \u003ccode\u003e'\u0026lt;result\u0026gt; Thanks, see you next time'\u003c/code\u003e，其中 \u003ccode\u003e\u0026lt;result\u0026gt;\u003c/code\u003e 是调用 \u003ccode\u003elogoutUser()\u003c/code\u003e 返回的字符串值。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eaddHello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egreetUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eusername\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUsername\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eaddHello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esayGoodbye\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003elogoutUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"s1\"\u003e Thanks, see you next time\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eFailed to logout user: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"下一步是什么\"\u003e下一步是什么？\u003c/h2\u003e\n\u003cp\u003e恭喜你，你已经完成了 codelab 的学习！如果你还想了解更多，这里有一些下一步的建议。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e玩玩 \u003ca href=\"https://dartpad.dev/\"\u003eDartPad\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e尝试另一个 \u003ca href=\"https://dart.dev/codelabs\"\u003ecodelab\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e学习更多关于 futures 和异步的知识。\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tutorials/language/streams\"\u003eStreams tutorial\u003c/a\u003e: 学习如何使用异步事件的序列。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/playlist?list=PLjxrf2q8roU0Net_g1NT5_vOO3s_FR02J\"\u003e来自 Google 的 Dart视频\u003c/a\u003e: 观看一个或多个关于异步编码的视频。或者，如果你喜欢，阅读基于这些视频的文章。(从\u003ca href=\"https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a\"\u003e隔离和事件循环\u003c/a\u003e开始。)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/get-dart\"\u003e获取 Dart SDK\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果你对使用嵌入式 DartPads 感兴趣，就像这个 codelab 一样，请看\u003ca href=\"https://dart.dev/resources/dartpad-best-practices\"\u003e教程中使用 DartPad 的最佳实践\u003c/a\u003e。\u003c/p\u003e\n","text":"async-await\n这个 codelab 教你如何使用 futures、async 和 await 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\n要想从这个 codelab 中获得最大的收获，你应该具备以下条件。\n 掌握基本的 Dart 语法 有用其他语言编写异步代码的经验。  这个 codelab 包括以下材料。\n 如何以及何时使用 async 和 await 关键字。 使用 async 和 await 如何影响执行顺序。 如何在 async 函数中使用 try-catch 表达式处理异步调用中的错误。  估计完成这个代码实验的时间。40-60分钟\n注意：本页面使用嵌入式 DartPads 来显示示例和练习。如果你看到的是空框而不是 DartPads，请转到 DartPad 故障排除页面。\n为什么异步代码很重要 异步操作让你的程序在等待另一个操作完成时完成工作。下面是一些常见的异步操作。\n 通过网络获取数据。 写入数据库。 从文件中读取数据。  要在 Dart 中执行异步操作，你可以使用 Future 类以及 async 和 await 关键字。\n例子: 错误地使用异步函数 下面的例子显示了使用异步函数(fetchUserOrder())的错误方法。稍后你将使用 async 和 await 来修复这个例子。在运行这个例子之前，试着发现这个问题-你认为输出会是什么？\n// This example shows how *not* to write asynchronous Dart code.  String createOrderMessage() { var order = fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); void main() { print(createOrderMessage()); } 下面是这个例子为什么不能打印 fetchUserOrder() 最终产生的值。\n fetchUserOrder() 是一个异步函数，在延迟之后，提供一个描述用户订单的字符串：\u0026ldquo;Large Latte\u0026rdquo;。 为了得到用户的订单，createOrderMessage() 应该调用 fetchUserOrder()，并等待其完成。由于 createOrderMessage() 没有等待 fetchUserOrder() 完成，createOrderMessage() 无法获得 fetchUserOrder() 最终提供的字符串值。 取而代之的是，createOrderMessage() 得到的是待完成工作的表示：一个未完成的未来。您将在下一节了解更多关于未来的信息。 因为 createOrderMessage() 没有得到描述用户订单的值，所以这个例子没有打印 \u0026ldquo;Large Latte\u0026rdquo; 到控制台，而是打印 \u0026ldquo;Your order is: Instance of \u0026lsquo;_Future\u0026rsquo;\u0026quot;。  在接下来的章节中，你将学习关于 futures 和关于使用 futures 的工作（使用 async 和 await），这样你就能编写必要的代码，使 fetchUserOrder() 向控制台打印所需的值(\u0026ldquo;Large Latte\u0026rdquo;)。\n关键术语:\n 同步操作: 同步操作会阻止其他操作的执行，直到它完成。 同步函数：同步函数只执行同步操作。 异步操作：异步操作一旦启动，就允许其他操作在它完成之前执行。 异步函数：异步函数至少执行一个异步操作，也可以执行同步操作。  什么是未来？ future(小写 \u0026ldquo;f\u0026rdquo;)是 Future（大写 \u0026ldquo;F\u0026rdquo;）类的一个实例。一个 future 代表异步操作的结果，可以有两种状态：未完成或完成。\n注意：未完成是一个 Dart 术语，指的是一个未来的状态，在它产生一个值之前。\n未完成的 当你调用一个异步函数时，它会返回一个未完成的未来。这个未来正在等待函数的异步操作完成或抛出一个错误。\n已完成的 如果异步操作成功，未来就以一个值完成。否则它将以一个错误完成。\n用一个值来完成 类型为 Future\u0026lt;T\u0026gt; 的 future 用一个类型为 T 的值来完成。例如，一个类型为 Future\u0026lt;String\u0026gt; 的 future 会产生一个字符串值。如果一个 future 没有产生一个可用的值，那么 future 的类型是 Future\u0026lt;void\u0026gt;。\n用一个错误来完成 如果函数执行的异步操作因为任何原因而失败，future 就会以错误的方式完成。\n例子: 介绍 future 在下面的例子中，fetchUserOrder() 返回一个在打印到控制台后完成的 future。因为它没有返回一个可用的值，fetchUserOrder() 的类型是 Future\u0026lt;void\u0026gt;。在运行这个例子之前，试着预测一下哪个会先打印：\u0026ldquo;Large Latte\u0026rdquo; 或 \u0026ldquo;Fetching user order\u0026hellip;\u0026quot;。\nFuture\u0026lt;void\u0026gt; fetchUserOrder() { // Imagine that this function is fetching user info from another service or database.  return Future.delayed(Duration(seconds: 2), () =\u0026gt; print(\u0026#39;Large Latte\u0026#39;)); } void main() { fetchUserOrder(); print(\u0026#39;Fetching user order...\u0026#39;); } 在前面的例子中，尽管 fetchUserOrder() 在第8行的 print() 调用之前执行，控制台还是在 fetchUserOrder() 的输出 (\u0026ldquo;Large Latte\u0026rdquo;) 之前显示了第8行的输出 (\u0026ldquo;Fetching user order\u0026hellip;\u0026quot;)。这是因为 fetchUserOrder() 在打印 \u0026ldquo;Large Latte\u0026rdquo; 之前会有延迟。\n例子: 完成时出现错误 运行下面的例子，看看未来如何完成一个错误。稍后你将学习如何处理错误。\nFuture\u0026lt;void\u0026gt; fetchUserOrder() { // Imagine that this function is fetching user info but encounters a bug  return Future.delayed(Duration(seconds: 2), () =\u0026gt; throw Exception(\u0026#39;Logout failed: user ID is invalid\u0026#39;)); } void main() { fetchUserOrder(); print(\u0026#39;Fetching user order...\u0026#39;); } 在这个例子中，fetchUserOrder() 完成时出现错误，表明用户ID无效。\n你已经学习了 future 和它们如何完成，但你如何使用异步函数的结果呢？在下一节中，你将学习如何使用 async 和 await 关键字来获取结果。\n快速回顾:\n 一个 Future\u0026lt;T\u0026gt; 实例会产生一个 T 类型的值。 如果一个 future 没有产生一个可用的值，那么 future 的类型是 Future\u0026lt;void\u0026gt;。 一个 future 可以处于两种状态之一：未完成或完成。 当你调用一个返回 future 的函数时，函数会把要做的工作排队，并返回一个未完成的 future。 当一个 future 的操作完成时，future 以一个值或以一个错误完成。  关键术语:\n Future: Dart Future 类。 future：Dart Future 类的一个实例。  使用 future：async 和 await async 和 await 关键字提供了一种声明式的方式来定义异步函数并使用它们的结果。在使用 async 和 await 时，请记住以下两个基本准则。\n 要定义一个异步函数，请在函数主体前添加 async。 await 关键字只能在 async 函数中使用。  下面是一个将 main() 从同步函数转换为异步函数的例子。\n首先，在函数体前添加 async 关键字:\nvoid main() async { ··· } 如果函数有声明的返回类型，那么更新类型为 Future\u0026lt;T\u0026gt;，其中 T 是函数返回的值的类型。如果函数没有明确返回值，那么返回类型为 Future\u0026lt;void\u0026gt;。\nFuture\u0026lt;void\u0026gt; main() async { ··· } 现在你已经有了一个 async 函数，你可以使用 await 关键字来等待一个 future 的完成:\nprint(await createOrderMessage()); 正如下面两个例子所显示的，async 和a wait 关键字导致异步代码看起来很像同步代码。唯一的区别在异步示例中突出显示，如果你的窗口足够宽，它就在同步示例的右边。\n示例：同步函数\nString createOrderMessage() { var order = fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is  // more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); void main() { print(\u0026#39;Fetching user order...\u0026#39;); print(createOrderMessage()); } Fetching user order... Your order is: Instance of _Future\u0026lt;String\u0026gt; 例子：异步函数\nFuture\u0026lt;String\u0026gt; createOrderMessage() async { var order = await fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is  // more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); Future\u0026lt;void\u0026gt; main() async { print(\u0026#39;Fetching user order...\u0026#39;); print(await createOrderMessage()); } Fetching user order... Your order is: Large Latte 异步示例在三个方面有所不同。\n createOrderMessage() 的返回类型从 String 变为 Future\u0026lt;String\u0026gt;。 async 关键字出现在 createOrderMessage() 和 main() 的函数体之前。 await 关键字出现在调用异步函数 fetchUserOrder() 和 createOrderMessage() 之前。  关键术语:\n async: 你可以在一个函数的主体前使用 async 关键字来标记它为异步函数。 async 函数: async 函数是一个标有 async 关键字的函数。 await：可以使用 await 关键字来获取异步表达式的完成结果。await 关键字只在 async 函数中起作用。  使用 async 和 await 的执行流程 一个异步函数在第一个 await 关键字之前是同步运行的。这意味着在一个 async 函数体中，第一个 await 关键字之前的所有同步代码都会立即执行。\n版本说明：在 Dart 2.0 之前，一个异步函数立即返回，而不会在异步函数体中执行任何代码。\n例子：在异步函数内执行。在异步函数中执行 运行下面的例子，看看如何在异步函数体中执行。你认为输出会是什么？\nFuture\u0026lt;void\u0026gt; printOrderMessage() async { print(\u0026#39;Awaiting user order...\u0026#39;); var order = await fetchUserOrder(); print(\u0026#39;Your order is: $order\u0026#39;); } Future\u0026lt;String\u0026gt; fetchUserOrder() { // Imagine that this function is more complex and slow.  return Future.delayed(Duration(seconds: 4), () =\u0026gt; \u0026#39;Large Latte\u0026#39;); } Future\u0026lt;void\u0026gt; main() async { countSeconds(4); await printOrderMessage(); } // You can ignore this function - it\u0026#39;s here to visualize delay time in this example. void countSeconds(int s) { for (var i = 1; i \u0026lt;= s; i++) { Future.delayed(Duration(seconds: i), () =\u0026gt; print(i)); } } 运行上例中的代码后，尝试将第2行和第3行反过来。\nvar order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); 注意到输出的时间发生了变化，现在 print('Awaiting user order') 出现在 printOrderMessage() 中第一个 await 关键字之后。\n练习: 练习使用 async 和 await 下面的练习是一个失败的单元测试，其中包含部分完成的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 main()。\n为了模拟异步操作，调用以下函数，这些函数是为你提供的。\n   函数 类型签名 描述     fetchRole() FuturefetchRole() 获取用户角色的简短描述。   fetchLoginAmount() FuturefetchLoginAmount() 获取用户的登录次数。    第1部分：reportUserRole()\n为 reportUserRole() 函数添加代码，使其执行以下操作。\n 返回一个以下列字符串完成的 future： \u0026quot;User role: \u0026lt;user role\u0026gt;\u0026quot;。  注意：你必须使用 fetchRole() 返回的实际值；复制和粘贴示例返回值不会使测试通过。 示例返回值: \u0026ldquo;User role: tester\u0026rdquo;   通过调用提供的函数 fetchRole() 获取用户角色。  第二部分：reportLogins()\n实现一个异步函数 reportLogins()，使其执行以下操作。\n 返回字符串 \u0026ldquo;Total number of logins: \u0026lt;# of logins\u0026gt;\u0026rdquo;。  注意：你必须使用 fetchLoginAmount() 返回的实际值；复制和粘贴示例返回值不会使测试通过。 reportLogins() 的返回值示例: \u0026quot;Total number of logins: 57\u0026quot;。   通过调用提供的函数 fetchLoginAmount() 来获取登录次数。  Future\u0026lt;String\u0026gt; reportUserRole() async { var username = await fetchRole(); return \u0026#39;User role: $username\u0026#39;; } Future\u0026lt;String\u0026gt; reportLogins() async { var logins = await fetchLoginAmount(); return \u0026#39;Total number of logins: $logins\u0026#39;; } 注意：如果你的代码通过了测试，你可以忽略信息级的消息。\n处理错误 要处理 async 函数中的错误，使用 try-catch:\ntry { var order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); } catch (err) { print(\u0026#39;Caught error: $err\u0026#39;); } 在一个 async 函数中，你可以像在同步代码中一样编写 try-catch 子句。\n例子：async 和 await 的 try-catch 子句 运行下面的例子，看看如何处理一个异步函数的错误。你认为输出会是什么？\nFuture\u0026lt;void\u0026gt; printOrderMessage() async { try { var order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); print(order); } catch (err) { print(\u0026#39;Caught error: $err\u0026#39;); } } Future\u0026lt;String\u0026gt; fetchUserOrder() { // Imagine that this function is more complex.  var str = Future.delayed( Duration(seconds: 4), () =\u0026gt; throw \u0026#39;Cannot locate user order\u0026#39;); return str; } Future\u0026lt;void\u0026gt; main() async { await printOrderMessage(); } 练习: 练习处理错误 下面的练习提供了使用异步代码处理错误的练习，使用上一节中描述的方法。为了模拟异步操作，你的代码将调用以下函数，该函数为你提供。\n| 函数 | 类型签名 | 描述 | | fetchNewUsername() | FuturefetchNewUsername() |\t返回你可以用来替换旧用户名的新用户名。|\n使用 async 和 await 来实现一个异步的 changeUsername() 函数，该函数执行以下操作。\n 调用提供的异步函数 fetchNewUsername() 并返回其结果。  changeUsername() 的返回值示例: \u0026ldquo;jane_smith_92\u0026rdquo;   捕获任何发生的错误并返回错误的字符串值。  你可以使用 toString() 方法对 Exceptions 和Errors 进行字符串化。    Future\u0026lt;String\u0026gt; changeUsername () async { try { return await fetchNewUsername(); } catch (err) { return err.toString(); } } 练习: 把所有的东西放在一起 现在是时候在最后一个练习中练习所学的知识了。为了模拟异步操作，本练习提供了异步函数 fetchUsername() 和 logoutUser():\n| 函数 | 类型签名 | 描述 | | fetchUsername() |\tFuturefetchUsername() | 返回与当前用户相关联的名称。 | | logoutUser()\t| FuturelogoutUser()\t| 执行当前用户的注销，并返回被注销的用户名。 |\n编写以下内容。\n第一部分：addHello()\n 编写一个函数 addHello()，它接受一个单一的 String 参数。 addHello() 返回它的 String 参数，前面加 \u0026lsquo;Hello\u0026rsquo;。 例如：addHello('Jon') 返回 \u0026lsquo;Hello Jon\u0026rsquo;。  第二部分：greetUser()\n 编写一个不接受参数的函数 greetUser()。 为了得到用户名，greetUser() 调用提供的异步函数 fetchUsername()。 greetUser() 通过调用 addHello() 为用户创建一个问候语，传递用户名，并返回结果。 例子: 如果 fetchUsername() 返回 \u0026lsquo;Jenny\u0026rsquo;, 那么 greetUser() 返回 \u0026lsquo;Hello Jenny\u0026rsquo;.  第三部分：sayGoodbye()\n  编写一个函数 sayGoodbye()，它的功能如下。\n 不接受任何参数 捕获任何错误。 调用所提供的异步函数 logoutUser().    如果 logoutUser() 失败，sayGoodbye() 返回任何你喜欢的字符串。\n  如果 logoutUser() 成功，sayGoodbye() 返回字符串 '\u0026lt;result\u0026gt; Thanks, see you next time'，其中 \u0026lt;result\u0026gt; 是调用 logoutUser() 返回的字符串值。\n  String addHello(user) =\u0026gt; \u0026#39;Hello $user\u0026#39;; Future\u0026lt;String\u0026gt; greetUser() async { var username = await fetchUsername(); return addHello(username); } Future\u0026lt;String\u0026gt; sayGoodbye() async { try { var result = await logoutUser(); return \u0026#39;$resultThanks, see you next time\u0026#39;; } catch (e) { return \u0026#39;Failed to logout user: $e\u0026#39;; } } 下一步是什么？ 恭喜你，你已经完成了 codelab 的学习！如果你还想了解更多，这里有一些下一步的建议。\n 玩玩 DartPad。 尝试另一个 codelab。 学习更多关于 futures 和异步的知识。  Streams tutorial: 学习如何使用异步事件的序列。 来自 Google 的 Dart视频: 观看一个或多个关于异步编码的视频。或者，如果你喜欢，阅读基于这些视频的文章。(从隔离和事件循环开始。)   获取 Dart SDK。  如果你对使用嵌入式 DartPads 感兴趣，就像这个 codelab 一样，请看教程中使用 DartPad 的最佳实践。\n"},"name":"异步编程：futures、async、await。","published":"2020-06-27T00:00:00+08:00","summary":"这个 codelab 教你如何使用 futures、async 和 await 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。","type":"entry","url":"https://ohmyweekly.github.io/notes/futures-async-await/"}],"name":"futures","type":"feed","url":"https://ohmyweekly.github.io/tags/futures/"}