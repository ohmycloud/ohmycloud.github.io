<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    Architecture on
                
            
            焉知非鱼</title>
        <link>http://localhost:1313/tags/architecture/</link>
        <description>Recent content  in Architecture
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Sat, 02 Mar 2024 15:58:51 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="http://localhost:1313/tags/architecture/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>Flink 的架构</title>
                <link>http://localhost:1313/notes/2020-08-20-flink-architecture/</link>
                
                
                <description>&lt;blockquote&gt;Flink Architecture&lt;/blockquote&gt;&lt;p&gt;Flink 是一个分布式系统，为了执行流式应用，需要对计算资源进行有效的分配和管理。它集成了所有常见的集群资源管理器，如 &lt;a href=&#34;https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/YARN.html&#34;&gt;Hadoop YARN&lt;/a&gt;、&lt;a href=&#34;https://mesos.apache.org/&#34;&gt;Apache Mesos&lt;/a&gt; 和 &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;，但也可以设置为独立集群甚至作为库运行。&lt;/p&gt;
&lt;p&gt;本节包含 Flink 架构的概述，并描述了其主要组件如何交互执行应用程序并从故障中恢复。&lt;/p&gt;
&lt;h2 id=&#34;flink-集群的解剖&#34;&gt;Flink 集群的解剖&lt;/h2&gt;
&lt;p&gt;Flink 运行时由两种类型的进程组成：一个 JobManager 和一个或多个 TaskManagers。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/processes.svg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;客户端不是运行时和程序执行的一部分，而是用来准备并向 JobManager 发送数据流。之后，客户端可以断开连接（分离模式），或者保持连接以接收进度报告（附加模式）。客户端既可以作为触发执行的 Java/Scala 程序的一部分运行，也可以在命令行进程 &lt;code&gt;./bin/flink run&lt;/code&gt; &amp;hellip;中运行。&lt;/p&gt;
&lt;p&gt;JobManager 和 TaskManagers 可以以各种方式启动：直接在机器上作为一个&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/deployment/cluster_setup.html&#34;&gt;独立的集群&lt;/a&gt;，在容器中，或由 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/deployment/yarn_setup.html&#34;&gt;YARN&lt;/a&gt; 或 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/deployment/mesos.html&#34;&gt;Mesos&lt;/a&gt; 等资源框架管理。TaskManagers 连接到 JobManagers，宣布自己可用，并被分配工作。&lt;/p&gt;
&lt;h3 id=&#34;jobmanager&#34;&gt;JobManager&lt;/h3&gt;
&lt;p&gt;JobManager 有一些与协调 Flink 应用的分布式执行有关的职责：它决定何时安排下一个任务（或一组任务），对已完成的任务或执行失败作出反应，协调检查点，并协调失败时的恢复等。这个过程由三个不同的组件组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;资源管理器(ResourceManager)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ResourceManager 负责 Flink 集群中的资源去/分配和供应&amp;ndash;它管理任务槽(&lt;strong&gt;task slots&lt;/strong&gt;)，任务槽是 Flink 集群中资源调度的单位（见 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/flink-architecture.html#taskmanagers&#34;&gt;TaskManagers&lt;/a&gt;）。Flink 针对不同的环境和资源提供者（如 YARN、Mesos、Kubernetes 和独立部署）实现了多个 ResourceManagers。在独立设置中，ResourceManager 只能分配可用的 TaskManagers 的槽位，不能自行启动新的 TaskManagers。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dispatcher&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dispatcher 提供了一个 REST 接口来提交 Flink 应用执行，并为每个提交的作业启动一个新的 JobMaster。它还运行 Flink WebUI 来提供作业执行的信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JobMaster&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个 JobMaster 负责管理一个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#logical-graph&#34;&gt;JobGraph&lt;/a&gt; 的执行。在一个 Flink 集群中可以同时运行多个作业，每个作业都有自己的 JobMaster。&lt;/p&gt;
&lt;p&gt;总是至少有一个 JobManager。一个高可用性设置可能有多个 JobManagers，其中一个总是领导者，其他的是备用的（见&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/jobmanager_high_availability.html&#34;&gt;高可用性（HA）&lt;/a&gt;）。&lt;/p&gt;
&lt;h3 id=&#34;taskmanagers&#34;&gt;TaskManagers&lt;/h3&gt;
&lt;p&gt;任务管理器（TaskManagers）（也叫 worker）执行数据流的任务，并缓冲和交换数据流。&lt;/p&gt;
&lt;p&gt;必须始终有至少一个TaskManager。TaskManager中资源调度的最小单位是一个任务槽。一个任务管理器中任务槽的数量表示并发处理任务的数量。请注意，一个任务槽中可以执行多个操作者（参见&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/flink-architecture.html#tasks-and-operator-chains&#34;&gt;Tasks 和 Operator 链&lt;/a&gt;）。&lt;/p&gt;
&lt;h3 id=&#34;tasks-和-operator-chains&#34;&gt;Tasks 和 Operator Chains&lt;/h3&gt;
&lt;p&gt;对于分布式执行，Flink 将操作者的子任务链成任务。每个任务由一个线程执行。将运算符一起链入任务是一种有用的优化：它减少了线程到线程的交接和缓冲的开销，增加了整体的吞吐量，同时降低了延迟。链锁行为可以配置，详情请看&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/#task-chaining-and-resource-groups&#34;&gt;chaining 文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下图中的示例数据流是以五个子任务，也就是五个并行线程来执行的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/tasks_chains.svg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;任务槽和资源task-slots-和-resources&#34;&gt;任务槽和资源(Task Slots 和 Resources)&lt;/h2&gt;
&lt;p&gt;每个 worker（TaskManager）都是一个 JVM 进程，可以在单独的线程中执行一个或多个子任务。为了控制一个任务管理器接受多少任务，它有所谓的任务槽（至少一个）。&lt;/p&gt;
&lt;p&gt;每个任务槽代表任务管理器的一个固定的资源子集。例如，一个有三个槽的任务管理器，将把其管理内存的1/3奉献给每个槽。槽位资源意味着一个子任务不会与其他任务的子任务争夺管理内存，而是拥有一定量的预留管理内存。需要注意的是，这里并没有发生 CPU 隔离，目前插槽只是将任务的管理内存分开。&lt;/p&gt;
&lt;p&gt;通过调整任务槽的数量，用户可以定义子任务之间的隔离方式。每个任务管理器有一个插槽意味着每个任务组都在一个单独的 JVM 中运行（例如可以在一个单独的容器中启动）。拥有多个插槽意味着更多的子任务共享同一个 JVM。同一 JVM 中的任务共享 TCP 连接（通过多路复用）和心跳消息。它们还可以共享数据集和数据结构，从而减少每个任务的开销。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/tasks_slots.svg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，Flink 允许子任务共享槽，即使它们是不同任务的子任务，只要它们来自同一个作业。其结果是，一个槽可以容纳整个作业的流水线。允许这种槽位共享有两个主要好处。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个 Flink 集群需要的任务槽数量正好与作业中使用的最高并行度相同。不需要计算一个程序总共包含多少个任务（具有不同的并行度）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更容易获得更好的资源利用率。如果没有槽位共享，非密集型的 &lt;code&gt;source/map()&lt;/code&gt; 子任务和资源密集型的 window 子任务一样，会阻塞很多资源。有了槽位共享，在我们的例子中，将基础并行度从2个增加到6个，就会产生槽位资源的充分利用，同时确保重度子任务在 TaskManager 中公平分配。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/slot_sharing.svg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;flink-应用执行&#34;&gt;Flink 应用执行&lt;/h2&gt;
&lt;p&gt;Flink 应用程序是任何从其 &lt;code&gt;main()&lt;/code&gt; 方法中生成一个或多个 Flink 作业的用户程序。这些作业的执行可以发生在本地 JVM（LocalEnvironment）中，也可以发生在多台机器的远程集群设置（RemoteEnvironment）中。对于每个程序，ExecutionEnvironment 提供了控制作业执行的方法（例如设置并行性）和与外界交互的方法（参见 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/datastream_api.html#anatomy-of-a-flink-program&#34;&gt;Anatomy of a Flink Program&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;Flink 应用的作业可以提交到一个长期运行的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-session-cluster&#34;&gt;Flink 会话集群&lt;/a&gt;、一个专门的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-job-cluster&#34;&gt;Flink 作业集群&lt;/a&gt;或一个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-application-cluster&#34;&gt;Flink 应用集群&lt;/a&gt;。这些选项之间的区别主要与集群的生命周期和资源隔离保证有关。&lt;/p&gt;
&lt;h3 id=&#34;flink-会话集群&#34;&gt;Flink 会话集群&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集群生命周期：在 Flink 会话集群中，客户端连接到一个预先存在的、长期运行的集群，可以接受多个作业提交。即使在所有作业完成后，集群（和 JobManager）将继续运行，直到会话被手动停止。因此，一个 Flink 会话集群的寿命不受任何 Flink 作业寿命的约束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源隔离。TaskManager 插槽由 ResourceManager 在作业提交时分配，作业完成后释放。因为所有作业都共享同一个集群，所以对集群资源有一定的竞争&amp;ndash;比如提交作业阶段的网络带宽。这种共享设置的一个限制是，如果一个任务管理器崩溃，那么所有在这个任务管理器上有任务运行的作业都会失败；同样，如果在作业管理器上发生一些致命的错误，也会影响集群中运行的所有作业。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他考虑因素：拥有一个预先存在的集群，可以节省大量申请资源和启动 TaskManagers 的时间。这在作业的执行时间非常短，高启动时间会对端到端的用户体验产生负面影响的场景中非常重要&amp;ndash;就像对短查询的交互式分析一样，希望作业能够利用现有资源快速执行计算。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：以前，Flink 会话集群也被称为会话模式下的 Flink 集群。&lt;/p&gt;
&lt;h3 id=&#34;flink-作业集群&#34;&gt;Flink 作业集群&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集群生命周期：在 Flink Job Cluster 中，可用的集群管理器（如 YARN 或 Kubernetes）为每个提交的作业旋转一个集群，这个集群只对该作业可用。在这里，客户端首先向集群管理器请求资源来启动 JobManager，并将作业提交给运行在这个进程内部的 Dispatcher。然后根据作业的资源需求，懒惰地分配 TaskManager。作业完成后，Flink Job Cluster 就会被拆掉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源隔离：JobManager 的致命错误只影响该 Flink Job Cluster 中运行的一个作业。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他考虑因素：由于 ResourceManager 需要申请并等待外部资源管理组件来启动 TaskManager 进程并分配资源，因此 Flink Job Cluster 更适合运行时间长、稳定性要求高、对启动时间较长不敏感的大型作业。&lt;/p&gt;
&lt;p&gt;注：以前，Flink Job Cluster 也被称为作业（或每作业）模式下的 Flink Cluster。&lt;/p&gt;
&lt;h3 id=&#34;flink-应用集群flink-application-cluster&#34;&gt;Flink 应用集群(Flink Application Cluster)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集群生命周期：Flink 应用集群是一个专用的 Flink 集群，它只执行来自一个 Flink 应用的作业，并且 &lt;code&gt;main()&lt;/code&gt; 方法运行在集群上而不是客户端上。作业提交是一个一步到位的过程：你不需要先启动一个 Flink 集群，然后向现有的集群会话提交作业，而是将你的应用逻辑和依赖关系打包成一个可执行的作业 JAR，集群入口点(ApplicationClusterEntryPoint)负责调用 &lt;code&gt;main()&lt;/code&gt; 方法来提取作业图。这样你就可以像在 Kubernetes 上部署其他应用一样部署 Flink 应用，例如。因此，Flink Application Cluster 的寿命与 Flink Application 的寿命是绑定的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源隔离：在 Flink Application Cluster 中，ResourceManager 和 Dispatcher 的范围是单一的 Flink Application，这比 Flink Session Cluster 提供了更好的分离关注点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：Flink Job Cluster 可以看作是 Flink Application Cluster 的 &amp;ldquo;run-on-client&amp;rdquo; 替代品。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="http://localhost:1313/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="http://localhost:1313/tags/flink">Flink</category>
                                 
                                    <category domain="http://localhost:1313/tags/architecture">architecture</category>
                                
                            
                        
                    
                
                <guid>http://localhost:1313/notes/2020-08-20-flink-architecture/</guid>
                <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
            </item>
        
            
            <item>
                <title>术语表</title>
                <link>http://localhost:1313/notes/2020-08-20-glossary/</link>
                
                
                <description>&lt;blockquote&gt;Glossary&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;Flink Application Cluster&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Flink 应用集群是一个专用的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-cluster&#34;&gt;Flink 集群&lt;/a&gt;，它只执行一个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-application&#34;&gt;Flink 应用&lt;/a&gt;的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-job&#34;&gt;Flink 作业&lt;/a&gt;。&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-cluster&#34;&gt;Flink 集群&lt;/a&gt;的寿命与 Flink 应用的寿命绑定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flink Job Cluster&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Flink Job Cluster 是一个专用的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-cluster&#34;&gt;Flink Cluster&lt;/a&gt;，它只执行一个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-job&#34;&gt;Flink Job&lt;/a&gt;。&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-cluster&#34;&gt;Flink Cluster&lt;/a&gt; 的寿命与 Flink Job 的寿命绑定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flink Cluster&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个分布式系统由（通常）一个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-jobmanager&#34;&gt;JobManager&lt;/a&gt; 和一个或多个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-taskmanager&#34;&gt;Flink TaskManager&lt;/a&gt; 进程组成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Event&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事件是关于应用程序所模拟的域的状态变化的声明。事件可以是流或批处理应用程序的输入和/或输出。事件是特殊类型的&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#Record&#34;&gt;记录&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ExecutionGraph&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参见物理图(&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#physical-graph&#34;&gt;Physical Graph&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;函数由用户实现，封装了 Flink 程序的应用逻辑。大多数 Functions 都由相应的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#operator&#34;&gt;Operator&lt;/a&gt; 封装。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;术语 instance 用于描述运行时特定类型（通常是 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#operator&#34;&gt;Operator&lt;/a&gt; 或 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#function&#34;&gt;Function&lt;/a&gt;）的具体实例。由于 Apache Flink 大部分是用 Java 编写的，所以对应于 Java 中的 Instance 或 Object 的定义。在 Apache Flink 的上下文中，并行实例这个术语也经常被用来强调同一个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#operator&#34;&gt;Operator&lt;/a&gt; 或 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#function&#34;&gt;Function&lt;/a&gt; 类型的多个实例在并行运行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flink Application&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Flink 应用程序是一个 Java 应用程序，它从 &lt;code&gt;main()&lt;/code&gt; 方法(或通过其他方式)提交一个或多个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-job&#34;&gt;Flink 作业&lt;/a&gt;。提交作业通常是通过调用执行环境上的 &lt;code&gt;execute()&lt;/code&gt; 来完成的。&lt;/p&gt;
&lt;p&gt;应用程序的作业可以提交到一个长期运行的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-session-cluster&#34;&gt;Flink 会话集群&lt;/a&gt;，也可以提交到一个专门的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-application-cluster&#34;&gt;Flink 应用集群&lt;/a&gt;，或者提交到一个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-job-cluster&#34;&gt;Flink 作业集群&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flink Job&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Flink Job 是指在 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-application&#34;&gt;Flink 应用&lt;/a&gt;中通过调用 &lt;code&gt;execute()&lt;/code&gt; 来创建和提交的&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#logical-graph&#34;&gt;逻辑图&lt;/a&gt;（也常称为数据流图）的运行时表示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JobGraph&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参见逻辑图(&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#logical-graph&#34;&gt;Logical Graph&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flink JobManager&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JobManager 是 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-cluster&#34;&gt;Flink 集群&lt;/a&gt;的协调器。它包含了三个不同的组件：Flink 资源管理器、Flink 调度器和每个运行的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-job&#34;&gt;Flink 作业&lt;/a&gt; 一个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-jobmaster&#34;&gt;Flink JobMaster&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flink JobMaster&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JobMasters 是运行在 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-jobmanager&#34;&gt;JobManager&lt;/a&gt; 中的组件之一。一个 JobMaster 负责监督单个作业的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#task&#34;&gt;Tasks&lt;/a&gt; 的执行情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logical Graph&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;逻辑图是一个有向图，其中节点是 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#operator&#34;&gt;Operators&lt;/a&gt;，边缘定义了 operator 的输入/输出关系，并对应数据流或数据集。逻辑图是通过从 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-application&#34;&gt;Flink 应用程序&lt;/a&gt;提交作业来创建的。&lt;/p&gt;
&lt;p&gt;逻辑图也常被称为数据流图。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Managed State&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Managed State 描述的是已经在框架中注册的应用状态。对于托管状态，Apache Flink 将负责处理持久性和重新缩放等问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operator&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#logical-graph&#34;&gt;逻辑图&lt;/a&gt;的节点。Operator 执行某种操作，通常由 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#function&#34;&gt;Function&lt;/a&gt; 执行。源和接收器是数据摄入和数据输出的特殊 Operator。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operator Chain&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个 Operator 链由两个或多个连续的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#operator&#34;&gt;Operator&lt;/a&gt; 组成，中间没有任何重新分区。同一 Operator 链内的 operattor 直接相互转发记录，而不需要经过序列化或 Flink 的网络栈。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Partition&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分区是整个数据流或数据集的一个独立子集。通过将每条&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#Record&#34;&gt;记录&lt;/a&gt;分配到一个或多个分区，将数据流或数据集划分为多个分区。数据流或数据集的分区在运行时由&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#task&#34;&gt;Tasks&lt;/a&gt;消耗。改变数据流或数据集分区方式的转换通常称为重新分区。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Physical Graph&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;物理图是翻译&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#logical-graph&#34;&gt;逻辑图&lt;/a&gt;的结果，以便在分布式运行时执行。节点是&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#task&#34;&gt;Tasks&lt;/a&gt;，边缘表示输入/输出关系或数据流或数据集的&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#partition&#34;&gt;分区&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Record&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记录是数据集或数据流的组成元素。&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#operator&#34;&gt;Operator&lt;/a&gt; 和 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#Function&#34;&gt;Functions&lt;/a&gt; 接收记录作为输入，并发出记录作为输出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flink Session Cluster&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个长期运行的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-cluster&#34;&gt;Flink Cluster&lt;/a&gt;，它接受多个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-job&#34;&gt;Flink Job&lt;/a&gt; 的执行。该  Flink Cluster 的寿命不受任何 Flink Job 寿命的约束。以前，Flink Session Cluster 也被称为会话模式下的 Flink Cluster。与 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-application-cluster&#34;&gt;Flink Application Cluster&lt;/a&gt; 比较。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;State Backend&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于流处理程序来说，&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-job&#34;&gt;Flink Job&lt;/a&gt; 的状态后端决定了它的&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#managed-state&#34;&gt;状态&lt;/a&gt;如何存储在每个 TaskManager 上（TaskManager 的 Java 堆或（嵌入式）RocksDB），以及它在检查点时的写入位置（&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-jobmanager&#34;&gt;JobManager&lt;/a&gt; 的 Java 堆或 Filesystem）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sub-Task&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;子任务( Sub-Task)是指负责处理数据流的一个&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#partition&#34;&gt;分区&lt;/a&gt;的任务(&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#task&#34;&gt;Task&lt;/a&gt;)。术语&amp;quot;子任务&amp;quot;强调同一 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#operator&#34;&gt;Operator&lt;/a&gt; 或 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#operator-chain&#34;&gt;Operator 链&lt;/a&gt;有多个并行的 Task。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Task&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#physical-graph&#34;&gt;物理图&lt;/a&gt;的节点。Task 是工作的基本单位，由 Flink 的运行时执行。任务正好封装了一个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#operator&#34;&gt;Operator&lt;/a&gt; 或 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#operator-chain&#34;&gt;Operator 链&lt;/a&gt; 的一个并行实例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flink TaskManager&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TaskManager 是 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-cluster&#34;&gt;Flink Cluster&lt;/a&gt; 的工作进程。&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#task&#34;&gt;Tasks&lt;/a&gt; 被安排给 TaskManagers 执行。它们相互通信，在后续的 Task 之间交换数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transformation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;变换应用于一个或多个数据流或数据集，并产生一个或多个输出数据流或数据集。变换可能会在每条记录的基础上改变数据流或数据集，但也可能只改变其分区或执行聚合。&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#operator&#34;&gt;Operator&lt;/a&gt; 或 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#function&#34;&gt;Functions&lt;/a&gt;是 Flink 的 API 的 &amp;ldquo;物理&amp;quot;部分，而变换只是一个 API 概念。具体来说，大多数变换是由某些 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#operator&#34;&gt;Operator&lt;/a&gt; 实现的。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="http://localhost:1313/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="http://localhost:1313/tags/flink">Flink</category>
                                 
                                    <category domain="http://localhost:1313/tags/architecture">architecture</category>
                                
                            
                        
                    
                
                <guid>http://localhost:1313/notes/2020-08-20-glossary/</guid>
                <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
            </item>
        
    </channel>
</rss>


