{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003cp\u003e我不太喜欢上一篇文章中使用匹配的语法。它的参数列表中的逗号看起来很奇怪，不合适。也许是因为我的眼睛习惯了给定的块。睡一觉就好了。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003esub accord(\u0026amp;c) { (c(CALLER::\u0026lt;$_\u0026gt;); succeed) if \u0026amp;c.cando(\\(CALLER::\u0026lt;$_\u0026gt;)) }\n\ngiven Err.new(:msg\u0026lt;a\u0026gt;) {\n    accord -\u0026gt; Hold (:$key) { put „holding $key“; }\n    accord -\u0026gt; Err (:$msg) { warn „ERR: $msg“ }\n    default { fail ‚unsupported‘ }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这是因为 \u003ccode\u003eaccord\u003c/code\u003e 模仿了 \u003ccode\u003ewhen\u003c/code\u003e 的工作。它做了一些匹配，当 True 时调用一个块，并在每个块的结尾添加一个 success（通过抛出一个控制异常）。given 所做的只是设置主题。它还充当了 caller 的角色，所以我们可以通过一个伪包来访问它的 \u003ccode\u003e$_\u003c/code\u003e。利用 pointy 的签名来做\u003ca href=\"https://docs.raku.org/type/Signature#Destructuring_arguments\"\u003e解构\u003c/a\u003e是相当强大的。把这个添加到 CORE 中可能是个好主意。\u003c/p\u003e\n\u003cp\u003e我们可能要把 Raku 的定义改成: \u0026ldquo;Raku 是一种高度可组合的编程语言\u0026rdquo;, 在这里，所有的东西都会落到实处。\u0026quot;\u003c/p\u003e\n\u003cp\u003e更新一下。\u003c/p\u003e\n\u003cp\u003e有些情况下，\u003ccode\u003e$_\u003c/code\u003e 不是动态的。另外，success 正在抛出一个控制异常，而这些的处理程序是由 when 或默认添加的。这种情况是在编译时发生的，目前不能用宏来解决。第一个问题可以用黑魔法解决。后一个问题需要用默认块。我没有找到一种方法来提供一个合理的错误信息，如果缺少这个块。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003emulti sub accord(\u0026amp;c) {\n    use nqp;\n    $_ := nqp::getlexcaller('$_');\n    (c($_); succeed) if \u0026amp;c.cando(\\($_))\n}\n\nfor @possibilities.roll(1) -\u0026gt; $needle {\n    given $needle {\n        accord -\u0026gt; Hold (:$key) { put „holding $key“; }\n        accord -\u0026gt; Err (:$msg) { warn „ERR: $msg“ }\n        default { warn ‚unsopported‘ }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e原文链接: \u003ca href=\"https://gfldex.wordpress.com/2021/02/25/custom-when/\"\u003ehttps://gfldex.wordpress.com/2021/02/25/custom-when/\u003c/a\u003e\u003c/p\u003e\n","text":"我不太喜欢上一篇文章中使用匹配的语法。它的参数列表中的逗号看起来很奇怪，不合适。也许是因为我的眼睛习惯了给定的块。睡一觉就好了。\nsub accord(\u0026amp;c) { (c(CALLER::\u0026lt;$_\u0026gt;); succeed) if \u0026amp;c.cando(\\(CALLER::\u0026lt;$_\u0026gt;)) } given Err.new(:msg\u0026lt;a\u0026gt;) { accord -\u0026gt; Hold (:$key) { put „holding $key“; } accord -\u0026gt; Err (:$msg) { warn „ERR: $msg“ } default { fail ‚unsupported‘ } } 这是因为 accord 模仿了 when 的工作。它做了一些匹配，当 True 时调用一个块，并在每个块的结尾添加一个 success（通过抛出一个控制异常）。given 所做的只是设置主题。它还充当了 caller 的角色，所以我们可以通过一个伪包来访问它的 $_。利用 pointy 的签名来做解构是相当强大的。把这个添加到 CORE 中可能是个好主意。\n我们可能要把 Raku 的定义改成: \u0026ldquo;Raku 是一种高度可组合的编程语言\u0026rdquo;, 在这里，所有的东西都会落到实处。\u0026quot;\n更新一下。\n有些情况下，$_ 不是动态的。另外，success 正在抛出一个控制异常，而这些的处理程序是由 when 或默认添加的。这种情况是在编译时发生的，目前不能用宏来解决。第一个问题可以用黑魔法解决。后一个问题需要用默认块。我没有找到一种方法来提供一个合理的错误信息，如果缺少这个块。\nmulti sub accord(\u0026amp;c) { use nqp; $_ := nqp::getlexcaller('$_'); (c($_); succeed) if \u0026amp;c.cando(\\($_)) } for @possibilities.roll(1) -\u0026gt; $needle { given $needle { accord -\u0026gt; Hold (:$key) { put „holding $key“; } accord -\u0026gt; Err (:$msg) { warn „ERR: $msg“ } default { warn ‚unsopported‘ } } } 原文链接: https://gfldex.wordpress.com/2021/02/25/custom-when/\n"},"name":"自定义 when","published":"2021-02-28T00:00:00+08:00","summary":"Custom When","type":"entry","url":"https://ohmyweekly.github.io/notes/2021-02-28-custom-when/"},{"content":{"html":"\u003cp\u003e在过去的几周里，我看到了一些\u003ca href=\"https://mydeveloperplanet.com/2021/01/20/how-to-start-contributing-to-open-source/\"\u003e文章\u003c/a\u003e和\u003ca href=\"https://youtu.be/GAqfMNB-YBU\"\u003e视频\u003c/a\u003e，讲述了在开源软件中构思是多么的伟大。这次我又想起了另一篇旧文\u003ca href=\"http://strangelyconsistent.org/blog/perl-6-is-my-mmorpg\"\u003eRaku 是我的 MMORPG\u003c/a\u003e。它说，你可以从以下几个方面受益于开源软件。比如说，可以做一个大侠，基于一些开源软件来写软件。作为写手，可以写博客、微博等，对所选软件产生兴趣。或者你可以成为一个法师 - 实现新的功能和修复 bug。今天小编就带着弓箭手来告诉大家如何成为 \u003ca href=\"https://raku.org/\"\u003eRaku\u003c/a\u003e 编程语言的法师。\u003c/p\u003e\n\u003ch2 id=\"选择一个任务\"\u003e选择一个任务\u003c/h2\u003e\n\u003cp\u003e让我们挑选一些编译器的 bug，并修复它。让我们去 \u003ca href=\"https://rakudo.org/\"\u003eRakudo\u003c/a\u003e 编译器 \u003ca href=\"https://github.com/rakudo/rakudo/issues\"\u003eissues\u003c/a\u003e中选择我们想要修复的 bug。我滚动了一下 bug 列表，遇到了解析 - 运气不错，我前段时间一直在研究\u003ca href=\"https://www.apress.com/gp/book/9781484232279\"\u003e编译器语法\u003c/a\u003e，看了一本这方面的好书。找到了四个问题。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://rakurs.atroxaper.net/assets/img/posts/2021-02-13-contributing-raku-1.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e标签为 LTA （Less Than Awesome - 当真实行为与直觉预期不同时）- 我们暂时把它划掉。\u003c/li\u003e\n\u003cli\u003e标签 \u0026ldquo;需要共识\u0026rdquo; - 我们只想修复一个不复杂的 bug - 肯定要划掉。\u003c/li\u003e\n\u003cli\u003e标签为 \u0026ldquo;grammar and actions\u0026rdquo; 的关于一个可能死的代码是一个很好的候选人的第一个任务。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e任务确定后，现在我们需要配置工作环境。在 Windows、Linux 和 macOS 中，一切应该都差不多。我将通过 macOS 的例子来告诉你。\u003c/p\u003e\n\u003ch2 id=\"建立工作环境\"\u003e建立工作环境\u003c/h2\u003e\n\u003cp\u003e为源码和我们建立的编译器建立文件夹。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003emkdir ~/dev-rakudo \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e mkdir ~/dev-rakudo-install\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRakudo 编译器由三部分组成。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e虚拟机。现在有三种 - JVM、JS 和 MoarVM。我们以 MoarVM 为最稳定的一个。\u003c/li\u003e\n\u003cli\u003eNQP（Not Quite Perl），是一种低级（中级）语言的实现，它是 Raku 的一个 \u0026ldquo;子集\u0026rdquo;。虚拟机可以执行用 NQP 编写的代码。\u003c/li\u003e\n\u003cli\u003eRakudo 编译器本身，用 NQP 和 Raku 编写。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e下载并编译这三个组件。我分别花了一分半钟、半分钟和两分半钟才编好。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/dev-rakudo \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git clone git@github.com:MoarVM/MoarVM.git \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e MoarVM\nperl Configure.pl --prefix ~/dev-rakudo-install \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make -j \u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make install\n\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/dev-rakudo \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git clone git@github.com:Raku/nqp.git \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e nqp\nperl Configure.pl --backend\u003cspan class=\"o\"\u003e=\u003c/span\u003emoar --prefix ~/dev-rakudo-install \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make -j \u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make install\n\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/dev-rakudo \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git clone git@github.com:rakudo/rakudo.git \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e rakudo\nperl Configure.pl --backend\u003cspan class=\"o\"\u003e=\u003c/span\u003emoar --prefix ~/dev-rakudo-install \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make -j \u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make install\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意参数。\u003ccode\u003e--prefix\u003c/code\u003e 显示了 \u003ccode\u003emake install\u003c/code\u003e 命令后可执行文件的复制位置，\u003ccode\u003e--backend=moar\u003c/code\u003e 表示正在使用的虚拟机，而 \u003ccode\u003e-j 4\u003c/code\u003e 则要求跨多线程并行化（以防加快进度）。现在我们已经建立了 Rakudo 编译器 \u003ccode\u003e~/dev-rakudo-install/bin/raku\u003c/code\u003e。我们还需要官方的编译器测试套件。你应该把它和它的代码一起放在文件夹里。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/dev-rakudo/rakudo \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git clone https://github.com/Raku/roast.git t/spec\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们先进行测试。这种情况很常见，有些测试甚至在新的变化之前就失败了。我们需要辨别出来，这样以后就不会害怕这些变化破坏了一些不必要的东西。\u003c/p\u003e\n\u003cp\u003e这里和下面我将在 \u003ccode\u003e~/dev-rakudo/rakudo\u003c/code\u003e 文件夹中工作，除非另有说明。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; make spectest\n[...]\nTest Summary Report\n-------------------\nt/spec/S32-str/utf8-c8.t    (Wstat: 65280 Tests: 54 Failed: 0)\n  Non-zero exit status: 255\n  Parse errors: Bad plan.  You planned 66 tests but ran 54.\nFiles=1346, Tests=117144, 829 wallclock secs (27.70 usr  6.04 sys + 2638.79 cusr 210.98 csys = 2883.51 CPU)\nResult: FAIL\nmake: *** [m-spectest5] Error 1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e14分钟内共运行了1,346个文件中的117,144次测试。一些与utf8相关的测试由于某种原因失败了，其他的都能正常工作。我们已经准备好去工作了!\u003c/p\u003e\n\u003ch2 id=\"让我们来看看问题的陈述\"\u003e让我们来看看问题的陈述\u003c/h2\u003e\n\u003cp\u003e问题陈述说，某个元运算符 \u003ccode\u003eR\u003c/code\u003e 在 colonpair 上出了问题。我打开文档，搜索 R 这个词，但下拉列表中没有这个名字的元运算符。我试着输入 metaop，看到的是反向元操作符(R)。原来，如果你想把二元运算的操作数按相反的顺序写出来，你可以在其符号前使用前缀 R。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003esay 3 R- 2 == -1 # Output: True\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eColonpair 是命名对的语法。它看起来就像名字前面有一个冒号，前面有一个括号，有一个值。例如 \u003ccode\u003e:foo(42)\u003c/code\u003e 是一个名称为 \u003ccode\u003efoo\u003c/code\u003e、值为 \u003ccode\u003e42\u003c/code\u003e 的对儿。这个语法通常用于在调用函数时，向函数传递一个命名参数中的值。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003esub sub-with-named-parameter(:$foo) {\n    say $foo;\n}\n\nsub-with-named-parameter(:foo(42)); # Output: 42\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果一个函数参数不是命名的，而是位置的，那么在用命名对调用时，就会出现编译错误。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003esub sub-without-named-parameter($foo) { # \u0026lt;- 没有冒号\n  say $foo;\n}\n\nsub-without-named-parameter(:foo(42)); # Unexpected named argument 'foo' passed\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果你在调用这样的函数时用括号包围一个参数，整个参数对将被传递到位置参数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003esub sub-without-named-parameter($foo) {\n  say $foo;\n}\n\nsub-without-named-parameter((:foo(42))); # Output: foo =\u0026gt; 42\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在 Raku 中，你可以写一个函数来捕获所有传递给它的参数并分析它们。这是在单个参数 - 捕获前用竖线完成的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003esub sub-with-capture(|foo) { # \u0026lt;- 参数捕获\n  say foo;\n}\n\nsub-with-capture(:foo(42));     # Output: \\(:foo(42))\nsub-with-capture(42);           # Output: \\(42)\nsub-with-capture(:foo(3 Z- 2)); # Output: \\(:foo((1,).Seq))\nsub-with-capture(:foo(3 R- 2)); # Output: \\(-1)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e倒数第二行使用了 Z 元操作符 - zip 操作符。它将左右两部分作为一个列表，按顺序每次从它们中抽取一个元素，并进行操作，从而形成一个序列。\u003c/p\u003e\n\u003cp\u003e在最后一行，只用了我们需要的 R 元操作符。在这种情况下，它不是一个对，而是一个常量，它被传递到函数中。我们可以假设这是元运算符工作方式的一些特殊性，但用 Z 的例子表明并非如此。其实这是一个 bug - 当一个对被传递到一个使用 R 元运算符的函数中时，它的值会被转换。\u003c/p\u003e\n\u003ch2 id=\"我们需要一个新的测试\"\u003e我们需要一个新的测试\u003c/h2\u003e\n\u003cp\u003e为了确保未来的变化能够修复错误的行为，我们需要写一个新的测试。在测试文件中不难找到 R 元操作符的测试（\u003ca href=\"https://github.com/Raku/roast/blob/fea1d16d993eb851d2935155e0b0d074fa3593bf/S03-metaops/reverse.t\"\u003eS03-metops/reverse.t\u003c/a\u003e）。下面我将补充以下测试。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e# https://github.com/rakudo/rakudo/issues/1632\n{\n  sub subroutine($expected, |actual) {\n    is actual.gist, $expected, \u0026quot;Сolonpair exists\u0026quot;\n  }\n\n  subroutine('\\(:foo(-1))', :foo(3 R- 2));\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e该测试有一个功能，有两个参数 - 正常和捕获。在函数体中，第一个参数和传递的 Capture 的字符串表示进行比较。你可以使用 \u003ccode\u003emake\u003c/code\u003e 对新构建的编译器进行单独测试。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; make t/spec/S03-metaops/reverse.t\n[...]\nok 69 - [R~]=\nnot ok 70 - Colonpair exists\n# Failed test 'Colonpair exists'\n# at t/spec/S03-metaops/reverse.t line 191\n# expected: '\\(:foo(-1))'\n#      got: '\\(-1)'\n# You planned 69 tests, but ran 70\n# You failed 1 test of 70\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e你可以看到，测试失败了（如预期）。还有一个单独的说明，系统预计69次测试，但收到70次。这是基于 TAP 的测试系统的特点 - 必须在文件的顶部修正传递给 \u003ccode\u003eplan\u003c/code\u003e 函数的数字。现在测试崩溃了，但编号没有受到影响。你可以开始修复它。\u003c/p\u003e\n\u003ch2 id=\"凝视法\"\u003e凝视法\u003c/h2\u003e\n\u003cp\u003e一开始我很相信任务上的标签 - 如果是解析的话，一定是源码解析阶段的某个地方出现了问题。目前我的认识如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e基础解析器代码在文件 \u003ccode\u003erakudo/src/Perl6/Grammar.nqp\u003c/code\u003e 中。\u003c/li\u003e\n\u003cli\u003e这个解析器是从 \u003ccode\u003enqp/src/HLL/Grammar.nqp\u003c/code\u003e 文件中的基础解析器继承的。\u003c/li\u003e\n\u003cli\u003e元操作符的解析和工作方式都差不多，你可以通过仔细观察来发现不同之处。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我在基础解析器代码中找到了对元操作符的引用。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003etoken infix_prefix_meta_operator:sym\u0026lt;R\u0026gt; {\n  \u0026lt;sym\u0026gt; \u0026lt;infixish('R')\u0026gt; {}\n  \u0026lt;.can_meta($\u0026lt;infixish\u0026gt;, \u0026quot;reverse the args of\u0026quot;)\u0026gt;\n  \u0026lt;O=.revO($\u0026lt;infixish\u0026gt;)\u0026gt;\n}\n\ntoken infix_prefix_meta_operator:sym\u0026lt;Z\u0026gt; {\n  \u0026lt;sym\u0026gt; \u0026lt;infixish('Z')\u0026gt; {}\n  \u0026lt;.can_meta($\u0026lt;infixish\u0026gt;, \u0026quot;zip with\u0026quot;)\u0026gt;\n  \u0026lt;O(|%list_infix)\u0026gt;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这需要对 Raku grammar 有一定的了解。据我所知，原来这两个元运算符在解析上并没有根本的区别。一段时间后，在解析器的源代码中挖得够多了，我开始怀疑解析工作是否正确。认为代码 \u003ccode\u003emy $r = :foo(3 R- 2); say $r; # Output: foo =\u0026gt; -1\u003c/code\u003e 正确工作的建议 - 问题恰恰发生在调用函数时。显然，我白白相信了任务栏上的标签。\u003c/p\u003e\n\u003ch2 id=\"编译器将帮助我们\"\u003e编译器将帮助我们\u003c/h2\u003e\n\u003cp\u003e颇为迟钝的我想起了我从一开始就应该做的事情。Rakudo 编译器有 \u003ccode\u003e--target\u003c/code\u003e 调试开关。它取编译器阶段的名称，你想将其结果输出到控制台并退出。我想看看 \u003ccode\u003e--target=parse\u003c/code\u003e（因为我只知道这一个）。\u003c/p\u003e\n\u003cp\u003e我从 \u003ccode\u003e~/dev-rakudo/rakudo\u003c/code\u003e 文件夹中使用 \u003ccode\u003erakumo-m\u003c/code\u003e，这样我就不必等待通过 \u003ccode\u003emake install\u003c/code\u003e 命令将所需文件复制到 \u003ccode\u003e~/dev-rakudo-install\u003c/code\u003e。简单的脚本可以这样运行。更复杂的脚本必须在 \u003ccode\u003emake install\u003c/code\u003e 之后从 \u003ccode\u003e-install\u003c/code\u003e 中运行。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cat ~/test.raku\nsub s(|c) { say c }\ns(:foo(3 R- 2));\ns(:foo(3 Z- 2));\n\n\u0026gt; ./rakudo-m --target=parse ~/test.raku\n[...]\n- args: (:foo(3 R- 2))\n  - semiarglist: :foo(3 R- 2)\n    - arglist: 1 matches\n      - EXPR: :foo(3 R- 2)\n        - colonpair: :foo(3 R- 2)\n          - identifier: foo\n          - coloncircumfix: (3 R- 2)\n            - circumfix: (3 R- 2)\n              - semilist: 3 R- 2\n                - statement: 1 matches\n                  - EXPR: R- 2\n[...]\n- args: (:foo(3 Z- 2))\n  - semiarglist: :foo(3 Z- 2)\n    - arglist: 1 matches\n      - EXPR: :foo(3 Z- 2)\n        - colonpair: :foo(3 Z- 2)\n          - identifier: foo\n          - coloncircumfix: (3 Z- 2)\n            - circumfix: (3 Z- 2)\n              - semilist: 3 Z- 2\n                - statement: 1 matches\n                  - EXPR: Z- 2\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e结论：R 和 Z 的解析是一样的。\u003c/p\u003e\n\u003ch2 id=\"这不是解析\"\u003e这不是解析\u003c/h2\u003e\n\u003cp\u003e所有被解析的东西都会被传递给所谓的 Action，把字词变成一棵语法树。在我们的例子中，Actions 位于文件 \u003ccode\u003erakudo/src/Perl6/Actions.nqp\u003c/code\u003e 和 \u003ccode\u003enqp/src/HLL/Actions.nqp\u003c/code\u003e 中。这里就比较容易搞清楚了，毕竟是代码，是 grammar。\u003c/p\u003e\n\u003cp\u003e我在主 Actions 中找到了以下代码。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\nelsif $\u0026lt;infix_prefix_meta_operator\u0026gt; {\n[...]\n  if    $metasym eq 'R' { $helper := '\u0026amp;METAOP_REVERSE'; $t := nqp::flip($t) if $t; }\n  elsif $metasym eq 'X' { $helper := '\u0026amp;METAOP_CROSS'; $t := nqp::uc($t); }\n  elsif $metasym eq 'Z' { $helper := '\u0026amp;METAOP_ZIP'; $t := nqp::uc($t); }\n  \n  my $metapast := QAST::Op.new( :op\u0026lt;call\u0026gt;, :name($helper), WANTED($basepast,'infixish') );\n  $metapast.push(QAST::Var.new(:name(baseop_reduce($base\u0026lt;OPER\u0026gt;\u0026lt;O\u0026gt;.made)), :scope\u0026lt;lexical\u0026gt;))\n    if $metasym eq 'X' || $metasym eq 'Z';\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e它说，如果在代码中解析了元操作符 \u003ccode\u003eR\u003c/code\u003e、\u003ccode\u003eZ\u003c/code\u003e 或 \u003ccode\u003eX\u003c/code\u003e，就应该在语法树中添加一些 \u003ccode\u003eMETAOP_\u003c/code\u003e 函数调用。在 \u003ccode\u003eZ\u003c/code\u003e 和 \u003ccode\u003eX\u003c/code\u003e 的情况下，它会多一个参数，即某种还原函数。所有这些功能都可以在 \u003ccode\u003erakudo/src/core.c/metaops.pm6\u003c/code\u003e 中找到。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003esub METAOP_REVERSE(\\op) is implementation-detail {\n  -\u0026gt; |args { op.(|args.reverse) }\n}\n\nsub METAOP_ZIP(\\op, \u0026amp;reduce) is implementation-detail {\n nqp::if(op.prec('thunky').starts-with('.'),\n  -\u0026gt; +lol {\n    my $arity = lol.elems;\n    [...]\n  },\n  -\u0026gt; +lol {\n    Seq.new(Rakudo::Iterator.ZipIterablesOp(lol,op))\n  }\n  )\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e给你：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e\\op\u003c/code\u003e 是由我们的元操作符，即-，在前面的操作。\u003c/li\u003e\n\u003cli\u003eTrait \u003ccode\u003eimplementation-detail\u003c/code\u003e 只是表明这不是公共代码，是编译器实现的一部分。\u003c/li\u003e\n\u003cli\u003e由于-操作没有笨重的特性，所以 \u003ccode\u003e\u0026amp;reduce\u003c/code\u003e 函数不会参与计算，\u003ccode\u003eZ\u003c/code\u003e 的结果是 \u003ccode\u003eSeq.new(...)\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eR\u003c/code\u003e 的结果是一个操作调用 - 参数顺序相反。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这时我想起还有一个 - 目标，即星。它将显示行动的结果。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; ./rakudo-m --target=ast ~/test.raku\n[...]\n- QAST::Op(call \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2))\n  - QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;5\u0026gt; :before_promotion\u0026lt;?\u0026gt; R-\n    - QAST::Op(call \u0026amp;METAOP_REVERSE) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt;\n      - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt;\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(3)  3\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(2)  2\n[...]\n- QAST::Op(call \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;7\u0026gt; s(:foo(3 Z- 2))\n  - QAST::Op+{QAST::SpecialArg}(:named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;8\u0026gt; :before_promotion\u0026lt;?\u0026gt; Z-\n    - QAST::Op(call \u0026amp;METAOP_ZIP) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt;\n      - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt;\n      - QAST::Var(lexical \u0026amp;METAOP_REDUCE_LEFT)\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(3)  3\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(2)  2\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e一如所料。除了调用不同的 \u003ccode\u003eMETAOP_\u003c/code\u003e 函数外，所有的东西几乎都是一样的。从它们的代码中我们可以知道，原则上这些函数的不同之处在于返回值的类型 - 分别是 \u003ccode\u003eInt\u003c/code\u003e 和 \u003ccode\u003eSeq\u003c/code\u003e。众所周知，Raku 对不同类型的对象的上下文相当敏感\u0026hellip;\u0026hellip;我想，它关注的可能是返回值。我试着用下面的方式修改代码。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003esub METAOP_REVERSE(\\op) is implementation-detail {\n  -\u0026gt; |args { Seq.new(op.(|args.reverse)) }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e编译、运行。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; make\n[...]\nStage start      :   0.000\nStage parse      :  61.026\nStage syntaxcheck:   0.000\nStage ast        :   0.000\nStage optimize   :   7.076\nStage mast       :  14.120\nStage mbc        :   3.941\n[...]\n\u0026gt; ./rakudo-m ~/test.raku\n\\(-1)\n\\(:foo((1,).Seq))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e一切都没有改变。所以，不是返回值\u0026hellip;\u0026hellip;想了想，不知道为什么结果又是 \u003ccode\u003e-1\u003c/code\u003e 而不是 \u003ccode\u003e(-1,).Seq\u003c/code\u003e。而且，从代码来看，\u003ccode\u003eSeq\u003c/code\u003e 根本就没有一个合适的构造函数。下一次，作为一些疯狂的事情，我尝试调用 \u003ccode\u003eMETAOP_REVERSE\u003c/code\u003e 结果只是为了崩溃。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003esub METAOP_REVERSE(\\op) is implementation-detail {\n  -\u0026gt; |args { die }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e编译、运行。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; make\n[...]\n\u0026gt; ./rakudo-m ~/test.raku\n\\(-1)\n\\(:foo((1,).Seq))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e怎么会呢？语法树中包含了对 \u003ccode\u003eMETAOP_REVERSE\u003c/code\u003e 的调用，它的代码应该是折叠的，但计算仍然进行，我们得到 \u003ccode\u003e-1\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这些都不是《行动》。\u003c/p\u003e\n\u003cp\u003e这里我的目光落在编译器的构建日志上。它是一些阶段被列在那里。我随机试了 \u003ccode\u003e--target=mast\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; ./rakudo-m --target=mast ~/test.raku\n[...]\nMAST::Frame name\u0026lt;s\u0026gt;, cuuid\u0026lt;1\u0026gt;\n  Local types: 0\u0026lt;obj\u0026gt;, 1\u0026lt;obj\u0026gt;, 2\u0026lt;obj\u0026gt;, 3\u0026lt;obj\u0026gt;, 4\u0026lt;int\u0026gt;, 5\u0026lt;str\u0026gt;, 6\u0026lt;obj\u0026gt;, 7\u0026lt;obj\u0026gt;, 8\u0026lt;obj\u0026gt;,\n  Lexical types: 0\u0026lt;obj\u0026gt;, 1\u0026lt;obj\u0026gt;, 2\u0026lt;obj\u0026gt;, 3\u0026lt;obj\u0026gt;, 4\u0026lt;obj\u0026gt;,\n  Lexical names: 0\u0026lt;c\u0026gt;, 1\u0026lt;$¢\u0026gt;, 2\u0026lt;$!\u0026gt;, 3\u0026lt;$/\u0026gt;, 4\u0026lt;$*DISPATCHER\u0026gt;,\n  Lexical map: $!\u0026lt;2\u0026gt;, c\u0026lt;0\u0026gt;, $*DISPATCHER\u0026lt;4\u0026gt;, $¢\u0026lt;1\u0026gt;, $/\u0026lt;3\u0026gt;,\n  Outer: name\u0026lt;\u0026lt;unit\u0026gt;\u0026gt;, cuuid\u0026lt;2\u0026gt;\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e某种不可读的矩阵。星号和桅杆之间有一个阶段性的优化。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; ./rakudo-m --target=optimize ~/test.raku\n[...]\n- QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2))\n  - QAST::Op(call \u0026amp;infix:\u0026lt;-\u0026gt;)  :METAOP_opt_result\u0026lt;?\u0026gt;\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(2)  2\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(3)  3\n[...]\n- QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;7\u0026gt; s(:foo(3 Z- 2))\n  - QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;8\u0026gt; :before_promotion\u0026lt;?\u0026gt; Z-\n    - QAST::Op(callstatic \u0026amp;METAOP_ZIP) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt;\n      - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt;\n      - QAST::Var(lexical \u0026amp;METAOP_REDUCE_LEFT)\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(3)  3\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(2)  2\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e哈，就是这样。在优化阶段后，行将失踪。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eQAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;5\u0026gt; :before_promotion\u0026lt;?\u0026gt; R-.\u003c/code\u003e\n并将整个 \u003ccode\u003eMETAOP_REVERSE\u003c/code\u003e 调用替换为通常的操作 \u003ccode\u003e(\u0026amp;infix:\u0026lt;-\u0026gt;)\u003c/code\u003e。所以问题一定在优化器的某个地方。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e只有在 \u003ccode\u003eoptim_nameless_call\u003c/code\u003e 方法中才会提到 \u003ccode\u003e\u0026amp;METAOP_ASSIGN\u003c/code\u003e，其中 \u003ccode\u003eQAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;)\u003c/code\u003e。显然，这个操作负责生成一个命名对 - 它已经有了一个名字（命名参数），它需要计算值。从优化 \u003ccode\u003e_\u003c/code\u003e 无名方法的执行路径来看，我们可以得出结论，我们对最后一个块感兴趣。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\n  elsif self.op_eq_core($metaop, '\u0026amp;METAOP_REVERSE') {\n    return NQPMu unless nqp::istype($metaop[0], QAST::Var)\n      \u0026amp;\u0026amp; nqp::elems($op) == 3;\n    return QAST::Op.new(:op\u0026lt;call\u0026gt;, :name($metaop[0].name),\n      $op[2], $op[1]).annotate_self: 'METAOP_opt_result', 1;\n  }\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e让我提醒你，优化前的树是这样的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\n- QAST::Op(call \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2))\n  - QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;5\u0026gt; :before_promotion\u0026lt;?\u0026gt; R-\n    - QAST::Op(call \u0026amp;METAOP_REVERSE) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt;\n      - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt;\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e而精简之后，是这样的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\n- QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2))\n  - QAST::Op(call \u0026amp;infix:\u0026lt;-\u0026gt;)  :METAOP_opt_result\u0026lt;?\u0026gt;\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e也就是说，优化 \u003ccode\u003e_nameless_call\u003c/code\u003e 做了以下工作。\u003c/p\u003e\n\u003cp\u003e如果我们的 \u003ccode\u003eQAST::Op+{QAST::SpecialArg}\u003c/code\u003e 操作没有三个参数，如果 \u003ccode\u003eMETAOP_REVERSE\u003c/code\u003e 调用没有一个正确的类型，我们就返回空。这不是我们的情况。\n否则，我们将返回一个新的操作，代替我们的 \u003ccode\u003eQAST::Op+{QAST::SpecialArg}\u003c/code\u003e 操作，以相反的顺序调用 \u003ccode\u003e\u0026amp;infix:\u0026lt;-\u0026gt;\u003c/code\u003e 参数。就是说，把结果打包成一对就没了。\u003c/p\u003e\n\u003cp\u003e在摸索了一下如何解决这个问题，并阅读了 \u003ccode\u003eQAST::SpecialArg\u003c/code\u003e 和 \u003ccode\u003eQAST::Node\u003c/code\u003e 的实现后，我想到了下面的代码。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\n  elsif self.op_eq_core($metaop, '\u0026amp;METAOP_REVERSE') {\n    return NQPMu unless nqp::istype($metaop[0], QAST::Var)\n      \u0026amp;\u0026amp; nqp::elems($op) == 3;\n    my $opt_result := QAST::Op.new(:op\u0026lt;call\u0026gt;, :name($metaop[0].name),\n      $op[2], $op[1]).annotate_self: 'METAOP_opt_result', 1;\n    if $op.named { $opt_result.named($op.named) } # 添加选项 named \n    if $op.flat { $opt_result.flat($op.flat) }    # 添加选项 flat\n    return $opt_result;\n  }\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e还有木头。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\n- QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2))\n  - QAST::Op+{QAST::SpecialArg}(call \u0026amp;infix:\u0026lt;-\u0026gt; :named\u0026lt;foo\u0026gt;)  :METAOP_opt_result\u0026lt;?\u0026gt;\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e命名的参数返回到它的位置。测试也开始通过。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; make t/spec/S03-metaops/reverse.t\n[...]\nAll tests successful.\nFiles=1, Tests=70,  3 wallclock secs ( 0.03 usr  0.01 sys +  3.61 cusr  0.17 csys =  3.82 CPU)\nResult: PASS\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们本可以就此打住，但这是编译器优化器的代码，它的结果是一个有两个整数参数的方法调用。我认为这在某种程度上是次优的。如果我们将返回表达式改为返回 \u003ccode\u003eself.visit_op: $opt_result;\u003c/code\u003e，对产生的非优化操作调用优化器，那么产生的树就会像这样。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\n- QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2))\n  - QAST::Want+{QAST::SpecialArg}(:named\u0026lt;foo\u0026gt;)\n    - QAST::WVal+{QAST::SpecialArg}(Int :named\u0026lt;foo\u0026gt;)\n    - QAST::IVal(-1)\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e现在一切都很理想。\u003c/p\u003e\n\u003ch2 id=\"分享成果\"\u003e分享成果\u003c/h2\u003e\n\u003cp\u003e我们已经到了终点线。现在我们只需要分享我们的经验。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e重要的是：运行所有的 \u003ccode\u003emake spectest\u003c/code\u003e 测试，确保没有新的东西被破坏。\u003c/li\u003e\n\u003cli\u003e在 GitHub 上使用 Rakudo 编译器和测试制作 fork 仓库。\u003c/li\u003e\n\u003cli\u003e将 fork 仓库添加为新的 git 远程仓库。\u003c/li\u003e\n\u003cli\u003ecd ~/dev-rakudo/rakudo \u0026amp;\u0026amp; git remote add fork \u003c!-- raw HTML omitted --\u003e。\u003c/li\u003e\n\u003cli\u003ecd ~/dev-rakudo/t/spec \u0026amp;\u0026amp; git remote add fork \u003c!-- raw HTML omitted --\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e重要：确保两个仓库在 git 中都有正确的用户名和用户邮箱。\u003c/p\u003e\n\u003cp\u003e提交到两个版本库，详细说明你为什么做了哪些改动，并添加对原始问题跟踪器的引用。\u003c/p\u003e\n\u003cp\u003e运行提交。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecd ~/dev-rakudo/rakudo \u0026amp;\u0026amp; git push fork\ncd ~/dev-rakudo/t/spec \u0026amp;\u0026amp; git push fork\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e向两个仓库提出拉取请求。在他们的描述中，最好是相互参照和原任务。\u003c/p\u003e\n\u003ch2 id=\"结论\"\u003e结论\u003c/h2\u003e\n\u003cp\u003e对开源软件的贡献是：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e趣味性和趣味性。\u003c/li\u003e\n\u003cli\u003e给你的感觉是，你正在做一些有用的事情，你真的是。\u003c/li\u003e\n\u003cli\u003e让你认识新的有趣和专业的人（任何关于 Raku 的问题都会在 \u003ccode\u003e#raku IRC\u003c/code\u003e 频道中得到回答）。\u003c/li\u003e\n\u003cli\u003e解决非标准任务，没有截止日期的压力，是一种很好的体验。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e选择你觉得最舒服的角色等级，去做新的任务吧!\u003c/p\u003e\n","text":"在过去的几周里，我看到了一些文章和视频，讲述了在开源软件中构思是多么的伟大。这次我又想起了另一篇旧文Raku 是我的 MMORPG。它说，你可以从以下几个方面受益于开源软件。比如说，可以做一个大侠，基于一些开源软件来写软件。作为写手，可以写博客、微博等，对所选软件产生兴趣。或者你可以成为一个法师 - 实现新的功能和修复 bug。今天小编就带着弓箭手来告诉大家如何成为 Raku 编程语言的法师。\n选择一个任务 让我们挑选一些编译器的 bug，并修复它。让我们去 Rakudo 编译器 issues中选择我们想要修复的 bug。我滚动了一下 bug 列表，遇到了解析 - 运气不错，我前段时间一直在研究编译器语法，看了一本这方面的好书。找到了四个问题。\n 标签为 LTA （Less Than Awesome - 当真实行为与直觉预期不同时）- 我们暂时把它划掉。 标签 \u0026ldquo;需要共识\u0026rdquo; - 我们只想修复一个不复杂的 bug - 肯定要划掉。 标签为 \u0026ldquo;grammar and actions\u0026rdquo; 的关于一个可能死的代码是一个很好的候选人的第一个任务。  任务确定后，现在我们需要配置工作环境。在 Windows、Linux 和 macOS 中，一切应该都差不多。我将通过 macOS 的例子来告诉你。\n建立工作环境 为源码和我们建立的编译器建立文件夹。\nmkdir ~/dev-rakudo \u0026amp;\u0026amp; mkdir ~/dev-rakudo-install Rakudo 编译器由三部分组成。\n 虚拟机。现在有三种 - JVM、JS 和 MoarVM。我们以 MoarVM 为最稳定的一个。 NQP（Not Quite Perl），是一种低级（中级）语言的实现，它是 Raku 的一个 \u0026ldquo;子集\u0026rdquo;。虚拟机可以执行用 NQP 编写的代码。 Rakudo 编译器本身，用 NQP 和 Raku 编写。  下载并编译这三个组件。我分别花了一分半钟、半分钟和两分半钟才编好。\ncd ~/dev-rakudo \u0026amp;\u0026amp; git clone git@github.com:MoarVM/MoarVM.git \u0026amp;\u0026amp; cd MoarVM perl Configure.pl --prefix ~/dev-rakudo-install \u0026amp;\u0026amp; make -j 4 \u0026amp;\u0026amp; make install cd ~/dev-rakudo \u0026amp;\u0026amp; git clone git@github.com:Raku/nqp.git \u0026amp;\u0026amp; cd nqp perl Configure.pl --backend=moar --prefix ~/dev-rakudo-install \u0026amp;\u0026amp; make -j 4 \u0026amp;\u0026amp; make install cd ~/dev-rakudo \u0026amp;\u0026amp; git clone git@github.com:rakudo/rakudo.git \u0026amp;\u0026amp; cd rakudo perl Configure.pl --backend=moar --prefix ~/dev-rakudo-install \u0026amp;\u0026amp; make -j 4 \u0026amp;\u0026amp; make install 注意参数。--prefix 显示了 make install 命令后可执行文件的复制位置，--backend=moar 表示正在使用的虚拟机，而 -j 4 则要求跨多线程并行化（以防加快进度）。现在我们已经建立了 Rakudo 编译器 ~/dev-rakudo-install/bin/raku。我们还需要官方的编译器测试套件。你应该把它和它的代码一起放在文件夹里。\ncd ~/dev-rakudo/rakudo \u0026amp;\u0026amp; git clone https://github.com/Raku/roast.git t/spec 我们先进行测试。这种情况很常见，有些测试甚至在新的变化之前就失败了。我们需要辨别出来，这样以后就不会害怕这些变化破坏了一些不必要的东西。\n这里和下面我将在 ~/dev-rakudo/rakudo 文件夹中工作，除非另有说明。\n\u0026gt; make spectest [...] Test Summary Report ------------------- t/spec/S32-str/utf8-c8.t (Wstat: 65280 Tests: 54 Failed: 0) Non-zero exit status: 255 Parse errors: Bad plan. You planned 66 tests but ran 54. Files=1346, Tests=117144, 829 wallclock secs (27.70 usr 6.04 sys + 2638.79 cusr 210.98 csys = 2883.51 CPU) Result: FAIL make: *** [m-spectest5] Error 1 14分钟内共运行了1,346个文件中的117,144次测试。一些与utf8相关的测试由于某种原因失败了，其他的都能正常工作。我们已经准备好去工作了!\n让我们来看看问题的陈述 问题陈述说，某个元运算符 R 在 colonpair 上出了问题。我打开文档，搜索 R 这个词，但下拉列表中没有这个名字的元运算符。我试着输入 metaop，看到的是反向元操作符(R)。原来，如果你想把二元运算的操作数按相反的顺序写出来，你可以在其符号前使用前缀 R。\nsay 3 R- 2 == -1 # Output: True Colonpair 是命名对的语法。它看起来就像名字前面有一个冒号，前面有一个括号，有一个值。例如 :foo(42) 是一个名称为 foo、值为 42 的对儿。这个语法通常用于在调用函数时，向函数传递一个命名参数中的值。\nsub sub-with-named-parameter(:$foo) { say $foo; } sub-with-named-parameter(:foo(42)); # Output: 42 如果一个函数参数不是命名的，而是位置的，那么在用命名对调用时，就会出现编译错误。\nsub sub-without-named-parameter($foo) { # \u0026lt;- 没有冒号 say $foo; } sub-without-named-parameter(:foo(42)); # Unexpected named argument 'foo' passed 如果你在调用这样的函数时用括号包围一个参数，整个参数对将被传递到位置参数。\nsub sub-without-named-parameter($foo) { say $foo; } sub-without-named-parameter((:foo(42))); # Output: foo =\u0026gt; 42 在 Raku 中，你可以写一个函数来捕获所有传递给它的参数并分析它们。这是在单个参数 - 捕获前用竖线完成的。\nsub sub-with-capture(|foo) { # \u0026lt;- 参数捕获 say foo; } sub-with-capture(:foo(42)); # Output: \\(:foo(42)) sub-with-capture(42); # Output: \\(42) sub-with-capture(:foo(3 Z- 2)); # Output: \\(:foo((1,).Seq)) sub-with-capture(:foo(3 R- 2)); # Output: \\(-1) 倒数第二行使用了 Z 元操作符 - zip 操作符。它将左右两部分作为一个列表，按顺序每次从它们中抽取一个元素，并进行操作，从而形成一个序列。\n在最后一行，只用了我们需要的 R 元操作符。在这种情况下，它不是一个对，而是一个常量，它被传递到函数中。我们可以假设这是元运算符工作方式的一些特殊性，但用 Z 的例子表明并非如此。其实这是一个 bug - 当一个对被传递到一个使用 R 元运算符的函数中时，它的值会被转换。\n我们需要一个新的测试 为了确保未来的变化能够修复错误的行为，我们需要写一个新的测试。在测试文件中不难找到 R 元操作符的测试（S03-metops/reverse.t）。下面我将补充以下测试。\n# https://github.com/rakudo/rakudo/issues/1632 { sub subroutine($expected, |actual) { is actual.gist, $expected, \u0026quot;Сolonpair exists\u0026quot; } subroutine('\\(:foo(-1))', :foo(3 R- 2)); } 该测试有一个功能，有两个参数 - 正常和捕获。在函数体中，第一个参数和传递的 Capture 的字符串表示进行比较。你可以使用 make 对新构建的编译器进行单独测试。\n\u0026gt; make t/spec/S03-metaops/reverse.t [...] ok 69 - [R~]= not ok 70 - Colonpair exists # Failed test 'Colonpair exists' # at t/spec/S03-metaops/reverse.t line 191 # expected: '\\(:foo(-1))' # got: '\\(-1)' # You planned 69 tests, but ran 70 # You failed 1 test of 70 你可以看到，测试失败了（如预期）。还有一个单独的说明，系统预计69次测试，但收到70次。这是基于 TAP 的测试系统的特点 - 必须在文件的顶部修正传递给 plan 函数的数字。现在测试崩溃了，但编号没有受到影响。你可以开始修复它。\n凝视法 一开始我很相信任务上的标签 - 如果是解析的话，一定是源码解析阶段的某个地方出现了问题。目前我的认识如下：\n 基础解析器代码在文件 rakudo/src/Perl6/Grammar.nqp 中。 这个解析器是从 nqp/src/HLL/Grammar.nqp 文件中的基础解析器继承的。 元操作符的解析和工作方式都差不多，你可以通过仔细观察来发现不同之处。  我在基础解析器代码中找到了对元操作符的引用。\ntoken infix_prefix_meta_operator:sym\u0026lt;R\u0026gt; { \u0026lt;sym\u0026gt; \u0026lt;infixish('R')\u0026gt; {} \u0026lt;.can_meta($\u0026lt;infixish\u0026gt;, \u0026quot;reverse the args of\u0026quot;)\u0026gt; \u0026lt;O=.revO($\u0026lt;infixish\u0026gt;)\u0026gt; } token infix_prefix_meta_operator:sym\u0026lt;Z\u0026gt; { \u0026lt;sym\u0026gt; \u0026lt;infixish('Z')\u0026gt; {} \u0026lt;.can_meta($\u0026lt;infixish\u0026gt;, \u0026quot;zip with\u0026quot;)\u0026gt; \u0026lt;O(|%list_infix)\u0026gt; } 这需要对 Raku grammar 有一定的了解。据我所知，原来这两个元运算符在解析上并没有根本的区别。一段时间后，在解析器的源代码中挖得够多了，我开始怀疑解析工作是否正确。认为代码 my $r = :foo(3 R- 2); say $r; # Output: foo =\u0026gt; -1 正确工作的建议 - 问题恰恰发生在调用函数时。显然，我白白相信了任务栏上的标签。\n编译器将帮助我们 颇为迟钝的我想起了我从一开始就应该做的事情。Rakudo 编译器有 --target 调试开关。它取编译器阶段的名称，你想将其结果输出到控制台并退出。我想看看 --target=parse（因为我只知道这一个）。\n我从 ~/dev-rakudo/rakudo 文件夹中使用 rakumo-m，这样我就不必等待通过 make install 命令将所需文件复制到 ~/dev-rakudo-install。简单的脚本可以这样运行。更复杂的脚本必须在 make install 之后从 -install 中运行。\n\u0026gt; cat ~/test.raku sub s(|c) { say c } s(:foo(3 R- 2)); s(:foo(3 Z- 2)); \u0026gt; ./rakudo-m --target=parse ~/test.raku [...] - args: (:foo(3 R- 2)) - semiarglist: :foo(3 R- 2) - arglist: 1 matches - EXPR: :foo(3 R- 2) - colonpair: :foo(3 R- 2) - identifier: foo - coloncircumfix: (3 R- 2) - circumfix: (3 R- 2) - semilist: 3 R- 2 - statement: 1 matches - EXPR: R- 2 [...] - args: (:foo(3 Z- 2)) - semiarglist: :foo(3 Z- 2) - arglist: 1 matches - EXPR: :foo(3 Z- 2) - colonpair: :foo(3 Z- 2) - identifier: foo - coloncircumfix: (3 Z- 2) - circumfix: (3 Z- 2) - semilist: 3 Z- 2 - statement: 1 matches - EXPR: Z- 2 [...] 结论：R 和 Z 的解析是一样的。\n这不是解析 所有被解析的东西都会被传递给所谓的 Action，把字词变成一棵语法树。在我们的例子中，Actions 位于文件 rakudo/src/Perl6/Actions.nqp 和 nqp/src/HLL/Actions.nqp 中。这里就比较容易搞清楚了，毕竟是代码，是 grammar。\n我在主 Actions 中找到了以下代码。\n[...] elsif $\u0026lt;infix_prefix_meta_operator\u0026gt; { [...] if $metasym eq 'R' { $helper := '\u0026amp;METAOP_REVERSE'; $t := nqp::flip($t) if $t; } elsif $metasym eq 'X' { $helper := '\u0026amp;METAOP_CROSS'; $t := nqp::uc($t); } elsif $metasym eq 'Z' { $helper := '\u0026amp;METAOP_ZIP'; $t := nqp::uc($t); } my $metapast := QAST::Op.new( :op\u0026lt;call\u0026gt;, :name($helper), WANTED($basepast,'infixish') ); $metapast.push(QAST::Var.new(:name(baseop_reduce($base\u0026lt;OPER\u0026gt;\u0026lt;O\u0026gt;.made)), :scope\u0026lt;lexical\u0026gt;)) if $metasym eq 'X' || $metasym eq 'Z'; [...] 它说，如果在代码中解析了元操作符 R、Z 或 X，就应该在语法树中添加一些 METAOP_ 函数调用。在 Z 和 X 的情况下，它会多一个参数，即某种还原函数。所有这些功能都可以在 rakudo/src/core.c/metaops.pm6 中找到。\nsub METAOP_REVERSE(\\op) is implementation-detail { -\u0026gt; |args { op.(|args.reverse) } } sub METAOP_ZIP(\\op, \u0026amp;reduce) is implementation-detail { nqp::if(op.prec('thunky').starts-with('.'), -\u0026gt; +lol { my $arity = lol.elems; [...] }, -\u0026gt; +lol { Seq.new(Rakudo::Iterator.ZipIterablesOp(lol,op)) } ) } 给你：\n \\op 是由我们的元操作符，即-，在前面的操作。 Trait implementation-detail 只是表明这不是公共代码，是编译器实现的一部分。 由于-操作没有笨重的特性，所以 \u0026amp;reduce 函数不会参与计算，Z 的结果是 Seq.new(...)。 R 的结果是一个操作调用 - 参数顺序相反。  这时我想起还有一个 - 目标，即星。它将显示行动的结果。\n\u0026gt; ./rakudo-m --target=ast ~/test.raku [...] - QAST::Op(call \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2)) - QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;5\u0026gt; :before_promotion\u0026lt;?\u0026gt; R- - QAST::Op(call \u0026amp;METAOP_REVERSE) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt; - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt; - QAST::Want \u0026lt;wanted\u0026gt; 3 - QAST::WVal(Int) - Ii - QAST::IVal(3) 3 - QAST::Want \u0026lt;wanted\u0026gt; 2 - QAST::WVal(Int) - Ii - QAST::IVal(2) 2 [...] - QAST::Op(call \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;7\u0026gt; s(:foo(3 Z- 2)) - QAST::Op+{QAST::SpecialArg}(:named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;8\u0026gt; :before_promotion\u0026lt;?\u0026gt; Z- - QAST::Op(call \u0026amp;METAOP_ZIP) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt; - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt; - QAST::Var(lexical \u0026amp;METAOP_REDUCE_LEFT) - QAST::Want \u0026lt;wanted\u0026gt; 3 - QAST::WVal(Int) - Ii - QAST::IVal(3) 3 - QAST::Want \u0026lt;wanted\u0026gt; 2 - QAST::WVal(Int) - Ii - QAST::IVal(2) 2 [...] 一如所料。除了调用不同的 METAOP_ 函数外，所有的东西几乎都是一样的。从它们的代码中我们可以知道，原则上这些函数的不同之处在于返回值的类型 - 分别是 Int 和 Seq。众所周知，Raku 对不同类型的对象的上下文相当敏感\u0026hellip;\u0026hellip;我想，它关注的可能是返回值。我试着用下面的方式修改代码。\nsub METAOP_REVERSE(\\op) is implementation-detail { -\u0026gt; |args { Seq.new(op.(|args.reverse)) } } 编译、运行。\n\u0026gt; make [...] Stage start : 0.000 Stage parse : 61.026 Stage syntaxcheck: 0.000 Stage ast : 0.000 Stage optimize : 7.076 Stage mast : 14.120 Stage mbc : 3.941 [...] \u0026gt; ./rakudo-m ~/test.raku \\(-1) \\(:foo((1,).Seq)) 一切都没有改变。所以，不是返回值\u0026hellip;\u0026hellip;想了想，不知道为什么结果又是 -1 而不是 (-1,).Seq。而且，从代码来看，Seq 根本就没有一个合适的构造函数。下一次，作为一些疯狂的事情，我尝试调用 METAOP_REVERSE 结果只是为了崩溃。\nsub METAOP_REVERSE(\\op) is implementation-detail { -\u0026gt; |args { die } } 编译、运行。\n\u0026gt; make [...] \u0026gt; ./rakudo-m ~/test.raku \\(-1) \\(:foo((1,).Seq)) 怎么会呢？语法树中包含了对 METAOP_REVERSE 的调用，它的代码应该是折叠的，但计算仍然进行，我们得到 -1。\n这些都不是《行动》。\n这里我的目光落在编译器的构建日志上。它是一些阶段被列在那里。我随机试了 --target=mast。\n\u0026gt; ./rakudo-m --target=mast ~/test.raku [...] MAST::Frame name\u0026lt;s\u0026gt;, cuuid\u0026lt;1\u0026gt; Local types: 0\u0026lt;obj\u0026gt;, 1\u0026lt;obj\u0026gt;, 2\u0026lt;obj\u0026gt;, 3\u0026lt;obj\u0026gt;, 4\u0026lt;int\u0026gt;, 5\u0026lt;str\u0026gt;, 6\u0026lt;obj\u0026gt;, 7\u0026lt;obj\u0026gt;, 8\u0026lt;obj\u0026gt;, Lexical types: 0\u0026lt;obj\u0026gt;, 1\u0026lt;obj\u0026gt;, 2\u0026lt;obj\u0026gt;, 3\u0026lt;obj\u0026gt;, 4\u0026lt;obj\u0026gt;, Lexical names: 0\u0026lt;c\u0026gt;, 1\u0026lt;$¢\u0026gt;, 2\u0026lt;$!\u0026gt;, 3\u0026lt;$/\u0026gt;, 4\u0026lt;$*DISPATCHER\u0026gt;, Lexical map: $!\u0026lt;2\u0026gt;, c\u0026lt;0\u0026gt;, $*DISPATCHER\u0026lt;4\u0026gt;, $¢\u0026lt;1\u0026gt;, $/\u0026lt;3\u0026gt;, Outer: name\u0026lt;\u0026lt;unit\u0026gt;\u0026gt;, cuuid\u0026lt;2\u0026gt; [...] 某种不可读的矩阵。星号和桅杆之间有一个阶段性的优化。\n\u0026gt; ./rakudo-m --target=optimize ~/test.raku [...] - QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2)) - QAST::Op(call \u0026amp;infix:\u0026lt;-\u0026gt;) :METAOP_opt_result\u0026lt;?\u0026gt; - QAST::Want \u0026lt;wanted\u0026gt; 2 - QAST::WVal(Int) - Ii - QAST::IVal(2) 2 - QAST::Want \u0026lt;wanted\u0026gt; 3 - QAST::WVal(Int) - Ii - QAST::IVal(3) 3 [...] - QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;7\u0026gt; s(:foo(3 Z- 2)) - QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;8\u0026gt; :before_promotion\u0026lt;?\u0026gt; Z- - QAST::Op(callstatic \u0026amp;METAOP_ZIP) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt; - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt; - QAST::Var(lexical \u0026amp;METAOP_REDUCE_LEFT) - QAST::Want \u0026lt;wanted\u0026gt; 3 - QAST::WVal(Int) - Ii - QAST::IVal(3) 3 - QAST::Want \u0026lt;wanted\u0026gt; 2 - QAST::WVal(Int) - Ii - QAST::IVal(2) 2 [...] 哈，就是这样。在优化阶段后，行将失踪。\n QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;5\u0026gt; :before_promotion\u0026lt;?\u0026gt; R-. 并将整个 METAOP_REVERSE 调用替换为通常的操作 (\u0026amp;infix:\u0026lt;-\u0026gt;)。所以问题一定在优化器的某个地方。  只有在 optim_nameless_call 方法中才会提到 \u0026amp;METAOP_ASSIGN，其中 QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;)。显然，这个操作负责生成一个命名对 - 它已经有了一个名字（命名参数），它需要计算值。从优化 _ 无名方法的执行路径来看，我们可以得出结论，我们对最后一个块感兴趣。\n[...] elsif self.op_eq_core($metaop, '\u0026amp;METAOP_REVERSE') { return NQPMu unless nqp::istype($metaop[0], QAST::Var) \u0026amp;\u0026amp; nqp::elems($op) == 3; return QAST::Op.new(:op\u0026lt;call\u0026gt;, :name($metaop[0].name), $op[2], $op[1]).annotate_self: 'METAOP_opt_result', 1; } [...] 让我提醒你，优化前的树是这样的。\n[...] - QAST::Op(call \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2)) - QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;5\u0026gt; :before_promotion\u0026lt;?\u0026gt; R- - QAST::Op(call \u0026amp;METAOP_REVERSE) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt; - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt; - QAST::Want \u0026lt;wanted\u0026gt; 3 - QAST::Want \u0026lt;wanted\u0026gt; 2 [...] 而精简之后，是这样的。\n[...] - QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2)) - QAST::Op(call \u0026amp;infix:\u0026lt;-\u0026gt;) :METAOP_opt_result\u0026lt;?\u0026gt; - QAST::Want \u0026lt;wanted\u0026gt; 2 - QAST::Want \u0026lt;wanted\u0026gt; 3 [...] 也就是说，优化 _nameless_call 做了以下工作。\n如果我们的 QAST::Op+{QAST::SpecialArg} 操作没有三个参数，如果 METAOP_REVERSE 调用没有一个正确的类型，我们就返回空。这不是我们的情况。 否则，我们将返回一个新的操作，代替我们的 QAST::Op+{QAST::SpecialArg} 操作，以相反的顺序调用 \u0026amp;infix:\u0026lt;-\u0026gt; 参数。就是说，把结果打包成一对就没了。\n在摸索了一下如何解决这个问题，并阅读了 QAST::SpecialArg 和 QAST::Node 的实现后，我想到了下面的代码。\n[...] elsif self.op_eq_core($metaop, '\u0026amp;METAOP_REVERSE') { return NQPMu unless nqp::istype($metaop[0], QAST::Var) \u0026amp;\u0026amp; nqp::elems($op) == 3; my $opt_result := QAST::Op.new(:op\u0026lt;call\u0026gt;, :name($metaop[0].name), $op[2], $op[1]).annotate_self: 'METAOP_opt_result', 1; if $op.named { $opt_result.named($op.named) } # 添加选项 named if $op.flat { $opt_result.flat($op.flat) } # 添加选项 flat return $opt_result; } [...] 还有木头。\n[...] - QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2)) - QAST::Op+{QAST::SpecialArg}(call \u0026amp;infix:\u0026lt;-\u0026gt; :named\u0026lt;foo\u0026gt;) :METAOP_opt_result\u0026lt;?\u0026gt; - QAST::Want \u0026lt;wanted\u0026gt; 2 - QAST::Want \u0026lt;wanted\u0026gt; 3 [...] 命名的参数返回到它的位置。测试也开始通过。\n\u0026gt; make t/spec/S03-metaops/reverse.t [...] All tests successful. Files=1, Tests=70, 3 wallclock secs ( 0.03 usr 0.01 sys + 3.61 cusr 0.17 csys = 3.82 CPU) Result: PASS 我们本可以就此打住，但这是编译器优化器的代码，它的结果是一个有两个整数参数的方法调用。我认为这在某种程度上是次优的。如果我们将返回表达式改为返回 self.visit_op: $opt_result;，对产生的非优化操作调用优化器，那么产生的树就会像这样。\n[...] - QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2)) - QAST::Want+{QAST::SpecialArg}(:named\u0026lt;foo\u0026gt;) - QAST::WVal+{QAST::SpecialArg}(Int :named\u0026lt;foo\u0026gt;) - QAST::IVal(-1) [...] 现在一切都很理想。\n分享成果 我们已经到了终点线。现在我们只需要分享我们的经验。\n 重要的是：运行所有的 make spectest 测试，确保没有新的东西被破坏。 在 GitHub 上使用 Rakudo 编译器和测试制作 fork 仓库。 将 fork 仓库添加为新的 git 远程仓库。 cd ~/dev-rakudo/rakudo \u0026amp;\u0026amp; git remote add fork 。 cd ~/dev-rakudo/t/spec \u0026amp;\u0026amp; git remote add fork 。  重要：确保两个仓库在 git 中都有正确的用户名和用户邮箱。\n提交到两个版本库，详细说明你为什么做了哪些改动，并添加对原始问题跟踪器的引用。\n运行提交。\ncd ~/dev-rakudo/rakudo \u0026amp;\u0026amp; git push fork cd ~/dev-rakudo/t/spec \u0026amp;\u0026amp; git push fork 向两个仓库提出拉取请求。在他们的描述中，最好是相互参照和原任务。\n结论 对开源软件的贡献是：\n 趣味性和趣味性。 给你的感觉是，你正在做一些有用的事情，你真的是。 让你认识新的有趣和专业的人（任何关于 Raku 的问题都会在 #raku IRC 频道中得到回答）。 解决非标准任务，没有截止日期的压力，是一种很好的体验。  选择你觉得最舒服的角色等级，去做新的任务吧!\n"},"name":"为最年轻的 Raku 贡献力量","published":"2021-02-16T00:00:00+08:00","summary":"Contributing to Raku","type":"entry","url":"https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/"},{"content":{"html":"\u003cp\u003e[113] 发表于2021年1月30日。\n这是我对 \u003ca href=\"https://perlweeklychallenge.org/blog/perl-weekly-challenge-097/\"\u003ePerl 每周挑战#097\u003c/a\u003e 的回应。\u003c/p\u003e\n\u003ch2 id=\"挑战-0971-凯撒密码\"\u003e挑战 #097.1: 凯撒密码\u003c/h2\u003e\n\u003cp\u003e给你一个只包含字母 \u003ccode\u003eA..Z\u003c/code\u003e 的字符串 \u003ccode\u003e$S\u003c/code\u003e 和一个数字 \u003ccode\u003e$N\u003c/code\u003e。\n写一个脚本，用\u003ca href=\"https://en.wikipedia.org/wiki/Caesar_cipher\"\u003e凯撒密码\u003c/a\u003e对给定的字符串 \u003ccode\u003e$S\u003c/code\u003e 进行加密，左移大小为 \u003ccode\u003e$N\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e例子:\n输入: $S = \u0026ldquo;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\u0026rdquo;, $N = 3\n输出: \u0026ldquo;QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\u0026rdquo;\u003c/p\u003e\n\u003cp\u003ePlain:    ABCDEFGHIJKLMNOPQRSTUVWXYZ\nCipher:   XYZABCDEFGHIJKLMNOPQRSTUVW\u003c/p\u003e\n\u003cp\u003ePlaintext:  THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\nCiphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;只用字母 \u003ccode\u003eA...Z\u003c/code\u003e\u0026rdquo; 的表述是错误的，因为例子中也有几个空格。因此，应该允许这些空格。\u003c/p\u003e\n\u003cp\u003e文件: caesar-cipher\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e#! /usr/bin/env raku\n\nsubset AZ-space of Str where /^ \u0026lt;[ A .. Z \\s ]\u0026gt;+ $/;   # [1]\nsubset PosInt of Int where -25 \u0026lt;= $_ \u0026lt;= 25;            # [2]\n\nunit sub MAIN (AZ-space $S = 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG',\n               PosInt $N = 3);                         # [3]\n\nsay $S.comb.map({ caesar($_, $N) }).join;              # [4]\n\nsub caesar ($char, $shift)\n{\n  return $char if $char eq \u0026quot; \u0026quot;;                        # [5]\n\n  my $code = $char.ord;                                # [6]\n\n  $code -= $shift;                                     # [7]\n\n  $code += 26 if $code \u0026lt; 65;  # 'A'                    # [8]\n  $code -= 26 if $code \u0026gt; 90;  # 'Z'                    # [8a]\n\n  return $code.chr;                                    # [9]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e[1] 所允许的字符 (或 «特定领域字母»).\u003c/p\u003e\n\u003cp\u003e[2] 挑战说左移值是一个数字。允许除整数以外的任何东西是没有意义的，所以我把值限制在这个类型。负值应该是可以的，它们意味着右移值（而不是左移）。\u003c/p\u003e\n\u003cp\u003e[3] 参数，默认值为挑战中给出的值。\u003c/p\u003e\n\u003cp\u003e[4] 将字符串分割成单个字符（用梳子(comb)，在每个字符上应用 \u0026ldquo;caesar\u0026rdquo; 函数（用map），再次将字符连接成一个字符串（用join），然后打印出来。\u003c/p\u003e\n\u003cp\u003e[5] 不移动空格。\u003c/p\u003e\n\u003cp\u003e[6] 获取字符的代码点。\u003c/p\u003e\n\u003cp\u003e[7] 减去移位值（当我们向左移位时，或在字母表中降低移位值）。\u003c/p\u003e\n\u003cp\u003e[8] 绕回, 如果我们移出A-Z范围，这里为更低 - 或更高的 [8b]。\u003c/p\u003e\n\u003cp\u003e[9] 获取指定代码点的字符。\u003c/p\u003e\n\u003cp\u003e查看 docs.raku.org/routine/ord 获取更多关于 ord 的信息。\u003c/p\u003e\n\u003cp\u003e查看 docs.raku.org/routine/chr 获取更多关于 chr 的信息。\u003c/p\u003e\n\u003cp\u003e运行它:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3\nQEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\n\n$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3\nWKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ\n\n$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13\nGUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT\n\n$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13\nGUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRaku 有一个 ords 变体，它接收一整个字符串，而不是一个字符作为 ord。还有 chrs，它接收一个代码点数组，并将它们变成一个字符串，而不是像 chr 那样接收一个字符的代码点。让我们用它们来写一个更短的程序。\u003c/p\u003e\n\u003cp\u003e文件: caesar-cipher-map\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e#! /usr/bin/env raku\n\nsubset AZ-space of Str where /^ \u0026lt;[ A .. Z \\s ]\u0026gt;+ $/;\nsubset PosInt of Int where -25 \u0026lt;= $_ \u0026lt;= 25;\n\nunit sub MAIN (AZ-space $S = 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG',\n               PosInt $N = 3);\n\nsay caesar($S, $N);\n\nsub caesar ($string, $shift)\n{\n  return $string.ords.map({$_ == 32 ?? 32 !! (($_ - $shift - 65) % 26 ) + 65}).chrs;\n    # #################### # 1a ############# ############ # 1b  # 1c ## 1d\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e[1] 我们使用map来改变各个代码点。我们让代码点为32的空间单独存在[1a]。每一个其他的值我们都还原成0到25之间的数字（通过减去第一个字母的代码点（A：65）和移位值[1b]）。模数运算符 (%) 为我们处理负值，做正确的事情。例如：-2 % 26 -\u0026gt; 24 [1c]。然后我们添加调整值到它们应该在的位置(从A到Z)[1d]，然后我们将整个数组的代码点变成一个字符串。\u003c/p\u003e\n\u003cp\u003e查看 docs.raku.org/routine/ords 获取更多关于 ords 的信息。\u003c/p\u003e\n\u003cp\u003e查看 docs.raku.org/routine/chrs 获取更多关于 chrs 的信息。\u003c/p\u003e\n\u003cp\u003e运行它的结果和之前一样。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3\nQEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\n\n$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3\nWKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ\n\n$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13\nGUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT\n\n$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13\nGUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"perl-版本\"\u003ePerl 版本\u003c/h2\u003e\n\u003cp\u003e这是对第一个 Raku 版的直接翻译。\u003c/p\u003e\n\u003cp\u003eFile: caesar-cipher-perl\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"ch\"\u003e#! /usr/bin/env perl\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003estrict\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003ewarnings\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003efeature\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;say\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003efeature\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;signatures\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eno\u003c/span\u003e \u003cspan class=\"nn\"\u003ewarnings\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;experimental::signatures\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@ARGV\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"sr\"\u003e//\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003edie\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Illegal characters\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e \u003cspan class=\"o\"\u003e=~\u003c/span\u003e\u003cspan class=\"sr\"\u003e /^[A-Z\\s]+$/\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@ARGV\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"sr\"\u003e//\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003edie\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Illegal shift $N\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e \u003cspan class=\"o\"\u003e!~\u003c/span\u003e \u003cspan class=\"sr\"\u003e/^\\-?\\d+$/\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e25\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ecaesar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"nb\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sr\"\u003e//\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ecaesar\u003c/span\u003e \u003cspan class=\"p\"\u003e($char, $shift)\n\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$char\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$char\u003c/span\u003e \u003cspan class=\"ow\"\u003eeq\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$char\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$shift\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e65\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# \u0026#39;A\u0026#39;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e90\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# \u0026#39;Z\u0026#39;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$code\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e运行它的结果和 Raku 版一样。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3\nQEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\n\n$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3\nWKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ\n\n$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13\nGUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT\n\n$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13\nGUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"挑战-0972二进制子字符串binary-substrings\"\u003e挑战 #097.2：二进制子字符串(Binary Substrings)\u003c/h2\u003e\n\u003cp\u003e给你一个二进制字符串 \u003ccode\u003e$B\u003c/code\u003e 和一个整数 \u003ccode\u003e$S\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e写一个脚本来拆分大小为 \u003ccode\u003e$S\u003c/code\u003e 的二进制字符串 \u003ccode\u003e$B\u003c/code\u003e，然后找出使其相同的最小翻转次数。\u003c/p\u003e\n\u003cp\u003e例 1:\n输入: $B = “101100101”, $S = 3\n输出: 1\u003c/p\u003e\n\u003cp\u003e二进制子字符串:\n\u0026ldquo;101\u0026rdquo;: 0 flip\n\u0026ldquo;100\u0026rdquo;: 1 flip to make it \u0026ldquo;101\u0026rdquo;\n\u0026ldquo;101\u0026rdquo;: 0 flip\u003c/p\u003e\n\u003cp\u003e例 2:\n输入 $B = “10110111”, $S = 4\n输出: 2\u003c/p\u003e\n\u003cp\u003e二进制子字符串:\n\u0026ldquo;1011\u0026rdquo;: 0 flip\n\u0026ldquo;0111\u0026rdquo;: 2 flips to make it \u0026ldquo;1011\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e我们先从第一个例子中的二进制子字符串中砍掉3个字符块。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; say \u0026quot;101100101\u0026quot;.comb(3);   # -\u0026gt; (101 100 101)\n\u0026gt; say \u0026quot;1011001010\u0026quot;.comb(3);  # -\u0026gt; (101 100 101 0)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e第二行显示了如果长度不匹配会发生什么。这就给了我们一个非法的值，因为我们不能将一位数翻转为三位数的值。所以我们必须添加一个检查。\u003c/p\u003e\n\u003cp\u003e然后我们将第一个子串与其余的子串进行比较，一次一个。在这里使用bitwise XOR（Exclusive OR）运算符是一个合理的选择。这给了我们一个二进制值，其中1的数量就是该子串的翻转次数。Raku确实有一个XOR运算符。+^. 但是它 \u0026ldquo;将两个参数都强制为Int，并进行位智XOR操作\u0026rdquo;(根据文档\u0026quot;；参见docs.raku.org/language/operators#infix_+^)。\u003c/p\u003e\n\u003cp\u003e我们可以在进行XOR操作之前，将二进制值转换为十进制值。让我们试试。\u003c/p\u003e\n\u003cp\u003e获取翻转的次数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; say (\u0026quot;10101\u0026quot;.parse-base(2) +^ \u0026quot;10111\u0026quot;.parse-base(2)).base(2).comb.sum;  # -\u0026gt; 1\n\u0026gt; say (\u0026quot;11101\u0026quot;.parse-base(2) +^ \u0026quot;10111\u0026quot;.parse-base(2)).base(2).comb.sum;  # -\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这当然可行，但需要大量的代码。所以我将使用一个更简单的方法 - 逐个比较每个数字。\u003c/p\u003e\n\u003cp\u003eFile: binary-substring\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e#! /usr/bin/env raku\n\nsubset BinaryString where /^ \u0026lt;[01]\u0026gt;+ $/;                    # [1]\nsubset PosInt of Int where * \u0026gt; 0;                           # [2]\n\nunit sub MAIN (BinaryString $B = '101100101',               # [1]\n               PosInt $S where $B.chars %% $S = 3,          # [2]\n\t       :v(:$verbose));\n\nmy @B     = $B.comb($S.Int);                                # [3]\nmy $first = @B.shift;                                       # [4]\nmy $total = 0;                                              # [5]\n\nfor @B -\u0026gt; $current                                          # [6]\n{\n  my $flip = bit-diff($first, $current);                    # [7]\n  $total += $flip;                                          # [8]\n  say \u0026quot;: $first -\u0026gt; $current -\u0026gt; Flip: $flip\u0026quot; if $verbose;\n}\n\nsay $total;                                                 # [9]\n\nsub bit-diff ($a, $b)                                       # [7]\n{\n  my $flip = 0;                                             # [10]\n\n  for ^$a.chars -\u0026gt; $index                                   # [11]\n  {\n    $flip++ if $a.substr($index,1) ne $b.substr($index,1);  # [12]\n  }\n\n  return $flip;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e[1] 确保二进制字符串是合法的（只包含 \u0026ldquo;0 \u0026ldquo;和 \u0026ldquo;1\u0026rdquo;）。\u003c/p\u003e\n\u003cp\u003e[2] 确保是一个正整数，同时确保字符串是被它偶数分割的。(例如，\u0026ldquo;4 \u0026ldquo;给我们提供了长度为4的子串，如果最后一个较短，程序将中止。)\u003c/p\u003e\n\u003cp\u003e[3] 梳子通常用于将一个字符串分割成单个字符，但我们可以通过指定长度来获得每个子字符串中的多个字符，比如这样。\u003c/p\u003e\n\u003cp\u003e[4] 例子首先将第一个子串与自己进行比较，给出零翻转。这是愚蠢的(ish)，所以我跳过这一点，把第一个子串移出。\u003c/p\u003e\n\u003cp\u003e[5] 结果会到这里。\u003c/p\u003e\n\u003cp\u003e[6] 对于每一个子串（除了第一个，见[4]）。\u003c/p\u003e\n\u003cp\u003e[7] 获取每个子串的翻转次数。\u003c/p\u003e\n\u003cp\u003e[8] 并将其添加到总数中。\u003c/p\u003e\n\u003cp\u003e[9] 打印它。\u003c/p\u003e\n\u003cp\u003e[10] 翻转的数量会在这里。\u003c/p\u003e\n\u003cp\u003e[11] 对于两个子串中的每个索引（具有相同的长度）。\u003c/p\u003e\n\u003cp\u003e[12] - 如果给定位置上的字符不同，则在总数的基础上加1，意味着移动。\u003c/p\u003e\n\u003cp\u003eSee docs.raku.org/routine/comb for more information about comb.\u003c/p\u003e\n\u003cp\u003e运行它。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ./binary-substring \u0026quot;101100101\u0026quot; 3\n 1\n\n$ ./binary-substring -v \u0026quot;101100101\u0026quot; 3\n: 101 -\u0026gt; 100 -\u0026gt; Flip: 1\n: 101 -\u0026gt; 101 -\u0026gt; Flip: 0\n1\n\n$ ./binary-substring \u0026quot;10110111\u0026quot; 4\n2\n\n$ ./binary-substring -v \u0026quot;10110111\u0026quot; 4\n: 1011 -\u0026gt; 0111 -\u0026gt; Flip: 2\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e看起来不错。\u003c/p\u003e\n\u003ch2 id=\"perl\"\u003ePerl\u003c/h2\u003e\n\u003cp\u003e这是对 Raku 版本的直接翻译，只是我必须实现 \u0026ldquo;comb\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e文件： binary-substring-perl\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e#! /usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse feature 'say';\nuse feature 'signatures';\nuse Getopt::Long;\n\nno warnings \u0026quot;experimental::signatures\u0026quot;;\n\nmy $verbose = 0;\n\nGetOptions(\u0026quot;verbose\u0026quot;  =\u0026gt; \\$verbose);\n\nmy $B = shift(@ARGV) // '101100101';\n\ndie \u0026quot;Not a binary number\u0026quot; unless $B =~ /^[01]+$/;\n\nmy $S = shift(@ARGV) // 3;\n\ndie \u0026quot;Not an integer\u0026quot; unless $S =~ /^[1-9][0-9]*$/;\ndie \u0026quot;Not a legal length\u0026quot; if length($B) % $S;\n\nmy @B     =  comb($B, $S);\nmy $first = shift(@B);\nmy $total = 0;\n\nfor my $current (@B)\n{\n  my $flip = bit_diff($first, $current);\n  $total += $flip;\n  say \u0026quot;: $first -\u0026gt; $current -\u0026gt; Flip: $flip\u0026quot; if $verbose;\n}\n\nsay $total;\n\nsub bit_diff ($a, $b)\n{\n  my $flip = 0;\n\n  for my $index (0 .. length($a))\n  {\n    $flip++ if substr($a, $index,1) ne substr($b, $index,1);\n  }\n\n  return $flip;\n}\n\nsub comb ($string, $length = 1)  # [1]\n{\n  my @result;\n\n  while ($string)\n  {\n    push(@result, substr($string, 0, $length));\n    $string = substr($string, $length);\n  }\n  return @result;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e[1] 缺失的 Raku 例程 \u0026ldquo;comb\u0026rdquo;。可选的第二个参数指定了它所返回的每个子串中所包含的（第一个参数的）子串长度。\u003c/p\u003e\n\u003cp\u003e运行它的结果与 Raku 版本相同。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ./binary-substring-perl \u0026quot;101100101\u0026quot; 3\n1\n\n$ ./binary-substring-perl -v \u0026quot;101100101\u0026quot; 3\n: 101 -\u0026gt; 100 -\u0026gt; Flip: 1\n: 101 -\u0026gt; 101 -\u0026gt; Flip: 0\n1\n\n$ ./binary-substring-perl \u0026quot;101100111\u0026quot; 3\n2\n\n$ ./binary-substring-perl -v \u0026quot;101100111\u0026quot; 3\n: 101 -\u0026gt; 100 -\u0026gt; Flip: 1\n: 101 -\u0026gt; 111 -\u0026gt; Flip: 1\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e就是这样。\u003c/p\u003e\n","text":"[113] 发表于2021年1月30日。 这是我对 Perl 每周挑战#097 的回应。\n挑战 #097.1: 凯撒密码 给你一个只包含字母 A..Z 的字符串 $S 和一个数字 $N。 写一个脚本，用凯撒密码对给定的字符串 $S 进行加密，左移大小为 $N。\n例子: 输入: $S = \u0026ldquo;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\u0026rdquo;, $N = 3 输出: \u0026ldquo;QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\u0026rdquo;\nPlain: ABCDEFGHIJKLMNOPQRSTUVWXYZ Cipher: XYZABCDEFGHIJKLMNOPQRSTUVW\nPlaintext: THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG Ciphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\n\u0026ldquo;只用字母 A...Z\u0026rdquo; 的表述是错误的，因为例子中也有几个空格。因此，应该允许这些空格。\n文件: caesar-cipher\n#! /usr/bin/env raku subset AZ-space of Str where /^ \u0026lt;[ A .. Z \\s ]\u0026gt;+ $/; # [1] subset PosInt of Int where -25 \u0026lt;= $_ \u0026lt;= 25; # [2] unit sub MAIN (AZ-space $S = 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG', PosInt $N = 3); # [3] say $S.comb.map({ caesar($_, $N) }).join; # [4] sub caesar ($char, $shift) { return $char if $char eq \u0026quot; \u0026quot;; # [5] my $code = $char.ord; # [6] $code -= $shift; # [7] $code += 26 if $code \u0026lt; 65; # 'A' # [8] $code -= 26 if $code \u0026gt; 90; # 'Z' # [8a] return $code.chr; # [9] } [1] 所允许的字符 (或 «特定领域字母»).\n[2] 挑战说左移值是一个数字。允许除整数以外的任何东西是没有意义的，所以我把值限制在这个类型。负值应该是可以的，它们意味着右移值（而不是左移）。\n[3] 参数，默认值为挑战中给出的值。\n[4] 将字符串分割成单个字符（用梳子(comb)，在每个字符上应用 \u0026ldquo;caesar\u0026rdquo; 函数（用map），再次将字符连接成一个字符串（用join），然后打印出来。\n[5] 不移动空格。\n[6] 获取字符的代码点。\n[7] 减去移位值（当我们向左移位时，或在字母表中降低移位值）。\n[8] 绕回, 如果我们移出A-Z范围，这里为更低 - 或更高的 [8b]。\n[9] 获取指定代码点的字符。\n查看 docs.raku.org/routine/ord 获取更多关于 ord 的信息。\n查看 docs.raku.org/routine/chr 获取更多关于 chr 的信息。\n运行它:\n$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3 QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD $ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3 WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ $ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13 GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT $ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13 GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT Raku 有一个 ords 变体，它接收一整个字符串，而不是一个字符作为 ord。还有 chrs，它接收一个代码点数组，并将它们变成一个字符串，而不是像 chr 那样接收一个字符的代码点。让我们用它们来写一个更短的程序。\n文件: caesar-cipher-map\n#! /usr/bin/env raku subset AZ-space of Str where /^ \u0026lt;[ A .. Z \\s ]\u0026gt;+ $/; subset PosInt of Int where -25 \u0026lt;= $_ \u0026lt;= 25; unit sub MAIN (AZ-space $S = 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG', PosInt $N = 3); say caesar($S, $N); sub caesar ($string, $shift) { return $string.ords.map({$_ == 32 ?? 32 !! (($_ - $shift - 65) % 26 ) + 65}).chrs; # #################### # 1a ############# ############ # 1b # 1c ## 1d } [1] 我们使用map来改变各个代码点。我们让代码点为32的空间单独存在[1a]。每一个其他的值我们都还原成0到25之间的数字（通过减去第一个字母的代码点（A：65）和移位值[1b]）。模数运算符 (%) 为我们处理负值，做正确的事情。例如：-2 % 26 -\u0026gt; 24 [1c]。然后我们添加调整值到它们应该在的位置(从A到Z)[1d]，然后我们将整个数组的代码点变成一个字符串。\n查看 docs.raku.org/routine/ords 获取更多关于 ords 的信息。\n查看 docs.raku.org/routine/chrs 获取更多关于 chrs 的信息。\n运行它的结果和之前一样。\n$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3 QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD $ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3 WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ $ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13 GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT $ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13 GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT Perl 版本 这是对第一个 Raku 版的直接翻译。\nFile: caesar-cipher-perl\n#! /usr/bin/env perl use strict; use warnings; use feature \u0026#39;say\u0026#39;; use feature \u0026#39;signatures\u0026#39;; no warnings \u0026#34;experimental::signatures\u0026#34;; my $S = shift(@ARGV) // \u0026#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\u0026#39;; die \u0026#34;Illegal characters\u0026#34; unless $S =~/^[A-Z\\s]+$/; my $N = shift(@ARGV) // 3; die \u0026#34;Illegal shift $N\u0026#34; if $N !~ /^\\-?\\d+$/ || $N \u0026lt; -25 || $N \u0026gt; 25; say join(\u0026#34;\u0026#34;, map { caesar($_, $N) } split(//, $S)); sub caesar ($char, $shift) { return $char if $char eq \u0026#34; \u0026#34;; my $code = ord($char); $code -= $shift; $code += 26 if $code \u0026lt; 65; # \u0026#39;A\u0026#39; $code -= 26 if $code \u0026gt; 90; # \u0026#39;Z\u0026#39; return chr($code); } 运行它的结果和 Raku 版一样。\n$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3 QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD $ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3 WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ $ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13 GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT $ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13 GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT 挑战 #097.2：二进制子字符串(Binary Substrings) 给你一个二进制字符串 $B 和一个整数 $S。\n写一个脚本来拆分大小为 $S 的二进制字符串 $B，然后找出使其相同的最小翻转次数。\n例 1: 输入: $B = “101100101”, $S = 3 输出: 1\n二进制子字符串: \u0026ldquo;101\u0026rdquo;: 0 flip \u0026ldquo;100\u0026rdquo;: 1 flip to make it \u0026ldquo;101\u0026rdquo; \u0026ldquo;101\u0026rdquo;: 0 flip\n例 2: 输入 $B = “10110111”, $S = 4 输出: 2\n二进制子字符串: \u0026ldquo;1011\u0026rdquo;: 0 flip \u0026ldquo;0111\u0026rdquo;: 2 flips to make it \u0026ldquo;1011\u0026rdquo;\n我们先从第一个例子中的二进制子字符串中砍掉3个字符块。\n\u0026gt; say \u0026quot;101100101\u0026quot;.comb(3); # -\u0026gt; (101 100 101) \u0026gt; say \u0026quot;1011001010\u0026quot;.comb(3); # -\u0026gt; (101 100 101 0) 第二行显示了如果长度不匹配会发生什么。这就给了我们一个非法的值，因为我们不能将一位数翻转为三位数的值。所以我们必须添加一个检查。\n然后我们将第一个子串与其余的子串进行比较，一次一个。在这里使用bitwise XOR（Exclusive OR）运算符是一个合理的选择。这给了我们一个二进制值，其中1的数量就是该子串的翻转次数。Raku确实有一个XOR运算符。+^. 但是它 \u0026ldquo;将两个参数都强制为Int，并进行位智XOR操作\u0026rdquo;(根据文档\u0026quot;；参见docs.raku.org/language/operators#infix_+^)。\n我们可以在进行XOR操作之前，将二进制值转换为十进制值。让我们试试。\n获取翻转的次数。\n\u0026gt; say (\u0026quot;10101\u0026quot;.parse-base(2) +^ \u0026quot;10111\u0026quot;.parse-base(2)).base(2).comb.sum; # -\u0026gt; 1 \u0026gt; say (\u0026quot;11101\u0026quot;.parse-base(2) +^ \u0026quot;10111\u0026quot;.parse-base(2)).base(2).comb.sum; # -\u0026gt; 2 这当然可行，但需要大量的代码。所以我将使用一个更简单的方法 - 逐个比较每个数字。\nFile: binary-substring\n#! /usr/bin/env raku subset BinaryString where /^ \u0026lt;[01]\u0026gt;+ $/; # [1] subset PosInt of Int where * \u0026gt; 0; # [2] unit sub MAIN (BinaryString $B = '101100101', # [1] PosInt $S where $B.chars %% $S = 3, # [2] :v(:$verbose)); my @B = $B.comb($S.Int); # [3] my $first = @B.shift; # [4] my $total = 0; # [5] for @B -\u0026gt; $current # [6] { my $flip = bit-diff($first, $current); # [7] $total += $flip; # [8] say \u0026quot;: $first -\u0026gt; $current -\u0026gt; Flip: $flip\u0026quot; if $verbose; } say $total; # [9] sub bit-diff ($a, $b) # [7] { my $flip = 0; # [10] for ^$a.chars -\u0026gt; $index # [11] { $flip++ if $a.substr($index,1) ne $b.substr($index,1); # [12] } return $flip; } [1] 确保二进制字符串是合法的（只包含 \u0026ldquo;0 \u0026ldquo;和 \u0026ldquo;1\u0026rdquo;）。\n[2] 确保是一个正整数，同时确保字符串是被它偶数分割的。(例如，\u0026ldquo;4 \u0026ldquo;给我们提供了长度为4的子串，如果最后一个较短，程序将中止。)\n[3] 梳子通常用于将一个字符串分割成单个字符，但我们可以通过指定长度来获得每个子字符串中的多个字符，比如这样。\n[4] 例子首先将第一个子串与自己进行比较，给出零翻转。这是愚蠢的(ish)，所以我跳过这一点，把第一个子串移出。\n[5] 结果会到这里。\n[6] 对于每一个子串（除了第一个，见[4]）。\n[7] 获取每个子串的翻转次数。\n[8] 并将其添加到总数中。\n[9] 打印它。\n[10] 翻转的数量会在这里。\n[11] 对于两个子串中的每个索引（具有相同的长度）。\n[12] - 如果给定位置上的字符不同，则在总数的基础上加1，意味着移动。\nSee docs.raku.org/routine/comb for more information about comb.\n运行它。\n$ ./binary-substring \u0026quot;101100101\u0026quot; 3 1 $ ./binary-substring -v \u0026quot;101100101\u0026quot; 3 : 101 -\u0026gt; 100 -\u0026gt; Flip: 1 : 101 -\u0026gt; 101 -\u0026gt; Flip: 0 1 $ ./binary-substring \u0026quot;10110111\u0026quot; 4 2 $ ./binary-substring -v \u0026quot;10110111\u0026quot; 4 : 1011 -\u0026gt; 0111 -\u0026gt; Flip: 2 2 看起来不错。\nPerl 这是对 Raku 版本的直接翻译，只是我必须实现 \u0026ldquo;comb\u0026rdquo;。\n文件： binary-substring-perl\n#! /usr/bin/env perl use strict; use warnings; use feature 'say'; use feature 'signatures'; use Getopt::Long; no warnings \u0026quot;experimental::signatures\u0026quot;; my $verbose = 0; GetOptions(\u0026quot;verbose\u0026quot; =\u0026gt; \\$verbose); my $B = shift(@ARGV) // '101100101'; die \u0026quot;Not a binary number\u0026quot; unless $B =~ /^[01]+$/; my $S = shift(@ARGV) // 3; die \u0026quot;Not an integer\u0026quot; unless $S =~ /^[1-9][0-9]*$/; die \u0026quot;Not a legal length\u0026quot; if length($B) % $S; my @B = comb($B, $S); my $first = shift(@B); my $total = 0; for my $current (@B) { my $flip = bit_diff($first, $current); $total += $flip; say \u0026quot;: $first -\u0026gt; $current -\u0026gt; Flip: $flip\u0026quot; if $verbose; } say $total; sub bit_diff ($a, $b) { my $flip = 0; for my $index (0 .. length($a)) { $flip++ if substr($a, $index,1) ne substr($b, $index,1); } return $flip; } sub comb ($string, $length = 1) # [1] { my @result; while ($string) { push(@result, substr($string, 0, $length)); $string = substr($string, $length); } return @result; } [1] 缺失的 Raku 例程 \u0026ldquo;comb\u0026rdquo;。可选的第二个参数指定了它所返回的每个子串中所包含的（第一个参数的）子串长度。\n运行它的结果与 Raku 版本相同。\n$ ./binary-substring-perl \u0026quot;101100101\u0026quot; 3 1 $ ./binary-substring-perl -v \u0026quot;101100101\u0026quot; 3 : 101 -\u0026gt; 100 -\u0026gt; Flip: 1 : 101 -\u0026gt; 101 -\u0026gt; Flip: 0 1 $ ./binary-substring-perl \u0026quot;101100111\u0026quot; 3 2 $ ./binary-substring-perl -v \u0026quot;101100111\u0026quot; 3 : 101 -\u0026gt; 100 -\u0026gt; Flip: 1 : 101 -\u0026gt; 111 -\u0026gt; Flip: 1 2 就是这样。\n"},"name":"Caesarean Substrings With Raku and Perl","published":"2021-02-07T00:00:00+08:00","summary":"Caesarean Substrings With Raku and Perl","type":"entry","url":"https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/"},{"content":{"html":"\u003ch1 id=\"if-sets-would-dwimhttpsdonaldhwtf202101if-sets-would-dwim\"\u003e\u003ca href=\"https://donaldh.wtf/2021/01/if-sets-would-dwim/\"\u003eIf Sets Would DWIM\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e每当我在 Raku 中使用集合的时候，它们经常无法 \u003ca href=\"https://docs.raku.org/language/glossary#DWIM\"\u003eDWIM\u003c/a\u003e。这是一个简短的探索，看看是否可以改进 DWIMminess。\u003c/p\u003e\n\u003cp\u003e我最近重新审视了我前段时间写的一个利用 \u003ccode\u003e(-)\u003c/code\u003e 集差运算符的脚本。这段代码有一个 bug 潜伏在那里，显而易见，因为下面的代码并没有按照我的直觉去做。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e  my @allowed = \u0026lt;m c i p l o t\u0026gt;;\n  my @chars = 'impolitic'.comb;\n\n  my @remainder = @allowed (-) @chars;\n\n  if +@remainder == 0 {\n     say 'pangram';\n  } else {\n     say \u0026quot;unused: [{@remainder.join(' ')}]\u0026quot;;\n  }\nunused: []\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e错误的原因是 \u003ccode\u003e(-)\u003c/code\u003e 产生了一个 Set，而赋值给 \u003ccode\u003e@remainder\u003c/code\u003e 会产生1项的 Array。总是这样。但不方便的是，当它是一个空集合时，它就会字符串化为一个空字符串，这只是帮助掩盖了这个潜伏的错误。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003emy @items = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b c d e\u0026gt;;\nsay @items.raku;\nsay +@items;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003e[Set.new()]\n1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e解决方法比较简单。只要不赋值给数组就可以了。使用一个标量容器来代替。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003emy $items = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;;\nsay $items.raku;\nsay +$items;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003eSet.new(\u0026quot;e\u0026quot;,\u0026quot;c\u0026quot;)\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e甚至是关联容器也可以。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003emy %items = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;;\nsay %items.raku;\nsay +%items;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003e{:c(Bool::True), :e(Bool::True)}\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e或在赋值前明确地取出键的列表。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003emy @items = (\u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;).keys;\nsay @items.raku;\nsay +@items;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003e[\u0026quot;e\u0026quot;, \u0026quot;c\u0026quot;]\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e很好，起作用了。只是不要用数组容器来处理 \u003ccode\u003eSetty\u003c/code\u003e 这样的东西。只是这并不能阻止我的直觉时不时地碰上这个错误。同一类的 bug 在我的代码中出现过好几次，因为它实在是太容易犯错了。Raku 不会告诉我，我做错了什么，因为也许是故意的。但重要的是， Raku 没有设法 DWIM。\u003c/p\u003e\n\u003cp\u003e我可以采取的另一个方法是养成添加类型信息的习惯。这样确实可以让 Raku 在我掉进这个陷阱的时候告诉我。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003emy Str @a = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003eType check failed in assignment to @a; expected Str but got Set (Set.new(\u0026quot;e\u0026quot;,\u0026quot;c\u0026quot;))\n  in sub  at EVAL_0 line 3\n  in block \u0026lt;unit\u0026gt; at EVAL_0 line 5\n  in block \u0026lt;unit\u0026gt; at -e line 1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这是一个明显的例子，添加类型信息有助于 Raku 编译器帮助我避免引入这种 bug。\u003c/p\u003e\n\u003ch2 id=\"实验---为-set-自定义数组存储\"\u003e实验 - 为 Set 自定义数组存储\u003c/h2\u003e\n\u003cp\u003e我开始研究核心设置(core setting)，看看可以做什么。我惊喜地发现，我可以在 \u003ccode\u003eArray.STORE\u003c/code\u003e 的多重分派中添加我正在寻找的语义。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003euse MONKEY;\n\naugment class Array {\n   multi method STORE(Array:D: Set \\item --\u0026gt; Array:D) {\n       self.STORE(item.keys)\n   }\n}\n\nmy @a = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;;\nsay @a.raku;\nsay +@a;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003e[\u0026quot;c\u0026quot;, \u0026quot;e\u0026quot;]\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e分享这个似乎是谨慎的，看看我的小 DWIM 是否有任何我没有考虑到的问题或缺点。一个可能的缺点是，如果你需要这样做的话，你需要使用 \u003ccode\u003e,\u003c/code\u003e 来强制将一个集合变成一个数组。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003emy @a = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt; , ;\nsay @a.raku;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003e[Set.new(\u0026quot;e\u0026quot;,\u0026quot;c\u0026quot;)]\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"下一步是什么\"\u003e下一步是什么\u003c/h2\u003e\n\u003cp\u003e我希望这能引发关于这个问题以及其他我们的直觉和 Raku 的行为不太一致的情况的讨论。也许还有其他相关的语言边缘可以被磨平，以消除这种危害。\u003c/p\u003e\n\u003ch2 id=\"后续\"\u003e后续\u003c/h2\u003e\n\u003cp\u003e在 \u003ca href=\"https://t.co/0QSoMxrSXf?amp=1\"\u003eReddit\u003c/a\u003e 上有一些非常有启发性的讨论，涵盖了语言语义和各种替代方法。公平地说，我建议的方法引入了更多的不一致性，而不是价值，但讨论可能会导致一个语言一致的解决方案。\u003c/p\u003e\n","text":"If Sets Would DWIM 每当我在 Raku 中使用集合的时候，它们经常无法 DWIM。这是一个简短的探索，看看是否可以改进 DWIMminess。\n我最近重新审视了我前段时间写的一个利用 (-) 集差运算符的脚本。这段代码有一个 bug 潜伏在那里，显而易见，因为下面的代码并没有按照我的直觉去做。\nmy @allowed = \u0026lt;m c i p l o t\u0026gt;; my @chars = 'impolitic'.comb; my @remainder = @allowed (-) @chars; if +@remainder == 0 { say 'pangram'; } else { say \u0026quot;unused: [{@remainder.join(' ')}]\u0026quot;; } unused: [] 错误的原因是 (-) 产生了一个 Set，而赋值给 @remainder 会产生1项的 Array。总是这样。但不方便的是，当它是一个空集合时，它就会字符串化为一个空字符串，这只是帮助掩盖了这个潜伏的错误。\nmy @items = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b c d e\u0026gt;; say @items.raku; say +@items; [Set.new()] 1 解决方法比较简单。只要不赋值给数组就可以了。使用一个标量容器来代替。\nmy $items = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;; say $items.raku; say +$items; Set.new(\u0026quot;e\u0026quot;,\u0026quot;c\u0026quot;) 2 甚至是关联容器也可以。\nmy %items = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;; say %items.raku; say +%items; {:c(Bool::True), :e(Bool::True)} 2 或在赋值前明确地取出键的列表。\nmy @items = (\u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;).keys; say @items.raku; say +@items; [\u0026quot;e\u0026quot;, \u0026quot;c\u0026quot;] 2 很好，起作用了。只是不要用数组容器来处理 Setty 这样的东西。只是这并不能阻止我的直觉时不时地碰上这个错误。同一类的 bug 在我的代码中出现过好几次，因为它实在是太容易犯错了。Raku 不会告诉我，我做错了什么，因为也许是故意的。但重要的是， Raku 没有设法 DWIM。\n我可以采取的另一个方法是养成添加类型信息的习惯。这样确实可以让 Raku 在我掉进这个陷阱的时候告诉我。\nmy Str @a = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;; Type check failed in assignment to @a; expected Str but got Set (Set.new(\u0026quot;e\u0026quot;,\u0026quot;c\u0026quot;)) in sub at EVAL_0 line 3 in block \u0026lt;unit\u0026gt; at EVAL_0 line 5 in block \u0026lt;unit\u0026gt; at -e line 1 这是一个明显的例子，添加类型信息有助于 Raku 编译器帮助我避免引入这种 bug。\n实验 - 为 Set 自定义数组存储 我开始研究核心设置(core setting)，看看可以做什么。我惊喜地发现，我可以在 Array.STORE 的多重分派中添加我正在寻找的语义。\nuse MONKEY; augment class Array { multi method STORE(Array:D: Set \\item --\u0026gt; Array:D) { self.STORE(item.keys) } } my @a = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;; say @a.raku; say +@a; [\u0026quot;c\u0026quot;, \u0026quot;e\u0026quot;] 2 分享这个似乎是谨慎的，看看我的小 DWIM 是否有任何我没有考虑到的问题或缺点。一个可能的缺点是，如果你需要这样做的话，你需要使用 , 来强制将一个集合变成一个数组。\nmy @a = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt; , ; say @a.raku; [Set.new(\u0026quot;e\u0026quot;,\u0026quot;c\u0026quot;)] 下一步是什么 我希望这能引发关于这个问题以及其他我们的直觉和 Raku 的行为不太一致的情况的讨论。也许还有其他相关的语言边缘可以被磨平，以消除这种危害。\n后续 在 Reddit 上有一些非常有启发性的讨论，涵盖了语言语义和各种替代方法。公平地说，我建议的方法引入了更多的不一致性，而不是价值，但讨论可能会导致一个语言一致的解决方案。\n"},"name":"如果集合如我所想","published":"2021-02-07T00:00:00+08:00","summary":"If Sets Would DWIM","type":"entry","url":"https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/"}],"name":"Rakulang","type":"feed","url":"https://ohmyweekly.github.io/tags/rakulang/"}