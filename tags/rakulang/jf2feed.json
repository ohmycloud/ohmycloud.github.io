{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003ch2 id=\"第一章-概要\"\u003e第一章 概要\u003c/h2\u003e\n\u003cp\u003e略\u003c/p\u003e\n\u003ch2 id=\"第二章-基础\"\u003e第二章 基础\u003c/h2\u003e\n\u003cp\u003e假设有一场乒乓球比赛, 比赛结果以这种格式记录：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePlayer1 Player2 | 3:2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这意味着选手1与选手2的比分为 3:2, 你需要一个脚本算出每位选手赢了几场比赛并且胜了几局。输入数据(存储在一个叫做 scores 的文件中)像下面这样：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eBeth Ana Charlie Dave\nAna Dave        | 3:0\nCharlie Beth    | 3:1\nAna Beth        | 2:3\nDave Charlie    | 3:0\nAna Charlie     | 3:1\nBeth Dave       | 0:3\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e第一行是选手清单。随后每一行记录着比赛结果。\u003c/p\u003e\n\u003cp\u003e这里使用 Raku 给出一种解决方案：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"ch\"\u003e#!/usr/bin/env raku\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$file\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003escores\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@names\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$file\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ewords\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# get 方法读入一行, 每调用一次 get, 读取一行\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%matches\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                   \u003cspan class=\"c1\"\u003e# 赢得比赛次数\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%sets\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                      \u003cspan class=\"c1\"\u003e# 赢得比赛局数\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e$file\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elines\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$line\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e                       \u003cspan class=\"c1\"\u003e# .lines 是惰性的\u003c/span\u003e\n    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$pairing\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$line\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e | \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 对剩下的每一行调用 split 操作\u003c/span\u003e\n    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$p1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$p2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e          \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$pairing\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ewords\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# 提取选手1和选手2的名字\u003c/span\u003e\n    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$r1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$r2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e          \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 提取比赛比分\u003c/span\u003e\n\n    \u003cspan class=\"nv\"\u003e%sets\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$p1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$r1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 选手1赢得的比赛局数\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e%sets\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$p2\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$r2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 选手2赢得的比赛局数\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$r1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$r2\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 如果每场比赛中, 选手1赢的局数多于选手2, 则选手1赢得的比赛数+1, 反之选手2的+1\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e%matches\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$p1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e%matches\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$p2\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@sorted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e@names\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e%sets\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nv\"\u003e%matches\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@sorted\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$n\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$n\u003c/span\u003e\u003cspan class=\"s2\"\u003e has won \u003c/span\u003e\u003cspan class=\"nv\"\u003e%matches\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e matches and \u003c/span\u003e\u003cspan class=\"nv\"\u003e%sets\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e sets\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAna has won 2 matches and 8 sets\nDave has won 2 matches and 6 sets\nCharlie has won 1 matches and 4 sets\nBeth has won 1 matches and 4 sets\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e每个 Raku 程序应该以 \u003ccode\u003e#!/usr/bin/env raku\u003c/code\u003e 作为开始。\u003c/p\u003e\n\u003cp\u003e在 Raku 中, 变量名以一个魔符打头, 这个魔符是一个非字母数字符号, 诸如 \u003ccode\u003e$\u003c/code\u003e, \u003ccode\u003e@\u003c/code\u003e, \u003ccode\u003e%\u003c/code\u003e 或者 \u003ccode\u003e\u0026amp;\u003c/code\u003e, 还有更少见的双冒号 \u003ccode\u003e::\u003c/code\u003e。\n内置函数 \u003ca href=\"https://docs.raku.org/routine/open\"\u003eopen\u003c/a\u003e 打开了一个名叫 scores 的文件, 并返回一个文件句柄, 即一个代表该文件的对象。赋值符号 \u003ccode\u003e=\u003c/code\u003e 将句柄赋值给左边的变量, 这意味着 \u003ccode\u003e$file\u003c/code\u003e 现在存储着该文件句柄。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@names\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$file\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ewords\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上边这句的右侧对存储在 \u003ccode\u003e$file\u003c/code\u003e 中的文件句柄调用了 \u003ca href=\"https://docs.raku.org/routine/get\"\u003eget\u003c/a\u003e 方法, \u003ccode\u003eget\u003c/code\u003e 方法从文件中读取并返回一行, 并去掉行的末尾。\u003ca href=\"https://docs.raku.org/routine/words\"\u003e.words\u003c/a\u003e 也是一个方法, 用于从 get 方法返回的字符串上。\u003ccode\u003e.words\u003c/code\u003e 方法将它的组件 - 它操作的字符串, 分解成一组单词, 这里即意味着不含空格的字符串。它把单个字符串 \u0026lsquo;Beth Ana Charlie Dave\u0026rsquo; 转换成一组字符串 \u0026lsquo;Beth\u0026rsquo;, \u0026lsquo;Ana\u0026rsquo;, \u0026lsquo;Charlie\u0026rsquo;, \u0026lsquo;Dave\u0026rsquo;。最后, 这组字符串存储在数组 \u003ccode\u003e@names\u003c/code\u003e 中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%matches\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%sets\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在比分计数程序中, \u003ccode\u003e%matches\u003c/code\u003e 存储每位选手赢得的比赛数, \u003ccode\u003e%sets\u003c/code\u003e 存储每位选手赢得的比赛局数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e$file\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elines\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$line\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003efor 循环中 $file.lines 产生一组从文件 scores 读取的行, 从上次 $file.lines 离开的地方开始, 一直到文件末尾结束。\n在第一次循环中, $line 会包含字符串 \u003ccode\u003eAna Dave | 3:0;\u003c/code\u003e 在第二次循环中, $line 会包含 \u003ccode\u003eCharlie Beth | 3:1\u003c/code\u003e,以此类推。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$pairing\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$line\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e | \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003esplit此处是一个方法, 字符串 \u0026lsquo;|\u0026rsquo; 是它的参数。\u003c/p\u003e\n\u003cp\u003e第一次循环结束：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eVariable       Contents\n$line           'Ana Dave | 3:0'\n$pairing        'Ana Dave'\n$result         '3:0'\n$p1             'Ana'\n$p2             'Dave'\n$r1              '3'\n$r2              '0'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@sorted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e@names\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nv\"\u003e%sets\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nv\"\u003e%matches\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这一句是排序, 先按比赛局数多少排序, 再按赢得的比赛数排序, 然后反转。打印选手名字的时候以胜负次序排序, 代码必须使用选手的分数, 而非他们的名字来进行排序。sort 方法的参数是一个代码块, 用于将数组元素（选手的名字）转换成用于排序的数据。数组的元素通过变量 \u003ccode\u003e$_\u003c/code\u003e 传递到代码块中。\u003c/p\u003e\n\u003cp\u003e最简单的使用分数排序选手的方法应该是:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nv\"\u003e@names\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e%matches\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这是通过使用赢得比赛的次数来进行排序。然而, Ana 和 Dave都赢了两场比赛。还需要比较谁赢的的比赛局数多, 才能决定比赛的排名。\u003c/p\u003e\n\u003cp\u003e在双引号括起的字符串中, 标量和花括号中的变量能进行变量插值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$names\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ethings\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eDo not call me $names\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Do not call me $names\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eDo not call me \u003c/span\u003e\u003cspan class=\"nv\"\u003e$names\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Do not call me things\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e花括号中的数组进行插值后会变成用空格分隔的条目。花括号中的散列插值后每个散列键值对单独成为一行, 每行包含一个健, 随后是一个 tab 制表符, 然后是键值, 最后是一个新行符。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eMath: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u0026#34;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# Math: 3\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@people\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003eLuke Matthew Mark\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe synoptics are: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e@people\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u0026#34;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# The synoptics are: Luke Matthew Mark\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;{\u003c/span\u003e\u003cspan class=\"nv\"\u003e%sets\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u0026#34;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# From the table tennis tournament\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# Charlie 4\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# Dave 6\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# Ana 8\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# Beth 4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当数组和散列变量直接出现在双引号字符串中(并且不在花括号 \u003ccode\u003e{}\u003c/code\u003e 里), 它们只在它们的名字后跟着一个 postcircumfix - 一对括号, 后面跟着语句时才会进行插值。在变量名和后置环缀之间进行方法调用也是可以的(例如 \u003ccode\u003e@flavours.sort()\u003c/code\u003e)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@flavours\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003evanilla peach\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ewe have \u003c/span\u003e\u003cspan class=\"nv\"\u003e@flavours\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# we have @flavours, 这里没进行插值\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ewe have \u003c/span\u003e\u003cspan class=\"nv\"\u003e@flavours\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# we have vanilla, 后置环缀, 变量名字后面跟着一对儿括号\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# so-called \u0026#34;Zen slice\u0026#34;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ewe have \u003c/span\u003e\u003cspan class=\"nv\"\u003e@flavours\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# we have vanilla peach\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# 以后置环缀结尾的方法调用\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ewe have \u003c/span\u003e\u003cspan class=\"nv\"\u003e@flavours\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u0026#34;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# we have peach vanilla\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# 链式方法调用:\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ewe have \u003c/span\u003e\u003cspan class=\"nv\"\u003e@flavours\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esort.join\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e, \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# we have peach, vanilla\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"练习\"\u003e练习\u003c/h3\u003e\n\u003cp\u003e例子中的第一行选手的名字是多余的, 你可以在参加比赛的选手中找出所有选手的名字！如果例子中的第一行被省略了, 你如何更改程序？提示：\u003ccode\u003e%hash.keys\u003c/code\u003e 返回散列 \u003ccode\u003e%hash\u003c/code\u003e 中的所有键。\u003c/p\u003e\n\u003cp\u003e答案: 移除此行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@names\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$file\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ewords\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e并且将\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@sorted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e@names\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nv\"\u003e%sets\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nv\"\u003e%matches\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e变成:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@sorted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e%sets\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekeys\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nv\"\u003e%sets\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nv\"\u003e%matches\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e除了移除冗余, 你也可以用它来提醒我们, 如果一个选手没有在第一行的名字清单中被提到, 例如因为输入错误, 你该怎样修改你的程序？\u003c/p\u003e\n\u003cp\u003e答案: 引入另外一个散列, 合法选手的名字作为键, 当读取选手名字的时候查找该散列：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@names\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$file\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%legitimate-players\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@names\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$n\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e#  -\u0026gt; 两侧要有空格\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e%legitimate-players\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e$file\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elines\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$line\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$pairing\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$line\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e | \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$p1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$p2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$pairing\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n    \n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e$p1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$p2\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$p\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nv\"\u003e%legitimate-players\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$p\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eWarning: \u0026#39;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$p\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e is not on our list!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"第三章-操作符\"\u003e第三章 操作符\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAna\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eDave\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eCharlie\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eBeth\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$screen-width\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$label-area-width\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003emax\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$max-score\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003emax\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$unit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$screen-width\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nv\"\u003e$label-area-width\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"nv\"\u003e$max-score\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$format\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e%- \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nv\"\u003e$label-area-width\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003es\u003c/span\u003e\u003cspan class=\"nv\"\u003e%s\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"nv\"\u003e$format\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eX\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"nb\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$unit\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中, 我们计算一下每位选手在竞标赛中赢得比赛的局数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAna\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eDave\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eCharlie\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eBeth\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这一句局包含了三个不同的操作符 \u003ccode\u003e=\u003c/code\u003e 和 \u003ccode\u003e=\u0026gt;\u003c/code\u003e 和 \u003ccode\u003e,\u003c/code\u003e。以字符串连接操作符 \u003ccode\u003e~\u003c/code\u003e 为例, \u003ccode\u003e$string ~= \u0026quot;text\u0026quot;\u003c/code\u003e 等价于 \u003ccode\u003e$string = $string ~ \u0026quot;text\u0026quot;\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e=\u0026gt;\u003c/code\u003e 操作符(大键号)创建了一个键值对对象, 一个键值对存储着键和值；键在 \u003ccode\u003e=\u0026gt;\u003c/code\u003e 操作符的左侧, 值在右侧。这个操作符有一个特殊的特性：编译器会把 \u003ccode\u003e=\u0026gt;\u003c/code\u003e 操作符左侧的任何裸标识符解释为一个字符串。你也可以这样写：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003eAna\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e, \u003cspan class=\"s\"\u003eDave\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e, \u003cspan class=\"s\"\u003eCharlie\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e, \u003cspan class=\"s\"\u003eBeth\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后逗号操作符 \u003ccode\u003e,\u003c/code\u003e 构建了一个对象序列, 在该情况下, 所谓的对象就是键值对。\u003c/p\u003e\n\u003cp\u003e这三个操作符都是中缀操作符, 这意味着它在两个条目之间。\u003c/p\u003e\n\u003cp\u003e一个项前面可以有0个或多个前缀操作符, 所以你可以写比如 \u003ccode\u003e4 + -5\u003c/code\u003e。\u003ccode\u003e+\u003c/code\u003e 号（一个中缀操作符）的后面, 编译器期望一个项, 为了将 \u003ccode\u003e-\u003c/code\u003e 号解释为项 5 的一个前缀。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$label-area-width\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003emax\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e»\u003c/code\u003e 是一个特殊的符号, 打印不出来可以用两个大于号 \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e 代替。中缀操作符 \u003ccode\u003emax\u003c/code\u003e 返回两个值中的较大者, 所以 \u003ccode\u003e2 max 3\u003c/code\u003e 返回 3。方括号包裹着一个中缀操作符让 Raku 将该中缀操作符应用到列表中的元素之间。\u003ccode\u003e[max] 1,5,3,7\u003c/code\u003e 和 \u003ccode\u003e1 max 5 max 3 max 7\u003c/code\u003e 一样, 结果都为 7。\u003c/p\u003e\n\u003cp\u003e同样地, \u003ccode\u003e[+]\u003c/code\u003e 用来计算列表元素的和, \u003ccode\u003e[*]\u003c/code\u003e 用来计算列表元素的积, \u003ccode\u003e[\u0026lt;=]\u003c/code\u003e 用来检查一个列表的值是否按递增排序。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003eAna\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e, \u003cspan class=\"s\"\u003eDave\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e, \u003cspan class=\"s\"\u003eCharlie\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e, \u003cspan class=\"s\"\u003eBeth\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"n\"\u003eAna\u003c/span\u003e     \u003cspan class=\"mi\"\u003e8\u003c/span\u003e \u003cspan class=\"n\"\u003eDave\u003c/span\u003e  \u003cspan class=\"mi\"\u003e6\u003c/span\u003e \u003cspan class=\"n\"\u003eCharlie\u003c/span\u003e       \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"n\"\u003eBeth\u003c/span\u003e  \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eMethod \u0026#39;key\u0026#39; not found for invocant of class \u0026#39;Array\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eAna Dave Charlie Beth\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e就像 \u003ccode\u003e@variable.method\u003c/code\u003e 在 \u003ccode\u003e@variable\u003c/code\u003e 上调用一个方法一样, \u003ccode\u003e@array».method\u003c/code\u003e 对 \u003ccode\u003e@array\u003c/code\u003e 中的每一项调用 \u003ccode\u003emethod\u003c/code\u003e 方法, 并且返回一个返回值的列表。即 \u003ccode\u003e@scores\u0026gt;\u0026gt;.key\u003c/code\u003e 返回一个列表。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 每个名字含有几个字符\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e4 7 4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e表达式 \u003ccode\u003e[max] @scores».key».chars\u003c/code\u003e 给出 (3,4,7,4) 中的最大值。它与下面的表达式相同：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e\n\u003cspan class=\"nb\"\u003emax\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e\n\u003cspan class=\"nb\"\u003emax\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e\n\u003cspan class=\"nb\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eAna\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eAna\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$format\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e%- \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nv\"\u003e$label-area-width\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003es\u003c/span\u003e\u003cspan class=\"nv\"\u003e%s\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"nv\"\u003e$format\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eX\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"nb\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$unit\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e定义一个格式, \u003ccode\u003e%-\u003c/code\u003e 表示左对齐, \u003ccode\u003e~\u003c/code\u003e 是字符串连接操作符 \u003ccode\u003e.for\u003c/code\u003e 循环中, \u003ccode\u003e@scores\u003c/code\u003e 中的每一项被绑定给特殊变量 \u003ccode\u003e$_\u003c/code\u003e, \u003ccode\u003e.key\u003c/code\u003e 是每项的键, 即名字, \u003ccode\u003e.value\u003c/code\u003e 是每项的键值, 即得分。小 x 是字符串重复操作符。\u003c/p\u003e\n\u003ch3 id=\"关于优先级的的一句话\"\u003e关于优先级的的一句话\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAna\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eDave\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eCharlie\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eBeth\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e等号右侧产生一个列表（因为逗号, 操作符）, 这个列表由对儿组成(因为 \u003ccode\u003e=\u0026gt;\u003c/code\u003e), 并且结果赋值给数组变量。\n在 Perl5 中会这样解释:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@scores\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAna\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e, \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eDave\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eCharlie\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eBeth\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以至于数组 \u003ccode\u003e@scores\u003c/code\u003e 中只有一个项, 表达式的其余部分被计算后丢弃。\u003c/p\u003e\n\u003cp\u003e优先级规则控制着编译器如何解释这一行。Raku 的优先级规则申明 中缀操作符 \u003ccode\u003e=\u0026gt;\u003c/code\u003e 比 \u003ccode\u003e,\u003c/code\u003e 中缀操作符对于参数的绑定更紧, 而逗号操作符比等号赋值操作符绑定的更紧。\u003c/p\u003e\n\u003cp\u003e实际上有两种不同优先级的赋值操作符。当赋值操作符右侧是一个标量时, 使用较紧优先级的项赋值操作符, 否则使用较松优先级的列表赋值操作符。(如同螺丝的松紧)\n比较 \u003ccode\u003e$a = 1, $b = 2\u003c/code\u003e 和 \u003ccode\u003e@a = 1, 2,\u003c/code\u003e 前者是在一个列表中赋值给两个变量, 后者是将含有两个项的一个列表赋值给一个变量。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# 5 - 3.5 = 1.5\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# (-2) / 2 = -1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRaku 中的优先级可以用圆括号改变, 但是如果圆括号直接跟在标识符的后面而不加空格的话, 则会被解释为参数列表。例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# -2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e只打印出了 \u003ccode\u003e5-7\u003c/code\u003e 的值。\u003c/p\u003e\n\u003cp\u003e优先级表\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eexpression\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e名称\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e(), 42.5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e(tightest precedence)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e42.rand\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eterm\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e$x++\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003emethod calls and postcircumfixes\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e$x**2\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eautoincrement and autodecrement\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e?$x, !$x\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eexponentiation operator\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e+$x, ~$x\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eboolean prefix\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e2*3, 7/5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eprefix context operators\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e1+2, 7-5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003emultiplicative infix operators\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e$a x 3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eadditive infix operators\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e$x ~\u0026quot;.nn\u0026quot;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ereplication operators\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e1\u0026amp;2\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003estring concatenation\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eabs $x\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ejunctive OR\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e$x cmp 3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003enamed unary prefix\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e$x == 3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003enon-chaining binary operators\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e$x \u0026amp;\u0026amp; $y\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003echaining binary operators\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e$x\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e$x \u0026gt; 0 ?? 1 !! -1\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003etight OR infix\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e$x = 1\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003econditional operator\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003enot $x\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eitem assignment\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e1, 2\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eloose unary prefix\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e1, 2 Z @a\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ecomma\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e@a = 1, 2\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003elist infix\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e$x and say \u0026ldquo;Yes\u0026rdquo;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003elist prefix, list assignment\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e$x or die \u0026ldquo;No\u0026rdquo;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eloose AND infix\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eloose OR infix\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003estatement terminator\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e(loosest precedence)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"比较和智能匹配\"\u003e比较和智能匹配\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@b\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Bool::True\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nv\"\u003e@b\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Bool::False\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# these use identity for value\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Bool::True\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Bool::True\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Bool::True\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e@b\u003c/span\u003e\u003cspan class=\"o\"\u003e===\u003c/span\u003e\u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# False\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"ow\"\u003eeqv\u003c/span\u003e \u003cspan class=\"nv\"\u003e@b\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# True\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"ow\"\u003eeqv\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# False\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e只有当两个对象有相同的类型和相同的结构时, eqv 操作符才返回 True。在前面定义的例子中, @a  eqv  @b 结果为 True, 因为 @a 和 @b 各自包含相同的值, 另一方面, \u0026lsquo;2\u0026rsquo; eqv 2 返回 \u0026lsquo;False\u0026rsquo; ,因为一个参数是字符串, 另一个是整数, 类型不相同。\u003c/p\u003e\n\u003ch4 id=\"数字比较\"\u003e数字比较\u003c/h4\u003e\n\u003cp\u003e使用 == 中缀操作符查看两个对象是否有相同的数字值。如果某个对象不是数字, Perl 会在比较之前尽力使其数字化。如果没有更好的方式将对象转换为数字, Perl 会使用默认的数字 0 。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# Bool::True\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# Bool::True\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# Bool::False\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e3b\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# fails\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e跟数字比较相关的还有 \u003ccode\u003e\u0026lt;\u003c/code\u003e,\u003ccode\u003e\u0026lt;=\u003c/code\u003e,\u003ccode\u003e\u0026gt;\u003c/code\u003e,\u003ccode\u003e\u0026gt;=\u003c/code\u003e。如果两个对象的数字值不同, 使用 \u003ccode\u003e!=\u003c/code\u003e 会返回 True 。\u003c/p\u003e\n\u003cp\u003e如果你将数组或列表作为数字, 它会计算列表中项的个数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@colors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ered blue green\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e@colors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eIt\u0026#39;s true, \u003c/span\u003e\u003cspan class=\"nv\"\u003e@colors\u003c/span\u003e\u003cspan class=\"s2\"\u003e contains 3 items\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"字符串比较\"\u003e字符串比较\u003c/h4\u003e\n\u003cp\u003eRaku 中使用 eq 比较字符串, 必要时会将其参数转换为字符串。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$greeting\u003c/span\u003e \u003cspan class=\"ow\"\u003eeq\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ewelcome\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTable 3.2: Operators and Comparisons\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e数字比较\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e字符串比较\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e意思\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e==\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eeq\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e等于\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e!=\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ene\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e不等于\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e!==\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e!eq\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e不等于\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lt;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003elt\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e小于\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lt;=\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ele\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e小于或等于\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026gt;\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003egt\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e大于\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026gt;=\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ege\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e大于或等于\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e例如, \u003ccode\u003e'a' lt 'b'\u003c/code\u003e 为 true, \u003ccode\u003e'a' lt 'aa'\u003c/code\u003e 也为 true。 != 是 \u003ccode\u003e!==\u003c/code\u003e 的便捷形式, 它实际是 \u003ccode\u003e!\u003c/code\u003e 元操作符加在 中缀操作符 \u003ccode\u003e==\u003c/code\u003e 之前。同样地, \u003ccode\u003ene\u003c/code\u003e 和 \u003ccode\u003e!eq\u003c/code\u003es 是一样的。\u003c/p\u003e\n\u003cp\u003e三路操作符\u003c/p\u003e\n\u003cp\u003e三路操作符有两个操作数, 如果左侧较小, 返回 Order::Increase , 两侧相等则返回 Order::Same, 如果右侧较小则返回 Order::Decrease。对于数字使用三路操作符 \u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e,对于字符串, 使用三路操作符 \u003ccode\u003eleg\u003c/code\u003e （取自 lesser, equal, greater）。中缀操作符 cmp 是一个对类型敏感的三路操作符, 它像 \u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e 一样比较数字, 像 leg 一样比较字符串, 并且比较键值对儿时, 先比较键, 如果键相同再比较键值：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# +1\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"ow\"\u003eleg\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# because \u0026#39;1\u0026#39; lt \u0026#39;5\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eab\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"ow\"\u003eleg\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# +1, lexicographic comparison\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e三路操作符的典型用处就是用在排序中。列表中的 \u003ccode\u003e.sort\u003c/code\u003e 方法能使用一个含有两个值的块或一个函数, 比较它们, 并返回一个小于, 等于或大于 0 的值。 sort 方法根据该返回值进行排序：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eabstract\u003c/span\u003e \u003cspan class=\"n\"\u003eConcrete\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;.\u003c/span\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# output: Concrete abstract\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eabstract\u003c/span\u003e \u003cspan class=\"n\"\u003eConcrete\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;.\u003c/span\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003euc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"ow\"\u003eleg\u003c/span\u003e \u003cspan class=\"nb\"\u003euc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# output: abstract Concrete\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e默认的, 比较是大小写敏感的, 通过比较它们的大写变形, 而不是比较它们的值, 这个例子使用了大小写敏感排序。\u003c/p\u003e\n\u003ch4 id=\"智能匹配\"\u003e智能匹配\u003c/h4\u003e\n\u003cp\u003e使用 \u003ccode\u003e~~\u003c/code\u003e 做正确的事情。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$pints-drunk\u003c/span\u003e \u003cspan class=\"o\"\u003e~~\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eGo home, you\u0026#39;ve had enough!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$country\u003c/span\u003e \u003cspan class=\"o\"\u003e~~\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eSweden\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eMeatballs with lingonberries and potato moose, please.\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"nv\"\u003e$group-size\u003c/span\u003e \u003cspan class=\"o\"\u003e~~\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eYou must have between 2 and 4 people to book this tour.\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e智能匹配总是根据 \u003ccode\u003e~~\u003c/code\u003e 右侧值的类型来决定使用哪种比较。上个例子中, 比较的是数字、字符串和范围。\n智能匹配的工作方式 \u003ccode\u003e$answer ~~ 42\u003c/code\u003e 等价于 \u003ccode\u003e42.ACCPETS( $answer )\u003c/code\u003e。对 \u003ccode\u003e~~\u003c/code\u003e 操作符右侧的操作数调用 ACCEPTS 方法, 并将左操作数作为参数传入。\u003c/p\u003e\n\u003ch2 id=\"第四章-子例程和签名\"\u003e第四章 子例程和签名\u003c/h2\u003e\n\u003cp\u003e一个子例程就是一段执行特殊任务的代码片段。它可以对提供的数据(\u003ccode\u003e实参\u003c/code\u003e)操作, 并产生结果（返回值）。子例程的签名是它\u003ccode\u003e所含的参数\u003c/code\u003e和它产生的\u003ccode\u003e返回值\u003c/code\u003e的描述。从某一意义上来说, 第三章描述的操作符也是 Raku 用特殊方式解释的子例程。\u003c/p\u003e\n\u003ch3 id=\"申明子例程\"\u003e申明子例程\u003c/h3\u003e\n\u003cp\u003e子例程申明由几部分组成。首先, \u003ccode\u003esub\u003c/code\u003e 表明你在申明一个子例程, 然后是可选的子例程的名称和可选的签名。子例程的主体是一个用花括号扩起来的代码块。\n默认的, 子例程是本地作用域的, 就像任何使用 \u003ccode\u003emy\u003c/code\u003e 申明的变量一样。这意味着, 一个子例程只能在它被申明的作用域内被调用。使用 \u003ccode\u003eour\u003c/code\u003e 来申明子例程可以使其在当前包中可见。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eour\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eom nom nom\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003edrink\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eglug glug\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eour\u003c/span\u003e \u003cspan class=\"nv\"\u003e\u0026amp;eat\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# makes the package-scoped sub eat available in this lexical scope\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# om nom nom\u003c/span\u003e\n\u003cspan class=\"nf\"\u003edrink\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 失败, can\u0026#39;t drink outside of the block\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eour 也能让子例程从包或模块的外部是可见的：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eEatAndDrink\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eour\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eom nom nom\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003edrink\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eglug glug\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eEatAndDrink::eat\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e# om nom nom\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eEatAndDrink::drink\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e# fails, not declared with \u0026#34;our\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你也可以\u003ccode\u003e导出\u003c/code\u003e一个子例程, 让它在另外的作用域内可见。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"c1\"\u003e# in file Math/Trivial.pm\u003c/span\u003e\n\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eMath::Trivial\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003edouble\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后在其它程序或模块中你可以这样写:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eMath::Trivial\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# imports sub double\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nf\"\u003edouble\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# 21 is only half the truth\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRaku 的子例程都是对象。你可以将它们随意传递并存储在数据结构中。编程语言设计者常常将它们称之为 first-class 子例程；它们就像数组和散列一样作为语言的基础。\u003c/p\u003e\n\u003cp\u003eFirst-class 子例程能帮助你解决复杂的问题。例如, 为了做出一个微型的ASCII艺术舞蹈图, 你可能要建立一个散列, 键是舞蹈动作的名称, 键值是匿名散列。假使使用者能键入一系列舞蹈动作（可能是站在舞蹈平台上或其它外部输入设备）。 你怎么保持一个变量清单中都是合法的行为, 允许使用者输入, 并限制输入是一系列安全的行为呢？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%moves\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n\u003cspan class=\"s\"\u003ehands-over-head\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e/o\\ \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e,\n\u003cspan class=\"s\"\u003ebird-arms\u003c/span\u003e             \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e|/o\\| \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;}\u003c/span\u003e,\n\u003cspan class=\"s\"\u003eleft\u003c/span\u003e                  \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026gt;o \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e   \u003cspan class=\"p\"\u003e}\u003c/span\u003e,\n\u003cspan class=\"s\"\u003eright\u003c/span\u003e                 \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eo\u0026lt; \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e   \u003cspan class=\"p\"\u003e}\u003c/span\u003e,\n\u003cspan class=\"s\"\u003earms-up\u003c/span\u003e               \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\\o/ \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@awesome-dance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003earms-up bird-arms right hands-over-head\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@awesome-dance\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$move\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e%moves\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$move\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 在散列上调用方法\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003eoutputs:\n \\o/\n|/o\\|\n  o\u0026lt;\n /o\\.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"adding-signatures\"\u003eAdding Signatures\u003c/h3\u003e\n\u003cp\u003e子例程的签名执行两个任务。首先, 它申明哪个调用者可能或必须将参数传递给子例程。第二, 它申明子例程中的变量被绑定到哪些参数上。这些变量叫做参数。Raku 的签名更深入, 它们允许你限制参数的类型, 值和参数的定义, 并准确匹配复杂数据结构的某一部分。此外, 它们也允许你显式地指定子例程返回值的类型。\u003c/p\u003e\n\u003ch4 id=\"基础\"\u003e基础\u003c/h4\u003e\n\u003cp\u003e签名最简单的形式是, 绑定到输入参数上的用逗号分隔的一列变量的名字。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eorder-beer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$type\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$pints\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$pints\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eA pint\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e!!\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$pints\u003c/span\u003e\u003cspan class=\"s2\"\u003e pints\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;)\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e of \u003c/span\u003e\u003cspan class=\"nv\"\u003e$type\u003c/span\u003e\u003cspan class=\"s2\"\u003e, please.\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eorder-beer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eHobgoblin\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# A pint of Hobgoblin, please.\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eorder-beer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eZlatý Bažant\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 3 pints of Zlatý Bažant, please.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里使用的关系绑定而非赋值就是签名。默认地, 在 Raku 中, 子例程中引用到传入参数的签名的变量是只读的。这意味着你不能从子例程内部修改它们。\n如果只读绑定太受限制了, 你可以将 \u003ccode\u003eis rw\u003c/code\u003e (rw 是 read/write 的缩写) 特性应用到参数上以降低这种限制。这个特性说明参数是可读可写的, 这允许你从子例程内部修改参数。使用的时候必须小心, 因为它会修改传入的原始对象。如果你试图传入一个字面值, 一个常量, 或其它类型的不可变对象到一个有 \u003ccode\u003eis rw\u003c/code\u003e 特性的参数中, 绑定会在调用时失败并抛出异常:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003emake-it-more-so\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$it\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"k\"\u003erw\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$it\u003c/span\u003e \u003cspan class=\"o\"\u003e~=\u003c/span\u003e \u003cspan class=\"nb\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$it\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$it\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nb\"\u003ex\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$happy\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eyay!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"nf\"\u003emake-it-more-so\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$happy\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$happy\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# yay!!!!!!   # 原始传入对象被修改了\u003c/span\u003e\n\u003cspan class=\"nf\"\u003emake-it-more-so\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003euh-oh\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 失败, 不能修改一个常量\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你想将参数的本地副本用在子例程内部而不改变调用者的变量, 使用 \u003ccode\u003eis copy\u003c/code\u003e 特性：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003esay-it-one-higher\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$it\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"nb\"\u003ecopy\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$it\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$it\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$unanswer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e41\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nf\"\u003esay-it-one-higher\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$unanswer\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 42\u003c/span\u003e\n\u003cspan class=\"nf\"\u003esay-it-one-higher\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e41\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e        \u003cspan class=\"c1\"\u003e# 42\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$unanswer\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                \u003cspan class=\"c1\"\u003e# 41\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在诸如 \u003ccode\u003eC/C++\u003c/code\u003e 和 Scheme 等其它类型的编程语言中,这种广为人知的求值策略就是按值传递。当使用 \u003ccode\u003eis copy\u003c/code\u003e 特性时, 只有本地副本被赋值。其它任何传递给子例程的参数在调用者的作用域内保持不变。（一个不可变对象是当这个对象被创建后, 它的状态不会改变, 作为比较, 一个可变对象的状态在创建后是会被改变的）\u003c/p\u003e\n\u003ch4 id=\"传递数组散列和代码\"\u003e传递数组、散列和代码\u003c/h4\u003e\n\u003cp\u003e一个变量的魔符表明它的本意用途。在签名中, 变量的魔符也起着限制传入的参数类型的作用。例如, \u003ccode\u003e@\u003c/code\u003e 符号检查传入的对象行使位置角色（一个角色包含像数组和列表的类型）。如果传递的东西不能匹配这样的限制, 会引起调用失败：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eshout-them\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@words\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@words\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$w\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"nb\"\u003euc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$w\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@last_words\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003edo not want\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eshout-them\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@last_words\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# DO NOT WANT\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eshout-them\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehelp\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# 失败了, 字符串不是位置参数\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e类似地, \u003ccode\u003e%\u003c/code\u003e 符号表明调用者必须传递一个行使关系角色的对象；即允许通过 \u003ccode\u003e\u0026lt;...\u0026gt;\u003c/code\u003e 或 \u003ccode\u003e{...}\u003c/code\u003e 进行索引的东西。 \u003ccode\u003e\u0026amp;\u003c/code\u003e 符号要求调用者传递一个诸如匿名散列之类的行使能调用的角色的对象。在那种情况下, 你也可以不用 \u003ccode\u003e\u0026amp;\u003c/code\u003e 符号调用可调用的参数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003edo-it-lots\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e\u0026amp;it\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$how-many-times\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"nv\"\u003e$how-many-times\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nf\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003edo-it-lots\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eEating a stroopwafel\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 此处是一个匿名子例程\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e标量使用 \u003ccode\u003e$\u003c/code\u003e 符号, 并表明没有限制。什么都可以绑定在它上面, 即使它使用另外的符号绑定到一个对象上。\u003c/p\u003e\n\u003ch4 id=\"插值数组和散列\"\u003e插值、数组和散列\u003c/h4\u003e\n\u003cp\u003e有时你想从数组中填充占位参数。你可以通过在数组前添加一个垂直竖条或管道字符 ( \u003ccode\u003e|\u003c/code\u003e ): \u003ccode\u003eeat(|@food)\u003c/code\u003e, 而不是写作 \u003ccode\u003eeat(@food[0], @food[1], @food[2], ...)\u003c/code\u003e 等将它们吸进参数列表( \u003ccode\u003e|\u003c/code\u003e 像不像一个吸管, ^_^)。\u003c/p\u003e\n\u003cp\u003e同样地, 你可以将散列插值进具名参数:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eorder-shrimps\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$count\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$from\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eI\u0026#39;d like \u003c/span\u003e\u003cspan class=\"nv\"\u003e$count\u003c/span\u003e\u003cspan class=\"s2\"\u003e pieces of shrimp from the \u003c/span\u003e\u003cspan class=\"nv\"\u003e$from\u003c/span\u003e\u003cspan class=\"s2\"\u003e, please\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%user-preferences\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003efrom\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eNorthern Sea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eorder-shrimps\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nv\"\u003e%user-preferences\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# I\u0026#39;d like 3 pieces of shrimp from the Northern Sea, please\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"可选参数\"\u003e可选参数\u003c/h4\u003e\n\u003cp\u003e为使参数可选, 要么给签名的参数赋值为默认值：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eorder-steak\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$how\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emedium\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eI\u0026#39;d like a steak, \u003c/span\u003e\u003cspan class=\"nv\"\u003e$how\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eorder-steak\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eorder-steak\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ewell done\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者在参数名字的后面添加一个问号(?):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eorder-burger\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$type\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$side\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eI\u0026#39;d like a \u003c/span\u003e\u003cspan class=\"nv\"\u003e$type\u003c/span\u003e\u003cspan class=\"s2\"\u003e burger\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nb\"\u003edefined\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$side\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e with a side of \u003c/span\u003e\u003cspan class=\"nv\"\u003e$side\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e!!\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eorder-burger\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003etriple bacon\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003edeep fried onion rings\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果没有参数被传递, 参数会被绑定成一个未定义的值。\u003ccode\u003edefined(...)\u003c/code\u003e 函数用来检查是否有值。\u003c/p\u003e\n\u003ch4 id=\"强制参数\"\u003e强制参数\u003c/h4\u003e\n\u003cp\u003e默认地, 位置参数是必不可少的。然而, 你可以通过在参数后面追加一个感叹号来显式地指定该参数是必须的：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eorder-drink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$size\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$flavor\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$size\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e$flavor\u003c/span\u003e\u003cspan class=\"s2\"\u003e, coming right up!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eorder-drink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLarge\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eMountain Dew\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OK\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eorder-drink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eSmall\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e# Error\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"具名实参和形参\"\u003e具名实参和形参\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003earguments  实参\u003c/li\u003e\n\u003cli\u003eparameters 形参\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当一个子例程有很多参数时, 调用者很难记清传递参数的顺序。这种情况下, 通过名字传递参数往往更容易。这样, 参数出现的顺序就无关紧要了:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eorder-beer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$type\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$pints\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$pints\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eA pint\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e!!\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$pints\u003c/span\u003e\u003cspan class=\"s2\"\u003e pints\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;)\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e of \u003c/span\u003e\u003cspan class=\"nv\"\u003e$type\u003c/span\u003e\u003cspan class=\"s2\"\u003e, please.\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eorder-beer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eHobgoblin\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e, \u003cspan class=\"s\"\u003epints\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# A pint of Hobgoblin, please.\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eorder-beer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003epints\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e, \u003cspan class=\"s\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eZlatý Bažant\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 3 pints of Zlatý Bažant, please.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你也可以指定参数只能按名字被传递（这意味着它不允许按位置传递）。这样的话, 在参数名字前加一个冒号：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eorder-shrimps\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$count\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$from\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eNorthern Sea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eI\u0026#39;d like \u003c/span\u003e\u003cspan class=\"nv\"\u003e$count\u003c/span\u003e\u003cspan class=\"s2\"\u003e pieces of shrimp from the \u003c/span\u003e\u003cspan class=\"nv\"\u003e$from\u003c/span\u003e\u003cspan class=\"s2\"\u003e, please\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eorder-shrimps\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# takes \u0026#39;Northern Sea\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eorder-shrimps\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003efrom\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAtlantic Ocean\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eorder-shrimps\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e22\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eMediterranean Sea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# 不允许, :$from is named only\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e不像位置参数, 命名参数默认是可选的。在命名参数后面追加一个 \u003ccode\u003e!\u003c/code\u003e 号使命名参数强制性存在。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003edesign-ice-cream-mixture\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$base\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eVanilla\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$name\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eCreating a new recipe named \u003c/span\u003e\u003cspan class=\"nv\"\u003e$name\u003c/span\u003e\u003cspan class=\"s2\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003edesign-ice-cream-mixture\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ePlain\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003cspan class=\"nf\"\u003edesign-ice-cream-mixture\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eStrawberry chip\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 错误\u003c/span\u003e,\u003cspan class=\"n\"\u003e没有指定\u003c/span\u003e \u003cspan class=\"nv\"\u003e$name\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e重命名参数\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e因为按名字传递实参给形参是合理的, 形参的名字应该应该作为子例程公共 API 的一部分被考虑在内. 小心地挑选它们吧! 有时候, 使用一个名字暴露形参而使用另外一个名字绑定到变量会很方便:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eannounce-time\u003c/span\u003e\u003cspan class=\"p\"\u003e(:\u003c/span\u003e\u003cspan class=\"s\"\u003edinner\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$supper\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e8pm\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eWe eat dinner at \u003c/span\u003e\u003cspan class=\"nv\"\u003e$supper\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eannounce-time\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003edinner\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e9pm\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# We eat dinner at 9pm\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e参数可以有多个名字, 如果你的用户有些是英国人, 有些是美国人, 你可能这样写：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003epaint-rectangle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$width\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$height\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e(:\u003c/span\u003e\u003cspan class=\"s\"\u003ecolour\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$c\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# print a piece of SVG that represents a rectangle\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003eqq\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;rect x=\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34; y=\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34; width=\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$width\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34; height=\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$height\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34; \u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# both calls work the same\u003c/span\u003e\n\u003cspan class=\"n\"\u003epaint-rectangle\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003eBlue\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\u003cspan class=\"n\"\u003epaint-rectangle\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ecolour\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003eBlue\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# of course you can still fill the other options\u003c/span\u003e\n\u003cspan class=\"n\"\u003epaint-rectangle\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ecolour\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003eBlue\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e可选的命名参数语法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e命名变量通常是成对的（键值对）。写一个 \u003ccode\u003ePairs\u003c/code\u003e 有多种方式。各种方法的不同之处就是清晰性, 因为每种选择提供不同的引述机制。下面的三种调用是一样的意思：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nf\"\u003eannounce-time\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003edinner\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e9pm\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eannounce-time\u003c/span\u003e\u003cspan class=\"p\"\u003e(:\u003c/span\u003e\u003cspan class=\"s\"\u003edinner\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e9pm\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;));\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eannounce-time\u003c/span\u003e\u003cspan class=\"p\"\u003e(:\u003c/span\u003e\u003cspan class=\"s\"\u003edinner\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e9pm\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果传递的是布尔值, 你可以省略键值对的键值：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nf\"\u003etoggle-blender\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eenabled\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# enables the blender 开启果汁机\u003c/span\u003e\n\u003cspan class=\"nf\"\u003etoggle-blender\u003c/span\u003e\u003cspan class=\"p\"\u003e(:!\u003c/span\u003e\u003cspan class=\"s\"\u003eenabled\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# disables the blender 关闭果汁机\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e形如 \u003ccode\u003e:name\u003c/code\u003e 但不带值的命名参数有一个隐式的布尔真值 \u003ccode\u003eBool::True\u003c/code\u003e。它的对立形式是 \u003ccode\u003e:!name\u003c/code\u003e , 其值是隐式的布尔假值 \u003ccode\u003eBool::false\u003c/code\u003e。如果你使用变量创建了一个 \u003ccode\u003ePair\u003c/code\u003e, 你可以将变量名作为 \u003ccode\u003ePair\u003c/code\u003e 的键复用.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$dinner\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e9pm\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eannounce-dinner\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$dinner\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# same as dinner =\u0026gt; $dinner;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e                        Pair forms and their meanings.\n\n    Shorthand      Long form                          Description\n:allowed           allowed =\u0026gt; Bool::True               Boolean flag\n:!allowed          allowed =\u0026gt; Bool::False              Boolean flag\n:bev\u0026lt;tea coffee\u0026gt;   bev =\u0026gt; ('tea', 'coffee')            List\n:times[1, 3]       times =\u0026gt; [1, 3]                     Array\n:opts{ a =\u0026gt; 2 }    opts =\u0026gt; { a =\u0026gt; 2 }                  Hash\n:$var              var =\u0026gt; $var Scalar                  variable\n:@var              var =\u0026gt; @var Array                   variable\n:%var              var =\u0026gt; %var Hash                    variable\n:\u0026amp;var              vaf =\u0026gt; \u0026amp;var Callable/ Subroutine    variable\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e你可以使用在任何可以使用 Pair 对象的上下文使用表中的任意一种形式. 例如, 生成散列:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"c1\"\u003e# TODO: better example\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$black\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%color-popularities\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$black\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003ered\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e, \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ewhite\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# 与此相同：\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# my %color-popularities =\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# black =\u0026gt; 12,\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# blue =\u0026gt; 8,\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# red =\u0026gt; 18,\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# white =\u0026gt; 0;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后, 通过位置而非名字传递一个已存在的 Pair 对象到子例程中, 要么把它放在圆括号中 ( 就像 (\u003ccode\u003e:$thing\u003c/code\u003e) ), 或者使用 \u003ccode\u003e=\u0026gt;\u003c/code\u003e 操作符引起左侧的字符串: \u003ccode\u003e\u0026quot;thing\u0026quot; =\u0026gt; $thing\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e参数的顺序\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e当位置参数和命名参数都出现在签名中时, 所有的位置参数都要出现在命名参数之前：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003emix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@ingredients\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OK\u003c/span\u003e\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003enotmix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$name\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e@ingredients\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Error\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e必须的位置参数要在可选的位置参数之前。然而, 命名参数没有这种限制。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ecopy-machine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$amount\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eA4\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$color\u003c/span\u003e\u003cspan class=\"o\"\u003e!,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$quality\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OK\u003c/span\u003e\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003efax-machine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$amount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$number\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Error\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"slurpy-参数\"\u003eSlurpy 参数\u003c/h4\u003e\n\u003cp\u003e有时候, 你会希望让子例程接受任何数量的参数, 并且将所有这些参数收集到一个数组中。为了达到这个目的, 给签名添加一个数组参数, 就是在数组前添加一个 \u003ccode\u003e*\u003c/code\u003e 号前缀：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eshout-them\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nv\"\u003e@words\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@words\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$w\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"nb\"\u003euc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$w\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# 现在你可以传递项\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eshout-them\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ego\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# GO\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eshout-them\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ego\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehome\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# GO HOME\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e除了集合所有的值之外, slurpy 参数会展平任何它接收到的数组, 最后你只会得到一个展平的列表, 因此：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@words\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ego\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehome\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eshout-them\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@words\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e会导致 \u003ccode\u003e*@words\u003c/code\u003e 参数有两个字符串元素, 而非只有单个数组元素。\u003c/p\u003e\n\u003cp\u003e你可以选择将某些参数捕获到位置参数中, 并让其它参数被吸进数组参数里。这种情况下, \u003ccode\u003eslupy\u003c/code\u003e 应该放到最后。相似地, \u003ccode\u003e*%hash\u003c/code\u003e slurps 所有剩下的未绑定的命名参数到散列 \u003ccode\u003e%hash\u003c/code\u003e 中。\u003ccode\u003eSlurpy\u003c/code\u003e 数组和散列允许你传递所有的位置参数和命名参数到另一个子例程中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003edebug-wrapper\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e\u0026amp;code\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nv\"\u003e@positional\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nv\"\u003e%named\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003ewarn\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eCalling \u0026#39;\u003c/span\u003e\u003cspan class=\"nv\"\u003e\u0026amp;code\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39; with arguments \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e@positional\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eperl\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"s2\"\u003e, \u003c/span\u003e\u003cspan class=\"nv\"\u003e%named\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eperl\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nv\"\u003e@positional\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nv\"\u003e%named\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003ewarn\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e... back from \u0026#39;\u003c/span\u003e\u003cspan class=\"nv\"\u003e\u0026amp;code\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003edebug-wrapper\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e\u0026amp;order-shrimps\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003efrom\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAtlantic Ocean\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"返回值\"\u003e返回值\u003c/h3\u003e\n\u003cp\u003e子例程也能返回值。之前本章中的 ASCII 艺术舞蹈例子会更简单当每个子例程返回一个新字符串：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%moves\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003ehands-over-head\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e/o\\ \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e   \u003cspan class=\"p\"\u003e}\u003c/span\u003e,\n            \u003cspan class=\"s\"\u003ebird-arms\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e|/o\\| \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e,\n            \u003cspan class=\"s\"\u003eleft\u003c/span\u003e            \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026gt;o \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e,\n            \u003cspan class=\"s\"\u003eright\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eo\u0026lt; \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e,\n            \u003cspan class=\"s\"\u003earms-up\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\\o/ \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e   \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@awesome-dance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003earms-up bird-arms right hands-over-head\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@awesome-dance\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$move\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"nv\"\u003e%moves\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$move\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e子例程也能返回多个值（译者注：那不就是返回一个列表嘛）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003emenu\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003erand\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003efish\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ewhite wine\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esteak\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ered wine\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$food\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$beverage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003emenu\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你把 return 语句排除在外, 则在子例程内部运行的最后一个语句产生的值被返回。这意味着前一个例子可以简化为：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003emenu\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003erand\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003efish\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ewhite wine\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esteak\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ered wine\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$food\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$beverage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003emenu\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e记得：当子例程中的控制流极其复杂时, 添加一个显式的 return 会让代码更清晰, 所以 return 还是加上的好。\nreturn 另外的副作用就是执行后立即退出子例程：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ecreate-world\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nv\"\u003e%characteristics\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$world\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eWorld\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e%characteristics\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$world\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e%characteristics\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003etemporary\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\n    \u003cspan class=\"nf\"\u003esave-world\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$world\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u0026hellip;并且你最好别放错你的新单词 \u003ccode\u003e$word\u003c/code\u003e 如果它是临时的。因为这是你要获取的仅有的一个。\u003c/p\u003e\n\u003ch3 id=\"返回值的类型\"\u003e返回值的类型\u003c/h3\u003e\n\u003cp\u003e像其它现代语言一样, Raku 允许你显式地指定子例程返回值的类型。这允许你限制从子例程中返回的值的类型。使用 \u003ccode\u003ereturns\u003c/code\u003e 特性可以做到这样：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003edouble-up\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturns\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$i\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ultimate-answer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003edouble-up\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 42\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当然, 使用这个 \u003ccode\u003ereturns\u003c/code\u003e 特性是可选的\u003c/p\u003e\n\u003ch3 id=\"working-with-types\"\u003eWorking With Types\u003c/h3\u003e\n\u003cp\u003e很多子例程不能完整意义上使用任意参数工作, 但是要求参数支持确定的方法或有其它属性。这种情况下, 限制参数类型就有意义了, 诸如传递不正确值作为参数, 当调用子例程时, 这会引起 Raku 发出错误, 或者甚至在编译时, 如果编译器足够聪明来捕捉错误。\u003c/p\u003e\n\u003ch4 id=\"基本类型\"\u003e基本类型\u003c/h4\u003e\n\u003cp\u003e最简单的限制子例程接收可能的值的方法是在参数前写上类型名。例如, 一个子例程对其参数执行数值计算, 这要求它的参数类型是 Numeric：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003emean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNumeric\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNumeric\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003emean\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.5\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003emean\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esome\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e产生输出：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eNominal type check failed for parameter \u0026#39;$a\u0026#39;;\nexpected Numeric but got Str instead\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003enominal 类型是一个人实际类型的名字, 这里是 Numeric。\n如果多个参数有类型限制, 每个参数必须填充它绑定的参数限制的类型\u003c/p\u003e\n\u003ch4 id=\"添加限制\"\u003e添加限制\u003c/h4\u003e\n\u003cp\u003e有时, 类型的名字不足以描述参数的要求。这种情况下, 你可能使用 \u003ccode\u003ewhere\u003c/code\u003e 代码块添加一个额外的限制：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ecircle-radius-from-area\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eReal\u003c/span\u003e \u003cspan class=\"nv\"\u003e$area\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$area\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$area\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"no\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esqrt\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nf\"\u003ecircle-radius-from-area\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# OK\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nf\"\u003ecircle-radius-from-area\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Error\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因为这种计算只对非负面积值有意义, 该子例程的参数包含了一个限制, 对于非负值它会返回真。如果这个限制返回一个假的值, 类型检查会失败, 当有些东西调用该子例程时。\u003c/p\u003e\n\u003cp\u003ewhere 之后的代码块是可选的。Raku 通过通过智能匹配 where 后面的参数来执行检查。\n例如, 它可能接受在某一确定范围中的参数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eset-volume\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNumeric\u003c/span\u003e \u003cspan class=\"nv\"\u003e$volume\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eTurning it up to \u003c/span\u003e\u003cspan class=\"nv\"\u003e$volume\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者你可以将参数限制为散列的键：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%in-stock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eStaropramen\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eMori\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLa Trappe\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eorder-beer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eStr\u003c/span\u003e \u003cspan class=\"nv\"\u003e$name\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"nv\"\u003e%in-stock\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eHere\u0026#39;s your \u003c/span\u003e\u003cspan class=\"nv\"\u003e$name\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e%in-stock\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$name\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e%in-stock\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$name\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eOH NO! That was the last \u003c/span\u003e\u003cspan class=\"nv\"\u003e$name\u003c/span\u003e\u003cspan class=\"s2\"\u003e, folks! :\u0026#39;(\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e%in-stock\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$name\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n     \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"抽象参数和具体参数\"\u003e抽象参数和具体参数\u003c/h3\u003e\n\u003cp\u003e下面检测变量是否定义。在 Raku 中这样写:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(Int:D $arg) {\u003c/span\u003e\n     \u003cspan class=\"c1\"\u003e# Do something\u003c/span\u003e\n \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e留意附加在参数类型后面的 \u003ccode\u003e:D\u003c/code\u003e 笑脸。这个动词表明给定的参数必须被绑定到一个具体的对象上。如果不是的话, 会抛出一个运行时异常。这就是为什么它那么高兴！作为对比, 动词 \u003ccode\u003e:U\u003c/code\u003e 用于表明该参数需要一个未定义的或抽象的对象。此外, 动词 \u003ccode\u003e:_\u003c/code\u003e 允许定义或未定义的值。实际上, 使用 \u003ccode\u003e:_\u003c/code\u003e 有点多余。\u003c/p\u003e\n\u003cp\u003e最后, 动词 \u003ccode\u003e:T\u003c/code\u003e 能用于表明参数只能是类型对象, 例如\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003esay-foobar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eT\u003c/span\u003e \u003cspan class=\"nv\"\u003e$arg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eFOOBAR!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003esay-foobar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# FOOBAR!\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"第一章 概要 略\n第二章 基础 假设有一场乒乓球比赛, 比赛结果以这种格式记录：\nPlayer1 Player2 | 3:2 这意味着选手1与选手2的比分为 3:2, 你需要一个脚本算出每位选手赢了几场比赛并且胜了几局。输入数据(存储在一个叫做 scores 的文件中)像下面这样：\nBeth Ana Charlie Dave Ana Dave | 3:0 Charlie Beth | 3:1 Ana Beth | 2:3 Dave Charlie | 3:0 Ana Charlie | 3:1 Beth Dave | 0:3 第一行是选手清单。随后每一行记录着比赛结果。\n这里使用 Raku 给出一种解决方案：\n#!/usr/bin/env raku my $file = open \u0026#39;scores\u0026#39;; my @names = $file.get.words ; # get 方法读入一行, 每调用一次 get, 读取一行 my %matches; # 赢得比赛次数 my %sets; # 赢得比赛局数 for $file.lines -\u0026gt; $line { # .lines 是惰性的 my ($pairing, $result) = $line.split(\u0026#39;| \u0026#39;); # 对剩下的每一行调用 split 操作 my ($p1, $p2) = $pairing.words; # 提取选手1和选手2的名字 my ($r1, $r2) = $result.split(\u0026#39;:\u0026#39;); # 提取比赛比分 %sets{$p1} += $r1; # 选手1赢得的比赛局数 %sets{$p2} += $r2; # 选手2赢得的比赛局数 if $r1 \u0026gt; $r2 { # 如果每场比赛中, 选手1赢的局数多于选手2, 则选手1赢得的比赛数+1, 反之选手2的+1 %matches{$p1}++; } else { %matches{$p2}++; } } my @sorted = @names.sort( { %sets{$_} } ).sort({ %matches{$_} } ).reverse; for @sorted -\u0026gt; $n { say \u0026#34;$nhas won %matches{$n}matches and %sets{$n}sets\u0026#34;; } 输出如下：\nAna has won 2 matches and 8 sets Dave has won 2 matches and 6 sets Charlie has won 1 matches and 4 sets Beth has won 1 matches and 4 sets 每个 Raku 程序应该以 #!/usr/bin/env raku 作为开始。\n在 Raku 中, 变量名以一个魔符打头, 这个魔符是一个非字母数字符号, 诸如 $, @, % 或者 \u0026amp;, 还有更少见的双冒号 ::。 内置函数 open 打开了一个名叫 scores 的文件, 并返回一个文件句柄, 即一个代表该文件的对象。赋值符号 = 将句柄赋值给左边的变量, 这意味着 $file 现在存储着该文件句柄。\nmy @names = $file.get.words; 上边这句的右侧对存储在 $file 中的文件句柄调用了 get 方法, get 方法从文件中读取并返回一行, 并去掉行的末尾。.words 也是一个方法, 用于从 get 方法返回的字符串上。.words 方法将它的组件 - 它操作的字符串, 分解成一组单词, 这里即意味着不含空格的字符串。它把单个字符串 \u0026lsquo;Beth Ana Charlie Dave\u0026rsquo; 转换成一组字符串 \u0026lsquo;Beth\u0026rsquo;, \u0026lsquo;Ana\u0026rsquo;, \u0026lsquo;Charlie\u0026rsquo;, \u0026lsquo;Dave\u0026rsquo;。最后, 这组字符串存储在数组 @names 中。\nmy %matches; my %sets; 在比分计数程序中, %matches 存储每位选手赢得的比赛数, %sets 存储每位选手赢得的比赛局数。\nfor $file.lines -\u0026gt; $line { ... } for 循环中 $file.lines 产生一组从文件 scores 读取的行, 从上次 $file.lines 离开的地方开始, 一直到文件末尾结束。 在第一次循环中, $line 会包含字符串 Ana Dave | 3:0; 在第二次循环中, $line 会包含 Charlie Beth | 3:1,以此类推。\nmy ($pairing, $result) = $line.split(\u0026#39;| \u0026#39;); split此处是一个方法, 字符串 \u0026lsquo;|\u0026rsquo; 是它的参数。\n第一次循环结束：\nVariable Contents $line 'Ana Dave | 3:0' $pairing 'Ana Dave' $result '3:0' $p1 'Ana' $p2 'Dave' $r1 '3' $r2 '0'  my @sorted = @names.sort({ %sets{$_} }).sort({ %matches{$_} }).reverse; 这一句是排序, 先按比赛局数多少排序, 再按赢得的比赛数排序, 然后反转。打印选手名字的时候以胜负次序排序, 代码必须使用选手的分数, 而非他们的名字来进行排序。sort 方法的参数是一个代码块, 用于将数组元素（选手的名字）转换成用于排序的数据。数组的元素通过变量 $_ 传递到代码块中。\n最简单的使用分数排序选手的方法应该是:\n@names.sort( { %matches{$_} } ) 这是通过使用赢得比赛的次数来进行排序。然而, Ana 和 Dave都赢了两场比赛。还需要比较谁赢的的比赛局数多, 才能决定比赛的排名。\n在双引号括起的字符串中, 标量和花括号中的变量能进行变量插值。\nmy $names = \u0026#39;things\u0026#39;; say \u0026#39;Do not call me $names\u0026#39;; # Do not call me $names say \u0026#34;Do not call me $names\u0026#34;; # Do not call me things 花括号中的数组进行插值后会变成用空格分隔的条目。花括号中的散列插值后每个散列键值对单独成为一行, 每行包含一个健, 随后是一个 tab 制表符, 然后是键值, 最后是一个新行符。\nsay \u0026#34;Math: { 1 + 2 }\u0026#34; # Math: 3 my @people = \u0026lt;Luke Matthew Mark\u0026gt;; say \u0026#34;The synoptics are: {@people}\u0026#34; # The synoptics are: Luke Matthew Mark say \u0026#34;{%sets}\u0026#34;; # From the table tennis tournament # Charlie 4 # Dave 6 # Ana 8 # Beth 4 当数组和散列变量直接出现在双引号字符串中(并且不在花括号 {} 里), 它们只在它们的名字后跟着一个 postcircumfix - 一对括号, 后面跟着语句时才会进行插值。在变量名和后置环缀之间进行方法调用也是可以的(例如 @flavours.sort())\nmy @flavours = \u0026lt;vanilla peach\u0026gt;; say \u0026#34;we have @flavours\u0026#34;; # we have @flavours, 这里没进行插值 say \u0026#34;we have @flavours[0]\u0026#34;; # we have vanilla, 后置环缀, 变量名字后面跟着一对儿括号 # so-called \u0026#34;Zen slice\u0026#34; say \u0026#34;we have @flavours[]\u0026#34;; # we have vanilla peach # 以后置环缀结尾的方法调用 say \u0026#34;we have @flavours.sort()\u0026#34;; # we have peach vanilla # 链式方法调用: say \u0026#34;we have @flavours.sort.join(\u0026#39;, \u0026#39;)\u0026#34;; # we have peach, vanilla 练习 例子中的第一行选手的名字是多余的, 你可以在参加比赛的选手中找出所有选手的名字！如果例子中的第一行被省略了, 你如何更改程序？提示：%hash.keys 返回散列 %hash 中的所有键。\n答案: 移除此行：\nmy @names = $file.get.words; 并且将\nmy @sorted = @names.sort({ %sets{$_} }).sort({ %matches{$_} }).reverse; 变成:\nmy @sorted = %sets.keys.sort({ %sets{$_} }).sort({ %matches{$_} }).reverse; 除了移除冗余, 你也可以用它来提醒我们, 如果一个选手没有在第一行的名字清单中被提到, 例如因为输入错误, 你该怎样修改你的程序？\n答案: 引入另外一个散列, 合法选手的名字作为键, 当读取选手名字的时候查找该散列：\nmy @names = $file.get.split(\u0026#39;\u0026#39;); my %legitimate-players; for @names -\u0026gt; $n { # -\u0026gt; 两侧要有空格 %legitimate-players{$n} = 1; } for $file.lines -\u0026gt; $line { my ($pairing, $result) = $line.split(\u0026#39;| \u0026#39;); my ($p1, $p2) = $pairing.split(\u0026#39;\u0026#39;); for $p1, $p2 -\u0026gt; $p { if !%legitimate-players{$p} { say \u0026#34;Warning: \u0026#39;$p\u0026#39;is not on our list!\u0026#34;; } } ... } 第三章 操作符 my @scores = \u0026#39;Ana\u0026#39; =\u0026gt; 8, \u0026#39;Dave\u0026#39; =\u0026gt; 6, \u0026#39;Charlie\u0026#39; =\u0026gt; 4, \u0026#39;Beth\u0026#39; =\u0026gt; 4; my $screen-width = 30; my $label-area-width = 1 + [max] @scores».key».chars; my $max-score = [max] @scores».value; my $unit = ($screen-width - $label-area-width) / $max-score; my $format = \u0026#39;%- \u0026#39; ~ $label-area-width ~ \u0026#34;s%s\\n\u0026#34;; for @scores { printf $format, .key, \u0026#39;X\u0026#39; x ($unit * .value); } 在这个例子中, 我们计算一下每位选手在竞标赛中赢得比赛的局数。\nmy @scores = \u0026#39;Ana\u0026#39; =\u0026gt; 8, \u0026#39;Dave\u0026#39; =\u0026gt; 6, \u0026#39;Charlie\u0026#39; =\u0026gt; 4, \u0026#39;Beth\u0026#39; =\u0026gt; 4; 这一句局包含了三个不同的操作符 = 和 =\u0026gt; 和 ,。以字符串连接操作符 ~ 为例, $string ~= \u0026quot;text\u0026quot; 等价于 $string = $string ~ \u0026quot;text\u0026quot;。\n=\u0026gt; 操作符(大键号)创建了一个键值对对象, 一个键值对存储着键和值；键在 =\u0026gt; 操作符的左侧, 值在右侧。这个操作符有一个特殊的特性：编译器会把 =\u0026gt; 操作符左侧的任何裸标识符解释为一个字符串。你也可以这样写：\nmy @scores = Ana =\u0026gt; 8, Dave =\u0026gt; 6, Charlie =\u0026gt; 4, Beth =\u0026gt; 4; 最后逗号操作符 , 构建了一个对象序列, 在该情况下, 所谓的对象就是键值对。\n这三个操作符都是中缀操作符, 这意味着它在两个条目之间。\n一个项前面可以有0个或多个前缀操作符, 所以你可以写比如 4 + -5。+ 号（一个中缀操作符）的后面, 编译器期望一个项, 为了将 - 号解释为项 5 的一个前缀。\nmy $label-area-width = 1 + [max] @scores».key».chars; » 是一个特殊的符号, 打印不出来可以用两个大于号 \u0026gt;\u0026gt; 代替。中缀操作符 max 返回两个值中的较大者, 所以 2 max 3 返回 3。方括号包裹着一个中缀操作符让 Raku 将该中缀操作符应用到列表中的元素之间。[max] 1,5,3,7 和 1 max 5 max 3 max 7 一样, 结果都为 7。\n同样地, [+] 用来计算列表元素的和, [*] 用来计算列表元素的积, [\u0026lt;=] 用来检查一个列表的值是否按递增排序。\n@scores».key».chars my @scores = Ana =\u0026gt; 8, Dave =\u0026gt; 6, Charlie =\u0026gt; 4, Beth =\u0026gt; 4; Ana 8 Dave 6 Charlie 4 Beth 4 @scores.key Method \u0026#39;key\u0026#39; not found for invocant of class \u0026#39;Array\u0026#39; @scores\u0026gt;\u0026gt;.key Ana Dave Charlie Beth 就像 @variable.method 在 @variable 上调用一个方法一样, @array».method 对 @array 中的每一项调用 method 方法, 并且返回一个返回值的列表。即 @scores\u0026gt;\u0026gt;.key 返回一个列表。\n@scores\u0026gt;\u0026gt;.key\u0026gt;\u0026gt;.chars # 每个名字含有几个字符 4 7 4 表达式 [max] @scores».key».chars 给出 (3,4,7,4) 中的最大值。它与下面的表达式相同：\n@scores[0].key.chars max @scores[1].key.chars max @scores[2].key.chars max ... @scores[0] \u0026#34;Ana\u0026#34; =\u0026gt; 8 @scores[0].key Ana my $format = \u0026#39;%- \u0026#39; ~ $label-area-width ~ \u0026#34;s%s\\n\u0026#34;; for @scores { printf $format, .key, \u0026#39;X\u0026#39; x ($unit * .value); } 定义一个格式, %- 表示左对齐, ~ 是字符串连接操作符 .for 循环中, @scores 中的每一项被绑定给特殊变量 $_, .key 是每项的键, 即名字, .value 是每项的键值, 即得分。小 x 是字符串重复操作符。\n关于优先级的的一句话 my @scores = \u0026#39;Ana\u0026#39; =\u0026gt; 8, \u0026#39;Dave\u0026#39; =\u0026gt; 6, \u0026#39;Charlie\u0026#39; =\u0026gt; 4, \u0026#39;Beth\u0026#39; =\u0026gt; 4; 等号右侧产生一个列表（因为逗号, 操作符）, 这个列表由对儿组成(因为 =\u0026gt;), 并且结果赋值给数组变量。 在 Perl5 中会这样解释:\n(my @scores = \u0026#39;Ana\u0026#39;) =\u0026gt; 8, \u0026#39;Dave\u0026#39; =\u0026gt; 6, \u0026#39;Charlie\u0026#39; =\u0026gt; 4, \u0026#39;Beth\u0026#39; =\u0026gt; 4; 以至于数组 @scores 中只有一个项, 表达式的其余部分被计算后丢弃。\n优先级规则控制着编译器如何解释这一行。Raku 的优先级规则申明 中缀操作符 =\u0026gt; 比 , 中缀操作符对于参数的绑定更紧, 而逗号操作符比等号赋值操作符绑定的更紧。\n实际上有两种不同优先级的赋值操作符。当赋值操作符右侧是一个标量时, 使用较紧优先级的项赋值操作符, 否则使用较松优先级的列表赋值操作符。(如同螺丝的松紧) 比较 $a = 1, $b = 2 和 @a = 1, 2, 前者是在一个列表中赋值给两个变量, 后者是将含有两个项的一个列表赋值给一个变量。\nsay 5 - 7 / 2; # 5 - 3.5 = 1.5 say (5 - 7) / 2; # (-2) / 2 = -1 Raku 中的优先级可以用圆括号改变, 但是如果圆括号直接跟在标识符的后面而不加空格的话, 则会被解释为参数列表。例如：\nsay(5 - 7) / 2; # -2 只打印出了 5-7 的值。\n优先级表\n   expression 名称     (), 42.5 (tightest precedence)   42.rand term   $x++ method calls and postcircumfixes   $x**2 autoincrement and autodecrement   ?$x, !$x exponentiation operator   +$x, ~$x boolean prefix   2*3, 7/5 prefix context operators   1+2, 7-5 multiplicative infix operators   $a x 3 additive infix operators   $x ~\u0026quot;.nn\u0026quot; replication operators   1\u0026amp;2 string concatenation   1 2   abs $x junctive OR   $x cmp 3 named unary prefix   $x == 3 non-chaining binary operators   $x \u0026amp;\u0026amp; $y chaining binary operators   $x    $x \u0026gt; 0 ?? 1 !! -1 tight OR infix   $x = 1 conditional operator   not $x item assignment   1, 2 loose unary prefix   1, 2 Z @a comma   @a = 1, 2 list infix   $x and say \u0026ldquo;Yes\u0026rdquo; list prefix, list assignment   $x or die \u0026ldquo;No\u0026rdquo; loose AND infix   ; loose OR infix    statement terminator    (loosest precedence)    比较和智能匹配 my @a = 1, 2, 3; my @b = 1, 2, 3; say @a === @a; # Bool::True say @a === @b; # Bool::False # these use identity for value say 3 === 3 # Bool::True say \u0026#39;a\u0026#39; === \u0026#39;a\u0026#39;; # Bool::True my $a = \u0026#39;a\u0026#39;; say $a === \u0026#39;a\u0026#39;; # Bool::True @b===@a; # False @a eqv @b; # True \u0026#39;2\u0026#39; eqv 2; # False 只有当两个对象有相同的类型和相同的结构时, eqv 操作符才返回 True。在前面定义的例子中, @a eqv @b 结果为 True, 因为 @a 和 @b 各自包含相同的值, 另一方面, \u0026lsquo;2\u0026rsquo; eqv 2 返回 \u0026lsquo;False\u0026rsquo; ,因为一个参数是字符串, 另一个是整数, 类型不相同。\n数字比较 使用 == 中缀操作符查看两个对象是否有相同的数字值。如果某个对象不是数字, Perl 会在比较之前尽力使其数字化。如果没有更好的方式将对象转换为数字, Perl 会使用默认的数字 0 。\nsay 1 == 1.0; # Bool::True say 1 == \u0026#39;1\u0026#39;; # Bool::True say 1 == \u0026#39;2\u0026#39;; # Bool::False say 3 == \u0026#39;3b\u0026#39;; # fails 跟数字比较相关的还有 \u0026lt;,\u0026lt;=,\u0026gt;,\u0026gt;=。如果两个对象的数字值不同, 使用 != 会返回 True 。\n如果你将数组或列表作为数字, 它会计算列表中项的个数。\nmy @colors = \u0026lt;red blue green\u0026gt;; if @colors == 3 { say \u0026#34;It\u0026#39;s true, @colorscontains 3 items\u0026#34;; } 字符串比较 Raku 中使用 eq 比较字符串, 必要时会将其参数转换为字符串。\nif $greeting eq \u0026#39;hello\u0026#39; { say \u0026#39;welcome\u0026#39;; } Table 3.2: Operators and Comparisons\n   数字比较 字符串比较 意思     == eq 等于   != ne 不等于   !== !eq 不等于   \u0026lt; lt 小于   \u0026lt;= le 小于或等于   \u0026gt; gt 大于   \u0026gt;= ge 大于或等于    例如, 'a' lt 'b' 为 true, 'a' lt 'aa' 也为 true。 != 是 !== 的便捷形式, 它实际是 ! 元操作符加在 中缀操作符 == 之前。同样地, ne 和 !eqs 是一样的。\n三路操作符\n三路操作符有两个操作数, 如果左侧较小, 返回 Order::Increase , 两侧相等则返回 Order::Same, 如果右侧较小则返回 Order::Decrease。对于数字使用三路操作符 \u0026lt;=\u0026gt;,对于字符串, 使用三路操作符 leg （取自 lesser, equal, greater）。中缀操作符 cmp 是一个对类型敏感的三路操作符, 它像 \u0026lt;=\u0026gt; 一样比较数字, 像 leg 一样比较字符串, 并且比较键值对儿时, 先比较键, 如果键相同再比较键值：\nsay 10 \u0026lt;=\u0026gt; 5; # +1 say 10 leg 5; # because \u0026#39;1\u0026#39; lt \u0026#39;5\u0026#39; say \u0026#39;ab\u0026#39; leg \u0026#39;a\u0026#39;; # +1, lexicographic comparison 三路操作符的典型用处就是用在排序中。列表中的 .sort 方法能使用一个含有两个值的块或一个函数, 比较它们, 并返回一个小于, 等于或大于 0 的值。 sort 方法根据该返回值进行排序：\nsay ~\u0026lt;abstract Concrete\u0026gt;.sort; # output: Concrete abstract say ~\u0026lt;abstract Concrete\u0026gt;.sort: -\u0026gt; $a, $b { uc($a) leg uc($b) }; # output: abstract Concrete 默认的, 比较是大小写敏感的, 通过比较它们的大写变形, 而不是比较它们的值, 这个例子使用了大小写敏感排序。\n智能匹配 使用 ~~ 做正确的事情。\nif $pints-drunk ~~ 8 { say \u0026#34;Go home, you\u0026#39;ve had enough!\u0026#34;; } if $country ~~ \u0026#39;Sweden\u0026#39; { say \u0026#34;Meatballs with lingonberries and potato moose, please.\u0026#34; } unless $group-size ~~ 2..4 { say \u0026#34;You must have between 2 and 4 people to book this tour.\u0026#34;; } 智能匹配总是根据 ~~ 右侧值的类型来决定使用哪种比较。上个例子中, 比较的是数字、字符串和范围。 智能匹配的工作方式 $answer ~~ 42 等价于 42.ACCPETS( $answer )。对 ~~ 操作符右侧的操作数调用 ACCEPTS 方法, 并将左操作数作为参数传入。\n第四章 子例程和签名 一个子例程就是一段执行特殊任务的代码片段。它可以对提供的数据(实参)操作, 并产生结果（返回值）。子例程的签名是它所含的参数和它产生的返回值的描述。从某一意义上来说, 第三章描述的操作符也是 Raku 用特殊方式解释的子例程。\n申明子例程 子例程申明由几部分组成。首先, sub 表明你在申明一个子例程, 然后是可选的子例程的名称和可选的签名。子例程的主体是一个用花括号扩起来的代码块。 默认的, 子例程是本地作用域的, 就像任何使用 my 申明的变量一样。这意味着, 一个子例程只能在它被申明的作用域内被调用。使用 our 来申明子例程可以使其在当前包中可见。\n{ our sub eat() { say \u0026#34;om nom nom\u0026#34;; } sub drink() { say \u0026#34;glug glug\u0026#34;; } } our \u0026amp;eat; # makes the package-scoped sub eat available in this lexical scope eat(); # om nom nom drink(); # 失败, can\u0026#39;t drink outside of the block our 也能让子例程从包或模块的外部是可见的：\nmodule EatAndDrink { our sub eat() { say \u0026#34;om nom nom\u0026#34;; } sub drink() { say \u0026#34;glug glug\u0026#34;; } } EatAndDrink::eat(); # om nom nom EatAndDrink::drink(); # fails, not declared with \u0026#34;our\u0026#34; 你也可以导出一个子例程, 让它在另外的作用域内可见。\n# in file Math/Trivial.pm module Math::Trivial { sub double($x) is export { return 2 * $x; } } 然后在其它程序或模块中你可以这样写:\nuse Math::Trivial; # imports sub double say double(21); # 21 is only half the truth Raku 的子例程都是对象。你可以将它们随意传递并存储在数据结构中。编程语言设计者常常将它们称之为 first-class 子例程；它们就像数组和散列一样作为语言的基础。\nFirst-class 子例程能帮助你解决复杂的问题。例如, 为了做出一个微型的ASCII艺术舞蹈图, 你可能要建立一个散列, 键是舞蹈动作的名称, 键值是匿名散列。假使使用者能键入一系列舞蹈动作（可能是站在舞蹈平台上或其它外部输入设备）。 你怎么保持一个变量清单中都是合法的行为, 允许使用者输入, 并限制输入是一系列安全的行为呢？\nmy %moves = hands-over-head =\u0026gt; sub { say \u0026#39;/o\\ \u0026#39; }, bird-arms =\u0026gt; sub { say \u0026#39;|/o\\| \u0026#39;}, left =\u0026gt; sub { say \u0026#39;\u0026gt;o \u0026#39; }, right =\u0026gt; sub { say \u0026#39;o\u0026lt; \u0026#39; }, arms-up =\u0026gt; sub { say \u0026#39;\\o/ \u0026#39; }; my @awesome-dance = \u0026lt;arms-up bird-arms right hands-over-head\u0026gt;; for @awesome-dance -\u0026gt; $move { %moves{$move}.(); # 在散列上调用方法 } outputs: \\o/ |/o\\| o\u0026lt; /o\\.  Adding Signatures 子例程的签名执行两个任务。首先, 它申明哪个调用者可能或必须将参数传递给子例程。第二, 它申明子例程中的变量被绑定到哪些参数上。这些变量叫做参数。Raku 的签名更深入, 它们允许你限制参数的类型, 值和参数的定义, 并准确匹配复杂数据结构的某一部分。此外, 它们也允许你显式地指定子例程返回值的类型。\n基础 签名最简单的形式是, 绑定到输入参数上的用逗号分隔的一列变量的名字。\nsub order-beer($type, $pints) { say ($pints == 1 ?? \u0026#39;A pint\u0026#39; !! \u0026#34;$pintspints\u0026#34;) ~ \u0026#34;of $type, please.\u0026#34; } order-beer(\u0026#39;Hobgoblin\u0026#39;, 1); # A pint of Hobgoblin, please. order-beer(\u0026#39;Zlatý Bažant\u0026#39;, 3); # 3 pints of Zlatý Bažant, please. 这里使用的关系绑定而非赋值就是签名。默认地, 在 Raku 中, 子例程中引用到传入参数的签名的变量是只读的。这意味着你不能从子例程内部修改它们。 如果只读绑定太受限制了, 你可以将 is rw (rw 是 read/write 的缩写) 特性应用到参数上以降低这种限制。这个特性说明参数是可读可写的, 这允许你从子例程内部修改参数。使用的时候必须小心, 因为它会修改传入的原始对象。如果你试图传入一个字面值, 一个常量, 或其它类型的不可变对象到一个有 is rw 特性的参数中, 绑定会在调用时失败并抛出异常:\nsub make-it-more-so($it is rw) { $it ~= substr($it, $it.chars - 1) x 5; } my $happy = \u0026#34;yay!\u0026#34;; make-it-more-so($happy); say $happy; # yay!!!!!! # 原始传入对象被修改了 make-it-more-so(\u0026#34;uh-oh\u0026#34;); # 失败, 不能修改一个常量 如果你想将参数的本地副本用在子例程内部而不改变调用者的变量, 使用 is copy 特性：\nsub say-it-one-higher($it is copy) { $it++; say $it; } my $unanswer = 41; say-it-one-higher($unanswer); # 42 say-it-one-higher(41); # 42 say $unanswer; # 41 在诸如 C/C++ 和 Scheme 等其它类型的编程语言中,这种广为人知的求值策略就是按值传递。当使用 is copy 特性时, 只有本地副本被赋值。其它任何传递给子例程的参数在调用者的作用域内保持不变。（一个不可变对象是当这个对象被创建后, 它的状态不会改变, 作为比较, 一个可变对象的状态在创建后是会被改变的）\n传递数组、散列和代码 一个变量的魔符表明它的本意用途。在签名中, 变量的魔符也起着限制传入的参数类型的作用。例如, @ 符号检查传入的对象行使位置角色（一个角色包含像数组和列表的类型）。如果传递的东西不能匹配这样的限制, 会引起调用失败：\nsub shout-them(@words) { for @words -\u0026gt; $w { print uc(\u0026#34;$w\u0026#34;); } } my @last_words = \u0026lt;do not want\u0026gt;; shout-them(@last_words); # DO NOT WANT shout-them(\u0026#39;help\u0026#39;); # 失败了, 字符串不是位置参数 类似地, % 符号表明调用者必须传递一个行使关系角色的对象；即允许通过 \u0026lt;...\u0026gt; 或 {...} 进行索引的东西。 \u0026amp; 符号要求调用者传递一个诸如匿名散列之类的行使能调用的角色的对象。在那种情况下, 你也可以不用 \u0026amp; 符号调用可调用的参数：\nsub do-it-lots(\u0026amp;it, $how-many-times) { for 1..$how-many-times { it(); } } do-it-lots(sub { say \u0026#34;Eating a stroopwafel\u0026#34; }, 10); # 此处是一个匿名子例程 标量使用 $ 符号, 并表明没有限制。什么都可以绑定在它上面, 即使它使用另外的符号绑定到一个对象上。\n插值、数组和散列 有时你想从数组中填充占位参数。你可以通过在数组前添加一个垂直竖条或管道字符 ( | ): eat(|@food), 而不是写作 eat(@food[0], @food[1], @food[2], ...) 等将它们吸进参数列表( | 像不像一个吸管, ^_^)。\n同样地, 你可以将散列插值进具名参数:\nsub order-shrimps($count, :$from) { say \u0026#34;I\u0026#39;d like $countpieces of shrimp from the $from, please\u0026#34;; } my %user-preferences = from =\u0026gt; \u0026#39;Northern Sea\u0026#39;; order-shrimps(3, |%user-preferences); # I\u0026#39;d like 3 pieces of shrimp from the Northern Sea, please 可选参数 为使参数可选, 要么给签名的参数赋值为默认值：\nsub order-steak($how = \u0026#39;medium\u0026#39;) { say \u0026#34;I\u0026#39;d like a steak, $how\u0026#34;; } order-steak(); order-steak(\u0026#39;well done\u0026#39;); 或者在参数名字的后面添加一个问号(?):\nsub order-burger($type, $side?) { say \u0026#34;I\u0026#39;d like a $typeburger\u0026#34; ~ ( defined($side) ?? \u0026#34;with a side of $side\u0026#34; !! \u0026#34;\u0026#34; ); } order-burger(\u0026#34;triple bacon\u0026#34;, \u0026#34;deep fried onion rings\u0026#34;); 如果没有参数被传递, 参数会被绑定成一个未定义的值。defined(...) 函数用来检查是否有值。\n强制参数 默认地, 位置参数是必不可少的。然而, 你可以通过在参数后面追加一个感叹号来显式地指定该参数是必须的：\nsub order-drink($size, $flavor!) { say \u0026#34;$size$flavor, coming right up!\u0026#34;; } order-drink(\u0026#39;Large\u0026#39;, \u0026#39;Mountain Dew\u0026#39;); # OK order-drink(\u0026#39;Small\u0026#39;); # Error 具名实参和形参  arguments 实参 parameters 形参  当一个子例程有很多参数时, 调用者很难记清传递参数的顺序。这种情况下, 通过名字传递参数往往更容易。这样, 参数出现的顺序就无关紧要了:\nsub order-beer($type, $pints) { say ($pints == 1 ?? \u0026#39;A pint\u0026#39; !! \u0026#34;$pintspints\u0026#34;) ~ \u0026#34;of $type, please.\u0026#34; } order-beer(type =\u0026gt; \u0026#39;Hobgoblin\u0026#39;, pints =\u0026gt; 1); # A pint of Hobgoblin, please. order-beer(pints =\u0026gt; 3, type =\u0026gt; \u0026#39;Zlatý Bažant\u0026#39;); # 3 pints of Zlatý Bažant, please. 你也可以指定参数只能按名字被传递（这意味着它不允许按位置传递）。这样的话, 在参数名字前加一个冒号：\nsub order-shrimps($count, :$from = \u0026#39;Northern Sea\u0026#39;) { say \u0026#34;I\u0026#39;d like $countpieces of shrimp from the $from, please\u0026#34;; } order-shrimps(6); # takes \u0026#39;Northern Sea\u0026#39; order-shrimps(4, from =\u0026gt; \u0026#39;Atlantic Ocean\u0026#39;); order-shrimps(22, \u0026#39;Mediterranean Sea\u0026#39;); # 不允许, :$from is named only 不像位置参数, 命名参数默认是可选的。在命名参数后面追加一个 ! 号使命名参数强制性存在。\nsub design-ice-cream-mixture($base = \u0026#39;Vanilla\u0026#39;, :$name!) { say \u0026#34;Creating a new recipe named $name!\u0026#34; } design-ice-cream-mixture(name =\u0026gt; \u0026#39;Plain\u0026#39;); design-ice-cream-mixture(base =\u0026gt; \u0026#39;Strawberry chip\u0026#39;); # 错误,没有指定 $name 重命名参数\n因为按名字传递实参给形参是合理的, 形参的名字应该应该作为子例程公共 API 的一部分被考虑在内. 小心地挑选它们吧! 有时候, 使用一个名字暴露形参而使用另外一个名字绑定到变量会很方便:\nsub announce-time(:dinner($supper) = \u0026#39;8pm\u0026#39;) { say \u0026#34;We eat dinner at $supper\u0026#34;; } announce-time(dinner =\u0026gt; \u0026#39;9pm\u0026#39;); # We eat dinner at 9pm 参数可以有多个名字, 如果你的用户有些是英国人, 有些是美国人, 你可能这样写：\nsub paint-rectangle( :$x = 0, :$y = 0, :$width = 100, :$height = 50, :color(:colour($c))) { # print a piece of SVG that represents a rectangle say qq[\u0026lt;rect x=\u0026#34;$x\u0026#34; y=\u0026#34;$y\u0026#34; width=\u0026#34;$width\u0026#34; height=\u0026#34;$height\u0026#34; \u0026gt;] } # both calls work the same paint-rectangle :color\u0026lt;Blue\u0026gt;; paint-rectangle :colour\u0026lt;Blue\u0026gt;; # of course you can still fill the other options paint-rectangle :width(30), :height(10), :colour\u0026lt;Blue\u0026gt;; 可选的命名参数语法\n命名变量通常是成对的（键值对）。写一个 Pairs 有多种方式。各种方法的不同之处就是清晰性, 因为每种选择提供不同的引述机制。下面的三种调用是一样的意思：\nannounce-time(dinner =\u0026gt; \u0026#39;9pm\u0026#39;); announce-time(:dinner(\u0026#39;9pm\u0026#39;)); announce-time(:dinner\u0026lt;9pm\u0026gt;); 如果传递的是布尔值, 你可以省略键值对的键值：\ntoggle-blender( :enabled); # enables the blender 开启果汁机 toggle-blender(:!enabled); # disables the blender 关闭果汁机 形如 :name 但不带值的命名参数有一个隐式的布尔真值 Bool::True。它的对立形式是 :!name , 其值是隐式的布尔假值 Bool::false。如果你使用变量创建了一个 Pair, 你可以将变量名作为 Pair 的键复用.\nmy $dinner = \u0026#39;9pm\u0026#39;; announce-dinner :$dinner; # same as dinner =\u0026gt; $dinner;  Pair forms and their meanings. Shorthand Long form Description :allowed allowed =\u0026gt; Bool::True Boolean flag :!allowed allowed =\u0026gt; Bool::False Boolean flag :bev\u0026lt;tea coffee\u0026gt; bev =\u0026gt; ('tea', 'coffee') List :times[1, 3] times =\u0026gt; [1, 3] Array :opts{ a =\u0026gt; 2 } opts =\u0026gt; { a =\u0026gt; 2 } Hash :$var var =\u0026gt; $var Scalar variable :@var var =\u0026gt; @var Array variable :%var var =\u0026gt; %var Hash variable :\u0026amp;var vaf =\u0026gt; \u0026amp;var Callable/ Subroutine variable  你可以使用在任何可以使用 Pair 对象的上下文使用表中的任意一种形式. 例如, 生成散列:\n# TODO: better example my $black = 12; my %color-popularities = :$black, :blue(8), red =\u0026gt; 18, :white\u0026lt;0\u0026gt;; # 与此相同： # my %color-popularities = # black =\u0026gt; 12, # blue =\u0026gt; 8, # red =\u0026gt; 18, # white =\u0026gt; 0; 最后, 通过位置而非名字传递一个已存在的 Pair 对象到子例程中, 要么把它放在圆括号中 ( 就像 (:$thing) ), 或者使用 =\u0026gt; 操作符引起左侧的字符串: \u0026quot;thing\u0026quot; =\u0026gt; $thing。\n参数的顺序\n当位置参数和命名参数都出现在签名中时, 所有的位置参数都要出现在命名参数之前：\nsub mix(@ingredients, :$name) { ... } # OK sub notmix(:$name, @ingredients) { ... } # Error 必须的位置参数要在可选的位置参数之前。然而, 命名参数没有这种限制。\nsub copy-machine($amount, $size = \u0026#39;A4\u0026#39;, :$color!, :$quality) { ... } # OK sub fax-machine($amount = 1, $number) { ... } # Error Slurpy 参数 有时候, 你会希望让子例程接受任何数量的参数, 并且将所有这些参数收集到一个数组中。为了达到这个目的, 给签名添加一个数组参数, 就是在数组前添加一个 * 号前缀：\nsub shout-them(*@words) { for @words -\u0026gt; $w { print uc(\u0026#34;$w\u0026#34;); } } # 现在你可以传递项 shout-them(\u0026#39;go\u0026#39;); # GO shout-them(\u0026#39;go\u0026#39;, \u0026#39;home\u0026#39;); # GO HOME 除了集合所有的值之外, slurpy 参数会展平任何它接收到的数组, 最后你只会得到一个展平的列表, 因此：\nmy @words = (\u0026#39;go\u0026#39;, \u0026#39;home\u0026#39;); shout-them(@words); 会导致 *@words 参数有两个字符串元素, 而非只有单个数组元素。\n你可以选择将某些参数捕获到位置参数中, 并让其它参数被吸进数组参数里。这种情况下, slupy 应该放到最后。相似地, *%hash slurps 所有剩下的未绑定的命名参数到散列 %hash 中。Slurpy 数组和散列允许你传递所有的位置参数和命名参数到另一个子例程中。\nsub debug-wrapper(\u0026amp;code, *@positional, *%named) { warn \u0026#34;Calling \u0026#39;\u0026amp;code.name()\u0026#39; with arguments \u0026#34; ~ \u0026#34;@positional.perl(), %named.perl()\\n\u0026#34;; code(|@positional, |%named); warn \u0026#34;... back from \u0026#39;\u0026amp;code.name()\u0026#39;\\n\u0026#34;; } debug-wrapper(\u0026amp;order-shrimps, 4, from =\u0026gt; \u0026#39;Atlantic Ocean\u0026#39;); 返回值 子例程也能返回值。之前本章中的 ASCII 艺术舞蹈例子会更简单当每个子例程返回一个新字符串：\nmy %moves = hands-over-head =\u0026gt; sub { return \u0026#39;/o\\ \u0026#39; }, bird-arms =\u0026gt; sub { return \u0026#39;|/o\\| \u0026#39; }, left =\u0026gt; sub { return \u0026#39;\u0026gt;o \u0026#39; }, right =\u0026gt; sub { return \u0026#39;o\u0026lt; \u0026#39; }, arms-up =\u0026gt; sub { return \u0026#39;\\o/ \u0026#39; }; my @awesome-dance = \u0026lt;arms-up bird-arms right hands-over-head\u0026gt;; for @awesome-dance -\u0026gt; $move { print %moves{$move}.(); } print \u0026#34;\\n\u0026#34;; 子例程也能返回多个值（译者注：那不就是返回一个列表嘛）：\nsub menu { if rand \u0026lt; 0.5 { return (\u0026#39;fish\u0026#39;, \u0026#39;white wine\u0026#39;) } else { return (\u0026#39;steak\u0026#39;, \u0026#39;red wine\u0026#39;); } } my ($food, $beverage) = menu(); 如果你把 return 语句排除在外, 则在子例程内部运行的最后一个语句产生的值被返回。这意味着前一个例子可以简化为：\nsub menu { if rand \u0026lt; 0.5 { \u0026#39;fish\u0026#39;, \u0026#39;white wine\u0026#39; } else { \u0026#39;steak\u0026#39;, \u0026#39;red wine\u0026#39;; } } my ($food, $beverage) = menu(); 记得：当子例程中的控制流极其复杂时, 添加一个显式的 return 会让代码更清晰, 所以 return 还是加上的好。 return 另外的副作用就是执行后立即退出子例程：\nsub create-world(*%characteristics) { my $world = World.new(%characteristics); return $world if %characteristics\u0026lt;temporary\u0026gt;; save-world($world); } \u0026hellip;并且你最好别放错你的新单词 $word 如果它是临时的。因为这是你要获取的仅有的一个。\n返回值的类型 像其它现代语言一样, Raku 允许你显式地指定子例程返回值的类型。这允许你限制从子例程中返回的值的类型。使用 returns 特性可以做到这样：\nsub double-up($i) returns Int { return $i * 2; } my Int $ultimate-answer = double-up(21); # 42 当然, 使用这个 returns 特性是可选的\nWorking With Types 很多子例程不能完整意义上使用任意参数工作, 但是要求参数支持确定的方法或有其它属性。这种情况下, 限制参数类型就有意义了, 诸如传递不正确值作为参数, 当调用子例程时, 这会引起 Raku 发出错误, 或者甚至在编译时, 如果编译器足够聪明来捕捉错误。\n基本类型 最简单的限制子例程接收可能的值的方法是在参数前写上类型名。例如, 一个子例程对其参数执行数值计算, 这要求它的参数类型是 Numeric：\nsub mean(Numeric $a, Numeric $b) { return ($a + $b) / 2; } say mean 2.5, 1.5; say mean \u0026#39;some\u0026#39;, \u0026#39;strings\u0026#39;; 产生输出：\nNominal type check failed for parameter \u0026#39;$a\u0026#39;; expected Numeric but got Str instead nominal 类型是一个人实际类型的名字, 这里是 Numeric。 如果多个参数有类型限制, 每个参数必须填充它绑定的参数限制的类型\n添加限制 有时, 类型的名字不足以描述参数的要求。这种情况下, 你可能使用 where 代码块添加一个额外的限制：\nsub circle-radius-from-area(Real $area where { $area \u0026gt;= 0 }) { ($area / pi).sqrt } say circle-radius-from-area(3); # OK say circle-radius-from-area(-3); # Error 因为这种计算只对非负面积值有意义, 该子例程的参数包含了一个限制, 对于非负值它会返回真。如果这个限制返回一个假的值, 类型检查会失败, 当有些东西调用该子例程时。\nwhere 之后的代码块是可选的。Raku 通过通过智能匹配 where 后面的参数来执行检查。 例如, 它可能接受在某一确定范围中的参数：\nsub set-volume(Numeric $volume where 0..11) { say \u0026#34;Turning it up to $volume\u0026#34;; } 或者你可以将参数限制为散列的键：\nmy %in-stock = \u0026#39;Staropramen\u0026#39; =\u0026gt; 8, \u0026#39;Mori\u0026#39; =\u0026gt; 5, \u0026#39;La Trappe\u0026#39; =\u0026gt; 9; sub order-beer(Str $name where %in-stock) { say \u0026#34;Here\u0026#39;s your $name\u0026#34;; %in-stock{$name}--; if %in-stock{$name} == 0 { say \u0026#34;OH NO! That was the last $name, folks! :\u0026#39;(\u0026#34;; %in-stock.delete($name); } } 抽象参数和具体参数 下面检测变量是否定义。在 Raku 中这样写:\nsub foo(Int:D $arg) { # Do something } 留意附加在参数类型后面的 :D 笑脸。这个动词表明给定的参数必须被绑定到一个具体的对象上。如果不是的话, 会抛出一个运行时异常。这就是为什么它那么高兴！作为对比, 动词 :U 用于表明该参数需要一个未定义的或抽象的对象。此外, 动词 :_ 允许定义或未定义的值。实际上, 使用 :_ 有点多余。\n最后, 动词 :T 能用于表明参数只能是类型对象, 例如\nsub say-foobar(Int:T $arg) { say \u0026#39;FOOBAR!\u0026#39;; } say-foobar(Int); # FOOBAR! "},"name":"Using Raku","published":"2021-07-07T00:00:00+08:00","summary":"Using Raku","type":"entry","url":"https://ohmyweekly.github.io/notes/2015-03-14-using-raku/"},{"content":{"html":"\u003cp\u003e我不太喜欢上一篇文章中使用匹配的语法。它的参数列表中的逗号看起来很奇怪，不合适。也许是因为我的眼睛习惯了给定的块。睡一觉就好了。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e\u0026amp;c\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCALLER::\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;);\u003c/span\u003e \u003cspan class=\"k\"\u003esucceed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e\u0026amp;c\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecando\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCALLER::\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003egiven\u003c/span\u003e \u003cspan class=\"n\"\u003eErr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(:\u003c/span\u003e\u003cspan class=\"s\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eaccord\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eHold\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$key\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003eput\u003c/span\u003e „\u003cspan class=\"n\"\u003eholding\u003c/span\u003e \u003cspan class=\"nv\"\u003e$key\u003c/span\u003e“\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eaccord\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eErr\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003ewarn\u003c/span\u003e „\u003cspan class=\"n\"\u003eERR:\u003c/span\u003e \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e“ \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edefault\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003efail\u003c/span\u003e ‚\u003cspan class=\"n\"\u003eunsupported\u003c/span\u003e‘ \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这是因为 \u003ccode\u003eaccord\u003c/code\u003e 模仿了 \u003ccode\u003ewhen\u003c/code\u003e 的工作。它做了一些匹配，当 True 时调用一个块，并在每个块的结尾添加一个 success（通过抛出一个控制异常）。given 所做的只是设置主题。它还充当了 caller 的角色，所以我们可以通过一个伪包来访问它的 \u003ccode\u003e$_\u003c/code\u003e。利用 pointy 的签名来做\u003ca href=\"https://docs.raku.org/type/Signature#Destructuring_arguments\"\u003e解构\u003c/a\u003e是相当强大的。把这个添加到 CORE 中可能是个好主意。\u003c/p\u003e\n\u003cp\u003e我们可能要把 Raku 的定义改成: \u0026ldquo;Raku 是一种高度可组合的编程语言\u0026rdquo;, 在这里，所有的东西都会落到实处。\u0026quot;\u003c/p\u003e\n\u003cp\u003e更新一下。\u003c/p\u003e\n\u003cp\u003e有些情况下，\u003ccode\u003e$_\u003c/code\u003e 不是动态的。另外，success 正在抛出一个控制异常，而这些的处理程序是由 when 或默认添加的。这种情况是在编译时发生的，目前不能用宏来解决。第一个问题可以用黑魔法解决。后一个问题需要用默认块。我没有找到一种方法来提供一个合理的错误信息，如果缺少这个块。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e\u0026amp;c\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nb\"\u003enqp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nf\"\u003enqp::getlexcaller\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"k\"\u003esucceed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e\u0026amp;c\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecando\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@possibilities\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eroll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$needle\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003egiven\u003c/span\u003e \u003cspan class=\"nv\"\u003e$needle\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eaccord\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eHold\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$key\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003eput\u003c/span\u003e „\u003cspan class=\"n\"\u003eholding\u003c/span\u003e \u003cspan class=\"nv\"\u003e$key\u003c/span\u003e“\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eaccord\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eErr\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003ewarn\u003c/span\u003e „\u003cspan class=\"n\"\u003eERR:\u003c/span\u003e \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e“ \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003edefault\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003ewarn\u003c/span\u003e ‚\u003cspan class=\"n\"\u003eunsopported\u003c/span\u003e‘ \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e原文链接: \u003ca href=\"https://gfldex.wordpress.com/2021/02/25/custom-when/\"\u003ehttps://gfldex.wordpress.com/2021/02/25/custom-when/\u003c/a\u003e\u003c/p\u003e\n","text":"我不太喜欢上一篇文章中使用匹配的语法。它的参数列表中的逗号看起来很奇怪，不合适。也许是因为我的眼睛习惯了给定的块。睡一觉就好了。\nsub accord(\u0026amp;c) { (c(CALLER::\u0026lt;$_\u0026gt;); succeed) if \u0026amp;c.cando(\\(CALLER::\u0026lt;$_\u0026gt;)) } given Err.new(:msg\u0026lt;a\u0026gt;) { accord -\u0026gt; Hold (:$key) { put „holding $key“; } accord -\u0026gt; Err (:$msg) { warn „ERR: $msg“ } default { fail ‚unsupported‘ } } 这是因为 accord 模仿了 when 的工作。它做了一些匹配，当 True 时调用一个块，并在每个块的结尾添加一个 success（通过抛出一个控制异常）。given 所做的只是设置主题。它还充当了 caller 的角色，所以我们可以通过一个伪包来访问它的 $_。利用 pointy 的签名来做解构是相当强大的。把这个添加到 CORE 中可能是个好主意。\n我们可能要把 Raku 的定义改成: \u0026ldquo;Raku 是一种高度可组合的编程语言\u0026rdquo;, 在这里，所有的东西都会落到实处。\u0026quot;\n更新一下。\n有些情况下，$_ 不是动态的。另外，success 正在抛出一个控制异常，而这些的处理程序是由 when 或默认添加的。这种情况是在编译时发生的，目前不能用宏来解决。第一个问题可以用黑魔法解决。后一个问题需要用默认块。我没有找到一种方法来提供一个合理的错误信息，如果缺少这个块。\nmulti sub accord(\u0026amp;c) { use nqp; $_ := nqp::getlexcaller(\u0026#39;$_\u0026#39;); (c($_); succeed) if \u0026amp;c.cando(\\($_)) } for @possibilities.roll(1) -\u0026gt; $needle { given $needle { accord -\u0026gt; Hold (:$key) { put „holding $key“; } accord -\u0026gt; Err (:$msg) { warn „ERR: $msg“ } default { warn ‚unsopported‘ } } } 原文链接: https://gfldex.wordpress.com/2021/02/25/custom-when/\n"},"name":"自定义 when","published":"2021-02-28T00:00:00+08:00","summary":"Custom When","type":"entry","url":"https://ohmyweekly.github.io/notes/2021-02-28-custom-when/"},{"content":{"html":"\u003cp\u003e在过去的几周里，我看到了一些\u003ca href=\"https://mydeveloperplanet.com/2021/01/20/how-to-start-contributing-to-open-source/\"\u003e文章\u003c/a\u003e和\u003ca href=\"https://youtu.be/GAqfMNB-YBU\"\u003e视频\u003c/a\u003e，讲述了在开源软件中构思是多么的伟大。这次我又想起了另一篇旧文\u003ca href=\"http://strangelyconsistent.org/blog/perl-6-is-my-mmorpg\"\u003eRaku 是我的 MMORPG\u003c/a\u003e。它说，你可以从以下几个方面受益于开源软件。比如说，可以做一个大侠，基于一些开源软件来写软件。作为写手，可以写博客、微博等，对所选软件产生兴趣。或者你可以成为一个法师 - 实现新的功能和修复 bug。今天小编就带着弓箭手来告诉大家如何成为 \u003ca href=\"https://raku.org/\"\u003eRaku\u003c/a\u003e 编程语言的法师。\u003c/p\u003e\n\u003ch2 id=\"选择一个任务\"\u003e选择一个任务\u003c/h2\u003e\n\u003cp\u003e让我们挑选一些编译器的 bug，并修复它。让我们去 \u003ca href=\"https://rakudo.org/\"\u003eRakudo\u003c/a\u003e 编译器 \u003ca href=\"https://github.com/rakudo/rakudo/issues\"\u003eissues\u003c/a\u003e中选择我们想要修复的 bug。我滚动了一下 bug 列表，遇到了解析 - 运气不错，我前段时间一直在研究\u003ca href=\"https://www.apress.com/gp/book/9781484232279\"\u003e编译器语法\u003c/a\u003e，看了一本这方面的好书。找到了四个问题。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://rakurs.atroxaper.net/assets/img/posts/2021-02-13-contributing-raku-1.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e标签为 LTA （Less Than Awesome - 当真实行为与直觉预期不同时）- 我们暂时把它划掉。\u003c/li\u003e\n\u003cli\u003e标签 \u0026ldquo;需要共识\u0026rdquo; - 我们只想修复一个不复杂的 bug - 肯定要划掉。\u003c/li\u003e\n\u003cli\u003e标签为 \u0026ldquo;grammar and actions\u0026rdquo; 的关于一个可能死的代码是一个很好的候选人的第一个任务。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e任务确定后，现在我们需要配置工作环境。在 Windows、Linux 和 macOS 中，一切应该都差不多。我将通过 macOS 的例子来告诉你。\u003c/p\u003e\n\u003ch2 id=\"建立工作环境\"\u003e建立工作环境\u003c/h2\u003e\n\u003cp\u003e为源码和我们建立的编译器建立文件夹。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003emkdir ~/dev-rakudo \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e mkdir ~/dev-rakudo-install\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRakudo 编译器由三部分组成。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e虚拟机。现在有三种 - JVM、JS 和 MoarVM。我们以 MoarVM 为最稳定的一个。\u003c/li\u003e\n\u003cli\u003eNQP（Not Quite Perl），是一种低级（中级）语言的实现，它是 Raku 的一个 \u0026ldquo;子集\u0026rdquo;。虚拟机可以执行用 NQP 编写的代码。\u003c/li\u003e\n\u003cli\u003eRakudo 编译器本身，用 NQP 和 Raku 编写。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e下载并编译这三个组件。我分别花了一分半钟、半分钟和两分半钟才编好。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/dev-rakudo \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git clone git@github.com:MoarVM/MoarVM.git \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e MoarVM\nperl Configure.pl --prefix ~/dev-rakudo-install \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make -j \u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make install\n\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/dev-rakudo \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git clone git@github.com:Raku/nqp.git \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e nqp\nperl Configure.pl --backend\u003cspan class=\"o\"\u003e=\u003c/span\u003emoar --prefix ~/dev-rakudo-install \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make -j \u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make install\n\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/dev-rakudo \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git clone git@github.com:rakudo/rakudo.git \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e rakudo\nperl Configure.pl --backend\u003cspan class=\"o\"\u003e=\u003c/span\u003emoar --prefix ~/dev-rakudo-install \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make -j \u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e make install\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意参数。\u003ccode\u003e--prefix\u003c/code\u003e 显示了 \u003ccode\u003emake install\u003c/code\u003e 命令后可执行文件的复制位置，\u003ccode\u003e--backend=moar\u003c/code\u003e 表示正在使用的虚拟机，而 \u003ccode\u003e-j 4\u003c/code\u003e 则要求跨多线程并行化（以防加快进度）。现在我们已经建立了 Rakudo 编译器 \u003ccode\u003e~/dev-rakudo-install/bin/raku\u003c/code\u003e。我们还需要官方的编译器测试套件。你应该把它和它的代码一起放在文件夹里。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/dev-rakudo/rakudo \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git clone https://github.com/Raku/roast.git t/spec\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们先进行测试。这种情况很常见，有些测试甚至在新的变化之前就失败了。我们需要辨别出来，这样以后就不会害怕这些变化破坏了一些不必要的东西。\u003c/p\u003e\n\u003cp\u003e这里和下面我将在 \u003ccode\u003e~/dev-rakudo/rakudo\u003c/code\u003e 文件夹中工作，除非另有说明。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; make spectest\n[...]\nTest Summary Report\n-------------------\nt/spec/S32-str/utf8-c8.t    (Wstat: 65280 Tests: 54 Failed: 0)\n  Non-zero exit status: 255\n  Parse errors: Bad plan.  You planned 66 tests but ran 54.\nFiles=1346, Tests=117144, 829 wallclock secs (27.70 usr  6.04 sys + 2638.79 cusr 210.98 csys = 2883.51 CPU)\nResult: FAIL\nmake: *** [m-spectest5] Error 1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e14分钟内共运行了1,346个文件中的117,144次测试。一些与utf8相关的测试由于某种原因失败了，其他的都能正常工作。我们已经准备好去工作了!\u003c/p\u003e\n\u003ch2 id=\"让我们来看看问题的陈述\"\u003e让我们来看看问题的陈述\u003c/h2\u003e\n\u003cp\u003e问题陈述说，某个元运算符 \u003ccode\u003eR\u003c/code\u003e 在 colonpair 上出了问题。我打开文档，搜索 R 这个词，但下拉列表中没有这个名字的元运算符。我试着输入 metaop，看到的是反向元操作符(R)。原来，如果你想把二元运算的操作数按相反的顺序写出来，你可以在其符号前使用前缀 R。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"ow\"\u003eR\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Output: True\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eColonpair 是命名对的语法。它看起来就像名字前面有一个冒号，前面有一个括号，有一个值。例如 \u003ccode\u003e:foo(42)\u003c/code\u003e 是一个名称为 \u003ccode\u003efoo\u003c/code\u003e、值为 \u003ccode\u003e42\u003c/code\u003e 的对儿。这个语法通常用于在调用函数时，向函数传递一个命名参数中的值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003esub-with-named-parameter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003esub-with-named-parameter\u003c/span\u003e\u003cspan class=\"p\"\u003e(:\u003c/span\u003e\u003cspan class=\"s\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Output: 42\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果一个函数参数不是命名的，而是位置的，那么在用命名对调用时，就会出现编译错误。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003esub-without-named-parameter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e# \u0026lt;- 没有冒号\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003esub-without-named-parameter\u003c/span\u003e\u003cspan class=\"p\"\u003e(:\u003c/span\u003e\u003cspan class=\"s\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Unexpected named argument \u0026#39;foo\u0026#39; passed\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你在调用这样的函数时用括号包围一个参数，整个参数对将被传递到位置参数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003esub-without-named-parameter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003esub-without-named-parameter\u003c/span\u003e\u003cspan class=\"p\"\u003e((:\u003c/span\u003e\u003cspan class=\"s\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e)));\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Output: foo =\u0026gt; 42\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Raku 中，你可以写一个函数来捕获所有传递给它的参数并分析它们。这是在单个参数 - 捕获前用竖线完成的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003esub-with-capture\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e# \u0026lt;- 参数捕获\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003esub-with-capture\u003c/span\u003e\u003cspan class=\"p\"\u003e(:\u003c/span\u003e\u003cspan class=\"s\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# Output: \\(:foo(42))\u003c/span\u003e\n\u003cspan class=\"nf\"\u003esub-with-capture\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e           \u003cspan class=\"c1\"\u003e# Output: \\(42)\u003c/span\u003e\n\u003cspan class=\"nf\"\u003esub-with-capture\u003c/span\u003e\u003cspan class=\"p\"\u003e(:\u003c/span\u003e\u003cspan class=\"s\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"ow\"\u003eZ\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Output: \\(:foo((1,).Seq))\u003c/span\u003e\n\u003cspan class=\"nf\"\u003esub-with-capture\u003c/span\u003e\u003cspan class=\"p\"\u003e(:\u003c/span\u003e\u003cspan class=\"s\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"ow\"\u003eR\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Output: \\(-1)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e倒数第二行使用了 Z 元操作符 - zip 操作符。它将左右两部分作为一个列表，按顺序每次从它们中抽取一个元素，并进行操作，从而形成一个序列。\u003c/p\u003e\n\u003cp\u003e在最后一行，只用了我们需要的 R 元操作符。在这种情况下，它不是一个对，而是一个常量，它被传递到函数中。我们可以假设这是元运算符工作方式的一些特殊性，但用 Z 的例子表明并非如此。其实这是一个 bug - 当一个对被传递到一个使用 R 元运算符的函数中时，它的值会被转换。\u003c/p\u003e\n\u003ch2 id=\"我们需要一个新的测试\"\u003e我们需要一个新的测试\u003c/h2\u003e\n\u003cp\u003e为了确保未来的变化能够修复错误的行为，我们需要写一个新的测试。在测试文件中不难找到 R 元操作符的测试（\u003ca href=\"https://github.com/Raku/roast/blob/fea1d16d993eb851d2935155e0b0d074fa3593bf/S03-metaops/reverse.t\"\u003eS03-metops/reverse.t\u003c/a\u003e）。下面我将补充以下测试。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"c1\"\u003e# https://github.com/rakudo/rakudo/issues/1632\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003esubroutine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$expected\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eactual\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"nc\"\u003eactual\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egist\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$expected\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eСolonpair exists\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"nf\"\u003esubroutine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\\(:foo(-1))\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"ow\"\u003eR\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e该测试有一个功能，有两个参数 - 正常和捕获。在函数体中，第一个参数和传递的 Capture 的字符串表示进行比较。你可以使用 \u003ccode\u003emake\u003c/code\u003e 对新构建的编译器进行单独测试。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; make t/spec/S03-metaops/reverse.t\n[...]\nok 69 - [R~]=\nnot ok 70 - Colonpair exists\n# Failed test 'Colonpair exists'\n# at t/spec/S03-metaops/reverse.t line 191\n# expected: '\\(:foo(-1))'\n#      got: '\\(-1)'\n# You planned 69 tests, but ran 70\n# You failed 1 test of 70\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e你可以看到，测试失败了（如预期）。还有一个单独的说明，系统预计69次测试，但收到70次。这是基于 TAP 的测试系统的特点 - 必须在文件的顶部修正传递给 \u003ccode\u003eplan\u003c/code\u003e 函数的数字。现在测试崩溃了，但编号没有受到影响。你可以开始修复它。\u003c/p\u003e\n\u003ch2 id=\"凝视法\"\u003e凝视法\u003c/h2\u003e\n\u003cp\u003e一开始我很相信任务上的标签 - 如果是解析的话，一定是源码解析阶段的某个地方出现了问题。目前我的认识如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e基础解析器代码在文件 \u003ccode\u003erakudo/src/Perl6/Grammar.nqp\u003c/code\u003e 中。\u003c/li\u003e\n\u003cli\u003e这个解析器是从 \u003ccode\u003enqp/src/HLL/Grammar.nqp\u003c/code\u003e 文件中的基础解析器继承的。\u003c/li\u003e\n\u003cli\u003e元操作符的解析和工作方式都差不多，你可以通过仔细观察来发现不同之处。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我在基础解析器代码中找到了对元操作符的引用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003etoken\u003c/span\u003e \u003cspan class=\"nf\"\u003einfix_prefix_meta_operator:sym\u003c/span\u003e\u0026lt;R\u0026gt; \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003cspan class=\"sr\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003esym\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003einfixish\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eR\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003cspan class=\"sr\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecan_meta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$\u0026lt;infixish\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ereverse the args of\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;)\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003cspan class=\"sr\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nv\"\u003eO\u003c/span\u003e\u003cspan class=\"o\"\u003e=.\u003c/span\u003e\u003cspan class=\"nf\"\u003erevO\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$\u0026lt;infixish\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003cspan class=\"sr\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etoken\u003c/span\u003e \u003cspan class=\"nf\"\u003einfix_prefix_meta_operator:sym\u003c/span\u003e\u0026lt;Z\u0026gt; \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003cspan class=\"sr\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003esym\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003einfixish\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eZ\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003cspan class=\"sr\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecan_meta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$\u0026lt;infixish\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ezip with\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;)\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003cspan class=\"sr\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"sr\"\u003eO(|\u003c/span\u003e\u003cspan class=\"nv\"\u003e%list_infix\u003c/span\u003e\u003cspan class=\"sr\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003cspan class=\"sr\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这需要对 Raku grammar 有一定的了解。据我所知，原来这两个元运算符在解析上并没有根本的区别。一段时间后，在解析器的源代码中挖得够多了，我开始怀疑解析工作是否正确。认为代码 \u003ccode\u003emy $r = :foo(3 R- 2); say $r; # Output: foo =\u0026gt; -1\u003c/code\u003e 正确工作的建议 - 问题恰恰发生在调用函数时。显然，我白白相信了任务栏上的标签。\u003c/p\u003e\n\u003ch2 id=\"编译器将帮助我们\"\u003e编译器将帮助我们\u003c/h2\u003e\n\u003cp\u003e颇为迟钝的我想起了我从一开始就应该做的事情。Rakudo 编译器有 \u003ccode\u003e--target\u003c/code\u003e 调试开关。它取编译器阶段的名称，你想将其结果输出到控制台并退出。我想看看 \u003ccode\u003e--target=parse\u003c/code\u003e（因为我只知道这一个）。\u003c/p\u003e\n\u003cp\u003e我从 \u003ccode\u003e~/dev-rakudo/rakudo\u003c/code\u003e 文件夹中使用 \u003ccode\u003erakumo-m\u003c/code\u003e，这样我就不必等待通过 \u003ccode\u003emake install\u003c/code\u003e 命令将所需文件复制到 \u003ccode\u003e~/dev-rakudo-install\u003c/code\u003e。简单的脚本可以这样运行。更复杂的脚本必须在 \u003ccode\u003emake install\u003c/code\u003e 之后从 \u003ccode\u003e-install\u003c/code\u003e 中运行。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cat ~/test.raku\nsub s(|c) { say c }\ns(:foo(3 R- 2));\ns(:foo(3 Z- 2));\n\n\u0026gt; ./rakudo-m --target=parse ~/test.raku\n[...]\n- args: (:foo(3 R- 2))\n  - semiarglist: :foo(3 R- 2)\n    - arglist: 1 matches\n      - EXPR: :foo(3 R- 2)\n        - colonpair: :foo(3 R- 2)\n          - identifier: foo\n          - coloncircumfix: (3 R- 2)\n            - circumfix: (3 R- 2)\n              - semilist: 3 R- 2\n                - statement: 1 matches\n                  - EXPR: R- 2\n[...]\n- args: (:foo(3 Z- 2))\n  - semiarglist: :foo(3 Z- 2)\n    - arglist: 1 matches\n      - EXPR: :foo(3 Z- 2)\n        - colonpair: :foo(3 Z- 2)\n          - identifier: foo\n          - coloncircumfix: (3 Z- 2)\n            - circumfix: (3 Z- 2)\n              - semilist: 3 Z- 2\n                - statement: 1 matches\n                  - EXPR: Z- 2\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e结论：R 和 Z 的解析是一样的。\u003c/p\u003e\n\u003ch2 id=\"这不是解析\"\u003e这不是解析\u003c/h2\u003e\n\u003cp\u003e所有被解析的东西都会被传递给所谓的 Action，把字词变成一棵语法树。在我们的例子中，Actions 位于文件 \u003ccode\u003erakudo/src/Perl6/Actions.nqp\u003c/code\u003e 和 \u003ccode\u003enqp/src/HLL/Actions.nqp\u003c/code\u003e 中。这里就比较容易搞清楚了，毕竟是代码，是 grammar。\u003c/p\u003e\n\u003cp\u003e我在主 Actions 中找到了以下代码。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\nelsif $\u0026lt;infix_prefix_meta_operator\u0026gt; {\n[...]\n  if    $metasym eq 'R' { $helper := '\u0026amp;METAOP_REVERSE'; $t := nqp::flip($t) if $t; }\n  elsif $metasym eq 'X' { $helper := '\u0026amp;METAOP_CROSS'; $t := nqp::uc($t); }\n  elsif $metasym eq 'Z' { $helper := '\u0026amp;METAOP_ZIP'; $t := nqp::uc($t); }\n  \n  my $metapast := QAST::Op.new( :op\u0026lt;call\u0026gt;, :name($helper), WANTED($basepast,'infixish') );\n  $metapast.push(QAST::Var.new(:name(baseop_reduce($base\u0026lt;OPER\u0026gt;\u0026lt;O\u0026gt;.made)), :scope\u0026lt;lexical\u0026gt;))\n    if $metasym eq 'X' || $metasym eq 'Z';\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e它说，如果在代码中解析了元操作符 \u003ccode\u003eR\u003c/code\u003e、\u003ccode\u003eZ\u003c/code\u003e 或 \u003ccode\u003eX\u003c/code\u003e，就应该在语法树中添加一些 \u003ccode\u003eMETAOP_\u003c/code\u003e 函数调用。在 \u003ccode\u003eZ\u003c/code\u003e 和 \u003ccode\u003eX\u003c/code\u003e 的情况下，它会多一个参数，即某种还原函数。所有这些功能都可以在 \u003ccode\u003erakudo/src/core.c/metaops.pm6\u003c/code\u003e 中找到。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eMETAOP_REVERSE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"nc\"\u003eimplementation-detail\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nb\"\u003eargs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nb\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eMETAOP_ZIP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e\u0026amp;reduce\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"nc\"\u003eimplementation-detail\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n \u003cspan class=\"nf\"\u003enqp::if\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eprec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ethunky\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003estarts-with\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003elol\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$arity\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elol\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eelems\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e[...]\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003elol\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eSeq\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eRakudo::Iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eZipIterablesOp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elol\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e给你：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e\\op\u003c/code\u003e 是由我们的元操作符，即-，在前面的操作。\u003c/li\u003e\n\u003cli\u003eTrait \u003ccode\u003eimplementation-detail\u003c/code\u003e 只是表明这不是公共代码，是编译器实现的一部分。\u003c/li\u003e\n\u003cli\u003e由于-操作没有笨重的特性，所以 \u003ccode\u003e\u0026amp;reduce\u003c/code\u003e 函数不会参与计算，\u003ccode\u003eZ\u003c/code\u003e 的结果是 \u003ccode\u003eSeq.new(...)\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eR\u003c/code\u003e 的结果是一个操作调用 - 参数顺序相反。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这时我想起还有一个 - 目标，即星。它将显示行动的结果。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; ./rakudo-m --target=ast ~/test.raku\n[...]\n- QAST::Op(call \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2))\n  - QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;5\u0026gt; :before_promotion\u0026lt;?\u0026gt; R-\n    - QAST::Op(call \u0026amp;METAOP_REVERSE) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt;\n      - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt;\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(3)  3\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(2)  2\n[...]\n- QAST::Op(call \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;7\u0026gt; s(:foo(3 Z- 2))\n  - QAST::Op+{QAST::SpecialArg}(:named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;8\u0026gt; :before_promotion\u0026lt;?\u0026gt; Z-\n    - QAST::Op(call \u0026amp;METAOP_ZIP) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt;\n      - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt;\n      - QAST::Var(lexical \u0026amp;METAOP_REDUCE_LEFT)\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(3)  3\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(2)  2\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e一如所料。除了调用不同的 \u003ccode\u003eMETAOP_\u003c/code\u003e 函数外，所有的东西几乎都是一样的。从它们的代码中我们可以知道，原则上这些函数的不同之处在于返回值的类型 - 分别是 \u003ccode\u003eInt\u003c/code\u003e 和 \u003ccode\u003eSeq\u003c/code\u003e。众所周知，Raku 对不同类型的对象的上下文相当敏感\u0026hellip;\u0026hellip;我想，它关注的可能是返回值。我试着用下面的方式修改代码。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eMETAOP_REVERSE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"nc\"\u003eimplementation-detail\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nb\"\u003eargs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003eSeq\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nb\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e编译、运行。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; make\n[...]\nStage start      :   0.000\nStage parse      :  61.026\nStage syntaxcheck:   0.000\nStage ast        :   0.000\nStage optimize   :   7.076\nStage mast       :  14.120\nStage mbc        :   3.941\n[...]\n\u0026gt; ./rakudo-m ~/test.raku\n\\(-1)\n\\(:foo((1,).Seq))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e一切都没有改变。所以，不是返回值\u0026hellip;\u0026hellip;想了想，不知道为什么结果又是 \u003ccode\u003e-1\u003c/code\u003e 而不是 \u003ccode\u003e(-1,).Seq\u003c/code\u003e。而且，从代码来看，\u003ccode\u003eSeq\u003c/code\u003e 根本就没有一个合适的构造函数。下一次，作为一些疯狂的事情，我尝试调用 \u003ccode\u003eMETAOP_REVERSE\u003c/code\u003e 结果只是为了崩溃。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eMETAOP_REVERSE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"nc\"\u003eimplementation-detail\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nb\"\u003eargs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003edie\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e编译、运行。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; make\n[...]\n\u0026gt; ./rakudo-m ~/test.raku\n\\(-1)\n\\(:foo((1,).Seq))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e怎么会呢？语法树中包含了对 \u003ccode\u003eMETAOP_REVERSE\u003c/code\u003e 的调用，它的代码应该是折叠的，但计算仍然进行，我们得到 \u003ccode\u003e-1\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这些都不是《行动》。\u003c/p\u003e\n\u003cp\u003e这里我的目光落在编译器的构建日志上。它是一些阶段被列在那里。我随机试了 \u003ccode\u003e--target=mast\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; ./rakudo-m --target=mast ~/test.raku\n[...]\nMAST::Frame name\u0026lt;s\u0026gt;, cuuid\u0026lt;1\u0026gt;\n  Local types: 0\u0026lt;obj\u0026gt;, 1\u0026lt;obj\u0026gt;, 2\u0026lt;obj\u0026gt;, 3\u0026lt;obj\u0026gt;, 4\u0026lt;int\u0026gt;, 5\u0026lt;str\u0026gt;, 6\u0026lt;obj\u0026gt;, 7\u0026lt;obj\u0026gt;, 8\u0026lt;obj\u0026gt;,\n  Lexical types: 0\u0026lt;obj\u0026gt;, 1\u0026lt;obj\u0026gt;, 2\u0026lt;obj\u0026gt;, 3\u0026lt;obj\u0026gt;, 4\u0026lt;obj\u0026gt;,\n  Lexical names: 0\u0026lt;c\u0026gt;, 1\u0026lt;$¢\u0026gt;, 2\u0026lt;$!\u0026gt;, 3\u0026lt;$/\u0026gt;, 4\u0026lt;$*DISPATCHER\u0026gt;,\n  Lexical map: $!\u0026lt;2\u0026gt;, c\u0026lt;0\u0026gt;, $*DISPATCHER\u0026lt;4\u0026gt;, $¢\u0026lt;1\u0026gt;, $/\u0026lt;3\u0026gt;,\n  Outer: name\u0026lt;\u0026lt;unit\u0026gt;\u0026gt;, cuuid\u0026lt;2\u0026gt;\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e某种不可读的矩阵。星号和桅杆之间有一个阶段性的优化。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; ./rakudo-m --target=optimize ~/test.raku\n[...]\n- QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2))\n  - QAST::Op(call \u0026amp;infix:\u0026lt;-\u0026gt;)  :METAOP_opt_result\u0026lt;?\u0026gt;\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(2)  2\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(3)  3\n[...]\n- QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;7\u0026gt; s(:foo(3 Z- 2))\n  - QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;8\u0026gt; :before_promotion\u0026lt;?\u0026gt; Z-\n    - QAST::Op(callstatic \u0026amp;METAOP_ZIP) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt;\n      - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt;\n      - QAST::Var(lexical \u0026amp;METAOP_REDUCE_LEFT)\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(3)  3\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n      - QAST::WVal(Int)\n      - Ii\n      - QAST::IVal(2)  2\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e哈，就是这样。在优化阶段后，行将失踪。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eQAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;5\u0026gt; :before_promotion\u0026lt;?\u0026gt; R-.\u003c/code\u003e\n并将整个 \u003ccode\u003eMETAOP_REVERSE\u003c/code\u003e 调用替换为通常的操作 \u003ccode\u003e(\u0026amp;infix:\u0026lt;-\u0026gt;)\u003c/code\u003e。所以问题一定在优化器的某个地方。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e只有在 \u003ccode\u003eoptim_nameless_call\u003c/code\u003e 方法中才会提到 \u003ccode\u003e\u0026amp;METAOP_ASSIGN\u003c/code\u003e，其中 \u003ccode\u003eQAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;)\u003c/code\u003e。显然，这个操作负责生成一个命名对 - 它已经有了一个名字（命名参数），它需要计算值。从优化 \u003ccode\u003e_\u003c/code\u003e 无名方法的执行路径来看，我们可以得出结论，我们对最后一个块感兴趣。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\n  elsif self.op_eq_core($metaop, '\u0026amp;METAOP_REVERSE') {\n    return NQPMu unless nqp::istype($metaop[0], QAST::Var)\n      \u0026amp;\u0026amp; nqp::elems($op) == 3;\n    return QAST::Op.new(:op\u0026lt;call\u0026gt;, :name($metaop[0].name),\n      $op[2], $op[1]).annotate_self: 'METAOP_opt_result', 1;\n  }\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e让我提醒你，优化前的树是这样的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\n- QAST::Op(call \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2))\n  - QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;5\u0026gt; :before_promotion\u0026lt;?\u0026gt; R-\n    - QAST::Op(call \u0026amp;METAOP_REVERSE) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt;\n      - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt;\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e而精简之后，是这样的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\n- QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2))\n  - QAST::Op(call \u0026amp;infix:\u0026lt;-\u0026gt;)  :METAOP_opt_result\u0026lt;?\u0026gt;\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e也就是说，优化 \u003ccode\u003e_nameless_call\u003c/code\u003e 做了以下工作。\u003c/p\u003e\n\u003cp\u003e如果我们的 \u003ccode\u003eQAST::Op+{QAST::SpecialArg}\u003c/code\u003e 操作没有三个参数，如果 \u003ccode\u003eMETAOP_REVERSE\u003c/code\u003e 调用没有一个正确的类型，我们就返回空。这不是我们的情况。\n否则，我们将返回一个新的操作，代替我们的 \u003ccode\u003eQAST::Op+{QAST::SpecialArg}\u003c/code\u003e 操作，以相反的顺序调用 \u003ccode\u003e\u0026amp;infix:\u0026lt;-\u0026gt;\u003c/code\u003e 参数。就是说，把结果打包成一对就没了。\u003c/p\u003e\n\u003cp\u003e在摸索了一下如何解决这个问题，并阅读了 \u003ccode\u003eQAST::SpecialArg\u003c/code\u003e 和 \u003ccode\u003eQAST::Node\u003c/code\u003e 的实现后，我想到了下面的代码。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\n  elsif self.op_eq_core($metaop, '\u0026amp;METAOP_REVERSE') {\n    return NQPMu unless nqp::istype($metaop[0], QAST::Var)\n      \u0026amp;\u0026amp; nqp::elems($op) == 3;\n    my $opt_result := QAST::Op.new(:op\u0026lt;call\u0026gt;, :name($metaop[0].name),\n      $op[2], $op[1]).annotate_self: 'METAOP_opt_result', 1;\n    if $op.named { $opt_result.named($op.named) } # 添加选项 named \n    if $op.flat { $opt_result.flat($op.flat) }    # 添加选项 flat\n    return $opt_result;\n  }\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e还有木头。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\n- QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2))\n  - QAST::Op+{QAST::SpecialArg}(call \u0026amp;infix:\u0026lt;-\u0026gt; :named\u0026lt;foo\u0026gt;)  :METAOP_opt_result\u0026lt;?\u0026gt;\n    - QAST::Want \u0026lt;wanted\u0026gt; 2\n    - QAST::Want \u0026lt;wanted\u0026gt; 3\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e命名的参数返回到它的位置。测试也开始通过。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; make t/spec/S03-metaops/reverse.t\n[...]\nAll tests successful.\nFiles=1, Tests=70,  3 wallclock secs ( 0.03 usr  0.01 sys +  3.61 cusr  0.17 csys =  3.82 CPU)\nResult: PASS\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们本可以就此打住，但这是编译器优化器的代码，它的结果是一个有两个整数参数的方法调用。我认为这在某种程度上是次优的。如果我们将返回表达式改为返回 \u003ccode\u003eself.visit_op: $opt_result;\u003c/code\u003e，对产生的非优化操作调用优化器，那么产生的树就会像这样。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[...]\n- QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2))\n  - QAST::Want+{QAST::SpecialArg}(:named\u0026lt;foo\u0026gt;)\n    - QAST::WVal+{QAST::SpecialArg}(Int :named\u0026lt;foo\u0026gt;)\n    - QAST::IVal(-1)\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e现在一切都很理想。\u003c/p\u003e\n\u003ch2 id=\"分享成果\"\u003e分享成果\u003c/h2\u003e\n\u003cp\u003e我们已经到了终点线。现在我们只需要分享我们的经验。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e重要的是：运行所有的 \u003ccode\u003emake spectest\u003c/code\u003e 测试，确保没有新的东西被破坏。\u003c/li\u003e\n\u003cli\u003e在 GitHub 上使用 Rakudo 编译器和测试制作 fork 仓库。\u003c/li\u003e\n\u003cli\u003e将 fork 仓库添加为新的 git 远程仓库。\u003c/li\u003e\n\u003cli\u003ecd ~/dev-rakudo/rakudo \u0026amp;\u0026amp; git remote add fork \u003c!-- raw HTML omitted --\u003e。\u003c/li\u003e\n\u003cli\u003ecd ~/dev-rakudo/t/spec \u0026amp;\u0026amp; git remote add fork \u003c!-- raw HTML omitted --\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e重要：确保两个仓库在 git 中都有正确的用户名和用户邮箱。\u003c/p\u003e\n\u003cp\u003e提交到两个版本库，详细说明你为什么做了哪些改动，并添加对原始问题跟踪器的引用。\u003c/p\u003e\n\u003cp\u003e运行提交。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecd ~/dev-rakudo/rakudo \u0026amp;\u0026amp; git push fork\ncd ~/dev-rakudo/t/spec \u0026amp;\u0026amp; git push fork\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e向两个仓库提出拉取请求。在他们的描述中，最好是相互参照和原任务。\u003c/p\u003e\n\u003ch2 id=\"结论\"\u003e结论\u003c/h2\u003e\n\u003cp\u003e对开源软件的贡献是：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e趣味性和趣味性。\u003c/li\u003e\n\u003cli\u003e给你的感觉是，你正在做一些有用的事情，你真的是。\u003c/li\u003e\n\u003cli\u003e让你认识新的有趣和专业的人（任何关于 Raku 的问题都会在 \u003ccode\u003e#raku IRC\u003c/code\u003e 频道中得到回答）。\u003c/li\u003e\n\u003cli\u003e解决非标准任务，没有截止日期的压力，是一种很好的体验。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e选择你觉得最舒服的角色等级，去做新的任务吧!\u003c/p\u003e\n","text":"在过去的几周里，我看到了一些文章和视频，讲述了在开源软件中构思是多么的伟大。这次我又想起了另一篇旧文Raku 是我的 MMORPG。它说，你可以从以下几个方面受益于开源软件。比如说，可以做一个大侠，基于一些开源软件来写软件。作为写手，可以写博客、微博等，对所选软件产生兴趣。或者你可以成为一个法师 - 实现新的功能和修复 bug。今天小编就带着弓箭手来告诉大家如何成为 Raku 编程语言的法师。\n选择一个任务 让我们挑选一些编译器的 bug，并修复它。让我们去 Rakudo 编译器 issues中选择我们想要修复的 bug。我滚动了一下 bug 列表，遇到了解析 - 运气不错，我前段时间一直在研究编译器语法，看了一本这方面的好书。找到了四个问题。\n 标签为 LTA （Less Than Awesome - 当真实行为与直觉预期不同时）- 我们暂时把它划掉。 标签 \u0026ldquo;需要共识\u0026rdquo; - 我们只想修复一个不复杂的 bug - 肯定要划掉。 标签为 \u0026ldquo;grammar and actions\u0026rdquo; 的关于一个可能死的代码是一个很好的候选人的第一个任务。  任务确定后，现在我们需要配置工作环境。在 Windows、Linux 和 macOS 中，一切应该都差不多。我将通过 macOS 的例子来告诉你。\n建立工作环境 为源码和我们建立的编译器建立文件夹。\nmkdir ~/dev-rakudo \u0026amp;\u0026amp; mkdir ~/dev-rakudo-install Rakudo 编译器由三部分组成。\n 虚拟机。现在有三种 - JVM、JS 和 MoarVM。我们以 MoarVM 为最稳定的一个。 NQP（Not Quite Perl），是一种低级（中级）语言的实现，它是 Raku 的一个 \u0026ldquo;子集\u0026rdquo;。虚拟机可以执行用 NQP 编写的代码。 Rakudo 编译器本身，用 NQP 和 Raku 编写。  下载并编译这三个组件。我分别花了一分半钟、半分钟和两分半钟才编好。\ncd ~/dev-rakudo \u0026amp;\u0026amp; git clone git@github.com:MoarVM/MoarVM.git \u0026amp;\u0026amp; cd MoarVM perl Configure.pl --prefix ~/dev-rakudo-install \u0026amp;\u0026amp; make -j 4 \u0026amp;\u0026amp; make install cd ~/dev-rakudo \u0026amp;\u0026amp; git clone git@github.com:Raku/nqp.git \u0026amp;\u0026amp; cd nqp perl Configure.pl --backend=moar --prefix ~/dev-rakudo-install \u0026amp;\u0026amp; make -j 4 \u0026amp;\u0026amp; make install cd ~/dev-rakudo \u0026amp;\u0026amp; git clone git@github.com:rakudo/rakudo.git \u0026amp;\u0026amp; cd rakudo perl Configure.pl --backend=moar --prefix ~/dev-rakudo-install \u0026amp;\u0026amp; make -j 4 \u0026amp;\u0026amp; make install 注意参数。--prefix 显示了 make install 命令后可执行文件的复制位置，--backend=moar 表示正在使用的虚拟机，而 -j 4 则要求跨多线程并行化（以防加快进度）。现在我们已经建立了 Rakudo 编译器 ~/dev-rakudo-install/bin/raku。我们还需要官方的编译器测试套件。你应该把它和它的代码一起放在文件夹里。\ncd ~/dev-rakudo/rakudo \u0026amp;\u0026amp; git clone https://github.com/Raku/roast.git t/spec 我们先进行测试。这种情况很常见，有些测试甚至在新的变化之前就失败了。我们需要辨别出来，这样以后就不会害怕这些变化破坏了一些不必要的东西。\n这里和下面我将在 ~/dev-rakudo/rakudo 文件夹中工作，除非另有说明。\n\u0026gt; make spectest [...] Test Summary Report ------------------- t/spec/S32-str/utf8-c8.t (Wstat: 65280 Tests: 54 Failed: 0) Non-zero exit status: 255 Parse errors: Bad plan. You planned 66 tests but ran 54. Files=1346, Tests=117144, 829 wallclock secs (27.70 usr 6.04 sys + 2638.79 cusr 210.98 csys = 2883.51 CPU) Result: FAIL make: *** [m-spectest5] Error 1 14分钟内共运行了1,346个文件中的117,144次测试。一些与utf8相关的测试由于某种原因失败了，其他的都能正常工作。我们已经准备好去工作了!\n让我们来看看问题的陈述 问题陈述说，某个元运算符 R 在 colonpair 上出了问题。我打开文档，搜索 R 这个词，但下拉列表中没有这个名字的元运算符。我试着输入 metaop，看到的是反向元操作符(R)。原来，如果你想把二元运算的操作数按相反的顺序写出来，你可以在其符号前使用前缀 R。\nsay 3 R- 2 == -1 # Output: True Colonpair 是命名对的语法。它看起来就像名字前面有一个冒号，前面有一个括号，有一个值。例如 :foo(42) 是一个名称为 foo、值为 42 的对儿。这个语法通常用于在调用函数时，向函数传递一个命名参数中的值。\nsub sub-with-named-parameter(:$foo) { say $foo; } sub-with-named-parameter(:foo(42)); # Output: 42 如果一个函数参数不是命名的，而是位置的，那么在用命名对调用时，就会出现编译错误。\nsub sub-without-named-parameter($foo) { # \u0026lt;- 没有冒号 say $foo; } sub-without-named-parameter(:foo(42)); # Unexpected named argument \u0026#39;foo\u0026#39; passed 如果你在调用这样的函数时用括号包围一个参数，整个参数对将被传递到位置参数。\nsub sub-without-named-parameter($foo) { say $foo; } sub-without-named-parameter((:foo(42))); # Output: foo =\u0026gt; 42 在 Raku 中，你可以写一个函数来捕获所有传递给它的参数并分析它们。这是在单个参数 - 捕获前用竖线完成的。\nsub sub-with-capture(|foo) { # \u0026lt;- 参数捕获 say foo; } sub-with-capture(:foo(42)); # Output: \\(:foo(42)) sub-with-capture(42); # Output: \\(42) sub-with-capture(:foo(3 Z- 2)); # Output: \\(:foo((1,).Seq)) sub-with-capture(:foo(3 R- 2)); # Output: \\(-1) 倒数第二行使用了 Z 元操作符 - zip 操作符。它将左右两部分作为一个列表，按顺序每次从它们中抽取一个元素，并进行操作，从而形成一个序列。\n在最后一行，只用了我们需要的 R 元操作符。在这种情况下，它不是一个对，而是一个常量，它被传递到函数中。我们可以假设这是元运算符工作方式的一些特殊性，但用 Z 的例子表明并非如此。其实这是一个 bug - 当一个对被传递到一个使用 R 元运算符的函数中时，它的值会被转换。\n我们需要一个新的测试 为了确保未来的变化能够修复错误的行为，我们需要写一个新的测试。在测试文件中不难找到 R 元操作符的测试（S03-metops/reverse.t）。下面我将补充以下测试。\n# https://github.com/rakudo/rakudo/issues/1632 { sub subroutine($expected, |actual) { is actual.gist, $expected, \u0026#34;Сolonpair exists\u0026#34; } subroutine(\u0026#39;\\(:foo(-1))\u0026#39;, :foo(3 R- 2)); } 该测试有一个功能，有两个参数 - 正常和捕获。在函数体中，第一个参数和传递的 Capture 的字符串表示进行比较。你可以使用 make 对新构建的编译器进行单独测试。\n\u0026gt; make t/spec/S03-metaops/reverse.t [...] ok 69 - [R~]= not ok 70 - Colonpair exists # Failed test 'Colonpair exists' # at t/spec/S03-metaops/reverse.t line 191 # expected: '\\(:foo(-1))' # got: '\\(-1)' # You planned 69 tests, but ran 70 # You failed 1 test of 70 你可以看到，测试失败了（如预期）。还有一个单独的说明，系统预计69次测试，但收到70次。这是基于 TAP 的测试系统的特点 - 必须在文件的顶部修正传递给 plan 函数的数字。现在测试崩溃了，但编号没有受到影响。你可以开始修复它。\n凝视法 一开始我很相信任务上的标签 - 如果是解析的话，一定是源码解析阶段的某个地方出现了问题。目前我的认识如下：\n 基础解析器代码在文件 rakudo/src/Perl6/Grammar.nqp 中。 这个解析器是从 nqp/src/HLL/Grammar.nqp 文件中的基础解析器继承的。 元操作符的解析和工作方式都差不多，你可以通过仔细观察来发现不同之处。  我在基础解析器代码中找到了对元操作符的引用。\ntoken infix_prefix_meta_operator:sym\u0026lt;R\u0026gt; {\u0026lt;sym\u0026gt;\u0026lt;infixish(\u0026#39;R\u0026#39;)\u0026gt;{}\u0026lt;.can_meta($\u0026lt;infixish\u0026gt;, \u0026#34;reverse the args of\u0026#34;)\u0026gt;\u0026lt;O=.revO($\u0026lt;infixish\u0026gt;)\u0026gt;} token infix_prefix_meta_operator:sym\u0026lt;Z\u0026gt; {\u0026lt;sym\u0026gt;\u0026lt;infixish(\u0026#39;Z\u0026#39;)\u0026gt;{}\u0026lt;.can_meta($\u0026lt;infixish\u0026gt;, \u0026#34;zip with\u0026#34;)\u0026gt;\u0026lt;O(|%list_infix)\u0026gt;} 这需要对 Raku grammar 有一定的了解。据我所知，原来这两个元运算符在解析上并没有根本的区别。一段时间后，在解析器的源代码中挖得够多了，我开始怀疑解析工作是否正确。认为代码 my $r = :foo(3 R- 2); say $r; # Output: foo =\u0026gt; -1 正确工作的建议 - 问题恰恰发生在调用函数时。显然，我白白相信了任务栏上的标签。\n编译器将帮助我们 颇为迟钝的我想起了我从一开始就应该做的事情。Rakudo 编译器有 --target 调试开关。它取编译器阶段的名称，你想将其结果输出到控制台并退出。我想看看 --target=parse（因为我只知道这一个）。\n我从 ~/dev-rakudo/rakudo 文件夹中使用 rakumo-m，这样我就不必等待通过 make install 命令将所需文件复制到 ~/dev-rakudo-install。简单的脚本可以这样运行。更复杂的脚本必须在 make install 之后从 -install 中运行。\n\u0026gt; cat ~/test.raku sub s(|c) { say c } s(:foo(3 R- 2)); s(:foo(3 Z- 2)); \u0026gt; ./rakudo-m --target=parse ~/test.raku [...] - args: (:foo(3 R- 2)) - semiarglist: :foo(3 R- 2) - arglist: 1 matches - EXPR: :foo(3 R- 2) - colonpair: :foo(3 R- 2) - identifier: foo - coloncircumfix: (3 R- 2) - circumfix: (3 R- 2) - semilist: 3 R- 2 - statement: 1 matches - EXPR: R- 2 [...] - args: (:foo(3 Z- 2)) - semiarglist: :foo(3 Z- 2) - arglist: 1 matches - EXPR: :foo(3 Z- 2) - colonpair: :foo(3 Z- 2) - identifier: foo - coloncircumfix: (3 Z- 2) - circumfix: (3 Z- 2) - semilist: 3 Z- 2 - statement: 1 matches - EXPR: Z- 2 [...] 结论：R 和 Z 的解析是一样的。\n这不是解析 所有被解析的东西都会被传递给所谓的 Action，把字词变成一棵语法树。在我们的例子中，Actions 位于文件 rakudo/src/Perl6/Actions.nqp 和 nqp/src/HLL/Actions.nqp 中。这里就比较容易搞清楚了，毕竟是代码，是 grammar。\n我在主 Actions 中找到了以下代码。\n[...] elsif $\u0026lt;infix_prefix_meta_operator\u0026gt; { [...] if $metasym eq 'R' { $helper := '\u0026amp;METAOP_REVERSE'; $t := nqp::flip($t) if $t; } elsif $metasym eq 'X' { $helper := '\u0026amp;METAOP_CROSS'; $t := nqp::uc($t); } elsif $metasym eq 'Z' { $helper := '\u0026amp;METAOP_ZIP'; $t := nqp::uc($t); } my $metapast := QAST::Op.new( :op\u0026lt;call\u0026gt;, :name($helper), WANTED($basepast,'infixish') ); $metapast.push(QAST::Var.new(:name(baseop_reduce($base\u0026lt;OPER\u0026gt;\u0026lt;O\u0026gt;.made)), :scope\u0026lt;lexical\u0026gt;)) if $metasym eq 'X' || $metasym eq 'Z'; [...] 它说，如果在代码中解析了元操作符 R、Z 或 X，就应该在语法树中添加一些 METAOP_ 函数调用。在 Z 和 X 的情况下，它会多一个参数，即某种还原函数。所有这些功能都可以在 rakudo/src/core.c/metaops.pm6 中找到。\nsub METAOP_REVERSE(\\op) is implementation-detail { -\u0026gt; |args { op.(|args.reverse) } } sub METAOP_ZIP(\\op, \u0026amp;reduce) is implementation-detail { nqp::if(op.prec(\u0026#39;thunky\u0026#39;).starts-with(\u0026#39;.\u0026#39;), -\u0026gt; +lol { my $arity = lol.elems; [...] }, -\u0026gt; +lol { Seq.new(Rakudo::Iterator.ZipIterablesOp(lol,op)) } ) } 给你：\n \\op 是由我们的元操作符，即-，在前面的操作。 Trait implementation-detail 只是表明这不是公共代码，是编译器实现的一部分。 由于-操作没有笨重的特性，所以 \u0026amp;reduce 函数不会参与计算，Z 的结果是 Seq.new(...)。 R 的结果是一个操作调用 - 参数顺序相反。  这时我想起还有一个 - 目标，即星。它将显示行动的结果。\n\u0026gt; ./rakudo-m --target=ast ~/test.raku [...] - QAST::Op(call \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2)) - QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;5\u0026gt; :before_promotion\u0026lt;?\u0026gt; R- - QAST::Op(call \u0026amp;METAOP_REVERSE) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt; - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt; - QAST::Want \u0026lt;wanted\u0026gt; 3 - QAST::WVal(Int) - Ii - QAST::IVal(3) 3 - QAST::Want \u0026lt;wanted\u0026gt; 2 - QAST::WVal(Int) - Ii - QAST::IVal(2) 2 [...] - QAST::Op(call \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;7\u0026gt; s(:foo(3 Z- 2)) - QAST::Op+{QAST::SpecialArg}(:named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;8\u0026gt; :before_promotion\u0026lt;?\u0026gt; Z- - QAST::Op(call \u0026amp;METAOP_ZIP) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt; - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt; - QAST::Var(lexical \u0026amp;METAOP_REDUCE_LEFT) - QAST::Want \u0026lt;wanted\u0026gt; 3 - QAST::WVal(Int) - Ii - QAST::IVal(3) 3 - QAST::Want \u0026lt;wanted\u0026gt; 2 - QAST::WVal(Int) - Ii - QAST::IVal(2) 2 [...] 一如所料。除了调用不同的 METAOP_ 函数外，所有的东西几乎都是一样的。从它们的代码中我们可以知道，原则上这些函数的不同之处在于返回值的类型 - 分别是 Int 和 Seq。众所周知，Raku 对不同类型的对象的上下文相当敏感\u0026hellip;\u0026hellip;我想，它关注的可能是返回值。我试着用下面的方式修改代码。\nsub METAOP_REVERSE(\\op) is implementation-detail { -\u0026gt; |args { Seq.new(op.(|args.reverse)) } } 编译、运行。\n\u0026gt; make [...] Stage start : 0.000 Stage parse : 61.026 Stage syntaxcheck: 0.000 Stage ast : 0.000 Stage optimize : 7.076 Stage mast : 14.120 Stage mbc : 3.941 [...] \u0026gt; ./rakudo-m ~/test.raku \\(-1) \\(:foo((1,).Seq)) 一切都没有改变。所以，不是返回值\u0026hellip;\u0026hellip;想了想，不知道为什么结果又是 -1 而不是 (-1,).Seq。而且，从代码来看，Seq 根本就没有一个合适的构造函数。下一次，作为一些疯狂的事情，我尝试调用 METAOP_REVERSE 结果只是为了崩溃。\nsub METAOP_REVERSE(\\op) is implementation-detail { -\u0026gt; |args { die } } 编译、运行。\n\u0026gt; make [...] \u0026gt; ./rakudo-m ~/test.raku \\(-1) \\(:foo((1,).Seq)) 怎么会呢？语法树中包含了对 METAOP_REVERSE 的调用，它的代码应该是折叠的，但计算仍然进行，我们得到 -1。\n这些都不是《行动》。\n这里我的目光落在编译器的构建日志上。它是一些阶段被列在那里。我随机试了 --target=mast。\n\u0026gt; ./rakudo-m --target=mast ~/test.raku [...] MAST::Frame name\u0026lt;s\u0026gt;, cuuid\u0026lt;1\u0026gt; Local types: 0\u0026lt;obj\u0026gt;, 1\u0026lt;obj\u0026gt;, 2\u0026lt;obj\u0026gt;, 3\u0026lt;obj\u0026gt;, 4\u0026lt;int\u0026gt;, 5\u0026lt;str\u0026gt;, 6\u0026lt;obj\u0026gt;, 7\u0026lt;obj\u0026gt;, 8\u0026lt;obj\u0026gt;, Lexical types: 0\u0026lt;obj\u0026gt;, 1\u0026lt;obj\u0026gt;, 2\u0026lt;obj\u0026gt;, 3\u0026lt;obj\u0026gt;, 4\u0026lt;obj\u0026gt;, Lexical names: 0\u0026lt;c\u0026gt;, 1\u0026lt;$¢\u0026gt;, 2\u0026lt;$!\u0026gt;, 3\u0026lt;$/\u0026gt;, 4\u0026lt;$*DISPATCHER\u0026gt;, Lexical map: $!\u0026lt;2\u0026gt;, c\u0026lt;0\u0026gt;, $*DISPATCHER\u0026lt;4\u0026gt;, $¢\u0026lt;1\u0026gt;, $/\u0026lt;3\u0026gt;, Outer: name\u0026lt;\u0026lt;unit\u0026gt;\u0026gt;, cuuid\u0026lt;2\u0026gt; [...] 某种不可读的矩阵。星号和桅杆之间有一个阶段性的优化。\n\u0026gt; ./rakudo-m --target=optimize ~/test.raku [...] - QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2)) - QAST::Op(call \u0026amp;infix:\u0026lt;-\u0026gt;) :METAOP_opt_result\u0026lt;?\u0026gt; - QAST::Want \u0026lt;wanted\u0026gt; 2 - QAST::WVal(Int) - Ii - QAST::IVal(2) 2 - QAST::Want \u0026lt;wanted\u0026gt; 3 - QAST::WVal(Int) - Ii - QAST::IVal(3) 3 [...] - QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;7\u0026gt; s(:foo(3 Z- 2)) - QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;8\u0026gt; :before_promotion\u0026lt;?\u0026gt; Z- - QAST::Op(callstatic \u0026amp;METAOP_ZIP) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt; - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt; - QAST::Var(lexical \u0026amp;METAOP_REDUCE_LEFT) - QAST::Want \u0026lt;wanted\u0026gt; 3 - QAST::WVal(Int) - Ii - QAST::IVal(3) 3 - QAST::Want \u0026lt;wanted\u0026gt; 2 - QAST::WVal(Int) - Ii - QAST::IVal(2) 2 [...] 哈，就是这样。在优化阶段后，行将失踪。\n QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;5\u0026gt; :before_promotion\u0026lt;?\u0026gt; R-. 并将整个 METAOP_REVERSE 调用替换为通常的操作 (\u0026amp;infix:\u0026lt;-\u0026gt;)。所以问题一定在优化器的某个地方。  只有在 optim_nameless_call 方法中才会提到 \u0026amp;METAOP_ASSIGN，其中 QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;)。显然，这个操作负责生成一个命名对 - 它已经有了一个名字（命名参数），它需要计算值。从优化 _ 无名方法的执行路径来看，我们可以得出结论，我们对最后一个块感兴趣。\n[...] elsif self.op_eq_core($metaop, '\u0026amp;METAOP_REVERSE') { return NQPMu unless nqp::istype($metaop[0], QAST::Var) \u0026amp;\u0026amp; nqp::elems($op) == 3; return QAST::Op.new(:op\u0026lt;call\u0026gt;, :name($metaop[0].name), $op[2], $op[1]).annotate_self: 'METAOP_opt_result', 1; } [...] 让我提醒你，优化前的树是这样的。\n[...] - QAST::Op(call \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2)) - QAST::Op+{QAST::SpecialArg}(call :named\u0026lt;foo\u0026gt;) \u0026lt;wanted\u0026gt; :statement_id\u0026lt;5\u0026gt; :before_promotion\u0026lt;?\u0026gt; R- - QAST::Op(call \u0026amp;METAOP_REVERSE) \u0026lt;wanted\u0026gt; :is_pure\u0026lt;?\u0026gt; - QAST::Var(lexical \u0026amp;infix:\u0026lt;-\u0026gt;) \u0026lt;wanted\u0026gt; - QAST::Want \u0026lt;wanted\u0026gt; 3 - QAST::Want \u0026lt;wanted\u0026gt; 2 [...] 而精简之后，是这样的。\n[...] - QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2)) - QAST::Op(call \u0026amp;infix:\u0026lt;-\u0026gt;) :METAOP_opt_result\u0026lt;?\u0026gt; - QAST::Want \u0026lt;wanted\u0026gt; 2 - QAST::Want \u0026lt;wanted\u0026gt; 3 [...] 也就是说，优化 _nameless_call 做了以下工作。\n如果我们的 QAST::Op+{QAST::SpecialArg} 操作没有三个参数，如果 METAOP_REVERSE 调用没有一个正确的类型，我们就返回空。这不是我们的情况。 否则，我们将返回一个新的操作，代替我们的 QAST::Op+{QAST::SpecialArg} 操作，以相反的顺序调用 \u0026amp;infix:\u0026lt;-\u0026gt; 参数。就是说，把结果打包成一对就没了。\n在摸索了一下如何解决这个问题，并阅读了 QAST::SpecialArg 和 QAST::Node 的实现后，我想到了下面的代码。\n[...] elsif self.op_eq_core($metaop, '\u0026amp;METAOP_REVERSE') { return NQPMu unless nqp::istype($metaop[0], QAST::Var) \u0026amp;\u0026amp; nqp::elems($op) == 3; my $opt_result := QAST::Op.new(:op\u0026lt;call\u0026gt;, :name($metaop[0].name), $op[2], $op[1]).annotate_self: 'METAOP_opt_result', 1; if $op.named { $opt_result.named($op.named) } # 添加选项 named if $op.flat { $opt_result.flat($op.flat) } # 添加选项 flat return $opt_result; } [...] 还有木头。\n[...] - QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2)) - QAST::Op+{QAST::SpecialArg}(call \u0026amp;infix:\u0026lt;-\u0026gt; :named\u0026lt;foo\u0026gt;) :METAOP_opt_result\u0026lt;?\u0026gt; - QAST::Want \u0026lt;wanted\u0026gt; 2 - QAST::Want \u0026lt;wanted\u0026gt; 3 [...] 命名的参数返回到它的位置。测试也开始通过。\n\u0026gt; make t/spec/S03-metaops/reverse.t [...] All tests successful. Files=1, Tests=70, 3 wallclock secs ( 0.03 usr 0.01 sys + 3.61 cusr 0.17 csys = 3.82 CPU) Result: PASS 我们本可以就此打住，但这是编译器优化器的代码，它的结果是一个有两个整数参数的方法调用。我认为这在某种程度上是次优的。如果我们将返回表达式改为返回 self.visit_op: $opt_result;，对产生的非优化操作调用优化器，那么产生的树就会像这样。\n[...] - QAST::Op(callstatic \u0026amp;s) \u0026lt;sunk\u0026gt; :statement_id\u0026lt;4\u0026gt; s(:foo(3 R- 2)) - QAST::Want+{QAST::SpecialArg}(:named\u0026lt;foo\u0026gt;) - QAST::WVal+{QAST::SpecialArg}(Int :named\u0026lt;foo\u0026gt;) - QAST::IVal(-1) [...] 现在一切都很理想。\n分享成果 我们已经到了终点线。现在我们只需要分享我们的经验。\n 重要的是：运行所有的 make spectest 测试，确保没有新的东西被破坏。 在 GitHub 上使用 Rakudo 编译器和测试制作 fork 仓库。 将 fork 仓库添加为新的 git 远程仓库。 cd ~/dev-rakudo/rakudo \u0026amp;\u0026amp; git remote add fork 。 cd ~/dev-rakudo/t/spec \u0026amp;\u0026amp; git remote add fork 。  重要：确保两个仓库在 git 中都有正确的用户名和用户邮箱。\n提交到两个版本库，详细说明你为什么做了哪些改动，并添加对原始问题跟踪器的引用。\n运行提交。\ncd ~/dev-rakudo/rakudo \u0026amp;\u0026amp; git push fork cd ~/dev-rakudo/t/spec \u0026amp;\u0026amp; git push fork 向两个仓库提出拉取请求。在他们的描述中，最好是相互参照和原任务。\n结论 对开源软件的贡献是：\n 趣味性和趣味性。 给你的感觉是，你正在做一些有用的事情，你真的是。 让你认识新的有趣和专业的人（任何关于 Raku 的问题都会在 #raku IRC 频道中得到回答）。 解决非标准任务，没有截止日期的压力，是一种很好的体验。  选择你觉得最舒服的角色等级，去做新的任务吧!\n"},"name":"为最年轻的 Raku 贡献力量","published":"2021-02-16T00:00:00+08:00","summary":"Contributing to Raku","type":"entry","url":"https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/"},{"content":{"html":"\u003cp\u003e[113] 发表于2021年1月30日。\n这是我对 \u003ca href=\"https://perlweeklychallenge.org/blog/perl-weekly-challenge-097/\"\u003ePerl 每周挑战#097\u003c/a\u003e 的回应。\u003c/p\u003e\n\u003ch2 id=\"挑战-0971-凯撒密码\"\u003e挑战 #097.1: 凯撒密码\u003c/h2\u003e\n\u003cp\u003e给你一个只包含字母 \u003ccode\u003eA..Z\u003c/code\u003e 的字符串 \u003ccode\u003e$S\u003c/code\u003e 和一个数字 \u003ccode\u003e$N\u003c/code\u003e。\n写一个脚本，用\u003ca href=\"https://en.wikipedia.org/wiki/Caesar_cipher\"\u003e凯撒密码\u003c/a\u003e对给定的字符串 \u003ccode\u003e$S\u003c/code\u003e 进行加密，左移大小为 \u003ccode\u003e$N\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e例子:\n输入: $S = \u0026ldquo;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\u0026rdquo;, $N = 3\n输出: \u0026ldquo;QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\u0026rdquo;\u003c/p\u003e\n\u003cp\u003ePlain:    ABCDEFGHIJKLMNOPQRSTUVWXYZ\nCipher:   XYZABCDEFGHIJKLMNOPQRSTUVW\u003c/p\u003e\n\u003cp\u003ePlaintext:  THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\nCiphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;只用字母 \u003ccode\u003eA...Z\u003c/code\u003e\u0026rdquo; 的表述是错误的，因为例子中也有几个空格。因此，应该允许这些空格。\u003c/p\u003e\n\u003cp\u003e文件: caesar-cipher\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"ch\"\u003e#! /usr/bin/env raku\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003esubset\u003c/span\u003e \u003cspan class=\"nc\"\u003eAZ-space\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nb\"\u003eStr\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"o\"\u003e/^\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e[ A .. Z \\s ]\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# [1]\u003c/span\u003e\n\u003cspan class=\"k\"\u003esubset\u003c/span\u003e \u003cspan class=\"nc\"\u003ePosInt\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e25\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e            \u003cspan class=\"c1\"\u003e# [2]\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eunit\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003eMAIN\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAZ-space\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n               \u003cspan class=\"n\"\u003ePosInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                         \u003cspan class=\"c1\"\u003e# [3]\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecomb\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nf\"\u003ecaesar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e              \u003cspan class=\"c1\"\u003e# [4]\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ecaesar\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$char\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$shift\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$char\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$char\u003c/span\u003e \u003cspan class=\"ow\"\u003eeq\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e                        \u003cspan class=\"c1\"\u003e# [5]\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$char\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                                \u003cspan class=\"c1\"\u003e# [6]\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$shift\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                                     \u003cspan class=\"c1\"\u003e# [7]\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e65\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# \u0026#39;A\u0026#39;                    # [8]\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e90\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# \u0026#39;Z\u0026#39;                    # [8a]\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                                    \u003cspan class=\"c1\"\u003e# [9]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e[1] 所允许的字符 (或 «特定领域字母»).\u003c/p\u003e\n\u003cp\u003e[2] 挑战说左移值是一个数字。允许除整数以外的任何东西是没有意义的，所以我把值限制在这个类型。负值应该是可以的，它们意味着右移值（而不是左移）。\u003c/p\u003e\n\u003cp\u003e[3] 参数，默认值为挑战中给出的值。\u003c/p\u003e\n\u003cp\u003e[4] 将字符串分割成单个字符（用梳子(comb)，在每个字符上应用 \u0026ldquo;caesar\u0026rdquo; 函数（用map），再次将字符连接成一个字符串（用join），然后打印出来。\u003c/p\u003e\n\u003cp\u003e[5] 不移动空格。\u003c/p\u003e\n\u003cp\u003e[6] 获取字符的代码点。\u003c/p\u003e\n\u003cp\u003e[7] 减去移位值（当我们向左移位时，或在字母表中降低移位值）。\u003c/p\u003e\n\u003cp\u003e[8] 绕回, 如果我们移出A-Z范围，这里为更低 - 或更高的 [8b]。\u003c/p\u003e\n\u003cp\u003e[9] 获取指定代码点的字符。\u003c/p\u003e\n\u003cp\u003e查看 docs.raku.org/routine/ord 获取更多关于 ord 的信息。\u003c/p\u003e\n\u003cp\u003e查看 docs.raku.org/routine/chr 获取更多关于 chr 的信息。\u003c/p\u003e\n\u003cp\u003e运行它:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3\nQEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\n\n$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3\nWKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ\n\n$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13\nGUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT\n\n$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13\nGUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRaku 有一个 ords 变体，它接收一整个字符串，而不是一个字符作为 ord。还有 chrs，它接收一个代码点数组，并将它们变成一个字符串，而不是像 chr 那样接收一个字符的代码点。让我们用它们来写一个更短的程序。\u003c/p\u003e\n\u003cp\u003e文件: caesar-cipher-map\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"ch\"\u003e#! /usr/bin/env raku\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003esubset\u003c/span\u003e \u003cspan class=\"nc\"\u003eAZ-space\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nb\"\u003eStr\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"o\"\u003e/^\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e[ A .. Z \\s ]\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003esubset\u003c/span\u003e \u003cspan class=\"nc\"\u003ePosInt\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e25\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eunit\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003eMAIN\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAZ-space\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n               \u003cspan class=\"n\"\u003ePosInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nf\"\u003ecaesar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$S\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ecaesar\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$string\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$shift\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$string\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eords\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e \u003cspan class=\"o\"\u003e!!\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nv\"\u003e$shift\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e65\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e65\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echrs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# #################### # 1a ############# ############ # 1b  # 1c ## 1d\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e[1] 我们使用map来改变各个代码点。我们让代码点为32的空间单独存在[1a]。每一个其他的值我们都还原成0到25之间的数字（通过减去第一个字母的代码点（A：65）和移位值[1b]）。模数运算符 (%) 为我们处理负值，做正确的事情。例如：-2 % 26 -\u0026gt; 24 [1c]。然后我们添加调整值到它们应该在的位置(从A到Z)[1d]，然后我们将整个数组的代码点变成一个字符串。\u003c/p\u003e\n\u003cp\u003e查看 docs.raku.org/routine/ords 获取更多关于 ords 的信息。\u003c/p\u003e\n\u003cp\u003e查看 docs.raku.org/routine/chrs 获取更多关于 chrs 的信息。\u003c/p\u003e\n\u003cp\u003e运行它的结果和之前一样。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3\nQEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\n\n$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3\nWKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ\n\n$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13\nGUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT\n\n$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13\nGUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"perl-版本\"\u003ePerl 版本\u003c/h2\u003e\n\u003cp\u003e这是对第一个 Raku 版的直接翻译。\u003c/p\u003e\n\u003cp\u003eFile: caesar-cipher-perl\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"ch\"\u003e#! /usr/bin/env perl\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003estrict\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003ewarnings\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003efeature\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;say\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003efeature\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;signatures\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eno\u003c/span\u003e \u003cspan class=\"nn\"\u003ewarnings\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;experimental::signatures\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@ARGV\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"sr\"\u003e//\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003edie\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Illegal characters\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e \u003cspan class=\"o\"\u003e=~\u003c/span\u003e\u003cspan class=\"sr\"\u003e /^[A-Z\\s]+$/\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@ARGV\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"sr\"\u003e//\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003edie\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Illegal shift $N\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e \u003cspan class=\"o\"\u003e!~\u003c/span\u003e \u003cspan class=\"sr\"\u003e/^\\-?\\d+$/\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e25\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ecaesar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$N\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"nb\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sr\"\u003e//\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ecaesar\u003c/span\u003e \u003cspan class=\"p\"\u003e($char, $shift)\n\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$char\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$char\u003c/span\u003e \u003cspan class=\"ow\"\u003eeq\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$char\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$shift\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e65\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# \u0026#39;A\u0026#39;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e90\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# \u0026#39;Z\u0026#39;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$code\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e运行它的结果和 Raku 版一样。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3\nQEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\n\n$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3\nWKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ\n\n$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13\nGUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT\n\n$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13\nGUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"挑战-0972二进制子字符串binary-substrings\"\u003e挑战 #097.2：二进制子字符串(Binary Substrings)\u003c/h2\u003e\n\u003cp\u003e给你一个二进制字符串 \u003ccode\u003e$B\u003c/code\u003e 和一个整数 \u003ccode\u003e$S\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e写一个脚本来拆分大小为 \u003ccode\u003e$S\u003c/code\u003e 的二进制字符串 \u003ccode\u003e$B\u003c/code\u003e，然后找出使其相同的最小翻转次数。\u003c/p\u003e\n\u003cp\u003e例 1:\n输入: $B = “101100101”, $S = 3\n输出: 1\u003c/p\u003e\n\u003cp\u003e二进制子字符串:\n\u0026ldquo;101\u0026rdquo;: 0 flip\n\u0026ldquo;100\u0026rdquo;: 1 flip to make it \u0026ldquo;101\u0026rdquo;\n\u0026ldquo;101\u0026rdquo;: 0 flip\u003c/p\u003e\n\u003cp\u003e例 2:\n输入 $B = “10110111”, $S = 4\n输出: 2\u003c/p\u003e\n\u003cp\u003e二进制子字符串:\n\u0026ldquo;1011\u0026rdquo;: 0 flip\n\u0026ldquo;0111\u0026rdquo;: 2 flips to make it \u0026ldquo;1011\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e我们先从第一个例子中的二进制子字符串中砍掉3个字符块。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; say \u0026quot;101100101\u0026quot;.comb(3);   # -\u0026gt; (101 100 101)\n\u0026gt; say \u0026quot;1011001010\u0026quot;.comb(3);  # -\u0026gt; (101 100 101 0)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e第二行显示了如果长度不匹配会发生什么。这就给了我们一个非法的值，因为我们不能将一位数翻转为三位数的值。所以我们必须添加一个检查。\u003c/p\u003e\n\u003cp\u003e然后我们将第一个子串与其余的子串进行比较，一次一个。在这里使用bitwise XOR（Exclusive OR）运算符是一个合理的选择。这给了我们一个二进制值，其中1的数量就是该子串的翻转次数。Raku确实有一个XOR运算符。+^. 但是它 \u0026ldquo;将两个参数都强制为Int，并进行位智XOR操作\u0026rdquo;(根据文档\u0026quot;；参见docs.raku.org/language/operators#infix_+^)。\u003c/p\u003e\n\u003cp\u003e我们可以在进行XOR操作之前，将二进制值转换为十进制值。让我们试试。\u003c/p\u003e\n\u003cp\u003e获取翻转的次数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; say (\u0026quot;10101\u0026quot;.parse-base(2) +^ \u0026quot;10111\u0026quot;.parse-base(2)).base(2).comb.sum;  # -\u0026gt; 1\n\u0026gt; say (\u0026quot;11101\u0026quot;.parse-base(2) +^ \u0026quot;10111\u0026quot;.parse-base(2)).base(2).comb.sum;  # -\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这当然可行，但需要大量的代码。所以我将使用一个更简单的方法 - 逐个比较每个数字。\u003c/p\u003e\n\u003cp\u003eFile: binary-substring\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"ch\"\u003e#! /usr/bin/env raku\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003esubset\u003c/span\u003e \u003cspan class=\"nc\"\u003eBinaryString\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"o\"\u003e/^\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e[01]\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                    \u003cspan class=\"c1\"\u003e# [1]\u003c/span\u003e\n\u003cspan class=\"k\"\u003esubset\u003c/span\u003e \u003cspan class=\"nc\"\u003ePosInt\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                           \u003cspan class=\"c1\"\u003e# [2]\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eunit\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003eMAIN\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBinaryString\u003c/span\u003e \u003cspan class=\"nv\"\u003e$B\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e101100101\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e               \u003cspan class=\"c1\"\u003e# [1]\u003c/span\u003e\n               \u003cspan class=\"n\"\u003ePosInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"nv\"\u003e$B\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# [2]\u003c/span\u003e\n\t       \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$verbose\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@B\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$B\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecomb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$S\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                                \u003cspan class=\"c1\"\u003e# [3]\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$first\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e@B\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eshift\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                                       \u003cspan class=\"c1\"\u003e# [4]\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$total\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                                              \u003cspan class=\"c1\"\u003e# [5]\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@B\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$current\u003c/span\u003e                                          \u003cspan class=\"c1\"\u003e# [6]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$flip\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003ebit-diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$first\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$current\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                    \u003cspan class=\"c1\"\u003e# [7]\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$total\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$flip\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                                          \u003cspan class=\"c1\"\u003e# [8]\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$first\u003c/span\u003e\u003cspan class=\"s2\"\u003e -\u0026gt; \u003c/span\u003e\u003cspan class=\"nv\"\u003e$current\u003c/span\u003e\u003cspan class=\"s2\"\u003e -\u0026gt; Flip: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$flip\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$verbose\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$total\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                                                 \u003cspan class=\"c1\"\u003e# [9]\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ebit-diff\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e                                       \u003cspan class=\"c1\"\u003e# [7]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$flip\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                                             \u003cspan class=\"c1\"\u003e# [10]\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$index\u003c/span\u003e                                   \u003cspan class=\"c1\"\u003e# [11]\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$flip\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$index\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"ow\"\u003ene\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$index\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# [12]\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$flip\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e[1] 确保二进制字符串是合法的（只包含 \u0026ldquo;0 \u0026ldquo;和 \u0026ldquo;1\u0026rdquo;）。\u003c/p\u003e\n\u003cp\u003e[2] 确保是一个正整数，同时确保字符串是被它偶数分割的。(例如，\u0026ldquo;4 \u0026ldquo;给我们提供了长度为4的子串，如果最后一个较短，程序将中止。)\u003c/p\u003e\n\u003cp\u003e[3] 梳子通常用于将一个字符串分割成单个字符，但我们可以通过指定长度来获得每个子字符串中的多个字符，比如这样。\u003c/p\u003e\n\u003cp\u003e[4] 例子首先将第一个子串与自己进行比较，给出零翻转。这是愚蠢的(ish)，所以我跳过这一点，把第一个子串移出。\u003c/p\u003e\n\u003cp\u003e[5] 结果会到这里。\u003c/p\u003e\n\u003cp\u003e[6] 对于每一个子串（除了第一个，见[4]）。\u003c/p\u003e\n\u003cp\u003e[7] 获取每个子串的翻转次数。\u003c/p\u003e\n\u003cp\u003e[8] 并将其添加到总数中。\u003c/p\u003e\n\u003cp\u003e[9] 打印它。\u003c/p\u003e\n\u003cp\u003e[10] 翻转的数量会在这里。\u003c/p\u003e\n\u003cp\u003e[11] 对于两个子串中的每个索引（具有相同的长度）。\u003c/p\u003e\n\u003cp\u003e[12] - 如果给定位置上的字符不同，则在总数的基础上加1，意味着移动。\u003c/p\u003e\n\u003cp\u003eSee docs.raku.org/routine/comb for more information about comb.\u003c/p\u003e\n\u003cp\u003e运行它。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ./binary-substring \u0026quot;101100101\u0026quot; 3\n 1\n\n$ ./binary-substring -v \u0026quot;101100101\u0026quot; 3\n: 101 -\u0026gt; 100 -\u0026gt; Flip: 1\n: 101 -\u0026gt; 101 -\u0026gt; Flip: 0\n1\n\n$ ./binary-substring \u0026quot;10110111\u0026quot; 4\n2\n\n$ ./binary-substring -v \u0026quot;10110111\u0026quot; 4\n: 1011 -\u0026gt; 0111 -\u0026gt; Flip: 2\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e看起来不错。\u003c/p\u003e\n\u003ch2 id=\"perl\"\u003ePerl\u003c/h2\u003e\n\u003cp\u003e这是对 Raku 版本的直接翻译，只是我必须实现 \u0026ldquo;comb\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e文件： binary-substring-perl\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"ch\"\u003e#! /usr/bin/env perl\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nb\"\u003estrict\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003ewarnings\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nb\"\u003efeature\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esay\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nb\"\u003efeature\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esignatures\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eGetopt::Long\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eno\u003c/span\u003e \u003cspan class=\"nf\"\u003ewarnings\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eexperimental::signatures\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$verbose\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003eGetOptions\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003everbose\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \\\u003cspan class=\"nv\"\u003e$verbose\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$B\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@ARGV\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e//\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e101100101\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003edie\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eNot a binary number\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"nv\"\u003e$B\u003c/span\u003e \u003cspan class=\"o\"\u003e=~\u003c/span\u003e \u003cspan class=\"o\"\u003e/^[\u003c/span\u003e\u003cspan class=\"mo\"\u003e01\u003c/span\u003e\u003cspan class=\"o\"\u003e]+\u003c/span\u003e\u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@ARGV\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e//\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003edie\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eNot an integer\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e \u003cspan class=\"o\"\u003e=~\u003c/span\u003e \u003cspan class=\"o\"\u003e/^[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"o\"\u003e]*\u003c/span\u003e\u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003edie\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eNot a legal length\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nf\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$B\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e%\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@B\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e  \u003cspan class=\"nb\"\u003ecomb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$B\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$S\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$first\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@B\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$total\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$current\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@B\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$flip\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003ebit_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$first\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$current\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$total\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$flip\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$first\u003c/span\u003e\u003cspan class=\"s2\"\u003e -\u0026gt; \u003c/span\u003e\u003cspan class=\"nv\"\u003e$current\u003c/span\u003e\u003cspan class=\"s2\"\u003e -\u0026gt; Flip: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$flip\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$verbose\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$total\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ebit_diff\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$flip\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$index\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e..\u003c/span\u003e \u003cspan class=\"nf\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$flip\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$index\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"ow\"\u003ene\u003c/span\u003e \u003cspan class=\"nb\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$index\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$flip\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003ecomb\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$string\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$length\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# [1]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@result\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$string\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@result\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$string\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$length\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$string\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$string\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$length\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e@result\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e[1] 缺失的 Raku 例程 \u0026ldquo;comb\u0026rdquo;。可选的第二个参数指定了它所返回的每个子串中所包含的（第一个参数的）子串长度。\u003c/p\u003e\n\u003cp\u003e运行它的结果与 Raku 版本相同。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ./binary-substring-perl \u0026quot;101100101\u0026quot; 3\n1\n\n$ ./binary-substring-perl -v \u0026quot;101100101\u0026quot; 3\n: 101 -\u0026gt; 100 -\u0026gt; Flip: 1\n: 101 -\u0026gt; 101 -\u0026gt; Flip: 0\n1\n\n$ ./binary-substring-perl \u0026quot;101100111\u0026quot; 3\n2\n\n$ ./binary-substring-perl -v \u0026quot;101100111\u0026quot; 3\n: 101 -\u0026gt; 100 -\u0026gt; Flip: 1\n: 101 -\u0026gt; 111 -\u0026gt; Flip: 1\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e就是这样。\u003c/p\u003e\n","text":"[113] 发表于2021年1月30日。 这是我对 Perl 每周挑战#097 的回应。\n挑战 #097.1: 凯撒密码 给你一个只包含字母 A..Z 的字符串 $S 和一个数字 $N。 写一个脚本，用凯撒密码对给定的字符串 $S 进行加密，左移大小为 $N。\n例子: 输入: $S = \u0026ldquo;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\u0026rdquo;, $N = 3 输出: \u0026ldquo;QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\u0026rdquo;\nPlain: ABCDEFGHIJKLMNOPQRSTUVWXYZ Cipher: XYZABCDEFGHIJKLMNOPQRSTUVW\nPlaintext: THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG Ciphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD\n\u0026ldquo;只用字母 A...Z\u0026rdquo; 的表述是错误的，因为例子中也有几个空格。因此，应该允许这些空格。\n文件: caesar-cipher\n#! /usr/bin/env raku subset AZ-space of Str where /^ \u0026lt;[ A .. Z \\s ]\u0026gt;+ $/; # [1] subset PosInt of Int where -25 \u0026lt;= $_ \u0026lt;= 25; # [2] unit sub MAIN (AZ-space $S = \u0026#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\u0026#39;, PosInt $N = 3); # [3] say $S.comb.map({ caesar($_, $N) }).join; # [4] sub caesar ($char, $shift) { return $char if $char eq \u0026#34;\u0026#34;; # [5] my $code = $char.ord; # [6] $code -= $shift; # [7] $code += 26 if $code \u0026lt; 65; # \u0026#39;A\u0026#39; # [8] $code -= 26 if $code \u0026gt; 90; # \u0026#39;Z\u0026#39; # [8a] return $code.chr; # [9] } [1] 所允许的字符 (或 «特定领域字母»).\n[2] 挑战说左移值是一个数字。允许除整数以外的任何东西是没有意义的，所以我把值限制在这个类型。负值应该是可以的，它们意味着右移值（而不是左移）。\n[3] 参数，默认值为挑战中给出的值。\n[4] 将字符串分割成单个字符（用梳子(comb)，在每个字符上应用 \u0026ldquo;caesar\u0026rdquo; 函数（用map），再次将字符连接成一个字符串（用join），然后打印出来。\n[5] 不移动空格。\n[6] 获取字符的代码点。\n[7] 减去移位值（当我们向左移位时，或在字母表中降低移位值）。\n[8] 绕回, 如果我们移出A-Z范围，这里为更低 - 或更高的 [8b]。\n[9] 获取指定代码点的字符。\n查看 docs.raku.org/routine/ord 获取更多关于 ord 的信息。\n查看 docs.raku.org/routine/chr 获取更多关于 chr 的信息。\n运行它:\n$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3 QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD $ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3 WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ $ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13 GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT $ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13 GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT Raku 有一个 ords 变体，它接收一整个字符串，而不是一个字符作为 ord。还有 chrs，它接收一个代码点数组，并将它们变成一个字符串，而不是像 chr 那样接收一个字符的代码点。让我们用它们来写一个更短的程序。\n文件: caesar-cipher-map\n#! /usr/bin/env raku subset AZ-space of Str where /^ \u0026lt;[ A .. Z \\s ]\u0026gt;+ $/; subset PosInt of Int where -25 \u0026lt;= $_ \u0026lt;= 25; unit sub MAIN (AZ-space $S = \u0026#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\u0026#39;, PosInt $N = 3); say caesar($S, $N); sub caesar ($string, $shift) { return $string.ords.map({$_ == 32 ?? 32 !! (($_ - $shift - 65) % 26 ) + 65}).chrs; # #################### # 1a ############# ############ # 1b # 1c ## 1d } [1] 我们使用map来改变各个代码点。我们让代码点为32的空间单独存在[1a]。每一个其他的值我们都还原成0到25之间的数字（通过减去第一个字母的代码点（A：65）和移位值[1b]）。模数运算符 (%) 为我们处理负值，做正确的事情。例如：-2 % 26 -\u0026gt; 24 [1c]。然后我们添加调整值到它们应该在的位置(从A到Z)[1d]，然后我们将整个数组的代码点变成一个字符串。\n查看 docs.raku.org/routine/ords 获取更多关于 ords 的信息。\n查看 docs.raku.org/routine/chrs 获取更多关于 chrs 的信息。\n运行它的结果和之前一样。\n$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3 QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD $ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3 WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ $ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13 GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT $ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13 GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT Perl 版本 这是对第一个 Raku 版的直接翻译。\nFile: caesar-cipher-perl\n#! /usr/bin/env perl use strict; use warnings; use feature \u0026#39;say\u0026#39;; use feature \u0026#39;signatures\u0026#39;; no warnings \u0026#34;experimental::signatures\u0026#34;; my $S = shift(@ARGV) // \u0026#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\u0026#39;; die \u0026#34;Illegal characters\u0026#34; unless $S =~/^[A-Z\\s]+$/; my $N = shift(@ARGV) // 3; die \u0026#34;Illegal shift $N\u0026#34; if $N !~ /^\\-?\\d+$/ || $N \u0026lt; -25 || $N \u0026gt; 25; say join(\u0026#34;\u0026#34;, map { caesar($_, $N) } split(//, $S)); sub caesar ($char, $shift) { return $char if $char eq \u0026#34; \u0026#34;; my $code = ord($char); $code -= $shift; $code += 26 if $code \u0026lt; 65; # \u0026#39;A\u0026#39; $code -= 26 if $code \u0026gt; 90; # \u0026#39;Z\u0026#39; return chr($code); } 运行它的结果和 Raku 版一样。\n$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3 QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD $ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3 WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ $ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13 GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT $ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13 GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT 挑战 #097.2：二进制子字符串(Binary Substrings) 给你一个二进制字符串 $B 和一个整数 $S。\n写一个脚本来拆分大小为 $S 的二进制字符串 $B，然后找出使其相同的最小翻转次数。\n例 1: 输入: $B = “101100101”, $S = 3 输出: 1\n二进制子字符串: \u0026ldquo;101\u0026rdquo;: 0 flip \u0026ldquo;100\u0026rdquo;: 1 flip to make it \u0026ldquo;101\u0026rdquo; \u0026ldquo;101\u0026rdquo;: 0 flip\n例 2: 输入 $B = “10110111”, $S = 4 输出: 2\n二进制子字符串: \u0026ldquo;1011\u0026rdquo;: 0 flip \u0026ldquo;0111\u0026rdquo;: 2 flips to make it \u0026ldquo;1011\u0026rdquo;\n我们先从第一个例子中的二进制子字符串中砍掉3个字符块。\n\u0026gt; say \u0026quot;101100101\u0026quot;.comb(3); # -\u0026gt; (101 100 101) \u0026gt; say \u0026quot;1011001010\u0026quot;.comb(3); # -\u0026gt; (101 100 101 0) 第二行显示了如果长度不匹配会发生什么。这就给了我们一个非法的值，因为我们不能将一位数翻转为三位数的值。所以我们必须添加一个检查。\n然后我们将第一个子串与其余的子串进行比较，一次一个。在这里使用bitwise XOR（Exclusive OR）运算符是一个合理的选择。这给了我们一个二进制值，其中1的数量就是该子串的翻转次数。Raku确实有一个XOR运算符。+^. 但是它 \u0026ldquo;将两个参数都强制为Int，并进行位智XOR操作\u0026rdquo;(根据文档\u0026quot;；参见docs.raku.org/language/operators#infix_+^)。\n我们可以在进行XOR操作之前，将二进制值转换为十进制值。让我们试试。\n获取翻转的次数。\n\u0026gt; say (\u0026quot;10101\u0026quot;.parse-base(2) +^ \u0026quot;10111\u0026quot;.parse-base(2)).base(2).comb.sum; # -\u0026gt; 1 \u0026gt; say (\u0026quot;11101\u0026quot;.parse-base(2) +^ \u0026quot;10111\u0026quot;.parse-base(2)).base(2).comb.sum; # -\u0026gt; 2 这当然可行，但需要大量的代码。所以我将使用一个更简单的方法 - 逐个比较每个数字。\nFile: binary-substring\n#! /usr/bin/env raku subset BinaryString where /^ \u0026lt;[01]\u0026gt;+ $/; # [1] subset PosInt of Int where * \u0026gt; 0; # [2] unit sub MAIN (BinaryString $B = \u0026#39;101100101\u0026#39;, # [1] PosInt $S where $B.chars %% $S = 3, # [2] :v(:$verbose)); my @B = $B.comb($S.Int); # [3] my $first = @B.shift; # [4] my $total = 0; # [5] for @B -\u0026gt; $current # [6] { my $flip = bit-diff($first, $current); # [7] $total += $flip; # [8] say \u0026#34;: $first-\u0026gt; $current-\u0026gt; Flip: $flip\u0026#34; if $verbose; } say $total; # [9] sub bit-diff ($a, $b) # [7] { my $flip = 0; # [10] for ^$a.chars -\u0026gt; $index # [11] { $flip++ if $a.substr($index,1) ne $b.substr($index,1); # [12] } return $flip; } [1] 确保二进制字符串是合法的（只包含 \u0026ldquo;0 \u0026ldquo;和 \u0026ldquo;1\u0026rdquo;）。\n[2] 确保是一个正整数，同时确保字符串是被它偶数分割的。(例如，\u0026ldquo;4 \u0026ldquo;给我们提供了长度为4的子串，如果最后一个较短，程序将中止。)\n[3] 梳子通常用于将一个字符串分割成单个字符，但我们可以通过指定长度来获得每个子字符串中的多个字符，比如这样。\n[4] 例子首先将第一个子串与自己进行比较，给出零翻转。这是愚蠢的(ish)，所以我跳过这一点，把第一个子串移出。\n[5] 结果会到这里。\n[6] 对于每一个子串（除了第一个，见[4]）。\n[7] 获取每个子串的翻转次数。\n[8] 并将其添加到总数中。\n[9] 打印它。\n[10] 翻转的数量会在这里。\n[11] 对于两个子串中的每个索引（具有相同的长度）。\n[12] - 如果给定位置上的字符不同，则在总数的基础上加1，意味着移动。\nSee docs.raku.org/routine/comb for more information about comb.\n运行它。\n$ ./binary-substring \u0026quot;101100101\u0026quot; 3 1 $ ./binary-substring -v \u0026quot;101100101\u0026quot; 3 : 101 -\u0026gt; 100 -\u0026gt; Flip: 1 : 101 -\u0026gt; 101 -\u0026gt; Flip: 0 1 $ ./binary-substring \u0026quot;10110111\u0026quot; 4 2 $ ./binary-substring -v \u0026quot;10110111\u0026quot; 4 : 1011 -\u0026gt; 0111 -\u0026gt; Flip: 2 2 看起来不错。\nPerl 这是对 Raku 版本的直接翻译，只是我必须实现 \u0026ldquo;comb\u0026rdquo;。\n文件： binary-substring-perl\n#! /usr/bin/env perl use strict; use warnings; use feature \u0026#39;say\u0026#39;; use feature \u0026#39;signatures\u0026#39;; use Getopt::Long; no warnings \u0026#34;experimental::signatures\u0026#34;; my $verbose = 0; GetOptions(\u0026#34;verbose\u0026#34; =\u0026gt; \\$verbose); my $B = shift(@ARGV) // \u0026#39;101100101\u0026#39;; die \u0026#34;Not a binary number\u0026#34; unless $B =~ /^[01]+$/; my $S = shift(@ARGV) // 3; die \u0026#34;Not an integer\u0026#34; unless $S =~ /^[1-9][0-9]*$/; die \u0026#34;Not a legal length\u0026#34; if length($B) % $S; my @B = comb($B, $S); my $first = shift(@B); my $total = 0; for my $current (@B) { my $flip = bit_diff($first, $current); $total += $flip; say \u0026#34;: $first-\u0026gt; $current-\u0026gt; Flip: $flip\u0026#34; if $verbose; } say $total; sub bit_diff ($a, $b) { my $flip = 0; for my $index (0 .. length($a)) { $flip++ if substr($a, $index,1) ne substr($b, $index,1); } return $flip; } sub comb ($string, $length = 1) # [1] { my @result; while ($string) { push(@result, substr($string, 0, $length)); $string = substr($string, $length); } return @result; } [1] 缺失的 Raku 例程 \u0026ldquo;comb\u0026rdquo;。可选的第二个参数指定了它所返回的每个子串中所包含的（第一个参数的）子串长度。\n运行它的结果与 Raku 版本相同。\n$ ./binary-substring-perl \u0026quot;101100101\u0026quot; 3 1 $ ./binary-substring-perl -v \u0026quot;101100101\u0026quot; 3 : 101 -\u0026gt; 100 -\u0026gt; Flip: 1 : 101 -\u0026gt; 101 -\u0026gt; Flip: 0 1 $ ./binary-substring-perl \u0026quot;101100111\u0026quot; 3 2 $ ./binary-substring-perl -v \u0026quot;101100111\u0026quot; 3 : 101 -\u0026gt; 100 -\u0026gt; Flip: 1 : 101 -\u0026gt; 111 -\u0026gt; Flip: 1 2 就是这样。\n"},"name":"Caesarean Substrings With Raku and Perl","published":"2021-02-07T00:00:00+08:00","summary":"Caesarean Substrings With Raku and Perl","type":"entry","url":"https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/"},{"content":{"html":"\u003ch1 id=\"if-sets-would-dwimhttpsdonaldhwtf202101if-sets-would-dwim\"\u003e\u003ca href=\"https://donaldh.wtf/2021/01/if-sets-would-dwim/\"\u003eIf Sets Would DWIM\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e每当我在 Raku 中使用集合的时候，它们经常无法 \u003ca href=\"https://docs.raku.org/language/glossary#DWIM\"\u003eDWIM\u003c/a\u003e。这是一个简短的探索，看看是否可以改进 DWIMminess。\u003c/p\u003e\n\u003cp\u003e我最近重新审视了我前段时间写的一个利用 \u003ccode\u003e(-)\u003c/code\u003e 集差运算符的脚本。这段代码有一个 bug 潜伏在那里，显而易见，因为下面的代码并没有按照我的直觉去做。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@allowed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003em c i p l o t\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@chars\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eimpolitic\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecomb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@remainder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e@allowed\u003c/span\u003e \u003cspan class=\"ow\"\u003e(-)\u003c/span\u003e \u003cspan class=\"nv\"\u003e@chars\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nv\"\u003e@remainder\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n     \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epangram\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n     \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eunused: [\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e@remainder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)}\u003c/span\u003e\u003cspan class=\"s2\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eunused:\u003c/span\u003e \u003cspan class=\"o\"\u003e[]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e错误的原因是 \u003ccode\u003e(-)\u003c/code\u003e 产生了一个 Set，而赋值给 \u003ccode\u003e@remainder\u003c/code\u003e 会产生1项的 Array。总是这样。但不方便的是，当它是一个空集合时，它就会字符串化为一个空字符串，这只是帮助掩盖了这个潜伏的错误。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@items\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ea b c d e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"ow\"\u003e(-)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"nb\"\u003ed\u003c/span\u003e \u003cspan class=\"nb\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@items\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eraku\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nv\"\u003e@items\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e[Set.new()]\n1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e解决方法比较简单。只要不赋值给数组就可以了。使用一个标量容器来代替。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$items\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ea b c d e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"ow\"\u003e(-)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"nb\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$items\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eraku\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nv\"\u003e$items\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003eSet.new(\u0026quot;e\u0026quot;,\u0026quot;c\u0026quot;)\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e甚至是关联容器也可以。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%items\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ea b c d e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"ow\"\u003e(-)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"nb\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e%items\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eraku\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nv\"\u003e%items\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e{:c(Bool::True), :e(Bool::True)}\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e或在赋值前明确地取出键的列表。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@items\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ea b c d e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"ow\"\u003e(-)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"nb\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@items\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eraku\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nv\"\u003e@items\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e[\u0026quot;e\u0026quot;, \u0026quot;c\u0026quot;]\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e很好，起作用了。只是不要用数组容器来处理 \u003ccode\u003eSetty\u003c/code\u003e 这样的东西。只是这并不能阻止我的直觉时不时地碰上这个错误。同一类的 bug 在我的代码中出现过好几次，因为它实在是太容易犯错了。Raku 不会告诉我，我做错了什么，因为也许是故意的。但重要的是， Raku 没有设法 DWIM。\u003c/p\u003e\n\u003cp\u003e我可以采取的另一个方法是养成添加类型信息的习惯。这样确实可以让 Raku 在我掉进这个陷阱的时候告诉我。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nb\"\u003eStr\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ea b c d e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"ow\"\u003e(-)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"nb\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003eType check failed in assignment to @a; expected Str but got Set (Set.new(\u0026quot;e\u0026quot;,\u0026quot;c\u0026quot;))\n  in sub  at EVAL_0 line 3\n  in block \u0026lt;unit\u0026gt; at EVAL_0 line 5\n  in block \u0026lt;unit\u0026gt; at -e line 1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这是一个明显的例子，添加类型信息有助于 Raku 编译器帮助我避免引入这种 bug。\u003c/p\u003e\n\u003ch2 id=\"实验---为-set-自定义数组存储\"\u003e实验 - 为 Set 自定义数组存储\u003c/h2\u003e\n\u003cp\u003e我开始研究核心设置(core setting)，看看可以做什么。我惊喜地发现，我可以在 \u003ccode\u003eArray.STORE\u003c/code\u003e 的多重分派中添加我正在寻找的语义。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eMONKEY\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eaugment\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nb\"\u003eSTORE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eD\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eSet\u003c/span\u003e \\\u003cspan class=\"nb\"\u003eitem\u003c/span\u003e \u003cspan class=\"k\"\u003e--\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray:D\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n       \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eSTORE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eitem\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ea b c d e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"ow\"\u003e(-)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"nb\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eraku\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e[\u0026quot;c\u0026quot;, \u0026quot;e\u0026quot;]\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e分享这个似乎是谨慎的，看看我的小 DWIM 是否有任何我没有考虑到的问题或缺点。一个可能的缺点是，如果你需要这样做的话，你需要使用 \u003ccode\u003e,\u003c/code\u003e 来强制将一个集合变成一个数组。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ea b c d e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"ow\"\u003e(-)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"nb\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eraku\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e[Set.new(\u0026quot;e\u0026quot;,\u0026quot;c\u0026quot;)]\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"下一步是什么\"\u003e下一步是什么\u003c/h2\u003e\n\u003cp\u003e我希望这能引发关于这个问题以及其他我们的直觉和 Raku 的行为不太一致的情况的讨论。也许还有其他相关的语言边缘可以被磨平，以消除这种危害。\u003c/p\u003e\n\u003ch2 id=\"后续\"\u003e后续\u003c/h2\u003e\n\u003cp\u003e在 \u003ca href=\"https://t.co/0QSoMxrSXf?amp=1\"\u003eReddit\u003c/a\u003e 上有一些非常有启发性的讨论，涵盖了语言语义和各种替代方法。公平地说，我建议的方法引入了更多的不一致性，而不是价值，但讨论可能会导致一个语言一致的解决方案。\u003c/p\u003e\n","text":"If Sets Would DWIM 每当我在 Raku 中使用集合的时候，它们经常无法 DWIM。这是一个简短的探索，看看是否可以改进 DWIMminess。\n我最近重新审视了我前段时间写的一个利用 (-) 集差运算符的脚本。这段代码有一个 bug 潜伏在那里，显而易见，因为下面的代码并没有按照我的直觉去做。\nmy @allowed = \u0026lt;m c i p l o t\u0026gt;; my @chars = \u0026#39;impolitic\u0026#39;.comb; my @remainder = @allowed (-) @chars; if +@remainder == 0 { say \u0026#39;pangram\u0026#39;; } else { say \u0026#34;unused: [{@remainder.join(\u0026#39;\u0026#39;)}]\u0026#34;; } unused: [] 错误的原因是 (-) 产生了一个 Set，而赋值给 @remainder 会产生1项的 Array。总是这样。但不方便的是，当它是一个空集合时，它就会字符串化为一个空字符串，这只是帮助掩盖了这个潜伏的错误。\nmy @items = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b c d e\u0026gt;; say @items.raku; say +@items; [Set.new()] 1 解决方法比较简单。只要不赋值给数组就可以了。使用一个标量容器来代替。\nmy $items = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;; say $items.raku; say +$items; Set.new(\u0026quot;e\u0026quot;,\u0026quot;c\u0026quot;) 2 甚至是关联容器也可以。\nmy %items = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;; say %items.raku; say +%items; {:c(Bool::True), :e(Bool::True)} 2 或在赋值前明确地取出键的列表。\nmy @items = (\u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;).keys; say @items.raku; say +@items; [\u0026quot;e\u0026quot;, \u0026quot;c\u0026quot;] 2 很好，起作用了。只是不要用数组容器来处理 Setty 这样的东西。只是这并不能阻止我的直觉时不时地碰上这个错误。同一类的 bug 在我的代码中出现过好几次，因为它实在是太容易犯错了。Raku 不会告诉我，我做错了什么，因为也许是故意的。但重要的是， Raku 没有设法 DWIM。\n我可以采取的另一个方法是养成添加类型信息的习惯。这样确实可以让 Raku 在我掉进这个陷阱的时候告诉我。\nmy Str @a = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;; Type check failed in assignment to @a; expected Str but got Set (Set.new(\u0026quot;e\u0026quot;,\u0026quot;c\u0026quot;)) in sub at EVAL_0 line 3 in block \u0026lt;unit\u0026gt; at EVAL_0 line 5 in block \u0026lt;unit\u0026gt; at -e line 1 这是一个明显的例子，添加类型信息有助于 Raku 编译器帮助我避免引入这种 bug。\n实验 - 为 Set 自定义数组存储 我开始研究核心设置(core setting)，看看可以做什么。我惊喜地发现，我可以在 Array.STORE 的多重分派中添加我正在寻找的语义。\nuse MONKEY; augment class Array { multi method STORE(Array:D: Set \\item --\u0026gt; Array:D) { self.STORE(item.keys) } } my @a = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt;; say @a.raku; say +@a; [\u0026quot;c\u0026quot;, \u0026quot;e\u0026quot;] 2 分享这个似乎是谨慎的，看看我的小 DWIM 是否有任何我没有考虑到的问题或缺点。一个可能的缺点是，如果你需要这样做的话，你需要使用 , 来强制将一个集合变成一个数组。\nmy @a = \u0026lt;a b c d e\u0026gt; (-) \u0026lt;a b d\u0026gt; , ; say @a.raku; [Set.new(\u0026quot;e\u0026quot;,\u0026quot;c\u0026quot;)] 下一步是什么 我希望这能引发关于这个问题以及其他我们的直觉和 Raku 的行为不太一致的情况的讨论。也许还有其他相关的语言边缘可以被磨平，以消除这种危害。\n后续 在 Reddit 上有一些非常有启发性的讨论，涵盖了语言语义和各种替代方法。公平地说，我建议的方法引入了更多的不一致性，而不是价值，但讨论可能会导致一个语言一致的解决方案。\n"},"name":"如果集合如我所想","published":"2021-02-07T00:00:00+08:00","summary":"If Sets Would DWIM","type":"entry","url":"https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/"}],"name":"rakulang","type":"feed","url":"https://ohmyweekly.github.io/tags/rakulang/"}