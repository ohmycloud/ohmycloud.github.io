<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.92.0">Hugo</generator><title type="html"><![CDATA[Raku 博客 on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/tags/raku-%E5%8D%9A%E5%AE%A2/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/tags/raku-%E5%8D%9A%E5%AE%A2/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/tags/raku-%E5%8D%9A%E5%AE%A2/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/tags/raku-%E5%8D%9A%E5%AE%A2/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2022-01-23T16:05:49+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/tags/raku-%E5%8D%9A%E5%AE%A2/</id>
    
        
        <entry>
            <title type="html"><![CDATA[模式分派]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-custom-when/?utm_source=atom_feed" rel="related" type="text/html" title="自定义 when" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/?utm_source=atom_feed" rel="related" type="text/html" title="Caesarean Substrings With Raku and Perl" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/?utm_source=atom_feed" rel="related" type="text/html" title="如果集合如我所想" />
                <link href="https://ohmyweekly.github.io/notes/2020-10-04-the-strange-case-of-the-greedy-junction/?utm_source=atom_feed" rel="related" type="text/html" title="贪婪 Junction 的奇闻异事" />
                <link href="https://ohmyweekly.github.io/notes/2020-10-04-reconstructing-raku-junctions/?utm_source=atom_feed" rel="related" type="text/html" title="重构 Raku 的 Junction" />
            
                <id>https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-02-28T00:00:00+00:00</published>
            <updated>2021-02-28T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Pattern Dispatch</blockquote><p>一直以来乐于助人的 <a href="https://stackoverflow.com/users/1077672/raiph">raiph</a> 在回答一个关于模式匹配的<a href="https://stackoverflow.com/questions/66233465/haskell-like-pattern-matching-in-raku">问题</a>时希望得到 RakuAST，就像在 Haskell 中一样。有人提出用 MMD 来解决这个问题。这样做，得到一个贯穿的默认路径是无解的。由于 dispatch 简单来说就是模式匹配，我们只需要做一些额外的工作。简而言之，dispatcher 得到一个函数列表和一个带参数的列表。第一个接受所有参数的函数获胜。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Hold</span> <span class="p">{</span> <span class="k">has</span> <span class="nv">$.key</span><span class="p">;</span> <span class="p">}</span>
<span class="k">class</span> <span class="nc">Press</span> <span class="p">{</span> <span class="k">has</span> <span class="nv">$.key</span><span class="p">;</span> <span class="p">}</span>
<span class="k">class</span> <span class="nc">Err</span> <span class="p">{</span> <span class="k">has</span> <span class="nv">$.msg</span><span class="p">;</span> <span class="p">}</span>

<span class="k">sub</span> <span class="k">else</span><span class="p">(</span><span class="nv">&amp;code</span><span class="p">)</span> <span class="p">{</span> <span class="nv">&amp;code</span> <span class="p">}</span>

<span class="k">sub</span> <span class="nb">match</span><span class="p">(</span><span class="nv">$needle</span><span class="o">,</span> <span class="o">*</span><span class="nv">@tests</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nv">@tests</span><span class="o">.</span><span class="nb">head</span><span class="p">(</span><span class="o">*-</span><span class="mi">1</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">&amp;f</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nv">&amp;f</span><span class="o">.</span><span class="nb">cando</span><span class="p">(</span>\<span class="p">(</span><span class="nv">$needle</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">f</span><span class="p">(</span><span class="nv">$needle</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nv">@tests</span><span class="o">.</span><span class="nb">tail</span><span class="o">.</span><span class="p">();</span>
<span class="p">}</span>

<span class="nb">match</span> <span class="n">Hold</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">key</span><span class="p">&lt;</span><span class="s">a</span><span class="p">&gt;)</span><span class="o">,</span>
    <span class="k">-&gt;</span> <span class="n">Hold</span> <span class="p">(</span><span class="o">:</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span> <span class="nb">put</span> „<span class="n">holding</span> <span class="nv">$key</span>“<span class="p">;</span> <span class="p">}</span><span class="o">,</span>
    <span class="k">-&gt;</span> <span class="n">Press</span> <span class="p">(</span><span class="o">:</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span> <span class="nb">put</span> „<span class="n">pressing</span> <span class="nv">$key</span>“<span class="p">;</span> <span class="p">}</span><span class="o">,</span>
    <span class="k">-&gt;</span> <span class="n">Err</span> <span class="p">(</span><span class="o">:</span><span class="nv">$msg</span><span class="p">)</span> <span class="p">{</span> <span class="nb">warn</span> „<span class="n">ERR:</span> <span class="nv">$msg</span>“ <span class="p">}</span><span class="o">,</span>
    <span class="k">else</span> <span class="p">{</span> <span class="nb">fail</span> ‚<span class="n">unsopported</span>‘ <span class="p">};</span>
</code></pre></div><p>方法 <code>.cando</code> 需要一个 <a href="https://docs.raku.org/type/Capture">Capture</a> 来告诉我们一个 Routine 是否可以用一个给定的参数列表来调用。为了创建这样一个捕获，我们使用字面的 <code>\($arguments, $go, $here)</code>。我们不在最后测试默认值。相反，当没有其他函数匹配时，我们会调用该函数。声明 sub <code>else</code> 只是为了美化。</p>
<p>由于我们是在函数式的土地上，我们可以使用 Raku 提供给我们的所有方便的功能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">&amp;key-matcher</span> <span class="o">=</span> <span class="nv">&amp;match</span><span class="o">.</span><span class="nb">assuming</span><span class="p">(</span><span class="o">*,[</span>
        <span class="k">-&gt;</span> <span class="n">Hold</span> <span class="p">(</span><span class="o">:</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span> <span class="nb">put</span> „<span class="n">holding</span> <span class="nv">$key</span>“<span class="p">;</span> <span class="p">}</span><span class="o">,</span>
        <span class="k">-&gt;</span> <span class="n">Press</span> <span class="p">(</span><span class="o">:</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span> <span class="nb">put</span> „<span class="n">pressing</span> <span class="nv">$key</span>“<span class="p">;</span> <span class="p">}</span><span class="o">,</span>
        <span class="k">-&gt;</span> <span class="n">Err</span> <span class="p">(</span><span class="o">:</span><span class="nv">$msg</span><span class="p">)</span> <span class="p">{</span> <span class="nb">warn</span> „<span class="n">ERR:</span> <span class="nv">$msg</span>“ <span class="p">}</span><span class="o">,</span>
        <span class="k">else</span> <span class="p">{</span> <span class="nb">fail</span> ‚<span class="n">unsopported</span>‘ <span class="p">};</span>
<span class="o">]</span><span class="p">);</span>

<span class="k">sub</span> <span class="nf">key-source</span> <span class="p">{</span>
    <span class="k">gather</span> <span class="k">loop</span> <span class="p">{</span>
        <span class="nb">sleep</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nb">take</span> <span class="p">(</span><span class="n">Hold</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">key</span><span class="p">&lt;</span><span class="s">a</span><span class="p">&gt;)</span><span class="o">,</span> <span class="n">Press</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">key</span><span class="p">&lt;</span><span class="s">b</span><span class="p">&gt;)</span><span class="o">,</span> <span class="n">Err</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">msg</span><span class="p">&lt;</span><span class="s">WELP!</span><span class="p">&gt;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">unsupported</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">pick</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="o">.&amp;</span><span class="nf">key-matcher</span> <span class="k">for</span> <span class="n">key-source</span><span class="p">;</span>
</code></pre></div><p>我们要帮助 <code>.assuming</code> 有点理解 slurpies，把函数列表放在一个显式 Array 中。</p>
<p>总有一种函数式的方法来解决一个问题。有时我们甚至可以从中得到一个整齐的语法。</p>
<p>原文链接: <a href="https://gfldex.wordpress.com/2021/02/24/pattern-dispatch/">https://gfldex.wordpress.com/2021/02/24/pattern-dispatch/</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku-%E5%8D%9A%E5%AE%A2" term="raku-%E5%8D%9A%E5%AE%A2" label="Raku 博客" />
                            
                        
                    
                
            
        </entry>
    
</feed>
