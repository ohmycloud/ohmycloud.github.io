[{"categories":["programming"],"contents":"https://imagemagick.org/Usage/draw/\n在 IM 中绘图是在现有图像中添加新元素的方法。虽然在复合字体效果的示例页和图像注释中涵盖了很多文本绘制的内容，但本页涉及 \u0026ldquo;-draw\u0026rdquo; 操作符的其他更普遍的方面。\n绘制命令最初是作为一种创建简单图像的手段。但随着时间的推移，它已经扩展成为矢量图形到光栅图像转换的界面。\nImageMagick 绘制命令 计算机中的图像通常以两种不同的方式保存。第一种也是你在这些示例页面中看到的最常见的方式被称为光栅图形。在这种方式中，图像是以像素的矩形阵列来存储的。\n另一种方式不太常见，也不太容易修改，但从另一个意义上讲，它的通用性更强，即对象矢量图形。在这种形式下，图像是用线条、弧线、颜色填充，有时还有深度来描述的。这是非常有用的，因为你可以将这些图像放大到你想要的任何尺寸，而且它们仍然可以完美地显示。与光栅格式的图像相比，您还可以在很小的空间内描述非常大和复杂的图像。\n矢量图形图像的例子包括 postscript 和新的 SVG-可缩放矢量图形。\nTrue-Type 字体也是矢量图形的例子，因为它允许在任何比例下使用单个字符描述。\n\u0026ldquo;-draw\u0026rdquo; 图像操作符，是进入 ImageMagick 矢量绘图功能的一个窗口，并形成了一套与 IM 的普通命令行图像操作符相当独立的命令。\n 一般使用的矢量图形文件格式只有几种，因为每一种这样的格式通常与其他这样的格式有很大的不同。其结果是，很少有代码共享的可能。 基于这个原因，ImageMagick 更关注使用矢量图形来绘制 SVG 格式的图像。Postscript 和 true-type 字体图形被传递给其他外部的\u0026rdquo;代理\u0026ldquo;库和应用程序，它们更适合绘制这些类型的矢量图形格式。 这并不是说 SVG 没有代理库。一个例子是 RSVG 库或 GTK SVG 库，这些库在编译时是可用的。IM 会链接到这些库来转换 SVG，而不是自己尝试去做。\n 原始绘图命令 让我们从 MVG 命令的 \u0026ldquo;-draw\u0026rdquo; 图像操作符中最古老、最简单、最常见的绘图原语开始。\n请注意，所有的参数都被视为浮点数，不一定是整数，比如我在这些例子中通常使用的。\n# Single Pixel Draw (两种方式 -- 这些像素点都被放大了) # Point \u0026#39;paints\u0026#39; the color pixel convert -size 10x6 xc:skyblue -fill black \\  -draw \u0026#39;point 3,2\u0026#39; -scale 100x60 draw_point.gif # Color Point \u0026#39;replaces\u0026#39; the color pixel convert -size 10x6 xc:skyblue -fill black \\  -draw \u0026#39;color 6,3 point\u0026#39; -scale 100x60 draw_color_point.gif 根据给出的注释，当涉及半透明颜色时，这两种点方法会产生不同的结果。详情请参见下面的颜色填充原语。\n# 矩形 / 圆角矩形 / 矩形圆弧 convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;rectangle 20,10 80,50\u0026#34; draw_rect.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;roundrectangle 20,10 80,50 20,15\u0026#34; draw_rrect.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;arc 20,10 80,50 0,360\u0026#34; draw_arc.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;arc 20,10 80,50 45,270\u0026#34; draw_arc_partial.gif arc 绘制原语与矩形一起列出，因为它实际上只是一个\u0026quot;椭圆\u0026rdquo;，装在两个坐标定义的\u0026quot;矩形\u0026rdquo;(rectangle)内。部分弧线很少使用，因为很难确定端点，除非角度限制在九十度的倍数。\ncircle 和 ellipse 原语涉及\u0026quot;中心\u0026quot;坐标与\u0026quot;边缘\u0026quot;坐标，或\u0026quot;大小\u0026quot;和\u0026quot;角度\u0026quot;值。\n# 圆 / 椭圆 (以某一点为中心) convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;circle 50,30 40,10\u0026#34; draw_circle.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;ellipse 50,30 40,20 0,360\u0026#34; draw_ellipse.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;ellipse 50,30 40,20 45,270\u0026#34; draw_ellipse_partial.gif 你也可以看看 Push/Pop 上下文，了解如何创建一个旋转的椭圆的例子。\n# 直线 / 折线 / 多边形 / 贝塞尔曲线 convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;line 20,50 90,10\u0026#34; draw_line.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;polyline 40,10 20,50 90,10 70,40\u0026#34; draw_polyline.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;polygon 40,10 20,50 90,10 70,40\u0026#34; draw_polygon.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;bezier 40,10 20,50 90,10 70,40\u0026#34; draw_bezier.gif 比较好的画直线和曲线的方法是使用 SVG 路径画法，它的用途更广，甚至可以实现\u0026quot;比例画线\u0026rdquo;。\n# text drawing / image convert -size 100x60 xc:skyblue -fill white -stroke black \\  -font Candice -pointsize 40 -gravity center \\  -draw \u0026#34;text 0,0 \u0026#39;Hello\u0026#39;\u0026#34; draw_text.gif convert -size 100x60 xc:skyblue -gravity center \\  -draw \u0026#34;image over 0,0 0,0 \u0026#39;terminal.gif\u0026#39;\u0026#34; draw_image.gif 最后这两个填充类型的操作是目前唯一受 \u0026ldquo;-gravity\u0026rdquo; 影响的绘制操作。这些操作的其他修饰符，包括 \u0026ldquo;-fill\u0026quot;、\u0026quot;-tile\u0026quot;、\u0026quot;-origin\u0026quot;、\u0026quot;-stroke\u0026quot;、\u0026quot;-strokeidth\u0026quot;、\u0026quot;-font\u0026quot;、\u0026quot;-pointsize\u0026quot;、\u0026quot;-box\u0026quot;。他们还有其他的修饰符，但这些修饰符与更高级的 Magick Vector Graphics 语言有关。\n贝赛尔原语 \u0026ldquo;bezier\u0026rdquo; 原语用于绘制曲线。每条命令只画一条曲线段。通常会给出 4 个点（8 个数字）：一个起点'结\u0026rsquo;、两个控制点和一个终点'结\u0026rsquo;。两个控制点定义了曲线的方向以及曲线偏离附加的终点'结'点的速度。\n为了顺利地将两条曲线连接起来，应该将端点的控制点通过'结'镜像，形成下一条贝塞尔曲线的控制点。例如这里我画了两条平稳连接在一起的贝赛尔曲线。请注意控制线和点（也是画出来的）是如何通过连接坐标直线镜像的，无论是角度还是长度。这一点很重要，否则曲线将不平滑。\npoints=\u0026#34;10,10 30,90 25,10 50,50 50,50 75,90 70,10 90,40\u0026#34; clines=`echo \u0026#34;$points\u0026#34; | sed \u0026#39;s/ /\\n/g\u0026#39; |\\  while read line; do echo \u0026#34;line $line\u0026#34;; done` symbols=`echo path \u0026#34;\u0026#39;\u0026#34;; for point in $points; do echo \u0026#34;M $pointl -2,-2 +4,+4 -2,-2 l -2,+2 +4,-4 -2,+2\u0026#34; done; echo \u0026#34;\u0026#39;\u0026#34;` convert -size 100x100 xc:skyblue -fill none \\  -draw \u0026#34;stroke gray $clinesstroke blue $symbols\u0026#34; \\  -draw \u0026#34;stroke red bezier 10,10 30,90 25,10 50,50 \u0026#34; \\  -draw \u0026#34;stroke red bezier 50,50 75,90 70,10 90,40 \u0026#34; \\  draw_bezier_joined.gif 如果我移动其中一个控制点，使它不从同一\u0026quot;结\u0026quot;的另一个控制点通过附加的\u0026quot;结\u0026quot;进行\u0026quot;反射\u0026rdquo;，那么曲线将不连续。\npoints=\u0026#34;10,10 30,90 25,10 50,50 50,50 80,50 70,10 90,40\u0026#34; clines=`echo \u0026#34;$points\u0026#34; | sed \u0026#39;s/ /\\n/g\u0026#39; |\\  while read line; do echo \u0026#34;line $line\u0026#34;; done` symbols=`echo path \u0026#34;\u0026#39;\u0026#34;; for point in $points; do echo \u0026#34;M $pointl -2,-2 +4,+4 -2,-2 l -2,+2 +4,-4 -2,+2\u0026#34; done; echo \u0026#34;\u0026#39;\u0026#34;` convert -size 100x100 xc:skyblue -fill none \\  -draw \u0026#34;stroke gray $clinesstroke blue $symbols\u0026#34; \\  -draw \u0026#34;stroke red bezier 10,10 30,90 25,10 50,50 \u0026#34; \\  -draw \u0026#34;stroke red bezier 50,50 80,50 70,10 90,40 \u0026#34; \\  draw_bezier_disjoint.gif 如果再次移动控制点，使其与相关的\u0026quot;结\u0026quot;点相匹配，线条将直接从该点出发，完全没有任何\u0026quot;曲线\u0026rdquo;。\npoints=\u0026#34;10,10 30,90 25,10 50,50 50,50 50,50 70,10 90,40\u0026#34; clines=`echo \u0026#34;$points\u0026#34; | sed \u0026#39;s/ /\\n/g\u0026#39; |\\  while read line; do echo \u0026#34;line $line\u0026#34;; done` symbols=`echo path \u0026#34;\u0026#39;\u0026#34;; for point in $points; do echo \u0026#34;M $pointl -2,-2 +4,+4 -2,-2 l -2,+2 +4,-4 -2,+2\u0026#34; done; echo \u0026#34;\u0026#39;\u0026#34;` convert -size 100x100 xc:skyblue -fill none \\  -draw \u0026#34;stroke gray $clinesstroke blue $symbols\u0026#34; \\  -draw \u0026#34;stroke red bezier 10,10 30,90 25,10 50,50 \u0026#34; \\  -draw \u0026#34;stroke red bezier 50,50 50,50 70,10 90,40 \u0026#34; \\  draw_bezier_no_curve.gif 如果两个控制点都设置为各自的\u0026quot;结点\u0026rdquo;，那么就会生成一条直线。\npoints=\u0026#34;10,10 10,10 50,50 50,50 50,50 50,50 90,40 90,40\u0026#34; clines=`echo \u0026#34;$points\u0026#34; | sed \u0026#39;s/ /\\n/g\u0026#39; |\\  while read line; do echo \u0026#34;line $line\u0026#34;; done` symbols=`echo path \u0026#34;\u0026#39;\u0026#34;; for point in $points; do echo \u0026#34;M $pointl -2,-2 +4,+4 -2,-2 l -2,+2 +4,-4 -2,+2\u0026#34; done; echo \u0026#34;\u0026#39;\u0026#34;` convert -size 100x100 xc:skyblue -fill none \\  -draw \u0026#34;stroke gray $clinesstroke blue $symbols\u0026#34; \\  -draw \u0026#34;stroke red bezier 10,10 10,10 50,50 50,50 \u0026#34; \\  -draw \u0026#34;stroke red bezier 50,50 50,50 90,40 90,40 \u0026#34; \\  draw_bezier_lines.gif 如果不指定所有 4 个点，\u0026lsquo;bezier\u0026rsquo; 原语并不真正有用。只有第一个点和最后一个点被归类为'结\u0026rsquo;，曲线将通过（或结束）这两个点。所有其他的点纯粹被视为控制点，按照给定的顺序对曲线产生影响，控制点越远，对该段曲线的影响越大。\npoints=\u0026#34;10,10 30,90 25,10 75,90 70,10 90,40\u0026#34; symbols=`for point in $points; do echo \u0026#34;M $pointl -2,-2 +4,+4 -2,-2 l -2,+2 +4,-4 -2,+2\u0026#34; done` convert -size 100x100 xc:skyblue -fill none \\  -draw \u0026#34;stroke gray polyline $points\u0026#34; \\  -draw \u0026#34;stroke red bezier $points\u0026#34; \\  -draw \u0026#34;stroke blue path \u0026#39;$symbols\u0026#39; \u0026#34; \\  draw_bezier_multi.gif 为了保持简单，不建议你每条 \u0026lsquo;bezier\u0026rsquo; 曲线段使用超过或少于4个点。\n其实我建议你完全不要使用 \u0026lsquo;bezier\u0026rsquo; 原语，而是使用 SVG Path Cubic Bezier 来生成曲线。它有一个特殊的 \u0026ldquo;s\u0026rdquo; 曲线延续功能，可以自动做相应的控制点\u0026quot;反射\u0026rdquo;，生成平滑连接的曲线段，减少你需要使用的控制点数量。您还可以定义相对于路径中最后一个端点的点。\n颜色填充原语 除了上述 \u0026ldquo;简单\u0026quot;原语之外，\u0026quot;-draw\u0026ldquo;还提供了一组颜色填充或修改原语。这些原语根据所选方法，从指定的点开始修改图像中的颜色。\n这些填充方法实际上不是真正的 \u0026lsquo;draw\u0026rsquo; 命令，而是颜色替换函数。它们被添加到绘图中，因为在程序的早期版本中，将它们的操作插入到 ImageMagick 中是最简单的。\n就像上面一样，使用的颜色是用 \u0026ldquo;-fill\u0026ldquo;颜色设置的，但如果设置了，就会使用 \u0026ldquo;-tile\u0026rdquo; 图像来代替。\n上面的其他设置选项没有使用，对这些操作没有影响。\n两个额外的设置也将应用于这些原语，即 \u0026ldquo;-bordercolor\u0026rdquo; 和 \u0026ldquo;-fuzz\u0026ldquo;系数设置。但是，这些设置不能在 \u0026ldquo;MVG\u0026rdquo; 语言中定义，因此只能在使用 \u0026ldquo;-draw\u0026rdquo; 操作符之前进行设置。\n第一个 \u0026lsquo;color point\u0026rsquo; 你已经看到了，它是上述例子中 \u0026lsquo;point\u0026rsquo; 绘制原语的替代。如果你仔细观察，你会看到我们在测试图像中设置的单个白色像素。\nconvert color_test.png -fill white \\  -draw \u0026#39;color 30,20 point\u0026#39; color_point.png 然而在绘制透明色和半透明色时，这些功能是不一样的。\n这里我们有一个三个像素的红色图像（放大了），第二个或中间的像素我们用 point 函数在红色像素上画上半透明的蓝色，得到紫色的结果。然而如果使用 color point 函数（最后一个或右边的像素），红色完全被半透明的蓝色像素所取代。它不会被叠加。\nconvert -size 3x1 xc:red -matte -fill \u0026#39;#00F8\u0026#39; \\  -draw \u0026#39;point 1,0\u0026#39; \\  -draw \u0026#39;color 2,0 point\u0026#39; -scale 33x33 draw_points.png 所有的 color 函数都会进行全色替换，而其他所有的颜色原语都会在图像上面'画'出颜色。因此，你可以使用 color 来绘制透明色。\ncolor replace 绘制函数将在指定的位置替换所有精确给定颜色的实例。而且正如您所看到的，这些区域不一定要连接在一起。\nconvert color_test.png -fill white \\  -draw \u0026#39;color 30,20 replace\u0026#39; color_replace.png convert color_test.png -fill white -fuzz 13%\\  -draw \u0026#39;color 30,20 replace\u0026#39; color_replace_fuzz.png 然而，正如你在第一个结果中所看到的，一些沿边缘的像素没有被替换。这些像素与所选像素的颜色不完全相同，所以它们被忽略了。添加一个小的模糊因子也会包含与原色相似的颜色。如上面第二个例子所示。\n当然，fuzz factor 并不是一个很好的解决方案，因为它不会捕捉所有这样的边缘像素。这是所有这些 color fill 方法经常出现的问题，也是一个没有通用解决方案的问题。\n如果你想替换一个特定的已知颜色，而不是从图像本身选择一种颜色，那么可以使用 \u0026ldquo;-opaque\u0026rdquo; 图像操作符来代替。该函数还使用 \u0026ldquo;-fuzz\u0026rdquo; 因子设置来增加与给定颜色相匹配的颜色范围。\nfloodfill 的方法也很简单，因为它只会填充所选点周围的整个区域，而不会选择任何其他没有以某种方式连接的类似颜色的区域。\n你也可以通过使用 \u0026ldquo;-fuzz\u0026rdquo; 来扩大被填充的区域，以包括相似的颜色。在这种情况下，我们选择了一个足够高的值，也包括了交叉边界，允许洪水填充\u0026quot;泄漏\u0026quot;到图像的另一侧。\nconvert color_test.png -fill white \\  -draw \u0026#39;color 30,20 floodfill\u0026#39; color_floodfill.png convert color_test.png -fill white -fuzz 15% \\  -draw \u0026#39;color 30,20 floodfill\u0026#39; color_floodfill_fuzz.png 用颜色填充区域并非没有问题。颜色可能会越过薄薄的边界，渗入到不想要的区域，(请看背景图案上的 GIF，以证明这一点)。或者，它可能无法填满所选区域的边缘，（见反锯齿和泛滥填充问题）。但它确实有效。\nfilltoborder 就像 floodfill 一样，只是你指定了一个颜色，这个颜色的边界是要填充的区域，而不是填充过程中要替换的颜色。\n当然也建议在该边框颜色选择中加入 similar colors 的模糊因子，以进一步限制洪水填充。\nconvert color_test.png -fill white -bordercolor royalblue \\  -draw \u0026#39;color 30,20 filltoborder\u0026#39; color_filltoborder.png convert color_test.png -fill white -bordercolor blue \\  -draw \u0026#39;color 30,20 filltoborder\u0026#39; color_filltoborder2.png convert color_test.png -fill white -bordercolor blue -fuzz 30% \\  -draw \u0026#39;color 30,20 filltoborder\u0026#39; color_filltoborder_fuzz.png 最后的绘制颜色方法是 reset，它只是将整个图像替换或重置为填充颜色。在这种情况下，实际选择的像素对结果没有任何影响。\nconvert color_test.png -fill white \\  -draw \u0026#39;color 30,20 reset\u0026#39; color_reset.png 这实际上是非常有用的，因为它提供了一种简单的方法从现有图像生成纯色（或平铺图像）画布。(请参见 Canvases Sized to an Existing Image)以了解此方法和其他做同样事情的方法。\n未来：使用 \u0026ldquo;-tile\u0026rdquo; 图案来填充该区域。\nMatt 填充原语 matte 绘制原语的工作方式与上述 color 原语完全相同，只是它不会替换所选区域的颜色，只会替换所选区域的 matte 通道。（也就是只有 alpha 或 matte 通道被这些填充函数调整）。\n就像 color 填充函数一样，matte 值使用的是填充色（除非用 \u0026ldquo;-tile\u0026rdquo; 作为 alpha value 的来源）。\n这里我们使用上面同样的 color floodfill 例子，但这里只调整 matte 通道，使填充部分完全透明。也就是说，原来的颜色仍然存在，只是透明而已!\nconvert color_test.png -fill none \\  -draw \u0026#39;matte 30,20 floodfill\u0026#39; matte_floodfill.png convert color_test.png -fill none -fuzz 15% \\  -draw \u0026#39;matte 30,20 floodfill\u0026#39; matte_floodfill_fuzz.png 也可以使用 matte reset 函数使整个图像变成半透明的。当然在这种情况下，我们必须输出到 PNG，它可以接受半透明颜色的图像。\nconvert color_test.png -fill \u0026#39;#00000080\u0026#39; \\  -draw \u0026#39;matte 30,20 reset\u0026#39; matte_reset.png 注意，在操作中没有使用 black 颜色分量，只使用了颜色的 matte 分量。图像的原色保持原样。\n未来：使用 \u0026ldquo;-tile\u0026rdquo; 模式来制作有趣的哑光效果。\ncolor 和 matte 都是完全替换颜色的函数，它总是会产生一个布尔（all or nothing）类型的颜色替换。因此，这些区域的边缘总是会显示出 Aliasing 效果。\n正因为如此，除了设置 GIF 图像的透明区域（也是布尔型）外，一般来说，这些都不是一般图像显影的好图像运算符。不过也不是全无用处，从背景去除的例子中可以看出。\n关于绘图命令的具体内容 像素坐标 [-draw](https://imagemagick.org/Usage/option_link.cgi?draw) 命令（以及IM中的许多其他命令）使用的是所谓的\u0026quot;像素坐标\u0026rdquo;。也就是 \u0026ldquo;10,10\u0026rdquo; 的坐标是左上角往下10个像素的中心。\n在这个坐标系中，0,0 是左上角像素的中心，w-1,h-1 是右下角的中心。实际的边缘位于 -0.5,-0.5 和 w-0.5,h-0.5，中心像素（如果图像是奇数大小）位于 \u0026lsquo;(w-1)/2,(h-1)/2\u0026rsquo;。\n然而，当您对图像进行数学处理时（如使用扭曲时），实际的像素没有实际意义，因此它使用\u0026quot;图像坐标\u0026rdquo;。在这个系统中，图像的实际边缘在 \u0026lsquo;0,0\u0026rsquo; 和 \u0026lsquo;w,h\u0026rsquo; 处。而图像的中心（可能是，也可能不是像素的中心）在 \u0026lsquo;w/2,h/2\u0026rsquo;。\n要将 \u0026lsquo;像素坐标\u0026rsquo; 转换为图像坐标，请加上 ½ 如左上角像素的中心是 \u0026lsquo;0.5,0.5\u0026rsquo;，右下角像素的中心是 \u0026lsquo;w-0.5,h-0.5\u0026rsquo;。 例如：小图像中的圆心\n绘制伽马和色域校正 和几乎所有的 ImageMagick 操作一样， [-draw](https://imagemagick.org/Usage/option_link.cgi?draw) 是一个线性运算符，因此在线性 RGB 色彩空间中工作。这意味着，为了得到平滑的边缘，你可能需要对图像进行一些伽玛校正，然后再保存，这样就可以使用非线性（伽玛校正）的sRGB色彩空间来存储。\n例如，如果你画了一个大圆，然后保存它\u0026hellip;\nconvert -size 81x81 xc:black -fill white -draw \u0026#39;circle 40,40 40,3\u0026#39; \\  circle_raw.png 看看圆圈的边缘，其实看起来并不是真的很光滑。你可以看到明显的阶梯效果。\n那是因为你是在线性 RGB 色彩空间中画的圆。但是你却把图像保存成了真正的 sRGB 色域！这就导致了你的图像在保存的过程中出现了明显的阶梯效果。\n为了解决这个问题，我们需要在保存图像之前给图像添加一个伽玛校正。\nconvert -size 81x81 xc:black -fill white -draw \u0026#39;circle 40,40 40,3\u0026#39; \\  -gamma 2.2 circle_gamma.png 现在，圆圈边缘实际上看起来光滑圆润，就像它们应该的那样。\n如果你想正确地做这件事，我们真的应该使用色彩空间进行修正。然而，由于IM假设RGB是保存的默认色彩空间，你需要做一些棘手的处理来让它正确地做事情。\nconvert -size 81x81 xc:black -set colorspace RGB \\  -fill white -draw \u0026#39;circle 40,40 40,3\u0026#39; \\  -colorspace sRGB circle_sRGB.png  请注意，sRGB色彩空间（这是保存图像的正确方法）与简单地应用2.2伽玛校正并不完全相同。然而，两者之间的结果差异很小，只有在非常非常粗糙的图像中才能看到。 在IM v6.7.5-1之前，色彩空间名称 \u0026ldquo;sRGB\u0026rdquo; 和 \u0026ldquo;RGB\u0026rdquo;（线性-RGB）实际上是颠倒的。因此，在旧版本的IM中，上面的两个标签应该被调换。\n 要使用真实的图像（在IMv6中）正确地绘制（或进行任何\u0026quot;线性\u0026quot;图像处理），你需要首先删除任何现有的伽玛，处理图像，然后恢复该伽玛校正。更多细节请参见使用色域校正调整大小。\n下面是一个在真实图像上绘图的例子\u0026hellip;。首先是没有任何颜色校正（原始），然后是伽玛和色域校正。\nconvert rose: -fill none -stroke white -draw \u0026#39;line 5,40 65,5\u0026#39; rose_raw.png convert rose: -gamma .454545 \\  -fill none -stroke white -draw \u0026#39;line 5,40 65,5\u0026#39; \\  -gamma 2.2 rose_gamma.png convert rose: -colorspace RGB \\  -fill none -stroke white -draw \u0026#39;line 5,40 65,5\u0026#39; \\  -colorspace sRGB rose_sRGB.png 正如你所看到的，通过使用伽玛或色彩空间校正，线条变得非常平滑，没有锯齿状的\u0026quot;楼梯\u0026quot;别离效果，比直接绘制时可以看到。(你需要一个很好的显示器才能看到它)\n 上面的线条是用 [-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke) 颜色绘制的。您可以使用 [-fill](https://imagemagick.org/Usage/option_link.cgi?fill) 来绘制线条，并得到同样的结果，但这样您就不能使用 [-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth) 来控制线条粗细。更多信息请参见下面的\u0026rdquo;描边颜色设置\u0026quot;。 色域名称实际上是使用\u0026rsquo;sRGB'色彩空间的值来定义的，但通过绘制应用，就好像图像是在线性RGB色彩空间中一样。因此，对命名的颜色（不是\u0026quot;白\u0026quot;或\u0026quot;黑\u0026rdquo;）使用上述伽玛校正将导致这些颜色变得失真。在这种情况下，最好不要使用伽玛或色域校正，这样命名的颜色就会正确映射。 命名的\u0026rsquo;sRGB'颜色与图像的色彩空间的正确映射，将作为IMv7开发的一部分被修正。\n 描边、描边宽度和填充的相互作用 [-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke) 和 [-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth) 选项用于在字体边缘绘制轮廓。\n这些选项通常与 [-fill](https://imagemagick.org/Usage/option_link.cgi?fill) 一起使用，以使文字更有趣，而不费力。\nconvert -size 380x70 xc:lightblue -pointsize 50 -font Chisel \\  -fill green -stroke black -draw \u0026#39;text 10,55 \u0026#34;Black Border\u0026#34;\u0026#39; \\  stroke_font.jpg 默认设置是 -strokewidth 1 和 -stroke None。\n但这样做会使轮廓笔画不可见，只留下 [-fill](https://imagemagick.org/Usage/option_link.cgi?fill) 的颜色，你不会看到它。\n当 -strokewidth 为 \u0026ldquo;不可见 \u0026ldquo;时， -strokewidth 唯一的效果是对字体大小属性的影响，也就是说它仍然可以影响字体定位和 Label 和 Caption 图片生成的大小。否则，宽度在你使笔画可见之前是没有可见效果的。\n为了了解 [-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth) 对字体外观的实际影响（当使其可见时），我在这里绘制了一些不同宽度的文字，从 \u0026ldquo;turned off\u0026rdquo; 到越来越大。\nconvert -size 320x420 xc:lightblue -pointsize 70 -font Vademecum \\  -fill red -stroke none -draw \u0026#39;text 30,80 \u0026#34;Stroke -\u0026#34;\u0026#39; \\  -fill red -stroke black -strokewidth 0 -draw \u0026#39;text 30,160 \u0026#34;Stroke 0\u0026#34;\u0026#39; \\  -fill red -stroke black -strokewidth 1 -draw \u0026#39;text 30,240 \u0026#34;Stroke 1\u0026#34;\u0026#39; \\  -fill red -stroke black -strokewidth 2 -draw \u0026#39;text 30,320 \u0026#34;Stroke 2\u0026#34;\u0026#39; \\  -fill red -stroke black -strokewidth 3 -draw \u0026#39;text 30,400 \u0026#34;Stroke 3\u0026#34;\u0026#39; \\  stroke_table.jpg 请注意，从上面的例子中，设置 -strokewidth 为 \u0026ldquo;0\u0026rdquo; 与设置 -stroke 颜色为 \u0026ldquo;none\u0026rdquo;（默认值）是不同的。前者会画出一个非常非常细的笔触轮廓，而后者则会有效地关闭它。在这两种情况下，笔触仍然会被绘制。\n然而你也应该注意到，即使 -strokewidth 为 \u0026ldquo;0\u0026rdquo;，图像的轮廓也会比普通的 filled 图像（使用 -stroke 颜色为 \u0026ldquo;none\u0026rdquo;）扩大非常小。\n最后，使用任何小于 \u0026ldquo;1.0\u0026rdquo; 的宽度都不能正常工作。在这种情况下，你应该谨慎行事。\n但是请记住， -strokewidth 也是一个浮点设置。也就是说，\u0026ldquo;0.5\u0026rdquo; 的笔画宽度也是有效的。然而，通常只有当您试图在关闭防锐化功能的情况下绘制薄的位图圆时，这才是重要的。\n下面是一个使用超大笔触宽度的例子。\nconvert -size 320x100 xc:lightblue -font Candice -pointsize 72 -fill white \\  -stroke black -strokewidth 15 -draw \u0026#34;text 25,65 \u0026#39;Anthony\u0026#39;\u0026#34; \\  stroke_thick.jpg 请注意， -strokewidth 可以向内和向外扩展线条。下面是同样的例子，但是重新绘制了字体，没有笔画轮廓，去掉了很粗的笔画的内侧部分。\nconvert -size 320x100 xc:lightblue -font Candice -pointsize 72 -fill white \\  -stroke black -strokewidth 15 -draw \u0026#34;text 25,65 \u0026#39;Anthony\u0026#39;\u0026#34; \\  -stroke none -draw \u0026#34;text 25,65 \u0026#39;Anthony\u0026#39;\u0026#34; \\  stroke_outline.jpg 更多使用描边的例子请看复合字体效果。请特别看一下\u0026rdquo;气球效果\u0026quot;。\n绘制（描边）线条 IM中的默认画线有一些奇怪的行为，值得了解。下面就为大家介绍一下默认画线\u0026hellip;\nconvert -size 100x40 xc:lightblue \\  -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_default.jpg 你可以用 -fill 选项设置线条的颜色。\nconvert -size 100x40 xc:lightblue \\  -fill white -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line.jpg 此外，你还可以通过设置 [-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke) 颜色，使线条稍微粗一些。\nconvert -size 100x40 xc:lightblue \\  -fill white -stroke black -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_stroke.jpg 但是我们用 -fill 选项指定的白色是怎么回事呢？\n这就是在 ImageMagick 中绘制线条的棘手之处。该程序所做的实际上是将线条视为一个约1像素宽的填充对象。这是自然的，因为通常情况下，多条线通常用于扫出一个要填充的区域。\n所以，就像我们在上一节中使用字体的描边一样，IM 用填充色绘制线条（或对象），然后用描边色在其周围绘制。结果就是，现在上面的描边色线条稍微粗了一点，填充色完全隐藏在下面。如果你把描边色做成半透明的，就可以让这个填充色再次显现出来。\n综上所述，线条会出现在 -fill 颜色下绘制，但一旦 -stroke 颜色被定义为默认的\u0026quot;无\u0026quot;或\u0026quot;透明\u0026quot;颜色以外的颜色，该选项就没有任何意义了。\n 选项 -linewidth 实际上只是 -strokewidth 的别名，不应该被使用。\n 例如，你可能会认为这个命令会产生很粗的线条。确实如此，但由于 -stroke 的颜色是不可见的，所以你看不到它。你只能看到线条的一个像素宽的区域的内部\u0026quot;填充\u0026rdquo;。\nconvert -size 100x40 xc:lightblue \\  -fill white -strokewidth 3 -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_fill_3.jpg  以上的结果其实我认为是一个 BUG，什么都没画，因为没有'区域'填充，也没有设置线的'描边颜色\u0026rsquo;。什么都没有画，因为没有\u0026quot;区域 \u0026ldquo;需要填充，也没有设置线的\u0026quot;笔触颜色\u0026rdquo;。IM 目前这样做的原因是为了避免新用户的混淆，但实际上这只会给高级用户带来问题。详见《绘制填充边界》。\n 但如果同时定义了描边颜色，就会得到要求的粗线\u0026hellip;\nconvert -size 100x40 xc:lightblue \\  -stroke black -strokewidth 3 -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_stroke_3.jpg 如果将 -strokewidth 设置为1，则上面的一行将被完全覆盖。\nconvert -size 100x40 xc:lightblue \\  -stroke black -strokewidth 1 -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_stroke_1.jpg 当然当你掌握了这些知识后，你就可以利用这些知识进行创作，就像画字体一样。\nconvert -size 100x40 xc:lightblue \\  -stroke black -strokewidth 5 -draw \u0026#34;line 5,35 95,5\u0026#34; \\  -stroke white -strokewidth 2 -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_multi.jpg 在这里，我使用了最薄的 -strokewidth 设置为 \u0026ldquo;0\u0026rdquo;，就像我对上述字体所做的一样。\nconvert -size 100x40 xc:lightblue \\  -fill white -stroke black -strokewidth 0 -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_stroke_0.jpg 这就产生了一个非常奇怪的结果，即由黑点和灰段组成的点线。这是笔触、填充和背景色之间奇怪的\u0026quot;色拍频率\u0026quot;的结果。\n下面是线条的放大图\u0026hellip;\nconvert -size 25x10 xc:lightblue \\  -fill white -stroke black -strokewidth 0 -draw \u0026#34;line 2,8 22,1\u0026#34; \\  -scale 400% line_stroke_0_white.jpg  颜色节拍频率 \u0026ldquo;的效果与\u0026quot;声音节拍\u0026quot;的效果并无二致，当你有两把非常轻微的不调的吉他时，你会得到这样的效果。在这种情况下，你会得到一个黑点，其中笔触颜色完全覆盖了基本的填充颜色，你会得到一个灰色的点，其中笔触颜色与填充和背景颜色混合。 颜色混合是反锯齿过程的自然结果，IM使用反锯齿过程来尝试改善线条和其他绘制对象的外观。更多信息请参见IM 中的抗锯齿讨论和示例页面。\n 需要注意的是，这种效果只出现在倾斜的线条上，而不是纯水平或垂直的线条，因为在这些线条上，别名没有影响，因此也就没有\u0026quot;色拍频率\u0026quot;的效果。\nconvert -size 100x40 xc:lightblue \\  -fill white -stroke black -strokewidth 0 -draw \u0026#34;line 5,20 95,20\u0026#34; \\  line_stroke_horz.jpg 在这里，我在放大的视图上使用了不同的底层填充颜色，所以你可以看到颜色如何改变结果的节拍。\nconvert -size 25x10 xc:lightblue \\  -fill none -stroke black -strokewidth 0 -draw \u0026#34;line 2,8 22,1\u0026#34; \\  -scale 400% line_stroke_0_none.jpg convert -size 25x10 xc:lightblue \\  -fill red -stroke black -strokewidth 0 -draw \u0026#34;line 2,8 22,1\u0026#34; \\  -scale 400% line_stroke_0_red.jpg convert -size 25x10 xc:lightblue \\  -fill black -stroke black -strokewidth 0 -draw \u0026#34;line 2,8 22,1\u0026#34; \\  -scale 400% line_stroke_0_black.jpg 让我们把它和无 stroke 相比\u0026hellip;\nconvert -size 25x10 xc:lightblue \\  -fill black -stroke none -draw \u0026#34;line 2,8 22,1\u0026#34; \\  -scale 400% line_stroke_-_black.jpg 正如你所看到的，当绘制非常细的线条时，你可以通过使用相同的填充和描边颜色，或者将其中一种颜色设置为无来减少\u0026quot;节拍\u0026rdquo;。虽然后者是最好的主意，但前者可能对你的特定编程需求更实用。\n注意，填充线的粗细是 \u0026ldquo;0\u0026rdquo;。但描边线可以有更大的厚度。它也是一个浮点值! 2.5像素宽的线条是完全有效的。\n 这些结果不仅是由于笔画宽度为0的bug，导致颜色跳动，而且在没有实际需要填充的区域时，\u0026ldquo;填充色\u0026quot;被画出了额外的1.0直径厚度。这我也认为是一个bug。请看绘制填充边界。\n 绘制填充边界 关于各种绘制原语，还有一些其他要点需要您注意。\n笔画宽度对于大于 1.0 的浮点值工作得很好，但对于小于 1.0 的值似乎会崩溃。这是由于使用的实现算法造成的，而不仅仅是因为它是错误的，因为它在较大厚度的线条上工作得很好。\n基本上，如果你使用的笔画宽度为零，你可以期待没有笔画颜色会被添加。相反，你会得到一种节拍模式，当线条穿过像素的实际\u0026quot;中心\u0026quot;时，笔触颜色就会达到全部强度。\n真正应该发生的是，添加到像素上的颜色数量应该反映出被绘制的线条的面积，而不是像素与该线条的距离。因此，零宽度的线条不应该给图像添加任何颜色，而厚度小于1.0的线条应该只添加较少的颜色。\n请看上面的例子 Draw Lines, with StrokeWidth and Stroke。\n另一个问题是，填充颜色没有应用到正在绘制的形状（多边形）的边缘，而是应用到更远的半像素处。这包括没有应用\u0026quot;描边\u0026quot;的情况，而边缘应该是精确的。它也包括画一条\u0026quot;线\u0026rdquo;，它的填充厚度实际上是\u0026quot;零\u0026rdquo;。\n基本上，如果你画了一条线，没有启用描边，从技术上讲，你应该看到，没有线，因为它没有\u0026quot;填充\u0026quot;厚度。相反，线条的绘制至少包括1个像素宽的\u0026quot;填充\u0026quot;颜色。这是出于历史原因，一般来说可以避免新用户对IM的混淆。不幸的是，这对高级用户来说是不正确的。\n这意味着，如果您只使用填充色绘制两个多边形，并共享一个边缘，该边缘将重叠1个像素，因为每个多边形的所有边缘都比它大半像素。换句话说，多边形和其他形状并不适合在一起，而是重叠的。\n例如，在这里我试着使用 draw 把一张图片分成两半（在白色上绘制黑色）。要做到这一点，我画了两个多边形，共享一个边缘，完全没有重叠。由此产生的\u0026quot;微小\u0026quot;图像，已被放大显示。\nconvert -size 10x10 xc: -draw \u0026#39;polygon 2,-1 7,10 10,10 10,-1\u0026#39; bound_left.gif convert -size 10x10 xc: -draw \u0026#39;polygon 2,-1 7,10 -1,10 -1,-1\u0026#39; bound_right.gif convert bound_left.gif bound_right.gif -compose Plus -composite bound_add.gif 两个黑色的部分(这是实际绘制的)实际上是相互重叠的! 换句话说，尽管我们试图使用绘制的多边形分别绘制这两个区域，但填充的区域比要求的略大。\n我还将两张图片加（加合成）在一起，这样你就可以实际看到绘制的黑色区域的重叠。如果两个多边形是完美契合的，那么 \u0026ldquo;添加 \u0026ldquo;的图画将是纯白色的。\n实际的重叠量相当于默认的 -strokewidth 1.0 设置。因此，通常情况下，这个额外的区域会被一个正常的笔画宽度所覆盖。然而它可能会造成一些实际问题。\n旁白: 对于一个完整的连接测试，你会在黑色背景上生成50%的灰色区域，然后把它们加在一起。这样你就可以看到这些区域是否不仅 \u0026ldquo;重叠\u0026rdquo;（如上图所示），而且还可以测试当你把这些区域加在一起时，它们是否 \u0026ldquo;重叠不足\u0026rdquo;（在填充的区域之间留下一个间隙）。所得到的图像应该是一个完美平滑的50%灰色，沿连接处没有颜色变化。透明度检查会涉及到，在一个完全透明的背景上应该使用50%透明，50%灰色的颜色。\n要查看一个完美的剪切和重新添加的例子，基于一个单一的蒙版图像，请参阅组成方法的例子，组成 DstOut。\n未来BUG修复：填充的区域应该是精确的，但为了在绘制形状时进行补偿，默认的 \u0026ldquo;描边颜色 \u0026ldquo;应该设置为填充颜色（除非它本身被特别设置）。\nMVG - 魔法矢量图形 上面显示的原语构成了所有 -draw 操作的基础。它们共同构成了 ImageMagick 中特殊内部语言的起点，称为 Magick Vector Graphics 语言。关于这种语言的更多细节，请参见IM网站上的 MVG 原语和语法摘要。\n这种 \u0026ldquo;MVG\u0026rdquo; 语言的设计目标是让 ImageMagick 处理更复杂的 SVG（可缩放矢量图形）语言。它通过尝试将给定 SVG 格式的图像转换为更简单的内部 MVG 格式来实现。更多细节请看下面的 SVG 处理。\n因此，你上面看到的只是 -draw 操作符的一小部分功能。如果你想绘制复杂的对象，我建议你使用SVG编辑器（如 \u0026ldquo;Sodipodi\u0026rdquo;）为对象创建一个单独的SVG格式图像。参见下面的非IM矢量图形程序）。\n与 SVG 不同，MVG 没有任何形式的\u0026quot;容器\u0026quot;或图像命令集。在转换过程中，这些命令都被删除，以产生一个简化的 MVG 绘图命令序列。相反，它使用图形上下文的概念来保存和恢复各种绘图设置，这就是我们现在要看的。\n命令行设置与 MVG 设置 首先，您通过命令行选项设置的几乎所有设置，绘制原语使用的设置在 MVG 绘制命令中都有直接对应的内容。\n通过命令行选项（如 -strokewidth）或使用 MVG 绘图字符串（如 strok-width）中的设置，两者之间的主要区别在于 MVG 设置只在 MVG 命令字符串的持续时间内有效。\n一般绘图设置的总结:\n __cmd_option__ __draw_MVG__ __Argument__ -fill fill color/tile for inside shapes -tile fill image tile, replaces fill color -stroke stroke line color/tile around the shapes -strokewidth stroke-width pixel width +antialias stroke-antialias 0/1 aliasing line edges -font font font_name / font_file -family font-family ? -weight ? ? -stretch ? ? -pointsize font-size height in points -kerning - extra inter-character spacing +antialias text-antialias 0/1 aliasing drawing text -box text-undercolor fill color for font bounding box - decorate (None, Underline, LineThrough or Overline) -gravity gravity (None, North, South-East,...) -fuzz - color delta / percentage -bordercolor - color Notes:\n - no such option ? unknown 这些设置通常很好理解，因为它们经常使用，上面也有演示。\n 字体、拉伸、样式和重量用于从 ImageMagick 字体列表中识别字体。然而，大多数人只是选择一个特定的字体和大小点来代替使用。因此，它们在IM中很少使用。 正如您所看到的，\u0026ldquo;color fill\u0026rdquo; 原语的特殊设置在 MVG 中并没有直接对应的设置。这就是 -bordercolor 和 -fuzz 因子设置。在使用 -draw 操作符之前，必须从命令行指定这些设置。\n 有些 MVG 设置作为全局命令行设置可能更有用，比如字体绘制的 decorate 设置。\n警告： [-gravity](https://imagemagick.org/Usage/option_link.cgi?gravity) 不是 SVG 规范的一部分。在 MVG 中，它只用于文本和图像的放置以及对齐。目前没有与默认的\u0026quot;引力\u0026quot;效果分开的调整设置。然而，由于调整是 SVG 文本处理的一部分，这可能会在未来的某个时候改变。\n现在，全局命令行设置（在 MVG 绘制字符串之外）用于初始化你所应用的每个 -draw 操作的设置，这就是为什么你可以设置一个 -fill 颜色，然后你可以用它来绘制该颜色的圆。\nconvert -size 100x60 xc:skyblue -fill red \\  -draw \u0026#34;circle 50,30 40,10\u0026#34; draw_circle_global.gif 你可以在 MVG 参数 -draw 中本地覆盖全局设置\u0026hellip;\nconvert -size 100x60 xc:skyblue -fill red \\  -draw \u0026#34;fill green circle 50,30 40,10\u0026#34; draw_circle_override.gif 然而，在单个 -draw MVG 参数中设置的设置只在 -draw 操作期间存在。也就是说， -draw 中的设置只限于该次绘制，而不会带入以后单独的 -draw 参数中。\nconvert -size 100x60 xc:skyblue -fill red -draw \u0026#39;fill green\u0026#39; \\  -draw \u0026#34;circle 50,30 40,10\u0026#34; draw_circle_local.gif 如果你打算进行大量的操作，那么在单个 MVG 字符串中进行这些操作可能会比多个 -draw 操作更好。\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;fill green circle 41,39 44,57 fill blue circle 59,39 56,57 fill red circle 50,21 50,3 \u0026#34; draw_circle_multi.gif MVG 特定设置 其他控制线条和对象绘制方式的 MVG 设置，即使在使用原语操作时也需要了解。这些设置包括\u0026hellip;\n __draw_MVG__ __Description/Argument__ fill-opacity fill transparency, from 0.0 to 1.0 clip-rule fill style for crossed lines (evenodd, nonzero) stroke-opacity line transparency, number from 0.0 to 1.0 stroke-dasharray list of 'on' and 'off' lengths for lines stroke-dash stroke-linecap End of line look: butt round square stroke-linejoin Lines joins: butt miter round square stroke-miterlimit Angle when 'miter' joins become 'bevel' (or 'butt') 记住，所有 MVG 设置和绘图操作符的完整列表可以在 IM 网站的 MVG 原语和语法摘要中看到。\n让我们看看一些简单设置的效果\u0026hellip;\u0026hellip;\n# Stroke Opacity convert -size 100x60 xc:skyblue -fill none -stroke black \\  -draw \u0026#34; path \u0026#39;M 10,10 L 90,10\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-opacity 0.8 path \u0026#39;M 10,20 L 90,20\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-opacity 0.6 path \u0026#39;M 10,30 L 90,30\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-opacity 0.4 path \u0026#39;M 10,40 L 90,40\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-opacity 0.2 path \u0026#39;M 10,50 L 90,50\u0026#39;\u0026#34; \\  set_stroke_opacity.gif # Fill Opacity convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34; rectangle 5,10 15,50 \u0026#34; \\  -draw \u0026#34;fill-opacity 0.8 rectangle 20,10 30,50 \u0026#34; \\  -draw \u0026#34;fill-opacity 0.6 rectangle 35,10 45,50 \u0026#34; \\  -draw \u0026#34;fill-opacity 0.4 rectangle 50,10 60,50 \u0026#34; \\  -draw \u0026#34;fill-opacity 0.2 rectangle 65,10 75,50 \u0026#34; \\  -draw \u0026#34;fill-opacity 0 rectangle 80,10 90,50 \u0026#34; \\  set_fill_opacity.gif # Plain and Dashed Lines convert -size 100x60 xc:skyblue -fill none -stroke black \\  -draw \u0026#34; path \u0026#39;M 10,10 L 90,10\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 5 3 path \u0026#39;M 10,20 L 90,20\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 5 5 path \u0026#39;M 10,30 L 90,30\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 10 3 3 3 path \u0026#39;M 10,40 L 90,40\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 1 6 path \u0026#39;M 10,50 L 90,50\u0026#39;\u0026#34; \\  set_lines.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34; path \u0026#39;M 10,10 L 90,10\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 5 3 path \u0026#39;M 10,20 L 90,20\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 5 5 path \u0026#39;M 10,30 L 90,30\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 10 3 3 3 path \u0026#39;M 10,40 L 90,40\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 1 6 path \u0026#39;M 10,50 L 90,50\u0026#39;\u0026#34; \\  set_lines_fill.gif # Note: Technically the second image should be the same as the first # as the \u0026#39;filled\u0026#39; lines contain no area. This I regard as a BUG. # Stroke Ends and Joins convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth 8 \\  -draw \u0026#34; path \u0026#39;M 20,20 L 20,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-linecap butt path \u0026#39;M 40,20 L 40,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-linecap round path \u0026#39;M 60,20 L 60,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-linecap square path \u0026#39;M 80,20 L 80,70\u0026#39;\u0026#34; \\  set_endcaps.gif convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth 5 \\  -draw \u0026#34; path \u0026#39;M 5,70 L 20,20 35,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-linejoin miter path \u0026#39;M 35,70 L 50,20 65,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-linejoin bevel path \u0026#39;M 55,70 L 70,20 85,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-linejoin round path \u0026#39;M 75,70 L 90,20 105,70\u0026#39;\u0026#34; \\  set_linejoin.gif convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth 5 \\  -draw \u0026#34; path \u0026#39;M 5,70 L 20,20 35,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-miterlimit 7 path \u0026#39;M 35,70 L 50,20 65,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-miterlimit 6 path \u0026#39;M 65,70 L 80,20 95,70\u0026#39;\u0026#34; \\  set_miterlimit.gif stroke-miterlimit 的设置是相当难以演示的。这个属性定义了将 miter 连接变为 bevel 连接的角度。基本上对于非常尖锐的角度，一个斜面可以从两条线的实际接合处延伸很长的距离。这就为这个锐角设置了一个最大限度，当它变得太长时，就会使角点变钝。但请注意，它代表的是某种角度的三角值，而不是长度或距离。该值必须大于1.0。\n上面显示了对于我所显示的连接角度，斜角会突然转换成一个介于6到7之间的斜角。\n例如，1.414 的 troke-miterlimit 会将小于90度的任何角度的 \u0026ldquo;miter\u0026rdquo; 转换为 bevel 。4.0的 值（默认值）将小于约29度的角度转换为连接。而10.0的值可以将小于约11.5度的角度转换为斜面。\nSVG s路径绘制 SVG 路径是 SVG 的基本绘图原语。它用于绘制线型、圆、曲线、弧线等。SVG 路径的完整规范可以在 SVG 路径规范文档中找到。\n然而这并不是一个容易阅读的文档，因为它确实是为程序员而不是用户准备的，所以我将简化和总结路径规范\u0026hellip;\n 字母是命令，而所有的数字（浮点）都是参数 逗号或空格可以作为参数分隔符，否则完全忽略 每个路径组件的最后两个参数 (x,y) 将成为该路径组件的终点(或\u0026quot;结\u0026rdquo;) 大写字母是指最终点的绝对坐标 小写字母是相对于前一个组件的终点而言的 例如 \u0026ldquo;M 1,2 L 3,4 L 2,4\u0026rdquo; 和 \u0026ldquo;M 1,2 L 4,6 L 6,2\u0026rdquo; 是一样的。 即在1,2上加了3,4，画线到4,6。 然后在1,2上加2,4，画出一条线到最后的坐标6,2。 每个元素的参数可以重复，不需要重新发布相同的路径字母，可以多加数字参数组。不过对于曲线，为了方便阅读，我建议你还是加上函数字母。 重复的参数 \u0026ldquo;M\u0026rdquo; 或 \u0026ldquo;m\u0026rdquo; 分别作为 \u0026ldquo;L\u0026rdquo; 或 \u0026ldquo;l\u0026rdquo; 处理。 例如：\u0026rdquo; M 1,2 3,4 5,6 \u0026quot; 和 \u0026quot; M 1,2 L 3,4 L 5,6 \u0026quot; 是一样的。 而：\u0026ldquo;m 1,2 3,4 2,4 \u0026quot; 与 \u0026quot; m 1,2 l 3,4 l 2,4 \u0026quot; 相同。 对于立方贝塞尔，所有的点（控制点和结点）都是相对于前一个路径组件的端点而言的。  请注意，您可以用绝对坐标或相对坐标来指定对象。因此，你可以用相对坐标来定义一个对象，只需提供一个初始的绝对\u0026quot;移动\u0026quot;坐标来定位整个路径。\n另一方面，你也可以使用其他的\u0026quot;图形内容\u0026quot;命令来移动整个图形在\u0026quot;视图框\u0026quot;或\u0026quot;转换\u0026quot;中的位置（见下文）。因此，在 SVG 路径中使用绝对或相对坐标并不重要。 移动、线条和路径闭合是学习 SVG 对象路径的最初起点。\n# Open, Completed and Closed Paths (same points) convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 40,10 L 20,50 90,10 70,40\u0026#39;\u0026#34; path_open.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 40,10 L 20,50 90,10 70,40 40,10\u0026#39;\u0026#34; path_complete.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 40,10 20,50 90,10 70,40 Z\u0026#39;\u0026#34; path_closed.gif 但是请注意，\u0026lsquo;z\u0026rsquo; 只是关闭循环。它并没有创建一个单独的对象。因此，两个\u0026quot;关闭\u0026quot;的路径仍然被归类为一个单一的绘制对象，无论它们是重叠的还是完全断开的。\n这里我们展示了两个闭合但重叠的循环，在同一方向上绘制。由于只使用了一条路径，所以对象是一个单一的对象，fill-rule 设置控制了重叠区域的填充方式。\n# Overlapping Paths and Fill Rule convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;fill-rule evenodd \\ path \u0026#39;M 40,10 20,20 70,50 Z M 20,40 70,40 90,10 Z\u0026#39; \u0026#34; path_evenodd.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;fill-rule nonzero \\ path \u0026#39;M 40,10 20,20 70,50 Z M 20,40 70,40 90,10 Z\u0026#39; \u0026#34; path_nonzero.gif 由于对象围绕中心以相同的角度方向绘制，两个闭合的循环将包含一个周期值为2的区域，因此 evenodd 规则使得该区域未被填充，而非零的 nonzero 规则则将其填充。但是请注意，所有的路径都是可见的，因为它们实际上是同一个对象。\n绘制路径的方向是非常重要的，一般情况下，所有的路径相对于对象的'内部'应该绘制在完全相同的方向上。\n例如这里我将第二个对象画成与第一个对象相反的方向。因此，当两个对象重叠时，该区域被圈出 \u0026lsquo;0\u0026rsquo; 次。也就是说，无论使用什么 fill-rule，它都将是未被填充的，形成一个'洞\u0026rsquo;。\n# Overlapping Closed Objects, Second object drawn in reverse convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;fill-rule evenodd \\ path \u0026#39;M 40,10 20,20 70,50 Z M 20,40 90,10 70,40 Z\u0026#39; \u0026#34; path_rvs_evenodd.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;fill-rule nonzero \\ path \u0026#39;M 40,10 20,20 70,50 Z M 20,40 90,10 70,40 Z\u0026#39; \u0026#34; path_rvs_nonzero.gif 这意味着你可以在物体上产生一个\u0026quot;洞\u0026rdquo;，通过反转方向，使物体的\u0026quot;内部\u0026quot;保持在行进方向的同一侧。\n# An object with a reversed drawn hole! convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,10 20,55 70,50 80,5 Z M 50,20 60,40 40,30 Z\u0026#39; \u0026#34; path_with_hole.gif 无论 fill-rule 的设置如何，结果都是一样的，因为这个洞是'偶数'和'零\u0026rsquo;，所以是未填充的。\n当然，如果您使用一个完全独立的 path 元素，您将生成一个完全独立的对象。在这种情况下，fill-rule 不适用，而只是按照给定的顺序，将对象画在彼此的上方。\n# Separate paths are separate objects convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 40,10 20,20 70,50 Z\u0026#39; path \u0026#39;M 20,40 70,40 90,10 Z\u0026#39; \u0026#34; path_separate.gif 未来：坐标对准路径 \u0026ldquo;H\u0026rdquo; 和 \u0026ldquo;V\u0026rdquo;。\n椭圆弧是 SVG 路径的圆圈绘制功能\u0026hellip;\nlarge 和 sweep 参数特别重要，因为它们用于决定从起点到终点的四种弧线中的哪一种。\nlarge 和 sweep 这两个标志定义了四条弧线中哪一条弧线将连接这两个点。\n# Elliptical Arcs : A radius_x,y angle large,sweep x,y convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,15 0 0,0 70,20\u0026#39;\u0026#34; path_arc.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,15 0 0,1 70,20\u0026#39;\u0026#34; path_arc2.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,15 0 1,0 70,20\u0026#39;\u0026#34; path_arc3.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,15 0 1,1 70,20\u0026#39;\u0026#34; path_arc4.gif 第二个标志 sweep 简单地决定了弧线路径的方向的哪一边应该被绘制。\nlarge 标志是用来选择较长的路径，绕着椭圆的中心走。这是设置的角度的弧线将大于180度。如果关闭，你会得到较小的'弧\u0026rsquo;，不包含椭圆的中心，并且弧线的角度小于180度。\n用 \u0026ldquo;Z\u0026rdquo; 来关闭弧线，只是画出最后的直线段。\n要创建一个完整的椭圆或圆，你至少需要两个'弧线'段，从第一点到第二点，然后回到第一点。两条弧线都应该有相同的 sweep 设置，所以弧线将在不同的边上，有不同的移动方向。其中一条弧线应该有 large 的设置。\n# Closed and angled elliptical arcs (defined by two edge points) convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,20 20 0,0 70,20 Z \u0026#39;\u0026#34; path_arc5.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,20 20 1,1 70,20 Z \u0026#39;\u0026#34; path_arc6.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,20 20 0,0 70,20 \\ A 30,20 20 1,0 30,40 Z \u0026#39;\u0026#34; path_arc7.gif 请注意，如果直线太长，在给定的角度下无法适应给定的椭圆大小，椭圆的大小将被放大，以适应以椭圆为中心的直线，这意味着通过使用小数字作为轴半径，你可以只指定轴长的比例，并保证直线路径通过椭圆的中心点。\n这意味着，通过使用小数字的轴半径，你可以只指定一个轴长的比例，并保证直线路径穿过椭圆的中心点。也就是说，路径从椭圆的一侧到另一侧形成一个椭圆直径。这并不是椭圆的主轴或次轴，只是一个椭圆的直径。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 3,2 45 0,0 70,20\u0026#39;\u0026#34; path_arc_x.gif 当然，使用长度为 \u0026ldquo;1,1\u0026rdquo; 的结果是一个完美的半圆，从一个点，到下一个点。在这种情况下，椭圆角不会有任何区别。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 1,1 0 0,0 70,20\u0026#39;\u0026#34; path_hcircle.gif 对于以两点为中心的全圆，用\u0026hellip;\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 1,1 0 0,0 70,20 A 1,1 0 1,0 30,40 Z\u0026#39;\u0026#34; path_circle.gif SVG 对 \u0026ldquo;弧线\u0026quot;的定义也声明，如果两个半径中的任何一个是0，那么就应该画一条直线。因此，任何半径为 \u0026ldquo;0,0\u0026rdquo; 的圆弧，都只是一条简单的直线圆弧\u0026hellip;\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 0,0 0 0,0 70,20\u0026#39;\u0026#34; path_arc_line.gif 如果你为弧线指定了一个非常大的半径，而没有为回程路径指定 large sweep，你可以在两点之间创建该半径的透镜形状。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 50,50 0 0,0 70,20 A 50,50 0 0,0 30,40 Z\u0026#39;\u0026#34; path_lens.gif 这种类型的弧线是一个关键特征。它可以让你很容易地把原本是直线的东西变成一条小而明显的曲线。\n例如，与其说是一个简单的三角形，不如说是一个\u0026hellip;\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 20,55 L 25,10 L 70,5 L 20,55 Z\u0026#39; \u0026#34; triangle.gif 你可以用一个大半径的弧线代替每条线，让它们只是有轻微的曲线。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 20,55 A 100,100 0 0,0 25,10 A 100,100 0 0,0 70,5 A 100,100 0 0,0 20,55 Z\u0026#39; \u0026#34; triangle_curved.gif 线条的端点没有变化，所发生的只是每个 \u0026ldquo;L\u0026rdquo; 被一个弧线段代替。然而弧线的大小应该与线的长度成正比。由于我没有这样做，较长的对角线比其他两条线有更深的曲线。\n请记住，当调整对象的大小或比例时，你也应该将半径的比例与线的长度相同，这样曲线的大小就会相应地调整，所以弧线的比例也会正确。\n请注意，sweep 标志可以控制曲线是向外凸起还是向内凸起，这取决于每个路径段的绘制方向(见上文)。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 20,55 A 100,100 0 0,0 25,10 A 100,100 0 0,1 70,5 A 100,100 0 0,1 20,55 Z\u0026#39; \u0026#34; triangle_bulge.gif 看起来 \u0026ldquo;静态\u0026quot;的直边三角形，现在看起来有点像充满风的帆。\n如果你真的想让线条完美的直，而不把它们转换回真正的线段，你可以通过使用弧线半径为零来关闭曲线。\n因此，弧线不仅适合生成椭圆和圆，而且对于绘制直线和微曲线段也很有用。它是一种非常通用的通用点到点的绘制路径。\n使用椭圆弧来生成分离的曲线段的一个简单的替代方法是使用四元贝塞尔段来代替，主要的区别是使用一个单一的控制点，而不是一个圆形半径来定义弧线。这也允许您将弧线偏向线段的一端，但代价是难以生成对称的弧线。\n当然，您也可以通过使用这两种方法来进行 mix-n-match。\n饼图示例 为了完成对弧线的使用，让我们举个例子，使用为它们生成圆楔。当然，你可能需要使用一些外部的三角数学（你的高中数学有多好？）来确定所需的最终路径点。\nconvert -size 140x130 xc:white -stroke black \\  -fill red -draw \u0026#34;path \u0026#39;M 60,70 L 60,20 A 50,50 0 0,1 68.7,20.8 Z\u0026#39;\u0026#34; \\  -fill green -draw \u0026#34;path \u0026#39;M 60,70 L 68.7,20.8 A 50,50 0 0,1 77.1,23.0 Z\u0026#39;\u0026#34; \\  -fill blue -draw \u0026#34;path \u0026#39;M 68,65 L 85.1,18.0 A 50,50 0 0,1 118,65 Z\u0026#39;\u0026#34; \\  -fill gold -draw \u0026#34;path \u0026#39;M 60,70 L 110,70 A 50,50 0 1,1 60,20 Z\u0026#39;\u0026#34; \\  -fill black -stroke none -pointsize 10 \\  -draw \u0026#34;text 57,19 \u0026#39;10\u0026#39; text 70,20 \u0026#39;10\u0026#39; text 90,19 \u0026#39;70\u0026#39; text 113,78 \u0026#39;270\u0026#39;\u0026#34; \\  piechart.jpg 请注意，所有的弧线都是画在 line path 的左边，并有相应的标志（使用 sweep 标志）。但如果弧线覆盖的角度大于180度，则需要设置 large 标志。见上面例子中最后一个 gold 组件。\n还要注意的是，你应该完整地画出每个部分，尽管这意味着你可能要画两次边界线。如果你不这样做，你很可能要么不会完全用颜色填充该部分，要么填充颜色会覆盖之前绘制的部分轮廓。\n避免重复绘制多条线的唯一方法是绘制所有填充区域，然后重复这样绘制轮廓。就是说你需要把所有的东西都画两遍，确保东西正确匹配。因此，将轮廓加倍可能是最简单的解决方案。\n立方贝塞尔曲线可以使用 c 函数定义两个控制点，以及最终的终点。对于使用最后一个控制点的镜像的持续立方贝塞尔曲线（对于连续曲线），你可以使用 s 函数。\n下面是一个例子。由于这个函数的复杂性，我预先准备了一个画布，显示控制点的位置，以及最后一个控制点的 assumed mirror。\n# Cubic Bezier: C control_1_x,y control_2_x,y x,y # Smooth \u0026#34; : S control_2_x,y x,y convert path_cubic_canvas.gif -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 10,30 C 10,4 50,4 50,30 S 90,55 90,30\u0026#39; \u0026#34; \\  path_cubic.gif 连接控制点和该路径段路径上的最终点的线（控制线）基本上定义了通过路径上该点的曲线方向。长的控制线会在该点产生一条更平滑的曲线，而短的控制线则会在该点产生一条更清晰的曲线。如果控制点与曲线的点相吻合（控制线长度为零），则曲线在该点有一个尖锐的不连续性，就像只用直线段一样。\n作为一个更实际的例子，下面的代码是从 IM 实例 Logo 生成器脚本中提取出来的，该脚本创建了 IM 实例 Logo 的曲线溅射区域。\n这个例子的棘手之处在于，我将我使用的立方贝塞尔路径字符串，转换为另一个路径，显示用于生成贝塞尔曲线的控制线。这让我可以看到曲线的控制线角度和长度，使得调整结果变得更加容易。只需要调整一组点就可以同时显示曲线和控制线，将错误控制在最小范围内。\ncurve=\u0026#34;M 12,27 C 7,37 18,50 18,60 S 0,80 10,94 S 40,74 50,78 S 60,99 76,95 S 72,70 75,65 S 95,55 95,42 S 69,37 66,32 S 67,2 53,7 S 43,17 35,22 S 17,17 12,27 Z\u0026#34; c_ctrls=`echo $curve | \\  sed \u0026#39;1s/\\([0-9]\\) *\\([0-9]\\)/\\1 M \\2/; s/S/M/g; s/C/ /;\u0026#39; -` convert -size 100x100 xc:white \\  -draw \u0026#34;stroke None fill Green path \u0026#39;$curve\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke Red fill None path \u0026#39;$c_ctrls\u0026#39;\u0026#34; \\  curvy_splash.gif 如果你仔细观察图像，你会发现曲线的起点和终点有两条方向相反的控制线。对于一个封闭的连续路径来说，开始和结束的控制线应该在相同的角度（只是在镜面方向），当然也应该是相同的长度。这一点很重要，因为很容易弄错。\n沿着曲线的所有其他点只有一个控制点/线，它与曲线的绘制方向相反。该线段越长，曲线在该控制点处的 sharp 越低，长度为零则产生一个 point。\ns 函数在内部根据前一段的数据生成下一段的镜像控制点/线，从而产生曲线的平滑延续。\n关于这个路径函数的更多例子，请看《SVG：立方贝塞尔曲线命令》。\n手动生成贝塞尔曲线是比较直接的，不需要任何花哨的 GUI 工具。\n 首先定义所有你想让曲线经过的坐标点，在列表的最后重复起始坐标。 现在将这个列表扩大，将所有的 x,y 坐标点加倍成对，并在每对坐标点前添加一个 s（Smooth Cubic）函数。每对中的第一个数字是控制点，连接到第二个数字代表曲线上的点。然而第一个点对却把这一点反过来了，第一个点是曲线的起点，第二个点代表第一个也是唯一一个反转的控制点。 将第一对坐标的函数字母由 \u0026lsquo;S\u0026rsquo; 改为 \u0026lsquo;M\u0026rsquo;，然后在这对坐标之间加一个 \u0026lsquo;C\u0026rsquo;。最后将第二对坐标的 \u0026lsquo;S\u0026rsquo; 去掉，完成初始的立方体（\u0026lsquo;C\u0026rsquo;）函数。 通过添加最后的 \u0026lsquo;Z\u0026rsquo; 来完成路径，关闭曲线。 请看上面的示例序列，它应该是怎样的。 此时您可以测试绘制您的路径。由于所有的控制线长度为零，所以路径将只由直线段组成。 现在您需要做的就是慢慢地、小心地调整控制线段的位置（每个 \u0026ldquo;S\u0026rdquo; 对的第一个坐标），以得到您想要的最终曲线。不要把控制线做得太长，或者方向不对，否则你会得到一条看起来非常滑稽的曲线。 为了帮助查看你的变化和发现错误，请使用上面的转换 \u0026ldquo;sed\u0026rdquo; 命令来绘制路径控制点和曲线控制点之间的控制线。但是请注意，零长度的控制线是不可见的，但是由于lin会产生一个尖锐的点，所以位置应该很明显。 最后，确保 \u0026ldquo;C\u0026rdquo; 之后的第一条控制点/线与终点控制点/线的位置完全相反。  交互式曲线的生成也可以通过使用一些矢量图形编辑器来实现。\n例如 Luis Guerra 报告说，\u0026ldquo;Inkscape\u0026rdquo; 生成的贝塞尔曲线可以使用 \u0026ldquo;Edit -\u0026gt; XML Editor\u0026rdquo; 功能，然后选择你想要控制点的路径或形状。\n 你知道有什么其他的方法可以用GUI工具来提取贝塞尔曲线（在曲线上每个点给出两个或一个控制点）。或者是一些其他的技术来生成这样的曲线？请发邮件给我! 我很乐意听到它。你将会像其他人一样，被记入该技术的名下。\n 二次方贝塞尔函数是立方贝塞尔函数的简化，当两个控制点合并成一个控制点时。同样，你可以用 \u0026lsquo;Q\u0026rsquo; 函数开始曲线，然后用 \u0026lsquo;T\u0026rsquo; 函数继续曲线，镜像最后一个控制点。\n# Quadratic Bezier: Q control_x,y x,y # Smooth \u0026#34; : T x,y convert path_quad_canvas.gif -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 10,30 Q 20,4 50,30 T 90,30\u0026#39; \u0026#34; \\  path_quad.gif 但我要提醒您，\u0026ldquo;T\u0026rdquo; 继续函数只适用于连接间距相等的点的路径。我不推荐使用它。\n二次方曲线的优点是可以替代椭圆弧，因为它使用的是实际的位置，而不是弧线的半径。它也可以使弧线偏向于一端而不是另一端，这在使用椭圆弧时并不实用。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 20,55 Q 30,32 25,10 Q 50,1 70,5 Q 50,45 20,55 Z\u0026#39; \u0026#34; triangle_bulge_2.gif 在这种情况下，弧线不是那么均匀，你得到的东西就像一个倒立的鲨鱼鳍，而不是一个帆。\n请记住四边形弧线是抛物线，而椭圆弧线基本上是生成圆弧线段。这可能是决定你应该使用哪种类型的弧线段的关键。\n有关此路径功能的更多例子，请参见：SVG: Quadratic Bezier Curve Commands。\n绘图表面的变形 在这些能力之上，绘制对象的绘图表面可以以各种方式变形，让你做一些令人惊奇的事情。\n首先，你可以应用一些通用的绘图表面修改，比如\u0026hellip; \u0026ldquo;translate\u0026rdquo;、\u0026ldquo;rotate\u0026rdquo;、\u0026ldquo;scale\u0026rdquo;、\u0026ldquo;skewX\u0026rdquo;、\u0026ldquo;skewY\u0026rdquo; 和 \u0026ldquo;affine\u0026rdquo;。\n例如，给定一个线条的 path，我们可以 translate 绘图表面的原点或0,0点到另一个位置。\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;translate 50,30 image over 3,3 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; transform_translate.gif 请注意，\u0026ldquo;0,0\u0026rdquo; 或绘图区域的原点现在以图像为中心，尽管Y轴在图像的顶部仍然是负数，在底部仍然是正数。\nrotate 操作将旋转绘图表面，所以以后在该表面上绘制的任何东西都将被旋转绘制。当然，它会围绕转换后的原点进行旋转，所以最好同时使用这两个变换运算符。\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;translate 50,30 rotate -30 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; transform_rotate.gif scale 将放大和缩小原点周围的绘图面。\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;translate 50,30 scale 1.5,1.5 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; transform_scale.gif 一个常见的 scale 用法是将Y轴翻转，使Y的正值向上。当然原点也应该移到中心，或者左下角，以保持秩序。\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;translate 50,30 scale 1,-1 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; transform_flip.gif 最后，\u0026ldquo;skewX\u0026rdquo; 和 \u0026ldquo;skewY\u0026rdquo; 在X和Y方向上对图像进行剪切。例如，这里我们使用 \u0026ldquo;skewX\u0026rdquo; 给图像的垂直Y轴一个倾斜。\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;translate 50,30 skewX 20 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; transform_skewY.gif 这些操作符在 MVG -draw 字符串之外有对应的操作符，供一般使用。但是这些命令行版本是运算符，并且立即应用于内存中已经存在的图像，而不是应用于尚未绘制的矢量对象的绘制表面。更多细节请看扭曲图像。\n绘制表面的平移变形 上述所有五种画布变换都可以组合成一个通用的 Affine Matrix Operator，可以使用 MVG 原语 \u0026ldquo;affine\u0026rdquo;，也可以在调用 -draw 之前使用 -affine 设置 Affine 变换。\nAffine 变换使用一组 \u0026ldquo;Matrix Coefficients\u0026rdquo;，它定义了如何将你给出的坐标修改为实际的绘图坐标。\n关于这些 \u0026ldquo;coefficients\u0026rdquo; 如何工作的更多细节，请参阅 Affine Matrix Transforms。\n例如\u0026hellip; 要设置一个相对于对象绘制时的中心原点\u0026hellip;\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;affine 1,0,0,1,50,30 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; affine_null.gif 翻转图像\u0026hellip;\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;affine 1,0,0,-1,50,30 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; affine_flip.gif 绕原点旋转30度\u0026hellip;\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;affine .866,-.5,.5,.866,50,30 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; affine_rot.gif 对于更复杂的仿射变换，您可以使用为此目的创建的仿射辅助脚本。这些脚本将诸如旋转角度和中心点之类的东西转换为 Affine 坐标，你可以直接在 -draw affine 或 -affine 设置中使用。\n推/弹上下文 一些 MVG 原语实际上依赖于这些变换的使用才能正确使用。例如，椭圆原语只能用正交对齐的轴直接指定。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;ellipse 50,30 30,15 0,360\u0026#34; ellipse_orthogonal.gif 然而，通过使用绘图变换，我们可以很容易地给椭圆添加一个\u0026quot;旋转角\u0026rdquo;。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;push graphic-context translate 50,30 rotate 30 fill white stroke black ellipse 0,0 30,15 0,360 pop graphic-context\u0026#34; ellipse_rotated.gif 请注意，椭圆的 center(旋转点)在应用旋转之前首先被转换。然后，ellipse 在 \u0026ldquo;0,0\u0026rdquo; 处的转换位置被绘制。\n上面还显示了两个新的 MVG 绘图原语。\u0026lsquo;push graphic-context\u0026rsquo; 和 \u0026lsquo;pop graphic-context\u0026rsquo;。在上面的例子中，并不是严格意义上的需要，但在进行主要的绘图转换时，建议使用这两个原语。\npush 和 pop 原语的作用是保存当前的绘图状态或 \u0026ldquo;graphic-context\u0026rdquo;，然后再次恢复。在这两个原语之间更改的任何绘图设置都会被遗忘。这包括曲面变形（如 \u0026ldquo;平移 \u0026ldquo;和 \u0026ldquo;旋转\u0026rdquo;）、颜色设置 fill 和 stroke 或任何其他修改了绘图 state 的设置。\n这些原语使您可以轻松地绘制具有许多变换的非常复杂的对象，然后将事物恢复到更 \u0026ldquo;正常\u0026quot;的状态，以便以后进行绘制操作。您可以在下面的绘制箭头中看到更实用的演示。\n推/弹特殊对象 建设中 更多专门用于 MVG 处理 SVG 格式的设置。\n font-family font-stretch font-style font-weight encoding 'UTF-8' push defs push gradient 'def_name' linear X1,Y1 X2,Y2 stop-color 'color' where stop-color 'color' where # where is a point between the two pixels given (0 = X1,Y1 1= X2,Y2) gradient-units 'objectBoundingBox|userSpaceOnUse' affine .... pop gradient push gradient 'def_name' radial CX,CY FX,FY R # Here CX,CY is the center of the radial gradient of radius R # the FX,FY is the focal, and is usually the same a CX,CY # unless you are trying to warp the gradient in a specific direction stop-color 'color' where ... pop gradient pop defs push graphic-context fill 'url(#def_name)' ... draw things here ... pop graphic-context 例子见 Florent Monnier 的开发网站\u0026hellip; http://www.linux-nantes.fr.eu.org/~fmonnier/OCaml/MVG/。\n阅读 MVG 文件 正如你在上面的例子中所看到的，MVG 的 -draw 参数可以变得很长。事实上，SVG 到 MVG 的转换可以产生一些非常长的 MVG 绘图参数（见下文）。\n然而，IM 的一般命令行界面允许您通过使用 \u0026quot;@filename\u0026quot; 参数从文件中读取任何字符串参数。这很方便，因为这意味着你可以从一个单独的文件中读取非常长和复杂的MVG绘图命令。\n例如，如果我将 MVG 操作放入一个名为 \u0026ldquo;draw_circles.mvg\u0026rdquo; 的文件中，那么我就可以像这样绘制\u0026hellip;\nconvert -size 100x60 xc:skyblue -draw @mvg_circles.mvg mvg_draw.gif 不仅如此，ImageMagick 还懂得直接读取 \u0026ldquo;MVG:\u0026rdquo; 图像文件格式，让你可以更直接地绘制此类命令。然而，除非 MVG文 件定义了一个画布，否则你可能需要指定初始画布（ -size 和\u0026rdquo;-background\u0026rdquo;）来绘制。\nconvert -size 100x60 -background limegreen mvg_circles.mvg mvg_file.gif 你可以通过在 MVG 文件中添加一个 \u0026ldquo;viewbox\u0026rdquo;，并添加适当的背景色填充绘制，将初始画布设置移动到 MVG 图像中。这样就完成了 MVG 图像文件作为一个完整的图像定义。\nconvert mvg_circles2.mvg mvg_image.gif  目前只有一种方法可以从 MVG 参数字符串中读取外部 MVG 文件，那就是使用 \u0026ldquo;图像 \u0026ldquo;绘图原语。遗憾的是，这将 MVG 的 include 转换为光栅图像，然后再将该图像覆盖到绘图表面。 换句话说，目前还没有MVG的 \u0026ldquo;include\u0026quot;功能。 :-(\n 建设中 您可以生成IM的低级绘制操作，使用 `+render 来记录它们。\n当你再给 -render 设置/操作时，IM将立即绘制这些保存的操作。\n奇怪的是，仅仅输出到 \u0026ldquo;MVG\u0026rdquo; 文件似乎也能做到这一点\u0026hellip;\u0026hellip;。\nconvert ... -draw \u0026#39;....\u0026#39; draw_commands.mvg 注意：如果你在输出 MVG 格式文件时画了一条曲线，文件中会列出以下内容。曲线是一系列的短线段，而不是原始曲线。\n当然您也可以完全使用更通用的 SVG 格式。参见下面的 \u0026ldquo;SVG 格式处理\u0026quot;。\nMVG 阿尔法构成 建设中 我没有看到任何使用 Alpha 构图的情况（除了 painters 的算法之外）。基本上是一种 \u0026ldquo;over\u0026rdquo; alpha 合成）来绘制对象。\n然而，这并不是说不能这样做。\n如果你喜欢将你的矩形、椭圆、圆形或其他物体用不同的阿尔法成分（如 \u0026ldquo;DstOver\u0026rdquo;，这是一个类似于 Under 的成分），然后在空白的透明画布上画出你的人物，同样的构图，并将其合成到您的图像上。\n然而，由于 SVG 允许您使用 alpha 合成来绘制文本和其他的图像，因此，您可以使用 SVG 来绘制图像项目到图像上，我想这将是一个未来的补充。\n敬请期待\n绘制符号 有时你在图像上有一组点，你想在那里绘制参考符号，如十字、圆圈等。遗憾的是，目前IM还没有可以轻松绘制这类符号的命令，但只要稍加努力，你就可以绘制这类符号。\n符号绘制技巧 在给定的位置列表中绘制多个符号的诀窍是使用 shell 脚本或任何你正在使用的 API 生成 MVG 绘图命令，以便将给定的点集转化为适当的绘图命令集。 例如，我在这里将一条线上的点转换为每一个点的\u0026quot;加号\u0026rdquo;\u0026hellip;\n# Define a string of X and Y coordinates # comma between values, space between coordinates. points=\u0026#34;6.6,7.7 25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3 92.5,66.6\u0026#34; # convert each point into a draw command for a cross (using \u0026#39;awk\u0026#39;) # the \u0026#39;tr\u0026#39; converts spaces into \u0026#39;newlines\u0026#39; (one point per line). crosses=`echo $points | tr -s \u0026#39; \u0026#39; \u0026#39;\\012\u0026#39; |\\  awk -F, \u0026#39;{ print \u0026#34;line \u0026#34; $1-3 \u0026#34;,\u0026#34; $2 \u0026#34; \u0026#34; $1+3 \u0026#34;,\u0026#34; $2 ; print \u0026#34;line \u0026#34; $1 \u0026#34;,\u0026#34; $2-3 \u0026#34; \u0026#34; $1 \u0026#34;,\u0026#34; $2+3 ; }\u0026#39; -` # draw a red line between the points, and blue crosses on the points. convert -size 100x100 xc:white \\  -draw \u0026#34;fill none stroke red polyline $points\u0026#34; \\  -draw \u0026#34;fill none stroke blue $crosses\u0026#34; \\  points_plus.gif 上面使用 \u0026ldquo;tr\u0026rdquo; 将每个点（两个数字）分成每条线上的一个点，然后使用 \u0026ldquo;awk\u0026rdquo; 进行所有数学计算，在给定的点上绘制\u0026quot;加号\u0026rdquo;。你可以使用任何你喜欢的东西，因为我只是在输入点列表上应用了一种文本宏扩展的形式。几乎所有的编程语言都可以做到这一点。对于上面的shell脚本案例，我只是发现 \u0026ldquo;awk\u0026rdquo; 是最简单、最快的手段。\n其实你甚至可以使用 Imagemagick 本身的 \u0026ldquo;convert\u0026rdquo; 格式选项来进行这种 \u0026ldquo;macro\u0026rdquo; 的扩展\u0026hellip;比如这里我用它来计算圆周上的一个点，对于这个\u0026quot;点符号\u0026rdquo;。\n# Define a string of X and Y coordinates # comma between values, space between coordinates. points=\u0026#34;6.6,7.7 25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3 92.5,66.6\u0026#34; # circle radius (or symbol size) to draw around each point. radius=3.5 # convert each point into a draw command for a cross # In this case, points are space separated by the shell circles=$(for point in $points; do x=$(echo \u0026#34;$point\u0026#34; | cut -d, -f1) y=$(echo \u0026#34;$point\u0026#34; | cut -d, -f2) # use IM to do some floating point math, EG: y2=$y+$radius y2=$(convert xc: -format \u0026#39;%[fx:\u0026#39;\u0026#34;$y\u0026#34;\u0026#39;+\u0026#39;\u0026#34;$radius\u0026#34;\u0026#39;]\u0026#39; info:) echo \u0026#34;circle $x,$y$x,$y2\u0026#34; done) # Draw a red line between the points, and blue circles on the points. convert -size 100x100 xc:white \\  -draw \u0026#34;fill none stroke red polyline $points\u0026#34; \\  -draw \u0026#34;fill none stroke blue $circles\u0026#34; \\  points_circle.gif 现在，您生成的绘制字符串可能会变得相当长，并且可能会开始导致您的最终命令的长度问题。所以，与其将点转换成长字符串，然后我们在命令行上传递给 IM，不如将绘制命令以文件的形式管道化给 IM。\n我这次也使用了 SVG 路径的绘制方法来代替 Draw Primitive 的绘制方法。另外我生成的符号是每个点周围的三角形。\n# Define a string of X and Y coordinates # comma between values, space between coordinates. points=\u0026#34;6.6,7.7 25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3 92.5,66.6\u0026#34; # convert each point into a draw commands to draw a triangle for point in $points; do echo \u0026#34;path \u0026#39;M $pointm 0,-5 -4,+8 +8,0 -4,-8\u0026#39;\u0026#34; done |\\  convert -size 100x100 xc:white \\  -fill none -stroke red -draw \u0026#34;path \u0026#39;M $points\u0026#39; \u0026#34; \\  -fill none -stroke blue -draw \u0026#39;@-\u0026#39; \\  points_tri.gif SVG 路径实际上使这一点变得更容易，通过允许相对像素移动，允许你设计符号，所以它只需要一个单一的初始绝对移动\u0026rsquo;M\u0026rsquo;，然后再给出'移动'和'线'的序列来绘制符号。正因为如此，你实际上根本不需要任何浮点计算，因为IM draw会完成所需的定位数学。\n 相对移动SVG路径项\u0026rsquo;m'在IM v6.4.3-5之前被破坏了。如果你的IM比这更老，上面（和下一个）的例子可能什么也画不出来。您可以通过将上面的相对移动\u0026rsquo;m'替换为适当的相对线序列\u0026rsquo;l'来解决旧版本的问题。\n 现在你可以更进一步，将一个完整的MVG文件，包括画布规格，直接作为一个绘画命令的流水线输入到IM中。这次让我们做一个'十字\u0026rsquo;，这和上面第一个'加'的例子类似，需要大量的计算。\n# Define a string of X and Y coordinates # comma between values, space between coordinates. points=\u0026#34;6.6,7.7 25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3 92.5,66.6\u0026#34; # Generate a MVG file for IM to draw all components ( echo \u0026#34;viewbox 0 0 100 100 fill white rectangle 0,0 100 100\u0026#34; echo \u0026#34;fill none stroke red path \u0026#39;M $points\u0026#39;\u0026#34; echo \u0026#34;fill none stroke blue path \u0026#39;\u0026#34; for point in $points; do echo \u0026#34;M $pointm -2,-2 +4,+4 m -4,0 +4,-4\u0026#34; done echo \u0026#34;\u0026#39;\u0026#34; ) | convert mvg:- points_cross.gif 这使用了特殊的shell编程技术，在shell括号中 \u0026ldquo;echo\u0026rdquo; 的任何东西都将作为MVG文件被输入到最终的\u0026quot;转换\u0026quot;命令中。第一个 \u0026ldquo;echo\u0026rdquo; 定义并填充图像的绘图画布，而 \u0026ldquo;while\u0026rdquo; 循环则将每个 \u0026ldquo;点\u0026rdquo; 转换为一个给定半径的圆。\n这种方法的优点是，你不会受到任何字符串的限制，而使用其他两种方法可能会受到限制。\n其他你可以生成的符号包括方框、钻石、错误条等。\n也请参见下面的\u0026quot;绘制圆圈\u0026rdquo;，了解其他圆圈方法，包括不计算相对 \u0026ldquo;路径\u0026quot;的圆圈绘制。\n绘制符号的替代方法 除了直接绘制符号外，还有其他的方法可以将符号添加到图像中。\n符号字体 您可以从 Symbol Font 中提取符号，并将其保存为一个小位图。你也可以使用小的预定义但色彩丰富的图像来做这件事。\n然而这样做可能会出现问题，无法准确定位字体相对于特定像素的位置。也就是说这不是一个非常精确的技术。但是你可以在任何像素位置组成任何图像。例如这些符号是从一些字体中提取出来的，用于这些示例页面的具体使用。\n\u0026lt;= =\u0026gt; x + + + o o o o 在分层图像一节中给出了将图像合成到大背景上的例子。然而，循环的方法可能更有用，例如在分层图像的程序化定位中给出了。\n未来：使用坐标对图像进行分层的例子\n形态学 另一种选择是使用形态学，使用特殊的\u0026quot;形状\u0026quot;内核，如 \u0026ldquo;磁盘\u0026rdquo;、\u0026ldquo;环形 \u0026ldquo;和 \u0026ldquo;加\u0026rdquo;，甚至是你自己的用户定义内核，来 \u0026ldquo;稀释\u0026quot;单个像素。\n例如\u0026hellip;\nconvert -size 80x80 xc:black -fill white \\  -draw \u0026#39;point 20,15 point 55,30 point 40,60\u0026#39; points_pixels.gif convert points_pixels.gif -morphology Dilate Ring points_rings.gif convert points_pixels.gif -morphology Dilate Plus:4 points_pluses.gif convert points_pixels.gif -morphology Dilate Cross:3 points_crosses.gif 然后可以通过使用 Alpha Shape Operator 将结果直接转换为彩色叠加。\n这样做的最大好处是，你其实不需要知道每个符号的单独位置。或者有多少个符号。但这也可能是一个缺点。一个主要的缺点是，位置只在整数位置。你不能使用浮点 \u0026ldquo;子像素\u0026quot;定位来\u0026quot;绘制\u0026rdquo;。\n卷积 一个几乎相同的技术是使用 Convolve，使用专门设计的内核，它允许你设置不同的灰度，而不仅仅是一个简单的开/关结果，如上所述。\n通过使用不同的用户定义内核，为图像的每一个通道（红、绿、蓝和阿尔法），甚至可以从每个像素坐标创建多色符号。\n为此，我使用了一个我写的特殊脚本 image2kernel 来将彩色图像（见右图）转换为每个通道的独立浮点卷积核。\nimage2kernel -q marker.png marker.dat 这将生成四个文件，比如 marker_R.dat，每个通道都有一个非常小的输入图像，这是用户定义的图像表示（原点在图像中心）。\n现在使用这些内核数据文件，我们可以将这些单点在透明的背景上 Convolve 成我们彩色的标记图像。\nconvert points_pixels.gif -alpha off \\  \\( -clone 0 -morphology Convolve @marker_R.dat \\) \\  \\( -clone 0 -morphology Convolve @marker_G.dat \\) \\  \\( -clone 0 -morphology Convolve @marker_B.dat \\) \\  \\( -clone 0 -morphology Convolve @marker_A.dat \\) \\  -delete 0 -channel RGBA -combine point_markers.png  在IM v6.7.6-9之前，Combine Operator 要求图像的透明度通道以 \u0026ldquo;哑光\u0026quot;值而不是alpha值的形式给出，因此，由此产生的alpha通道需要被否定。EG:\n ... \u0026#34;`cat marker_A.dat`\u0026#34; -negate \\) \\ 只能使用小图像，像素点要足够分散，符号不要重叠。这是因为 Convolve 会将重叠的区域加在一起，使其比预期的更亮。\n以上内容已被转换成UNIX shell脚本 convolve_image，以方便使用。\nconvolve_image points_pixels.gif marker.png point_markers.png 这个技术源于IM论坛上的一个讨论-IM 的有趣体验。用户希望在足球场的背景图上放置小人，让他们的位置在图片中拼出一个人的名字。\n分层 一种不同的技术，如图像层，使用你从源图像中提取的像素列表进行定位，可能是更好的方法。你可以先叠加更远的符号图像，然后再叠加前景图像，你可以通过编程选择或随机选择什么符号替换什么点。\n关于这个例子，请看地图中的图钉。\n绘制圆圈 绘制选项为您提供了许多方法来完成一些非常基本的工作。绘制圆。\n例如，您可以在圆周上的任何一点上画一个圆，因此您需要计算一个中心点和一个半径为25像素的第二点。因此，您需要计算一个中心点和第二个点，这个点的半径（例如25像素）离第一个点的距离。\nconvert -size 100x60 xc: -stroke Firebrick -fill tomato -strokewidth 2 \\  -draw \u0026#39;circle 50,30 50,55\u0026#39; circle_circle.gif Fred Weinhaus 指出，通过使用平移，你可以消除计算圆边坐标的需要，而直接给出半径即可。\nconvert -size 100x60 xc: -stroke SeaGreen -fill PaleGreen -strokewidth 2 \\  -draw \u0026#39;translate 50,30 circle 0,0 25,0\u0026#39; circle_circle_trans.gif 但是当绘制多个圆时，上述操作需要对每个圆进行单独的 -draw 操作，或者使用 Context Pushing。\n使用椭圆可以直接指定半径为轴长\nconvert -size 100x60 xc: -stroke Sienna -fill Wheat -strokewidth 2 \\  -draw \u0026#39;ellipse 50,30 25,25 0,360\u0026#39; circle_ellipse.gif 你也可以用 stroke-lineecap round 画一条非常非常短的线来生成一个圆。描边的宽度可以设置圆的直径。注意线条必须有一定的长度（无论多小），否则画不出任何东西。\nconvert -size 100x60 xc: -stroke Blue -strokewidth 50 \\  -draw \u0026#39;stroke-linecap round line 50,30 50,30.0001\u0026#39; \\  circle_line.gif 这种技术，不幸的是不能勾勒出生成的圆，但对于覆盖大面积的区域，大笔触宽度是有用的。请看下面一些简单的例子。\n这种方法利用了 SVG 路径的绘制方法，所以可以在不需要计算任何额外坐标的情况下绘制圆形。\nconvert -size 100x60 xc: -stroke Blue -fill DodgerBlue -strokewidth 2 \\  -draw \u0026#34;path \u0026#39;M 50,30 m 0,25 a 1,1 0 0,0 0,-50 a 1,1 0 1,0 0,50\u0026#39;\u0026#34; \\  circle_path.gif 只有最初的绝对移动 \u0026lsquo;M\u0026rsquo; 是用来定义中心的，接下来的路径组件中的 \u0026lsquo;25\u0026rsquo; 和 \u0026lsquo;50\u0026rsquo; 是定义相对于这个中心的圆的半径和直径。\n 在IM v6.4.3-5之前，相对移动SVG路径项 \u0026lsquo;m\u0026rsquo; 是被破坏的。 如果您的IM比这更早，圆可能只显示为一个像素。您可以通过将上面的 \u0026lsquo;m\u0026rsquo; 替换为 \u0026lsquo;l\u0026rsquo; 来修复旧版本的问题。\n Fred Weinhaus 添加了以下贝塞尔圆的方法。它非常接近真实的圆（虽然不精确），并且需要进行浮点计算。\nr=25; cx=50; cy=30; x1=25; x2=75; # = cx ± radius y1=-3.25; y2=63.25; # = cy ± radius*1.275 convert -size 100x60 xc: -stroke Purple -fill Violet -strokewidth 2 \\  -draw \u0026#34;bezier $x1,$cy$x1,$y1$x2,$y1$x2,$cy\u0026#34; \\  -draw \u0026#34;bezier $x1,$cy$x1,$y2$x2,$y2$x2,$cy\u0026#34; \\  circle_bezier.gif 如果画一个精确的圆并不重要，你可以使用这个4 Bezier段 SVG 路径，它只使用圆的X和Y边界进行计算。\nr=25; cx=50; cy=30; x1=25; x2=75; # X bounds = cx ± radius y1=5; y2=55; # Y bounds = cy ± radius convert -size 100x60 xc: -stroke Tomato -fill Gold -strokewidth 2 \\  -draw \u0026#34;path \u0026#39;M $cx,$y1Q $x1,$y1$x1,$cyT $cx,$y2$x2,$cy$cx,$y1z\u0026#39;\u0026#34; \\  circle_bezier_path.gif 如果你喜欢一个完全相对于中心起点绘制的，你可以使用这种技术。只使用半径值，使其生成简单，只使用 API 中的字符串函数。\nconvert -size 100x60 xc: -stroke Orange -fill LemonChiffon -strokewidth 2 \\  -draw \u0026#34;path \u0026#39;M 50,30 m 0,25 q 25,0 25,-25 t -25,-25 -25,25 25,25 z\u0026#39;\u0026#34;\\  circle_bezier_path_rel.gif 你能想到其他画圆的方法吗？\n绘制箭头-定位、旋转和缩放符号 使用上述技术，你可以创建一个特殊的符号，如箭头，你可以定位，使其点在线的最末端，并画在它上面。如果你画的箭头后的线（典型的情况），那么箭头将被绘制在该行的顶部。\n然而，他们有三种类型的箭头，可以定义，每个类型的定义在不同的方式取决于它的使用。\n 测量时，你只是想用箭头头标记线的两端，以指示一些工程图中的测量极限。非常简单。 矢量，显示一些数值的方向和强度。例如在天气风图中。需要一个尾巴，0,0点就是尾巴的末端。通常情况下，这样的向量会形成一个大网格。 指标，指出一些细节。对于这个0,0点可能应该是箭尖，或者是箭头本身前面的一些距离。  测量箭头 简单地在一条线的末端添加一个箭头是比较容易做到的。基本上，您可以创建一个 \u0026lsquo;arrow head\u0026rsquo; 符号，并将其画在正确的位置。\n例如\u0026hellip;\narrow_head=\u0026#34;l -15,-5 +5,+5 -5,+5 +15,-5 z\u0026#34; convert -size 100x60 xc: -draw \u0026#39;line 10,30 80,30\u0026#39; \\  -draw \u0026#34;stroke blue fill skyblue path \u0026#39;M 80,30 $arrow_head\u0026#39; \u0026#34; \\  arrow_horizontal.gif 请注意，我画的符号，使其起点是线的最末端。这样一来，它就可以在之前画好的线上面向后画，形成一个非常漂亮的整齐的符号。\n箭头却有一个相关的方向。你可以在许多不同的角度创建大量的箭头定义，许多程序都这样做。但是既然箭头是一个矢量，那么为什么不把箭头作为一个矢量进行旋转呢。IM绘图命令内置了绘图旋转（Canvas Warping），所以让我们使用它们。\n这样做还有一个好处，就是把位置从箭头头的 path 定义中移出来，让你把整个路径指定为 constant\u0026hellip;\narrow_head=\u0026#34;path \u0026#39;M 0,0 l -15,-5 +5,+5 -5,+5 +15,-5 z\u0026#39;\u0026#34; convert -size 100x60 xc: -draw \u0026#39;line 25,55 70,10\u0026#39; \\  -draw \u0026#34;stroke blue fill skyblue translate 70,10 rotate -45 $arrow_head\u0026#34; \\  arrow_rotate.gif 如果你喜欢改变箭头的大小，可以在旋转后增加一个 scale 绘制选项。\narrow_head=\u0026#34;path \u0026#39;M 0,0 l -15,-5 +5,+5 -5,+5 +15,-5 z\u0026#39;\u0026#34; convert -size 100x60 xc: -draw \u0026#39;line 25,55 70,10\u0026#39; \\  -draw \u0026#34;stroke blue fill skyblue translate 70,10 rotate -45 scale 2,2 $arrow_head\u0026#34; \\  arrow_scale.gif 请注意，它是如何放大离开箭头的\u0026quot;尖端\u0026rdquo;，你指定的地方。这是处理箭头的一个非常重要的方面，因为它是唯一的终点，和角度的线，你正在添加箭头的事项。\ntransforms 的顺序是很重要的，而且实际上与它们实际被处理的顺序是相反的。也就是先将比例尺应用于座标，然后是旋转，再是平移。如果座标变换不是按照这个顺序进行的，我们最终也会对箭头的最终位置进行缩放，而不是我们期望的位置。\n另外由于比例尺有两个数字，而原来的箭头头符号是水平设计的（角度为零），所以可以分别将箭头的宽度与高度进行比例。同时注意笔画宽度也随着箭头的大小而缩放，保持一致。\narrow_head=\u0026#34;path \u0026#39;M 0,0 l -15,-5 +5,+5 -5,+5 +15,-5 z\u0026#39;\u0026#34; convert -size 100x60 xc: -draw \u0026#39;line 25,55 70,10\u0026#39; \\  -draw \u0026#34;stroke blue fill skyblue translate 70,10 rotate -45 scale 2,1 $arrow_head\u0026#34; \\  arrow_scale_aspect.gif 现在，当你在画布上翘起一个个箭头时，也许还有许多其他的绘画操作，你可能喜欢在一次 [\u0026quot;-draw\u0026quot;](https://imagemagick.org/Usage/option_link.cgi?draw) 操作中把它们全部画完。说要画线，然后在两端添加箭头，需要不同的颜色、位置、旋转，甚至可能是不同的比例。这意味着我们需要将画布翘曲的范围限制在每个单独箭头头的绘制上。如果你不限制范围，你可能会在以后开始影响到其他后面的绘制操作，永远不能很确定你生成的是什么。\n为了限制翘曲的范围（以及所有其他的绘图属性），您将涉及到的部分包裹在一个 graphic-context\u0026hellip;\narrow_head=\u0026#34;path \u0026#39;M 0,0 l -15,-5 +5,+5 -5,+5 +15,-5 z\u0026#39;\u0026#34; convert -size 100x60 xc: \\  -draw \u0026#34;stroke black fill none path \u0026#39;M 10,40 A 50,50 0 0,1 90,40\u0026#39; push graphic-context stroke blue fill skyblue translate 10,40 rotate 135 $arrow_headpop graphic-context push graphic-context stroke firebrick fill tomato translate 90,40 rotate 45 $arrow_headpop graphic-context \u0026#34; \\  arrow_context.gif push 主要是将当前所有的绘图属性保存起来，以备将来使用，而 pop 则恢复这些属性，用之前保存的设置替换任何设置（颜色、扭曲、位置等）。这意味着在 \u0026lsquo;popping\u0026rsquo; 之后，\u0026lsquo;canvas warp\u0026rsquo; 会被取消，画图会回到修改之前的状态。\n上述技术只是生成箭头的一种方法，在绘制箭头作为测量距离的一部分时，如在技术图纸中，是一种很好的方法。\n矢量箭头 如前所述，矢量既显示方向，又显示某个数值的强度。这意味着箭头的长度是可变的，箭头头可以在任何位置远离向量的起点。\n现在，你可以做一些沉重的数学计算的位置，箭头头应该是地方给定的向量的长度和角度，但他们是一个更好的方法，这让 ImageMagick 为你做这些计算。\n解决的办法是在 Warped Canvas Space 中画一条长度合适的水平线作为向量长度。当这条线画好后，只需将绘图空间再次转换到线的末端，而画布仍然是\u0026quot;扭曲的\u0026rdquo;(warped)。现在你的位置已经正确了，只要正确的旋转就可以像正常的那样画出矢量的 'arrow head'。\n例如，这里我以-35度角生成一个70像素长的矢量。\nvector_head=\u0026#34;path \u0026#39;M 0,0 l -15,-5 +5,+5 -5,+5 +15,-5 z\u0026#39;\u0026#34; indicator=\u0026#34;path \u0026#39;M 10,0 l +15,+5 -5,-5 +5,-5 -15,+5 m +10,0 +20,0 \u0026#39;\u0026#34; convert -size 100x100 xc: \\  -draw \u0026#34;stroke black fill none circle 20,50 23,50 push graphic-context stroke blue fill skyblue translate 20,50 rotate -35 line 0,0 70,0 translate 70,0 $vector_headpop graphic-context push graphic-context stroke firebrick fill tomato translate 20,50 rotate 40 $indicatortranslate 40,0 rotate -40 stroke none fill firebrick text 3,6 \u0026#39;Center\u0026#39; pop graphic-context \u0026#34; \\  arrow_with_tails.gif 指示箭头 在上面我还演示了一个指示箭头，指向之前矢量箭头的起点。\n然而我没有像之前那样画箭头，而是将它创建为一个反向的箭头符号，它的起始点距离原点（或起始点）10像素。这是一个符号位于我想要指示的位置，所以我实际上并不希望箭头直接在那个位置上面，而是离它稍微远一点。\n现在，虽然指示符比向量处理起来更简单，通常不需要可变长度，但你通常要在指示符的远端添加文字来指定指示的内容。和之前一样，计算这个位置可能很困难，何必呢。\n文字定位的解决方法也和向量一样。保留原来用于绘制指示箭头的翘曲空间，并将原点转换到该箭头的尾端（在翘曲空间中水平40像素）。现在我们已经重新定位了，我们可以围绕这个新的位置解除扭曲，这样你就可以像正常的那样绘制文本（有轻微的偏移）。\n不幸的是，虽然默认的文字对齐方式是\u0026quot;左\u0026rdquo;，但目前你不能在 MVG 中指定文字对齐方式，作为重力的单独设置。如果这是一个问题，请在 IM bugs 论坛上提出请求，希望文本对齐（作为独立于重力定位）能够成为现实，尤其是它实际上是 SVG 规范的一部分。\n绘制对象 宽广的色彩笔触 你不需要用路径或轮廓完全封闭填充区域，就能创造出各种形状。使用非常大和宽的笔触，你可以在画布上生成大面积的颜色和色块。\n例如，一个宽阔的笔触椭圆弧形可以生成一个漂亮的颜色区域，我实际上已经看到用于创建海报。\nconvert -size 100x100 xc: -fill none -stroke powderblue \\  -draw \u0026#39;stroke-width 70 ellipse -30,0 90,90 10,50\u0026#39; \\  -rotate 180 arc_background.gif 或者你可以生成一个小丑相当复杂的笑容。\nconvert -size 100x100 xc: \\  -draw \u0026#39;fill none stroke-linecap round stroke-width 40 stroke tomato ellipse 50,0 70,70 65,115 stroke-width 2 stroke black ellipse 50,0 70,70 60,120 stroke-width 40 stroke palegreen line 50,40 50,40.01\u0026#39; clown.gif 你能想出什么办法？请告诉我们。\n圆柱体 在 IM 论坛的讨论中，有一个关于使用 ImageMagick 绘制命令绘制圆柱体（特别是阴影圆柱体）的重要讨论。\n绘制圆柱体的诀窍是绘制 roundrectangle 原语，使其末端形成椭圆形。也就是说，如果圆柱体的宽度为 50 像素，则将矩形的角分别舍去 25 和 12 像素。这就是矩形宽度的一半，然后再减半。\n这样，一个圆柱体就变成了两个相互叠加的圆角矩形。第二个颜色填充的 'end oval' 的大小正好是两个角的两倍。例如\u0026hellip;\nconvert -size 60x100 xc:white -stroke snow4 \\  -fill chartreuse3 -draw \u0026#39;roundrectangle 5,5 55,95 25,12\u0026#39; \\  -fill chartreuse2 -draw \u0026#39;roundrectangle 5,5 55,29 25,12\u0026#39; \\  cylinder.gif 通过将第一种填充色替换为渐变色（使用记忆中的平铺技术），你可以让圆柱体看起来更像3D\u0026hellip;\u0026hellip;。\nconvert -size 60x100 xc:white -stroke snow4 \\  \\( -size 1x60 gradient:chartreuse1-chartreuse4 -rotate -90 \\  -write mpr:shading +delete \\) \\  -tile mpr:shading -draw \u0026#39;roundrectangle 5,5 55,95 25,12\u0026#39; +tile \\  -fill chartreuse2 -draw \u0026#39;roundrectangle 5,5 55,29 25,12\u0026#39; \\  cylinder_shade.gif 通过慢慢完善圆柱体的绘制（如IM论坛中讨论的那样），你可以走很长的路来生成非常复杂和具有视觉吸引力的圆柱体。这包括增加封闭半透明玻璃圆柱体、阴影效果和标签。\n该讨论的最终结果是一个脚本 \u0026ldquo;cylinder_bar\u0026quot;，生成一个圆柱体百分比条\u0026hellip;\u0026hellip;\ncylinder_bar 95 cylinder_95.png 该脚本可以生成任何尺寸的图像，根据该尺寸和脚本顶部定义的其他设置适当调整所有参数。还包括 glass thickness 的概念，在一个封闭的半透明玻璃圆柱体和内部的彩色圆柱体之间创造一个间隙。\n请注意圆柱体非常微妙的阴影，特别是当绿色圆柱体的末端与玻璃圆柱体的末端重叠时。只要稍加预想，就能做出惊人的效果。\n在文字串中绘制特殊字符 引号还是反斜杠？ 人们在使用 -draw 时遇到的最大的问题之一是绘制字符，这些字符对 UNIX shell 和 DOS 命令行甚至其他语言如 C、Perl、PHP、R 或 Visual Basic 都有特殊意义。\n在这方面最大的罪魁祸首是两种类型的引号字符，以及变量替换字符，如美元 '$' 和 shell 和 ImageMagick 的转义字符，反斜杠 '\\'。\n基本上作为 -draw 的MVG参数需要加引号，而里面的 'text' 字符串参数也可能需要一些额外的引号。\n为了解决这个问题，用户通常会使用两个不同的引号字符，一个用于 shell，另一个用于 MVG 文本字符串。\n-draw \u0026#39;... text 0,0 \u0026#34;string\u0026#34; ...\u0026#39; 需要注意的是，对于 windows 用户来说，这是唯一真正的选择，它有自己的引号问题和方法。或者他们会交换引号，用\u0026hellip;\n-draw \u0026#34;... text 0,0 \u0026#39;string\u0026#39; ...\u0026#34; 它允许你包含 shell 变量替换(使用 '$' 而不进行转义。)\n选择正确的形式可以解决大多数问题，但有些字符仍然存在困难，每个解决方案都取决于你到底使用哪一组引号，因为它们也定义了特殊字符应该如何转义。\n以下是四种情况下的引号，以及特殊字符的处理\u0026hellip;\n 对 shell 参数使用单引号，对 MVG 文本字符串周围使用双引号。  处理绘制文本字符串的最简单的技术是为包装 shell 参数使用单引号。然而，这意味着要在绘制的字符串中包含一个撇号，你需要离开 shell 的\u0026quot;单引号模式\u0026rdquo;，并在 shell 的单引号之外提供撇号。\n例如，这里是如何处理我提到的四个特殊字符。\nconvert -size 250x50 xc:none -box white -pointsize 20 -gravity center \\  -draw \u0026#39;text 0,0 \u0026#34; \u0026#39;\\\u0026#39;\u0026#39; \\\u0026#34; $ \\\\ \u0026#34; \u0026#39; \\  -trim +repage text_special_sd.gif 请注意，由于美元符号不需要转义，你也不能用它来替代 shell 变量的内容。\n重要的是要记住，反斜杠是IM绘图字符串处理的唯一特殊字符。同时，它存在的原因也纯粹是为了让你可以转义任何\u0026quot;IM 绘制字符串引号\u0026rdquo;，比如我们在上面使用的双引号。除此以外，其他所有的怪异都是由 UNIX 命令行 shell 引起的，而不是 IM。\nPC-DOS 有它自己的怪异之处，我希望在使用环境中的IM时，能对特殊字符进行转义。\n 在 shell 参数中使用双引号。 在 MVG 文本字符串周围使用单引号。  如果你确实想在绘制的字符串中插入一个 \u0026lsquo;shell variable\u0026rsquo;，那么你将不得不在 shell 参数的外面使用双引号。这使得整个事情变得更加复杂，因为你失去了 shell 的保护，你现在不仅要转义美元 '$' 符号，而且还要转义反斜杠 '\\'。\n另一方面，shell 将不需要使用单引号字符作为它的参数结束限制字符，所以这方面被简化了。让我们总结一下我们的特殊字符短名单的结果。\nconvert -size 250x50 xc:none -box white -pointsize 20 -gravity center \\  -draw \u0026#34;text 0,0 \u0026#39; \\\\\u0026#39; \\\u0026#34; \\$ \\\\\\\\ \u0026#39; \u0026#34; \\  -trim +repage text_special_ds.gif 请注意，如果你想画一个反斜线本身，MVG 文本字符串需要将反斜线加倍（如前面的例子），但是 shell 本身也需要将每个反斜线加倍，总共产生四个反斜线才能产生一个这样的字符。\n这种翻倍很快就会让人不知所措，需要大量的反斜杠才能达到你想要的效果。只要采取的是慢慢的、简单的方法，你就会针对自己的情况想出办法。\n 使用单引号进行 shell 论证。 与 MVG 文本字符串周围的单引号。  最后，让我们总结一下最后两种引号组合。我将让你去弄清楚它们是如何被 shell 和 MVG 解码的。\nconvert -size 250x50 xc:none -box white -pointsize 20 -gravity center \\  -draw \u0026#39;text 0,0 \u0026#39;\\\u0026#39;\u0026#39; \\\u0026#39;\\\u0026#39;\u0026#39; \u0026#34; $ \\\\ \u0026#39;\\\u0026#39;\u0026#39; \u0026#39; \\  -trim +repage text_special_ss.gif  在shell参数中使用双引号。  在 MVG 文本字符串周围加上双引号。\nconvert -size 250x50 xc:none -box white -pointsize 20 -gravity center \\  -draw \u0026#34;text 0,0 \\\u0026#34; \u0026#39; \\\\\\\u0026#34; \\$ \\\\\\\\ \\\u0026#34;\u0026#34; \\  -trim +repage text_special_dd.gif 正如你所看到的，来自命令行的 -draw 参数既要处理命令行 shell，也要处理 MVG 文本字符串中的反斜杠和引号转义。其结果可能会让人感到困惑和棘手。只要记住，shell 对这两种引号的处理方式不同，而 MVG 文本字符串则不同。\n当然，在复杂的脚本中，更好的方法可能是完全避免 shell 和任何脚本问题。你可以通过读取 MVG 绘图文件中的 -draw 参数来实现。\n-draw @drawfile.mvg 当然，你仍然需要对你使用的任何引号字符进行反斜杠处理，以及对文本中的任何反斜杠进行处理。然而，这比起同时处理 shell 自己的引号和转义系统要简单得多。\nconvert -size 500x50 xc:lightblue -font Candice -pointsize 36 \\  -gravity center -draw @text_quotes.mvg text_quotes.gif 第一张图片来自我使用的一个 \u0026ldquo;MVG\u0026rdquo; 文本文件。它不包含转义符或引号。因此，只有 MVG 引号和转义符是存在的。\n请注意，在上面的例子中，如果我对 MVG 文本字符串使用了单引号，唯一的变化是我需要对字符串中的单引号字符进行反斜杠处理，而不是双引号字符。\n关于百分比字符 最后一点是关于 \u0026quot;-draw text\u0026quot; 操作符中的特殊 escape 字符。百分号字符 \u0026quot;%\u0026quot; 应该\u0026quot;按原样\u0026quot;绘制。你不需要做任何特殊的操作来绘制它们。如果它们不能\u0026quot;按原样\u0026quot;绘制，那么你的IM版本较旧，应该尽快升级。\n 直到IM 6.2.4版本，\u0026quot;%\u0026quot; 字符被用作转义字符，在绘制的文本字符串中包含额外的图像信息。现在不再是这样了，因为当SVG图像也试图绘制百分数字符时，这种转义符是混乱和不正确的。 百分号 \u0026ldquo;转义符 \u0026ldquo;的使用（以及\u0026rdquo;/n \u0026ldquo;换行符）被认为与 -draw 操作符和MVG格式处理SVG图像格式的预期用途不兼容。因此，从 IM 6.2.4 版本开始，%转义就不适用了，反斜杠只能转义自己和周围的引号。\n convert -size 250x50 xc:none -box white -pointsize 20 -gravity center \\  -draw \u0026#39;text 0,0 \u0026#34;%w\\n%h\u0026#34;\u0026#39; -trim +repage text_escapes.gif 关于\u0026quot;百分比错误\u0026quot;的更多细节，以及在旧版 ImageMagick 中使用 -draw 时避免该错误的方法，请参见 Drawing a Percent Bug 页面。\n用注释代替绘制 避免这类问题的较好方法是使用 [-annotate](https://imagemagick.org/Usage/option_link.cgi?annotate) 而不是 draw 来绘制文本。这个操作符是 draw 操作符的一个封装器，可以使用 draw 的所有功能，但形式更简单。\n基本上这个操作符只需要一组引号（对于 shell）。这使得处理特殊字符变得更加简单。\n不幸的是，虽然你不再需要为 IM 转义引号，但你现在有百分比转义，如 '@' 文件读取，'\\n' 换行，以及其他百分号转义扩展。\n例如，使用单引号\u0026hellip;\nconvert -size 200x50 xc:none -box white -pointsize 20 -gravity center \\  -annotate 0 \u0026#39;\\@ \u0026#39;\\\u0026#39;\u0026#39; \u0026#34; $ \\\\ %% \u0026#39; \\  -trim +repage annotate_s.gif 而对于双引号\u0026hellip;\nconvert -size 200x50 xc:none -box white -pointsize 20 -gravity center \\  -annotate 0 \u0026#34;\\@ \u0026#39; \\\u0026#34; \\$ \\\\\\\\ %% \u0026#34; \\  -trim +repage annotate_d.gif 然而，如果你使用 '@' 转义符从文件中读取字符串，所有的注释引号和转义符将被完全忽略。\n例如，我们在这里包含了一个图像的宽度和高度的信息!\nconvert -size 200x50 xc:none -box white -pointsize 20 -gravity center \\  -annotate 0 \u0026#39;%w\\n%h\u0026#39; -trim +repage annotate_percents.gif 然而，当从文件中读取注释字符串时，所有的转义都会被完全忽略。\necho -n \u0026#39;@ %w\\n%h\u0026#39; |\\  convert -size 200x50 xc:none -box white -pointsize 20 -gravity center \\  -annotate 0 \u0026#39;@-\u0026#39; -trim +repage annotate_file.gif 更多信息请参见 Annotate Text Drawing Operator，特别是 Annotate Escape Characters。\nIM 和 SVG 处理 SVG 输入驱动。RSVG 与 MSVG 处理实际的 SVG 图像格式是一项非常复杂的工作。引擎需要处理 SVG\u0026ndash;可缩放矢量图形文档所定义的所有方面。这需要大量的编程工作和时间。\n因此，ImageMagick 在 SVG 格式图像的处理上提供了两种方法。第一种是使用一个开源的 RSV G库，将 SVG 格式转换成 IM 没有问题的光栅图像。这个引擎几乎在 SVG 处理的所有方面都是完整的。\n第二种方法是IM尝试将 SVG 转换为 MVG，使用一个名为 MSVG 的内置IM方法。MSVG 试图将SVG图像转换成IM的 -draw 运算符 \u0026ldquo;MVG\u0026quot;绘图语言。绘制 MVG 的很多功能都是专门为此而创建的。不幸的是，虽然基本的线条绘制和着色功能是存在的，但它远不是一个完整的 SVG 转换器。\n你可以通过使用特殊的输入格式 \u0026ldquo;MSVG:\u0026quot;（IM v6.3.4新增）读取 SVG 图像来强制使用内部的 MSVG 转换器。但如果 RSVG 库存在，大多数 ImageMagick 将使用它来渲染 SVG 图像。\n要找出你的 IM 会做什么，请用\u0026hellip;\nconvert -list format | grep SVG 从括号中的 \u0026ldquo;RSVG\u0026rdquo; 可以看出，我自己的 IM 将使用我电脑上的 RSVG 库，并给出了版本。\n在这里，我\u0026quot;绘制\u0026quot;了一个小的、手工制作的 SVG 图像 \u0026ldquo;diagonal.svg\u0026quot;（由论坛用户 penciledin 贡献），它在白色背景上创建了一个简单的对角线渐变的矩形。\nconvert diagonal.svg diagonal_rsvg.gif 完美的。一个正确的对角线梯度被生成。\n然而，如果你使用内部的 MSVG（如果没有 RSVG 库，则为默认值）来渲染\u0026hellip;\nconvert msvg:diagonal.svg diagonal_msvg.gif 正如你所看到的，内部 MSVG 转换失败，返回的是垂直梯度而不是对角线。\nconvert msvg:diagonal.svg diagonal.mvg 你大概可以看到MSVG转换器是如何尝试将 SVG 转换为 MVG 绘图命令的。\n当前内部 MSVG 已知失败的地方包括\u0026hellip;\n 非垂直梯度(没有转换到新的MVG梯度处理) 沿着弯曲路径的文字 文本对齐（与重力分开）。  然而大多数基本的绘图动作都被处理了。\n还请记住，MVG 语言实际上可以处理 SVG 不能处理的事情，包括使用重力来定位图像和文本。重力不是 SVG 规范的一部分，尽管它是 IM 文本和字体处理的一个组成部分。\n另外请记住，MVG 没有 SVG 所拥有的容器机制。内部的 MSVG 转换器用图形上下文的推送和弹出代替了 XML 容器（见上面的 MVG 输出），效果是一样的。 SVG 的设置\nSVG 图像格式是一种矢量格式（请参见关于矢量图像格式的一句话），因此图像通常没有一个默认的\u0026quot;大小\u0026rdquo;，而是以特定的  \u0026quot;-density\u0026quot; 来 \u0026ldquo;绘制\u0026quot;或\u0026quot;渲染\u0026rdquo;，就像 postscript 一样（默认密度是72dpi）。\n另外，如果 SVG 没有 \u0026ldquo;绘制\u0026quot;背景，您可以通过使用 -background 设置指定要使用的背景颜色。\n例如这里是另一个小的 SVG 图像 \u0026ldquo;home.svg\u0026rdquo;，它已经使用3种不同的密度，3种不同的背景进行\u0026quot;渲染\u0026rdquo;，包括一个透明的背景。\nconvert -density 36 home.svg home_1.gif convert -background skyblue home.svg home_2.gif convert -density 144 -background none home.svg home_3.png 请注意，我使用了 PNG 格式的图片来制作上面例子中较大的透明背景版本。由于半透明的边缘像素，这产生的图像比 GIF 图像格式产生的图像更干净。当最终图像中涉及到透明度时，总是建议使用 PNG。\n 我发现有些 SVG 图像不能缩放。也就是说，它们被定义为\u0026quot;像素\u0026rdquo;，而不是现实世界中的长度，如\u0026quot;点\u0026rdquo;、\u0026ldquo;英寸\u0026quot;或\u0026quot;毫米\u0026rdquo;。因此，虽然 -density 设置可能会改变图像的整体大小（以现实世界为单位），但 \u0026ldquo;像素 \u0026ldquo;的大小不会改变，因此图像本身的大小也不会改变。然而这样的SVG图像是相当罕见的。\n 更糟糕的是，一些 SVG 图像使用了\u0026quot;像素\u0026quot;和 \u0026ldquo;点\u0026quot;的混合测量，除非作者故意这样做，否则你可能会得到一个真正的混乱，你可以尝试使用不同的密度，而不是作者想要的。幸运的是，这种情况更加罕见。\n一个简单的解决方法就是将 SVG 中所有的 \u0026ldquo;像素\u0026quot;单位改成\u0026quot;点\u0026rdquo;，但也不能盲目的使用，以防故意使用\u0026quot;像素\u0026rdquo;。\nSVG 输出处理 从 IM v6.4.2 开始，IM 可以将任何位图图像转换为 SVG 矢量图! 转换并不总是成功的，但较大和/或较简单的图像（如位图蒙版）会转换得很好。\n例如，我在这里将一个可怕的位图形状转换为SVG图像，然后再将其转换回来，以便将位图平滑为一个适当的反锯齿形状。\nconvert -pointsize 72 -font Candice label:A -threshold 50% \\  -trim +repage -bordercolor white -border 5x5 A.gif convert A.gif A.svg convert A.svg A.png -\u0026gt; 然而，要使之工作，必须安装\u0026quot;开发\u0026quot;的 AutoTrace 库，并在IM中配置 -with-autotrace 开关。\n如果没有安装 AutoTrace 库并将其编译到 IM 中，那么生成的 SVG 输出将是大量的单像素圆圈，生成一个二进制结果，而不是一个平滑的 SVG 轮廓图像。这样的图像比较巨大，通过 SVG 渲染往往需要很长的时间来渲染。\n其实需要一种更好的默认栅格到矢量的技术，可能会使用 Morphology skeletion 和 MAT 技术。\n有一个 autotrace: 输入代理，来\u0026quot;平滑输入位图图像\u0026rdquo;，直接使用 \u0026ldquo;autotrace\u0026rdquo; 命令一次性完成上述所有步骤。然而我最后一次看到这个代理已经消失了。\n你应该这样使用它\u0026hellip;\nconvert autotrace:A.gif A_traced.png 当然这并不能让你从 \u0026ldquo;autotrace\u0026rdquo; 命令中得到 SVG 输出，只是通过 SVG 过滤输入的图像来平滑它。\n作为一种替代方法，你可以直接使用 \u0026ldquo;autotrace\u0026rdquo; 命令，如 Raster to Vector Edging 和 Skeleton using Autotrace 示例所示。\n你也可以看看 cancerberosgx 的结果，在生成 SVG 图像，他研究了转换照片的解决方案。\n非IM矢量图形编辑器 ImageMagick 是一个像素数组处理器，它一般不会保存矢量图像（\u0026lsquo;MVG\u0026rsquo; 是唯一的例外），只会读取图像并将其转换为像素数组。\n其他像素图像编辑器也是如此，如 Gimp、Photoshop 等。\n对于编辑和处理基于矢量的图像，可以使用以下程序，如\n Sodipodi 基于SVG的矢量图形编辑器。 Xfig 简单但非常好的矢量对象编辑器。(适用于标志、地图和在页面上排列照片) Dia AutoTrace 将位图数组中的形状转换为矢量轮廓。 Sketch 基于 Python 的曲线文字矢量编辑器。  当然，这不是一个完整的列表。即使是许多文字处理程序，如 OpenOffice、Word 和 TeX，一般都有各种简单的，虽然往往难以使用的对象编辑器。\n然而对于一般将矢量图形格式转换为不同的矢量格式，不要使用 ImageMagick。ImageMagick 本质上是一个光栅图像或位图图形转换器和操作器，而且永远都是这样。更多信息请参见 A word about Vector Image formats。\n 创建于: 24 March 2004 更新于: 14 March 2011 作者: Anthony Thyssen, Anthony.Thyssen@gmail.com Examples Generated with: [version image] URL: http://www.imagemagick.org/Usage/draw/  ","permalink":"https://ohmyweekly.github.io/notes/imagemagick-drawing/","tags":["imagemagick","image"],"title":"ImageMagick - Drawing"},{"categories":["programming"],"contents":"https://imagemagick.org/Usage/transform/index.html\n","permalink":"https://ohmyweekly.github.io/notes/imagemagick-transform/","tags":["imagemagick","transform"],"title":"ImageMagick - Transform"},{"categories":["programming"],"contents":"几个有意思的 ImageMagick 脚本 http://www.fmwconcepts.com/imagemagick/randomclipart/index.php http://www.fmwconcepts.com/imagemagick/sketching/index.php http://www.fmwconcepts.com/imagemagick/sphericalpano2cube/index.php http://www.fmwconcepts.com/imagemagick/surroundblur/index.php http://www.fmwconcepts.com/imagemagick/transfercolor/index.php http://www.fmwconcepts.com/imagemagick/colorcells/index.php\n给图片添加网格线 ./glasseffects -e none -k simple -o \u0026#39;#FFDAB9\u0026#39; -t single -m overlay -c 200 -w 1 -s 20 -r 10 in.jpeg out.jpg ./grid -o 0.3 -s 200 -c white in.jpeg out.jpeg 折叠图片 ./picturefold -o 80 -h 50 in.jpeg out.jpeg 给图片添加心形图片 ./randomclipart -d \u0026#34;64,16\u0026#34; -a \u0026#34;45,-45\u0026#34; -p 50 -c random in.jpeg heart.png out.jpeg 给图片分成带颜色的方块 ./colorcells -n 8,8 -d 100,100 in.jpeg out.jpeg ","permalink":"https://ohmyweekly.github.io/notes/imagemagick-notes/","tags":["imagemagick","image"],"title":"ImageMagick 笔记"},{"categories":["ffmpeg"],"contents":"概要 ffmpeg [global_options] {[input_file_options] -i input_url} ... {[output_file_options] output_url} ... 描述 ffmpeg 是一款非常快速的视频和音频转换器，它还可以从实时音频/视频源中抓取。它还可以在任意采样率之间进行转换，并通过高质量的多相滤波器在飞行中调整视频大小。\nffmpeg 从任意数量的输入\u0026quot;文件\u0026rdquo;（可以是常规文件、管道、网络流、抓取设备等）中读取，由 -i 选项指定，并写入任意数量的输出\u0026quot;文件\u0026rdquo;，由一个普通的输出 url 指定。在命令行中找到的任何不能被解释为选项的东西都被认为是一个输出 url。\n原则上，每个输入或输出 url 可以包含任意数量的不同类型的流（视频/音频/字幕/附件/数据）。允许的流的数量和/或类型可能受到容器格式的限制。选择哪些输入的流将进入哪些输出，可以自动完成，也可以使用 -map 选项完成（请参见流选择章节）。\n要在选项中引用输入文件，您必须使用它们的索引（基于 0）。例如，第一个输入文件是 0，第二个是 1，等等。同样，一个文件中的流也用它们的索引来表示。例如，2:3 指的是第三个输入文件中的第四个流。也请参见流指定符一章。\n一般来说，选项会应用到下一个指定的文件。因此，顺序是很重要的，您可以在命令行中多次出现同一个选项。每次出现都会被应用到下一个输入或输出文件。这条规则的例外是全局选项（例如 verbosity level），应该先指定。\n不要混合输入和输出文件-首先指定所有输入文件，然后再指定所有输出文件。也不要混合属于不同文件的选项。所有选项只适用于下一个输入或输出文件，并在文件之间被重置。\n 要将输出文件的视频比特率设置为 64 kbit/s:  ffmpeg -i input.avi -b:v 64k -bufsize 64k output.avi  要强制输出文件的帧率为24帧/秒:  ffmpeg -i input.avi -r 24 output.avi  强制输入文件的帧率（仅对原始格式有效）为1帧/秒，输出文件的帧率为24帧/秒:  ffmpeg -r 1 -i input.m2v -r 24 output.avi 原始输入文件可能需要格式选项。\n详情描述 ffmpeg 中每个输出的转码过程可以用下面的图来描述:\n _______ ______________ | | | | | input | demuxer | encoded data | decoder | file | ---------\u0026gt; | packets | -----+ |_______| |______________| | v _________ | | | decoded | | frames | |_________| ________ ______________ | | | | | | | output | \u0026lt;-------- | encoded data | \u0026lt;----+ | file | muxer | packets | encoder |________| |______________| ffmpeg 调用 libavformat 库（包含 demuxers）来读取输入文件，并从其中获取包含编码数据的数据包。当有多个输入文件时，ffmpeg 试图通过跟踪任何活动输入流上的最低时间戳来保持它们的同步。\n编码后的数据包会被传递给解码器（除非为流选择了 streamcopy，详见下文）。解码器产生未压缩的帧（原始视频/PCM音频/\u0026hellip;），这些帧可以通过过滤进一步处理（见下一节）。过滤后，这些帧被传给编码器，编码器对它们进行编码并输出编码数据包。最后，这些帧被传给 muxer，muxer 将编码后的数据包写入输出文件。\n滤波 在编码之前，ffmpeg 可以使用 libavfilter 库中的过滤器处理原始音频和视频帧。ffmpeg 区分了两种类型的滤波图：简单和复杂。\n简单的滤波图 简单的滤波图是指那些只有一个输入和输出的滤波图，两者类型相同。在上图中，它们可以通过简单地在解码和编码之间插入一个额外的步骤来表示:\n _________ ______________ | | | | | decoded | | encoded data | | frames |\\ _ | packets | |_________| \\ /||______________| \\ __________ / simple _\\|| | / encoder filtergraph | filtered |/ | frames | |__________| 简单的滤波图是用 per-stream -filter 选项配置的（视频和音频分别用 -vf 和 -af 别名）。例如，一个简单的视频滤波图可以是这样的:\n _______ _____________ _______ ________ | | | | | | | | | input | ---\u0026gt; | deinterlace | ---\u0026gt; | scale | ---\u0026gt; | output | |_______| |_____________| |_______| |________| 请注意，有些滤镜会改变帧的属性，但不会改变帧的内容。例如，上面例子中的 fps 过滤器改变了帧数，但没有触及帧内容。另一个例子是 setpts 过滤器，它只设置了时间戳，而在其他方面没有改变帧的内容。\n复杂的滤波图 复杂的滤波图是那些不能简单地描述为应用于一个流的线性处理链的图。例如，当图形有一个以上的输入和/或输出时，或者当输出流类型与输入不同时，就会出现这种情况。它们可以用下图来表示:\n _________ | | | input 0 |\\ __________ |_________| \\ | | \\ _________ /| output 0 | \\ | | / |__________| _________ \\| complex | / | | | |/ | input 1 |----\u0026gt;| filter |\\ |_________| | | \\ __________ /| graph | \\ | | / | | \\| output 1 | _________ / |_________| |__________| | | / | input 2 |/ |_________| 复杂的滤波图是用 -filter_complex 选项配置的。注意这个选项是全局性的，因为复杂的滤波图，就其本质而言，不能明确地与一个单一的流或文件相关联。\n-lavfi 选项相当于 -filter_complex。\n一个简单的例子是 overlay 滤波器，它有两个视频输入和一个视频输出，其中一个视频叠加在另一个视频上。它的音频对应的是 amix 滤波器。\n流复制 流复制是通过向 -codec 选项提供 copy 参数来选择的模式，它使 ffmpeg 省略了对指定流的解码和编码步骤，因此它只做解复用(demuxing)和混叠(muxing)。它对于改变容器格式或修改容器级元数据非常有用。上面的图，在这种情况下，会简化成这样:\n _______ ______________ ________ | | | | | | | input | demuxer | encoded data | muxer | output | | file | ---------\u0026gt; | packets | -------\u0026gt; | file | |_______| |______________| |________| 由于不需要解码或编码，所以速度非常快，而且没有质量损失。但是，由于很多因素的影响，在某些情况下可能无法工作。应用过滤器显然也是不可能的，因为过滤器是在未压缩的数据上工作的。\n流选择 ffmpeg 提供了 -map 选项来手动控制每个输出文件的流选择。用户可以跳过 -map 选项，让 ffmpeg 执行自动流选择，如下所述。-vn / -an / -sn / -dn 选项可以分别用来跳过视频、音频、字幕和数据流，无论是手动映射还是自动选择，但那些复杂的滤波图输出的流除外。\n描述： 下面的小节描述了涉及到流选择的各种规则。接下来的例子将展示这些规则是如何在实践中应用的。\n虽然我们尽力准确地反映了程序的行为，但 FFmpeg 仍在不断地开发中，代码可能会在写这篇文章的时候有所改变。\n自动选择流 在没有任何特定输出文件的映射选项的情况下，ffmpeg 会检查输出格式，以检查哪些类型的流可以被包含在其中，即视频、音频和/或字幕。对于每一种可接受的流类型，ffmpeg 将从所有输入中选择一个可用的流。\n它将根据以下标准选择该流:\n 对于视频，它是最高分辨率的流, 对于音频来说，它是拥有最多通道的流, 对于字幕，它是第一个找到的字幕流，但有一个注意事项。输出格式的默认字幕编码器可以是基于文本的，也可以是基于图像的，而且只会选择相同类型的字幕流。  在几个相同类型的流速率相同的情况下，会选择指数最低的流。\n数据流或附件流不会被自动选择，只能使用 -map 来包含。\n手动选择流 当使用 -map 时，只有用户映射的流才会被包含在该输出文件中，下面描述的滤波图输出可能是一个例外。\n复杂的滤波图 如果有任何复杂的滤波图输出流带有未标记的填补(pad)，它们将被添加到第一个输出文件中。如果流类型不被输出格式支持，这将导致一个致命的错误。在没有 map 选项的情况下，包含这些流会导致自动选择流的类型被跳过。如果存在 map 选项，这些滤波图流会被包含在映射流之外。\n带有标签填补的复杂滤波图输出流必须被映射一次，而且是精确地映射一次。\n流处理 流处理是独立于流选择的，下面描述的字幕除外。流处理是通过针对特定输出文件中的流的 -codec 选项来设置的。特别是，编解码器选项是在流选择过程之后由 ffmpeg 应用的，因此不会影响后者。如果没有为某个流类型指定 -codec 选项，ffmpeg 将选择输出文件 muxer 注册的默认编码器。\n字幕存在一个例外。ffmpeg 不会验证指定的编码器是否可以转换所选的流，也不会验证转换后的流是否可以在输出格式中接受。这通常也适用于：当用户手动设置编码器时，流选择过程不能检查编码后的流是否能被混入输出文件中。如果不能，ffmpeg 将中止，所有的输出文件将无法被处理。\n示例 下面的例子说明了 ffmpeg 流选择方法的行为、怪癖和限制。\n它们假设以下三个输入文件:\ninput file 'A.avi' stream 0: video 640x360 stream 1: audio 2 channels input file 'B.mp4' stream 0: video 1920x1080 stream 1: audio 2 channels stream 2: subtitles (text) stream 3: audio 5.1 channels stream 4: subtitles (text) input file 'C.mkv' stream 0: video 1280x720 stream 1: audio 2 channels stream 2: subtitles (image) ","permalink":"https://ohmyweekly.github.io/notes/ffmpeg/","tags":["ffmpeg","tiktok"],"title":"FFmpeg"},{"categories":["ffmpeg"],"contents":"抖音短视频有很多好听的歌, 网易云音乐、QQ音乐和虾米音乐上都没有, 但是可以把视频转成 mp3 格式。 使用 FFmpeg 来搞定。点击抖音上的转发按钮, 如果「保存本地」的按钮不是灰色的, 表示可以下载到手机上。下载完后, 再转发到电脑上, 下载好 ffmpeg:\nbrew install ffmpeg 从视频中采集音频 ffmpeg -i input.mp4 -f mp3 -vn output.mp3 或\nffmpeg -i input.mp4 -q:a 0 -map a output.mp3 或者只截取全部音频中的一小段:\nffmpeg -ss 00:00:03 -t 0:0:14 -i alcastar.mp4 -f mp3 -vn alcastar.mp3 其中 -ss 00:00:03 用于指定要截取的音频的起始时间, 即从第三秒开始截取; -t 0:0:14 用于指定要截取的音频的持续时长, 即截取 14 秒的音频。 -i alcastar.mp4 用于指定输入文件, 即下载好的视频文件; -f mp3 用于指定输出格式为 mp3; -vn 即 no vedio, 即不保留视频; 最后的 alcastar.mp3 是输出文件名。\n去除音频中的静音 ffmpeg -i input.mp3 -af silenceremove=1:0:-50dB output.mp3 给视频添加字幕 ffmpeg -i input.mp4 -i SRT文件 -c copy -c:s mov_text -metadata:s:s:0 language=\u0026lt;language code\u0026gt; output.mp4 移除超过1秒的静止画面 ffmpeg -i in.mp4 -vf \u0026#34;select=\u0026#39;if(gt(scene,0.01),st(1,t),lte(t-ld(1),1))\u0026#39;,setpts=N/FRAME_RATE/TB\u0026#34; trimmed.mp4 将图片和音频合成视频 ffmpeg -loop 1 -i $image -i $audio_file -q:v 1 -c:a copy -shortest $video_file 将多个视频合并成一个 ffmpeg -safe 0 -f concat -i $list_file -c:v libx264 $final list file 的格式是：\nfile './data_1.ts' file './data_2.ts' file './data_3.ts' ","permalink":"https://ohmyweekly.github.io/notes/ffmpeg-notes/","tags":["ffmpeg","tiktok"],"title":"使用 FFmpeg 提取抖音短视频中的音乐"},{"categories":["programming"],"contents":"Dart 生态系统使用包来共享软件，如库和工具。本页告诉你如何创建一个包，重点是最常见的一种包，库包。\n是什么造就了一个库包 下图是最简单的库包的布局:\n一个库的最低要求是\npubspec 文件\n库的 pubspec.yaml 文件和应用程序包的文件是一样的-没有特别的名称来表示这个包是一个库。\nlib 目录\n正如你所期望的那样，库代码存在于 lib 目录下，对其他包是公开的。你可以根据需要在 lib 下创建任何层次结构。按照惯例，实现代码被放在 lib/src 下。lib/src 下的代码被认为是私有的；其他包不应该需要导入 src/...。要使 lib/src 下的 API 公开，您可以从直接位于 lib 下的文件导出 lib/src 文件。\n注意：当没有指定 library 指令时，会根据每个库的路径和文件名为其生成一个唯一的标签。因此，我们建议您从代码中省略 library 指令，除非您计划生成库级文档。\n组织一个库包 当你创建小的、单独的库（称为迷你库）时，库包的维护、扩展和测试是最容易的。在大多数情况下，每个类都应该在自己的迷你库中，除非你有两个类是紧密耦合的情况。\n注意：你可能听说过 part 指令，它允许你将一个库分割成多个 Dart 文件。我们建议你避免使用 part 指令，而是创建迷你库。\n直接在 lib 下创建一个\u0026quot;主\u0026quot;库文件，lib/\u0026lt;package-name\u0026gt;.dart，导出所有的公共 API。这样用户就可以通过导入一个文件来获得一个库的所有功能。\nlib 目录也可能包含其他可导入的、非src的库。例如，也许你的主库可以跨平台使用，但是你创建了单独的库，这些库依赖于 dart:io 或者 dart:html。有些包有单独的库，这些库是要用前缀导入的，而主库不是。\n让我们来看看一个现实世界中的库包的组织： shelf。shelf 包提供了一种使用 Dart 创建 web 服务器的简单方法，它的布局结构是 Dart 库包常用的:\n直接在 lib 下，主库文件 shelf.dart 从 lib/src 导出几个文件:\nexport \u0026#39;src/cascade.dart\u0026#39;; export \u0026#39;src/handler.dart\u0026#39;; export \u0026#39;src/handlers/logger.dart\u0026#39;; export \u0026#39;src/hijack_exception.dart\u0026#39;; export \u0026#39;src/middleware.dart\u0026#39;; export \u0026#39;src/pipeline.dart\u0026#39;; export \u0026#39;src/request.dart\u0026#39;; export \u0026#39;src/response.dart\u0026#39;; export \u0026#39;src/server.dart\u0026#39;; export \u0026#39;src/server_handler.dart\u0026#39;; shelf 包还包含一个迷你库： shelf_io。这个适配器处理来自 dart:io 的 HttpRequest 对象。\n对网络应用的提示: 为了在使用 dartdevc 开发时获得最佳性能，请将实现文件放在 /lib/src 下，而不是放在 /lib 下的其他地方。同时，避免导入 package:package_name/src/... 的文件。\n导入库文件 当从其他包中导入一个库文件时，使用 package: 指令来指定该文件的 URI。\nimport \u0026#39;package:utilities/utilities.dart\u0026#39;; 当从自己的包中导入一个库文件时，当两个文件都在 lib 内，或者两个文件都在 lib 外时，使用相对路径。使用 :package 当导入的文件在 lib 内，而导入者在 lib 外时。\n下图显示了如何从 lib 和 web 中导入 lib/foo/a.dart。\n有条件地导入和导出库文件 如果你的库支持多个平台，那么你可能需要有条件地导入或导出库文件。一个常见的用例是一个同时支持 web 和原生平台的库。\n要有条件的导入或导出，你需要检查 dart:* 库的存在。下面是一个有条件导出代码的例子，它检查 dart:io 和 dart:html 的存在:\nexport \u0026#39;src/hw_none.dart\u0026#39; // Stub implementation if (dart.library.io) \u0026#39;src/hw_io.dart\u0026#39; // dart:io implementation if (dart.library.html) \u0026#39;src/hw_html.dart\u0026#39;; // dart:html implementation 下面是这段代码的作用。\n 在一个可以使用 dart:io 的应用程序中(例如，一个命令行应用程序)，导出 src/hw_io.dart 在一个可以使用 dart:html 的应用程序中(一个 web 应用程序)，导出 src/hw_html.dart 否则，导出 src/hw_none.dart  要有条件地导入一个文件，使用与上面相同的代码，但将 exporrt 改为 import。\n注意：有条件的导入或导出只检查库在当前平台上是否可用，而不是检查是否实际导入或使用。\n所有有条件导出的库都必须实现相同的 API。例如，这里是 dart:io 的实现:\nimport \u0026#39;dart:io\u0026#39;; void alarm([String text]) { stderr.writeln(text ?? message); } String get message =\u0026gt; \u0026#39;Hello World from the VM!\u0026#39;; 这里是默认的实现，它是一个抛出 UnsupportedErrors 的 stub。\nvoid alarm([String text]) =\u0026gt; throw UnsupportedError(\u0026#39;hw_none alarm\u0026#39;); String get message =\u0026gt; throw UnsupportedError(\u0026#39;hw_none message\u0026#39;); 在任何平台上，你都可以导入有条件导出代码的库。\nimport \u0026#39;package:hw_mp/hw_mp.dart\u0026#39;; void main() { print(message); } 提供补充文件 一个设计良好的库包是很容易测试的。我们建议你使用 test 包来编写测试，将测试代码放在测试包顶部的 test 目录中。\n如果你创建了任何旨在供公众使用的命令行工具，请将这些工具放在 bin 目录下，这是公共的。启用从命令行运行工具，使用 pub global activate。将工具列在 pubspec 的可执行文件部分，允许用户直接运行它，而无需调用 pub global run。\n如果你包含了一个如何使用你的库的例子，这将会很有帮助。这将被放入软件包顶部的 example 目录中。\n你在开发过程中创建的任何工具或可执行文件，如果不是公开使用的，都会进入 tool 目录。\n如果你把你的库发布到 pub.dev 站点，其他需要的文件，如 README.md 和 CHANGELOG.md，将在发布软件包中描述。有关如何组织包目录的更多信息，请参见 pub 包布局惯例。\n编写库文档 你可以使用 dartdoc 工具为你的库生成 API 文档。Dartdoc 解析源码寻找文档注释，其中使用了 /// 语法:\n/// The event handler responsible for updating the badge in the UI. void updateBadge() { ... } 关于生成文档的例子，请看 shelf 文档。\n注意：要在生成的文档中包含任何库级文档，你必须指定 library 指令。请参阅 问题 1082。\n分发一个开源库 如果你的库是开源的，我们建议在 pub.dev 站点上分享它。要发布或更新库，请使用 pub publish，它可以上传您的包并创建或更新其页面。例如，请看 shelf 包的页面。有关如何准备发布软件包的详细信息，请参见发布包。\npub.dev 站点不仅托管您的软件包，而且还生成和托管您软件包的 API 参考文档。最新生成的文档的链接在软件包的 About 框中；例如，请看 shelf 包的 API 文档。到以前版本的文档的链接在软件包页面的版本选项卡中。\n要确保你的软件包的 API 文档在 pub.dev 网站上看起来不错，请按照以下步骤进行。\n 在发布你的软件包之前，运行 dartdoc 工具，以确保你的 docs 成功生成，并且看起来符合预期。 发布软件包后，检查 Versions 选项卡以确保文档成功生成。 如果文档根本没有生成，点击 Verrsions 选项卡中的 failed，查看 dartdoc 的输出。  资源 使用以下资源了解更多关于库包的信息。\n 语言之旅中的库和可见性包括使用库文件。 包文档很有用，特别是包的布局约定。 不应提交的内容涵盖了哪些不应该被检查到源代码库中。 dart-lang 组织下的较新的库包倾向于展示最佳实践。可以考虑研究这些例子：dart_style、path、shelf、source_gen 和 test。  ","permalink":"https://ohmyweekly.github.io/notes/creating-packages/","tags":["flutter","packages"],"title":"创建包"},{"categories":["programming"],"contents":"pub 软件包管理器不仅仅是用来使用别人的软件包。它还允许你与世界分享你的软件包。如果您有一个有用的项目，并且您希望其他人能够使用它，请使用 pub publish 命令。\n注意: 如果要发布到 pub.dev 以外的其他位置，或者要防止在任何地方发布，请使用 pubspec 中定义的 publish_to 字段。\n发布是永远的 请记住，发布是永远的。只要你发布你的包，用户就可以依赖它。一旦他们开始这样做，删除包就会破坏他们的包。为了避免这种情况，pub.dev 政策不允许取消发布软件包，除非是极少数情况。\n你可以随时上传你的包的新版本，但旧的包将继续为那些还没有准备好升级的用户提供服务。\n对于已经发布的包，如果不再相关或正在维护，你可以将其标记为停止发布。\n准备发布 当发布一个软件包时，遵循 pubspec 格式和包布局惯例是很重要的。其中有些是必须的，以便其他人能够使用你的软件包。另一些则是为了帮助用户更容易理解和使用您的软件包而提出的建议。在这两种情况下，pub 都会尝试帮助你，指出哪些改变会帮助你的软件包在 Dart 生态系统中发挥得更好。上传包有一些额外的要求:\n  你必须包含一个包含开源许可证的 LICENSE 文件。我们推荐 BSD 许可证，这是 Dart 自己使用的。你也必须有合法的权利来重新发布你上传的任何东西作为你的包的一部分。\n  你的软件包在经过 gzip 压缩后必须小于 10 MB。如果太大，可以考虑将其分割成多个包，或者减少包含的资源或例子的数量。\n  你的包应该只依赖托管的依赖项(来自默认的 pub 包服务器)和 SDK 依赖项(sdk: flutter)。这些限制确保了你的包的依赖性不会在未来变得不可用。\n  您必须有一个 Google 帐户，pub 用来管理包的上传权限。您的 Google 账户可以与 Gmail 地址或任何其他电子邮件地址关联。\n  注意：除非您使用已验证的发布者发布，否则 pub.dev 会显示与您的 Google 帐户关联的电子邮件地址。\n重要文件 Pub 使用一些文件的内容为你的包创建一个页面，地址是 pub.dev/packages/\u0026lt;your_package\u0026gt;。以下是影响你的包的页面外观的文件。\n README.md: README.md 文件是你的包页面中的主要内容。该文件的内容以 Markdown 的形式呈现。 CHANGELOG.md：CHANGELOG.md 文件是你的包页面中的主要内容。你的包的 CHANGELOG.md 文件，如果找到的话，也会在你的包页面的一个标签中显示，这样开发者就可以直接从 pub.dev 中读取它。该文件的内容会以 Markdown 的形式呈现。 pubspec: 你的包的 pubspec.yaml 文件用来在你的包的页面右侧填写关于你的包的详细信息，比如它的描述、主页等。  使用经过验证的发布者的优势 您可以使用已验证的发布者（推荐）或独立的谷歌账户发布软件包。使用经过验证的发布者有以下优势。\n 您的包的消费者知道发布者的域名已经被验证。 您可以避免让 pub.dev 显示您的个人电子邮件地址。取而代之的是，pub.dev会显示发布者的域名和联系地址。 经验证的发布者徽章 pub.dev 经验证的发布者标识会在搜索页面和单个软件包页面上显示在您的软件包名称旁边。  创建一个验证过的发布者 要创建一个已验证的发布者，请按照以下步骤进行。\n 进入 pub.dev。 使用 Google 账户登录 pub.dev。 在右上角的用户菜单中，选择创建发布者。 输入您要与您的发布者相关联的域名(例如，dart.dev)，然后单击\u0026quot;创建发布者\u0026rdquo;。 在确认对话框中，选择\u0026quot;确定\u0026rdquo;。 如果提示，完成验证流程，这将打开 Google 搜索控制台。   在添加 DNS 记录时，可能需要几个小时后，搜索控制台才会反映出变化。 验证流程完成后，返回步骤4。  发布你的包 使用 pub publish 命令来首次发布您的软件包，或将其更新到新版本。\n执行 dry run 为了测试 pub publish 的工作情况，你可以进行一次 dry run:\n$ pub publish --dry-run Pub 会确保你的软件包遵循 pubspec 格式和包布局约定，然后将你的软件包上传到 pub.dev。Pub 还会向你展示它打算发布的所有文件。下面是一个发布名为 transmogrify 的软件包的例子:\nPublishingtransmogrify1.0.0.gitignoreCHANGELOG.mdREADME.mdlibtransmogrify.dartsrctransmogrifier.darttransmogrification.dartpubspec.yamltesttransmogrify_test.dartPackagehas0warnings.发布 当你准备好发布你的包时，请删除 --dry-run 参数:\n$ pub publish 注意: pub 命令目前不支持直接将新软件包发布到已验证的发布者。作为一个临时的变通方法，可以将新的软件包发布到Google账户，然后将包转移到发布者。\n一旦软件包被转移到发布者，你就可以使用 pub publish 更新软件包。\n当你的包成功上传到 pub.dev 后，任何 pub 用户都可以下载它或在他们的项目中依赖它。例如，如果你刚刚发布了 1.0.0 版本的 transmogrify 包，那么另一个 Dart 开发者可以在他们的 pubspec.yaml 中添加它作为依赖:\ndependencies:transmogrify:^1.0.0将软件包传输给已验证的发布者 要将一个软件包转移到已验证的发布者，您必须是该软件包的上传者和已验证发布者的管理员。\n注意：这个过程是不可逆的。一旦你将一个软件包转移到一个发布者，你不能将它转移回个人账户。\n以下是如何将软件包转移到已验证的发布者:\n 用一个被列为软件包上传者的 Google 账户登录到 pub.dev。 进入软件包的详细信息页面(例如，https://pub.dev/packages/http)。 选择\u0026quot;管理\u0026quot;选项卡。 输入发布者的名称，然后单击\u0026quot;传输到发布者\u0026rdquo;。  哪些文件会被发布？ 您的软件包中的所有文件都包含在已发布的软件包中，但有以下例外:\n 任何包的目录。 您的软件包的 lockfile 文件。 如果你没有使用 Git，所有隐藏的文件（也就是名字以 . 开头的文件）。 如果使用 Git，则是所有被 .gitignore 文件忽略的文件。  请确保删除任何你不想包含的文件(或将它们添加到 .gitignore 中)。 pub publish 在上传你的包之前列出了它要发布的所有文件，所以在完成上传之前要仔细检查列表。\n上传者 谁发布了软件包的第一个版本，谁就会自动成为第一个也是唯一一个被授权上传该软件包其他版本的人。要允许或不允许其他人上传版本，请使用 pub uploader 命令或将软件包转移到已验证的发布者那里。\n如果一个软件包有一个经过验证的发布者，那么该软件包的 pub.dev 页面会显示发布者的域名。否则，该页面将显示该软件包的授权上传者的电子邮件地址。\n发布预发包 当你在做一个包的时候，考虑把它作为一个预发布。当以下任何一种情况发生时，预发布都是有用的。\n 你正在积极开发软件包的下一个主要版本。 你想为软件包的下一个发行候选版本招募测试者。 该包依赖于 Dart 或 Flutter SDK 的不稳定版本。  正如在语义版本化中所描述的那样，为了使一个版本的预发布，你要给版本附加一个后缀。例如，要对 2.0.0 版本进行预发布，你可以使用 2.0.0-dev.1 版本。以后，当你发布 2.0.0 版本时，它将优先于所有 2.0.0-XXX 预发布版本。\n因为 pub 更倾向于在可用的时候发布稳定版，所以一个预发布包的用户可能需要改变他们的依赖约束。例如，如果用户想要测试 2.1 版本的预发布包，那么他们可以指定 ^2.1.0-dev.1，而不是 ^2.0.0 或 ^2.1.0。\n注意: 如果依赖关系图中的稳定包依赖于一个 prerelease，那么 pub 会选择那个 prerelease 而不是稳定版本。\n当一个 prerelease 被发布到 pub.dev 时，软件包页面会同时显示到 prerelease 和稳定版的链接。prerelease 不会影响分析得分，不会出现在搜索结果中，也不会替换包的 README.md 和文档。\n将软件包标记为已停产的软件包 尽管软件包总是保持发布，但向开发者发出信号，表明一个软件包不再被积极维护，是很有用的。为此，您可以将一个软件包标记为 discontinued。一个已停用的软件包仍然可以在 pub.dev 上发布和查看，但它有一个清晰的 DISCONTINUED 徽章，并且不会出现在 pub.dev 的搜索结果中。\n要将软件包标记为已停用，请使用该软件包的上传者或已验证的发布者管理员的 Google 帐户登录 pub.dev。然后使用单个软件包的管理选项卡将该软件包标记为已停用。\n资源 有关更多信息，请参见以下 pub 命令的参考页面。\n pub publish pub uploader  ","permalink":"https://ohmyweekly.github.io/notes/publishing-packages/","tags":["flutter","packages"],"title":"发布包"},{"categories":["programming"],"contents":"有什么意义呢？\n HTTP 协议允许客户端和服务器进行通信。 dart:io 包有编写 HTTP 程序的类。 服务器监听主机和端口上的请求。 客户端使用 HTTP 方法请求发送请求。 http_server 包提供了更高级别的构件。  前提条件: HTTP 服务器和客户端严重依赖 future 和流，本教程中没有解释这些内容。你可以从异步编程 codelab和流教程中了解它们。\nHTTP（超文本传输协议）是一种通信协议，用于通过互联网将数据从一个程序发送到另一个程序。数据传输的一端是服务器，另一端是客户端。客户端通常是基于浏览器的（用户在浏览器中输入或在浏览器中运行的脚本），但也可能是一个独立的程序。\n服务器与主机和端口绑定（它与一个IP地址和一个端口号建立专属连接）。然后服务器监听请求。由于 Dart 的异步性，服务器可以同时处理很多请求，具体如下。\n 服务器监听 客户端连接 服务器接受并接收请求(并继续监听) 服务器可以继续接受其他请求 服务器写入请求的响应或几个请求，可能是交错的请求 服务器最终结束(关闭)响应  在 Dart 中，dart:io 库包含了编写 HTTP 客户端和服务器所需的类和函数。此外，http_server 包包含了一些更高层次的类，使其更容易编写客户端和服务器。\n重要：基于浏览器的程序不能使用 dart:io 库。\ndart:io 库中的 API 只适用于独立的命令行程序。它们不能在浏览器中工作。要从基于浏览器的客户端发出 HTTP 请求，请参考 dart:html HttpRequest 类。\n本教程提供了几个例子，说明编写 Dart HTTP 服务器和客户端是多么容易。从服务器的 hello world 开始，你将学习如何编写服务器的代码，从绑定和监听到响应请求。你还可以学习到客户端：提出不同类型的请求(GET 和 POST)，编写基于浏览器和命令行的客户端。\n获取源码  获取 Dart 教程的示例代码。 查看 httpserver 目录，其中包含本教程所需的源码。  运行 hello world 服务器 本节的示例文件：hello_world_server.dart。\n让我们从一个小型的服务器开始，用字符串 Hello, world 来响应所有的请求。\n在命令行中，运行 hello_world_server.dart 脚本:\n$ cd httpserver $ dart bin/hello_world_server.dart listening on localhost, port 4040 在任何浏览器中，访问 localhost:4040。浏览器会显示 Hello, world!。\n在这种情况下，服务器是一个 Dart 程序，客户端是你使用的浏览器。然而，你可以用 Dart 编写客户端程序-无论是基于浏览器的客户端脚本，还是独立的程序。\n快速浏览一下代码 在 hello world 服务器的代码中，一个 HTTP 服务器与主机和端口绑定，监听 HTTP 请求，并写入响应。需要注意的是，该程序导入了 dart:io 库，其中包含了服务器端程序和客户端程序的 HTTP 相关类(但不包含 Web 应用)。\nimport \u0026#39;dart:io\u0026#39;; Future main() async { var server = await HttpServer.bind( InternetAddress.loopbackIPv4, 4040, ); print(\u0026#39;Listening on localhost:${server.port}\u0026#39;); await for (HttpRequest request in server) { request.response.write(\u0026#39;Hello, world!\u0026#39;); await request.response.close(); } } 接下来的几节内容包括服务器端绑定、发出客户端 GET 请求、监听和响应。\n将服务器绑定到主机和端口 本节示例：hello_world_server.dart。\nmain() 中的第一条语句使用 HttpServer.bind() 创建一个 HttpServer 对象，并将其绑定到主机和端口。\nvar server = await HttpServer.bind( InternetAddress.loopbackIPv4, 4040, ); 该代码使用 await 异步调用 bind 方法。\n主机名 bind() 的第一个参数是指定主机名。你可以用一个字符串来指定一个特定的主机名或IP地址，也可以用 InternetAddress 类提供的这些预定义的值来指定主机。\n   值 用例     回环 IPv4 或 loopbackIPv6 服务器在 loopback 地址上监听客户端活动，该地址实际上是 localhost。使用IP协议的4或6版本。这些主要用于测试。我们建议您使用这些值而不是 localhost 或 127.0.0.1。   任何 IPv4 或 anyIPv6 服务器监听任何 IP 地址上指定端口上的客户端活动。使用IP协议的4或6版本。    默认情况下，当使用V6互联网地址时，也会使用V4监听器。\n端口 bind() 的第二个参数是指定端口的整数。端口唯一地标识主机上的服务。1024 以下的端口号为标准服务保留(0除外)。例如，FTP 数据传输通常在端口20上运行，每日报价在端口17上运行，HTTP 在端口80上运行。你的程序应该使用1024以上的端口号。如果端口已经在使用中，你的服务器的连接将被拒绝。\n侦听请求 服务器使用 await for 开始监听 HTTP 请求。每收到一个请求，代码就会发送一个 \u0026ldquo;Hello, world!\u0026rdquo; 的响应。\nawait for (HttpRequest request in server) { request.response.write(\u0026#39;Hello, world!\u0026#39;); await request.response.close(); } 你将在监听和处理请求一节中了解更多关于 HttpRequest 对象包含的内容以及如何编写响应。但首先，让我们看看客户端产生请求的一种方式。\n使用 HTML 表单发出 GET 请求 本节的示例文件：number_thinker.dart 和 make_a_guess.html。\n本节介绍了一个命令行服务器，它可以随机选择一个0到9之间的数字。客户端是一个基本的 HTML 网页，make_a_guess.html，你可以用它来猜数字。\n试试吧\n 运行数字思考者服务器  在命令行，运行 number_thinker.dart server。你应该看到类似下面的东西:\n$ cd httpserver $ dart bin/number_thinker.dart I\u0026#39;m thinking of a number: 6 启动网络服务器  从应用程序的顶部目录运行 webdev serve。\n更多信息：webdev 文档\n打开 HTML 页面  在浏览器中，进入 localhost:8080/make_a_guess.html。\n做一个猜测  选择一个数字，然后按猜测按钮。\n在客户端中没有涉及到 Dart 代码。客户端请求是通过浏览器向 Dart 服务器发出的，在 make_a_guess.html 中的 HTML 表单，它提供了一个自动制定和发送客户端 HTTP 请求的方法。该表单包含下拉列表和按钮。该表单还指定了 URL，其中包括端口号，以及请求的种类（请求方法）。它还可能包含建立查询字符串的元素。\n下面是 make_a_guess.html 中的表单 HTML。\n\u0026lt;form action=\u0026#34;http://localhost:4041\u0026#34; method=\u0026#34;GET\u0026#34;\u0026gt; \u0026lt;select name=\u0026#34;q\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;0\u0026#34;\u0026gt;0\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;1\u0026#34;\u0026gt;1\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;2\u0026#34;\u0026gt;2\u0026lt;/option\u0026gt; \u0026lt;!--··· --\u0026gt; \u0026lt;option value=\u0026#34;9\u0026#34;\u0026gt;9\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Guess\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; 下面是表单的工作原理:\n 表单的 action 属性被分配给发送请求的 URL 表单的 method 属性定义了请求的类型，这里是 GET。其他常见的请求类型包括 POST、PUT 和 DELETE。 表单中任何有名称(name)的元素，比如 \u0026lt;select\u0026gt; 元素，都会成为查询字符串中的一个参数。 当按下提交按钮(\u0026lt;input type=\u0026quot;submit\u0026quot;...\u0026gt;)时，提交按钮会根据表单的内容制定请求并发送。  一个 RESTful GET 请求 REST(REpresentational State Transfer)是一套设计 Web 服务的原则。乖巧的 HTTP 客户端和服务器遵守为 GET 请求定义的 REST 原则。\n一个 GET 请求:\n 只检索数据 不会改变服务器的状态 有长度限制 可以在请求的 URL 中发送查询字符串  在这个例子中，客户端发出了一个符合 REST 的 GET 请求。\n监听和处理请求 本节的示例文件: number_thinker.dart 和 make_a_guess.html。\n现在你已经看到这个基于浏览器的客户端的例子，让我们看看数字思维服务器的 Dart 代码，从 main() 开始。\n再一次，服务器绑定了一个主机和端口。在这里，每收到一个请求都会调用顶层的 handleRequest() 方法。因为 HttpServer 实现了 Stream，所以可以使用 await for 来处理请求。\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:math\u0026#39; show Random; Random intGenerator = Random(); int myNumber = intGenerator.nextInt(10); Future main() async { print(\u0026#34;I\u0026#39;m thinking of a number: $myNumber\u0026#34;); HttpServer server = await HttpServer.bind( InternetAddress.loopbackIPv4, 4041, ); await for (var request in server) { handleRequest(request); } } 当一个 GET 请求到达时，handleRequest() 方法会调用 handleGet() 来处理该请求。\nvoid handleRequest(HttpRequest request) { try { if (request.method == \u0026#39;GET\u0026#39;) { handleGet(request); } else { // ···  } } catch (e) { print(\u0026#39;Exception in handleRequest: $e\u0026#39;); } print(\u0026#39;Request handled.\u0026#39;); } 一个 HttpRequest 对象有很多属性，提供了关于请求的信息。下表列出了一些有用的属性。\n   属性 信息     method \u0026lsquo;GET\u0026rsquo;, \u0026lsquo;POST\u0026rsquo;, \u0026lsquo;PUT\u0026rsquo; 等方法中的一个。   uri 一个 Uri 对象：scheme、host、port、query string 和其他关于请求资源的信息。   response 一个 HttpResponse 对象：服务器将其响应写入其中。   headers 一个 HttpHeaders 对象：请求的头信息，包括 ContentType、内容长度、日期等。    使用方法属性 下面的数想器例子中的代码使用 HttpRequest 的 method 属性来确定收到了什么样的请求。这个服务器只处理 GET 请求。\nif (request.method == \u0026#39;GET\u0026#39;) { handleGet(request); } else { request.response ..statusCode = HttpStatus.methodNotAllowed ..write(\u0026#39;Unsupported request: ${request.method}.\u0026#39;) ..close(); } 使用 uri 属性 在浏览器中输入一个 URL 会产生一个 GET 请求，它只是简单地从指定的资源中请求数据。它可以通过附加在 URI 上的查询字符串随请求发送少量数据。\nvoid handleGet(HttpRequest request) { final guess = request.uri.queryParameters[\u0026#39;q\u0026#39;]; // ··· } 使用 HttpRequest 对象的 uri 属性来获取一个 Uri 对象，这个 Uri 对象包含了用户输入的 URL 的信息。Uri 对象的 queryParameters 属性是一个 Map，包含查询字符串的组件。通过名称来引用所需的参数。本例使用 q 来标识猜测的数字。\n设置响应的状态码 服务器应该设置状态码来表示请求的成功或失败。前面看到数想家将状态码设置为 methodNotAllowed 来拒绝非 GET 请求。在后面的代码中，为了表示请求成功，响应完成，数想家服务器将 HttpResponse 状态码设置为 HttpStatus.ok。\nvoid handleGet(HttpRequest request) { final guess = request.uri.queryParameters[\u0026#39;q\u0026#39;]; final response = request.response; response.statusCode = HttpStatus.ok; // ··· } HttpStatus.ok 和 HttpStatus.methodNotAllowed 是 HttpStatus 类中许多预定义状态码中的两个。另一个有用的预定义状态码是 HttpStatus.notFound(经典的 404）。\n除了状态码(statusCode)，HttpResponse 对象还有其他有用的属性:\n   属性 信息     contentLength 响应的长度，-1 表示事先不知道长度。   cookies 要在客户端设置的 Cookies 列表。   encoding 编写字符串时使用的编码，如 JSON 和 UTF-8。   headers 响应头，是一个 HttpHeaders 对象。    将响应写到 HttpResponse 对象 每个 HttpRequest 对象都有一个对应的 HttpResponse 对象。服务器通过响应对象将数据发回给客户端。\n使用 HttpResponse 写方法之一(write()、writeln()、writeAll() 或 writeCharCodes())将响应数据写入 HttpResponse 对象。或者通过 addStream 将 HttpResponse 对象连接到一个流，并写入流。响应完成后关闭对象。关闭 HttpResponse 对象会将数据发回给客户端。\nvoid handleGet(HttpRequest request) { // ···  if (guess == myNumber.toString()) { response ..writeln(\u0026#39;true\u0026#39;) ..writeln(\u0026#34;I\u0026#39;m thinking of another number.\u0026#34;) ..close(); // ···  } } 从独立的客户端进行 POST 请求 本节的示例文件：basic_writer_server.dart 和 basic_writer_client.dart。\n在 hello world 和 number thinker 的例子中，浏览器生成了简单的 GET 请求，对于更复杂的 GET 请求和其他类型的请求，如 POST、PUT 或 DELETE，你需要写一个客户端程序，其中有两种。\n 一个独立的客户端程序，它使用 dart:io 的 HttpClient 类。 基于浏览器的客户端，使用 dart:html 中的 API。本教程不涉及基于浏览器的客户端。要查看基于浏览器的客户端和相关服务器的代码，请参见 note_client.dart、note_server.dart 和 note_taker.html。  让我们看看一个独立的客户端，basic_writer_client.dart 和它的服务器 basic_writer_server.dart。客户端发出一个 POST 请求，将 JSON 数据保存到服务器端的文件中。服务器接受请求并保存文件。\n试试吧 在命令行上运行服务器和客户端。\n 首先，运行服务器:  cd httpserver $ dart bin/basic_writer_server.dart 在一个新的终端中，运行客户端:  $ cd httpserver $ dart bin/basic_writer_client.dart Wrote data for Han Solo. 看看服务器写入 file.txt 的 JSON 数据:\n{\u0026#34;name\u0026#34;:\u0026#34;Han Solo\u0026#34;,\u0026#34;job\u0026#34;:\u0026#34;reluctant hero\u0026#34;,\u0026#34;BFF\u0026#34;:\u0026#34;Chewbacca\u0026#34;,\u0026#34;ship\u0026#34;:\u0026#34;Millennium Falcon\u0026#34;,\u0026#34;weakness\u0026#34;:\u0026#34;smuggling debts\u0026#34;} 客户端创建一个 HttpClient 对象，并使用 post() 方法进行请求。发起一个请求涉及两个 Future。\n post() 方法建立与服务器的网络连接并完成第一个 Future，返回一个 HttpClientRequest 对象。 客户端组成请求对象并关闭它。close() 方法将请求发送到服务器并返回第二个 Future，它以一个 HttpClientResponse 对象完成。  import \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:convert\u0026#39;; String _host = InternetAddress.loopbackIPv4.host; String path = \u0026#39;file.txt\u0026#39;; Map jsonData = { \u0026#39;name\u0026#39;: \u0026#39;Han Solo\u0026#39;, \u0026#39;job\u0026#39;: \u0026#39;reluctant hero\u0026#39;, \u0026#39;BFF\u0026#39;: \u0026#39;Chewbacca\u0026#39;, \u0026#39;ship\u0026#39;: \u0026#39;Millennium Falcon\u0026#39;, \u0026#39;weakness\u0026#39;: \u0026#39;smuggling debts\u0026#39; }; Future main() async { HttpClientRequest request = await HttpClient().post(_host, 4049, path) /*1*/ ..headers.contentType = ContentType.json /*2*/ ..write(jsonEncode(jsonData)); /*3*/ HttpClientResponse response = await request.close(); /*4*/ await utf8.decoder.bind(response /*5*/).forEach(print); } /1/ post() 方法需要主机、端口和请求资源的路径。除了 post() 之外，HttpClient 类还提供了其他类型的请求函数，包括 postUrl()、get() 和 open()。\n/2/ 一个 HttpClientRequest 对象有一个 HttpHeaders 对象，它包含了请求头的信息。对于一些请求头，比如 contentType，HttpHeaders 有一个针对该请求头的属性。对于其他的请求头，使用 set() 方法将该请求头放入 HttpHeaders 对象中。\n/3/ 客户端使用 write() 向请求对象写入数据。编码，在这个例子中是 JSON，与 ContentType 头中指定的类型相匹配。\n/4/ close() 方法将请求发送到服务器，完成后返回一个 HttpClientResponse 对象。\n/5/ 来自服务器的 UTF-8 响应将被解码。使用在 dart:convert 库中定义的转换器将数据转换为常规的 Dart 字符串格式。\n一个 RESTful POST 请求 与 GET 请求类似，REST 为 POST 请求提供了指导方针。\n一个 POST 请求:\n 创建一个资源(在这个例子中，一个文件) 使用一个 URI，其结构与文件和目录路径名相似；例如，URI 没有查询字符串。 以 JSON 或 XML 格式传输数据 没有状态，也不会改变服务器的状态。 无长度限制  这个例子中的客户端发出 REST 兼容的 POST 请求。\n要想看到使 REST 兼容的 GET 请求的客户端代码，请看 number_guesser.dart。它是一个独立的客户端，用于数字思考者服务器，定期进行猜测，直到猜对为止。\n在服务器中处理一个 POST 请求 本节的示例文件：basic_writer_server.dart 和 basic_writer_client.dart。\n一个 HttpRequest 对象是一个字节列表流(Stream\u0026lt;List\u0026lt;int\u0026gt;)。要获得客户端发送的数据，就要监听 HttpRequest 对象上的数据。\n如果来自客户端的请求包含了大量的数据，数据可能会以多个分块的形式到达。你可以使用 Stream 中的 join() 方法来连接这些分块的字符串值。\nbasic_writer_server.dart 文件实现了一个遵循这种模式的服务器。\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:convert\u0026#39;; String _host = InternetAddress.loopbackIPv4.host; Future main() async { var server = await HttpServer.bind(_host, 4049); await for (var req in server) { ContentType contentType = req.headers.contentType; HttpResponse response = req.response; if (req.method == \u0026#39;POST\u0026#39; \u0026amp;\u0026amp; contentType?.mimeType == \u0026#39;application/json\u0026#39; /*1*/) { try { String content = await utf8.decoder.bind(req).join(); /*2*/ var data = jsonDecode(content) as Map; /*3*/ var fileName = req.uri.pathSegments.last; /*4*/ await File(fileName) .writeAsString(content, mode: FileMode.write); req.response ..statusCode = HttpStatus.ok ..write(\u0026#39;Wrote data for ${data[\u0026#39;name\u0026#39;]}.\u0026#39;); } catch (e) { response ..statusCode = HttpStatus.internalServerError ..write(\u0026#39;Exception during file I/O: $e.\u0026#39;); } } else { response ..statusCode = HttpStatus.methodNotAllowed ..write(\u0026#39;Unsupported request: ${req.method}.\u0026#39;); } await response.close(); } } /1/ 该请求有一个 HttpHeaders 对象。记得客户端将 contentType 头设置为 JSON(application/json)。该服务器拒绝不是 JSON 编码的请求。\n/2/ 一个 POST 请求对它可以发送的数据量没有限制，数据可能会以多块形式发送。此外，JSON 是 UTF-8，而 UTF-8 字符可以在多个字节上进行编码。join() 方法将这些分块放在一起。\n/3/ 客户端发送的数据是 JSON 格式的。服务器使用 dart:convert 库中的 JSON 编解码器对其进行解码。\n/4/ 请求的 URL 是 localhost:4049/file.txt。代码 req.uri.pathSegments.last 从 URI 中提取文件名: file.txt。\n关于 CORS 头的说明 如果你想为运行在不同源头（不同主机或端口）的客户端提供服务，你需要添加 CORS 头。下面的代码，取自 note_server.dart，允许从任何来源的 POST 和 OPTIONS 请求。谨慎使用 CORS 头文件，因为它们会给你的网络带来安全风险。\nvoid addCorsHeaders(HttpResponse response) { response.headers.add(\u0026#39;Access-Control-Allow-Origin\u0026#39;, \u0026#39;*\u0026#39;); response.headers .add(\u0026#39;Access-Control-Allow-Methods\u0026#39;, \u0026#39;POST, OPTIONS\u0026#39;); response.headers.add(\u0026#39;Access-Control-Allow-Headers\u0026#39;, \u0026#39;Origin, X-Requested-With, Content-Type, Accept\u0026#39;); } 更多信息，请参考维基百科的跨源资源共享一文。\n使用 http_server 包 本节的示例文件：mini_file_server.dart 和 static_file_server.dart。\n对于一些更高层次的构件，我们推荐你尝试 http_server pub 包，它包含了一组类，与 dart:io 库中的 HttpServer 类一起，使得实现 HTTP 务器更加容易。\n在本节中，我们比较了一个只使用 dart:io 的 API 编写的服务器和一个使用 dart:io 和 http_server 一起编写的具有相同功能的服务器。\n你可以在 mini_file_server.dart 中找到第一个服务器。它通过从 web 目录返回 index.html 文件的内容来响应所有请求。\n试试吧 在命令行中运行服务器:\n$ cd httpserver $ dart bin/mini_file_server.dart 在浏览器中输入 localhost:4044。服务器会显示一个 HTML 文件。\n这是迷你文件服务器的代码:\nimport \u0026#39;dart:io\u0026#39;; File targetFile = File(\u0026#39;web/index.html\u0026#39;); Future main() async { Stream\u0026lt;HttpRequest\u0026gt; server; try { server = await HttpServer.bind(InternetAddress.loopbackIPv4, 4044); } catch (e) { print(\u0026#34;Couldn\u0026#39;t bind to port 4044: $e\u0026#34;); exit(-1); } await for (HttpRequest req in server) { if (await targetFile.exists()) { print(\u0026#34;Serving ${targetFile.path}.\u0026#34;); req.response.headers.contentType = ContentType.html; try { await req.response.addStream(targetFile.openRead()); } catch (e) { print(\u0026#34;Couldn\u0026#39;t read file: $e\u0026#34;); exit(-1); } } else { print(\u0026#34;Can\u0026#39;t open ${targetFile.path}.\u0026#34;); req.response.statusCode = HttpStatus.notFound; } await req.response.close(); } } 这段代码确定文件是否存在，如果存在，则打开文件，并将文件内容管道化到HttpResponse对象。\n第二个服务器，你可以在 basic_file_server.dart 中找到它的代码，使用 http_server 包。\n试试吧 在命令行中运行服务器:\n$ cd httpserver $ dart bin/basic_file_server.dart 在浏览器中输入 localhost:4046。服务器显示与之前相同的 index.html 文件。\n在这个服务器中，处理请求的代码要短得多，因为 VirtualDirectory 类处理服务文件的细节。\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;package:http_server/http_server.dart\u0026#39;; File targetFile = File(\u0026#39;web/index.html\u0026#39;); Future main() async { VirtualDirectory staticFiles = VirtualDirectory(\u0026#39;.\u0026#39;); var serverRequests = await HttpServer.bind(InternetAddress.loopbackIPv4, 4046); await for (var request in serverRequests) { staticFiles.serveFile(targetFile, request); } } 这里，请求的资源 index.html 是由 VirtualDirectory 类中的 serviceFile() 方法提供的。你不需要写代码来打开一个文件并将其内容用管道传送到请求中。\n另一个文件服务器 static_file_server.dart 也使用 http_server 包。这个服务器可以服务于服务器目录或子目录中的任何文件。\n运行 static_file_server.dart，用 localhost:4048 这个 URL 进行测试。\n下面是 static_file_server.dart 的代码:\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;package:http_server/http_server.dart\u0026#39;; Future main() async { var staticFiles = VirtualDirectory(\u0026#39;web\u0026#39;); staticFiles.allowDirectoryListing = true; /*1*/ staticFiles.directoryHandler = (dir, request) /*2*/ { var indexUri = Uri.file(dir.path).resolve(\u0026#39;index.html\u0026#39;); staticFiles.serveFile(File(indexUri.toFilePath()), request); /*3*/ }; var server = await HttpServer.bind(InternetAddress.loopbackIPv4, 4048); print(\u0026#39;Listening on port 4048\u0026#39;); await server.forEach(staticFiles.serveRequest); /*4*/ } /1/ 允许客户端请求服务器目录内的文件。\n/2/ 一个匿名函数，处理对目录本身的请求，即 URL 不包含文件名。该函数将这些请求重定向到 index.html。\n/3/ serveFile 方法为一个文件提供服务，在这个例子中，它为目录请求服务index.html。\n/4/ VirtualDirectory 类提供的 serviceRequest 方法处理指定文件的请求。\n使用 bindSecure() 的 https 方法 本节的示例：hello_world_server_secure.dart。\n你可能已经注意到，HttpServer 类定义了一个叫做 bindSecure() 的方法，它使用 HTTPS(Hyper Text Transfer Protocol with Secure Sockets Layer)提供安全连接。要使用 bindSecure() 方法，你需要一个证书，这个证书由证书颁发机构(CA)提供。有关证书的更多信息，请参考什么是 SSL 和什么是证书？\n为了说明问题，下面的服务器 hello_world_server_secure.dart 使用 Dart 团队创建的证书调用 bindSecure() 进行测试。你必须为你的服务器提供自己的证书。\nimport \u0026#39;dart:io\u0026#39;; String certificateChain = \u0026#39;server_chain.pem\u0026#39;; String serverKey = \u0026#39;server_key.pem\u0026#39;; Future main() async { var serverContext = SecurityContext(); /*1*/ serverContext.useCertificateChain(certificateChain); /*2*/ serverContext.usePrivateKey(serverKey, password: \u0026#39;dartdart\u0026#39;); /*3*/ var server = await HttpServer.bindSecure( \u0026#39;localhost\u0026#39;, 4047, serverContext, /*4*/ ); print(\u0026#39;Listening on localhost:${server.port}\u0026#39;); await for (HttpRequest request in server) { request.response.write(\u0026#39;Hello, world!\u0026#39;); await request.response.close(); } } /1/ 安全网络连接的可选设置在 SecurityContext 对象中指定，有一个默认的对象 SecurityContext.defaultContext，包括知名证书机构的可信根证书。\n/2/ 一个包含从服务器证书到签名机关根证书链的文件，格式为 PEM。\n/3/ 一个包含（加密的）服务器证书私钥的文件，PEM 格式。\n/4/ 在服务器上，上下文参数是必需的，对客户端来说是可选的。如果省略它，则使用默认的内置可信根的上下文。\n其他资源 请访问这些 API 文档，了解本教程中讨论的类和库的更多细节。\n   Dart 类 目的     HttpServer 一个 HTTP 服务器   HttpClient 一个 HTTP 客户端   HttpRequest 一个服务器端请求对象   HttpResponse 一个服务器端响应对象   HttpClientRequest 一个客户端请求对象   HttpClientResponse 一个客户端响应对象   HttpHeaders 请求头   HttpStatus 响应的状态   InternetAddress 一个互联网地址   SecurityContext 包含安全连接的证书、密钥和信任信息。   http_server 包 一个具有较高级别的 HTTP 类的包    下一步该怎么做？  如果你还没有尝试过服务器端的 codelab，可以尝试编写一个服务器应用程序。 Servers with Dart 链接到编写独立 Dart 应用程序的资源，包括服务器。  ","permalink":"https://ohmyweekly.github.io/notes/write-http-clients/","tags":["flutter","client"],"title":"编写HTTP客户端和服务器"},{"categories":["programming"],"contents":"Dart 生态系统使用包来管理共享软件，如库和工具。要获得 Dart 包，你可以使用 pub 包管理器。你可以在 pub.dev 网站上找到公开的包，也可以从本地文件系统或其他地方加载包，比如 Git 仓库。无论你的包来自哪里，pub 都会管理版本依赖关系，帮助你获得相互之间以及与 SDK 版本兼容的包版本。\n大多数精通 Dart 的 IDE 都提供了对 pub 的支持，包括创建、下载、更新和发布包。或者你可以在命令行中使用 pub。\n至少，一个 Dart 包是一个包含 pubspec 文件的目录。pubspec 包含一些关于包的元数据。此外，一个包可以包含依赖关系(在 pubspec 中列出)，Dart 库，应用程序，资源，测试，图像和例子。\n要使用一个包，请执行以下操作:\n 创建一个 pubspec(一个名为 pubspec.yaml 的文件，它列出了软件包的依赖关系，并包含其他元数据，如版本号)。 使用 pub 来获取你的包的依赖关系。 如果你的 Dart 代码依赖于软件包中的一个库，则导入该库。  创建一个 pubspec pubspec 是一个名为 pubspec.yaml 的文件，它位于你的应用程序的顶级目录中。最简单的 pubspec 只列出了包名:\nname: my_app 下面是一个 pubspec 的例子，它声明了两个包(js 和 intl)的依赖关系，这两个包都托管在 pub.dev 站点上:\nname: my_app dependencies: js: ^0.6.0 intl: ^0.15.8 关于创建 pubspec 的详细信息，请参见 pubspec 文档和你要使用的包的文档。\n获取软件包 一旦你有了 pubspec，你就可以从你的应用程序的顶级目录中运行 pub get:\n$ cd \u0026lt;path-to-my_app\u0026gt; $ pub get 这个过程被称为获取依赖关系。\npub get 命令可以确定您的应用程序依赖于哪些软件包，并将它们放在中央系统缓存中。如果您的应用程序依赖于已发布的包，pub 会从 pub.dev 站点下载该包。对于 Git 依赖，pub 会克隆 Git 仓库。还包括了过渡性依赖。例如，如果 js 包依赖于 test 包，pub 会同时抓取 js 包和 test 包。\nPub 会创建一个 .packages 文件(在你的应用程序的顶层目录下)，将你的应用程序所依赖的每个包名映射到系统缓存中的对应包。\n从包中导入库 要导入在包中找到的库，使用 package: 前缀:\nimport \u0026#39;package:js/js.dart\u0026#39; as js; import \u0026#39;package:intl/intl.dart\u0026#39;; Dart 运行时在 package: 之后的所有内容都会在应用程序的 .package 文件中进行查找。\n你也可以使用这种风格从你自己的包中导入库。比方说，transmogrify 包的布局如下:\ntransmogrify/ lib/ transmogrify.dart parser.dart test/ parser/ parser_test.dart parser_test.dart 文件可以这样导入 parser.dart:\nimport \u0026#39;package:transmogrify/parser.dart\u0026#39;; 升级依赖关系 当你第一次为你的软件包获取一个新的依赖关系时，pub 会下载与你的其他依赖关系兼容的最新版本。然后，它通过创建一个 lockfile 锁文件来锁定您的软件包，使其始终使用该版本。这是一个名为 pubspec.lock 的文件，由 pub 创建并存储在 pubspec 的旁边。它列出了您的软件包所使用的每个依赖关系的特定版本 (即时的和过渡的)。\n如果你的包是一个应用程序包，你应该把这个文件检查到源代码控制中。这样，在你的应用程序上工作的每个人都会使用所有包的相同版本。在 lockfile 文件中检查也可以确保你部署的应用使用相同版本的代码。\n当你准备好将你的依赖项升级到最新版本时，使用 pub upgrade 命令:\n$ pub upgrade pub upgrade 命令告诉 pub 使用你的包的依赖关系的最新版本来重新生成 lockfile 文件。如果你只想升级一个依赖关系，你可以指定要升级的软件包:\n$ pub upgrade transmogrify 该命令将 transmogrify 升级到最新版本，但其他一切都保持不变。\n由于 pubspec 中有冲突的版本限制，pub upgrade 命令并不能总是将每个软件包升级到最新版本。要识别需要编辑 pubspec 的过期软件包，请使用 pub outdated。\n更多信息 下面的页面有更多关于软件包和 pub 包管理器的信息。\n如何使用\n 创建包 发布包  参考\n Pub 依赖 Pub 环境变量 Pub 词汇表 Pub 包布局约定 Pub 版本哲学 Pubspec 格式化  Pub 命令\npub 工具提供了以下命令:\n pub cache pub deps pub downgrade pub get pub global pub outdated pub publish pub run pub upgrade pub uploader  有关所有 pub 命令的概述，请参阅 pub 工具文档。\n疑难解答\n故障排除 pub 提供了使用 pub 时可能遇到的问题的解决方案。\n","permalink":"https://ohmyweekly.github.io/notes/how-to-use-packages/","tags":["flutter","packages"],"title":"如何使用包"},{"categories":["programming"],"contents":"本页列出了一些 Dart 开发者发布的最流行和最有用的包。要找到更多的软件包\u0026ndash;也可以搜索核心库\u0026ndash;请使用 pub.dev 网站。\n常用的软件包可分为三类:\n 通用包 扩展 Dart 核心库的包 特定的包  通用包 以下包对各种项目都很有用:\n   包 描述 常用的 API     archive 对各种档案和压缩格式进行编码和解码。 Archive, ArchiveFile, TarEncoder, TarDecoder, ZipEncoder, ZipDecoder   characters 对用户感知的字符进行字符串操作(Unicode 字符簇) String.characters, Characters, CharacterRange   http 一组高级的函数和类，使其易于消费 HTTP 资源 delete(), get(), post(), read()   intl 国际化和本地化设施，支持复数和性别、日期和数字格式化和解析以及双向文本 Bidi, DateFormat, MicroMoney, TextDirection   json_serializable 一个易于使用的代码生成包。更多信息，请参阅 JSON 支持 @JsonSerializable   logging 一个可配置的机制，为你的应用程序添加消息记录 LoggerHandler, Level, LogRecord   mockito 一个在测试中模拟对象的流行框架。如果你正在编写依赖注入的测试，特别有用。与 test 包一起使用 Answering, Expectation, Verification   path 操作不同类型路径的常用操作。更多信息，请参见拆包: path absolute(), basename(), extension(), join(), normalize(), relative(), split()   quiver 实用工具，使 Dart 核心库的使用更加方便。Quiver 提供额外支持的一些库包括 async、cache、collection、core、iterables、pattern 和 测试 CountdownTimer (quiver.async); MapCache (quiver.cache); MultiMap, TreeSet (quiver.collection); EnumerateIterable (quiver.iterables); center(), compareIgnoreCase(), isWhiteSpace() (quiver.strings)   shelf Dart 的 Web 服务器中间件。Shelf 使它能轻松地创建和组成 Web 服务器，以及 Web 服务器的一部分 Cascade, Pipeline, Request, Response, Server   stack_trace 用于解析、检查和处理由底层 Dart 实现产生的堆栈痕迹的方法。还提供了以比原生 StackTrace 实现更可读的格式生成堆栈跟踪的字符串表示的函数, 更多信息，请参见拆包: stack_trace Trace.current(), Trace.format(), Trace.from()   stagehand 一个 Dart 项目生成器。当你创建一个新的应用程序时，WebStorm 和 IntelliJ 使用 Stagehand 模板，但你也可以从命令行使用模板 一般通过 IDE 或 stagehand 命令来使用   test 在 Dart 中编写和运行测试的标准方法 expect(), group(), test()   yaml YAML 解析器 loadYaml(), loadYamlStream()    扩展 Dart 核心库的包 以下每个包都建立在一个核心库的基础上，增加了功能并填补了缺失的功能:\n   包 描述 常用的 API     async 在 dart:async 的基础上进行了扩展，增加了实用类来处理异步计算。更多信息，请参见拆包: async 第1部分、第2部分和第3部分 AsyncMemoizer, CancelableOperation, FutureGroup, LazyStream, Result, StreamCompleter, StreamGroup, StreamSplitter   collection 在 dart:collection 的基础上进行了扩展，增加了实用函数和类，使处理集合的工作变得更加容易。更多信息，请看拆包：collection Equality, CanonicalizedMap, MapKeySet, MapValueSet, PriorityQueue, QueueList   convert 在 dart:convert 的基础上，增加了编码器和解码器，用于在不同的数据表现形式之间进行转换。其中一种数据表示方式是百分比编码，也被称为 URL 编码 HexDecoder, PercentDecoder   io 包含两个库，ansi和io，以简化对文件、标准流和进程的处理。使用 ansi 库可以自定义终端输出。io 库有处理进程、stdin 和文件复制的 API copyPath(), isExecutable(), ExitCode, ProcessManager, sharedStdIn    专用包 下面是一些寻找比较专业的包的技巧，比如手机的包(Flutter)和网页开发的包。\nFlutter 包 请看 Flutter 网站上的使用包。或者使用 pub.dev 网站搜索 Flutter 包。\n网络包 参见网络库和包。或者使用 pub.dev 站点搜索 web 包。\n命令行和服务器软件包 参见命令行和服务器库和包。或者使用 pub.dev 站点搜索其他包。\n","permalink":"https://ohmyweekly.github.io/notes/commonly-used-packages/","tags":["flutter","packages"],"title":"常用的包"},{"categories":["programming"],"contents":"async-await\n这个 codelab 教你如何使用 futures、async 和 await 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\n要想从这个 codelab 中获得最大的收获，你应该具备以下条件。\n 掌握基本的 Dart 语法 有用其他语言编写异步代码的经验。  这个 codelab 包括以下材料。\n 如何以及何时使用 async 和 await 关键字。 使用 async 和 await 如何影响执行顺序。 如何在 async 函数中使用 try-catch 表达式处理异步调用中的错误。  估计完成这个代码实验的时间。40-60分钟\n注意：本页面使用嵌入式 DartPads 来显示示例和练习。如果你看到的是空框而不是 DartPads，请转到 DartPad 故障排除页面。\n为什么异步代码很重要 异步操作让你的程序在等待另一个操作完成时完成工作。下面是一些常见的异步操作。\n 通过网络获取数据。 写入数据库。 从文件中读取数据。  要在 Dart 中执行异步操作，你可以使用 Future 类以及 async 和 await 关键字。\n例子: 错误地使用异步函数 下面的例子显示了使用异步函数(fetchUserOrder())的错误方法。稍后你将使用 async 和 await 来修复这个例子。在运行这个例子之前，试着发现这个问题-你认为输出会是什么？\n// This example shows how *not* to write asynchronous Dart code.  String createOrderMessage() { var order = fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); void main() { print(createOrderMessage()); } 下面是这个例子为什么不能打印 fetchUserOrder() 最终产生的值。\n fetchUserOrder() 是一个异步函数，在延迟之后，提供一个描述用户订单的字符串：\u0026ldquo;Large Latte\u0026rdquo;。 为了得到用户的订单，createOrderMessage() 应该调用 fetchUserOrder()，并等待其完成。由于 createOrderMessage() 没有等待 fetchUserOrder() 完成，createOrderMessage() 无法获得 fetchUserOrder() 最终提供的字符串值。 取而代之的是，createOrderMessage() 得到的是待完成工作的表示：一个未完成的未来。您将在下一节了解更多关于未来的信息。 因为 createOrderMessage() 没有得到描述用户订单的值，所以这个例子没有打印 \u0026ldquo;Large Latte\u0026rdquo; 到控制台，而是打印 \u0026ldquo;Your order is: Instance of \u0026lsquo;_Future\u0026rsquo;\u0026quot;。  在接下来的章节中，你将学习关于 futures 和关于使用 futures 的工作（使用 async 和 await），这样你就能编写必要的代码，使 fetchUserOrder() 向控制台打印所需的值(\u0026ldquo;Large Latte\u0026rdquo;)。\n关键术语:\n 同步操作: 同步操作会阻止其他操作的执行，直到它完成。 同步函数：同步函数只执行同步操作。 异步操作：异步操作一旦启动，就允许其他操作在它完成之前执行。 异步函数：异步函数至少执行一个异步操作，也可以执行同步操作。  什么是未来？ future(小写 \u0026ldquo;f\u0026rdquo;)是 Future（大写 \u0026ldquo;F\u0026rdquo;）类的一个实例。一个 future 代表异步操作的结果，可以有两种状态：未完成或完成。\n注意：未完成是一个 Dart 术语，指的是一个未来的状态，在它产生一个值之前。\n未完成的 当你调用一个异步函数时，它会返回一个未完成的未来。这个未来正在等待函数的异步操作完成或抛出一个错误。\n已完成的 如果异步操作成功，未来就以一个值完成。否则它将以一个错误完成。\n用一个值来完成 类型为 Future\u0026lt;T\u0026gt; 的 future 用一个类型为 T 的值来完成。例如，一个类型为 Future\u0026lt;String\u0026gt; 的 future 会产生一个字符串值。如果一个 future 没有产生一个可用的值，那么 future 的类型是 Future\u0026lt;void\u0026gt;。\n用一个错误来完成 如果函数执行的异步操作因为任何原因而失败，future 就会以错误的方式完成。\n例子: 介绍 future 在下面的例子中，fetchUserOrder() 返回一个在打印到控制台后完成的 future。因为它没有返回一个可用的值，fetchUserOrder() 的类型是 Future\u0026lt;void\u0026gt;。在运行这个例子之前，试着预测一下哪个会先打印：\u0026ldquo;Large Latte\u0026rdquo; 或 \u0026ldquo;Fetching user order\u0026hellip;\u0026quot;。\nFuture\u0026lt;void\u0026gt; fetchUserOrder() { // Imagine that this function is fetching user info from another service or database.  return Future.delayed(Duration(seconds: 2), () =\u0026gt; print(\u0026#39;Large Latte\u0026#39;)); } void main() { fetchUserOrder(); print(\u0026#39;Fetching user order...\u0026#39;); } 在前面的例子中，尽管 fetchUserOrder() 在第8行的 print() 调用之前执行，控制台还是在 fetchUserOrder() 的输出 (\u0026ldquo;Large Latte\u0026rdquo;) 之前显示了第8行的输出 (\u0026ldquo;Fetching user order\u0026hellip;\u0026quot;)。这是因为 fetchUserOrder() 在打印 \u0026ldquo;Large Latte\u0026rdquo; 之前会有延迟。\n例子: 完成时出现错误 运行下面的例子，看看未来如何完成一个错误。稍后你将学习如何处理错误。\nFuture\u0026lt;void\u0026gt; fetchUserOrder() { // Imagine that this function is fetching user info but encounters a bug  return Future.delayed(Duration(seconds: 2), () =\u0026gt; throw Exception(\u0026#39;Logout failed: user ID is invalid\u0026#39;)); } void main() { fetchUserOrder(); print(\u0026#39;Fetching user order...\u0026#39;); } 在这个例子中，fetchUserOrder() 完成时出现错误，表明用户ID无效。\n你已经学习了 future 和它们如何完成，但你如何使用异步函数的结果呢？在下一节中，你将学习如何使用 async 和 await 关键字来获取结果。\n快速回顾:\n 一个 Future\u0026lt;T\u0026gt; 实例会产生一个 T 类型的值。 如果一个 future 没有产生一个可用的值，那么 future 的类型是 Future\u0026lt;void\u0026gt;。 一个 future 可以处于两种状态之一：未完成或完成。 当你调用一个返回 future 的函数时，函数会把要做的工作排队，并返回一个未完成的 future。 当一个 future 的操作完成时，future 以一个值或以一个错误完成。  关键术语:\n Future: Dart Future 类。 future：Dart Future 类的一个实例。  使用 future：async 和 await async 和 await 关键字提供了一种声明式的方式来定义异步函数并使用它们的结果。在使用 async 和 await 时，请记住以下两个基本准则。\n 要定义一个异步函数，请在函数主体前添加 async。 await 关键字只能在 async 函数中使用。  下面是一个将 main() 从同步函数转换为异步函数的例子。\n首先，在函数体前添加 async 关键字:\nvoid main() async { ··· } 如果函数有声明的返回类型，那么更新类型为 Future\u0026lt;T\u0026gt;，其中 T 是函数返回的值的类型。如果函数没有明确返回值，那么返回类型为 Future\u0026lt;void\u0026gt;。\nFuture\u0026lt;void\u0026gt; main() async { ··· } 现在你已经有了一个 async 函数，你可以使用 await 关键字来等待一个 future 的完成:\nprint(await createOrderMessage()); 正如下面两个例子所显示的，async 和a wait 关键字导致异步代码看起来很像同步代码。唯一的区别在异步示例中突出显示，如果你的窗口足够宽，它就在同步示例的右边。\n示例：同步函数\nString createOrderMessage() { var order = fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is  // more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); void main() { print(\u0026#39;Fetching user order...\u0026#39;); print(createOrderMessage()); } Fetching user order... Your order is: Instance of _Future\u0026lt;String\u0026gt; 例子：异步函数\nFuture\u0026lt;String\u0026gt; createOrderMessage() async { var order = await fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is  // more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); Future\u0026lt;void\u0026gt; main() async { print(\u0026#39;Fetching user order...\u0026#39;); print(await createOrderMessage()); } Fetching user order... Your order is: Large Latte 异步示例在三个方面有所不同。\n createOrderMessage() 的返回类型从 String 变为 Future\u0026lt;String\u0026gt;。 async 关键字出现在 createOrderMessage() 和 main() 的函数体之前。 await 关键字出现在调用异步函数 fetchUserOrder() 和 createOrderMessage() 之前。  关键术语:\n async: 你可以在一个函数的主体前使用 async 关键字来标记它为异步函数。 async 函数: async 函数是一个标有 async 关键字的函数。 await：可以使用 await 关键字来获取异步表达式的完成结果。await 关键字只在 async 函数中起作用。  使用 async 和 await 的执行流程 一个异步函数在第一个 await 关键字之前是同步运行的。这意味着在一个 async 函数体中，第一个 await 关键字之前的所有同步代码都会立即执行。\n版本说明：在 Dart 2.0 之前，一个异步函数立即返回，而不会在异步函数体中执行任何代码。\n例子：在异步函数内执行。在异步函数中执行 运行下面的例子，看看如何在异步函数体中执行。你认为输出会是什么？\nFuture\u0026lt;void\u0026gt; printOrderMessage() async { print(\u0026#39;Awaiting user order...\u0026#39;); var order = await fetchUserOrder(); print(\u0026#39;Your order is: $order\u0026#39;); } Future\u0026lt;String\u0026gt; fetchUserOrder() { // Imagine that this function is more complex and slow.  return Future.delayed(Duration(seconds: 4), () =\u0026gt; \u0026#39;Large Latte\u0026#39;); } Future\u0026lt;void\u0026gt; main() async { countSeconds(4); await printOrderMessage(); } // You can ignore this function - it\u0026#39;s here to visualize delay time in this example. void countSeconds(int s) { for (var i = 1; i \u0026lt;= s; i++) { Future.delayed(Duration(seconds: i), () =\u0026gt; print(i)); } } 运行上例中的代码后，尝试将第2行和第3行反过来。\nvar order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); 注意到输出的时间发生了变化，现在 print('Awaiting user order') 出现在 printOrderMessage() 中第一个 await 关键字之后。\n练习: 练习使用 async 和 await 下面的练习是一个失败的单元测试，其中包含部分完成的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 main()。\n为了模拟异步操作，调用以下函数，这些函数是为你提供的。\n   函数 类型签名 描述     fetchRole() FuturefetchRole() 获取用户角色的简短描述。   fetchLoginAmount() FuturefetchLoginAmount() 获取用户的登录次数。    第1部分：reportUserRole()\n为 reportUserRole() 函数添加代码，使其执行以下操作。\n 返回一个以下列字符串完成的 future： \u0026quot;User role: \u0026lt;user role\u0026gt;\u0026quot;。  注意：你必须使用 fetchRole() 返回的实际值；复制和粘贴示例返回值不会使测试通过。 示例返回值: \u0026ldquo;User role: tester\u0026rdquo;   通过调用提供的函数 fetchRole() 获取用户角色。  第二部分：reportLogins()\n实现一个异步函数 reportLogins()，使其执行以下操作。\n 返回字符串 \u0026ldquo;Total number of logins: \u0026lt;# of logins\u0026gt;\u0026rdquo;。  注意：你必须使用 fetchLoginAmount() 返回的实际值；复制和粘贴示例返回值不会使测试通过。 reportLogins() 的返回值示例: \u0026quot;Total number of logins: 57\u0026quot;。   通过调用提供的函数 fetchLoginAmount() 来获取登录次数。  Future\u0026lt;String\u0026gt; reportUserRole() async { var username = await fetchRole(); return \u0026#39;User role: $username\u0026#39;; } Future\u0026lt;String\u0026gt; reportLogins() async { var logins = await fetchLoginAmount(); return \u0026#39;Total number of logins: $logins\u0026#39;; } 注意：如果你的代码通过了测试，你可以忽略信息级的消息。\n处理错误 要处理 async 函数中的错误，使用 try-catch:\ntry { var order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); } catch (err) { print(\u0026#39;Caught error: $err\u0026#39;); } 在一个 async 函数中，你可以像在同步代码中一样编写 try-catch 子句。\n例子：async 和 await 的 try-catch 子句 运行下面的例子，看看如何处理一个异步函数的错误。你认为输出会是什么？\nFuture\u0026lt;void\u0026gt; printOrderMessage() async { try { var order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); print(order); } catch (err) { print(\u0026#39;Caught error: $err\u0026#39;); } } Future\u0026lt;String\u0026gt; fetchUserOrder() { // Imagine that this function is more complex.  var str = Future.delayed( Duration(seconds: 4), () =\u0026gt; throw \u0026#39;Cannot locate user order\u0026#39;); return str; } Future\u0026lt;void\u0026gt; main() async { await printOrderMessage(); } 练习: 练习处理错误 下面的练习提供了使用异步代码处理错误的练习，使用上一节中描述的方法。为了模拟异步操作，你的代码将调用以下函数，该函数为你提供。\n| 函数 | 类型签名 | 描述 | | fetchNewUsername() | FuturefetchNewUsername() |\t返回你可以用来替换旧用户名的新用户名。|\n使用 async 和 await 来实现一个异步的 changeUsername() 函数，该函数执行以下操作。\n 调用提供的异步函数 fetchNewUsername() 并返回其结果。  changeUsername() 的返回值示例: \u0026ldquo;jane_smith_92\u0026rdquo;   捕获任何发生的错误并返回错误的字符串值。  你可以使用 toString() 方法对 Exceptions 和Errors 进行字符串化。    Future\u0026lt;String\u0026gt; changeUsername () async { try { return await fetchNewUsername(); } catch (err) { return err.toString(); } } 练习: 把所有的东西放在一起 现在是时候在最后一个练习中练习所学的知识了。为了模拟异步操作，本练习提供了异步函数 fetchUsername() 和 logoutUser():\n| 函数 | 类型签名 | 描述 | | fetchUsername() |\tFuturefetchUsername() | 返回与当前用户相关联的名称。 | | logoutUser()\t| FuturelogoutUser()\t| 执行当前用户的注销，并返回被注销的用户名。 |\n编写以下内容。\n第一部分：addHello()\n 编写一个函数 addHello()，它接受一个单一的 String 参数。 addHello() 返回它的 String 参数，前面加 \u0026lsquo;Hello\u0026rsquo;。 例如：addHello('Jon') 返回 \u0026lsquo;Hello Jon\u0026rsquo;。  第二部分：greetUser()\n 编写一个不接受参数的函数 greetUser()。 为了得到用户名，greetUser() 调用提供的异步函数 fetchUsername()。 greetUser() 通过调用 addHello() 为用户创建一个问候语，传递用户名，并返回结果。 例子: 如果 fetchUsername() 返回 \u0026lsquo;Jenny\u0026rsquo;, 那么 greetUser() 返回 \u0026lsquo;Hello Jenny\u0026rsquo;.  第三部分：sayGoodbye()\n  编写一个函数 sayGoodbye()，它的功能如下。\n 不接受任何参数 捕获任何错误。 调用所提供的异步函数 logoutUser().    如果 logoutUser() 失败，sayGoodbye() 返回任何你喜欢的字符串。\n  如果 logoutUser() 成功，sayGoodbye() 返回字符串 '\u0026lt;result\u0026gt; Thanks, see you next time'，其中 \u0026lt;result\u0026gt; 是调用 logoutUser() 返回的字符串值。\n  String addHello(user) =\u0026gt; \u0026#39;Hello $user\u0026#39;; Future\u0026lt;String\u0026gt; greetUser() async { var username = await fetchUsername(); return addHello(username); } Future\u0026lt;String\u0026gt; sayGoodbye() async { try { var result = await logoutUser(); return \u0026#39;$resultThanks, see you next time\u0026#39;; } catch (e) { return \u0026#39;Failed to logout user: $e\u0026#39;; } } 下一步是什么？ 恭喜你，你已经完成了 codelab 的学习！如果你还想了解更多，这里有一些下一步的建议。\n 玩玩 DartPad。 尝试另一个 codelab。 学习更多关于 futures 和异步的知识。  Streams tutorial: 学习如何使用异步事件的序列。 来自 Google 的 Dart视频: 观看一个或多个关于异步编码的视频。或者，如果你喜欢，阅读基于这些视频的文章。(从隔离和事件循环开始。)   获取 Dart SDK。  如果你对使用嵌入式 DartPads 感兴趣，就像这个 codelab 一样，请看教程中使用 DartPad 的最佳实践。\n","permalink":"https://ohmyweekly.github.io/notes/futures-async-await/","tags":["async","futures","await","dart"],"title":"异步编程：futures、async、await。"},{"categories":["programming"],"contents":"介绍 Flutter 是 Google 的 UI 工具包，用于从单一代码库中为手机、网页和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起工作，被世界各地的开发者和组织使用，并且是免费和开源的。\n在这个代码实验室中，你将创建一个简单的手机 Flutter 应用。如果你熟悉面向对象的代码和基本的编程概念-如变量、循环和条件, 那么你就可以完成这个 codelab。你不需要以前有 Dart、手机或 Web 编程的经验。\n你将在第1部分学到什么  如何编写一款在 iOS、Android 和 Web 上看起来很自然的 Flutter 应用？ Flutter 应用程序的基本结构。 寻找和使用包来扩展功能。 使用热重装来加快开发周期。 如何实现一个有状态的小组件。 如何创建一个无限的、懒加载的列表。  在这个 codelab 的第2部分中，你将添加交互性，修改应用程序的主题，并添加导航到新页面的能力(在 Flutter 中称为路由)。\n你将在第1部分中构建什么 你将实现一个移动应用，为一家创业公司生成建议的名字。用户可以选择和取消选择名字，保存最好的名字。代码一次懒惰地生成10个名字。随着用户的滚动，会生成更多的名字。用户可以滚动的范围没有限制。\n下面的 GIF 动画显示了应用程序在完成部分时的工作情况。\n设置你的 Flutter 环境 你需要两个软件来完成这个实验室-Flutter SDK和一个编辑器。(codelab 假设你使用 Android Studio，但你可以使用你的首选编辑器。)\n你可以通过使用以下任何设备来运行 codelab。\n 一个物理的 Android 或 iOS 设备连接到你的计算机并设置为开发者模式。 iOS 模拟器(需要安装 Xcode 工具) 安卓模拟器(需要在 Android Studio 中进行设置) 浏览器(调试时需要使用 Chrome 浏览器)  如果你想编译你的应用程序以在 web 上运行，你必须启用此功能（目前处于测试阶段）。要启用 web 支持，请使用以下说明。\nflutter channel beta flutter upgrade flutter config --enable-web 你只需要运行一次 config 命令。启用 Web 支持后，你创建的每个 Flutter 应用也会为 Web 编译。在你的 IDE 的设备下拉菜单下面，或者在命令行使用 flutter devices，你现在应该看到 Chrome 和 Web 服务器被列出。Chrome 设备会自动启动 Chrome。Web 服务器会启动一个托管应用程序的服务器，这样你就可以从任何浏览器加载它。在开发过程中使用 Chrome 设备，以便你可以使用 DevTools，而当你要在其他浏览器上进行测试时使用 Web 服务器。有关更多信息，请参阅使用 Flutter 构建 Web 应用程序和在 Web 上编写你的第一个 Flutter 应用程序。\n创建 Flutter 应用程序的启动器 通过使用创建应用程序中的说明来创建一个简单的、模板化的 Flutter 应用程序。输入 startup_namer(而不是 flutter_app)作为项目名称。您将修改启动器应用程序来创建完成的应用程序。\n提示：如果你在 IDE 中没有看到能够启动一个新的 Flutter 项目作为一个选项，那么请确保你已经安装了 Flutter 和 Dart 的插件。\n你将主要编辑 lib/main.dart，Dart 的代码就在这里。\n替换 lib/main.dart 的内容。 删除 lib/main.dart 中的所有代码，并用下面的代码替换，在屏幕中央显示 \u0026ldquo;Hello World\u0026rdquo;。\nimport \u0026#39;package:flutter/material.dart\u0026#39;; void main() =\u0026gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Welcome to Flutter\u0026#39;, home: Scaffold( appBar: AppBar( title: const Text(\u0026#39;Welcome to Flutter\u0026#39;), ), body: const Center( child: const Text(\u0026#39;Hello World\u0026#39;), ), ), ); } } 提示：当把代码粘贴到你的应用程序中时，缩进会变得歪斜。你可以用以下 Flutter 工具来解决。\n Android Studio/IntelliJ IDEA: 右键点击 Dart 代码，选择用 dartfmt 重格式代码。 VS code: 右键点击并选择格式化文档。 终端: 运行 flutter format \u0026lt;文件名\u0026gt;。  运行应用程序。您应该看到 Android，iOS 或 Web 输出，取决于您的设备。\n安卓系统:\niOS:\n小贴士：第一次在物理设备上运行时，可能需要一段时间来加载。之后，你可以使用热重载来快速更新。在支持的 IDE 中，如果应用正在运行，Save 也会执行热重载。当使用 flutter run 直接从控制台运行应用程序时，输入 r 来执行热重载。\n观察:\n 这个例子创建了一个 Material 应用。Material 是一种视觉设计语言，是移动和 Web 的标准。Flutter 提供了一套丰富的 Material 部件。 main 方法使用箭头(=\u0026gt;)符号。对单行函数或方法使用箭头符号。 应用程序扩展了 StatelessWidget，这使得应用程序本身成为一个组件。在 Flutter 中，几乎所有的东西都是组件，包括对齐、填充和布局。 Scaffold 组件来自 Material 库，它提供了一个默认的应用栏、一个标题和一个 body 属性，其中存放着主屏幕的组件树。组件子树可以相当复杂。 组件的主要工作是提供一个 build 方法，描述如何用其他低级组件来显示该组件。 本例的主体由包含 Text 子部件的 Center 部件组成。Center 组件将其组件子树对齐到屏幕的中心。  使用外部软件包 在这一步中，您将开始使用一个名为 english_words 的开源包，它包含了几千个最常用的英语单词，还有一些实用函数。\n你可以在 pub.dev 找到 english_words 包，以及许多其他开源包。\npubspec 文件管理着 Flutter 应用的资产。在 pubspec.yaml 中，附加 english_words: ^3.1.5(english_words 3.1.5 或更高)到依赖列表中。\ndependencies:flutter:sdk:fluttercupertino_icons:^0.1.2english_words:^3.1.5# add this line在 Android Studio 的编辑器视图中查看 pubspec 时，点击 Packages get。这将把包拉到你的项目中。你应该在控制台中看到以下内容。\nflutter packages get Running \u0026#34;flutter packages get\u0026#34; in startup_namer... Process finished with exit code 0 执行 Pub get 也会自动生成 \u0026ldquo;pubspec.lock\u0026rdquo; 文件，其中包含所有拉入项目的包的列表和它们的版本号。\n在 lib/main.dart 中，导入新包:\nimport \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:english_words/english_words.dart\u0026#39;; // Add this line. 当你输入时，Android Studio 会给你建议导入的库。然后，它将导入的字符串渲染成灰色，让你知道导入的库是未使用的（到目前为止）。\n接下来，你将使用 english_words 包来生成文本，而不是使用 \u0026ldquo;Hello World\u0026rdquo;。\n做以下修改。\nimport \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:english_words/english_words.dart\u0026#39;; void main() =\u0026gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); // Add this line.  return MaterialApp( title: \u0026#39;Welcome to Flutter\u0026#39;, home: Scaffold( appBar: AppBar( title: Text(\u0026#39;Welcome to Flutter\u0026#39;), ), body: Center( //child: Text(\u0026#39;Hello World\u0026#39;), // Replace this text...  child: Text(wordPair.asPascalCase), // With this text.  ), ), ); } } 提示: Pascal 大小写(也称为上驼形大小写)意味着字符串中的每个单词，包括第一个单词，都以大写字母开头。所以，uppercamelcase 就变成了 UpperCamelCase。\n如果应用程序正在运行，热重载来更新正在运行的应用程序。(在命令行中，你可以输入 r 来热重载。)每次点击热重载或保存项目时，你应该会在运行中的应用程序中看到一个不同的单词对，随机选择。这是因为单词对是在 build 方法里面生成的，每次 MaterialApp 需要渲染时，或者在 Flutter Inspector 中切换 Platform 时，都会运行该方法。\nAndroid:\niOS:\n有问题？ 如果您的应用程序没有正确运行，请查找错别字。如果需要，请使用以下链接中的代码来恢复正常。\n pubspec.yaml lib/main.dart  添加一个有状态的组件 无状态组件是不可改变的，这意味着它们的属性不能改变-所有值都是最终值。\n有状态组件维护的状态可能在组件的生命周期内发生变化。实现一个有状态的组件至少需要两个类。1) 一个 StatefulWidget，它可以创建一个 State 类的实例。StatefulWidget 对象本身是不可变的，可以被丢弃和再生，但 State 对象会在 widget 的生命周期内持久存在。\n在这一步骤中，您将添加一个有状态的组件 RandomWords，并创建其 State 类 _RandomWordsState。然后，您将在现有的 MyApp 无状态组件中使用 RandomWords 作为子类。\n为有状态组件创建模板代码。\n它可以放在 MyApp 以外的文件中的任何位置，但解决方案将其放在文件的底部。在 lib/main.dart 中，将光标定位在所有代码之后，输入回车键几次，重新开始一行。在你的 IDE 中，开始输入 stful。编辑器会询问你是否要创建一个 Stateful 的组件。按回车键接受。两个类的模板代码出现了，光标定位让你输入无状态组件的名称。\n输入 RandomWords 作为您的小组件的名称。\n正如您在下面的代码中所看到的，RandomWords 组件除了创建它的 State 类之外，几乎没有其他的功能。\n一旦您输入 RandomWords 作为有状态组件的名称，IDE 会自动更新相应的 State 类，将其命名为 _RandomWordState。默认情况下，State 类的名称是以下划线为前缀的。在标识符前加上下划线可以加强 Dart 语言的隐私性，也是 State 对象的最佳实践。\nIDE 也会自动更新 State 类以扩展 State\u0026lt;RandomWords\u0026gt;，表明你正在使用一个专门用于 RandomWords 的通用 State 类。应用程序的大部分逻辑都在这里-它为 RandomWords 组件维护状态。这个类保存了生成的词对列表，随着用户的滚动而无限增长，在本实验室的第二部分中，当用户通过切换心形图标从列表中添加或删除这些词对时，该类会对其进行收藏。\n现在两个类的外观如下:\nclass RandomWords extends StatefulWidget { @override _RandomWordsState createState() =\u0026gt; _RandomWordsState(); } class _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { @override Widget build(BuildContext context) { return Container(); } } 更新 _RandomWordsState 中的 build() 方法。\n用以下两行替换 return Container();:\nclass _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); // NEW  return Text(wordPair.asPascalCase); // NEW  } } 通过以下修改，删除 MyApp 中的文字生成代码:\nclass MyApp extends StatelessWidget { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); // DELETE  return MaterialApp( title: \u0026#39;Welcome to Flutter\u0026#39;, home: Scaffold( appBar: AppBar( title: Text(\u0026#39;Welcome to Flutter\u0026#39;), ), body: Center( //child: Text(wordPair.asPascalCase), // REPLACE with...  child: RandomWords(), // ...this line  ), ), ); } } 热重载应用程序。应用程序应该像以前一样，每次热重载或保存应用程序时都会显示一个单词配对。\n提示：如果您在热重载时看到警告，表明您可能需要重新启动应用程序，您应该考虑重新启动应用程序。这可能是一个假阳性，但重启可以确保您的更改反映在应用程序的 UI 中。\n遇到问题了？ 如果您的应用程序没有正确运行，您可以使用以下链接中的代码来恢复正常。\n lib/main.dart  创建一个无限滚动的 ListView 在这一步中，您将展开 _RandomWordsState 来生成并显示单词配对列表。随着用户的滚动，列表（显示在 ListView 小组件中）会无限增长。ListView 中的构建器工厂构造函数允许你按需懒惰地构建一个列表视图。\n在 _RandomWordState 类中添加一些状态变量。\n增加一个 _suggestions 列表，用于保存建议的单词配对。另外，添加一个 _biggerFont 变量，用于使字体大小变大。\nclass _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { final List\u0026lt;WordPair\u0026gt; _suggestions = \u0026lt;WordPair\u0026gt;[]; // NEW  final TextStyle _biggerFont = const TextStyle(fontSize: 18); // NEW  ... } 接下来，你将在 _RandomWordsState 类中添加一个 _buildSuggestions() 函数。这个方法可以构建显示建议词对的 ListView。\nListView 类提供了一个构建器属性 itemBuilder，它是一个工厂构建器和回调函数，指定为一个匿名函数。两个参数被传递给函数\u0026ndash;BuildContext 和行迭代器 i。迭代器从0开始，每次调用函数时递增，每一个建议的单词配对都会递增一次。这个模型允许建议列表在用户滚动时继续增长。\n添加整个 _buildSuggestions 函数。\n在 _RandomWordsState 类中，添加以下函数，如果你喜欢，请删除注释:\nWidget _buildSuggestions() { return ListView.builder( padding: const EdgeInsets.all(16), // The itemBuilder callback is called once per suggested  // word pairing, and places each suggestion into a ListTile  // row. For even rows, the function adds a ListTile row for  // the word pairing. For odd rows, the function adds a  // Divider widget to visually separate the entries. Note that  // the divider may be difficult to see on smaller devices.  itemBuilder: (BuildContext _context, int i) { // Add a one-pixel-high divider widget before each row  // in the ListView.  if (i.isOdd) { return Divider(); } // The syntax \u0026#34;i ~/ 2\u0026#34; divides i by 2 and returns an  // integer result.  // For example: 1, 2, 3, 4, 5 becomes 0, 1, 1, 2, 2.  // This calculates the actual number of word pairings  // in the ListView,minus the divider widgets.  final int index = i ~/ 2; // If you\u0026#39;ve reached the end of the available word  // pairings...  if (index \u0026gt;= _suggestions.length) { // ...then generate 10 more and add them to the  // suggestions list.  _suggestions.addAll(generateWordPairs().take(10)); } return _buildRow(_suggestions[index]); } ); } _buildSuggestions 函数对每个词对调用一次 _buildRow。该函数在 ListTile 中显示每一个新的词对，这使得你可以在第2部分中使行更有吸引力。\n在 _RandomWordsState 中添加一个 _buildRow 函数。\nWidget _buildRow(WordPair pair) { return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), ); } 更新 _RandomWordsState 的构建方法。\n将其改为使用 _buildSuggestions()，而不是直接调用单词生成库。(Scaffold 实现了基本的 Material Design 视觉布局。)\n@override Widget build(BuildContext context) { //final wordPair = WordPair.random(); // Delete these...  //return Text(wordPair.asPascalCase); // ... two lines.  return Scaffold ( // Add from here...  appBar: AppBar( title: Text(\u0026#39;Startup Name Generator\u0026#39;), ), body: _buildSuggestions(), ); // ... to here.  } 更新 MyApp 的构建方法，更改标题，删除 AppBar，并将 home 属性改为 RandomWords 部件。\n@override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Startup Name Generator\u0026#39;, home: RandomWords(), ); } 重新启动应用程序。无论你滚动多远，你都应该看到一个单词配对的列表。\nAndroid:\niOS:\n遇到问题了？ 如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。\n lib/main.dart  今后的步骤 恭喜你！\n你已经完成了这个代码实验室的第一部分! 如果你想扩展这款应用，请进入第二部分，你将对应用进行如下修改。\n 增加互动性 增加导航到新路由的功能。 修改主题颜色。  当第2部分完成后，应用程序将是这样的：\n其他后续步骤 通过以下资源了解更多关于 Flutter SDK 的信息。\n Flutter 中的布局 增加互动性教程 组件介绍 为 Android 开发者提供的 Flutter 针对 React Native 开发者的 Flutter Web 开发人员的 Flutter Flutter YouTube 频道  其他资源包括以下几点:\n 用 Flutter 构建本地移动应用 从 Java 到 Dart codelab Flutter cookbook 融入 Dart 的 Bootstrap：了解更多关于这门语言的信息  同时，与 Flutter 社区联系起来!\n","permalink":"https://ohmyweekly.github.io/notes/write-your-first-flutter-app/","tags":["flutter","app"],"title":"编写你的第一个 Flutter 应用，第一部分"},{"categories":["programming"],"contents":"介绍 Flutter 是 Google 的 UI 工具包，用于从单一代码库中为移动、Web 和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起工作，被世界各地的开发者和组织使用，并且是免费和开源的。\n在这个代码实验室中，您将扩展一个基本的、移动的 Flutter 应用程序，以包含交互性。您还将创建一个用户可以导航到的第二个页面（称为路由）。最后，您将修改应用程序的主题（颜色）。这个代码实验室扩展了第1部分，在这部分中，你将创建一个无限的懒惰加载的列表，但如果你想从第2部分开始，我们将提供起始代码。\n你将在第二部分学到什么  如何编写一款在 iOS、Android 和 Web 上看起来很自然的 Flutter 应用？ 如何使用热重装，加快开发周期？ 如何为有状态的 widget 添加交互性？ 如何创建并导航到第二个屏幕？ 如何使用主题来改变应用程序的外观？  你将在第二部分建立什么 您将从一个简单的移动应用程序开始，为创业公司生成一个无尽的建议名称列表。在代码实验室结束时，您的最终用户可以选择和取消选择名称，保存最好的名称。点击应用栏右上角的列表图标可以导航到一个新的页面（称为路由），该页面只列出了最喜欢的名字。\n下面的 GIF 动画显示了完成的应用程序将如何工作。\n设置您的 Flutter 环境 如果你还没有完成第1部分，请看设置你的 Flutter 环境，在编写你的第一个Flutter应用，第1部分，设置你的 Flutter 开发环境。\n获取启动应用程序 如果你已经完成了这个 codelab 的第一部分，你已经有了启动应用程序，startup_namer。你可以进行下一步。\n如果你没有 startup_namer，不要害怕，你可以使用下面的说明得到它。\n使用创建应用程序中的说明创建一个简单的模板化 Flutter 应用程序。将项目命名为 startup_namer（而不是 flutter_app）。\n删除 lib/main.dart 中的所有代码。用这个文件中的代码替换，它显示了一个无限的，懒惰加载的建议启动名称列表。\n更新 pubspec.yaml，加入英文单词包。\ndependencies:flutter:sdk:fluttercupertino_icons:^0.1.2english_words:^3.1.5//NEW英文单词包会生成一对随机的单词，作为潜在的启动名称。\n在 Android Studio 的编辑器视图中查看 pubspec 时，点击右上角的 Pub get，这将包拉到你的项目中。你应该在控制台中看到以下内容:\nflutter pub get Running \u0026#34;flutter pub get\u0026#34; in startup_namer... Process finished with exit code 0 运行该应用。\n随意滚动，查看持续供应的拟创业公司名称。\n将图标添加到列表中 在这一步中，你将为每一行添加心形图标。在下一步中，您将使它们可点击并保存收藏夹。\n在 _RandomWordsState 中添加一个 _saved Set。这个 Set 存储了用户收藏的单词配对。Set 比 List 更受欢迎，因为一个正确实现的 Set 不允许重复的条目。\nclass _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { final _suggestions = \u0026lt;WordPair\u0026gt;[]; final _saved = Set\u0026lt;WordPair\u0026gt;(); // NEW  final _biggerFont = TextStyle(fontSize: 18.0); ... } 在 _buildRow 函数中，添加一个 alreadySaved 检查，以确保一个单词配对还没有被添加到收藏夹中。\nWidget _buildRow(WordPair pair) { final alreadySaved = _saved.contains(pair); // NEW  ... } 在 _buildRow() 中，你还将为 ListTile 对象添加心形图标以实现收藏夹。在下一步中，你将添加与心形图标交互的功能。\n在文本之后添加图标，如下图所示。\nWidget _buildRow(WordPair pair) { final alreadySaved = _saved.contains(pair); return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), trailing: Icon( // NEW from here...  alreadySaved ? Icons.favorite : Icons.favorite_border, color: alreadySaved ? Colors.red : null, ), // ... to here.  ); } 热重新加载应用程序。\n你现在应该看到每一行都有空心，但它们还没有互动。\nAndroid\niOS\n遇到问题了？ 如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。\n lib/main.dart  增加互动性 在这一步中，你将使心形图标可以点击。当用户点击列表中的一个条目，切换其收藏状态时，该词对就会从一组保存的收藏夹中添加或删除。\n要做到这一点，你将修改 _buildRow 函数。如果一个词条已经被添加到收藏夹中，再次点击它就会将其从收藏夹中删除。当一个磁贴被点击后，函数会调用 setState() 来通知框架状态已经改变。\n在 _buildRow 方法中加入 onTap，如下图所示:\nWidget _buildRow(WordPair pair) { final alreadySaved = _saved.contains(pair); return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), trailing: Icon( alreadySaved ? Icons.favorite : Icons.favorite_border, color: alreadySaved ? Colors.red : null, ), onTap: () { // NEW lines from here...  setState(() { if (alreadySaved) { _saved.remove(pair); } else { _saved.add(pair); } }); }, // ... to here.  ); } 提示：在 Flutter 的反应式框架中，调用 setState() 会触发对 State 对象的 build() 方法的调用，导致 UI 的更新。\n热重载应用。\n你应该能够点击任何磁贴来收藏或不收藏该条目。点击瓷砖会产生一个隐含的从点击点发出的泼墨动画。\nAndroid\niOS\n遇到问题了？ 如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。\n lib/main.dart  导航到一个新的屏幕 在这一步中，您将添加一个新的页面（在 Flutter 中称为路由），显示收藏夹。您将学习如何在主页路线和新路由之间进行导航。\n在 Flutter 中，Navigator 管理着一个包含应用程序路由的堆栈。将一个路由推到 Navigator 的堆栈上，会将显示更新到该路由。从 Navigator 的堆栈中弹出一条路由，会将显示返回到之前的路由。\n接下来，您将在 _RandomWordsState 的 build 方法中为 AppBar 添加一个列表图标。当用户点击列表图标时，一个包含保存的收藏夹的新路由会被推送到 Navigator，显示图标。\n在 build 方法中添加图标及其对应的操作:\nclass _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { ... @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\u0026#39;Startup Name Generator\u0026#39;), actions: [ // NEW lines from here...  IconButton(icon: Icon(Icons.list), onPressed: _pushSaved), ], // ... to here.  ), home: RandomWords(), ); } ... } 提示：一些小组件属性会取一个小组件(child)，而其他属性，如 action，会取一组小组件(children), 如方括号([])所示。\n在 _RandomWordsState 类中添加一个 _pushSaved() 函数。\nvoid _pushSaved() { } 热重新加载应用程序。列表图标出现在应用栏中。点击它还没有任何作用，因为 _pushSaved 函数是空的。\n接下来，你将建立一条路由，并将其推送到 Navigator 的栈中。这个操作会改变屏幕以显示新的路由。新页面的内容是在 MaterialPageRoute 的构建器属性中以匿名函数的方式构建的。\n调用 Navigator.push，如下图所示，它将路由推送到 Navigator 的堆栈中。IDE 会抱怨无效代码，但你会在下一节中解决这个问题。\nvoid _pushSaved() { Navigator.of(context).push( ); } 接下来，你将添加 MaterialPageRoute 和它的构建器。现在，添加生成 ListTile 行的代码。ListTile 的 divideTiles() 方法在每个 ListTile 之间增加了水平间距。被划分的变量持有通过方便函数 toList() 转换为列表的最终行。\n添加代码，如下面的代码片段所示:\nvoid _pushSaved() { Navigator.of(context).push( MaterialPageRoute\u0026lt;void\u0026gt;( // NEW lines from here...  builder: (BuildContext context) { final tiles = _saved.map( (WordPair pair) { return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), ); }, ); final divided = ListTile.divideTiles( context: context, tiles: tiles, ).toList(); return Scaffold( appBar: AppBar( title: Text(\u0026#39;Saved Suggestions\u0026#39;), ), body: ListView(children: divided), ); }, // ...to here.  ), ); } } builder 属性返回一个 Scaffold，包含名为 SavedSuggestions 的新路由的应用栏。新路由的主体由一个包含 ListTiles 行的 ListView 组成。每一行都由一个分隔符隔开。\n热重载应用。将一些选择收藏起来，然后点击应用栏中的列表图标。新的路由出现，包含收藏夹。请注意，Navigator 在应用栏中增加了一个\u0026quot;返回\u0026quot;按钮。你不必明确地实现 Navigator.pop。点击\u0026quot;返回\u0026quot;按钮就可以返回到主路由。\niOS - Main route\niOS - Saved suggestions route\n遇到问题了？ 如果你的应用程序没有正确运行，那么你可以使用下面链接中的代码来回到正轨。\n lib/main.dart  使用主题改变用户界面 在这一步中，您将修改应用程序的主题。主题控制你的应用程序的外观和感觉。您可以使用默认主题，这取决于物理设备或模拟器，或者自定义主题以反映您的品牌。\n您可以通过配置 ThemeData 类轻松更改应用程序的主题。应用程序使用默认主题，但你会将应用程序的主色调改为白色。\n在 MyApp 类中更改颜色:\nclass MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Startup Name Generator\u0026#39;, theme: ThemeData( // Add the 3 lines from here...  primaryColor: Colors.white, ), // ... to here.  home: RandomWords(), ); } } 热重载应用。现在整个背景都是白色的，甚至应用栏也是白色的。\n作为一个练习，使用 ThemeData 来改变 UI 的其他方面。Material 库中的 Colors 类提供了许多你可以玩的颜色常量。热重载使得对 UI 的实验变得快速而简单。\nAndroid\niOS\n遇到问题了？ 如果你已经偏离了轨道，那么使用下面链接中的代码来查看最终应用的代码。\n= lib/main.dart\n做得很好！ 你写了一个交互式的 Flutter 应用，可以在 iOS 和 Android 上运行，具体做法如下\n 编写 Dart 代码。 使用热重载来加快开发周期。 实现一个有状态的 widget，为你的应用添加交互性。 创建途径并添加在原途径和新途径之间移动的逻辑。 学习如何使用主题改变你的应用程序的 UI 外观。  今后的步骤 从以下资源中了解更多关于 Flutter SDK 的信息。\n Flutter 中的布局 增加互动性教程 组件介绍 为 Android 开发者提供的 Flutter 针对 React Native 开发者的 Flutter Web 开发人员的 Flutter Flutter YouTube 频道  其他资源包括以下几点:\n 用 Flutter 构建本地移动应用 从 Java 到 Dart codelab Flutter cookbook 融入 Dart 的 Bootstrap：了解更多关于这门语言的信息  同时，与 Flutter 社区联系起来!\n","permalink":"https://ohmyweekly.github.io/notes/write-your-first-flutter-app-part-two/","tags":["flutter","app"],"title":"编写你的第一个 Flutter 应用，第二部分"},{"categories":null,"contents":"毕竟谁人终得鹿, 不如终日梦为鱼。\n友情链接  ohmycloud ✔ ohmycloudy ✔ ohmysummer ✔ ohmyshunny ✔ ohmysunny ✔ ohmyraku ✔ ohmypanda ✔ ohmyweekly ✔ rakulang ✔ ","permalink":"https://ohmyweekly.github.io/posts/about/","tags":null,"title":"第一篇日志"},{"categories":["programming"],"contents":"重要的概念 与 Java 不同，Dart 没有关键字 \u0026ldquo;public\u0026rdquo;, \u0026ldquo;protected\u0026rdquo; 和 \u0026ldquo;private\u0026rdquo;。 如果标识符以下划线（_）开头，则它相对于库是私有的。 有关更多信息，参考库和可见性。\n变量 var name = \u0026#39;Bob\u0026#39;; // 类型推断  dynamic name = \u0026#39;Bob\u0026#39;; // 动态类型 String name = \u0026#39;Bob\u0026#39;; // 显式声明 默认值 未初始化的变量默认值是 null。即使变量是数字, 类型默认值也是 null, 因为在 Dart 中一切都是对象，数字类型也不例外。\nint lineCount; assert(lineCount == null); final 和 const 使用 final 关键字声明的变量, 其值只能被设置一次, 使用 const 关键字声明的变量, 其值在编译时就已固定:\nfinal name = \u0026#39;Bob\u0026#39;; // 不使用类型注解 final String nickname = \u0026#39;Bobby\u0026#39;; name = \u0026#39;Alice\u0026#39;; // Error: final 变量只能被设置一次 const 声明一个在编译时就固定不变的值, 例如数字字面量、字符串字面量:\nconst bar = 1000000; // 压力单位(dynes/cm2) const double atm = 1.01325 * bar; // 一个标准大气压强 内置类型 Dart 语言支持以下内置类型:\n   类型 字面量 对象     Number 2⁶³ -1    String \u0026lsquo;Hello\u0026rsquo;    Boolean true,false    List [1,2,3]    Set {\u0026lsquo;raku\u0026rsquo;,\u0026lsquo;perl\u0026rsquo;}    Map {\u0026lsquo;lan\u0026rsquo;: \u0026lsquo;raku\u0026rsquo;}    Rune \\u2665, \\u{1f600}    Symbol #dadix, #bar     ","permalink":"https://ohmyweekly.github.io/notes/dart/","tags":["dart","examples"],"title":"Dart 入门"},{"categories":["programming"],"contents":"这个代码实验室教你如何使用实现 Iterable类的集合-例如 List和 Set。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。\n使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\n要想从这个 codelab 中获得最大的收获，你应该具备基本的 Dart 语法知识。\n本课程包括以下内容。\n 如何读取一个 Iterable 的元素。 如何检查一个 Iterable 的元素是否满足一个条件。 如何过滤一个 Iterable 的内容。 如何将一个 Iterable 的内容映射到不同的值。  估计完成这个代码实验所需的时间: 60分钟。\n什么是集合? 集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。\n集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:\n List: 用来通过索引读取元素。 Set: 用于包含只能出现一次的元素。 Map：用于通过键来读取元素。  什么是Iterable? Iterable 是一个元素的集合，它可以被依次访问。\n在 Dart 中，Iterable 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 List 或 Set 来创建一个新的 Iterable。\nList 和 Set 都是 Iterable，所以它们和 Iterable 类有相同的方法和属性。\nMap 在内部使用不同的数据结构，这取决于它的实现。例如，HashMap 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 Map 的 entries 或 values 属性，Map 的元素也可以作为 Iterable 对象读取。\n这个例子显示了一个 int 的 List，它也是一个 int 的 Iterable:\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; 与 List 的区别在于，使用 Iterable，你无法保证按索引读取元素的效率。Iterable 与 List 相比，没有 [] 操作符。\n例如，考虑以下代码，这是无效的:\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; int value = iterable[1]; 如果你用 [] 读取元素，编译器会告诉你 '[]' 这个运算符没有为 Iterable 类定义，这意味着在这种情况下你不能使用 [index]。\n你可以用 elementAt() 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; int value = iterable.elementAt(1); 继续下一节，了解更多关于如何访问 Iterable 的元素。\n读取元素 你可以使用 for-in 循环，依次读取一个迭代元素。\n例子: 使用 for-in 循环 下面的例子展示了如何使用 for-in 循环读取元素。\nvoid main() { var iterable = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; for (var element in iterable) { print(element); } } 在幕后，for-in 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 for-in 更容易阅读和理解，而且不容易出错。\n关键术语:\n Iterable: Dart Iterable 类。 Iterator: for-in 用来从一个 Iterable 对象中读取元素的对象。 for-in 循环: 从一个 Iterable 对象中依次读取元素的简单方法。  例子：使用第一个和最后一个元素 在某些情况下，你只想访问一个 Iterable 的第一个或最后一个元素。\n在 Iterable 类中，你不能直接访问元素，所以你不能调用 iterable[0] 来访问第一个元素。相反，你可以使用 first，它可以获取第一个元素。\n另外，使用 Iterable 类，你不能使用操作符 [] 来访问最后一个元素，但是你可以使用 last 属性。\n因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 last 可能会很慢。在一个空的 Iterable 上使用 first 或 last 会导致一个 StateError。\nvoid main() { Iterable iterable = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; print(\u0026#39;The first element is ${iterable.first}\u0026#39;); print(\u0026#39;The last element is ${iterable.last}\u0026#39;); } 在这个例子中，你看到了如何使用 first 和 last 来获得一个 Iterable 的第一个和最后一个元素。也可以找到满足条件的第一个元素。下一节将展示如何使用名为 firstWhere() 的方法来实现这一目标。\n例子: 使用 firstWhere() 你已经看到，你可以依次访问一个 Iterable 的元素，你可以很容易地得到第一个或最后一个元素。\n现在，你要学习如何使用 firstWhere() 来寻找满足某些条件的第一个元素。这个方法需要你传递一个谓词，它是一个函数，如果输入满足一定的条件就返回 true。\nString element = iterable.firstWhere((element) =\u0026gt; element.length \u0026gt; 5); 例如，如果你想找到第一个超过 5 个字符的 String，你必须传递一个当元素大小大于 5 时返回 true 的谓词。\n运行下面的例子，看看 firstWhere() 是如何工作的。你认为所有的函数都会给出相同的结果吗？\nbool predicate(String element) { return element.length \u0026gt; 5; } main() { var items = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;, \u0026#39;Lasagne\u0026#39;]; // You can find with a simple expression:  var element1 = items.firstWhere((element) =\u0026gt; element.length \u0026gt; 5); print(element1); // Or try using a function block:  var element2 = items.firstWhere((element) { return element.length \u0026gt; 5; }); print(element2); // Or even pass in a function reference:  var element3 = items.firstWhere(predicate); print(element3); // You can also use an `orElse` function in case no value is found!  var element4 = items.firstWhere( (element) =\u0026gt; element.length \u0026gt; 10, orElse: () =\u0026gt; \u0026#39;None!\u0026#39;, ); print(element4); } 在这个例子中，你可以看到三种不同的方式来写一个谓词。\n 作为一个表达式: 测试代码中有一行使用了箭头语法(=\u0026gt;)。 作为一个块: 测试代码在括号和返回语句之间有多行。 作为一个函数: 测试代码在一个外部函数中，作为参数传递给 firstWhere() 方法。  没有正确或错误的方式。使用最适合你的方式，并且让你的代码更容易阅读和理解。\n在这个例子中，firstWhereWithOrElse() 调用 firstWhere() 时，使用了可选的命名参数 orElse，它在没有找到元素时提供了一个替代方案。在这种情况下，返回文本 \u0026ldquo;None!\u0026quot;，因为没有元素满足提供的条件。\n注意：如果没有元素满足测试谓词，并且没有提供 orElse 参数，那么 firstWhere() 会抛出一个 StateError。\n快速回顾。\n Iterable 的元素必须按顺序访问。 迭代所有元素的最简单方法是使用 for-in 循环。 你可以使用 first 和 last getters 来获取第一个和最后一个元素。 你也可以用 firstWhere() 找到满足条件的第一个元素。 你可以把测试谓词写成表达式、块或函数。  关键术语。\n谓词: 当某个条件被满足时，返回 true 的函数。\n练习: 练习写一个测试谓词 下面的练习是一个失败的单元测试，其中包含一个部分完整的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 main()。\n这个练习介绍了 singleWhere() 这个方法的工作原理类似于 firstWhere()，但在这种情况下，它只期望 Iterable 中的一个元素满足谓词。如果 Iterable 中超过一个或没有元素满足谓词条件，那么该方法会抛出一个 StateError 异常。\nsingleWhere() 对整个 Iterable 进行步进，直到最后一个元素，如果 Iterable 是无限的或包含一个大的元素集合，这可能会引起问题。\n你的目标是实现满足以下条件的 singleWhere() 谓词。\n 元素包含字符 \u0026lsquo;a\u0026rsquo;。 该元素以字符 \u0026lsquo;M\u0026rsquo; 开头。  测试数据中的所有元素都是字符串，你可以查看类文档以获得帮助。\nString singleWhere(Iterable\u0026lt;String\u0026gt; items) { return items.singleWhere((element) =\u0026gt; element.startsWith(\u0026#39;M\u0026#39;) \u0026amp;\u0026amp; element.contains(\u0026#39;a\u0026#39;)); } 检查条件 在使用 Iterable 时，有时你需要验证一个集合的所有元素是否满足某些条件。\n你可能会想用 for-in 循环来写一个解决方案，比如这个:\nfor (var item in items) { if (item.length \u0026lt; 5) { return false; } } return true; 然而，你可以使用 every() 方法实现同样的目的:\nreturn items.every((element) =\u0026gt; element.length \u0026gt;= 5); 使用 every() 方法可以使代码更易读、更紧凑、更不容易出错。\n例子: 使用 any() 和 every() Iterable 类提供了两个可以用来验证条件的方法。\n any(): 如果至少有一个元素满足条件，则返回 true。 every(): 如果所有元素都满足条件，则返回 true。  运行这个练习来看看它们的作用。\nvoid main() { var items = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; if (items.any((element) =\u0026gt; element.contains(\u0026#39;a\u0026#39;))) { print(\u0026#39;At least one element contains \u0026#34;a\u0026#34;\u0026#39;); } if (items.every((element) =\u0026gt; element.length \u0026gt;= 5)) { print(\u0026#39;All elements have length \u0026gt;= 5\u0026#39;); } } 在这个例子中，any() 验证了至少一个元素包含字符 a，every() 验证了所有元素的长度等于或大于 5。\n运行代码后，尝试更改 any() 的谓词，使其返回 false:\nif (items.any((element) =\u0026gt; element.contains(\u0026#39;Z\u0026#39;))) { print(\u0026#39;At least one element contains \u0026#34;Z\u0026#34;\u0026#39;); } else { print(\u0026#39;No element contains \u0026#34;Z\u0026#34;\u0026#39;); } 你也可以使用 any() 来验证一个 Iterable 中没有元素满足某个条件。\n练习： 验证一个 Iterable 是否满足一个条件 下面的练习提供了使用前面例子中描述的 any() 和 every() 方法的练习。在本例中，你的工作对象是一组用户，由具有成员字段 age 的 User 对象表示。\n使用 any() 和 every() 实现两个函数。\n 第1部分：实现 anyUserUnder18()。  如果至少有一个用户是17岁或更小，则返回 true。   第2部分：实现 everyUserOver13()。  如果所有用户都是14岁或以上，则返回 true。    bool anyUserUnder18(Iterable\u0026lt;User\u0026gt; users) { return users.any((user) =\u0026gt; user.age \u0026lt; 18); } bool everyUserOver13(Iterable\u0026lt;User\u0026gt; users) { return users.every((user) =\u0026gt; user.age \u0026gt; 13); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n 虽然你可以使用 for-in 循环来检查条件，但还有更好的方法。 方法 any() 可以让你检查任何元素是否满足条件。 方法 every() 可以让你验证所有元素是否满足条件。  过滤 前面的章节介绍了 firstWhere() 或 singleWhere() 等方法，这些方法可以帮助你找到满足某个谓词的元素。\n但是如果你想找到满足某个条件的所有元素呢？你可以使用 where() 方法来实现。\nvar evenNumbers = numbers.where((number) =\u0026gt; number.isEven); 在这个例子中，numbers 包含一个有多个 int 值的 Iterable，where() 可以找到所有偶数的数字。\nwhere() 的输出是另一个 Iterable，你可以用它来迭代它或应用其他 Iterable 方法。在下一个例子中，where() 的输出直接在 for-in 循环中使用。\nvar evenNumbers = numbers.where((number) =\u0026gt; number.isEven); for (var number in evenNumbers) { print(\u0026#39;$numberis even\u0026#39;); } 例子: 使用 where() 运行这个例子，看看如何将 where() 与其他方法如 any() 一起使用。\nmain() { var evenNumbers = [1, -2, 3, 42].where((number) =\u0026gt; number.isEven); for (var number in evenNumbers) { print(\u0026#39;$numberis even.\u0026#39;); } if (evenNumbers.any((number) =\u0026gt; number.isNegative)) { print(\u0026#39;evenNumbers contains negative numbers.\u0026#39;); } // If no element satisfies the predicate, the output is empty.  var largeNumbers = evenNumbers.where((number) =\u0026gt; number \u0026gt; 1000); if (largeNumbers.isEmpty) { print(\u0026#39;largeNumbers is empty!\u0026#39;); } } 在这个例子中，where() 用于查找所有偶数，然后用 any() 检查结果是否包含负数。\n在本例的后面，再次使用 where() 来查找所有大于1000的数字，由于没有，结果是一个空的 Iterable。\n注意：如果没有元素满足 where() 中的谓词，那么该方法返回一个空的 Iterable。与 singleWhere() 或 firstWhere() 不同，where() 不会抛出 StateError 异常。\n例子: 使用 takeWhile 方法 takeWhile() 和 skipWhile() 也可以帮助你从一个 Iterable 中过滤元素。\n运行这个例子，看看 takeWhile() 和 skipWhile() 如何分割一个包含数字的 Iterable。\nmain() { var numbers = [1, 3, -2, 0, 4, 5]; var numbersUntilZero = numbers.takeWhile((number) =\u0026gt; number != 0); print(\u0026#39;Numbers until 0: $numbersUntilZero\u0026#39;); var numbersAfterZero = numbers.skipWhile((number) =\u0026gt; number != 0); print(\u0026#39;Numbers after 0: $numbersAfterZero\u0026#39;); } 输出如下:\nNumbers until 0: (1, 3, -2) Numbers after 0: (0, 4, 5) 在这个例子中，takeWhile() 返回一个 Iterable，它包含了通往满足谓词的元素的所有元素。另一方面， skipWhile() 返回一个 Iterable，同时跳过满足谓词的元素之前的所有元素。请注意，满足谓词的元素也会被包含在内。\n运行该示例后，将 takeWhile() 改为取元素，直到到达第一个负数。\nvar numbersUntilNegative = numbers.takeWhile((number) =\u0026gt; !number.isNegative); 注意，条件 number.isNegative 是用 ! 否定的。\n练习: 从列表中过滤元素 下面的练习提供了使用上一练习中的 User 类的 where() 方法的练习。\n使用 where() 实现两个函数。\n 第1部分：实现 filterUnder21()。  返回一个包含所有21岁以上用户的 Iterable。   第2部分：实现 findShortNamed()。  返回一个包含所有名字长度为 3 或更少的用户的 Iterable。    Iterable\u0026lt;User\u0026gt; filterUnder21(Iterable\u0026lt;User\u0026gt; users) { return users.where((user) =\u0026gt; user.age \u0026gt;= 21); } Iterable\u0026lt;User\u0026gt; findShortNamed(Iterable\u0026lt;User\u0026gt; users) { return users.where((user) =\u0026gt; user.name.length \u0026lt;= 3); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n 用 where() 过滤一个 Iterable 的元素。 where() 的输出是另一个 Iterable。 使用 takeWhile() 和 skipWhile() 来获取元素，直到满足一个条件或之后。 这些方法的输出可以是一个空的 Iterable。  Map 通过 map() 方法映射 Iterables，你可以在每个元素上应用一个函数，用一个新的元素替换每个元素。\nIterable\u0026lt;int\u0026gt; output = numbers.map((number) =\u0026gt; number * 10); 在这个例子中，Iterable 数字的每个元素都被乘以 10。\n你也可以使用 map() 将一个元素转换为不同的对象-例如，将所有 int 转换为 String，在下面的例子中可以看到。\nIterable\u0026lt;String\u0026gt; output = numbers.map((number) =\u0026gt; number.toString()); 注意：map() 返回一个懒惰的 Iterable，这意味着只有在元素被迭代时才会调用所提供的函数。\n例子: 使用 map 改变元素 运行这个例子，看看如何使用 map() 将一个 Iterable 中的所有元素乘以2，你认为输出会是什么？\nmain() { var numbersByTwo = [1, -2, 3, 42].map((number) =\u0026gt; number * 2); print(\u0026#39;Numbers: $numbersByTwo.\u0026#39;); } 练习: 映射到不同类型 在前面的例子中，你把一个 Iterable 的元素乘以2，输入和输出都是 int 的 Iterable。\n在这个练习中，你的代码接收一个 User的 Iterable，你需要返回一个包含用户名和年龄的字符串的 Iterable。\nIterable 中的每个字符串必须遵循这样的格式。'{name} is {age}'-例如 'Alice is 21'。\nIterable\u0026lt;String\u0026gt; getNameAndAges(Iterable\u0026lt;User\u0026gt; users) { return users.map((user) =\u0026gt; \u0026#39;${user.name}is ${user.age}\u0026#39;); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n map() 将一个函数应用于一个 Iterable 的所有元素。 map() 的输出是另一个 Iterable。 在 Iterable 被迭代之前，函数不会被计算。  练习: 把所有的东西放在一起 现在是练习所学知识的时候了，在最后一个练习中。\n这个练习提供了类 EmailAddress，它有一个构造函数，接收一个字符串。另一个提供的函数是 isValidEmailAddress()，它测试一个电子邮件地址是否有效。\n   构造函数/函数 类型签名 描述     EmailAddress() EmailAddress(String address) 为指定的地址创建一个 EmailAddress。   isValidEmailAddress() bool isValidEmailAddress(EmailAddress) 如果提供的 EmailAddress 有效，返回 true。    编写以下代码。\n第1部分：实现 parseEmailAddresses()。\n 编写函数 parseEmailAddresses()，它接收一个包含电子邮件地址的 Iterable\u0026lt;String\u0026gt;，并返回一个 Iterable\u0026lt;EmailAddress\u0026gt;。 使用方法 map() 从 String 映射到 EmailAddress。 使用构造函数 EmailAddress(String) 创建 EmailAddress 对象。  第二部分：实现 anyInvalidEmailAddress()。\n 编写函数 anyInvalidEmailAddress()，它接收一个 Iterable\u0026lt;EmailAddress\u0026gt;，并在 Iterable 中的任何 EmailAddress 无效时返回 true。 使用方法 any() 和提供的函 isValidEmailAddress()。  第3部分：实现 validEmailAddresses()。\n 编写函数 validEmailAddresses()，它接收一个 Iterable\u0026lt;EmailAddress\u0026gt; 并返回另一个只包含有效地址的 Iterable\u0026lt;EmailAddress\u0026gt;。 使用方法 where() 来过滤 Iterable\u0026lt;EmailAddress\u0026gt;。 使用提供的函数 isValidEmailAddress() 来评估一个 EmailAddress 是否有效。  Iterable\u0026lt;EmailAddress\u0026gt; parseEmailAddresses(Iterable\u0026lt;String\u0026gt; strings) { return strings.map((s) =\u0026gt; EmailAddress(s)); } bool anyInvalidEmailAddress(Iterable\u0026lt;EmailAddress\u0026gt; emails) { return emails.any((email) =\u0026gt; !isValidEmailAddress(email)); } Iterable\u0026lt;EmailAddress\u0026gt; validEmailAddresses(Iterable\u0026lt;EmailAddress\u0026gt; emails) { return emails.where((email) =\u0026gt; isValidEmailAddress(email)); } class EmailAddress { String address; EmailAddress(this.address); @override bool operator ==(Object other) =\u0026gt; identical(this, other) || other is EmailAddress \u0026amp;\u0026amp; runtimeType == other.runtimeType \u0026amp;\u0026amp; address == other.address; @override int get hashCode =\u0026gt; address.hashCode; @override String toString() { return \u0026#39;EmailAddress{address: $address}\u0026#39;; } } 下一步是什么? 恭喜你，你完成了 codelab 的学习! 如果你想了解更多，这里有一些下一步的建议。\n 玩玩 DartPad。 试试另一个代码实验。 阅读 Iterable API 参考资料，了解本 codelab 未涉及的方法。  ","permalink":"https://ohmyweekly.github.io/notes/dart-iterable-collections/","tags":["iterable","collection","dart"],"title":"Dart 可迭代集合"},{"categories":["programming"],"contents":"字符串插值 使用 ${expression} 将表达式的值放到字符串里面。如果表达式是一个标识符, 就可以省略 {}。\n下面是字符串插值的例子:\n   字符串 结果     \u0026lsquo;${3 + 2}\u0026rsquo; \u0026lsquo;5\u0026rsquo;   \u0026lsquo;${\u0026ldquo;word\u0026rdquo;.toUpperCase()}\u0026rsquo; \u0026lsquo;WORD\u0026rsquo;   \u0026lsquo;$myObject\u0026rsquo; The value of myObject.toString()    代码示例 下面的函数接收两个整数作为参数。使其返回一个包含两个整数的字符串，并以空格分隔。例如 stringify(2, 3) 应该返回 \u0026lsquo;2 3\u0026rsquo;。\nString stringify(int x, int y) { return \u0026#39;$x$y\u0026#39;; } Null 无感知操作符 Dart 提供了一些方便的操作符来处理可能为空的值。其中一个是 ??= 赋值运算符，只有当一个变量当前为空时，它才会给这个变量赋值:\nint a; // a 的初始值为 null a ??= 3; print(a); // 打印 3  a ??= 5; print(a); // 仍然打印 3 另一个 null-aware 操作符是 ??，它返回其左边的表达式，除非该表达式的值为 null，在这种情况下，它计算并返回其右边的表达式:\nprint(1 ?? 3); // 打印 1 print(null ?? 12); // 打印 12 代码示例 String foo = \u0026#39;a string\u0026#39;; String bar; // Unassigned objects are null by default.  // makes \u0026#39;a string\u0026#39; be assigned to baz. String baz = foo ?? bar; void updateSomeVars() { // makes \u0026#39;a string\u0026#39; be assigned to bar.  bar ??= \u0026#39;a string\u0026#39;; } 有条件的属性访问 要保护对对象的一个可能为空的属性或方法的访问，请在点(.)前加上一个问号(?):\nmyObject?.someProperty 上述代码等同于以下代码:\n(myObject != null) ? myObject.someProperty : null 你可以在一个表达式中把 ?. 的多个使用链接在一起:\nmyObject?.someProperty?.someMethod() 如果 myObject 或 myObject.someProperty 为 null，前面的代码将返回 null(并且从不调用 someMethod())。\n代码示例 尝试使用条件属性访问来完成下面的代码片段。\n// This method should return the uppercase version of `str` // or null if `str` is null. String upperCaseIt(String str) { // Try conditionally accessing the `toUpperCase` method here.  return str?.toUpperCase(); } 集合字面量 Dart 内置了对列表、映射和集合的支持。你可以使用字面量创建它们:\nfinal aListOfStrings = [\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;]; final aSetOfStrings = {\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;}; final aMapOfStringsToInts = { \u0026#39;one\u0026#39;: 1, \u0026#39;two\u0026#39;: 2, \u0026#39;three\u0026#39;: 3, } Dart 的类型推理可以为你分配类型给这些变量。在本例中，推断的类型是 List\u0026lt;String\u0026gt;、Set\u0026lt;String\u0026gt; 和 Map\u0026lt;String, int\u0026gt;。\n或者你可以自己指定类型:\nfinal aListOfInts = \u0026lt;int\u0026gt;[]; final aSetOfInts = \u0026lt;int\u0026gt;{}; final aMapOfIntToDouble = \u0026lt;int, double\u0026gt;{}; 当你用子类型的内容初始化一个列表，但仍然希望列表是 List\u0026lt;BaseType\u0026gt; 时，指定类型是很方便的:\nfinal aListOfBaseType = \u0026lt;BaseType\u0026gt;[SubType(), SubType()]; 代码示例 尝试将以下变量设置为指定的值。\n// Assign this a list containing \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, and \u0026#39;c\u0026#39; in that order: final aListOfStrings = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]; // Assign this a set containing 3, 4, and 5: final aSetOfInts = {3, 4, 5}; // Assign this a map of String to int so that aMapOfStringsToInts[\u0026#39;myKey\u0026#39;] returns 12: final aMapOfStringsToInts = {\u0026#39;myKey\u0026#39;: 12}; // Assign this an empty List\u0026lt;double\u0026gt;: final anEmptyListOfDouble = \u0026lt;double\u0026gt;[]; // Assign this an empty Set\u0026lt;String\u0026gt;: final anEmptySetOfString = \u0026lt;String\u0026gt;{}; // Assign this an empty Map of double to int: final anEmptyMapOfDoublesToInts = \u0026lt;double, int\u0026gt;{}; 箭头语法 你可能在 Dart 代码中看到过 =\u0026gt; 符号。这种箭头语法是一种定义函数的方式，该函数执行其右边的表达式并返回其值。\n例如，考虑这个对 List 类的 any() 方法的调用:\nbool hasEmpty = aListOfStrings.any((s) { return s.isEmpty; }); 这里有一个更简单的方法来写这个代码:\nbool hasEmpty = aListOfStrings.any((s) =\u0026gt; s.isEmpty); 代码示例 试着完成以下使用箭头语法的语句:\nclass MyClass { int _value1 = 2; int _value2 = 3; int _value3 = 5; // Returns the product of the above values:  int get product =\u0026gt; _value1 * _value2 * _value3; // Adds one to _value1:  void incrementValue1() =\u0026gt; _value1++; // Returns a string containing each item in the  // list, separated by commas (e.g. \u0026#39;a,b,c\u0026#39;):  String joinWithCommas(List\u0026lt;String\u0026gt; strings) =\u0026gt; strings.join(\u0026#39;,\u0026#39;); } 级联 要对同一对象进行一系列操作，可以使用级联(...)。我们都见过这样的表达式:\nmyObject.someMethod() 它在 myObject 上调用 someMethod()，表达式的结果是 someMethod() 的返回值。\n下面是同样的表达式，有一个级联:\nmyObject..someMethod() 虽然它仍然在 myObject 上调用 someMethod()，但表达式的结果并不是返回值-它是对 myObject 的引用! 使用级联，你可以将原本需要单独语句的操作串联起来。例如，请看以下代码:\nvar button = querySelector(\u0026#39;#confirm\u0026#39;); button.text = \u0026#39;Confirm\u0026#39;; button.classes.add(\u0026#39;important\u0026#39;); button.onClick.listen((e) =\u0026gt; window.alert(\u0026#39;Confirmed!\u0026#39;)); 有了级联，代码就会变得短得多，而且你也不需要 button 变量:\nquerySelector(\u0026#39;#confirm\u0026#39;) ..text = \u0026#39;Confirm\u0026#39; ..class.add(\u0026#39;important\u0026#39;) ..onClick.listen((e) =\u0026gt; window.alert(\u0026#39;Confirmed!\u0026#39;)); 代码示例 使用级联来创建一个单一的语句，将一个 BigObject 的 anInt、aString 和 aList 属性设置为 1、\u0026lsquo;String!\u0026rsquo; 和 [3.0](分别地)，然后调用 allDone()。\nclass BigObject{ int anInt = 0; String aString = \u0026#39;\u0026#39;; List\u0026lt;double\u0026gt; aList = []; bool _done = false; void allDone() { _done = true; } } BigObject fillBigObject(BigObject obj) { return obj ..anInt = 1 ..aString = \u0026#39;String!\u0026#39; ..aList.add(3) ..allDone(); } getters 和 setters 当你需要对一个属性进行更多的控制时，你可以定义 getter 和 setter，而不是简单的字段。\n例如，你可以确保一个属性的值是有效的:\nclass MyClass { int _aProperty = 0; int get aProperty =\u0026gt; _aProperty; set aProperty(int value) { if (value \u0026gt;= 0) { _aProperty = value; } } } 你也可以使用 getter 来定义计算属性:\nclass MyClass { List\u0026lt;int\u0026gt; _values = []; void addValue(int value) { _values.add(value); } // 一个计算属性  int get count { return _values.length; } } 代码示例 想象一下，你有一个购物车类，它保存了一个私有的 List\u0026lt;double\u0026gt; 的价格。添加以下内容:\n 一个叫做 total 的 getter，返回价格的总和。 用一个新的列表替换列表的 setter，只要新的列表不包含任何负价格(在这种情况下，setter 应该抛出一个 InvalidPriceException)。  class InvalidPriceException {} class ShoppingCart { List\u0026lt;double\u0026gt; _prices = []; double get total =\u0026gt; _prices.fold(0, (e, t) =\u0026gt; e + t); set prices(List\u0026lt;double\u0026gt; value) { if (value.any((p) =\u0026gt; p \u0026lt; 0)) { throw InvalidPriceException(); } _prices = value; } } 可选位置参数 Dart 有两种函数参数：位置参数和命名参数。位置参数是你可能熟悉的那种:\nint sumUp(int a, int b, int c) { return a + b + c; } // ... int total = sumUp(1, 2, 3); 在 Dart 中，你可以将这些位置参数用括号包裹起来，使其成为可选的参数:\nint sumUpToFive(int a, [int b, int c, int d, int e]) { int sum = a; if (b != null) sum += b; if (c != null) sum += c; if (d != null) sum += d; if (e != null) sum += e; return sum; } // ... int total = sumUpToFive(1,2); int otherTotal = sumUpToFive(1, 2, 3, 4, 5); 可选的位置参数在函数的参数列表中总是最后一个。它们的默认值是空的，除非你提供了另一个默认值:\nint sumUpToFive(int a, [int b = 2, int c = 3, int d = 4, int e = 5]) { // ··· } // ··· int newTotal = sumUpToFive(1); print(newTotal); // \u0026lt;-- prints 15 代码示例 实现一个名为 joinWithCommas() 的函数，接受 1 到 5 个整数，然后返回一个用逗号分隔的数字字符串。下面是一些函数调用和返回值的例子:\n   函数调用 返回值     joinWithCommas(1) \u0026lsquo;1\u0026rsquo;   joinWithCommas(1, 2, 3) \u0026lsquo;1,2,3\u0026rsquo;   joinWithCommas(1, 1, 1, 1, 1) \u0026lsquo;1,1,1,1,1\u0026rsquo;    main() { var res = joinWithCommas(1,2,3,4); print(res); } String joinWithCommas(int a, [int b, int c, int d, int e]) { List\u0026lt;int\u0026gt; sum = []; sum.add(a); if (b != null) sum.add(b); if (c != null) sum.add(c); if (d != null) sum.add(d); if (e != null) sum.add(e); return sum.join(\u0026#39;,\u0026#39;); } 可选命名参数 使用大括号语法，你可以定义有名称的可选参数。\nvoid printName(String firstName, String lastName, {String suffix}) { print(\u0026#39;$firstName$lastName${suffix ?? \u0026#39;\u0026#39;}\u0026#39;); } // ··· printName(\u0026#39;Avinash\u0026#39;, \u0026#39;Gupta\u0026#39;); printName(\u0026#39;Poshmeister\u0026#39;, \u0026#39;Moneybuckets\u0026#39;, suffix: \u0026#39;IV\u0026#39;); 正如你所期望的，这些参数的值默认为空，但你可以提供默认值。\nvoid printName(String firstName, String lastName, {String suffix = \u0026#39;\u0026#39;}) { print(\u0026#39;$firstName$lastName$suffix\u0026#39;); } 一个函数不能同时拥有可选的位置参数和可选的命名参数。\n代码示例 为 MyDataObject 类添加一个 copyWith() 实例方法。它应该接受三个命名参数:\n int newInt String newString double newDouble  当调用时，copyWith() 应该基于当前实例返回一个新的 MyDataObject，并将前面参数（如果有的话）的数据复制到对象的属性中。例如，如果 newInt 是非空的，那么将其值复制到 anInt 中。\nclass MyDataObject { final int anInt; final String aString; final double aDouble; MyDataObject({ this.anInt = 1, this.aString = \u0026#39;Old!\u0026#39;, this.aDouble = 2.0, }); MyDataObject copyWith({int newInt, String newString, double newDouble}) { return MyDataObject( anInt: newInt ?? this.anInt, aString: newString ?? this.aString, aDouble: newDouble ?? this.aDouble, ); } } 异常 Dart 代码可以抛出和捕获异常。与 Java 相比，Dart 的所有异常都是未检查的异常。方法不声明它们可能会抛出哪些异常，你也不需要捕捉任何异常。\nDart 提供了 Exception 和 Error 类型，但你可以抛出任何非空对象:\nthrow Exception(\u0026#39;Something bad happened.\u0026#39;); throw \u0026#39;Waaaaaaah!\u0026#39;; 在处理异常时使用 try、on 和 catch 关键字:\ntry { breedMoreLlamas(); } on OutOfLlamasException { // A specific exception  buyMoreLlamas(); } on Exception catch (e) { // Anything else that is an exception  print(\u0026#39;Unknown exception: $e\u0026#39;); } catch (e) { // No specified type, handles all  print(\u0026#39;Something really unknown: $e\u0026#39;); } try 关键字的工作原理和其他大多数语言一样。使用 on 关键字按类型过滤特定的异常，使用 catch 关键字获取异常对象的引用。\n如果不能完全处理异常，可以使用 rethrow 关键字来传播异常:\ntry { breedMoreLlamas(); } catch (e) { print(\u0026#39;I was just trying to breed llamas!.\u0026#39;); rethrow; } 无论是否抛出异常，都要执行代码，使用 final:\ntry { breedMoreLlamas(); } catch (e) { // ... handle exception ... } finally { // Always clean up, even if an exception is thrown.  cleanLlamaStalls(); } 代码示例 实现下面的 tryFunction()。它应该执行一个不可信的方法，然后做如下操作:\n 如果 untrustworthy() 抛出一个 ExceptionWithMessage，调用 logger.logException，并提供异常类型和消息(尝试使用 on 和 catch)。 如果 untrustworthy() 抛出一个 Exception，调用 logger.logException，并注明异常类型(尝试使用 on)。 如果 untrustworthy() 抛出任何其他对象，不要捕获异常。 当所有的东西都被捕获和处理后，调用 logger.doneLogging(尝试使用 finally)。  typedef VoidFunction = void Function(); class ExceptionWithMessage { final String message; const ExceptionWithMessage(this.message); } abstract class Logger { void logException(Type t, [String msg]); void doneLogging(); } void tryFunction(VoidFunction untrustworthy, Logger logger) { try { untrustworthy(); } on ExceptionWithMessage catch (e) { logger.logException(e.runtimeType, e.message); } on Exception { logger.logException(Exception); } finally { logger.doneLogging(); } } 在构造函数中使用 this Dart 提供了一个方便的快捷方式来为构造函数中的属性赋值：在声明构造函数时使用 this.propertyName:\nclass MyColor { int red; int green; int blue; MyColor(this.red, this.green, this.blue) } final color = MyColor(80, 80, 128); 这种技术也适用于命名参数。属性名成为参数的名称:\nclass MyColor { ... MyColor({this.red, this.green, this.blue}); } final color = MyColor(red: 80, green: 80, blue: 80); 对于可选参数，默认值按预期工作:\nMyColor([this.red = 0, this.green = 0, this.blue = 0]); // or MyColor({this.red = 0, this.green = 0, this.blue = 0}); 代码示例 为 MyClass 添加一个单行构造函数，使用 this. 语法来接收和分配类的三个属性的值:\nclass MyClass { final int anInt; final String aString; final double aDouble; MyClass(this.anInt, this.aString, this.aDouble); } 初始化器列表 有时候，当你实现一个构造函数时，你需要在构造函数体执行之前做一些设置。例如，在构造函数体执行之前，final 字段必须有值。在一个初始化器列表中做这些工作，它位于构造函数的签名和它的主体之间。\nPoint.fromJson(Map\u0026lt;String, num\u0026gt; json) : x = json[\u0026#39;x\u0026#39;], y = json[\u0026#39;y\u0026#39;] { print(\u0026#39;In Point.fromJson(): ($x, $y)\u0026#39;); } 初始化器列表也是一个方便放置断言的地方，它只在开发过程中运行:\nNonNegativePoint(this.x, this.y) : assert(x \u0026gt;= 0), assert(y \u0026gt;= 0) { print(\u0026#39;I just made a NonNegativePoint: ($x, $y)\u0026#39;); } 代码示例 完成下面的 FirstTwoLetters 构造函数。使用初始化器列表将 word 中的前两个字符分配给 letterOne 和 LetterTwo 属性。为了获得额外的积分，可以添加一个断言来捕获少于两个字符的单词。\nclass FirstTwoLetters { final String letterOne; final String letterTwo; // Create a constructor with an initializer list here:  FirstTwoLetters(String word) : assert(word.length \u0026gt;=2), letterOne = word[0], letterTwo = word[1]; } 命名构造器 为了允许类有多个构造函数，Dart 支持命名构造函数:\nclass Point { double x, y; Point(this.x, this.y); Point.origin() { x = 0; y = 0; } } 要使用命名构造函数，请使用它的全名来调用它:\nfinal myPoint = Point.origin(); 代码示例 给 Color 类一个名为 Color.black 的构造函数，将三个属性都设置为 0。\nclass Color { int red; int green; int blue; Color(this.red, this.green, this.blue); Color.black() { red = 0; green = 0; blue = 0; } } 工厂构造函数 Dart 支持工厂构造函数，它可以返回子类型甚至 null。要创建一个工厂构造函数，请使用 factory 关键字:\nclass Square extends Shape {} class Circle extends Shape {} class Shape { Shape(); factory Shape.fromTypeName(String typeName) { if (typeName == \u0026#39;square\u0026#39;) return Square(); if (typeName == \u0026#39;circle\u0026#39;) return Circle(); print(\u0026#39;I don\\\u0026#39;t recognize $typeName\u0026#39;); return null } } 代码示例 填入名为 IntegerHolder.fromList 的工厂构造函数，使其做以下工作:\n 如果列表有一个值，就用这个值创建一个 IntegerSingle。 如果列表有两个值，则用该值依次创建一个 IntegerDouble。 如果列表有三个值，则按顺序创建一个 IntegerTriple。 否则，返回 null。  class IntegerHolder { IntegerHolder(); factory IntegerHolder.fromList(List\u0026lt;int\u0026gt; list) { if (list?.length == 1) { return IntegerSingle(list[0]); } else if (list?.length == 2) { return IntegerDouble(list[0], list[1]); } else if (list?.length == 3) { return IntegerTriple(list[0], list[1], list[2]); } else { return null; } } } class IntegerSingle extends IntegerHolder { final int a; IntegerSingle(this.a); } class IntegerDouble extends IntegerHolder { final int a; final int b; IntegerDouble(this.a, this.b); } class IntegerTriple extends IntegerHolder { final int a; final int b; final int c; IntegerTriple(this.a, this.b, this.c); } 重定向构造函数 有时，一个构造函数的唯一目的是重定向到同一类中的另一个构造函数。重定向构造函数的主体是空的，构造函数调用出现在冒号(:)之后。\nclass Automobile { String make; String model; int mpg; // 这个类的主构造函数  Automobile(this.make, this.model, this.mpg); // 代理到主构造函数  Automobile.hybrid(String make, String model) : this(make, model, 60); // 代理到命名构造函数  Automobile.fancyHybrid() : this.hybrid(\u0026#39;Futurecar\u0026#39;, \u0026#39;Mark 2\u0026#39;); } 代码示例 还记得上面的 Color 类吗？创建一个名为 black 的命名构造函数，但不是手动分配属性，而是将其重定向到默认构造函数，参数为 0。\nclass Color { int red; int green; int blue; Color(this.red, this.green, this.blue); Color.black() : this(0, 0, 0); } 常量构造函数 如果你的类产生的对象永远不会改变，你可以让这些对象成为编译时常量。要做到这一点，请定义一个 const 构造函数，并确保所有的实例变量都是最终变量。\nclass ImmutablePoint { const ImmutablePoint(this.x, this.y); final int x; final int y; static const ImmutablePoint origin = ImmutablePoint(0, 0); } 代码示例 修改 Recipe 类，使它的实例可以是常量，并创建一个常量构造函数，执行以下操作。\n 有三个参数： ingredients, calories 和 milligramsOfSodium(按顺序)。 使用 this. 语法，自动将参数值分配给同名的对象属性。 是常量，在构造函数声明中，const 关键字就在 Recipe 前面。  class Recipe { final List\u0026lt;String\u0026gt; ingredients; final int calories; final double milligramsOfSodium; const Recipe(this.ingredients, this.calories, this.milligramsOfSodium); } 下一步是什么？ 我们希望你喜欢使用这个 codelab 来学习或测试你对 Dart 语言一些最有趣的功能的知识。这里有一些关于现在要做什么的建议。\n 试试其他的 Dart 代码实验室. 阅读 Dart 语言之旅。 玩 DartPad。 获取 Dart SDK。  ","permalink":"https://ohmyweekly.github.io/notes/dart-cheatsheet-codelab/","tags":["string","cheatsheet","dart"],"title":"Dart 语言速查表"},{"categories":["programming"],"contents":"端午节快乐, 一起爬山吗？\n","permalink":"https://ohmyweekly.github.io/notes/go-hiking/","tags":["hiking","holiday"],"title":"一起爬山吗?"},{"categories":null,"contents":"Results from static site search implemented using Fusejs, jquery and mark.js. \u0026ndash; Source\n","permalink":"https://ohmyweekly.github.io/search/","tags":null,"title":"Search"}]