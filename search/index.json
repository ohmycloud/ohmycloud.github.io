[{"categories":["programming"],"contents":"Dart 生态系统使用包来共享软件，如库和工具。本页告诉你如何创建一个包，重点是最常见的一种包，库包。\n是什么造就了一个库包 下图是最简单的库包的布局:\n一个库的最低要求是\npubspec 文件\n库的 pubspec.yaml 文件和应用程序包的文件是一样的-没有特别的名称来表示这个包是一个库。\nlib 目录\n正如你所期望的那样，库代码存在于 lib 目录下，对其他包是公开的。你可以根据需要在 lib 下创建任何层次结构。按照惯例，实现代码被放在 lib/src 下。lib/src 下的代码被认为是私有的；其他包不应该需要导入 src/...。要使 lib/src 下的 API 公开，您可以从直接位于 lib 下的文件导出 lib/src 文件。\n注意：当没有指定 library 指令时，会根据每个库的路径和文件名为其生成一个唯一的标签。因此，我们建议您从代码中省略 library 指令，除非您计划生成库级文档。\n组织一个库包 当你创建小的、单独的库（称为迷你库）时，库包的维护、扩展和测试是最容易的。在大多数情况下，每个类都应该在自己的迷你库中，除非你有两个类是紧密耦合的情况。\n注意：你可能听说过 part 指令，它允许你将一个库分割成多个 Dart 文件。我们建议你避免使用 part 指令，而是创建迷你库。\n直接在 lib 下创建一个\u0026quot;主\u0026quot;库文件，lib/\u0026lt;package-name\u0026gt;.dart，导出所有的公共 API。这样用户就可以通过导入一个文件来获得一个库的所有功能。\nlib 目录也可能包含其他可导入的、非src的库。例如，也许你的主库可以跨平台使用，但是你创建了单独的库，这些库依赖于 dart:io 或者 dart:html。有些包有单独的库，这些库是要用前缀导入的，而主库不是。\n让我们来看看一个现实世界中的库包的组织： shelf。shelf 包提供了一种使用 Dart 创建 web 服务器的简单方法，它的布局结构是 Dart 库包常用的:\n直接在 lib 下，主库文件 shelf.dart 从 lib/src 导出几个文件:\nexport \u0026#39;src/cascade.dart\u0026#39;; export \u0026#39;src/handler.dart\u0026#39;; export \u0026#39;src/handlers/logger.dart\u0026#39;; export \u0026#39;src/hijack_exception.dart\u0026#39;; export \u0026#39;src/middleware.dart\u0026#39;; export \u0026#39;src/pipeline.dart\u0026#39;; export \u0026#39;src/request.dart\u0026#39;; export \u0026#39;src/response.dart\u0026#39;; export \u0026#39;src/server.dart\u0026#39;; export \u0026#39;src/server_handler.dart\u0026#39;; shelf 包还包含一个迷你库： shelf_io。这个适配器处理来自 dart:io 的 HttpRequest 对象。\n对网络应用的提示: 为了在使用 dartdevc 开发时获得最佳性能，请将实现文件放在 /lib/src 下，而不是放在 /lib 下的其他地方。同时，避免导入 package:package_name/src/... 的文件。\n导入库文件 当从其他包中导入一个库文件时，使用 package: 指令来指定该文件的 URI。\nimport \u0026#39;package:utilities/utilities.dart\u0026#39;; 当从自己的包中导入一个库文件时，当两个文件都在 lib 内，或者两个文件都在 lib 外时，使用相对路径。使用 :package 当导入的文件在 lib 内，而导入者在 lib 外时。\n下图显示了如何从 lib 和 web 中导入 lib/foo/a.dart。\n有条件地导入和导出库文件 如果你的库支持多个平台，那么你可能需要有条件地导入或导出库文件。一个常见的用例是一个同时支持 web 和原生平台的库。\n要有条件的导入或导出，你需要检查 dart:* 库的存在。下面是一个有条件导出代码的例子，它检查 dart:io 和 dart:html 的存在:\nexport \u0026#39;src/hw_none.dart\u0026#39; // Stub implementation if (dart.library.io) \u0026#39;src/hw_io.dart\u0026#39; // dart:io implementation if (dart.library.html) \u0026#39;src/hw_html.dart\u0026#39;; // dart:html implementation 下面是这段代码的作用。\n 在一个可以使用 dart:io 的应用程序中(例如，一个命令行应用程序)，导出 src/hw_io.dart 在一个可以使用 dart:html 的应用程序中(一个 web 应用程序)，导出 src/hw_html.dart 否则，导出 src/hw_none.dart  要有条件地导入一个文件，使用与上面相同的代码，但将 exporrt 改为 import。\n注意：有条件的导入或导出只检查库在当前平台上是否可用，而不是检查是否实际导入或使用。\n所有有条件导出的库都必须实现相同的 API。例如，这里是 dart:io 的实现:\nimport \u0026#39;dart:io\u0026#39;; void alarm([String text]) { stderr.writeln(text ?? message); } String get message =\u0026gt; \u0026#39;Hello World from the VM!\u0026#39;; 这里是默认的实现，它是一个抛出 UnsupportedErrors 的 stub。\nvoid alarm([String text]) =\u0026gt; throw UnsupportedError(\u0026#39;hw_none alarm\u0026#39;); String get message =\u0026gt; throw UnsupportedError(\u0026#39;hw_none message\u0026#39;); 在任何平台上，你都可以导入有条件导出代码的库。\nimport \u0026#39;package:hw_mp/hw_mp.dart\u0026#39;; void main() { print(message); } 提供补充文件 一个设计良好的库包是很容易测试的。我们建议你使用 test 包来编写测试，将测试代码放在测试包顶部的 test 目录中。\n如果你创建了任何旨在供公众使用的命令行工具，请将这些工具放在 bin 目录下，这是公共的。启用从命令行运行工具，使用 pub global activate。将工具列在 pubspec 的可执行文件部分，允许用户直接运行它，而无需调用 pub global run。\n如果你包含了一个如何使用你的库的例子，这将会很有帮助。这将被放入软件包顶部的 example 目录中。\n你在开发过程中创建的任何工具或可执行文件，如果不是公开使用的，都会进入 tool 目录。\n如果你把你的库发布到 pub.dev 站点，其他需要的文件，如 README.md 和 CHANGELOG.md，将在发布软件包中描述。有关如何组织包目录的更多信息，请参见 pub 包布局惯例。\n编写库文档 你可以使用 dartdoc 工具为你的库生成 API 文档。Dartdoc 解析源码寻找文档注释，其中使用了 /// 语法:\n/// The event handler responsible for updating the badge in the UI. void updateBadge() { ... } 关于生成文档的例子，请看 shelf 文档。\n注意：要在生成的文档中包含任何库级文档，你必须指定 library 指令。请参阅 问题 1082。\n分发一个开源库 如果你的库是开源的，我们建议在 pub.dev 站点上分享它。要发布或更新库，请使用 pub publish，它可以上传您的包并创建或更新其页面。例如，请看 shelf 包的页面。有关如何准备发布软件包的详细信息，请参见发布包。\npub.dev 站点不仅托管您的软件包，而且还生成和托管您软件包的 API 参考文档。最新生成的文档的链接在软件包的 About 框中；例如，请看 shelf 包的 API 文档。到以前版本的文档的链接在软件包页面的版本选项卡中。\n要确保你的软件包的 API 文档在 pub.dev 网站上看起来不错，请按照以下步骤进行。\n 在发布你的软件包之前，运行 dartdoc 工具，以确保你的 docs 成功生成，并且看起来符合预期。 发布软件包后，检查 Versions 选项卡以确保文档成功生成。 如果文档根本没有生成，点击 Verrsions 选项卡中的 failed，查看 dartdoc 的输出。  资源 使用以下资源了解更多关于库包的信息。\n 语言之旅中的库和可见性包括使用库文件。 包文档很有用，特别是包的布局约定。 不应提交的内容涵盖了哪些不应该被检查到源代码库中。 dart-lang 组织下的较新的库包倾向于展示最佳实践。可以考虑研究这些例子：dart_style、path、shelf、source_gen 和 test。  ","permalink":"https://ohmyweekly.github.io/notes/creating-packages/","tags":["flutter","packages"],"title":"创建包"},{"categories":["programming"],"contents":"pub 软件包管理器不仅仅是用来使用别人的软件包。它还允许你与世界分享你的软件包。如果您有一个有用的项目，并且您希望其他人能够使用它，请使用 pub publish 命令。\n注意: 如果要发布到 pub.dev 以外的其他位置，或者要防止在任何地方发布，请使用 pubspec 中定义的 publish_to 字段。\n发布是永远的 请记住，发布是永远的。只要你发布你的包，用户就可以依赖它。一旦他们开始这样做，删除包就会破坏他们的包。为了避免这种情况，pub.dev 政策不允许取消发布软件包，除非是极少数情况。\n你可以随时上传你的包的新版本，但旧的包将继续为那些还没有准备好升级的用户提供服务。\n对于已经发布的包，如果不再相关或正在维护，你可以将其标记为停止发布。\n准备发布 当发布一个软件包时，遵循 pubspec 格式和包布局惯例是很重要的。其中有些是必须的，以便其他人能够使用你的软件包。另一些则是为了帮助用户更容易理解和使用您的软件包而提出的建议。在这两种情况下，pub 都会尝试帮助你，指出哪些改变会帮助你的软件包在 Dart 生态系统中发挥得更好。上传包有一些额外的要求:\n  你必须包含一个包含开源许可证的 LICENSE 文件。我们推荐 BSD 许可证，这是 Dart 自己使用的。你也必须有合法的权利来重新发布你上传的任何东西作为你的包的一部分。\n  你的软件包在经过 gzip 压缩后必须小于 10 MB。如果太大，可以考虑将其分割成多个包，或者减少包含的资源或例子的数量。\n  你的包应该只依赖托管的依赖项(来自默认的 pub 包服务器)和 SDK 依赖项(sdk: flutter)。这些限制确保了你的包的依赖性不会在未来变得不可用。\n  您必须有一个 Google 帐户，pub 用来管理包的上传权限。您的 Google 账户可以与 Gmail 地址或任何其他电子邮件地址关联。\n  注意：除非您使用已验证的发布者发布，否则 pub.dev 会显示与您的 Google 帐户关联的电子邮件地址。\n重要文件 Pub 使用一些文件的内容为你的包创建一个页面，地址是 pub.dev/packages/\u0026lt;your_package\u0026gt;。以下是影响你的包的页面外观的文件。\n README.md: README.md 文件是你的包页面中的主要内容。该文件的内容以 Markdown 的形式呈现。 CHANGELOG.md：CHANGELOG.md 文件是你的包页面中的主要内容。你的包的 CHANGELOG.md 文件，如果找到的话，也会在你的包页面的一个标签中显示，这样开发者就可以直接从 pub.dev 中读取它。该文件的内容会以 Markdown 的形式呈现。 pubspec: 你的包的 pubspec.yaml 文件用来在你的包的页面右侧填写关于你的包的详细信息，比如它的描述、主页等。  使用经过验证的发布者的优势 您可以使用已验证的发布者（推荐）或独立的谷歌账户发布软件包。使用经过验证的发布者有以下优势。\n 您的包的消费者知道发布者的域名已经被验证。 您可以避免让 pub.dev 显示您的个人电子邮件地址。取而代之的是，pub.dev会显示发布者的域名和联系地址。 经验证的发布者徽章 pub.dev 经验证的发布者标识会在搜索页面和单个软件包页面上显示在您的软件包名称旁边。  创建一个验证过的发布者 要创建一个已验证的发布者，请按照以下步骤进行。\n 进入 pub.dev。 使用 Google 账户登录 pub.dev。 在右上角的用户菜单中，选择创建发布者。 输入您要与您的发布者相关联的域名(例如，dart.dev)，然后单击\u0026quot;创建发布者\u0026rdquo;。 在确认对话框中，选择\u0026quot;确定\u0026rdquo;。 如果提示，完成验证流程，这将打开 Google 搜索控制台。   在添加 DNS 记录时，可能需要几个小时后，搜索控制台才会反映出变化。 验证流程完成后，返回步骤4。  发布你的包 使用 pub publish 命令来首次发布您的软件包，或将其更新到新版本。\n执行 dry run 为了测试 pub publish 的工作情况，你可以进行一次 dry run:\n$ pub publish --dry-run Pub 会确保你的软件包遵循 pubspec 格式和包布局约定，然后将你的软件包上传到 pub.dev。Pub 还会向你展示它打算发布的所有文件。下面是一个发布名为 transmogrify 的软件包的例子:\nPublishingtransmogrify1.0.0.gitignoreCHANGELOG.mdREADME.mdlibtransmogrify.dartsrctransmogrifier.darttransmogrification.dartpubspec.yamltesttransmogrify_test.dartPackagehas0warnings.发布 当你准备好发布你的包时，请删除 --dry-run 参数:\n$ pub publish 注意: pub 命令目前不支持直接将新软件包发布到已验证的发布者。作为一个临时的变通方法，可以将新的软件包发布到Google账户，然后将包转移到发布者。\n一旦软件包被转移到发布者，你就可以使用 pub publish 更新软件包。\n当你的包成功上传到 pub.dev 后，任何 pub 用户都可以下载它或在他们的项目中依赖它。例如，如果你刚刚发布了 1.0.0 版本的 transmogrify 包，那么另一个 Dart 开发者可以在他们的 pubspec.yaml 中添加它作为依赖:\ndependencies:transmogrify:^1.0.0将软件包传输给已验证的发布者 要将一个软件包转移到已验证的发布者，您必须是该软件包的上传者和已验证发布者的管理员。\n注意：这个过程是不可逆的。一旦你将一个软件包转移到一个发布者，你不能将它转移回个人账户。\n以下是如何将软件包转移到已验证的发布者:\n 用一个被列为软件包上传者的 Google 账户登录到 pub.dev。 进入软件包的详细信息页面(例如，https://pub.dev/packages/http)。 选择\u0026quot;管理\u0026quot;选项卡。 输入发布者的名称，然后单击\u0026quot;传输到发布者\u0026rdquo;。  哪些文件会被发布？ 您的软件包中的所有文件都包含在已发布的软件包中，但有以下例外:\n 任何包的目录。 您的软件包的 lockfile 文件。 如果你没有使用 Git，所有隐藏的文件（也就是名字以 . 开头的文件）。 如果使用 Git，则是所有被 .gitignore 文件忽略的文件。  请确保删除任何你不想包含的文件(或将它们添加到 .gitignore 中)。 pub publish 在上传你的包之前列出了它要发布的所有文件，所以在完成上传之前要仔细检查列表。\n上传者 谁发布了软件包的第一个版本，谁就会自动成为第一个也是唯一一个被授权上传该软件包其他版本的人。要允许或不允许其他人上传版本，请使用 pub uploader 命令或将软件包转移到已验证的发布者那里。\n如果一个软件包有一个经过验证的发布者，那么该软件包的 pub.dev 页面会显示发布者的域名。否则，该页面将显示该软件包的授权上传者的电子邮件地址。\n发布预发包 当你在做一个包的时候，考虑把它作为一个预发布。当以下任何一种情况发生时，预发布都是有用的。\n 你正在积极开发软件包的下一个主要版本。 你想为软件包的下一个发行候选版本招募测试者。 该包依赖于 Dart 或 Flutter SDK 的不稳定版本。  正如在语义版本化中所描述的那样，为了使一个版本的预发布，你要给版本附加一个后缀。例如，要对 2.0.0 版本进行预发布，你可以使用 2.0.0-dev.1 版本。以后，当你发布 2.0.0 版本时，它将优先于所有 2.0.0-XXX 预发布版本。\n因为 pub 更倾向于在可用的时候发布稳定版，所以一个预发布包的用户可能需要改变他们的依赖约束。例如，如果用户想要测试 2.1 版本的预发布包，那么他们可以指定 ^2.1.0-dev.1，而不是 ^2.0.0 或 ^2.1.0。\n注意: 如果依赖关系图中的稳定包依赖于一个 prerelease，那么 pub 会选择那个 prerelease 而不是稳定版本。\n当一个 prerelease 被发布到 pub.dev 时，软件包页面会同时显示到 prerelease 和稳定版的链接。prerelease 不会影响分析得分，不会出现在搜索结果中，也不会替换包的 README.md 和文档。\n将软件包标记为已停产的软件包 尽管软件包总是保持发布，但向开发者发出信号，表明一个软件包不再被积极维护，是很有用的。为此，您可以将一个软件包标记为 discontinued。一个已停用的软件包仍然可以在 pub.dev 上发布和查看，但它有一个清晰的 DISCONTINUED 徽章，并且不会出现在 pub.dev 的搜索结果中。\n要将软件包标记为已停用，请使用该软件包的上传者或已验证的发布者管理员的 Google 帐户登录 pub.dev。然后使用单个软件包的管理选项卡将该软件包标记为已停用。\n资源 有关更多信息，请参见以下 pub 命令的参考页面。\n pub publish pub uploader  ","permalink":"https://ohmyweekly.github.io/notes/publishing-packages/","tags":["flutter","packages"],"title":"发布包"},{"categories":["programming"],"contents":"有什么意义呢？\n HTTP 协议允许客户端和服务器进行通信。 dart:io 包有编写 HTTP 程序的类。 服务器监听主机和端口上的请求。 客户端使用 HTTP 方法请求发送请求。 http_server 包提供了更高级别的构件。  前提条件: HTTP 服务器和客户端严重依赖 future 和流，本教程中没有解释这些内容。你可以从异步编程 codelab和流教程中了解它们。\nHTTP（超文本传输协议）是一种通信协议，用于通过互联网将数据从一个程序发送到另一个程序。数据传输的一端是服务器，另一端是客户端。客户端通常是基于浏览器的（用户在浏览器中输入或在浏览器中运行的脚本），但也可能是一个独立的程序。\n服务器与主机和端口绑定（它与一个IP地址和一个端口号建立专属连接）。然后服务器监听请求。由于 Dart 的异步性，服务器可以同时处理很多请求，具体如下。\n 服务器监听 客户端连接 服务器接受并接收请求(并继续监听) 服务器可以继续接受其他请求 服务器写入请求的响应或几个请求，可能是交错的请求 服务器最终结束(关闭)响应  在 Dart 中，dart:io 库包含了编写 HTTP 客户端和服务器所需的类和函数。此外，http_server 包包含了一些更高层次的类，使其更容易编写客户端和服务器。\n重要：基于浏览器的程序不能使用 dart:io 库。\ndart:io 库中的 API 只适用于独立的命令行程序。它们不能在浏览器中工作。要从基于浏览器的客户端发出 HTTP 请求，请参考 dart:html HttpRequest 类。\n本教程提供了几个例子，说明编写 Dart HTTP 服务器和客户端是多么容易。从服务器的 hello world 开始，你将学习如何编写服务器的代码，从绑定和监听到响应请求。你还可以学习到客户端：提出不同类型的请求(GET 和 POST)，编写基于浏览器和命令行的客户端。\n获取源码  获取 Dart 教程的示例代码。 查看 httpserver 目录，其中包含本教程所需的源码。  运行 hello world 服务器 本节的示例文件：hello_world_server.dart。\n让我们从一个小型的服务器开始，用字符串 Hello, world 来响应所有的请求。\n在命令行中，运行 hello_world_server.dart 脚本:\n$ cd httpserver $ dart bin/hello_world_server.dart listening on localhost, port 4040 在任何浏览器中，访问 localhost:4040。浏览器会显示 Hello, world!。\n在这种情况下，服务器是一个 Dart 程序，客户端是你使用的浏览器。然而，你可以用 Dart 编写客户端程序-无论是基于浏览器的客户端脚本，还是独立的程序。\n快速浏览一下代码 在 hello world 服务器的代码中，一个 HTTP 服务器与主机和端口绑定，监听 HTTP 请求，并写入响应。需要注意的是，该程序导入了 dart:io 库，其中包含了服务器端程序和客户端程序的 HTTP 相关类(但不包含 Web 应用)。\nimport \u0026#39;dart:io\u0026#39;; Future main() async { var server = await HttpServer.bind( InternetAddress.loopbackIPv4, 4040, ); print(\u0026#39;Listening on localhost:${server.port}\u0026#39;); await for (HttpRequest request in server) { request.response.write(\u0026#39;Hello, world!\u0026#39;); await request.response.close(); } } 接下来的几节内容包括服务器端绑定、发出客户端 GET 请求、监听和响应。\n将服务器绑定到主机和端口 本节示例：hello_world_server.dart。\nmain() 中的第一条语句使用 HttpServer.bind() 创建一个 HttpServer 对象，并将其绑定到主机和端口。\nvar server = await HttpServer.bind( InternetAddress.loopbackIPv4, 4040, ); 该代码使用 await 异步调用 bind 方法。\n主机名 bind() 的第一个参数是指定主机名。你可以用一个字符串来指定一个特定的主机名或IP地址，也可以用 InternetAddress 类提供的这些预定义的值来指定主机。\n   值 用例     回环 IPv4 或 loopbackIPv6 服务器在 loopback 地址上监听客户端活动，该地址实际上是 localhost。使用IP协议的4或6版本。这些主要用于测试。我们建议您使用这些值而不是 localhost 或 127.0.0.1。   任何 IPv4 或 anyIPv6 服务器监听任何 IP 地址上指定端口上的客户端活动。使用IP协议的4或6版本。    默认情况下，当使用V6互联网地址时，也会使用V4监听器。\n端口 bind() 的第二个参数是指定端口的整数。端口唯一地标识主机上的服务。1024 以下的端口号为标准服务保留(0除外)。例如，FTP 数据传输通常在端口20上运行，每日报价在端口17上运行，HTTP 在端口80上运行。你的程序应该使用1024以上的端口号。如果端口已经在使用中，你的服务器的连接将被拒绝。\n侦听请求 服务器使用 await for 开始监听 HTTP 请求。每收到一个请求，代码就会发送一个 \u0026ldquo;Hello, world!\u0026rdquo; 的响应。\nawait for (HttpRequest request in server) { request.response.write(\u0026#39;Hello, world!\u0026#39;); await request.response.close(); } 你将在监听和处理请求一节中了解更多关于 HttpRequest 对象包含的内容以及如何编写响应。但首先，让我们看看客户端产生请求的一种方式。\n使用 HTML 表单发出 GET 请求 本节的示例文件：number_thinker.dart 和 make_a_guess.html。\n本节介绍了一个命令行服务器，它可以随机选择一个0到9之间的数字。客户端是一个基本的 HTML 网页，make_a_guess.html，你可以用它来猜数字。\n试试吧\n 运行数字思考者服务器  在命令行，运行 number_thinker.dart server。你应该看到类似下面的东西:\n$ cd httpserver $ dart bin/number_thinker.dart I\u0026#39;m thinking of a number: 6 启动网络服务器  从应用程序的顶部目录运行 webdev serve。\n更多信息：webdev 文档\n打开 HTML 页面  在浏览器中，进入 localhost:8080/make_a_guess.html。\n做一个猜测  选择一个数字，然后按猜测按钮。\n在客户端中没有涉及到 Dart 代码。客户端请求是通过浏览器向 Dart 服务器发出的，在 make_a_guess.html 中的 HTML 表单，它提供了一个自动制定和发送客户端 HTTP 请求的方法。该表单包含下拉列表和按钮。该表单还指定了 URL，其中包括端口号，以及请求的种类（请求方法）。它还可能包含建立查询字符串的元素。\n下面是 make_a_guess.html 中的表单 HTML。\n\u0026lt;form action=\u0026#34;http://localhost:4041\u0026#34; method=\u0026#34;GET\u0026#34;\u0026gt; \u0026lt;select name=\u0026#34;q\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;0\u0026#34;\u0026gt;0\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;1\u0026#34;\u0026gt;1\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;2\u0026#34;\u0026gt;2\u0026lt;/option\u0026gt; \u0026lt;!--··· --\u0026gt; \u0026lt;option value=\u0026#34;9\u0026#34;\u0026gt;9\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Guess\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; 下面是表单的工作原理:\n 表单的 action 属性被分配给发送请求的 URL 表单的 method 属性定义了请求的类型，这里是 GET。其他常见的请求类型包括 POST、PUT 和 DELETE。 表单中任何有名称(name)的元素，比如 \u0026lt;select\u0026gt; 元素，都会成为查询字符串中的一个参数。 当按下提交按钮(\u0026lt;input type=\u0026quot;submit\u0026quot;...\u0026gt;)时，提交按钮会根据表单的内容制定请求并发送。  一个 RESTful GET 请求 REST(REpresentational State Transfer)是一套设计 Web 服务的原则。乖巧的 HTTP 客户端和服务器遵守为 GET 请求定义的 REST 原则。\n一个 GET 请求:\n 只检索数据 不会改变服务器的状态 有长度限制 可以在请求的 URL 中发送查询字符串  在这个例子中，客户端发出了一个符合 REST 的 GET 请求。\n监听和处理请求 本节的示例文件: number_thinker.dart 和 make_a_guess.html。\n现在你已经看到这个基于浏览器的客户端的例子，让我们看看数字思维服务器的 Dart 代码，从 main() 开始。\n再一次，服务器绑定了一个主机和端口。在这里，每收到一个请求都会调用顶层的 handleRequest() 方法。因为 HttpServer 实现了 Stream，所以可以使用 await for 来处理请求。\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:math\u0026#39; show Random; Random intGenerator = Random(); int myNumber = intGenerator.nextInt(10); Future main() async { print(\u0026#34;I\u0026#39;m thinking of a number: $myNumber\u0026#34;); HttpServer server = await HttpServer.bind( InternetAddress.loopbackIPv4, 4041, ); await for (var request in server) { handleRequest(request); } } 当一个 GET 请求到达时，handleRequest() 方法会调用 handleGet() 来处理该请求。\nvoid handleRequest(HttpRequest request) { try { if (request.method == \u0026#39;GET\u0026#39;) { handleGet(request); } else { // ···  } } catch (e) { print(\u0026#39;Exception in handleRequest: $e\u0026#39;); } print(\u0026#39;Request handled.\u0026#39;); } 一个 HttpRequest 对象有很多属性，提供了关于请求的信息。下表列出了一些有用的属性。\n   属性 信息     method \u0026lsquo;GET\u0026rsquo;, \u0026lsquo;POST\u0026rsquo;, \u0026lsquo;PUT\u0026rsquo; 等方法中的一个。   uri 一个 Uri 对象：scheme、host、port、query string 和其他关于请求资源的信息。   response 一个 HttpResponse 对象：服务器将其响应写入其中。   headers 一个 HttpHeaders 对象：请求的头信息，包括 ContentType、内容长度、日期等。    使用方法属性 下面的数想器例子中的代码使用 HttpRequest 的 method 属性来确定收到了什么样的请求。这个服务器只处理 GET 请求。\nif (request.method == \u0026#39;GET\u0026#39;) { handleGet(request); } else { request.response ..statusCode = HttpStatus.methodNotAllowed ..write(\u0026#39;Unsupported request: ${request.method}.\u0026#39;) ..close(); } 使用 uri 属性 在浏览器中输入一个 URL 会产生一个 GET 请求，它只是简单地从指定的资源中请求数据。它可以通过附加在 URI 上的查询字符串随请求发送少量数据。\nvoid handleGet(HttpRequest request) { final guess = request.uri.queryParameters[\u0026#39;q\u0026#39;]; // ··· } 使用 HttpRequest 对象的 uri 属性来获取一个 Uri 对象，这个 Uri 对象包含了用户输入的 URL 的信息。Uri 对象的 queryParameters 属性是一个 Map，包含查询字符串的组件。通过名称来引用所需的参数。本例使用 q 来标识猜测的数字。\n设置响应的状态码 服务器应该设置状态码来表示请求的成功或失败。前面看到数想家将状态码设置为 methodNotAllowed 来拒绝非 GET 请求。在后面的代码中，为了表示请求成功，响应完成，数想家服务器将 HttpResponse 状态码设置为 HttpStatus.ok。\nvoid handleGet(HttpRequest request) { final guess = request.uri.queryParameters[\u0026#39;q\u0026#39;]; final response = request.response; response.statusCode = HttpStatus.ok; // ··· } HttpStatus.ok 和 HttpStatus.methodNotAllowed 是 HttpStatus 类中许多预定义状态码中的两个。另一个有用的预定义状态码是 HttpStatus.notFound(经典的 404）。\n除了状态码(statusCode)，HttpResponse 对象还有其他有用的属性:\n   属性 信息     contentLength 响应的长度，-1 表示事先不知道长度。   cookies 要在客户端设置的 Cookies 列表。   encoding 编写字符串时使用的编码，如 JSON 和 UTF-8。   headers 响应头，是一个 HttpHeaders 对象。    将响应写到 HttpResponse 对象 每个 HttpRequest 对象都有一个对应的 HttpResponse 对象。服务器通过响应对象将数据发回给客户端。\n使用 HttpResponse 写方法之一(write()、writeln()、writeAll() 或 writeCharCodes())将响应数据写入 HttpResponse 对象。或者通过 addStream 将 HttpResponse 对象连接到一个流，并写入流。响应完成后关闭对象。关闭 HttpResponse 对象会将数据发回给客户端。\nvoid handleGet(HttpRequest request) { // ···  if (guess == myNumber.toString()) { response ..writeln(\u0026#39;true\u0026#39;) ..writeln(\u0026#34;I\u0026#39;m thinking of another number.\u0026#34;) ..close(); // ···  } } 从独立的客户端进行 POST 请求 本节的示例文件：basic_writer_server.dart 和 basic_writer_client.dart。\n在 hello world 和 number thinker 的例子中，浏览器生成了简单的 GET 请求，对于更复杂的 GET 请求和其他类型的请求，如 POST、PUT 或 DELETE，你需要写一个客户端程序，其中有两种。\n 一个独立的客户端程序，它使用 dart:io 的 HttpClient 类。 基于浏览器的客户端，使用 dart:html 中的 API。本教程不涉及基于浏览器的客户端。要查看基于浏览器的客户端和相关服务器的代码，请参见 note_client.dart、note_server.dart 和 note_taker.html。  让我们看看一个独立的客户端，basic_writer_client.dart 和它的服务器 basic_writer_server.dart。客户端发出一个 POST 请求，将 JSON 数据保存到服务器端的文件中。服务器接受请求并保存文件。\n试试吧 在命令行上运行服务器和客户端。\n 首先，运行服务器:  cd httpserver $ dart bin/basic_writer_server.dart 在一个新的终端中，运行客户端:  $ cd httpserver $ dart bin/basic_writer_client.dart Wrote data for Han Solo. 看看服务器写入 file.txt 的 JSON 数据:\n{\u0026#34;name\u0026#34;:\u0026#34;Han Solo\u0026#34;,\u0026#34;job\u0026#34;:\u0026#34;reluctant hero\u0026#34;,\u0026#34;BFF\u0026#34;:\u0026#34;Chewbacca\u0026#34;,\u0026#34;ship\u0026#34;:\u0026#34;Millennium Falcon\u0026#34;,\u0026#34;weakness\u0026#34;:\u0026#34;smuggling debts\u0026#34;} 客户端创建一个 HttpClient 对象，并使用 post() 方法进行请求。发起一个请求涉及两个 Future。\n post() 方法建立与服务器的网络连接并完成第一个 Future，返回一个 HttpClientRequest 对象。 客户端组成请求对象并关闭它。close() 方法将请求发送到服务器并返回第二个 Future，它以一个 HttpClientResponse 对象完成。  import \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:convert\u0026#39;; String _host = InternetAddress.loopbackIPv4.host; String path = \u0026#39;file.txt\u0026#39;; Map jsonData = { \u0026#39;name\u0026#39;: \u0026#39;Han Solo\u0026#39;, \u0026#39;job\u0026#39;: \u0026#39;reluctant hero\u0026#39;, \u0026#39;BFF\u0026#39;: \u0026#39;Chewbacca\u0026#39;, \u0026#39;ship\u0026#39;: \u0026#39;Millennium Falcon\u0026#39;, \u0026#39;weakness\u0026#39;: \u0026#39;smuggling debts\u0026#39; }; Future main() async { HttpClientRequest request = await HttpClient().post(_host, 4049, path) /*1*/ ..headers.contentType = ContentType.json /*2*/ ..write(jsonEncode(jsonData)); /*3*/ HttpClientResponse response = await request.close(); /*4*/ await utf8.decoder.bind(response /*5*/).forEach(print); } /1/ post() 方法需要主机、端口和请求资源的路径。除了 post() 之外，HttpClient 类还提供了其他类型的请求函数，包括 postUrl()、get() 和 open()。\n/2/ 一个 HttpClientRequest 对象有一个 HttpHeaders 对象，它包含了请求头的信息。对于一些请求头，比如 contentType，HttpHeaders 有一个针对该请求头的属性。对于其他的请求头，使用 set() 方法将该请求头放入 HttpHeaders 对象中。\n/3/ 客户端使用 write() 向请求对象写入数据。编码，在这个例子中是 JSON，与 ContentType 头中指定的类型相匹配。\n/4/ close() 方法将请求发送到服务器，完成后返回一个 HttpClientResponse 对象。\n/5/ 来自服务器的 UTF-8 响应将被解码。使用在 dart:convert 库中定义的转换器将数据转换为常规的 Dart 字符串格式。\n一个 RESTful POST 请求 与 GET 请求类似，REST 为 POST 请求提供了指导方针。\n一个 POST 请求:\n 创建一个资源(在这个例子中，一个文件) 使用一个 URI，其结构与文件和目录路径名相似；例如，URI 没有查询字符串。 以 JSON 或 XML 格式传输数据 没有状态，也不会改变服务器的状态。 无长度限制  这个例子中的客户端发出 REST 兼容的 POST 请求。\n要想看到使 REST 兼容的 GET 请求的客户端代码，请看 number_guesser.dart。它是一个独立的客户端，用于数字思考者服务器，定期进行猜测，直到猜对为止。\n在服务器中处理一个 POST 请求 本节的示例文件：basic_writer_server.dart 和 basic_writer_client.dart。\n一个 HttpRequest 对象是一个字节列表流(Stream\u0026lt;List\u0026lt;int\u0026gt;)。要获得客户端发送的数据，就要监听 HttpRequest 对象上的数据。\n如果来自客户端的请求包含了大量的数据，数据可能会以多个分块的形式到达。你可以使用 Stream 中的 join() 方法来连接这些分块的字符串值。\nbasic_writer_server.dart 文件实现了一个遵循这种模式的服务器。\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:convert\u0026#39;; String _host = InternetAddress.loopbackIPv4.host; Future main() async { var server = await HttpServer.bind(_host, 4049); await for (var req in server) { ContentType contentType = req.headers.contentType; HttpResponse response = req.response; if (req.method == \u0026#39;POST\u0026#39; \u0026amp;\u0026amp; contentType?.mimeType == \u0026#39;application/json\u0026#39; /*1*/) { try { String content = await utf8.decoder.bind(req).join(); /*2*/ var data = jsonDecode(content) as Map; /*3*/ var fileName = req.uri.pathSegments.last; /*4*/ await File(fileName) .writeAsString(content, mode: FileMode.write); req.response ..statusCode = HttpStatus.ok ..write(\u0026#39;Wrote data for ${data[\u0026#39;name\u0026#39;]}.\u0026#39;); } catch (e) { response ..statusCode = HttpStatus.internalServerError ..write(\u0026#39;Exception during file I/O: $e.\u0026#39;); } } else { response ..statusCode = HttpStatus.methodNotAllowed ..write(\u0026#39;Unsupported request: ${req.method}.\u0026#39;); } await response.close(); } } /1/ 该请求有一个 HttpHeaders 对象。记得客户端将 contentType 头设置为 JSON(application/json)。该服务器拒绝不是 JSON 编码的请求。\n/2/ 一个 POST 请求对它可以发送的数据量没有限制，数据可能会以多块形式发送。此外，JSON 是 UTF-8，而 UTF-8 字符可以在多个字节上进行编码。join() 方法将这些分块放在一起。\n/3/ 客户端发送的数据是 JSON 格式的。服务器使用 dart:convert 库中的 JSON 编解码器对其进行解码。\n/4/ 请求的 URL 是 localhost:4049/file.txt。代码 req.uri.pathSegments.last 从 URI 中提取文件名: file.txt。\n关于 CORS 头的说明 如果你想为运行在不同源头（不同主机或端口）的客户端提供服务，你需要添加 CORS 头。下面的代码，取自 note_server.dart，允许从任何来源的 POST 和 OPTIONS 请求。谨慎使用 CORS 头文件，因为它们会给你的网络带来安全风险。\nvoid addCorsHeaders(HttpResponse response) { response.headers.add(\u0026#39;Access-Control-Allow-Origin\u0026#39;, \u0026#39;*\u0026#39;); response.headers .add(\u0026#39;Access-Control-Allow-Methods\u0026#39;, \u0026#39;POST, OPTIONS\u0026#39;); response.headers.add(\u0026#39;Access-Control-Allow-Headers\u0026#39;, \u0026#39;Origin, X-Requested-With, Content-Type, Accept\u0026#39;); } 更多信息，请参考维基百科的跨源资源共享一文。\n使用 http_server 包 本节的示例文件：mini_file_server.dart 和 static_file_server.dart。\n对于一些更高层次的构件，我们推荐你尝试 http_server pub 包，它包含了一组类，与 dart:io 库中的 HttpServer 类一起，使得实现 HTTP 务器更加容易。\n在本节中，我们比较了一个只使用 dart:io 的 API 编写的服务器和一个使用 dart:io 和 http_server 一起编写的具有相同功能的服务器。\n你可以在 mini_file_server.dart 中找到第一个服务器。它通过从 web 目录返回 index.html 文件的内容来响应所有请求。\n试试吧 在命令行中运行服务器:\n$ cd httpserver $ dart bin/mini_file_server.dart 在浏览器中输入 localhost:4044。服务器会显示一个 HTML 文件。\n这是迷你文件服务器的代码:\nimport \u0026#39;dart:io\u0026#39;; File targetFile = File(\u0026#39;web/index.html\u0026#39;); Future main() async { Stream\u0026lt;HttpRequest\u0026gt; server; try { server = await HttpServer.bind(InternetAddress.loopbackIPv4, 4044); } catch (e) { print(\u0026#34;Couldn\u0026#39;t bind to port 4044: $e\u0026#34;); exit(-1); } await for (HttpRequest req in server) { if (await targetFile.exists()) { print(\u0026#34;Serving ${targetFile.path}.\u0026#34;); req.response.headers.contentType = ContentType.html; try { await req.response.addStream(targetFile.openRead()); } catch (e) { print(\u0026#34;Couldn\u0026#39;t read file: $e\u0026#34;); exit(-1); } } else { print(\u0026#34;Can\u0026#39;t open ${targetFile.path}.\u0026#34;); req.response.statusCode = HttpStatus.notFound; } await req.response.close(); } } 这段代码确定文件是否存在，如果存在，则打开文件，并将文件内容管道化到HttpResponse对象。\n第二个服务器，你可以在 basic_file_server.dart 中找到它的代码，使用 http_server 包。\n试试吧 在命令行中运行服务器:\n$ cd httpserver $ dart bin/basic_file_server.dart 在浏览器中输入 localhost:4046。服务器显示与之前相同的 index.html 文件。\n在这个服务器中，处理请求的代码要短得多，因为 VirtualDirectory 类处理服务文件的细节。\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;package:http_server/http_server.dart\u0026#39;; File targetFile = File(\u0026#39;web/index.html\u0026#39;); Future main() async { VirtualDirectory staticFiles = VirtualDirectory(\u0026#39;.\u0026#39;); var serverRequests = await HttpServer.bind(InternetAddress.loopbackIPv4, 4046); await for (var request in serverRequests) { staticFiles.serveFile(targetFile, request); } } 这里，请求的资源 index.html 是由 VirtualDirectory 类中的 serviceFile() 方法提供的。你不需要写代码来打开一个文件并将其内容用管道传送到请求中。\n另一个文件服务器 static_file_server.dart 也使用 http_server 包。这个服务器可以服务于服务器目录或子目录中的任何文件。\n运行 static_file_server.dart，用 localhost:4048 这个 URL 进行测试。\n下面是 static_file_server.dart 的代码:\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;package:http_server/http_server.dart\u0026#39;; Future main() async { var staticFiles = VirtualDirectory(\u0026#39;web\u0026#39;); staticFiles.allowDirectoryListing = true; /*1*/ staticFiles.directoryHandler = (dir, request) /*2*/ { var indexUri = Uri.file(dir.path).resolve(\u0026#39;index.html\u0026#39;); staticFiles.serveFile(File(indexUri.toFilePath()), request); /*3*/ }; var server = await HttpServer.bind(InternetAddress.loopbackIPv4, 4048); print(\u0026#39;Listening on port 4048\u0026#39;); await server.forEach(staticFiles.serveRequest); /*4*/ } /1/ 允许客户端请求服务器目录内的文件。\n/2/ 一个匿名函数，处理对目录本身的请求，即 URL 不包含文件名。该函数将这些请求重定向到 index.html。\n/3/ serveFile 方法为一个文件提供服务，在这个例子中，它为目录请求服务index.html。\n/4/ VirtualDirectory 类提供的 serviceRequest 方法处理指定文件的请求。\n使用 bindSecure() 的 https 方法 本节的示例：hello_world_server_secure.dart。\n你可能已经注意到，HttpServer 类定义了一个叫做 bindSecure() 的方法，它使用 HTTPS(Hyper Text Transfer Protocol with Secure Sockets Layer)提供安全连接。要使用 bindSecure() 方法，你需要一个证书，这个证书由证书颁发机构(CA)提供。有关证书的更多信息，请参考什么是 SSL 和什么是证书？\n为了说明问题，下面的服务器 hello_world_server_secure.dart 使用 Dart 团队创建的证书调用 bindSecure() 进行测试。你必须为你的服务器提供自己的证书。\nimport \u0026#39;dart:io\u0026#39;; String certificateChain = \u0026#39;server_chain.pem\u0026#39;; String serverKey = \u0026#39;server_key.pem\u0026#39;; Future main() async { var serverContext = SecurityContext(); /*1*/ serverContext.useCertificateChain(certificateChain); /*2*/ serverContext.usePrivateKey(serverKey, password: \u0026#39;dartdart\u0026#39;); /*3*/ var server = await HttpServer.bindSecure( \u0026#39;localhost\u0026#39;, 4047, serverContext, /*4*/ ); print(\u0026#39;Listening on localhost:${server.port}\u0026#39;); await for (HttpRequest request in server) { request.response.write(\u0026#39;Hello, world!\u0026#39;); await request.response.close(); } } /1/ 安全网络连接的可选设置在 SecurityContext 对象中指定，有一个默认的对象 SecurityContext.defaultContext，包括知名证书机构的可信根证书。\n/2/ 一个包含从服务器证书到签名机关根证书链的文件，格式为 PEM。\n/3/ 一个包含（加密的）服务器证书私钥的文件，PEM 格式。\n/4/ 在服务器上，上下文参数是必需的，对客户端来说是可选的。如果省略它，则使用默认的内置可信根的上下文。\n其他资源 请访问这些 API 文档，了解本教程中讨论的类和库的更多细节。\n   Dart 类 目的     HttpServer 一个 HTTP 服务器   HttpClient 一个 HTTP 客户端   HttpRequest 一个服务器端请求对象   HttpResponse 一个服务器端响应对象   HttpClientRequest 一个客户端请求对象   HttpClientResponse 一个客户端响应对象   HttpHeaders 请求头   HttpStatus 响应的状态   InternetAddress 一个互联网地址   SecurityContext 包含安全连接的证书、密钥和信任信息。   http_server 包 一个具有较高级别的 HTTP 类的包    下一步该怎么做？  如果你还没有尝试过服务器端的 codelab，可以尝试编写一个服务器应用程序。 Servers with Dart 链接到编写独立 Dart 应用程序的资源，包括服务器。  ","permalink":"https://ohmyweekly.github.io/notes/write-http-clients/","tags":["flutter","client"],"title":"编写HTTP客户端和服务器"},{"categories":["programming"],"contents":"Dart 生态系统使用包来管理共享软件，如库和工具。要获得 Dart 包，你可以使用 pub 包管理器。你可以在 pub.dev 网站上找到公开的包，也可以从本地文件系统或其他地方加载包，比如 Git 仓库。无论你的包来自哪里，pub 都会管理版本依赖关系，帮助你获得相互之间以及与 SDK 版本兼容的包版本。\n大多数精通 Dart 的 IDE 都提供了对 pub 的支持，包括创建、下载、更新和发布包。或者你可以在命令行中使用 pub。\n至少，一个 Dart 包是一个包含 pubspec 文件的目录。pubspec 包含一些关于包的元数据。此外，一个包可以包含依赖关系(在 pubspec 中列出)，Dart 库，应用程序，资源，测试，图像和例子。\n要使用一个包，请执行以下操作:\n 创建一个 pubspec(一个名为 pubspec.yaml 的文件，它列出了软件包的依赖关系，并包含其他元数据，如版本号)。 使用 pub 来获取你的包的依赖关系。 如果你的 Dart 代码依赖于软件包中的一个库，则导入该库。  创建一个 pubspec pubspec 是一个名为 pubspec.yaml 的文件，它位于你的应用程序的顶级目录中。最简单的 pubspec 只列出了包名:\nname: my_app 下面是一个 pubspec 的例子，它声明了两个包(js 和 intl)的依赖关系，这两个包都托管在 pub.dev 站点上:\nname: my_app dependencies: js: ^0.6.0 intl: ^0.15.8 关于创建 pubspec 的详细信息，请参见 pubspec 文档和你要使用的包的文档。\n获取软件包 一旦你有了 pubspec，你就可以从你的应用程序的顶级目录中运行 pub get:\n$ cd \u0026lt;path-to-my_app\u0026gt; $ pub get 这个过程被称为获取依赖关系。\npub get 命令可以确定您的应用程序依赖于哪些软件包，并将它们放在中央系统缓存中。如果您的应用程序依赖于已发布的包，pub 会从 pub.dev 站点下载该包。对于 Git 依赖，pub 会克隆 Git 仓库。还包括了过渡性依赖。例如，如果 js 包依赖于 test 包，pub 会同时抓取 js 包和 test 包。\nPub 会创建一个 .packages 文件(在你的应用程序的顶层目录下)，将你的应用程序所依赖的每个包名映射到系统缓存中的对应包。\n从包中导入库 要导入在包中找到的库，使用 package: 前缀:\nimport \u0026#39;package:js/js.dart\u0026#39; as js; import \u0026#39;package:intl/intl.dart\u0026#39;; Dart 运行时在 package: 之后的所有内容都会在应用程序的 .package 文件中进行查找。\n你也可以使用这种风格从你自己的包中导入库。比方说，transmogrify 包的布局如下:\ntransmogrify/ lib/ transmogrify.dart parser.dart test/ parser/ parser_test.dart parser_test.dart 文件可以这样导入 parser.dart:\nimport \u0026#39;package:transmogrify/parser.dart\u0026#39;; 升级依赖关系 当你第一次为你的软件包获取一个新的依赖关系时，pub 会下载与你的其他依赖关系兼容的最新版本。然后，它通过创建一个 lockfile 锁文件来锁定您的软件包，使其始终使用该版本。这是一个名为 pubspec.lock 的文件，由 pub 创建并存储在 pubspec 的旁边。它列出了您的软件包所使用的每个依赖关系的特定版本 (即时的和过渡的)。\n如果你的包是一个应用程序包，你应该把这个文件检查到源代码控制中。这样，在你的应用程序上工作的每个人都会使用所有包的相同版本。在 lockfile 文件中检查也可以确保你部署的应用使用相同版本的代码。\n当你准备好将你的依赖项升级到最新版本时，使用 pub upgrade 命令:\n$ pub upgrade pub upgrade 命令告诉 pub 使用你的包的依赖关系的最新版本来重新生成 lockfile 文件。如果你只想升级一个依赖关系，你可以指定要升级的软件包:\n$ pub upgrade transmogrify 该命令将 transmogrify 升级到最新版本，但其他一切都保持不变。\n由于 pubspec 中有冲突的版本限制，pub upgrade 命令并不能总是将每个软件包升级到最新版本。要识别需要编辑 pubspec 的过期软件包，请使用 pub outdated。\n更多信息 下面的页面有更多关于软件包和 pub 包管理器的信息。\n如何使用\n 创建包 发布包  参考\n Pub 依赖 Pub 环境变量 Pub 词汇表 Pub 包布局约定 Pub 版本哲学 Pubspec 格式化  Pub 命令\npub 工具提供了以下命令:\n pub cache pub deps pub downgrade pub get pub global pub outdated pub publish pub run pub upgrade pub uploader  有关所有 pub 命令的概述，请参阅 pub 工具文档。\n疑难解答\n故障排除 pub 提供了使用 pub 时可能遇到的问题的解决方案。\n","permalink":"https://ohmyweekly.github.io/notes/how-to-use-packages/","tags":["flutter","packages"],"title":"如何使用包"},{"categories":["programming"],"contents":"本页列出了一些 Dart 开发者发布的最流行和最有用的包。要找到更多的软件包\u0026ndash;也可以搜索核心库\u0026ndash;请使用 pub.dev 网站。\n常用的软件包可分为三类:\n 通用包 扩展 Dart 核心库的包 特定的包  通用包 以下包对各种项目都很有用:\n   包 描述 常用的 API     archive 对各种档案和压缩格式进行编码和解码。 Archive, ArchiveFile, TarEncoder, TarDecoder, ZipEncoder, ZipDecoder   characters 对用户感知的字符进行字符串操作(Unicode 字符簇) String.characters, Characters, CharacterRange   http 一组高级的函数和类，使其易于消费 HTTP 资源 delete(), get(), post(), read()   intl 国际化和本地化设施，支持复数和性别、日期和数字格式化和解析以及双向文本 Bidi, DateFormat, MicroMoney, TextDirection   json_serializable 一个易于使用的代码生成包。更多信息，请参阅 JSON 支持 @JsonSerializable   logging 一个可配置的机制，为你的应用程序添加消息记录 LoggerHandler, Level, LogRecord   mockito 一个在测试中模拟对象的流行框架。如果你正在编写依赖注入的测试，特别有用。与 test 包一起使用 Answering, Expectation, Verification   path 操作不同类型路径的常用操作。更多信息，请参见拆包: path absolute(), basename(), extension(), join(), normalize(), relative(), split()   quiver 实用工具，使 Dart 核心库的使用更加方便。Quiver 提供额外支持的一些库包括 async、cache、collection、core、iterables、pattern 和 测试 CountdownTimer (quiver.async); MapCache (quiver.cache); MultiMap, TreeSet (quiver.collection); EnumerateIterable (quiver.iterables); center(), compareIgnoreCase(), isWhiteSpace() (quiver.strings)   shelf Dart 的 Web 服务器中间件。Shelf 使它能轻松地创建和组成 Web 服务器，以及 Web 服务器的一部分 Cascade, Pipeline, Request, Response, Server   stack_trace 用于解析、检查和处理由底层 Dart 实现产生的堆栈痕迹的方法。还提供了以比原生 StackTrace 实现更可读的格式生成堆栈跟踪的字符串表示的函数, 更多信息，请参见拆包: stack_trace Trace.current(), Trace.format(), Trace.from()   stagehand 一个 Dart 项目生成器。当你创建一个新的应用程序时，WebStorm 和 IntelliJ 使用 Stagehand 模板，但你也可以从命令行使用模板 一般通过 IDE 或 stagehand 命令来使用   test 在 Dart 中编写和运行测试的标准方法 expect(), group(), test()   yaml YAML 解析器 loadYaml(), loadYamlStream()    扩展 Dart 核心库的包 以下每个包都建立在一个核心库的基础上，增加了功能并填补了缺失的功能:\n   包 描述 常用的 API     async 在 dart:async 的基础上进行了扩展，增加了实用类来处理异步计算。更多信息，请参见拆包: async 第1部分、第2部分和第3部分 AsyncMemoizer, CancelableOperation, FutureGroup, LazyStream, Result, StreamCompleter, StreamGroup, StreamSplitter   collection 在 dart:collection 的基础上进行了扩展，增加了实用函数和类，使处理集合的工作变得更加容易。更多信息，请看拆包：collection Equality, CanonicalizedMap, MapKeySet, MapValueSet, PriorityQueue, QueueList   convert 在 dart:convert 的基础上，增加了编码器和解码器，用于在不同的数据表现形式之间进行转换。其中一种数据表示方式是百分比编码，也被称为 URL 编码 HexDecoder, PercentDecoder   io 包含两个库，ansi和io，以简化对文件、标准流和进程的处理。使用 ansi 库可以自定义终端输出。io 库有处理进程、stdin 和文件复制的 API copyPath(), isExecutable(), ExitCode, ProcessManager, sharedStdIn    专用包 下面是一些寻找比较专业的包的技巧，比如手机的包(Flutter)和网页开发的包。\nFlutter 包 请看 Flutter 网站上的使用包。或者使用 pub.dev 网站搜索 Flutter 包。\n网络包 参见网络库和包。或者使用 pub.dev 站点搜索 web 包。\n命令行和服务器软件包 参见命令行和服务器库和包。或者使用 pub.dev 站点搜索其他包。\n","permalink":"https://ohmyweekly.github.io/notes/commonly-used-packages/","tags":["flutter","packages"],"title":"常用的包"},{"categories":["programming"],"contents":"async-await\n这个 codelab 教你如何使用 futures、async 和 await 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\n要想从这个 codelab 中获得最大的收获，你应该具备以下条件。\n 掌握基本的 Dart 语法 有用其他语言编写异步代码的经验。  这个 codelab 包括以下材料。\n 如何以及何时使用 async 和 await 关键字。 使用 async 和 await 如何影响执行顺序。 如何在 async 函数中使用 try-catch 表达式处理异步调用中的错误。  估计完成这个代码实验的时间。40-60分钟\n注意：本页面使用嵌入式 DartPads 来显示示例和练习。如果你看到的是空框而不是 DartPads，请转到 DartPad 故障排除页面。\n为什么异步代码很重要 异步操作让你的程序在等待另一个操作完成时完成工作。下面是一些常见的异步操作。\n 通过网络获取数据。 写入数据库。 从文件中读取数据。  要在 Dart 中执行异步操作，你可以使用 Future 类以及 async 和 await 关键字。\n例子: 错误地使用异步函数 下面的例子显示了使用异步函数(fetchUserOrder())的错误方法。稍后你将使用 async 和 await 来修复这个例子。在运行这个例子之前，试着发现这个问题-你认为输出会是什么？\n// This example shows how *not* to write asynchronous Dart code.  String createOrderMessage() { var order = fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); void main() { print(createOrderMessage()); } 下面是这个例子为什么不能打印 fetchUserOrder() 最终产生的值。\n fetchUserOrder() 是一个异步函数，在延迟之后，提供一个描述用户订单的字符串：\u0026ldquo;Large Latte\u0026rdquo;。 为了得到用户的订单，createOrderMessage() 应该调用 fetchUserOrder()，并等待其完成。由于 createOrderMessage() 没有等待 fetchUserOrder() 完成，createOrderMessage() 无法获得 fetchUserOrder() 最终提供的字符串值。 取而代之的是，createOrderMessage() 得到的是待完成工作的表示：一个未完成的未来。您将在下一节了解更多关于未来的信息。 因为 createOrderMessage() 没有得到描述用户订单的值，所以这个例子没有打印 \u0026ldquo;Large Latte\u0026rdquo; 到控制台，而是打印 \u0026ldquo;Your order is: Instance of \u0026lsquo;_Future\u0026rsquo;\u0026quot;。  在接下来的章节中，你将学习关于 futures 和关于使用 futures 的工作（使用 async 和 await），这样你就能编写必要的代码，使 fetchUserOrder() 向控制台打印所需的值(\u0026ldquo;Large Latte\u0026rdquo;)。\n关键术语:\n 同步操作: 同步操作会阻止其他操作的执行，直到它完成。 同步函数：同步函数只执行同步操作。 异步操作：异步操作一旦启动，就允许其他操作在它完成之前执行。 异步函数：异步函数至少执行一个异步操作，也可以执行同步操作。  什么是未来？ future(小写 \u0026ldquo;f\u0026rdquo;)是 Future（大写 \u0026ldquo;F\u0026rdquo;）类的一个实例。一个 future 代表异步操作的结果，可以有两种状态：未完成或完成。\n注意：未完成是一个 Dart 术语，指的是一个未来的状态，在它产生一个值之前。\n未完成的 当你调用一个异步函数时，它会返回一个未完成的未来。这个未来正在等待函数的异步操作完成或抛出一个错误。\n已完成的 如果异步操作成功，未来就以一个值完成。否则它将以一个错误完成。\n用一个值来完成 类型为 Future\u0026lt;T\u0026gt; 的 future 用一个类型为 T 的值来完成。例如，一个类型为 Future\u0026lt;String\u0026gt; 的 future 会产生一个字符串值。如果一个 future 没有产生一个可用的值，那么 future 的类型是 Future\u0026lt;void\u0026gt;。\n用一个错误来完成 如果函数执行的异步操作因为任何原因而失败，future 就会以错误的方式完成。\n例子: 介绍 future 在下面的例子中，fetchUserOrder() 返回一个在打印到控制台后完成的 future。因为它没有返回一个可用的值，fetchUserOrder() 的类型是 Future\u0026lt;void\u0026gt;。在运行这个例子之前，试着预测一下哪个会先打印：\u0026ldquo;Large Latte\u0026rdquo; 或 \u0026ldquo;Fetching user order\u0026hellip;\u0026quot;。\nFuture\u0026lt;void\u0026gt; fetchUserOrder() { // Imagine that this function is fetching user info from another service or database.  return Future.delayed(Duration(seconds: 2), () =\u0026gt; print(\u0026#39;Large Latte\u0026#39;)); } void main() { fetchUserOrder(); print(\u0026#39;Fetching user order...\u0026#39;); } 在前面的例子中，尽管 fetchUserOrder() 在第8行的 print() 调用之前执行，控制台还是在 fetchUserOrder() 的输出 (\u0026ldquo;Large Latte\u0026rdquo;) 之前显示了第8行的输出 (\u0026ldquo;Fetching user order\u0026hellip;\u0026quot;)。这是因为 fetchUserOrder() 在打印 \u0026ldquo;Large Latte\u0026rdquo; 之前会有延迟。\n例子: 完成时出现错误 运行下面的例子，看看未来如何完成一个错误。稍后你将学习如何处理错误。\nFuture\u0026lt;void\u0026gt; fetchUserOrder() { // Imagine that this function is fetching user info but encounters a bug  return Future.delayed(Duration(seconds: 2), () =\u0026gt; throw Exception(\u0026#39;Logout failed: user ID is invalid\u0026#39;)); } void main() { fetchUserOrder(); print(\u0026#39;Fetching user order...\u0026#39;); } 在这个例子中，fetchUserOrder() 完成时出现错误，表明用户ID无效。\n你已经学习了 future 和它们如何完成，但你如何使用异步函数的结果呢？在下一节中，你将学习如何使用 async 和 await 关键字来获取结果。\n快速回顾:\n 一个 Future\u0026lt;T\u0026gt; 实例会产生一个 T 类型的值。 如果一个 future 没有产生一个可用的值，那么 future 的类型是 Future\u0026lt;void\u0026gt;。 一个 future 可以处于两种状态之一：未完成或完成。 当你调用一个返回 future 的函数时，函数会把要做的工作排队，并返回一个未完成的 future。 当一个 future 的操作完成时，future 以一个值或以一个错误完成。  关键术语:\n Future: Dart Future 类。 future：Dart Future 类的一个实例。  使用 future：async 和 await async 和 await 关键字提供了一种声明式的方式来定义异步函数并使用它们的结果。在使用 async 和 await 时，请记住以下两个基本准则。\n 要定义一个异步函数，请在函数主体前添加 async。 await 关键字只能在 async 函数中使用。  下面是一个将 main() 从同步函数转换为异步函数的例子。\n首先，在函数体前添加 async 关键字:\nvoid main() async { ··· } 如果函数有声明的返回类型，那么更新类型为 Future\u0026lt;T\u0026gt;，其中 T 是函数返回的值的类型。如果函数没有明确返回值，那么返回类型为 Future\u0026lt;void\u0026gt;。\nFuture\u0026lt;void\u0026gt; main() async { ··· } 现在你已经有了一个 async 函数，你可以使用 await 关键字来等待一个 future 的完成:\nprint(await createOrderMessage()); 正如下面两个例子所显示的，async 和a wait 关键字导致异步代码看起来很像同步代码。唯一的区别在异步示例中突出显示，如果你的窗口足够宽，它就在同步示例的右边。\n示例：同步函数\nString createOrderMessage() { var order = fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is  // more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); void main() { print(\u0026#39;Fetching user order...\u0026#39;); print(createOrderMessage()); } Fetching user order... Your order is: Instance of _Future\u0026lt;String\u0026gt; 例子：异步函数\nFuture\u0026lt;String\u0026gt; createOrderMessage() async { var order = await fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is  // more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); Future\u0026lt;void\u0026gt; main() async { print(\u0026#39;Fetching user order...\u0026#39;); print(await createOrderMessage()); } Fetching user order... Your order is: Large Latte 异步示例在三个方面有所不同。\n createOrderMessage() 的返回类型从 String 变为 Future\u0026lt;String\u0026gt;。 async 关键字出现在 createOrderMessage() 和 main() 的函数体之前。 await 关键字出现在调用异步函数 fetchUserOrder() 和 createOrderMessage() 之前。  关键术语:\n async: 你可以在一个函数的主体前使用 async 关键字来标记它为异步函数。 async 函数: async 函数是一个标有 async 关键字的函数。 await：可以使用 await 关键字来获取异步表达式的完成结果。await 关键字只在 async 函数中起作用。  使用 async 和 await 的执行流程 一个异步函数在第一个 await 关键字之前是同步运行的。这意味着在一个 async 函数体中，第一个 await 关键字之前的所有同步代码都会立即执行。\n版本说明：在 Dart 2.0 之前，一个异步函数立即返回，而不会在异步函数体中执行任何代码。\n例子：在异步函数内执行。在异步函数中执行 运行下面的例子，看看如何在异步函数体中执行。你认为输出会是什么？\nFuture\u0026lt;void\u0026gt; printOrderMessage() async { print(\u0026#39;Awaiting user order...\u0026#39;); var order = await fetchUserOrder(); print(\u0026#39;Your order is: $order\u0026#39;); } Future\u0026lt;String\u0026gt; fetchUserOrder() { // Imagine that this function is more complex and slow.  return Future.delayed(Duration(seconds: 4), () =\u0026gt; \u0026#39;Large Latte\u0026#39;); } Future\u0026lt;void\u0026gt; main() async { countSeconds(4); await printOrderMessage(); } // You can ignore this function - it\u0026#39;s here to visualize delay time in this example. void countSeconds(int s) { for (var i = 1; i \u0026lt;= s; i++) { Future.delayed(Duration(seconds: i), () =\u0026gt; print(i)); } } 运行上例中的代码后，尝试将第2行和第3行反过来。\nvar order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); 注意到输出的时间发生了变化，现在 print('Awaiting user order') 出现在 printOrderMessage() 中第一个 await 关键字之后。\n练习: 练习使用 async 和 await 下面的练习是一个失败的单元测试，其中包含部分完成的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 main()。\n为了模拟异步操作，调用以下函数，这些函数是为你提供的。\n   函数 类型签名 描述     fetchRole() FuturefetchRole() 获取用户角色的简短描述。   fetchLoginAmount() FuturefetchLoginAmount() 获取用户的登录次数。    第1部分：reportUserRole()\n为 reportUserRole() 函数添加代码，使其执行以下操作。\n 返回一个以下列字符串完成的 future： \u0026quot;User role: \u0026lt;user role\u0026gt;\u0026quot;。  注意：你必须使用 fetchRole() 返回的实际值；复制和粘贴示例返回值不会使测试通过。 示例返回值: \u0026ldquo;User role: tester\u0026rdquo;   通过调用提供的函数 fetchRole() 获取用户角色。  第二部分：reportLogins()\n实现一个异步函数 reportLogins()，使其执行以下操作。\n 返回字符串 \u0026ldquo;Total number of logins: \u0026lt;# of logins\u0026gt;\u0026rdquo;。  注意：你必须使用 fetchLoginAmount() 返回的实际值；复制和粘贴示例返回值不会使测试通过。 reportLogins() 的返回值示例: \u0026quot;Total number of logins: 57\u0026quot;。   通过调用提供的函数 fetchLoginAmount() 来获取登录次数。  Future\u0026lt;String\u0026gt; reportUserRole() async { var username = await fetchRole(); return \u0026#39;User role: $username\u0026#39;; } Future\u0026lt;String\u0026gt; reportLogins() async { var logins = await fetchLoginAmount(); return \u0026#39;Total number of logins: $logins\u0026#39;; } 注意：如果你的代码通过了测试，你可以忽略信息级的消息。\n处理错误 要处理 async 函数中的错误，使用 try-catch:\ntry { var order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); } catch (err) { print(\u0026#39;Caught error: $err\u0026#39;); } 在一个 async 函数中，你可以像在同步代码中一样编写 try-catch 子句。\n例子：async 和 await 的 try-catch 子句 运行下面的例子，看看如何处理一个异步函数的错误。你认为输出会是什么？\nFuture\u0026lt;void\u0026gt; printOrderMessage() async { try { var order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); print(order); } catch (err) { print(\u0026#39;Caught error: $err\u0026#39;); } } Future\u0026lt;String\u0026gt; fetchUserOrder() { // Imagine that this function is more complex.  var str = Future.delayed( Duration(seconds: 4), () =\u0026gt; throw \u0026#39;Cannot locate user order\u0026#39;); return str; } Future\u0026lt;void\u0026gt; main() async { await printOrderMessage(); } 练习: 练习处理错误 下面的练习提供了使用异步代码处理错误的练习，使用上一节中描述的方法。为了模拟异步操作，你的代码将调用以下函数，该函数为你提供。\n| 函数 | 类型签名 | 描述 | | fetchNewUsername() | FuturefetchNewUsername() |\t返回你可以用来替换旧用户名的新用户名。|\n使用 async 和 await 来实现一个异步的 changeUsername() 函数，该函数执行以下操作。\n 调用提供的异步函数 fetchNewUsername() 并返回其结果。  changeUsername() 的返回值示例: \u0026ldquo;jane_smith_92\u0026rdquo;   捕获任何发生的错误并返回错误的字符串值。  你可以使用 toString() 方法对 Exceptions 和Errors 进行字符串化。    Future\u0026lt;String\u0026gt; changeUsername () async { try { return await fetchNewUsername(); } catch (err) { return err.toString(); } } 练习: 把所有的东西放在一起 现在是时候在最后一个练习中练习所学的知识了。为了模拟异步操作，本练习提供了异步函数 fetchUsername() 和 logoutUser():\n| 函数 | 类型签名 | 描述 | | fetchUsername() |\tFuturefetchUsername() | 返回与当前用户相关联的名称。 | | logoutUser()\t| FuturelogoutUser()\t| 执行当前用户的注销，并返回被注销的用户名。 |\n编写以下内容。\n第一部分：addHello()\n 编写一个函数 addHello()，它接受一个单一的 String 参数。 addHello() 返回它的 String 参数，前面加 \u0026lsquo;Hello\u0026rsquo;。 例如：addHello('Jon') 返回 \u0026lsquo;Hello Jon\u0026rsquo;。  第二部分：greetUser()\n 编写一个不接受参数的函数 greetUser()。 为了得到用户名，greetUser() 调用提供的异步函数 fetchUsername()。 greetUser() 通过调用 addHello() 为用户创建一个问候语，传递用户名，并返回结果。 例子: 如果 fetchUsername() 返回 \u0026lsquo;Jenny\u0026rsquo;, 那么 greetUser() 返回 \u0026lsquo;Hello Jenny\u0026rsquo;.  第三部分：sayGoodbye()\n  编写一个函数 sayGoodbye()，它的功能如下。\n 不接受任何参数 捕获任何错误。 调用所提供的异步函数 logoutUser().    如果 logoutUser() 失败，sayGoodbye() 返回任何你喜欢的字符串。\n  如果 logoutUser() 成功，sayGoodbye() 返回字符串 '\u0026lt;result\u0026gt; Thanks, see you next time'，其中 \u0026lt;result\u0026gt; 是调用 logoutUser() 返回的字符串值。\n  String addHello(user) =\u0026gt; \u0026#39;Hello $user\u0026#39;; Future\u0026lt;String\u0026gt; greetUser() async { var username = await fetchUsername(); return addHello(username); } Future\u0026lt;String\u0026gt; sayGoodbye() async { try { var result = await logoutUser(); return \u0026#39;$resultThanks, see you next time\u0026#39;; } catch (e) { return \u0026#39;Failed to logout user: $e\u0026#39;; } } 下一步是什么？ 恭喜你，你已经完成了 codelab 的学习！如果你还想了解更多，这里有一些下一步的建议。\n 玩玩 DartPad。 尝试另一个 codelab。 学习更多关于 futures 和异步的知识。  Streams tutorial: 学习如何使用异步事件的序列。 来自 Google 的 Dart视频: 观看一个或多个关于异步编码的视频。或者，如果你喜欢，阅读基于这些视频的文章。(从隔离和事件循环开始。)   获取 Dart SDK。  如果你对使用嵌入式 DartPads 感兴趣，就像这个 codelab 一样，请看教程中使用 DartPad 的最佳实践。\n","permalink":"https://ohmyweekly.github.io/notes/futures-async-await/","tags":["async","futures","await","dart"],"title":"异步编程：futures、async、await。"},{"categories":["programming"],"contents":"介绍 Flutter 是 Google 的 UI 工具包，用于从单一代码库中为手机、网页和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起工作，被世界各地的开发者和组织使用，并且是免费和开源的。\n在这个代码实验室中，你将创建一个简单的手机 Flutter 应用。如果你熟悉面向对象的代码和基本的编程概念-如变量、循环和条件, 那么你就可以完成这个 codelab。你不需要以前有 Dart、手机或 Web 编程的经验。\n你将在第1部分学到什么  如何编写一款在 iOS、Android 和 Web 上看起来很自然的 Flutter 应用？ Flutter 应用程序的基本结构。 寻找和使用包来扩展功能。 使用热重装来加快开发周期。 如何实现一个有状态的小组件。 如何创建一个无限的、懒加载的列表。  在这个 codelab 的第2部分中，你将添加交互性，修改应用程序的主题，并添加导航到新页面的能力(在 Flutter 中称为路由)。\n你将在第1部分中构建什么 你将实现一个移动应用，为一家创业公司生成建议的名字。用户可以选择和取消选择名字，保存最好的名字。代码一次懒惰地生成10个名字。随着用户的滚动，会生成更多的名字。用户可以滚动的范围没有限制。\n下面的 GIF 动画显示了应用程序在完成部分时的工作情况。\n设置你的 Flutter 环境 你需要两个软件来完成这个实验室-Flutter SDK和一个编辑器。(codelab 假设你使用 Android Studio，但你可以使用你的首选编辑器。)\n你可以通过使用以下任何设备来运行 codelab。\n 一个物理的 Android 或 iOS 设备连接到你的计算机并设置为开发者模式。 iOS 模拟器(需要安装 Xcode 工具) 安卓模拟器(需要在 Android Studio 中进行设置) 浏览器(调试时需要使用 Chrome 浏览器)  如果你想编译你的应用程序以在 web 上运行，你必须启用此功能（目前处于测试阶段）。要启用 web 支持，请使用以下说明。\nflutter channel beta flutter upgrade flutter config --enable-web 你只需要运行一次 config 命令。启用 Web 支持后，你创建的每个 Flutter 应用也会为 Web 编译。在你的 IDE 的设备下拉菜单下面，或者在命令行使用 flutter devices，你现在应该看到 Chrome 和 Web 服务器被列出。Chrome 设备会自动启动 Chrome。Web 服务器会启动一个托管应用程序的服务器，这样你就可以从任何浏览器加载它。在开发过程中使用 Chrome 设备，以便你可以使用 DevTools，而当你要在其他浏览器上进行测试时使用 Web 服务器。有关更多信息，请参阅使用 Flutter 构建 Web 应用程序和在 Web 上编写你的第一个 Flutter 应用程序。\n创建 Flutter 应用程序的启动器 通过使用创建应用程序中的说明来创建一个简单的、模板化的 Flutter 应用程序。输入 startup_namer(而不是 flutter_app)作为项目名称。您将修改启动器应用程序来创建完成的应用程序。\n提示：如果你在 IDE 中没有看到能够启动一个新的 Flutter 项目作为一个选项，那么请确保你已经安装了 Flutter 和 Dart 的插件。\n你将主要编辑 lib/main.dart，Dart 的代码就在这里。\n替换 lib/main.dart 的内容。 删除 lib/main.dart 中的所有代码，并用下面的代码替换，在屏幕中央显示 \u0026ldquo;Hello World\u0026rdquo;。\nimport \u0026#39;package:flutter/material.dart\u0026#39;; void main() =\u0026gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Welcome to Flutter\u0026#39;, home: Scaffold( appBar: AppBar( title: const Text(\u0026#39;Welcome to Flutter\u0026#39;), ), body: const Center( child: const Text(\u0026#39;Hello World\u0026#39;), ), ), ); } } 提示：当把代码粘贴到你的应用程序中时，缩进会变得歪斜。你可以用以下 Flutter 工具来解决。\n Android Studio/IntelliJ IDEA: 右键点击 Dart 代码，选择用 dartfmt 重格式代码。 VS code: 右键点击并选择格式化文档。 终端: 运行 flutter format \u0026lt;文件名\u0026gt;。  运行应用程序。您应该看到 Android，iOS 或 Web 输出，取决于您的设备。\n安卓系统:\niOS:\n小贴士：第一次在物理设备上运行时，可能需要一段时间来加载。之后，你可以使用热重载来快速更新。在支持的 IDE 中，如果应用正在运行，Save 也会执行热重载。当使用 flutter run 直接从控制台运行应用程序时，输入 r 来执行热重载。\n观察:\n 这个例子创建了一个 Material 应用。Material 是一种视觉设计语言，是移动和 Web 的标准。Flutter 提供了一套丰富的 Material 部件。 main 方法使用箭头(=\u0026gt;)符号。对单行函数或方法使用箭头符号。 应用程序扩展了 StatelessWidget，这使得应用程序本身成为一个组件。在 Flutter 中，几乎所有的东西都是组件，包括对齐、填充和布局。 Scaffold 组件来自 Material 库，它提供了一个默认的应用栏、一个标题和一个 body 属性，其中存放着主屏幕的组件树。组件子树可以相当复杂。 组件的主要工作是提供一个 build 方法，描述如何用其他低级组件来显示该组件。 本例的主体由包含 Text 子部件的 Center 部件组成。Center 组件将其组件子树对齐到屏幕的中心。  使用外部软件包 在这一步中，您将开始使用一个名为 english_words 的开源包，它包含了几千个最常用的英语单词，还有一些实用函数。\n你可以在 pub.dev 找到 english_words 包，以及许多其他开源包。\npubspec 文件管理着 Flutter 应用的资产。在 pubspec.yaml 中，附加 english_words: ^3.1.5(english_words 3.1.5 或更高)到依赖列表中。\ndependencies:flutter:sdk:fluttercupertino_icons:^0.1.2english_words:^3.1.5# add this line在 Android Studio 的编辑器视图中查看 pubspec 时，点击 Packages get。这将把包拉到你的项目中。你应该在控制台中看到以下内容。\nflutter packages get Running \u0026#34;flutter packages get\u0026#34; in startup_namer... Process finished with exit code 0 执行 Pub get 也会自动生成 \u0026ldquo;pubspec.lock\u0026rdquo; 文件，其中包含所有拉入项目的包的列表和它们的版本号。\n在 lib/main.dart 中，导入新包:\nimport \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:english_words/english_words.dart\u0026#39;; // Add this line. 当你输入时，Android Studio 会给你建议导入的库。然后，它将导入的字符串渲染成灰色，让你知道导入的库是未使用的（到目前为止）。\n接下来，你将使用 english_words 包来生成文本，而不是使用 \u0026ldquo;Hello World\u0026rdquo;。\n做以下修改。\nimport \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:english_words/english_words.dart\u0026#39;; void main() =\u0026gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); // Add this line.  return MaterialApp( title: \u0026#39;Welcome to Flutter\u0026#39;, home: Scaffold( appBar: AppBar( title: Text(\u0026#39;Welcome to Flutter\u0026#39;), ), body: Center( //child: Text(\u0026#39;Hello World\u0026#39;), // Replace this text...  child: Text(wordPair.asPascalCase), // With this text.  ), ), ); } } 提示: Pascal 大小写(也称为上驼形大小写)意味着字符串中的每个单词，包括第一个单词，都以大写字母开头。所以，uppercamelcase 就变成了 UpperCamelCase。\n如果应用程序正在运行，热重载来更新正在运行的应用程序。(在命令行中，你可以输入 r 来热重载。)每次点击热重载或保存项目时，你应该会在运行中的应用程序中看到一个不同的单词对，随机选择。这是因为单词对是在 build 方法里面生成的，每次 MaterialApp 需要渲染时，或者在 Flutter Inspector 中切换 Platform 时，都会运行该方法。\nAndroid:\niOS:\n有问题？ 如果您的应用程序没有正确运行，请查找错别字。如果需要，请使用以下链接中的代码来恢复正常。\n pubspec.yaml lib/main.dart  添加一个有状态的组件 无状态组件是不可改变的，这意味着它们的属性不能改变-所有值都是最终值。\n有状态组件维护的状态可能在组件的生命周期内发生变化。实现一个有状态的组件至少需要两个类。1) 一个 StatefulWidget，它可以创建一个 State 类的实例。StatefulWidget 对象本身是不可变的，可以被丢弃和再生，但 State 对象会在 widget 的生命周期内持久存在。\n在这一步骤中，您将添加一个有状态的组件 RandomWords，并创建其 State 类 _RandomWordsState。然后，您将在现有的 MyApp 无状态组件中使用 RandomWords 作为子类。\n为有状态组件创建模板代码。\n它可以放在 MyApp 以外的文件中的任何位置，但解决方案将其放在文件的底部。在 lib/main.dart 中，将光标定位在所有代码之后，输入回车键几次，重新开始一行。在你的 IDE 中，开始输入 stful。编辑器会询问你是否要创建一个 Stateful 的组件。按回车键接受。两个类的模板代码出现了，光标定位让你输入无状态组件的名称。\n输入 RandomWords 作为您的小组件的名称。\n正如您在下面的代码中所看到的，RandomWords 组件除了创建它的 State 类之外，几乎没有其他的功能。\n一旦您输入 RandomWords 作为有状态组件的名称，IDE 会自动更新相应的 State 类，将其命名为 _RandomWordState。默认情况下，State 类的名称是以下划线为前缀的。在标识符前加上下划线可以加强 Dart 语言的隐私性，也是 State 对象的最佳实践。\nIDE 也会自动更新 State 类以扩展 State\u0026lt;RandomWords\u0026gt;，表明你正在使用一个专门用于 RandomWords 的通用 State 类。应用程序的大部分逻辑都在这里-它为 RandomWords 组件维护状态。这个类保存了生成的词对列表，随着用户的滚动而无限增长，在本实验室的第二部分中，当用户通过切换心形图标从列表中添加或删除这些词对时，该类会对其进行收藏。\n现在两个类的外观如下:\nclass RandomWords extends StatefulWidget { @override _RandomWordsState createState() =\u0026gt; _RandomWordsState(); } class _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { @override Widget build(BuildContext context) { return Container(); } } 更新 _RandomWordsState 中的 build() 方法。\n用以下两行替换 return Container();:\nclass _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); // NEW  return Text(wordPair.asPascalCase); // NEW  } } 通过以下修改，删除 MyApp 中的文字生成代码:\nclass MyApp extends StatelessWidget { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); // DELETE  return MaterialApp( title: \u0026#39;Welcome to Flutter\u0026#39;, home: Scaffold( appBar: AppBar( title: Text(\u0026#39;Welcome to Flutter\u0026#39;), ), body: Center( //child: Text(wordPair.asPascalCase), // REPLACE with...  child: RandomWords(), // ...this line  ), ), ); } } 热重载应用程序。应用程序应该像以前一样，每次热重载或保存应用程序时都会显示一个单词配对。\n提示：如果您在热重载时看到警告，表明您可能需要重新启动应用程序，您应该考虑重新启动应用程序。这可能是一个假阳性，但重启可以确保您的更改反映在应用程序的 UI 中。\n遇到问题了？ 如果您的应用程序没有正确运行，您可以使用以下链接中的代码来恢复正常。\n lib/main.dart  创建一个无限滚动的 ListView 在这一步中，您将展开 _RandomWordsState 来生成并显示单词配对列表。随着用户的滚动，列表（显示在 ListView 小组件中）会无限增长。ListView 中的构建器工厂构造函数允许你按需懒惰地构建一个列表视图。\n在 _RandomWordState 类中添加一些状态变量。\n增加一个 _suggestions 列表，用于保存建议的单词配对。另外，添加一个 _biggerFont 变量，用于使字体大小变大。\nclass _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { final List\u0026lt;WordPair\u0026gt; _suggestions = \u0026lt;WordPair\u0026gt;[]; // NEW  final TextStyle _biggerFont = const TextStyle(fontSize: 18); // NEW  ... } 接下来，你将在 _RandomWordsState 类中添加一个 _buildSuggestions() 函数。这个方法可以构建显示建议词对的 ListView。\nListView 类提供了一个构建器属性 itemBuilder，它是一个工厂构建器和回调函数，指定为一个匿名函数。两个参数被传递给函数\u0026ndash;BuildContext 和行迭代器 i。迭代器从0开始，每次调用函数时递增，每一个建议的单词配对都会递增一次。这个模型允许建议列表在用户滚动时继续增长。\n添加整个 _buildSuggestions 函数。\n在 _RandomWordsState 类中，添加以下函数，如果你喜欢，请删除注释:\nWidget _buildSuggestions() { return ListView.builder( padding: const EdgeInsets.all(16), // The itemBuilder callback is called once per suggested  // word pairing, and places each suggestion into a ListTile  // row. For even rows, the function adds a ListTile row for  // the word pairing. For odd rows, the function adds a  // Divider widget to visually separate the entries. Note that  // the divider may be difficult to see on smaller devices.  itemBuilder: (BuildContext _context, int i) { // Add a one-pixel-high divider widget before each row  // in the ListView.  if (i.isOdd) { return Divider(); } // The syntax \u0026#34;i ~/ 2\u0026#34; divides i by 2 and returns an  // integer result.  // For example: 1, 2, 3, 4, 5 becomes 0, 1, 1, 2, 2.  // This calculates the actual number of word pairings  // in the ListView,minus the divider widgets.  final int index = i ~/ 2; // If you\u0026#39;ve reached the end of the available word  // pairings...  if (index \u0026gt;= _suggestions.length) { // ...then generate 10 more and add them to the  // suggestions list.  _suggestions.addAll(generateWordPairs().take(10)); } return _buildRow(_suggestions[index]); } ); } _buildSuggestions 函数对每个词对调用一次 _buildRow。该函数在 ListTile 中显示每一个新的词对，这使得你可以在第2部分中使行更有吸引力。\n在 _RandomWordsState 中添加一个 _buildRow 函数。\nWidget _buildRow(WordPair pair) { return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), ); } 更新 _RandomWordsState 的构建方法。\n将其改为使用 _buildSuggestions()，而不是直接调用单词生成库。(Scaffold 实现了基本的 Material Design 视觉布局。)\n@override Widget build(BuildContext context) { //final wordPair = WordPair.random(); // Delete these...  //return Text(wordPair.asPascalCase); // ... two lines.  return Scaffold ( // Add from here...  appBar: AppBar( title: Text(\u0026#39;Startup Name Generator\u0026#39;), ), body: _buildSuggestions(), ); // ... to here.  } 更新 MyApp 的构建方法，更改标题，删除 AppBar，并将 home 属性改为 RandomWords 部件。\n@override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Startup Name Generator\u0026#39;, home: RandomWords(), ); } 重新启动应用程序。无论你滚动多远，你都应该看到一个单词配对的列表。\nAndroid:\niOS:\n遇到问题了？ 如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。\n lib/main.dart  今后的步骤 恭喜你！\n你已经完成了这个代码实验室的第一部分! 如果你想扩展这款应用，请进入第二部分，你将对应用进行如下修改。\n 增加互动性 增加导航到新路由的功能。 修改主题颜色。  当第2部分完成后，应用程序将是这样的：\n其他后续步骤 通过以下资源了解更多关于 Flutter SDK 的信息。\n Flutter 中的布局 增加互动性教程 组件介绍 为 Android 开发者提供的 Flutter 针对 React Native 开发者的 Flutter Web 开发人员的 Flutter Flutter YouTube 频道  其他资源包括以下几点:\n 用 Flutter 构建本地移动应用 从 Java 到 Dart codelab Flutter cookbook 融入 Dart 的 Bootstrap：了解更多关于这门语言的信息  同时，与 Flutter 社区联系起来!\n","permalink":"https://ohmyweekly.github.io/notes/write-your-first-flutter-app/","tags":["flutter","app"],"title":"编写你的第一个 Flutter 应用，第一部分"},{"categories":["programming"],"contents":"介绍 Flutter 是 Google 的 UI 工具包，用于从单一代码库中为移动、Web 和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起工作，被世界各地的开发者和组织使用，并且是免费和开源的。\n在这个代码实验室中，您将扩展一个基本的、移动的 Flutter 应用程序，以包含交互性。您还将创建一个用户可以导航到的第二个页面（称为路由）。最后，您将修改应用程序的主题（颜色）。这个代码实验室扩展了第1部分，在这部分中，你将创建一个无限的懒惰加载的列表，但如果你想从第2部分开始，我们将提供起始代码。\n你将在第二部分学到什么  如何编写一款在 iOS、Android 和 Web 上看起来很自然的 Flutter 应用？ 如何使用热重装，加快开发周期？ 如何为有状态的 widget 添加交互性？ 如何创建并导航到第二个屏幕？ 如何使用主题来改变应用程序的外观？  你将在第二部分建立什么 您将从一个简单的移动应用程序开始，为创业公司生成一个无尽的建议名称列表。在代码实验室结束时，您的最终用户可以选择和取消选择名称，保存最好的名称。点击应用栏右上角的列表图标可以导航到一个新的页面（称为路由），该页面只列出了最喜欢的名字。\n下面的 GIF 动画显示了完成的应用程序将如何工作。\n设置您的 Flutter 环境 如果你还没有完成第1部分，请看设置你的 Flutter 环境，在编写你的第一个Flutter应用，第1部分，设置你的 Flutter 开发环境。\n获取启动应用程序 如果你已经完成了这个 codelab 的第一部分，你已经有了启动应用程序，startup_namer。你可以进行下一步。\n如果你没有 startup_namer，不要害怕，你可以使用下面的说明得到它。\n使用创建应用程序中的说明创建一个简单的模板化 Flutter 应用程序。将项目命名为 startup_namer（而不是 flutter_app）。\n删除 lib/main.dart 中的所有代码。用这个文件中的代码替换，它显示了一个无限的，懒惰加载的建议启动名称列表。\n更新 pubspec.yaml，加入英文单词包。\ndependencies:flutter:sdk:fluttercupertino_icons:^0.1.2english_words:^3.1.5//NEW英文单词包会生成一对随机的单词，作为潜在的启动名称。\n在 Android Studio 的编辑器视图中查看 pubspec 时，点击右上角的 Pub get，这将包拉到你的项目中。你应该在控制台中看到以下内容:\nflutter pub get Running \u0026#34;flutter pub get\u0026#34; in startup_namer... Process finished with exit code 0 运行该应用。\n随意滚动，查看持续供应的拟创业公司名称。\n将图标添加到列表中 在这一步中，你将为每一行添加心形图标。在下一步中，您将使它们可点击并保存收藏夹。\n在 _RandomWordsState 中添加一个 _saved Set。这个 Set 存储了用户收藏的单词配对。Set 比 List 更受欢迎，因为一个正确实现的 Set 不允许重复的条目。\nclass _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { final _suggestions = \u0026lt;WordPair\u0026gt;[]; final _saved = Set\u0026lt;WordPair\u0026gt;(); // NEW  final _biggerFont = TextStyle(fontSize: 18.0); ... } 在 _buildRow 函数中，添加一个 alreadySaved 检查，以确保一个单词配对还没有被添加到收藏夹中。\nWidget _buildRow(WordPair pair) { final alreadySaved = _saved.contains(pair); // NEW  ... } 在 _buildRow() 中，你还将为 ListTile 对象添加心形图标以实现收藏夹。在下一步中，你将添加与心形图标交互的功能。\n在文本之后添加图标，如下图所示。\nWidget _buildRow(WordPair pair) { final alreadySaved = _saved.contains(pair); return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), trailing: Icon( // NEW from here...  alreadySaved ? Icons.favorite : Icons.favorite_border, color: alreadySaved ? Colors.red : null, ), // ... to here.  ); } 热重新加载应用程序。\n你现在应该看到每一行都有空心，但它们还没有互动。\nAndroid\niOS\n遇到问题了？ 如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。\n lib/main.dart  增加互动性 在这一步中，你将使心形图标可以点击。当用户点击列表中的一个条目，切换其收藏状态时，该词对就会从一组保存的收藏夹中添加或删除。\n要做到这一点，你将修改 _buildRow 函数。如果一个词条已经被添加到收藏夹中，再次点击它就会将其从收藏夹中删除。当一个磁贴被点击后，函数会调用 setState() 来通知框架状态已经改变。\n在 _buildRow 方法中加入 onTap，如下图所示:\nWidget _buildRow(WordPair pair) { final alreadySaved = _saved.contains(pair); return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), trailing: Icon( alreadySaved ? Icons.favorite : Icons.favorite_border, color: alreadySaved ? Colors.red : null, ), onTap: () { // NEW lines from here...  setState(() { if (alreadySaved) { _saved.remove(pair); } else { _saved.add(pair); } }); }, // ... to here.  ); } 提示：在 Flutter 的反应式框架中，调用 setState() 会触发对 State 对象的 build() 方法的调用，导致 UI 的更新。\n热重载应用。\n你应该能够点击任何磁贴来收藏或不收藏该条目。点击瓷砖会产生一个隐含的从点击点发出的泼墨动画。\nAndroid\niOS\n遇到问题了？ 如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。\n lib/main.dart  导航到一个新的屏幕 在这一步中，您将添加一个新的页面（在 Flutter 中称为路由），显示收藏夹。您将学习如何在主页路线和新路由之间进行导航。\n在 Flutter 中，Navigator 管理着一个包含应用程序路由的堆栈。将一个路由推到 Navigator 的堆栈上，会将显示更新到该路由。从 Navigator 的堆栈中弹出一条路由，会将显示返回到之前的路由。\n接下来，您将在 _RandomWordsState 的 build 方法中为 AppBar 添加一个列表图标。当用户点击列表图标时，一个包含保存的收藏夹的新路由会被推送到 Navigator，显示图标。\n在 build 方法中添加图标及其对应的操作:\nclass _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { ... @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\u0026#39;Startup Name Generator\u0026#39;), actions: [ // NEW lines from here...  IconButton(icon: Icon(Icons.list), onPressed: _pushSaved), ], // ... to here.  ), home: RandomWords(), ); } ... } 提示：一些小组件属性会取一个小组件(child)，而其他属性，如 action，会取一组小组件(children), 如方括号([])所示。\n在 _RandomWordsState 类中添加一个 _pushSaved() 函数。\nvoid _pushSaved() { } 热重新加载应用程序。列表图标出现在应用栏中。点击它还没有任何作用，因为 _pushSaved 函数是空的。\n接下来，你将建立一条路由，并将其推送到 Navigator 的栈中。这个操作会改变屏幕以显示新的路由。新页面的内容是在 MaterialPageRoute 的构建器属性中以匿名函数的方式构建的。\n调用 Navigator.push，如下图所示，它将路由推送到 Navigator 的堆栈中。IDE 会抱怨无效代码，但你会在下一节中解决这个问题。\nvoid _pushSaved() { Navigator.of(context).push( ); } 接下来，你将添加 MaterialPageRoute 和它的构建器。现在，添加生成 ListTile 行的代码。ListTile 的 divideTiles() 方法在每个 ListTile 之间增加了水平间距。被划分的变量持有通过方便函数 toList() 转换为列表的最终行。\n添加代码，如下面的代码片段所示:\nvoid _pushSaved() { Navigator.of(context).push( MaterialPageRoute\u0026lt;void\u0026gt;( // NEW lines from here...  builder: (BuildContext context) { final tiles = _saved.map( (WordPair pair) { return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), ); }, ); final divided = ListTile.divideTiles( context: context, tiles: tiles, ).toList(); return Scaffold( appBar: AppBar( title: Text(\u0026#39;Saved Suggestions\u0026#39;), ), body: ListView(children: divided), ); }, // ...to here.  ), ); } } builder 属性返回一个 Scaffold，包含名为 SavedSuggestions 的新路由的应用栏。新路由的主体由一个包含 ListTiles 行的 ListView 组成。每一行都由一个分隔符隔开。\n热重载应用。将一些选择收藏起来，然后点击应用栏中的列表图标。新的路由出现，包含收藏夹。请注意，Navigator 在应用栏中增加了一个\u0026quot;返回\u0026quot;按钮。你不必明确地实现 Navigator.pop。点击\u0026quot;返回\u0026quot;按钮就可以返回到主路由。\niOS - Main route\niOS - Saved suggestions route\n遇到问题了？ 如果你的应用程序没有正确运行，那么你可以使用下面链接中的代码来回到正轨。\n lib/main.dart  使用主题改变用户界面 在这一步中，您将修改应用程序的主题。主题控制你的应用程序的外观和感觉。您可以使用默认主题，这取决于物理设备或模拟器，或者自定义主题以反映您的品牌。\n您可以通过配置 ThemeData 类轻松更改应用程序的主题。应用程序使用默认主题，但你会将应用程序的主色调改为白色。\n在 MyApp 类中更改颜色:\nclass MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Startup Name Generator\u0026#39;, theme: ThemeData( // Add the 3 lines from here...  primaryColor: Colors.white, ), // ... to here.  home: RandomWords(), ); } } 热重载应用。现在整个背景都是白色的，甚至应用栏也是白色的。\n作为一个练习，使用 ThemeData 来改变 UI 的其他方面。Material 库中的 Colors 类提供了许多你可以玩的颜色常量。热重载使得对 UI 的实验变得快速而简单。\nAndroid\niOS\n遇到问题了？ 如果你已经偏离了轨道，那么使用下面链接中的代码来查看最终应用的代码。\n= lib/main.dart\n做得很好！ 你写了一个交互式的 Flutter 应用，可以在 iOS 和 Android 上运行，具体做法如下\n 编写 Dart 代码。 使用热重载来加快开发周期。 实现一个有状态的 widget，为你的应用添加交互性。 创建途径并添加在原途径和新途径之间移动的逻辑。 学习如何使用主题改变你的应用程序的 UI 外观。  今后的步骤 从以下资源中了解更多关于 Flutter SDK 的信息。\n Flutter 中的布局 增加互动性教程 组件介绍 为 Android 开发者提供的 Flutter 针对 React Native 开发者的 Flutter Web 开发人员的 Flutter Flutter YouTube 频道  其他资源包括以下几点:\n 用 Flutter 构建本地移动应用 从 Java 到 Dart codelab Flutter cookbook 融入 Dart 的 Bootstrap：了解更多关于这门语言的信息  同时，与 Flutter 社区联系起来!\n","permalink":"https://ohmyweekly.github.io/notes/write-your-first-flutter-app-part-two/","tags":["flutter","app"],"title":"编写你的第一个 Flutter 应用，第二部分"},{"categories":null,"contents":"毕竟谁人终得鹿, 不如终日梦为鱼。\n友情链接  ohmycloud ✔ ohmycloudy ✔ ohmysummer ✔ ohmyshunny ✔ ohmysunny ✔ ohmyraku ✔ ohmypanda ✔ ohmyweekly ✔ rakulang ✔ ","permalink":"https://ohmyweekly.github.io/posts/about/","tags":null,"title":"第一篇日志"},{"categories":["programming"],"contents":"重要的概念 与 Java 不同，Dart 没有关键字 \u0026ldquo;public\u0026rdquo;, \u0026ldquo;protected\u0026rdquo; 和 \u0026ldquo;private\u0026rdquo;。 如果标识符以下划线（_）开头，则它相对于库是私有的。 有关更多信息，参考库和可见性。\n变量 var name = \u0026#39;Bob\u0026#39;; // 类型推断  dynamic name = \u0026#39;Bob\u0026#39;; // 动态类型 String name = \u0026#39;Bob\u0026#39;; // 显式声明 默认值 未初始化的变量默认值是 null。即使变量是数字, 类型默认值也是 null, 因为在 Dart 中一切都是对象，数字类型也不例外。\nint lineCount; assert(lineCount == null); final 和 const 使用 final 关键字声明的变量, 其值只能被设置一次, 使用 const 关键字声明的变量, 其值在编译时就已固定:\nfinal name = \u0026#39;Bob\u0026#39;; // 不使用类型注解 final String nickname = \u0026#39;Bobby\u0026#39;; name = \u0026#39;Alice\u0026#39;; // Error: final 变量只能被设置一次 const 声明一个在编译时就固定不变的值, 例如数字字面量、字符串字面量:\nconst bar = 1000000; // 压力单位(dynes/cm2) const double atm = 1.01325 * bar; // 一个标准大气压强 内置类型 Dart 语言支持以下内置类型:\n   类型 字面量 对象     Number 2⁶³ -1    String \u0026lsquo;Hello\u0026rsquo;    Boolean true,false    List [1,2,3]    Set {\u0026lsquo;raku\u0026rsquo;,\u0026lsquo;perl\u0026rsquo;}    Map {\u0026lsquo;lan\u0026rsquo;: \u0026lsquo;raku\u0026rsquo;}    Rune \\u2665, \\u{1f600}    Symbol #dadix, #bar     ","permalink":"https://ohmyweekly.github.io/notes/dart/","tags":["dart","examples"],"title":"Dart 入门"},{"categories":["programming"],"contents":"这个代码实验室教你如何使用实现 Iterable类的集合-例如 List和 Set。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。\n使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\n要想从这个 codelab 中获得最大的收获，你应该具备基本的 Dart 语法知识。\n本课程包括以下内容。\n 如何读取一个 Iterable 的元素。 如何检查一个 Iterable 的元素是否满足一个条件。 如何过滤一个 Iterable 的内容。 如何将一个 Iterable 的内容映射到不同的值。  估计完成这个代码实验所需的时间: 60分钟。\n什么是集合? 集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。\n集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:\n List: 用来通过索引读取元素。 Set: 用于包含只能出现一次的元素。 Map：用于通过键来读取元素。  什么是Iterable? Iterable 是一个元素的集合，它可以被依次访问。\n在 Dart 中，Iterable 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 List 或 Set 来创建一个新的 Iterable。\nList 和 Set 都是 Iterable，所以它们和 Iterable 类有相同的方法和属性。\nMap 在内部使用不同的数据结构，这取决于它的实现。例如，HashMap 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 Map 的 entries 或 values 属性，Map 的元素也可以作为 Iterable 对象读取。\n这个例子显示了一个 int 的 List，它也是一个 int 的 Iterable:\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; 与 List 的区别在于，使用 Iterable，你无法保证按索引读取元素的效率。Iterable 与 List 相比，没有 [] 操作符。\n例如，考虑以下代码，这是无效的:\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; int value = iterable[1]; 如果你用 [] 读取元素，编译器会告诉你 '[]' 这个运算符没有为 Iterable 类定义，这意味着在这种情况下你不能使用 [index]。\n你可以用 elementAt() 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; int value = iterable.elementAt(1); 继续下一节，了解更多关于如何访问 Iterable 的元素。\n读取元素 你可以使用 for-in 循环，依次读取一个迭代元素。\n例子: 使用 for-in 循环 下面的例子展示了如何使用 for-in 循环读取元素。\nvoid main() { var iterable = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; for (var element in iterable) { print(element); } } 在幕后，for-in 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 for-in 更容易阅读和理解，而且不容易出错。\n关键术语:\n Iterable: Dart Iterable 类。 Iterator: for-in 用来从一个 Iterable 对象中读取元素的对象。 for-in 循环: 从一个 Iterable 对象中依次读取元素的简单方法。  例子：使用第一个和最后一个元素 在某些情况下，你只想访问一个 Iterable 的第一个或最后一个元素。\n在 Iterable 类中，你不能直接访问元素，所以你不能调用 iterable[0] 来访问第一个元素。相反，你可以使用 first，它可以获取第一个元素。\n另外，使用 Iterable 类，你不能使用操作符 [] 来访问最后一个元素，但是你可以使用 last 属性。\n因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 last 可能会很慢。在一个空的 Iterable 上使用 first 或 last 会导致一个 StateError。\nvoid main() { Iterable iterable = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; print(\u0026#39;The first element is ${iterable.first}\u0026#39;); print(\u0026#39;The last element is ${iterable.last}\u0026#39;); } 在这个例子中，你看到了如何使用 first 和 last 来获得一个 Iterable 的第一个和最后一个元素。也可以找到满足条件的第一个元素。下一节将展示如何使用名为 firstWhere() 的方法来实现这一目标。\n例子: 使用 firstWhere() 你已经看到，你可以依次访问一个 Iterable 的元素，你可以很容易地得到第一个或最后一个元素。\n现在，你要学习如何使用 firstWhere() 来寻找满足某些条件的第一个元素。这个方法需要你传递一个谓词，它是一个函数，如果输入满足一定的条件就返回 true。\nString element = iterable.firstWhere((element) =\u0026gt; element.length \u0026gt; 5); 例如，如果你想找到第一个超过 5 个字符的 String，你必须传递一个当元素大小大于 5 时返回 true 的谓词。\n运行下面的例子，看看 firstWhere() 是如何工作的。你认为所有的函数都会给出相同的结果吗？\nbool predicate(String element) { return element.length \u0026gt; 5; } main() { var items = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;, \u0026#39;Lasagne\u0026#39;]; // You can find with a simple expression:  var element1 = items.firstWhere((element) =\u0026gt; element.length \u0026gt; 5); print(element1); // Or try using a function block:  var element2 = items.firstWhere((element) { return element.length \u0026gt; 5; }); print(element2); // Or even pass in a function reference:  var element3 = items.firstWhere(predicate); print(element3); // You can also use an `orElse` function in case no value is found!  var element4 = items.firstWhere( (element) =\u0026gt; element.length \u0026gt; 10, orElse: () =\u0026gt; \u0026#39;None!\u0026#39;, ); print(element4); } 在这个例子中，你可以看到三种不同的方式来写一个谓词。\n 作为一个表达式: 测试代码中有一行使用了箭头语法(=\u0026gt;)。 作为一个块: 测试代码在括号和返回语句之间有多行。 作为一个函数: 测试代码在一个外部函数中，作为参数传递给 firstWhere() 方法。  没有正确或错误的方式。使用最适合你的方式，并且让你的代码更容易阅读和理解。\n在这个例子中，firstWhereWithOrElse() 调用 firstWhere() 时，使用了可选的命名参数 orElse，它在没有找到元素时提供了一个替代方案。在这种情况下，返回文本 \u0026ldquo;None!\u0026quot;，因为没有元素满足提供的条件。\n注意：如果没有元素满足测试谓词，并且没有提供 orElse 参数，那么 firstWhere() 会抛出一个 StateError。\n快速回顾。\n Iterable 的元素必须按顺序访问。 迭代所有元素的最简单方法是使用 for-in 循环。 你可以使用 first 和 last getters 来获取第一个和最后一个元素。 你也可以用 firstWhere() 找到满足条件的第一个元素。 你可以把测试谓词写成表达式、块或函数。  关键术语。\n谓词: 当某个条件被满足时，返回 true 的函数。\n练习: 练习写一个测试谓词 下面的练习是一个失败的单元测试，其中包含一个部分完整的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 main()。\n这个练习介绍了 singleWhere() 这个方法的工作原理类似于 firstWhere()，但在这种情况下，它只期望 Iterable 中的一个元素满足谓词。如果 Iterable 中超过一个或没有元素满足谓词条件，那么该方法会抛出一个 StateError 异常。\nsingleWhere() 对整个 Iterable 进行步进，直到最后一个元素，如果 Iterable 是无限的或包含一个大的元素集合，这可能会引起问题。\n你的目标是实现满足以下条件的 singleWhere() 谓词。\n 元素包含字符 \u0026lsquo;a\u0026rsquo;。 该元素以字符 \u0026lsquo;M\u0026rsquo; 开头。  测试数据中的所有元素都是字符串，你可以查看类文档以获得帮助。\nString singleWhere(Iterable\u0026lt;String\u0026gt; items) { return items.singleWhere((element) =\u0026gt; element.startsWith(\u0026#39;M\u0026#39;) \u0026amp;\u0026amp; element.contains(\u0026#39;a\u0026#39;)); } 检查条件 在使用 Iterable 时，有时你需要验证一个集合的所有元素是否满足某些条件。\n你可能会想用 for-in 循环来写一个解决方案，比如这个:\nfor (var item in items) { if (item.length \u0026lt; 5) { return false; } } return true; 然而，你可以使用 every() 方法实现同样的目的:\nreturn items.every((element) =\u0026gt; element.length \u0026gt;= 5); 使用 every() 方法可以使代码更易读、更紧凑、更不容易出错。\n例子: 使用 any() 和 every() Iterable 类提供了两个可以用来验证条件的方法。\n any(): 如果至少有一个元素满足条件，则返回 true。 every(): 如果所有元素都满足条件，则返回 true。  运行这个练习来看看它们的作用。\nvoid main() { var items = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; if (items.any((element) =\u0026gt; element.contains(\u0026#39;a\u0026#39;))) { print(\u0026#39;At least one element contains \u0026#34;a\u0026#34;\u0026#39;); } if (items.every((element) =\u0026gt; element.length \u0026gt;= 5)) { print(\u0026#39;All elements have length \u0026gt;= 5\u0026#39;); } } 在这个例子中，any() 验证了至少一个元素包含字符 a，every() 验证了所有元素的长度等于或大于 5。\n运行代码后，尝试更改 any() 的谓词，使其返回 false:\nif (items.any((element) =\u0026gt; element.contains(\u0026#39;Z\u0026#39;))) { print(\u0026#39;At least one element contains \u0026#34;Z\u0026#34;\u0026#39;); } else { print(\u0026#39;No element contains \u0026#34;Z\u0026#34;\u0026#39;); } 你也可以使用 any() 来验证一个 Iterable 中没有元素满足某个条件。\n练习： 验证一个 Iterable 是否满足一个条件 下面的练习提供了使用前面例子中描述的 any() 和 every() 方法的练习。在本例中，你的工作对象是一组用户，由具有成员字段 age 的 User 对象表示。\n使用 any() 和 every() 实现两个函数。\n 第1部分：实现 anyUserUnder18()。  如果至少有一个用户是17岁或更小，则返回 true。   第2部分：实现 everyUserOver13()。  如果所有用户都是14岁或以上，则返回 true。    bool anyUserUnder18(Iterable\u0026lt;User\u0026gt; users) { return users.any((user) =\u0026gt; user.age \u0026lt; 18); } bool everyUserOver13(Iterable\u0026lt;User\u0026gt; users) { return users.every((user) =\u0026gt; user.age \u0026gt; 13); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n 虽然你可以使用 for-in 循环来检查条件，但还有更好的方法。 方法 any() 可以让你检查任何元素是否满足条件。 方法 every() 可以让你验证所有元素是否满足条件。  过滤 前面的章节介绍了 firstWhere() 或 singleWhere() 等方法，这些方法可以帮助你找到满足某个谓词的元素。\n但是如果你想找到满足某个条件的所有元素呢？你可以使用 where() 方法来实现。\nvar evenNumbers = numbers.where((number) =\u0026gt; number.isEven); 在这个例子中，numbers 包含一个有多个 int 值的 Iterable，where() 可以找到所有偶数的数字。\nwhere() 的输出是另一个 Iterable，你可以用它来迭代它或应用其他 Iterable 方法。在下一个例子中，where() 的输出直接在 for-in 循环中使用。\nvar evenNumbers = numbers.where((number) =\u0026gt; number.isEven); for (var number in evenNumbers) { print(\u0026#39;$numberis even\u0026#39;); } 例子: 使用 where() 运行这个例子，看看如何将 where() 与其他方法如 any() 一起使用。\nmain() { var evenNumbers = [1, -2, 3, 42].where((number) =\u0026gt; number.isEven); for (var number in evenNumbers) { print(\u0026#39;$numberis even.\u0026#39;); } if (evenNumbers.any((number) =\u0026gt; number.isNegative)) { print(\u0026#39;evenNumbers contains negative numbers.\u0026#39;); } // If no element satisfies the predicate, the output is empty.  var largeNumbers = evenNumbers.where((number) =\u0026gt; number \u0026gt; 1000); if (largeNumbers.isEmpty) { print(\u0026#39;largeNumbers is empty!\u0026#39;); } } 在这个例子中，where() 用于查找所有偶数，然后用 any() 检查结果是否包含负数。\n在本例的后面，再次使用 where() 来查找所有大于1000的数字，由于没有，结果是一个空的 Iterable。\n注意：如果没有元素满足 where() 中的谓词，那么该方法返回一个空的 Iterable。与 singleWhere() 或 firstWhere() 不同，where() 不会抛出 StateError 异常。\n例子: 使用 takeWhile 方法 takeWhile() 和 skipWhile() 也可以帮助你从一个 Iterable 中过滤元素。\n运行这个例子，看看 takeWhile() 和 skipWhile() 如何分割一个包含数字的 Iterable。\nmain() { var numbers = [1, 3, -2, 0, 4, 5]; var numbersUntilZero = numbers.takeWhile((number) =\u0026gt; number != 0); print(\u0026#39;Numbers until 0: $numbersUntilZero\u0026#39;); var numbersAfterZero = numbers.skipWhile((number) =\u0026gt; number != 0); print(\u0026#39;Numbers after 0: $numbersAfterZero\u0026#39;); } 输出如下:\nNumbers until 0: (1, 3, -2) Numbers after 0: (0, 4, 5) 在这个例子中，takeWhile() 返回一个 Iterable，它包含了通往满足谓词的元素的所有元素。另一方面， skipWhile() 返回一个 Iterable，同时跳过满足谓词的元素之前的所有元素。请注意，满足谓词的元素也会被包含在内。\n运行该示例后，将 takeWhile() 改为取元素，直到到达第一个负数。\nvar numbersUntilNegative = numbers.takeWhile((number) =\u0026gt; !number.isNegative); 注意，条件 number.isNegative 是用 ! 否定的。\n练习: 从列表中过滤元素 下面的练习提供了使用上一练习中的 User 类的 where() 方法的练习。\n使用 where() 实现两个函数。\n 第1部分：实现 filterUnder21()。  返回一个包含所有21岁以上用户的 Iterable。   第2部分：实现 findShortNamed()。  返回一个包含所有名字长度为 3 或更少的用户的 Iterable。    Iterable\u0026lt;User\u0026gt; filterUnder21(Iterable\u0026lt;User\u0026gt; users) { return users.where((user) =\u0026gt; user.age \u0026gt;= 21); } Iterable\u0026lt;User\u0026gt; findShortNamed(Iterable\u0026lt;User\u0026gt; users) { return users.where((user) =\u0026gt; user.name.length \u0026lt;= 3); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n 用 where() 过滤一个 Iterable 的元素。 where() 的输出是另一个 Iterable。 使用 takeWhile() 和 skipWhile() 来获取元素，直到满足一个条件或之后。 这些方法的输出可以是一个空的 Iterable。  Map 通过 map() 方法映射 Iterables，你可以在每个元素上应用一个函数，用一个新的元素替换每个元素。\nIterable\u0026lt;int\u0026gt; output = numbers.map((number) =\u0026gt; number * 10); 在这个例子中，Iterable 数字的每个元素都被乘以 10。\n你也可以使用 map() 将一个元素转换为不同的对象-例如，将所有 int 转换为 String，在下面的例子中可以看到。\nIterable\u0026lt;String\u0026gt; output = numbers.map((number) =\u0026gt; number.toString()); 注意：map() 返回一个懒惰的 Iterable，这意味着只有在元素被迭代时才会调用所提供的函数。\n例子: 使用 map 改变元素 运行这个例子，看看如何使用 map() 将一个 Iterable 中的所有元素乘以2，你认为输出会是什么？\nmain() { var numbersByTwo = [1, -2, 3, 42].map((number) =\u0026gt; number * 2); print(\u0026#39;Numbers: $numbersByTwo.\u0026#39;); } 练习: 映射到不同类型 在前面的例子中，你把一个 Iterable 的元素乘以2，输入和输出都是 int 的 Iterable。\n在这个练习中，你的代码接收一个 User的 Iterable，你需要返回一个包含用户名和年龄的字符串的 Iterable。\nIterable 中的每个字符串必须遵循这样的格式。'{name} is {age}'-例如 'Alice is 21'。\nIterable\u0026lt;String\u0026gt; getNameAndAges(Iterable\u0026lt;User\u0026gt; users) { return users.map((user) =\u0026gt; \u0026#39;${user.name}is ${user.age}\u0026#39;); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n map() 将一个函数应用于一个 Iterable 的所有元素。 map() 的输出是另一个 Iterable。 在 Iterable 被迭代之前，函数不会被计算。  练习: 把所有的东西放在一起 现在是练习所学知识的时候了，在最后一个练习中。\n这个练习提供了类 EmailAddress，它有一个构造函数，接收一个字符串。另一个提供的函数是 isValidEmailAddress()，它测试一个电子邮件地址是否有效。\n   构造函数/函数 类型签名 描述     EmailAddress() EmailAddress(String address) 为指定的地址创建一个 EmailAddress。   isValidEmailAddress() bool isValidEmailAddress(EmailAddress) 如果提供的 EmailAddress 有效，返回 true。    编写以下代码。\n第1部分：实现 parseEmailAddresses()。\n 编写函数 parseEmailAddresses()，它接收一个包含电子邮件地址的 Iterable\u0026lt;String\u0026gt;，并返回一个 Iterable\u0026lt;EmailAddress\u0026gt;。 使用方法 map() 从 String 映射到 EmailAddress。 使用构造函数 EmailAddress(String) 创建 EmailAddress 对象。  第二部分：实现 anyInvalidEmailAddress()。\n 编写函数 anyInvalidEmailAddress()，它接收一个 Iterable\u0026lt;EmailAddress\u0026gt;，并在 Iterable 中的任何 EmailAddress 无效时返回 true。 使用方法 any() 和提供的函 isValidEmailAddress()。  第3部分：实现 validEmailAddresses()。\n 编写函数 validEmailAddresses()，它接收一个 Iterable\u0026lt;EmailAddress\u0026gt; 并返回另一个只包含有效地址的 Iterable\u0026lt;EmailAddress\u0026gt;。 使用方法 where() 来过滤 Iterable\u0026lt;EmailAddress\u0026gt;。 使用提供的函数 isValidEmailAddress() 来评估一个 EmailAddress 是否有效。  Iterable\u0026lt;EmailAddress\u0026gt; parseEmailAddresses(Iterable\u0026lt;String\u0026gt; strings) { return strings.map((s) =\u0026gt; EmailAddress(s)); } bool anyInvalidEmailAddress(Iterable\u0026lt;EmailAddress\u0026gt; emails) { return emails.any((email) =\u0026gt; !isValidEmailAddress(email)); } Iterable\u0026lt;EmailAddress\u0026gt; validEmailAddresses(Iterable\u0026lt;EmailAddress\u0026gt; emails) { return emails.where((email) =\u0026gt; isValidEmailAddress(email)); } class EmailAddress { String address; EmailAddress(this.address); @override bool operator ==(Object other) =\u0026gt; identical(this, other) || other is EmailAddress \u0026amp;\u0026amp; runtimeType == other.runtimeType \u0026amp;\u0026amp; address == other.address; @override int get hashCode =\u0026gt; address.hashCode; @override String toString() { return \u0026#39;EmailAddress{address: $address}\u0026#39;; } } 下一步是什么? 恭喜你，你完成了 codelab 的学习! 如果你想了解更多，这里有一些下一步的建议。\n 玩玩 DartPad。 试试另一个代码实验。 阅读 Iterable API 参考资料，了解本 codelab 未涉及的方法。  ","permalink":"https://ohmyweekly.github.io/notes/dart-iterable-collections/","tags":["iterable","collection","dart"],"title":"Dart 可迭代集合"},{"categories":["programming"],"contents":"字符串插值 使用 ${expression} 将表达式的值放到字符串里面。如果表达式是一个标识符, 就可以省略 {}。\n下面是字符串插值的例子:\n   字符串 结果     \u0026lsquo;${3 + 2}\u0026rsquo; \u0026lsquo;5\u0026rsquo;   \u0026lsquo;${\u0026ldquo;word\u0026rdquo;.toUpperCase()}\u0026rsquo; \u0026lsquo;WORD\u0026rsquo;   \u0026lsquo;$myObject\u0026rsquo; The value of myObject.toString()    代码示例 下面的函数接收两个整数作为参数。使其返回一个包含两个整数的字符串，并以空格分隔。例如 stringify(2, 3) 应该返回 \u0026lsquo;2 3\u0026rsquo;。\nString stringify(int x, int y) { return \u0026#39;$x$y\u0026#39;; } Null 无感知操作符 Dart 提供了一些方便的操作符来处理可能为空的值。其中一个是 ??= 赋值运算符，只有当一个变量当前为空时，它才会给这个变量赋值:\nint a; // a 的初始值为 null a ??= 3; print(a); // 打印 3  a ??= 5; print(a); // 仍然打印 3 另一个 null-aware 操作符是 ??，它返回其左边的表达式，除非该表达式的值为 null，在这种情况下，它计算并返回其右边的表达式:\nprint(1 ?? 3); // 打印 1 print(null ?? 12); // 打印 12 代码示例 String foo = \u0026#39;a string\u0026#39;; String bar; // Unassigned objects are null by default.  // makes \u0026#39;a string\u0026#39; be assigned to baz. String baz = foo ?? bar; void updateSomeVars() { // makes \u0026#39;a string\u0026#39; be assigned to bar.  bar ??= \u0026#39;a string\u0026#39;; } 有条件的属性访问 要保护对对象的一个可能为空的属性或方法的访问，请在点(.)前加上一个问号(?):\nmyObject?.someProperty 上述代码等同于以下代码:\n(myObject != null) ? myObject.someProperty : null 你可以在一个表达式中把 ?. 的多个使用链接在一起:\nmyObject?.someProperty?.someMethod() 如果 myObject 或 myObject.someProperty 为 null，前面的代码将返回 null(并且从不调用 someMethod())。\n代码示例 尝试使用条件属性访问来完成下面的代码片段。\n// This method should return the uppercase version of `str` // or null if `str` is null. String upperCaseIt(String str) { // Try conditionally accessing the `toUpperCase` method here.  return str?.toUpperCase(); } 集合字面量 Dart 内置了对列表、映射和集合的支持。你可以使用字面量创建它们:\nfinal aListOfStrings = [\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;]; final aSetOfStrings = {\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;}; final aMapOfStringsToInts = { \u0026#39;one\u0026#39;: 1, \u0026#39;two\u0026#39;: 2, \u0026#39;three\u0026#39;: 3, } Dart 的类型推理可以为你分配类型给这些变量。在本例中，推断的类型是 List\u0026lt;String\u0026gt;、Set\u0026lt;String\u0026gt; 和 Map\u0026lt;String, int\u0026gt;。\n或者你可以自己指定类型:\nfinal aListOfInts = \u0026lt;int\u0026gt;[]; final aSetOfInts = \u0026lt;int\u0026gt;{}; final aMapOfIntToDouble = \u0026lt;int, double\u0026gt;{}; 当你用子类型的内容初始化一个列表，但仍然希望列表是 List\u0026lt;BaseType\u0026gt; 时，指定类型是很方便的:\nfinal aListOfBaseType = \u0026lt;BaseType\u0026gt;[SubType(), SubType()]; 代码示例 尝试将以下变量设置为指定的值。\n// Assign this a list containing \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, and \u0026#39;c\u0026#39; in that order: final aListOfStrings = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]; // Assign this a set containing 3, 4, and 5: final aSetOfInts = {3, 4, 5}; // Assign this a map of String to int so that aMapOfStringsToInts[\u0026#39;myKey\u0026#39;] returns 12: final aMapOfStringsToInts = {\u0026#39;myKey\u0026#39;: 12}; // Assign this an empty List\u0026lt;double\u0026gt;: final anEmptyListOfDouble = \u0026lt;double\u0026gt;[]; // Assign this an empty Set\u0026lt;String\u0026gt;: final anEmptySetOfString = \u0026lt;String\u0026gt;{}; // Assign this an empty Map of double to int: final anEmptyMapOfDoublesToInts = \u0026lt;double, int\u0026gt;{}; 箭头语法 你可能在 Dart 代码中看到过 =\u0026gt; 符号。这种箭头语法是一种定义函数的方式，该函数执行其右边的表达式并返回其值。\n例如，考虑这个对 List 类的 any() 方法的调用:\nbool hasEmpty = aListOfStrings.any((s) { return s.isEmpty; }); 这里有一个更简单的方法来写这个代码:\nbool hasEmpty = aListOfStrings.any((s) =\u0026gt; s.isEmpty); 代码示例 试着完成以下使用箭头语法的语句:\nclass MyClass { int _value1 = 2; int _value2 = 3; int _value3 = 5; // Returns the product of the above values:  int get product =\u0026gt; _value1 * _value2 * _value3; // Adds one to _value1:  void incrementValue1() =\u0026gt; _value1++; // Returns a string containing each item in the  // list, separated by commas (e.g. \u0026#39;a,b,c\u0026#39;):  String joinWithCommas(List\u0026lt;String\u0026gt; strings) =\u0026gt; strings.join(\u0026#39;,\u0026#39;); } 级联 要对同一对象进行一系列操作，可以使用级联(...)。我们都见过这样的表达式:\nmyObject.someMethod() 它在 myObject 上调用 someMethod()，表达式的结果是 someMethod() 的返回值。\n下面是同样的表达式，有一个级联:\nmyObject..someMethod() 虽然它仍然在 myObject 上调用 someMethod()，但表达式的结果并不是返回值-它是对 myObject 的引用! 使用级联，你可以将原本需要单独语句的操作串联起来。例如，请看以下代码:\nvar button = querySelector(\u0026#39;#confirm\u0026#39;); button.text = \u0026#39;Confirm\u0026#39;; button.classes.add(\u0026#39;important\u0026#39;); button.onClick.listen((e) =\u0026gt; window.alert(\u0026#39;Confirmed!\u0026#39;)); 有了级联，代码就会变得短得多，而且你也不需要 button 变量:\nquerySelector(\u0026#39;#confirm\u0026#39;) ..text = \u0026#39;Confirm\u0026#39; ..class.add(\u0026#39;important\u0026#39;) ..onClick.listen((e) =\u0026gt; window.alert(\u0026#39;Confirmed!\u0026#39;)); 代码示例 使用级联来创建一个单一的语句，将一个 BigObject 的 anInt、aString 和 aList 属性设置为 1、\u0026lsquo;String!\u0026rsquo; 和 [3.0](分别地)，然后调用 allDone()。\nclass BigObject{ int anInt = 0; String aString = \u0026#39;\u0026#39;; List\u0026lt;double\u0026gt; aList = []; bool _done = false; void allDone() { _done = true; } } BigObject fillBigObject(BigObject obj) { return obj ..anInt = 1 ..aString = \u0026#39;String!\u0026#39; ..aList.add(3) ..allDone(); } getters 和 setters 当你需要对一个属性进行更多的控制时，你可以定义 getter 和 setter，而不是简单的字段。\n例如，你可以确保一个属性的值是有效的:\nclass MyClass { int _aProperty = 0; int get aProperty =\u0026gt; _aProperty; set aProperty(int value) { if (value \u0026gt;= 0) { _aProperty = value; } } } 你也可以使用 getter 来定义计算属性:\nclass MyClass { List\u0026lt;int\u0026gt; _values = []; void addValue(int value) { _values.add(value); } // 一个计算属性  int get count { return _values.length; } } 代码示例 想象一下，你有一个购物车类，它保存了一个私有的 List\u0026lt;double\u0026gt; 的价格。添加以下内容:\n 一个叫做 total 的 getter，返回价格的总和。 用一个新的列表替换列表的 setter，只要新的列表不包含任何负价格(在这种情况下，setter 应该抛出一个 InvalidPriceException)。  class InvalidPriceException {} class ShoppingCart { List\u0026lt;double\u0026gt; _prices = []; double get total =\u0026gt; _prices.fold(0, (e, t) =\u0026gt; e + t); set prices(List\u0026lt;double\u0026gt; value) { if (value.any((p) =\u0026gt; p \u0026lt; 0)) { throw InvalidPriceException(); } _prices = value; } } 可选位置参数 Dart 有两种函数参数：位置参数和命名参数。位置参数是你可能熟悉的那种:\nint sumUp(int a, int b, int c) { return a + b + c; } // ... int total = sumUp(1, 2, 3); 在 Dart 中，你可以将这些位置参数用括号包裹起来，使其成为可选的参数:\nint sumUpToFive(int a, [int b, int c, int d, int e]) { int sum = a; if (b != null) sum += b; if (c != null) sum += c; if (d != null) sum += d; if (e != null) sum += e; return sum; } // ... int total = sumUpToFive(1,2); int otherTotal = sumUpToFive(1, 2, 3, 4, 5); 可选的位置参数在函数的参数列表中总是最后一个。它们的默认值是空的，除非你提供了另一个默认值:\nint sumUpToFive(int a, [int b = 2, int c = 3, int d = 4, int e = 5]) { // ··· } // ··· int newTotal = sumUpToFive(1); print(newTotal); // \u0026lt;-- prints 15 代码示例 实现一个名为 joinWithCommas() 的函数，接受 1 到 5 个整数，然后返回一个用逗号分隔的数字字符串。下面是一些函数调用和返回值的例子:\n   函数调用 返回值     joinWithCommas(1) \u0026lsquo;1\u0026rsquo;   joinWithCommas(1, 2, 3) \u0026lsquo;1,2,3\u0026rsquo;   joinWithCommas(1, 1, 1, 1, 1) \u0026lsquo;1,1,1,1,1\u0026rsquo;    main() { var res = joinWithCommas(1,2,3,4); print(res); } String joinWithCommas(int a, [int b, int c, int d, int e]) { List\u0026lt;int\u0026gt; sum = []; sum.add(a); if (b != null) sum.add(b); if (c != null) sum.add(c); if (d != null) sum.add(d); if (e != null) sum.add(e); return sum.join(\u0026#39;,\u0026#39;); } 可选命名参数 使用大括号语法，你可以定义有名称的可选参数。\nvoid printName(String firstName, String lastName, {String suffix}) { print(\u0026#39;$firstName$lastName${suffix ?? \u0026#39;\u0026#39;}\u0026#39;); } // ··· printName(\u0026#39;Avinash\u0026#39;, \u0026#39;Gupta\u0026#39;); printName(\u0026#39;Poshmeister\u0026#39;, \u0026#39;Moneybuckets\u0026#39;, suffix: \u0026#39;IV\u0026#39;); 正如你所期望的，这些参数的值默认为空，但你可以提供默认值。\nvoid printName(String firstName, String lastName, {String suffix = \u0026#39;\u0026#39;}) { print(\u0026#39;$firstName$lastName$suffix\u0026#39;); } 一个函数不能同时拥有可选的位置参数和可选的命名参数。\n代码示例 为 MyDataObject 类添加一个 copyWith() 实例方法。它应该接受三个命名参数:\n int newInt String newString double newDouble  当调用时，copyWith() 应该基于当前实例返回一个新的 MyDataObject，并将前面参数（如果有的话）的数据复制到对象的属性中。例如，如果 newInt 是非空的，那么将其值复制到 anInt 中。\nclass MyDataObject { final int anInt; final String aString; final double aDouble; MyDataObject({ this.anInt = 1, this.aString = \u0026#39;Old!\u0026#39;, this.aDouble = 2.0, }); MyDataObject copyWith({int newInt, String newString, double newDouble}) { return MyDataObject( anInt: newInt ?? this.anInt, aString: newString ?? this.aString, aDouble: newDouble ?? this.aDouble, ); } } 异常 Dart 代码可以抛出和捕获异常。与 Java 相比，Dart 的所有异常都是未检查的异常。方法不声明它们可能会抛出哪些异常，你也不需要捕捉任何异常。\nDart 提供了 Exception 和 Error 类型，但你可以抛出任何非空对象:\nthrow Exception(\u0026#39;Something bad happened.\u0026#39;); throw \u0026#39;Waaaaaaah!\u0026#39;; 在处理异常时使用 try、on 和 catch 关键字:\ntry { breedMoreLlamas(); } on OutOfLlamasException { // A specific exception  buyMoreLlamas(); } on Exception catch (e) { // Anything else that is an exception  print(\u0026#39;Unknown exception: $e\u0026#39;); } catch (e) { // No specified type, handles all  print(\u0026#39;Something really unknown: $e\u0026#39;); } try 关键字的工作原理和其他大多数语言一样。使用 on 关键字按类型过滤特定的异常，使用 catch 关键字获取异常对象的引用。\n如果不能完全处理异常，可以使用 rethrow 关键字来传播异常:\ntry { breedMoreLlamas(); } catch (e) { print(\u0026#39;I was just trying to breed llamas!.\u0026#39;); rethrow; } 无论是否抛出异常，都要执行代码，使用 final:\ntry { breedMoreLlamas(); } catch (e) { // ... handle exception ... } finally { // Always clean up, even if an exception is thrown.  cleanLlamaStalls(); } 代码示例 实现下面的 tryFunction()。它应该执行一个不可信的方法，然后做如下操作:\n 如果 untrustworthy() 抛出一个 ExceptionWithMessage，调用 logger.logException，并提供异常类型和消息(尝试使用 on 和 catch)。 如果 untrustworthy() 抛出一个 Exception，调用 logger.logException，并注明异常类型(尝试使用 on)。 如果 untrustworthy() 抛出任何其他对象，不要捕获异常。 当所有的东西都被捕获和处理后，调用 logger.doneLogging(尝试使用 finally)。  typedef VoidFunction = void Function(); class ExceptionWithMessage { final String message; const ExceptionWithMessage(this.message); } abstract class Logger { void logException(Type t, [String msg]); void doneLogging(); } void tryFunction(VoidFunction untrustworthy, Logger logger) { try { untrustworthy(); } on ExceptionWithMessage catch (e) { logger.logException(e.runtimeType, e.message); } on Exception { logger.logException(Exception); } finally { logger.doneLogging(); } } 在构造函数中使用 this Dart 提供了一个方便的快捷方式来为构造函数中的属性赋值：在声明构造函数时使用 this.propertyName:\nclass MyColor { int red; int green; int blue; MyColor(this.red, this.green, this.blue) } final color = MyColor(80, 80, 128); 这种技术也适用于命名参数。属性名成为参数的名称:\nclass MyColor { ... MyColor({this.red, this.green, this.blue}); } final color = MyColor(red: 80, green: 80, blue: 80); 对于可选参数，默认值按预期工作:\nMyColor([this.red = 0, this.green = 0, this.blue = 0]); // or MyColor({this.red = 0, this.green = 0, this.blue = 0}); 代码示例 为 MyClass 添加一个单行构造函数，使用 this. 语法来接收和分配类的三个属性的值:\nclass MyClass { final int anInt; final String aString; final double aDouble; MyClass(this.anInt, this.aString, this.aDouble); } 初始化器列表 有时候，当你实现一个构造函数时，你需要在构造函数体执行之前做一些设置。例如，在构造函数体执行之前，final 字段必须有值。在一个初始化器列表中做这些工作，它位于构造函数的签名和它的主体之间。\nPoint.fromJson(Map\u0026lt;String, num\u0026gt; json) : x = json[\u0026#39;x\u0026#39;], y = json[\u0026#39;y\u0026#39;] { print(\u0026#39;In Point.fromJson(): ($x, $y)\u0026#39;); } 初始化器列表也是一个方便放置断言的地方，它只在开发过程中运行:\nNonNegativePoint(this.x, this.y) : assert(x \u0026gt;= 0), assert(y \u0026gt;= 0) { print(\u0026#39;I just made a NonNegativePoint: ($x, $y)\u0026#39;); } 代码示例 完成下面的 FirstTwoLetters 构造函数。使用初始化器列表将 word 中的前两个字符分配给 letterOne 和 LetterTwo 属性。为了获得额外的积分，可以添加一个断言来捕获少于两个字符的单词。\nclass FirstTwoLetters { final String letterOne; final String letterTwo; // Create a constructor with an initializer list here:  FirstTwoLetters(String word) : assert(word.length \u0026gt;=2), letterOne = word[0], letterTwo = word[1]; } 命名构造器 为了允许类有多个构造函数，Dart 支持命名构造函数:\nclass Point { double x, y; Point(this.x, this.y); Point.origin() { x = 0; y = 0; } } 要使用命名构造函数，请使用它的全名来调用它:\nfinal myPoint = Point.origin(); 代码示例 给 Color 类一个名为 Color.black 的构造函数，将三个属性都设置为 0。\nclass Color { int red; int green; int blue; Color(this.red, this.green, this.blue); Color.black() { red = 0; green = 0; blue = 0; } } 工厂构造函数 Dart 支持工厂构造函数，它可以返回子类型甚至 null。要创建一个工厂构造函数，请使用 factory 关键字:\nclass Square extends Shape {} class Circle extends Shape {} class Shape { Shape(); factory Shape.fromTypeName(String typeName) { if (typeName == \u0026#39;square\u0026#39;) return Square(); if (typeName == \u0026#39;circle\u0026#39;) return Circle(); print(\u0026#39;I don\\\u0026#39;t recognize $typeName\u0026#39;); return null } } 代码示例 填入名为 IntegerHolder.fromList 的工厂构造函数，使其做以下工作:\n 如果列表有一个值，就用这个值创建一个 IntegerSingle。 如果列表有两个值，则用该值依次创建一个 IntegerDouble。 如果列表有三个值，则按顺序创建一个 IntegerTriple。 否则，返回 null。  class IntegerHolder { IntegerHolder(); factory IntegerHolder.fromList(List\u0026lt;int\u0026gt; list) { if (list?.length == 1) { return IntegerSingle(list[0]); } else if (list?.length == 2) { return IntegerDouble(list[0], list[1]); } else if (list?.length == 3) { return IntegerTriple(list[0], list[1], list[2]); } else { return null; } } } class IntegerSingle extends IntegerHolder { final int a; IntegerSingle(this.a); } class IntegerDouble extends IntegerHolder { final int a; final int b; IntegerDouble(this.a, this.b); } class IntegerTriple extends IntegerHolder { final int a; final int b; final int c; IntegerTriple(this.a, this.b, this.c); } 重定向构造函数 有时，一个构造函数的唯一目的是重定向到同一类中的另一个构造函数。重定向构造函数的主体是空的，构造函数调用出现在冒号(:)之后。\nclass Automobile { String make; String model; int mpg; // 这个类的主构造函数  Automobile(this.make, this.model, this.mpg); // 代理到主构造函数  Automobile.hybrid(String make, String model) : this(make, model, 60); // 代理到命名构造函数  Automobile.fancyHybrid() : this.hybrid(\u0026#39;Futurecar\u0026#39;, \u0026#39;Mark 2\u0026#39;); } 代码示例 还记得上面的 Color 类吗？创建一个名为 black 的命名构造函数，但不是手动分配属性，而是将其重定向到默认构造函数，参数为 0。\nclass Color { int red; int green; int blue; Color(this.red, this.green, this.blue); Color.black() : this(0, 0, 0); } 常量构造函数 如果你的类产生的对象永远不会改变，你可以让这些对象成为编译时常量。要做到这一点，请定义一个 const 构造函数，并确保所有的实例变量都是最终变量。\nclass ImmutablePoint { const ImmutablePoint(this.x, this.y); final int x; final int y; static const ImmutablePoint origin = ImmutablePoint(0, 0); } 代码示例 修改 Recipe 类，使它的实例可以是常量，并创建一个常量构造函数，执行以下操作。\n 有三个参数： ingredients, calories 和 milligramsOfSodium(按顺序)。 使用 this. 语法，自动将参数值分配给同名的对象属性。 是常量，在构造函数声明中，const 关键字就在 Recipe 前面。  class Recipe { final List\u0026lt;String\u0026gt; ingredients; final int calories; final double milligramsOfSodium; const Recipe(this.ingredients, this.calories, this.milligramsOfSodium); } 下一步是什么？ 我们希望你喜欢使用这个 codelab 来学习或测试你对 Dart 语言一些最有趣的功能的知识。这里有一些关于现在要做什么的建议。\n 试试其他的 Dart 代码实验室. 阅读 Dart 语言之旅。 玩 DartPad。 获取 Dart SDK。  ","permalink":"https://ohmyweekly.github.io/notes/dart-cheatsheet-codelab/","tags":["string","cheatsheet","dart"],"title":"Dart 语言速查表"},{"categories":["programming"],"contents":"端午节快乐, 一起爬山吗？\n","permalink":"https://ohmyweekly.github.io/notes/go-hiking/","tags":["hiking","holiday"],"title":"一起爬山吗?"},{"categories":null,"contents":"Results from static site search implemented using Fusejs, jquery and mark.js. \u0026ndash; Source\n","permalink":"https://ohmyweekly.github.io/search/","tags":null,"title":"Search"}]