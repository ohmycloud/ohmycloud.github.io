{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003ch1 id=\"int\"\u003eInt\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003eInt\u003c/code\u003e 类型提供任意大小的整数。它们可以像计算机内存允许的那样大，虽然有些实现在被要求生成真正惊人大小的整数时会选择抛出数字溢出错误：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"mi\"\u003e600\u003c/span\u003e\u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"mi\"\u003e600\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: «Numeric overflow» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e与某些语言不同，当两个操作数都是 \u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e 类型时，使用\u003ca href=\"https://docs.raku.org/routine/$SOLIDUS\"\u003e\u003ccode\u003e/\u003c/code\u003e运算符\u003c/a\u003e执行除法将生成小数，而不执行任何舍入。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «0.8» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种除法产生的类型是 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 类型。换算后，如果分数的分母是小于64位，则产生 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e, 否则产生 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 类型。\u003c/p\u003e\n\u003cp\u003e如果你想落得 \u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e 的结果，那么 \u003ca href=\"https://docs.raku.org/routine/div\"\u003ediv\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/routine/narrow\"\u003enarrow\u003c/a\u003e 例程可能会有帮助，只要有可能。\u003ca href=\"https://docs.raku.org/routine/div\"\u003ediv\u003c/a\u003e运算符执行整除，丢弃余数，而\u003ca href=\"https://docs.raku.org/routine/narrow\"\u003enarrow\u003c/a\u003e 会把数拟合到它适合的最窄类型：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"ow\"\u003ediv\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «2» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Result `2` is narrow enough to be an Int: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enarrow\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «2» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enarrow\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «Int» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# But 2.5 has fractional part, so it ends up being a Rat type: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enarrow\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «Rat» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enarrow\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# OUTPUT: «2.5» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Denominator is too big for a Rat, so a Num is produced: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e⁹⁹\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «1e-99» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRaku 具有 \u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat\u003c/a\u003e 类型，可提供任意精度的分数。为什么在上一个例子中生成了有限精度的 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 而不是 \u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat\u003c/a\u003e 类型？原因是：性能。大多数操作都很好，精度损失很少，因此不需要使用更昂贵的 \u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat\u003c/a\u003e 类型。如果您希望获得额外的精度，则需要自己实例化一个。\u003c/p\u003e\n\u003ch1 id=\"numhttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e\u003ccode\u003eNum\u003c/code\u003e\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 类型提供 \u003ca href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\"\u003e双精度浮点\u003c/a\u003e十进制数，在其他语言中有时被称为“doubles”。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 字面量的写法是使用字母 \u003ccode\u003ee\u003c/code\u003e 与指数分割开。请记住，即使指数为零，字母\u003ccode\u003ee\u003c/code\u003e \u003cstrong\u003e也是必需的\u003c/strong\u003e，否则您将得到一个\u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 有理数字面量：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mf\"\u003e42e0\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «Num» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mf\"\u003e42.0\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «Rat» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e区分大小写的单词 \u003ca href=\"https://docs.raku.org/type/Num#Inf\"\u003eInf\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/Num#NaN\"\u003eNaN\u003c/a\u003e 分别表示特殊值 infinity 和 not-a-number。可以使用 U+221E INFINITY（\u003ccode\u003e∞\u003c/code\u003e）字符代替 \u003ca href=\"https://docs.raku.org/type/Num#Inf\"\u003eInf\u003c/a\u003e：\u003c/p\u003e\n\u003cp\u003eRaku  尽可能遵循\u003ca href=\"https://en.wikipedia.org/wiki/IEEE_754\"\u003eIEEE 754-2008浮点运算标准，\u003c/a\u003e计划在以后的语言版本中实现更多的一致性。该语言保证为任何给定的 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 字面量选择最接近的可表示数字，并且确实支持负零和\u003ca href=\"https://en.wikipedia.org/wiki/Denormal_number\"\u003e非正规\u003c/a\u003e（也称为“次正规”）。\u003c/p\u003e\n\u003cp\u003e请记住，像 \u003ca href=\"https://docs.raku.org/routine/say\"\u003esay\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/routine/put\"\u003eput\u003c/a\u003e 这样的输出例程不会非常难以区分输出\u003ca href=\"https://docs.raku.org/type/Numeric\"\u003e数字\u003c/a\u003e类型的方式，并且可能选择将\u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e显示为\u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e或\u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e数字。要获得更明确的输出字符串，请使用\u003ca href=\"https://docs.raku.org/routine/perl\"\u003eperl\u003c/a\u003e方法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e  \u003cspan class=\"mf\"\u003e1e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# OUTPUT: «1» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mf\"\u003e.5e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# OUTPUT: «0.5» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e  \u003cspan class=\"mf\"\u003e1e0\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eperl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «1e0» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mf\"\u003e.5e0\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eperl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «0.5e0» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"complexhttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e\u003ccode\u003eComplex\u003c/code\u003e\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Complex_plane\"\u003e复平面\u003c/a\u003e的\u003ca href=\"https://docs.raku.org/type/Complex\"\u003e复数\u003c/a\u003e型数值。\u003ca href=\"https://docs.raku.org/type/Complex\"\u003e复数\u003c/a\u003e对象包括两个 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 对象以表示复数的\u003ca href=\"https://docs.raku.org/routine/re\"\u003e实部\u003c/a\u003e和\u003ca href=\"https://docs.raku.org/routine/im\"\u003e虚部\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e要创建\u003ca href=\"https://docs.raku.org/type/Complex\"\u003e复数\u003c/a\u003e，可以在任何其他非复数上使用\u003ca href=\"https://docs.raku.org/routine/i\"\u003e后缀\u003ccode\u003ei\u003c/code\u003e运算符\u003c/a\u003e，可选择使用加法设置实部。要使用\u003ccode\u003ei\u003c/code\u003e运算符作用在 \u003ccode\u003eNaN\u003c/code\u003e 或 \u003ccode\u003eInf\u003c/code\u003e 字面量上，请使用反斜杠将其与它们分开。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"no\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# OUTPUT: «0+42i» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e73\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"no\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# OUTPUT: «73+42i» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e73\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"no\"\u003eInf\u003c/span\u003e\\\u003cspan class=\"no\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «73+Inf\\i» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请记住，上面的语法只是一个附加表达式和优先级规则适用。它也不能用于禁止表达式的地方，例如常规参数中的字面量。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Precedence of `*` is higher than that of `+` \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e73\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"no\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «146+10i» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e为了避免这些问题，您可以选择使用\u003ca href=\"https://docs.raku.org/type/Complex\"\u003e复数\u003c/a\u003e字面量语法，其中包括使用尖括号包围实部和虚部，\u003cem\u003e而不包含任何空格\u003c/em\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e73+10i\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «146+20i» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003ehow-is-it\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e2+4i\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ethat\u0026#39;s my favorite number!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003ehow-is-it\u003c/span\u003e \u003cspan class=\"ow\"\u003e(|)\u003c/span\u003e      \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003emeh\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehow-is-it\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"no\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# OUTPUT: «that\u0026#39;s my favorite number!» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehow-is-it\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"no\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# OUTPUT: «meh» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"rationalhttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e\u003ccode\u003eRational\u003c/code\u003e\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e执行 \u003ca href=\"https://docs.raku.org/type/Rational\"\u003eRational\u003c/a\u003e 角色的类型提供高精度和任意精度的十进制数。由于精度越高，性能损失越大，\u003ca href=\"https://docs.raku.org/type/Rational\"\u003eRational\u003c/a\u003e 类型有两种形式：\u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat\u003c/a\u003e。\u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 是最常用的变体, 其在大多数情况下降级成 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e，当它不再能容纳所有的要求精度时。\u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat\u003c/a\u003e 是保持增长提供所有所需的精度任意精度的变体。\u003c/p\u003e\n\u003ch2 id=\"rathttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e\u003ccode\u003eRat\u003c/code\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e最常见的 \u003ca href=\"https://docs.raku.org/type/Rational\"\u003eRational\u003c/a\u003e 类型。它支持有 64 位分母的有理数（在将分数换算到最小分母之后）。\u003ccode\u003eRat\u003c/code\u003e 可以直接创建具有较大分母的对象，但是，当具有这样的分母的 \u003ccode\u003eRat\u003c/code\u003e 是数学运算的结果时，它们会降级为 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 对象。\u003c/p\u003e\n\u003cp\u003e在许多其他语言中 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 字面量使用和 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 字面量类似的语法，使用点来表示数字是十进制：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mf\"\u003e.1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mf\"\u003e.2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mf\"\u003e.3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «True» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你在许多常用语言中执行与上述类似的语句, 由于浮点数学的精度，您将得到 \u003ccode\u003eFalse\u003c/code\u003e 作为答案。要在 Raku 中获得相同的结果，你必须使用 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 字面量：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mf\"\u003e.1e0\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mf\"\u003e.2e0\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mf\"\u003e.3e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «False» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can also use \u003ca href=\"https://docs.raku.org/routine/$SOLIDUS\"\u003e\u003ccode\u003e/\u003c/code\u003e division operator\u003c/a\u003e with \u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e or \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e objects to produce a \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e:\u003c/p\u003e\n\u003cp\u003e您还可以使用具有 \u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 对象的\u003ca href=\"https://docs.raku.org/routine/$SOLIDUS\"\u003e\u003ccode\u003e/\u003c/code\u003e除法运算符\u003c/a\u003e来生成 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# OUTPUT: «0.75» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mf\"\u003e4.2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# OUTPUT: «0.714286» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.1\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mf\"\u003e4.2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «0.261905» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eKeep in mind the above syntax is just a division expression and precedence rules apply. It also cannot be used in places that forbid expressions, such as literals in routine parameters.\u003c/p\u003e\n\u003cp\u003e请记住，上面的语法只是一个应用了优先级规则的除法表达式。它也不能用于禁止表达式的地方，例如例程参数中的字面量。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Precedence of power operators is higher than division \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e²\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «0.75» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e为了避免这些问题，您可以选择使用 \u003ca href=\"https://docs.raku.org/type/Rational\"\u003eRational\u003c/a\u003e 字面量语法，它用尖括号括起分子和分母，\u003cem\u003e不带任何空格\u003c/em\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e3/2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e²\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «2.25» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003ehow-is-it\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e3/2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ethat\u0026#39;s my favorite number!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003ehow-is-it\u003c/span\u003e \u003cspan class=\"ow\"\u003e(|)\u003c/span\u003e     \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003emeh\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e                        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehow-is-it\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# OUTPUT: «that\u0026#39;s my favorite number!» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehow-is-it\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# OUTPUT: «meh» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后，任何具有 \u003ccode\u003eNo\u003c/code\u003e 属性的表示小数的 Unicode 字符都可以用作\u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 字面量：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e ½ \u003cspan class=\"o\"\u003e+\u003c/span\u003e ⅓ \u003cspan class=\"o\"\u003e+\u003c/span\u003e ⅝ \u003cspan class=\"o\"\u003e+\u003c/span\u003e ⅙\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «1.625» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"分解为-numhttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e分解为 \u003ccode\u003eNum\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eIf a \u003cem\u003emathematical operation\u003c/em\u003e that produces a \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e answer would produce a \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e with denominator larger than 64 bits, that operation would instead return a \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e object. When \u003cem\u003econstructing\u003c/em\u003e a \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e (i.e. when it is not a result of some mathematical expression), however, a larger denominator can be used:\u003c/p\u003e\n\u003cp\u003e如果产生 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 答案的\u003cem\u003e数学运算\u003c/em\u003e会产生分母大于64位的 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e，则该操作将返回 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 对象。当\u003cem\u003e构建\u003c/em\u003e一个\u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e（即，当它不是一些数学表达式的结果）时，但是，更大的分母可以使用：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e⁶⁴ \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                   \u003cspan class=\"c1\"\u003e# OUTPUT: «0.000000000000000000054» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e             \u003cspan class=\"c1\"\u003e# OUTPUT: «Rat» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enude\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e              \u003cspan class=\"c1\"\u003e# OUTPUT: «(1 18446744073709551615)» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e⁶⁴\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                   \u003cspan class=\"c1\"\u003e# OUTPUT: «5.421010862427522e-20» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e             \u003cspan class=\"c1\"\u003e# OUTPUT: «Num» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eRat\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e⁶⁴\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                   \u003cspan class=\"c1\"\u003e# OUTPUT: «0.000000000000000000054» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e             \u003cspan class=\"c1\"\u003e# OUTPUT: «Rat» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enude\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e              \u003cspan class=\"c1\"\u003e# OUTPUT: «(1 18446744073709551616)» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eNum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e               \u003cspan class=\"c1\"\u003e# OUTPUT: «5.421010862427522e-20» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"fatrathttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e\u003ccode\u003eFatRat\u003c/code\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e最后一个 \u003ca href=\"https://docs.raku.org/type/Rational\"\u003eRational\u003c/a\u003e 类型 - \u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat\u003c/a\u003e - 保留你所要求的所有精度，将分子和分母存储为两个 \u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e 对象。\u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat\u003c/a\u003e 比 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 更具传染性，有这么多的 \u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat\u003c/a\u003e 数学运算会产生另一个 \u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat\u003c/a\u003e，保留所有可用的精度。当 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 退化为 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 时，使用 \u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat \u003c/a\u003e 的数学运算会持续不断：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"kt\"\u003eRat\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e999999999999999999\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# OUTPUT: «Rat» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"kt\"\u003eRat\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e9999999999999999999\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"c1\"\u003e# OUTPUT: «Num» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"kt\"\u003eFatRat\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e999999999999999999\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# OUTPUT: «FatRat» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"kt\"\u003eFatRat\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e99999999999999999999999\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «FatRat» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e没有特殊的运算符或语法可用于构造 \u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat\u003c/a\u003e 对象。只需使用 \u003ca href=\"https://docs.raku.org/type/FatRat#%28Rational%29_method_new\"\u003e\u003ccode\u003eFatRat.new\u003c/code\u003e\u003c/a\u003e 方法，将分子作为第一个位置参数，将分母作为第二个位置参数。\u003c/p\u003e\n\u003cp\u003e如果您的程序需要大量的 \u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat\u003c/a\u003e 创建，您可以创建自己的自定义运算符：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003einfix\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e🙼\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"kt\"\u003eFatRat\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nv\"\u003e$^a\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$^b\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e🙼\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eperl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «FatRat.new(1, 3)» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"打印-rationalshttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e打印 rationals\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e请记住，像 \u003ca href=\"https://docs.raku.org/routine/say\"\u003esay\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/routine/put\"\u003eput\u003c/a\u003e 这样的输出例程不会力图区分\u003ca href=\"https://docs.raku.org/type/Numeric\"\u003e数字\u003c/a\u003e类型如何输出，并且可能选择将 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 显示为 \u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 数字。要获得更明确的输出字符串，请使用 \u003ca href=\"https://docs.raku.org/routine/perl\"\u003eperl\u003c/a\u003e 方法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"c1\"\u003e# OUTPUT: «1» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e ⅓\u003cspan class=\"p\"\u003e;\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# OUTPUT: «0.333333» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eperl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# OUTPUT: «1.0» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e ⅓\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eperl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# OUTPUT: «\u0026lt;1/3\u0026gt;» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e有关更多信息，您可以选择在 \u003ca href=\"https://docs.raku.org/routine/nude\"\u003enude\u003c/a\u003e 中查看 \u003ca href=\"https://docs.raku.org/type/Rational\"\u003eRational\u003c/a\u003e 对象，显示其分子和分母：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e ⅓\u003cspan class=\"p\"\u003e;\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# OUTPUT: «0.333333» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"c1\"\u003e# OUTPUT: «2» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e ⅓\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eperl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# OUTPUT: «\u0026lt;1/3\u0026gt;» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e4/2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enude\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «(2 1)» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"division-by-zerohttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003eDivision by zero\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e在许多语言中，除以零立马会抛出一个异常。在 Raku 中，会发生什么取决于你要除的东西以及你如何使用结果。\u003c/p\u003e\n\u003cp\u003eRaku 遵循 \u003ca href=\"https://en.wikipedia.org/wiki/IEEE_754\"\u003eIEEE 754-2008浮点运算标准\u003c/a\u003e，但由于历史原因，6.c 和 6.d 语言版本不完全符合。\u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e被零除产生 \u003ca href=\"https://docs.raku.org/type/Failure\"\u003eFailure\u003c/a\u003e，而\u003ca href=\"https://docs.raku.org/type/Complex\"\u003e复数\u003c/a\u003e被零除产生 \u003ccode\u003eNaN\u003c/code\u003e 部件, 无论分子是什么。\u003c/p\u003e\n\u003cp\u003e从 6.e 语言开始，\u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/Complex\"\u003eComplex\u003c/a\u003e 除以零将产生\u003ca href=\"https://docs.raku.org/type/Num#Inf\"\u003e-Inf\u003c/a\u003e，\u003ccode\u003e+Inf\u003c/code\u003e 或 \u003ca href=\"https://docs.raku.org/type/Num#NaN\"\u003eNaN\u003c/a\u003e, 这取决于分子分别是负数，正数还是零（对于\u003ca href=\"https://docs.raku.org/type/Complex\"\u003e复数\u003c/a\u003e，实部和虚部是 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 并且被分别考虑）。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e 数字的除法产生一个 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 对象（或 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e，如果在换算之后分母大于64位，当你除以零时就不是这种情况）。这意味着这种除法永远不会产生\u003ca href=\"https://docs.raku.org/type/Exception\"\u003e异常\u003c/a\u003e或\u003ca href=\"https://docs.raku.org/type/Failure\"\u003e失败\u003c/a\u003e。结果是零分母有理数，这可能是爆炸性的。\u003c/p\u003e\n\u003ch2 id=\"zero-denominator-rationalshttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003eZero-denominator rationals\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/FatRat\"\u003e零分母\u003c/a\u003e 有理数是一个扮演 \u003ca href=\"https://docs.raku.org/type/Rational\"\u003eRational\u003c/a\u003e 角色的数字，它在核心数字中将是 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/FatRat\"\u003eFatRat\u003c/a\u003e 对象，其分母为零。这样根据原始分子是否为负，分别为零或正数, 有理数的分子被归一化到\u003ccode\u003e-1\u003c/code\u003e，\u003ccode\u003e0\u003c/code\u003e或\u003ccode\u003e1\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e可以在不需要实际除法的情况下执行的操作是非爆炸性的。例如，您可以单独检查 \u003ca href=\"https://docs.raku.org/routine/nude\"\u003enude\u003c/a\u003e 中的\u003ca href=\"https://docs.raku.org/routine/numerator\"\u003e分子\u003c/a\u003e和\u003ca href=\"https://docs.raku.org/routine/denominator\"\u003e分母\u003c/a\u003e，或执行数学运算，而不会出现任何异常或失败。\u003c/p\u003e\n\u003cp\u003e转换零分母有理数到 \u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e 遵循 \u003ca href=\"https://en.wikipedia.org/wiki/IEEE_754\"\u003eIEEE\u003c/a\u003e 公约，结果是\u003ccode\u003e-Inf\u003c/code\u003e，\u003ccode\u003eInf\u003c/code\u003e，或 \u003ccode\u003eNaN\u003c/code\u003e，这取决于分子是否分别是负，正，或零。从另一个方面来看也是如此：转换\u003ccode\u003e±Inf\u003c/code\u003e/ \u003ccode\u003eNaN\u003c/code\u003e到其中一个 \u003ca href=\"https://docs.raku.org/type/Rational\"\u003eRational\u003c/a\u003e 类型将产生具有适当分子的零分母有理数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e1/0\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eNum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# OUTPUT: «Inf» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e-1/0\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eNum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# OUTPUT: «-Inf» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e0/0\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eNum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# OUTPUT: «NaN» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"no\"\u003eInf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eRat\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enude\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «(1 0)» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e要求非 \u003ca href=\"https://en.wikipedia.org/wiki/IEEE_754\"\u003eIEEE\u003c/a\u003e 除法的分子和分母的所有其他操作将导致抛出异常 \u003ccode\u003eX::Numeric::DivideByZero\u003c/code\u003e。最常见的此类操作可能是尝试打印或字符串化零分母有理数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Attempt to divide by zero using div \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#  in block \u0026lt;unit\u0026gt; at -e line 1 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"同质异形httpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e同质异形\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/language/glossary#index-entry-Allomorph\"\u003eAllomorphs\u003c/a\u003e 是两种类型的子类，可以表现为它们中的任何一种。例如，同质异形 \u003ca href=\"https://docs.raku.org/type/IntStr\"\u003eIntStr\u003c/a\u003e 是 \u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/Str\"\u003eStr\u003c/a\u003e 类型的子类，并且将被需要 \u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/type/Str\"\u003eStr\u003c/a\u003e 对象的任何类型约束所接受。\u003c/p\u003e\n\u003cp\u003e同质异形可以使用\u003ca href=\"https://docs.raku.org/language/quoting#Word_quoting%3A_%3C_%3E\"\u003e尖括号\u003c/a\u003e创建，可以单独使用或作为散列键查找的一部分使用; 直接使用方法\u003ccode\u003e.new\u003c/code\u003e，也由一些结构提供，如 \u003ca href=\"https://docs.raku.org/language/functions#sub_MAIN\"\u003e\u003ccode\u003esub MAIN\u003c/code\u003e\u003c/a\u003e 的参数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e# OUTPUT: «IntStr» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42e0\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e               \u003cspan class=\"c1\"\u003e# OUTPUT: «NumStr» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e 42+42i\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e            \u003cspan class=\"c1\"\u003e# OUTPUT: «ComplexStr» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e 1/2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e               \u003cspan class=\"c1\"\u003e# OUTPUT: «RatStr» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e0.5\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                \u003cspan class=\"c1\"\u003e# OUTPUT: «RatStr» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"vg\"\u003e@*ARGS\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003eMAIN\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# OUTPUT: «IntStr» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"kt\"\u003eIntStr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;)\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «IntStr» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面的几个结构在打开角括号之后有一个空格。那个空格不是故意的。通常使用运算符编写的数字，例如\u003ccode\u003e1/2\u003c/code\u003e（\u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e，除法运算符）和\u003ccode\u003e1+2i\u003c/code\u003e（\u003ca href=\"https://docs.raku.org/type/Complex\"\u003e复数\u003c/a\u003e，加法）可以写成不涉及使用运算符的字面值：在尖括号和尖括号里面的字符之间\u003cem\u003e没有\u003c/em\u003e任何空格。通过在尖括号中添加空格，我们告诉编译器我们不仅需要 \u003ca href=\"https://docs.raku.org/type/Rat\"\u003eRat\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/type/Complex\"\u003eComplex\u003c/a\u003e 字面量，而且我们还希望它是一个allomorph：在这种情况下是 \u003ca href=\"https://docs.raku.org/type/RatStr\"\u003eRatStr\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/type/ComplexStr\"\u003eComplexStr\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e如果数字字面量不使用任何运算符，则将其写入尖括号内，即使不包含任何空格，也会产生同形异形体。（逻辑：如果你不想要同质异形，你就不会使用尖括号。对于使用运算符的数字也是如此，因为某些结构，例如签名字面量，不允许你使用运算符，所以你不能只为这些数字字面量省略尖括号）。\u003c/p\u003e\n\u003ch2 id=\"可用的同质异形httpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e可用的同质异形\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e核心语言提供以下同质异形：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eType\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eAllomorph of\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eExample\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eIntStr\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eInt and Str\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lt;42\u0026gt;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eNumStr\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eNum and Str\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lt;42e0\u0026gt;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eComplexStr\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eComplex and Str\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lt; 1+2i\u0026gt;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eRatStr\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eRat and Str\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lt;1.5\u0026gt;\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e注意：没有\u003ccode\u003eFatRatStr\u003c/code\u003e类型。\u003c/p\u003e\n\u003ch2 id=\"coercion-of-allomorphshttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003eCoercion of allomorphs\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e请记住，同质异形只是它们所代表的两种（或三种）类型的子类。正如变量或参数类型约束为\u003ccode\u003eFoo\u003c/code\u003e可以接受任何 \u003ccode\u003eFoo\u003c/code\u003e 子类一样，所以变量或参数类型约束为 \u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e 的将接受 \u003ca href=\"https://docs.raku.org/type/IntStr\"\u003eIntStr\u003c/a\u003e 同质异形：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e                          \u003cspan class=\"c1\"\u003e# OUTPUT: «IntStr» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eNum\u003c/span\u003e \u003cspan class=\"nv\"\u003e$y\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42e0\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$y\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                      \u003cspan class=\"c1\"\u003e# OUTPUT: «NumStr» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当然，这也适用于参数\u003ca href=\"https://docs.raku.org/type/Signature#Coercion_type\"\u003ecoercers\u003c/a\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eCool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# OUTPUT: «IntStr» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e给定的同质异形\u003cem\u003e已经\u003c/em\u003e是 \u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e 类型的对象，因此在这种情况下它不会转换为“普通的”  \u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e当然，如果没有办法将它们“折叠”到其中一个组件，那么同质异形体的力量将会严重减弱。因此，如果你使用所要强制到的类型的名字显式调用方法，那么您将获得该组件。这同样适用于任何代理方法，例如调用方法\u003ca href=\"https://docs.raku.org/routine/Numeric\"\u003e\u003ccode\u003e.Numeric\u003c/code\u003e\u003c/a\u003e而不是\u003ca href=\"https://docs.raku.org/routine/Int\"\u003e\u003ccode\u003e.Int\u003c/code\u003e\u003c/a\u003e或使用\u003ca href=\"https://docs.raku.org/routine/~\"\u003e\u003ccode\u003eprefix:\u0026lt;~\u0026gt; \u003c/code\u003e\u003c/a\u003e运算符而不是\u003ca href=\"https://docs.raku.org/routine/Str\"\u003e\u003ccode\u003e.Str\u003c/code\u003e\u003c/a\u003e方法调用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$al\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"kt\"\u003eIntStr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eforty two\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$al\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eStr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# OUTPUT: «forty two» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nv\"\u003e$al\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# OUTPUT: «42» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e1/99999999999999999999\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eRat\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# OUTPUT: «Rat» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e1/99999999999999999999\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eFatRat\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «FatRat» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e强制整个同质异形体列表的一种方便方法是将 \u003ca href=\"https://docs.raku.org/language/operators#Hyper_operators\"\u003ehyper\u003c/a\u003e 运算符应用于适当的前缀：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003emap\u003c/span\u003e \u003cspan class=\"o\"\u003e*.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e   \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42 50e0 100\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# OUTPUT: «(IntStr NumStr IntStr)» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003emap\u003c/span\u003e \u003cspan class=\"o\"\u003e*.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e«\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;42 50e0 100\u0026gt;;  # OUTPUT: «(Int Num Int)\u003c/span\u003e\u003cspan class=\"p\"\u003e»\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003emap\u003c/span\u003e \u003cspan class=\"o\"\u003e*.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"p\"\u003e«\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;42 50e0 100\u0026gt;;  # OUTPUT: «(Str Str Str)\u003c/span\u003e\u003cspan class=\"p\"\u003e»\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"object-identityhttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003eObject identity\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e当我们考虑对象一致性时，上面关于强制同形异形的讨论变得更加重要。一些构造利用它来确定两个对象是否“相同”。而对于人类而言，同质异形\u003ccode\u003e42\u003c/code\u003e和常规的\u003ccode\u003e42\u003c/code\u003e可能看起来“相同”，对于那些构造，它们是完全不同的对象：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# \u0026#34;42\u0026#34; shows up twice in the result: 42 and \u0026lt;42\u0026gt; are different objects: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003eunique\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «(1 42 42)» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Use a different operator to `unique` with: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003eunique\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ewith\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;[==]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «(1 42)» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Or coerce the input instead (faster than using a different `unique` operator): \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003eunique\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «(1 42)» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003eunique\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e«\u003c/span\u003e\u003cspan class=\"s2\"\u003e(1, 1, 1, 42, \u0026lt;42\u0026gt;);         # OUTPUT: «(1 42)\u003c/span\u003e\u003cspan class=\"p\"\u003e»\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Parameterized Hash with `Any` keys does not stringify them; our key is of type `Int`: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%h\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# But we use the allomorphic key of type `IntStr`, which is not in the Hash: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e%h\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;:\u003c/span\u003e\u003cspan class=\"s\"\u003eexists\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e           \u003cspan class=\"c1\"\u003e# OUTPUT: «False» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Must use curly braces to avoid the allomorph: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e%h\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e}:\u003c/span\u003e\u003cspan class=\"s\"\u003eexists\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e           \u003cspan class=\"c1\"\u003e# OUTPUT: «True» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# We are using a set operator to look up an `Int` object in a list of `IntStr` objects: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"o\"\u003e∈\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42 100 200\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «False» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Convert it to an allomorph: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e∈\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e42 100 200\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «True» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Or convert the items in the list to plain `Int` objects: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"o\"\u003e∈\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e«\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;42 100 200\u0026gt;; # OUTPUT: «True\u003c/span\u003e\u003cspan class=\"p\"\u003e»\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意这些对象一致性的差异，并根据需要强制你的同形异形体。\u003c/p\u003e\n\u003ch1 id=\"原生数字httpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e原生数字\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e顾名思义，原生数字可以访问原生数字 - 即由硬件直接提供的数字。这反过来又提供两个功能：溢出/下溢和更好的性能。\u003c/p\u003e\n\u003cp\u003e**注意：**在撰写本文时（2018.05），某些实现（例如 Rakudo）提供了有关原生类型的一些细节，例如  \u003ccode\u003eint64\u003c/code\u003e 是否可用且在32位计算机上具有64位大小，以及如何检测何时你的程序正在这样的硬件上运行。\u003c/p\u003e\n\u003ch2 id=\"可用的原生数字httpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e可用的原生数字\u003c/a\u003e\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eNative type\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eBase numeric\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eSize\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eatomicint\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003einteger\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003esized to offer CPU-provided atomic operations. (typically 64 bits on 64-bit platforms and 32 bits on 32-bit ones)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eint\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003einteger\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e64-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eint16\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003einteger\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e16-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eint32\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003einteger\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e32-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eint64\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003einteger\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e64-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eint8\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003einteger\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e8-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003enum\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003efloating point\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e64-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003enum32\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003efloating point\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e32-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003enum64\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003efloating point\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e64-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003euint\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eunsigned integer\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e64-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003euint16\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eunsigned integer\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e16-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003euint32\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eunsigned integer\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e32-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003euint64\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eunsigned integer\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e64-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003euint8\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eunsigned integer\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e8-bits\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"创建原生数字httpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e创建原生数字\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e要创建原生类型的变量或参数，只需使用其中一个可用数字的名称作为类型约束：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e \u003cspan class=\"nv\"\u003e$y\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"kt\"\u003eint8\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.z\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e有时，您可能希望在不创建任何可用变量的情况下将某些值强制转换为原生类型。没有\u003ccode\u003e.int\u003c/code\u003e或类似的强制方法（方法调用是后期的，所以它们不适合这个目的）。相反，只需使用匿名变量：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esome-native-taking-sub\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$y\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"nv\"\u003e$\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$z\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"溢出下溢httpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e溢出/下溢\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e尝试\u003cstrong\u003e分配\u003c/strong\u003e不适合特定原生类型的值会产生异常。这包括尝试为原生参数提供过大的参数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e¹⁰⁰\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cannot unbox 101 bit wide bigint into native integer \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#  in block \u0026lt;unit\u0026gt; at -e line 1 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003ef\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e⁶⁴\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cannot unbox 65 bit wide bigint into native integer \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#   in sub f at -e line 1 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#   in block \u0026lt;unit\u0026gt; at -e line 1 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但是，以这样一种太大/太小的方式修改已存在的值会产生溢出/下溢行为：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e⁶³\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e             \u003cspan class=\"c1\"\u003e# OUTPUT: «9223372036854775807» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e           \u003cspan class=\"c1\"\u003e# OUTPUT: «-9223372036854775808» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003euint8\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e             \u003cspan class=\"c1\"\u003e# OUTPUT: «0» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# OUTPUT: «156» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e创建使用原生类型的对象不涉及程序员的直接分配; 这就是为什么这些构造提供溢出/下溢行为而不是抛出异常。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"kt\"\u003eBuf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2000\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eList\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «(232 208 184)» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003euint8\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2000\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «232 208 184» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"auto-boxinghttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003eAuto-boxing\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e虽然它们可以被称为“\u003cem\u003e原生类型\u003c/em\u003e ”，但原生数字实际上并不是具有任何可用方法的类。但是，您\u003cem\u003e可以\u003c/em\u003e调用这些数字的非原生版本上可用的任何方法。这是怎么回事？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint8\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «42» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e此行为称为“自动装箱”。编译器使用所有方法自动将原生类型“装箱”为功能齐全的高级类型。换句话说，\u003ccode\u003eint8\u003c/code\u003e上面的内容自动转换为\u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt，\u003c/a\u003e然后它是\u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e类，然后提供被调用的\u003ca href=\"https://docs.raku.org/routine/abs\"\u003eabs\u003c/a\u003e方法。\u003c/p\u003e\n\u003cp\u003e当您使用原生类型获得性能提升时，此详细信息非常重要。如果您正在使用的代码导致执行大量自动装箱，那么使用原生类型的性能可能会比使用非原生类型时\u003cem\u003e更差\u003c/em\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a-native\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e1000_000\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eabs\u003c/span\u003e        \u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003enow\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"k\"\u003eENTER\u003c/span\u003e \u003cspan class=\"nb\"\u003enow\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «0.38180862» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e1000_000\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a-native\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eabs\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003enow\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"k\"\u003eENTER\u003c/span\u003e \u003cspan class=\"nb\"\u003enow\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «0.938720» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如您所见，原生变体的速度慢了两倍多。原因是方法调用需要将原生类型装箱，而非原生变体不需要这样的东西，因此性能损失。\u003c/p\u003e\n\u003cp\u003e在这种特殊情况下，我们可以简单地切换到\u003ca href=\"https://docs.raku.org/routine/abs\"\u003eabs\u003c/a\u003e的子程序形式，它可以使用原生类型而无需装箱。在其他情况下，您可能需要寻找其他解决方案以避免过多的自动装箱，包括切换到部分代码的非原生类型。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a-native\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e1000_000\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003eabs\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e        \u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003enow\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"k\"\u003eENTER\u003c/span\u003e \u003cspan class=\"nb\"\u003enow\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «0.38229177» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e1000_000\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003eabs\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a-native\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003enow\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"k\"\u003eENTER\u003c/span\u003e \u003cspan class=\"nb\"\u003enow\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «0.3088305» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"默认值httpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e默认值\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e由于原生类型后面没有类，因此通常没有使用尚未初始化的变量获得的类型对象。因此，原生类型自动初始化为零。在6.c语言，原生的浮点类型（\u003ccode\u003enum\u003c/code\u003e，\u003ccode\u003enum32\u003c/code\u003e，和\u003ccode\u003enum64\u003c/code\u003e）被初始化为值 \u003ccode\u003eNaN\u003c/code\u003e; 在 6.d 语言中默认为 \u003ccode\u003e0e0\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"原生分派httpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e原生分派\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e例如，当大小可预测时，可以使原生候选者与非原生候选者一起提供具有原生候选者的更快算法，但是否则回退到较慢的非原生候选者。以下是涉及原生候选人的多重分派的规则。\u003c/p\u003e\n\u003cp\u003e首先，原生类型的大小在分派中不起作用，并且\u003ccode\u003eint8\u003c/code\u003e被认为与\u003ccode\u003eint16\u003c/code\u003e或\u003ccode\u003eint\u003c/code\u003e 例如，当大小可预测时，可以使本地候选者与非本地候选者一起提供具有本地候选者的更快算法，但是否则回退到较慢的非本地候选者。以下是涉及本地候选人的多次派遣的规则。\u003c/p\u003e\n\u003cp\u003e首先，原生类型的大小在调度中不起作用，并且\u003ccode\u003eint8\u003c/code\u003e被认为与\u003ccode\u003eint16\u003c/code\u003e或\u003ccode\u003eint\u003c/code\u003e 相同：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e   \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eint32\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Ambiguous call to \u0026#39;foo(Int)\u0026#39;; these signatures all match: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# :(int $x) \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# :(int32 $x) \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e其次，如果例程是一个 \u003ccode\u003eonly\u003c/code\u003e-ie，它不是一个\u003ca href=\"https://docs.raku.org/language/functions#Multi-dispatch\"\u003e\u003ccode\u003emulti\u003c/code\u003e\u003c/a\u003e非原生类型，而是在调用期间给出一个原生类型，反之亦然，那么参数将被自动装箱或自动取消装箱以使可以被调用。如果给定的参数太大而无法放入native参数，则会抛出异常：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{}(\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e            \u003cspan class=\"c1\"\u003e# OK; auto-unboxing \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{}(\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e¹⁰⁰ \u003cspan class=\"p\"\u003e);\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# Too large; exception \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{}(\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e¹⁰⁰ \u003cspan class=\"p\"\u003e);\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# OK; non-native parameter \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{}(\u003c/span\u003e \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OK; auto-boxing \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当涉及到\u003ca href=\"https://docs.raku.org/language/functions#Multi-dispatch\"\u003e\u003ccode\u003emulti\u003c/code\u003e\u003c/a\u003e例程时，如果没有可用的原生候选者，则原生参数将始终自动装箱：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «42» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e另一种方式是不能提供相同的 luxury。如果只有原生候选者可用，则非原生参数将\u003cem\u003e不会\u003c/em\u003e被自动取消装箱，而是指示不会抛出匹配的候选者的异常（这种不对称的原因是原生类型总是可以装箱，但是非原生的可能太大而无法融入原生）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nb\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003ef\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cannot resolve caller f(Int); none of these signatures match: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#     (int $x) \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#   in block \u0026lt;unit\u0026gt; at -e line 1 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但是，如果正在进行调用，其中一个参数是原生类型而另一个是\u003ca href=\"https://docs.raku.org/language/syntax#Number_literals\"\u003e数字字面量\u003c/a\u003e，则放弃此规则：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nb\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ef\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Successful call \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这样，您就不必不断将诸如 \u003ccode\u003e$n +\u0026gt; 2\u003c/code\u003e 写为 \u003ccode\u003e$n +\u0026gt; (my int $ = 2)\u003c/code\u003e 了。编译器知道字面量小到足以适合原生类型并将其转换为原生类型。\u003c/p\u003e\n\u003ch2 id=\"原子操作httpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003e原子操作\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e该语言提供了一些保证以原子方式执行的\u003ca href=\"https://docs.raku.org/type/atomicint\"\u003e操作\u003c/a\u003e，即安全地由多个线程执行而无需锁定而没有数据争用的风险。\u003c/p\u003e\n\u003cp\u003e对于此类操作，需要\u003ca href=\"https://docs.raku.org/type/atomicint\"\u003eatomicint\u003c/a\u003e原生类型。此类型与普通原生\u003ca href=\"https://docs.raku.org/type/int\"\u003eint\u003c/a\u003e类似，不同之处在于它的大小使得可以对其执行CPU提供的原子操作。在32位CPU上，它通常是32位大小，而在64位CPU上，它通常是64位大小。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# !!WRONG!! Might be non-atomic on some systems \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eawait\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003estart\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e⚛\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «98» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# RIGHT! The use of `atomicint` type guarantees operation is atomic \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eatomicint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eawait\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003estart\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e⚛\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «100» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e相似性\u003ccode\u003eint\u003c/code\u003e也存在于多重分派中： \u003ccode\u003eatomicint\u003c/code\u003e，普通的 \u003ccode\u003eint\u003c/code\u003e和固定大小的\u003ccode\u003eint\u003c/code\u003e变量都是相同的，并且不能通过多重分派来区分。\u003c/p\u003e\n\u003ch1 id=\"numeric-infectiousnesshttpsdocsrakuorglanguagenumerics___top\"\u003e\u003ca href=\"https://docs.raku.org/language/numerics#___top\"\u003eNumeric infectiousness\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e当一些数学运算中涉及两个不同类型的数字时，数字“传递性”决定了结果类型。如果结果是该类型而不是其他操作数的类型，则认为类型比其他类型更具传递性。例如，\u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e类型比\u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e更具传递性，因此我们可以期望\u003ccode\u003e42e0 + 42\u003c/code\u003e产生\u003ca href=\"https://docs.raku.org/type/Num\"\u003eNum\u003c/a\u003e作为结果。\u003c/p\u003e\n\u003cp\u003e传递性如下，首先列出最具传递性的类型\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eComplex\u003c/li\u003e\n\u003cli\u003eNum\u003c/li\u003e\n\u003cli\u003eFatRat\u003c/li\u003e\n\u003cli\u003eRat\u003c/li\u003e\n\u003cli\u003eInt\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mf\"\u003e2e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Int + Num =\u0026gt; OUTPUT: «Num» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e½ \u003cspan class=\"o\"\u003e+\u003c/span\u003e ½\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Rat + Rat =\u0026gt; OUTPUT: «Rat» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eFatRat\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e ½\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# FatRat + Rat =\u0026gt; OUTPUT: «FatRat» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e同质异形体具有与其数字成分相同的传递性。原生类型获得自动装箱，并具有与其盒装变体相同的传递性。\u003c/p\u003e\n","text":"Int Int 类型提供任意大小的整数。它们可以像计算机内存允许的那样大，虽然有些实现在被要求生成真正惊人大小的整数时会选择抛出数字溢出错误：\nsay 10**600**600 # OUTPUT: «Numeric overflow» 与某些语言不同，当两个操作数都是 Int 类型时，使用/运算符执行除法将生成小数，而不执行任何舍入。\nsay 4/5; # OUTPUT: «0.8» 这种除法产生的类型是 Rat 或 Num 类型。换算后，如果分数的分母是小于64位，则产生 Rat, 否则产生 Num 类型。\n如果你想落得 Int 的结果，那么 div 和 narrow 例程可能会有帮助，只要有可能。div运算符执行整除，丢弃余数，而narrow 会把数拟合到它适合的最窄类型：\nsay 5 div 2; # OUTPUT: «2» # Result `2` is narrow enough to be an Int: say (4/2).narrow; # OUTPUT: «2» say (4/2).narrow.^name; # OUTPUT: «Int» # But 2.5 has fractional part, so it ends up being a Rat type: say (5/2).narrow.^name; # OUTPUT: «Rat» say (5/2).narrow; # OUTPUT: «2.5» # Denominator is too big for a Rat, so a Num is produced: say 1 / 10⁹⁹; # OUTPUT: «1e-99» Raku 具有 FatRat 类型，可提供任意精度的分数。为什么在上一个例子中生成了有限精度的 Num 而不是 FatRat 类型？原因是：性能。大多数操作都很好，精度损失很少，因此不需要使用更昂贵的 FatRat 类型。如果您希望获得额外的精度，则需要自己实例化一个。\nNum Num 类型提供 双精度浮点十进制数，在其他语言中有时被称为“doubles”。\nNum 字面量的写法是使用字母 e 与指数分割开。请记住，即使指数为零，字母e 也是必需的，否则您将得到一个Rat 有理数字面量：\nsay 42e0.^name; # OUTPUT: «Num» say 42.0.^name; # OUTPUT: «Rat» 区分大小写的单词 Inf 和 NaN 分别表示特殊值 infinity 和 not-a-number。可以使用 U+221E INFINITY（∞）字符代替 Inf：\nRaku 尽可能遵循IEEE 754-2008浮点运算标准，计划在以后的语言版本中实现更多的一致性。该语言保证为任何给定的 Num 字面量选择最接近的可表示数字，并且确实支持负零和非正规（也称为“次正规”）。\n请记住，像 say 或 put 这样的输出例程不会非常难以区分输出数字类型的方式，并且可能选择将Num显示为Int或Rat数字。要获得更明确的输出字符串，请使用perl方法：\nsay 1e0; # OUTPUT: «1» say .5e0; # OUTPUT: «0.5» say 1e0.perl; # OUTPUT: «1e0» say .5e0.perl; # OUTPUT: «0.5e0» Complex 复平面的复数型数值。复数对象包括两个 Num 对象以表示复数的实部和虚部。\n要创建复数，可以在任何其他非复数上使用后缀i运算符，可选择使用加法设置实部。要使用i运算符作用在 NaN 或 Inf 字面量上，请使用反斜杠将其与它们分开。\nsay 42i; # OUTPUT: «0+42i» say 73+42i; # OUTPUT: «73+42i» say 73+Inf\\i; # OUTPUT: «73+Inf\\i» 请记住，上面的语法只是一个附加表达式和优先级规则适用。它也不能用于禁止表达式的地方，例如常规参数中的字面量。\n# Precedence of `*` is higher than that of `+` say 2 * 73+10i; # OUTPUT: «146+10i» 为了避免这些问题，您可以选择使用复数字面量语法，其中包括使用尖括号包围实部和虚部，而不包含任何空格：\nsay 2 * \u0026lt;73+10i\u0026gt;; # OUTPUT: «146+20i» multi how-is-it (\u0026lt;2+4i\u0026gt;) { say \u0026#34;that\u0026#39;s my favorite number!\u0026#34; } multi how-is-it (|) { say \u0026#34;meh\u0026#34; } how-is-it 2+4i; # OUTPUT: «that\u0026#39;s my favorite number!» how-is-it 3+2i; # OUTPUT: «meh» Rational 执行 Rational 角色的类型提供高精度和任意精度的十进制数。由于精度越高，性能损失越大，Rational 类型有两种形式：Rat 和 FatRat。Rat 是最常用的变体, 其在大多数情况下降级成 Num，当它不再能容纳所有的要求精度时。FatRat 是保持增长提供所有所需的精度任意精度的变体。\nRat 最常见的 Rational 类型。它支持有 64 位分母的有理数（在将分数换算到最小分母之后）。Rat 可以直接创建具有较大分母的对象，但是，当具有这样的分母的 Rat 是数学运算的结果时，它们会降级为 Num 对象。\n在许多其他语言中 Rat 字面量使用和 Num 字面量类似的语法，使用点来表示数字是十进制：\nsay .1 + .2 == .3; # OUTPUT: «True» 如果你在许多常用语言中执行与上述类似的语句, 由于浮点数学的精度，您将得到 False 作为答案。要在 Raku 中获得相同的结果，你必须使用 Num 字面量：\nsay .1e0 + .2e0 == .3e0; # OUTPUT: «False» You can also use / division operator with Int or Rat objects to produce a Rat:\n您还可以使用具有 Int 或 Rat 对象的/除法运算符来生成 Rat：\nsay 3/4; # OUTPUT: «0.75» say 3/4.2; # OUTPUT: «0.714286» say 1.1/4.2; # OUTPUT: «0.261905» Keep in mind the above syntax is just a division expression and precedence rules apply. It also cannot be used in places that forbid expressions, such as literals in routine parameters.\n请记住，上面的语法只是一个应用了优先级规则的除法表达式。它也不能用于禁止表达式的地方，例如例程参数中的字面量。\n# Precedence of power operators is higher than division say 3/2²; # OUTPUT: «0.75» 为了避免这些问题，您可以选择使用 Rational 字面量语法，它用尖括号括起分子和分母，不带任何空格：\nsay \u0026lt;3/2\u0026gt;²; # OUTPUT: «2.25» multi how-is-it (\u0026lt;3/2\u0026gt;) { say \u0026#34;that\u0026#39;s my favorite number!\u0026#34; } multi how-is-it (|) { say \u0026#34;meh\u0026#34; } how-is-it 3/2; # OUTPUT: «that\u0026#39;s my favorite number!» how-is-it 1/3; # OUTPUT: «meh» 最后，任何具有 No 属性的表示小数的 Unicode 字符都可以用作Rat 字面量：\nsay ½ + ⅓ + ⅝ + ⅙; # OUTPUT: «1.625» 分解为 Num If a mathematical operation that produces a Rat answer would produce a Rat with denominator larger than 64 bits, that operation would instead return a Num object. When constructing a Rat (i.e. when it is not a result of some mathematical expression), however, a larger denominator can be used:\n如果产生 Rat 答案的数学运算会产生分母大于64位的 Rat，则该操作将返回 Num 对象。当构建一个Rat（即，当它不是一些数学表达式的结果）时，但是，更大的分母可以使用：\nmy $a = 1 / (2⁶⁴ - 1); say $a; # OUTPUT: «0.000000000000000000054» say $a.^name; # OUTPUT: «Rat» say $a.nude; # OUTPUT: «(1 18446744073709551615)» my $b = 1 / 2⁶⁴; say $b; # OUTPUT: «5.421010862427522e-20» say $b.^name; # OUTPUT: «Num» my $c = Rat.new(1, 2⁶⁴); say $c; # OUTPUT: «0.000000000000000000054» say $c.^name; # OUTPUT: «Rat» say $c.nude; # OUTPUT: «(1 18446744073709551616)» say $c.Num; # OUTPUT: «5.421010862427522e-20» FatRat 最后一个 Rational 类型 - FatRat - 保留你所要求的所有精度，将分子和分母存储为两个 Int 对象。FatRat 比 Rat 更具传染性，有这么多的 FatRat 数学运算会产生另一个 FatRat，保留所有可用的精度。当 Rat 退化为 Num 时，使用 FatRat 的数学运算会持续不断：\nsay ((42 + Rat.new(1,2))/999999999999999999).^name; # OUTPUT: «Rat» say ((42 + Rat.new(1,2))/9999999999999999999).^name; # OUTPUT: «Num» say ((42 + FatRat.new(1,2))/999999999999999999).^name; # OUTPUT: «FatRat» say ((42 + FatRat.new(1,2))/99999999999999999999999).^name; # OUTPUT: «FatRat» 没有特殊的运算符或语法可用于构造 FatRat 对象。只需使用 FatRat.new 方法，将分子作为第一个位置参数，将分母作为第二个位置参数。\n如果您的程序需要大量的 FatRat 创建，您可以创建自己的自定义运算符：\nsub infix:\u0026lt;🙼\u0026gt; { FatRat.new: $^a, $^b } say (1🙼3).perl; # OUTPUT: «FatRat.new(1, 3)» 打印 rationals 请记住，像 say 或 put 这样的输出例程不会力图区分数字类型如何输出，并且可能选择将 Num 显示为 Int 或 Rat 数字。要获得更明确的输出字符串，请使用 perl 方法：\nsay 1.0; # OUTPUT: «1» say ⅓; # OUTPUT: «0.333333» say 1.0.perl; # OUTPUT: «1.0» say ⅓.perl; # OUTPUT: «\u0026lt;1/3\u0026gt;» 有关更多信息，您可以选择在 nude 中查看 Rational 对象，显示其分子和分母：\nsay ⅓; # OUTPUT: «0.333333» say 4/2; # OUTPUT: «2» say ⅓.perl; # OUTPUT: «\u0026lt;1/3\u0026gt;» say \u0026lt;4/2\u0026gt;.nude; # OUTPUT: «(2 1)» Division by zero 在许多语言中，除以零立马会抛出一个异常。在 Raku 中，会发生什么取决于你要除的东西以及你如何使用结果。\nRaku 遵循 IEEE 754-2008浮点运算标准，但由于历史原因，6.c 和 6.d 语言版本不完全符合。Num被零除产生 Failure，而复数被零除产生 NaN 部件, 无论分子是什么。\n从 6.e 语言开始，Num 和 Complex 除以零将产生-Inf，+Inf 或 NaN, 这取决于分子分别是负数，正数还是零（对于复数，实部和虚部是 Num 并且被分别考虑）。\nInt 数字的除法产生一个 Rat 对象（或 Num，如果在换算之后分母大于64位，当你除以零时就不是这种情况）。这意味着这种除法永远不会产生异常或失败。结果是零分母有理数，这可能是爆炸性的。\nZero-denominator rationals 零分母 有理数是一个扮演 Rational 角色的数字，它在核心数字中将是 Rat 和 FatRat 对象，其分母为零。这样根据原始分子是否为负，分别为零或正数, 有理数的分子被归一化到-1，0或1。\n可以在不需要实际除法的情况下执行的操作是非爆炸性的。例如，您可以单独检查 nude 中的分子和分母，或执行数学运算，而不会出现任何异常或失败。\n转换零分母有理数到 Num 遵循 IEEE 公约，结果是-Inf，Inf，或 NaN，这取决于分子是否分别是负，正，或零。从另一个方面来看也是如此：转换±Inf/ NaN到其中一个 Rational 类型将产生具有适当分子的零分母有理数：\nsay \u0026lt;1/0\u0026gt;.Num; # OUTPUT: «Inf» say \u0026lt;-1/0\u0026gt;.Num; # OUTPUT: «-Inf» say \u0026lt;0/0\u0026gt;.Num; # OUTPUT: «NaN» say Inf.Rat.nude; # OUTPUT: «(1 0)» 要求非 IEEE 除法的分子和分母的所有其他操作将导致抛出异常 X::Numeric::DivideByZero。最常见的此类操作可能是尝试打印或字符串化零分母有理数：\nsay 0/0; # OUTPUT: # Attempt to divide by zero using div # in block \u0026lt;unit\u0026gt; at -e line 1 同质异形 Allomorphs 是两种类型的子类，可以表现为它们中的任何一种。例如，同质异形 IntStr 是 Int 和 Str 类型的子类，并且将被需要 Int 或 Str 对象的任何类型约束所接受。\n同质异形可以使用尖括号创建，可以单独使用或作为散列键查找的一部分使用; 直接使用方法.new，也由一些结构提供，如 sub MAIN 的参数。\nsay \u0026lt;42\u0026gt;.^name; # OUTPUT: «IntStr» say \u0026lt;42e0\u0026gt;.^name; # OUTPUT: «NumStr» say \u0026lt; 42+42i\u0026gt;.^name; # OUTPUT: «ComplexStr» say \u0026lt; 1/2\u0026gt;.^name; # OUTPUT: «RatStr» say \u0026lt;0.5\u0026gt;.^name; # OUTPUT: «RatStr» @*ARGS = \u0026#34;42\u0026#34;; sub MAIN($x) { say $x.^name } # OUTPUT: «IntStr» say IntStr.new(42, \u0026#34;42\u0026#34;).^name; # OUTPUT: «IntStr» 上面的几个结构在打开角括号之后有一个空格。那个空格不是故意的。通常使用运算符编写的数字，例如1/2（Rat，除法运算符）和1+2i（复数，加法）可以写成不涉及使用运算符的字面值：在尖括号和尖括号里面的字符之间没有任何空格。通过在尖括号中添加空格，我们告诉编译器我们不仅需要 Rat 或 Complex 字面量，而且我们还希望它是一个allomorph：在这种情况下是 RatStr 或 ComplexStr。\n如果数字字面量不使用任何运算符，则将其写入尖括号内，即使不包含任何空格，也会产生同形异形体。（逻辑：如果你不想要同质异形，你就不会使用尖括号。对于使用运算符的数字也是如此，因为某些结构，例如签名字面量，不允许你使用运算符，所以你不能只为这些数字字面量省略尖括号）。\n可用的同质异形 核心语言提供以下同质异形：\nType Allomorph of Example IntStr Int and Str \u0026lt;42\u0026gt; NumStr Num and Str \u0026lt;42e0\u0026gt; ComplexStr Complex and Str \u0026lt; 1+2i\u0026gt; RatStr Rat and Str \u0026lt;1.5\u0026gt; 注意：没有FatRatStr类型。\nCoercion of allomorphs 请记住，同质异形只是它们所代表的两种（或三种）类型的子类。正如变量或参数类型约束为Foo可以接受任何 Foo 子类一样，所以变量或参数类型约束为 Int 的将接受 IntStr 同质异形：\nsub foo(Int $x) { say $x.^name } foo \u0026lt;42\u0026gt;; # OUTPUT: «IntStr» my Num $y = \u0026lt;42e0\u0026gt;; say $y.^name; # OUTPUT: «NumStr» 当然，这也适用于参数coercers：\nsub foo(Int(Cool) $x) { say $x.^name } foo \u0026lt;42\u0026gt;; # OUTPUT: «IntStr» 给定的同质异形已经是 Int 类型的对象，因此在这种情况下它不会转换为“普通的” Int。\n当然，如果没有办法将它们“折叠”到其中一个组件，那么同质异形体的力量将会严重减弱。因此，如果你使用所要强制到的类型的名字显式调用方法，那么您将获得该组件。这同样适用于任何代理方法，例如调用方法.Numeric而不是.Int或使用prefix:\u0026lt;~\u0026gt; 运算符而不是.Str方法调用。\nmy $al := IntStr.new: 42, \u0026#34;forty two\u0026#34;; say $al.Str; # OUTPUT: «forty two» say +$al; # OUTPUT: «42» say \u0026lt;1/99999999999999999999\u0026gt;.Rat.^name; # OUTPUT: «Rat» say \u0026lt;1/99999999999999999999\u0026gt;.FatRat.^name; # OUTPUT: «FatRat» 强制整个同质异形体列表的一种方便方法是将 hyper 运算符应用于适当的前缀：\nsay map *.^name, \u0026lt;42 50e0 100\u0026gt;; # OUTPUT: «(IntStr NumStr IntStr)» say map *.^name, +«\u0026lt;42 50e0 100\u0026gt;; # OUTPUT: «(Int Num Int)» say map *.^name, ~«\u0026lt;42 50e0 100\u0026gt;; # OUTPUT: «(Str Str Str)» Object identity 当我们考虑对象一致性时，上面关于强制同形异形的讨论变得更加重要。一些构造利用它来确定两个对象是否“相同”。而对于人类而言，同质异形42和常规的42可能看起来“相同”，对于那些构造，它们是完全不同的对象：\n# \u0026#34;42\u0026#34; shows up twice in the result: 42 and \u0026lt;42\u0026gt; are different objects: say unique 1, 1, 1, 42, \u0026lt;42\u0026gt;; # OUTPUT: «(1 42 42)» # Use a different operator to `unique` with: say unique :with(\u0026amp;[==]), 1, 1, 1, 42, \u0026lt;42\u0026gt;; # OUTPUT: «(1 42)» # Or coerce the input instead (faster than using a different `unique` operator): say unique :as(*.Int), 1, 1, 1, 42, \u0026lt;42\u0026gt;; # OUTPUT: «(1 42)» say unique +«(1, 1, 1, 42, \u0026lt;42\u0026gt;); # OUTPUT: «(1 42)» # Parameterized Hash with `Any` keys does not stringify them; our key is of type `Int`: my %h{Any} = 42 =\u0026gt; \u0026#34;foo\u0026#34;; # But we use the allomorphic key of type `IntStr`, which is not in the Hash: say %h\u0026lt;42\u0026gt;:exists; # OUTPUT: «False» # Must use curly braces to avoid the allomorph: say %h{42}:exists; # OUTPUT: «True» # We are using a set operator to look up an `Int` object in a list of `IntStr` objects: say 42 ∈ \u0026lt;42 100 200\u0026gt;; # OUTPUT: «False» # Convert it to an allomorph: say \u0026lt;42\u0026gt; ∈ \u0026lt;42 100 200\u0026gt;; # OUTPUT: «True» # Or convert the items in the list to plain `Int` objects: say 42 ∈ +«\u0026lt;42 100 200\u0026gt;; # OUTPUT: «True» 注意这些对象一致性的差异，并根据需要强制你的同形异形体。\n原生数字 顾名思义，原生数字可以访问原生数字 - 即由硬件直接提供的数字。这反过来又提供两个功能：溢出/下溢和更好的性能。\n**注意：**在撰写本文时（2018.05），某些实现（例如 Rakudo）提供了有关原生类型的一些细节，例如 int64 是否可用且在32位计算机上具有64位大小，以及如何检测何时你的程序正在这样的硬件上运行。\n可用的原生数字 Native type Base numeric Size atomicint integer sized to offer CPU-provided atomic operations. (typically 64 bits on 64-bit platforms and 32 bits on 32-bit ones) int integer 64-bits int16 integer 16-bits int32 integer 32-bits int64 integer 64-bits int8 integer 8-bits num floating point 64-bits num32 floating point 32-bits num64 floating point 64-bits uint unsigned integer 64-bits uint16 unsigned integer 16-bits uint32 unsigned integer 32-bits uint64 unsigned integer 64-bits uint8 unsigned integer 8-bits 创建原生数字 要创建原生类型的变量或参数，只需使用其中一个可用数字的名称作为类型约束：\nmy int32 $x = 42; sub foo(num $y) {} class { has int8 $.z } 有时，您可能希望在不创建任何可用变量的情况下将某些值强制转换为原生类型。没有.int或类似的强制方法（方法调用是后期的，所以它们不适合这个目的）。相反，只需使用匿名变量：\nsome-native-taking-sub (my int $ = $y), (my int32 $ = $z) 溢出/下溢 尝试分配不适合特定原生类型的值会产生异常。这包括尝试为原生参数提供过大的参数：\nmy int $x = 2¹⁰⁰; # OUTPUT: # Cannot unbox 101 bit wide bigint into native integer # in block \u0026lt;unit\u0026gt; at -e line 1 sub f(int $x) { $x }; say f 2⁶⁴ # OUTPUT: # Cannot unbox 65 bit wide bigint into native integer # in sub f at -e line 1 # in block \u0026lt;unit\u0026gt; at -e line 1 但是，以这样一种太大/太小的方式修改已存在的值会产生溢出/下溢行为：\nmy int $x = 2⁶³-1; say $x; # OUTPUT: «9223372036854775807» say ++$x; # OUTPUT: «-9223372036854775808» my uint8 $x; say $x; # OUTPUT: «0» say $x -= 100; # OUTPUT: «156» 创建使用原生类型的对象不涉及程序员的直接分配; 这就是为什么这些构造提供溢出/下溢行为而不是抛出异常。\nsay Buf.new(1000, 2000, 3000).List; # OUTPUT: «(232 208 184)» say my uint8 @a = 1000, 2000, 3000; # OUTPUT: «232 208 184» Auto-boxing 虽然它们可以被称为“原生类型 ”，但原生数字实际上并不是具有任何可用方法的类。但是，您可以调用这些数字的非原生版本上可用的任何方法。这是怎么回事？\nmy int8 $x = -42; say $x.abs; # OUTPUT: «42» 此行为称为“自动装箱”。编译器使用所有方法自动将原生类型“装箱”为功能齐全的高级类型。换句话说，int8上面的内容自动转换为Int，然后它是Int类，然后提供被调用的abs方法。\n当您使用原生类型获得性能提升时，此详细信息非常重要。如果您正在使用的代码导致执行大量自动装箱，那么使用原生类型的性能可能会比使用非原生类型时更差：\nmy $a = -42; my int $a-native = -42; { for ^1000_000 { $a.abs }; say now - ENTER now } # OUTPUT: «0.38180862» { for ^1000_000 { $a-native.abs }; say now - ENTER now } # OUTPUT: «0.938720» 如您所见，原生变体的速度慢了两倍多。原因是方法调用需要将原生类型装箱，而非原生变体不需要这样的东西，因此性能损失。\n在这种特殊情况下，我们可以简单地切换到abs的子程序形式，它可以使用原生类型而无需装箱。在其他情况下，您可能需要寻找其他解决方案以避免过多的自动装箱，包括切换到部分代码的非原生类型。\nmy $a = -42; my int $a-native = -42; { for ^1000_000 { abs $a }; say now - ENTER now } # OUTPUT: «0.38229177» { for ^1000_000 { abs $a-native }; say now - ENTER now } # OUTPUT: «0.3088305» 默认值 由于原生类型后面没有类，因此通常没有使用尚未初始化的变量获得的类型对象。因此，原生类型自动初始化为零。在6.c语言，原生的浮点类型（num，num32，和num64）被初始化为值 NaN; 在 6.d 语言中默认为 0e0。\n原生分派 例如，当大小可预测时，可以使原生候选者与非原生候选者一起提供具有原生候选者的更快算法，但是否则回退到较慢的非原生候选者。以下是涉及原生候选人的多重分派的规则。\n首先，原生类型的大小在分派中不起作用，并且int8被认为与int16或int 例如，当大小可预测时，可以使本地候选者与非本地候选者一起提供具有本地候选者的更快算法，但是否则回退到较慢的非本地候选者。以下是涉及本地候选人的多次派遣的规则。\n首先，原生类型的大小在调度中不起作用，并且int8被认为与int16或int 相同：\nmulti foo(int $x) { say \u0026#34;int\u0026#34; } multi foo(int32 $x) { say \u0026#34;int32\u0026#34; } foo my int $x = 42; # OUTPUT: # Ambiguous call to \u0026#39;foo(Int)\u0026#39;; these signatures all match: # :(int $x) # :(int32 $x) 其次，如果例程是一个 only-ie，它不是一个multi非原生类型，而是在调用期间给出一个原生类型，反之亦然，那么参数将被自动装箱或自动取消装箱以使可以被调用。如果给定的参数太大而无法放入native参数，则会抛出异常：\n-\u0026gt; int {}( 42 ); # OK; auto-unboxing -\u0026gt; int {}( 2¹⁰⁰ ); # Too large; exception -\u0026gt; Int {}( 2¹⁰⁰ ); # OK; non-native parameter -\u0026gt; Int {}( my int $ = 42 ); # OK; auto-boxing 当涉及到multi例程时，如果没有可用的原生候选者，则原生参数将始终自动装箱：\nmulti foo (Int $x) { $x } say foo my int $ = 42; # OUTPUT: «42» 另一种方式是不能提供相同的 luxury。如果只有原生候选者可用，则非原生参数将不会被自动取消装箱，而是指示不会抛出匹配的候选者的异常（这种不对称的原因是原生类型总是可以装箱，但是非原生的可能太大而无法融入原生）：\nmulti f(int $x) { $x } my $x = 2; say f $x; # OUTPUT: # Cannot resolve caller f(Int); none of these signatures match: # (int $x) # in block \u0026lt;unit\u0026gt; at -e line 1 但是，如果正在进行调用，其中一个参数是原生类型而另一个是数字字面量，则放弃此规则：\nmulti f(int, int) {} f 42, my int $x; # Successful call 这样，您就不必不断将诸如 $n +\u0026gt; 2 写为 $n +\u0026gt; (my int $ = 2) 了。编译器知道字面量小到足以适合原生类型并将其转换为原生类型。\n原子操作 该语言提供了一些保证以原子方式执行的操作，即安全地由多个线程执行而无需锁定而没有数据争用的风险。\n对于此类操作，需要atomicint原生类型。此类型与普通原生int类似，不同之处在于它的大小使得可以对其执行CPU提供的原子操作。在32位CPU上，它通常是32位大小，而在64位CPU上，它通常是64位大小。\n# !!WRONG!! Might be non-atomic on some systems my int $x; await ^100 .map: { start $x⚛++ }; say $x; # OUTPUT: «98» # RIGHT! The use of `atomicint` type guarantees operation is atomic my atomicint $x; await ^100 .map: { start $x⚛++ }; say $x; # OUTPUT: «100» 相似性int也存在于多重分派中： atomicint，普通的 int和固定大小的int变量都是相同的，并且不能通过多重分派来区分。\nNumeric infectiousness 当一些数学运算中涉及两个不同类型的数字时，数字“传递性”决定了结果类型。如果结果是该类型而不是其他操作数的类型，则认为类型比其他类型更具传递性。例如，Num类型比Int更具传递性，因此我们可以期望42e0 + 42产生Num作为结果。\n传递性如下，首先列出最具传递性的类型\nComplex Num FatRat Rat Int say (2 + 2e0).^name; # Int + Num =\u0026gt; OUTPUT: «Num» say (½ + ½).^name; # Rat + Rat =\u0026gt; OUTPUT: «Rat» say (FatRat.new(1,2) + ½).^name; # FatRat + Rat =\u0026gt; OUTPUT: «FatRat» 同质异形体具有与其数字成分相同的传递性。原生类型获得自动装箱，并具有与其盒装变体相同的传递性。\n"},"name":"数值","published":"2018-11-27T21:13:31+08:00","summary":"Int Int 类型提供任意大小的整数。它们可以像计算机内存允许的那样大，虽然有些实现在被要求生成真正惊人大小的整数时会选择抛出数字溢出错误：\nsay 10**600**600 # OUTPUT: «Numeric overflow» 与某些语言不同，当两个操作数都是 Int 类型时，使用/运算符执行除法将生成小数，而不执行任何舍入。\nsay 4/5; # OUTPUT: «0.8» 这种除法产生的类型是 Rat 或 Num 类型。换算后，如果分数的分母是小于64位，则产生 Rat, 否则产生 Num 类型。\n如果你想落得 Int 的结果，那么 div 和 narrow 例程可能会有帮助，只要有可能。div运算符执行整除，丢弃余数，而narrow 会把数拟合到它适合的最窄类型：\nsay 5 div 2; # OUTPUT: «2» # Result `2` is narrow enough to be an Int: say (4/2).narrow; # OUTPUT: «2» say (4/2).narrow.^name; # OUTPUT: «Int» # But 2.5 has fractional part, so it ends up being a Rat type: say (5/2).","type":"entry","url":"http://localhost:1313/rakulang/52.numerics/"}