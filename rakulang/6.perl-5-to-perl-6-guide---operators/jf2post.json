{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003ch1 id=\"描述httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e描述\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e一个（希望）全面的 Perl 5 运算符列表及其 Raku 等价物，并在必要时记录它们之间的差异。\u003c/p\u003e\n\u003ch1 id=\"注意httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e注意\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e本文档\u003cem\u003e没有\u003c/em\u003e详细解释运算符。本文档旨在指导您从 Perl 5 \u003ccode\u003eperlop\u003c/code\u003e 文档中的操作符过渡到 Raku 中的等效文档。有关 Raku 等效文档的完整文档，请参阅\u003ca href=\"https://docs.raku.org/language/operators\"\u003eRaku文档\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"运算符优先级和关联性httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e运算符优先级和关联性\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e运算符优先级表在 Raku 中与在 Perl 5 中有所不同，因此这里不再详述。如果您需要知道 Raku 中给定运算符的优先级和关联性，请参阅\u003ca href=\"https://docs.raku.org/language/operators#Operator_precedence\"\u003e运算符优先级\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"项和列表运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e项和列表运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003ePerl 5 \u003ccode\u003eperlop\u003c/code\u003e 文档中列出的作为一元运算符和列表运算符的内容在这个章节里往往可以被视为函数，例如 \u003ccode\u003eprint\u003c/code\u003e 和 \u003ccode\u003echdir\u003c/code\u003e。因此，您可以在\u003ca href=\"https://docs.raku.org/language/5to6-perlfunc\"\u003e函数\u003c/a\u003e指南中找到有关它们的信息。括号仍用于分组。有一点需要注意：在 Raku 中，是\u003ccode\u003e,\u003c/code\u003e（逗号）创建列表\u003cstrong\u003e而不是\u003c/strong\u003e圆括号。所以：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@foo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# no parentheses needed \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# also no parentheses \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$scalar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# *not* a list, as there is no comma \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$list\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# a List in a scalar container \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"箭头运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e箭头运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e由于您通常不会在 Raku 中使用引用，因此箭头作为解除引用运算符可能不太有用。但是，如果您确实需要解引用某些内容，则箭头就是点号。它也是方法调用的中的点号。因此，Perl 5 中的 \u003ccode\u003e$arrayref-\u0026gt;[7] \u003c/code\u003e 在 Raku 中变成 \u003ccode\u003e$arrayref.[7]\u003c/code\u003e，类似地, \u003ccode\u003e$user-\u0026gt;name\u003c/code\u003e 变成了 \u003ccode\u003e$user.name\u003c/code\u003e。\u003ccode\u003e=\u0026gt;\u003c/code\u003e 箭头用于构建 Pair 对，参考\u003ca href=\"https://docs.raku.org/language/terms#Pair\"\u003ePair 术语文档\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"自动递增和自动递减httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e自动递增和自动递减\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e和 Perl 5 中工作的一样。一个可能的警告是对于 \u003ccode\u003e++\u003c/code\u003e 它们调用 \u003ccode\u003esucc\u003c/code\u003e 方法, 对于 \u003ccode\u003e--\u003c/code\u003e 他们调用 \u003ccode\u003epred\u003c/code\u003e 方法。对于内置数字类型，这是不太可能做一些不寻常的，但自定义类型可以定义自己的 \u003ccode\u003esucc\u003c/code\u003e 和 \u003ccode\u003epred\u003c/code\u003e 方法，所以在这种情况下，你应该注意的是什么是 \u003ccode\u003e++\u003c/code\u003e 和 \u003ccode\u003e--\u003c/code\u003e \u003cem\u003e真正\u003c/em\u003e能做的。\u003c/p\u003e\n\u003ch2 id=\"指数httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e指数\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e像你期望的那样工作。在 Perl 5 的 perlop 中关于 \u003ccode\u003e**\u003c/code\u003e 绑定比一元减号更紧密的警告（即 \u003ccode\u003e-2 ** 4\u003c/code\u003e 被计算为 \u003ccode\u003e-(2 ** 4)\u003c/code\u003e 而不是 \u003ccode\u003e(-2) ** 4\u003c/code\u003e）也适用于 Raku。\u003c/p\u003e\n\u003ch2 id=\"符号一元运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e符号一元运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e如在 Perl 5 中那样，一元 \u003ccode\u003e!\u003c/code\u003e 和 \u003ccode\u003e-\u003c/code\u003e 进行逻辑和算术否定。\u003ccode\u003e?^\u003c/code\u003e 用于按位逻辑否定，文档指出这相当于 \u003ccode\u003e!\u003c/code\u003e。值得注意的是，这些分别强制他们的参数 为 \u003ccode\u003eBool\u003c/code\u003e 和 \u003ccode\u003eNumeric\u003c/code\u003e 类型。\u003c/p\u003e\n\u003cp\u003e一元 \u003ccode\u003e~\u003c/code\u003e 是 Raku 中的字符串上下文运算符，因此使用前缀 \u003ccode\u003e+^\u003c/code\u003e 进行逐位整数否定。假设两个补码。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e+\u003c/code\u003e \u003cem\u003e确实\u003c/em\u003e在 Raku 中产生作用，强转其参数为数值类型。\u003c/p\u003e\n\u003cp\u003e一元 \u003ccode\u003e\\\u003c/code\u003e 没有了。如果你真的想要对现有的命名变量进行“引用”，你可以使用项上下文，如下所示：\u003ccode\u003e$aref = item(@array)\u003c/code\u003e 或者可以通过更熟悉的前缀 \u003ccode\u003e$\u003c/code\u003e： \u003ccode\u003e$aref = $@array\u003c/code\u003e。请注意，您并没有真正获得引用，而是一个带有引用对象的标量容器。\u003c/p\u003e\n\u003cp\u003e您可以使用 \u003ccode\u003e\u0026amp;\u003c/code\u003e sigil 获取命名子例程的“引用” ：\u003ccode\u003e$sref = \u0026amp;foo\u003c/code\u003e。匿名数组，散列和 sub 创建过程中\u003cstrong\u003e立即\u003c/strong\u003e返回底层对象：\u003ccode\u003e$sref = sub { }\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"绑定运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e绑定运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e=~\u003c/code\u003e 和 \u003ccode\u003e!~\u003c/code\u003e 分别被 \u003ccode\u003e~~\u003c/code\u003e 和 \u003ccode\u003e!~~\u003c/code\u003e 取代。那些认为 Perl 5 中的智能匹配坏掉的人会很高兴听到它在 Raku 中运行得更好，因为更强的坚定意味着更少的猜测。有关\u003ca href=\"https://docs.raku.org/language/operators#index-entry-smartmatch_operator\"\u003esmartmatch\u003c/a\u003e在 Raku 中的工作原理的更详细说明，请参阅\u003ca href=\"https://docs.raku.org/language/operators#index-entry-smartmatch_operator\"\u003esmartmatch 文档\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"乘法运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e乘法运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e二元 \u003ccode\u003e*\u003c/code\u003e，\u003ccode\u003e/\u003c/code\u003e 和 \u003ccode\u003e%\u003c/code\u003e 分别执行乘法，除法和取模运算，和 Perl 5 中一样。\u003c/p\u003e\n\u003cp\u003e二元 \u003ccode\u003ex\u003c/code\u003e 运算符在 Raku 中略有不同，并且他有一个同伴儿。\u003ccode\u003eprint '-' x 80;\u003c/code\u003e 给你一个 80 个破折号的字符串，但是对于 \u003ccode\u003e@ones = (1) x 80;\u003c/code\u003e 给你一个 80 个 “1” 的列表的 Perl 5行为，你会使用 \u003ccode\u003e@ones = 1 xx 80;\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"加法运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e加法运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e二元 \u003ccode\u003e+\u003c/code\u003e 和 \u003ccode\u003e-\u003c/code\u003e 分别进行加法和减法运算，如您所料。\u003c/p\u003e\n\u003cp\u003e由于 \u003ccode\u003e.\u003c/code\u003e 是方法调用运算符，所以二元 \u003ccode\u003e~\u003c/code\u003e 在 Raku 中充当字符串连接运算符。\u003c/p\u003e\n\u003ch2 id=\"shift-operatorshttpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003eShift operators\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e 和 \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e 已被 \u003ccode\u003e+\u0026lt;\u003c/code\u003e 和 \u003ccode\u003e+\u0026gt;\u003c/code\u003e 取代。\u003c/p\u003e\n\u003ch2 id=\"命名一元运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e命名一元运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e如上所述，您可以在\u003ca href=\"https://docs.raku.org/language/5to6-perlfunc\"\u003e函数\u003c/a\u003e指南中找到它们。\u003c/p\u003e\n\u003ch2 id=\"关系运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e关系运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e这些都像 Perl 5 中那样工作。\u003c/p\u003e\n\u003ch2 id=\"相等运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e相等运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e==\u003c/code\u003e 和  \u003ccode\u003e!=\u003c/code\u003e 都像 Perl 5 中那样工作。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;=\u0026gt; \u003c/code\u003e 和 \u003ccode\u003ecmp\u003c/code\u003e 在 Raku 中有不同的行为。\u003ccode\u003e\u0026lt;=\u0026gt; \u003c/code\u003e 做数值比较，但返回 \u003ccode\u003eOrder::Less\u003c/code\u003e、\u003ccode\u003eOrder::Same\u003c/code\u003e 或者 \u003ccode\u003eOrder::More\u003c/code\u003e 而不是Perl 5 中的 \u003ccode\u003e-1\u003c/code\u003e、\u003ccode\u003e0\u003c/code\u003e 或 \u003ccode\u003e1\u003c/code\u003e。要获得 \u003ccode\u003ecmp\u003c/code\u003e 的 Perl 5 行为（使用它返回 \u003ccode\u003eOrder\u003c/code\u003e 对象而不是整数的更改），您应该使用 \u003ccode\u003eleg\u003c/code\u003e 运算符。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ecmp\u003c/code\u003e 要么做 \u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e 要么做 \u003ccode\u003eleg\u003c/code\u003e，这取决于其参数的现有类型。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e~~\u003c/code\u003e 是 Perl 5 中的智能匹配运算符，但它也\u003cem\u003e只是\u003c/em\u003e Raku 中的匹配运算符，如上所述。有关智能匹配在 Raku 中的工作原理，请参阅\u003ca href=\"https://docs.raku.org/language/operators#index-entry-smartmatch_operator\"\u003esmartmatch文档\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"智能匹配运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e智能匹配运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e有关\u003ca href=\"https://docs.raku.org/language/operators#index-entry-smartmatch_operator\"\u003esmartmatch\u003c/a\u003e在 Raku 中的工作原理的更详细说明，请参阅\u003ca href=\"https://docs.raku.org/language/operators#index-entry-smartmatch_operator\"\u003esmartmatch文档\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"bitwise-andhttpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003eBitwise And\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e二元 \u003ccode\u003e\u0026amp;\u003c/code\u003e 在 Raku 中是 \u003ccode\u003e+\u0026amp;\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"bitwise-or-and-exclusive-orhttpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003eBitwise Or and Exclusive Or\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e按位或已经从 Perl 5 中的 \u003ccode\u003e|\u003c/code\u003e 变成 Raku 中的 \u003ccode\u003e+|\u003c/code\u003e。同样地，按位 XOR \u003ccode\u003e^\u003c/code\u003e 变成了 \u003ccode\u003e+^\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"c-style-的逻辑和httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003eC-style 的逻辑和\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e不变。\u003c/p\u003e\n\u003ch2 id=\"c-style-逻辑或httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003eC-style 逻辑或\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e不变。\u003c/p\u003e\n\u003ch2 id=\"logical-defined-orhttpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003eLogical Defined-Or\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e在 Raku 中保持为 \u003ccode\u003e//\u003c/code\u003e。返回第一个有定义的操作数，或者返回最后一个操作数。此外，还有一个低优先级版本，称为 \u003ccode\u003eorelse\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"range-运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003eRange 运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e在列表上下文中，\u003ccode\u003e..\u003c/code\u003e 作为范围运算符运行，不需要更改。也就是说，存在可能有用的排他性范围运算符。这些是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e中缀 \u003ccode\u003e..^\u003c/code\u003e 不包括末端;\u003c/li\u003e\n\u003cli\u003e中缀 \u003ccode\u003e^..\u003c/code\u003e 不包括起点;\u003c/li\u003e\n\u003cli\u003e中缀 ``^..^` 不包括起点和末端;\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e^\u003c/code\u003e 从零开始的前缀，不包括末端。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以下示例显示了所有上述范围运算符的效果（请注意圆括号仅用于允许方法调用）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..^\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# (1 2 3 4) \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e^..\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# (2 3 4 5) \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e^..^\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# (2 3 4) \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# (0 1 2 3 4) \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Perl 5 中，在标量上下文中，运算符 \u003ccode\u003e..\u003c/code\u003e 和 \u003ccode\u003e...\u003c/code\u003e 像触发器(flip-flop)操作符一样，即使它们鲜为人知且可能较少使用。Raku 中的那些运算符分别由\u003ca href=\"https://docs.raku.org/routine/ff\"\u003eff\u003c/a\u003e和\u003ca href=\"https://docs.raku.org/routine/fff\"\u003efff\u003c/a\u003e代替。\u003c/p\u003e\n\u003ch2 id=\"条件运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e条件运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e条件运算符 \u003ccode\u003e?:\u003c/code\u003e 已替换为 \u003ccode\u003e?? !!\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ok\u003c/span\u003e  \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nv\"\u003e$yes\u003c/span\u003e  \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nv\"\u003e$no\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# Perl 5 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ok\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"nv\"\u003e$yes\u003c/span\u003e \u003cspan class=\"o\"\u003e!!\u003c/span\u003e \u003cspan class=\"nv\"\u003e$no\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# Raku \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"赋值运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e赋值运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e虽然没有完整记录，但 S03 表明数学和逻辑赋值运算符应该像您期望的那样工作。一个值得注意的变化是 \u003ccode\u003e.=\u003c/code\u003e 在左侧的对象上调用可变方法（也可以是类型对象）。这允许以下有用的惯用法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eLongClassName\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.frobnicate\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"n\"\u003eLongClassName\u003c/span\u003e \u003cspan class=\"nv\"\u003e$bar\u003c/span\u003e \u003cspan class=\"o\"\u003e.=\u003c/span\u003e \u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s\"\u003efrobnicate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# no need to repeat class name \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这确保了 \u003ccode\u003e$bar\u003c/code\u003e 只能包含一个 \u003ccode\u003eLongClassName\u003c/code\u003e 对象，并且不必重复（并且可能拼写错误）类名。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e~=\u003c/code\u003e 是字符串连接赋值，正如您可能期望的更改 \u003ccode\u003e.\u003c/code\u003e 和 \u003ccode\u003e~\u003c/code\u003e。此外，按位赋值运算符可能不会分为数字和字符串版本（\u003ccode\u003e\u0026amp;=\u003c/code\u003e 等等，相对 \u003ccode\u003e\u0026amp;.=\u003c/code\u003e 等），因为该功能目前在 Perl 5 本身中是实验性的 - 尽管，这并没有具体记录。\u003c/p\u003e\n\u003ch2 id=\"逗号运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e逗号运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e逗号运算符大多按预期工作，但从技术上讲，它创建\u003ca href=\"https://docs.raku.org/type/List\"\u003e列表\u003c/a\u003e）或分隔函数调用中的参数。此外，还有一个 \u003ccode\u003e:\u003c/code\u003e 变体可以将函数调用转换为方法调用 - 请参阅\u003ca href=\"https://docs.raku.org/language/operators#infix_%253A\"\u003e此页面\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e=\u0026gt; \u003c/code\u003e运算符，或\u003cem\u003e胖箭头\u003c/em\u003e，工作方式类似于 Perl 5 的“胖逗号”，因为它允许在其左侧的无引号（普通）标识符，但在 Raku 中它构造 Pair 对象，而不是仅仅作为分隔符发挥作用。如果您试图将一行 Perl 5 代码直接翻译为 Raku，它应该会按预期运行。\u003c/p\u003e\n\u003ch2 id=\"列表运算符-rightwardhttpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e列表运算符 (rightward)\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e与命名一元运算符一样，您可以在\u003ca href=\"https://docs.raku.org/language/5to6-perlfunc\"\u003e函数\u003c/a\u003e下找到这些。\u003c/p\u003e\n\u003ch2 id=\"逻辑非httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e逻辑非\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e!\u003c/code\u003e 的优先级较低版本。对于 \u003ccode\u003e!\u003c/code\u003e，强转其参数为 \u003ccode\u003eBool\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"逻辑和httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e逻辑和\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e如 Perl 5 中的 较低优先级版本的 \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e 一样。\u003c/p\u003e\n\u003ch2 id=\"逻辑或或独占或httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e逻辑或或独占或\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eor\u003c/code\u003e 是低优先级版本的 \u003ccode\u003e||\u003c/code\u003e，并且 \u003ccode\u003exor\u003c/code\u003e 是低优先级版本的 \u003ccode\u003e^^\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e此外，还有一个低优先级版本的 \u003ccode\u003e//\u003c/code\u003e，称为 \u003ccode\u003eorelse\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"引用和引用类似的运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e引用和引用类似的运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e有关引用构造的所有详细信息，请参阅\u003ca href=\"https://docs.raku.org/language/quoting\"\u003e引用\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e有一个引用运算符，允许绝对的文字字符串：\u003ccode\u003eQ\u003c/code\u003e 或者 \u003ccode\u003e｢…｣\u003c/code\u003e，尽管后者可能很难在你的键盘上找到，这取决于你的键盘\u0026hellip;\u0026hellip;反斜杠转义也\u003cem\u003e没有\u003c/em\u003e应用在 \u003ccode\u003eQ\u003c/code\u003e 引用的字符串上。例如 \u003ccode\u003eQ{This is still a closing curly brace → \\}\u003c/code\u003e 合成的是 \u0026ldquo;This is still a closing curly brace → \u0026quot;。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eq\u003c/code\u003e 做你期望的，允许反斜杠转义。例如 \u003ccode\u003eq{This is not a closing curly brace → \\}, but this is → }\u003c/code\u003e 返回 \u0026ldquo;This is not a closing curly brace → }, but this is →\u0026quot;。与 Perl 5 一样，您可以使用单引号获得此行为。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eqq\u003c/code\u003e 允许变量插值。但是，默认情况下，只插入标量变量。要获得其他变量插值，您需要在它们后面放置方括号（所谓的\u003ca href=\"https://docs.raku.org/language/subscripts#index-entry-Zen_slices\"\u003ezen-slice\u003c/a\u003e）以使它们进行插值。例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e1 2 3\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003eqq\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"s2\"\u003e[] example\u003c/span\u003e\u003cspan class=\"nv\"\u003e@example\u003c/span\u003e\u003cspan class=\"s2\"\u003e.com\u003c/span\u003e\u003cspan class=\"p\"\u003e/;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e结果为 “1 2 3 \u003ca href=\"mailto:example@example.com\"\u003eexample@example.com\u003c/a\u003e”。哈希以相同的方式进行插值：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e%a\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e导致空格分隔 Pair 对儿, Tab 将每对中的键与值分开（因为这是 \u003ccode\u003ePair\u003c/code\u003e 的标准字符串化，并且哈希在字符串化时充当 \u003ccode\u003ePair\u003c/code\u003e 的列表）。您还可以使用花括号在字符串中插入 Raku 代码。有关所有详细信息，请参阅\u003ca href=\"https://docs.raku.org/language/quoting#Interpolation%253A_qq\"\u003e插值\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eqw\u003c/code\u003e 像 Perl 5 中那样工作，也可以呈现为 \u003ccode\u003e\u0026lt;...\u0026gt;\u003c/code\u003e。例如 \u003ccode\u003eqw/a b c/\u003c/code\u003e 相当于 \u003ccode\u003e\u0026lt;a b c\u0026gt;\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e还有一个能插值的 \u003ccode\u003eqw\u003c/code\u003e 版本，即 \u003ccode\u003eqqw\u003c/code\u003e。所以：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003eqq\u003c/span\u003e\u003cspan class=\"sa\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"s2\"\u003e b c\u003c/span\u003e\u003cspan class=\"p\"\u003e/;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e给你 “42 b c”。\u003c/p\u003e\n\u003cp\u003eShell 引用可以通过 \u003ccode\u003eqx\u003c/code\u003e 获得，但是你应该注意，反引号不像 Perl 5 那样进行 shell 引用，并且 Perl 变量\u003cem\u003e不\u003c/em\u003e在 \u003ccode\u003eqx\u003c/code\u003e 字符串中进行插值。如果需要在 shell 命令字符串中插入 Perl 变量，则可以改为使用 \u003ccode\u003eqqx\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eRaku 中没有 \u003ccode\u003eqr\u003c/code\u003e 运算符了。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003etr///\u003c/code\u003e 与 Perl 5 中的工作方式类似。需要注意的是范围的指定方式不同。您可以使用“a..z”代替使用范围“a-z”，即使用 Perl 的范围运算符。\u003ccode\u003etr///\u003c/code\u003e 有一个方法版本，记录的更好，称为 \u003ccode\u003e.trans\u003c/code\u003e。\u003ccode\u003e.trans\u003c/code\u003e 使用 Pair 对儿的列表，如下所示：可以在\u003ca href=\"https://design.raku.org/S05.html#Transliteration\"\u003ehttps://design.raku.org/S05.html#Transliteration中\u003c/a\u003e找到更广泛的使用说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etrans\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eC\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e],\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eD\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eQ\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e],\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ez\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eR\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eZ\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e等价的 \u003ccode\u003ey///\u003c/code\u003e 已经废除了。\u003c/p\u003e\n\u003cp\u003e在 Raku 中 \u003ccode\u003e:to\u003c/code\u003e 以不同方式指定了 Heredocs。您可以使用引号运算符，例如，\u003ccode\u003eq:to/END/;\u003c/code\u003e 将以 “END” 开头的 heredoc 结尾。类似地，您可以根据引用运算符进行转义和插值，即带有 \u003ccode\u003eQ\u003c/code\u003e 的文字值, 带有 \u003ccode\u003eq\u003c/code\u003e  的反斜杠转义和带有插值的 \u003ccode\u003eqq\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"io-运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003eI/O 运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e有关 Raku 中输入/输出的完整详细信息，请参阅\u003ca href=\"https://docs.raku.org/language/io\"\u003eio\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e因为 \u003ccode\u003e\u0026lt;...\u0026gt; \u003c/code\u003e 与 Raku 中的 quote-words 构造一样，\u003ccode\u003e\u0026lt;\u0026gt; \u003c/code\u003e 不用于从文件中读取行。您可以通过 \u003ccode\u003eIO\u003c/code\u003e 从文件名创建对象或使用打开的文件句柄然后在任何一种情况下在它身上调用 \u003ccode\u003e.lines\u003c/code\u003e 来实现。或者例如 \u003ccode\u003emy @a = \u0026quot;filename\u0026quot;.IO.lines;\u003c/code\u003e 或 \u003ccode\u003emy $fh = open \u0026quot;filename\u0026quot;, :r;my @a = $fh.lines;\u003c/code\u003e（在后一种情况下，我们使用 \u003ccode\u003e:r\u003c/code\u003e 专门打开用于读取的文件）。要以迭代方式执行此操作，可以用以下方式 使用 \u003ccode\u003efor\u003c/code\u003e 循环：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehuge-csv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elines\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$line\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# Do something with $line \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意那里的 \u003ccode\u003e-\u0026gt;\u003c/code\u003e 用法。这是块语法的一部分，而在 Raku 中要用在 \u003ccode\u003eif\u003c/code\u003e，\u003ccode\u003efor\u003c/code\u003e，\u003ccode\u003ewhile\u003c/code\u003e 等块中。\u003c/p\u003e\n\u003cp\u003e如果你想将整个文件 slurp 为标量，你会惊讶的！- 使用 \u003ccode\u003e.slurp\u003c/code\u003e 方法。例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003efilename\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eslurp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# ... or ... \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$fh\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003efilename\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$fh\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eslurp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如\u003ca href=\"https://docs.raku.org/language/5to6-perlvar\"\u003e特殊变量\u003c/a\u003e指南中所述，\u003ccode\u003eARGV\u003c/code\u003e 魔术输入文件句柄已被替换 \u003ccode\u003e$*ARGFILES\u003c/code\u003e，并且\u003ccode\u003e@ARGV\u003c/code\u003e 命令行参数数组已被替换 \u003ccode\u003e@*ARGS\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"no-opshttpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003eNo-ops\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e1 while foo();\u003c/code\u003e 与 Perl 5 中的工作方式相同，但它会生成警告。在 Raku 中，这个惯用法现在被写成了 \u003ccode\u003eNil while foo();\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"按位字符串运算符httpsdocsrakuorglanguage5to6-perlop___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlop#___top\"\u003e按位字符串运算符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e单独记录在上面了，但总结如下\u0026hellip;\u0026hellip;\u003c/p\u003e\n\u003cp\u003e按位整数否定加上前缀 \u003ccode\u003e+^\u003c/code\u003e。按位布尔否定是 \u003ccode\u003e?^\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e按位与是 \u003ccode\u003e+\u0026amp;\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e按位整数或是 \u003ccode\u003e+|\u003c/code\u003e。按位整数 xor 是中缀 \u003ccode\u003e+^\u003c/code\u003e。按位布尔或是 \u003ccode\u003e?|\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e左移和右移是 \u003ccode\u003e+\u0026lt;\u003c/code\u003e 和 \u003ccode\u003e+\u0026gt;\u003c/code\u003e。\u003c/p\u003e\n","text":"描述 一个（希望）全面的 Perl 5 运算符列表及其 Raku 等价物，并在必要时记录它们之间的差异。\n注意 本文档没有详细解释运算符。本文档旨在指导您从 Perl 5 perlop 文档中的操作符过渡到 Raku 中的等效文档。有关 Raku 等效文档的完整文档，请参阅Raku文档。\n运算符优先级和关联性 运算符优先级表在 Raku 中与在 Perl 5 中有所不同，因此这里不再详述。如果您需要知道 Raku 中给定运算符的优先级和关联性，请参阅运算符优先级。\n项和列表运算符 Perl 5 perlop 文档中列出的作为一元运算符和列表运算符的内容在这个章节里往往可以被视为函数，例如 print 和 chdir。因此，您可以在函数指南中找到有关它们的信息。括号仍用于分组。有一点需要注意：在 Raku 中，是,（逗号）创建列表而不是圆括号。所以：\nmy @foo = 1,2,3,4,5; # no parentheses needed .say for 1,2,3,4,5; # also no parentheses my $scalar = (1); # *not* a list, as there is no comma my $list = (1,); # a List in a scalar container 箭头运算符 由于您通常不会在 Raku 中使用引用，因此箭头作为解除引用运算符可能不太有用。但是，如果您确实需要解引用某些内容，则箭头就是点号。它也是方法调用的中的点号。因此，Perl 5 中的 $arrayref-\u0026gt;[7] 在 Raku 中变成 $arrayref.[7]，类似地, $user-\u0026gt;name 变成了 $user.name。=\u0026gt; 箭头用于构建 Pair 对，参考Pair 术语文档。\n自动递增和自动递减 和 Perl 5 中工作的一样。一个可能的警告是对于 ++ 它们调用 succ 方法, 对于 -- 他们调用 pred 方法。对于内置数字类型，这是不太可能做一些不寻常的，但自定义类型可以定义自己的 succ 和 pred 方法，所以在这种情况下，你应该注意的是什么是 ++ 和 -- 真正能做的。\n指数 像你期望的那样工作。在 Perl 5 的 perlop 中关于 ** 绑定比一元减号更紧密的警告（即 -2 ** 4 被计算为 -(2 ** 4) 而不是 (-2) ** 4）也适用于 Raku。\n符号一元运算符 如在 Perl 5 中那样，一元 ! 和 - 进行逻辑和算术否定。?^ 用于按位逻辑否定，文档指出这相当于 !。值得注意的是，这些分别强制他们的参数 为 Bool 和 Numeric 类型。\n一元 ~ 是 Raku 中的字符串上下文运算符，因此使用前缀 +^ 进行逐位整数否定。假设两个补码。\n+ 确实在 Raku 中产生作用，强转其参数为数值类型。\n一元 \\ 没有了。如果你真的想要对现有的命名变量进行“引用”，你可以使用项上下文，如下所示：$aref = item(@array) 或者可以通过更熟悉的前缀 $： $aref = $@array。请注意，您并没有真正获得引用，而是一个带有引用对象的标量容器。\n您可以使用 \u0026amp; sigil 获取命名子例程的“引用” ：$sref = \u0026amp;foo。匿名数组，散列和 sub 创建过程中立即返回底层对象：$sref = sub { }。\n绑定运算符 =~ 和 !~ 分别被 ~~ 和 !~~ 取代。那些认为 Perl 5 中的智能匹配坏掉的人会很高兴听到它在 Raku 中运行得更好，因为更强的坚定意味着更少的猜测。有关smartmatch在 Raku 中的工作原理的更详细说明，请参阅smartmatch 文档。\n乘法运算符 二元 *，/ 和 % 分别执行乘法，除法和取模运算，和 Perl 5 中一样。\n二元 x 运算符在 Raku 中略有不同，并且他有一个同伴儿。print '-' x 80; 给你一个 80 个破折号的字符串，但是对于 @ones = (1) x 80; 给你一个 80 个 “1” 的列表的 Perl 5行为，你会使用 @ones = 1 xx 80;。\n加法运算符 二元 + 和 - 分别进行加法和减法运算，如您所料。\n由于 . 是方法调用运算符，所以二元 ~ 在 Raku 中充当字符串连接运算符。\nShift operators \u0026lt;\u0026lt; 和 \u0026gt;\u0026gt; 已被 +\u0026lt; 和 +\u0026gt; 取代。\n命名一元运算符 如上所述，您可以在函数指南中找到它们。\n关系运算符 这些都像 Perl 5 中那样工作。\n相等运算符 == 和 != 都像 Perl 5 中那样工作。\n\u0026lt;=\u0026gt; 和 cmp 在 Raku 中有不同的行为。\u0026lt;=\u0026gt; 做数值比较，但返回 Order::Less、Order::Same 或者 Order::More 而不是Perl 5 中的 -1、0 或 1。要获得 cmp 的 Perl 5 行为（使用它返回 Order 对象而不是整数的更改），您应该使用 leg 运算符。\ncmp 要么做 \u0026lt;=\u0026gt; 要么做 leg，这取决于其参数的现有类型。\n~~ 是 Perl 5 中的智能匹配运算符，但它也只是 Raku 中的匹配运算符，如上所述。有关智能匹配在 Raku 中的工作原理，请参阅smartmatch文档。\n智能匹配运算符 有关smartmatch在 Raku 中的工作原理的更详细说明，请参阅smartmatch文档。\nBitwise And 二元 \u0026amp; 在 Raku 中是 +\u0026amp;。\nBitwise Or and Exclusive Or 按位或已经从 Perl 5 中的 | 变成 Raku 中的 +|。同样地，按位 XOR ^ 变成了 +^。\nC-style 的逻辑和 不变。\nC-style 逻辑或 不变。\nLogical Defined-Or 在 Raku 中保持为 //。返回第一个有定义的操作数，或者返回最后一个操作数。此外，还有一个低优先级版本，称为 orelse。\nRange 运算符 在列表上下文中，.. 作为范围运算符运行，不需要更改。也就是说，存在可能有用的排他性范围运算符。这些是：\n中缀 ..^ 不包括末端; 中缀 ^.. 不包括起点; 中缀 ``^..^` 不包括起点和末端; ^ 从零开始的前缀，不包括末端。 以下示例显示了所有上述范围运算符的效果（请注意圆括号仅用于允许方法调用）：\n(1..^5).list; # (1 2 3 4) (1^..5).list; # (2 3 4 5) (1^..^5).list; # (2 3 4) (^5).list; # (0 1 2 3 4) 在 Perl 5 中，在标量上下文中，运算符 .. 和 ... 像触发器(flip-flop)操作符一样，即使它们鲜为人知且可能较少使用。Raku 中的那些运算符分别由ff和fff代替。\n条件运算符 条件运算符 ?: 已替换为 ?? !!:\n$x = $ok ? $yes : $no; # Perl 5 $x = $ok ?? $yes !! $no; # Raku 赋值运算符 虽然没有完整记录，但 S03 表明数学和逻辑赋值运算符应该像您期望的那样工作。一个值得注意的变化是 .= 在左侧的对象上调用可变方法（也可以是类型对象）。这允许以下有用的惯用法：\nclass LongClassName { has $.frobnicate; } my LongClassName $bar .= new( frobnicate =\u0026gt; 42 ); # no need to repeat class name 这确保了 $bar 只能包含一个 LongClassName 对象，并且不必重复（并且可能拼写错误）类名。\n~= 是字符串连接赋值，正如您可能期望的更改 . 和 ~。此外，按位赋值运算符可能不会分为数字和字符串版本（\u0026amp;= 等等，相对 \u0026amp;.= 等），因为该功能目前在 Perl 5 本身中是实验性的 - 尽管，这并没有具体记录。\n逗号运算符 逗号运算符大多按预期工作，但从技术上讲，它创建列表）或分隔函数调用中的参数。此外，还有一个 : 变体可以将函数调用转换为方法调用 - 请参阅此页面。\n=\u0026gt; 运算符，或胖箭头，工作方式类似于 Perl 5 的“胖逗号”，因为它允许在其左侧的无引号（普通）标识符，但在 Raku 中它构造 Pair 对象，而不是仅仅作为分隔符发挥作用。如果您试图将一行 Perl 5 代码直接翻译为 Raku，它应该会按预期运行。\n列表运算符 (rightward) 与命名一元运算符一样，您可以在函数下找到这些。\n逻辑非 ! 的优先级较低版本。对于 !，强转其参数为 Bool。\n逻辑和 如 Perl 5 中的 较低优先级版本的 \u0026amp;\u0026amp; 一样。\n逻辑或或独占或 or 是低优先级版本的 ||，并且 xor 是低优先级版本的 ^^。\n此外，还有一个低优先级版本的 //，称为 orelse。\n引用和引用类似的运算符 有关引用构造的所有详细信息，请参阅引用。\n有一个引用运算符，允许绝对的文字字符串：Q 或者 ｢…｣，尽管后者可能很难在你的键盘上找到，这取决于你的键盘\u0026hellip;\u0026hellip;反斜杠转义也没有应用在 Q 引用的字符串上。例如 Q{This is still a closing curly brace → \\} 合成的是 \u0026ldquo;This is still a closing curly brace → \u0026quot;。\nq 做你期望的，允许反斜杠转义。例如 q{This is not a closing curly brace → \\}, but this is → } 返回 \u0026ldquo;This is not a closing curly brace → }, but this is →\u0026quot;。与 Perl 5 一样，您可以使用单引号获得此行为。\nqq 允许变量插值。但是，默认情况下，只插入标量变量。要获得其他变量插值，您需要在它们后面放置方括号（所谓的zen-slice）以使它们进行插值。例如：\nmy @a = \u0026lt;1 2 3\u0026gt;; say qq/@a[] example@example.com/; 结果为 “1 2 3 example@example.com”。哈希以相同的方式进行插值：\nmy %a = 1 =\u0026gt; 2, 3 =\u0026gt; 4; say \u0026#34;%a{}\u0026#34;; 导致空格分隔 Pair 对儿, Tab 将每对中的键与值分开（因为这是 Pair 的标准字符串化，并且哈希在字符串化时充当 Pair 的列表）。您还可以使用花括号在字符串中插入 Raku 代码。有关所有详细信息，请参阅插值。\nqw 像 Perl 5 中那样工作，也可以呈现为 \u0026lt;...\u0026gt;。例如 qw/a b c/ 相当于 \u0026lt;a b c\u0026gt;。\n还有一个能插值的 qw 版本，即 qqw。所以：\nmy $a = 42; say qqw/$a b c/; 给你 “42 b c”。\nShell 引用可以通过 qx 获得，但是你应该注意，反引号不像 Perl 5 那样进行 shell 引用，并且 Perl 变量不在 qx 字符串中进行插值。如果需要在 shell 命令字符串中插入 Perl 变量，则可以改为使用 qqx。\nRaku 中没有 qr 运算符了。\ntr/// 与 Perl 5 中的工作方式类似。需要注意的是范围的指定方式不同。您可以使用“a..z”代替使用范围“a-z”，即使用 Perl 的范围运算符。tr/// 有一个方法版本，记录的更好，称为 .trans。.trans 使用 Pair 对儿的列表，如下所示：可以在https://design.raku.org/S05.html#Transliteration中找到更广泛的使用说明。\n$x.trans( [\u0026#39;a\u0026#39;..\u0026#39;c\u0026#39;] =\u0026gt; [\u0026#39;A\u0026#39;..\u0026#39;C\u0026#39;], [\u0026#39;d\u0026#39;..\u0026#39;q\u0026#39;] =\u0026gt; [\u0026#39;D\u0026#39;..\u0026#39;Q\u0026#39;], [\u0026#39;r\u0026#39;..\u0026#39;z\u0026#39;] =\u0026gt; [\u0026#39;R\u0026#39;..\u0026#39;Z\u0026#39;] ); 等价的 y/// 已经废除了。\n在 Raku 中 :to 以不同方式指定了 Heredocs。您可以使用引号运算符，例如，q:to/END/; 将以 “END” 开头的 heredoc 结尾。类似地，您可以根据引用运算符进行转义和插值，即带有 Q 的文字值, 带有 q 的反斜杠转义和带有插值的 qq。\nI/O 运算符 有关 Raku 中输入/输出的完整详细信息，请参阅io。\n因为 \u0026lt;...\u0026gt; 与 Raku 中的 quote-words 构造一样，\u0026lt;\u0026gt; 不用于从文件中读取行。您可以通过 IO 从文件名创建对象或使用打开的文件句柄然后在任何一种情况下在它身上调用 .lines 来实现。或者例如 my @a = \u0026quot;filename\u0026quot;.IO.lines; 或 my $fh = open \u0026quot;filename\u0026quot;, :r;my @a = $fh.lines;（在后一种情况下，我们使用 :r 专门打开用于读取的文件）。要以迭代方式执行此操作，可以用以下方式 使用 for 循环：\nfor \u0026#39;huge-csv\u0026#39;.IO.lines -\u0026gt; $line { # Do something with $line } 注意那里的 -\u0026gt; 用法。这是块语法的一部分，而在 Raku 中要用在 if，for，while 等块中。\n如果你想将整个文件 slurp 为标量，你会惊讶的！- 使用 .slurp 方法。例如：\nmy $x = \u0026#34;filename\u0026#34;.IO.slurp; # ... or ... my $fh = open \u0026#34;filename\u0026#34;, :r; my $x = $fh.slurp; 如特殊变量指南中所述，ARGV 魔术输入文件句柄已被替换 $*ARGFILES，并且@ARGV 命令行参数数组已被替换 @*ARGS。\nNo-ops 1 while foo(); 与 Perl 5 中的工作方式相同，但它会生成警告。在 Raku 中，这个惯用法现在被写成了 Nil while foo();。\n按位字符串运算符 单独记录在上面了，但总结如下\u0026hellip;\u0026hellip;\n按位整数否定加上前缀 +^。按位布尔否定是 ?^。\n按位与是 +\u0026amp;。\n按位整数或是 +|。按位整数 xor 是中缀 +^。按位布尔或是 ?|。\n左移和右移是 +\u0026lt; 和 +\u0026gt;。\n"},"name":"Perl 5 到 Raku 指南 - 运算符","published":"2018-10-13T21:13:31+08:00","summary":"描述 一个（希望）全面的 Perl 5 运算符列表及其 Raku 等价物，并在必要时记录它们之间的差异。\n注意 本文档没有详细解释运算符。本文档旨在指导您从 Perl 5 perlop 文档中的操作符过渡到 Raku 中的等效文档。有关 Raku 等效文档的完整文档，请参阅Raku文档。\n运算符优先级和关联性 运算符优先级表在 Raku 中与在 Perl 5 中有所不同，因此这里不再详述。如果您需要知道 Raku 中给定运算符的优先级和关联性，请参阅运算符优先级。\n项和列表运算符 Perl 5 perlop 文档中列出的作为一元运算符和列表运算符的内容在这个章节里往往可以被视为函数，例如 print 和 chdir。因此，您可以在函数指南中找到有关它们的信息。括号仍用于分组。有一点需要注意：在 Raku 中，是,（逗号）创建列表而不是圆括号。所以：\nmy @foo = 1,2,3,4,5; # no parentheses needed .say for 1,2,3,4,5; # also no parentheses my $scalar = (1); # *not* a list, as there is no comma my $list = (1,); # a List in a scalar container 箭头运算符 由于您通常不会在 Raku 中使用引用，因此箭头作为解除引用运算符可能不太有用。但是，如果您确实需要解引用某些内容，则箭头就是点号。它也是方法调用的中的点号。因此，Perl 5 中的 $arrayref-\u0026gt;[7] 在 Raku 中变成 $arrayref.","type":"entry","url":"http://localhost:1313/rakulang/6.perl-5-to-perl-6-guide---operators/"}