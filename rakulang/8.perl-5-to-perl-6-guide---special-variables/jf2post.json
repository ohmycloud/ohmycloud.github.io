{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003ch2 id=\"描述\"\u003e描述\u003c/h2\u003e\n\u003cp\u003e一个（希望）全面的 Perl 5 特殊变量列表及其 Raku 等价物，并在必要时记录它们之间的变化。\u003c/p\u003e\n\u003ch2 id=\"注意\"\u003e注意\u003c/h2\u003e\n\u003cp\u003e本文档试图引导读者从 Perl 5 中的特殊变量到 Raku 中的等效变量。有关 Raku 特殊变量的完整文档，请参阅每个变量的 Raku 文档。\u003c/p\u003e\n\u003ch2 id=\"特殊变量\"\u003e特殊变量\u003c/h2\u003e\n\u003ch3 id=\"通用变量\"\u003e通用变量\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e$ARG\u003c/li\u003e\n\u003cli\u003e$_\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e值得庆幸的是， \u003ccode\u003e$_\u003c/code\u003e 是 Perl 5 中的常规默认变量。Raku 的主要区别在于现在你可以在它身上调用方法。 例如，Perl 5 的 \u003ccode\u003esay $_\u003c/code\u003e 可以在 Raku 中以 \u003ccode\u003e$_.say\u003c/code\u003e 表示。 此外，因为它是默认变量，您甚至不需要使用变量名称。 前面的例子也可以 通过使用 \u003ccode\u003e.say\u003c/code\u003e 实现。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@ARG\u003c/li\u003e\n\u003cli\u003e@_\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e由于 Raku 现在具有函数签名，您的参数可以去那里，而不是依赖于 \u003ccode\u003e@_\u003c/code\u003e。 事实上，如果你使用函数签名，使用 \u003ccode\u003e@_\u003c/code\u003e 会吐出你告诉它不能覆盖一个现有签名。\u003c/p\u003e\n\u003cp\u003e但是，如果您不使用函数签名，则 \u003ccode\u003e@_\u003c/code\u003e 将包含您传递给函数的参数, 就像它在Perl 5中那样。再次，与 \u003ccode\u003e$_\u003c/code\u003e 一样 ，您可以在其上调用方法。 与 \u003ccode\u003e$_\u003c/code\u003e 不同，你不能假设 \u003ccode\u003e@_\u003c/code\u003e 为 这些方法的默认变量（即 \u003ccode\u003e@_.shift\u003c/code\u003e works， \u003ccode\u003e.shift\u003c/code\u003e 不 work）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$LIST_SEPARATOR\u003c/li\u003e\n\u003cli\u003e$\u0026quot;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e目前，Raku 中没有与 List Separator 变量等效的设计文档 S28 在那里说 不是一个，所以你可能不想屏住呼吸。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$PROCESS_ID\u003c/li\u003e\n\u003cli\u003e$PID\u003c/li\u003e\n\u003cli\u003e$$\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 Raku 中用 \u003ccode\u003e$*PID\u003c/code\u003e 替换 \u003ccode\u003e$$\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$PROGRAM_NAME\u003c/li\u003e\n\u003cli\u003e$0\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e您可以通过 \u003ccode\u003e$*PROGRAM-NAME\u003c/code\u003e 访问 Raku 中的程序名称 。 注意： Raku 中的 \u003ccode\u003e$0\u003c/code\u003e 是保持正则表达式匹配中第一个捕获值的变量（即捕获变量现在从 \u003ccode\u003e$0\u003c/code\u003e 而不是 \u003ccode\u003e$1\u003c/code\u003e 开始 )。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$REAL_GROUP_ID\u003c/li\u003e\n\u003cli\u003e$GID\u003c/li\u003e\n\u003cli\u003e$(\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 Raku 中，组信息由 \u003ccode\u003e$*GROUP\u003c/code\u003e 处理 ，它包含一个 IntStr 类型的对象  因此 可以在字符串或数字上下文中使用。 因此，组ID通过 \u003ccode\u003e+$*GROUP\u003c/code\u003e 获得 ， 而组名通过 \u003ccode\u003e~$*GROUP\u003c/code\u003e 获得 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$EFFECTIVE_GROUP_ID\u003c/li\u003e\n\u003cli\u003e$EGID\u003c/li\u003e\n\u003cli\u003e$)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRaku目前似乎没有提供有效的组ID。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$REAL_USER_ID\u003c/li\u003e\n\u003cli\u003e$UID\u003c/li\u003e\n\u003cli\u003e$\u0026lt;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 Raku 中，用户信息由 \u003ccode\u003e$*USER\u003c/code\u003e处理 ，后者持有 IntStr 类型的对象，因此可以 可以在字符串或数字上下文中使用（这类似于处理组信息的方式） 由 \u003ccode\u003e$*GROUP\u003c/code\u003e 对象）。 因此，用户ID通过 \u003ccode\u003e+$*USER\u003c/code\u003e 获得 ，而用户名通过 \u003ccode\u003e~$*USER\u003c/code\u003e 获得 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$EFFECTIVE_USER_ID\u003c/li\u003e\n\u003cli\u003e$EUID\u003c/li\u003e\n\u003cli\u003e$\u0026gt;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRaku当前似乎没有提供有效的用户ID。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$SUBSCRIPT_SEPARATOR\u003c/li\u003e\n\u003cli\u003e$SUBSEP\u003c/li\u003e\n\u003cli\u003e$;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRaku中不包含下标分隔符变量。坦率地说，如果你的Perl 5代码正在使用它，那就是 几乎可以肯定，真的很老。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$a\u003c/li\u003e\n\u003cli\u003e$b\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003e$a\u003c/code\u003e 和 \u003ccode\u003e$b\u003c/code\u003e 在 Raku 中没有特殊含义 \u003ccode\u003e.sort()\u003c/code\u003e 不会将它们用于任何特殊的东西。 他们只是常规的旧变量。 通过使用具有更多功能的占位符参数的块来扩展此功能。 占位符变量是使用 \u003ccode\u003e^twigil\u003c/code\u003e 创建的 （例如 \u003ccode\u003e$^z\u003c/code\u003e 。它们可以在裸块中使用或在没有显式参数列表的子程序。 块的参数将分配给占位符 Unicode 顺序中的变量。 I. e。 即使变量出现在块中的顺序 （\u003ccode\u003e$^q\u003c/code\u003e, \u003ccode\u003e$^z\u003c/code\u003e, \u003ccode\u003e$^a\u003c/code\u003e） ，它们将按顺序分配 （\u003ccode\u003e$^a\u003c/code\u003e, \u003ccode\u003e$^q\u003c/code\u003e, \u003ccode\u003e$^z\u003c/code\u003e） 。 人机工程学：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$^a\u003c/span\u003e \u003cspan class=\"ow\"\u003ecmp\u003c/span\u003e \u003cspan class=\"nv\"\u003e$^z\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: «(1 2 3 4 5 6)␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$^g\u003c/span\u003e \u003cspan class=\"ow\"\u003ecmp\u003c/span\u003e \u003cspan class=\"nv\"\u003e$^a\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: «(6 5 4 3 2 1)␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$^c\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$^a\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$^b\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003elast\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: «312␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e有关占位符变量的更多信息，请参阅\u003ca href=\"https://docs.raku.org/language/variables#The_%5E_Twigil\"\u003e此页面\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e%ENV\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e％ENV已被Raku中的％*ENV取代。请注意，此哈希的键可能不完全是 在Perl 5和Raku之间相同。例如， Raku的％ENV中缺少OLDPWD 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$OLD_PERL_VERSION\u003c/li\u003e\n\u003cli\u003e$]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRaku 的运行版本由 \u003ccode\u003e$*PERL\u003c/code\u003e 特殊变量保存，即一个对象。 正在运行的版本是 通过 \u003ccode\u003e$*PERL.version\u003c/code\u003e 检索 ，返回类似 \u003ccode\u003ev6.c\u003c/code\u003e 的内容 ; Perl 的完整字符串化版本解释器是通过 \u003ccode\u003e~$*PERL\u003c/code\u003e 获得的 ，它返回类似于 Raku（6.c）的内容 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$SYSTEM_FD_MAX\u003c/li\u003e\n\u003cli\u003e$^F\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e虽然设计文件（S28）表明这可能会变成 \u003ccode\u003e$*SYS_FD_MAX\u003c/code\u003e ，但这还没有b被实现。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@F\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e[需要进一步研究]此时有点混乱。 设计文档S28表示 @F in Perl 5在Raku中被 @_ 取代 ，但目前还不清楚它是如何工作的。 另一方面，它是目前的 有点问题，因为 Perl 5 to Raku Translation doc 指出 \u003ccode\u003e-a\u003c/code\u003e 和 \u003ccode\u003e-F\u003c/code\u003e 命令 - rakudo 尚未实现行开关。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@INC\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRaku 中不再存在。请使用“use lib”来操作要搜索的模块存储库。 该 最接近 \u003ccode\u003e@INC\u003c/code\u003e 的是 \u003ccode\u003e$*REPO\u003c/code\u003e。 但这与@INC完全不同 因为 Raku 的预编译功能。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Print out a list of compunit repositories \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"vg\"\u003e$*REPO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003erepo-chain\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e%INC\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRaku 中不再存在。因为每个 Repository 都负责记住哪些模块已经装好了。 您可以获得所有已加载模块（编译单元）的列表，如下所示：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"kt\"\u003eTest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eMyModule\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003eflat\u003c/span\u003e \u003cspan class=\"vg\"\u003e$*REPO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003erepo-chain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"nb\"\u003eloaded\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e#-\u0026gt; (MyModule Test) \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e$INPLACE_EDIT\u003c/li\u003e\n\u003cli\u003e$^I\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eS28 建议使用 \u003ccode\u003e$*INPLACE_EDIT\u003c/code\u003e，但它尚不存在。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$^M\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eS28 建议使用 \u003ccode\u003e$*EMERGENCY_MEMORY\u003c/code\u003e，但它尚不存在。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$OSNAME\u003c/li\u003e\n\u003cli\u003e$^o\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这有点不清楚。 它可能取决于你的意思是“操作系统的名称” 作为设计文档 \u003ca href=\"https://design.raku.org/S28.html\"\u003eS28\u003c/a\u003e 有三个不同的建议，所有建议都给出了不同的答案。\u003c/p\u003e\n\u003cp\u003e目前有三个主要对象包含有关“运行环境”的信息：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$*KERNEL\u003c/code\u003e 提供有关正在运行的操作系统内核的信息;\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$*DISTRO\u003c/code\u003e 提供有关操作系统分发的信息;\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$*VM\u003c/code\u003e 提供有关 Raku 的运行后端机器的信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以上所有对象都有共同的方法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eversion\u003c/code\u003e 提供该组件的版本号;\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ename\u003c/code\u003e 提供该组件的助记符名称;\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eauth\u003c/code\u003e 为该组件提供已知作者。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e作为一个简短示例，以下代码打印有关上述所有组件的信息：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"vg\"\u003e$*KERNEL\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"vg\"\u003e$*DISTRO\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"vg\"\u003e$*VM\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$what\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$what\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eversion \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e  \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nv\"\u003e$what\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eversion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e named \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nv\"\u003e$what\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e by \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nv\"\u003e$what\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eauth\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Kernel \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# version 4.10.0.42.generic named linux by unknown \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Distro \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# version 17.04.Zesty.Zapus named ubuntu by https://www.ubuntu.com/ \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# VM \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# version 2017.11 named moar by The MoarVM Team \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面所有的 \u003ccode\u003eStr\u003c/code\u003e 方法产生了当前时间的信息的短版本名字 。\u003c/p\u003e\n\u003cp\u003e所有对象都有其他方法，在尝试识别正确运行的实例时非常有用， 有关更多信息，请使用 \u003ccode\u003e\u0026lt;.^methods\u0026gt;\u003c/code\u003e 来内省以上所有内容。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e%SIG\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e没有等效变量。 要在接收信号时执行代码，您可以调用 \u003ca href=\"https://docs.raku.org/routine/signal#%28Supply%29_sub_signal\"\u003esignal\u003c/a\u003e 子程序，返回可以点击的 \u003ccode\u003eSupply\u003c/code\u003e 。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$SIG\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eINT\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ebye\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esignal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etap\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ebye\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"k\"\u003eloop\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者，如果您有一个通用代码，想知道它得到了哪个信号：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esignal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etap\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$signal\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ebye with \u003c/span\u003e\u003cspan class=\"nv\"\u003e$signal\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"k\"\u003eloop\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在事件驱动的情况下使用信号的更惯用的方式：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereact\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhenever\u003c/span\u003e \u003cspan class=\"nb\"\u003esignal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003egoodbye\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e$BASETIME\u003c/li\u003e\n\u003cli\u003e$^T\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 Raku 中用 \u003ccode\u003e$*INIT-INSTANT\u003c/code\u003e 替换 。 与 Perl 5 不同，这不是自纪元以来的秒数，而是一个 \u003ca href=\"https://docs.raku.org/type/Instant\"\u003eInstant\u003c/a\u003e 对象，以原子秒计，带有分数。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$PERL_VERSION\u003c/li\u003e\n\u003cli\u003e$^V\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e与 \u003ccode\u003e$]\u003c/code\u003e 一样，这已被 \u003ccode\u003e$*PERL.version\u003c/code\u003e 取代。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e${^WIN32_SLOPPY_STAT}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 Raku 中没有类似的东西。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$EXECUTABLE_NAME\u003c/li\u003e\n\u003cli\u003e$^X\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这已被 \u003ccode\u003e$*EXECUTABLE-NAME\u003c/code\u003e 取代 。 请注意，还有 \u003ccode\u003e$*EXECUTABLE\u003c/code\u003e ，这在 Raku 中是一个 \u003ccode\u003eIO\u003c/code\u003e 对象。\u003c/p\u003e\n\u003ch3 id=\"与正则表达式相关的变量\"\u003e与正则表达式相关的变量\u003c/h3\u003e\n\u003ch4 id=\"性能问题\"\u003e性能问题\u003c/h4\u003e\n\u003cp\u003e如下所示，  \u003ccode\u003e$``, \u003c/code\u003e$\u0026amp;\u003ccode\u003e和\u003c/code\u003e$\u0026rsquo;\u003ccode\u003e从 Raku 中删除了，主要由\u003c/code\u003e$/` 和它的变体代替， 消除它们，Perl 5 中的相关性能问题不适用。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$\u0026lt;digits\u0026gt; ($1, $2, ...)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRaku 中的这些现有变量与 Perl 5 中的相同，除了它们现在从 \u003ccode\u003e$0\u003c/code\u003e 开始而不是 \u003ccode\u003e$1\u003c/code\u003e。 此外，它们是匹配变量 \u003ccode\u003e$/\u003c/code\u003e 中索引项的同义词。 例如  \u003ccode\u003e$0\u003c/code\u003e 相当于 \u003ccode\u003e$/[0]， \u003c/code\u003e$1\u003ccode\u003e相当于\u003c/code\u003e$/[1]`等。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$MATCH\u003c/li\u003e\n\u003cli\u003e$＆\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003e$/\u003c/code\u003e 现在包含\u003ca href=\"https://docs.raku.org/type/Match\"\u003e匹配\u003c/a\u003e对象，因此 \u003ccode\u003e$＆\u003c/code\u003e 的 Perl 5 行为可以通过字符串化来获得，即 \u003ccode\u003e~$/\u003c/code\u003e 。 请注意，虽然 \u003ccode\u003e$/.Str\u003c/code\u003e 也可以工作， 但 \u003ccode\u003e~$/\u003c/code\u003e 目前是更常见的用法。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e${^MATCH}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e由于以前的性能问题已经废除，因此 Raku 中没有使用此变量。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$PREMATCH\u003c/li\u003e\n\u003cli\u003e$`\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e替换为 \u003ccode\u003e$/.prematch\u003c/code\u003e 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e${^PREMATCH}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e由于以前的性能问题已经废除，因此 Raku 中没有使用此变量。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$POSTMATCH\u003c/li\u003e\n\u003cli\u003e$'\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e替换为 \u003ccode\u003e$/.postmatch\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e${^POSTMATCH}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e由于以前的性能问题已经废除，因此 Raku 中没有使用此变量。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$LAST_PAREN_MATCH\u003c/li\u003e\n\u003cli\u003e$+\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 Raku 中不存在，但你可以使用 \u003ccode\u003e$/[*-1].Str\u003c/code\u003e 获得相同的信息。(\u003ccode\u003e$/[*-1]\u003c/code\u003e 将是匹配对象，而不是实际的字符串)。\u003c/p\u003e\n\u003cp\u003e如果您想了解其工作原理，可以查看以下文档：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.raku.org/routine/%5B%20%5D#language_documentation_Operators\"\u003e[]routine\u003c/a\u003e 例程\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.raku.org/type/Whatever\"\u003eWhatever\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e可能\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://design.raku.org/S02.html#line_1126\"\u003ehttps://design.raku.org/S02.html#line_1126\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e虽然设计文件并不总是最新的。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$LAST_SUBMATCH_RESULT\u003c/li\u003e\n\u003cli\u003e$^N\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eS28 建议 \u003ccode\u003e$*MOST_RECENT_CAPTURED_MATCH\u003c/code\u003e ，但似乎没有任何实现的变量匹配 \u003ccode\u003e$^N\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@LAST_MATCH_END\u003c/li\u003e\n\u003cli\u003e@+\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e与大多数正则表达式相关的变量一样，此功能至少部分地移至 Raku 中的 \u003ccode\u003e$/\u003c/code\u003e  变量。或者，在这种情况下，编号变量是索引的别名。 偏移是通过使用 \u003ccode\u003e.to\u003c/code\u003e 方法找到。 例如, 第一个偏移是 \u003ccode\u003e$/[0].to\u003c/code\u003e ，它与 \u003ccode\u003e$0.to\u003c/code\u003e 同义。 Perl 5 提供的 \u003ccode\u003e$+[0]\u003c/code\u003e  由 \u003ccode\u003e$/.to\u003c/code\u003e 提供。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e%LAST_PAREN_MATCH\u003c/li\u003e\n\u003cli\u003e%+\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e再一次，我们转移到 \u003ccode\u003e$/\u003c/code\u003e。 前面的 \u003ccode\u003e$+{$match}\u003c/code\u003e 是 \u003ccode\u003e$/{$match}\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@LAST_MATCH_START\u003c/li\u003e\n\u003cli\u003e@-\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e类似于使用 \u003ccode\u003e.to\u003c/code\u003e 方法替换 \u003ccode\u003e@+\u003c/code\u003e ，使用 \u003ccode\u003e$/\u003c/code\u003e 上的 \u003ccode\u003e.from\u003c/code\u003e 方法替换 \u003ccode\u003e@-\u003c/code\u003e 及其变化。 第一个偏移是 \u003ccode\u003e$/[0].from\u003c/code\u003e 或等价的 \u003ccode\u003e$0.from\u003c/code\u003e。 Perl 5 的 \u003ccode\u003e$-[0]\u003c/code\u003e 是 \u003ccode\u003e$/.from\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e%LAST_MATCH_START\u003c/li\u003e\n\u003cli\u003e%-\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e与 \u003ccode\u003e%+\u003c/code\u003e 非常相似 ，使用 \u003ccode\u003e%-{$match}\u003c/code\u003e 将替换为 \u003ccode\u003e$/{$match}\u003c/code\u003e 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$LAST_REGEXP_CODE_RESULT\u003c/li\u003e\n\u003cli\u003e$^R\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e没有等价物。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e${^RE_DEBUG_FLAGS}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e没有等价物。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e${^RE_TRIE_MAXBUF}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e没有等价物。\u003c/p\u003e\n\u003ch4 id=\"与文件句柄相关的变量\"\u003e与文件句柄相关的变量\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e$ARGV\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e读取行时当前文件的名称可以通过 \u003ccode\u003e$*ARGFILES.path\u003c/code\u003e 获得。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@ARGV\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003e@*ARGS\u003c/code\u003e 包含命令行参数。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eARGV\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这被 \u003ccode\u003e$*ARGFILES\u003c/code\u003e 取代 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eARGVOUT\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e由于尚未实现 \u003ccode\u003e-i\u003c/code\u003e 命令行开关，因此还没有相当于 \u003ccode\u003eARGVOUT\u003c/code\u003e 的功能 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$OUTPUT_FIELD_SEPARATOR\u003c/li\u003e\n\u003cli\u003e$OFS\u003c/li\u003e\n\u003cli\u003e$\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e目前没有明显的等价物\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$INPUT_LINE_NUMBER\u003c/li\u003e\n\u003cli\u003e$NR\u003c/li\u003e\n\u003cli\u003e$.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e不存在直接替代品。\u003c/p\u003e\n\u003cp\u003e迭代时使用 行方法 \u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003eIO::Path\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/type/IO::Handle\"\u003eIO::Handle\u003c/a\u003e 类型，您可以在其上调用 \u003ccode\u003e.kv\u003c/code\u003e 方法 获取交错的索引和值列表（然后每个循环迭代2次）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elines\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekv\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$n\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$line\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$n\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$line\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 1: a \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 2: b \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 3: c \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 4: d \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对于 \u003ca href=\"https://docs.raku.org/type/IO::CatHandle\"\u003eIO::CatHandle\u003c/a\u003e 类型（其中 \u003ccode\u003e$*ARGFILES\u003c/code\u003e 是一个），你可以使用 \u003ca href=\"https://docs.raku.org/type/IO::CatHandle#method_on-switch\"\u003eon-switch\u003c/a\u003e hook 在句柄开关上重置行号，并手动递增。 另请参阅 \u003ca href=\"https://modules.raku.org/repo/IO::CatHandle::AutoLines\"\u003eIO::CatHandle::AutoLines\u003c/a\u003e 和 \u003ca href=\"https://modules.raku.org/repo/LN\"\u003eLN\u003c/a\u003e 模块简化此操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$INPUT_RECORD_SEPARATOR\u003c/li\u003e\n\u003cli\u003e$RS\u003c/li\u003e\n\u003cli\u003e$/\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这可以通过文件句柄上的 \u003ccode\u003e.nl-in\u003c/code\u003e 方法访问 。 例如。 \u003ccode\u003e$*IN.nl-in\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$OUTPUT_RECORD_SEPARATOR\u003c/li\u003e\n\u003cli\u003e$ORS\u003c/li\u003e\n\u003cli\u003e$\\\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这可以通过文件句柄上的 \u003ccode\u003e.nl-out\u003c/code\u003e 方法访问 。 例如 \u003ccode\u003e$*OUT.nl-out\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$OUTPUT_AUTOFLUSH\u003c/li\u003e\n\u003cli\u003e$|\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e没有全球替代品。 对于其他设置，TTY 句柄默认是无缓冲的 \u003ca href=\"https://docs.raku.org/routine/out-buffer\"\u003eout-buffer\u003c/a\u003e 设置为零或者使用 \u003ccode\u003e:!out-buffer\u003c/code\u003e 在特定的 \u003ca href=\"https://docs.raku.org/type/IO::Handle\"\u003eIO::Handle\u003c/a\u003e上和 open 一块使用 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e${^LAST_FH}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 Raku 中没有实现。\u003c/p\u003e\n\u003ch4 id=\"与格式相关的变量\"\u003e与格式相关的变量\u003c/h4\u003e\n\u003cp\u003eRaku中没有内置格式。\u003c/p\u003e\n\u003ch3 id=\"错误变量\"\u003e错误变量\u003c/h3\u003e\n\u003cp\u003e关于 Raku 中的错误变量如何变化，因此这里不再详细说明。\u003c/p\u003e\n\u003cp\u003e引用 Raku \u003ca href=\"https://docs.raku.org/language/variables#index-entry-%2524%21\"\u003edocs\u003c/a\u003e 中的说法，\u003ccode\u003e$!\u003c/code\u003e 是错误变量。\u003c/p\u003e\n\u003cp\u003e与 Raku 的其余部分一样，它是一个根据类型返回各种内容的错误类型或\u003ca href=\"https://docs.raku.org/type/Exception\"\u003e异常\u003c/a\u003e 。\u003c/p\u003e\n\u003cp\u003e特别是在处理\u003ca href=\"https://docs.raku.org/type/Exception\"\u003e异常\u003c/a\u003e时, \u003ccode\u003e$!\u003c/code\u003e 提供有关抛出异常的信息， 假设程序没有停止：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003efail\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eBoooh\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eCATCH\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e# within the catch block \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e# the exception is placed into $_ \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ewithin the catch:\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e : \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eresume\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# do not abort \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# outside the catch block the exception is placed \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# into $! \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eoutside the catch:\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$!\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e : \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nv\"\u003e$!\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以上代码生成以下输出\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ewithin\u003c/span\u003e \u003cspan class=\"nf\"\u003ethe\u003c/span\u003e \u003cspan class=\"nf\"\u003ecatch:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ne\"\u003eX::AdHoc\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBoooh\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eoutside\u003c/span\u003e \u003cspan class=\"nf\"\u003ethe\u003c/span\u003e \u003cspan class=\"nf\"\u003ecatch:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ne\"\u003eX::AdHoc\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBoooh\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因此，如前所述， \u003ccode\u003e$!\u003c/code\u003e 变量保存异常对象。\u003c/p\u003e\n\u003ch3 id=\"与解释器状态相关的变量\"\u003e与解释器状态相关的变量\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e$COMPILING\u003c/li\u003e\n\u003cli\u003e$^C\u003c/li\u003e\n\u003cli\u003e$^D\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e目前没有这些变量的等价物。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e${^ENCODING}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e虽然在 Perl 5 中已弃用 ，但在 \u003ccode\u003e$?ENC\u003c/code\u003e 中 可能有某种等价物 ，但这还远未明朗。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e${^GLOBAL_PHASE}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e没有 Raku 等价物。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$^H\u003c/li\u003e\n\u003cli\u003e%^H\u003c/li\u003e\n\u003cli\u003e${^OPEN}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 Raku 中可能有也可能没有这些等价物，但它们是内部的，你不应该搞乱 与他们在一起 - 当然，如果您对 Raku 的理解需要您阅读本文，那么肯定不会阅读该文献\u0026hellip;\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$PERLDB\u003c/li\u003e\n\u003cli\u003e$^P\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRaku 调试器与 Perl 5 调试器相似的可能性最小，此时此处也是如此，似乎不等于这个变量。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e${^TAINT}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eS28 声称这个变量是“待定”的。 目前不在 Raku 中。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e${^UNICODE}\u003c/li\u003e\n\u003cli\u003e${^UTF8CACHE}\u003c/li\u003e\n\u003cli\u003e${^UTF8LOCALE}\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这些与 Unicode 相关的变量似乎不存在于 Raku 中，但是 - 也许？ - 可能在某处有 \u003ccode\u003e$?ENC\u003c/code\u003e 类似物吗？  然而，这完全未经证实。\u003c/p\u003e\n\u003ch3 id=\"弃用和删除变量\"\u003e弃用和删除变量\u003c/h3\u003e\n\u003cp\u003e不言而喻，因为已经从 Perl 5 中删除了这些，所以应该没有必要告诉你如何在 Raku 中使用它们。\u003c/p\u003e\n","text":"描述 一个（希望）全面的 Perl 5 特殊变量列表及其 Raku 等价物，并在必要时记录它们之间的变化。\n注意 本文档试图引导读者从 Perl 5 中的特殊变量到 Raku 中的等效变量。有关 Raku 特殊变量的完整文档，请参阅每个变量的 Raku 文档。\n特殊变量 通用变量 $ARG $_ 值得庆幸的是， $_ 是 Perl 5 中的常规默认变量。Raku 的主要区别在于现在你可以在它身上调用方法。 例如，Perl 5 的 say $_ 可以在 Raku 中以 $_.say 表示。 此外，因为它是默认变量，您甚至不需要使用变量名称。 前面的例子也可以 通过使用 .say 实现。\n@ARG @_ 由于 Raku 现在具有函数签名，您的参数可以去那里，而不是依赖于 @_。 事实上，如果你使用函数签名，使用 @_ 会吐出你告诉它不能覆盖一个现有签名。\n但是，如果您不使用函数签名，则 @_ 将包含您传递给函数的参数, 就像它在Perl 5中那样。再次，与 $_ 一样 ，您可以在其上调用方法。 与 $_ 不同，你不能假设 @_ 为 这些方法的默认变量（即 @_.shift works， .shift 不 work）。\n$LIST_SEPARATOR $\u0026quot; 目前，Raku 中没有与 List Separator 变量等效的设计文档 S28 在那里说 不是一个，所以你可能不想屏住呼吸。\n$PROCESS_ID $PID $$ 在 Raku 中用 $*PID 替换 $$\n$PROGRAM_NAME $0 您可以通过 $*PROGRAM-NAME 访问 Raku 中的程序名称 。 注意： Raku 中的 $0 是保持正则表达式匹配中第一个捕获值的变量（即捕获变量现在从 $0 而不是 $1 开始 )。\n$REAL_GROUP_ID $GID $( 在 Raku 中，组信息由 $*GROUP 处理 ，它包含一个 IntStr 类型的对象 因此 可以在字符串或数字上下文中使用。 因此，组ID通过 +$*GROUP 获得 ， 而组名通过 ~$*GROUP 获得 。\n$EFFECTIVE_GROUP_ID $EGID $) Raku目前似乎没有提供有效的组ID。\n$REAL_USER_ID $UID $\u0026lt; 在 Raku 中，用户信息由 $*USER处理 ，后者持有 IntStr 类型的对象，因此可以 可以在字符串或数字上下文中使用（这类似于处理组信息的方式） 由 $*GROUP 对象）。 因此，用户ID通过 +$*USER 获得 ，而用户名通过 ~$*USER 获得 。\n$EFFECTIVE_USER_ID $EUID $\u0026gt; Raku当前似乎没有提供有效的用户ID。\n$SUBSCRIPT_SEPARATOR $SUBSEP $; Raku中不包含下标分隔符变量。坦率地说，如果你的Perl 5代码正在使用它，那就是 几乎可以肯定，真的很老。\n$a $b $a 和 $b 在 Raku 中没有特殊含义 .sort() 不会将它们用于任何特殊的东西。 他们只是常规的旧变量。 通过使用具有更多功能的占位符参数的块来扩展此功能。 占位符变量是使用 ^twigil 创建的 （例如 $^z 。它们可以在裸块中使用或在没有显式参数列表的子程序。 块的参数将分配给占位符 Unicode 顺序中的变量。 I. e。 即使变量出现在块中的顺序 （$^q, $^z, $^a） ，它们将按顺序分配 （$^a, $^q, $^z） 。 人机工程学：\nsort { $^a cmp $^z }, 1, 5, 6, 4, 2, 3; # OUTPUT: «(1 2 3 4 5 6)␤» sort { $^g cmp $^a }, 1, 5, 6, 4, 2, 3; # OUTPUT: «(6 5 4 3 2 1)␤» for 1..9 { say $^c, $^a, $^b; last } # OUTPUT: «312␤» 有关占位符变量的更多信息，请参阅此页面\n%ENV ％ENV已被Raku中的％*ENV取代。请注意，此哈希的键可能不完全是 在Perl 5和Raku之间相同。例如， Raku的％ENV中缺少OLDPWD 。\n$OLD_PERL_VERSION $] Raku 的运行版本由 $*PERL 特殊变量保存，即一个对象。 正在运行的版本是 通过 $*PERL.version 检索 ，返回类似 v6.c 的内容 ; Perl 的完整字符串化版本解释器是通过 ~$*PERL 获得的 ，它返回类似于 Raku（6.c）的内容 。\n$SYSTEM_FD_MAX $^F 虽然设计文件（S28）表明这可能会变成 $*SYS_FD_MAX ，但这还没有b被实现。\n@F [需要进一步研究]此时有点混乱。 设计文档S28表示 @F in Perl 5在Raku中被 @_ 取代 ，但目前还不清楚它是如何工作的。 另一方面，它是目前的 有点问题，因为 Perl 5 to Raku Translation doc 指出 -a 和 -F 命令 - rakudo 尚未实现行开关。\n@INC Raku 中不再存在。请使用“use lib”来操作要搜索的模块存储库。 该 最接近 @INC 的是 $*REPO。 但这与@INC完全不同 因为 Raku 的预编译功能。\n# Print out a list of compunit repositories .say for $*REPO.repo-chain; %INC Raku 中不再存在。因为每个 Repository 都负责记住哪些模块已经装好了。 您可以获得所有已加载模块（编译单元）的列表，如下所示：\nuse Test; use MyModule; say flat $*REPO.repo-chain.map(*.loaded); #-\u0026gt; (MyModule Test) $INPLACE_EDIT $^I S28 建议使用 $*INPLACE_EDIT，但它尚不存在。\n$^M S28 建议使用 $*EMERGENCY_MEMORY，但它尚不存在。\n$OSNAME $^o 这有点不清楚。 它可能取决于你的意思是“操作系统的名称” 作为设计文档 S28 有三个不同的建议，所有建议都给出了不同的答案。\n目前有三个主要对象包含有关“运行环境”的信息：\n$*KERNEL 提供有关正在运行的操作系统内核的信息; $*DISTRO 提供有关操作系统分发的信息; $*VM 提供有关 Raku 的运行后端机器的信息。 以上所有对象都有共同的方法：\nversion 提供该组件的版本号; name 提供该组件的助记符名称; auth 为该组件提供已知作者。 作为一个简短示例，以下代码打印有关上述所有组件的信息：\nfor $*KERNEL, $*DISTRO, $*VM -\u0026gt; $what { say $what.^name; say \u0026#39;version \u0026#39; ~ $what.version ~ \u0026#39; named \u0026#39; ~ $what.name ~ \u0026#39; by \u0026#39; ~ $what.auth; } # Kernel # version 4.10.0.42.generic named linux by unknown # Distro # version 17.04.Zesty.Zapus named ubuntu by https://www.ubuntu.com/ # VM # version 2017.11 named moar by The MoarVM Team 上面所有的 Str 方法产生了当前时间的信息的短版本名字 。\n所有对象都有其他方法，在尝试识别正确运行的实例时非常有用， 有关更多信息，请使用 \u0026lt;.^methods\u0026gt; 来内省以上所有内容。\n%SIG 没有等效变量。 要在接收信号时执行代码，您可以调用 signal 子程序，返回可以点击的 Supply 。\n$SIG{\u0026#34;INT\u0026#34;} = sub { say \u0026#34;bye\u0026#34;; exit } signal(SIGINT).tap: { say \u0026#34;bye\u0026#34;; exit }; loop {} 或者，如果您有一个通用代码，想知道它得到了哪个信号：\nsignal(SIGINT).tap: -\u0026gt; $signal { say \u0026#34;bye with $signal\u0026#34;; exit }; loop {} 在事件驱动的情况下使用信号的更惯用的方式：\nreact { whenever signal(SIGINT) { say \u0026#34;goodbye\u0026#34;; done } } $BASETIME $^T 在 Raku 中用 $*INIT-INSTANT 替换 。 与 Perl 5 不同，这不是自纪元以来的秒数，而是一个 Instant 对象，以原子秒计，带有分数。\n$PERL_VERSION $^V 与 $] 一样，这已被 $*PERL.version 取代。\n${^WIN32_SLOPPY_STAT} 在 Raku 中没有类似的东西。\n$EXECUTABLE_NAME $^X 这已被 $*EXECUTABLE-NAME 取代 。 请注意，还有 $*EXECUTABLE ，这在 Raku 中是一个 IO 对象。\n与正则表达式相关的变量 性能问题 如下所示， $``, $\u0026amp;和$\u0026rsquo;从 Raku 中删除了，主要由$/` 和它的变体代替， 消除它们，Perl 5 中的相关性能问题不适用。\n$\u0026lt;digits\u0026gt; ($1, $2, ...) Raku 中的这些现有变量与 Perl 5 中的相同，除了它们现在从 $0 开始而不是 $1。 此外，它们是匹配变量 $/ 中索引项的同义词。 例如 $0 相当于 $/[0]， $1相当于$/[1]`等。\n$MATCH $＆ $/ 现在包含匹配对象，因此 $＆ 的 Perl 5 行为可以通过字符串化来获得，即 ~$/ 。 请注意，虽然 $/.Str 也可以工作， 但 ~$/ 目前是更常见的用法。\n${^MATCH} 由于以前的性能问题已经废除，因此 Raku 中没有使用此变量。\n$PREMATCH $` 替换为 $/.prematch 。\n${^PREMATCH} 由于以前的性能问题已经废除，因此 Raku 中没有使用此变量。\n$POSTMATCH $' 替换为 $/.postmatch。\n${^POSTMATCH} 由于以前的性能问题已经废除，因此 Raku 中没有使用此变量。\n$LAST_PAREN_MATCH $+ 在 Raku 中不存在，但你可以使用 $/[*-1].Str 获得相同的信息。($/[*-1] 将是匹配对象，而不是实际的字符串)。\n如果您想了解其工作原理，可以查看以下文档：\n[]routine 例程 Whatever 可能\nhttps://design.raku.org/S02.html#line_1126 虽然设计文件并不总是最新的。\n$LAST_SUBMATCH_RESULT $^N S28 建议 $*MOST_RECENT_CAPTURED_MATCH ，但似乎没有任何实现的变量匹配 $^N.\n@LAST_MATCH_END @+ 与大多数正则表达式相关的变量一样，此功能至少部分地移至 Raku 中的 $/ 变量。或者，在这种情况下，编号变量是索引的别名。 偏移是通过使用 .to 方法找到。 例如, 第一个偏移是 $/[0].to ，它与 $0.to 同义。 Perl 5 提供的 $+[0] 由 $/.to 提供。\n%LAST_PAREN_MATCH %+ 再一次，我们转移到 $/。 前面的 $+{$match} 是 $/{$match}。\n@LAST_MATCH_START @- 类似于使用 .to 方法替换 @+ ，使用 $/ 上的 .from 方法替换 @- 及其变化。 第一个偏移是 $/[0].from 或等价的 $0.from。 Perl 5 的 $-[0] 是 $/.from。\n%LAST_MATCH_START %- 与 %+ 非常相似 ，使用 %-{$match} 将替换为 $/{$match} 。\n$LAST_REGEXP_CODE_RESULT $^R 没有等价物。\n${^RE_DEBUG_FLAGS} 没有等价物。\n${^RE_TRIE_MAXBUF} 没有等价物。\n与文件句柄相关的变量 $ARGV 读取行时当前文件的名称可以通过 $*ARGFILES.path 获得。\n@ARGV @*ARGS 包含命令行参数。\nARGV 这被 $*ARGFILES 取代 。\nARGVOUT 由于尚未实现 -i 命令行开关，因此还没有相当于 ARGVOUT 的功能 。\n$OUTPUT_FIELD_SEPARATOR $OFS $ 目前没有明显的等价物\n$INPUT_LINE_NUMBER $NR $. 不存在直接替代品。\n迭代时使用 行方法 IO::Path 或 IO::Handle 类型，您可以在其上调用 .kv 方法 获取交错的索引和值列表（然后每个循环迭代2次）：\nfor \u0026#34;foo\u0026#34;.IO.lines.kv -\u0026gt; $n, $line { say \u0026#34;{$n + 1}: $line\u0026#34; } # OUTPUT: # 1: a # 2: b # 3: c # 4: d 对于 IO::CatHandle 类型（其中 $*ARGFILES 是一个），你可以使用 on-switch hook 在句柄开关上重置行号，并手动递增。 另请参阅 IO::CatHandle::AutoLines 和 LN 模块简化此操作。\n$INPUT_RECORD_SEPARATOR $RS $/ 这可以通过文件句柄上的 .nl-in 方法访问 。 例如。 $*IN.nl-in。\n$OUTPUT_RECORD_SEPARATOR $ORS $\\ 这可以通过文件句柄上的 .nl-out 方法访问 。 例如 $*OUT.nl-out。\n$OUTPUT_AUTOFLUSH $| 没有全球替代品。 对于其他设置，TTY 句柄默认是无缓冲的 out-buffer 设置为零或者使用 :!out-buffer 在特定的 IO::Handle上和 open 一块使用 。\n${^LAST_FH} 在 Raku 中没有实现。\n与格式相关的变量 Raku中没有内置格式。\n错误变量 关于 Raku 中的错误变量如何变化，因此这里不再详细说明。\n引用 Raku docs 中的说法，$! 是错误变量。\n与 Raku 的其余部分一样，它是一个根据类型返回各种内容的错误类型或异常 。\n特别是在处理异常时, $! 提供有关抛出异常的信息， 假设程序没有停止：\ntry { fail \u0026#34;Boooh\u0026#34;; CATCH { # within the catch block # the exception is placed into $_ say \u0026#39;within the catch:\u0026#39;; say $_.^name ~ \u0026#39; : \u0026#39; ~ $_.message; $_.resume; # do not abort } } # outside the catch block the exception is placed # into $! say \u0026#39;outside the catch:\u0026#39;; say $!.^name ~ \u0026#39; : \u0026#39; ~ $!.message; 以上代码生成以下输出\nwithin the catch: X::AdHoc : Boooh outside the catch: X::AdHoc : Boooh 因此，如前所述， $! 变量保存异常对象。\n与解释器状态相关的变量 $COMPILING $^C $^D 目前没有这些变量的等价物。\n${^ENCODING} 虽然在 Perl 5 中已弃用 ，但在 $?ENC 中 可能有某种等价物 ，但这还远未明朗。\n${^GLOBAL_PHASE} 没有 Raku 等价物。\n$^H %^H ${^OPEN} 在 Raku 中可能有也可能没有这些等价物，但它们是内部的，你不应该搞乱 与他们在一起 - 当然，如果您对 Raku 的理解需要您阅读本文，那么肯定不会阅读该文献\u0026hellip;\n$PERLDB $^P Raku 调试器与 Perl 5 调试器相似的可能性最小，此时此处也是如此，似乎不等于这个变量。\n${^TAINT} S28 声称这个变量是“待定”的。 目前不在 Raku 中。\n${^UNICODE} ${^UTF8CACHE} ${^UTF8LOCALE} 这些与 Unicode 相关的变量似乎不存在于 Raku 中，但是 - 也许？ - 可能在某处有 $?ENC 类似物吗？ 然而，这完全未经证实。\n弃用和删除变量 不言而喻，因为已经从 Perl 5 中删除了这些，所以应该没有必要告诉你如何在 Raku 中使用它们。\n"},"name":"Perl 5 到 Raku 指南 - 特殊变量","published":"2018-10-15T21:13:31+08:00","summary":"描述 一个（希望）全面的 Perl 5 特殊变量列表及其 Raku 等价物，并在必要时记录它们之间的变化。\n注意 本文档试图引导读者从 Perl 5 中的特殊变量到 Raku 中的等效变量。有关 Raku 特殊变量的完整文档，请参阅每个变量的 Raku 文档。\n特殊变量 通用变量 $ARG $_ 值得庆幸的是， $_ 是 Perl 5 中的常规默认变量。Raku 的主要区别在于现在你可以在它身上调用方法。 例如，Perl 5 的 say $_ 可以在 Raku 中以 $_.say 表示。 此外，因为它是默认变量，您甚至不需要使用变量名称。 前面的例子也可以 通过使用 .say 实现。\n@ARG @_ 由于 Raku 现在具有函数签名，您的参数可以去那里，而不是依赖于 @_。 事实上，如果你使用函数签名，使用 @_ 会吐出你告诉它不能覆盖一个现有签名。\n但是，如果您不使用函数签名，则 @_ 将包含您传递给函数的参数, 就像它在Perl 5中那样。再次，与 $_ 一样 ，您可以在其上调用方法。 与 $_ 不同，你不能假设 @_ 为 这些方法的默认变量（即 @_.shift works， .shift 不 work）。","type":"entry","url":"http://localhost:1313/rakulang/8.perl-5-to-perl-6-guide---special-variables/"}