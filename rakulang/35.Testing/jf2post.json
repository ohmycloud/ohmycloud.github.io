{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003cp\u003e测试代码是软件开发不可或缺的一部分。测试提供代码行为的自动，可重复的验证，并确保您的代码按预期工作。\u003c/p\u003e\n\u003cp\u003e在 Raku 中，\u003ca href=\"https://docs.raku.org/type/Test\"\u003eTest\u003c/a\u003e 模块提供了一个测试框架，也被 Raku 的官方 spectest 套件使用。\u003c/p\u003e\n\u003cp\u003e测试函数发出符合 \u003ca href=\"https://testanything.org/\"\u003eTest Anything Protocol\u003c/a\u003e 的输出。通常，它们用于 sink 上下文中：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eok\u003c/span\u003e \u003cspan class=\"nf\"\u003echeck-name\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$meta\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$relaxed-name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ename has a hyphen rather than \u0026#39;::\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但是不论测试成功与否，所有函数都会返回布尔值，如果测试失败，可以使用它来打印消息：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eok\u003c/span\u003e \u003cspan class=\"nf\"\u003echeck-name\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$meta\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$relaxed-name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ename has a hyphen rather than \u0026#39;::\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"ow\"\u003eor\u003c/span\u003e \u003cspan class=\"nb\"\u003ediag\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eTo use hyphen in name, pass :relaxed-name to meta-ok\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"写测试httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e写测试\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e与任何 Perl 项目一样，测试位于项目基本目录的 \u003ccode\u003et\u003c/code\u003e 目录下。\u003c/p\u003e\n\u003cp\u003e典型的测试文件看起来像这样：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"k\"\u003ev\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"ni\"\u003e.c\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"kt\"\u003eTest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# a Standard module included with Rakudo \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"kt\"\u003elib\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003elib\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eplan\u003c/span\u003e \u003cspan class=\"nv\"\u003e$num-tests\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# .... tests \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003edone-testing\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# optional with \u0026#39;plan\u0026#39; \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们确保通过 \u003ccode\u003euse v6.c\u003c/code\u003e 编译指令使用 Raku，然后加载 \u003ccode\u003eTest\u003c/code\u003e 模块并指定库的位置。然后我们指定我们\u003cem\u003e计划\u003c/em\u003e运行多少个测试（这样测试框架可以告诉我们运行的测试是否比我们预期的要多），并且在完成测试后，我们使用\u003cem\u003e完成测试\u003c/em\u003e来告诉框架我们已经完成。\u003c/p\u003e\n\u003ch2 id=\"线程安全httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e线程安全\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e请注意，\u003ccode\u003eTest\u003c/code\u003e 模块中的例程\u003cem\u003e不是\u003c/em\u003e线程安全的。这意味着您不应该同时尝试在多个线程中使用测试例程，因为 \u003ca href=\"https://testanything.org/\"\u003eTAP\u003c/a\u003e 输出可能会出现乱序并且会使解释它的程序迷惑。\u003c/p\u003e\n\u003cp\u003e目前没有计划使其线程安全。如果线程测试对您至关重要，您可能会发现一些合适的\u003ca href=\"https://modules.raku.org/search/?q=Test\"\u003e生态系统模块\u003c/a\u003e，代替 \u003ccode\u003eTest\u003c/code\u003e 来满足您的测试需求。\u003c/p\u003e\n\u003ch1 id=\"运行测试httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e运行测试\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e可以通过在命令行上指定测试文件名来单独运行测试：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ raku t/test-filename.t\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者通过 Perl 5 中的 \u003ca href=\"https://perldoc.perl.org/prove.html\"\u003eprove\u003c/a\u003e 命令，其中 \u003ccode\u003e--exec\u003c/code\u003e 用于指定运行测试的可执行文件：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ prove --exec raku -r t\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e要在第一次失败时中止测试套件，请设置 \u003ccode\u003ePERL6_TEST_DIE_ON_FAIL\u003c/code\u003e 环境变量：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ \u003cspan class=\"nv\"\u003ePERL6_TEST_DIE_ON_FAIL\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e raku t/test-filename.t\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以在测试文件中使用相同的变量。在加载 \u003ccode\u003eTest\u003c/code\u003e 模块之前设置它：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eBEGIN %*ENV\u0026lt;PERL6_TEST_DIE_ON_FAIL\u0026gt; \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003euse Test\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"测试计划httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e测试计划\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e测试计划用 \u003ca href=\"https://docs.raku.org/type/Test#plan\"\u003e\u003ccode\u003eplan\u003c/code\u003e\u003c/a\u003e 声明将要完成的计划数量，或者可能会跳过的计划数量。如果没有声明计划，\u003ca href=\"https://docs.raku.org/type/Test#done-testing\"\u003e\u003ccode\u003edone-testing\u003c/code\u003e\u003c/a\u003e 则用于声明测试结束。\u003c/p\u003e\n\u003ch1 id=\"测试返回值httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e测试返回值\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003eTest\u003c/code\u003e 模块导出各种函数，用于检查给定表达式的返回值并生成标准化测试输出。\u003c/p\u003e\n\u003cp\u003e在实践中，表达式通常是对要进行单元测试的函数或方法的调用。\u003ca href=\"https://docs.raku.org/type/Test#ok\"\u003e\u003ccode\u003eok\u003c/code\u003e\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/Test#nok\"\u003e\u003ccode\u003enok\u003c/code\u003e\u003c/a\u003e 将匹配 \u003ccode\u003eTrue\u003c/code\u003e 和 \u003ccode\u003eFalse\u003c/code\u003e。但是，在可能的情况下，最好使用下面的一个专门的比较测试函数，因为它们可以在比较失败时打印更有用的诊断输出。\u003c/p\u003e\n\u003ch2 id=\"通过字符串比较httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e通过字符串比较\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/Test#is\"\u003e\u003ccode\u003eis\u003c/code\u003e\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/Test#isnt\"\u003e\u003ccode\u003enok\u003c/code\u003e\u003c/a\u003e 使用适当的运算符测试相等性，具体取决于它所处理的对象（或类）。\u003c/p\u003e\n\u003ch2 id=\"通过近似数字比较httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e通过近似数字比较\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/Test#is-approx\"\u003e\u003ccode\u003eis-approx\u003c/code\u003e\u003c/a\u003e 比较具有一定精度的数字，可以是绝对的或相对的。它对于精度取决于内部表示的数值非常有用。\u003c/p\u003e\n\u003ch2 id=\"通过结构比较httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e通过结构比较\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e也可以使用 \u003ca href=\"https://docs.raku.org/type/Test#is-deeply\"\u003e\u003ccode\u003eis-deeply\u003c/code\u003e\u003c/a\u003e 比较结构，这将检查所比较的对象的内部结构是否相同。\u003c/p\u003e\n\u003ch2 id=\"任意比较httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e任意比较\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e您可以使用 \u003ca href=\"https://docs.raku.org/type/Test#cmp-ok\"\u003e\u003ccode\u003ecmp-ok\u003c/code\u003e\u003c/a\u003e 进行任何类型的比较，它将您想要用于比较的函数或运算符作为参数。\u003c/p\u003e\n\u003ch2 id=\"通过对象类型比较httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e通过对象类型比较\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/Test#isa-ok\"\u003e\u003ccode\u003eisa-ok\u003c/code\u003e\u003c/a\u003e 测试对象是否属于某种类型。\u003c/p\u003e\n\u003ch2 id=\"通过方法名比较httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e通过方法名比较\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/Test#can-ok\"\u003e\u003ccode\u003ecan-ok\u003c/code\u003e\u003c/a\u003e 用于对象以检查它们是否具有该特定方法。\u003c/p\u003e\n\u003ch2 id=\"通过角色比较httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e通过角色比较\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003edoes-ok($variable, $role, $description?)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/Test#does-ok\"\u003e\u003ccode\u003edoes-ok\u003c/code\u003e\u003c/a\u003e 检查给定变量是否可以执行某个\u003ca href=\"https://docs.raku.org/language/objects#Roles\"\u003e角色\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"通过正则表达式比较httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e通过正则表达式比较\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/Test#like\"\u003e\u003ccode\u003elike\u003c/code\u003e\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/Test#unlike\"\u003e\u003ccode\u003eunlike\u003c/code\u003e\u003c/a\u003e 使用正则表达式检查; 在第一种情况下，如果存在匹配则通过，在第二种情况下则不通过。\u003c/p\u003e\n\u003ch1 id=\"测试模块httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e测试模块\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e用 \u003ca href=\"https://docs.raku.org/type/Test#use-ok\"\u003e\u003ccode\u003euse-ok\u003c/code\u003e\u003c/a\u003e 实验性地加载模块，如果加载失败则会失败。\u003c/p\u003e\n\u003ch1 id=\"测试异常httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e测试异常\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/Test#dies-ok\"\u003e\u003ccode\u003edies-ok\u003c/code\u003e\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/Test#lives-ok\"\u003e\u003ccode\u003elives-ok\u003c/code\u003e\u003c/a\u003e 是相反的测试代码的方法; 第一个检查是它抛出异常，第二个检查它不抛出异常; \u003ca href=\"https://docs.raku.org/type/Test#throws-like\"\u003e\u003ccode\u003ethrows-like\u003c/code\u003e\u003c/a\u003e 检查代码是否抛出了作为参数传递的特定异常; \u003ca href=\"https://docs.raku.org/type/Test#fails-like\"\u003e\u003ccode\u003efails-like\u003c/code\u003e\u003c/a\u003e 同样，检查代码是否返回特定类型的 \u003ca href=\"https://docs.raku.org/type/Failure\"\u003eFailure\u003c/a\u003e。\u003ca href=\"https://docs.raku.org/type/Test#eval-dies-ok\"\u003e\u003ccode\u003eeval-dies-ok\u003c/code\u003e\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/Test#eval-lives-ok\"\u003e\u003ccode\u003eeval-lives-ok\u003c/code\u003e\u003c/a\u003e 在测试之前计算的字符串上工作类似。\u003c/p\u003e\n\u003ch1 id=\"grouping-testshttpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003eGrouping tests\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e只有在所有子测试都是 \u003ccode\u003eok\u003c/code\u003e 的时候, 这组子测试的结果才是 \u003ccode\u003eok\u003c/code\u003e 的; 他们按使用 \u003ca href=\"https://docs.raku.org/type/Test#subtest\"\u003e\u003ccode\u003esubtest\u003c/code\u003e\u003c/a\u003e 分组。\u003c/p\u003e\n\u003ch1 id=\"跳过测试httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e跳过测试\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e有时测试还没准备好运行，例如某个功能可能尚未实现，在这种情况下，测试可以标记为 \u003ca href=\"https://docs.raku.org/type/Test#todo\"\u003e\u003ccode\u003etodo\u003c/code\u003e\u003c/a\u003e。或者可能是某个特定功能仅适用于特定平台的情况 - 在这种情况下，可以在其他平台上 \u003ca href=\"https://docs.raku.org/type/Test#skip\"\u003e\u003ccode\u003eskip\u003c/code\u003e\u003c/a\u003e 这个测试; \u003ca href=\"https://docs.raku.org/type/Test#skip-rest\"\u003e\u003ccode\u003eskip-rest\u003c/code\u003e\u003c/a\u003e 将跳过剩余的测试，而不是跳过作为参数给出的特定数字的测试; \u003ca href=\"https://docs.raku.org/type/Test#bail-out\"\u003e\u003ccode\u003ebail-out\u003c/code\u003e\u003c/a\u003e 将简单地带着一条消息退出测试。\u003c/p\u003e\n\u003ch1 id=\"手动控制httpsdocsrakuorglanguagetesting___top\"\u003e\u003ca href=\"https://docs.raku.org/language/testing#___top\"\u003e手动控制\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e如果上面记录的便利功能不符合您的需要，您可以使用以下函数手动指导测试套输出; \u003ca href=\"https://docs.raku.org/type/Test#pass\"\u003e\u003ccode\u003epass\u003c/code\u003e\u003c/a\u003e 将打印测试已经通过，\u003ca href=\"https://docs.raku.org/type/Test#diag\"\u003e\u003ccode\u003ediag\u003c/code\u003e\u003c/a\u003e 将打印（可能）信息性消息。\u003c/p\u003e\n","text":"测试代码是软件开发不可或缺的一部分。测试提供代码行为的自动，可重复的验证，并确保您的代码按预期工作。\n在 Raku 中，Test 模块提供了一个测试框架，也被 Raku 的官方 spectest 套件使用。\n测试函数发出符合 Test Anything Protocol 的输出。通常，它们用于 sink 上下文中：\nok check-name($meta, :$relaxed-name), \u0026#34;name has a hyphen rather than \u0026#39;::\u0026#39;\u0026#34; 但是不论测试成功与否，所有函数都会返回布尔值，如果测试失败，可以使用它来打印消息：\nok check-name($meta, :$relaxed-name), \u0026#34;name has a hyphen rather than \u0026#39;::\u0026#39;\u0026#34; \\ or diag \u0026#34;\\nTo use hyphen in name, pass :relaxed-name to meta-ok\\n\u0026#34;; 写测试 与任何 Perl 项目一样，测试位于项目基本目录的 t 目录下。\n典型的测试文件看起来像这样：\nuse v6.c; use Test; # a Standard module included with Rakudo use lib \u0026#39;lib\u0026#39;; plan $num-tests; # .... tests done-testing; # optional with \u0026#39;plan\u0026#39; 我们确保通过 use v6.c 编译指令使用 Raku，然后加载 Test 模块并指定库的位置。然后我们指定我们计划运行多少个测试（这样测试框架可以告诉我们运行的测试是否比我们预期的要多），并且在完成测试后，我们使用完成测试来告诉框架我们已经完成。\n线程安全 请注意，Test 模块中的例程不是线程安全的。这意味着您不应该同时尝试在多个线程中使用测试例程，因为 TAP 输出可能会出现乱序并且会使解释它的程序迷惑。\n目前没有计划使其线程安全。如果线程测试对您至关重要，您可能会发现一些合适的生态系统模块，代替 Test 来满足您的测试需求。\n运行测试 可以通过在命令行上指定测试文件名来单独运行测试：\n$ raku t/test-filename.t 或者通过 Perl 5 中的 prove 命令，其中 --exec 用于指定运行测试的可执行文件：\n$ prove --exec raku -r t 要在第一次失败时中止测试套件，请设置 PERL6_TEST_DIE_ON_FAIL 环境变量：\n$ PERL6_TEST_DIE_ON_FAIL=1 raku t/test-filename.t 可以在测试文件中使用相同的变量。在加载 Test 模块之前设置它：\nBEGIN %*ENV\u0026lt;PERL6_TEST_DIE_ON_FAIL\u0026gt; = 1; use Test; ... 测试计划 测试计划用 plan 声明将要完成的计划数量，或者可能会跳过的计划数量。如果没有声明计划，done-testing 则用于声明测试结束。\n测试返回值 Test 模块导出各种函数，用于检查给定表达式的返回值并生成标准化测试输出。\n在实践中，表达式通常是对要进行单元测试的函数或方法的调用。ok 和 nok 将匹配 True 和 False。但是，在可能的情况下，最好使用下面的一个专门的比较测试函数，因为它们可以在比较失败时打印更有用的诊断输出。\n通过字符串比较 is 和 nok 使用适当的运算符测试相等性，具体取决于它所处理的对象（或类）。\n通过近似数字比较 is-approx 比较具有一定精度的数字，可以是绝对的或相对的。它对于精度取决于内部表示的数值非常有用。\n通过结构比较 也可以使用 is-deeply 比较结构，这将检查所比较的对象的内部结构是否相同。\n任意比较 您可以使用 cmp-ok 进行任何类型的比较，它将您想要用于比较的函数或运算符作为参数。\n通过对象类型比较 isa-ok 测试对象是否属于某种类型。\n通过方法名比较 can-ok 用于对象以检查它们是否具有该特定方法。\n通过角色比较 does-ok($variable, $role, $description?) does-ok 检查给定变量是否可以执行某个角色。\n通过正则表达式比较 like 和 unlike 使用正则表达式检查; 在第一种情况下，如果存在匹配则通过，在第二种情况下则不通过。\n测试模块 用 use-ok 实验性地加载模块，如果加载失败则会失败。\n测试异常 dies-ok 和 lives-ok 是相反的测试代码的方法; 第一个检查是它抛出异常，第二个检查它不抛出异常; throws-like 检查代码是否抛出了作为参数传递的特定异常; fails-like 同样，检查代码是否返回特定类型的 Failure。eval-dies-ok 和 eval-lives-ok 在测试之前计算的字符串上工作类似。\nGrouping tests 只有在所有子测试都是 ok 的时候, 这组子测试的结果才是 ok 的; 他们按使用 subtest 分组。\n跳过测试 有时测试还没准备好运行，例如某个功能可能尚未实现，在这种情况下，测试可以标记为 todo。或者可能是某个特定功能仅适用于特定平台的情况 - 在这种情况下，可以在其他平台上 skip 这个测试; skip-rest 将跳过剩余的测试，而不是跳过作为参数给出的特定数字的测试; bail-out 将简单地带着一条消息退出测试。\n手动控制 如果上面记录的便利功能不符合您的需要，您可以使用以下函数手动指导测试套输出; pass 将打印测试已经通过，diag 将打印（可能）信息性消息。\n"},"name":"测试","published":"2018-11-10T21:13:31+08:00","summary":"测试代码是软件开发不可或缺的一部分。测试提供代码行为的自动，可重复的验证，并确保您的代码按预期工作。\n在 Raku 中，Test 模块提供了一个测试框架，也被 Raku 的官方 spectest 套件使用。\n测试函数发出符合 Test Anything Protocol 的输出。通常，它们用于 sink 上下文中：\nok check-name($meta, :$relaxed-name), \u0026#34;name has a hyphen rather than \u0026#39;::\u0026#39;\u0026#34; 但是不论测试成功与否，所有函数都会返回布尔值，如果测试失败，可以使用它来打印消息：\nok check-name($meta, :$relaxed-name), \u0026#34;name has a hyphen rather than \u0026#39;::\u0026#39;\u0026#34; \\ or diag \u0026#34;\\nTo use hyphen in name, pass :relaxed-name to meta-ok\\n\u0026#34;; 写测试 与任何 Perl 项目一样，测试位于项目基本目录的 t 目录下。\n典型的测试文件看起来像这样：\nuse v6.c; use Test; # a Standard module included with Rakudo use lib \u0026#39;lib\u0026#39;; plan $num-tests; # .","type":"entry","url":"http://localhost:1313/rakulang/35.testing/"}