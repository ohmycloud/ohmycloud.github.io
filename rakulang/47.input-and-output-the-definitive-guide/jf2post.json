{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003ch1 id=\"基础知识httpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003e基础知识\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e绝大多数常见的 IO 工作都是由\u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003eIO::Path\u003c/a\u003e类型完成的。如果您想以某种形式或形状读取或写入文件，这就是您想要的类。它抽象出文件句柄（或“文件描述符”）的细节，因此你甚至不必考虑它们。\u003c/p\u003e\n\u003cp\u003e在幕后，\u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003eIO::Path\u003c/a\u003e 与 \u003ca href=\"https://docs.raku.org/type/IO::Handle\"\u003eIO::Handle\u003c/a\u003e 一起使用 ; 一个你可以直接使用的类，如果你需要比 \u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003eIO::Path\u003c/a\u003e 提供的更多控制。当与其他进程，例如通过 \u003ca href=\"https://docs.raku.org/type/Proc\"\u003eProc\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/type/Proc::Async\"\u003eProc::Async\u003c/a\u003e类型，您还可以处理\u003ca href=\"https://docs.raku.org/type/IO::Handle\"\u003eIO::Handle\u003c/a\u003e 的\u003cem\u003e子类\u003c/em\u003e：在\u003ca href=\"https://docs.raku.org/type/IO::Pipe\"\u003eIO::Pipe\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e最后，你有 \u003ca href=\"https://docs.raku.org/type/IO::CatHandle\"\u003eIO::CatHandle\u003c/a\u003e，以及 \u003ca href=\"https://docs.raku.org/type/IO::Spec\"\u003eIO::Spec\u003c/a\u003e 及其子类，你很少直接使用它们。这些类为您提供了高级功能，例如将多个文件作为一个句柄进行操作，或者进行低级路径操作。\u003c/p\u003e\n\u003cp\u003e除了所有这些类之外，Raku 还提供了几个子程序，可以让您间接使用这些类。如果您喜欢函数式编程风格或 Raku  单行程序，这些就派上用场了。\u003c/p\u003e\n\u003cp\u003e虽然 \u003ca href=\"https://docs.raku.org/type/IO::Socket\"\u003eIO::Socket\u003c/a\u003e 及其子类也与输入和输出有关，但本指南并未涵盖它们。\u003c/p\u003e\n\u003ch1 id=\"导航路径httpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003e导航路径\u003c/a\u003e\u003c/h1\u003e\n\u003ch2 id=\"whats-an-iopath-anywayhttpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003eWhat\u0026rsquo;s an IO::Path anyway?\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e要将路径表示为文件或目录，请使用 \u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003eIO::Path\u003c/a\u003e 类型。获取该类型对象的最简单方法是通过在它身上调用 \u003ca href=\"https://docs.raku.org/routine/IO\"\u003e\u003ccode\u003e.IO\u003c/code\u003e\u003c/a\u003e 方法强制将 \u003ca href=\"https://docs.raku.org/type/Str\"\u003eStr\u003c/a\u003e 类型转为路径类型：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emy-file.txt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «\u0026#34;my-file.txt\u0026#34;.IO␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e看起来这里似乎缺少某些东西 - 没有卷或绝对路径 - 但该信息实际上存在于对象中。你可以通过使用 \u003ca href=\"https://docs.raku.org/routine/perl\"\u003e\u003ccode\u003e.perl\u003c/code\u003e\u003c/a\u003e 方法看到它：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emy-file.txt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eperl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: «IO::Path.new(\u0026#34;my-file.txt\u0026#34;, :SPEC(IO::Spec::Unix), :CWD(\u0026#34;/home/camelia\u0026#34;))␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这两个额外的属性 - \u003ccode\u003eSPEC\u003c/code\u003e 和 - \u003ccode\u003eCWD\u003c/code\u003e 指定路径应该使用的操作系统语义类型以及路径的“当前工作目录”，即如果它是相对路径，则它相对于该目录。\u003c/p\u003e\n\u003cp\u003e这意味着无论你如何制作一个路径，\u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003eIO::Path\u003c/a\u003e 对象在技术上总是指一个绝对路径。这就是它的 \u003ca href=\"https://docs.raku.org/routine/absolute\"\u003e\u003ccode\u003e.absolute\u003c/code\u003e\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/routine/relative\"\u003e\u003ccode\u003e.relative\u003c/code\u003e\u003c/a\u003e 方法返回 \u003ca href=\"https://docs.raku.org/type/Str\"\u003eStr\u003c/a\u003e 对象的原因，它们是字符串化路径的正确方法。\u003c/p\u003e\n\u003cp\u003e但是，不要急于将任何东西字符串化起来。将路径作为 \u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003eIO::Path\u003c/a\u003e 对象传递。在路径上运行的所有例程都可以处理它们，因此不需要转换它们。\u003c/p\u003e\n\u003ch2 id=\"working-with-fileshttpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003eWorking with files\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"writing-into-fileshttpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003eWriting into files\u003c/a\u003e\u003c/h3\u003e\n\u003ch4 id=\"writing-new-contenthttpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003eWriting new content\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003e让我们制作一些文件并从中写入和读取数据！\u003ca href=\"https://docs.raku.org/routine/spurt\"\u003e\u003ccode\u003espurt\u003c/code\u003e\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/routine/slurp\"\u003e\u003ccode\u003eslurp\u003c/code\u003e\u003c/a\u003e 程序写和读取一块儿数据。除非您正在处理难以完全存储在内存中的非常大的文件，否则这两个例程都适合您。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003emy-file.txt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003espurt\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eI ♥ Perl!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面的代码在当前目录中创建了一个名为 \u003ccode\u003emy-file.txt\u003c/code\u003e 的文件，然后将文本 \u003ccode\u003eI ♥ Perl!\u003c/code\u003e 写入其中。如果 Raku 是您的第一语言，请庆祝您任务完成了！尝试打开您使用其他程序创建的文件，以验证您使用程序编写的内容。如果您已经了解其他语言，您可能想知道本指南是否遗漏了处理编码或错误条件等问题。\u003c/p\u003e\n\u003cp\u003e但是，这就是您需要的所有代码。默认情况下，字符串将按 \u003ccode\u003eutf-8\u003c/code\u003e 编码进行编码，并通过 \u003ca href=\"https://docs.raku.org/type/Failure\"\u003eFailure\u003c/a\u003e 机制处理错误：这些是您可以使用常规条件处理的异常。在这种情况下，我们会让所有潜在的 \u003ca href=\"https://docs.raku.org/type/Failure\"\u003eFailures\u003c/a\u003e 在调用之后陷入沉没，因此它们包含的任何\u003ca href=\"https://docs.raku.org/type/Exception\"\u003e异常\u003c/a\u003e都将被抛出。\u003c/p\u003e\n\u003ch4 id=\"追加内容httpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003e追加内容\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003e如果您想在我们在上一节中创建的文件中添加更多内容，您可以注意 \u003ca href=\"https://docs.raku.org/routine/spurt\"\u003e\u003ccode\u003espurt\u003c/code\u003e\u003c/a\u003e 文档中提到的 \u003ccode\u003e:append\u003c/code\u003e 参数。但是，为了更好地控制，让我们自己使用 \u003ca href=\"https://docs.raku.org/type/IO::Handle\"\u003eIO::Handle\u003c/a\u003e 来处理：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$fh\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emy-file.txt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eopen\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$fh\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eI count: \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$fh\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$fh\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.raku.org/routine/open\"\u003e\u003ccode\u003e.open\u003c/code\u003e\u003c/a\u003e 方法调用打开我们的 \u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003eIO::Path\u003c/a\u003e，并返回一个 \u003ca href=\"https://docs.raku.org/type/IO::Handle\"\u003eIO::Handle\u003c/a\u003e。我们把 \u003ccode\u003e:a\u003c/code\u003e 作为参数传递，表示我们想要以追加模式打开文件。\u003c/p\u003e\n\u003cp\u003e在接下来的两行代码中，我们使用 \u003ca href=\"https://docs.raku.org/type/IO::Handle\"\u003eIO::Handle\u003c/a\u003e 上的 \u003ca href=\"https://docs.raku.org/routine/print\"\u003e\u003ccode\u003e.print\u003c/code\u003e\u003c/a\u003e 常用方法打印包含 11 个文本（\u003ccode\u003e'I count: '\u003c/code\u003e 字符串和 10 个数字）的文本行。请注意，\u003ca href=\"https://docs.raku.org/type/Failure\"\u003eFailure\u003c/a\u003e 机制再一次负责我们的所有错误检查。如果 \u003ca href=\"https://docs.raku.org/routine/open\"\u003e\u003ccode\u003e.open\u003c/code\u003e\u003c/a\u003e 失败，它将返回一个 \u003ca href=\"https://docs.raku.org/type/Failure\"\u003eFailure\u003c/a\u003e，当我们尝试在其上调用 \u003ca href=\"https://docs.raku.org/routine/print\"\u003e\u003ccode\u003e.print\u003c/code\u003e\u003c/a\u003e 方法时将抛出异常。\u003c/p\u003e\n\u003cp\u003e最后，我们通过调用它上面的 \u003ca href=\"https://docs.raku.org/routine/close\"\u003e\u003ccode\u003e.close\u003c/code\u003e\u003c/a\u003e 方法来关闭 \u003ca href=\"https://docs.raku.org/type/IO::Handle\"\u003eIO::Handle\u003c/a\u003e。这样\u003cem\u003e做很重要\u003c/em\u003e，特别是在大型程序或处理大量文件的程序中，因为许多系统对程序可以同时打开的文件数量有限制。如果您没有关闭句柄，最终您将达到该限制并且 \u003ca href=\"https://docs.raku.org/routine/open\"\u003e\u003ccode\u003e.open\u003c/code\u003e\u003c/a\u003e 调用将失败。请注意，与其他一些语言不同，Raku 不使用引用计数，因此当离开所定义的作用域时，文件句柄\u003cstrong\u003e不会关闭\u003c/strong\u003e。只有当它们被垃圾收集并且未能关闭句柄时，它们才会被关闭，这可能会导致程序在打开的句柄有机会在垃圾回收\u003cem\u003e之前\u003c/em\u003e达到文件限制。\u003c/p\u003e\n\u003ch3 id=\"从文件中读取httpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003e从文件中读取\u003c/a\u003e\u003c/h3\u003e\n\u003ch4 id=\"使用-iopathhttpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003e使用 IO::Path\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003e我们在前面的章节中已经看到，在文件中写东西是 Raku 中的单行代码。从它们中读取，同样容易：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emy-file.txt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eslurp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"c1\"\u003e# OUTPUT: «I ♥ Perl!␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emy-file.txt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eslurp\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ebin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# OUTPUT: «Buf[uint8]:0x\u0026lt;49 20 e2 99 a5 20 50 65 72 6c 21\u0026gt;␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.raku.org/routine/slurp\"\u003e\u003ccode\u003e.slurp\u003c/code\u003e\u003c/a\u003e 方法读取文件的全部内容并将其作为单个 \u003ca href=\"https://docs.raku.org/type/Str\"\u003eStr\u003c/a\u003e 对象返回，如果请求二进制模式，则通过指定 \u003ccode\u003e:bin\u003c/code\u003e 命名参数将其作为 \u003ca href=\"https://docs.raku.org/type/Buf\"\u003eBuf\u003c/a\u003e 对象返回。\u003c/p\u003e\n\u003cp\u003e由于 \u003ca href=\"https://docs.raku.org/routine/slurp\"\u003eslurping\u003c/a\u003e 将整个文件加载到内存中，因此它不适合处理大文件。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003eIO::Path\u003c/a\u003e 类型提供了另外两种方便的方法：\u003ca href=\"https://docs.raku.org/type/IO::Path#method_words\"\u003e\u003ccode\u003e.words\u003c/code\u003e\u003c/a\u003e 与 \u003ca href=\"https://docs.raku.org/type/IO::Path#method_lines\"\u003e\u003ccode\u003e.lines\u003c/code\u003e\u003c/a\u003e，这俩方法惰性地读取小块文件并返回（默认）不保留已消耗值的\u003ca href=\"https://docs.raku.org/type/Seq\"\u003eSeq\u003c/a\u003e 对象。\u003c/p\u003e\n\u003cp\u003e这是一个示例，它在文本文件中查找提及 Perl 的行并将其打印出来。尽管文件本身太大而无法容纳到可用的\u003ca href=\"https://en.wikipedia.org/wiki/Random-access_memory\"\u003eRAM\u003c/a\u003e 中，但程序运行时不会出现任何问题，因为内容是以小块的形式处理的：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e500-PetaByte-File.txt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elines\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"nb\"\u003econtains\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ePerl\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这是另一个打印文件中前 100 个单词的示例，没有完全加载它：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e500-PetaByte-File.txt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ewords\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，我们通过传递 limit 参数给 \u003ca href=\"https://docs.raku.org/type/IO::Path#method_words\"\u003e\u003ccode\u003e.words\u003c/code\u003e\u003c/a\u003e而不是使用\u003ca href=\"https://docs.raku.org/language/operators#index-entry-array_indexing_operator-array_subscript_operator-array_indexing_operator\"\u003e列表索引操作\u003c/a\u003e 来完成此操作。原因是在于底层仍然使用文件句柄，并且在完全使用返回的 \u003ca href=\"https://docs.raku.org/type/Seq\"\u003eSeq\u003c/a\u003e 之前，句柄将保持打开状态。如果没有引用 \u003ca href=\"https://docs.raku.org/type/Seq\"\u003eSeq\u003c/a\u003e，最终句柄将在垃圾收集运行期间关闭，但在大型程序中使用大量文件时，最好确保所有句柄立即关闭。所以，你应该始终确保 \u003ca href=\"https://docs.raku.org/type/Seq\"\u003eSeq\u003c/a\u003e 从\u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003eIO::Path\u003c/a\u003e 的 \u003ca href=\"https://docs.raku.org/type/IO::Path#method_words\"\u003e\u003ccode\u003e.words\u003c/code\u003e\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/IO::Path#method_lines\"\u003e\u003ccode\u003e.lines\u003c/code\u003e\u003c/a\u003e 方法是\u003ca href=\"https://docs.raku.org/language/glossary#index-entry-Reify\"\u003e完全具体化\u003c/a\u003e ; 而 limit 参数可以帮助你。\u003c/p\u003e\n\u003ch4 id=\"using-iohandlehttpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003eUsing IO::Handle\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003e当然，您可以使用 \u003ca href=\"https://docs.raku.org/type/IO::Handle\"\u003eIO::Handle\u003c/a\u003e 类型从文件中读取，这样可以更好地控制您正在执行的操作：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003egiven\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esome-file.txt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eopen\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ereadchars\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# OUTPUT: «I ♥ Perl␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eseek\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSeekFromCurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ereadchars\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# OUTPUT: «I ♥ Programming␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eclose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/IO::Handle\"\u003eIO::Handle\u003c/a\u003e 给你 \u003ca href=\"https://docs.raku.org/type/IO::Handle#method_read\"\u003e.read\u003c/a\u003e，\u003ca href=\"https://docs.raku.org/type/IO::Handle#method_readchars\"\u003e.readchars\u003c/a\u003e，\u003ca href=\"https://docs.raku.org/type/IO::Handle#routine_get\"\u003e.get\u003c/a\u003e，\u003ca href=\"https://docs.raku.org/type/IO::Handle#method_getc\"\u003e.getc\u003c/a\u003e，\u003ca href=\"https://docs.raku.org/type/IO::Handle#routine_words\"\u003e.words\u003c/a\u003e，\u003ca href=\"https://docs.raku.org/type/IO::Handle#routine_lines\"\u003e.lines\u003c/a\u003e，\u003ca href=\"https://docs.raku.org/type/IO::Handle#routine_slurp\"\u003e.slurp\u003c/a\u003e，\u003ca href=\"https://docs.raku.org/type/IO::Handle#method_comb\"\u003e.comb\u003c/a\u003e，\u003ca href=\"https://docs.raku.org/type/IO::Handle#method_split\"\u003e.split\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/IO::Handle#method_Supply\"\u003e.Supply\u003c/a\u003e 方法从中读取数据。有很多选择; 当你读取完时，需要关闭句柄。\u003c/p\u003e\n\u003cp\u003e与某些语言不同，当离开定义的作用域时，句柄不会自动关闭。相反，它将保持打开，直到被垃圾回收为止。为了使关闭更容易，一些方法允许您指定 \u003ccode\u003e:close\u003c/code\u003e 参数，您还可以使用 \u003ca href=\"https://docs.raku.org/language/phasers#index-entry-will_trait\"\u003e\u003ccode\u003ewill leave\u003c/code\u003e\u003c/a\u003e trait 或 \u003ca href=\"https://modules.raku.org/dist/Trait::IO\"\u003e\u003ccode\u003eTrait::IO\u003c/code\u003e\u003c/a\u003e 模块提供的 \u003ccode\u003edoes auto-close\u003c/code\u003e trait。\u003c/p\u003e\n\u003ch1 id=\"错误的做事方法httpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003e错误的做事方法\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e本节介绍如何不执行 Raku IO。\u003c/p\u003e\n\u003ch2 id=\"别去管-spechttpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003e别去管 $*SPEC\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e您可能听说过 \u003ca href=\"https://docs.raku.org/language/variables#Dynamic_variables\"\u003e\u003ccode\u003e$*SPEC\u003c/code\u003e\u003c/a\u003e 并看到过一些代码或书籍显示其用于拆分和连接路径片段的用法。它提供的一些例程名称甚至可能看起来与您在其他语言中使用的名称相似。\u003c/p\u003e\n\u003cp\u003e但是，除非您正在编写自己的 IO 框架，否则几乎不需要直接使用 \u003ca href=\"https://docs.raku.org/language/variables#Dynamic_variables\"\u003e\u003ccode\u003e$*SPEC\u003c/code\u003e\u003c/a\u003e。\u003ca href=\"https://docs.raku.org/language/variables#Dynamic_variables\"\u003e\u003ccode\u003e$*SPEC\u003c/code\u003e\u003c/a\u003e 提供低级别的东西，它的使用不仅会使你的代码难以阅读，你可能会引入安全问题（例如空字符）！\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003e\u003ccode\u003eIO::Path\u003c/code\u003e\u003c/a\u003e 类型是 Raku 世界的主力。它满足所有路径操作需求，并提供快捷例程，让您避免处理文件句柄。用它而不是 \u003ca href=\"https://docs.raku.org/language/variables#Dynamic_variables\"\u003e\u003ccode\u003e$*SPEC\u003c/code\u003e\u003c/a\u003e 这样的东西。\u003c/p\u003e\n\u003cp\u003e提示：您可以使用 \u003ccode\u003e/\u003c/code\u003e 连接路径部分并将其提供给 \u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003e\u003ccode\u003eIO::Path\u003c/code\u003e\u003c/a\u003e 例程; 无论操作系统如何，他们仍然可以做正确的事情。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# WRONG!! TOO MUCH WORK! \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$fh\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e \u003cspan class=\"vg\"\u003e$*SPEC\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecatpath\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003efoo/bar\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$file\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$data\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$fh\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eslurp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$fh\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# RIGHT! Use IO::Path to do all the dirty work \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$data\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003efoo/bar\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$file\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eslurp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但是，将它用于 \u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003eIO::Path\u003c/a\u003e 无法提供的东西是很好的。例如，\u003ca href=\"https://docs.raku.org/routine/devnull\"\u003e\u003ccode\u003e.devnull\u003c/code\u003e\u003c/a\u003e 方法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003etemp\u003c/span\u003e \u003cspan class=\"vg\"\u003e$*OUT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"vg\"\u003e$*SPEC\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003edevnull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eIn space no one can hear you scream!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"字符串化-iopathhttpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003e字符串化 IO::Path\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e不要使用 \u003ccode\u003e.Str\u003c/code\u003e 方法对 \u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003e\u003ccode\u003eIO::Path\u003c/code\u003e\u003c/a\u003e 对象进行字符串化，除非您只是想将它们显示在某个地方以供参考或使用。\u003ccode\u003e.Str\u003c/code\u003e 方法返回 \u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003e\u003ccode\u003eIO::Path\u003c/code\u003e\u003c/a\u003e 实例化的任何基本路径字符串。它不考虑 \u003ca href=\"https://docs.raku.org/type/IO::Path#attribute_CWD\"\u003e\u003ccode\u003e$.CWD\u003c/code\u003e\u003c/a\u003e 属性的值。例如，此代码已损坏：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$path\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003echdir\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# WRONG!! .Str DOES NOT USE $.CWD! \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003erun\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003etar -cvvf archive.tar\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$path\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eStr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.raku.org/routine/chdir\"\u003e\u003ccode\u003echdir\u003c/code\u003e\u003c/a\u003e 调用更改了当前目录的值，但我们创建的  \u003ccode\u003e$path\u003c/code\u003e 是相对于该更改之前的目录。\u003c/p\u003e\n\u003cp\u003e但是，\u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003e\u003ccode\u003eIO::Path\u003c/code\u003e\u003c/a\u003e 对象\u003cem\u003e确实\u003c/em\u003e知道它相对于哪个目录。我们只需要使用 \u003ca href=\"https://docs.raku.org/routine/absolute\"\u003e\u003ccode\u003e.absolute\u003c/code\u003e\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/routine/relative\"\u003e\u003ccode\u003e.relative\u003c/code\u003e\u003c/a\u003e 来字符串化对象。两个例程都返回一个 \u003ca href=\"https://docs.raku.org/type/Str\"\u003e\u003ccode\u003eStr\u003c/code\u003e\u003c/a\u003e 对象; 它们不同之处在于结果是绝对路径还是相对路径。所以，我们可以像这样修复我们的代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$path\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003echdir\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# RIGHT!! .absolute does consider the value of $.CWD! \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003erun\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003etar -cvvf archive.tar\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$path\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eabsolute\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Also good: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003erun\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003etar -cvvf archive.tar\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$path\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003erelative\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"注意-cwdhttpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003e注意 $*CWD\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e虽然通常不在视线范围内，但默认情况下，每个 \u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003e\u003ccode\u003eIO::Path\u003c/code\u003e\u003c/a\u003e 对象都使用 \u003ca href=\"https://docs.raku.org/language/variables#Dynamic_variables\"\u003e\u003ccode\u003e$*CWD\u003c/code\u003e\u003c/a\u003e 的当前值来设置其 \u003ca href=\"https://docs.raku.org/type/IO::Path#attribute_CWD\"\u003e\u003ccode\u003e$.CWD\u003c/code\u003e属性\u003c/a\u003e。这意味着有两件事需要注意。\u003c/p\u003e\n\u003ch3 id=\"temp-the-cwdhttpsdocsrakuorglanguageio-guide___top\"\u003e\u003ca href=\"https://docs.raku.org/language/io-guide#___top\"\u003etemp the $*CWD\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e这段代码是错误的：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# WRONG!! \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"vg\"\u003e$*CWD\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003emy $*CWD\u003c/code\u003e 让 \u003ca href=\"https://docs.raku.org/language/variables#Dynamic_variables\"\u003e\u003ccode\u003e$*CWD\u003c/code\u003e\u003c/a\u003e 变为未定义的。然后 \u003ca href=\"https://docs.raku.org/routine/IO\"\u003e\u003ccode\u003e.IO\u003c/code\u003e\u003c/a\u003e coercer 继续并将其正创建的路径的\u003ca href=\"https://docs.raku.org/type/IO::Path#attribute_CWD\"\u003e\u003ccode\u003e$.CWD\u003c/code\u003e\u003c/a\u003e 属性设置为 undefined 的 \u003ccode\u003e$*CWD\u003c/code\u003e 字符串化版本 ; 一个空字符串。\u003c/p\u003e\n\u003cp\u003e执行此操作的正确方法是使用 \u003ca href=\"https://docs.raku.org/routine/temp\"\u003e\u003ccode\u003etemp\u003c/code\u003e\u003c/a\u003e 而不是 \u003ccode\u003emy\u003c/code\u003e。它会将 \u003ca href=\"https://docs.raku.org/language/variables#Dynamic_variables\"\u003e\u003ccode\u003e$*CWD\u003c/code\u003e\u003c/a\u003e 的更改效果本地化，就像 \u003ccode\u003emy\u003c/code\u003e 那样，但它不会使其未定义，因此 \u003ca href=\"https://docs.raku.org/routine/IO\"\u003e\u003ccode\u003e.IO\u003c/code\u003e\u003c/a\u003e coercer 仍将获得正确的旧值：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etemp\u003c/span\u003e \u003cspan class=\"vg\"\u003e$*CWD\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e更好的是，如果要在本地化的 \u003ca href=\"https://docs.raku.org/language/variables#Dynamic_variables\"\u003e\u003ccode\u003e$*CWD\u003c/code\u003e\u003c/a\u003e 中执行某些代码，请使用该\u003ca href=\"https://docs.raku.org/routine/indir\"\u003e\u003ccode\u003eindir\u003c/code\u003e\u003c/a\u003e 例程。\u003c/p\u003e\n","text":"基础知识 绝大多数常见的 IO 工作都是由IO::Path类型完成的。如果您想以某种形式或形状读取或写入文件，这就是您想要的类。它抽象出文件句柄（或“文件描述符”）的细节，因此你甚至不必考虑它们。\n在幕后，IO::Path 与 IO::Handle 一起使用 ; 一个你可以直接使用的类，如果你需要比 IO::Path 提供的更多控制。当与其他进程，例如通过 Proc 或 Proc::Async类型，您还可以处理IO::Handle 的子类：在IO::Pipe。\n最后，你有 IO::CatHandle，以及 IO::Spec 及其子类，你很少直接使用它们。这些类为您提供了高级功能，例如将多个文件作为一个句柄进行操作，或者进行低级路径操作。\n除了所有这些类之外，Raku 还提供了几个子程序，可以让您间接使用这些类。如果您喜欢函数式编程风格或 Raku 单行程序，这些就派上用场了。\n虽然 IO::Socket 及其子类也与输入和输出有关，但本指南并未涵盖它们。\n导航路径 What\u0026rsquo;s an IO::Path anyway? 要将路径表示为文件或目录，请使用 IO::Path 类型。获取该类型对象的最简单方法是通过在它身上调用 .IO 方法强制将 Str 类型转为路径类型：\nsay \u0026#39;my-file.txt\u0026#39;.IO; # OUTPUT: «\u0026#34;my-file.txt\u0026#34;.IO␤» 看起来这里似乎缺少某些东西 - 没有卷或绝对路径 - 但该信息实际上存在于对象中。你可以通过使用 .perl 方法看到它：\nsay \u0026#39;my-file.txt\u0026#39;.IO.perl; # OUTPUT: «IO::Path.new(\u0026#34;my-file.txt\u0026#34;, :SPEC(IO::Spec::Unix), :CWD(\u0026#34;/home/camelia\u0026#34;))␤» 这两个额外的属性 - SPEC 和 - CWD 指定路径应该使用的操作系统语义类型以及路径的“当前工作目录”，即如果它是相对路径，则它相对于该目录。\n这意味着无论你如何制作一个路径，IO::Path 对象在技术上总是指一个绝对路径。这就是它的 .absolute 和 .relative 方法返回 Str 对象的原因，它们是字符串化路径的正确方法。\n但是，不要急于将任何东西字符串化起来。将路径作为 IO::Path 对象传递。在路径上运行的所有例程都可以处理它们，因此不需要转换它们。\nWorking with files Writing into files Writing new content 让我们制作一些文件并从中写入和读取数据！spurt 和 slurp 程序写和读取一块儿数据。除非您正在处理难以完全存储在内存中的非常大的文件，否则这两个例程都适合您。\n\u0026#34;my-file.txt\u0026#34;.IO.spurt: \u0026#34;I ♥ Perl!\u0026#34;; 上面的代码在当前目录中创建了一个名为 my-file.txt 的文件，然后将文本 I ♥ Perl! 写入其中。如果 Raku 是您的第一语言，请庆祝您任务完成了！尝试打开您使用其他程序创建的文件，以验证您使用程序编写的内容。如果您已经了解其他语言，您可能想知道本指南是否遗漏了处理编码或错误条件等问题。\n但是，这就是您需要的所有代码。默认情况下，字符串将按 utf-8 编码进行编码，并通过 Failure 机制处理错误：这些是您可以使用常规条件处理的异常。在这种情况下，我们会让所有潜在的 Failures 在调用之后陷入沉没，因此它们包含的任何异常都将被抛出。\n追加内容 如果您想在我们在上一节中创建的文件中添加更多内容，您可以注意 spurt 文档中提到的 :append 参数。但是，为了更好地控制，让我们自己使用 IO::Handle 来处理：\nmy $fh = \u0026#39;my-file.txt\u0026#39;.IO.open: :a; $fh.print: \u0026#34;I count: \u0026#34;; $fh.print: \u0026#34;$_ \u0026#34; for ^10; $fh.close; .open 方法调用打开我们的 IO::Path，并返回一个 IO::Handle。我们把 :a 作为参数传递，表示我们想要以追加模式打开文件。\n在接下来的两行代码中，我们使用 IO::Handle 上的 .print 常用方法打印包含 11 个文本（'I count: ' 字符串和 10 个数字）的文本行。请注意，Failure 机制再一次负责我们的所有错误检查。如果 .open 失败，它将返回一个 Failure，当我们尝试在其上调用 .print 方法时将抛出异常。\n最后，我们通过调用它上面的 .close 方法来关闭 IO::Handle。这样做很重要，特别是在大型程序或处理大量文件的程序中，因为许多系统对程序可以同时打开的文件数量有限制。如果您没有关闭句柄，最终您将达到该限制并且 .open 调用将失败。请注意，与其他一些语言不同，Raku 不使用引用计数，因此当离开所定义的作用域时，文件句柄不会关闭。只有当它们被垃圾收集并且未能关闭句柄时，它们才会被关闭，这可能会导致程序在打开的句柄有机会在垃圾回收之前达到文件限制。\n从文件中读取 使用 IO::Path 我们在前面的章节中已经看到，在文件中写东西是 Raku 中的单行代码。从它们中读取，同样容易：\nsay \u0026#39;my-file.txt\u0026#39;.IO.slurp; # OUTPUT: «I ♥ Perl!␤» say \u0026#39;my-file.txt\u0026#39;.IO.slurp: :bin; # OUTPUT: «Buf[uint8]:0x\u0026lt;49 20 e2 99 a5 20 50 65 72 6c 21\u0026gt;␤» .slurp 方法读取文件的全部内容并将其作为单个 Str 对象返回，如果请求二进制模式，则通过指定 :bin 命名参数将其作为 Buf 对象返回。\n由于 slurping 将整个文件加载到内存中，因此它不适合处理大文件。\nIO::Path 类型提供了另外两种方便的方法：.words 与 .lines，这俩方法惰性地读取小块文件并返回（默认）不保留已消耗值的Seq 对象。\n这是一个示例，它在文本文件中查找提及 Perl 的行并将其打印出来。尽管文件本身太大而无法容纳到可用的RAM 中，但程序运行时不会出现任何问题，因为内容是以小块的形式处理的：\n.say for \u0026#39;500-PetaByte-File.txt\u0026#39;.IO.lines.grep: *.contains: \u0026#39;Perl\u0026#39;; 这是另一个打印文件中前 100 个单词的示例，没有完全加载它：\n.say for \u0026#39;500-PetaByte-File.txt\u0026#39;.IO.words: 100 请注意，我们通过传递 limit 参数给 .words而不是使用列表索引操作 来完成此操作。原因是在于底层仍然使用文件句柄，并且在完全使用返回的 Seq 之前，句柄将保持打开状态。如果没有引用 Seq，最终句柄将在垃圾收集运行期间关闭，但在大型程序中使用大量文件时，最好确保所有句柄立即关闭。所以，你应该始终确保 Seq 从IO::Path 的 .words 和 .lines 方法是完全具体化 ; 而 limit 参数可以帮助你。\nUsing IO::Handle 当然，您可以使用 IO::Handle 类型从文件中读取，这样可以更好地控制您正在执行的操作：\ngiven \u0026#39;some-file.txt\u0026#39;.IO.open { say .readchars: 8; # OUTPUT: «I ♥ Perl␤» .seek: 1, SeekFromCurrent; say .readchars: 15; # OUTPUT: «I ♥ Programming␤» .close } IO::Handle 给你 .read，.readchars，.get，.getc，.words，.lines，.slurp，.comb，.split 和 .Supply 方法从中读取数据。有很多选择; 当你读取完时，需要关闭句柄。\n与某些语言不同，当离开定义的作用域时，句柄不会自动关闭。相反，它将保持打开，直到被垃圾回收为止。为了使关闭更容易，一些方法允许您指定 :close 参数，您还可以使用 will leave trait 或 Trait::IO 模块提供的 does auto-close trait。\n错误的做事方法 本节介绍如何不执行 Raku IO。\n别去管 $*SPEC 您可能听说过 $*SPEC 并看到过一些代码或书籍显示其用于拆分和连接路径片段的用法。它提供的一些例程名称甚至可能看起来与您在其他语言中使用的名称相似。\n但是，除非您正在编写自己的 IO 框架，否则几乎不需要直接使用 $*SPEC。$*SPEC 提供低级别的东西，它的使用不仅会使你的代码难以阅读，你可能会引入安全问题（例如空字符）！\nIO::Path 类型是 Raku 世界的主力。它满足所有路径操作需求，并提供快捷例程，让您避免处理文件句柄。用它而不是 $*SPEC 这样的东西。\n提示：您可以使用 / 连接路径部分并将其提供给 IO::Path 例程; 无论操作系统如何，他们仍然可以做正确的事情。\n# WRONG!! TOO MUCH WORK! my $fh = open $*SPEC.catpath: \u0026#39;\u0026#39;, \u0026#39;foo/bar\u0026#39;, $file; my $data = $fh.slurp; $fh.close; # RIGHT! Use IO::Path to do all the dirty work my $data = \u0026#39;foo/bar\u0026#39;.IO.add($file).slurp; 但是，将它用于 IO::Path 无法提供的东西是很好的。例如，.devnull 方法：\n{ temp $*OUT = open :w, $*SPEC.devnull; say \u0026#34;In space no one can hear you scream!\u0026#34;; } say \u0026#34;Hello\u0026#34;; 字符串化 IO::Path 不要使用 .Str 方法对 IO::Path 对象进行字符串化，除非您只是想将它们显示在某个地方以供参考或使用。.Str 方法返回 IO::Path 实例化的任何基本路径字符串。它不考虑 $.CWD 属性的值。例如，此代码已损坏：\nmy $path = \u0026#39;foo\u0026#39;.IO; chdir \u0026#39;bar\u0026#39;; # WRONG!! .Str DOES NOT USE $.CWD! run \u0026lt;tar -cvvf archive.tar\u0026gt;, $path.Str; chdir 调用更改了当前目录的值，但我们创建的 $path 是相对于该更改之前的目录。\n但是，IO::Path 对象确实知道它相对于哪个目录。我们只需要使用 .absolute 或 .relative 来字符串化对象。两个例程都返回一个 Str 对象; 它们不同之处在于结果是绝对路径还是相对路径。所以，我们可以像这样修复我们的代码：\nmy $path = \u0026#39;foo\u0026#39;.IO; chdir \u0026#39;bar\u0026#39;; # RIGHT!! .absolute does consider the value of $.CWD! run \u0026lt;tar -cvvf archive.tar\u0026gt;, $path.absolute; # Also good: run \u0026lt;tar -cvvf archive.tar\u0026gt;, $path.relative; 注意 $*CWD 虽然通常不在视线范围内，但默认情况下，每个 IO::Path 对象都使用 $*CWD 的当前值来设置其 $.CWD属性。这意味着有两件事需要注意。\ntemp the $*CWD 这段代码是错误的：\n# WRONG!! my $*CWD = \u0026#34;foo\u0026#34;.IO; my $*CWD 让 $*CWD 变为未定义的。然后 .IO coercer 继续并将其正创建的路径的$.CWD 属性设置为 undefined 的 $*CWD 字符串化版本 ; 一个空字符串。\n执行此操作的正确方法是使用 temp 而不是 my。它会将 $*CWD 的更改效果本地化，就像 my 那样，但它不会使其未定义，因此 .IO coercer 仍将获得正确的旧值：\ntemp $*CWD = \u0026#34;foo\u0026#34;.IO; 更好的是，如果要在本地化的 $*CWD 中执行某些代码，请使用该indir 例程。\n"},"name":"输入和输出专家指南","published":"2018-11-22T21:13:31+08:00","summary":"基础知识 绝大多数常见的 IO 工作都是由IO::Path类型完成的。如果您想以某种形式或形状读取或写入文件，这就是您想要的类。它抽象出文件句柄（或“文件描述符”）的细节，因此你甚至不必考虑它们。\n在幕后，IO::Path 与 IO::Handle 一起使用 ; 一个你可以直接使用的类，如果你需要比 IO::Path 提供的更多控制。当与其他进程，例如通过 Proc 或 Proc::Async类型，您还可以处理IO::Handle 的子类：在IO::Pipe。\n最后，你有 IO::CatHandle，以及 IO::Spec 及其子类，你很少直接使用它们。这些类为您提供了高级功能，例如将多个文件作为一个句柄进行操作，或者进行低级路径操作。\n除了所有这些类之外，Raku 还提供了几个子程序，可以让您间接使用这些类。如果您喜欢函数式编程风格或 Raku 单行程序，这些就派上用场了。\n虽然 IO::Socket 及其子类也与输入和输出有关，但本指南并未涵盖它们。\n导航路径 What\u0026rsquo;s an IO::Path anyway? 要将路径表示为文件或目录，请使用 IO::Path 类型。获取该类型对象的最简单方法是通过在它身上调用 .IO 方法强制将 Str 类型转为路径类型：\nsay \u0026#39;my-file.txt\u0026#39;.IO; # OUTPUT: «\u0026#34;my-file.txt\u0026#34;.IO␤» 看起来这里似乎缺少某些东西 - 没有卷或绝对路径 - 但该信息实际上存在于对象中。你可以通过使用 .perl 方法看到它：\nsay \u0026#39;my-file.txt\u0026#39;.IO.perl; # OUTPUT: «IO::Path.new(\u0026#34;my-file.txt\u0026#34;, :SPEC(IO::Spec::Unix), :CWD(\u0026#34;/home/camelia\u0026#34;))␤» 这两个额外的属性 - SPEC 和 - CWD 指定路径应该使用的操作系统语义类型以及路径的“当前工作目录”，即如果它是相对路径，则它相对于该目录。\n这意味着无论你如何制作一个路径，IO::Path 对象在技术上总是指一个绝对路径。这就是它的 .absolute 和 .relative 方法返回 Str 对象的原因，它们是字符串化路径的正确方法。","type":"entry","url":"http://localhost:1313/rakulang/47.input-and-output-the-definitive-guide/"}