{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003ch1 id=\"描述httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003e描述\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e关于 Perl 5 和 Raku 之间差异的全面（希望）描述。\u003c/p\u003e\n\u003ch1 id=\"注意httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003e注意\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e我\u003cem\u003e不会\u003c/em\u003e详细解释 Raku 语法。本文档旨在指导你从 Perl 5 中的工作原理过渡到 Raku 中的等效工具。有关 Raku 语法的完整文档，请参阅 Raku 文档。\u003c/p\u003e\n\u003ch1 id=\"自由形式httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003e自由形式\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003eRaku 仍然\u003cem\u003e主要是\u003c/em\u003e自由形式。但是，有一些情况下，空白的存在或缺失现在很重要。例如，在 Perl 5 中，你可以省略关键字后面的空格（例如 \u003ccode\u003ewhile($x \u0026lt; 5)\u003c/code\u003e 或 \u003ccode\u003emy($x, $y)\u003c/code\u003e）。在 Raku 中，这个空白是必需的，因此 \u003ccode\u003ewhile ($x \u0026lt; 5)\u003c/code\u003e 或 \u003ccode\u003emy ($x, $y)\u003c/code\u003e。但是，在 Raku 中，你可以完全省略括号：\u003ccode\u003ewhile $x \u0026lt; 5 \u003c/code\u003e。这适用于 \u003ccode\u003eif\u003c/code\u003e，\u003ccode\u003efor\u003c/code\u003e 等等。\u003c/p\u003e\n\u003cp\u003e奇怪的是，在 Perl 5 中，你可以在数组或散列与其下标之间以及后缀运算符之间留出空格。所以 \u003ccode\u003e$seen {$_} ++\u003c/code\u003e 是有效的。Raku 再不这样了。Raku 中现在必须是 \u003ccode\u003e%seen{$_}++\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e如果能让你感觉更好，你可以使用反斜杠来 “unspace” 空格，这样你就可以使用空格，否则它将被禁止。\u003c/p\u003e\n\u003cp\u003e有关详细信息，请参阅\u003ca href=\"https://docs.raku.org/language/5to6-nutshell#Whitespace\"\u003e空白\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"声明httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003e声明\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e正如\u003ca href=\"https://docs.raku.org/language/5to6-perlfunc\"\u003e函数\u003c/a\u003e 指南中所述，Raku 中没有 \u003ccode\u003eundef\u003c/code\u003e 。声明但未初始化的标量变量将计算其类型。换句话说，\u003ccode\u003emy $x;say $x;\u003c/code\u003e 会给你\u0026quot;(Any)\u0026quot;。\u003ccode\u003emy Int $y;say $y;\u003c/code\u003e 会给你\u0026quot;(Int)\u0026quot;。\u003c/p\u003e\n\u003ch2 id=\"注释httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003e注释\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e#\u003c/code\u003e 在 Perl 5 中开始一个运行到行尾的注释。\u003c/p\u003e\n\u003cp\u003e嵌入式注释以井号字符和反引号开头，后跟开口括号字符，并持续到匹配的闭合括号字符。像这样：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"cm\"\u003e#`( why would I ever write an inline comment here? )\u003c/span\u003e \u003cspan class=\"kt\"\u003eTrue\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003esomething stupid\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e与 Perl 5 一样，你可以使用 pod 指令在注释 \u003ccode\u003e=begin comment\u003c/code\u003e 之前和 \u003ccode\u003e=end comment\u003c/code\u003e 之后创建多行注释。\u003c/p\u003e\n\u003ch2 id=\"真和假httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003e真和假\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003ePerl 5 与 Raku 之间的一个真正区别在于，与 Perl 5 不同，Raku 将字符串\u003ccode\u003e\u0026quot;0\u0026quot;\u003c/code\u003e 视为真。数字 \u003ccode\u003e0\u003c/code\u003e 仍为 \u003ccode\u003efalse\u003c/code\u003e，你可以使用前缀 \u003ccode\u003e+\u003c/code\u003e 将字符串 \u003ccode\u003e\u0026quot;0\u0026quot;\u003c/code\u003e 强制转换为数字以使其为 \u003ccode\u003efalse\u003c/code\u003e。Raku 还具有实际的布尔类型，因此，在许多情况下，你可以使用 \u003ccode\u003eTrue\u003c/code\u003e 和 \u003ccode\u003eFalse\u003c/code\u003e，而无需担心哪些值计为 true 和 false。\u003c/p\u003e\n\u003ch2 id=\"语句修饰符httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003e语句修饰符\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e大多数情况下，语句修饰符仍然有效，但有一些例外。\u003c/p\u003e\n\u003cp\u003e首先，\u003ccode\u003efor\u003c/code\u003e 循环是 Perl 5 中已知的 \u003ccode\u003eforeach\u003c/code\u003e 循环，C 风格的 \u003ccode\u003efor\u003c/code\u003e循环不用于 Raku。要获得该行为，你需要 \u003ccode\u003eloop\u003c/code\u003e。\u003ccode\u003eloop\u003c/code\u003e 不能用作语句修饰符。\u003c/p\u003e\n\u003cp\u003e在 Raku 中，你无法使用 \u003ccode\u003edo {...} while $x\u003c/code\u003e 形式。你将需要用 \u003ccode\u003erepeat\u003c/code\u003e 替换 \u003ccode\u003edo\u003c/code\u003e 形式。\u003ccode\u003edo {...} until $x\u003c/code\u003e 类似。\u003c/p\u003e\n\u003ch2 id=\"复合语句httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003e复合语句\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003ePerl 5 的最大变化是 \u003ccode\u003egiven\u003c/code\u003e 在 Raku 中默认不是实验性质的或禁用的了。有关 \u003ccode\u003egiven\u003c/code\u003e 的详细信息，请参阅\u003ca href=\"https://docs.raku.org/language/control#given\"\u003e此页面\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"循环控制httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003e循环控制\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003enext\u003c/code\u003e，\u003ccode\u003elast\u003c/code\u003e 和 \u003ccode\u003eredo\u003c/code\u003e 在 Perl 5 到 Raku 中没有变化。\u003c/p\u003e\n\u003cp\u003e但是 \u003ccode\u003econtinue\u003c/code\u003e，在 Raku 中不存在。你将在循环体中使用 \u003ccode\u003eNEXT\u003c/code\u003e 块。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Perl 5 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u0026#39;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003enext\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_\u003c/span\u003e \u003cspan class=\"nv\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$str\u003c/span\u003e \u003cspan class=\"o\"\u003e.=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003econtinue\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$str\u003c/span\u003e \u003cspan class=\"o\"\u003e.=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Raku \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u0026#39;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003enext\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_\u003c/span\u003e \u003cspan class=\"nv\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$str\u003c/span\u003e \u003cspan class=\"o\"\u003e~=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eNEXT\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nv\"\u003e$str\u003c/span\u003e \u003cspan class=\"o\"\u003e~=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"for-循环httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003eFor 循环\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e如上所述，C 风格的 \u003ccode\u003efor\u003c/code\u003e 循环在 Raku 中不称为 \u003ccode\u003efor\u003c/code\u003e 循环。它们只是 \u003ccode\u003eloop\u003c/code\u003e 循环。要编写无限循环，你不需要使用C语言风格的 \u003ccode\u003eloop (;;) {...}\u003c/code\u003e，只是完全省略规范：\u003ccode\u003eloop {...}\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"foreach-循环httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003eForeach 循环\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e在 Perl 5 中，\u003ccode\u003efor\u003c/code\u003e 除了用于 C 风格的 \u003ccode\u003efor\u003c/code\u003e 循环之外，它还是\u003ccode\u003eforeach\u003c/code\u003e 的同义词。在 Raku 中，\u003ccode\u003efor\u003c/code\u003e 仅用于 \u003ccode\u003eforeach\u003c/code\u003e 样式的循环。\u003c/p\u003e\n\u003ch2 id=\"switch-语句httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003eSwitch 语句\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRaku 具有真实的 switch 语句，通过提供 \u003ccode\u003egiven\u003c/code\u003e 与由处理的单个情况的 \u003ccode\u003ewhen\u003c/code\u003e 和 \u003ccode\u003edefault\u003c/code\u003e。基本语法是：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003egiven\u003c/span\u003e \u003cspan class=\"n\"\u003eEXPR\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"n\"\u003eEXPR\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"n\"\u003eEXPR\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edefault\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e完整的细节可以在\u003ca href=\"https://docs.raku.org/language/control#given\"\u003e这里\u003c/a\u003e找到。\u003c/p\u003e\n\u003ch2 id=\"gotohttpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003eGoto\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egoto\u003c/code\u003e 目前尚未实施（尚未）。标签\u003cstrong\u003e已\u003c/strong\u003e实现，可用作 \u003ccode\u003enext\u003c/code\u003e，\u003ccode\u003elast\u003c/code\u003e 和 \u003ccode\u003eredo\u003c/code\u003e 的目标：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eFOO:\u003c/span\u003e                         \u003cspan class=\"c1\"\u003e# Labels end with colons, like in Perl 5 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eouter for before\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003einner for\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003elast\u003c/span\u003e \u003cspan class=\"n\"\u003eFOO\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eouter for after\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# Will not show because of the \u0026#34;last\u0026#34; \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# outer for before \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# inner for \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e有关 \u003ccode\u003egoto\u003c/code\u003e 的计划，请参阅 \u003ca href=\"https://design.raku.org/S04.html#The_goto_statement\"\u003ehttps://design.raku.org/S04.html#The_goto_statement\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"省略语句httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003e省略语句\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e...\u003c/code\u003e（以及 \u003ccode\u003e!!!\u003c/code\u003e 和 \u003ccode\u003e???\u003c/code\u003e）用于创建存根(stub)声明。这比 Perl 5 中使用的 \u003ccode\u003e...\u003c/code\u003e 要复杂得多，所以你可能想要查看 \u003ca href=\"https://design.raku.org/S06.html#Stub_declarations\"\u003ehttps://design.raku.org/S06.html#Stub_declarations\u003c/a\u003e 以了解详细信息。尽管如此，尽管它在 Raku 中的作用得到了扩展，但它似乎还没有\u003cem\u003e明显的\u003c/em\u003e理由说明它为什么不能完成它在 Perl 5 中所扮演的角色。\u003c/p\u003e\n\u003ch2 id=\"pods-嵌入式文档httpsdocsrakuorglanguage5to6-perlsyn___top\"\u003e\u003ca href=\"https://docs.raku.org/language/5to6-perlsyn#___top\"\u003ePODs: 嵌入式文档\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003ePod 已经在 Perl 5 和 Raku 之间发生了变化。可能最大的区别在于你需要将你的 pod 放在 \u003ccode\u003e=begin pod\u003c/code\u003e 和 \u003ccode\u003e=end pod\u003c/code\u003e 指令之间。这里和那里也有一些调整。例如，正如我在编写这些文档时发现的那样，垂直条（\u003ccode\u003e|\u003c/code\u003e）在 \u003ccode\u003eX\u0026lt;\u0026gt;\u003c/code\u003e 代码中很重要，并且不清楚如何将字面 \u003ccode\u003e|\u003c/code\u003e 插入他们。你最好的选择可能是使用 Raku 解释器检查你的 pod。你可以使 \u003ccode\u003e--doc\u003c/code\u003e 开关执行此操作。例如 \u003ccode\u003eraku --doc Whatever.pod\u003c/code\u003e。这将输出任何问题到标准错误。（根据你安装 raku 的方式/位置，你可能需要指定 \u003ccode\u003ePod::To::Text\u003c/code\u003e 的位置。）有关 Raku 样式 pod 的详细信息，请访问 \u003ca href=\"https://design.raku.org/S26.html\"\u003ehttps://design.raku.org/S26.html\u003c/a\u003e。\u003c/p\u003e\n","text":"描述 关于 Perl 5 和 Raku 之间差异的全面（希望）描述。\n注意 我不会详细解释 Raku 语法。本文档旨在指导你从 Perl 5 中的工作原理过渡到 Raku 中的等效工具。有关 Raku 语法的完整文档，请参阅 Raku 文档。\n自由形式 Raku 仍然主要是自由形式。但是，有一些情况下，空白的存在或缺失现在很重要。例如，在 Perl 5 中，你可以省略关键字后面的空格（例如 while($x \u0026lt; 5) 或 my($x, $y)）。在 Raku 中，这个空白是必需的，因此 while ($x \u0026lt; 5) 或 my ($x, $y)。但是，在 Raku 中，你可以完全省略括号：while $x \u0026lt; 5 。这适用于 if，for 等等。\n奇怪的是，在 Perl 5 中，你可以在数组或散列与其下标之间以及后缀运算符之间留出空格。所以 $seen {$_} ++ 是有效的。Raku 再不这样了。Raku 中现在必须是 %seen{$_}++。\n如果能让你感觉更好，你可以使用反斜杠来 “unspace” 空格，这样你就可以使用空格，否则它将被禁止。\n有关详细信息，请参阅空白。\n声明 正如函数 指南中所述，Raku 中没有 undef 。声明但未初始化的标量变量将计算其类型。换句话说，my $x;say $x; 会给你\u0026quot;(Any)\u0026quot;。my Int $y;say $y; 会给你\u0026quot;(Int)\u0026quot;。\n注释 # 在 Perl 5 中开始一个运行到行尾的注释。\n嵌入式注释以井号字符和反引号开头，后跟开口括号字符，并持续到匹配的闭合括号字符。像这样：\nif #`( why would I ever write an inline comment here? ) True { say \u0026#34;something stupid\u0026#34;; } 与 Perl 5 一样，你可以使用 pod 指令在注释 =begin comment 之前和 =end comment 之后创建多行注释。\n真和假 Perl 5 与 Raku 之间的一个真正区别在于，与 Perl 5 不同，Raku 将字符串\u0026quot;0\u0026quot; 视为真。数字 0 仍为 false，你可以使用前缀 + 将字符串 \u0026quot;0\u0026quot; 强制转换为数字以使其为 false。Raku 还具有实际的布尔类型，因此，在许多情况下，你可以使用 True 和 False，而无需担心哪些值计为 true 和 false。\n语句修饰符 大多数情况下，语句修饰符仍然有效，但有一些例外。\n首先，for 循环是 Perl 5 中已知的 foreach 循环，C 风格的 for循环不用于 Raku。要获得该行为，你需要 loop。loop 不能用作语句修饰符。\n在 Raku 中，你无法使用 do {...} while $x 形式。你将需要用 repeat 替换 do 形式。do {...} until $x 类似。\n复合语句 Perl 5 的最大变化是 given 在 Raku 中默认不是实验性质的或禁用的了。有关 given 的详细信息，请参阅此页面。\n循环控制 next，last 和 redo 在 Perl 5 到 Raku 中没有变化。\n但是 continue，在 Raku 中不存在。你将在循环体中使用 NEXT 块。\n# Perl 5 my $str = \u0026#39;\u0026#39;; for (1..5) { next if $_ % 2 == 1; $str .= $_; } continue { $str .= \u0026#39;:\u0026#39; } # Raku my $str = \u0026#39;\u0026#39;; for 1..5 { next if $_ % 2 == 1; $str ~= $_; NEXT { $str ~= \u0026#39;:\u0026#39; } } For 循环 如上所述，C 风格的 for 循环在 Raku 中不称为 for 循环。它们只是 loop 循环。要编写无限循环，你不需要使用C语言风格的 loop (;;) {...}，只是完全省略规范：loop {...}\nForeach 循环 在 Perl 5 中，for 除了用于 C 风格的 for 循环之外，它还是foreach 的同义词。在 Raku 中，for 仅用于 foreach 样式的循环。\nSwitch 语句 Raku 具有真实的 switch 语句，通过提供 given 与由处理的单个情况的 when 和 default。基本语法是：\ngiven EXPR { when EXPR { ... } when EXPR { ... } default { ... } } 完整的细节可以在这里找到。\nGoto goto 目前尚未实施（尚未）。标签已实现，可用作 next，last 和 redo 的目标：\nFOO: # Labels end with colons, like in Perl 5 for ^10 { say \u0026#34;outer for before\u0026#34;; for ^10 { say \u0026#34;inner for\u0026#34;; last FOO; } say \u0026#34;outer for after\u0026#34;; # Will not show because of the \u0026#34;last\u0026#34; } # outer for before # inner for 有关 goto 的计划，请参阅 https://design.raku.org/S04.html#The_goto_statement。\n省略语句 ...（以及 !!! 和 ???）用于创建存根(stub)声明。这比 Perl 5 中使用的 ... 要复杂得多，所以你可能想要查看 https://design.raku.org/S06.html#Stub_declarations 以了解详细信息。尽管如此，尽管它在 Raku 中的作用得到了扩展，但它似乎还没有明显的理由说明它为什么不能完成它在 Perl 5 中所扮演的角色。\nPODs: 嵌入式文档 Pod 已经在 Perl 5 和 Raku 之间发生了变化。可能最大的区别在于你需要将你的 pod 放在 =begin pod 和 =end pod 指令之间。这里和那里也有一些调整。例如，正如我在编写这些文档时发现的那样，垂直条（|）在 X\u0026lt;\u0026gt; 代码中很重要，并且不清楚如何将字面 | 插入他们。你最好的选择可能是使用 Raku 解释器检查你的 pod。你可以使 --doc 开关执行此操作。例如 raku --doc Whatever.pod。这将输出任何问题到标准错误。（根据你安装 raku 的方式/位置，你可能需要指定 Pod::To::Text 的位置。）有关 Raku 样式 pod 的详细信息，请访问 https://design.raku.org/S26.html。\n"},"name":"Perl 5 到 Raku 指南 - 语法","published":"2018-10-14T21:13:31+08:00","summary":"描述 关于 Perl 5 和 Raku 之间差异的全面（希望）描述。\n注意 我不会详细解释 Raku 语法。本文档旨在指导你从 Perl 5 中的工作原理过渡到 Raku 中的等效工具。有关 Raku 语法的完整文档，请参阅 Raku 文档。\n自由形式 Raku 仍然主要是自由形式。但是，有一些情况下，空白的存在或缺失现在很重要。例如，在 Perl 5 中，你可以省略关键字后面的空格（例如 while($x \u0026lt; 5) 或 my($x, $y)）。在 Raku 中，这个空白是必需的，因此 while ($x \u0026lt; 5) 或 my ($x, $y)。但是，在 Raku 中，你可以完全省略括号：while $x \u0026lt; 5 。这适用于 if，for 等等。\n奇怪的是，在 Perl 5 中，你可以在数组或散列与其下标之间以及后缀运算符之间留出空格。所以 $seen {$_} ++ 是有效的。Raku 再不这样了。Raku 中现在必须是 %seen{$_}++。\n如果能让你感觉更好，你可以使用反斜杠来 “unspace” 空格，这样你就可以使用空格，否则它将被禁止。\n有关详细信息，请参阅空白。\n声明 正如函数 指南中所述，Raku 中没有 undef 。声明但未初始化的标量变量将计算其类型。换句话说，my $x;say $x; 会给你\u0026quot;(Any)\u0026quot;。my Int $y;say $y; 会给你\u0026quot;(Int)\u0026quot;。","type":"entry","url":"https://ohmycloud.github.io/posts/7.perl-5-to-perl-6-guide---syntax/"}