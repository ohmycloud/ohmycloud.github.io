{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003cp\u003e该页面是关于在 Raku 上下文中 \u003ca href=\"https://en.wikipedia.org/wiki/Computer_performance\"\u003e计算机性能\u003c/a\u003e 的。\u003c/p\u003e\n\u003ch1 id=\"首先剖析你的代码httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e首先,剖析你的代码\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003e确保你没有在错误的代码上浪费时间\u003c/strong\u003e: 通过剖析你的代码的性能以从识别你的 \u003ca href=\"https://en.wikiquote.org/wiki/Donald_Knuth\"\u003e\u0026ldquo;临界 3%\u0026rdquo;\u003c/a\u003e 开始。本文档的其余部分将向您展示如何执行此操作。\u003c/p\u003e\n\u003ch2 id=\"time-with-now---init-nowhttpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003eTime with \u003ccode\u003enow - INIT now\u003c/code\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e对于 \u003ccode\u003enow - INIT now\u003c/code\u003e 形式的表达式, 其中 \u003ccode\u003eINIT\u003c/code\u003e 是一个 \u003ca href=\"https://docs.raku.org/language/phasers\"\u003eRaku 程序中运行的 phase\u003c/a\u003e, 为计时代码片段提供了一个很好的习惯用法。\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003em: your code goes here\u003c/code\u003e \u003ca href=\"https://docs.raku.org/language/glossary#camelia\"\u003eraku 频道 evalbot\u003c/a\u003e 来写出这样的行:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003em\u003c/span\u003e\u003cspan class=\"err\"\u003e:\u003c/span\u003e \u003cspan class=\"err\"\u003esay\u003c/span\u003e \u003cspan class=\"err\"\u003enow\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u003c/span\u003e\u003cspan class=\"sr\"\u003e INIT now\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003erakudo\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u003c/span\u003e\u003cspan class=\"nf\"\u003emoar\u003c/span\u003e \u003cspan class=\"n\"\u003eabc1234:\u003c/span\u003e \u003cspan class=\"n\"\u003eOUTPUT\u003c/span\u003e\u003cspan class=\"p\"\u003e«\u003c/span\u003e\u003cspan class=\"s2\"\u003e0.0018558␤\u003c/span\u003e\u003cspan class=\"p\"\u003e»\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eINIT\u003c/code\u003e 左边的 \u003ccode\u003enow\u003c/code\u003e 比 \u003ccode\u003eINIT\u003c/code\u003e 右边的 \u003ccode\u003enow\u003c/code\u003e \u003cem\u003e晚\u003c/em\u003e运行了 0.0018558 秒, 因为后者在\u003ca href=\"https://docs.raku.org/language/phasers#INIT\"\u003eINIT phase\u003c/a\u003e 期间出现。\u003c/p\u003e\n\u003ch2 id=\"本地剖析httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e本地剖析\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e当使用 \u003ca href=\"https://moarvm.org/\"\u003eMoarVM\u003c/a\u003e 后端时, \u003ca href=\"https://rakudo.org/\"\u003eRakudo\u003c/a\u003e 编译器的 \u003ccode\u003e--profile\u003c/code\u003e 命令行选项将剖析数据写到一个 HTML 文件中。\u003c/p\u003e\n\u003cp\u003e此文件将打开“概述”部分，该部分提供有关程序如何运行的一些总体数据，例如总运行时间，执行垃圾回收所花费的时间。您将获得的一个重要信息是被解释的总调用帧（即，块）的百分比（最慢，红色），拼写（更快，橙色）和 jitted（最快，绿色）。\u003c/p\u003e\n\u003cp\u003e下一节“常规”可能是您花费最多时间的地方。它有一个可排序和可过滤的例程（或块）名称+文件+行的表，它运行的次数，包含时间（在该例程中花费的时间+从它调用的所有例程中花费的时间），独占时间（仅在该例程中花费的时间），以及它是否被解释，拼写或jitted（与“概述”页面相同的颜色代码）。按专属时间排序是了解从哪里开始优化的好方法。文件名从 \u003ccode\u003eSETTING::src/core/\u003c/code\u003e 或 \u003ccode\u003egen/moar/\u003c/code\u003e 开始的例程来自编译器，从您自己的代码中看到的东西的一个好方法是将您描述的脚本的文件名放在“名称”中“ 搜索框。\u003c/p\u003e\n\u003cp\u003e“调用图”部分给出了与“例程”部分大致相同信息的火焰图表示。\u003c/p\u003e\n\u003cp\u003e“分配”部分为您提供有关分配的不同类型的数量以及分配的例程的信息。\u003c/p\u003e\n\u003cp\u003e“GC”部分为您提供有关所发生的所有垃圾收集的详细信息。\u003c/p\u003e\n\u003cp\u003e“OSR/Deopt”部分为您提供有关堆栈替换（OSR）的信息，这是在将例程从“已解释”升级为“拼写”或“jitted”时。当拼写或jitted代码必须被“降级”为被解释时，De是相反的。\u003c/p\u003e\n\u003cp\u003e如果配置文件数据太大，浏览器可能需要很长时间才能打开该文件。在这种情况下，使用 \u003ccode\u003e--profile-filename\u003c/code\u003e 选项输出到扩展名为 \u003ccode\u003e.json\u003c/code\u003e 的文件，然后使用 \u003ca href=\"https://github.com/tadzik/p6profiler-qt\"\u003eQt\u003c/a\u003e 查看器打开该文件。\u003c/p\u003e\n\u003cp\u003e要处理更大的配置文件，请输出到扩展名为 \u003ccode\u003e.sql\u003c/code\u003e 的文件。这将把配置文件数据写成一系列SQL语句，适合在 SQLite 中打开。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# create a profile \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eraku\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"n\"\u003eprofile\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"n\"\u003eprofile-filename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003edemo\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esql\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"no\"\u003ee\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esay (^20).combinations(3).elems\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# create a SQLite database \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esqlite3\u003c/span\u003e \u003cspan class=\"n\"\u003edemo\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esqlite\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# load the profile data \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esqlite\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eread\u003c/span\u003e \u003cspan class=\"n\"\u003edemo\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esql\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# the query below is equivalent to the default view of the \u0026#34;Routines\u0026#34; tab in the HTML profile \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esqlite\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eselect\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"n\"\u003ecase\u003c/span\u003e \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"nb\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan class=\"nb\"\u003ethen\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;anon\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"nb\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"nb\"\u003eend\u003c/span\u003e \u003cspan class=\"n\"\u003eas\u003c/span\u003e \u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nb\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003efile\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nb\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eline\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nb\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eentries\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003eentries\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nb\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecase\u003c/span\u003e \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"n\"\u003erec_depth\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"nb\"\u003ethen\u003c/span\u003e \u003cspan class=\"n\"\u003einclusive_time\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"nb\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003einclusive_time\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nb\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexclusive_time\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003eexclusive_time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003efrom\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"n\"\u003ecalls\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"n\"\u003eroutines\u003c/span\u003e \u003cspan class=\"nb\"\u003er\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eid\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003egroup\u003c/span\u003e \u003cspan class=\"n\"\u003eby\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eid\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"n\"\u003eby\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"n\"\u003einclusive_time\u003c/span\u003e \u003cspan class=\"nb\"\u003edesc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elimit\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e要了解如何解释配置文件信息，请使用 evalbot（如上所述）并在 IRC 频道上提问。\u003c/p\u003e\n\u003ch2 id=\"profile-编译httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003eProfile 编译\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIf you want to profile the time and memory it takes to compile your code, use Rakudo\u0026rsquo;s \u003ccode\u003e--profile-compile\u003c/code\u003e or \u003ccode\u003e--profile-stage\u003c/code\u003eoptions.\n如果要分析编译代码所需的时间和内存，请使用 Rakudo 的 \u003ccode\u003e--profile-compile\u003c/code\u003e 或 \u003ccode\u003e--profile-stage\u003c/code\u003e 选项。\u003c/p\u003e\n\u003ch2 id=\"创建或查看基准httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e创建或查看基准\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e使用 \u003ca href=\"https://github.com/japhb/raku-bench\"\u003eraku-bench\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e如果您为多个编译器（通常是 Perl 5，Raku 或 NQP 的版本）运行 raku-bench，则每个编译器的结果将在视觉上覆盖在相同的图形上，以便快速轻松地进行比较。\u003c/p\u003e\n\u003ch2 id=\"share-problemshttpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003eShare problems\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eOnce you\u0026rsquo;ve used the above techniques to identify the code to improve, you can then begin to address (and share) the problem with others:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对于每个问题，将其提取到单行或 gist，并提供性能数字或使片段足够小，以便可以使用 \u003ccode\u003eprof-m: your code or gist URL goes here\u003c/code\u003e 进行分析。\u003c/li\u003e\n\u003cli\u003e考虑你需要/想要的最低速度增加（或减少或减少什么），并考虑与实现该目标相关的成本。在人们的时间和精力方面，改进的价值是什么？\u003c/li\u003e\n\u003cli\u003e让其他人知道您的 Raku 用例是在生产环境中还是仅仅是为了好玩。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"解决问题httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e解决问题\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e这需要重复：\u003cstrong\u003e确保你没有浪费时间在错误的代码上\u003c/strong\u003e。首先确定代码的“\u003ca href=\"https://en.wikiquote.org/wiki/Donald_Knuth\"\u003e关键3％\u003c/a\u003e”。\u003c/p\u003e\n\u003ch2 id=\"逐行httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e逐行\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e尝试逐行改进代码的快速，有趣和高效的方法是使用 raku \u003ca href=\"https://docs.raku.org/language/glossary#IRC\"\u003eevalbot\u003c/a\u003e \u003ca href=\"https://docs.raku.org/language/glossary#camelia\"\u003ecamelia\u003c/a\u003e 与其他人协作。\u003c/p\u003e\n\u003ch2 id=\"逐个例程httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e逐个例程\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e使用 multidispatch，您可以在现有的例程“旁边”添加新的例程变体：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# existing code generically matches a two arg foo call: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eAny\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# new variant takes over for a foo(\u0026#34;quux\u0026#34;, 42) call: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003equux\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e拥有多个 \u003ccode\u003efoo\u003c/code\u003e 定义的调用开销通常是微不足道的（虽然请参见下面的讨论），因此如果您的新定义比以前存在的定义集更有效地处理其特定情况，那么您可能只是使您的代码更有效率对于那种情况。\u003c/p\u003e\n\u003ch2 id=\"加速类型检测和调用解析httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e加速类型检测和调用解析\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e大多数 \u003ca href=\"https://docs.raku.org/type/Signature#Type_constraints\"\u003ewhere 子句\u003c/a\u003e  - 以及大多数\u003ca href=\"https://design.raku.org/S12.html#Types_and_Subtypes\"\u003e子集\u003c/a\u003e  - 强制动态（运行时）类型检查和调用解析它可能匹配的任何调用。这比编译时更慢，或者至少晚一些。\u003c/p\u003e\n\u003cp\u003e方法调用通常尽可能晚地解析（在运行时动态），而 sub 调用通常在编译时静态解析。\u003c/p\u003e\n\u003ch2 id=\"选择更好的算法httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e选择更好的算法\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e无论语言或编译器如何，提高性能的最可靠技术之一是选择更合适的算法。\u003c/p\u003e\n\u003cp\u003e一个典型的例子是 \u003ca href=\"https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm\"\u003eBoyer-Moore\u003c/a\u003e。要匹配大字符串中的小字符串，一个明显的方法是比较两个字符串的第一个字符然后，如果它们匹配，则比较第二个字符，或者，如果它们不匹配，则比较第一个字符大字符串中第二个字符的小字符串的字符，依此类推。相反，Boyer-Moore 算法首先将小字符串的 \u003cem\u003elast\u003c/em\u003e 字符与大字符串中相应定位的字符进行比较。对于大多数字符串，Boyer-Moore 算法在算法上接近 N 倍，其中 N 是小字符串的长度。\u003c/p\u003e\n\u003cp\u003e接下来的几节讨论了算法改进的两大类，这些类别在 Raku 中特别容易实现。有关这个一般主题的更多信息，请阅读有关\u003ca href=\"https://en.wikipedia.org/wiki/Algorithmic_efficiency\"\u003e算法效率\u003c/a\u003e的维基百科页面，尤其是接近结尾的“另请参阅”部分。\u003c/p\u003e\n\u003ch3 id=\"将顺序阻塞代码更改为并行非阻塞httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e将顺序/阻塞代码更改为并行/非阻塞\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e这是另一个非常重要的算法改进类。\u003c/p\u003e\n\u003cp\u003e查看幻灯片 \u003ca href=\"https://jnthn.net/papers/2015-yapcasia-concurrency.pdf#page=17\"\u003eRaku 中的并行、并发和异步\u003c/a\u003e 和 \u003ca href=\"https://www.youtube.com/watch?v=JpqnNCx7wVY\u0026amp;list=PLRuESFRW2Fa77XObvk7-BYVFwobZHdXdK\u0026amp;index=8\"\u003e对应的视频\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"使用已有的高性能代码httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e使用已有的高性能代码\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e您可以在 Raku 中使用大量高性能 C 库，而 \u003ca href=\"https://docs.raku.org/language/nativecall\"\u003eNativeCall\u003c/a\u003e 可以轻松地为它们创建包装器。还有对 C++ 库的实验性支持。\u003c/p\u003e\n\u003cp\u003e如果要\u003ca href=\"https://stackoverflow.com/a/27206428/1077672\"\u003e在 Raku 中使用 Perl 5 模块\u003c/a\u003e，请混合使用 Raku 类型和\u003ca href=\"https://docs.raku.org/language/mop\"\u003e元对象协议\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e更一般地说，Raku 旨在与其他语言平滑地互操作，并且有许多模块\u003ca href=\"https://modules.raku.org/#q=inline\"\u003e旨在促进使用来自其他语言的库\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"让-rakudo-编译器生成更快的代码httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e让 Rakudo 编译器生成更快的代码\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e到目前为止，编译器的重点是正确性，而不是它生成代码的速度有多快，或者生成的代码运行速度有多快。但是预计会发生变化，最终\u0026hellip;\u0026hellip;你可以在 freenode IRC 频道#raku 和 #moarvm 上与编译器开发人员讨论预期的内容。更好的是，你可以自己贡献代码：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRakudo 主要用 Raku 编写。因此，如果您可以编写 Raku，那么您可以破解编译器，包括优化任何影响代码速度的大量现有高级代码（以及其他所有代码）。\u003c/li\u003e\n\u003cli\u003e大多数编译器的其余部分都是用一种名为 \u003ca href=\"https://github.com/raku/nqp\"\u003eNQP\u003c/a\u003e 的小语言编写的，它基本上是 Raku 的一个子集。如果你可以编写 Raku，你也可以很容易地学会使用和改进中级 NQP 代码，至少从一种纯粹的语言观点。要深入了解 NQP 和 Rakudo 的内涵，请从 \u003ca href=\"https://edumentab.github.io/rakudo-and-nqp-internals-course/\"\u003eNQP 和内部课程\u003c/a\u003e开始。\u003c/li\u003e\n\u003cli\u003e如果低级别的 C 黑客是你的乐趣，请查看 \u003ca href=\"https://moarvm.org/\"\u003eMoarVM\u003c/a\u003e 并访问 freenode IRC 频道 #moarvm（\u003ca href=\"https://colabti.org/irclogger/irclogger_logs/moarvm\"\u003e日志\u003c/a\u003e）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"仍然需要更多想法httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e仍然需要更多想法?\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e此页面中尚未涵盖的一些已知当前 Rakudo 性能缺陷包括使用 \u003ccode\u003egather/take\u003c/code\u003e，\u003ccode\u003ejunctions\u003c/code\u003e，正则表达式和字符串处理。\u003c/p\u003e\n\u003cp\u003e如果您认为某个主题需要在此页面上进行更多报道，请提交 PR 或告诉某人您的想法。谢谢。 :)\u003c/p\u003e\n\u003ch1 id=\"没有得到你需要想要的结果httpsdocsrakuorglanguageperformance___top\"\u003e\u003ca href=\"https://docs.raku.org/language/performance#___top\"\u003e没有得到你需要/想要的结果?\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e如果您已尝试此页面上的所有内容无效，请考虑使用 #raku 上的编译器开发人员进行讨论，以便我们可以从您的用例中了解到目前为止您已经发现的内容。\u003c/p\u003e\n\u003cp\u003e一旦开发人员知道您的困境，请留出足够的时间做出明智的回应（几天或几周，具体取决于问题的确切性质和潜在的解决方案）。\u003c/p\u003e\n\u003cp\u003e如果还没有成功，请考虑在继续之前提交有关您在我们的\u003ca href=\"https://github.com/raku/user-experience/issues\"\u003e用户体验\u003c/a\u003e仓库中的体验的问题。\u003c/p\u003e\n\u003cp\u003e谢谢。 :)\u003c/p\u003e\n","text":"该页面是关于在 Raku 上下文中 计算机性能 的。\n首先,剖析你的代码 确保你没有在错误的代码上浪费时间: 通过剖析你的代码的性能以从识别你的 \u0026ldquo;临界 3%\u0026rdquo; 开始。本文档的其余部分将向您展示如何执行此操作。\nTime with now - INIT now 对于 now - INIT now 形式的表达式, 其中 INIT 是一个 Raku 程序中运行的 phase, 为计时代码片段提供了一个很好的习惯用法。\n使用 m: your code goes here raku 频道 evalbot 来写出这样的行:\nm: say now - INIT now rakudo-moar abc1234: OUTPUT«0.0018558␤» INIT 左边的 now 比 INIT 右边的 now 晚运行了 0.0018558 秒, 因为后者在INIT phase 期间出现。\n本地剖析 当使用 MoarVM 后端时, Rakudo 编译器的 --profile 命令行选项将剖析数据写到一个 HTML 文件中。\n此文件将打开“概述”部分，该部分提供有关程序如何运行的一些总体数据，例如总运行时间，执行垃圾回收所花费的时间。您将获得的一个重要信息是被解释的总调用帧（即，块）的百分比（最慢，红色），拼写（更快，橙色）和 jitted（最快，绿色）。\n下一节“常规”可能是您花费最多时间的地方。它有一个可排序和可过滤的例程（或块）名称+文件+行的表，它运行的次数，包含时间（在该例程中花费的时间+从它调用的所有例程中花费的时间），独占时间（仅在该例程中花费的时间），以及它是否被解释，拼写或jitted（与“概述”页面相同的颜色代码）。按专属时间排序是了解从哪里开始优化的好方法。文件名从 SETTING::src/core/ 或 gen/moar/ 开始的例程来自编译器，从您自己的代码中看到的东西的一个好方法是将您描述的脚本的文件名放在“名称”中“ 搜索框。\n“调用图”部分给出了与“例程”部分大致相同信息的火焰图表示。\n“分配”部分为您提供有关分配的不同类型的数量以及分配的例程的信息。\n“GC”部分为您提供有关所发生的所有垃圾收集的详细信息。\n“OSR/Deopt”部分为您提供有关堆栈替换（OSR）的信息，这是在将例程从“已解释”升级为“拼写”或“jitted”时。当拼写或jitted代码必须被“降级”为被解释时，De是相反的。\n如果配置文件数据太大，浏览器可能需要很长时间才能打开该文件。在这种情况下，使用 --profile-filename 选项输出到扩展名为 .json 的文件，然后使用 Qt 查看器打开该文件。\n要处理更大的配置文件，请输出到扩展名为 .sql 的文件。这将把配置文件数据写成一系列SQL语句，适合在 SQLite 中打开。\n# create a profile raku --profile --profile-filename=demo.sql -e \u0026#39;say (^20).combinations(3).elems\u0026#39; # create a SQLite database sqlite3 demo.sqlite # load the profile data sqlite\u0026gt; .read demo.sql # the query below is equivalent to the default view of the \u0026#34;Routines\u0026#34; tab in the HTML profile sqlite\u0026gt; select case when r.name = \u0026#34;\u0026#34; then \u0026#34;\u0026lt;anon\u0026gt;\u0026#34; else r.name end as name, r.file, r.line, sum(entries) as entries, sum(case when rec_depth = 0 then inclusive_time else 0 end) as inclusive_time, sum(exclusive_time) as exclusive_time from calls c, routines r where c.id = r.id group by c.id order by inclusive_time desc limit 30; 要了解如何解释配置文件信息，请使用 evalbot（如上所述）并在 IRC 频道上提问。\nProfile 编译 If you want to profile the time and memory it takes to compile your code, use Rakudo\u0026rsquo;s --profile-compile or --profile-stageoptions. 如果要分析编译代码所需的时间和内存，请使用 Rakudo 的 --profile-compile 或 --profile-stage 选项。\n创建或查看基准 使用 raku-bench。\n如果您为多个编译器（通常是 Perl 5，Raku 或 NQP 的版本）运行 raku-bench，则每个编译器的结果将在视觉上覆盖在相同的图形上，以便快速轻松地进行比较。\nShare problems Once you\u0026rsquo;ve used the above techniques to identify the code to improve, you can then begin to address (and share) the problem with others:\n对于每个问题，将其提取到单行或 gist，并提供性能数字或使片段足够小，以便可以使用 prof-m: your code or gist URL goes here 进行分析。 考虑你需要/想要的最低速度增加（或减少或减少什么），并考虑与实现该目标相关的成本。在人们的时间和精力方面，改进的价值是什么？ 让其他人知道您的 Raku 用例是在生产环境中还是仅仅是为了好玩。 解决问题 这需要重复：确保你没有浪费时间在错误的代码上。首先确定代码的“关键3％”。\n逐行 尝试逐行改进代码的快速，有趣和高效的方法是使用 raku evalbot camelia 与其他人协作。\n逐个例程 使用 multidispatch，您可以在现有的例程“旁边”添加新的例程变体：\n# existing code generically matches a two arg foo call: multi sub foo(Any $a, Any $b) { ... } # new variant takes over for a foo(\u0026#34;quux\u0026#34;, 42) call: multi sub foo(\u0026#34;quux\u0026#34;, Int $b) { ... } 拥有多个 foo 定义的调用开销通常是微不足道的（虽然请参见下面的讨论），因此如果您的新定义比以前存在的定义集更有效地处理其特定情况，那么您可能只是使您的代码更有效率对于那种情况。\n加速类型检测和调用解析 大多数 where 子句 - 以及大多数子集 - 强制动态（运行时）类型检查和调用解析它可能匹配的任何调用。这比编译时更慢，或者至少晚一些。\n方法调用通常尽可能晚地解析（在运行时动态），而 sub 调用通常在编译时静态解析。\n选择更好的算法 无论语言或编译器如何，提高性能的最可靠技术之一是选择更合适的算法。\n一个典型的例子是 Boyer-Moore。要匹配大字符串中的小字符串，一个明显的方法是比较两个字符串的第一个字符然后，如果它们匹配，则比较第二个字符，或者，如果它们不匹配，则比较第一个字符大字符串中第二个字符的小字符串的字符，依此类推。相反，Boyer-Moore 算法首先将小字符串的 last 字符与大字符串中相应定位的字符进行比较。对于大多数字符串，Boyer-Moore 算法在算法上接近 N 倍，其中 N 是小字符串的长度。\n接下来的几节讨论了算法改进的两大类，这些类别在 Raku 中特别容易实现。有关这个一般主题的更多信息，请阅读有关算法效率的维基百科页面，尤其是接近结尾的“另请参阅”部分。\n将顺序/阻塞代码更改为并行/非阻塞 这是另一个非常重要的算法改进类。\n查看幻灯片 Raku 中的并行、并发和异步 和 对应的视频。\n使用已有的高性能代码 您可以在 Raku 中使用大量高性能 C 库，而 NativeCall 可以轻松地为它们创建包装器。还有对 C++ 库的实验性支持。\n如果要在 Raku 中使用 Perl 5 模块，请混合使用 Raku 类型和元对象协议。\n更一般地说，Raku 旨在与其他语言平滑地互操作，并且有许多模块旨在促进使用来自其他语言的库。\n让 Rakudo 编译器生成更快的代码 到目前为止，编译器的重点是正确性，而不是它生成代码的速度有多快，或者生成的代码运行速度有多快。但是预计会发生变化，最终\u0026hellip;\u0026hellip;你可以在 freenode IRC 频道#raku 和 #moarvm 上与编译器开发人员讨论预期的内容。更好的是，你可以自己贡献代码：\nRakudo 主要用 Raku 编写。因此，如果您可以编写 Raku，那么您可以破解编译器，包括优化任何影响代码速度的大量现有高级代码（以及其他所有代码）。 大多数编译器的其余部分都是用一种名为 NQP 的小语言编写的，它基本上是 Raku 的一个子集。如果你可以编写 Raku，你也可以很容易地学会使用和改进中级 NQP 代码，至少从一种纯粹的语言观点。要深入了解 NQP 和 Rakudo 的内涵，请从 NQP 和内部课程开始。 如果低级别的 C 黑客是你的乐趣，请查看 MoarVM 并访问 freenode IRC 频道 #moarvm（日志）。 仍然需要更多想法? 此页面中尚未涵盖的一些已知当前 Rakudo 性能缺陷包括使用 gather/take，junctions，正则表达式和字符串处理。\n如果您认为某个主题需要在此页面上进行更多报道，请提交 PR 或告诉某人您的想法。谢谢。 :)\n没有得到你需要/想要的结果? 如果您已尝试此页面上的所有内容无效，请考虑使用 #raku 上的编译器开发人员进行讨论，以便我们可以从您的用例中了解到目前为止您已经发现的内容。\n一旦开发人员知道您的困境，请留出足够的时间做出明智的回应（几天或几周，具体取决于问题的确切性质和潜在的解决方案）。\n如果还没有成功，请考虑在继续之前提交有关您在我们的用户体验仓库中的体验的问题。\n谢谢。 :)\n"},"name":"性能","published":"2018-12-01T21:13:31+08:00","summary":"该页面是关于在 Raku 上下文中 计算机性能 的。\n首先,剖析你的代码 确保你没有在错误的代码上浪费时间: 通过剖析你的代码的性能以从识别你的 \u0026ldquo;临界 3%\u0026rdquo; 开始。本文档的其余部分将向您展示如何执行此操作。\nTime with now - INIT now 对于 now - INIT now 形式的表达式, 其中 INIT 是一个 Raku 程序中运行的 phase, 为计时代码片段提供了一个很好的习惯用法。\n使用 m: your code goes here raku 频道 evalbot 来写出这样的行:\nm: say now - INIT now rakudo-moar abc1234: OUTPUT«0.0018558␤» INIT 左边的 now 比 INIT 右边的 now 晚运行了 0.0018558 秒, 因为后者在INIT phase 期间出现。\n本地剖析 当使用 MoarVM 后端时, Rakudo 编译器的 --profile 命令行选项将剖析数据写到一个 HTML 文件中。","type":"entry","url":"https://ohmycloud.github.io/posts/56.performance/"}