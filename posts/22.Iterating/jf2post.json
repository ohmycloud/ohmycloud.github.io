{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003ch2 id=\"iterator-和-iterable-角色\"\u003eIterator 和 Iterable 角色\u003c/h2\u003e\n\u003cp\u003eRaku 是一种函数式语言，但在处理复杂的数据结构时，函数需要保持住。特别是，他们需要一个可以应用于所有这些界面的统一接口。此接口由 \u003ca href=\"https://docs.raku.org/type/Iterator\"\u003eIterator\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/Iterable\"\u003eIterable\u003c/a\u003e 角色提供。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eIterable\u003c/code\u003e 角色相对简单。它为迭代器方法提供了一个存根，该方法实际上是由诸如 \u003ccode\u003efor\u003c/code\u003e 之类的语句使用的。 \u003ccode\u003efor\u003c/code\u003e 会在它前面的变量上调用 \u003ccode\u003e.iterator\u003c/code\u003e，然后为每个项目运行一次块。其他方法（如数组赋值）将使 \u003ccode\u003eIterable\u003c/code\u003e 类以相同的方式运行。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eDNA\u003c/span\u003e \u003cspan class=\"k\"\u003edoes\u003c/span\u003e \u003cspan class=\"kt\"\u003eIterable\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.chain\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nb\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$chain\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                       \u003cspan class=\"nv\"\u003e$chain\u003c/span\u003e \u003cspan class=\"o\"\u003e~~\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"ni\"\u003e^^\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;[\u003c/span\u003e\u003cspan class=\"sr\"\u003eACGT\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"ni\"\u003e$$\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                       \u003cspan class=\"nv\"\u003e$chain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ebless\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$chain\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nb\"\u003eiterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDNA:D:\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.chain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecomb\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003erotor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eiterator\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@longer-chain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e  \u003cspan class=\"n\"\u003eDNA\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eACGTACGTT\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@longer-chain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eperl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: «[(\u0026#34;A\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;G\u0026#34;), (\u0026#34;T\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;C\u0026#34;), (\u0026#34;G\u0026#34;, \u0026#34;T\u0026#34;, \u0026#34;T\u0026#34;)]␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e  \u003cspan class=\"nv\"\u003e@longer-chain\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u0026#34;)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e|\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;);\u003c/span\u003e \u003cspan class=\"c1\"\u003e#OUTPUT: «ACG|TAC|GTT␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个示例中，它是 \u003ca href=\"https://docs.raku.org/type/Iterable\"\u003eIterable\u003c/a\u003e 中示例的扩展，显示了如何调用 \u003ccode\u003e.iterator\u003c/code\u003e，只是在将创建的对象分配给\u003ca href=\"https://docs.raku.org/type/Positional\"\u003e位置\u003c/a\u003e变量 \u003ccode\u003e@long-chain\u003c/code\u003e 时调用此方法;这个变量是一个数组，我们在最后一个例子中对它进行操作。\u003c/p\u003e\n\u003cp\u003e（可能有点容易混淆）\u003ccode\u003eIterator\u003c/code\u003e 角色比 \u003ccode\u003eIterable\u003c/code\u003e 更复杂一点。首先，它提供了一个常量 \u003ccode\u003eIterationEnd\u003c/code\u003e，但它提供了一系列方法，如 \u003ccode\u003e.pull-one\u003c/code\u003e，它允许在几个上下文中进行更精细的迭代操作：添加或删除项目，或跳过它们以访问其他项目。实际上，该角色为所有其他方法提供了一个默认实现，因此唯一需要定义的方法就是 \u003ccode\u003epull-one\u003c/code\u003e，其中只提供了一个 \u003ccode\u003estub\u003c/code\u003e。虽然 \u003ccode\u003eIterable\u003c/code\u003e 提供了高级变量循环，\u003ccode\u003eIterator\u003c/code\u003e 提供了在循环的每次迭代中调用的低级函数。让我们用这个角色扩展前面的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eDNA\u003c/span\u003e \u003cspan class=\"k\"\u003edoes\u003c/span\u003e \u003cspan class=\"kt\"\u003eIterable\u003c/span\u003e \u003cspan class=\"k\"\u003edoes\u003c/span\u003e \u003cspan class=\"kt\"\u003eIterator\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.chain\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$!index\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nb\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$chain\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                       \u003cspan class=\"nv\"\u003e$chain\u003c/span\u003e \u003cspan class=\"o\"\u003e~~\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"ni\"\u003e^^\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;[\u003c/span\u003e\u003cspan class=\"sr\"\u003eACGT\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"ni\"\u003e$$\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                       \u003cspan class=\"nv\"\u003e$chain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ebless\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$chain\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nb\"\u003eiterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"nb\"\u003eself\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nb\"\u003epull-one\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"k\"\u003e--\u0026gt;\u003c/span\u003e \u003cspan class=\"kt\"\u003eMu\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$!index\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.chain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$codon\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.chain\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecomb\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003erotor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$!index\u003c/span\u003e \u003cspan class=\"ow\"\u003ediv\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$!index\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$codon\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eIterationEnd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eDNA\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eGAATCC\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «(G A A)␤(T C C)␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们声明一个 \u003ccode\u003eDNA\u003c/code\u003e 类，它扮演两个角色，\u003ccode\u003eIterator\u003c/code\u003e 和 \u003ccode\u003eIterable\u003c/code\u003e;该类将包含一个字符串，该字符串将被约束为长度为3的倍数且仅由 ACGT 组成。我们先来看看 \u003ccode\u003epull-one\u003c/code\u003e 方法。每次发生新的迭代时都会调用这个，因此它必须保持最后一个的状态。 \u003ccode\u003e$.index\u003c/code\u003e 属性将在调用中保持该状态; \u003ccode\u003epull-one\u003c/code\u003e 将检查链的末尾是否已到达，并将返回角色提供的 \u003ccode\u003eIterationEnd\u003c/code\u003e 常量。实际上，实现这种低级接口简化了 \u003ccode\u003eIterable\u003c/code\u003e 接口的实现。现在迭代器将成为对象本身，因为我们可以在其上调用 \u003ccode\u003epull-one\u003c/code\u003e 来依次访问每个成员;因此，\u003ccode\u003e.iterator\u003c/code\u003e 将回归自我;这是可能的，因为对象将同时是 \u003ccode\u003eIterable\u003c/code\u003e 和 \u003ccode\u003eIterator\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这并非总是如此，并且在大多数情况下 \u003ccode\u003e.iterator\u003c/code\u003e 将必须构建要返回的迭代器类型，例如我们在前面的示例中所做的;但是，此示例显示了构建满足迭代器和可迭代角色的类所需的最少代码。\u003c/p\u003e\n\u003ch2 id=\"如何迭代上下文化和主题变量\"\u003e如何迭代：上下文化和主题变量\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003efor\u003c/code\u003e 和其他循环将每次迭代中生成的项放入\u003ca href=\"https://docs.raku.org/language/variables#index-entry-topic_variable\"\u003e主题变量\u003c/a\u003e \u003ccode\u003e$_\u003c/code\u003e 中，或将它们捕获到与块一起声明的变量中。这些变量可以直接在循环中使用，而不需要使用 \u003ca href=\"https://docs.raku.org/syntax/$CIRCUMFLEX_ACCENT#%28Traps_to_avoid%29_twigil_%5E\"\u003e\u003ccode\u003e^twigil\u003c/code\u003e\u003c/a\u003e 来声明它们。\u003c/p\u003e\n\u003cp\u003e使用\u003ca href=\"https://docs.raku.org/language/operators#index-entry-..._operators\"\u003e序列运算符\u003c/a\u003e时会发生隐式迭代。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$^a\u003c/span\u003e²\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nv\"\u003e$^b\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nv\"\u003e$^c\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e…\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e300\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «(1 1 1 4 7 16 46 127 475) \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生成块正在运行一次，而完成序列的条件，在这种情况下，术语大于300，则不满足。这具有运行循环的副作用，但也创建了输出列表。\u003c/p\u003e\n\u003cp\u003e这可以通过使用 \u003ca href=\"https://docs.raku.org/syntax/gather%20take\"\u003egather/take\u003c/a\u003e 块来更系统地完成，这是一种不同类型的迭代构造，而不是在 sink 上下文中运行，每次迭代都返回一个项目。这个 \u003ca href=\"https://rakuadvent.wordpress.com/2009/12/23/day-23-lazy-fruits-from-the-gather-of-eden/\"\u003eAdvent Calendar\u003c/a\u003e 教程解释了这种循环的用例;实际上，\u003ccode\u003egather\u003c/code\u003e 不是一个循环结构，而是一个语句前缀，它收集 \u003ccode\u003etake\u003c/code\u003e 生成的项并从中创建一个列表。\u003c/p\u003e\n\u003ch2 id=\"经典循环以及为什么我们不喜欢它们\"\u003e经典循环以及为什么我们不喜欢它们\u003c/h2\u003e\n\u003cp\u003e经典循环，循环变量递增，可以通过 \u003ca href=\"https://docs.raku.org/language/control#loop\"\u003eloop 关键字\u003c/a\u003e在 Raku 中完成。其他 \u003ca href=\"https://docs.raku.org/language/control#repeat%2Fwhile%2C_repeat%2Funtil\"\u003erepeat\u003c/a\u003e和 \u003ca href=\"https://docs.raku.org/language/control#while%2C_until\"\u003ewhile\u003c/a\u003e 循环也是可能的。\u003c/p\u003e\n\u003cp\u003e但是，总的来说，他们是沮丧的。 Raku 是一种功能和并发语言;在 Raku 中编码时，你应该以功能的方式看待循环：逐个处理迭代器产生的项目，即将一个项目提供给一个没有任何辅助效果的块。该功能视图还允许通过\u003ca href=\"https://docs.raku.org/routine/hyper\"\u003ehyper\u003c/a\u003e或\u003ca href=\"https://docs.raku.org/routine/race\"\u003erace\u003c/a\u003e自动线程方法轻松并行化操作。\u003c/p\u003e\n\u003cp\u003e如果您对旧的循环感觉更舒服，该语言允许您使用它们。但是，在可能的情况下尝试使用功能和并发迭代构造被认为是更多的p6y。\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e注意：由于版本6.d循环可以从最后一个语句的值中生成值列表。\u003c/em\u003e\u003c/p\u003e\n","text":"Iterator 和 Iterable 角色 Raku 是一种函数式语言，但在处理复杂的数据结构时，函数需要保持住。特别是，他们需要一个可以应用于所有这些界面的统一接口。此接口由 Iterator 和 Iterable 角色提供。\nIterable 角色相对简单。它为迭代器方法提供了一个存根，该方法实际上是由诸如 for 之类的语句使用的。 for 会在它前面的变量上调用 .iterator，然后为每个项目运行一次块。其他方法（如数组赋值）将使 Iterable 类以相同的方式运行。\nclass DNA does Iterable { has $.chain; method new ($chain where { $chain ~~ /^^ \u0026lt;[ACGT]\u0026gt;+ $$ / and $chain.chars %% 3 } ) { self.bless( :$chain ); } method iterator(DNA:D:){ $.chain.comb.rotor(3).iterator } }; my @longer-chain = DNA.new(\u0026#39;ACGTACGTT\u0026#39;); say @longer-chain.perl; # OUTPUT: «[(\u0026#34;A\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;G\u0026#34;), (\u0026#34;T\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;C\u0026#34;), (\u0026#34;G\u0026#34;, \u0026#34;T\u0026#34;, \u0026#34;T\u0026#34;)]␤» say @longer-chain».join(\u0026#34;\u0026#34;).join(\u0026#34;|\u0026#34;); #OUTPUT: «ACG|TAC|GTT␤» 在这个示例中，它是 Iterable 中示例的扩展，显示了如何调用 .iterator，只是在将创建的对象分配给位置变量 @long-chain 时调用此方法;这个变量是一个数组，我们在最后一个例子中对它进行操作。\n（可能有点容易混淆）Iterator 角色比 Iterable 更复杂一点。首先，它提供了一个常量 IterationEnd，但它提供了一系列方法，如 .pull-one，它允许在几个上下文中进行更精细的迭代操作：添加或删除项目，或跳过它们以访问其他项目。实际上，该角色为所有其他方法提供了一个默认实现，因此唯一需要定义的方法就是 pull-one，其中只提供了一个 stub。虽然 Iterable 提供了高级变量循环，Iterator 提供了在循环的每次迭代中调用的低级函数。让我们用这个角色扩展前面的例子。\nclass DNA does Iterable does Iterator { has $.chain; has Int $!index = 0; method new ($chain where { $chain ~~ /^^ \u0026lt;[ACGT]\u0026gt;+ $$ / and $chain.chars %% 3 } ) { self.bless( :$chain ); } method iterator( ){ self } method pull-one( --\u0026gt; Mu){ if $!index \u0026lt; $.chain.chars { my $codon = $.chain.comb.rotor(3)[$!index div 3]; $!index += 3; return $codon; } else { return IterationEnd; } } }; my $a := DNA.new(\u0026#39;GAATCC\u0026#39;); .say for $a; # OUTPUT: «(G A A)␤(T C C)␤» 我们声明一个 DNA 类，它扮演两个角色，Iterator 和 Iterable;该类将包含一个字符串，该字符串将被约束为长度为3的倍数且仅由 ACGT 组成。我们先来看看 pull-one 方法。每次发生新的迭代时都会调用这个，因此它必须保持最后一个的状态。 $.index 属性将在调用中保持该状态; pull-one 将检查链的末尾是否已到达，并将返回角色提供的 IterationEnd 常量。实际上，实现这种低级接口简化了 Iterable 接口的实现。现在迭代器将成为对象本身，因为我们可以在其上调用 pull-one 来依次访问每个成员;因此，.iterator 将回归自我;这是可能的，因为对象将同时是 Iterable 和 Iterator。\n这并非总是如此，并且在大多数情况下 .iterator 将必须构建要返回的迭代器类型，例如我们在前面的示例中所做的;但是，此示例显示了构建满足迭代器和可迭代角色的类所需的最少代码。\n如何迭代：上下文化和主题变量 for 和其他循环将每次迭代中生成的项放入主题变量 $_ 中，或将它们捕获到与块一起声明的变量中。这些变量可以直接在循环中使用，而不需要使用 ^twigil 来声明它们。\n使用序列运算符时会发生隐式迭代。\nsay 1,1,1, { $^a²+2*$^b+$^c } … * \u0026gt; 300; # OUTPUT: «(1 1 1 4 7 16 46 127 475) 生成块正在运行一次，而完成序列的条件，在这种情况下，术语大于300，则不满足。这具有运行循环的副作用，但也创建了输出列表。\n这可以通过使用 gather/take 块来更系统地完成，这是一种不同类型的迭代构造，而不是在 sink 上下文中运行，每次迭代都返回一个项目。这个 Advent Calendar 教程解释了这种循环的用例;实际上，gather 不是一个循环结构，而是一个语句前缀，它收集 take 生成的项并从中创建一个列表。\n经典循环以及为什么我们不喜欢它们 经典循环，循环变量递增，可以通过 loop 关键字在 Raku 中完成。其他 repeat和 while 循环也是可能的。\n但是，总的来说，他们是沮丧的。 Raku 是一种功能和并发语言;在 Raku 中编码时，你应该以功能的方式看待循环：逐个处理迭代器产生的项目，即将一个项目提供给一个没有任何辅助效果的块。该功能视图还允许通过hyper或race自动线程方法轻松并行化操作。\n如果您对旧的循环感觉更舒服，该语言允许您使用它们。但是，在可能的情况下尝试使用功能和并发迭代构造被认为是更多的p6y。\n注意：由于版本6.d循环可以从最后一个语句的值中生成值列表。\n"},"name":"迭代","published":"2018-10-28T21:13:31+08:00","summary":"Iterator 和 Iterable 角色 Raku 是一种函数式语言，但在处理复杂的数据结构时，函数需要保持住。特别是，他们需要一个可以应用于所有这些界面的统一接口。此接口由 Iterator 和 Iterable 角色提供。\nIterable 角色相对简单。它为迭代器方法提供了一个存根，该方法实际上是由诸如 for 之类的语句使用的。 for 会在它前面的变量上调用 .iterator，然后为每个项目运行一次块。其他方法（如数组赋值）将使 Iterable 类以相同的方式运行。\nclass DNA does Iterable { has $.chain; method new ($chain where { $chain ~~ /^^ \u0026lt;[ACGT]\u0026gt;+ $$ / and $chain.chars %% 3 } ) { self.bless( :$chain ); } method iterator(DNA:D:){ $.chain.comb.rotor(3).iterator } }; my @longer-chain = DNA.new(\u0026#39;ACGTACGTT\u0026#39;); say @longer-chain.perl; # OUTPUT: «[(\u0026#34;A\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;G\u0026#34;), (\u0026#34;T\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;C\u0026#34;), (\u0026#34;G\u0026#34;, \u0026#34;T\u0026#34;, \u0026#34;T\u0026#34;)]␤» say @longer-chain».","type":"entry","url":"https://ohmycloud.github.io/posts/22.iterating/"}