{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003cp\u003e在许多情况下，需要上下文来解释容器的值。在 Raku 中，我们将使用 context 将容器的值强制转换为某种类型或类，或者决定如何处理它，就像接收器(sink)上下文的情况一样。\u003c/p\u003e\n\u003ch1 id=\"sink-上下文httpsdocsrakuorglanguagecontexts___top\"\u003e\u003ca href=\"https://docs.raku.org/language/contexts#___top\"\u003eSink 上下文\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e\u003cem\u003eSink\u003c/em\u003e 相当于 \u003ccode\u003evoid\u003c/code\u003e 上下文，也就是说，我们抛出（在接收器下面）操作的结果或块的返回值的上下文。通常，当语句不知道如何处理该值时，将在警告和错误中调用此上下文。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$sub\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e² \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$sub\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «WARNINGS:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eUseless\u003c/span\u003e \u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nv\"\u003e$sub\u003c/span\u003e \u003cspan class=\"nb\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003esink\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eline\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e»\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e您可以使用 \u003ca href=\"https://docs.raku.org/routine/sink-all\"\u003e\u003ccode\u003esink-all\u003c/code\u003e\u003c/a\u003e 方法在 \u003ca href=\"https://docs.raku.org/type/Iterator\"\u003eIterator\u003c/a\u003e 上强制使用该接收器上下文。\u003ca href=\"https://docs.raku.org/type/Proc\"\u003eProc\u003c/a\u003e也可以通过 \u003ca href=\"https://docs.raku.org/type/Proc#method_sink\"\u003e\u003ccode\u003esink\u003c/code\u003e\u003c/a\u003e 方法沉没，迫使它们引发异常而不返回任何东西。\u003c/p\u003e\n\u003cp\u003e通常，如果在 sink 上下文中进行计算，则块将发出警告; 但是，在 sink 上下文中 \u003ca href=\"https://docs.raku.org/language/control#Flow%2529_gather_take\"\u003egather/take\u003c/a\u003e 块是显式计算的，并使用 \u003ccode\u003etake\u003c/code\u003e 显式返回值。\u003c/p\u003e\n\u003cp\u003e在 sink 上下文中，对象将调用其 \u003ccode\u003esink\u003c/code\u003e 方法（如果存在）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ea b c\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003edoes\u003c/span\u003e \u003cspan class=\"k\"\u003erole\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nb\"\u003esink\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003esink called\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: sink called \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"number-上下文httpsdocsrakuorglanguagecontexts___top\"\u003e\u003ca href=\"https://docs.raku.org/language/contexts#___top\"\u003eNumber 上下文\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e这个上下文，可能除了上面的所有内容之外，都是\u003cem\u003e转换\u003c/em\u003e或\u003cem\u003e解释\u003c/em\u003e上下文，因为它们接收无类型或类型化的变量，并将其类型化为执行操作所需的任何内容。在某些情况下，这意味着转换（例如从 \u003ca href=\"https://docs.raku.org/type/Str\"\u003eStr\u003c/a\u003e 到 \u003ca href=\"https://docs.raku.org/type/Numeric\"\u003eNumeric\u003c/a\u003e）; 在其他情况下只是一种解释（\u003ca href=\"https://docs.raku.org/type/IntStr\"\u003eIntStr\u003c/a\u003e 将被解释为 \u003ca href=\"https://docs.raku.org/type/Int\"\u003eInt\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/type/Str\"\u003eStr\u003c/a\u003e）。\u003c/p\u003e\n\u003cp\u003e每当我们需要对变量应用数值运算时，就会调用\u003cem\u003e数字上下文\u003c/em\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$not-a-string\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e1                 \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$neither-a-string\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e3                        \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$not-a-string\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nv\"\u003e$neither-a-string\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «4» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在上面的代码中，只要只有几个数字而没有其他字符，字符串将在数字上下文中解释。但是，它可以具有任意数量的前导或尾随空格。\u003c/p\u003e\n\u003cp\u003e可以使用算术运算符强制数字上下文，例如 \u003ccode\u003e+\u003c/code\u003e 或 \u003ccode\u003e-\u003c/code\u003e。在该上下文中，\u003ca href=\"https://docs.raku.org/routine/Numeric\"\u003e\u003ccode\u003eNumeric\u003c/code\u003e\u003c/a\u003e 将调用该方法（如果可用），并将返回的值用作对象的数值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$t\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$f\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eFalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$t\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nv\"\u003e$f\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# OUTPUT: «1» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$t\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eNumeric\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «1» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$f\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eNumeric\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «0» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$list\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ea b c\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"kt\"\u003eTrue\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nv\"\u003e$list\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «4» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在\u003cem\u003e列表\u003c/em\u003e那样的东西的情况下，数值通常等于 \u003ccode\u003e.elems\u003c/code\u003e; 在某些情况下，像\u003ca href=\"https://docs.raku.org/routine/Numeric#%28Thread%29_method_Numeric\"\u003eThread\u003c/a\u003e 一样，它将返回唯一的线程标识符。\u003c/p\u003e\n\u003ch1 id=\"string-上下文httpsdocsrakuorglanguagecontexts___top\"\u003e\u003ca href=\"https://docs.raku.org/language/contexts#___top\"\u003eString 上下文\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e在\u003cem\u003e字符串上下文中\u003c/em\u003e，值可以作为字符串进行操作。例如，此上下文用于强制非字符串值，以便可以将它们打印到标准输出。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eput\u003c/span\u003e \u003cspan class=\"nv\"\u003e$very-complicated-and-hairy-object\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: something meaningful \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者当智能匹配正则表达式时：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eput\u003c/span\u003e \u003cspan class=\"mi\"\u003e333444777\u003c/span\u003e \u003cspan class=\"o\"\u003e~~\u003c/span\u003e \u003cspan class=\"p\"\u003e/(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e)/;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «｢333｣ 0 =\u0026gt; ｢333｣» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e通常，将在变量上调用 \u003ca href=\"https://docs.raku.org/routine/Str\"\u003e\u003ccode\u003eStr\u003c/code\u003e\u003c/a\u003e 例程以将其上下文化; 因为这个方法是从 \u003ca href=\"https://docs.raku.org/type/Mu\"\u003eMu\u003c/a\u003e 继承的，所以它始终存在，但并不总能保证工作。在某些核心类中，它会发出警告。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/routine/~\"\u003e\u003ccode\u003e~\u003c/code\u003e\u003c/a\u003e 是（一元）字符串上下文化器。作为运算符，它连接字符串，但作为前缀运算符，它成为字符串上下文运算符。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@array\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e],\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"o\"\u003e]]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nv\"\u003e@array\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «1 2 3 4 5 6» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当 \u003ccode\u003e[~]\u003c/code\u003e 应用于列表时，这也将在 \u003ca href=\"https://docs.raku.org/language/operators#Reduction_operators\"\u003e\u003cem\u003ereduction\u003c/em\u003e\u003c/a\u003e 上下文中发生：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e[~]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"no\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ea b c\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «35+6ic a b1 2 3» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在那个情况下, 空列表或其它容器会字符串化为一个空字符串：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e[~]\u003c/span\u003e \u003cspan class=\"o\"\u003e[]\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于 \u003ca href=\"https://docs.raku.org/routine/~#%28Operators%29_infix_~\"\u003e\u003ccode\u003e~\u003c/code\u003e\u003c/a\u003e 也作为缓冲区连接运算符，因此必须检查每个元素是否为空，因为字符串上下文中的单个空缓冲区将表现为字符串，从而产生错误。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e[~]\u003c/span\u003e \u003cspan class=\"kt\"\u003eBuf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x33\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eBuf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x22\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: «Buf:0x\u0026lt;03 33 02 22\u0026gt;» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然而,\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$non-empty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eBuf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x33\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$empty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$non-empty-also\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eBuf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x22\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e[~]\u003c/span\u003e \u003cspan class=\"nv\"\u003e$non-empty\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$empty\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$non-empty-also\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# OUTPUT: «Cannot use a Buf as a string, but you called the Stringy method on it \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于 \u003ccode\u003e~\u003c/code\u003e 将字符串上下文放入此列表的第二个元素，\u003ca href=\"https://docs.raku.org/routine/~#%28Operators%29_infix_~\"\u003e\u003ccode\u003e~\u003c/code\u003e\u003c/a\u003e 将使用适用于字符串的第二个形式，从而产生所显示的错误。只需确保连接的所有内容都是缓冲区即可避免此问题。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$non-empty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eBuf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x33\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$empty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eBuf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$non-empty-also\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eBuf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x22\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e[~]\u003c/span\u003e \u003cspan class=\"nv\"\u003e$non-empty\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$empty\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$non-empty-also\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «Buf:0x\u0026lt;03 33 02 22\u0026gt;» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e通常，上下文会通过调用 contextualizer 将变量强制转换为特定类型; 在 mixins 的情况下，如果混合了上下文类，它将以这种方式运行。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$described-number\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"no\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ebut\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u0026#39;Unity\u003c/span\u003e \u003cspan class=\"nb\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ecomplex\u003c/span\u003e \u003cspan class=\"n\"\u003eplane\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eput\u003c/span\u003e \u003cspan class=\"nv\"\u003e$described-number\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «Unity in complex plane» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003ebut\u003c/code\u003e 创建一个 mixin，它使用 \u003ccode\u003eStr\u003c/code\u003e 方法赋予复数。\u003ccode\u003eput\u003c/code\u003e 将它 \u003ccode\u003eStr\u003c/code\u003e 上下文化为一个字符串，即它调用字符串上下文，使用上面显示的结果。\u003c/p\u003e\n","text":"在许多情况下，需要上下文来解释容器的值。在 Raku 中，我们将使用 context 将容器的值强制转换为某种类型或类，或者决定如何处理它，就像接收器(sink)上下文的情况一样。\nSink 上下文 Sink 相当于 void 上下文，也就是说，我们抛出（在接收器下面）操作的结果或块的返回值的上下文。通常，当语句不知道如何处理该值时，将在警告和错误中调用此上下文。\nmy $sub = -\u0026gt; $a { return $a² }; $sub; # OUTPUT: «WARNINGS: Useless use of $sub in sink context (line 1)» 您可以使用 sink-all 方法在 Iterator 上强制使用该接收器上下文。Proc也可以通过 sink 方法沉没，迫使它们引发异常而不返回任何东西。\n通常，如果在 sink 上下文中进行计算，则块将发出警告; 但是，在 sink 上下文中 gather/take 块是显式计算的，并使用 take 显式返回值。\n在 sink 上下文中，对象将调用其 sink 方法（如果存在）：\nsub foo { return [\u0026lt;a b c\u0026gt;] does role { method sink { say \u0026#34;sink called\u0026#34; } } } foo # OUTPUT: sink called Number 上下文 这个上下文，可能除了上面的所有内容之外，都是转换或解释上下文，因为它们接收无类型或类型化的变量，并将其类型化为执行操作所需的任何内容。在某些情况下，这意味着转换（例如从 Str 到 Numeric）; 在其他情况下只是一种解释（IntStr 将被解释为 Int 或 Str）。\n每当我们需要对变量应用数值运算时，就会调用数字上下文。\nmy $not-a-string=\u0026#34;1 \u0026#34;; my $neither-a-string=\u0026#34;3 \u0026#34;; say $not-a-string+$neither-a-string; # OUTPUT: «4» 在上面的代码中，只要只有几个数字而没有其他字符，字符串将在数字上下文中解释。但是，它可以具有任意数量的前导或尾随空格。\n可以使用算术运算符强制数字上下文，例如 + 或 -。在该上下文中，Numeric 将调用该方法（如果可用），并将返回的值用作对象的数值。\nmy $t = True; my $f = False; say $t+$f; # OUTPUT: «1» say $t.Numeric; # OUTPUT: «1» say $f.Numeric; # OUTPUT: «0» my $list= \u0026lt;a b c\u0026gt;; say True+$list; # OUTPUT: «4» 在列表那样的东西的情况下，数值通常等于 .elems; 在某些情况下，像Thread 一样，它将返回唯一的线程标识符。\nString 上下文 在字符串上下文中，值可以作为字符串进行操作。例如，此上下文用于强制非字符串值，以便可以将它们打印到标准输出。\nput $very-complicated-and-hairy-object; # OUTPUT: something meaningful 或者当智能匹配正则表达式时：\nput 333444777 ~~ /(3+)/; # OUTPUT: «｢333｣ 0 =\u0026gt; ｢333｣» 通常，将在变量上调用 Str 例程以将其上下文化; 因为这个方法是从 Mu 继承的，所以它始终存在，但并不总能保证工作。在某些核心类中，它会发出警告。\n~ 是（一元）字符串上下文化器。作为运算符，它连接字符串，但作为前缀运算符，它成为字符串上下文运算符。\nmy @array = [ [1,2,3], [4,5,6]]; say ~@array; # OUTPUT: «1 2 3 4 5 6» 当 [~] 应用于列表时，这也将在 reduction 上下文中发生：\nsay [~] [ 3, 5+6i, Set(\u0026lt;a b c\u0026gt;), [1,2,3] ]; # OUTPUT: «35+6ic a b1 2 3» 在那个情况下, 空列表或其它容器会字符串化为一个空字符串：\nsay [~] [] ; # OUTPUT: «␤» 由于 ~ 也作为缓冲区连接运算符，因此必须检查每个元素是否为空，因为字符串上下文中的单个空缓冲区将表现为字符串，从而产生错误。\nsay [~] Buf.new(0x3,0x33), Buf.new(0x2,0x22); # OUTPUT: «Buf:0x\u0026lt;03 33 02 22\u0026gt;» 然而,\nmy $non-empty = Buf.new(0x3, 0x33); my $empty = []; my $non-empty-also = Buf.new(0x2,0x22); say [~] $non-empty, $empty, $non-empty-also; # OUTPUT: «Cannot use a Buf as a string, but you called the Stringy method on it 由于 ~ 将字符串上下文放入此列表的第二个元素，~ 将使用适用于字符串的第二个形式，从而产生所显示的错误。只需确保连接的所有内容都是缓冲区即可避免此问题。\nmy $non-empty = Buf.new(0x3, 0x33); my $empty = Buf.new(); my $non-empty-also = Buf.new(0x2,0x22); say [~] $non-empty, $empty, $non-empty-also; # OUTPUT: «Buf:0x\u0026lt;03 33 02 22\u0026gt;» 通常，上下文会通过调用 contextualizer 将变量强制转换为特定类型; 在 mixins 的情况下，如果混合了上下文类，它将以这种方式运行。\nmy $described-number = 1i but \u0026#39;Unity in complex plane\u0026#39;; put $described-number; # OUTPUT: «Unity in complex plane» but 创建一个 mixin，它使用 Str 方法赋予复数。put 将它 Str 上下文化为一个字符串，即它调用字符串上下文，使用上面显示的结果。\n"},"name":"上下文和上下文器","published":"2018-11-13T21:13:31+08:00","summary":"在许多情况下，需要上下文来解释容器的值。在 Raku 中，我们将使用 context 将容器的值强制转换为某种类型或类，或者决定如何处理它，就像接收器(sink)上下文的情况一样。\nSink 上下文 Sink 相当于 void 上下文，也就是说，我们抛出（在接收器下面）操作的结果或块的返回值的上下文。通常，当语句不知道如何处理该值时，将在警告和错误中调用此上下文。\nmy $sub = -\u0026gt; $a { return $a² }; $sub; # OUTPUT: «WARNINGS: Useless use of $sub in sink context (line 1)» 您可以使用 sink-all 方法在 Iterator 上强制使用该接收器上下文。Proc也可以通过 sink 方法沉没，迫使它们引发异常而不返回任何东西。\n通常，如果在 sink 上下文中进行计算，则块将发出警告; 但是，在 sink 上下文中 gather/take 块是显式计算的，并使用 take 显式返回值。\n在 sink 上下文中，对象将调用其 sink 方法（如果存在）：\nsub foo { return [\u0026lt;a b c\u0026gt;] does role { method sink { say \u0026#34;sink called\u0026#34; } } } foo # OUTPUT: sink called Number 上下文 这个上下文，可能除了上面的所有内容之外，都是转换或解释上下文，因为它们接收无类型或类型化的变量，并将其类型化为执行操作所需的任何内容。在某些情况下，这意味着转换（例如从 Str 到 Numeric）; 在其他情况下只是一种解释（IntStr 将被解释为 Int 或 Str）。","type":"entry","url":"https://ohmycloud.github.io/posts/38.contexts-and-contextualizers/"}