{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003cp\u003e源文件可以在 \u003ca href=\"https://github.com/raku/faq\"\u003egithub\u003c/a\u003e 或 \u003ca href=\"https://doc.raku.org/language/faq\"\u003eraku.org\u003c/a\u003e上找到.\u003c/p\u003e\n\u003ch2 id=\"general\"\u003eGeneral\u003c/h2\u003e\n\u003ch3 id=\"rakudo-和-raku-的区别是什么\"\u003eRakudo 和 Raku 的区别是什么？\u003c/h3\u003e\n\u003cp\u003eRakudo 是 Raku 的一个实现。目前它是完成度最好的但是过去也有其它的实现, 将来也可能会有其它实现。Raku 是语言的定义。很多场合\u003c/p\u003e\n\u003cp\u003e这两个名字可以宽松地使用并互相替换。\u003c/p\u003e\n\u003ch3 id=\"会有-raku-版本-600-吗\"\u003e会有 Raku 版本 6.0.0 吗?\u003c/h3\u003e\n\u003cp\u003e第一个稳定语言版本的版本称为 v6.c，而不是 6.0.0。 不同的命名方案使得不太可能发布具有精确版本 6.0.0 的语言。\u003c/p\u003e\n\u003cp\u003e您可以使用下面的代码检查您的 Rakudo 编译器是当前至少是什么版本（注意这可能不是真正的供应商二进制文件）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eraku\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"no\"\u003ee\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esay q[too old] if $*PERL.version before Version.new(q[6.c])\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e它首先由 Rakudo Raku 编译器版本的 2015.12 实现，并且可能通过使用 \u0026lsquo;use 6.c\u0026rsquo; 指令在可预见的未来支持后续版本。 下一个语言版本（无发布日期）为 v6.d.\u003c/p\u003e\n\u003ch3 id=\"作为一个-raku-初学者我应该安装什么\"\u003e作为一个 Raku 初学者我应该安装什么？\u003c/h3\u003e\n\u003cp\u003e如果你是一个 Linux 或 Mac 用户, 你可能需要下载 \u003ca href=\"http://rakudo.org/downloads/star/\"\u003eRakudo Star\u003c/a\u003e 并通过编译 MoarVM 版本安装（一个简单的处理）\u003c/p\u003e\n\u003cp\u003e如果你是一个 Windows 32 或 64 位用户, 那么 Rakudo Star 二进制版本在 rakudo 网站也能获得。你需要 Windows Git 来使用 panda。\u003c/p\u003e\n\u003cp\u003eLinux 和 Mac 二进制版本稍后也可能从供应商和第三方那儿获取到。尽管供应商版本可能过时了。\u003c/p\u003e\n\u003cp\u003e或者有一个官方的 rakudo star Docker 镜像, 地址为 \u003ca href=\"https://hub.docker.com/_/rakudo-star/\"\u003ehttps://hub.docker.com/_/rakudo-star/\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"作为一个中高级用户我想跟进-rakudo-开发\"\u003e作为一个中高级用户我想跟进 Rakudo 开发\u003c/h3\u003e\n\u003cp\u003e安装类似于 Perl 5 的 perlbrew \u0026ndash; \u003ca href=\"https://github.com/tadzik/rakudobrew\"\u003erakudobrew\u003c/a\u003e , 同等的 Python 还有 Ruby 工具。\u003c/p\u003e\n\u003ch3 id=\"从哪里能找到关于-raku-的好文档\"\u003e从哪里能找到关于 Raku 的好文档？\u003c/h3\u003e\n\u003cp\u003e最令人信赖的信息能在 raku.org 或那儿的直接链接。\u003c/p\u003e\n\u003cp\u003e你也可以使用 \u003ca href=\"https://www.google.co.uk/search?q=site:irclog.perlgeek.de+inurl:raku\"\u003eGoogle\u003c/a\u003e 搜索 Freenode #raku IRC 频道。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://www.raku.org/documentation/\"\u003ehttp://www.raku.org/documentation/\u003c/a\u003e 和 \u003ca href=\"http://doc.raku.org/\"\u003ehttp://doc.raku.org/\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"什么是-raku-spec\"\u003e什么是 Raku spec？\u003c/h3\u003e\n\u003cp\u003e\u0026ldquo;spec\u0026rdquo; 指的是 Raku的官方测试套件。它被称作 roast 并被托管在 \u003ca href=\"https://github.com/raku/roast\"\u003egithub\u003c/a\u003e 上.\u003c/p\u003e\n\u003cp\u003e它被用来测量一个 Raku 的实现有多彻底。\u003c/p\u003e\n\u003ch3 id=\"有没有-raku-的术语相关的项目\"\u003e有没有 Raku 的术语相关的项目？\u003c/h3\u003e\n\u003cp\u003e查看 \u003ca href=\"http://design.raku.org/S99.html\"\u003eglossary\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"我是一个-perl-5-程序员-perl-5-和-raku-的区别在哪儿\"\u003e我是一个 Perl 5 程序员. Perl 5 和 Raku 的区别在哪儿？\u003c/h3\u003e\n\u003cp\u003e在 \u003ca href=\"https://docs.raku.org/language/5to6-nutshell\"\u003e https://docs.raku.org/language/5to6-nutshell\u003c/a\u003e 下面查看 ‘5to6-nutshell’ pod 文档和相关页面。\u003c/p\u003e\n\u003ch2 id=\"模块\"\u003e模块\u003c/h2\u003e\n\u003ch3 id=\"raku-有-cpan-吗-或者-raku-会使用-perl-5-的-cpan-吗\"\u003eRaku 有 CPAN 吗? 或者 Raku 会使用 Perl 5 的 CPAN 吗?\u003c/h3\u003e\n\u003cp\u003eRaku 还没有像 CPAN 那样成熟的模块仓库. 但是 \u003ca href=\"http://modules.raku.org/\"\u003emodules.raku.org\u003c/a\u003e 有很多已知的 Raku 模块, \u003ca href=\"https://github.com/tadzik/panda/\"\u003epanda\u003c/a\u003e 能在 Rakudo 上安装这些模块.\u003c/p\u003e\n\u003ch3 id=\"我能在-raku-中使用-perl-5的模块吗\"\u003e我能在 Raku 中使用 Perl 5的模块吗？\u003c/h3\u003e\n\u003cp\u003e使用 \u003ca href=\"https://github.com/niner/Inline-Perl5/\"\u003eInline::Perl5\u003c/a\u003e 能让大部分 Perl 5 模块工作, 它甚至能很好地运行 Perl 5 的 Catalyst 和 DBI。\u003c/p\u003e\n\u003ch3 id=\"我能在-raku-中使用-c-和-c-吗\"\u003e我能在 Raku 中使用 C 和 C++ 吗？\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"http://docs.raku.org/language/nativecall\"\u003eNativecall\u003c/a\u003e 让这个特别容易。\u003c/p\u003e\n\u003ch3 id=\"nativecall-找不到-libfooso-并且我只有-libfooso12\"\u003eNativecall 找不到 libfoo.so 并且我只有 libfoo.so.1.2!\u003c/h3\u003e\n\u003cp\u003e这在 Debian 那样的系统中很常见。 你需要安装 \u0026ldquo;libfoo-dev\u0026rdquo; 来为丢失的文件设置符号链接。\u003c/p\u003e\n\u003ch3 id=\"所有的传统-unix-库函数去哪儿了\"\u003e所有的传统 Unix 库函数去哪儿了？\u003c/h3\u003e\n\u003cp\u003e使用 Nativecall 访问它们很容易。\n\u003ca href=\"https://github.com/cspencer/raku-posix\"\u003ePOSIX\u003c/a\u003e 模块也可以。\u003c/p\u003e\n\u003ch3 id=\"rakudo-有核心标准库吗\"\u003eRakudo 有核心标准库吗?\u003c/h3\u003e\n\u003cp\u003eRakudo 是一个包含最小电量的编译器发布（Test 和 Nativecall等等），像 linux 内核一样。\u003c/p\u003e\n\u003cp\u003eRakudo Star 是一个带有一些有用模块的 rakudo, 并且更多的模块可以从生态系统里安装。\u003c/p\u003e\n\u003ch3 id=\"有像-bdeparse-那样的东西吗我怎么抓住-ast\"\u003e有像 B::Deparse 那样的东西吗?/我怎么抓住 AST?\u003c/h3\u003e\n\u003cp\u003e使用 \u003ccode\u003eraku --target=ast -e 'very-short-example()'\u003c/code\u003e 来抓取编译单元的抽象语法树(AST)。\u003c/p\u003e\n\u003ch2 id=\"语言特性\"\u003e语言特性\u003c/h2\u003e\n\u003ch3 id=\"我怎么-dump-raku-的数据结构就像-perl-5-的-datadumper-和类似的\"\u003e我怎么 dump Raku 的数据结构(就像 Perl 5 的 Data::Dumper 和类似的)？\u003c/h3\u003e\n\u003cp\u003eexamples:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003edd\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e        \u003cspan class=\"c1\"\u003e# Str $foo = \u0026#34;bar\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eperl\u003c/span\u003e \u003cspan class=\"c1\"\u003e# :foo(\u0026#34;bar\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egist\u003c/span\u003e \u003cspan class=\"c1\"\u003e# foo =\u0026gt; bar\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生态系统中还有模块来做这个事情, 例如 \u003ca href=\"https://github.com/tony-o/raku-data-dump/\"\u003eData::Dump\u003c/a\u003e 使用颜色来 Dump。\u003c/p\u003e\n\u003ch3 id=\"我怎么在-raku-提示符repl中找到历史命令行\"\u003e我怎么在 Raku 提示符（REPL）中找到历史命令行？\u003c/h3\u003e\n\u003cp\u003e从生态系统中安装 \u003ca href=\"https://github.com/hoelzro/p6-linenoise/\"\u003eLinenoise\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e作为一种选择, 在 UNIX 那样的系统中可以安装 rlwrap。这在类 Debian 系统中可以通过\u003ccode\u003eapt-get install rlwrap\u003c/code\u003e 安装。\u003c/p\u003e\n\u003ch3 id=\"为什么-rakudo-编译器有时候报错更友好\"\u003e为什么 Rakudo 编译器有时候报错更友好？\u003c/h3\u003e\n\u003cp\u003e如果在输出中出现 \u003ccode\u003eSORRY!\u003c/code\u003e , 则错误是编译时错误, 否则是运行时错误。\u003c/p\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# Attempt to divide 1 by zero using div\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# ===SORRY!=== Error while compiling ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"什么是-any\"\u003e什么是 (Any)?\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"http://doc.raku.org/routine/type%2FAny\"\u003eAny\u003c/a\u003e 是一个用于新类的默认超类(superclass)的顶层类。\n它经常在这样的上下文出现：变量被定义但没有被赋值， 这里它类似于其它语言中的 undef 或 null 值。\u003c/p\u003e\n\u003cp\u003eexamples:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# (Any) 注意圆括号表明的类型对象\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# Any\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e(Any) 不应该被用于检查 definedness。 在 Raku 中, definedness 可能是一个对象的属性。 通常实例是被定义的, 而类型对象是未定义的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003edefined\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# True\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003edefined\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# False\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"so-是什么\"\u003eso 是什么?\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eso\u003c/code\u003e 是一个松散优先级的操作符, 它强制上下文为 \u003ca href=\"https://docs.raku.org/type/Bool\"\u003eBool\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eso\u003c/code\u003e 拥有和 \u003ccode\u003e?\u003c/code\u003e 前缀操作符同样的语义, 就像 \u003ccode\u003eand\u003c/code\u003e 是 \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e 的低优先级版本一样.\u003c/p\u003e\n\u003cp\u003e用法示例:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003eso\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# Bool::True\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中, 比较的结果(结果是 \u003ca href=\"https://docs.raku.org/type/Junction\"\u003eJunction\u003c/a\u003e)在打印之前被转换为 Bool 值了.\u003c/p\u003e\n\u003ch3 id=\"签名中的那些-d-和-u-是什么东东\"\u003e签名中的那些 :D 和 :U 是什么东东？\u003c/h3\u003e\n\u003cp\u003e在 Raku 中, 类和其它类型是对象, 并且传递自身类型的类型检测。\n例如如果你声明一个变量\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e那么, 你不仅可以给它赋值整数（即， Int 类的实例）, 还能给它赋值 Int 类型对象自身：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你想排除类型对象, 你可以追加一个 \u003ccode\u003e:D\u003c/code\u003e 类型微笑符, 它代表\u0026quot;定义\u0026quot;（definite）:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt:D\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# dies with:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           \u003cspan class=\"c1\"\u003e# Type check failed in assignment to $x;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           \u003cspan class=\"c1\"\u003e# expected Int:D but got Int\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e同样地, \u003ccode\u003e:U\u003c/code\u003e 约束为未定义的值, 即类型对象。\n要显式地允许类型对象或实例, 你可以使用 \u003ccode\u003e:_\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"签名中的----是什么东东\"\u003e签名中的 \u0026ndash;\u0026gt; 是什么东东？\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e--\u0026gt;\u003c/code\u003e 是一个返回值约束, 要么是类型要么是有定义的值。\u003c/p\u003e\n\u003cp\u003e类型约束的例子:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003edivide-to-int\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e \u003cspan class=\"k\"\u003e--\u0026gt;\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enarrow\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nf\"\u003edivide-to-int\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Type check failed for return value; expected Int but got Rat\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e有明确返回值的例子:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ediscard-random-number\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"k\"\u003e--\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003erand\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003ediscard-random-number\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 42\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这种情况下，最终值被抛弃，因为已经指定了返回值。\u003c/p\u003e\n\u003ch3 id=\"any-和-mu-的区别是什么\"\u003eAny 和 Mu 的区别是什么?\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eMu\u003c/code\u003e 是所派生出的所有其它类型的基类型. \u003ccode\u003eAny\u003c/code\u003e 是从  \u003ccode\u003eMu\u003c/code\u003e派生来的, 代表着任何类型的 Raku 值. 主要区别是, \u003ccode\u003eAny\u003c/code\u003e 不包含 \u003ccode\u003eJunction\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e子例程参数的默认类型是 \u003ccode\u003eAny\u003c/code\u003e, 以至于当你声明 \u003ccode\u003esub foo ($a)\u003c/code\u003e 时, 你真正表达的是 \u003ccode\u003esub foo (Any $a)\u003c/code\u003e . 类似地, 类的声明被假定继承自 \u003ccode\u003eAny\u003c/code\u003e, 除非使用了像 \u003ccode\u003eis Mu\u003c/code\u003e 这样的 trait 特征.\u003c/p\u003e\n\u003ch3 id=\"怎么从-junction-中提取值\"\u003e怎么从 Junction 中提取值?\u003c/h3\u003e\n\u003cp\u003e如果你想从 \u003ca href=\"https://docs.raku.org/type/Junction\"\u003eJunction\u003c/a\u003e 中提取值(特征态), 那你可能正误入歧途. 应该使用 \u003ca href=\"https://docs.raku.org/type/Set\"\u003eSet\u003c/a\u003e 代替\u003c/p\u003e\n\u003cp\u003eJunctions 作为匹配器, 而不是使用它们做代数.\u003c/p\u003e\n\u003cp\u003e如果你还是想那样做, 你可以滥用自动线程(autothreading):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eeigenstates\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eMu\u003c/span\u003e \u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@states\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"kt\"\u003eAny\u003c/span\u003e \u003cspan class=\"nv\"\u003e$s\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e@states\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003epush\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nv\"\u003e$s\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e@states\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nf\"\u003eeigenstates\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e, \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# prints 1, 2, 3 or a permutation thereof\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"如果-str-是不可变的-那么-s-是怎么工作的-如果-int-是不可变的-i-是怎么工作的\"\u003e如果 Str 是不可变的, 那么 \u003ccode\u003es///\u003c/code\u003e 是怎么工作的? 如果 Int 是不可变的, \u003ccode\u003e$i++\u003c/code\u003e 是怎么工作的?\u003c/h3\u003e\n\u003cp\u003e在 Raku 中, 很多基本类型是不可变的, 但是保存它们的变量不是. \u003ccode\u003es///\u003c/code\u003e 作用于变量上, 在这个变量中放入一个新创建的字符串对象. 同样地, \u003ccode\u003e$i++\u003c/code\u003e 作用于 \u003ccode\u003e$i\u003c/code\u003e 变量上, 而不是作用在它里面的值身上.\u003c/p\u003e\n\u003cp\u003e更多详情请查看:  \u003ca href=\"http://doc.raku.org/language/containers\"\u003econtainers\u003c/a\u003e 文档。\u003c/p\u003e\n\u003ch3 id=\"什么是数组引用和自动解引用-我仍然需要--符号吗\"\u003e什么是数组引用和自动解引用? 我仍然需要 @ 符号吗?\u003c/h3\u003e\n\u003cp\u003e在 Raku 中, 几乎所有的东西都是引用. 所以谈论 taking references 没有多大意义. 不像 Perl 5 那样, Raku 的标量变量也能直接包含数组:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e# \u0026#34;1 2 3\\n\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eWHAT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e            \u003cspan class=\"c1\"\u003e# (Array)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$scalar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$scalar\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e            \u003cspan class=\"c1\"\u003e# \u0026#34;1 2 3\\n\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$scalar\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eWHAT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# (Array)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最大的区别是, 标量中的数组在列表上下文中是一个值, 然而数组会被愉快地迭代:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$s\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# loop body executed 3 times\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e$s\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# loop body executed only once\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@flat\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eflat\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@flat\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eelems\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"c1\"\u003e# 6\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@nested\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eflat\u003c/span\u003e \u003cspan class=\"nv\"\u003e$s\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$s\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@nested\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eelems\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以使用 \u003ccode\u003e@( ... )\u003c/code\u003e 或通过在表达式身上调用 \u003ccode\u003e.list\u003c/code\u003e 方法来强制展平, 使用 \u003ccode\u003e$( ... )\u003c/code\u003e 或通过在表达式身上调用 \u003ccode\u003e.item\u003c/code\u003e 方法强制为 item  上下文(不展平).\u003c/p\u003e\n\u003ch3 id=\"为什么还要符号-你不能没有它们吗\"\u003e为什么还要符号? 你不能没有它们吗?\u003c/h3\u003e\n\u003cp\u003e有几个原因:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e它们使插值变量到字符串中变得更容易\u003c/li\u003e\n\u003cli\u003e它们为不同的变量和 twigils 组成了微型命名空间, 因此避免了名字冲突\u003c/li\u003e\n\u003cli\u003e它们允许简单的 单数/复数 区别\u003c/li\u003e\n\u003cli\u003e它们像使用强制性名词标记的自然语言一样工作，所以我们的大脑为处理它而生\u003c/li\u003e\n\u003cli\u003e它们不是强制性的，因为你可以声明无符号名字（如果你不介意含糊不清）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"类型-str-不支持关联索引\"\u003e\u0026ldquo;类型 Str 不支持关联索引\u0026rdquo;\u003c/h3\u003e\n\u003cp\u003e你可能会把字符串插值和 HTML 搞混。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eabc\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;html-tag\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRaku 认为 \u003ccode\u003e$foo\u003c/code\u003e 是一个散列而 \u003ccode\u003e\u0026lt;html-tag\u0026gt;\u003c/code\u003e 是一个字符串字面量的散列键。使用闭包来帮助你理解吧。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eabc\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;html-tag\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"raku-有协程吗-什么是-yield-\"\u003eRaku 有协程吗? 什么是 yield ?\u003c/h3\u003e\n\u003cp\u003eRaku 没有 Python 那样的 \u003ccode\u003eyield\u003c/code\u003e 语句, 但是它通过惰性列表却能提供类似的功能. 有两种很潮的方式来写出能返回惰性列表的例程:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# first method, gather/take\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@values\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003egather\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"nf\"\u003ehave_data\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# do some computations\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003etake\u003c/span\u003e \u003cspan class=\"nf\"\u003esome_data\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# do more computations\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# second method, use .map or similar method\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# on a lazy list\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@squares\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# or\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@squares\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \\\u003cspan class=\"nb\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003ex\u003c/span\u003e² \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"为什么我需要反斜线unspace在多行上分割方法调用\"\u003e为什么我需要反斜线(unspace)在多行上分割方法调用?\u003c/h3\u003e\n\u003cp\u003e(请在这儿添加答案)\u003c/p\u003e\n\u003ch3 id=\"为什么我不能从-new-方法初始化私有属性-我怎么修复它\"\u003e为什么我不能从 new 方法初始化私有属性, 我怎么修复它?\u003c/h3\u003e\n\u003cp\u003e这样的代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eA\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"nv\"\u003e$!x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nf\"\u003eshow-x\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$!x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eshow-x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e不会打印出 5. Private 属性是私有的, 这意味着私有属性在外面是不可见的. 如果默认的构造器能够初始化私有属性, 那么这些私有属性就会泄露到公共 API 中.\u003c/p\u003e\n\u003cp\u003e如果你仍旧想让它工作, 你可以添加一个 \u003ccode\u003esubmethod BUILD\u003c/code\u003e 来初始化它们:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"nv\"\u003e$!x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003esubmethod\u003c/span\u003e \u003cspan class=\"nb\"\u003eBUILD\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$!x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nf\"\u003eshow-x\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$!x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eshow-x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eBUILD\u003c/code\u003e 由默认的构造器使用用户传递给构造器的所有具名参数调用（间接地, 更多细节查看\u003ca href=\"https://docs.raku.org/language/objects#Object_Construction\"\u003eObject Construction\u003c/a\u003e）。 \u003ccode\u003e:$!x\u003c/code\u003e 是名为 \u003ccode\u003ex\u003c/code\u003e 的具名参数, 当使用名为 \u003ccode\u003ex\u003c/code\u003e 的具名参数来调用时, 它的值被绑定到属性 \u003ccode\u003e$!x\u003c/code\u003e 上.\u003c/p\u003e\n\u003cp\u003e但不要这样做。如果名字是 public 的，使用 \u003ccode\u003e$.x\u003c/code\u003e 以那样的方式声明没有什么不好，因为默认情况下外部视图是只读的(readonly)，你仍然可以使用 \u003ccode\u003e$!x\u003c/code\u003e 从内部访问它。\u003c/p\u003e\n\u003ch3 id=\"say-put-和-print-怎么不同-为什么不同\"\u003esay, put 和 print 怎么不同, 为什么不同?\u003c/h3\u003e\n\u003cp\u003e最明显的区别是, \u003ccode\u003esay\u003c/code\u003e 和 \u003ccode\u003eput\u003c/code\u003e 在输出后面添加了一个换行符, 而 \u003ccode\u003eprint\u003c/code\u003e 没有.\u003c/p\u003e\n\u003cp\u003e但是还有另外一个区别: \u003ccode\u003eprint\u003c/code\u003e 和 \u003ccode\u003eput\u003c/code\u003e 通过对每一个传递来的 item 调用 \u003ccode\u003eStr\u003c/code\u003e 方法来把它的参数转换为字符串, 相反,  \u003ccode\u003esay\u003c/code\u003e 使用  \u003ccode\u003egist\u003c/code\u003e 方法. 前者是为计算机设计的, 后者是为人类.\u003c/p\u003e\n\u003cp\u003e或者它俩被解析的方式不同, \u003ccode\u003e$obj.Str\u003c/code\u003e 给出一个字符串表示, \u003ccode\u003e$obj.gist\u003c/code\u003e 是对象的一个简短总结, 适合编程人员的快速识别, \u003ccode\u003e$obj.perl\u003c/code\u003e 打印一个 Perlish 的表示.\u003c/p\u003e\n\u003cp\u003e例如, 类型对象, 也是熟知的 “未定义值”, 字符串化为一个空的字符串和警告, 而 \u003ccode\u003egist\u003c/code\u003e 方法返回由一对圆括号包裹的类型的名字.(用于表明除了类型之外什么也没有).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eDate\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# $x now contains the Date type object\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# empty string plus warning\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# (Date)\\n\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所以, \u003ccode\u003esay\u003c/code\u003e 优化的用于调试和向人们展示, \u003ccode\u003eprint\u003c/code\u003e 和 \u003ccode\u003eput\u003c/code\u003e 更适合于产生用于其它程序的输出.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eput\u003c/code\u003e 因此是 \u003ccode\u003eprint\u003c/code\u003e 和 \u003ccode\u003esay\u003c/code\u003e 之间的一种混合; 像 \u003ccode\u003eprint\u003c/code\u003e, 它的输出适合于其它程序, 也像 \u003ccode\u003esay\u003c/code\u003e, 它在输出的末尾添加了换行符。\u003c/p\u003e\n\u003ch3 id=\"token-和-rule-之间的区别是什么\"\u003etoken 和 rule 之间的区别是什么?\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eregex\u003c/code\u003e , \u003ccode\u003etoken\u003c/code\u003e 和 \u003ccode\u003erule\u003c/code\u003e 这三个都引入了正则表达式, 但是语义略微有一点不同.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003etoken\u003c/code\u003e 隐含了 \u003ccode\u003e:ratchet\u003c/code\u003e 或 \u003ccode\u003e:r\u003c/code\u003e 修饰符, 这防止了 rule 的回溯.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003erule\u003c/code\u003e 隐含了 \u003ccode\u003e:ratchet\u003c/code\u003e 和  \u003ccode\u003e:sigspace\u003c/code\u003e (缩写为 \u003ccode\u003e:s\u003c/code\u003e)修饰符, 这意味着规则(rule)不会回溯, 并且它把 regex 的文本中的空白当作 \u003ccode\u003e\u0026lt;.ws\u0026gt;\u003c/code\u003e 调用(例如匹配空白, 除了在两个单词字符之间之外, 它是可选的).  regex 开头的空白和备选分支中每个分支开头的空白会被忽略.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eregex\u003c/code\u003e 声明一个简单的正则表达式，没有任何隐含的修饰符。\u003c/p\u003e\n\u003ch3 id=\"die-和-fail-之间的区别是什么\"\u003edie 和 fail 之间的区别是什么?\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003edie\u003c/code\u003e 抛出一个异常.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efail\u003c/code\u003e 返回一个 Failure 对象。 （如果调用者已经声明了 \u003ccode\u003euse fatal;\u003c/code\u003e 在调用作用域中, \u003ccode\u003efail\u003c/code\u003e 会抛出一个异常而不返回）\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eFailure\u003c/code\u003e 是一个 “未知的” 或 “懒惰的” 异常.它是一个含有异常的对象, 当这个 Failure 被用作普通的对象或者在 sink 上下文中忽略它时, 则会抛出一个异常.\u003c/p\u003e\n\u003cp\u003eFailure 从 \u003ccode\u003edefined\u003c/code\u003e 检查中返回 False, 并且你可以使用 \u003ccode\u003eexception\u003c/code\u003e 方法提取出异常.\u003c/p\u003e\n\u003ch3 id=\"为什么-wantarray-或-want-不见了-我能在不同的上下文中返回不同的东西吗\"\u003e为什么 wantarray 或 want 不见了? 我能在不同的上下文中返回不同的东西吗?\u003c/h3\u003e\n\u003cp\u003ePerl 拥有 \u003ca href=\"https://docs.raku.org/language/5to6-perlfunc#wantarray\"\u003ewantarray\u003c/a\u003e 函数来告诉你这是在空上下文, 标量上下文,还是在列表上下文中调用的. Raku 没有与之等价的结构, 因为上下文不是向内流动的,  例如, 子例程不知道调用所在的上下文.\u003c/p\u003e\n\u003cp\u003e一个愿意是因为 Raku 有多重分派, 在这样一个例子中:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nb\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nb\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eStr\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eStr\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e没办法决定子例程 \u003ccode\u003ef\u003c/code\u003e 的调用者想要一个字符串还是想要一个整数, 因为它还不知道调用者是什么. 通常这要求解决 halting 问题, 在这个问题上, 即使写 Raku编译器的人也会遇到麻烦.\u003c/p\u003e\n\u003cp\u003e在 Raku 中达到上下文敏感的方式是返回一个知道怎样响应方法调用的对象.\u003c/p\u003e\n\u003cp\u003e例如, regex 匹配返回 Match \u003ca href=\"http://doc.raku.org/type/Match\"\u003e对象\u003c/a\u003e, 该对象知道怎样响应列表索引, 散列索引, 并能变成匹配的字符串.\u003c/p\u003e\n\u003ch3 id=\"pointer-和-opaquepointer-的区别是声明\"\u003ePointer 和 OpaquePointer 的区别是声明?\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eOpaquePointer\u003c/code\u003e 被废弃了并且已经用 \u003ccode\u003ePointer\u003c/code\u003e 代替了。\u003c/p\u003e\n\u003ch2 id=\"raku-实现\"\u003eRaku 实现\u003c/h2\u003e\n\u003ch3 id=\"哪个-raku-的实现是可用的\"\u003e哪个 Raku 的实现是可用的?\u003c/h3\u003e\n\u003cp\u003e当前开发最好的是 Rakudo(使用多个虚拟机后端)。历史上的实现还包括 Niecza (.NET) 和 Pugs (Haskell). 其它的列出在 \u003ca href=\"https://www.raku.org/compilers/\"\u003eRaku Compilers\u003c/a\u003e 下面。\u003c/p\u003e\n\u003ch3 id=\"rakudo-是用什么语言写的\"\u003eRakudo 是用什么语言写的?\u003c/h3\u003e\n\u003cp\u003eNQP 是（1）NQP 代码，（2）底层虚拟机使用的任何语言，（3）一些第三方 C 和 Java 库，以及（4）早期运行构建过程创建的一些引导文件的混合 。\u003c/p\u003e\n\u003ch3 id=\"为什么我不能把所有的数值都赋值给-num-类型的变量\"\u003e为什么我不能把所有的数值都赋值给 Num 类型的变量?\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eNum\u003c/span\u003e \u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# dies with\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Type check failed in assignment to \u0026#39;$x\u0026#39;; expected \u0026#39;Num\u0026#39; but got \u0026#39;Int\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"http://doc.raku.org/type/Num\"\u003eNum\u003c/a\u003e 是浮点类型, 与 \u003ca href=\"http://doc.raku.org/type/Int\"\u003e integers\u003c/a\u003e 不兼容. 如果你想要一个允许任何数字值的类型约束, 使用 \u003ca href=\"http://doc.raku.org/type/Numeric\"\u003eNumeric\u003c/a\u003e (它也允许\u003ca href=\"http://doc.raku.org/type/Complex\"\u003e复数\u003c/a\u003e), 或 \u003ca href=\"http://doc.raku.org/type/Real\"\u003eReal\u003c/a\u003e如果你想排除复数.\u003c/p\u003e\n\u003ch2 id=\"元问题和宣传\"\u003e元问题和宣传\u003c/h2\u003e\n\u003ch3 id=\"raku-什么时间会准备好-就是现在吗\"\u003eRaku 什么时间会准备好? 就是现在吗?\u003c/h3\u003e\n\u003cp\u003e编程语言和它们的编译器的准备就绪不是一个二元决策. 因为它们(语言和实现)能进化, 它们平稳地发展变得更可用. 根据你对编程语言的要求, 它可能适合也可能不适合你.\u003c/p\u003e\n\u003cp\u003e请查看 \u003ca href=\"http://raku.org/compilers/features\"\u003e功能对比矩阵\u003c/a\u003e 了解更详尽的实现了的功能.\u003c/p\u003e\n\u003cp\u003e请注意, Larry Wall 已经在 FOSDEM 2015 会议上宣布, 一个产品级的 Rakudo Raku 将会在 2015 圣诞节发布.\u003c/p\u003e\n\u003ch3 id=\"为什么我要学习-raku-它有什么了不起的吗\"\u003e为什么我要学习 Raku? 它有什么了不起的吗?\u003c/h3\u003e\n\u003cp\u003eRaku 统一了很多其它编程语言中不经常有的伟大想法. 虽然其中的几种语言提供了其中的某些功能, 但是没有提供全部.\u003c/p\u003e\n\u003cp\u003e不像大部分语言那样, 它提供了：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRaku 提供了过程式的, 面向对象的和函数式编程方法。\u003c/li\u003e\n\u003cli\u003e易于使用的一致性语法, 数据结构中的符号不变性。\u003c/li\u003e\n\u003cli\u003e完全基于字素的 Unicode 支持, 包括附件 #29\u003c/li\u003e\n\u003cli\u003e足够清晰的正则表达式, 更易读, 更多功能。\u003c/li\u003e\n\u003cli\u003eJunctions 允许多个可能性的简单检测, 例如 $a == 1|3|42（意思是 $a 等于 1 或 3 或 42）\u003c/li\u003e\n\u003cli\u003e相对于全局变量, 动态作用域变量提供了词法作用域备选\u003c/li\u003e\n\u003cli\u003e强调可组合性和本地作用域以阻止「超距作用」。例如, imports 总是本地作用域的。\u003c/li\u003e\n\u003cli\u003e易于理解的一致性作用域规则和闭包\u003c/li\u003e\n\u003cli\u003e强大的面向对象, 含有类和 roles(所有的东西都可以当做对象)。继承、子类型、代码复用。\u003c/li\u003e\n\u003cli\u003e内省到对象和元对象中（叠罗汉）\u003c/li\u003e\n\u003cli\u003e元对象协议允许元编程而不需要生成/解析代码。\u003c/li\u003e\n\u003cli\u003e子例程和方法签名，便于解包位置参数和命名参数。\u003c/li\u003e\n\u003cli\u003e根据元数,类型和可选的额外代码使用不同的签名对同一具名子例程/方法进行多重分派。\u003c/li\u003e\n\u003cli\u003e未知子例程/不可能的分派在编译时给出错误报告。\u003c/li\u003e\n\u003cli\u003e可选的渐进类型检查，无需额外的运行时成本。 还有可选类型注解。\u003c/li\u003e\n\u003cli\u003e基于对编译器/运行时状态的内省的高级错误报告。这意味着更有用，更精确的错误信息。\u003c/li\u003e\n\u003cli\u003ePhasers(如 BEGIN/END) 允许代码作用域 进入/退出, 首次循环/last/next 和其它更多上下文中执行。\u003c/li\u003e\n\u003cli\u003e高级并发模型，用于隐式以及显式多进程处理，这超越了原始线程和锁。 Raku 的并发提供了一组丰富的（可组合的）工具。\u003c/li\u003e\n\u003cli\u003e多核计算机越来越多地被使用，由于并行性使得 Raku 可以使用多核，包括隐式（例如使用\u0026raquo;.方法）和显式 (start {code}) 。这很重要，因为摩尔定律正在结束。\u003c/li\u003e\n\u003cli\u003e提供结构化语言支持以实现异步执行代码的编程。\u003c/li\u003e\n\u003cli\u003eSupplies 允许在发生某些事情时执行代码（如定时器，信号或文件系统事件）。\u003c/li\u003e\n\u003cli\u003ereact/whenever/supply 关键字允许容易地构建交互式，事件驱动的应用程序。\u003c/li\u003e\n\u003cli\u003e懒惰求值，如果可能的话，急切求值当需要或必要时。这意味着，例如，惰性列表，甚至无限延迟列表，如斐波纳契序列或所有素数。\u003c/li\u003e\n\u003cli\u003e原生数据类型用于更快的处理\u003c/li\u003e\n\u003cli\u003e使用 NativeCall 连接到 C/C++ 中的外部库非常简单。\u003c/li\u003e\n\u003cli\u003e使用 Inline::Perl5 和 Inline::Python 连接 Perl 5(CPAN)/Python 非常简单。\u003c/li\u003e\n\u003cli\u003e可以同时安装和加载模块的多个版本。\u003c/li\u003e\n\u003cli\u003e由于更简单的更新/升级策略，简化了系统管理。\u003c/li\u003e\n\u003cli\u003e简单的数值计算没有损失精度，因为 Rats（有理数）。\u003c/li\u003e\n\u003cli\u003e用于解析数据或代码的可扩展语法（Raku 用它解析自身）\u003c/li\u003e\n\u003cli\u003eRaku 是一种非常易变的语言（定义自己的函数，运算符，traits 和数据类型，为您修改解析器）。\u003c/li\u003e\n\u003cli\u003e很多的数据类型选择，加上创建自己的类型的可能性。\u003c/li\u003e\n\u003cli\u003e具有适当边界检查的多维成型的和/或原生数组\u003c/li\u003e\n\u003cli\u003e在某个匹配出现时, 词法解析期间随时执行代码\u003c/li\u003e\n\u003cli\u003e添加自定义运算符或添加 trait 特征和编写子例程一样简单。\u003c/li\u003e\n\u003cli\u003e在任何运算符（系统或自定义添加的）上自动生成超运算符。\u003c/li\u003e\n\u003cli\u003e运行在各种后端上。目前 MoarVM 和 JVM，JavaScript在开发中，可能会有更多。\u003c/li\u003e\n\u003cli\u003e执行期间（JIT）热代码路径的运行时优化。\u003c/li\u003e\n\u003cli\u003e运行在小型（例如 Raspberry Pi）和大型多处理器硬件上。\u003c/li\u003e\n\u003cli\u003e基于垃圾收集：没有及时销毁，所以引用计数没有必要。使用 phasers 用以及时的动作。\u003c/li\u003e\n\u003cli\u003e方法可以在运行时混合到任何实例化的对象中，例如。以允许添加带外数据。\u003c/li\u003e\n\u003cli\u003e通过使用具有多重分派和自动生成使用信息的 MAIN 子例程，使命令行接口易于访问。\u003c/li\u003e\n\u003cli\u003e更少的代码行创建更紧凑的程序。名字的霍夫曼编码允许更好的可读性。\u003c/li\u003e\n\u003cli\u003e使用简单的迭代器接口定义的惰性列表，任何类可以通过最小化的提供单个方法来提供。\u003c/li\u003e\n\u003cli\u003ePerl  6 的座右铭与 Perl一直保持不变：Perl是不同的。简而言之，Perl旨在\u0026quot;使容易的工作变得容易，使困难的工作变得可能\u0026quot;。和\u0026quot;条条大路通罗马\u0026quot;。现在有更多 -Ofun 添加进来。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e请查看 \u003ca href=\"http://raku.org/compilers/features\"\u003e功能比较矩阵\u003c/a\u003e 获取更多信息.\u003c/p\u003e\n\u003ch3 id=\"为什么不把它叫做除了-perl-以外的其它东西\"\u003e为什么不把它叫做除了 Perl 以外的其它东西?\u003c/h3\u003e\n\u003cp\u003e很多人建议, Raku 跟之前的 Perl 版本的区别太大了, 我们应该考虑给它改名, 或者考虑到 Raku 伤害了 Perl 5, 仅仅拥有同样的名字却有更高的版本号.\u003c/p\u003e\n\u003cp\u003eRaku 仍然叫做 “Perl\u0026quot; 的主要原因是:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRaku 仍然是一个 perlish 风格的语言, 和之前的版本遵守相同的底层思想(用于微型命名空间的符号, 条条大路通罗马, 吸收了很多自然语言的思想..)\u003c/li\u003e\n\u003cli\u003eRaku 的代码很 perlish.\u003c/li\u003e\n\u003cli\u003ePerl 仍然是一个强健的品牌名, 我们不想马上抛弃它\u003c/li\u003e\n\u003cli\u003e找到一个替代的名字很困难. 而且, “camelia” 和 “rakudo\u0026quot; 不是合适的编程语言名\u003c/li\u003e\n\u003cli\u003e即使 Raku 更改了它的名字, Perl 5 也不大可能增加它的版本号为 6.因为 Raku 已经根植于人们的头脑中了\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"raku-对我来说足够快了吗\"\u003eRaku 对我来说足够快了吗?\u003c/h3\u003e\n\u003cp\u003e那取决于你正在做什么。Raku 一直奉行“做对的事情然后做的更快”的哲学进行开发。对于某些东西来说它够快了, 但是需要做的更多。\nRaku 大部分是由志愿者开发的, 但是 Raku 的性能在不久的将来有待提高, 因为 MoarVM 后端包含一个现代的即时（JIT）编译器。\nPerl 5 程序员应该意识到 Raku 在面向对象方面有很多内建函数并且还有更多其它的。\n简单的基准测试会误导除非你在你的 Perl 5脚本中包含了诸如 Moose, 类型检测模块等。\u003c/p\u003e\n\u003cp\u003e下面这个粗超的基准测试, 使用了所有诸如此类的一般说明, 能展示 Raku 在某些类似任务上能和 Perl 5的速度接近。\n在你的系统上尝试下, 你可能会感到很惊讶!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Raku version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"k\"\u003ev\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFoo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.i\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"k\"\u003erw\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e1_000_000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$i\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$obj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFoo\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$obj\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$i\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Perl 5 version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003epackage\u003c/span\u003e \u003cspan class=\"nn\"\u003eFoo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eMoose\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"s\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003eis\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003erw\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003e__PACKAGE__-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emeta-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emake_immutable\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$i\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e1_000_000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$obj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFoo-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$obj-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"nf\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Another Perl 5 version that offers bare-bones set of features\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# compared to Moose/Raku\u0026#39;s version but those are not needed in this\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# specific, simple program anyway.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003epackage\u003c/span\u003e \u003cspan class=\"nn\"\u003eFoo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eMojo::Base\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$i\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e1_000_000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$obj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFoo-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$obj-\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"nf\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# A perl program which works under both perl5 (with perl -Mbigint)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# and raku\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$prev\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$current\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e100_000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$prev\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$current\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$current\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$prev\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nv\"\u003e$current\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"nv\"\u003e$current\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"源文件可以在 github 或 raku.org上找到.\nGeneral Rakudo 和 Raku 的区别是什么？ Rakudo 是 Raku 的一个实现。目前它是完成度最好的但是过去也有其它的实现, 将来也可能会有其它实现。Raku 是语言的定义。很多场合\n这两个名字可以宽松地使用并互相替换。\n会有 Raku 版本 6.0.0 吗? 第一个稳定语言版本的版本称为 v6.c，而不是 6.0.0。 不同的命名方案使得不太可能发布具有精确版本 6.0.0 的语言。\n您可以使用下面的代码检查您的 Rakudo 编译器是当前至少是什么版本（注意这可能不是真正的供应商二进制文件）：\nraku -e \u0026#39;say q[too old] if $*PERL.version before Version.new(q[6.c])\u0026#39; 它首先由 Rakudo Raku 编译器版本的 2015.12 实现，并且可能通过使用 \u0026lsquo;use 6.c\u0026rsquo; 指令在可预见的未来支持后续版本。 下一个语言版本（无发布日期）为 v6.d.\n作为一个 Raku 初学者我应该安装什么？ 如果你是一个 Linux 或 Mac 用户, 你可能需要下载 Rakudo Star 并通过编译 MoarVM 版本安装（一个简单的处理）\n如果你是一个 Windows 32 或 64 位用户, 那么 Rakudo Star 二进制版本在 rakudo 网站也能获得。你需要 Windows Git 来使用 panda。\nLinux 和 Mac 二进制版本稍后也可能从供应商和第三方那儿获取到。尽管供应商版本可能过时了。\n或者有一个官方的 rakudo star Docker 镜像, 地址为 https://hub.docker.com/_/rakudo-star/\n作为一个中高级用户我想跟进 Rakudo 开发 安装类似于 Perl 5 的 perlbrew \u0026ndash; rakudobrew , 同等的 Python 还有 Ruby 工具。\n从哪里能找到关于 Raku 的好文档？ 最令人信赖的信息能在 raku.org 或那儿的直接链接。\n你也可以使用 Google 搜索 Freenode #raku IRC 频道。\nhttp://www.raku.org/documentation/ 和 http://doc.raku.org/\n什么是 Raku spec？ \u0026ldquo;spec\u0026rdquo; 指的是 Raku的官方测试套件。它被称作 roast 并被托管在 github 上.\n它被用来测量一个 Raku 的实现有多彻底。\n有没有 Raku 的术语相关的项目？ 查看 glossary\n我是一个 Perl 5 程序员. Perl 5 和 Raku 的区别在哪儿？ 在 https://docs.raku.org/language/5to6-nutshell 下面查看 ‘5to6-nutshell’ pod 文档和相关页面。\n模块 Raku 有 CPAN 吗? 或者 Raku 会使用 Perl 5 的 CPAN 吗? Raku 还没有像 CPAN 那样成熟的模块仓库. 但是 modules.raku.org 有很多已知的 Raku 模块, panda 能在 Rakudo 上安装这些模块.\n我能在 Raku 中使用 Perl 5的模块吗？ 使用 Inline::Perl5 能让大部分 Perl 5 模块工作, 它甚至能很好地运行 Perl 5 的 Catalyst 和 DBI。\n我能在 Raku 中使用 C 和 C++ 吗？ Nativecall 让这个特别容易。\nNativecall 找不到 libfoo.so 并且我只有 libfoo.so.1.2! 这在 Debian 那样的系统中很常见。 你需要安装 \u0026ldquo;libfoo-dev\u0026rdquo; 来为丢失的文件设置符号链接。\n所有的传统 Unix 库函数去哪儿了？ 使用 Nativecall 访问它们很容易。 POSIX 模块也可以。\nRakudo 有核心标准库吗? Rakudo 是一个包含最小电量的编译器发布（Test 和 Nativecall等等），像 linux 内核一样。\nRakudo Star 是一个带有一些有用模块的 rakudo, 并且更多的模块可以从生态系统里安装。\n有像 B::Deparse 那样的东西吗?/我怎么抓住 AST? 使用 raku --target=ast -e 'very-short-example()' 来抓取编译单元的抽象语法树(AST)。\n语言特性 我怎么 dump Raku 的数据结构(就像 Perl 5 的 Data::Dumper 和类似的)？ examples:\nmy $foo=\u0026#34;bar\u0026#34; dd $foo # Str $foo = \u0026#34;bar\u0026#34; say :$foo.perl # :foo(\u0026#34;bar\u0026#34;) say :$foo.gist # foo =\u0026gt; bar 生态系统中还有模块来做这个事情, 例如 Data::Dump 使用颜色来 Dump。\n我怎么在 Raku 提示符（REPL）中找到历史命令行？ 从生态系统中安装 Linenoise.\n作为一种选择, 在 UNIX 那样的系统中可以安装 rlwrap。这在类 Debian 系统中可以通过apt-get install rlwrap 安装。\n为什么 Rakudo 编译器有时候报错更友好？ 如果在输出中出现 SORRY! , 则错误是编译时错误, 否则是运行时错误。\nExamples:\nsay 1/0 # Attempt to divide 1 by zero using div sub foo ( Int $a, Int $b ) {...} foo(1) # ===SORRY!=== Error while compiling ... 什么是 (Any)? Any 是一个用于新类的默认超类(superclass)的顶层类。 它经常在这样的上下文出现：变量被定义但没有被赋值， 这里它类似于其它语言中的 undef 或 null 值。\nexamples:\nmy $foo; say $foo; # (Any) 注意圆括号表明的类型对象 say $foo.^name # Any (Any) 不应该被用于检查 definedness。 在 Raku 中, definedness 可能是一个对象的属性。 通常实例是被定义的, 而类型对象是未定义的。\nsay 1.defined # True say (Any).defined # False so 是什么? so 是一个松散优先级的操作符, 它强制上下文为 Bool.\nso 拥有和 ? 前缀操作符同样的语义, 就像 and 是 \u0026amp;\u0026amp; 的低优先级版本一样.\n用法示例:\nsay so 1|2 == 2; # Bool::True 在这个例子中, 比较的结果(结果是 Junction)在打印之前被转换为 Bool 值了.\n签名中的那些 :D 和 :U 是什么东东？ 在 Raku 中, 类和其它类型是对象, 并且传递自身类型的类型检测。 例如如果你声明一个变量\nmy Int $x = 42; 那么, 你不仅可以给它赋值整数（即， Int 类的实例）, 还能给它赋值 Int 类型对象自身：\n$x = Int 如果你想排除类型对象, 你可以追加一个 :D 类型微笑符, 它代表\u0026quot;定义\u0026quot;（definite）:\nmy Int:D $x = 42; $x = Int; # dies with: # Type check failed in assignment to $x; # expected Int:D but got Int 同样地, :U 约束为未定义的值, 即类型对象。 要显式地允许类型对象或实例, 你可以使用 :_。\n签名中的 \u0026ndash;\u0026gt; 是什么东东？ --\u0026gt; 是一个返回值约束, 要么是类型要么是有定义的值。\n类型约束的例子:\nsub divide-to-int( Int $a, Int $b --\u0026gt; Int ) { return ($a / $b).narrow; } divide-to-int(3, 2) # Type check failed for return value; expected Int but got Rat 有明确返回值的例子:\nsub discard-random-number( --\u0026gt; 42 ) { rand } say discard-random-number # 42 在这种情况下，最终值被抛弃，因为已经指定了返回值。\nAny 和 Mu 的区别是什么? Mu 是所派生出的所有其它类型的基类型. Any 是从 Mu派生来的, 代表着任何类型的 Raku 值. 主要区别是, Any 不包含 Junction.\n子例程参数的默认类型是 Any, 以至于当你声明 sub foo ($a) 时, 你真正表达的是 sub foo (Any $a) . 类似地, 类的声明被假定继承自 Any, 除非使用了像 is Mu 这样的 trait 特征.\n怎么从 Junction 中提取值? 如果你想从 Junction 中提取值(特征态), 那你可能正误入歧途. 应该使用 Set 代替\nJunctions 作为匹配器, 而不是使用它们做代数.\n如果你还是想那样做, 你可以滥用自动线程(autothreading):\nsub eigenstates(Mu $j) { my @states; -\u0026gt; Any $s { @states.push: $s }.($j); @states; } say eigenstates(1|2|3).join(\u0026#39;, \u0026#39;); # prints 1, 2, 3 or a permutation thereof 如果 Str 是不可变的, 那么 s/// 是怎么工作的? 如果 Int 是不可变的, $i++ 是怎么工作的? 在 Raku 中, 很多基本类型是不可变的, 但是保存它们的变量不是. s/// 作用于变量上, 在这个变量中放入一个新创建的字符串对象. 同样地, $i++ 作用于 $i 变量上, 而不是作用在它里面的值身上.\n更多详情请查看: containers 文档。\n什么是数组引用和自动解引用? 我仍然需要 @ 符号吗? 在 Raku 中, 几乎所有的东西都是引用. 所以谈论 taking references 没有多大意义. 不像 Perl 5 那样, Raku 的标量变量也能直接包含数组:\nmy @a = 1, 2, 3; say @a; # \u0026#34;1 2 3\\n\u0026#34; say @a.WHAT; # (Array) my $scalar = @a; say $scalar; # \u0026#34;1 2 3\\n\u0026#34; say $scalar.WHAT; # (Array) 最大的区别是, 标量中的数组在列表上下文中是一个值, 然而数组会被愉快地迭代:\nmy @a = 1, 2, 3; my $s = @a; for @a { ... } # loop body executed 3 times for $s { ... } # loop body executed only once my @flat = flat @a, @a; say @flat.elems; # 6 my @nested = flat $s, $s; say @nested.elems; # 2 你可以使用 @( ... ) 或通过在表达式身上调用 .list 方法来强制展平, 使用 $( ... ) 或通过在表达式身上调用 .item 方法强制为 item 上下文(不展平).\n为什么还要符号? 你不能没有它们吗? 有几个原因:\n它们使插值变量到字符串中变得更容易 它们为不同的变量和 twigils 组成了微型命名空间, 因此避免了名字冲突 它们允许简单的 单数/复数 区别 它们像使用强制性名词标记的自然语言一样工作，所以我们的大脑为处理它而生 它们不是强制性的，因为你可以声明无符号名字（如果你不介意含糊不清） \u0026ldquo;类型 Str 不支持关联索引\u0026rdquo; 你可能会把字符串插值和 HTML 搞混。\nmy $foo = \u0026#34;abc\u0026#34;; say \u0026#34;$foo\u0026lt;html-tag\u0026gt;\u0026#34;; Raku 认为 $foo 是一个散列而 \u0026lt;html-tag\u0026gt; 是一个字符串字面量的散列键。使用闭包来帮助你理解吧。\nmy $foo = \u0026#34;abc\u0026#34;; say \u0026#34;{$foo}\u0026lt;html-tag\u0026gt;\u0026#34;; Raku 有协程吗? 什么是 yield ? Raku 没有 Python 那样的 yield 语句, 但是它通过惰性列表却能提供类似的功能. 有两种很潮的方式来写出能返回惰性列表的例程:\n# first method, gather/take my @values := gather while have_data() { # do some computations take some_data(); # do more computations } # second method, use .map or similar method # on a lazy list my @squares := (1..*).map(-\u0026gt; $x { $x * $x }); # or my @squares = (1..*).map(-\u0026gt; \\x { x² }); 为什么我需要反斜线(unspace)在多行上分割方法调用? (请在这儿添加答案)\n为什么我不能从 new 方法初始化私有属性, 我怎么修复它? 这样的代码:\nclass A { has $!x; method show-x { say $!x; } } A.new(x =\u0026gt; 5).show-x; 不会打印出 5. Private 属性是私有的, 这意味着私有属性在外面是不可见的. 如果默认的构造器能够初始化私有属性, 那么这些私有属性就会泄露到公共 API 中.\n如果你仍旧想让它工作, 你可以添加一个 submethod BUILD 来初始化它们:\nclass B { has $!x; submethod BUILD(:$!x) { } method show-x { say $!x; } } A.new(x =\u0026gt; 5).show-x; BUILD 由默认的构造器使用用户传递给构造器的所有具名参数调用（间接地, 更多细节查看Object Construction）。 :$!x 是名为 x 的具名参数, 当使用名为 x 的具名参数来调用时, 它的值被绑定到属性 $!x 上.\n但不要这样做。如果名字是 public 的，使用 $.x 以那样的方式声明没有什么不好，因为默认情况下外部视图是只读的(readonly)，你仍然可以使用 $!x 从内部访问它。\nsay, put 和 print 怎么不同, 为什么不同? 最明显的区别是, say 和 put 在输出后面添加了一个换行符, 而 print 没有.\n但是还有另外一个区别: print 和 put 通过对每一个传递来的 item 调用 Str 方法来把它的参数转换为字符串, 相反, say 使用 gist 方法. 前者是为计算机设计的, 后者是为人类.\n或者它俩被解析的方式不同, $obj.Str 给出一个字符串表示, $obj.gist 是对象的一个简短总结, 适合编程人员的快速识别, $obj.perl 打印一个 Perlish 的表示.\n例如, 类型对象, 也是熟知的 “未定义值”, 字符串化为一个空的字符串和警告, 而 gist 方法返回由一对圆括号包裹的类型的名字.(用于表明除了类型之外什么也没有).\nmy Date $x; # $x now contains the Date type object print $x; # empty string plus warning say $x; # (Date)\\n 所以, say 优化的用于调试和向人们展示, print 和 put 更适合于产生用于其它程序的输出.\nput 因此是 print 和 say 之间的一种混合; 像 print, 它的输出适合于其它程序, 也像 say, 它在输出的末尾添加了换行符。\ntoken 和 rule 之间的区别是什么? regex , token 和 rule 这三个都引入了正则表达式, 但是语义略微有一点不同.\ntoken 隐含了 :ratchet 或 :r 修饰符, 这防止了 rule 的回溯.\nrule 隐含了 :ratchet 和 :sigspace (缩写为 :s)修饰符, 这意味着规则(rule)不会回溯, 并且它把 regex 的文本中的空白当作 \u0026lt;.ws\u0026gt; 调用(例如匹配空白, 除了在两个单词字符之间之外, 它是可选的). regex 开头的空白和备选分支中每个分支开头的空白会被忽略.\nregex 声明一个简单的正则表达式，没有任何隐含的修饰符。\ndie 和 fail 之间的区别是什么? die 抛出一个异常.\nfail 返回一个 Failure 对象。 （如果调用者已经声明了 use fatal; 在调用作用域中, fail 会抛出一个异常而不返回）\nFailure 是一个 “未知的” 或 “懒惰的” 异常.它是一个含有异常的对象, 当这个 Failure 被用作普通的对象或者在 sink 上下文中忽略它时, 则会抛出一个异常.\nFailure 从 defined 检查中返回 False, 并且你可以使用 exception 方法提取出异常.\n为什么 wantarray 或 want 不见了? 我能在不同的上下文中返回不同的东西吗? Perl 拥有 wantarray 函数来告诉你这是在空上下文, 标量上下文,还是在列表上下文中调用的. Raku 没有与之等价的结构, 因为上下文不是向内流动的, 例如, 子例程不知道调用所在的上下文.\n一个愿意是因为 Raku 有多重分派, 在这样一个例子中:\nmulti w(Int $x) { say \u0026#39;Int\u0026#39; } multi w(Str $x) { say \u0026#39;Str\u0026#39; } w(f()); 没办法决定子例程 f 的调用者想要一个字符串还是想要一个整数, 因为它还不知道调用者是什么. 通常这要求解决 halting 问题, 在这个问题上, 即使写 Raku编译器的人也会遇到麻烦.\n在 Raku 中达到上下文敏感的方式是返回一个知道怎样响应方法调用的对象.\n例如, regex 匹配返回 Match 对象, 该对象知道怎样响应列表索引, 散列索引, 并能变成匹配的字符串.\nPointer 和 OpaquePointer 的区别是声明? OpaquePointer 被废弃了并且已经用 Pointer 代替了。\nRaku 实现 哪个 Raku 的实现是可用的? 当前开发最好的是 Rakudo(使用多个虚拟机后端)。历史上的实现还包括 Niecza (.NET) 和 Pugs (Haskell). 其它的列出在 Raku Compilers 下面。\nRakudo 是用什么语言写的? NQP 是（1）NQP 代码，（2）底层虚拟机使用的任何语言，（3）一些第三方 C 和 Java 库，以及（4）早期运行构建过程创建的一些引导文件的混合 。\n为什么我不能把所有的数值都赋值给 Num 类型的变量? my Num $x = 42; # dies with # Type check failed in assignment to \u0026#39;$x\u0026#39;; expected \u0026#39;Num\u0026#39; but got \u0026#39;Int\u0026#39; Num 是浮点类型, 与 integers 不兼容. 如果你想要一个允许任何数字值的类型约束, 使用 Numeric (它也允许复数), 或 Real如果你想排除复数.\n元问题和宣传 Raku 什么时间会准备好? 就是现在吗? 编程语言和它们的编译器的准备就绪不是一个二元决策. 因为它们(语言和实现)能进化, 它们平稳地发展变得更可用. 根据你对编程语言的要求, 它可能适合也可能不适合你.\n请查看 功能对比矩阵 了解更详尽的实现了的功能.\n请注意, Larry Wall 已经在 FOSDEM 2015 会议上宣布, 一个产品级的 Rakudo Raku 将会在 2015 圣诞节发布.\n为什么我要学习 Raku? 它有什么了不起的吗? Raku 统一了很多其它编程语言中不经常有的伟大想法. 虽然其中的几种语言提供了其中的某些功能, 但是没有提供全部.\n不像大部分语言那样, 它提供了：\nRaku 提供了过程式的, 面向对象的和函数式编程方法。 易于使用的一致性语法, 数据结构中的符号不变性。 完全基于字素的 Unicode 支持, 包括附件 #29 足够清晰的正则表达式, 更易读, 更多功能。 Junctions 允许多个可能性的简单检测, 例如 $a == 1|3|42（意思是 $a 等于 1 或 3 或 42） 相对于全局变量, 动态作用域变量提供了词法作用域备选 强调可组合性和本地作用域以阻止「超距作用」。例如, imports 总是本地作用域的。 易于理解的一致性作用域规则和闭包 强大的面向对象, 含有类和 roles(所有的东西都可以当做对象)。继承、子类型、代码复用。 内省到对象和元对象中（叠罗汉） 元对象协议允许元编程而不需要生成/解析代码。 子例程和方法签名，便于解包位置参数和命名参数。 根据元数,类型和可选的额外代码使用不同的签名对同一具名子例程/方法进行多重分派。 未知子例程/不可能的分派在编译时给出错误报告。 可选的渐进类型检查，无需额外的运行时成本。 还有可选类型注解。 基于对编译器/运行时状态的内省的高级错误报告。这意味着更有用，更精确的错误信息。 Phasers(如 BEGIN/END) 允许代码作用域 进入/退出, 首次循环/last/next 和其它更多上下文中执行。 高级并发模型，用于隐式以及显式多进程处理，这超越了原始线程和锁。 Raku 的并发提供了一组丰富的（可组合的）工具。 多核计算机越来越多地被使用，由于并行性使得 Raku 可以使用多核，包括隐式（例如使用\u0026raquo;.方法）和显式 (start {code}) 。这很重要，因为摩尔定律正在结束。 提供结构化语言支持以实现异步执行代码的编程。 Supplies 允许在发生某些事情时执行代码（如定时器，信号或文件系统事件）。 react/whenever/supply 关键字允许容易地构建交互式，事件驱动的应用程序。 懒惰求值，如果可能的话，急切求值当需要或必要时。这意味着，例如，惰性列表，甚至无限延迟列表，如斐波纳契序列或所有素数。 原生数据类型用于更快的处理 使用 NativeCall 连接到 C/C++ 中的外部库非常简单。 使用 Inline::Perl5 和 Inline::Python 连接 Perl 5(CPAN)/Python 非常简单。 可以同时安装和加载模块的多个版本。 由于更简单的更新/升级策略，简化了系统管理。 简单的数值计算没有损失精度，因为 Rats（有理数）。 用于解析数据或代码的可扩展语法（Raku 用它解析自身） Raku 是一种非常易变的语言（定义自己的函数，运算符，traits 和数据类型，为您修改解析器）。 很多的数据类型选择，加上创建自己的类型的可能性。 具有适当边界检查的多维成型的和/或原生数组 在某个匹配出现时, 词法解析期间随时执行代码 添加自定义运算符或添加 trait 特征和编写子例程一样简单。 在任何运算符（系统或自定义添加的）上自动生成超运算符。 运行在各种后端上。目前 MoarVM 和 JVM，JavaScript在开发中，可能会有更多。 执行期间（JIT）热代码路径的运行时优化。 运行在小型（例如 Raspberry Pi）和大型多处理器硬件上。 基于垃圾收集：没有及时销毁，所以引用计数没有必要。使用 phasers 用以及时的动作。 方法可以在运行时混合到任何实例化的对象中，例如。以允许添加带外数据。 通过使用具有多重分派和自动生成使用信息的 MAIN 子例程，使命令行接口易于访问。 更少的代码行创建更紧凑的程序。名字的霍夫曼编码允许更好的可读性。 使用简单的迭代器接口定义的惰性列表，任何类可以通过最小化的提供单个方法来提供。 Perl 6 的座右铭与 Perl一直保持不变：Perl是不同的。简而言之，Perl旨在\u0026quot;使容易的工作变得容易，使困难的工作变得可能\u0026quot;。和\u0026quot;条条大路通罗马\u0026quot;。现在有更多 -Ofun 添加进来。 请查看 功能比较矩阵 获取更多信息.\n为什么不把它叫做除了 Perl 以外的其它东西? 很多人建议, Raku 跟之前的 Perl 版本的区别太大了, 我们应该考虑给它改名, 或者考虑到 Raku 伤害了 Perl 5, 仅仅拥有同样的名字却有更高的版本号.\nRaku 仍然叫做 “Perl\u0026quot; 的主要原因是:\nRaku 仍然是一个 perlish 风格的语言, 和之前的版本遵守相同的底层思想(用于微型命名空间的符号, 条条大路通罗马, 吸收了很多自然语言的思想..) Raku 的代码很 perlish. Perl 仍然是一个强健的品牌名, 我们不想马上抛弃它 找到一个替代的名字很困难. 而且, “camelia” 和 “rakudo\u0026quot; 不是合适的编程语言名 即使 Raku 更改了它的名字, Perl 5 也不大可能增加它的版本号为 6.因为 Raku 已经根植于人们的头脑中了 Raku 对我来说足够快了吗? 那取决于你正在做什么。Raku 一直奉行“做对的事情然后做的更快”的哲学进行开发。对于某些东西来说它够快了, 但是需要做的更多。 Raku 大部分是由志愿者开发的, 但是 Raku 的性能在不久的将来有待提高, 因为 MoarVM 后端包含一个现代的即时（JIT）编译器。 Perl 5 程序员应该意识到 Raku 在面向对象方面有很多内建函数并且还有更多其它的。 简单的基准测试会误导除非你在你的 Perl 5脚本中包含了诸如 Moose, 类型检测模块等。\n下面这个粗超的基准测试, 使用了所有诸如此类的一般说明, 能展示 Raku 在某些类似任务上能和 Perl 5的速度接近。 在你的系统上尝试下, 你可能会感到很惊讶!\n# Raku version use v6; class Foo { has $.i is rw }; for (1..1_000_000) -\u0026gt; $i { my $obj = Foo.new; $obj.i = $i; } # Perl 5 version package Foo; use Moose; has i =\u0026gt; (is =\u0026gt; \u0026#39;rw\u0026#39;); __PACKAGE__-\u0026gt;meta-\u0026gt;make_immutable; for my $i (1..1_000_000) { my $obj = Foo-\u0026gt;new; $obj-\u0026gt;i($i); } 1; # Another Perl 5 version that offers bare-bones set of features # compared to Moose/Raku\u0026#39;s version but those are not needed in this # specific, simple program anyway. package Foo; use Mojo::Base -base; has \u0026#39;i\u0026#39;; for my $i (1..1_000_000) { my $obj = Foo-\u0026gt;new; $obj-\u0026gt;i($i); } 1; # A perl program which works under both perl5 (with perl -Mbigint) # and raku my ($prev, $current) = (1, 0); for (0..100_000) { ($prev, $current) = ($current, $prev + $current); } print $current; "},"name":"FAQ","published":"2018-11-05T21:13:31+08:00","summary":"源文件可以在 github 或 raku.org上找到.\nGeneral Rakudo 和 Raku 的区别是什么？ Rakudo 是 Raku 的一个实现。目前它是完成度最好的但是过去也有其它的实现, 将来也可能会有其它实现。Raku 是语言的定义。很多场合\n这两个名字可以宽松地使用并互相替换。\n会有 Raku 版本 6.0.0 吗? 第一个稳定语言版本的版本称为 v6.c，而不是 6.0.0。 不同的命名方案使得不太可能发布具有精确版本 6.0.0 的语言。\n您可以使用下面的代码检查您的 Rakudo 编译器是当前至少是什么版本（注意这可能不是真正的供应商二进制文件）：\nraku -e \u0026#39;say q[too old] if $*PERL.version before Version.new(q[6.c])\u0026#39; 它首先由 Rakudo Raku 编译器版本的 2015.12 实现，并且可能通过使用 \u0026lsquo;use 6.c\u0026rsquo; 指令在可预见的未来支持后续版本。 下一个语言版本（无发布日期）为 v6.d.\n作为一个 Raku 初学者我应该安装什么？ 如果你是一个 Linux 或 Mac 用户, 你可能需要下载 Rakudo Star 并通过编译 MoarVM 版本安装（一个简单的处理）\n如果你是一个 Windows 32 或 64 位用户, 那么 Rakudo Star 二进制版本在 rakudo 网站也能获得。你需要 Windows Git 来使用 panda。","type":"entry","url":"https://ohmycloud.github.io/posts/30.faq/"}