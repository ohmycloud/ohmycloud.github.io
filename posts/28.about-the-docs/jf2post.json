{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003cp\u003e本文档集代表了正在努力记录 Raku 编程语言的目标是：全面; 使用方便; 易于导航; 对新手和经验丰富的 Raku 程序员都很有用。\u003c/p\u003e\n\u003cp\u003e该文档的 HTML 版本位于线上的 \u003ca href=\"https://docs.raku.org/\"\u003ehttps://docs.raku.org\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e该文档的官方来源位于 \u003ca href=\"https://github.com/raku/doc\"\u003eGitHub上的raku/doc\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e本特定文档快速概述了\u003ca href=\"https://github.com/raku/doc/blob/master/CONTRIBUTING.md\"\u003e在GitHub上的贡献\u003c/a\u003e中更详细描述的过程。本文档还简要介绍了编写 Raku Pod 文件，这些文件可以渲染为 HTML 和其他格式。\u003c/p\u003e\n\u003ch1 id=\"结构httpsdocsrakuorglanguageabout___top\"\u003e\u003ca href=\"https://docs.raku.org/language/about#___top\"\u003e结构\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e所有文档都是用 Raku Pod 编写的，并保存在 \u003ccode\u003edoc/\u003c/code\u003e 目录 \u003ccode\u003edoc/Language/\u003c/code\u003e 和 \u003ccode\u003edoc/Type/\u003c/code\u003e 子目录中。这些文件作为定义集合或“文档”处理，然后进行后处理并链接在一起。\u003c/p\u003e\n\u003ch1 id=\"从-pod-生成-htmlhttpsdocsrakuorglanguageabout___top\"\u003e\u003ca href=\"https://docs.raku.org/language/about#___top\"\u003e从 Pod 生成 HTML\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e要从 Pod 文件生成 HTML，你需要：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e最新版本的 Rakudo Raku 编译器\u003c/li\u003e\n\u003cli\u003eRaku 模块Pod::To::HTML，Pod::To::BigPage 和 URI::Escape（可以通过\u003ca href=\"https://github.com/ugexe/zef\"\u003ezef\u003c/a\u003e安装）。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e可选\u003c/strong\u003e：\u003ca href=\"https://www.graphviz.org/\"\u003eGraphViz\u003c/a\u003e，用于创建 Raku 类型之间关系的图形\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e可选\u003c/strong\u003e：\u003ca href=\"https://github.com/atom/highlights\"\u003eAtom Highlights\u003c/a\u003e 和 \u003ca href=\"https://atom.io/packages/language-raku\"\u003elanguage-raku\u003c/a\u003e，用于语法高亮显示\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e要在文件\u003ccode\u003ehtml/\u003c/code\u003e文件夹中生成文档，请运行：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eraku htmlify.p6\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e要从 Web 服务器托管文档，请安装 Perl 5 和 Mojolicious::Lite，然后运行：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eperl app.pl daemon\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"贡献httpsdocsrakuorglanguageabout___top\"\u003e\u003ca href=\"https://docs.raku.org/language/about#___top\"\u003e贡献\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003e文档是用 Raku Pod 编写的。\u003c/p\u003e\n\u003cp\u003e有关 Raku Pod 的快速介绍，请参阅\u003ca href=\"https://docs.raku.org/language/pod\"\u003eRaku Pod\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e有关 Raku Pod 规范的完整详细信息，请参见\u003ca href=\"https://design.raku.org/S26.html\"\u003e概要26,文档\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"添加定义httpsdocsrakuorglanguageabout___top\"\u003e\u003ca href=\"https://docs.raku.org/language/about#___top\"\u003e添加定义\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eDocumentables 可以使用 \u003ccode\u003e=headN\u003c/code\u003e Pod 指令来定义，其中 \u003ccode\u003eN\u003c/code\u003e 大于零（例如，\u003ccode\u003e=head1\u003c/code\u003e，\u003ccode\u003e=head2\u003c/code\u003e，\u0026hellip;）。\u003c/p\u003e\n\u003cp\u003e该指令之后的所有段落和块，直到同一级别的下一个指令，将被视为可记录的一部分。所以，在：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-pod6\" data-lang=\"pod6\"\u003e=head2 My Definition\n\nSome paragraphs, followed by some code:\n\n    my Code $examples = \u0026#34;amazing\u0026#34;;\n\nMind === blown.\n\n=head3 Minor details about My Definition\n\nIt\u0026#39;s fantastic.\n\n=head2 And now, for something completely different\n\n…\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可记录的 \u003ccode\u003e My Definition\u003c/code\u003e 延伸到了 \u003ccode\u003e=head2 And now…\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e可记录文件可能包含其他文件。例如，类可记录文件通常包含类实现的方法。\u003c/p\u003e\n\u003cp\u003e定义必须采用下列形式之一才能被识别为名为 document 文件的起点。首先是文档源代码：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-pod6\" data-lang=\"pod6\"\u003e=item X\u0026lt;C\u0026lt;How to use the þ infix\u0026gt; | infix,þ\u0026gt; (This a special case, which \nis always considered a definition)\n \n=item C\u0026lt;The þ Infix\u0026gt; \n \n=item B\u0026lt;The C\u0026lt;þ\u0026gt; Infix\u0026gt; \n \n=item C\u0026lt;Infix þ\u0026gt; \n \n=item B\u0026lt;Infix C\u0026lt;þ\u0026gt;\u0026gt; \n \n=item C\u0026lt;trait is cached\u0026gt; (A special case for the L\u0026lt;trait|/language/functions#Traits\u0026gt; documentables) \n \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后是渲染页面上的结果：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eHow to use the þ infix\u003c/code\u003e （这是一种特殊情况，始终被视为定义）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eThe þ Infix\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThe þ Infix\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eInfix þ\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInfix þ\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etrait is cached\u003c/code\u003e（\u003ca href=\"https://docs.raku.org/language/functions#Traits\"\u003etrait\u003c/a\u003e文档的特例）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e现在可以使用 HTML 文档中的搜索字段搜索这些项。\u003c/p\u003e\n\u003cp\u003e您可以使用粗体（\u003cstrong\u003eB\u0026lt;\u0026gt;\u003c/strong\u003e）或斜体（\u003cstrong\u003eI\u0026lt;\u0026gt;\u003c/strong\u003e）添加强调，可以使用或不使用代码格式（\u003cstrong\u003eC\u0026lt;\u0026gt;\u003c/strong\u003e）。由于当前的解析器限制，必须采取特殊步骤将**X\u0026lt;\u0026gt;**与其他格式代码一起使用; 例如：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-pod6\" data-lang=\"pod6\"\u003e=item X\u0026lt;B\u0026lt;foo\u0026gt;|foo\u0026gt; a fancy subroutine \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e像这样渲染\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003efoo\u003c/strong\u003e a fancy subroutine\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e请注意，管道（“|”）之后的文本没有格式。另请注意，**C\u0026lt;\u0026gt;**保留空格并将文本视为逐字处理。\u003c/p\u003e\n","text":"本文档集代表了正在努力记录 Raku 编程语言的目标是：全面; 使用方便; 易于导航; 对新手和经验丰富的 Raku 程序员都很有用。\n该文档的 HTML 版本位于线上的 https://docs.raku.org。\n该文档的官方来源位于 GitHub上的raku/doc。\n本特定文档快速概述了在GitHub上的贡献中更详细描述的过程。本文档还简要介绍了编写 Raku Pod 文件，这些文件可以渲染为 HTML 和其他格式。\n结构 所有文档都是用 Raku Pod 编写的，并保存在 doc/ 目录 doc/Language/ 和 doc/Type/ 子目录中。这些文件作为定义集合或“文档”处理，然后进行后处理并链接在一起。\n从 Pod 生成 HTML 要从 Pod 文件生成 HTML，你需要：\n最新版本的 Rakudo Raku 编译器 Raku 模块Pod::To::HTML，Pod::To::BigPage 和 URI::Escape（可以通过zef安装）。 可选：GraphViz，用于创建 Raku 类型之间关系的图形 可选：Atom Highlights 和 language-raku，用于语法高亮显示 要在文件html/文件夹中生成文档，请运行：\nraku htmlify.p6 要从 Web 服务器托管文档，请安装 Perl 5 和 Mojolicious::Lite，然后运行：\nperl app.pl daemon 贡献 文档是用 Raku Pod 编写的。\n有关 Raku Pod 的快速介绍，请参阅Raku Pod。\n有关 Raku Pod 规范的完整详细信息，请参见概要26,文档。\n添加定义 Documentables 可以使用 =headN Pod 指令来定义，其中 N 大于零（例如，=head1，=head2，\u0026hellip;）。\n该指令之后的所有段落和块，直到同一级别的下一个指令，将被视为可记录的一部分。所以，在：\n=head2 My Definition Some paragraphs, followed by some code: my Code $examples = \u0026#34;amazing\u0026#34;; Mind === blown. =head3 Minor details about My Definition It\u0026#39;s fantastic. =head2 And now, for something completely different … 可记录的 My Definition 延伸到了 =head2 And now…。\n可记录文件可能包含其他文件。例如，类可记录文件通常包含类实现的方法。\n定义必须采用下列形式之一才能被识别为名为 document 文件的起点。首先是文档源代码：\n=item X\u0026lt;C\u0026lt;How to use the þ infix\u0026gt; | infix,þ\u0026gt; (This a special case, which is always considered a definition) =item C\u0026lt;The þ Infix\u0026gt; =item B\u0026lt;The C\u0026lt;þ\u0026gt; Infix\u0026gt; =item C\u0026lt;Infix þ\u0026gt; =item B\u0026lt;Infix C\u0026lt;þ\u0026gt;\u0026gt; =item C\u0026lt;trait is cached\u0026gt; (A special case for the L\u0026lt;trait|/language/functions#Traits\u0026gt; documentables) 然后是渲染页面上的结果：\nHow to use the þ infix （这是一种特殊情况，始终被视为定义） The þ Infix The þ Infix Infix þ Infix þ trait is cached（trait文档的特例） 现在可以使用 HTML 文档中的搜索字段搜索这些项。\n您可以使用粗体（B\u0026lt;\u0026gt;）或斜体（I\u0026lt;\u0026gt;）添加强调，可以使用或不使用代码格式（C\u0026lt;\u0026gt;）。由于当前的解析器限制，必须采取特殊步骤将**X\u0026lt;\u0026gt;**与其他格式代码一起使用; 例如：\n=item X\u0026lt;B\u0026lt;foo\u0026gt;|foo\u0026gt; a fancy subroutine 像这样渲染\nfoo a fancy subroutine 请注意，管道（“|”）之后的文本没有格式。另请注意，**C\u0026lt;\u0026gt;**保留空格并将文本视为逐字处理。\n"},"name":"关于文档","published":"2018-11-03T21:13:31+08:00","summary":"本文档集代表了正在努力记录 Raku 编程语言的目标是：全面; 使用方便; 易于导航; 对新手和经验丰富的 Raku 程序员都很有用。\n该文档的 HTML 版本位于线上的 https://docs.raku.org。\n该文档的官方来源位于 GitHub上的raku/doc。\n本特定文档快速概述了在GitHub上的贡献中更详细描述的过程。本文档还简要介绍了编写 Raku Pod 文件，这些文件可以渲染为 HTML 和其他格式。\n结构 所有文档都是用 Raku Pod 编写的，并保存在 doc/ 目录 doc/Language/ 和 doc/Type/ 子目录中。这些文件作为定义集合或“文档”处理，然后进行后处理并链接在一起。\n从 Pod 生成 HTML 要从 Pod 文件生成 HTML，你需要：\n最新版本的 Rakudo Raku 编译器 Raku 模块Pod::To::HTML，Pod::To::BigPage 和 URI::Escape（可以通过zef安装）。 可选：GraphViz，用于创建 Raku 类型之间关系的图形 可选：Atom Highlights 和 language-raku，用于语法高亮显示 要在文件html/文件夹中生成文档，请运行：\nraku htmlify.p6 要从 Web 服务器托管文档，请安装 Perl 5 和 Mojolicious::Lite，然后运行：\nperl app.pl daemon 贡献 文档是用 Raku Pod 编写的。","type":"entry","url":"https://ohmycloud.github.io/posts/28.about-the-docs/"}