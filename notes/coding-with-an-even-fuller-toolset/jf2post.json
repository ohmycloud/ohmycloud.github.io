{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003cp\u003e叹息。它总是这样，不是吗？\u003c/p\u003e\n\u003cp\u003e你很快就\u003ca href=\"http://blogs.perl.org/users/damian_conway/2019/06/coding-with-a-full-toolset.html\"\u003e写完\u003c/a\u003e了关于拥有正确的工具如何使某一特定的编码任务变得微不足道\u0026hellip;当你意识到，就在隔壁，有一个更好的例子，你可以用它来表达同样的观点。\u003c/p\u003e\n\u003cp\u003e我在上一篇文章中谈到的\u0026quot;最长初始子路径\u0026quot;的例子是\u003ca href=\"https://perlweeklychallenge.org/blog/perl-weekly-challenge-012/\"\u003e上周每周挑战\u003c/a\u003e的第2项挑战。但那周的挑战1让我更清楚地看到，正确的工具可以简化一项任务。\u003c/p\u003e\n\u003cp\u003e挑战1是找到最小的不是质数的\u003ca href=\"https://en.wikipedia.org/wiki/Euclid_number\"\u003e欧几里得数\u003c/a\u003e。第 N 个欧几里得数是由前 N 个质数的乘积加上1给出的。所以欧几里得数的序列是:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e(2)+1, (2*3)+1, (2*3*5)+1, (2*3*5*7)+1, (2*3*5*7*11)+1, ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e如果有一个简单的方法来建立另一个列表的部分乘积的序列（例如质数的部分乘积），这个序列就很容易计算了:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e(2), (2*3), (2*3*5), (2*3*5*7), (2*3*5*7*11), ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e当然，Raku 也有这样一个工具内置在核心语言中。它叫做\u003ca href=\"http://docs.raku.org/language/operators#index-entry-%5B%5D_(triangular_reduction_metaoperators)\"\u003e三角还原元操作符\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e在 Raku 中，一个普通的还原运算符(如 \u003ccode\u003e[*]\u003c/code\u003e):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$product\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[*]\u003c/span\u003e \u003cspan class=\"nv\"\u003e@nums\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在列表的每两个元素之间插入方括号内的操作符，就像已经写好的一样:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$product\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e@nums\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nv\"\u003e@nums\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nv\"\u003e@nums\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nv\"\u003e@nums\u003c/span\u003e\u003cspan class=\"o\"\u003e[*-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，这计算的是所有数字的乘积。\u003c/p\u003e\n\u003cp\u003e另一方面，三角还原元运算符(例如，\u0026ldquo;三角积\u0026quot;运算符：\u003ccode\u003e[/*]\u003c/code\u003e):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e@products\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\\\u003cspan class=\"o\"\u003e*]\u003c/span\u003e \u003cspan class=\"nv\"\u003e@n\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或多或少地做了同样的事情，但它不是只返回最后的计算结果，而是从每一个连续的乘法步骤中返回一个部分结果的渐进列表，就像它被写的那样:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e@products\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e@n\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e],\u003c/span\u003e  \u003cspan class=\"nv\"\u003e@n\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]*\u003c/span\u003e\u003cspan class=\"nv\"\u003e@n\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e],\u003c/span\u003e  \u003cspan class=\"nv\"\u003e@n\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]*\u003c/span\u003e\u003cspan class=\"nv\"\u003e@n\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]*\u003c/span\u003e\u003cspan class=\"nv\"\u003e@n\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e],\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这似乎是一个神秘而无用的功能，但是，当然，这正是我们实际需要的神秘而无用的功能，以便从质数列表中建立欧几里得数的列表。\u003c/p\u003e\n\u003cp\u003e记住，我们要找的是第一个非质数欧几里得数。也就是：从所有大于从2到无穷大的所有质数的累计部分乘积序列的数中，选出第一个非质数。\u003c/p\u003e\n\u003cp\u003e而这一描述，又一次直接转化为一行 Raku:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e!*.\u003c/span\u003e\u003cspan class=\"nb\"\u003eis-prime\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# Print the first non-prime from\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003emap\u003c/span\u003e   \u003cspan class=\"o\"\u003e*+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e            \u003cspan class=\"c1\"\u003e# all numbers one greater than\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e[\u003c/span\u003e\\\u003cspan class=\"o\"\u003e*]\u003c/span\u003e                  \u003cspan class=\"c1\"\u003e# the cumulative products of\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e  \u003cspan class=\"nv\"\u003e\u0026amp;is-prime\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# all the prime numbers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"no\"\u003eInf\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# from 2 to infinity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当然，如果你还不熟悉 Raku，夹在语句中间的 \u003ccode\u003e[\\*]\u003c/code\u003e 可能看起来太可怕了。\u003c/p\u003e\n\u003cp\u003e可喜的是，我们的解决方案也恰好是纯函数式的，所以很容易就能把违规的行噪声剔除，并将其隐藏在某个名字更柔和的函数中:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003epartial-products-of\u003c/span\u003e  \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\\\u003cspan class=\"o\"\u003e*]\u003c/span\u003e \u003cspan class=\"nv\"\u003e@^list\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后我们可以这样写:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e!*.\u003c/span\u003e\u003cspan class=\"nb\"\u003eis-prime\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# Print the first non-prime from\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003emap\u003c/span\u003e   \u003cspan class=\"o\"\u003e*+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e            \u003cspan class=\"c1\"\u003e# all numbers one greater than\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003epartial-products-of\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# the cumulative products of\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e  \u003cspan class=\"nv\"\u003e\u0026amp;is-prime\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# all the prime numbers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"no\"\u003eInf\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# from 2 to infinity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者，如果这还是太玄乎了，我们可以全盘托出，把整个事情全部重构成纯英文:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003esuccessor-of\u003c/span\u003e         \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e@^list\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ethe-primes\u003c/span\u003e           \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"no\"\u003eInf\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e\u0026amp;is-prime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003efirst-non-prime\u003c/span\u003e      \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e@^list\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!*.\u003c/span\u003e\u003cspan class=\"nb\"\u003eis-prime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这给了我们:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003efirst-non-prime\u003c/span\u003e \u003cspan class=\"n\"\u003esuccessor-of\u003c/span\u003e \u003cspan class=\"n\"\u003epartial-products-of\u003c/span\u003e \u003cspan class=\"n\"\u003ethe-primes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e没有比这更多的声明性或自文档化的代码了!\n.\n.\n.\n.\n.\n当然，除非我们也正好知道欧几里得数的定义:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eEuclid-number\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003esuccessor-of\u003c/span\u003e \u003cspan class=\"n\"\u003epartial-products-of\u003c/span\u003e \u003cspan class=\"n\"\u003ethe-primes\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这种情况下，我们的整个解决方案现在只是我们问题的原始描述:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003efirst-non-prime\u003c/span\u003e \u003cspan class=\"n\"\u003eEuclid-number\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u0026ldquo;Raku：这不是你爷爷奶奶的可执行代码行噪音。\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eby \u003ca href=\"http://blogs.perl.org/users/damian_conway/2019/06/coding-with-an-even-fuller-toolset.html\"\u003eDamian\u003c/a\u003e\u003c/p\u003e\n","text":"叹息。它总是这样，不是吗？\n你很快就写完了关于拥有正确的工具如何使某一特定的编码任务变得微不足道\u0026hellip;当你意识到，就在隔壁，有一个更好的例子，你可以用它来表达同样的观点。\n我在上一篇文章中谈到的\u0026quot;最长初始子路径\u0026quot;的例子是上周每周挑战的第2项挑战。但那周的挑战1让我更清楚地看到，正确的工具可以简化一项任务。\n挑战1是找到最小的不是质数的欧几里得数。第 N 个欧几里得数是由前 N 个质数的乘积加上1给出的。所以欧几里得数的序列是:\n(2)+1, (2*3)+1, (2*3*5)+1, (2*3*5*7)+1, (2*3*5*7*11)+1, ... 如果有一个简单的方法来建立另一个列表的部分乘积的序列（例如质数的部分乘积），这个序列就很容易计算了:\n(2), (2*3), (2*3*5), (2*3*5*7), (2*3*5*7*11), ... 当然，Raku 也有这样一个工具内置在核心语言中。它叫做三角还原元操作符。\n在 Raku 中，一个普通的还原运算符(如 [*]):\n$product = [*] @nums; 在列表的每两个元素之间插入方括号内的操作符，就像已经写好的一样:\n$product = @nums[0] * @nums[1] * @nums[2] * ... * @nums[*-1]; 在这个例子中，这计算的是所有数字的乘积。\n另一方面，三角还原元运算符(例如，\u0026ldquo;三角积\u0026quot;运算符：[/*]):\n@products = [\\*] @n; 或多或少地做了同样的事情，但它不是只返回最后的计算结果，而是从每一个连续的乘法步骤中返回一个部分结果的渐进列表，就像它被写的那样:\n@products = (@n[0], @n[0]*@n[1], @n[0]*@n[1]*@n[2], ...); 这似乎是一个神秘而无用的功能，但是，当然，这正是我们实际需要的神秘而无用的功能，以便从质数列表中建立欧几里得数的列表。\n记住，我们要找的是第一个非质数欧几里得数。也就是：从所有大于从2到无穷大的所有质数的累计部分乘积序列的数中，选出第一个非质数。\n而这一描述，又一次直接转化为一行 Raku:\nsay first !*.is-prime, # Print the first non-prime from map *+1, # all numbers one greater than [\\*] # the cumulative products of grep \u0026amp;is-prime, # all the prime numbers 2..Inf; # from 2 to infinity 当然，如果你还不熟悉 Raku，夹在语句中间的 [\\*] 可能看起来太可怕了。\n可喜的是，我们的解决方案也恰好是纯函数式的，所以很容易就能把违规的行噪声剔除，并将其隐藏在某个名字更柔和的函数中:\nsub partial-products-of { [\\*] @^list } 然后我们可以这样写:\nsay first !*.is-prime, # Print the first non-prime from map *+1, # all numbers one greater than partial-products-of # the cumulative products of grep \u0026amp;is-prime, # all the prime numbers 2..Inf; # from 2 to infinity 或者，如果这还是太玄乎了，我们可以全盘托出，把整个事情全部重构成纯英文:\nsub successor-of { @^list.map(*+1) } sub the-primes { (2..Inf).grep(\u0026amp;is-prime) } sub first-non-prime { @^list.first(!*.is-prime) } 这给了我们:\nsay first-non-prime successor-of partial-products-of the-primes; 没有比这更多的声明性或自文档化的代码了! . . . . . 当然，除非我们也正好知道欧几里得数的定义:\nsub Euclid-number {successor-of partial-products-of the-primes} 在这种情况下，我们的整个解决方案现在只是我们问题的原始描述:\nsay first-non-prime Euclid-number; \u0026ldquo;Raku：这不是你爷爷奶奶的可执行代码行噪音。\u0026rdquo;\nby Damian\n"},"name":"编程之更全面的工具集","published":"2020-07-03T22:24:34Z","summary":"叹息。它总是这样，不是吗？\n你很快就写完了关于拥有正确的工具如何使某一特定的编码任务变得微不足道\u0026hellip;当你意识到，就在隔壁，有一个更好的例子，你可以用它来表达同样的观点。\n我在上一篇文章中谈到的\u0026quot;最长初始子路径\u0026quot;的例子是上周每周挑战的第2项挑战。但那周的挑战1让我更清楚地看到，正确的工具可以简化一项任务。\n挑战1是找到最小的不是质数的欧几里得数。第 N 个欧几里得数是由前 N 个质数的乘积加上1给出的。所以欧几里得数的序列是:\n(2)+1, (2*3)+1, (2*3*5)+1, (2*3*5*7)+1, (2*3*5*7*11)+1, ... 如果有一个简单的方法来建立另一个列表的部分乘积的序列（例如质数的部分乘积），这个序列就很容易计算了:\n(2), (2*3), (2*3*5), (2*3*5*7), (2*3*5*7*11), ... 当然，Raku 也有这样一个工具内置在核心语言中。它叫做三角还原元操作符。\n在 Raku 中，一个普通的还原运算符(如 [*]):\n$product = [*] @nums; 在列表的每两个元素之间插入方括号内的操作符，就像已经写好的一样:\n$product = @nums[0] * @nums[1] * @nums[2] * ... * @nums[*-1]; 在这个例子中，这计算的是所有数字的乘积。\n另一方面，三角还原元运算符(例如，\u0026ldquo;三角积\u0026quot;运算符：[/*]):\n@products = [\\*] @n; 或多或少地做了同样的事情，但它不是只返回最后的计算结果，而是从每一个连续的乘法步骤中返回一个部分结果的渐进列表，就像它被写的那样:\n@products = (@n[0], @n[0]*@n[1], @n[0]*@n[1]*@n[2], ...); 这似乎是一个神秘而无用的功能，但是，当然，这正是我们实际需要的神秘而无用的功能，以便从质数列表中建立欧几里得数的列表。\n记住，我们要找的是第一个非质数欧几里得数。也就是：从所有大于从2到无穷大的所有质数的累计部分乘积序列的数中，选出第一个非质数。\n而这一描述，又一次直接转化为一行 Raku:\nsay first !*.is-prime, # Print the first non-prime from map *+1, # all numbers one greater than [\\*] # the cumulative products of grep \u0026amp;is-prime, # all the prime numbers 2.","type":"entry","url":"http://localhost:1313/notes/coding-with-an-even-fuller-toolset/"}