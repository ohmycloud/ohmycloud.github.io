{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"content":{"html":"\u003ch2 id=\"空格最少化\"\u003e空格最少化\u003c/h2\u003e\n\u003cp\u003e在数组或散列的开括号(即下标左边的那个括号)之前不允许有空格, 参数列表的圆开括号前面也是不能有空格的。即:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nv\"\u003e@deadbeef\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# okay\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e%monsters\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecookie\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;}\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# okay\u003c/span\u003e\n\u003cspan class=\"nf\"\u003esaymewant\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecookie\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# okay\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e@a\u003c/span\u003e       \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$b\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# WRONG\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e%people\u003c/span\u003e  \u003cspan class=\"p\"\u003e{\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ejohn\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;}\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# WRONG\u003c/span\u003e\n\u003cspan class=\"n\"\u003emewant\u003c/span\u003e   \u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecookie\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# WRONG\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种限制的的几个副作用之一就是条件控制结构的周围不再需要圆括号了:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$value\u003c/span\u003e \u003cspan class=\"ow\"\u003eeq\u003c/span\u003e \u003cspan class=\"nv\"\u003e$target\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eBullseye!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"nv\"\u003e$i\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$i\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然而, 显式的使用 \u003ccode\u003eunspace\u003c/code\u003e 语法仍然能够让你对齐下标和后缀操作符:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nv\"\u003e%squirrels\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003efluffy\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSquirrel\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e%monsters\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecookie\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMonster\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e%beatles\u003c/span\u003e\\\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eringo\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;}\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBeatle\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e%people\u003c/span\u003e\\ \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ejohn\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;}\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"unspace\"\u003eunspace\u003c/h2\u003e\n\u003cp\u003e有些语言例如 \u003ccode\u003eC\u003c/code\u003e 允许你转义一个换行符使行联合起来. 其它语言(例如正则表达式)因为各种各样的原因, 允许你使用反斜线转义一个空白符。Raku 把这种记法推广到任何种类的空白上。通过在空白处前置一个 \u003ccode\u003e\\\u003c/code\u003e, 任何相邻的空白(包括注释)都会在解析器面前隐身。这就是鼎鼎大名的空白隐身(“unspace”)。\u003c/p\u003e\n\u003cp\u003e在 Raku 中, \u003ca href=\"https://design.raku.org/S02.html\"\u003eunspace\u003c/a\u003e 能够抑制任意的几种空白附属物。例如, 因为 Raku 要求名词和后缀操作符之间不能出现空白, 所以使用 unspace 让你可以把后缀操作符贴线对齐:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e%hash\\  {$key}\n@array\\ [$ix]\n$subref\\($arg)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上面的最后一种形式作为一种退化了的 unspace, 即反斜线后面直接跟着后缀。注意, 反斜线前面不允许有空白, 所以:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$subref \\($arg)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e是语法错误(two terms in a row)。而:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efoo \\($arg)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e会被解析为带有 \u003ccode\u003eCapture\u003c/code\u003e 参数的列表操作:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efoo(\\($arg))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然而, 其它形式的 unspace 可能被有效地放在空白之前.\u003c/p\u003e\n\u003cp\u003e其它后缀操作符也可能使用 unspace:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$number\\  ++;\n$number\\  --;\n1+3\\      i;\n$object\\  .say();\n$object\\#`{ your ad here }.say\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e另外一种\u0026quot;你看不见这空白\u0026quot;的正常用法是, 在下一行放上一个点语法形式的后缀:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    $object\\ # comment\n    .say\n     $object\\#`[ comment\n    ].say\n     $object\\\n    .say\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e但是 unspace 主要是关于语言扩展的: 它让你在换行可能会使解析器困惑的地方, 让行在任何情况下都能继续, 不管你当前安装的是什么解析器。(除非, 当然, 你自己覆写了 unspace 规则\u0026hellip;)\u003c/p\u003e\n\u003cp\u003e尽管我们说, unspace 让空白在解析器面前隐身了, 但是它并不能使空白在词法分析程序面前隐身。结果就是, 在 token 中禁止了 unspace。此外, 如果 unspace 包含一行或多行, 它们的行数仍然会被计算在内。\u003c/p\u003e\n","text":"空格最少化 在数组或散列的开括号(即下标左边的那个括号)之前不允许有空格, 参数列表的圆开括号前面也是不能有空格的。即:\n@deadbeef[$x] # okay %monsters{\u0026#39;cookie\u0026#39;} # okay saymewant(\u0026#39;cookie\u0026#39;) # okay @a [$b] # WRONG %people {\u0026#39;john\u0026#39;} # WRONG mewant (\u0026#39;cookie\u0026#39;) # WRONG 这种限制的的几个副作用之一就是条件控制结构的周围不再需要圆括号了:\nif $value eq $target { print \u0026#34;Bullseye!\u0026#34;; } while $i \u0026lt; 10 { $i++ } 然而, 显式的使用 unspace 语法仍然能够让你对齐下标和后缀操作符:\n%squirrels{\u0026#39;fluffy\u0026#39;} = Squirrel.new; %monsters.{\u0026#39;cookie\u0026#39;} = Monster.new; %beatles\\.{\u0026#39;ringo\u0026#39;} = Beatle.new; %people\\ .{\u0026#39;john\u0026#39;} = Person.new; unspace 有些语言例如 C 允许你转义一个换行符使行联合起来. 其它语言(例如正则表达式)因为各种各样的原因, 允许你使用反斜线转义一个空白符。Raku 把这种记法推广到任何种类的空白上。通过在空白处前置一个 \\, 任何相邻的空白(包括注释)都会在解析器面前隐身。这就是鼎鼎大名的空白隐身(“unspace”)。\n在 Raku 中, unspace 能够抑制任意的几种空白附属物。例如, 因为 Raku 要求名词和后缀操作符之间不能出现空白, 所以使用 unspace 让你可以把后缀操作符贴线对齐:\n%hash\\ {$key} @array\\ [$ix] $subref\\($arg) 上面的最后一种形式作为一种退化了的 unspace, 即反斜线后面直接跟着后缀。注意, 反斜线前面不允许有空白, 所以:\n$subref \\($arg) 是语法错误(two terms in a row)。而:\nfoo \\($arg) 会被解析为带有 Capture 参数的列表操作:\nfoo(\\($arg)) 然而, 其它形式的 unspace 可能被有效地放在空白之前.\n其它后缀操作符也可能使用 unspace:\n$number\\ ++; $number\\ --; 1+3\\ i; $object\\ .say(); $object\\#`{ your ad here }.say 另外一种\u0026quot;你看不见这空白\u0026quot;的正常用法是, 在下一行放上一个点语法形式的后缀:\n $object\\ # comment .say $object\\#`[ comment ].say $object\\ .say 但是 unspace 主要是关于语言扩展的: 它让你在换行可能会使解析器困惑的地方, 让行在任何情况下都能继续, 不管你当前安装的是什么解析器。(除非, 当然, 你自己覆写了 unspace 规则\u0026hellip;)\n尽管我们说, unspace 让空白在解析器面前隐身了, 但是它并不能使空白在词法分析程序面前隐身。结果就是, 在 token 中禁止了 unspace。此外, 如果 unspace 包含一行或多行, 它们的行数仍然会被计算在内。\n"},"name":"Raku 中的 unspace","published":"2021-07-11T00:00:00+08:00","summary":"Unspace in Raku","type":"entry","url":"https://ohmyweekly.github.io/notes/2015-09-18-unspace-in-raku/"}