{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003cp\u003e欢迎来到\u003cstrong\u003eRaku One-Liner Advent Calendar的\u003c/strong\u003e第\u003ca href=\"https://raku.online/2018/12/21/merge-files-horizontally-in-perl-6/\"\u003e21\u003c/a\u003e天！到本季即将结束的日历只剩下几天了，所以让我们在剩下的日子里收集尽可能多的东西，今天我们将几个文件合并到一个文件中 🙂\u003c/p\u003e\n\u003cp\u003e我们今天的目标是获取两个（或三个或更多）文件并逐行复制其内容。例如，我们想要合并两个日志文件，知道它们的所有行都相互对应。\u003c/p\u003e\n\u003cp\u003e文件 a.txt：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e2018/12/20 11:16:13 \n2018/12/20 11:17:58 \n2018/12/20 11:19:18 \n2018/12/20 11:24:30\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e文件 b.txt：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026#34;/favicon.ico\u0026#34; failed (No such file)\n\u0026#34;/favicon.ico\u0026#34; failed (No such file)\n\u0026#34;/robots.txt\u0026#34; failed (No such file)\n\u0026#34;/robots.txt\u0026#34; failed (No such file)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们的第一个单行程序阐述了这个想法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eZ\u003c/span\u003e\u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"nv\"\u003e@\u003c/span\u003e\u003cspan class=\"err\"\u003e*\u003c/span\u003e\u003cspan class=\"nv\"\u003eARGS\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"n\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elines\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e假设程序运行如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ raku merge.pl a.txt b.txt\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e对于命令行中的每个文件名（\u003ccode\u003e@*.ARGS.map\u003c/code\u003e），将创建一个\u003ccode\u003eIO::Path\u003c/code\u003e对象（\u003ccode\u003e.IO\u003c/code\u003e），并读取文件中的行（\u003ccode\u003e.lines\u003c/code\u003e）。\u003c/p\u003e\n\u003cp\u003e在两个文件的情况下，我们有两个序列，然后使用应用了\u003ca href=\"https://docs.raku.org/routine/~#(Operators)_infix_~\"\u003e连接中缀~\u003c/a\u003e的\u003ca href=\"https://docs.raku.org/language/operators#index-entry-Z_%28zip_metaoperator%29\"\u003ezip元运算符Z\u003c/a\u003e逐行连接。\u003c/p\u003e\n\u003cp\u003e在那一步之后，我们得到另一个序列，我们可以逐行打印（\u003ccode\u003e.say for\u003c/code\u003e）。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e2018/12/20 11:16:13\u0026#34;/favicon.ico\u0026#34; failed (No such file)\n2018/12/20 11:17:58\u0026#34;/favicon.ico\u0026#34; failed (No such file)\n2018/12/20 11:19:18\u0026#34;/robots.txt\u0026#34; failed (No such file)\n2018/12/20 11:24:30\u0026#34;/robots.txt\u0026#34; failed (No such file)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e结果形式上是正确的，但是让我们在原始行之间添加一个空格。这是单行程序的更新版本：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etrim\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eZ\u003c/span\u003e\u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"nv\"\u003e@\u003c/span\u003e\u003cspan class=\"err\"\u003e*\u003c/span\u003e\u003cspan class=\"nv\"\u003eARGS\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"n\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elines\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e*~\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里，空格字符附加到每一行的末尾（\u003ccode\u003e.map: *~ ' '\u003c/code\u003e），并且由于在组合行的末尾将有一个额外的空格，它将被\u003ccode\u003etrim\u003c/code\u003e方法删除。可以使用它的兄弟，\u003ca href=\"https://docs.raku.org/routine/trim-trailing\"\u003etrim-trailing\u003c/a\u003e（或者如果你关心原始尾随空格恰好在第二个文件中的正则表达式）。\u003c/p\u003e\n\u003cp\u003e通过上述更改，文件现在完美合并：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e2018/12/20 11:16:13 \u0026#34;/favicon.ico\u0026#34; failed (No such file)\n2018/12/20 11:17:58 \u0026#34;/favicon.ico\u0026#34; failed (No such file)\n2018/12/20 11:19:18 \u0026#34;/robots.txt\u0026#34; failed (No such file)\n2018/12/20 11:24:30 \u0026#34;/robots.txt\u0026#34; failed (No such file)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e将同一文件合并到自身或提供两个以上的文件没有问题，例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ raku merge.pl a.txt a.txt a.txt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e今天就这样，明天再来！\u003c/p\u003e\n","text":"欢迎来到Raku One-Liner Advent Calendar的第21天！到本季即将结束的日历只剩下几天了，所以让我们在剩下的日子里收集尽可能多的东西，今天我们将几个文件合并到一个文件中 🙂\n我们今天的目标是获取两个（或三个或更多）文件并逐行复制其内容。例如，我们想要合并两个日志文件，知道它们的所有行都相互对应。\n文件 a.txt：\n2018/12/20 11:16:13 2018/12/20 11:17:58 2018/12/20 11:19:18 2018/12/20 11:24:30 文件 b.txt：\n\u0026#34;/favicon.ico\u0026#34; failed (No such file) \u0026#34;/favicon.ico\u0026#34; failed (No such file) \u0026#34;/robots.txt\u0026#34; failed (No such file) \u0026#34;/robots.txt\u0026#34; failed (No such file) 我们的第一个单行程序阐述了这个想法：\n.say for [Z~] @*ARGS.map: *.IO.lines; 假设程序运行如下：\n$ raku merge.pl a.txt b.txt 对于命令行中的每个文件名（@*.ARGS.map），将创建一个IO::Path对象（.IO），并读取文件中的行（.lines）。\n在两个文件的情况下，我们有两个序列，然后使用应用了连接中缀~的zip元运算符Z逐行连接。\n在那一步之后，我们得到另一个序列，我们可以逐行打印（.say for）。\n2018/12/20 11:16:13\u0026#34;/favicon.ico\u0026#34; failed (No such file) 2018/12/20 11:17:58\u0026#34;/favicon.ico\u0026#34; failed (No such file) 2018/12/20 11:19:18\u0026#34;/robots.txt\u0026#34; failed (No such file) 2018/12/20 11:24:30\u0026#34;/robots.txt\u0026#34; failed (No such file) 结果形式上是正确的，但是让我们在原始行之间添加一个空格。这是单行程序的更新版本：\n.trim.say for [Z~] @*ARGS.map: *.IO.lines.map: *~ \u0026#39; \u0026#39; 这里，空格字符附加到每一行的末尾（.map: *~ ' '），并且由于在组合行的末尾将有一个额外的空格，它将被trim方法删除。可以使用它的兄弟，trim-trailing（或者如果你关心原始尾随空格恰好在第二个文件中的正则表达式）。\n通过上述更改，文件现在完美合并：\n2018/12/20 11:16:13 \u0026#34;/favicon.ico\u0026#34; failed (No such file) 2018/12/20 11:17:58 \u0026#34;/favicon.ico\u0026#34; failed (No such file) 2018/12/20 11:19:18 \u0026#34;/robots.txt\u0026#34; failed (No such file) 2018/12/20 11:24:30 \u0026#34;/robots.txt\u0026#34; failed (No such file) 将同一文件合并到自身或提供两个以上的文件没有问题，例如：\n$ raku merge.pl a.txt a.txt a.txt 今天就这样，明天再来！\n"},"name":"🎄 21/25. 在 Raku 中水平地合并文件","published":"2018-12-21T09:23:06Z","summary":"欢迎来到Raku One-Liner Advent Calendar的第21天！到本季即将结束的日历只剩下几天了，所以让我们在剩下的日子里收集尽可能多的东西，今天我们将几个文件合并到一个文件中 🙂\n我们今天的目标是获取两个（或三个或更多）文件并逐行复制其内容。例如，我们想要合并两个日志文件，知道它们的所有行都相互对应。\n文件 a.txt：\n2018/12/20 11:16:13 2018/12/20 11:17:58 2018/12/20 11:19:18 2018/12/20 11:24:30 文件 b.txt：\n\u0026#34;/favicon.ico\u0026#34; failed (No such file) \u0026#34;/favicon.ico\u0026#34; failed (No such file) \u0026#34;/robots.txt\u0026#34; failed (No such file) \u0026#34;/robots.txt\u0026#34; failed (No such file) 我们的第一个单行程序阐述了这个想法：\n.say for [Z~] @*ARGS.map: *.IO.lines; 假设程序运行如下：\n$ raku merge.pl a.txt b.txt 对于命令行中的每个文件名（@*.ARGS.map），将创建一个IO::Path对象（.IO），并读取文件中的行（.lines）。\n在两个文件的情况下，我们有两个序列，然后使用应用了连接中缀~的zip元运算符Z逐行连接。\n在那一步之后，我们得到另一个序列，我们可以逐行打印（.say for）。\n2018/12/20 11:16:13\u0026#34;/favicon.ico\u0026#34; failed (No such file) 2018/12/20 11:17:58\u0026#34;/favicon.ico\u0026#34; failed (No such file) 2018/12/20 11:19:18\u0026#34;/robots.txt\u0026#34; failed (No such file) 2018/12/20 11:24:30\u0026#34;/robots.","type":"entry","url":"http://localhost:1313/notes/merging-files-horizontally-in-raku/"}