{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003ch1 id=\"函数\"\u003e函数\u003c/h1\u003e\n\u003cp\u003eFlink Table API \u0026amp; SQL 使用户能够通过函数进行数据转换。\u003c/p\u003e\n\u003ch2 id=\"函数的类型\"\u003e函数的类型\u003c/h2\u003e\n\u003cp\u003eFlink 中的函数有两个维度来分类。\u003c/p\u003e\n\u003cp\u003e一个维度是系统（或内置）函数 v.s. 目录函数。系统函数没有命名空间，可以只用名字来引用。目录函数属于目录和数据库，因此它们有目录和数据库的命名空间，它们可以用完全/部分限定名（\u003ccode\u003ecatalog.db.func\u003c/code\u003e 或 \u003ccode\u003edb.func\u003c/code\u003e）或者只用函数名来引用。\u003c/p\u003e\n\u003cp\u003e另一个维度是临时函数 v.s. 持久化函数。临时函数是不稳定的，只存在于一个会话的生命周期内，它们总是由用户创建的。而持久性函数则是在会话的生命周期内存在的，它们要么是由系统提供的，要么是在目录中持久存在的。\u003c/p\u003e\n\u003cp\u003e这两个维度给 Flink 用户提供了4类函数。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e临时系统函数\u003c/li\u003e\n\u003cli\u003e系统函数\u003c/li\u003e\n\u003cli\u003e临时目录函数\u003c/li\u003e\n\u003cli\u003e目录函数\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"引用函数\"\u003e引用函数\u003c/h2\u003e\n\u003cp\u003e在 Flink 中，用户有两种引用函数的方式 - 精确引用函数或模棱两可的引用函数。\u003c/p\u003e\n\u003ch3 id=\"精确的函数引用\"\u003e精确的函数引用\u003c/h3\u003e\n\u003cp\u003e精确的函数引用使用户能够专门使用目录函数，并且跨目录和跨数据库，例如从 \u003ccode\u003emytable\u003c/code\u003e 中选择 \u003ccode\u003emycatalog.mydb.myfunc(x)\u003c/code\u003e，从 \u003ccode\u003emytable\u003c/code\u003e 中选择 \u003ccode\u003emydb.myfunc(x)\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这只从 Flink 1.10 开始支持。\u003c/p\u003e\n\u003ch3 id=\"模棱两可的函数引用\"\u003e模棱两可的函数引用\u003c/h3\u003e\n\u003cp\u003e在模棱两可的函数引用中，用户只需在 SQL 查询中指定函数名称即可，例如：\u003ccode\u003eselect myfunc(x) from mytable\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"函数解析顺序\"\u003e函数解析顺序\u003c/h2\u003e\n\u003cp\u003e只有当有不同类型但名称相同的函数时，解析顺序才是重要的，比如有三个函数都名为 \u0026ldquo;myfunc\u0026rdquo;，但分别是临时目录、目录和系统函数。如果没有函数名冲突，则函数将被解析为唯一的一个。\u003c/p\u003e\n\u003ch3 id=\"精确的函数引用-1\"\u003e精确的函数引用\u003c/h3\u003e\n\u003cp\u003e因为系统函数没有命名空间，所以 Flink 中的精确函数引用必须指向临时目录函数或目录函数。\u003c/p\u003e\n\u003cp\u003e其解析顺序是：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e临时目录函数\u003c/li\u003e\n\u003cli\u003e目录函数\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"含糊不清的函数参考\"\u003e含糊不清的函数参考\u003c/h3\u003e\n\u003cp\u003e解析顺序是:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e临时系统函数\u003c/li\u003e\n\u003cli\u003e系统函数\u003c/li\u003e\n\u003cli\u003e临时目录函数，在当前目录和当前数据库中的会话。\u003c/li\u003e\n\u003cli\u003e目录函数，在当前目录和当前数据库中的会话。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e原文链接: \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/functions/\"\u003ehttps://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/functions/\u003c/a\u003e\u003c/p\u003e\n","text":"函数 Flink Table API \u0026amp; SQL 使用户能够通过函数进行数据转换。\n函数的类型 Flink 中的函数有两个维度来分类。\n一个维度是系统（或内置）函数 v.s. 目录函数。系统函数没有命名空间，可以只用名字来引用。目录函数属于目录和数据库，因此它们有目录和数据库的命名空间，它们可以用完全/部分限定名（catalog.db.func 或 db.func）或者只用函数名来引用。\n另一个维度是临时函数 v.s. 持久化函数。临时函数是不稳定的，只存在于一个会话的生命周期内，它们总是由用户创建的。而持久性函数则是在会话的生命周期内存在的，它们要么是由系统提供的，要么是在目录中持久存在的。\n这两个维度给 Flink 用户提供了4类函数。\n临时系统函数 系统函数 临时目录函数 目录函数 引用函数 在 Flink 中，用户有两种引用函数的方式 - 精确引用函数或模棱两可的引用函数。\n精确的函数引用 精确的函数引用使用户能够专门使用目录函数，并且跨目录和跨数据库，例如从 mytable 中选择 mycatalog.mydb.myfunc(x)，从 mytable 中选择 mydb.myfunc(x)。\n这只从 Flink 1.10 开始支持。\n模棱两可的函数引用 在模棱两可的函数引用中，用户只需在 SQL 查询中指定函数名称即可，例如：select myfunc(x) from mytable。\n函数解析顺序 只有当有不同类型但名称相同的函数时，解析顺序才是重要的，比如有三个函数都名为 \u0026ldquo;myfunc\u0026rdquo;，但分别是临时目录、目录和系统函数。如果没有函数名冲突，则函数将被解析为唯一的一个。\n精确的函数引用 因为系统函数没有命名空间，所以 Flink 中的精确函数引用必须指向临时目录函数或目录函数。\n其解析顺序是：\n临时目录函数 目录函数 含糊不清的函数参考 解析顺序是:\n临时系统函数 系统函数 临时目录函数，在当前目录和当前数据库中的会话。 目录函数，在当前目录和当前数据库中的会话。 原文链接: https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/functions/\n"},"name":"函数","published":"2020-08-22T00:00:00Z","summary":"Functions","type":"entry","url":"http://localhost:1313/notes/2020-08-22-functions/"}