{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"content":{"html":"\u003ch1 id=\"dates-模块的加载和使用\"\u003eDates 模块的加载和使用\u003c/h1\u003e\n\u003cp\u003e在 Julia 的 Pkg REPL 中, 输入 \u003ccode\u003eadd Dates\u003c/code\u003e 添加 Dates 模块。回到 Julia 的 REPL 中, 输入:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; using Dates\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-01-01T00:00:00\n\njulia\u0026gt; typeof\u003cspan class=\"o\"\u003e(\u003c/span\u003eDateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020\u003cspan class=\"o\"\u003e))\u003c/span\u003e\nDateTime\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T00:00:00\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1,12\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T12:00:00\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1,12,30\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T12:30:00\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1,12,30,59\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T12:30:59\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1,12,30,59, 999\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T12:30:59.999\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020, 8\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020, 8, 1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003eDates.Year\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020\u003cspan class=\"o\"\u003e)\u003c/span\u003e,Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e8\u003cspan class=\"o\"\u003e)\u003c/span\u003e,Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n2020-08-01\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003eDates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e8\u003cspan class=\"o\"\u003e)\u003c/span\u003e,Dates.Year\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n2020-08-01\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"date-和-datetime-的算术操作\"\u003eDate 和 DateTime 的算术操作\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003edt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2012,2,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2012-02-29\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003edt2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2000,2,1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2000-02-01\n\njulia\u0026gt; dump\u003cspan class=\"o\"\u003e(\u003c/span\u003edt\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\n  instant: Dates.UTInstant\u003cspan class=\"o\"\u003e{\u003c/span\u003eDay\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    periods: Day\n      value: Int64 \u003cspan class=\"m\"\u003e734562\u003c/span\u003e\n\njulia\u0026gt; dump\u003cspan class=\"o\"\u003e(\u003c/span\u003edt2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\n  instant: Dates.UTInstant\u003cspan class=\"o\"\u003e{\u003c/span\u003eDay\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    periods: Day\n      value: Int64 \u003cspan class=\"m\"\u003e730151\u003c/span\u003e\n\njulia\u0026gt; dt \u0026gt; dt2\n\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\njulia\u0026gt; dt !\u003cspan class=\"o\"\u003e=\u003c/span\u003e dt2\n\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\njulia\u0026gt; dt + dt2\nERROR: MethodError: no method matching +\u003cspan class=\"o\"\u003e(\u003c/span\u003e::Date, ::Date\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\njulia\u0026gt; dt * dt2\nERROR: MethodError: no method matching *\u003cspan class=\"o\"\u003e(\u003c/span\u003e::Date, ::Date\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\njulia\u0026gt; dt / dt2\nERROR: MethodError: no method matching /\u003cspan class=\"o\"\u003e(\u003c/span\u003e::Date, ::Date\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; dt - dt2\n\u003cspan class=\"m\"\u003e4411\u003c/span\u003e days\n\njulia\u0026gt; typeof\u003cspan class=\"o\"\u003e(\u003c/span\u003edt - dt2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDay\n\njulia\u0026gt; dt2 - dt\n-4411 days\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003edt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2012,2,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2012-02-29T00:00:00\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003edt2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2000,2,1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2000-02-01T00:00:00\n\njulia\u0026gt; dt - dt2\n\u003cspan class=\"m\"\u003e381110400000\u003c/span\u003e milliseconds\n\njulia\u0026gt; typeof\u003cspan class=\"o\"\u003e(\u003c/span\u003edt - dt2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nMillisecond\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"访问器函数\"\u003e访问器函数\u003c/h1\u003e\n\u003cp\u003e因为 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Date\"\u003eDate\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.DateTime\"\u003eDateTime\u003c/a\u003e 类型被存储为单个 \u003ca href=\"https://docs.julialang.org/en/v1/base/numbers/#Core.Int64\"\u003eInt64\u003c/a\u003e 值，所以日期部分或字段可以通过访问器函数进行检索。小写访问器函数以整数形式返回字段。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014, 1, 31\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-01-31\n\njulia\u0026gt; Dates.year\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e2014\u003c/span\u003e\n\njulia\u0026gt; Dates.month\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\njulia\u0026gt; Dates.week\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\njulia\u0026gt; Dates.day\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e而专有形式返回相应 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Period\"\u003ePeriod\u003c/a\u003e 类型中的相同值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.Year\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e2014\u003c/span\u003e years\n\njulia\u0026gt; Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e days\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eJulia 还提供了复合方法，因为在同时需要多个字段的情况下，这些方法提供了一种效率衡量标准。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.yearmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014, 1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; Dates.monthday\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e1, 31\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; Dates.yearmonthday\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014, 1, 31\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也可以访问底层 \u003ccode\u003eUTInstant\u003c/code\u003e 或整数值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; dump\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\n  instant: Dates.UTInstant\u003cspan class=\"o\"\u003e{\u003c/span\u003eDay\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    periods: Day\n      value: Int64 \u003cspan class=\"m\"\u003e735264\u003c/span\u003e\n\njulia\u0026gt; t.instant\nDates.UTInstant\u003cspan class=\"o\"\u003e{\u003c/span\u003eDay\u003cspan class=\"o\"\u003e}(\u003c/span\u003eDay\u003cspan class=\"o\"\u003e(\u003c/span\u003e735264\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n\njulia\u0026gt; Dates.value\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e735264\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"查询函数\"\u003e查询函数\u003c/h1\u003e\n\u003cp\u003e查询函数提供关于 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 的历法信息。它们包括关于一周中的某一天的信息。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014, 1, 31\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-01-31\n\njulia\u0026gt; Dates.dayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\njulia\u0026gt; Dates.dayname\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;Friday\u0026#34;\u003c/span\u003e\n\njulia\u0026gt; Dates.dayofweekofmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 5th Friday of January\u003c/span\u003e\n\u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\njulia\u0026gt; Dates.monthname\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;January\u0026#34;\u003c/span\u003e\n\njulia\u0026gt; Dates.daysinmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以及 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 的年份和季度信息。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.isleapyear\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\n\njulia\u0026gt; Dates.dayofyear\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\njulia\u0026gt; Dates.quarterofyear\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\njulia\u0026gt; Dates.dayofquarter\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.dayname\"\u003edayname\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.monthname\"\u003emonthname\u003c/a\u003e 方法也可以使用一个可选的 \u003ccode\u003elocale\u003c/code\u003e 关键字，它可以用来返回其他语言/地区的年份或月份的名称。这些函数也有返回缩写名称的版本，即 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.dayabbr\"\u003edayabbr\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.monthabbr\"\u003emonthabbr\u003c/a\u003e。首先将映射加载到 \u003ccode\u003eLOCALES\u003c/code\u003e 变量中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003efrench_months\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;janvier\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;février\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;mars\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;avril\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;mai\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;juin\u0026#34;\u003c/span\u003e,\n                        \u003cspan class=\"s2\"\u003e\u0026#34;juillet\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;août\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;septembre\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;octobre\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;novembre\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;décembre\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003efrench_monts_abbrev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;janv\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;févr\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;mars\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;avril\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;mai\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;juin\u0026#34;\u003c/span\u003e,\n                              \u003cspan class=\"s2\"\u003e\u0026#34;juil\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;août\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;sept\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;oct\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;nov\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;déc\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003efrench_days\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;lundi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;mardi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;mercredi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;jeudi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;vendredi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;samedi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;dimanche\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; Dates.LOCALES\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.DateLocale\u003cspan class=\"o\"\u003e(\u003c/span\u003efrench_months, french_monts_abbrev, french_days, \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e])\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后可以利用上述函数进行查询。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.dayname\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;vendredi\u0026#34;\u003c/span\u003e\n\njulia\u0026gt; Dates.monthname\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;janvier\u0026#34;\u003c/span\u003e\n\njulia\u0026gt; Dates.monthabbr\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;janv\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于没有加载日期的缩写版本，试图使用函数 \u003ccode\u003edayabbr\u003c/code\u003e 会出错。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.dayabbr\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nERROR: BoundsError: attempt to access 1-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eString,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e at index \u003cspan class=\"o\"\u003e[\u003c/span\u003e5\u003cspan class=\"o\"\u003e]\u003c/span\u003e\nStacktrace:\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"时间类型-周期算术\"\u003e时间类型-周期算术\u003c/h1\u003e\n\u003cp\u003e在使用任何语言/日期框架时，熟悉如何处理日期-周期算术是一个很好的做法，因为有一些\u003ca href=\"https://codeblog.jonskeet.uk/2010/12/01/the-joys-of-date-time-arithmetic/\"\u003e棘手的问题\u003c/a\u003e需要处理（尽管对于日-精度类型来说要少得多）。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eDates\u003c/code\u003e 模块的方法试图遵循简单的原则，即在做 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Period\"\u003ePeriod\u003c/a\u003e 算术时尽量少改。这种方法也常被称为历法算术，或者说如果有人在对话中问你同样的计算方法，你可能会猜到。为什么要大惊小怪呢？我们举个经典的例子：把2014年1月31日加1个月。答案是什么？Javascript 会说\u003ca href=\"https://markhneedham.com/blog/2009/01/07/javascript-add-a-month-to-a-date/\"\u003e3月3日\u003c/a\u003e（假设31天）。PHP 会说\u003ca href=\"https://stackoverflow.com/questions/5760262/php-adding-months-to-a-date-while-not-exceeding-the-last-day-of-the-month\"\u003e3月2日\u003c/a\u003e（假设30天）。事实上，没有正确的答案。在 \u003ccode\u003eDates\u003c/code\u003e 模块中，它给出的结果是2月28日。它是如何计算出来的呢？我喜欢想到赌场里经典的 7-7-7 赌博游戏。\u003c/p\u003e\n\u003cp\u003e现在只要想象一下，老虎机不是 7-7-7，而是年-月-日，或者在我们的例子中，2014-01-31。当你要求在这个日期的基础上增加1个月的时候，月份槽就会递增，所以现在我们有 2014-02-31。然后检查日号是否大于新月份的最后有效日，如果大于（如上例），则日号向下调整到最后有效日（28）。这种方法的后果是什么呢？继续在我们的日期上再加一个月，\u003ccode\u003e2014-02-28 + Month(1) == 2014-03-28\u003c/code\u003e。什么？你是在期待3月的最后一天吗？不对，对不起，记得 7-7-7 的档期。尽可能少的槽位要改变，所以我们先把月份槽位递增1，2014-03-28，轰，我们就完成了，因为这是一个有效的日期。另一方面，如果我们要在原来的日期 2014-01-31 的基础上增加2个月，那么我们最终的结果是 2014-03-31，正如预期的那样。这种方法的另一个后果是，当强行进行特定的排序时，关联性会有所损失（即以不同的顺序添加东西会导致不同的结果）。比如说：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e+Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e))\u003c/span\u003e + Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-02-28\n\njulia\u0026gt; \u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e+Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e))\u003c/span\u003e + Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-03-01\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e那是怎么回事呢？在第一行中，我们在1月29日的基础上加1天，结果是 2014-01-30；然后再加1个月，于是得到 2014-02-30，再往下调整为 2014-02-28。在第二个例子中，我们先加1个月，我们得到 2014-02-29，再往下调整为 2014-02-28，然后再加1天，结果是 2014-03-01。在这种情况下，有一个设计原则是有帮助的，那就是在存在多个 Periods 的情况下，操作将按照 Periods 的类型来排序，而不是按照它们的值或位置顺序来排序；这意味着总是先加 \u003ccode\u003eYear\u003c/code\u003e，然后加 \u003ccode\u003eMonth\u003c/code\u003e，再加 \u003ccode\u003eWeek\u003c/code\u003e 等。因此，以下确实会导致关联性并正好有用:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-03-01\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-03-01\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e棘手吗？也许吧。一个无辜的 \u003ccode\u003eDates\u003c/code\u003e 用户该怎么做？最重要的是要注意，当处理月份时，明确地强制执行某种关联性，可能会导致一些意想不到的结果，但除此之外，一切都应该按照预期工作。值得庆幸的是，在 UT 中处理时间时，日期-周期算术中的奇特情况几乎就是这样了（避免了处理夏令时、闰秒等的 \u0026ldquo;乐趣\u0026rdquo;）。\u003c/p\u003e\n\u003cp\u003e作为奖励，所有的周期算术对象都可以直接与范围一起工作。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003edr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,2,3\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2014-01-29\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2014-02-03\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; collect\u003cspan class=\"o\"\u003e(\u003c/span\u003edr\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n6-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eDate,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 2014-01-29\n 2014-01-30\n 2014-01-31\n 2014-02-01\n 2014-02-02\n 2014-02-03\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003edr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,07,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2014-01-29\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2014-07-29\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; collect\u003cspan class=\"o\"\u003e(\u003c/span\u003edr\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n7-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eDate,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 2014-01-29\n 2014-02-28\n 2014-03-29\n 2014-04-29\n 2014-05-29\n 2014-06-29\n 2014-07-29\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003efor i in Date(\u0026quot;2020-08-01\u0026quot;):Day(1):Date(\u0026quot;2020-08-09\u0026quot;)\n           println(i)\nend\n\n2020-08-01\n2020-08-02\n2020-08-03\n2020-08-04\n2020-08-05\n2020-08-06\n2020-08-07\n2020-08-08\n2020-08-09\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"调整器函数\"\u003e调整器函数\u003c/h1\u003e\n\u003cp\u003e尽管日期-周期算术很方便，但经常需要在日期上进行的计算具有日历或时间的性质，而不是固定的周期数。节日就是一个很好的例子，大多数都遵循这样的规则：\u0026ldquo;纪念日 = 五月的最后一个星期一\u0026rdquo;，或者 \u0026ldquo;感恩节 = 十一月的第四个星期四\u0026rdquo;。这类时间表达式处理的是相对于日历的规则，比如本月的第一天或最后一天，下周二，或第一个和第三个星期三等。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eDates\u003c/code\u003e 模块通过几个方便的方法提供了调整器 API，这些方法有助于简单、简洁地表达时间规则。第一组调整器方法处理周、月、季度和年的首尾。它们每个方法都接收一个单一的 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 作为输入，并返回或调整到相对于输入的所需时期的第一个或最后一个。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.firstdayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,16\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Adjusts the input to the Monday of the input\u0026#39;s week\u003c/span\u003e\n2014-07-14\n\njulia\u0026gt; Dates.lastdayofmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,16\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Adjusts to the last day of the input\u0026#39;s month\u003c/span\u003e\n2014-07-31\n\njulia\u0026gt; Dates.lastdayofquarter\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,16\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Adjusts to the last day of the input\u0026#39;s quarter\u003c/span\u003e\n2014-09-30\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来的两个高阶方法 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.tonext-Tuple%7BTimeType,Int64%7D\"\u003etonext\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.toprev-Tuple%7BTimeType,Int64%7D\"\u003etoprev\u003c/a\u003e，通过将一个 \u003ccode\u003eDateFunction\u003c/code\u003e 和一个起始 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 作为第一个参数来概括处理时间表达式。\u003ccode\u003eDateFunction\u003c/code\u003e 只是一个函数，通常是匿名的，它接受一个单一的 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 作为输入，并返回一个 \u003ca href=\"https://docs.julialang.org/en/v1/base/numbers/#Core.Bool\"\u003eBool\u003c/a\u003e，\u003ccode\u003etrue\u003c/code\u003e 表示满足调整标准。例如:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003eistuesday\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e x-\u0026gt;Dates.dayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e Dates.Tuesday\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Returns true if the day of the week of x is Tuesday\u003c/span\u003e\n\njulia\u0026gt; Dates.tonext\u003cspan class=\"o\"\u003e(\u003c/span\u003eistuesday, Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,13\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 2014-07-13 is a Sunday\u003c/span\u003e\n2014-07-15\n\njulia\u0026gt; Dates.tonext\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,13\u003cspan class=\"o\"\u003e)\u003c/span\u003e, Dates.Tuesday\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Convenience method provided for day of the week adjustments\u003c/span\u003e\n2014-07-15\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这对于更复杂的时间表达式的 do-block 语法是很有用的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.tonext\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,13\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e x\n           \u003cspan class=\"c1\"\u003e# Return true on the 4th Thursday of November (Thanksgiving)\u003c/span\u003e\n           Dates.dayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e Dates.Thursday \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n           Dates.dayofweekofmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n           Dates.month\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e Dates.November\n       end\n2014-11-27\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.julialang.org/en/v1/base/collections/#Base.filter\"\u003eBase.filter\u003c/a\u003e 方法可以用来获取指定范围内的所有有效日期/时刻。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# 匹兹堡街道清洁; 从 4月到11月的每第二个周二\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 日期范围从 2014-01-01 到 2015-01-01\u003c/span\u003e\njulia\u0026gt; \u003cspan class=\"nv\"\u003edr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Dates.Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2015\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; filter\u003cspan class=\"o\"\u003e(\u003c/span\u003edr\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e x\n           Dates.dayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e Dates.Tue \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n           Dates.April \u0026lt;\u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.month\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u0026lt;\u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.Nov \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n           Dates.dayofweekofmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\n       end\n8-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eDate,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 2014-04-08\n 2014-05-13\n 2014-06-10\n 2014-07-08\n 2014-08-12\n 2014-09-09\n 2014-10-14\n 2014-11-11\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Raku 中上面的代码可以写成:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nb\"\u003elazy\u003c/span\u003e \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@dates\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eDate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e2014-01-01\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"nb\"\u003eDate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e2015-01-01\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@dates\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$d\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$d\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eday-of-week\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e4\u003c/span\u003e  \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$d\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emonth\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$d\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eweekday-of-month\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e其他的例子和测试可以在 \u003ca href=\"https://github.com/JuliaLang/julia/blob/master/stdlib/Dates/test/adjusters.jl\"\u003estdlib/Dates/test/adjusters.jl\u003c/a\u003e 中找到。\u003c/p\u003e\n","text":"Dates 模块的加载和使用 在 Julia 的 Pkg REPL 中, 输入 add Dates 添加 Dates 模块。回到 Julia 的 REPL 中, 输入:\njulia\u0026gt; using Dates julia\u0026gt; DateTime(2020) 2020-01-01T00:00:00 julia\u0026gt; typeof(DateTime(2020)) DateTime julia\u0026gt; DateTime(2020,8,1) 2020-08-01T00:00:00 julia\u0026gt; DateTime(2020,8,1,12) 2020-08-01T12:00:00 julia\u0026gt; DateTime(2020,8,1,12,30) 2020-08-01T12:30:00 julia\u0026gt; DateTime(2020,8,1,12,30,59) 2020-08-01T12:30:59 julia\u0026gt; DateTime(2020,8,1,12,30,59, 999) 2020-08-01T12:30:59.999 julia\u0026gt; Date(2020, 8) 2020-08-01 julia\u0026gt; Date(2020, 8, 1) 2020-08-01 julia\u0026gt; Date(Dates.Year(2020),Dates.Month(8),Dates.Day(1)) 2020-08-01 julia\u0026gt; Date(Dates.Month(8),Dates.Year(2020)) 2020-08-01 Date 和 DateTime 的算术操作 julia\u0026gt; dt = Date(2012,2,29) 2012-02-29 julia\u0026gt; dt2 = Date(2000,2,1) 2000-02-01 julia\u0026gt; dump(dt) Date instant: Dates.UTInstant{Day} periods: Day value: Int64 734562 julia\u0026gt; dump(dt2) Date instant: Dates.UTInstant{Day} periods: Day value: Int64 730151 julia\u0026gt; dt \u0026gt; dt2 true julia\u0026gt; dt != dt2 true julia\u0026gt; dt + dt2 ERROR: MethodError: no method matching +(::Date, ::Date) [...] julia\u0026gt; dt * dt2 ERROR: MethodError: no method matching *(::Date, ::Date) [...] julia\u0026gt; dt / dt2 ERROR: MethodError: no method matching /(::Date, ::Date) julia\u0026gt; dt - dt2 4411 days julia\u0026gt; typeof(dt - dt2) Day julia\u0026gt; dt2 - dt -4411 days julia\u0026gt; dt = DateTime(2012,2,29) 2012-02-29T00:00:00 julia\u0026gt; dt2 = DateTime(2000,2,1) 2000-02-01T00:00:00 julia\u0026gt; dt - dt2 381110400000 milliseconds julia\u0026gt; typeof(dt - dt2) Millisecond 访问器函数 因为 Date 和 DateTime 类型被存储为单个 Int64 值，所以日期部分或字段可以通过访问器函数进行检索。小写访问器函数以整数形式返回字段。\njulia\u0026gt; t = Date(2014, 1, 31) 2014-01-31 julia\u0026gt; Dates.year(t) 2014 julia\u0026gt; Dates.month(t) 1 julia\u0026gt; Dates.week(t) 5 julia\u0026gt; Dates.day(t) 31 而专有形式返回相应 Period 类型中的相同值。\njulia\u0026gt; Dates.Year(t) 2014 years julia\u0026gt; Dates.Day(t) 31 days Julia 还提供了复合方法，因为在同时需要多个字段的情况下，这些方法提供了一种效率衡量标准。\njulia\u0026gt; Dates.yearmonth(t) (2014, 1) julia\u0026gt; Dates.monthday(t) (1, 31) julia\u0026gt; Dates.yearmonthday(t) (2014, 1, 31) 也可以访问底层 UTInstant 或整数值。\njulia\u0026gt; dump(t) Date instant: Dates.UTInstant{Day} periods: Day value: Int64 735264 julia\u0026gt; t.instant Dates.UTInstant{Day}(Day(735264)) julia\u0026gt; Dates.value(t) 735264 查询函数 查询函数提供关于 TimeType 的历法信息。它们包括关于一周中的某一天的信息。\njulia\u0026gt; t = Date(2014, 1, 31) 2014-01-31 julia\u0026gt; Dates.dayofweek(t) 5 julia\u0026gt; Dates.dayname(t) \u0026#34;Friday\u0026#34; julia\u0026gt; Dates.dayofweekofmonth(t) # 5th Friday of January 5 julia\u0026gt; Dates.monthname(t) \u0026#34;January\u0026#34; julia\u0026gt; Dates.daysinmonth(t) 31 以及 TimeType 的年份和季度信息。\njulia\u0026gt; Dates.isleapyear(t) false julia\u0026gt; Dates.dayofyear(t) 31 julia\u0026gt; Dates.quarterofyear(t) 1 julia\u0026gt; Dates.dayofquarter(t) 31 dayname 和 monthname 方法也可以使用一个可选的 locale 关键字，它可以用来返回其他语言/地区的年份或月份的名称。这些函数也有返回缩写名称的版本，即 dayabbr 和 monthabbr。首先将映射加载到 LOCALES 变量中。\njulia\u0026gt; french_months = [\u0026#34;janvier\u0026#34;, \u0026#34;février\u0026#34;, \u0026#34;mars\u0026#34;, \u0026#34;avril\u0026#34;, \u0026#34;mai\u0026#34;, \u0026#34;juin\u0026#34;, \u0026#34;juillet\u0026#34;, \u0026#34;août\u0026#34;, \u0026#34;septembre\u0026#34;, \u0026#34;octobre\u0026#34;, \u0026#34;novembre\u0026#34;, \u0026#34;décembre\u0026#34;]; julia\u0026gt; french_monts_abbrev = [\u0026#34;janv\u0026#34;,\u0026#34;févr\u0026#34;,\u0026#34;mars\u0026#34;,\u0026#34;avril\u0026#34;,\u0026#34;mai\u0026#34;,\u0026#34;juin\u0026#34;, \u0026#34;juil\u0026#34;,\u0026#34;août\u0026#34;,\u0026#34;sept\u0026#34;,\u0026#34;oct\u0026#34;,\u0026#34;nov\u0026#34;,\u0026#34;déc\u0026#34;]; julia\u0026gt; french_days = [\u0026#34;lundi\u0026#34;,\u0026#34;mardi\u0026#34;,\u0026#34;mercredi\u0026#34;,\u0026#34;jeudi\u0026#34;,\u0026#34;vendredi\u0026#34;,\u0026#34;samedi\u0026#34;,\u0026#34;dimanche\u0026#34;]; julia\u0026gt; Dates.LOCALES[\u0026#34;french\u0026#34;] = Dates.DateLocale(french_months, french_monts_abbrev, french_days, [\u0026#34;\u0026#34;]); 然后可以利用上述函数进行查询。\njulia\u0026gt; Dates.dayname(t;locale=\u0026#34;french\u0026#34;) \u0026#34;vendredi\u0026#34; julia\u0026gt; Dates.monthname(t;locale=\u0026#34;french\u0026#34;) \u0026#34;janvier\u0026#34; julia\u0026gt; Dates.monthabbr(t;locale=\u0026#34;french\u0026#34;) \u0026#34;janv\u0026#34; 由于没有加载日期的缩写版本，试图使用函数 dayabbr 会出错。\njulia\u0026gt; Dates.dayabbr(t;locale=\u0026#34;french\u0026#34;) ERROR: BoundsError: attempt to access 1-element Array{String,1} at index [5] Stacktrace: [...] 时间类型-周期算术 在使用任何语言/日期框架时，熟悉如何处理日期-周期算术是一个很好的做法，因为有一些棘手的问题需要处理（尽管对于日-精度类型来说要少得多）。\nDates 模块的方法试图遵循简单的原则，即在做 Period 算术时尽量少改。这种方法也常被称为历法算术，或者说如果有人在对话中问你同样的计算方法，你可能会猜到。为什么要大惊小怪呢？我们举个经典的例子：把2014年1月31日加1个月。答案是什么？Javascript 会说3月3日（假设31天）。PHP 会说3月2日（假设30天）。事实上，没有正确的答案。在 Dates 模块中，它给出的结果是2月28日。它是如何计算出来的呢？我喜欢想到赌场里经典的 7-7-7 赌博游戏。\n现在只要想象一下，老虎机不是 7-7-7，而是年-月-日，或者在我们的例子中，2014-01-31。当你要求在这个日期的基础上增加1个月的时候，月份槽就会递增，所以现在我们有 2014-02-31。然后检查日号是否大于新月份的最后有效日，如果大于（如上例），则日号向下调整到最后有效日（28）。这种方法的后果是什么呢？继续在我们的日期上再加一个月，2014-02-28 + Month(1) == 2014-03-28。什么？你是在期待3月的最后一天吗？不对，对不起，记得 7-7-7 的档期。尽可能少的槽位要改变，所以我们先把月份槽位递增1，2014-03-28，轰，我们就完成了，因为这是一个有效的日期。另一方面，如果我们要在原来的日期 2014-01-31 的基础上增加2个月，那么我们最终的结果是 2014-03-31，正如预期的那样。这种方法的另一个后果是，当强行进行特定的排序时，关联性会有所损失（即以不同的顺序添加东西会导致不同的结果）。比如说：\njulia\u0026gt; (Date(2014,1,29)+Dates.Day(1)) + Dates.Month(1) 2014-02-28 julia\u0026gt; (Date(2014,1,29)+Dates.Month(1)) + Dates.Day(1) 2014-03-01 那是怎么回事呢？在第一行中，我们在1月29日的基础上加1天，结果是 2014-01-30；然后再加1个月，于是得到 2014-02-30，再往下调整为 2014-02-28。在第二个例子中，我们先加1个月，我们得到 2014-02-29，再往下调整为 2014-02-28，然后再加1天，结果是 2014-03-01。在这种情况下，有一个设计原则是有帮助的，那就是在存在多个 Periods 的情况下，操作将按照 Periods 的类型来排序，而不是按照它们的值或位置顺序来排序；这意味着总是先加 Year，然后加 Month，再加 Week 等。因此，以下确实会导致关联性并正好有用:\njulia\u0026gt; Date(2014,1,29) + Dates.Day(1) + Dates.Month(1) 2014-03-01 julia\u0026gt; Date(2014,1,29) + Dates.Month(1) + Dates.Day(1) 2014-03-01 棘手吗？也许吧。一个无辜的 Dates 用户该怎么做？最重要的是要注意，当处理月份时，明确地强制执行某种关联性，可能会导致一些意想不到的结果，但除此之外，一切都应该按照预期工作。值得庆幸的是，在 UT 中处理时间时，日期-周期算术中的奇特情况几乎就是这样了（避免了处理夏令时、闰秒等的 \u0026ldquo;乐趣\u0026rdquo;）。\n作为奖励，所有的周期算术对象都可以直接与范围一起工作。\njulia\u0026gt; dr = Date(2014,1,29):Day(1):Date(2014,2,3) Date(\u0026#34;2014-01-29\u0026#34;):Day(1):Date(\u0026#34;2014-02-03\u0026#34;) julia\u0026gt; collect(dr) 6-element Array{Date,1}: 2014-01-29 2014-01-30 2014-01-31 2014-02-01 2014-02-02 2014-02-03 julia\u0026gt; dr = Date(2014,1,29):Dates.Month(1):Date(2014,07,29) Date(\u0026#34;2014-01-29\u0026#34;):Month(1):Date(\u0026#34;2014-07-29\u0026#34;) julia\u0026gt; collect(dr) 7-element Array{Date,1}: 2014-01-29 2014-02-28 2014-03-29 2014-04-29 2014-05-29 2014-06-29 2014-07-29 for i in Date(\u0026quot;2020-08-01\u0026quot;):Day(1):Date(\u0026quot;2020-08-09\u0026quot;) println(i) end 2020-08-01 2020-08-02 2020-08-03 2020-08-04 2020-08-05 2020-08-06 2020-08-07 2020-08-08 2020-08-09 调整器函数 尽管日期-周期算术很方便，但经常需要在日期上进行的计算具有日历或时间的性质，而不是固定的周期数。节日就是一个很好的例子，大多数都遵循这样的规则：\u0026ldquo;纪念日 = 五月的最后一个星期一\u0026rdquo;，或者 \u0026ldquo;感恩节 = 十一月的第四个星期四\u0026rdquo;。这类时间表达式处理的是相对于日历的规则，比如本月的第一天或最后一天，下周二，或第一个和第三个星期三等。\nDates 模块通过几个方便的方法提供了调整器 API，这些方法有助于简单、简洁地表达时间规则。第一组调整器方法处理周、月、季度和年的首尾。它们每个方法都接收一个单一的 TimeType 作为输入，并返回或调整到相对于输入的所需时期的第一个或最后一个。\njulia\u0026gt; Dates.firstdayofweek(Date(2014,7,16)) # Adjusts the input to the Monday of the input\u0026#39;s week 2014-07-14 julia\u0026gt; Dates.lastdayofmonth(Date(2014,7,16)) # Adjusts to the last day of the input\u0026#39;s month 2014-07-31 julia\u0026gt; Dates.lastdayofquarter(Date(2014,7,16)) # Adjusts to the last day of the input\u0026#39;s quarter 2014-09-30 接下来的两个高阶方法 tonext 和 toprev，通过将一个 DateFunction 和一个起始 TimeType 作为第一个参数来概括处理时间表达式。DateFunction 只是一个函数，通常是匿名的，它接受一个单一的 TimeType 作为输入，并返回一个 Bool，true 表示满足调整标准。例如:\njulia\u0026gt; istuesday = x-\u0026gt;Dates.dayofweek(x) == Dates.Tuesday; # Returns true if the day of the week of x is Tuesday julia\u0026gt; Dates.tonext(istuesday, Date(2014,7,13)) # 2014-07-13 is a Sunday 2014-07-15 julia\u0026gt; Dates.tonext(Date(2014,7,13), Dates.Tuesday) # Convenience method provided for day of the week adjustments 2014-07-15 这对于更复杂的时间表达式的 do-block 语法是很有用的。\njulia\u0026gt; Dates.tonext(Date(2014,7,13)) do x # Return true on the 4th Thursday of November (Thanksgiving) Dates.dayofweek(x) == Dates.Thursday \u0026amp;\u0026amp; Dates.dayofweekofmonth(x) == 4 \u0026amp;\u0026amp; Dates.month(x) == Dates.November end 2014-11-27 Base.filter 方法可以用来获取指定范围内的所有有效日期/时刻。\n# 匹兹堡街道清洁; 从 4月到11月的每第二个周二 # 日期范围从 2014-01-01 到 2015-01-01 julia\u0026gt; dr = Dates.Date(2014):Day(1):Dates.Date(2015); julia\u0026gt; filter(dr) do x Dates.dayofweek(x) == Dates.Tue \u0026amp;\u0026amp; Dates.April \u0026lt;= Dates.month(x) \u0026lt;= Dates.Nov \u0026amp;\u0026amp; Dates.dayofweekofmonth(x) == 2 end 8-element Array{Date,1}: 2014-04-08 2014-05-13 2014-06-10 2014-07-08 2014-08-12 2014-09-09 2014-10-14 2014-11-11 在 Raku 中上面的代码可以写成:\nlazy my @dates = Date.new(\u0026#39;2014-01-01\u0026#39;) ... Date.new(\u0026#39;2015-01-01\u0026#39;); .say for @dates.grep: -\u0026gt; $d { $d.day-of-week == 2 \u0026amp;\u0026amp; 4 \u0026lt;= $d.month \u0026lt;= 11 \u0026amp;\u0026amp; $d.weekday-of-month == 2 } 其他的例子和测试可以在 stdlib/Dates/test/adjusters.jl 中找到。\n"},"name":"Julia 中的日期和时间","published":"2020-08-04T00:00:00+08:00","summary":"Dates in Julia","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-04-dates-in-julia/"}