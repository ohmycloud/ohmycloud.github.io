{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003cp\u003etoggle 字面意思是开关, 函数签名如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nb\"\u003etoggle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAny:D:\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nv\"\u003e@conditions\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eall\u003c/span\u003e \u003cspan class=\"o\"\u003e~~\u003c/span\u003e \u003cspan class=\"kt\"\u003eCallable:D\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eBool\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$off\u003c/span\u003e  \u003cspan class=\"k\"\u003e--\u0026gt;\u003c/span\u003e \u003cspan class=\"kt\"\u003eSeq:D\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e它接收一个数组, 数组中的每个元素都是一个 \u003ca href=\"https://docs.raku.org/type/Callable\"\u003eCallable\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e它迭代调用者, 产生一个 \u003ca href=\"https://docs.raku.org/type/Seq\"\u003eSeq\u003c/a\u003e, 根据开关是开还是关把接收到的值填充到结果中, 开关是开还是关取决于 \u003ccode\u003e@conditions\u003c/code\u003e 数组里面调用 Callables 的结果:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etoggle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «(1 2 3 4 11 12 13 14)␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etoggle\u003c/span\u003e\u003cspan class=\"p\"\u003e(:\u003c/span\u003e\u003cspan class=\"s\"\u003eoff\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «(3 4 11 12 13 14)␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e想象一下开关是打开还是关闭（\u003ccode\u003eTrue\u003c/code\u003e或\u003ccode\u003eFalse\u003c/code\u003e），如果它打开则产生值。默认情况下，该开关的初始状态处于 \u0026ldquo;on\u0026rdquo; 位置，除非 \u003ccode\u003e:$off\u003c/code\u003e 设置为 \u003cem\u003etrue\u003c/em\u003e 值，在这种情况下，初始状态将为\u0026quot;off\u0026quot;。\u003c/p\u003e\n\u003cp\u003e从 \u003ccode\u003e@conditions\u003c/code\u003e 的头部开始拿出一个 Callable（如果有的话）并且它成为当前的 tester。通过使用该值调用 tester Callable 来测试原始序列中的每个值。我们想象的开关的状态被设置为 tester 的返回值：如果它是真的，将开关设置为 \u0026ldquo;on\u0026rdquo;，否则将其设置为 \u0026ldquo;off\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e无论何时切换开关（即从\u0026quot;off\u0026quot;切换到\u0026quot;on\u0026quot;或从\u0026quot;on\u0026quot;切换到\u0026quot;off\u0026quot;），当前 tester Callable 将替换为 \u003ccode\u003e@conditions\u003c/code\u003e 中的下一个 Callable，如果可用，将用于测试进一步的值。如果没有更多可用的 tester Callables，则开关将保持其当前状态，直到迭代结束。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# our original sequence of elements: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nb\"\u003elist\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «(0 1 2 3 4 5 6 7 8 9)␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# toggled result: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etoggle\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e\u0026amp;is-prime\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# OUTPUT: «(0 1 2 3 6 7)␤» \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 第一个 tester Callable 是 `* \u0026lt; 4` 开关的初始状态是 \u0026#34;on\u0026#34;. \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 当我们迭代我们的原始序列时: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 0 =\u0026gt; 0 \u0026lt; 4 === True  开关是开着的, 值进入到结果中, 开关切换\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#                      所以我们继续使用同一个 Callable: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 1 =\u0026gt; 1 \u0026lt; 4 === True  same \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 2 =\u0026gt; 2 \u0026lt; 4 === True  same \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 3 =\u0026gt; 3 \u0026lt; 4 === True  same \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 4 =\u0026gt; 4 \u0026lt; 4 === False 开关关闭, \u0026#34;4\u0026#34; 没有进入到结果中 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#                      此外, 我们的开关发生切换,  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#                      所以, 我们切换到下一个 Callable \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 5 =\u0026gt; 5 %% 2 === False  开关仍旧关闭, 继续尝试找到满足条件的值 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 6 =\u0026gt; 6 %% 2 === True   开关开启, 把 \u0026#34;6\u0026#34; 放入到结果中 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#                        开关切换, 所以我们会使用下一个 tester Callable \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 7 =\u0026gt; is-prime(7) === True  开关仍然开启, 将值放入结果中并继续 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 8 =\u0026gt; is-prime(8) === False 开关现在关闭, \u0026#34;8\u0026#34; 没有被放入到结果中\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#                            开关切换, 但是我们再没有  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#                            tester Callables 了, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#                            所以对于剩下的序列它会一直保持关闭. \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于开关状态的切换加载下一个 tester Callable，设置 \u003ccode\u003e:$off\u003c/code\u003e 为 \u003ccode\u003eTrue\u003c/code\u003e 值会影响第一个 tester 何时被丢弃：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# our original sequence of elements: \nsay \u0026lt;0 1 2\u0026gt;; # OUTPUT: «(0 1 2)␤» \n# toggled result: \nsay \u0026lt;0 1 2\u0026gt;.toggle: * \u0026gt; 1; # OUTPUT: «()␤» \n \n# 第一个 tester Callable 是 `* \u0026gt; 1` 并且开关的初始状态是 \u0026#34;on\u0026#34;. \n# 当我们迭代我们的原始序列时: \n# 0 =\u0026gt; 0 \u0026gt; 1 === False  开关关闭, \u0026#34;0\u0026#34; 没有进入到结果中. \n#                      此外, 发生了切换, 所以我们要改变 tester Callable \n#                      但是因为我们没有 tester Callable 可用了 \n#                      所以开关会保持 \u0026#34;off\u0026#34; 状态直到结束\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# our original sequence of elements: \nsay \u0026lt;0 1 2\u0026gt;; # OUTPUT: «(0 1 2)␤» \n# toggled result: \nsay \u0026lt;0 1 2\u0026gt;.toggle: :off, * \u0026gt; 1; # OUTPUT: «(2)␤» \n \n# 第一个 tester Callable 是 `* \u0026gt; 1` 并且开关的初始状态是 \u0026#34;off\u0026#34;. \n# 当我们迭代我们的原始序列时: \n# 0 =\u0026gt; 0 \u0026gt; 1 === False  开关关闭, \u0026#34;0\u0026#34; 没有进入到结果中 \n#                       这一次开关没有发生切换 \n#                       所以我们继续使用我们当前的 tester Callable \n# 1 =\u0026gt; 1 \u0026gt; 1 === False  same \n# 2 =\u0026gt; 2 \u0026gt; 1 === True   开关开启, \u0026#34;2\u0026#34; 进入到结果中\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e一个例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$excerpt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003eq\u003c/span\u003e\u003cspan class=\"sa\"\u003e:to\u003c/span\u003e\u003cspan class=\"p\"\u003e/END/;\u003c/span\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eHere\u0026#39;s some unimportant text.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e=begin code\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eThis code block is what we\u0026#39;re after.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eWe\u0026#39;ll use \u0026#39;ff\u0026#39; to get it.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e=end code\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eMore unimportant text.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e=begin code\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eI want this line.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eand this line as well.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eHaHa\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e=end code\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eMore unimport text.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e=begin code\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eLet\u0026#39;s to go home.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e=end code\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003eEND\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e$excerpt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elines\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etoggle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e~~\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e=begin code\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;/\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e~~\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e=end code\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;/)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e=end codeMore unimportant text.\n=begin code\nI want this line.\nand this line as well.\nHaHa\n=end code\nMore unimport text.\n=begin code\nLet\u0026#39;s to go home.\n=end code\n\u003c/code\u003e\u003c/pre\u003e","text":"toggle 字面意思是开关, 函数签名如下：\nmethod toggle(Any:D: *@conditions where .all ~~ Callable:D, Bool :$off --\u0026gt; Seq:D) 它接收一个数组, 数组中的每个元素都是一个 Callable。\n它迭代调用者, 产生一个 Seq, 根据开关是开还是关把接收到的值填充到结果中, 开关是开还是关取决于 @conditions 数组里面调用 Callables 的结果:\nsay (1..15).toggle(* \u0026lt; 5, * \u0026gt; 10, * \u0026lt; 15); # OUTPUT: «(1 2 3 4 11 12 13 14)␤» say (1..15).toggle(:off, * \u0026gt; 2, * \u0026lt; 5, * \u0026gt; 10, * \u0026lt; 15); # OUTPUT: «(3 4 11 12 13 14)␤» 想象一下开关是打开还是关闭（True或False），如果它打开则产生值。默认情况下，该开关的初始状态处于 \u0026ldquo;on\u0026rdquo; 位置，除非 :$off 设置为 true 值，在这种情况下，初始状态将为\u0026quot;off\u0026quot;。\n从 @conditions 的头部开始拿出一个 Callable（如果有的话）并且它成为当前的 tester。通过使用该值调用 tester Callable 来测试原始序列中的每个值。我们想象的开关的状态被设置为 tester 的返回值：如果它是真的，将开关设置为 \u0026ldquo;on\u0026rdquo;，否则将其设置为 \u0026ldquo;off\u0026rdquo;。\n无论何时切换开关（即从\u0026quot;off\u0026quot;切换到\u0026quot;on\u0026quot;或从\u0026quot;on\u0026quot;切换到\u0026quot;off\u0026quot;），当前 tester Callable 将替换为 @conditions 中的下一个 Callable，如果可用，将用于测试进一步的值。如果没有更多可用的 tester Callables，则开关将保持其当前状态，直到迭代结束。\n# our original sequence of elements: say list ^10; # OUTPUT: «(0 1 2 3 4 5 6 7 8 9)␤» # toggled result: say ^10 .toggle: * \u0026lt; 4, * %% 2, \u0026amp;is-prime; # OUTPUT: «(0 1 2 3 6 7)␤» # 第一个 tester Callable 是 `* \u0026lt; 4` 开关的初始状态是 \u0026#34;on\u0026#34;. # 当我们迭代我们的原始序列时: # 0 =\u0026gt; 0 \u0026lt; 4 === True 开关是开着的, 值进入到结果中, 开关切换 # 所以我们继续使用同一个 Callable: # 1 =\u0026gt; 1 \u0026lt; 4 === True same # 2 =\u0026gt; 2 \u0026lt; 4 === True same # 3 =\u0026gt; 3 \u0026lt; 4 === True same # 4 =\u0026gt; 4 \u0026lt; 4 === False 开关关闭, \u0026#34;4\u0026#34; 没有进入到结果中 # 此外, 我们的开关发生切换, # 所以, 我们切换到下一个 Callable # 5 =\u0026gt; 5 %% 2 === False 开关仍旧关闭, 继续尝试找到满足条件的值 # 6 =\u0026gt; 6 %% 2 === True 开关开启, 把 \u0026#34;6\u0026#34; 放入到结果中 # 开关切换, 所以我们会使用下一个 tester Callable # 7 =\u0026gt; is-prime(7) === True 开关仍然开启, 将值放入结果中并继续 # 8 =\u0026gt; is-prime(8) === False 开关现在关闭, \u0026#34;8\u0026#34; 没有被放入到结果中 # 开关切换, 但是我们再没有 # tester Callables 了, # 所以对于剩下的序列它会一直保持关闭. 由于开关状态的切换加载下一个 tester Callable，设置 :$off 为 True 值会影响第一个 tester 何时被丢弃：\n# our original sequence of elements: say \u0026lt;0 1 2\u0026gt;; # OUTPUT: «(0 1 2)␤» # toggled result: say \u0026lt;0 1 2\u0026gt;.toggle: * \u0026gt; 1; # OUTPUT: «()␤» # 第一个 tester Callable 是 `* \u0026gt; 1` 并且开关的初始状态是 \u0026#34;on\u0026#34;. # 当我们迭代我们的原始序列时: # 0 =\u0026gt; 0 \u0026gt; 1 === False 开关关闭, \u0026#34;0\u0026#34; 没有进入到结果中. # 此外, 发生了切换, 所以我们要改变 tester Callable # 但是因为我们没有 tester Callable 可用了 # 所以开关会保持 \u0026#34;off\u0026#34; 状态直到结束 # our original sequence of elements: say \u0026lt;0 1 2\u0026gt;; # OUTPUT: «(0 1 2)␤» # toggled result: say \u0026lt;0 1 2\u0026gt;.toggle: :off, * \u0026gt; 1; # OUTPUT: «(2)␤» # 第一个 tester Callable 是 `* \u0026gt; 1` 并且开关的初始状态是 \u0026#34;off\u0026#34;. # 当我们迭代我们的原始序列时: # 0 =\u0026gt; 0 \u0026gt; 1 === False 开关关闭, \u0026#34;0\u0026#34; 没有进入到结果中 # 这一次开关没有发生切换 # 所以我们继续使用我们当前的 tester Callable # 1 =\u0026gt; 1 \u0026gt; 1 === False same # 2 =\u0026gt; 2 \u0026gt; 1 === True 开关开启, \u0026#34;2\u0026#34; 进入到结果中 一个例子：\nmy $excerpt = q:to/END/; Here\u0026#39;s some unimportant text. =begin code This code block is what we\u0026#39;re after. We\u0026#39;ll use \u0026#39;ff\u0026#39; to get it. =end code More unimportant text. =begin code I want this line. and this line as well. HaHa =end code More unimport text. =begin code Let\u0026#39;s to go home. =end code END .say for $excerpt.lines .toggle( * ~~ /\u0026#39;=begin code\u0026#39;/, * ~~ /\u0026#39;=end code\u0026#39;/) 输出：\n=end codeMore unimportant text. =begin code I want this line. and this line as well. HaHa =end code More unimport text. =begin code Let\u0026#39;s to go home. =end code "},"name":"开关","published":"2019-01-19T10:56:07Z","summary":"toggle 字面意思是开关, 函数签名如下：\nmethod toggle(Any:D: *@conditions where .all ~~ Callable:D, Bool :$off --\u0026gt; Seq:D) 它接收一个数组, 数组中的每个元素都是一个 Callable。\n它迭代调用者, 产生一个 Seq, 根据开关是开还是关把接收到的值填充到结果中, 开关是开还是关取决于 @conditions 数组里面调用 Callables 的结果:\nsay (1..15).toggle(* \u0026lt; 5, * \u0026gt; 10, * \u0026lt; 15); # OUTPUT: «(1 2 3 4 11 12 13 14)␤» say (1..15).toggle(:off, * \u0026gt; 2, * \u0026lt; 5, * \u0026gt; 10, * \u0026lt; 15); # OUTPUT: «(3 4 11 12 13 14)␤» 想象一下开关是打开还是关闭（True或False），如果它打开则产生值。默认情况下，该开关的初始状态处于 \u0026ldquo;on\u0026rdquo; 位置，除非 :$off 设置为 true 值，在这种情况下，初始状态将为\u0026quot;off\u0026quot;。","type":"entry","url":"https://ohmyweekly.github.io/notes/toggle/"}