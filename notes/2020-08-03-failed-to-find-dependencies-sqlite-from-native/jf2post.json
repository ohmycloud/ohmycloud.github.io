{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003ch1 id=\"问题\"\u003e问题\u003c/h1\u003e\n\u003cp\u003e今天想试一下 Raku 中的一个终端框架, 名字为 \u003ca href=\"https://github.com/vrurg/raku-Vikna\"\u003eVikna\u003c/a\u003e。但是这个模块在标准的 Rakudo 中还不能运行(截至 2020.07 月版)。只能安装特定分支的 \u003ca href=\"https://github.com/vrurg/rakudo/tree/v-dispatchers\"\u003eRakudo\u003c/a\u003e, 但是安装 Rakudo 的时候, 由于众所周知的网络原因, 在终端中克隆代码仓库特别慢, 十几k的速度, 下载不到一半就被服务器中断了, 特别耗费时间。无奈在 \u003ccode\u003e~/.zshrc\u003c/code\u003e 中开启代理:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e proxy_on\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eno_proxy\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;localhost,127.0.0.1,localaddress,localdomain.com\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003ehttp_proxy\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;http://127.0.0.1:1089\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003ehttps_proxy\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$http_proxy\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e -e \u003cspan class=\"s2\"\u003e\u0026#34;已开启代理\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eproxy_on\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e socks_on\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e# SOCKS5 代理设置\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eno_proxy\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;localhost,127.0.0.1,localaddress,localdomain.com\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003ehttp_proxy\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;socks5://127.0.0.1:1080\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003ehttps_proxy\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;socks5://127.0.0.1:1080\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e -e \u003cspan class=\"s2\"\u003e\u0026#34;SOCKS5 代理已开启\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esocks_on\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e试了一下速度还行。不知道是哪个配置起的作用。\u003c/p\u003e\n\u003cp\u003e接下来安装 \u003ca href=\"https://github.com/vrurg/raku-Vikna\"\u003eVikna\u003c/a\u003e 模块的时候, 爆出了如下错误:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eFailed to find dependencies: sqlite:from\u0026lt;native\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在 \u003ca href=\"https://modules.raku.org/dist/DB::SQLite:cpan:CTILMES\"\u003emodules.raku.org\u003c/a\u003e 上搜索 \u003ccode\u003esqlite\u003c/code\u003e, 发现是名为 \u003ccode\u003eDB::SQLite\u003c/code\u003e 的模块。\u003c/p\u003e\n\u003cp\u003e查看 \u003ccode\u003eMETA6.json\u003c/code\u003e, 该模块依赖了 \u003ccode\u003eNativeLibs\u003c/code\u003e, 于是先尝试安装 \u003ccode\u003eNativeLibs\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ezef install NativeLibs\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但是报错了, 它竟然需要安装依赖 \u003ccode\u003eDBIish\u003c/code\u003e。查看 \u003ccode\u003eNativeLibs\u003c/code\u003e 的信息:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ezef info NativeLibs\n- Info for: NativeLibs\n- Identity: DBIish:ver\u0026lt;0.6.0\u0026gt;\n- Recommended By: Zef::Repository::LocalCache\n- Installed: No\nDescription:\t Database connectivity for Raku\nLicense:\t BSD-2-Clause\nSource-url:\t git://github.com/perl6/DBIish.git\nProvides: 28 modules\nDepends: 1 items\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e发现了吗? 安装 NativeLibs 实际上就是安装 DBIish! 可能是缓存的原因。所以还是直接用 url 来安装最新的吧:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ezef install https://github.com/salortiz/NativeLibs.git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后 \u003ccode\u003ezef install DB::SQLite\u003c/code\u003e 还是报同样的错误。我以为是 zef 找不到 sqlite 的 lib 库, 于是在 \u003ccode\u003e~/.zshrc\u003c/code\u003e 中加上了 sqlite 库的 PATH 路径:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003ePATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/usr/local/opt/sqlite/bin:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$PATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003ePATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/usr/local/opt/sqlite/lib:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$PATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e再次 \u003ccode\u003ezef install DB::SQLite\u003c/code\u003e 还是不行。又建立了软连接, 仍然不行:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eln -s /usr/local/Cellar/sqlite/3.32.3/lib/libsqlite3.0.dylib ~/.raku/lib/libsqlite3.0.dylib\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eln -s /usr/local/Cellar/sqlite/3.32.3/lib/libsqlite3.dylib ~/.raku/lib/libsqlite3.dylib\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后发现是 CPAN 没有同步 github 的 META6.json:\u003c/p\u003e\n\u003cp\u003eCPAN  中的依赖配置如下:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026#34;depends\u0026#34;      : {\n        \u0026#34;runtime\u0026#34;  : {\n            \u0026#34;requires\u0026#34; : [\n                \u0026#34;DB\u0026#34;,\n                \u0026#34;NativeLibs:ver\u0026lt;0.0.7\u0026gt;:auth\u0026lt;github:salortiz\u0026gt;\u0026#34;,\n                \u0026#34;sqlite:from\u0026lt;native\u0026gt;\u0026#34;\n            ]\n        },\n        \u0026#34;test\u0026#34; : {\n            \u0026#34;requires\u0026#34; : [ \u0026#34;Test\u0026#34;, \u0026#34;Test::When\u0026#34; ]\n        }\n    },\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003egithub 中的依赖配置如下:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026#34;depends\u0026#34;      : {\n        \u0026#34;runtime\u0026#34;  : {\n            \u0026#34;requires\u0026#34; : [\n                \u0026#34;DB\u0026#34;,\n                \u0026#34;NativeLibs:ver\u0026lt;0.0.7\u0026gt;:auth\u0026lt;github:salortiz\u0026gt;\u0026#34;,\n                \u0026#34;sqlite3:from\u0026lt;native\u0026gt;:ver\u0026lt;0\u0026gt;\u0026#34;\n            ]\n        },\n        \u0026#34;test\u0026#34; : {\n            \u0026#34;requires\u0026#34; : [ \u0026#34;Test\u0026#34;, \u0026#34;Test::When\u0026#34; ]\n        }\n    },\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到 github 中的 sqlite 依赖已经改为 sqlite3 了。\u003c/p\u003e\n\u003cp\u003e我有两个 Rakudo, 一个是 2020.07 月版本的,  一个是新安装的 \u003ccode\u003ev-dispatchers\u003c/code\u003e 版本。不想删除 2020.07 版本的 Rakudo, 于是 zef 安装模块的时候, 又出错了, 它仍然使用了 \u003ccode\u003e ~opt/rakudo/\u003c/code\u003e, 即 2020.07 版本的 Rakudo(我已经把这个版本的 Rakudo PATH 变量注释了, 并且把 rakudo 的目录名也改了)。但是 zef 会被安装到 \u003ccode\u003e~/opt/rakudo-home/share/perl6/site/bin\u003c/code\u003e 下, 所以删除了旧的 rakudo 之后, zef 也会被删除。只能对新安装的 Rakudo 再安装一次 zef:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit clone https://github.com/ugexe/zef.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e zef\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eraku -I. bin/zef install .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e安装 \u003ccode\u003eLWP::Simple\u003c/code\u003e 测试又卡住了:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ezef install https://github.com/raku-community-modules/raku-lwp-simple.git \n===\u0026gt; Searching for missing dependencies: MIME::Base64, URI, JSON::Tiny\n===\u0026gt; Testing: MIME::Base64:ver\u0026lt;1.2.1\u0026gt;:auth\u0026lt;github:retupmoca\u0026gt;\n===\u0026gt; Testing [OK] for MIME::Base64:ver\u0026lt;1.2.1\u0026gt;:auth\u0026lt;github:retupmoca\u0026gt;\n===\u0026gt; Testing: URI:ver\u0026lt;0.3.0\u0026gt;\n===\u0026gt; Testing [OK] for URI:ver\u0026lt;0.3.0\u0026gt;\n===\u0026gt; Testing: JSON::Tiny:ver\u0026lt;1.0\u0026gt;\n===\u0026gt; Testing [OK] for JSON::Tiny:ver\u0026lt;1.0\u0026gt;\n===\u0026gt; Testing: LWP::Simple:ver\u0026lt;0.106\u0026gt;:auth\u0026lt;github:perl6\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ezef --/test https://github.com/raku-community-modules/raku-lwp-simple.git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后 \u003ca href=\"https://github.com/finanalyst/raku-pod-render\"\u003eraku-pod-render\u003c/a\u003e 又测试失败, 删除缓存重新安装:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erm -rf ~/.zef/store/raku-pod-render.git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e几个小时过去了。Raku 的生态系统工具链还差的很！\u003c/p\u003e\n","text":"问题 今天想试一下 Raku 中的一个终端框架, 名字为 Vikna。但是这个模块在标准的 Rakudo 中还不能运行(截至 2020.07 月版)。只能安装特定分支的 Rakudo, 但是安装 Rakudo 的时候, 由于众所周知的网络原因, 在终端中克隆代码仓库特别慢, 十几k的速度, 下载不到一半就被服务器中断了, 特别耗费时间。无奈在 ~/.zshrc 中开启代理:\nfunction proxy_on() { export no_proxy=\u0026#34;localhost,127.0.0.1,localaddress,localdomain.com\u0026#34; export http_proxy=\u0026#34;http://127.0.0.1:1089\u0026#34; export https_proxy=$http_proxy echo -e \u0026#34;已开启代理\u0026#34; } proxy_on() function socks_on() { # SOCKS5 代理设置 export no_proxy=\u0026#34;localhost,127.0.0.1,localaddress,localdomain.com\u0026#34; export http_proxy=\u0026#34;socks5://127.0.0.1:1080\u0026#34; export https_proxy=\u0026#34;socks5://127.0.0.1:1080\u0026#34; echo -e \u0026#34;SOCKS5 代理已开启\u0026#34; } socks_on() 试了一下速度还行。不知道是哪个配置起的作用。\n接下来安装 Vikna 模块的时候, 爆出了如下错误:\nFailed to find dependencies: sqlite:from\u0026lt;native\u0026gt; 在 modules.raku.org 上搜索 sqlite, 发现是名为 DB::SQLite 的模块。\n查看 META6.json, 该模块依赖了 NativeLibs, 于是先尝试安装 NativeLibs:\nzef install NativeLibs 但是报错了, 它竟然需要安装依赖 DBIish。查看 NativeLibs 的信息:\nzef info NativeLibs - Info for: NativeLibs - Identity: DBIish:ver\u0026lt;0.6.0\u0026gt; - Recommended By: Zef::Repository::LocalCache - Installed: No Description:\tDatabase connectivity for Raku License:\tBSD-2-Clause Source-url:\tgit://github.com/perl6/DBIish.git Provides: 28 modules Depends: 1 items 发现了吗? 安装 NativeLibs 实际上就是安装 DBIish! 可能是缓存的原因。所以还是直接用 url 来安装最新的吧:\nzef install https://github.com/salortiz/NativeLibs.git 然后 zef install DB::SQLite 还是报同样的错误。我以为是 zef 找不到 sqlite 的 lib 库, 于是在 ~/.zshrc 中加上了 sqlite 库的 PATH 路径:\nexport PATH=\u0026#34;/usr/local/opt/sqlite/bin:$PATH\u0026#34; export PATH=\u0026#34;/usr/local/opt/sqlite/lib:$PATH\u0026#34; 再次 zef install DB::SQLite 还是不行。又建立了软连接, 仍然不行:\nln -s /usr/local/Cellar/sqlite/3.32.3/lib/libsqlite3.0.dylib ~/.raku/lib/libsqlite3.0.dylib ln -s /usr/local/Cellar/sqlite/3.32.3/lib/libsqlite3.dylib ~/.raku/lib/libsqlite3.dylib 最后发现是 CPAN 没有同步 github 的 META6.json:\nCPAN 中的依赖配置如下:\n\u0026#34;depends\u0026#34; : { \u0026#34;runtime\u0026#34; : { \u0026#34;requires\u0026#34; : [ \u0026#34;DB\u0026#34;, \u0026#34;NativeLibs:ver\u0026lt;0.0.7\u0026gt;:auth\u0026lt;github:salortiz\u0026gt;\u0026#34;, \u0026#34;sqlite:from\u0026lt;native\u0026gt;\u0026#34; ] }, \u0026#34;test\u0026#34; : { \u0026#34;requires\u0026#34; : [ \u0026#34;Test\u0026#34;, \u0026#34;Test::When\u0026#34; ] } }, github 中的依赖配置如下:\n\u0026#34;depends\u0026#34; : { \u0026#34;runtime\u0026#34; : { \u0026#34;requires\u0026#34; : [ \u0026#34;DB\u0026#34;, \u0026#34;NativeLibs:ver\u0026lt;0.0.7\u0026gt;:auth\u0026lt;github:salortiz\u0026gt;\u0026#34;, \u0026#34;sqlite3:from\u0026lt;native\u0026gt;:ver\u0026lt;0\u0026gt;\u0026#34; ] }, \u0026#34;test\u0026#34; : { \u0026#34;requires\u0026#34; : [ \u0026#34;Test\u0026#34;, \u0026#34;Test::When\u0026#34; ] } }, 可以看到 github 中的 sqlite 依赖已经改为 sqlite3 了。\n我有两个 Rakudo, 一个是 2020.07 月版本的, 一个是新安装的 v-dispatchers 版本。不想删除 2020.07 版本的 Rakudo, 于是 zef 安装模块的时候, 又出错了, 它仍然使用了 ~opt/rakudo/, 即 2020.07 版本的 Rakudo(我已经把这个版本的 Rakudo PATH 变量注释了, 并且把 rakudo 的目录名也改了)。但是 zef 会被安装到 ~/opt/rakudo-home/share/perl6/site/bin 下, 所以删除了旧的 rakudo 之后, zef 也会被删除。只能对新安装的 Rakudo 再安装一次 zef:\ngit clone https://github.com/ugexe/zef.git cd zef raku -I. bin/zef install . 安装 LWP::Simple 测试又卡住了:\nzef install https://github.com/raku-community-modules/raku-lwp-simple.git ===\u0026gt; Searching for missing dependencies: MIME::Base64, URI, JSON::Tiny ===\u0026gt; Testing: MIME::Base64:ver\u0026lt;1.2.1\u0026gt;:auth\u0026lt;github:retupmoca\u0026gt; ===\u0026gt; Testing [OK] for MIME::Base64:ver\u0026lt;1.2.1\u0026gt;:auth\u0026lt;github:retupmoca\u0026gt; ===\u0026gt; Testing: URI:ver\u0026lt;0.3.0\u0026gt; ===\u0026gt; Testing [OK] for URI:ver\u0026lt;0.3.0\u0026gt; ===\u0026gt; Testing: JSON::Tiny:ver\u0026lt;1.0\u0026gt; ===\u0026gt; Testing [OK] for JSON::Tiny:ver\u0026lt;1.0\u0026gt; ===\u0026gt; Testing: LWP::Simple:ver\u0026lt;0.106\u0026gt;:auth\u0026lt;github:perl6\u0026gt; zef --/test https://github.com/raku-community-modules/raku-lwp-simple.git 最后 raku-pod-render 又测试失败, 删除缓存重新安装:\nrm -rf ~/.zef/store/raku-pod-render.git 几个小时过去了。Raku 的生态系统工具链还差的很！\n"},"name":"Failed to find dependencies: sqlite:from\u003cnative\u003e","published":"2020-08-03T23:02:21+08:00","summary":"Failed to find dependencies","type":"entry","url":"https://ohmycloud.github.io/notes/2020-08-03-failed-to-find-dependencies-sqlite-from-native/"}