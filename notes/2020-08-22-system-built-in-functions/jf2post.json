{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003cp\u003eSystem (Built-in) Functions\nFlink Table API \u0026amp; SQL provides users with a set of built-in functions for data transformations. This page gives a brief overview of them. If a function that you need is not supported yet, you can implement a user-defined function. If you think that the function is general enough, please open a Jira issue for it with a detailed description.\u003c/p\u003e\n\u003cp\u003eScalar Functions\nThe scalar functions take zero, one or more values as the input and return a single value as the result.\u003c/p\u003e\n\u003cp\u003eComparison Functions\u003c/p\u003e\n\u003cp\u003eComparison functions\tDescription\nvalue1 = value2\nReturns TRUE if value1 is equal to value2; returns UNKNOWN if value1 or value2 is NULL.\u003c/p\u003e\n\u003cp\u003evalue1 \u0026lt;\u0026gt; value2\nReturns TRUE if value1 is not equal to value2; returns UNKNOWN if value1 or value2 is NULL.\u003c/p\u003e\n\u003cp\u003evalue1 \u0026gt; value2\nReturns TRUE if value1 is greater than value2; returns UNKNOWN if value1 or value2 is NULL.\u003c/p\u003e\n\u003cp\u003evalue1 \u0026gt;= value2\nReturns TRUE if value1 is greater than or equal to value2; returns UNKNOWN if value1 or value2 is NULL.\u003c/p\u003e\n\u003cp\u003evalue1 \u0026lt; value2\nReturns TRUE if value1 is less than value2; returns UNKNOWN if value1 or value2 is NULL.\u003c/p\u003e\n\u003cp\u003evalue1 \u0026lt;= value2\nReturns TRUE if value1 is less than or equal to value2; returns UNKNOWN if value1 or value2 is NULL.\u003c/p\u003e\n\u003cp\u003evalue IS NULL\nReturns TRUE if value is NULL.\u003c/p\u003e\n\u003cp\u003evalue IS NOT NULL\nReturns TRUE if value is not NULL.\u003c/p\u003e\n\u003cp\u003evalue1 IS DISTINCT FROM value2\nReturns TRUE if two values are not equal. NULL values are treated as identical here.\u003c/p\u003e\n\u003cp\u003eE.g., 1 IS DISTINCT FROM NULL returns TRUE; NULL IS DISTINCT FROM NULL returns FALSE.\u003c/p\u003e\n\u003cp\u003evalue1 IS NOT DISTINCT FROM value2\nReturns TRUE if two values are equal. NULL values are treated as identical here.\u003c/p\u003e\n\u003cp\u003eE.g., 1 IS NOT DISTINCT FROM NULL returns FALSE; NULL IS NOT DISTINCT FROM NULL returns TRUE.\u003c/p\u003e\n\u003cp\u003evalue1 BETWEEN [ ASYMMETRIC | SYMMETRIC ] value2 AND value3\nBy default (or with the ASYMMETRIC keyword), returns TRUE if value1 is greater than or equal to value2 and less than or equal to value3. With the SYMMETRIC keyword, returns TRUE if value1 is inclusively between value2 and value3. When either value2 or value3 is NULL, returns FALSE or UNKNOWN.\u003c/p\u003e\n\u003cp\u003eE.g., 12 BETWEEN 15 AND 12 returns FALSE; 12 BETWEEN SYMMETRIC 15 AND 12 returns TRUE; 12 BETWEEN 10 AND NULL returns UNKNOWN; 12 BETWEEN NULL AND 10 returns FALSE; 12 BETWEEN SYMMETRIC NULL AND 12 returns UNKNOWN.\u003c/p\u003e\n\u003cp\u003evalue1 NOT BETWEEN [ ASYMMETRIC | SYMMETRIC ] value2 AND value3\nBy default (or with the ASYMMETRIC keyword), returns TRUE if value1 is less than value2 or greater than value3. With the SYMMETRIC keyword, returns TRUE if value1 is not inclusively between value2 and value3. When either value2 or value3 is NULL, returns TRUE or UNKNOWN.\u003c/p\u003e\n\u003cp\u003eE.g., 12 NOT BETWEEN 15 AND 12 returns TRUE; 12 NOT BETWEEN SYMMETRIC 15 AND 12 returns FALSE; 12 NOT BETWEEN NULL AND 15 returns UNKNOWN; 12 NOT BETWEEN 15 AND NULL returns TRUE; 12 NOT BETWEEN SYMMETRIC 12 AND NULL returns UNKNOWN.\u003c/p\u003e\n\u003cp\u003estring1 LIKE string2 [ ESCAPE char ]\nReturns TRUE if string1 matches pattern string2; returns UNKNOWN if string1 or string2 is NULL. An escape character can be defined if necessary.\u003c/p\u003e\n\u003cp\u003eNote: The escape character has not been supported yet.\u003c/p\u003e\n\u003cp\u003estring1 NOT LIKE string2 [ ESCAPE char ]\nReturns TRUE if string1 does not match pattern string2; returns UNKNOWN if string1 or string2 is NULL. An escape character can be defined if necessary.\u003c/p\u003e\n\u003cp\u003eNote: The escape character has not been supported yet.\u003c/p\u003e\n\u003cp\u003estring1 SIMILAR TO string2 [ ESCAPE char ]\nReturns TRUE if string1 matches SQL regular expression string2; returns UNKNOWN if string1 or string2 is NULL. An escape character can be defined if necessary.\u003c/p\u003e\n\u003cp\u003eNote: The escape character has not been supported yet.\u003c/p\u003e\n\u003cp\u003estring1 NOT SIMILAR TO string2 [ ESCAPE char ]\nReturns TRUE if string1 does not match SQL regular expression string2; returns UNKNOWN if string1 or string2 is NULL. An escape character can be defined if necessary.\u003c/p\u003e\n\u003cp\u003eNote: The escape character has not been supported yet.\u003c/p\u003e\n\u003cp\u003evalue1 IN (value2 [, value3]* )\nReturns TRUE if value1 exists in the given list (value2, value3, \u0026hellip;). When (value2, value3, \u0026hellip;). contains NULL, returns TRUE if the element can be found and UNKNOWN otherwise. Always returns UNKNOWN if value1 is NULL.\u003c/p\u003e\n\u003cp\u003eE.g., 4 IN (1, 2, 3) returns FALSE; 1 IN (1, 2, NULL) returns TRUE; 4 IN (1, 2, NULL) returns UNKNOWN.\u003c/p\u003e\n\u003cp\u003evalue1 NOT IN (value2 [, value3]* )\nReturns TRUE if value1 does not exist in the given list (value2, value3, \u0026hellip;). When (value2, value3, \u0026hellip;). contains NULL, returns FALSE if value1 can be found and UNKNOWN otherwise. Always returns UNKNOWN if value1 is NULL.\u003c/p\u003e\n\u003cp\u003eE.g., 4 NOT IN (1, 2, 3) returns TRUE; 1 NOT IN (1, 2, NULL) returns FALSE; 4 NOT IN (1, 2, NULL) returns UNKNOWN.\u003c/p\u003e\n\u003cp\u003eEXISTS (sub-query)\nReturns TRUE if sub-query returns at least one row. Only supported if the operation can be rewritten in a join and group operation.\u003c/p\u003e\n\u003cp\u003eNote: For streaming queries the operation is rewritten in a join and group operation. The required state to compute the query result might grow infinitely depending on the number of distinct input rows. Please provide a query configuration with valid retention interval to prevent excessive state size. See Query Configuration for details.\u003c/p\u003e\n\u003cp\u003evalue IN (sub-query)\nReturns TRUE if value is equal to a row returned by sub-query.\u003c/p\u003e\n\u003cp\u003eNote: For streaming queries the operation is rewritten in a join and group operation. The required state to compute the query result might grow infinitely depending on the number of distinct input rows. Please provide a query configuration with valid retention interval to prevent excessive state size. See Query Configuration for details.\u003c/p\u003e\n\u003cp\u003evalue NOT IN (sub-query)\nReturns TRUE if value is not equal to every row returned by sub-query.\u003c/p\u003e\n\u003cp\u003eNote: For streaming queries the operation is rewritten in a join and group operation. The required state to compute the query result might grow infinitely depending on the number of distinct input rows. Please provide a query configuration with valid retention interval to prevent excessive state size. See Query Configuration for details.\u003c/p\u003e\n\u003cp\u003eBack to top\nLogical Functions\nSQL\nJava\nPython\nScala\nLogical functions\tDescription\nboolean1 OR boolean2\nReturns TRUE if boolean1 is TRUE or boolean2 is TRUE. Supports three-valued logic.\u003c/p\u003e\n\u003cp\u003eE.g., TRUE OR UNKNOWN returns TRUE.\u003c/p\u003e\n\u003cp\u003eboolean1 AND boolean2\nReturns TRUE if boolean1 and boolean2 are both TRUE. Supports three-valued logic.\u003c/p\u003e\n\u003cp\u003eE.g., TRUE AND UNKNOWN returns UNKNOWN.\u003c/p\u003e\n\u003cp\u003eNOT boolean\nReturns TRUE if boolean is FALSE; returns FALSE if boolean is TRUE; returns UNKNOWN if boolean is UNKNOWN.\u003c/p\u003e\n\u003cp\u003eboolean IS FALSE\nReturns TRUE if boolean is FALSE; returns FALSE if boolean is TRUE or UNKNOWN.\u003c/p\u003e\n\u003cp\u003eboolean IS NOT FALSE\nReturns TRUE if boolean is TRUE or UNKNOWN; returns FALSE if boolean is FALSE.\u003c/p\u003e\n\u003cp\u003eboolean IS TRUE\nReturns TRUE if boolean is TRUE; returns FALSE if boolean is FALSE or UNKNOWN.\u003c/p\u003e\n\u003cp\u003eboolean IS NOT TRUE\nReturns TRUE if boolean is FALSE or UNKNOWN; returns FALSE if boolean is TRUE.\u003c/p\u003e\n\u003cp\u003eboolean IS UNKNOWN\nReturns TRUE if boolean is UNKNOWN; returns FALSE if boolean is TRUE or FALSE.\u003c/p\u003e\n\u003cp\u003eboolean IS NOT UNKNOWN\nReturns TRUE if boolean is TRUE or FALSE; returns FALSE if boolean is UNKNOWN.\u003c/p\u003e\n\u003cp\u003eBack to top\nArithmetic Functions\nSQL\nJava\nPython\nScala\nArithmetic functions\tDescription\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003enumeric\nReturns numeric.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003enumeric\nReturns negative numeric.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003enumeric1 + numeric2\nReturns numeric1 plus numeric2.\u003c/p\u003e\n\u003cp\u003enumeric1 - numeric2\nReturns numeric1 minus numeric2.\u003c/p\u003e\n\u003cp\u003enumeric1 * numeric2\nReturns numeric1 multiplied by numeric2.\u003c/p\u003e\n\u003cp\u003enumeric1 / numeric2\nReturns numeric1 divided by numeric2.\u003c/p\u003e\n\u003cp\u003ePOWER(numeric1, numeric2)\nReturns numeric1 raised to the power of numeric2.\u003c/p\u003e\n\u003cp\u003eABS(numeric)\nReturns the absolute value of numeric.\u003c/p\u003e\n\u003cp\u003eMOD(numeric1, numeric2)\nReturns the remainder (modulus) of numeric1 divided by numeric2. The result is negative only if numeric1 is negative.\u003c/p\u003e\n\u003cp\u003eSQRT(numeric)\nReturns the square root of numeric.\u003c/p\u003e\n\u003cp\u003eLN(numeric)\nReturns the natural logarithm (base e) of numeric.\u003c/p\u003e\n\u003cp\u003eLOG10(numeric)\nReturns the base 10 logarithm of numeric.\u003c/p\u003e\n\u003cp\u003eLOG2(numeric)\nReturns the base 2 logarithm of numeric.\u003c/p\u003e\n\u003cp\u003eLOG(numeric2)\nLOG(numeric1, numeric2)\nWhen called with one argument, returns the natural logarithm of numeric2. When called with two arguments, this function returns the logarithm of numeric2 to the base numeric1.\u003c/p\u003e\n\u003cp\u003eNote: Currently, numeric2 must be greater than 0 and numeric1 must be greater than 1.\u003c/p\u003e\n\u003cp\u003eEXP(numeric)\nReturns e raised to the power of numeric.\u003c/p\u003e\n\u003cp\u003eCEIL(numeric)\nCEILING(numeric)\nRounds numeric up, and returns the smallest number that is greater than or equal to numeric.\u003c/p\u003e\n\u003cp\u003eFLOOR(numeric)\nRounds numeric down, and returns the largest number that is less than or equal to numeric.\u003c/p\u003e\n\u003cp\u003eSIN(numeric)\nReturns the sine of numeric.\u003c/p\u003e\n\u003cp\u003eSINH(numeric)\nReturns the hyperbolic sine of numeric.\u003c/p\u003e\n\u003cp\u003eThe return type is DOUBLE.\u003c/p\u003e\n\u003cp\u003eCOS(numeric)\nReturns the cosine of numeric.\u003c/p\u003e\n\u003cp\u003eTAN(numeric)\nReturns the tangent of numeric.\u003c/p\u003e\n\u003cp\u003eTANH(numeric)\nReturns the hyperbolic tangent of numeric.\u003c/p\u003e\n\u003cp\u003eThe return type is DOUBLE.\u003c/p\u003e\n\u003cp\u003eCOT(numeric)\nReturns the cotangent of a numeric.\u003c/p\u003e\n\u003cp\u003eASIN(numeric)\nReturns the arc sine of numeric.\u003c/p\u003e\n\u003cp\u003eACOS(numeric)\nReturns the arc cosine of numeric.\u003c/p\u003e\n\u003cp\u003eATAN(numeric)\nReturns the arc tangent of numeric.\u003c/p\u003e\n\u003cp\u003eATAN2(numeric1, numeric2)\nReturns the arc tangent of a coordinate (numeric1, numeric2).\u003c/p\u003e\n\u003cp\u003eCOSH(numeric)\nReturns the hyperbolic cosine of NUMERIC.\u003c/p\u003e\n\u003cp\u003eReturn value type is DOUBLE.\u003c/p\u003e\n\u003cp\u003eDEGREES(numeric)\nReturns the degree representation of a radian numeric.\u003c/p\u003e\n\u003cp\u003eRADIANS(numeric)\nReturns the radian representation of a degree numeric.\u003c/p\u003e\n\u003cp\u003eSIGN(numeric)\nReturns the signum of numeric.\u003c/p\u003e\n\u003cp\u003eROUND(numeric, integer)\nReturns a number rounded to integer decimal places for numeric.\u003c/p\u003e\n\u003cp\u003ePI\nReturns a value that is closer than any other values to pi.\u003c/p\u003e\n\u003cp\u003eE()\nReturns a value that is closer than any other values to e.\u003c/p\u003e\n\u003cp\u003eRAND()\nReturns a pseudorandom double value between 0.0 (inclusive) and 1.0 (exclusive).\u003c/p\u003e\n\u003cp\u003eRAND(integer)\nReturns a pseudorandom double value between 0.0 (inclusive) and 1.0 (exclusive) with an initial seed integer. Two RAND functions will return identical sequences of numbers if they have the same initial seed.\u003c/p\u003e\n\u003cp\u003eRAND_INTEGER(integer)\nReturns a pseudorandom integer value between 0 (inclusive) and integer (exclusive).\u003c/p\u003e\n\u003cp\u003eRAND_INTEGER(integer1, integer2)\nReturns a pseudorandom integer value between 0 (inclusive) and the specified value (exclusive) with an initial seed. Two RAND_INTEGER functions will return identical sequences of numbers if they have the same initial seed and bound.\u003c/p\u003e\n\u003cp\u003eUUID()\nReturns an UUID (Universally Unique Identifier) string (e.g., \u0026ldquo;3d3c68f7-f608-473f-b60c-b0c44ad4cc4e\u0026rdquo;) according to RFC 4122 type 4 (pseudo randomly generated) UUID. The UUID is generated using a cryptographically strong pseudo random number generator.\u003c/p\u003e\n\u003cp\u003eBIN(integer)\nReturns a string representation of integer in binary format. Returns NULL if integer is NULL.\u003c/p\u003e\n\u003cp\u003eE.g. BIN(4) returns \u0026lsquo;100\u0026rsquo; and BIN(12) returns \u0026lsquo;1100\u0026rsquo;.\u003c/p\u003e\n\u003cp\u003eHEX(numeric)\nHEX(string)\nReturns a string representation of an integer numeric value or a string in hex format. Returns NULL if the argument is NULL.\u003c/p\u003e\n\u003cp\u003eE.g. a numeric 20 leads to \u0026ldquo;14\u0026rdquo;, a numeric 100 leads to \u0026ldquo;64\u0026rdquo;, a string \u0026ldquo;hello,world\u0026rdquo; leads to \u0026ldquo;68656C6C6F2C776F726C64\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eTRUNCATE(numeric1, integer2)\nReturns a numeric of truncated to integer2 decimal places. Returns NULL if numeric1 or integer2 is NULL.If integer2 is 0,the result has no decimal point or fractional part.integer2 can be negative to cause integer2 digits left of the decimal point of the value to become zero.This function can also pass in only one numeric1 parameter and not set Integer2 to use.If Integer2 is not set, the function truncates as if Integer2 were 0.\u003c/p\u003e\n\u003cp\u003eE.g. truncate(42.345, 2) to 42.34. and truncate(42.345) to 42.0.\u003c/p\u003e\n\u003cp\u003ePI()\nReturns the value of π (pi).\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eBack to top\nString Functions\nSQL\nJava\nPython\nScala\nString functions\tDescription\nstring1 || string2\nReturns the concatenation of string1 and string2.\u003c/p\u003e\n\u003cp\u003eCHAR_LENGTH(string)\nCHARACTER_LENGTH(string)\nReturns the number of characters in string.\u003c/p\u003e\n\u003cp\u003eUPPER(string)\nReturns string in uppercase.\u003c/p\u003e\n\u003cp\u003eLOWER(string)\nReturns string in lowercase.\u003c/p\u003e\n\u003cp\u003ePOSITION(string1 IN string2)\nReturns the position (start from 1) of the first occurrence of string1 in string2; returns 0 if string1 cannot be found in string2.\u003c/p\u003e\n\u003cp\u003eTRIM([ BOTH | LEADING | TRAILING ] string1 FROM string2)\nReturns a string that removes leading and/or trailing characters string1 from string2. By default, whitespaces at both sides are removed.\u003c/p\u003e\n\u003cp\u003eLTRIM(string)\nReturns a string that removes the left whitespaces from string.\u003c/p\u003e\n\u003cp\u003eE.g., LTRIM(\u0026rsquo; This is a test String.\u0026rsquo;) returns \u0026ldquo;This is a test String.\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eRTRIM(string)\nReturns a string that removes the right whitespaces from string.\u003c/p\u003e\n\u003cp\u003eE.g., RTRIM(\u0026lsquo;This is a test String. \u0026lsquo;) returns \u0026ldquo;This is a test String.\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eREPEAT(string, integer)\nReturns a string that repeats the base string integer times.\u003c/p\u003e\n\u003cp\u003eE.g., REPEAT(\u0026lsquo;This is a test String.\u0026rsquo;, 2) returns \u0026ldquo;This is a test String.This is a test String.\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eREGEXP_REPLACE(string1, string2, string3)\nReturns a string from string1 with all the substrings that match a regular expression string2 consecutively being replaced with string3.\u003c/p\u003e\n\u003cp\u003eE.g., REGEXP_REPLACE(\u0026lsquo;foobar\u0026rsquo;, \u0026lsquo;oo|ar\u0026rsquo;, \u0026lsquo;\u0026rsquo;) returns \u0026ldquo;fb\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eOVERLAY(string1 PLACING string2 FROM integer1 [ FOR integer2 ])\nReturns a string that replaces integer2 (string2\u0026rsquo;s length by default) characters of string1 with string2 from position integer1.\u003c/p\u003e\n\u003cp\u003eE.g., OVERLAY(\u0026lsquo;This is an old string\u0026rsquo; PLACING \u0026rsquo; new\u0026rsquo; FROM 10 FOR 5) returns \u0026ldquo;This is a new string\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eSUBSTRING(string FROM integer1 [ FOR integer2 ])\nReturns a substring of string starting from position integer1 with length integer2 (to the end by default).\u003c/p\u003e\n\u003cp\u003eREPLACE(string1, string2, string3)\nReturns a new string which replaces all the occurrences of string2 with string3 (non-overlapping) from string1\u003c/p\u003e\n\u003cp\u003eE.g., REPLACE(\u0026lsquo;hello world\u0026rsquo;, \u0026lsquo;world\u0026rsquo;, \u0026lsquo;flink\u0026rsquo;) returns \u0026ldquo;hello flink\u0026rdquo;; REPLACE(\u0026lsquo;ababab\u0026rsquo;, \u0026lsquo;abab\u0026rsquo;, \u0026lsquo;z\u0026rsquo;) returns \u0026ldquo;zab\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eREGEXP_EXTRACT(string1, string2[, integer])\nReturns a string from string1 which extracted with a specified regular expression string2 and a regex match group index integer.\u003c/p\u003e\n\u003cp\u003eNote: The regex match group index starts from 1 and 0 means matching the whole regex. In addition, the regex match group index should not exceed the number of the defined groups.\u003c/p\u003e\n\u003cp\u003eE.g. REGEXP_EXTRACT(\u0026lsquo;foothebar\u0026rsquo;, \u0026lsquo;foo(.*?)(bar)\u0026rsquo;, 2)\u0026quot; returns \u0026ldquo;bar\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eINITCAP(string)\nReturns a new form of string with the first character of each word converted to uppercase and the rest characters to lowercase. Here a word means a sequences of alphanumeric characters.\u003c/p\u003e\n\u003cp\u003eCONCAT(string1, string2,\u0026hellip;)\nReturns a string that concatenates string1, string2, \u0026hellip;. Returns NULL if any argument is NULL.\u003c/p\u003e\n\u003cp\u003eE.g., CONCAT(\u0026lsquo;AA\u0026rsquo;, \u0026lsquo;BB\u0026rsquo;, \u0026lsquo;CC\u0026rsquo;) returns \u0026ldquo;AABBCC\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eCONCAT_WS(string1, string2, string3,\u0026hellip;)\nReturns a string that concatenates string2, string3, \u0026hellip; with a separator string1. The separator is added between the strings to be concatenated. Returns NULL If string1 is NULL. Compared with CONCAT(), CONCAT_WS() automatically skips NULL arguments.\u003c/p\u003e\n\u003cp\u003eE.g., CONCAT_WS(\u0026rsquo;~\u0026rsquo;, \u0026lsquo;AA\u0026rsquo;, NULL, \u0026lsquo;BB\u0026rsquo;, \u0026lsquo;\u0026rsquo;, \u0026lsquo;CC\u0026rsquo;) returns \u0026ldquo;AA~BB~~CC\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eLPAD(string1, integer, string2)\nReturns a new string from string1 left-padded with string2 to a length of integer characters. If the length of string1 is shorter than integer, returns string1 shortened to integer characters.\u003c/p\u003e\n\u003cp\u003eE.g., LPAD(\u0026lsquo;hi\u0026rsquo;,4,\u0026rsquo;??\u0026rsquo;) returns \u0026ldquo;??hi\u0026rdquo;; LPAD(\u0026lsquo;hi\u0026rsquo;,1,\u0026rsquo;??\u0026rsquo;) returns \u0026ldquo;h\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eRPAD(string1, integer, string2)\nReturns a new string from string1 right-padded with string2 to a length of integer characters. If the length of string1 is shorter than integer, returns string1 shortened to integer characters.\u003c/p\u003e\n\u003cp\u003eE.g., RPAD(\u0026lsquo;hi\u0026rsquo;,4,\u0026rsquo;??\u0026rsquo;) returns \u0026ldquo;hi??\u0026rdquo;, RPAD(\u0026lsquo;hi\u0026rsquo;,1,\u0026rsquo;??\u0026rsquo;) returns \u0026ldquo;h\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eFROM_BASE64(string)\nReturns the base64-decoded result from string; returns NULL if string is NULL.\u003c/p\u003e\n\u003cp\u003eE.g., FROM_BASE64(\u0026lsquo;aGVsbG8gd29ybGQ=\u0026rsquo;) returns \u0026ldquo;hello world\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eTO_BASE64(string)\nReturns the base64-encoded result from string; returns NULL if string is NULL.\u003c/p\u003e\n\u003cp\u003eE.g., TO_BASE64(\u0026lsquo;hello world\u0026rsquo;) returns \u0026ldquo;aGVsbG8gd29ybGQ=\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eASCII(string)\nReturns the numeric value of the first character of string. Returns NULL if string is NULL.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eE.g., ascii(\u0026lsquo;abc\u0026rsquo;) returns 97, and ascii(CAST(NULL AS VARCHAR)) returns NULL.\u003c/p\u003e\n\u003cp\u003eCHR(integer)\nReturns the ASCII character having the binary equivalent to integer. If integer is larger than 255, we will get the modulus of integer divided by 255 first, and returns CHR of the modulus. Returns NULL if integer is NULL.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eE.g., chr(97) returns a, chr(353) returns a, and ascii(CAST(NULL AS VARCHAR)) returns NULL.\u003c/p\u003e\n\u003cp\u003eDECODE(binary, string)\nDecodes the first argument into a String using the provided character set (one of \u0026lsquo;US-ASCII\u0026rsquo;, \u0026lsquo;ISO-8859-1\u0026rsquo;, \u0026lsquo;UTF-8\u0026rsquo;, \u0026lsquo;UTF-16BE\u0026rsquo;, \u0026lsquo;UTF-16LE\u0026rsquo;, \u0026lsquo;UTF-16\u0026rsquo;). If either argument is null, the result will also be null.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eENCODE(string1, string2)\nEncodes the string1 into a BINARY using the provided string2 character set (one of \u0026lsquo;US-ASCII\u0026rsquo;, \u0026lsquo;ISO-8859-1\u0026rsquo;, \u0026lsquo;UTF-8\u0026rsquo;, \u0026lsquo;UTF-16BE\u0026rsquo;, \u0026lsquo;UTF-16LE\u0026rsquo;, \u0026lsquo;UTF-16\u0026rsquo;). If either argument is null, the result will also be null.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eINSTR(string1, string2)\nReturns the position of the first occurrence of string2 in string1. Returns NULL if any of arguments is NULL.\u003c!-- raw HTML omitted --\u003e\nOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eLEFT(string, integer)\nReturns the leftmost integer characters from the string. Returns EMPTY String if integer is negative. Returns NULL if any argument is NULL.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eRIGHT(string, integer)\nReturns the rightmost integer characters from the string. Returns EMPTY String if integer is negative. Returns NULL if any argument is NULL.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eLOCATE(string1, string2[, integer])\nReturns the position of the first occurrence of string1 in string2 after position integer. Returns 0 if not found. Returns NULL if any of arguments is NULL.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003ePARSE_URL(string1, string2[, string3])\nReturns the specified part from the URL. Valid values for string2 include \u0026lsquo;HOST\u0026rsquo;, \u0026lsquo;PATH\u0026rsquo;, \u0026lsquo;QUERY\u0026rsquo;, \u0026lsquo;REF\u0026rsquo;, \u0026lsquo;PROTOCOL\u0026rsquo;, \u0026lsquo;AUTHORITY\u0026rsquo;, \u0026lsquo;FILE\u0026rsquo;, and \u0026lsquo;USERINFO\u0026rsquo;. Returns NULL if any of arguments is NULL.\u003c/p\u003e\n\u003cp\u003eE.g., parse_url(\u0026lsquo;\u003ca href=\"http://facebook.com/path1/p.php?k1=v1\u0026amp;k2=v2#Ref1'\"\u003ehttp://facebook.com/path1/p.php?k1=v1\u0026amp;k2=v2#Ref1'\u003c/a\u003e, \u0026lsquo;HOST\u0026rsquo;), returns \u0026lsquo;facebook.com\u0026rsquo;.\u003c/p\u003e\n\u003cp\u003eAlso a value of a particular key in QUERY can be extracted by providing the key as the third argument string3.\u003c/p\u003e\n\u003cp\u003eE.g., parse_url(\u0026lsquo;\u003ca href=\"http://facebook.com/path1/p.php?k1=v1\u0026amp;k2=v2#Ref1'\"\u003ehttp://facebook.com/path1/p.php?k1=v1\u0026amp;k2=v2#Ref1'\u003c/a\u003e, \u0026lsquo;QUERY\u0026rsquo;, \u0026lsquo;k1\u0026rsquo;) returns \u0026lsquo;v1\u0026rsquo;.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eREGEXP(string1, string2)\nReturns TRUE if any (possibly empty) substring of string1 matches the Java regular expression string2, otherwise FALSE. Returns NULL if any of arguments is NULL.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eREVERSE(string)\nReturns the reversed string. Returns NULL if string is NULL.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eSPLIT_INDEX(string1, string2, integer1)\nSplits string1 by the delimiter string2, returns the integerth (zero-based) string of the split strings. Returns NULL if integer is negative. Returns NULL if any of arguments is NULL.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eSTR_TO_MAP(string1[, string2, string3]])\nReturns a map after splitting the string1 into key/value pairs using delimiters. string2 is the pair delimiter, default is \u0026lsquo;,\u0026rsquo;. And string3 is the key-value delimiter, default is \u0026lsquo;=\u0026rsquo;.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eSUBSTR(string[, integer1[, integer2]])\nReturns a substring of string starting from position integer1 with length integer2 (to the end by default).\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eBack to top\nTemporal Functions\nSQL\nJava\nPython\nScala\nTemporal functions\tDescription\nDATE string\nReturns a SQL date parsed from string in form of \u0026ldquo;yyyy-MM-dd\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eTIME string\nReturns a SQL time parsed from string in form of \u0026ldquo;HH:mm:ss\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eTIMESTAMP string\nReturns a SQL timestamp parsed from string in form of \u0026ldquo;yyyy-MM-dd HH:mm:ss[.SSS]\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eINTERVAL string range\nParses an interval string in the form \u0026ldquo;dd hh:mm:ss.fff\u0026rdquo; for SQL intervals of milliseconds or \u0026ldquo;yyyy-mm\u0026rdquo; for SQL intervals of months. An interval range might be DAY, MINUTE, DAY TO HOUR, or DAY TO SECOND for intervals of milliseconds; YEAR or YEAR TO MONTH for intervals of months.\u003c/p\u003e\n\u003cp\u003eE.g., INTERVAL \u0026lsquo;10 00:00:00.004\u0026rsquo; DAY TO SECOND, INTERVAL \u0026lsquo;10\u0026rsquo; DAY, or INTERVAL \u0026lsquo;2-10\u0026rsquo; YEAR TO MONTH return intervals.\u003c/p\u003e\n\u003cp\u003eCURRENT_DATE\nReturns the current SQL date in the UTC time zone.\u003c/p\u003e\n\u003cp\u003eCURRENT_TIME\nReturns the current SQL time in the UTC time zone.\u003c/p\u003e\n\u003cp\u003eCURRENT_TIMESTAMP\nReturns the current SQL timestamp in the UTC time zone.\u003c/p\u003e\n\u003cp\u003eLOCALTIME\nReturns the current SQL time in local time zone.\u003c/p\u003e\n\u003cp\u003eLOCALTIMESTAMP\nReturns the current SQL timestamp in local time zone.\u003c/p\u003e\n\u003cp\u003eEXTRACT(timeintervalunit FROM temporal)\nReturns a long value extracted from the timeintervalunit part of temporal.\u003c/p\u003e\n\u003cp\u003eE.g., EXTRACT(DAY FROM DATE \u0026lsquo;2006-06-05\u0026rsquo;) returns 5.\u003c/p\u003e\n\u003cp\u003eYEAR(date)\nReturns the year from SQL date date. Equivalent to EXTRACT(YEAR FROM date).\u003c/p\u003e\n\u003cp\u003eE.g., YEAR(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 1994.\u003c/p\u003e\n\u003cp\u003eQUARTER(date)\nReturns the quarter of a year (an integer between 1 and 4) from SQL date date. Equivalent to EXTRACT(QUARTER FROM date).\u003c/p\u003e\n\u003cp\u003eE.g., QUARTER(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 3.\u003c/p\u003e\n\u003cp\u003eMONTH(date)\nReturns the month of a year (an integer between 1 and 12) from SQL date date. Equivalent to EXTRACT(MONTH FROM date).\u003c/p\u003e\n\u003cp\u003eE.g., MONTH(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 9.\u003c/p\u003e\n\u003cp\u003eWEEK(date)\nReturns the week of a year (an integer between 1 and 53) from SQL date date. Equivalent to EXTRACT(WEEK FROM date).\u003c/p\u003e\n\u003cp\u003eE.g., WEEK(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 39.\u003c/p\u003e\n\u003cp\u003eDAYOFYEAR(date)\nReturns the day of a year (an integer between 1 and 366) from SQL date date. Equivalent to EXTRACT(DOY FROM date).\u003c/p\u003e\n\u003cp\u003eE.g., DAYOFYEAR(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 270.\u003c/p\u003e\n\u003cp\u003eDAYOFMONTH(date)\nReturns the day of a month (an integer between 1 and 31) from SQL date date. Equivalent to EXTRACT(DAY FROM date).\u003c/p\u003e\n\u003cp\u003eE.g., DAYOFMONTH(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 27.\u003c/p\u003e\n\u003cp\u003eDAYOFWEEK(date)\nReturns the day of a week (an integer between 1 and 7; Sunday = 1) from SQL date date.Equivalent to EXTRACT(DOW FROM date).\u003c/p\u003e\n\u003cp\u003eE.g., DAYOFWEEK(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 3.\u003c/p\u003e\n\u003cp\u003eHOUR(timestamp)\nReturns the hour of a day (an integer between 0 and 23) from SQL timestamp timestamp. Equivalent to EXTRACT(HOUR FROM timestamp).\u003c/p\u003e\n\u003cp\u003eE.g., HOUR(TIMESTAMP \u0026lsquo;1994-09-27 13:14:15\u0026rsquo;) returns 13.\u003c/p\u003e\n\u003cp\u003eMINUTE(timestamp)\nReturns the minute of an hour (an integer between 0 and 59) from SQL timestamp timestamp. Equivalent to EXTRACT(MINUTE FROM timestamp).\u003c/p\u003e\n\u003cp\u003eE.g., MINUTE(TIMESTAMP \u0026lsquo;1994-09-27 13:14:15\u0026rsquo;) returns 14.\u003c/p\u003e\n\u003cp\u003eSECOND(timestamp)\nReturns the second of a minute (an integer between 0 and 59) from SQL timestamp. Equivalent to EXTRACT(SECOND FROM timestamp).\u003c/p\u003e\n\u003cp\u003eE.g., SECOND(TIMESTAMP \u0026lsquo;1994-09-27 13:14:15\u0026rsquo;) returns 15.\u003c/p\u003e\n\u003cp\u003eFLOOR(timepoint TO timeintervalunit)\nReturns a value that rounds timepoint down to the time unit timeintervalunit.\u003c/p\u003e\n\u003cp\u003eE.g., FLOOR(TIME \u0026lsquo;12:44:31\u0026rsquo; TO MINUTE) returns 12:44:00.\u003c/p\u003e\n\u003cp\u003eCEIL(timepoint TO timeintervalunit)\nReturns a value that rounds timepoint up to the time unit timeintervalunit.\u003c/p\u003e\n\u003cp\u003eE.g., CEIL(TIME \u0026lsquo;12:44:31\u0026rsquo; TO MINUTE) returns 12:45:00.\u003c/p\u003e\n\u003cp\u003e(timepoint1, temporal1) OVERLAPS (timepoint2, temporal2)\nReturns TRUE if two time intervals defined by (timepoint1, temporal1) and (timepoint2, temporal2) overlap. The temporal values could be either a time point or a time interval.\u003c/p\u003e\n\u003cp\u003eE.g., (TIME \u0026lsquo;2:55:00\u0026rsquo;, INTERVAL \u0026lsquo;1\u0026rsquo; HOUR) OVERLAPS (TIME \u0026lsquo;3:30:00\u0026rsquo;, INTERVAL \u0026lsquo;2\u0026rsquo; HOUR) returns TRUE; (TIME \u0026lsquo;9:00:00\u0026rsquo;, TIME \u0026lsquo;10:00:00\u0026rsquo;) OVERLAPS (TIME \u0026lsquo;10:15:00\u0026rsquo;, INTERVAL \u0026lsquo;3\u0026rsquo; HOUR) returns FALSE.\u003c/p\u003e\n\u003cp\u003eDATE_FORMAT(timestamp, string)\nAttention for old planner This function has serious bugs and should not be used for now. Please implement a custom UDF instead or use EXTRACT as a workaround.\u003c/p\u003e\n\u003cp\u003eFor blink planner, this converts timestamp to a value of string in the format specified by the date format string. The format string is compatible with Java\u0026rsquo;s SimpleDateFormat.\u003c/p\u003e\n\u003cp\u003eTIMESTAMPADD(timeintervalunit, interval, timepoint)\nReturns a new time value that adds a (signed) integer interval to timepoint. The unit for interval is given by the unit argument, which should be one of the following values: SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or YEAR.\u003c/p\u003e\n\u003cp\u003eE.g., TIMESTAMPADD(WEEK, 1, DATE \u0026lsquo;2003-01-02\u0026rsquo;) returns 2003-01-09.\u003c/p\u003e\n\u003cp\u003eTIMESTAMPDIFF(timepointunit, timepoint1, timepoint2)\nReturns the (signed) number of timepointunit between timepoint1 and timepoint2. The unit for the interval is given by the first argument, which should be one of the following values: SECOND, MINUTE, HOUR, DAY, MONTH, or YEAR. See also the Time Interval and Point Unit Specifiers table.\u003c/p\u003e\n\u003cp\u003eE.g., TIMESTAMPDIFF(DAY, TIMESTAMP \u0026lsquo;2003-01-02 10:00:00\u0026rsquo;, TIMESTAMP \u0026lsquo;2003-01-03 10:00:00\u0026rsquo;) leads to 1.\u003c/p\u003e\n\u003cp\u003eCONVERT_TZ(string1, string2, string3)\nConverts a datetime string1 (with default ISO timestamp format \u0026lsquo;yyyy-MM-dd HH:mm:ss\u0026rsquo;) from time zone string2 to time zone string3. The format of time zone should be either an abbreviation such as \u0026ldquo;PST\u0026rdquo;, a full name such as \u0026ldquo;America/Los_Angeles\u0026rdquo;, or a custom ID such as \u0026ldquo;GMT-8:00\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eE.g., CONVERT(\u0026lsquo;1970-01-01 00:00:00\u0026rsquo;, \u0026lsquo;UTC\u0026rsquo;, \u0026lsquo;America/Los_Angeles\u0026rsquo;) returns \u0026lsquo;1969-12-31 16:00:00\u0026rsquo;.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eFROM_UNIXTIME(numeric[, string])\nReturns a representation of the numeric argument as a value in string format (default is \u0026lsquo;YYYY-MM-DD hh:mm:ss\u0026rsquo;). numeric is an internal timestamp value representing seconds since \u0026lsquo;1970-01-01 00:00:00\u0026rsquo; UTC, such as produced by the UNIX_TIMESTAMP() function. The return value is expressed in the session time zone (specified in TableConfig).\u003c/p\u003e\n\u003cp\u003eE.g., FROM_UNIXTIME(44) returns \u0026lsquo;1970-01-01 09:00:44\u0026rsquo; if in UTC time zone, but returns \u0026lsquo;1970-01-01 09:00:44\u0026rsquo; if in \u0026lsquo;Asia/Tokyo\u0026rsquo; time zone.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eUNIX_TIMESTAMP()\nGets current Unix timestamp in seconds. This function is not deterministic.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eUNIX_TIMESTAMP(string1[, string2])\nConverts date time string string1 in format string2 (by default: yyyy-MM-dd HH:mm:ss if not specified) to Unix timestamp (in seconds), using the specified timezone in table config.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eTO_DATE(string1[, string2])\nConverts a date string string1 with format string2 (by default \u0026lsquo;yyyy-MM-dd\u0026rsquo;) to a date.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eTO_TIMESTAMP(string1[, string2])\nConverts date time string string1 with format string2 (by default: \u0026lsquo;yyyy-MM-dd HH:mm:ss\u0026rsquo;) under the session time zone (specified by TableConfig) to a timestamp.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eNOW()\nReturns the current SQL timestamp in the UTC time zone. This function is not deterministic.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eBack to top\nConditional Functions\nSQL\nJava\nPython\nScala\nConditional functions\tDescription\nCASE value\nWHEN value1_1 [, value1_2 ]* THEN result1\n[ WHEN value2_1 [, value2_2 ]* THEN result2 ]*\n[ ELSE resultZ ]\nEND\nReturns resultX when the first time value is contained in (valueX_1, valueX_2, \u0026hellip;). When no value matches, returns resultZ if it is provided and returns NULL otherwise.\u003c/p\u003e\n\u003cp\u003eCASE\nWHEN condition1 THEN result1\n[ WHEN condition2 THEN result2 ]*\n[ ELSE resultZ ]\nEND\nReturns resultX when the first conditionX is met. When no condition is met, returns resultZ if it is provided and returns NULL otherwise.\u003c/p\u003e\n\u003cp\u003eNULLIF(value1, value2)\nReturns NULL if value1 is equal to value2; returns value1 otherwise.\u003c/p\u003e\n\u003cp\u003eE.g., NULLIF(5, 5) returns NULL; NULLIF(5, 0) returns 5.\u003c/p\u003e\n\u003cp\u003eCOALESCE(value1, value2 [, value3 ]* )\nReturns the first value that is not NULL from value1, value2, \u0026hellip;.\u003c/p\u003e\n\u003cp\u003eE.g., COALESCE(NULL, 5) returns 5.\u003c/p\u003e\n\u003cp\u003eIF(condition, true_value, false_value)\nReturns the true_value if condition is met, otherwise false_value.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eE.g., IF(5 \u0026gt; 3, 5, 3) returns 5.\u003c/p\u003e\n\u003cp\u003eIS_ALPHA(string)\nReturns true if all characters in string are letter, otherwise false.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eIS_DECIMAL(string)\nReturns true if string can be parsed to a valid numeric, otherwise false.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eIS_DIGIT(string)\nReturns true if all characters in string are digit, otherwise false.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eBack to top\nType Conversion Functions\nSQL\nJava\nPython\nScala\nType conversion functions\tDescription\nCAST(value AS type)\nReturns a new value being cast to type type. See the supported types here.\u003c/p\u003e\n\u003cp\u003eE.g., CAST(\u0026lsquo;42\u0026rsquo; AS INT) returns 42; CAST(NULL AS VARCHAR) returns NULL of type VARCHAR.\u003c/p\u003e\n\u003cp\u003eBack to top\nCollection Functions\nSQL\nJava\nPython\nScala\nCollection functions\tDescription\nCARDINALITY(array)\nReturns the number of elements in array.\u003c/p\u003e\n\u003cp\u003earray ‘[’ integer ‘]’\nReturns the element at position integer in array. The index starts from 1.\u003c/p\u003e\n\u003cp\u003eELEMENT(array)\nReturns the sole element of array (whose cardinality should be one); returns NULL if array is empty. Throws an exception if array has more than one element.\u003c/p\u003e\n\u003cp\u003eCARDINALITY(map)\nReturns the number of entries in map.\u003c/p\u003e\n\u003cp\u003emap ‘[’ value ‘]’\nReturns the value specified by key value in map.\u003c/p\u003e\n\u003cp\u003eValue Construction Functions\nSQL\nJava\nPython\nScala\nValue construction functions\tDescription\nROW(value1, [, value2]\u003cem\u003e)\n(value1, [, value2]\u003c/em\u003e)\nReturns a row created from a list of values (value1, value2,\u0026hellip;).\u003c/p\u003e\n\u003cp\u003eARRAY ‘[’ value1 [, value2 ]* ‘]’\nReturns an array created from a list of values (value1, value2, \u0026hellip;).\u003c/p\u003e\n\u003cp\u003eMAP ‘[’ value1, value2 [, value3, value4 ]* ‘]’\nReturns a map created from a list of key-value pairs ((value1, value2), (value3, value4), \u0026hellip;).\u003c/p\u003e\n\u003cp\u003eBack to top\nValue Access Functions\nSQL\nJava\nPython\nScala\nValue access functions\tDescription\ntableName.compositeType.field\nReturns the value of a field from a Flink composite type (e.g., Tuple, POJO) by name.\u003c/p\u003e\n\u003cp\u003etableName.compositeType.*\nReturns a flat representation of a Flink composite type (e.g., Tuple, POJO) that converts each of its direct subtype into a separate field. In most cases the fields of the flat representation are named similarly to the original fields but with a dollar separator (e.g., mypojo$mytuple$f0).\u003c/p\u003e\n\u003cp\u003eBack to top\nGrouping Functions\nSQL\nJava\nPython\nScala\nGrouping functions\tDescription\nGROUP_ID()\nReturns an integer that uniquely identifies the combination of grouping keys.\u003c/p\u003e\n\u003cp\u003eGROUPING(expression1 [, expression2]* )\nGROUPING_ID(expression1 [, expression2]* )\nReturns a bit vector of the given grouping expressions.\u003c/p\u003e\n\u003cp\u003eHash Functions\nSQL\nJava\nPython\nScala\nHash functions\tDescription\nMD5(string)\nReturns the MD5 hash of string as a string of 32 hexadecimal digits; returns NULL if string is NULL.\u003c/p\u003e\n\u003cp\u003eSHA1(string)\nReturns the SHA-1 hash of string as a string of 40 hexadecimal digits; returns NULL if string is NULL.\u003c/p\u003e\n\u003cp\u003eSHA224(string)\nReturns the SHA-224 hash of string as a string of 56 hexadecimal digits; returns NULL if string is NULL.\u003c/p\u003e\n\u003cp\u003eSHA256(string)\nReturns the SHA-256 hash of string as a string of 64 hexadecimal digits; returns NULL if string is NULL.\u003c/p\u003e\n\u003cp\u003eSHA384(string)\nReturns the SHA-384 hash of string as a string of 96 hexadecimal digits; returns NULL if string is NULL.\u003c/p\u003e\n\u003cp\u003eSHA512(string)\nReturns the SHA-512 hash of string as a string of 128 hexadecimal digits; returns NULL if string is NULL.\u003c/p\u003e\n\u003cp\u003eSHA2(string, hashLength)\nReturns the hash using the SHA-2 family of hash functions (SHA-224, SHA-256, SHA-384, or SHA-512). The first argument string is the string to be hashed and the second argument hashLength is the bit length of the result (224, 256, 384, or 512). Returns NULL if string or hashLength is NULL.\u003c/p\u003e\n\u003cp\u003eBack to top\nAuxiliary Functions\nSQL\nJava\nPython\nScala\nAuxiliary functions\tDescription\nAggregate Functions\nThe aggregate functions take an expression across all the rows as the input and return a single aggregated value as the result.\u003c/p\u003e\n\u003cp\u003eSQL\nJava\nPython\nScala\nAggregate functions\tDescription\nCOUNT([ ALL ] expression | DISTINCT expression1 [, expression2]*)\nBy default or with ALL, returns the number of input rows for which expression is not NULL. Use DISTINCT for one unique instance of each value.\u003c/p\u003e\n\u003cp\u003eCOUNT(*)\nCOUNT(1)\nReturns the number of input rows.\u003c/p\u003e\n\u003cp\u003eAVG([ ALL | DISTINCT ] expression)\nBy default or with keyword ALL, returns the average (arithmetic mean) of expression across all input rows. Use DISTINCT for one unique instance of each value.\u003c/p\u003e\n\u003cp\u003eSUM([ ALL | DISTINCT ] expression)\nBy default or with keyword ALL, returns the sum of expression across all input rows. Use DISTINCT for one unique instance of each value.\u003c/p\u003e\n\u003cp\u003eMAX([ ALL | DISTINCT ] expression)\nBy default or with keyword ALL, returns the maximum value of expression across all input rows. Use DISTINCT for one unique instance of each value.\u003c/p\u003e\n\u003cp\u003eMIN([ ALL | DISTINCT ] expression)\nBy default or with keyword ALL, returns the minimum value of expression across all input rows. Use DISTINCT for one unique instance of each value.\u003c/p\u003e\n\u003cp\u003eSTDDEV_POP([ ALL | DISTINCT ] expression)\nBy default or with keyword ALL, returns the population standard deviation of expression across all input rows. Use DISTINCT for one unique instance of each value.\u003c/p\u003e\n\u003cp\u003eSTDDEV_SAMP([ ALL | DISTINCT ] expression)\nBy default or with keyword ALL, returns the sample standard deviation of expression across all input rows. Use DISTINCT for one unique instance of each value.\u003c/p\u003e\n\u003cp\u003eVAR_POP([ ALL | DISTINCT ] expression)\nBy default or with keyword ALL, returns the population variance (square of the population standard deviation) of expression across all input rows. Use DISTINCT for one unique instance of each value.\u003c/p\u003e\n\u003cp\u003eVAR_SAMP([ ALL | DISTINCT ] expression)\nBy default or with keyword ALL, returns the sample variance (square of the sample standard deviation) of expression across all input rows. Use DISTINCT for one unique instance of each value.\u003c/p\u003e\n\u003cp\u003eCOLLECT([ ALL | DISTINCT ] expression)\nBy default or with keyword ALL, returns a multiset of expression across all input rows. NULL values will be ignored. Use DISTINCT for one unique instance of each value.\u003c/p\u003e\n\u003cp\u003eVARIANCE([ ALL | DISTINCT ] expression)\nSynonyms for VAR_SAMP().\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eRANK()\nReturns the rank of a value in a group of values. The result is one plus the number of rows preceding or equal to the current row in the ordering of the partition. The values will produce gaps in the sequence.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eDENSE_RANK()\nReturns the rank of a value in a group of values. The result is one plus the previously assigned rank value. Unlike the function rank, dense_rank will not produce gaps in the ranking sequence.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eROW_NUMBER()\nAssigns a unique, sequential number to each row, starting with one, according to the ordering of rows within the window partition.\u003c/p\u003e\n\u003cp\u003eROW_NUMBER and RANK are similar. ROW_NUMBER numbers all rows sequentially (for example 1, 2, 3, 4, 5). RANK provides the same numeric value for ties (for example 1, 2, 2, 4, 5).\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eLEAD(expression [, offset] [, default] )\nReturns the value of expression at the offsetth row after the current row in the window. The default value of offset is 1 and the default value of default is NULL.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eLAG(expression [, offset] [, default])\nReturns the value of expression at the offsetth row after the current row in the window. The default value of offset is 1 and the default value of default is NULL.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eFIRST_VALUE(expression)\nReturns the first value in an ordered set of values.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eLAST_VALUE(expression)\nReturns the last value in an ordered set of values.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eLISTAGG(expression [, separator])\nConcatenates the values of string expressions and places separator values between them. The separator is not added at the end of string. The default value of separator is \u0026lsquo;,\u0026rsquo;.\u003c/p\u003e\n\u003cp\u003eOnly supported in blink planner.\u003c/p\u003e\n\u003cp\u003eBack to top\nTime Interval and Point Unit Specifiers\nThe following table lists specifiers for time interval and time point units.\u003c/p\u003e\n\u003cp\u003eFor Table API, please use _ for spaces (e.g., DAY_TO_HOUR).\u003c/p\u003e\n\u003cp\u003eTime Interval Unit\tTime Point Unit\nMILLENIUM (SQL-only)\t\nCENTURY (SQL-only)\t\nYEAR\tYEAR\nYEAR TO MONTH\t\nQUARTER\tQUARTER\nMONTH\tMONTH\nWEEK\tWEEK\nDAY\tDAY\nDAY TO HOUR\t\nDAY TO MINUTE\t\nDAY TO SECOND\t\nHOUR\tHOUR\nHOUR TO MINUTE\t\nHOUR TO SECOND\t\nMINUTE\tMINUTE\nMINUTE TO SECOND\t\nSECOND\tSECOND\nMILLISECOND\nMICROSECOND\nDOY (SQL-only)\t\nDOW (SQL-only)\t\nSQL_TSI_YEAR (SQL-only)\nSQL_TSI_QUARTER (SQL-only)\nSQL_TSI_MONTH (SQL-only)\nSQL_TSI_WEEK (SQL-only)\nSQL_TSI_DAY (SQL-only)\nSQL_TSI_HOUR (SQL-only)\nSQL_TSI_MINUTE (SQL-only)\nSQL_TSI_SECOND (SQL-only)\nBack to top\nColumn Functions\nThe column functions are used to select or deselect table columns.\u003c/p\u003e\n\u003cp\u003eSYNTAX\tDESC\nwithColumns(…)\tselect the specified columns\nwithoutColumns(…)\tdeselect the columns specified\nThe detailed syntax is as follows:\u003c/p\u003e\n\u003cp\u003ecolumnFunction:\nwithColumns(columnExprs)\nwithoutColumns(columnExprs)\u003c/p\u003e\n\u003cp\u003ecolumnExprs:\ncolumnExpr [, columnExpr]*\u003c/p\u003e\n\u003cp\u003ecolumnExpr:\ncolumnRef | columnIndex to columnIndex | columnName to columnName\u003c/p\u003e\n\u003cp\u003ecolumnRef:\ncolumnName(The field name that exists in the table) | columnIndex(a positive integer starting from 1)\nThe usage of the column function is illustrated in the following table. (Suppose we have a table with 5 columns: (a: Int, b: Long, c: String, d:String, e: String)):\u003c/p\u003e\n\u003cp\u003eJava\nPython\nScala\nApi\tUsage\tDescription\nwithColumns(\u003cem\u003e)|\u003c/em\u003e\nselect(\u0026ldquo;withColumns(\u003cem\u003e)\u0026rdquo;) | select(\u0026quot;\u003c/em\u003e\u0026quot;) = select(\u0026ldquo;a, b, c, d, e\u0026rdquo;)\nall the columns\nwithColumns(m to n)\nselect(\u0026ldquo;withColumns(2 to 4)\u0026rdquo;) = select(\u0026ldquo;b, c, d\u0026rdquo;)\ncolumns from m to n\nwithColumns(m, n, k)\nselect(\u0026ldquo;withColumns(1, 3, e)\u0026rdquo;) = select(\u0026ldquo;a, c, e\u0026rdquo;)\ncolumns m, n, k\nwithColumns(m, n to k)\nselect(\u0026ldquo;withColumns(1, 3 to 5)\u0026rdquo;) = select(\u0026ldquo;a, c, d ,e\u0026rdquo;)\nmixing of the above two representation\nwithoutColumns(m to n)\nselect(\u0026ldquo;withoutColumns(2 to 4)\u0026rdquo;) = select(\u0026ldquo;a, e\u0026rdquo;)\ndeselect columns from m to n\nwithoutColumns(m, n, k)\nselect(\u0026ldquo;withoutColumns(1, 3, 5)\u0026rdquo;) = select(\u0026ldquo;b, d\u0026rdquo;)\ndeselect columns m, n, k\nwithoutColumns(m, n to k)\nselect(\u0026ldquo;withoutColumns(1, 3 to 5)\u0026rdquo;) = select(\u0026ldquo;b\u0026rdquo;)\nmixing of the above two representation\nThe column functions can be used in all places where column fields are expected, such as select, groupBy, orderBy, UDFs etc. e.g.:\u003c/p\u003e\n\u003cp\u003eJava\nScala\nPython\ntable\n.groupBy(\u0026ldquo;withColumns(1 to 3)\u0026rdquo;)\n.select(\u0026ldquo;withColumns(a to b), myUDAgg(myUDF(withColumns(5 to 20)))\u0026rdquo;)\nNote Column functions are only used in Table API.\u003c/p\u003e\n","text":"System (Built-in) Functions Flink Table API \u0026amp; SQL provides users with a set of built-in functions for data transformations. This page gives a brief overview of them. If a function that you need is not supported yet, you can implement a user-defined function. If you think that the function is general enough, please open a Jira issue for it with a detailed description.\nScalar Functions The scalar functions take zero, one or more values as the input and return a single value as the result.\nComparison Functions\nComparison functions\tDescription value1 = value2 Returns TRUE if value1 is equal to value2; returns UNKNOWN if value1 or value2 is NULL.\nvalue1 \u0026lt;\u0026gt; value2 Returns TRUE if value1 is not equal to value2; returns UNKNOWN if value1 or value2 is NULL.\nvalue1 \u0026gt; value2 Returns TRUE if value1 is greater than value2; returns UNKNOWN if value1 or value2 is NULL.\nvalue1 \u0026gt;= value2 Returns TRUE if value1 is greater than or equal to value2; returns UNKNOWN if value1 or value2 is NULL.\nvalue1 \u0026lt; value2 Returns TRUE if value1 is less than value2; returns UNKNOWN if value1 or value2 is NULL.\nvalue1 \u0026lt;= value2 Returns TRUE if value1 is less than or equal to value2; returns UNKNOWN if value1 or value2 is NULL.\nvalue IS NULL Returns TRUE if value is NULL.\nvalue IS NOT NULL Returns TRUE if value is not NULL.\nvalue1 IS DISTINCT FROM value2 Returns TRUE if two values are not equal. NULL values are treated as identical here.\nE.g., 1 IS DISTINCT FROM NULL returns TRUE; NULL IS DISTINCT FROM NULL returns FALSE.\nvalue1 IS NOT DISTINCT FROM value2 Returns TRUE if two values are equal. NULL values are treated as identical here.\nE.g., 1 IS NOT DISTINCT FROM NULL returns FALSE; NULL IS NOT DISTINCT FROM NULL returns TRUE.\nvalue1 BETWEEN [ ASYMMETRIC | SYMMETRIC ] value2 AND value3 By default (or with the ASYMMETRIC keyword), returns TRUE if value1 is greater than or equal to value2 and less than or equal to value3. With the SYMMETRIC keyword, returns TRUE if value1 is inclusively between value2 and value3. When either value2 or value3 is NULL, returns FALSE or UNKNOWN.\nE.g., 12 BETWEEN 15 AND 12 returns FALSE; 12 BETWEEN SYMMETRIC 15 AND 12 returns TRUE; 12 BETWEEN 10 AND NULL returns UNKNOWN; 12 BETWEEN NULL AND 10 returns FALSE; 12 BETWEEN SYMMETRIC NULL AND 12 returns UNKNOWN.\nvalue1 NOT BETWEEN [ ASYMMETRIC | SYMMETRIC ] value2 AND value3 By default (or with the ASYMMETRIC keyword), returns TRUE if value1 is less than value2 or greater than value3. With the SYMMETRIC keyword, returns TRUE if value1 is not inclusively between value2 and value3. When either value2 or value3 is NULL, returns TRUE or UNKNOWN.\nE.g., 12 NOT BETWEEN 15 AND 12 returns TRUE; 12 NOT BETWEEN SYMMETRIC 15 AND 12 returns FALSE; 12 NOT BETWEEN NULL AND 15 returns UNKNOWN; 12 NOT BETWEEN 15 AND NULL returns TRUE; 12 NOT BETWEEN SYMMETRIC 12 AND NULL returns UNKNOWN.\nstring1 LIKE string2 [ ESCAPE char ] Returns TRUE if string1 matches pattern string2; returns UNKNOWN if string1 or string2 is NULL. An escape character can be defined if necessary.\nNote: The escape character has not been supported yet.\nstring1 NOT LIKE string2 [ ESCAPE char ] Returns TRUE if string1 does not match pattern string2; returns UNKNOWN if string1 or string2 is NULL. An escape character can be defined if necessary.\nNote: The escape character has not been supported yet.\nstring1 SIMILAR TO string2 [ ESCAPE char ] Returns TRUE if string1 matches SQL regular expression string2; returns UNKNOWN if string1 or string2 is NULL. An escape character can be defined if necessary.\nNote: The escape character has not been supported yet.\nstring1 NOT SIMILAR TO string2 [ ESCAPE char ] Returns TRUE if string1 does not match SQL regular expression string2; returns UNKNOWN if string1 or string2 is NULL. An escape character can be defined if necessary.\nNote: The escape character has not been supported yet.\nvalue1 IN (value2 [, value3]* ) Returns TRUE if value1 exists in the given list (value2, value3, \u0026hellip;). When (value2, value3, \u0026hellip;). contains NULL, returns TRUE if the element can be found and UNKNOWN otherwise. Always returns UNKNOWN if value1 is NULL.\nE.g., 4 IN (1, 2, 3) returns FALSE; 1 IN (1, 2, NULL) returns TRUE; 4 IN (1, 2, NULL) returns UNKNOWN.\nvalue1 NOT IN (value2 [, value3]* ) Returns TRUE if value1 does not exist in the given list (value2, value3, \u0026hellip;). When (value2, value3, \u0026hellip;). contains NULL, returns FALSE if value1 can be found and UNKNOWN otherwise. Always returns UNKNOWN if value1 is NULL.\nE.g., 4 NOT IN (1, 2, 3) returns TRUE; 1 NOT IN (1, 2, NULL) returns FALSE; 4 NOT IN (1, 2, NULL) returns UNKNOWN.\nEXISTS (sub-query) Returns TRUE if sub-query returns at least one row. Only supported if the operation can be rewritten in a join and group operation.\nNote: For streaming queries the operation is rewritten in a join and group operation. The required state to compute the query result might grow infinitely depending on the number of distinct input rows. Please provide a query configuration with valid retention interval to prevent excessive state size. See Query Configuration for details.\nvalue IN (sub-query) Returns TRUE if value is equal to a row returned by sub-query.\nNote: For streaming queries the operation is rewritten in a join and group operation. The required state to compute the query result might grow infinitely depending on the number of distinct input rows. Please provide a query configuration with valid retention interval to prevent excessive state size. See Query Configuration for details.\nvalue NOT IN (sub-query) Returns TRUE if value is not equal to every row returned by sub-query.\nNote: For streaming queries the operation is rewritten in a join and group operation. The required state to compute the query result might grow infinitely depending on the number of distinct input rows. Please provide a query configuration with valid retention interval to prevent excessive state size. See Query Configuration for details.\nBack to top Logical Functions SQL Java Python Scala Logical functions\tDescription boolean1 OR boolean2 Returns TRUE if boolean1 is TRUE or boolean2 is TRUE. Supports three-valued logic.\nE.g., TRUE OR UNKNOWN returns TRUE.\nboolean1 AND boolean2 Returns TRUE if boolean1 and boolean2 are both TRUE. Supports three-valued logic.\nE.g., TRUE AND UNKNOWN returns UNKNOWN.\nNOT boolean Returns TRUE if boolean is FALSE; returns FALSE if boolean is TRUE; returns UNKNOWN if boolean is UNKNOWN.\nboolean IS FALSE Returns TRUE if boolean is FALSE; returns FALSE if boolean is TRUE or UNKNOWN.\nboolean IS NOT FALSE Returns TRUE if boolean is TRUE or UNKNOWN; returns FALSE if boolean is FALSE.\nboolean IS TRUE Returns TRUE if boolean is TRUE; returns FALSE if boolean is FALSE or UNKNOWN.\nboolean IS NOT TRUE Returns TRUE if boolean is FALSE or UNKNOWN; returns FALSE if boolean is TRUE.\nboolean IS UNKNOWN Returns TRUE if boolean is UNKNOWN; returns FALSE if boolean is TRUE or FALSE.\nboolean IS NOT UNKNOWN Returns TRUE if boolean is TRUE or FALSE; returns FALSE if boolean is UNKNOWN.\nBack to top Arithmetic Functions SQL Java Python Scala Arithmetic functions\tDescription\nnumeric Returns numeric. numeric Returns negative numeric. numeric1 + numeric2 Returns numeric1 plus numeric2.\nnumeric1 - numeric2 Returns numeric1 minus numeric2.\nnumeric1 * numeric2 Returns numeric1 multiplied by numeric2.\nnumeric1 / numeric2 Returns numeric1 divided by numeric2.\nPOWER(numeric1, numeric2) Returns numeric1 raised to the power of numeric2.\nABS(numeric) Returns the absolute value of numeric.\nMOD(numeric1, numeric2) Returns the remainder (modulus) of numeric1 divided by numeric2. The result is negative only if numeric1 is negative.\nSQRT(numeric) Returns the square root of numeric.\nLN(numeric) Returns the natural logarithm (base e) of numeric.\nLOG10(numeric) Returns the base 10 logarithm of numeric.\nLOG2(numeric) Returns the base 2 logarithm of numeric.\nLOG(numeric2) LOG(numeric1, numeric2) When called with one argument, returns the natural logarithm of numeric2. When called with two arguments, this function returns the logarithm of numeric2 to the base numeric1.\nNote: Currently, numeric2 must be greater than 0 and numeric1 must be greater than 1.\nEXP(numeric) Returns e raised to the power of numeric.\nCEIL(numeric) CEILING(numeric) Rounds numeric up, and returns the smallest number that is greater than or equal to numeric.\nFLOOR(numeric) Rounds numeric down, and returns the largest number that is less than or equal to numeric.\nSIN(numeric) Returns the sine of numeric.\nSINH(numeric) Returns the hyperbolic sine of numeric.\nThe return type is DOUBLE.\nCOS(numeric) Returns the cosine of numeric.\nTAN(numeric) Returns the tangent of numeric.\nTANH(numeric) Returns the hyperbolic tangent of numeric.\nThe return type is DOUBLE.\nCOT(numeric) Returns the cotangent of a numeric.\nASIN(numeric) Returns the arc sine of numeric.\nACOS(numeric) Returns the arc cosine of numeric.\nATAN(numeric) Returns the arc tangent of numeric.\nATAN2(numeric1, numeric2) Returns the arc tangent of a coordinate (numeric1, numeric2).\nCOSH(numeric) Returns the hyperbolic cosine of NUMERIC.\nReturn value type is DOUBLE.\nDEGREES(numeric) Returns the degree representation of a radian numeric.\nRADIANS(numeric) Returns the radian representation of a degree numeric.\nSIGN(numeric) Returns the signum of numeric.\nROUND(numeric, integer) Returns a number rounded to integer decimal places for numeric.\nPI Returns a value that is closer than any other values to pi.\nE() Returns a value that is closer than any other values to e.\nRAND() Returns a pseudorandom double value between 0.0 (inclusive) and 1.0 (exclusive).\nRAND(integer) Returns a pseudorandom double value between 0.0 (inclusive) and 1.0 (exclusive) with an initial seed integer. Two RAND functions will return identical sequences of numbers if they have the same initial seed.\nRAND_INTEGER(integer) Returns a pseudorandom integer value between 0 (inclusive) and integer (exclusive).\nRAND_INTEGER(integer1, integer2) Returns a pseudorandom integer value between 0 (inclusive) and the specified value (exclusive) with an initial seed. Two RAND_INTEGER functions will return identical sequences of numbers if they have the same initial seed and bound.\nUUID() Returns an UUID (Universally Unique Identifier) string (e.g., \u0026ldquo;3d3c68f7-f608-473f-b60c-b0c44ad4cc4e\u0026rdquo;) according to RFC 4122 type 4 (pseudo randomly generated) UUID. The UUID is generated using a cryptographically strong pseudo random number generator.\nBIN(integer) Returns a string representation of integer in binary format. Returns NULL if integer is NULL.\nE.g. BIN(4) returns \u0026lsquo;100\u0026rsquo; and BIN(12) returns \u0026lsquo;1100\u0026rsquo;.\nHEX(numeric) HEX(string) Returns a string representation of an integer numeric value or a string in hex format. Returns NULL if the argument is NULL.\nE.g. a numeric 20 leads to \u0026ldquo;14\u0026rdquo;, a numeric 100 leads to \u0026ldquo;64\u0026rdquo;, a string \u0026ldquo;hello,world\u0026rdquo; leads to \u0026ldquo;68656C6C6F2C776F726C64\u0026rdquo;.\nTRUNCATE(numeric1, integer2) Returns a numeric of truncated to integer2 decimal places. Returns NULL if numeric1 or integer2 is NULL.If integer2 is 0,the result has no decimal point or fractional part.integer2 can be negative to cause integer2 digits left of the decimal point of the value to become zero.This function can also pass in only one numeric1 parameter and not set Integer2 to use.If Integer2 is not set, the function truncates as if Integer2 were 0.\nE.g. truncate(42.345, 2) to 42.34. and truncate(42.345) to 42.0.\nPI() Returns the value of π (pi).\nOnly supported in blink planner.\nBack to top String Functions SQL Java Python Scala String functions\tDescription string1 || string2 Returns the concatenation of string1 and string2.\nCHAR_LENGTH(string) CHARACTER_LENGTH(string) Returns the number of characters in string.\nUPPER(string) Returns string in uppercase.\nLOWER(string) Returns string in lowercase.\nPOSITION(string1 IN string2) Returns the position (start from 1) of the first occurrence of string1 in string2; returns 0 if string1 cannot be found in string2.\nTRIM([ BOTH | LEADING | TRAILING ] string1 FROM string2) Returns a string that removes leading and/or trailing characters string1 from string2. By default, whitespaces at both sides are removed.\nLTRIM(string) Returns a string that removes the left whitespaces from string.\nE.g., LTRIM(\u0026rsquo; This is a test String.\u0026rsquo;) returns \u0026ldquo;This is a test String.\u0026rdquo;.\nRTRIM(string) Returns a string that removes the right whitespaces from string.\nE.g., RTRIM(\u0026lsquo;This is a test String. \u0026lsquo;) returns \u0026ldquo;This is a test String.\u0026rdquo;.\nREPEAT(string, integer) Returns a string that repeats the base string integer times.\nE.g., REPEAT(\u0026lsquo;This is a test String.\u0026rsquo;, 2) returns \u0026ldquo;This is a test String.This is a test String.\u0026rdquo;.\nREGEXP_REPLACE(string1, string2, string3) Returns a string from string1 with all the substrings that match a regular expression string2 consecutively being replaced with string3.\nE.g., REGEXP_REPLACE(\u0026lsquo;foobar\u0026rsquo;, \u0026lsquo;oo|ar\u0026rsquo;, \u0026lsquo;\u0026rsquo;) returns \u0026ldquo;fb\u0026rdquo;.\nOVERLAY(string1 PLACING string2 FROM integer1 [ FOR integer2 ]) Returns a string that replaces integer2 (string2\u0026rsquo;s length by default) characters of string1 with string2 from position integer1.\nE.g., OVERLAY(\u0026lsquo;This is an old string\u0026rsquo; PLACING \u0026rsquo; new\u0026rsquo; FROM 10 FOR 5) returns \u0026ldquo;This is a new string\u0026rdquo;\nSUBSTRING(string FROM integer1 [ FOR integer2 ]) Returns a substring of string starting from position integer1 with length integer2 (to the end by default).\nREPLACE(string1, string2, string3) Returns a new string which replaces all the occurrences of string2 with string3 (non-overlapping) from string1\nE.g., REPLACE(\u0026lsquo;hello world\u0026rsquo;, \u0026lsquo;world\u0026rsquo;, \u0026lsquo;flink\u0026rsquo;) returns \u0026ldquo;hello flink\u0026rdquo;; REPLACE(\u0026lsquo;ababab\u0026rsquo;, \u0026lsquo;abab\u0026rsquo;, \u0026lsquo;z\u0026rsquo;) returns \u0026ldquo;zab\u0026rdquo;.\nREGEXP_EXTRACT(string1, string2[, integer]) Returns a string from string1 which extracted with a specified regular expression string2 and a regex match group index integer.\nNote: The regex match group index starts from 1 and 0 means matching the whole regex. In addition, the regex match group index should not exceed the number of the defined groups.\nE.g. REGEXP_EXTRACT(\u0026lsquo;foothebar\u0026rsquo;, \u0026lsquo;foo(.*?)(bar)\u0026rsquo;, 2)\u0026quot; returns \u0026ldquo;bar\u0026rdquo;.\nINITCAP(string) Returns a new form of string with the first character of each word converted to uppercase and the rest characters to lowercase. Here a word means a sequences of alphanumeric characters.\nCONCAT(string1, string2,\u0026hellip;) Returns a string that concatenates string1, string2, \u0026hellip;. Returns NULL if any argument is NULL.\nE.g., CONCAT(\u0026lsquo;AA\u0026rsquo;, \u0026lsquo;BB\u0026rsquo;, \u0026lsquo;CC\u0026rsquo;) returns \u0026ldquo;AABBCC\u0026rdquo;.\nCONCAT_WS(string1, string2, string3,\u0026hellip;) Returns a string that concatenates string2, string3, \u0026hellip; with a separator string1. The separator is added between the strings to be concatenated. Returns NULL If string1 is NULL. Compared with CONCAT(), CONCAT_WS() automatically skips NULL arguments.\nE.g., CONCAT_WS(\u0026rsquo;~\u0026rsquo;, \u0026lsquo;AA\u0026rsquo;, NULL, \u0026lsquo;BB\u0026rsquo;, \u0026lsquo;\u0026rsquo;, \u0026lsquo;CC\u0026rsquo;) returns \u0026ldquo;AA~BB~~CC\u0026rdquo;.\nLPAD(string1, integer, string2) Returns a new string from string1 left-padded with string2 to a length of integer characters. If the length of string1 is shorter than integer, returns string1 shortened to integer characters.\nE.g., LPAD(\u0026lsquo;hi\u0026rsquo;,4,\u0026rsquo;??\u0026rsquo;) returns \u0026ldquo;??hi\u0026rdquo;; LPAD(\u0026lsquo;hi\u0026rsquo;,1,\u0026rsquo;??\u0026rsquo;) returns \u0026ldquo;h\u0026rdquo;.\nRPAD(string1, integer, string2) Returns a new string from string1 right-padded with string2 to a length of integer characters. If the length of string1 is shorter than integer, returns string1 shortened to integer characters.\nE.g., RPAD(\u0026lsquo;hi\u0026rsquo;,4,\u0026rsquo;??\u0026rsquo;) returns \u0026ldquo;hi??\u0026rdquo;, RPAD(\u0026lsquo;hi\u0026rsquo;,1,\u0026rsquo;??\u0026rsquo;) returns \u0026ldquo;h\u0026rdquo;.\nFROM_BASE64(string) Returns the base64-decoded result from string; returns NULL if string is NULL.\nE.g., FROM_BASE64(\u0026lsquo;aGVsbG8gd29ybGQ=\u0026rsquo;) returns \u0026ldquo;hello world\u0026rdquo;.\nTO_BASE64(string) Returns the base64-encoded result from string; returns NULL if string is NULL.\nE.g., TO_BASE64(\u0026lsquo;hello world\u0026rsquo;) returns \u0026ldquo;aGVsbG8gd29ybGQ=\u0026rdquo;.\nASCII(string) Returns the numeric value of the first character of string. Returns NULL if string is NULL.\nOnly supported in blink planner.\nE.g., ascii(\u0026lsquo;abc\u0026rsquo;) returns 97, and ascii(CAST(NULL AS VARCHAR)) returns NULL.\nCHR(integer) Returns the ASCII character having the binary equivalent to integer. If integer is larger than 255, we will get the modulus of integer divided by 255 first, and returns CHR of the modulus. Returns NULL if integer is NULL.\nOnly supported in blink planner.\nE.g., chr(97) returns a, chr(353) returns a, and ascii(CAST(NULL AS VARCHAR)) returns NULL.\nDECODE(binary, string) Decodes the first argument into a String using the provided character set (one of \u0026lsquo;US-ASCII\u0026rsquo;, \u0026lsquo;ISO-8859-1\u0026rsquo;, \u0026lsquo;UTF-8\u0026rsquo;, \u0026lsquo;UTF-16BE\u0026rsquo;, \u0026lsquo;UTF-16LE\u0026rsquo;, \u0026lsquo;UTF-16\u0026rsquo;). If either argument is null, the result will also be null.\nOnly supported in blink planner.\nENCODE(string1, string2) Encodes the string1 into a BINARY using the provided string2 character set (one of \u0026lsquo;US-ASCII\u0026rsquo;, \u0026lsquo;ISO-8859-1\u0026rsquo;, \u0026lsquo;UTF-8\u0026rsquo;, \u0026lsquo;UTF-16BE\u0026rsquo;, \u0026lsquo;UTF-16LE\u0026rsquo;, \u0026lsquo;UTF-16\u0026rsquo;). If either argument is null, the result will also be null.\nOnly supported in blink planner.\nINSTR(string1, string2) Returns the position of the first occurrence of string2 in string1. Returns NULL if any of arguments is NULL. Only supported in blink planner.\nLEFT(string, integer) Returns the leftmost integer characters from the string. Returns EMPTY String if integer is negative. Returns NULL if any argument is NULL.\nOnly supported in blink planner.\nRIGHT(string, integer) Returns the rightmost integer characters from the string. Returns EMPTY String if integer is negative. Returns NULL if any argument is NULL.\nOnly supported in blink planner.\nLOCATE(string1, string2[, integer]) Returns the position of the first occurrence of string1 in string2 after position integer. Returns 0 if not found. Returns NULL if any of arguments is NULL.\nOnly supported in blink planner.\nPARSE_URL(string1, string2[, string3]) Returns the specified part from the URL. Valid values for string2 include \u0026lsquo;HOST\u0026rsquo;, \u0026lsquo;PATH\u0026rsquo;, \u0026lsquo;QUERY\u0026rsquo;, \u0026lsquo;REF\u0026rsquo;, \u0026lsquo;PROTOCOL\u0026rsquo;, \u0026lsquo;AUTHORITY\u0026rsquo;, \u0026lsquo;FILE\u0026rsquo;, and \u0026lsquo;USERINFO\u0026rsquo;. Returns NULL if any of arguments is NULL.\nE.g., parse_url(\u0026lsquo;http://facebook.com/path1/p.php?k1=v1\u0026amp;k2=v2#Ref1', \u0026lsquo;HOST\u0026rsquo;), returns \u0026lsquo;facebook.com\u0026rsquo;.\nAlso a value of a particular key in QUERY can be extracted by providing the key as the third argument string3.\nE.g., parse_url(\u0026lsquo;http://facebook.com/path1/p.php?k1=v1\u0026amp;k2=v2#Ref1', \u0026lsquo;QUERY\u0026rsquo;, \u0026lsquo;k1\u0026rsquo;) returns \u0026lsquo;v1\u0026rsquo;.\nOnly supported in blink planner.\nREGEXP(string1, string2) Returns TRUE if any (possibly empty) substring of string1 matches the Java regular expression string2, otherwise FALSE. Returns NULL if any of arguments is NULL.\nOnly supported in blink planner.\nREVERSE(string) Returns the reversed string. Returns NULL if string is NULL.\nOnly supported in blink planner.\nSPLIT_INDEX(string1, string2, integer1) Splits string1 by the delimiter string2, returns the integerth (zero-based) string of the split strings. Returns NULL if integer is negative. Returns NULL if any of arguments is NULL.\nOnly supported in blink planner.\nSTR_TO_MAP(string1[, string2, string3]]) Returns a map after splitting the string1 into key/value pairs using delimiters. string2 is the pair delimiter, default is \u0026lsquo;,\u0026rsquo;. And string3 is the key-value delimiter, default is \u0026lsquo;=\u0026rsquo;.\nOnly supported in blink planner.\nSUBSTR(string[, integer1[, integer2]]) Returns a substring of string starting from position integer1 with length integer2 (to the end by default).\nOnly supported in blink planner.\nBack to top Temporal Functions SQL Java Python Scala Temporal functions\tDescription DATE string Returns a SQL date parsed from string in form of \u0026ldquo;yyyy-MM-dd\u0026rdquo;.\nTIME string Returns a SQL time parsed from string in form of \u0026ldquo;HH:mm:ss\u0026rdquo;.\nTIMESTAMP string Returns a SQL timestamp parsed from string in form of \u0026ldquo;yyyy-MM-dd HH:mm:ss[.SSS]\u0026rdquo;.\nINTERVAL string range Parses an interval string in the form \u0026ldquo;dd hh:mm:ss.fff\u0026rdquo; for SQL intervals of milliseconds or \u0026ldquo;yyyy-mm\u0026rdquo; for SQL intervals of months. An interval range might be DAY, MINUTE, DAY TO HOUR, or DAY TO SECOND for intervals of milliseconds; YEAR or YEAR TO MONTH for intervals of months.\nE.g., INTERVAL \u0026lsquo;10 00:00:00.004\u0026rsquo; DAY TO SECOND, INTERVAL \u0026lsquo;10\u0026rsquo; DAY, or INTERVAL \u0026lsquo;2-10\u0026rsquo; YEAR TO MONTH return intervals.\nCURRENT_DATE Returns the current SQL date in the UTC time zone.\nCURRENT_TIME Returns the current SQL time in the UTC time zone.\nCURRENT_TIMESTAMP Returns the current SQL timestamp in the UTC time zone.\nLOCALTIME Returns the current SQL time in local time zone.\nLOCALTIMESTAMP Returns the current SQL timestamp in local time zone.\nEXTRACT(timeintervalunit FROM temporal) Returns a long value extracted from the timeintervalunit part of temporal.\nE.g., EXTRACT(DAY FROM DATE \u0026lsquo;2006-06-05\u0026rsquo;) returns 5.\nYEAR(date) Returns the year from SQL date date. Equivalent to EXTRACT(YEAR FROM date).\nE.g., YEAR(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 1994.\nQUARTER(date) Returns the quarter of a year (an integer between 1 and 4) from SQL date date. Equivalent to EXTRACT(QUARTER FROM date).\nE.g., QUARTER(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 3.\nMONTH(date) Returns the month of a year (an integer between 1 and 12) from SQL date date. Equivalent to EXTRACT(MONTH FROM date).\nE.g., MONTH(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 9.\nWEEK(date) Returns the week of a year (an integer between 1 and 53) from SQL date date. Equivalent to EXTRACT(WEEK FROM date).\nE.g., WEEK(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 39.\nDAYOFYEAR(date) Returns the day of a year (an integer between 1 and 366) from SQL date date. Equivalent to EXTRACT(DOY FROM date).\nE.g., DAYOFYEAR(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 270.\nDAYOFMONTH(date) Returns the day of a month (an integer between 1 and 31) from SQL date date. Equivalent to EXTRACT(DAY FROM date).\nE.g., DAYOFMONTH(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 27.\nDAYOFWEEK(date) Returns the day of a week (an integer between 1 and 7; Sunday = 1) from SQL date date.Equivalent to EXTRACT(DOW FROM date).\nE.g., DAYOFWEEK(DATE \u0026lsquo;1994-09-27\u0026rsquo;) returns 3.\nHOUR(timestamp) Returns the hour of a day (an integer between 0 and 23) from SQL timestamp timestamp. Equivalent to EXTRACT(HOUR FROM timestamp).\nE.g., HOUR(TIMESTAMP \u0026lsquo;1994-09-27 13:14:15\u0026rsquo;) returns 13.\nMINUTE(timestamp) Returns the minute of an hour (an integer between 0 and 59) from SQL timestamp timestamp. Equivalent to EXTRACT(MINUTE FROM timestamp).\nE.g., MINUTE(TIMESTAMP \u0026lsquo;1994-09-27 13:14:15\u0026rsquo;) returns 14.\nSECOND(timestamp) Returns the second of a minute (an integer between 0 and 59) from SQL timestamp. Equivalent to EXTRACT(SECOND FROM timestamp).\nE.g., SECOND(TIMESTAMP \u0026lsquo;1994-09-27 13:14:15\u0026rsquo;) returns 15.\nFLOOR(timepoint TO timeintervalunit) Returns a value that rounds timepoint down to the time unit timeintervalunit.\nE.g., FLOOR(TIME \u0026lsquo;12:44:31\u0026rsquo; TO MINUTE) returns 12:44:00.\nCEIL(timepoint TO timeintervalunit) Returns a value that rounds timepoint up to the time unit timeintervalunit.\nE.g., CEIL(TIME \u0026lsquo;12:44:31\u0026rsquo; TO MINUTE) returns 12:45:00.\n(timepoint1, temporal1) OVERLAPS (timepoint2, temporal2) Returns TRUE if two time intervals defined by (timepoint1, temporal1) and (timepoint2, temporal2) overlap. The temporal values could be either a time point or a time interval.\nE.g., (TIME \u0026lsquo;2:55:00\u0026rsquo;, INTERVAL \u0026lsquo;1\u0026rsquo; HOUR) OVERLAPS (TIME \u0026lsquo;3:30:00\u0026rsquo;, INTERVAL \u0026lsquo;2\u0026rsquo; HOUR) returns TRUE; (TIME \u0026lsquo;9:00:00\u0026rsquo;, TIME \u0026lsquo;10:00:00\u0026rsquo;) OVERLAPS (TIME \u0026lsquo;10:15:00\u0026rsquo;, INTERVAL \u0026lsquo;3\u0026rsquo; HOUR) returns FALSE.\nDATE_FORMAT(timestamp, string) Attention for old planner This function has serious bugs and should not be used for now. Please implement a custom UDF instead or use EXTRACT as a workaround.\nFor blink planner, this converts timestamp to a value of string in the format specified by the date format string. The format string is compatible with Java\u0026rsquo;s SimpleDateFormat.\nTIMESTAMPADD(timeintervalunit, interval, timepoint) Returns a new time value that adds a (signed) integer interval to timepoint. The unit for interval is given by the unit argument, which should be one of the following values: SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or YEAR.\nE.g., TIMESTAMPADD(WEEK, 1, DATE \u0026lsquo;2003-01-02\u0026rsquo;) returns 2003-01-09.\nTIMESTAMPDIFF(timepointunit, timepoint1, timepoint2) Returns the (signed) number of timepointunit between timepoint1 and timepoint2. The unit for the interval is given by the first argument, which should be one of the following values: SECOND, MINUTE, HOUR, DAY, MONTH, or YEAR. See also the Time Interval and Point Unit Specifiers table.\nE.g., TIMESTAMPDIFF(DAY, TIMESTAMP \u0026lsquo;2003-01-02 10:00:00\u0026rsquo;, TIMESTAMP \u0026lsquo;2003-01-03 10:00:00\u0026rsquo;) leads to 1.\nCONVERT_TZ(string1, string2, string3) Converts a datetime string1 (with default ISO timestamp format \u0026lsquo;yyyy-MM-dd HH:mm:ss\u0026rsquo;) from time zone string2 to time zone string3. The format of time zone should be either an abbreviation such as \u0026ldquo;PST\u0026rdquo;, a full name such as \u0026ldquo;America/Los_Angeles\u0026rdquo;, or a custom ID such as \u0026ldquo;GMT-8:00\u0026rdquo;.\nE.g., CONVERT(\u0026lsquo;1970-01-01 00:00:00\u0026rsquo;, \u0026lsquo;UTC\u0026rsquo;, \u0026lsquo;America/Los_Angeles\u0026rsquo;) returns \u0026lsquo;1969-12-31 16:00:00\u0026rsquo;.\nOnly supported in blink planner.\nFROM_UNIXTIME(numeric[, string]) Returns a representation of the numeric argument as a value in string format (default is \u0026lsquo;YYYY-MM-DD hh:mm:ss\u0026rsquo;). numeric is an internal timestamp value representing seconds since \u0026lsquo;1970-01-01 00:00:00\u0026rsquo; UTC, such as produced by the UNIX_TIMESTAMP() function. The return value is expressed in the session time zone (specified in TableConfig).\nE.g., FROM_UNIXTIME(44) returns \u0026lsquo;1970-01-01 09:00:44\u0026rsquo; if in UTC time zone, but returns \u0026lsquo;1970-01-01 09:00:44\u0026rsquo; if in \u0026lsquo;Asia/Tokyo\u0026rsquo; time zone.\nOnly supported in blink planner.\nUNIX_TIMESTAMP() Gets current Unix timestamp in seconds. This function is not deterministic.\nOnly supported in blink planner.\nUNIX_TIMESTAMP(string1[, string2]) Converts date time string string1 in format string2 (by default: yyyy-MM-dd HH:mm:ss if not specified) to Unix timestamp (in seconds), using the specified timezone in table config.\nOnly supported in blink planner.\nTO_DATE(string1[, string2]) Converts a date string string1 with format string2 (by default \u0026lsquo;yyyy-MM-dd\u0026rsquo;) to a date.\nOnly supported in blink planner.\nTO_TIMESTAMP(string1[, string2]) Converts date time string string1 with format string2 (by default: \u0026lsquo;yyyy-MM-dd HH:mm:ss\u0026rsquo;) under the session time zone (specified by TableConfig) to a timestamp.\nOnly supported in blink planner.\nNOW() Returns the current SQL timestamp in the UTC time zone. This function is not deterministic.\nOnly supported in blink planner.\nBack to top Conditional Functions SQL Java Python Scala Conditional functions\tDescription CASE value WHEN value1_1 [, value1_2 ]* THEN result1 [ WHEN value2_1 [, value2_2 ]* THEN result2 ]* [ ELSE resultZ ] END Returns resultX when the first time value is contained in (valueX_1, valueX_2, \u0026hellip;). When no value matches, returns resultZ if it is provided and returns NULL otherwise.\nCASE WHEN condition1 THEN result1 [ WHEN condition2 THEN result2 ]* [ ELSE resultZ ] END Returns resultX when the first conditionX is met. When no condition is met, returns resultZ if it is provided and returns NULL otherwise.\nNULLIF(value1, value2) Returns NULL if value1 is equal to value2; returns value1 otherwise.\nE.g., NULLIF(5, 5) returns NULL; NULLIF(5, 0) returns 5.\nCOALESCE(value1, value2 [, value3 ]* ) Returns the first value that is not NULL from value1, value2, \u0026hellip;.\nE.g., COALESCE(NULL, 5) returns 5.\nIF(condition, true_value, false_value) Returns the true_value if condition is met, otherwise false_value.\nOnly supported in blink planner.\nE.g., IF(5 \u0026gt; 3, 5, 3) returns 5.\nIS_ALPHA(string) Returns true if all characters in string are letter, otherwise false.\nOnly supported in blink planner.\nIS_DECIMAL(string) Returns true if string can be parsed to a valid numeric, otherwise false.\nOnly supported in blink planner.\nIS_DIGIT(string) Returns true if all characters in string are digit, otherwise false.\nOnly supported in blink planner.\nBack to top Type Conversion Functions SQL Java Python Scala Type conversion functions\tDescription CAST(value AS type) Returns a new value being cast to type type. See the supported types here.\nE.g., CAST(\u0026lsquo;42\u0026rsquo; AS INT) returns 42; CAST(NULL AS VARCHAR) returns NULL of type VARCHAR.\nBack to top Collection Functions SQL Java Python Scala Collection functions\tDescription CARDINALITY(array) Returns the number of elements in array.\narray ‘[’ integer ‘]’ Returns the element at position integer in array. The index starts from 1.\nELEMENT(array) Returns the sole element of array (whose cardinality should be one); returns NULL if array is empty. Throws an exception if array has more than one element.\nCARDINALITY(map) Returns the number of entries in map.\nmap ‘[’ value ‘]’ Returns the value specified by key value in map.\nValue Construction Functions SQL Java Python Scala Value construction functions\tDescription ROW(value1, [, value2]) (value1, [, value2]) Returns a row created from a list of values (value1, value2,\u0026hellip;).\nARRAY ‘[’ value1 [, value2 ]* ‘]’ Returns an array created from a list of values (value1, value2, \u0026hellip;).\nMAP ‘[’ value1, value2 [, value3, value4 ]* ‘]’ Returns a map created from a list of key-value pairs ((value1, value2), (value3, value4), \u0026hellip;).\nBack to top Value Access Functions SQL Java Python Scala Value access functions\tDescription tableName.compositeType.field Returns the value of a field from a Flink composite type (e.g., Tuple, POJO) by name.\ntableName.compositeType.* Returns a flat representation of a Flink composite type (e.g., Tuple, POJO) that converts each of its direct subtype into a separate field. In most cases the fields of the flat representation are named similarly to the original fields but with a dollar separator (e.g., mypojo$mytuple$f0).\nBack to top Grouping Functions SQL Java Python Scala Grouping functions\tDescription GROUP_ID() Returns an integer that uniquely identifies the combination of grouping keys.\nGROUPING(expression1 [, expression2]* ) GROUPING_ID(expression1 [, expression2]* ) Returns a bit vector of the given grouping expressions.\nHash Functions SQL Java Python Scala Hash functions\tDescription MD5(string) Returns the MD5 hash of string as a string of 32 hexadecimal digits; returns NULL if string is NULL.\nSHA1(string) Returns the SHA-1 hash of string as a string of 40 hexadecimal digits; returns NULL if string is NULL.\nSHA224(string) Returns the SHA-224 hash of string as a string of 56 hexadecimal digits; returns NULL if string is NULL.\nSHA256(string) Returns the SHA-256 hash of string as a string of 64 hexadecimal digits; returns NULL if string is NULL.\nSHA384(string) Returns the SHA-384 hash of string as a string of 96 hexadecimal digits; returns NULL if string is NULL.\nSHA512(string) Returns the SHA-512 hash of string as a string of 128 hexadecimal digits; returns NULL if string is NULL.\nSHA2(string, hashLength) Returns the hash using the SHA-2 family of hash functions (SHA-224, SHA-256, SHA-384, or SHA-512). The first argument string is the string to be hashed and the second argument hashLength is the bit length of the result (224, 256, 384, or 512). Returns NULL if string or hashLength is NULL.\nBack to top Auxiliary Functions SQL Java Python Scala Auxiliary functions\tDescription Aggregate Functions The aggregate functions take an expression across all the rows as the input and return a single aggregated value as the result.\nSQL Java Python Scala Aggregate functions\tDescription COUNT([ ALL ] expression | DISTINCT expression1 [, expression2]*) By default or with ALL, returns the number of input rows for which expression is not NULL. Use DISTINCT for one unique instance of each value.\nCOUNT(*) COUNT(1) Returns the number of input rows.\nAVG([ ALL | DISTINCT ] expression) By default or with keyword ALL, returns the average (arithmetic mean) of expression across all input rows. Use DISTINCT for one unique instance of each value.\nSUM([ ALL | DISTINCT ] expression) By default or with keyword ALL, returns the sum of expression across all input rows. Use DISTINCT for one unique instance of each value.\nMAX([ ALL | DISTINCT ] expression) By default or with keyword ALL, returns the maximum value of expression across all input rows. Use DISTINCT for one unique instance of each value.\nMIN([ ALL | DISTINCT ] expression) By default or with keyword ALL, returns the minimum value of expression across all input rows. Use DISTINCT for one unique instance of each value.\nSTDDEV_POP([ ALL | DISTINCT ] expression) By default or with keyword ALL, returns the population standard deviation of expression across all input rows. Use DISTINCT for one unique instance of each value.\nSTDDEV_SAMP([ ALL | DISTINCT ] expression) By default or with keyword ALL, returns the sample standard deviation of expression across all input rows. Use DISTINCT for one unique instance of each value.\nVAR_POP([ ALL | DISTINCT ] expression) By default or with keyword ALL, returns the population variance (square of the population standard deviation) of expression across all input rows. Use DISTINCT for one unique instance of each value.\nVAR_SAMP([ ALL | DISTINCT ] expression) By default or with keyword ALL, returns the sample variance (square of the sample standard deviation) of expression across all input rows. Use DISTINCT for one unique instance of each value.\nCOLLECT([ ALL | DISTINCT ] expression) By default or with keyword ALL, returns a multiset of expression across all input rows. NULL values will be ignored. Use DISTINCT for one unique instance of each value.\nVARIANCE([ ALL | DISTINCT ] expression) Synonyms for VAR_SAMP().\nOnly supported in blink planner.\nRANK() Returns the rank of a value in a group of values. The result is one plus the number of rows preceding or equal to the current row in the ordering of the partition. The values will produce gaps in the sequence.\nOnly supported in blink planner.\nDENSE_RANK() Returns the rank of a value in a group of values. The result is one plus the previously assigned rank value. Unlike the function rank, dense_rank will not produce gaps in the ranking sequence.\nOnly supported in blink planner.\nROW_NUMBER() Assigns a unique, sequential number to each row, starting with one, according to the ordering of rows within the window partition.\nROW_NUMBER and RANK are similar. ROW_NUMBER numbers all rows sequentially (for example 1, 2, 3, 4, 5). RANK provides the same numeric value for ties (for example 1, 2, 2, 4, 5).\nOnly supported in blink planner.\nLEAD(expression [, offset] [, default] ) Returns the value of expression at the offsetth row after the current row in the window. The default value of offset is 1 and the default value of default is NULL.\nOnly supported in blink planner.\nLAG(expression [, offset] [, default]) Returns the value of expression at the offsetth row after the current row in the window. The default value of offset is 1 and the default value of default is NULL.\nOnly supported in blink planner.\nFIRST_VALUE(expression) Returns the first value in an ordered set of values.\nOnly supported in blink planner.\nLAST_VALUE(expression) Returns the last value in an ordered set of values.\nOnly supported in blink planner.\nLISTAGG(expression [, separator]) Concatenates the values of string expressions and places separator values between them. The separator is not added at the end of string. The default value of separator is \u0026lsquo;,\u0026rsquo;.\nOnly supported in blink planner.\nBack to top Time Interval and Point Unit Specifiers The following table lists specifiers for time interval and time point units.\nFor Table API, please use _ for spaces (e.g., DAY_TO_HOUR).\nTime Interval Unit\tTime Point Unit MILLENIUM (SQL-only)\tCENTURY (SQL-only)\tYEAR\tYEAR YEAR TO MONTH\tQUARTER\tQUARTER MONTH\tMONTH WEEK\tWEEK DAY\tDAY DAY TO HOUR\tDAY TO MINUTE\tDAY TO SECOND\tHOUR\tHOUR HOUR TO MINUTE\tHOUR TO SECOND\tMINUTE\tMINUTE MINUTE TO SECOND\tSECOND\tSECOND MILLISECOND MICROSECOND DOY (SQL-only)\tDOW (SQL-only)\tSQL_TSI_YEAR (SQL-only) SQL_TSI_QUARTER (SQL-only) SQL_TSI_MONTH (SQL-only) SQL_TSI_WEEK (SQL-only) SQL_TSI_DAY (SQL-only) SQL_TSI_HOUR (SQL-only) SQL_TSI_MINUTE (SQL-only) SQL_TSI_SECOND (SQL-only) Back to top Column Functions The column functions are used to select or deselect table columns.\nSYNTAX\tDESC withColumns(…)\tselect the specified columns withoutColumns(…)\tdeselect the columns specified The detailed syntax is as follows:\ncolumnFunction: withColumns(columnExprs) withoutColumns(columnExprs)\ncolumnExprs: columnExpr [, columnExpr]*\ncolumnExpr: columnRef | columnIndex to columnIndex | columnName to columnName\ncolumnRef: columnName(The field name that exists in the table) | columnIndex(a positive integer starting from 1) The usage of the column function is illustrated in the following table. (Suppose we have a table with 5 columns: (a: Int, b: Long, c: String, d:String, e: String)):\nJava Python Scala Api\tUsage\tDescription withColumns()| select(\u0026ldquo;withColumns()\u0026rdquo;) | select(\u0026quot;\u0026quot;) = select(\u0026ldquo;a, b, c, d, e\u0026rdquo;) all the columns withColumns(m to n) select(\u0026ldquo;withColumns(2 to 4)\u0026rdquo;) = select(\u0026ldquo;b, c, d\u0026rdquo;) columns from m to n withColumns(m, n, k) select(\u0026ldquo;withColumns(1, 3, e)\u0026rdquo;) = select(\u0026ldquo;a, c, e\u0026rdquo;) columns m, n, k withColumns(m, n to k) select(\u0026ldquo;withColumns(1, 3 to 5)\u0026rdquo;) = select(\u0026ldquo;a, c, d ,e\u0026rdquo;) mixing of the above two representation withoutColumns(m to n) select(\u0026ldquo;withoutColumns(2 to 4)\u0026rdquo;) = select(\u0026ldquo;a, e\u0026rdquo;) deselect columns from m to n withoutColumns(m, n, k) select(\u0026ldquo;withoutColumns(1, 3, 5)\u0026rdquo;) = select(\u0026ldquo;b, d\u0026rdquo;) deselect columns m, n, k withoutColumns(m, n to k) select(\u0026ldquo;withoutColumns(1, 3 to 5)\u0026rdquo;) = select(\u0026ldquo;b\u0026rdquo;) mixing of the above two representation The column functions can be used in all places where column fields are expected, such as select, groupBy, orderBy, UDFs etc. e.g.:\nJava Scala Python table .groupBy(\u0026ldquo;withColumns(1 to 3)\u0026rdquo;) .select(\u0026ldquo;withColumns(a to b), myUDAgg(myUDF(withColumns(5 to 20)))\u0026rdquo;) Note Column functions are only used in Table API.\n"},"name":"系统(内置)函数","published":"2020-08-22T00:00:00Z","summary":"System (Built-in) Functions","type":"entry","url":"http://localhost:1313/notes/2020-08-22-system-built-in-functions/"}