{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://flask.pocoo.org\"\u003eFlask\u003c/a\u003e 是小型框架, 它只包含基本服务的核心功能, 其它功能比如数据库访问、Web表单验证和用户认证等都需要以扩展的形式实现。\u003c/p\u003e\n\u003cp\u003eFlask 有两个主要依赖:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e路由\u003c/li\u003e\n\u003cli\u003e调试和Web服务器网关接口\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其子系统由 \u003ca href=\"http://werkzeug.pocoo.org\"\u003eWerkzeug\u003c/a\u003e 提供; 模板系统由 \u003ca href=\"http://jinja.pocoo.org\"\u003eJinja2\u003c/a\u003e 提供。\u003c/p\u003e\n\u003ch2 id=\"使用-virtualenv-虚拟环境\"\u003e使用 virtualenv 虚拟环境\u003c/h2\u003e\n\u003cp\u003e虚拟环境是 Python 解释器的一个私有副本, 在这个环境中可以安装私有包, 而不会影响系统中安装的全局 Python 解释器。\u003c/p\u003e\n\u003cp\u003e虚拟环境可以在系统的 Python 解释器中避免包的混乱的版本的冲突。为每个程序创建虚拟环境可以保证程序只能访问虚拟环境中的包, 从而保证全局解释器的干净整洁, 创建虚拟环境也不需要管理员权限。\u003c/p\u003e\n\u003cp\u003eUbuntu 下虚拟环境的安装:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo apt-get install python-virtualenv\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWindows/CentOS 下虚拟环境的安装:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epip install virtualenv\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如何使用本书的示例代码\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit clone https://github.com/miguelgrinberg/flasky.git\ncd flasky\ngit checkout 1a\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e创建 Python 虚拟环境\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003evirtualenv venv\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003evenv\u003c/code\u003e 是虚拟环境的名字。在使用这个虚拟环境之前需要先激活这个虚拟环境:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# Linux\nsource venv/bin/activate\n\n# Windows\nvenv\\Scripts\\activate\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e激活后命令提示符的前面就有了一个 \u003ccode\u003e(venv)\u003c/code\u003e 的提示, 说明现在处于虚拟环境下。如果还想回到全局的 Python 解释器中, 则使用 \u003ccode\u003edeactivate\u003c/code\u003e 命令。\u003c/p\u003e\n\u003ch2 id=\"使用-pip-安装-python-包\"\u003e使用 pip 安装 Python 包\u003c/h2\u003e\n\u003cp\u003e在使用  virtualenv 命令创建虚拟环境时会自动安装 pip。激活虚拟环境后, pip 所在的路径会被添加进 PATH。\u003c/p\u003e\n\u003cp\u003e在虚拟环境中安装 Flask:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003epip\u003c/span\u003e \u003cspan class=\"n\"\u003einstall\u003c/span\u003e \u003cspan class=\"n\"\u003eFlask\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这\u003cstrong\u003e只\u003c/strong\u003e会在\u003cstrong\u003e虚拟环境\u003c/strong\u003e中安装 Flask, 在全局 Python 环境中是不可见的。要验证在虚拟环境中 Flask 是否正确安装, 可以在\u003cstrong\u003e该命令提示符\u003c/strong\u003e下启动 Python 解释器, 尝试导入 Flask:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e(venv) $ python\n\u0026gt;\u0026gt;\u0026gt; import flask\n\u0026gt;\u0026gt;\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果没有错误提示就说明你已经可以开始第二章了。\u003c/p\u003e\n","text":"简介 Flask 是小型框架, 它只包含基本服务的核心功能, 其它功能比如数据库访问、Web表单验证和用户认证等都需要以扩展的形式实现。\nFlask 有两个主要依赖:\n路由 调试和Web服务器网关接口 其子系统由 Werkzeug 提供; 模板系统由 Jinja2 提供。\n使用 virtualenv 虚拟环境 虚拟环境是 Python 解释器的一个私有副本, 在这个环境中可以安装私有包, 而不会影响系统中安装的全局 Python 解释器。\n虚拟环境可以在系统的 Python 解释器中避免包的混乱的版本的冲突。为每个程序创建虚拟环境可以保证程序只能访问虚拟环境中的包, 从而保证全局解释器的干净整洁, 创建虚拟环境也不需要管理员权限。\nUbuntu 下虚拟环境的安装:\nsudo apt-get install python-virtualenv Windows/CentOS 下虚拟环境的安装:\npip install virtualenv 如何使用本书的示例代码\ngit clone https://github.com/miguelgrinberg/flasky.git cd flasky git checkout 1a 创建 Python 虚拟环境 virtualenv venv venv 是虚拟环境的名字。在使用这个虚拟环境之前需要先激活这个虚拟环境:\n# Linux source venv/bin/activate # Windows venv\\Scripts\\activate 激活后命令提示符的前面就有了一个 (venv) 的提示, 说明现在处于虚拟环境下。如果还想回到全局的 Python 解释器中, 则使用 deactivate 命令。\n使用 pip 安装 Python 包 在使用 virtualenv 命令创建虚拟环境时会自动安装 pip。激活虚拟环境后, pip 所在的路径会被添加进 PATH。\n在虚拟环境中安装 Flask:\npip install Flask 这只会在虚拟环境中安装 Flask, 在全局 Python 环境中是不可见的。要验证在虚拟环境中 Flask 是否正确安装, 可以在该命令提示符下启动 Python 解释器, 尝试导入 Flask:\n(venv) $ python \u0026gt;\u0026gt;\u0026gt; import flask \u0026gt;\u0026gt;\u0026gt; 如果没有错误提示就说明你已经可以开始第二章了。\n"},"name":"Flask 入门 - 安装","published":"2017-01-06T16:16:21Z","summary":"Learning Flask","type":"entry","url":"http://localhost:1313/notes/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%AE%89%E8%A3%85/"}