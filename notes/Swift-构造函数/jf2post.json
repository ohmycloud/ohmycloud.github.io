{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003cp\u003e\u003cstrong\u003e初始化\u003c/strong\u003e(Initilization)是设置类型的实例的操作。它为每个存储属性给定了一个\u003cstrong\u003e初始值\u003c/strong\u003e, 并且可能会牵涉其它准备工作。这个处理之后, 这个实例就准备好了并且可用了。\u003c/p\u003e\n\u003cp\u003e初始化时, 属性的值要么是给定的默认存储值, 要么是根据需要计算得到的值。\u003c/p\u003e\n\u003ch2 id=\"初始化函数的语法\"\u003e初始化函数的语法\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e结构体和类要求在初始化完成后, 它们的存储属性拥有初始值。这个要求解释了为什么你一直给你所有的存储属性设置默认值。如果你还没给你的这些存储属性默认值, 那么编译器就会给你报错并告诉你该类型的属性还没有被准备好使用。在类型上定义一个\u003cstrong\u003e初始化函数\u003c/strong\u003e是另外一种保证在实例被创建之后属性有值的方式。\u003c/p\u003e\n\u003cp\u003e初始化函数的定义和你看过的函数有点不一样, 初始化函数不是以 \u003ccode\u003efunc\u003c/code\u003e关键字开头, 尽管它也是类型中的方法。初始化函数的语法看起来像这样:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eCustomType\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esomeValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSomeType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 这儿是初始化代码\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个通用的语法在结构体、枚举和类之间没什么不同。在上面的例子中, 初始化函数有一个叫做 \u003ccode\u003esomeValue\u003c/code\u003e类型为 \u003cstrong\u003eSomeType\u003c/strong\u003e 的参数。而初始化函数通常有一个或多个参数, 它们也可以含有 0 个 参数。(这时 \u003ccode\u003einit\u003c/code\u003e关键字后面有一组空括号)\u003c/p\u003e\n\u003cp\u003e不像其它方法, 初始化函数不返回值。相反, 初始化函数的任务是给类型的每个存储属性设定上值。\u003c/p\u003e\n\u003ch2 id=\"结构体初始化\"\u003e结构体初始化\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e结构体即可以有\u003cstrong\u003e默认初始化函数\u003c/strong\u003e又可以有\u003cstrong\u003e自定义初始化函数\u003c/strong\u003e。当你使用结构体的时候, 你通常会利用提供好的默认初始化函数, 但是也有其它你会自定义初始化处理的情况。\u003c/p\u003e\n\u003ch2 id=\"结构体的默认初始化函数\"\u003e结构体的默认初始化函数\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e还记得你是怎么获得你的\u003cstrong\u003eTown\u003c/strong\u003e类型的实例的吗？ 你给Town类型的存储属性设置了默认值。你不知道的是你使用了一个由 Swift 自动提供的空的初始化函数。(一个不含参数的初始化函数)。 当你键入像 \u003ccode\u003evar myTown = Town()\u003c/code\u003e , 那么这个语法就会调用空的初始化函数并给新的实例的属性设置上你指定的默认值。\u003c/p\u003e\n\u003cp\u003e另外一种形式的默认初始化函数就是逐个成员初始化函数(memberwise initializer)。逐个成员初始化函数中类型的每个存储属性都有一个参数。 这时, 你不会让编译器根据你指定的默认值来填充新的实例的属性的值。相反, 免费的逐个成员初始化函数会包含所有需要值的存储属性。(我们称之为免费的, 是因为它是 Swift 编译器自动提供的 — 你不需要定义它)。\u003c/p\u003e\n\u003cp\u003e记住, 初始化的一个准则就是给新的实例的所有存储属性设置上值以准备使用。编译器会强制要求你的新的实例中的所有存储属性都有值。如果你没有为你的自定义的结构体提供初始化函数, 你必须通过默认值或逐个成员初始化函数提供必要的值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用逐个成员初始化函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eTown\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003epopulation\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5422\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enumberOfStoplights\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 实例方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eprintTownDescription\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Population: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003epopulation\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e; number of stoplights: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003enumberOfStoplights\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003emyTown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTown\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enumberOfStoplights\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emyTown\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprintTownDescription\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意, Town 的属性 \u003ccode\u003epopulation\u003c/code\u003e 和 \u003ccode\u003enumberOfStoplights\u003c/code\u003e 有默认值。 这些默认值不同于你提供给 \u003cstrong\u003eTown\u003c/strong\u003e 的逐个成员初始化函数的参数值。现在打印出：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ePopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003estoplights\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这些属性的值是怎么改变默认值的呢？\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emyTown\u003c/code\u003e这个实例现在是用免费的逐个成员初始化函数创建的。这个 \u003cstrong\u003eTown\u003c/strong\u003e 类型的所有存储属性列出在初始化函数里面, 它允许你为实例属性指定新的值。就像你看到的, 你传给初始化函数的新值替换掉了默认的值。\u003c/p\u003e\n\u003cp\u003e注意, \u003cstrong\u003eTown\u003c/strong\u003e 的属性名被用作了该初始化函数的外部参数名。Swift 自动地为每个初始化函数提供默认的外部参数名, 每个参数一个。这个约定很重要, 因为 Swift 中所有的初始化函数都含有相同的名字: \u003ccode\u003einit\u003c/code\u003e。因此, init 这个函数名不能用于识别应该调用哪个指定初始化函数。参数的名字加上参数的类型才能帮助编译器区分不同的初始化函数, 以至于它能知道该调用哪个初始化函数。\u003c/p\u003e\n\u003cp\u003e默认的结构体的逐个成员初始化函数是有用的, 因为 Swift 自动为你提供了它们。你免费获得了它们。结构体的这个优点让结构体特别吸引人。然而, 通常你想自定义你的类型的初始化函数。这就轮到自定义初始化函数了。\u003c/p\u003e\n\u003ch2 id=\"为结构体自定义初始化函数\"\u003e为结构体自定义初始化函数\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e现在轮到你为 \u003cstrong\u003eTown\u003c/strong\u003e 类型写你自己的初始化函数了。自定义的初始化函数很强大, 而越强大则责任越多。当你写了自己的初始化函数时, Swift 就不会给你免费的初始化函数了(和默认的逐个成员初始化函数告别把)。你要为自己确保实例的所有属性都有给定的合适值负责。\u003c/p\u003e\n\u003cp\u003e现在打扫下房间, 把属性的默认值移除掉(默认值只是告诉你每个实例的属性都要有值, 现在该我们自己动手实现了)。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eTown\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003epopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enumberOfStoplights\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eprintTownDescription\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Population: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003epopulation\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e; number of stoplights: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003enumberOfStoplights\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e; region: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在是时候创建你的自定义初始化函数了。之后, 你会从这个类型中定义的其它初始化函数调用这个初始化函数。现在, 为你的 \u003cstrong\u003eTown\u003c/strong\u003e 类型添加如下初始化函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 添加一个逐个成员初始化函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enumberOfStoplights\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estoplights\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eregion\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eregion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epopulation\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epopulation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003enumberOfStoplights\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estoplights\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003einit(region:population:stoplights:)\u003c/strong\u003e 方法接收了3个参数, 每一个参数都是为 \u003cstrong\u003eTown\u003c/strong\u003e 类型中的存储属性设置新值。你接收初始化函数的参数的值并把它们传递给类型实际的属性。例如, 传递给初始化函数的 \u003ccode\u003eregion\u003c/code\u003e参数的值被设置为 \u003ccode\u003eregion\u003c/code\u003e属性的值。因为初始化函数中的参数名和属性的名字相同, 你需要通过 \u003ccode\u003eself\u003c/code\u003e显式地访问该属性。\u003ccode\u003enumberOfStoplights\u003c/code\u003e属性就没有这个问题, 所以你仅仅把初始化函数的 \u003ccode\u003estoplights\u003c/code\u003e参数的值设置给 \u003ccode\u003enumberOfStoplights\u003c/code\u003e属性。\u003c/p\u003e\n\u003cp\u003e注意, 你给 \u003ccode\u003eregion\u003c/code\u003e 属性设置了值, 即使它被声明为一个常量。Swift编译器允许你在初始化期间的某个点那儿初始化一个常量属性。记住, 初始化的目的是为了保证类型的属性在初始化完成后都有值。\u003c/p\u003e\n\u003cp\u003e之前编译器给你提供的免费逐个成员初始化函数的参数使用是实际的属性名 \u003ccode\u003enumberOfStoplights\u003c/code\u003e。在 \u003cstrong\u003eTown\u003c/strong\u003e 这个初始化函数中, 你把参数名缩短为 \u003ccode\u003estoplights\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003emyTown\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTown\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;West\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estoplights\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"初始化函数的代理\"\u003e初始化函数的代理\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e你可以在同一个类型中定义一个初始化函数来调用其它初始化函数。这个过程叫做初始化函数的代理。它通常用于为创建类的实例时提供多个路径。\u003c/p\u003e\n\u003cp\u003e在值类型中(例如枚举和结构体), 初始化函数代理相对直接。因为值类型不支持继承, 初始化函数代理只涉及调用类型定义的其它初始化函数。对于类来说就有点复杂了。你很快就会看到。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estoplights\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eregion\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eregion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epopulation\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epopulation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003enumberOfStoplights\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estoplights\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 初始化函数代理(它自己做不了, 但是通过别人来完成初始化)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estoplights\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;N/A\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003epopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estoplights\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estoplights\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你在\u003ccode\u003eself\u003c/code\u003e上调用了其它初始化函数。你传递了 population 和 stoplights 参数, 但是没有 region 参数, 所以你必须提供自己 region 值, 这儿, 你指定了字符串\u0026quot;N/A\u0026quot;.\u003c/p\u003e\n\u003cp\u003e初始化函数代理能帮助减少代码的重复。\u003c/p\u003e\n\u003cp\u003e这就是为什么我们说初始化函数代理“定义路径”。\u003c/p\u003e\n\u003cp\u003e因为你定义了你自己的逐个成员初始化函数, 编译器不会再给你提供免费的初始化函数。这不是有所限制, 它甚至是一种优点。例如, 你可能想使用这个新的初始化函数, 如果给定的 town 没有 region 信息可以获得时。那样, 你会使用你创建的新的带有参数的初始化函数为 population 和 stoplights 设置对应的属性而给 \u003ccode\u003eregion\u003c/code\u003e一个占位符值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用初始化函数代理\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003emyTown\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTown\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estoplights\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emyTown\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprintTownDescription\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"类的初始化\"\u003e类的初始化\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e类的继承给初始化增添了某些复杂性。\u003c/p\u003e\n\u003cp\u003e特别的地方是, 类添加了指定初始化函数和便利初始化函数的概念。类中的初始化函数要么是指定初始化函数, 要么是便利初始化函数。指定初始化函数负责确保实例的所有属性在初始化完成之前都有值, 因此让实例可以准备好被使用。\u003c/p\u003e\n\u003cp\u003e便利初始化函数是辅助指定初始化函数的。它们通过调用类的指定初始化函数来补充指定初始化函数。便利初始化函数的角色通常是创建特定用途的类的实例。\u003c/p\u003e\n\u003ch2 id=\"类的默认初始化函数\"\u003e类的默认初始化函数\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e如果你为所有属性提供默认值并且不写你自己的初始化函数, 那么类会获得一个\u003cstrong\u003e默认的\u003c/strong\u003e, \u003ccode\u003e空\u003c/code\u003e的初始化函数。类不会像结构体那样获得一个免费的逐个成员初始化函数。这解释了之前你为什么给类设置默认值: 它允许你利用免费的\u003ccode\u003e空初始化函数\u003c/code\u003e。因此, 你能获得 \u003cstrong\u003eZombie\u003c/strong\u003e 类的实例, 像这样: \u003ccode\u003elet fredTheZombie = Zombie()\u003c/code\u003e, 空的圆括号表明你正在使用默认的类初始化函数。\u003c/p\u003e\n\u003ch2 id=\"初始化和类的继承\"\u003e初始化和类的继承\u003c/h2\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMonster\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTown\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 如果不设置初始值, 就得指定变量的类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTown\u003c/span\u003e\u003cspan class=\"p\"\u003e?,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etown\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e             \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个初始化函数有两个参数:  一个是 \u003cstrong\u003eTown\u003c/strong\u003e类型的 optional 实例, 另外一个是 monster 的名字。在初始化函数的实现中, 这些参数的值被赋值给类的属性。 再一次, 注意初始化函数中的参数 \u003ccode\u003etown\u003c/code\u003e 于类的属性名\u003cstrong\u003etown\u003c/strong\u003e 匹配, 所以你必须通过 \u003ccode\u003eself\u003c/code\u003e访问该属性并给它赋值。但是你不必通过 \u003ccode\u003eself\u003c/code\u003e访问 \u003ccode\u003ename\u003c/code\u003e属性, 因为初始化函数的参数有一个不同的名字。\u003c/p\u003e\n\u003ch2 id=\"自动初始化函数继承\"\u003e自动初始化函数继承\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e类通常不继承它们的父类的初始化函数。Swift 的这个特征的目的是阻止子类无心地提供一个初始化函数但是却没有为子类的所有属性设置上值, 因为子类中常常添加父类中不存在的额外属性。要求子类拥有自己的初始化函数帮助防止使用不彻底的初始化函数进行部分初始化。\u003c/p\u003e\n\u003cp\u003e然而, 存在类确实自动继承它的父类的初始化函数的情况。如果你的子类为添加的所有新的属性提供了默认值, 那么存在两个类会继承它的父类的初始化函数的场景。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果子类没有定义任何指定初始化函数, 它会继承它的父类的指定初始化函数\u003c/li\u003e\n\u003cli\u003e如果子类实现了父类所有的指定初始化函数 — 不管是显式的还是通过继承的, 它会继承它的父类的所有便利初始化函数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e你的\u003cstrong\u003eZombie\u003c/strong\u003e 类型就是适应于第一个场景。它继承了 \u003cstrong\u003eMonster\u003c/strong\u003e类型的唯一的指定初始化函数, 因为它为它添加的所有属性提供了默认值并且它没有定义它自己的指定初始化函数。这个初始化函数的签名是 \u003cem\u003einit(town:monsterName:)\u003c/em\u003e。还有, 因为 \u003cstrong\u003eZombie\u003c/strong\u003e 类型继承了一个初始化函数, 编译器不再提供你之前使用过的免费初始化函数。\u003c/p\u003e\n\u003cp\u003e因此, 从编译器的角度来看, \u003cstrong\u003eZombie\u003c/strong\u003e 类没有一个空的初始化函数可用。并且, 仅此作答, \u003cstrong\u003eZombie\u003c/strong\u003e 类的初始化函数缺少 \u003cem\u003etown\u003c/em\u003e 这个参数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eZombie\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eMonster\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ewalksWithLimp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e// final 用来防止子类重写父类的方法, 僵尸的行为都是一致的。子类不能改写\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003efinal\u003c/span\u003e  \u003cspan class=\"kr\"\u003eoverride\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eterrorizeTown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003echangePopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 僵尸一出来就吃掉 10 个人, town 属性继承自父类 Monster\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eterrorizeTown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e// super 关键字专门用于继承, 所以枚举和结构体中没有。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003echangeName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efredTheZombie\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eZombie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emyTown\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Fred\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在, 当你创建 \u003cstrong\u003eMonster\u003c/strong\u003e 或 \u003cstrong\u003eZombie\u003c/strong\u003e 类型的一个实例时, 你给该实例的 town 和 name 属性赋上值。\u003c/p\u003e\n\u003ch2 id=\"类的指定初始化函数\"\u003e类的指定初始化函数\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e类使用指定初始化函数作为它们的主初始化函数。作为这个角色的一部分, 指定初始化函数负责确保在初始化结束之前该类的属性都被赋了值。如果类拥有一个父类, 那么它的指定初始化函数必须调用它的父类的指定初始化函数。\u003c/p\u003e\n\u003cp\u003e你已经为 \u003cstrong\u003eMonster\u003c/strong\u003e 类写了一个指定初始化函数。 回忆下前面:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTown\u003c/span\u003e\u003cspan class=\"p\"\u003e?,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etown\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e指定初始化函数是未经装饰的, 意思是指定初始化函数的 \u003cstrong\u003einit\u003c/strong\u003e 关键字前面没有特殊的关键字。这个语法区分了指定初始化函数和便利初始化函数, 便利初始化函数的 \u003cstrong\u003einit\u003c/strong\u003e 关键字前面使用了关键字 \u003ccode\u003econvenience\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMonster\u003c/strong\u003e 类的初始化函数保证了在初始化结束前它的所有属性都给定了值。 目前, \u003cstrong\u003eZombie\u003c/strong\u003e 类型为它的所有属性(除了继承自 \u003cstrong\u003eMonster\u003c/strong\u003e 的那些属性)给定了默认值。因此, 你为 \u003cstrong\u003eMonster\u003c/strong\u003e 类定义的初始化函数用在 \u003cstrong\u003eZombie\u003c/strong\u003e 里面也工作的很好。然而, 如果 \u003cstrong\u003eZombie\u003c/strong\u003e 定义了它自己的初始化函数的话会更好, 以至于你能自定义它的初始化函数。\u003c/p\u003e\n\u003cp\u003e现在移除 \u003cstrong\u003eZombie\u003c/strong\u003e 类的属性的默认值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eZombie\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eMonster\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ewalksWithLimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kr\"\u003eset\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eisFallingApart\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e// final 用来防止子类重写父类的方法, 僵尸的行为都是一致的。子类不能改写\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003efinal\u003c/span\u003e  \u003cspan class=\"kr\"\u003eoverride\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eterrorizeTown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003echangePopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 僵尸一出来就吃掉 10 个人, town 属性继承自父类 Monster\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eterrorizeTown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e// super 关键字专门用于继承, 所以枚举和结构体中没有。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003echangeName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e移除掉这些默认值触发了编译器错误: 类 \u003cstrong\u003eZombie\u003c/strong\u003e 没有初始化函数。如果没有赋值默认的值, \u003cstrong\u003eZombie\u003c/strong\u003e 类需要一个初始化函数来在初始化完成前给它的属性赋上值。\u003c/p\u003e\n\u003cp\u003e为 \u003cstrong\u003eZombie\u003c/strong\u003e 类添加一个新的初始化函数来解决这个问题。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eZombie\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eMonster\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003eoverride\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003espookyNoise\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Brains...\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ewalksWithLimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kr\"\u003eset\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eisFallingApart\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efallingApart\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTown\u003c/span\u003e\u003cspan class=\"p\"\u003e?,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elimp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eisFallingApart\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efallingApart\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003efinal\u003c/span\u003e \u003cspan class=\"kr\"\u003eoverride\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eterrorizeTown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eisFallingApart\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003echangePopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eterrorizeTown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     \u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你的新的初始化函数消除了错误, 因为你现在保证了 \u003cstrong\u003eZombie\u003c/strong\u003e 的属性在初始化结尾时都有值了。 这里你添加了两部分。首先, 新的初始化函数通过 \u003cstrong\u003elimp\u003c/strong\u003e 和 \u003cstrong\u003efallingApart\u003c/strong\u003e 参数给 \u003ccode\u003ewalksWithLimp\u003c/code\u003e 和 \u003ccode\u003eisFallingApart\u003c/code\u003e属性设置了值。这俩个属性是\u003cstrong\u003eZombie\u003c/strong\u003e 类所特有的, 所以指定初始化函数使用合适的值初始化了它们。\u003c/p\u003e\n\u003cp\u003e其次, 你调用了\u003cstrong\u003eZombie\u003c/strong\u003e 的父类的指定初始化函数。就像第 15 章那样, \u003cem\u003esuper\u003c/em\u003e指的是子类的父类。因此, 语法 \u003ccode\u003esuper.init(town: town, monsterName: monsterName)\u003c/code\u003e把\u003cstrong\u003eZombie\u003c/strong\u003e 类的初始化函数中的 \u003cstrong\u003etown\u003c/strong\u003e 和 \u003cstrong\u003emonsterName\u003c/strong\u003e 参数的值传递给 \u003cstrong\u003eMonster\u003c/strong\u003e 类的指定初始化函数。这样做就调用了\u003cstrong\u003eMonster\u003c/strong\u003e 类的初始化函数, 它会确保 \u003cstrong\u003eZombie\u003c/strong\u003e 中的 \u003ccode\u003etown\u003c/code\u003e 和 \u003ccode\u003ename\u003c/code\u003e 属性被设置上值。查看图17.3：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://upload-images.jianshu.io/upload_images/326727-e26a55ec457e81bb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e你可能想知道为什么在最后调用父类的初始化函数。因为 \u003cstrong\u003eZombie\u003c/strong\u003e 的初始化函数是 \u003cstrong\u003eZombie\u003c/strong\u003e 类的指定初始化函数, 它负责初始化它所引入的所有属性。这些属性被赋值之后, 子类的指定初始化函数负责调用它的父类的初始化函数以使父类能初始化它的属性。(先做好自己的, 再去要求别人。)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// let fredTheZombie = Zombie(town: myTown, monsterName: \u0026#34;Fred\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 替换为\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efredTheZombie\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eZombie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003efallingApart\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emyzTown\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Fred\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"类的便利初始化函数\"\u003e类的便利初始化函数\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e不像指定初始化函数, 便利初始化函数并不负责确保类的所有属性都有值。相反, 它们仅仅处理它们被定义去做的那部分工作, 然后把信息传递给其它便利初始化函数或指定初始化函数。所有的便利初始化函数在同一个类中调用其它的初始化函数。最终, 便利初始化函数必须调用到类的指定初始化函数那儿。给定类中便利初始化函数和指定初始化函数的关系:类的存储属性接收初始化值, 定义一个路径。\u003c/p\u003e\n\u003cp\u003e在 \u003cstrong\u003eZombie\u003c/strong\u003e 类型上弄一个便利初始化函数。它会省略 town 和 monsterName 参数, 意思是这个初始化函数的调用者将会只需要为这个初始化函数的参数提供参数负责。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用便利初始化函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efallingApart\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTown\u003c/span\u003e\u003cspan class=\"p\"\u003e?,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elimp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eisFallingApart\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efallingApart\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econvenience\u003c/span\u003e \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efallingApart\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elimp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efallingApart\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003efallingApart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Fred\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;This zombie has a bad knee.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003efinal\u003c/span\u003e \u003cspan class=\"kr\"\u003eoverride\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eterrorizeTown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eisFallingApart\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003echangePopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你使用 \u003ccode\u003econvenience\u003c/code\u003e关键字把一个初始化函数标记为便利初始化函数。这个关键字告诉编译器该初始化函数将会需要代理给该类的其它初始化函数, 最终调用一个指定初始化函数。这次调用之后, 该类的实例将会能够使用。\u003c/p\u003e\n\u003cp\u003e然而, 该便利初始化函数在 \u003cstrong\u003eZombie\u003c/strong\u003e 类上调用指定初始化函数。它传递形参接收到的值: \u003ccode\u003elimp\u003c/code\u003e和\u003ccode\u003efallingApart\u003c/code\u003e。 对于便利初始化函数没有接收到的形参的值, \u003ccode\u003etown\u003c/code\u003e和 \u003ccode\u003emonsterName\u003c/code\u003e, 你传递了一个 “nil” 和 \u0026ldquo;Fred\u0026rdquo; 给 \u003cstrong\u003eZombie\u003c/strong\u003e 的指定初始化函数。\u003c/p\u003e\n\u003cp\u003e一旦便利初始化函数调用了指定初始化函数, 那么该类的实例就完全准备好使用了。因此你可以检查实例的 walksWithLimp 属性的值。如果你尝试在调用 \u003cstrong\u003eZombie\u003c/strong\u003e 的指定初始化函数之前检查这样做, 那么编译器就会报错:  在 \u003ccode\u003eself.init\u003c/code\u003e 被调用之前, 代理初始化函数中使用了 \u003ccode\u003eself\u003c/code\u003e。这个错误告诉你代理初始化函数正尝试使用 \u003ccode\u003eself\u003c/code\u003e, 而它需要访问 \u003ccode\u003ewalksWithLimp\u003c/code\u003e属性, 在它被准备好使用之前。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://upload-images.jianshu.io/upload_images/326727-f5c4800692cf026a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e你现在可以使用这个便利初始化函数创建\u003cstrong\u003eZombie\u003c/strong\u003e 类型的实例。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003econvenientZombie\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eZombie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efailingApart\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003efasle\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"类的必须的初始化函数\"\u003e类的必须的初始化函数\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e类可以要求它的子类提供指定的初始化函数。例如, 假如你想要所有的 \u003cstrong\u003eMonster\u003c/strong\u003e 子类提供 monster 的 name 值和 town 值(或者 nil, 如果没有找到一个 town 的话)。要这样的话, 使用 \u003ccode\u003erequired\u003c/code\u003e关键字来标记一个初始化函数以让给类型的子类\u003cstrong\u003e必须\u003c/strong\u003e提供指定的初始化函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使 town 和 monsterName 是必须的\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMonster\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003evictimPool\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     \u003cspan class=\"kr\"\u003erequired\u003c/span\u003e \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTown\u003c/span\u003e\u003cspan class=\"p\"\u003e?,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etown\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eterrorizeTown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eMonster\u003c/strong\u003e 类的唯一指定初始化函数现在是必须的。子类必须实现这个初始化函数。\u003c/p\u003e\n\u003cp\u003e这样的话子类中会报错, 因为你还未在\u003cstrong\u003eZombie\u003c/strong\u003e子类中实现这个新要求的初始化函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 在 Zombie.swift 中添加必须的初始化函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econvenience\u003c/span\u003e \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efallingApart\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elimp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efallingApart\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003efallingApart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Fred\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;This zombie has a bad knee.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003erequired\u003c/span\u003e \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTown\u003c/span\u003e\u003cspan class=\"p\"\u003e?,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eflase\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eisFallingApart\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003efinal\u003c/span\u003e \u003cspan class=\"kr\"\u003eoverride\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eterrorizeTown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eisFallingApart\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003echangePopulation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eterrorizeTown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e要实现一个父类的必须要求的初始化函数, 在子类的初始化函数前置一个 \u003ccode\u003erequired\u003c/code\u003e关键字。 不像其它函数那样, 如果是继承自你的父类必须重写, 你不必用 \u003ccode\u003eoverride\u003c/code\u003e关键字标记初始化函数。它由 \u003ccode\u003erequired\u003c/code\u003e关键字隐式的标记了。\u003c/p\u003e\n\u003cp\u003e你的这个 \u003ccode\u003erequired\u003c/code\u003e初始化函数的实现让它成为 \u003cstrong\u003eZombie\u003c/strong\u003e 类的一个指定初始化函数。为什么？ 你问？ 好问题。\u003c/p\u003e\n\u003cp\u003e回想指定初始化函数负责初始化类型的属性,还负责向上代理给父类的初始化函数。这个实现正是做了那两件事情。你因此能够使用这个初始化函数来实例化\u003cstrong\u003eZombie\u003c/strong\u003e 类。\u003c/p\u003e\n\u003cp\u003e这个时候, 你可能想知道, \u003cstrong\u003eZombie\u003c/strong\u003e 有多少个指定初始化函数？答案是两个。\u003cstrong\u003einit(limp:fallingApart:town:monsterName:)\u003c/strong\u003e 和 \u003cstrong\u003einit(town:monsterName)\u003c/strong\u003e。有多个指定初始化函数是完全可以的, 并没有什么不寻常。\u003c/p\u003e\n\u003ch2 id=\"deinitialization\"\u003eDeinitialization\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e反初始化是从内存中移除类的实例的部分处理, 当它们不再需要时。从概念上讲, 它是初始化的对立面。反初始化被限于引用类型。这对值类型不可用, 因为当它们从作用域中移除后就从内存中移除了。\u003c/p\u003e\n\u003cp\u003e在 Swift 中, 反初始化函数在实例被移出内存前被立即调用。在实例被释放内存之前它提供了一个机会用于做任何最后的维护。\u003c/p\u003e\n\u003cp\u003e一个类只有一个反初始化函数。反初始化函数以\u003ccode\u003einit\u003c/code\u003e关键字开头, 不接收任何参数。让我们看一个例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003erequired\u003c/span\u003e \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTown\u003c/span\u003e\u003cspan class=\"p\"\u003e?,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eisFallingApart\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etown\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emonsterName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003echangeName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewalksWithLimp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003edeinit\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Zombie named \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e is no longer with us.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意反初始化函数访问了\u003cstrong\u003eZombie\u003c/strong\u003e 的name 属性。 反初始化函数可以访问到实例的全部属性和方法。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003efredTheZombie\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"初始化(Initilization)是设置类型的实例的操作。它为每个存储属性给定了一个初始值, 并且可能会牵涉其它准备工作。这个处理之后, 这个实例就准备好了并且可用了。\n初始化时, 属性的值要么是给定的默认存储值, 要么是根据需要计算得到的值。\n初始化函数的语法 结构体和类要求在初始化完成后, 它们的存储属性拥有初始值。这个要求解释了为什么你一直给你所有的存储属性设置默认值。如果你还没给你的这些存储属性默认值, 那么编译器就会给你报错并告诉你该类型的属性还没有被准备好使用。在类型上定义一个初始化函数是另外一种保证在实例被创建之后属性有值的方式。\n初始化函数的定义和你看过的函数有点不一样, 初始化函数不是以 func关键字开头, 尽管它也是类型中的方法。初始化函数的语法看起来像这样:\nstruct CustomType { init(someValue: SomeType) { // 这儿是初始化代码 } } 这个通用的语法在结构体、枚举和类之间没什么不同。在上面的例子中, 初始化函数有一个叫做 someValue类型为 SomeType 的参数。而初始化函数通常有一个或多个参数, 它们也可以含有 0 个 参数。(这时 init关键字后面有一组空括号)\n不像其它方法, 初始化函数不返回值。相反, 初始化函数的任务是给类型的每个存储属性设定上值。\n结构体初始化 结构体即可以有默认初始化函数又可以有自定义初始化函数。当你使用结构体的时候, 你通常会利用提供好的默认初始化函数, 但是也有其它你会自定义初始化处理的情况。\n结构体的默认初始化函数 还记得你是怎么获得你的Town类型的实例的吗？ 你给Town类型的存储属性设置了默认值。你不知道的是你使用了一个由 Swift 自动提供的空的初始化函数。(一个不含参数的初始化函数)。 当你键入像 var myTown = Town() , 那么这个语法就会调用空的初始化函数并给新的实例的属性设置上你指定的默认值。\n另外一种形式的默认初始化函数就是逐个成员初始化函数(memberwise initializer)。逐个成员初始化函数中类型的每个存储属性都有一个参数。 这时, 你不会让编译器根据你指定的默认值来填充新的实例的属性的值。相反, 免费的逐个成员初始化函数会包含所有需要值的存储属性。(我们称之为免费的, 是因为它是 Swift 编译器自动提供的 — 你不需要定义它)。\n记住, 初始化的一个准则就是给新的实例的所有存储属性设置上值以准备使用。编译器会强制要求你的新的实例中的所有存储属性都有值。如果你没有为你的自定义的结构体提供初始化函数, 你必须通过默认值或逐个成员初始化函数提供必要的值。\n// 使用逐个成员初始化函数 struct Town { var population = 5422 var numberOfStoplights = 4 // 实例方法 func printTownDescription() { print(\u0026#34;Population: \\(population); number of stoplights: \\(numberOfStoplights)\u0026#34;) } } var myTown() = Town(population: 10000, numberOfStoplights: 6) myTown.printTownDescription() 注意, Town 的属性 population 和 numberOfStoplights 有默认值。 这些默认值不同于你提供给 Town 的逐个成员初始化函数的参数值。现在打印出：\nPopulation: 10000; number of stoplights: 6 这些属性的值是怎么改变默认值的呢？\nmyTown这个实例现在是用免费的逐个成员初始化函数创建的。这个 Town 类型的所有存储属性列出在初始化函数里面, 它允许你为实例属性指定新的值。就像你看到的, 你传给初始化函数的新值替换掉了默认的值。\n注意, Town 的属性名被用作了该初始化函数的外部参数名。Swift 自动地为每个初始化函数提供默认的外部参数名, 每个参数一个。这个约定很重要, 因为 Swift 中所有的初始化函数都含有相同的名字: init。因此, init 这个函数名不能用于识别应该调用哪个指定初始化函数。参数的名字加上参数的类型才能帮助编译器区分不同的初始化函数, 以至于它能知道该调用哪个初始化函数。\n默认的结构体的逐个成员初始化函数是有用的, 因为 Swift 自动为你提供了它们。你免费获得了它们。结构体的这个优点让结构体特别吸引人。然而, 通常你想自定义你的类型的初始化函数。这就轮到自定义初始化函数了。\n为结构体自定义初始化函数 现在轮到你为 Town 类型写你自己的初始化函数了。自定义的初始化函数很强大, 而越强大则责任越多。当你写了自己的初始化函数时, Swift 就不会给你免费的初始化函数了(和默认的逐个成员初始化函数告别把)。你要为自己确保实例的所有属性都有给定的合适值负责。\n现在打扫下房间, 把属性的默认值移除掉(默认值只是告诉你每个实例的属性都要有值, 现在该我们自己动手实现了)。\nstruct Town { let region: String var population: Int var numberOfStoplights func printTownDescription() { print(\u0026#34;Population: \\(population); number of stoplights: \\(numberOfStoplights); region: \\(region)\u0026#34;) } } 现在是时候创建你的自定义初始化函数了。之后, 你会从这个类型中定义的其它初始化函数调用这个初始化函数。现在, 为你的 Town 类型添加如下初始化函数。\n// 添加一个逐个成员初始化函数 ... var numberOfStoplights: Int init(region: String, population: Int, stoplights: Int) { self.region = region self.population = population numberOfStoplights = stoplights } init(region:population:stoplights:) 方法接收了3个参数, 每一个参数都是为 Town 类型中的存储属性设置新值。你接收初始化函数的参数的值并把它们传递给类型实际的属性。例如, 传递给初始化函数的 region参数的值被设置为 region属性的值。因为初始化函数中的参数名和属性的名字相同, 你需要通过 self显式地访问该属性。numberOfStoplights属性就没有这个问题, 所以你仅仅把初始化函数的 stoplights参数的值设置给 numberOfStoplights属性。\n注意, 你给 region 属性设置了值, 即使它被声明为一个常量。Swift编译器允许你在初始化期间的某个点那儿初始化一个常量属性。记住, 初始化的目的是为了保证类型的属性在初始化完成后都有值。\n之前编译器给你提供的免费逐个成员初始化函数的参数使用是实际的属性名 numberOfStoplights。在 Town 这个初始化函数中, 你把参数名缩短为 stoplights。\nvar myTown = Town(region: \u0026#34;West\u0026#34;, population: 10000, stoplights: 6) 初始化函数的代理 你可以在同一个类型中定义一个初始化函数来调用其它初始化函数。这个过程叫做初始化函数的代理。它通常用于为创建类的实例时提供多个路径。\n在值类型中(例如枚举和结构体), 初始化函数代理相对直接。因为值类型不支持继承, 初始化函数代理只涉及调用类型定义的其它初始化函数。对于类来说就有点复杂了。你很快就会看到。\ninit(region: String, population: Int, stoplights: Int) { self.region = region self.population = population numberOfStoplights = stoplights } // 初始化函数代理(它自己做不了, 但是通过别人来完成初始化) init(population: Int, stoplights: Int) { self.init(region: \u0026#34;N/A\u0026#34;, population: population, stoplights: stoplights) } 你在self上调用了其它初始化函数。你传递了 population 和 stoplights 参数, 但是没有 region 参数, 所以你必须提供自己 region 值, 这儿, 你指定了字符串\u0026quot;N/A\u0026quot;.\n初始化函数代理能帮助减少代码的重复。\n这就是为什么我们说初始化函数代理“定义路径”。\n因为你定义了你自己的逐个成员初始化函数, 编译器不会再给你提供免费的初始化函数。这不是有所限制, 它甚至是一种优点。例如, 你可能想使用这个新的初始化函数, 如果给定的 town 没有 region 信息可以获得时。那样, 你会使用你创建的新的带有参数的初始化函数为 population 和 stoplights 设置对应的属性而给 region一个占位符值。\n// 使用初始化函数代理 var myTown = Town(population: 10000, stoplights: 6) myTown.printTownDescription() 类的初始化 类的继承给初始化增添了某些复杂性。\n特别的地方是, 类添加了指定初始化函数和便利初始化函数的概念。类中的初始化函数要么是指定初始化函数, 要么是便利初始化函数。指定初始化函数负责确保实例的所有属性在初始化完成之前都有值, 因此让实例可以准备好被使用。\n便利初始化函数是辅助指定初始化函数的。它们通过调用类的指定初始化函数来补充指定初始化函数。便利初始化函数的角色通常是创建特定用途的类的实例。\n类的默认初始化函数 如果你为所有属性提供默认值并且不写你自己的初始化函数, 那么类会获得一个默认的, 空的初始化函数。类不会像结构体那样获得一个免费的逐个成员初始化函数。这解释了之前你为什么给类设置默认值: 它允许你利用免费的空初始化函数。因此, 你能获得 Zombie 类的实例, 像这样: let fredTheZombie = Zombie(), 空的圆括号表明你正在使用默认的类初始化函数。\n初始化和类的继承 class Monster { var town: Town? var name: String // 如果不设置初始值, 就得指定变量的类型 init(town: Town?, monsterName: String) { self.town = town name = monsterName } } 这个初始化函数有两个参数: 一个是 Town类型的 optional 实例, 另外一个是 monster 的名字。在初始化函数的实现中, 这些参数的值被赋值给类的属性。 再一次, 注意初始化函数中的参数 town 于类的属性名town 匹配, 所以你必须通过 self访问该属性并给它赋值。但是你不必通过 self访问 name属性, 因为初始化函数的参数有一个不同的名字。\n自动初始化函数继承 类通常不继承它们的父类的初始化函数。Swift 的这个特征的目的是阻止子类无心地提供一个初始化函数但是却没有为子类的所有属性设置上值, 因为子类中常常添加父类中不存在的额外属性。要求子类拥有自己的初始化函数帮助防止使用不彻底的初始化函数进行部分初始化。\n然而, 存在类确实自动继承它的父类的初始化函数的情况。如果你的子类为添加的所有新的属性提供了默认值, 那么存在两个类会继承它的父类的初始化函数的场景。\n如果子类没有定义任何指定初始化函数, 它会继承它的父类的指定初始化函数 如果子类实现了父类所有的指定初始化函数 — 不管是显式的还是通过继承的, 它会继承它的父类的所有便利初始化函数。 你的Zombie 类型就是适应于第一个场景。它继承了 Monster类型的唯一的指定初始化函数, 因为它为它添加的所有属性提供了默认值并且它没有定义它自己的指定初始化函数。这个初始化函数的签名是 init(town:monsterName:)。还有, 因为 Zombie 类型继承了一个初始化函数, 编译器不再提供你之前使用过的免费初始化函数。\n因此, 从编译器的角度来看, Zombie 类没有一个空的初始化函数可用。并且, 仅此作答, Zombie 类的初始化函数缺少 town 这个参数。\nclass Zombie: Monster { var walksWithLimp = true // final 用来防止子类重写父类的方法, 僵尸的行为都是一致的。子类不能改写 final override func terrorizeTown() { town?.changePopulation(-10) // 僵尸一出来就吃掉 10 个人, town 属性继承自父类 Monster super.terrorizeTown() // super 关键字专门用于继承, 所以枚举和结构体中没有。 } func changeName(name: String, walksWithLimp: Bool) { self.name = name self.walksWithLimp = walksWithLimp } } let fredTheZombie = Zombie(town: myTown, monsterName: \u0026#34;Fred\u0026#34;) 现在, 当你创建 Monster 或 Zombie 类型的一个实例时, 你给该实例的 town 和 name 属性赋上值。\n类的指定初始化函数 类使用指定初始化函数作为它们的主初始化函数。作为这个角色的一部分, 指定初始化函数负责确保在初始化结束之前该类的属性都被赋了值。如果类拥有一个父类, 那么它的指定初始化函数必须调用它的父类的指定初始化函数。\n你已经为 Monster 类写了一个指定初始化函数。 回忆下前面:\ninit(town: Town?, monsterName: String) { self.town = town name = monsterName } 指定初始化函数是未经装饰的, 意思是指定初始化函数的 init 关键字前面没有特殊的关键字。这个语法区分了指定初始化函数和便利初始化函数, 便利初始化函数的 init 关键字前面使用了关键字 convenience。\nMonster 类的初始化函数保证了在初始化结束前它的所有属性都给定了值。 目前, Zombie 类型为它的所有属性(除了继承自 Monster 的那些属性)给定了默认值。因此, 你为 Monster 类定义的初始化函数用在 Zombie 里面也工作的很好。然而, 如果 Zombie 定义了它自己的初始化函数的话会更好, 以至于你能自定义它的初始化函数。\n现在移除 Zombie 类的属性的默认值。\nclass Zombie: Monster { var walksWithLimp: Bool private(set) var isFallingApart: Bool // final 用来防止子类重写父类的方法, 僵尸的行为都是一致的。子类不能改写 final override func terrorizeTown() { town?.changePopulation(-10) // 僵尸一出来就吃掉 10 个人, town 属性继承自父类 Monster super.terrorizeTown() // super 关键字专门用于继承, 所以枚举和结构体中没有。 } func changeName(name: String, walksWithLimp: Bool) { self.name = name self.walksWithLimp = walksWithLimp } } 移除掉这些默认值触发了编译器错误: 类 Zombie 没有初始化函数。如果没有赋值默认的值, Zombie 类需要一个初始化函数来在初始化完成前给它的属性赋上值。\n为 Zombie 类添加一个新的初始化函数来解决这个问题。\nclass Zombie: Monster { override class var spookyNoise: String { return \u0026#34;Brains...\u0026#34; } var walksWithLimp: Bool private(set) var isFallingApart: Bool init(limp: Bool, fallingApart: Bool, town: Town?, monsterName: String) { walksWithLimp = limp isFallingApart = fallingApart super.init(town: town, monsterName: monsterName) } final override func terrorizeTown() { if !isFallingApart { town?.changePopulation(-10) } super.terrorizeTown() } } 你的新的初始化函数消除了错误, 因为你现在保证了 Zombie 的属性在初始化结尾时都有值了。 这里你添加了两部分。首先, 新的初始化函数通过 limp 和 fallingApart 参数给 walksWithLimp 和 isFallingApart属性设置了值。这俩个属性是Zombie 类所特有的, 所以指定初始化函数使用合适的值初始化了它们。\n其次, 你调用了Zombie 的父类的指定初始化函数。就像第 15 章那样, super指的是子类的父类。因此, 语法 super.init(town: town, monsterName: monsterName)把Zombie 类的初始化函数中的 town 和 monsterName 参数的值传递给 Monster 类的指定初始化函数。这样做就调用了Monster 类的初始化函数, 它会确保 Zombie 中的 town 和 name 属性被设置上值。查看图17.3：\n你可能想知道为什么在最后调用父类的初始化函数。因为 Zombie 的初始化函数是 Zombie 类的指定初始化函数, 它负责初始化它所引入的所有属性。这些属性被赋值之后, 子类的指定初始化函数负责调用它的父类的初始化函数以使父类能初始化它的属性。(先做好自己的, 再去要求别人。)\n// let fredTheZombie = Zombie(town: myTown, monsterName: \u0026#34;Fred\u0026#34;) // 替换为 let fredTheZombie = Zombie( limp: false, fallingApart: false, town: myzTown, monsterName: \u0026#34;Fred\u0026#34; ) 类的便利初始化函数 不像指定初始化函数, 便利初始化函数并不负责确保类的所有属性都有值。相反, 它们仅仅处理它们被定义去做的那部分工作, 然后把信息传递给其它便利初始化函数或指定初始化函数。所有的便利初始化函数在同一个类中调用其它的初始化函数。最终, 便利初始化函数必须调用到类的指定初始化函数那儿。给定类中便利初始化函数和指定初始化函数的关系:类的存储属性接收初始化值, 定义一个路径。\n在 Zombie 类型上弄一个便利初始化函数。它会省略 town 和 monsterName 参数, 意思是这个初始化函数的调用者将会只需要为这个初始化函数的参数提供参数负责。\n// 使用便利初始化函数 ... init(limp: Bool, fallingApart: Bool, town: Town?, monsterName: String) { walksWithLimp = limp isFallingApart = fallingApart super.init(town: town, monsterName: monsterName) } convenience init(limp: Bool, fallingApart: Bool) { self.init(limp: limp, fallingApart: fallingApart, town: nil, monsterName: \u0026#34;Fred\u0026#34;) if walksWithLimp { print(\u0026#34;This zombie has a bad knee.\u0026#34;) } } final override func terrorizeTown() { if !isFallingApart { town?.changePopulation(-10) } } ... 你使用 convenience关键字把一个初始化函数标记为便利初始化函数。这个关键字告诉编译器该初始化函数将会需要代理给该类的其它初始化函数, 最终调用一个指定初始化函数。这次调用之后, 该类的实例将会能够使用。\n然而, 该便利初始化函数在 Zombie 类上调用指定初始化函数。它传递形参接收到的值: limp和fallingApart。 对于便利初始化函数没有接收到的形参的值, town和 monsterName, 你传递了一个 “nil” 和 \u0026ldquo;Fred\u0026rdquo; 给 Zombie 的指定初始化函数。\n一旦便利初始化函数调用了指定初始化函数, 那么该类的实例就完全准备好使用了。因此你可以检查实例的 walksWithLimp 属性的值。如果你尝试在调用 Zombie 的指定初始化函数之前检查这样做, 那么编译器就会报错: 在 self.init 被调用之前, 代理初始化函数中使用了 self。这个错误告诉你代理初始化函数正尝试使用 self, 而它需要访问 walksWithLimp属性, 在它被准备好使用之前。\n你现在可以使用这个便利初始化函数创建Zombie 类型的实例。\nlet convenientZombie = Zombie(limp: true, failingApart: fasle) 类的必须的初始化函数 类可以要求它的子类提供指定的初始化函数。例如, 假如你想要所有的 Monster 子类提供 monster 的 name 值和 town 值(或者 nil, 如果没有找到一个 town 的话)。要这样的话, 使用 required关键字来标记一个初始化函数以让给类型的子类必须提供指定的初始化函数。\n// 使 town 和 monsterName 是必须的 class Monster { var victimPool: Int { ... } required init(town: Town?, monsterName: String) { self.town = town name = monsterName } func terrorizeTown() { ... } } Monster 类的唯一指定初始化函数现在是必须的。子类必须实现这个初始化函数。\n这样的话子类中会报错, 因为你还未在Zombie子类中实现这个新要求的初始化函数。\n// 在 Zombie.swift 中添加必须的初始化函数 ... convenience init(limp: Bool, fallingApart: Bool) { self.init(limp: limp, fallingApart: fallingApart, town: nil, monsterName: \u0026#34;Fred\u0026#34;) if walksWithLimp { print(\u0026#34;This zombie has a bad knee.\u0026#34;) } } required init(town: Town?, monsterName: String) { walksWithLimp = flase isFallingApart = false super.init(town: town, monsterName: monsterName) } final override func terrorizeTown() { if !isFallingApart { town?.changePopulation(-10) } super.terrorizeTown() } ... 要实现一个父类的必须要求的初始化函数, 在子类的初始化函数前置一个 required关键字。 不像其它函数那样, 如果是继承自你的父类必须重写, 你不必用 override关键字标记初始化函数。它由 required关键字隐式的标记了。\n你的这个 required初始化函数的实现让它成为 Zombie 类的一个指定初始化函数。为什么？ 你问？ 好问题。\n回想指定初始化函数负责初始化类型的属性,还负责向上代理给父类的初始化函数。这个实现正是做了那两件事情。你因此能够使用这个初始化函数来实例化Zombie 类。\n这个时候, 你可能想知道, Zombie 有多少个指定初始化函数？答案是两个。init(limp:fallingApart:town:monsterName:) 和 init(town:monsterName)。有多个指定初始化函数是完全可以的, 并没有什么不寻常。\nDeinitialization 反初始化是从内存中移除类的实例的部分处理, 当它们不再需要时。从概念上讲, 它是初始化的对立面。反初始化被限于引用类型。这对值类型不可用, 因为当它们从作用域中移除后就从内存中移除了。\n在 Swift 中, 反初始化函数在实例被移出内存前被立即调用。在实例被释放内存之前它提供了一个机会用于做任何最后的维护。\n一个类只有一个反初始化函数。反初始化函数以init关键字开头, 不接收任何参数。让我们看一个例子：\n... required init(town: Town?, monsterName: String) { walksWithLimp = false isFallingApart = false super.init(town: town, monsterName: monsterName) } ... func changeName(name: String, walksWithLimp: Bool) { ... } deinit { print(\u0026#34;Zombie named \\(name) is no longer with us.\u0026#34;) } ... 注意反初始化函数访问了Zombie 的name 属性。 反初始化函数可以访问到实例的全部属性和方法。\nfredTheZombie = nil "},"name":"Swift 构造函数","published":"2015-10-08T16:16:21Z","summary":"初始化(Initilization)是设置类型的实例的操作。它为每个存储属性给定了一个初始值, 并且可能会牵涉其它准备工作。这个处理之后, 这个实例就准备好了并且可用了。\n初始化时, 属性的值要么是给定的默认存储值, 要么是根据需要计算得到的值。\n初始化函数的语法 结构体和类要求在初始化完成后, 它们的存储属性拥有初始值。这个要求解释了为什么你一直给你所有的存储属性设置默认值。如果你还没给你的这些存储属性默认值, 那么编译器就会给你报错并告诉你该类型的属性还没有被准备好使用。在类型上定义一个初始化函数是另外一种保证在实例被创建之后属性有值的方式。\n初始化函数的定义和你看过的函数有点不一样, 初始化函数不是以 func关键字开头, 尽管它也是类型中的方法。初始化函数的语法看起来像这样:\nstruct CustomType { init(someValue: SomeType) { // 这儿是初始化代码 } } 这个通用的语法在结构体、枚举和类之间没什么不同。在上面的例子中, 初始化函数有一个叫做 someValue类型为 SomeType 的参数。而初始化函数通常有一个或多个参数, 它们也可以含有 0 个 参数。(这时 init关键字后面有一组空括号)\n不像其它方法, 初始化函数不返回值。相反, 初始化函数的任务是给类型的每个存储属性设定上值。\n结构体初始化 结构体即可以有默认初始化函数又可以有自定义初始化函数。当你使用结构体的时候, 你通常会利用提供好的默认初始化函数, 但是也有其它你会自定义初始化处理的情况。\n结构体的默认初始化函数 还记得你是怎么获得你的Town类型的实例的吗？ 你给Town类型的存储属性设置了默认值。你不知道的是你使用了一个由 Swift 自动提供的空的初始化函数。(一个不含参数的初始化函数)。 当你键入像 var myTown = Town() , 那么这个语法就会调用空的初始化函数并给新的实例的属性设置上你指定的默认值。\n另外一种形式的默认初始化函数就是逐个成员初始化函数(memberwise initializer)。逐个成员初始化函数中类型的每个存储属性都有一个参数。 这时, 你不会让编译器根据你指定的默认值来填充新的实例的属性的值。相反, 免费的逐个成员初始化函数会包含所有需要值的存储属性。(我们称之为免费的, 是因为它是 Swift 编译器自动提供的 — 你不需要定义它)。\n记住, 初始化的一个准则就是给新的实例的所有存储属性设置上值以准备使用。编译器会强制要求你的新的实例中的所有存储属性都有值。如果你没有为你的自定义的结构体提供初始化函数, 你必须通过默认值或逐个成员初始化函数提供必要的值。\n// 使用逐个成员初始化函数 struct Town { var population = 5422 var numberOfStoplights = 4 // 实例方法 func printTownDescription() { print(\u0026#34;Population: \\(population); number of stoplights: \\(numberOfStoplights)\u0026#34;) } } var myTown() = Town(population: 10000, numberOfStoplights: 6) myTown.","type":"entry","url":"https://ohmyweekly.github.io/notes/swift-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"}