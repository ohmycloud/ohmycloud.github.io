{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003ch2 id=\"data-munging-in-raku\"\u003eData munging in Raku\u003c/h2\u003e\n\u003cp\u003e案例学习: 生成成绩报告单\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eexample.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSTDOUT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ePeter\tB\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCeline\tA-\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eZsófia\tB+\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eJoão\tF\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMaryam\tB+\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e秀英\tB-\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eFinn\tD+\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eAarav\tA\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eEmma\tF\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eOmar\tB\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出报告单：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eZsófia\u0026#39;s grade: B+\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eList of students with a failing grade:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  João, Emma\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDistribution of grades by letter:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  A: 2 students\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  B: 5 students\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  D: 1 student\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  F: 2 students\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eexample.txt 是一个文本文件, 每行一个学生姓名和分数, 中间用空格分割。\n我们希望我们的脚本能解析这样的文件并打印含有如下信息的报告：\u003c/p\u003e\n\u003cp\u003e学生名为 “Zsófia” 的成绩\u003cbr\u003e\n所有不及格学生的名字 (i.e. worse than D-),\u003cbr\u003e\n根据字母( 不带 \u003ccode\u003e+\u003c/code\u003e/\u003ccode\u003e-\u003c/code\u003e ) 把成绩分组。得到学生成绩的分布。\u003c/p\u003e\n\u003cp\u003e让我们一步步来, 添加 shebang 行:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ch\"\u003e#!/usr/bin/env raku\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Raku 中所有这些都为我们做好了。\u003c/p\u003e\n\u003cp\u003e读取并解析输入:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%grade\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003egrades.txt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elines\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u003cspan class=\"k\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"na\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"ni\"\u003e^\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"se\"\u003e\\w\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026lt;[\u003c/span\u003e\u003cspan class=\"sr\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"sr\"\u003eF\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u0026gt;\u0026lt;[\u003c/span\u003e\u003cspan class=\"sr\"\u003e+-\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"ni\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"ow\"\u003eor\u003c/span\u003e \u003cspan class=\"nb\"\u003edie\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eCan\u0026#39;t parse line \u0026#39;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Raku 中, 对文件名字符串调用 \u003ca href=\"https://docs.raku.org/type/IO::Path\"\u003e.IO\u003c/a\u003e 方法会返回一个代表文件系统路径的对象, 我们可以继续在这个对象上调用 \u003ca href=\"https://docs.raku.org/routine/lines\"\u003e.lines\u003c/a\u003e 方法, 得到文件的所有行的一个惰性列表。“Lazy” 意味着它只会从磁盘中按需读取新行, 当我们使用 \u003ca href=\"https://docs.raku.org/routine/map\"\u003e.map\u003c/a\u003e 方法遍历列表元素的时候, 这样能使用单个赋值操作就能优雅地初始化一个散列。\u003c/p\u003e\n\u003cp\u003e我们不需要让文件句柄识别 Unicode, 也不用管文件句柄是否正确关闭, 这在 Raku 中都是默认发生的。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emethod: ...\u003c/code\u003e 语法也可以写为 \u003ccode\u003e.method(...)\u003c/code\u003e, 前者使 map 看起来更像一个 block 语句, 并减少了括号凌乱。\n\u003ccode\u003e:s\u003c/code\u003e(\u0026ldquo;sigspace\u0026rdquo;) 正则修饰符使解析 token 间的空白更优雅。但 Raku 中的字符类比 Perl 5 复杂了一丢丢。\n正则捕获结果变量(\u003ccode\u003e$0\u003c/code\u003e, \u003ccode\u003e$1\u003c/code\u003e, …) 返回一个完整的 \u003ca href=\"https://docs.raku.org/type/Match\"\u003eMatch\u003c/a\u003e 对象 - 它为复杂使用场景增加了很多灵活性, 但是这里我们只想保留字符串, 所以使用 \u003ca href=\"https://docs.raku.org/routine/~\"\u003e~\u003c/a\u003e 前置操作符字符串化了匹配对象。\u003c/p\u003e\n\u003cp\u003e查看数据的特定项:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eZsófia\u0026#39;s grade: \u003c/span\u003e\u003cspan class=\"nv\"\u003e%grade\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;Zsófia\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRaku 总是把散列中 \u003ccode\u003e{ }\u003c/code\u003e 中的东西解析为表达式, 使用 \u003ccode\u003e\u0026lt; \u0026gt;\u003c/code\u003e 表示字面值。\u003c/p\u003e\n\u003cp\u003e过滤数据:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eList of students with a failing grade:\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nv\"\u003e%grade\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"nb\"\u003evalue\u003c/span\u003e \u003cspan class=\"ow\"\u003ege\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eE\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;)\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e, \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRaku 中允许我们按执行顺序把一些列方法写为链式操作。有一个重要区别：Raku 能让我们直接遍历散列的项, 散列中每一项都是一个 \u003ca href=\"https://docs.raku.org/type/Pair\"\u003ePair\u003c/a\u003e 对象(Pair 对象能使用 \u003ca href=\"https://docs.raku.org/type/Pair#method_key\"\u003e.key\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/Pair#method_value\"\u003e.value\u003c/a\u003e 方法)。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e*\u003c/code\u003e \u003ca href=\"https://docs.raku.org/type/Whatever\"\u003eWhatever\u003c/a\u003e star 用于定义一个简单的回调, 而不用写一个花括号块。\n\u003ccode\u003e».\u003c/code\u003e \u003ca href=\"https://docs.raku.org/language/operators#index-entry-hyper_%3C%3C-hyper_%3E%3E-hyper_%C2%AB-hyper_%C2%BB-Hyper_operators\"\u003ehyper operator\u003c/a\u003e 用于对 \u003ca href=\"https://docs.raku.org/routine/grep\"\u003e.grep\u003c/a\u003e 返回的 Pairs 的每个 Pair 上调用 一次 .key 方法, 得出姓名列表\u003c/p\u003e\n\u003cp\u003e从数据中创建频率分布:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eDistribution of grades by letter:\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;{\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e+.\u003c/span\u003e\u003cspan class=\"nb\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e student\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e%grade\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eclassify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"nb\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecomb\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e计数和分组实在太常见了, Raku 提供了 \u003ca href=\"https://docs.raku.org/routine/classify\"\u003e.classify\u003c/a\u003e 方法。\nclassify 方法里需要指定要分组的项(这里是代表 \u003ccode\u003e%grade\u003c/code\u003e 条目的 Pair 对象), 这些项应该根据什么规则进行分组(这里是根据第一个字母的值, 它代表分数(没有 \u003ccode\u003e+\u003c/code\u003e/\u003ccode\u003e-\u003c/code\u003e)。\u003c/p\u003e\n\u003cp\u003e这生成一个匿名的散列, 散列的值是匿名数组。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e%(\u0026#34;B\u0026#34; =\u0026gt; [\u0026#34;Peter\u0026#34; =\u0026gt; \u0026#34;B\u0026#34;, \u0026#34;Zsófia\u0026#34; =\u0026gt; \u0026#34;B+\u0026#34;, \u0026#34;Maryam\u0026#34; =\u0026gt; \u0026#34;B+\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#34;秀英\u0026#34; =\u0026gt; \u0026#34;B-\u0026#34;, \u0026#34;Omar\u0026#34; =\u0026gt; \u0026#34;B\u0026#34;], \u0026#34;A\u0026#34; =\u0026gt; [\u0026#34;Celine\u0026#34; =\u0026gt; \u0026#34;A-\u0026#34;, \u0026#34;Aarav\u0026#34; =\u0026gt; \u0026#34;A\u0026#34;], \u0026#34;F\u0026#34; =\u0026gt; [\u0026#34;João\u0026#34; =\u0026gt; \u0026#34;F\u0026#34;, \u0026#34;Emma\u0026#34; =\u0026gt; \u0026#34;F\u0026#34;], \u0026#34;D\u0026#34; =\u0026gt; [\u0026#34;Finn\u0026#34; =\u0026gt; \u0026#34;D+\u0026#34;])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因为我们只对每组元素的个数感兴趣, 我们使用 \u003ca href=\"https://docs.raku.org/routine/+\"\u003e+\u003c/a\u003e 前置操作符数字化每个值然后打印它, 在数组前面添加 \u003ccode\u003e+\u003c/code\u003e 符号会得到数组元素的个数。\u003c/p\u003e\n\u003cp\u003e在 term 位置上一个单独的 \u003ccode\u003e.method\u003c/code\u003e 方法等价于 \u003ccode\u003e$_.method\u003c/code\u003e, 意思是对当前循环变量调用该方法。任意代码的返回值能使用花括号 \u003ccode\u003e{}\u003c/code\u003e 插值到字符串中。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eif\u003c/code\u003e 语句能被用作表达式 - 当条件为 false 时, 返回空列表, 然后被字符串化为空字符串。对字符串调用不带参数的 \u003ca href=\"https://docs.raku.org/routine/comb\"\u003e.comb\u003c/a\u003e 会生成该字符串的一个字符列表。\u003c/p\u003e\n","text":"Data munging in Raku 案例学习: 生成成绩报告单\nexample.txt STDOUT Peter\tB Celine\tA- Zsófia\tB+ João\tF Maryam\tB+ 秀英\tB- Finn\tD+ Aarav\tA Emma\tF Omar\tB 输出报告单：\nZsófia\u0026#39;s grade: B+ List of students with a failing grade: João, Emma Distribution of grades by letter: A: 2 students B: 5 students D: 1 student F: 2 students example.txt 是一个文本文件, 每行一个学生姓名和分数, 中间用空格分割。 我们希望我们的脚本能解析这样的文件并打印含有如下信息的报告：\n学生名为 “Zsófia” 的成绩\n所有不及格学生的名字 (i.e. worse than D-),\n根据字母( 不带 +/- ) 把成绩分组。得到学生成绩的分布。\n让我们一步步来, 添加 shebang 行:\n#!/usr/bin/env raku 在 Raku 中所有这些都为我们做好了。\n读取并解析输入:\nmy %grade = \u0026#34;grades.txt\u0026#34;.IO.lines.map: { m:s/^(\\w+) (\u0026lt;[A..F]\u0026gt;\u0026lt;[+-]\u0026gt;?)$/ or die \u0026#34;Can\u0026#39;t parse line \u0026#39;$_\u0026#39;\u0026#34;; ~$0 =\u0026gt; ~$1 }; 在 Raku 中, 对文件名字符串调用 .IO 方法会返回一个代表文件系统路径的对象, 我们可以继续在这个对象上调用 .lines 方法, 得到文件的所有行的一个惰性列表。“Lazy” 意味着它只会从磁盘中按需读取新行, 当我们使用 .map 方法遍历列表元素的时候, 这样能使用单个赋值操作就能优雅地初始化一个散列。\n我们不需要让文件句柄识别 Unicode, 也不用管文件句柄是否正确关闭, 这在 Raku 中都是默认发生的。\nmethod: ... 语法也可以写为 .method(...), 前者使 map 看起来更像一个 block 语句, 并减少了括号凌乱。 :s(\u0026ldquo;sigspace\u0026rdquo;) 正则修饰符使解析 token 间的空白更优雅。但 Raku 中的字符类比 Perl 5 复杂了一丢丢。 正则捕获结果变量($0, $1, …) 返回一个完整的 Match 对象 - 它为复杂使用场景增加了很多灵活性, 但是这里我们只想保留字符串, 所以使用 ~ 前置操作符字符串化了匹配对象。\n查看数据的特定项:\nsay \u0026#34;Zsófia\u0026#39;s grade: %grade\u0026lt;Zsófia\u0026gt;\u0026#34;; Raku 总是把散列中 { } 中的东西解析为表达式, 使用 \u0026lt; \u0026gt; 表示字面值。\n过滤数据:\nsay \u0026#34;List of students with a failing grade:\u0026#34;; say \u0026#34; \u0026#34; ~ %grade.grep(*.value ge \u0026#34;E\u0026#34;)».key.join(\u0026#34;, \u0026#34;); Raku 中允许我们按执行顺序把一些列方法写为链式操作。有一个重要区别：Raku 能让我们直接遍历散列的项, 散列中每一项都是一个 Pair 对象(Pair 对象能使用 .key 和 .value 方法)。\n* Whatever star 用于定义一个简单的回调, 而不用写一个花括号块。 ». hyper operator 用于对 .grep 返回的 Pairs 的每个 Pair 上调用 一次 .key 方法, 得出姓名列表\n从数据中创建频率分布:\nsay \u0026#34;Distribution of grades by letter:\u0026#34;; say \u0026#34;{.key}: {+.value} student{\u0026#34;s\u0026#34; if .value != 1}\u0026#34; for %grade.classify(*.value.comb[0]).sort(*.key); 计数和分组实在太常见了, Raku 提供了 .classify 方法。 classify 方法里需要指定要分组的项(这里是代表 %grade 条目的 Pair 对象), 这些项应该根据什么规则进行分组(这里是根据第一个字母的值, 它代表分数(没有 +/-)。\n这生成一个匿名的散列, 散列的值是匿名数组。\n%(\u0026#34;B\u0026#34; =\u0026gt; [\u0026#34;Peter\u0026#34; =\u0026gt; \u0026#34;B\u0026#34;, \u0026#34;Zsófia\u0026#34; =\u0026gt; \u0026#34;B+\u0026#34;, \u0026#34;Maryam\u0026#34; =\u0026gt; \u0026#34;B+\u0026#34;, \u0026#34;秀英\u0026#34; =\u0026gt; \u0026#34;B-\u0026#34;, \u0026#34;Omar\u0026#34; =\u0026gt; \u0026#34;B\u0026#34;], \u0026#34;A\u0026#34; =\u0026gt; [\u0026#34;Celine\u0026#34; =\u0026gt; \u0026#34;A-\u0026#34;, \u0026#34;Aarav\u0026#34; =\u0026gt; \u0026#34;A\u0026#34;], \u0026#34;F\u0026#34; =\u0026gt; [\u0026#34;João\u0026#34; =\u0026gt; \u0026#34;F\u0026#34;, \u0026#34;Emma\u0026#34; =\u0026gt; \u0026#34;F\u0026#34;], \u0026#34;D\u0026#34; =\u0026gt; [\u0026#34;Finn\u0026#34; =\u0026gt; \u0026#34;D+\u0026#34;]) 因为我们只对每组元素的个数感兴趣, 我们使用 + 前置操作符数字化每个值然后打印它, 在数组前面添加 + 符号会得到数组元素的个数。\n在 term 位置上一个单独的 .method 方法等价于 $_.method, 意思是对当前循环变量调用该方法。任意代码的返回值能使用花括号 {} 插值到字符串中。\nif 语句能被用作表达式 - 当条件为 false 时, 返回空列表, 然后被字符串化为空字符串。对字符串调用不带参数的 .comb 会生成该字符串的一个字符列表。\n"},"name":"Raku 圣诞月历 - 2014","published":"2021-07-07T00:00:00Z","summary":"Raku Calendar","type":"entry","url":"https://ohmyweekly.github.io/notes/2014-12-19-raku-calendar/"}