{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003cp\u003e大多数情况下， Scala 中的 trait 相当于 Java 中的借口， 或者 Raku 中的 Role。Scala 可以继承多个 trait。\u003c/p\u003e\n\u003ch2 id=\"trait-作为接口\"\u003etrait 作为接口\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003etrait BaseSoundPlayer {\n    def play\n    def close\n    def pause\n    def stop\n    def resume\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e和 OC 中的接口类似， 如果方法带有参数，则声明时加上参数即可：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003etrait Dog {\n    def speak(whatToSay: String)\n    def wagTail(enabled: Boolean)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e类继承 trait 时需要使用 extends 和 with 关键字, 如果类只继承一个 trait, 则只使用 extends 就够了：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eclass Mp3SoundPlayer extends BaseSoundPlayer { ...\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e继承一个类和一个或多个 trait 时，对类使用 extends, 对 trait 使用 with：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eclass Foo extends BaseClass with Trait1 with Traits { ...\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当一个类继承多个 trait 时，使用 extends 继承第一个 trait ，对其余的 trait 使用 with：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eclass Foo extends Trait1 with Trait2 with Trait3 with Trait4 { ...\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e真是够了， 继承了 trait ， 语法还啰嗦还不一致，Raku 就直接 ：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eclass Dog is Animal does eat does jump { ...  \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eScala 丑哭。\u003c/p\u003e\n\u003cp\u003e继承了 trait， 就要实现 trait 中定义好的所有方法：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eclass Mp3SoundPlayer extends BaseSoundPlayer {\n    def play         { // code here ... }\n    def close       { // code here ... }\n    def pause     { // code here ... }\n    def stop        { // code here ... }\n    def resume   { // code here ... }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果类继承了 trait 但是没有实现它的抽象方法, 那么这个类就必须被声明为抽象类：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e// must be declared abstract because it does not implement all of the BaseSoundPlayer methods\nabstract class SimpleSoundPlayer extends BaseSoundPlayer {\n    def play   { ... }\n    def close { ... }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003etrait 还可以继承另外一个 trait：(😄)\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003etrait Mp3BaseSoundPlayer extends BaseSoundFilePlayer {\n    def getBasicPlayer: BasicPlayer\n    def getBasicController: BasicController\n    def setGain(volume: Double)\n}\n\u003c/code\u003e\u003c/pre\u003e","text":"大多数情况下， Scala 中的 trait 相当于 Java 中的借口， 或者 Raku 中的 Role。Scala 可以继承多个 trait。\ntrait 作为接口 trait BaseSoundPlayer { def play def close def pause def stop def resume } 和 OC 中的接口类似， 如果方法带有参数，则声明时加上参数即可：\ntrait Dog { def speak(whatToSay: String) def wagTail(enabled: Boolean) } 类继承 trait 时需要使用 extends 和 with 关键字, 如果类只继承一个 trait, 则只使用 extends 就够了：\nclass Mp3SoundPlayer extends BaseSoundPlayer { ... 继承一个类和一个或多个 trait 时，对类使用 extends, 对 trait 使用 with：\nclass Foo extends BaseClass with Trait1 with Traits { ... 当一个类继承多个 trait 时，使用 extends 继承第一个 trait ，对其余的 trait 使用 with：\nclass Foo extends Trait1 with Trait2 with Trait3 with Trait4 { ... 真是够了， 继承了 trait ， 语法还啰嗦还不一致，Raku 就直接 ：\nclass Dog is Animal does eat does jump { ... Scala 丑哭。\n继承了 trait， 就要实现 trait 中定义好的所有方法：\nclass Mp3SoundPlayer extends BaseSoundPlayer { def play { // code here ... } def close { // code here ... } def pause { // code here ... } def stop { // code here ... } def resume { // code here ... } } 如果类继承了 trait 但是没有实现它的抽象方法, 那么这个类就必须被声明为抽象类：\n// must be declared abstract because it does not implement all of the BaseSoundPlayer methods abstract class SimpleSoundPlayer extends BaseSoundPlayer { def play { ... } def close { ... } } trait 还可以继承另外一个 trait：(😄)\ntrait Mp3BaseSoundPlayer extends BaseSoundFilePlayer { def getBasicPlayer: BasicPlayer def getBasicController: BasicController def setGain(volume: Double) } "},"name":"trait ","published":"2017-04-04T16:36:25Z","summary":"大多数情况下， Scala 中的 trait 相当于 Java 中的借口， 或者 Raku 中的 Role。Scala 可以继承多个 trait。\ntrait 作为接口 trait BaseSoundPlayer { def play def close def pause def stop def resume } 和 OC 中的接口类似， 如果方法带有参数，则声明时加上参数即可：\ntrait Dog { def speak(whatToSay: String) def wagTail(enabled: Boolean) } 类继承 trait 时需要使用 extends 和 with 关键字, 如果类只继承一个 trait, 则只使用 extends 就够了：\nclass Mp3SoundPlayer extends BaseSoundPlayer { ... 继承一个类和一个或多个 trait 时，对类使用 extends, 对 trait 使用 with：\nclass Foo extends BaseClass with Trait1 with Traits { .","type":"entry","url":"https://ohmyweekly.github.io/notes/trait-in-scala/"}