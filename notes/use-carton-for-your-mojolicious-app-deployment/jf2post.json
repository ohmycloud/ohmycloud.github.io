{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003cp\u003e你有一个可爱的Mojolicious应用程序，它是时候部署它了！\u003c/p\u003e\n\u003cp\u003e但是\u0026hellip;\u0026hellip;它不能在生产服务器上运行！到底是怎么回事？哦，不，您所依赖的模块与开发服务器上的版本不同。你能做什么？\u003c/p\u003e\n\u003cp\u003e实际上，一些模块发展得很快（Hello Mojolicious！），这没有毛病，但可能会导致不兼容的变化。\u003c/p\u003e\n\u003cp\u003e还有一些可以在版本中解决或引入的错误，如果您的版本错误，则会遇到这些错误。\u003c/p\u003e\n\u003ch2 id=\"cpanfile来救援\"\u003eCpanfile来救援\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://metacpan.org/pod/cpanfile\"\u003eCpanfile\u003c/a\u003e是一种用于描述Perl应用程序的CPAN依赖关系的格式。\u003c/p\u003e\n\u003cp\u003e有了\u003ccode\u003ecpanfile\u003c/code\u003e，我们可以列出我们需要的模块，但我们也可以强制模块的最小版本，它们的最大版本\u0026hellip;\u0026hellip;或者说“我想要那个模块的确切版本”。\u003c/p\u003e\n\u003cp\u003e但我们也可以列出可选模块：您可以支持不同的数据库，但如果用户想要使用PostgreSQL，则不必安装与MySQL相关的模块。\u003c/p\u003e\n\u003cp\u003e这是一个例子\u003ccode\u003ecpanfile\u003c/code\u003e：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# Do not ask for a specific version\nrequires \u0026#39;DateTime\u0026#39;;\n# Ask a specific version\nrequires \u0026#39;Plack\u0026#39;, \u0026#39;== 1.0\u0026#39;;\n# Ask a minimal version\nrequires \u0026#39;Net::DNS\u0026#39;, \u0026#39;\u0026gt;= 1.12\u0026#39;;\n# Or\nrequires \u0026#39;Net::DNS\u0026#39;, \u0026#39;1.12\u0026#39;;\n# Ask a maximal version\nrequires \u0026#39;Locale::Maketext\u0026#39;, \u0026#39;\u0026lt; 1.28\u0026#39;;\n# Give a range\nrequires \u0026#39;Mojolicious\u0026#39;, \u0026#39;\u0026gt;= 7.0, \u0026lt; 8.0\u0026#39;;\n\n# Optional modules\nfeature \u0026#39;postgresql\u0026#39;, \u0026#39;PostgreSQL support\u0026#39; =\u0026gt; sub {\n    requires \u0026#39;Mojo::Pg\u0026#39;;\n};\nfeature \u0026#39;mysql\u0026#39;, \u0026#39;MySQL support\u0026#39; =\u0026gt; sub {\n    requires \u0026#39;Mojo::mysql\u0026#39;;\n};\nfeature \u0026#39;ldap\u0026#39;, \u0026#39;LDAP authentication support\u0026#39; =\u0026gt; sub {\n    requires \u0026#39;Net::LDAP\u0026#39;;\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCpanfile格式可以做更多（推荐模块，用于特定阶段（需求\u003ccode\u003econfigure\u003c/code\u003e，\u003ccode\u003etest\u003c/code\u003e\u0026hellip;），使用没有公布关于CPAN \u0026hellip;模块），但是这是一个关于 Carton 的文章：我让你读cpanfile文档🙂\u003c/p\u003e\n\u003cp\u003e留意：小心在 README 文件中列出非Perl的依赖关系\u003ca href=\"https://mojolicious.io/blog/2018/12/22/use-carton-for-your-mojolicious-app-deployment/#footnote-1\"\u003e1\u003c/a\u003e，像 \u003ca href=\"https://mojolicious.org/perldoc/Mojo/Pg\"\u003e\u003ccode\u003eMojo::Pg\u003c/code\u003e\u003c/a\u003e 中的 \u003ccode\u003elibpq-dev\u003c/code\u003e😉\u003c/p\u003e\n\u003cp\u003eCpanfile可以由\u003ca href=\"https://metacpan.org/pod/cpanm\"\u003ecpanminus\u003c/a\u003e或\u003ca href=\"https://metacpan.org/pod/Carton\"\u003eCarton使用\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e转到包含 \u003ccode\u003ecpanfile\u003c/code\u003e 的目录并执行：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecpanm --installdeps .\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cem\u003eEtvoilà！\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e请注意，\u003ccode\u003efeatures\u003c/code\u003e尚未安装模块。你可以安装它们：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecpanm --installdeps . --with-feature postgresql\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e或者，安装所有\u003ccode\u003efeatures\u003c/code\u003e模块，但不安装\u003ccode\u003emysql\u003c/code\u003e：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecpanm --installdeps . --with-all-features --without-feature mysql\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e所以，现在，我们可以确定我们的应用程序依赖于系统的良好版本。\u003c/p\u003e\n\u003cp\u003e但是，如果我们在该系统上托管其他具有冲突要求的应用程序呢？\u003c/p\u003e\n\u003cp\u003eCpanm 能够在特定的文件夹中安装模块（谢谢你，\u003ca href=\"https://metacpan.org/pod/local::lib\"\u003elocal::lib\u003c/a\u003e），但是在我们的应用程序目录中安装我们的依赖项是不是很方便？我们总是知道我们的依赖关系在哪里。\u003c/p\u003e\n\u003ch2 id=\"carton来了\"\u003eCarton来了\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://metacpan.org/pod/Carton\"\u003eCarton\u003c/a\u003e是Perl模块依赖管理器。想想 Ruby 中的 \u003ccode\u003ebundler\u003c/code\u003e。 想想 Node.js 中的 \u003ccode\u003enpm\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e像\u003ccode\u003enpm\u003c/code\u003e，Carton 在应用程序的目录中安装依赖关系。\u003c/p\u003e\n\u003ch3 id=\"部署\"\u003e部署\u003c/h3\u003e\n\u003cp\u003e首先，安装 Carton：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecpanm Carton\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后，我们可以安装我们的依赖项：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecarton install\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们的依赖项将安装在一个名为的目录中\u003ccode\u003elocal\u003c/code\u003e。但还有更多：Carton将生成一个\u003ccode\u003ecpanfile.snapshot\u003c/code\u003e文件，其中包含我们的依赖项的确切版本，允许我们强制执行那些确切的版本（随应用程序一起提供）。\u003c/p\u003e\n\u003cp\u003e在我们的\u003ccode\u003ecpanfile\u003c/code\u003e示例中，我们要求Mojolicious版本大于或等于7.0且小于8.0。在我们的开发服务器上的安装和生产服务器上的安装之间，我们依赖的一些较新版本的模块可能已经发布。假设在我们的开发环境中我们有7.77 Mojolicious和7.90并且有些东西已经改变，这会导致问题（例如，来自\u003ca href=\"https://mojolicious.org/perldoc/Mojolicious/Plugin/DefaultHelpers\"\u003eMojolicious :: Plugin :: DefaultHelpers\u003c/a\u003e的延迟助手已经\u003ca href=\"https://github.com/mojolicious/mojo/blob/47d1369fd11b09af47a76f7f7192985a30ce2409/Changes#L243\"\u003e在7.78中\u003c/a\u003e被\u003ca href=\"https://github.com/mojolicious/mojo/blob/47d1369fd11b09af47a76f7f7192985a30ce2409/Changes#L243\"\u003e弃用\u003c/a\u003e并且\u003ca href=\"https://github.com/mojolicious/mojo/blob/47d1369fd11b09af47a76f7f7192985a30ce2409/Changes#L150\"\u003e在7.90中被移除\u003c/a\u003e）。\u003c/p\u003e\n\u003cp\u003e7.77和7.90版本都在我们的产品系列中，但我们的应用程序无法在生产服务器上运行\u0026hellip;我们需要使生产环境尽可能与开发环境相同。\u003c/p\u003e\n\u003cp\u003e为此，由于我们\u003ccode\u003ecpanfile.snapshot\u003c/code\u003e的开发服务器有一个文件，我们可以这样做：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecarton install --deployment\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这将安装快照中列出的模块的确切版本。\u003c/p\u003e\n\u003ch3 id=\"特征\"\u003e特征\u003c/h3\u003e\n\u003cp\u003e默认情况下，\u003ccode\u003ecarton install\u003c/code\u003e将安装所有\u003cem\u003e功能\u003c/em\u003e依赖项，但我们可以停用一些：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecarton install --deployment --without-feature mysql\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e为了为所有模块（甚至是可选模块）提供正确的版本，请\u003ccode\u003ecarton install\u003c/code\u003e在开发服务器上执行，并\u003ccode\u003e--without-feature\u003c/code\u003e仅在部署应用程序时使用：您需要\u003ccode\u003ecpanfile.snapshot\u003c/code\u003e包含所有模块。\u003c/p\u003e\n\u003ch3 id=\"开始申请\"\u003e开始申请\u003c/h3\u003e\n\u003cp\u003e为了能够使用\u003ccode\u003elocal\u003c/code\u003e包含依赖项的目录，可以为命令添加前缀\u003ccode\u003ecarton exec\u003c/code\u003e。因此，要使用内置服务器\u003ca href=\"https://mojolicious.org/perldoc/Mojo/Server/Hypnotoad\"\u003ehypnotoad\u003c/a\u003e启动Mojolicious应用程序，请执行以下操作：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecarton exec -- hypnotoad script/my_application\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这适用于您可以对您的应用程序执行的所有操作。例：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecarton exec -- script/my_application routes\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e请注意两个破折号：它们避免使用纸盒来解释传递给脚本的参数。这将显示您的应用程序的帮助消息：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecarton exec -- script/my_application --help\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这将显示纸箱的帮助信息：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecarton exec script/my_application --help\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e看到不同？😉\u003c/p\u003e\n\u003ch3 id=\"捆绑依赖项\"\u003e捆绑依赖项\u003c/h3\u003e\n\u003cp\u003e为了更快地安装，carton可以将依赖项的所有tarball捆绑到一个目录中，这样您甚至可以安装CPAN上不可用的依赖项，例如内部分发，即DarkPAN：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecarton bundle\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这将捆绑tarball \u003ccode\u003evendor/cache\u003c/code\u003e。您现在可以使用以下命令安装依赖项：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecarton install --cached\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e结合\u003ccode\u003e--deployment\u003c/code\u003e选项，您可以避免查询CPAN Meta DB等数据库或从CPAN镜像下载文件。\u003c/p\u003e\n\u003cp\u003e您甚至可以避免在生产服务器上安装Carton的需要（但是您需要添加\u003ccode\u003elocal\u003c/code\u003e目录\u003ccode\u003e@INC\u003c/code\u003e以启动您的应用程序，因为您无法使用\u003ccode\u003ecarton exec\u003c/code\u003e）：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecpanm -L local --from \u0026#34;$PWD/vendor/cache\u0026#34; --installdeps --notest --quiet .\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"结论\"\u003e结论\u003c/h2\u003e\n\u003cp\u003eCarton和cpanfile是缓解Mojolicious应用程序部署的好方法。它不仅可以避免在README或INSTALL文件中列出应用程序所需的所有依赖项，而且可以加速部署并使它们更安全，因为它确实可以降低由于依赖项版本不良而导致的错误风险。\u003c/p\u003e\n","text":"你有一个可爱的Mojolicious应用程序，它是时候部署它了！\n但是\u0026hellip;\u0026hellip;它不能在生产服务器上运行！到底是怎么回事？哦，不，您所依赖的模块与开发服务器上的版本不同。你能做什么？\n实际上，一些模块发展得很快（Hello Mojolicious！），这没有毛病，但可能会导致不兼容的变化。\n还有一些可以在版本中解决或引入的错误，如果您的版本错误，则会遇到这些错误。\nCpanfile来救援 Cpanfile是一种用于描述Perl应用程序的CPAN依赖关系的格式。\n有了cpanfile，我们可以列出我们需要的模块，但我们也可以强制模块的最小版本，它们的最大版本\u0026hellip;\u0026hellip;或者说“我想要那个模块的确切版本”。\n但我们也可以列出可选模块：您可以支持不同的数据库，但如果用户想要使用PostgreSQL，则不必安装与MySQL相关的模块。\n这是一个例子cpanfile：\n# Do not ask for a specific version requires \u0026#39;DateTime\u0026#39;; # Ask a specific version requires \u0026#39;Plack\u0026#39;, \u0026#39;== 1.0\u0026#39;; # Ask a minimal version requires \u0026#39;Net::DNS\u0026#39;, \u0026#39;\u0026gt;= 1.12\u0026#39;; # Or requires \u0026#39;Net::DNS\u0026#39;, \u0026#39;1.12\u0026#39;; # Ask a maximal version requires \u0026#39;Locale::Maketext\u0026#39;, \u0026#39;\u0026lt; 1.28\u0026#39;; # Give a range requires \u0026#39;Mojolicious\u0026#39;, \u0026#39;\u0026gt;= 7.0, \u0026lt; 8.0\u0026#39;; # Optional modules feature \u0026#39;postgresql\u0026#39;, \u0026#39;PostgreSQL support\u0026#39; =\u0026gt; sub { requires \u0026#39;Mojo::Pg\u0026#39;; }; feature \u0026#39;mysql\u0026#39;, \u0026#39;MySQL support\u0026#39; =\u0026gt; sub { requires \u0026#39;Mojo::mysql\u0026#39;; }; feature \u0026#39;ldap\u0026#39;, \u0026#39;LDAP authentication support\u0026#39; =\u0026gt; sub { requires \u0026#39;Net::LDAP\u0026#39;; }; Cpanfile格式可以做更多（推荐模块，用于特定阶段（需求configure，test\u0026hellip;），使用没有公布关于CPAN \u0026hellip;模块），但是这是一个关于 Carton 的文章：我让你读cpanfile文档🙂\n留意：小心在 README 文件中列出非Perl的依赖关系1，像 Mojo::Pg 中的 libpq-dev😉\nCpanfile可以由cpanminus或Carton使用。\n转到包含 cpanfile 的目录并执行：\ncpanm --installdeps . Etvoilà！\n请注意，features尚未安装模块。你可以安装它们：\ncpanm --installdeps . --with-feature postgresql 或者，安装所有features模块，但不安装mysql：\ncpanm --installdeps . --with-all-features --without-feature mysql 所以，现在，我们可以确定我们的应用程序依赖于系统的良好版本。\n但是，如果我们在该系统上托管其他具有冲突要求的应用程序呢？\nCpanm 能够在特定的文件夹中安装模块（谢谢你，local::lib），但是在我们的应用程序目录中安装我们的依赖项是不是很方便？我们总是知道我们的依赖关系在哪里。\nCarton来了 Carton是Perl模块依赖管理器。想想 Ruby 中的 bundler。 想想 Node.js 中的 npm。\n像npm，Carton 在应用程序的目录中安装依赖关系。\n部署 首先，安装 Carton：\ncpanm Carton 然后，我们可以安装我们的依赖项：\ncarton install 我们的依赖项将安装在一个名为的目录中local。但还有更多：Carton将生成一个cpanfile.snapshot文件，其中包含我们的依赖项的确切版本，允许我们强制执行那些确切的版本（随应用程序一起提供）。\n在我们的cpanfile示例中，我们要求Mojolicious版本大于或等于7.0且小于8.0。在我们的开发服务器上的安装和生产服务器上的安装之间，我们依赖的一些较新版本的模块可能已经发布。假设在我们的开发环境中我们有7.77 Mojolicious和7.90并且有些东西已经改变，这会导致问题（例如，来自Mojolicious :: Plugin :: DefaultHelpers的延迟助手已经在7.78中被弃用并且在7.90中被移除）。\n7.77和7.90版本都在我们的产品系列中，但我们的应用程序无法在生产服务器上运行\u0026hellip;我们需要使生产环境尽可能与开发环境相同。\n为此，由于我们cpanfile.snapshot的开发服务器有一个文件，我们可以这样做：\ncarton install --deployment 这将安装快照中列出的模块的确切版本。\n特征 默认情况下，carton install将安装所有功能依赖项，但我们可以停用一些：\ncarton install --deployment --without-feature mysql 为了为所有模块（甚至是可选模块）提供正确的版本，请carton install在开发服务器上执行，并--without-feature仅在部署应用程序时使用：您需要cpanfile.snapshot包含所有模块。\n开始申请 为了能够使用local包含依赖项的目录，可以为命令添加前缀carton exec。因此，要使用内置服务器hypnotoad启动Mojolicious应用程序，请执行以下操作：\ncarton exec -- hypnotoad script/my_application 这适用于您可以对您的应用程序执行的所有操作。例：\ncarton exec -- script/my_application routes 请注意两个破折号：它们避免使用纸盒来解释传递给脚本的参数。这将显示您的应用程序的帮助消息：\ncarton exec -- script/my_application --help 这将显示纸箱的帮助信息：\ncarton exec script/my_application --help 看到不同？😉\n捆绑依赖项 为了更快地安装，carton可以将依赖项的所有tarball捆绑到一个目录中，这样您甚至可以安装CPAN上不可用的依赖项，例如内部分发，即DarkPAN：\ncarton bundle 这将捆绑tarball vendor/cache。您现在可以使用以下命令安装依赖项：\ncarton install --cached 结合--deployment选项，您可以避免查询CPAN Meta DB等数据库或从CPAN镜像下载文件。\n您甚至可以避免在生产服务器上安装Carton的需要（但是您需要添加local目录@INC以启动您的应用程序，因为您无法使用carton exec）：\ncpanm -L local --from \u0026#34;$PWD/vendor/cache\u0026#34; --installdeps --notest --quiet . 结论 Carton和cpanfile是缓解Mojolicious应用程序部署的好方法。它不仅可以避免在README或INSTALL文件中列出应用程序所需的所有依赖项，而且可以加速部署并使它们更安全，因为它确实可以降低由于依赖项版本不良而导致的错误风险。\n"},"name":"第二十二天 - 使用 Carton 进行 Mojolicious 应用程序部署","published":"2018-12-22T14:29:15Z","summary":"你有一个可爱的Mojolicious应用程序，它是时候部署它了！\n但是\u0026hellip;\u0026hellip;它不能在生产服务器上运行！到底是怎么回事？哦，不，您所依赖的模块与开发服务器上的版本不同。你能做什么？\n实际上，一些模块发展得很快（Hello Mojolicious！），这没有毛病，但可能会导致不兼容的变化。\n还有一些可以在版本中解决或引入的错误，如果您的版本错误，则会遇到这些错误。\nCpanfile来救援 Cpanfile是一种用于描述Perl应用程序的CPAN依赖关系的格式。\n有了cpanfile，我们可以列出我们需要的模块，但我们也可以强制模块的最小版本，它们的最大版本\u0026hellip;\u0026hellip;或者说“我想要那个模块的确切版本”。\n但我们也可以列出可选模块：您可以支持不同的数据库，但如果用户想要使用PostgreSQL，则不必安装与MySQL相关的模块。\n这是一个例子cpanfile：\n# Do not ask for a specific version requires \u0026#39;DateTime\u0026#39;; # Ask a specific version requires \u0026#39;Plack\u0026#39;, \u0026#39;== 1.0\u0026#39;; # Ask a minimal version requires \u0026#39;Net::DNS\u0026#39;, \u0026#39;\u0026gt;= 1.12\u0026#39;; # Or requires \u0026#39;Net::DNS\u0026#39;, \u0026#39;1.12\u0026#39;; # Ask a maximal version requires \u0026#39;Locale::Maketext\u0026#39;, \u0026#39;\u0026lt; 1.28\u0026#39;; # Give a range requires \u0026#39;Mojolicious\u0026#39;, \u0026#39;\u0026gt;= 7.0, \u0026lt; 8.0\u0026#39;; # Optional modules feature \u0026#39;postgresql\u0026#39;, \u0026#39;PostgreSQL support\u0026#39; =\u0026gt; sub { requires \u0026#39;Mojo::Pg\u0026#39;; }; feature \u0026#39;mysql\u0026#39;, \u0026#39;MySQL support\u0026#39; =\u0026gt; sub { requires \u0026#39;Mojo::mysql\u0026#39;; }; feature \u0026#39;ldap\u0026#39;, \u0026#39;LDAP authentication support\u0026#39; =\u0026gt; sub { requires \u0026#39;Net::LDAP\u0026#39;; }; Cpanfile格式可以做更多（推荐模块，用于特定阶段（需求configure，test\u0026hellip;），使用没有公布关于CPAN \u0026hellip;模块），但是这是一个关于 Carton 的文章：我让你读cpanfile文档🙂","type":"entry","url":"https://ohmyweekly.github.io/notes/use-carton-for-your-mojolicious-app-deployment/"}