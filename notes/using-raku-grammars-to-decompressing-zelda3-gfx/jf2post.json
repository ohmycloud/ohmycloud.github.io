{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003cp\u003e\u003ca href=\"http://blogs.perl.org/users/sylvain_colinet/2019/01/mis-using-perl-6-grammars-decompressing-zelda-3-gfx.html\"\u003egrammars\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGrammar 结合 actions 可以解析字符串并从字符串中产生一些东西。如果说任何压缩后的数据遵循可能由相应的解压缩算法“解析”的结构，那就不足为奇了。\u003c/p\u003e\n\u003cp\u003e那么为什么不使用 Raku Grammar 进行这类工作呢？特别是我熟悉的压缩。\u003c/p\u003e\n\u003ch2 id=\"深入研究任天堂压缩\"\u003e深入研究任天堂压缩\u003c/h2\u003e\n\u003cp\u003e任天堂在他们的 SNES 游戏中使用了相同的基本压缩格式，并根据游戏使用了一些变体。这非常简单，在 ~2Mhz 的 SNES CPU 上很容易。\u003c/p\u003e\n\u003cp\u003e它是这样的：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026lt;a byte that contains an header\u0026gt;\n    the header is split into 2 parts :\n        the 3 left most bits form a command number\n        The 5 other bits code the lenght associated with the command\n\u0026lt;An arbitrary number of bytes associated with the command\u0026gt;\n\u0026lt;repeat until the header is \\xFF\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e命令取决于游戏，但是 Zelda 3 的命令非常简单\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e0 复制：基本上是无压缩命令：复制以下字节\u003c/li\u003e\n\u003cli\u003e1 字节重复：重复以下字节 length 次\u003c/li\u003e\n\u003cli\u003e2 单词重复：重复以下单词（SNES为2个字节）length/2 次\u003c/li\u003e\n\u003cli\u003e3 字节增量：重复相同的字节 length 次，但也增加它\u003c/li\u003e\n\u003cli\u003e4 重复现有：从给定的偏移量（2字节）复制已经未压缩的数据\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其他游戏添加了变体，如最后一个，但对数据执行 OR/XOR/AND。\u003c/p\u003e\n\u003ch2 id=\"grammar\"\u003eGrammar\u003c/h2\u003e\n\u003cp\u003e当我向你展示压缩时，它很容易转换为这种 grammar\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eTOP : \u0026lt;chunk\u0026gt;+? \u0026lt;end\u0026gt;\nend : \\xFF\nchunk : \u0026lt;header\u0026gt; \u0026lt;data\u0026gt;\nheader : \u0026lt;command\u0026gt; \u0026lt;lenght\u0026gt;\ncommand : 0 | 1 | 2 | 3 | 4\nlenght : \\d\ndata : ???\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这有一些问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edata 的大小取决于 command 和 length\u003c/li\u003e\n\u003cli\u003e如何在首部的位级工作\u003c/li\u003e\n\u003cli\u003e为了更有趣一点，如果 command 是 7，header 是2个字节（更长的长度）\u003c/li\u003e\n\u003cli\u003eRaku Grammar 适用于字符串而非二进制数据\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"使用二进制数据\"\u003e使用二进制数据\u003c/h2\u003e\n\u003cp\u003e由于 Grammar 并不真正支持纯二进制数据，因此你必须将最初存储在 buf 中的数据作为 \u003ccode\u003elatin1\u003c/code\u003e 编码字符串传递。与 \u003ccode\u003eMyGrammar.parse($buf.decode(\u0026quot;latin1\u0026quot;))\u003c/code\u003e 一样，你可以通过对字符串的字符执行 \u003ccode\u003e.ord\u003c/code\u003e 来访问 \u0026lsquo;byte\u0026rsquo; 的值。\u003c/p\u003e\n\u003ch2 id=\"验证-header-格式\"\u003e验证 header 格式\u003c/h2\u003e\n\u003cp\u003eGrammars 是使用正则表达式创建的，因此我们需要查看是否可以将值与条件匹配。这很简单，你在匹配后添加 \u003ccode\u003e\u0026lt;?{ some condition }\u0026gt;\u003c/code\u003e，发生匹配就检查条件是否成立。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etoken\u003c/span\u003e \u003cspan class=\"nf\"\u003enormal-header\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003emheader\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"ni\"\u003e.\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eord\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e 0b11100000}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e扩展的 header 有点冗长\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etoken\u003c/span\u003e \u003cspan class=\"nf\"\u003eextended-header\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e    \u003c/span\u003e\u003cspan class=\"nv\"\u003e$\u0026lt;mheader\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"ni\"\u003e.\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecomb\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"nb\"\u003eord\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u0026amp;\u003c/span\u003e \u003cspan class=\"mb\"\u003e0b11100000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mb\"\u003e0b11100000\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以注意到我没有验证这两个 token 中的可能命令，稍后会完成。\u003c/p\u003e\n\u003ch2 id=\"给-ast-添加值\"\u003e给 ast 添加值\u003c/h2\u003e\n\u003cp\u003e可以使用 \u003ccode\u003e{}\u003c/code\u003e 在 token 中添加代码，例如你可以添加 \u003ccode\u003e{ say \u0026quot;I am in token foo\u0026quot; }\u003c/code\u003e 进行某种调试（但使用适当的模块）。你也可以用这个给 ast 添加值。这部分解决了解析数据的问题，因为我们需要捕获 command 和 length 才能正确验证 \u003ccode\u003edata\u003c/code\u003e token。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etoken\u003c/span\u003e \u003cspan class=\"nf\"\u003enormal-header\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e    \u003c/span\u003e\u003cspan class=\"nv\"\u003e$\u0026lt;mheader\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"ni\"\u003e.\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eord\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e 0b11100000 }\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003emake\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s\"\u003ecmd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nf\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$\u0026lt;mheader\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eord\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s\"\u003elenght\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$\u0026lt;mheader\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eord\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u0026amp;\u003c/span\u003e \u003cspan class=\"mb\"\u003e0b00011111\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003emake\u003c/code\u003e 将哈希中的2个条目添加到 \u003ccode\u003enormal-header\u003c/code\u003e token 中。我为命令定义了一个枚举，使它们更具可读性。你可以注意到我给 length 加1，因为0是1。\u003c/p\u003e\n\u003cp\u003e然后，你还需要将这些添加的条目填充到 \u003ccode\u003eheader\u003c/code\u003e token 中，因为我们将在 \u003ccode\u003echunk\u003c/code\u003e token 中使用它们。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etoken\u003c/span\u003e \u003cspan class=\"nf\"\u003eheader\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003enormal-header\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003eextended-header\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003emake\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$\u0026lt;normal-header\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e//\u003c/span\u003e \u003cspan class=\"nv\"\u003e$\u0026lt;extended-header\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003east\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eGrammar 允许我们使用这种语法 \u003ccode\u003e\u0026lt;token(arguments)\u0026gt;\u003c/code\u003e 将参数传递给 token 。我们的 \u003ccode\u003echunk\u003c/code\u003e token 看起来像这样。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etoken\u003c/span\u003e \u003cspan class=\"nf\"\u003echunk\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003eheader\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nv\"\u003e$\u0026lt;header\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003east\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ecmd lenght\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;)\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e空的 \u003ccode\u003e{}\u003c/code\u003e是需要的，否则，ast 显然不会刷新。\u003c/p\u003e\n\u003ch2 id=\"验证命令\"\u003e验证命令\u003c/h2\u003e\n\u003cp\u003e由于我们可以使用关键字 \u003ccode\u003emulti\u003c/code\u003e 像类中的方法一样重载 token ，我们只需要为每个命令生成一个以类似方式工作的 \u003ccode\u003edata\u003c/code\u003e token 。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"k\"\u003etoken\u003c/span\u003e \u003cspan class=\"nf\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCMD_Copy\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$lenght\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"ni\"\u003e.\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$lenght\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"k\"\u003etoken\u003c/span\u003e \u003cspan class=\"nf\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$cmd\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"nv\"\u003e$cmd\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eCMD_ByteRepeat\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eCMD_ByteInc\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$lenght\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"ni\"\u003e.\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"k\"\u003etoken\u003c/span\u003e \u003cspan class=\"nf\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$cmd\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"nv\"\u003e$cmd\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eCMD_WordRepeat\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eCMD_CopyExisting\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$lenght\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"ni\"\u003e.\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"测试\"\u003e测试\u003c/h2\u003e\n\u003cp\u003e我已经为我的C实现编写了一些测试（你可以在 \u003ca href=\"https://github.com/Skarsnik/sneshacking/tree/master/src\"\u003ehttps://github.com/Skarsnik/sneshacking/tree/master/src\u003c/a\u003e 找到它们）。我尝试了其中一些，但这里是一个使用当前 grammar 运行的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$buf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf8\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003eBUILD_SHEADER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCMD_ByteRepeat\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003eBUILD_SHEADER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCMD_Copy\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003eBUILD_SHEADER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCMD_WordRepeat\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e22\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xFF\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003eAlttpDecompression\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$buf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003edecode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003elatin1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这输出：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e｢\u0026#34;*\u0003\u0001\u0002\u0003\u0004A\u000b\u0016ÿ｣\n chunk =\u0026gt; ｢\u0026#34;*｣\n  header =\u0026gt; ｢\u0026#34;｣\n   normal-header =\u0026gt; ｢\u0026#34;｣\n    mheader =\u0026gt; ｢\u0026#34;｣\n  data =\u0026gt; ｢*｣\n chunk =\u0026gt; ｢\u0003\u0001\u0002\u0003\u0004｣\n  header =\u0026gt; ｢\u0003｣\n   normal-header =\u0026gt; ｢\u0003｣\n    mheader =\u0026gt; ｢\u0003｣\n  data =\u0026gt; ｢\u0001\u0002\u0003\u0004｣\n chunk =\u0026gt; ｢A\u000b\u0016｣\n  header =\u0026gt; ｢A｣\n   normal-header =\u0026gt; ｢A｣\n    mheader =\u0026gt; ｢A｣\n  data =\u0026gt; ｢\u000b\u0016｣\n stop =\u0026gt; ｢ÿ｣\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e除了查看 token 是否被正确解析之外，这不是很有用，所以我在 chunk token 的末尾添加了 \u003ccode\u003e{say $\u0026lt;header\u0026gt;.ast\u0026lt;cmd lenght\u0026gt;, $\u0026lt;data\u0026gt;.Str.chars}\u003c/code\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e(CMD_ByteRepeat 3)1\n(CMD_Copy 4)4\n(CMD_WordRepeat 2)2\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"解压缩数据\"\u003e解压缩数据\u003c/h2\u003e\n\u003cp\u003e现在我们有一个可以验证 Zelda 3 压缩数据的 grammar，让我们继续解压缩它们，因为它只是验证数据并不是真的有用。\u003c/p\u003e\n\u003cp\u003e我们可能已经使用 \u003ccode\u003e{}\u003c/code\u003e 和 make 块在 grammar 中完成了这个，我选择使用 \u003ccode\u003eAction\u003c/code\u003e。 Action 很容易实现，你只需使用 grammar 中 token 命名的方法创建一个类。我们不需要为每个 token 都搞一个方法，在我们的例子中，只有 \u0026lsquo;chunk\u0026rsquo; token 是我们感兴趣的，因为它包含构建解压缩数据的所有信息。\u003c/p\u003e\n\u003cp\u003e由于我不确定你应该如何返回除了带有 action 的修改过的 ast 之外的其他东西，我只是添加了一个 \u003ccode\u003eresult\u003c/code\u003e 属性并将一个实例化的 Action 传递给 grammar 而不仅仅是类。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eDecompressAction\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf8\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.result\u003c/span\u003e \u003cspan class=\"o\"\u003e.=\u003c/span\u003e \u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nf\"\u003echunk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eprocess-cmd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003eheader\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003east\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ecmd\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003eheader\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003east\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003elenght\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"kt\"\u003eStr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eencode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003elatin1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后每个 \u003ccode\u003eprocess-cmd\u003c/code\u003e multi 方法将数据构建到 \u003ccode\u003eresult\u003c/code\u003e 中。\u003c/p\u003e\n\u003cp\u003e拷贝非常简单。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess-cmd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCMD_Copy\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$lenght\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$data\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$!result\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$data\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess-cmd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCMD_CopyExisting\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$lenght\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$data\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$!result\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$!result\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esubbuf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$data\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eread-uint16\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLittleEndian\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$lenght\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这是一个更有趣的因为如果我们想要解压缩地图数据，我们只需要更改用于解码偏移的字节序而不改变解压缩的其余部分。 （并且，是的，ROM 上有相同的解压缩程序的2个副本，只有2个指令已更改\u0026hellip;）\u003c/p\u003e\n\u003cp\u003e让我们尝试使用之前展示的压缩字符串。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$buf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf8\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003eBUILD_SHEADER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCMD_ByteRepeat\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003eBUILD_SHEADER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCMD_Copy\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003eBUILD_SHEADER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCMD_WordRepeat\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e22\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xFF\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$data\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAlttpDecompression\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$buf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003edecode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003elatin1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eactions\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDecompressAction\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eactions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$testdata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf8\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e22\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$data\u003c/span\u003e \u003cspan class=\"ow\"\u003eeq\u003c/span\u003e \u003cspan class=\"nv\"\u003e$testdata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我添加了一些调试，以便我们可以看到它如何流动\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eskarsnik@DESKTOP-UIA12T1:/mnt/f/Project/Raku/grammar$ raku alttpcompression.p6\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTo decompress : Buf\u003cspan class=\"o\"\u003e[\u003c/span\u003euint8\u003cspan class=\"o\"\u003e]\u003c/span\u003e:0x\u0026lt;\u003cspan class=\"m\"\u003e22\u003c/span\u003e 2a \u003cspan class=\"m\"\u003e03\u003c/span\u003e \u003cspan class=\"m\"\u003e01\u003c/span\u003e \u003cspan class=\"m\"\u003e02\u003c/span\u003e \u003cspan class=\"m\"\u003e03\u003c/span\u003e \u003cspan class=\"m\"\u003e04\u003c/span\u003e \u003cspan class=\"m\"\u003e41\u003c/span\u003e 0b \u003cspan class=\"m\"\u003e16\u003c/span\u003e ff\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDecompressed  : Buf\u003cspan class=\"o\"\u003e[\u003c/span\u003euint8\u003cspan class=\"o\"\u003e]\u003c/span\u003e:0x\u0026lt;2a 2a 2a \u003cspan class=\"m\"\u003e01\u003c/span\u003e \u003cspan class=\"m\"\u003e02\u003c/span\u003e \u003cspan class=\"m\"\u003e03\u003c/span\u003e \u003cspan class=\"m\"\u003e04\u003c/span\u003e 0b 16\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eCMD_ByteRepeat 3\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eChunk : CMD_ByteRepeat \u003cspan class=\"m\"\u003e3\u003c/span\u003e : Blob\u003cspan class=\"o\"\u003e[\u003c/span\u003euint8\u003cspan class=\"o\"\u003e]\u003c/span\u003e:0x\u0026lt;2a\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$.result : Buf\u003cspan class=\"o\"\u003e[\u003c/span\u003euint8\u003cspan class=\"o\"\u003e]\u003c/span\u003e:0x\u0026lt;2a 2a 2a\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eCMD_Copy 4\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eChunk : CMD_Copy \u003cspan class=\"m\"\u003e4\u003c/span\u003e : Blob\u003cspan class=\"o\"\u003e[\u003c/span\u003euint8\u003cspan class=\"o\"\u003e]\u003c/span\u003e:0x\u0026lt;\u003cspan class=\"m\"\u003e01\u003c/span\u003e \u003cspan class=\"m\"\u003e02\u003c/span\u003e \u003cspan class=\"m\"\u003e03\u003c/span\u003e 04\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$.result : Buf\u003cspan class=\"o\"\u003e[\u003c/span\u003euint8\u003cspan class=\"o\"\u003e]\u003c/span\u003e:0x\u0026lt;2a 2a 2a \u003cspan class=\"m\"\u003e01\u003c/span\u003e \u003cspan class=\"m\"\u003e02\u003c/span\u003e \u003cspan class=\"m\"\u003e03\u003c/span\u003e 04\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eCMD_WordRepeat 2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eChunk : CMD_WordRepeat \u003cspan class=\"m\"\u003e2\u003c/span\u003e : Blob\u003cspan class=\"o\"\u003e[\u003c/span\u003euint8\u003cspan class=\"o\"\u003e]\u003c/span\u003e:0x\u0026lt;0b 16\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$.result : Buf\u003cspan class=\"o\"\u003e[\u003c/span\u003euint8\u003cspan class=\"o\"\u003e]\u003c/span\u003e:0x\u0026lt;2a 2a 2a \u003cspan class=\"m\"\u003e01\u003c/span\u003e \u003cspan class=\"m\"\u003e02\u003c/span\u003e \u003cspan class=\"m\"\u003e03\u003c/span\u003e \u003cspan class=\"m\"\u003e04\u003c/span\u003e 0b 16\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTrue\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"真实数据\"\u003e真实数据\u003c/h2\u003e\n\u003cp\u003e使用精心设计的数据进行测试很不错，但让我们看看这种解压缩如何与真实游戏数据一起执行。我已经有一个工具从ROM文件中提取和注入包含此压缩的GFX。通常你应该看一张表，告诉你GFX（tileset）的每个部分在rom中的位置（使用SNES地址，而不是文件地址），但为了简单起见，我将从已知位置获取数据。这是tileset，用于一些Link动作和他的盾牌。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://blogs.perl.org/users/sylvain_colinet/2019/01/13/actionsprite/someactionsprite.png\" alt=\"img\"\u003e [at 0xc0d64, 3bpp]\u003c/p\u003e\n\u003cp\u003e这是真正的规模和假灰色调色板。压缩数据位于0xC0D64 + 0x200（某些ROM文件有一个特殊的首部），并且是1500字节。大小应该无关紧要，因为我们有办法知道压缩字符串的结尾，但 grammar 不会验证。\u003c/p\u003e\n\u003cp\u003e这是打开此脚本生成的输出时，我的工具中的结果。它和以前完全一样，所以我猜它是成功的:)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://blogs.perl.org/users/sylvain_colinet/decompressed/perl6decompressedsprite.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch2 id=\"结论\"\u003e结论\u003c/h2\u003e\n\u003cp\u003e是的，你可以使用 Raku grammar 解析二进制格式，但是你可以看到访问原始二进制数据的大量解决方法。这是一个有趣的迷你项目，它让我修复了与SNES GFX一起使用的工具上的一些错误（打开独立的 gfx 文件很糟糕）\u003c/p\u003e\n\u003cp\u003e但是，如果我必须在 Raku 中编写更多与 snes 相关的软件，我可能会将我已经在 C 中编写的内容与 NativeCall 绑定，因为它已经经过了很好的测试。\u003c/p\u003e\n\u003cp\u003e你可以在 \u003ca href=\"https://gist.github.com/Skarsnik/b2850dbebabeb4c539444598419d0248\"\u003ehttps://gist.github.com/Skarsnik/b2850dbebabeb4c539444598419d0248\u003c/a\u003e 找到整个代码。\u003c/p\u003e\n\u003cp\u003e用于查看 GFX 的工具可以在\u003ca href=\"https://skarsnik.github.io/SNESTilesKitten/\"\u003eSNESTilesKitten\u003c/a\u003e找到。\u003c/p\u003e\n","text":"grammars\nGrammar 结合 actions 可以解析字符串并从字符串中产生一些东西。如果说任何压缩后的数据遵循可能由相应的解压缩算法“解析”的结构，那就不足为奇了。\n那么为什么不使用 Raku Grammar 进行这类工作呢？特别是我熟悉的压缩。\n深入研究任天堂压缩 任天堂在他们的 SNES 游戏中使用了相同的基本压缩格式，并根据游戏使用了一些变体。这非常简单，在 ~2Mhz 的 SNES CPU 上很容易。\n它是这样的：\n\u0026lt;a byte that contains an header\u0026gt; the header is split into 2 parts : the 3 left most bits form a command number The 5 other bits code the lenght associated with the command \u0026lt;An arbitrary number of bytes associated with the command\u0026gt; \u0026lt;repeat until the header is \\xFF\u0026gt; 命令取决于游戏，但是 Zelda 3 的命令非常简单\n0 复制：基本上是无压缩命令：复制以下字节 1 字节重复：重复以下字节 length 次 2 单词重复：重复以下单词（SNES为2个字节）length/2 次 3 字节增量：重复相同的字节 length 次，但也增加它 4 重复现有：从给定的偏移量（2字节）复制已经未压缩的数据 其他游戏添加了变体，如最后一个，但对数据执行 OR/XOR/AND。\nGrammar 当我向你展示压缩时，它很容易转换为这种 grammar\nTOP : \u0026lt;chunk\u0026gt;+? \u0026lt;end\u0026gt; end : \\xFF chunk : \u0026lt;header\u0026gt; \u0026lt;data\u0026gt; header : \u0026lt;command\u0026gt; \u0026lt;lenght\u0026gt; command : 0 | 1 | 2 | 3 | 4 lenght : \\d data : ??? 这有一些问题：\ndata 的大小取决于 command 和 length 如何在首部的位级工作 为了更有趣一点，如果 command 是 7，header 是2个字节（更长的长度） Raku Grammar 适用于字符串而非二进制数据 使用二进制数据 由于 Grammar 并不真正支持纯二进制数据，因此你必须将最初存储在 buf 中的数据作为 latin1 编码字符串传递。与 MyGrammar.parse($buf.decode(\u0026quot;latin1\u0026quot;)) 一样，你可以通过对字符串的字符执行 .ord 来访问 \u0026lsquo;byte\u0026rsquo; 的值。\n验证 header 格式 Grammars 是使用正则表达式创建的，因此我们需要查看是否可以将值与条件匹配。这很简单，你在匹配后添加 \u0026lt;?{ some condition }\u0026gt;，发生匹配就检查条件是否成立。\ntoken normal-header { \u0026lt;mheader\u0026gt; . \u0026lt;?{ $/.ord \u0026lt; 0b11100000}\u0026gt; } 扩展的 header 有点冗长\ntoken extended-header { $\u0026lt;mheader\u0026gt; = . ** 2 \u0026lt;?{ ($/.comb[0].ord +\u0026amp; 0b11100000) == 0b11100000 }\u0026gt; } 你可以注意到我没有验证这两个 token 中的可能命令，稍后会完成。\n给 ast 添加值 可以使用 {} 在 token 中添加代码，例如你可以添加 { say \u0026quot;I am in token foo\u0026quot; } 进行某种调试（但使用适当的模块）。你也可以用这个给 ast 添加值。这部分解决了解析数据的问题，因为我们需要捕获 command 和 length 才能正确验证 data token。\ntoken normal-header { $\u0026lt;mheader\u0026gt; = . \u0026lt;?{ $/.ord \u0026lt; 0b11100000 }\u0026gt; { make { cmd =\u0026gt; Command($\u0026lt;mheader\u0026gt;.ord +\u0026gt; 5), lenght =\u0026gt; $\u0026lt;mheader\u0026gt;.ord +\u0026amp; 0b00011111 + 1; } } } make 将哈希中的2个条目添加到 normal-header token 中。我为命令定义了一个枚举，使它们更具可读性。你可以注意到我给 length 加1，因为0是1。\n然后，你还需要将这些添加的条目填充到 header token 中，因为我们将在 chunk token 中使用它们。\ntoken header { [ \u0026lt;normal-header\u0026gt; | \u0026lt;extended-header\u0026gt; ] { make ($\u0026lt;normal-header\u0026gt; // $\u0026lt;extended-header\u0026gt; ).ast } } Grammar 允许我们使用这种语法 \u0026lt;token(arguments)\u0026gt; 将参数传递给 token 。我们的 chunk token 看起来像这样。\ntoken chunk { \u0026lt;header\u0026gt; {} \u0026lt;data(|$\u0026lt;header\u0026gt;.ast\u0026lt;cmd lenght\u0026gt;)\u0026gt; } 空的 {}是需要的，否则，ast 显然不会刷新。\n验证命令 由于我们可以使用关键字 multi 像类中的方法一样重载 token ，我们只需要为每个命令生成一个以类似方式工作的 data token 。\nmulti token data(CMD_Copy, $lenght) { . ** {$lenght} } multi token data($cmd where $cmd == CMD_ByteRepeat | CMD_ByteInc, $lenght) { . } multi token data($cmd where $cmd == CMD_WordRepeat | CMD_CopyExisting, $lenght) { . ** 2 } 测试 我已经为我的C实现编写了一些测试（你可以在 https://github.com/Skarsnik/sneshacking/tree/master/src 找到它们）。我尝试了其中一些，但这里是一个使用当前 grammar 运行的例子。\nmy $buf = buf8.new(BUILD_SHEADER(CMD_ByteRepeat, 3), 42, BUILD_SHEADER(CMD_Copy, 4), 1, 2, 3, 4, BUILD_SHEADER(CMD_WordRepeat, 2), 11, 22, 0xFF); say AlttpDecompression.parse($buf.decode(\u0026#34;latin1\u0026#34;)); 这输出：\n｢\u0026#34;*\u0003\u0001\u0002\u0003\u0004A\u000b\u0016ÿ｣ chunk =\u0026gt; ｢\u0026#34;*｣ header =\u0026gt; ｢\u0026#34;｣ normal-header =\u0026gt; ｢\u0026#34;｣ mheader =\u0026gt; ｢\u0026#34;｣ data =\u0026gt; ｢*｣ chunk =\u0026gt; ｢\u0003\u0001\u0002\u0003\u0004｣ header =\u0026gt; ｢\u0003｣ normal-header =\u0026gt; ｢\u0003｣ mheader =\u0026gt; ｢\u0003｣ data =\u0026gt; ｢\u0001\u0002\u0003\u0004｣ chunk =\u0026gt; ｢A\u000b\u0016｣ header =\u0026gt; ｢A｣ normal-header =\u0026gt; ｢A｣ mheader =\u0026gt; ｢A｣ data =\u0026gt; ｢\u000b\u0016｣ stop =\u0026gt; ｢ÿ｣ 除了查看 token 是否被正确解析之外，这不是很有用，所以我在 chunk token 的末尾添加了 {say $\u0026lt;header\u0026gt;.ast\u0026lt;cmd lenght\u0026gt;, $\u0026lt;data\u0026gt;.Str.chars}\n(CMD_ByteRepeat 3)1 (CMD_Copy 4)4 (CMD_WordRepeat 2)2 解压缩数据 现在我们有一个可以验证 Zelda 3 压缩数据的 grammar，让我们继续解压缩它们，因为它只是验证数据并不是真的有用。\n我们可能已经使用 {} 和 make 块在 grammar 中完成了这个，我选择使用 Action。 Action 很容易实现，你只需使用 grammar 中 token 命名的方法创建一个类。我们不需要为每个 token 都搞一个方法，在我们的例子中，只有 \u0026lsquo;chunk\u0026rsquo; token 是我们感兴趣的，因为它包含构建解压缩数据的所有信息。\n由于我不确定你应该如何返回除了带有 action 的修改过的 ast 之外的其他东西，我只是添加了一个 result 属性并将一个实例化的 Action 传递给 grammar 而不仅仅是类。\nclass DecompressAction { has buf8 $.result .= new; method chunk($/) { self.process-cmd($/\u0026lt;header\u0026gt;.ast\u0026lt;cmd\u0026gt;, $/\u0026lt;header\u0026gt;.ast\u0026lt;lenght\u0026gt;, $/\u0026lt;data\u0026gt;.Str.encode(\u0026#34;latin1\u0026#34;)); } 然后每个 process-cmd multi 方法将数据构建到 result 中。\n拷贝非常简单。\nmulti method process-cmd(CMD_Copy, $lenght, $data) { $!result.append($data) } multi method process-cmd(CMD_CopyExisting, $lenght, $data) { $!result.append($!result.subbuf($data.read-uint16(0, LittleEndian), $lenght)) } 这是一个更有趣的因为如果我们想要解压缩地图数据，我们只需要更改用于解码偏移的字节序而不改变解压缩的其余部分。 （并且，是的，ROM 上有相同的解压缩程序的2个副本，只有2个指令已更改\u0026hellip;）\n让我们尝试使用之前展示的压缩字符串。\nmy $buf = buf8.new(BUILD_SHEADER(CMD_ByteRepeat, 3), 42, BUILD_SHEADER(CMD_Copy, 4), 1, 2, 3, 4, BUILD_SHEADER(CMD_WordRepeat, 2), 11, 22, 0xFF); my $data = AlttpDecompression.parse($buf.decode(\u0026#34;latin1\u0026#34;), :actions(DecompressAction.new)).actions.result; my $testdata = buf8.new(42, 42, 42, 1, 2, 3, 4, 11, 22); say $data eq $testdata; 我添加了一些调试，以便我们可以看到它如何流动\nskarsnik@DESKTOP-UIA12T1:/mnt/f/Project/Raku/grammar$ raku alttpcompression.p6 To decompress : Buf[uint8]:0x\u0026lt;22 2a 03 01 02 03 04 41 0b 16 ff\u0026gt; Decompressed : Buf[uint8]:0x\u0026lt;2a 2a 2a 01 02 03 04 0b 16\u0026gt; (CMD_ByteRepeat 3)1 Chunk : CMD_ByteRepeat 3 : Blob[uint8]:0x\u0026lt;2a\u0026gt; $.result : Buf[uint8]:0x\u0026lt;2a 2a 2a\u0026gt; (CMD_Copy 4)4 Chunk : CMD_Copy 4 : Blob[uint8]:0x\u0026lt;01 02 03 04\u0026gt; $.result : Buf[uint8]:0x\u0026lt;2a 2a 2a 01 02 03 04\u0026gt; (CMD_WordRepeat 2)2 Chunk : CMD_WordRepeat 2 : Blob[uint8]:0x\u0026lt;0b 16\u0026gt; $.result : Buf[uint8]:0x\u0026lt;2a 2a 2a 01 02 03 04 0b 16\u0026gt; True 真实数据 使用精心设计的数据进行测试很不错，但让我们看看这种解压缩如何与真实游戏数据一起执行。我已经有一个工具从ROM文件中提取和注入包含此压缩的GFX。通常你应该看一张表，告诉你GFX（tileset）的每个部分在rom中的位置（使用SNES地址，而不是文件地址），但为了简单起见，我将从已知位置获取数据。这是tileset，用于一些Link动作和他的盾牌。\n[at 0xc0d64, 3bpp]\n这是真正的规模和假灰色调色板。压缩数据位于0xC0D64 + 0x200（某些ROM文件有一个特殊的首部），并且是1500字节。大小应该无关紧要，因为我们有办法知道压缩字符串的结尾，但 grammar 不会验证。\n这是打开此脚本生成的输出时，我的工具中的结果。它和以前完全一样，所以我猜它是成功的:)\n结论 是的，你可以使用 Raku grammar 解析二进制格式，但是你可以看到访问原始二进制数据的大量解决方法。这是一个有趣的迷你项目，它让我修复了与SNES GFX一起使用的工具上的一些错误（打开独立的 gfx 文件很糟糕）\n但是，如果我必须在 Raku 中编写更多与 snes 相关的软件，我可能会将我已经在 C 中编写的内容与 NativeCall 绑定，因为它已经经过了很好的测试。\n你可以在 https://gist.github.com/Skarsnik/b2850dbebabeb4c539444598419d0248 找到整个代码。\n用于查看 GFX 的工具可以在SNESTilesKitten找到。\n"},"name":"使用 Raku Grammars 解压缩 Zelda 3 GFX","published":"2019-01-15T10:37:24Z","summary":"grammars\nGrammar 结合 actions 可以解析字符串并从字符串中产生一些东西。如果说任何压缩后的数据遵循可能由相应的解压缩算法“解析”的结构，那就不足为奇了。\n那么为什么不使用 Raku Grammar 进行这类工作呢？特别是我熟悉的压缩。\n深入研究任天堂压缩 任天堂在他们的 SNES 游戏中使用了相同的基本压缩格式，并根据游戏使用了一些变体。这非常简单，在 ~2Mhz 的 SNES CPU 上很容易。\n它是这样的：\n\u0026lt;a byte that contains an header\u0026gt; the header is split into 2 parts : the 3 left most bits form a command number The 5 other bits code the lenght associated with the command \u0026lt;An arbitrary number of bytes associated with the command\u0026gt; \u0026lt;repeat until the header is \\xFF\u0026gt; 命令取决于游戏，但是 Zelda 3 的命令非常简单","type":"entry","url":"https://ohmyweekly.github.io/notes/using-raku-grammars-to-decompressing-zelda3-gfx/"}