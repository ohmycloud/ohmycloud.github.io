{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003cp\u003e欢迎来到 \u003cstrong\u003eRaku One-Liner Advent Calendar\u003c/strong\u003e 的第\u003ca href=\"https://raku.online/2018/12/20/using-command-line-options-in-perl-6-one-liners/\"\u003e20\u003c/a\u003e天！到目前为止，我们创建了大约25种不同的单行程序，但从未讨论过\u003ca href=\"https://rakudo.org/\"\u003eRakudo Raku编译器\u003c/a\u003e为我们提供的命令行选项。\u003c/p\u003e\n\u003ch2 id=\"-e\"\u003e-e\u003c/h2\u003e\n\u003cp\u003e使用（Rakudo）Raku时的第一个选项是\u003ccode\u003e-e\u003c/code\u003e。它需要一个带有Raku单行程序的字符串并立即执行。\u003c/p\u003e\n\u003cp\u003e例如，打印当前Raku规范的版本：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ raku -e\u003cspan class=\"s1\"\u003e\u0026#39;$ * PERL.version.say\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ev6.c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意不要使用Perl 5.10+样式的大写字母 \u003ccode\u003e-E\u003c/code\u003e，它与\u003ccode\u003e-e\u003c/code\u003e相同，但也激活诸如 \u003ccode\u003esay\u003c/code\u003e 之类的功能。在Raku中，选项始终为小写。\u003c/p\u003e\n\u003ch2 id=\"-n\"\u003e-n\u003c/h2\u003e\n\u003cp\u003e此选项为每行输入数据重复运行代码。当您想要处理文件时，这非常方便。例如，这是一个单行程序，将行中的值相加并打印总和：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eraku -ne\u003cspan class=\"s1\"\u003e\u0026#39;say [+] .split(\u0026#34; \u0026#34;)\u0026#39;\u003c/span\u003e data.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果data.txt文件包含以下内容：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e10 20 30 40 \n1 2 3 4 \n5 6 7 8\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后单行程序的结果是：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e100 \n10 \n26\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这与你是否使用shell的输入重定向没有区别; 以下单行程序也有效：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eraku -ne\u003cspan class=\"s1\"\u003e\u0026#39;say [+] .split(\u0026#34; \u0026#34;)\u0026#39;\u003c/span\u003e \u0026lt; data.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e确保将 \u003cstrong\u003ee\u003c/strong\u003e 选项放在选项列表中的最后一个（因此，不是\u003ccode\u003eraku -en'...'\u003c/code\u003e）或拆分选项：\u003ccode\u003eraku -n -e'...'\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"-p\"\u003e-p\u003c/h2\u003e\n\u003cp\u003e此选项类似于\u003ccode\u003e-n\u003c/code\u003e，但在每次迭代后打印主题变量。\u003c/p\u003e\n\u003cp\u003e以下单行程序反转文件中的行并将其打印到控制台：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eraku -npe\u003cspan class=\"s1\"\u003e\u0026#39;.=flip\u0026#39;\u003c/span\u003e data.txt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对于相同的输入文件，结果将如下所示：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e04 03 02 01 \n4 3 2 1 \n8 7 6 5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e请注意，您必须更新\u003ccode\u003e$_\u003c/code\u003e变量，因此键入\u003ccode\u003e.=flip\u003c/code\u003e。如果你只有\u003ccode\u003e.flip\u003c/code\u003e，你将反转字符串，但不会使用该结果并打印原始行。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003e.flip\u003c/code\u003e且没有\u003ccode\u003e-p\u003c/code\u003e 选项的等效程序将如下所示：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eraku -ne\u0026#39;.flip.say\u0026#39;data.txt\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"派对之后\"\u003e派对之后\u003c/h2\u003e\n\u003cp\u003e让我们来看看\u003ca href=\"http://allperlbooks.com/book/en/perl-one-liners\"\u003e\u003cem\u003ePerl One-Liners\u003c/em\u003e\u003c/a\u003e书中的几个单行程序，并在Raku中创建相应的单行程序。\u003c/p\u003e\n\u003ch3 id=\"double-space-a-file\"\u003eDouble-space a file\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eraku -npe\u003cspan class=\"s1\"\u003e\u0026#39;s/$/\\n/\u0026#39;\u003c/span\u003e text.txt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"删除所有空行\"\u003e删除所有空行\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eraku -ne\u003cspan class=\"s1\"\u003e\u0026#39;.say if .chars\u0026#39;\u003c/span\u003e text.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e根据您定义“空白”的方式，您可能需要另一个跳过包含空格的行的单行程序：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eraku -ne\u003cspan class=\"s1\"\u003e\u0026#39;.say if /\\S/\u0026#39;\u003c/span\u003e text.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"对文件中的所有行进行编号\"\u003e对文件中的所有行进行编号\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eraku -ne\u003cspan class=\"s1\"\u003e\u0026#39;say ++$ ~ \u0026#34;. \u0026#34; ~ $_\u0026#39;\u003c/span\u003e text.txt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这段代码可能需要注释。在 \u003ca href=\"https://docs.raku.org/language/variables#The_$_variable\"\u003e$\u003c/a\u003e \u003ca href=\"https://docs.raku.org/language/variables#The_$_variable\"\u003e变量\u003c/a\u003e是一个状态变量，它不用声明就可使用。\u003c/p\u003e\n\u003ch3 id=\"将所有文本转换为大写\"\u003e将所有文本转换为大写\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eraku -npe\u003cspan class=\"s1\"\u003e\u0026#39;.=uc\u0026#39;\u003c/span\u003e text.txt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"从每行的开头和结尾剥去空格\"\u003e从每行的开头和结尾剥去空格\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eraku -npe\u003cspan class=\"s1\"\u003e\u0026#39;.=trim\u0026#39;\u003c/span\u003e text.txt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"打印文件的第一行\"\u003e打印文件的第一行\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eraku -ne\u003cspan class=\"s1\"\u003e\u0026#39;.say ; exit\u0026#39;\u003c/span\u003e text.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"打印文件的前10行\"\u003e打印文件的前10行\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eraku -npe\u003cspan class=\"s1\"\u003e\u0026#39;exit if $++ == 10\u0026#39;\u003c/span\u003e text.txt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这一次，后缀\u003ccode\u003e++\u003c/code\u003e被应用于\u003ccode\u003e$\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e我希望今天这是一次有益的旅程。明天见！\u003c/p\u003e\n","text":"欢迎来到 Raku One-Liner Advent Calendar 的第20天！到目前为止，我们创建了大约25种不同的单行程序，但从未讨论过Rakudo Raku编译器为我们提供的命令行选项。\n-e 使用（Rakudo）Raku时的第一个选项是-e。它需要一个带有Raku单行程序的字符串并立即执行。\n例如，打印当前Raku规范的版本：\n$ raku -e\u0026#39;$ * PERL.version.say\u0026#39; v6.c 注意不要使用Perl 5.10+样式的大写字母 -E，它与-e相同，但也激活诸如 say 之类的功能。在Raku中，选项始终为小写。\n-n 此选项为每行输入数据重复运行代码。当您想要处理文件时，这非常方便。例如，这是一个单行程序，将行中的值相加并打印总和：\nraku -ne\u0026#39;say [+] .split(\u0026#34; \u0026#34;)\u0026#39; data.txt 如果data.txt文件包含以下内容：\n10 20 30 40 1 2 3 4 5 6 7 8 然后单行程序的结果是：\n100 10 26 这与你是否使用shell的输入重定向没有区别; 以下单行程序也有效：\nraku -ne\u0026#39;say [+] .split(\u0026#34; \u0026#34;)\u0026#39; \u0026lt; data.txt 确保将 e 选项放在选项列表中的最后一个（因此，不是raku -en'...'）或拆分选项：raku -n -e'...'。\n-p 此选项类似于-n，但在每次迭代后打印主题变量。\n以下单行程序反转文件中的行并将其打印到控制台：\nraku -npe\u0026#39;.=flip\u0026#39; data.txt 对于相同的输入文件，结果将如下所示：\n04 03 02 01 4 3 2 1 8 7 6 5 请注意，您必须更新$_变量，因此键入.=flip。如果你只有.flip，你将反转字符串，但不会使用该结果并打印原始行。\n使用.flip且没有-p 选项的等效程序将如下所示：\nraku -ne\u0026#39;.flip.say\u0026#39;data.txt 派对之后 让我们来看看Perl One-Liners书中的几个单行程序，并在Raku中创建相应的单行程序。\nDouble-space a file raku -npe\u0026#39;s/$/\\n/\u0026#39; text.txt 删除所有空行 raku -ne\u0026#39;.say if .chars\u0026#39; text.txt 根据您定义“空白”的方式，您可能需要另一个跳过包含空格的行的单行程序：\nraku -ne\u0026#39;.say if /\\S/\u0026#39; text.txt 对文件中的所有行进行编号 raku -ne\u0026#39;say ++$ ~ \u0026#34;. \u0026#34; ~ $_\u0026#39; text.txt 这段代码可能需要注释。在 $ 变量是一个状态变量，它不用声明就可使用。\n将所有文本转换为大写 raku -npe\u0026#39;.=uc\u0026#39; text.txt 从每行的开头和结尾剥去空格 raku -npe\u0026#39;.=trim\u0026#39; text.txt 打印文件的第一行 raku -ne\u0026#39;.say ; exit\u0026#39; text.txt 打印文件的前10行 raku -npe\u0026#39;exit if $++ == 10\u0026#39; text.txt 这一次，后缀++被应用于$。\n我希望今天这是一次有益的旅程。明天见！\n"},"name":"🎄 20/25. 在 Raku 单行程序中使用命令行选项","published":"2018-12-20T09:13:47Z","summary":"欢迎来到 Raku One-Liner Advent Calendar 的第20天！到目前为止，我们创建了大约25种不同的单行程序，但从未讨论过Rakudo Raku编译器为我们提供的命令行选项。\n-e 使用（Rakudo）Raku时的第一个选项是-e。它需要一个带有Raku单行程序的字符串并立即执行。\n例如，打印当前Raku规范的版本：\n$ raku -e\u0026#39;$ * PERL.version.say\u0026#39; v6.c 注意不要使用Perl 5.10+样式的大写字母 -E，它与-e相同，但也激活诸如 say 之类的功能。在Raku中，选项始终为小写。\n-n 此选项为每行输入数据重复运行代码。当您想要处理文件时，这非常方便。例如，这是一个单行程序，将行中的值相加并打印总和：\nraku -ne\u0026#39;say [+] .split(\u0026#34; \u0026#34;)\u0026#39; data.txt 如果data.txt文件包含以下内容：\n10 20 30 40 1 2 3 4 5 6 7 8 然后单行程序的结果是：\n100 10 26 这与你是否使用shell的输入重定向没有区别; 以下单行程序也有效：\nraku -ne\u0026#39;say [+] .split(\u0026#34; \u0026#34;)\u0026#39; \u0026lt; data.txt 确保将 e 选项放在选项列表中的最后一个（因此，不是raku -en'...'）或拆分选项：raku -n -e'...'。\n-p 此选项类似于-n，但在每次迭代后打印主题变量。\n以下单行程序反转文件中的行并将其打印到控制台：\nraku -npe\u0026#39;.=flip\u0026#39; data.txt 对于相同的输入文件，结果将如下所示：\n04 03 02 01 4 3 2 1 8 7 6 5 请注意，您必须更新$_变量，因此键入.","type":"entry","url":"https://ohmyweekly.github.io/notes/using-command-line-options-in-raku-one-liners/"}