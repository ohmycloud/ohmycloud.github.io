{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003cp\u003e\u003cimg src=\"https://mojolicious.io/blog/2018/12/07/openapi/banner.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在这几年meta :: hack 3中，我非常幸运地与Joel Berger合作，通过Mojolicious将OpenAPI与MetaCPAN API集成/记录。\u003c/p\u003e\n\u003ch2 id=\"它是什么\"\u003e它是什么？\u003c/h2\u003e\n\u003cp\u003eOpenAPI是用于设计，记录，验证和驱动RESTful API的规范。它可用于为现有API提供文档，或者在创建新API时提供文档。\u003c/p\u003e\n\u003cp\u003eOpenAPI规范起源于Swagger规范，并重命名为将API描述格式（OpenAPI）与开源工具（Swagger）分开。该规范已移至新的GitHub存储库，但未更改。\u003c/p\u003e\n\u003cp\u003e对于MetaCPAN API，我们开始提供现有API的文档，但很快也转向支持API调用的验证。\u003c/p\u003e\n\u003ch2 id=\"工具\"\u003e工具\u003c/h2\u003e\n\u003cp\u003eOpenAPI有许多可用的工具可供帮助，包括有助于编写规范的发现工具。我们选择手动编写定义（当然是vim）并使用工具生成文档并将规范集成到MetaCPAN中。\u003c/p\u003e\n\u003cp\u003eReDoc  -  OpenAPI / Swagger生成的API参考文档\nReDoc创建一个交互式页面，根据OpenAPI规范文件中提供的详细信息提供文档和示例。 ReDoc包含一个HTML模板，用作静态文件，用于自定义文档的显示方式。\u003c/p\u003e\n\u003cp\u003eMojolicious :: Plugin :: OpenAPI  -  Mojolicious的OpenAPI / Swagger插件\n读取OpenAPI规范文件，并为基于Mojolicious的应用程序添加适当的路由和验证。\u003c/p\u003e\n\u003cp\u003eJSON :: Validator  - 根据JSON模式验证数据\n集成到Mojolicious :: Plugin :: OpenAPI模块中，提供输入和输出验证，以及为规范文件本身提供验证。\u003c/p\u003e\n\u003ch2 id=\"入门\"\u003e入门\u003c/h2\u003e\n\u003cp\u003e在实现MetaCPAN OpenAPI规范时使用以下策略。\u003c/p\u003e\n\u003ch2 id=\"openapi-规范文件\"\u003eOpenAPI 规范文件\u003c/h2\u003e\n\u003cp\u003e通过支持多行属性值，可以更轻松地以更少的格式进行读写，我们选择了YAML。还支持JSON。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# Define the version of the OpenAPI spec to use. Version 2.0 still uses\n# swagger as the key\nswagger: \u0026#34;2.0\u0026#34;\n# general information about the API\ninfo:\n  version: \u0026#34;1.0.0\u0026#34;\n  title: \u0026#34;MetaCPAN API\u0026#34;\n# common path shared throughout the API\nbasePath: \u0026#34;/v1\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"定义端点\"\u003e定义端点\u003c/h2\u003e\n\u003cp\u003eAPI可用的每个路径都在路径对象中定义。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epaths:\n  # The path to the endpoint\n  /search/web:\n    # The HTTP method that the endpoint accepts\n    get:\n      # A unique identifier for the method\n      operationId: search_web\n      # This attribute points to the name of the class in the appliction\n      # and the method to call separated by `#`\n      x-mojo-to: Search#web\n      # A description of the API Endpoint\n      summary: Perform API search in the same fashion as the Web UI\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"定义参数\"\u003e定义参数\u003c/h2\u003e\n\u003cp\u003e每种方法都可以定义自己的参数。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# The parameters that the HTTP method accepts\nparameters:\n  # The name of the parameter\n  - name: q\n    # The location to parse the parameter from\n    in: query\n    # Document what the parameter is. This example uses the YAML HEREDOC\n    # syntax to make the description easier to read and write.\n    description: |\n      The query search term. If the search term contains a term with the\n      tags `dist:` or `module:` results will be in expanded form, otherwise\n      collapsed form.\n\n      See also `collapsed`\n    # The type of the value that the API accepts\n    type: string\n    # Define the attribute as required\n    required: true\n  # The rest of the parameters that the API accepts\n  - name: from\n    in: query\n    description: The offset to use in the result set\n    type: integer\n    # If the API applies a default to an attribute if it isn\u0026#39;t specified.\n    # Let the us know what it is.\n    default: 0\n  - name: size\n    in: query\n    description: Number of results per page\n    type: integer\n    default: 20\n  - name: collapsed\n    in: query\n    description: |\n        Force a collapsed even when searching for a particular\n        distribution or module name.\n    type: boolean\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"定义响应\"\u003e定义响应\u003c/h2\u003e\n\u003cp\u003eOpenAPI 规范允许您定义方法调用的每个响应，包括特定和一般错误处理。根据 HTTP 状态代码定义定义。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eresponses:\n  # HTTP 200 response\n  200:\n    description: Search response\n    # The schema defines what the result will look like\n    schema:\n      type: object\n      properties:\n        total:\n          type: integer\n        took:\n          type: number\n        collapsed:\n          type: boolean\n        results:\n          title: Results\n          type: array\n          items:\n            # While items can be further broken into properties per item,\n            # type `object` is a catch all\n            type: object\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"高级定义\"\u003e高级定义\u003c/h2\u003e\n\u003ch2 id=\"通过引用重用定义\"\u003e通过引用重用定义\u003c/h2\u003e\n\u003cp\u003e规范允许通过 \u003ca href=\"https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03\"\u003eJSON引用\u003c/a\u003e 重用。 \u003ccode\u003e$ref\u003c/code\u003e 属性是指向文件和节的相对指针（再次用＃分隔）以包含在指定的点。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e        results:\n          title: Results\n          type: array\n          items:\n            $ref: \u0026#34;../definitions/results.yml#/search_result_items\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ev2.0规范对可以使用引用的位置有限制，这会导致规范文件中的重复。 v3.0规范已经纠正了这些问题，并且还允许http引用。\u003c/p\u003e\n\u003ch2 id=\"可能为空\"\u003e可能为空\u003c/h2\u003e\n\u003cp\u003e有时，对象的属性可能为 \u003ccode\u003enull\u003c/code\u003e。在 MetaCPAN API 中，收藏计数可以是表示有多少人喜欢该分发的整数，也可以是null。使用属性类型的列表允许属性包含两者。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003efavorites:\n  type:\n    - \u0026#34;integer\u0026#34;\n    - \u0026#34;null\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"metacpan-规范\"\u003eMetaCPAN 规范\u003c/h2\u003e\n\u003cp\u003e为了使 OpenAPI 正常运行，整个规范不需要完整。在记录现有 API 时，可以使用 API​​ 的一部分。使用 MetaCPAN，我们从搜索端点开始。\u003c/p\u003e\n\u003cp\u003e可在此处查看 spec 文件，并在此处查看 API 文档\u003c/p\u003e\n\u003ch2 id=\"进一步阅读\"\u003e进一步阅读\u003c/h2\u003e\n\u003cp\u003eOpenAPI 规范存储库包括完整的文档和许多不同级别的详细信息示例。\u003c/p\u003e\n\u003cp\u003eOpenAPI Map 是一个交互式站点，有助于使用 OpenAPI 规范。\u003c/p\u003e\n","text":"\n在这几年meta :: hack 3中，我非常幸运地与Joel Berger合作，通过Mojolicious将OpenAPI与MetaCPAN API集成/记录。\n它是什么？ OpenAPI是用于设计，记录，验证和驱动RESTful API的规范。它可用于为现有API提供文档，或者在创建新API时提供文档。\nOpenAPI规范起源于Swagger规范，并重命名为将API描述格式（OpenAPI）与开源工具（Swagger）分开。该规范已移至新的GitHub存储库，但未更改。\n对于MetaCPAN API，我们开始提供现有API的文档，但很快也转向支持API调用的验证。\n工具 OpenAPI有许多可用的工具可供帮助，包括有助于编写规范的发现工具。我们选择手动编写定义（当然是vim）并使用工具生成文档并将规范集成到MetaCPAN中。\nReDoc - OpenAPI / Swagger生成的API参考文档 ReDoc创建一个交互式页面，根据OpenAPI规范文件中提供的详细信息提供文档和示例。 ReDoc包含一个HTML模板，用作静态文件，用于自定义文档的显示方式。\nMojolicious :: Plugin :: OpenAPI - Mojolicious的OpenAPI / Swagger插件 读取OpenAPI规范文件，并为基于Mojolicious的应用程序添加适当的路由和验证。\nJSON :: Validator - 根据JSON模式验证数据 集成到Mojolicious :: Plugin :: OpenAPI模块中，提供输入和输出验证，以及为规范文件本身提供验证。\n入门 在实现MetaCPAN OpenAPI规范时使用以下策略。\nOpenAPI 规范文件 通过支持多行属性值，可以更轻松地以更少的格式进行读写，我们选择了YAML。还支持JSON。\n# Define the version of the OpenAPI spec to use. Version 2.0 still uses # swagger as the key swagger: \u0026#34;2.0\u0026#34; # general information about the API info: version: \u0026#34;1.0.0\u0026#34; title: \u0026#34;MetaCPAN API\u0026#34; # common path shared throughout the API basePath: \u0026#34;/v1\u0026#34; 定义端点 API可用的每个路径都在路径对象中定义。\npaths: # The path to the endpoint /search/web: # The HTTP method that the endpoint accepts get: # A unique identifier for the method operationId: search_web # This attribute points to the name of the class in the appliction # and the method to call separated by `#` x-mojo-to: Search#web # A description of the API Endpoint summary: Perform API search in the same fashion as the Web UI 定义参数 每种方法都可以定义自己的参数。\n# The parameters that the HTTP method accepts parameters: # The name of the parameter - name: q # The location to parse the parameter from in: query # Document what the parameter is. This example uses the YAML HEREDOC # syntax to make the description easier to read and write. description: | The query search term. If the search term contains a term with the tags `dist:` or `module:` results will be in expanded form, otherwise collapsed form. See also `collapsed` # The type of the value that the API accepts type: string # Define the attribute as required required: true # The rest of the parameters that the API accepts - name: from in: query description: The offset to use in the result set type: integer # If the API applies a default to an attribute if it isn\u0026#39;t specified. # Let the us know what it is. default: 0 - name: size in: query description: Number of results per page type: integer default: 20 - name: collapsed in: query description: | Force a collapsed even when searching for a particular distribution or module name. type: boolean 定义响应 OpenAPI 规范允许您定义方法调用的每个响应，包括特定和一般错误处理。根据 HTTP 状态代码定义定义。\nresponses: # HTTP 200 response 200: description: Search response # The schema defines what the result will look like schema: type: object properties: total: type: integer took: type: number collapsed: type: boolean results: title: Results type: array items: # While items can be further broken into properties per item, # type `object` is a catch all type: object 高级定义 通过引用重用定义 规范允许通过 JSON引用 重用。 $ref 属性是指向文件和节的相对指针（再次用＃分隔）以包含在指定的点。\nresults: title: Results type: array items: $ref: \u0026#34;../definitions/results.yml#/search_result_items\u0026#34; v2.0规范对可以使用引用的位置有限制，这会导致规范文件中的重复。 v3.0规范已经纠正了这些问题，并且还允许http引用。\n可能为空 有时，对象的属性可能为 null。在 MetaCPAN API 中，收藏计数可以是表示有多少人喜欢该分发的整数，也可以是null。使用属性类型的列表允许属性包含两者。\nfavorites: type: - \u0026#34;integer\u0026#34; - \u0026#34;null\u0026#34; MetaCPAN 规范 为了使 OpenAPI 正常运行，整个规范不需要完整。在记录现有 API 时，可以使用 API​​ 的一部分。使用 MetaCPAN，我们从搜索端点开始。\n可在此处查看 spec 文件，并在此处查看 API 文档\n进一步阅读 OpenAPI 规范存储库包括完整的文档和许多不同级别的详细信息示例。\nOpenAPI Map 是一个交互式站点，有助于使用 OpenAPI 规范。\n"},"name":"第七天 - MetaCPAN, Mojolicious 和 OpenAPI","published":"2018-12-07T22:16:24Z","summary":"在这几年meta :: hack 3中，我非常幸运地与Joel Berger合作，通过Mojolicious将OpenAPI与MetaCPAN API集成/记录。\n它是什么？ OpenAPI是用于设计，记录，验证和驱动RESTful API的规范。它可用于为现有API提供文档，或者在创建新API时提供文档。\nOpenAPI规范起源于Swagger规范，并重命名为将API描述格式（OpenAPI）与开源工具（Swagger）分开。该规范已移至新的GitHub存储库，但未更改。\n对于MetaCPAN API，我们开始提供现有API的文档，但很快也转向支持API调用的验证。\n工具 OpenAPI有许多可用的工具可供帮助，包括有助于编写规范的发现工具。我们选择手动编写定义（当然是vim）并使用工具生成文档并将规范集成到MetaCPAN中。\nReDoc - OpenAPI / Swagger生成的API参考文档 ReDoc创建一个交互式页面，根据OpenAPI规范文件中提供的详细信息提供文档和示例。 ReDoc包含一个HTML模板，用作静态文件，用于自定义文档的显示方式。\nMojolicious :: Plugin :: OpenAPI - Mojolicious的OpenAPI / Swagger插件 读取OpenAPI规范文件，并为基于Mojolicious的应用程序添加适当的路由和验证。\nJSON :: Validator - 根据JSON模式验证数据 集成到Mojolicious :: Plugin :: OpenAPI模块中，提供输入和输出验证，以及为规范文件本身提供验证。\n入门 在实现MetaCPAN OpenAPI规范时使用以下策略。\nOpenAPI 规范文件 通过支持多行属性值，可以更轻松地以更少的格式进行读写，我们选择了YAML。还支持JSON。\n# Define the version of the OpenAPI spec to use. Version 2.0 still uses # swagger as the key swagger: \u0026#34;2.0\u0026#34; # general information about the API info: version: \u0026#34;1.","type":"entry","url":"https://ohmyweekly.github.io/notes/metacpan-mojolicious-and-openapi/"}