{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003ch2 id=\"在浏览器中运行-scala\"\u003e在浏览器中运行 Scala\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://scalafiddle.io.\"\u003escalafiddle.io\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"表达式\"\u003e表达式\u003c/h2\u003e\n\u003cp\u003e表达式是可计算的语句。\u003c/p\u003e\n\u003cp\u003e你可以使用 \u003ccode\u003eprintln\u003c/code\u003e 输出表达式的值。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eprintln(1) // 1\nprintln(1+1) // 2\nprintln(\u0026#34;Hello!\u0026#34;) // Hello!\nprintln(\u0026#34;Hello,\u0026#34; + \u0026#34; world!\u0026#34;) // Hello, world!\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"值\"\u003e值\u003c/h2\u003e\n\u003cp\u003e使用 \u003ccode\u003eval\u003c/code\u003e 关键字来命名表达式的值。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eval x = 1 + 1\nprintln(x) // 2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里的命名结果, 例如 \u003ccode\u003ex\u003c/code\u003e, 叫做值。引用一个值不会重新计算它。\n值一旦确定就不能被重新赋值。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eval x = 1+1\nx = 3 // This does not compile.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e值的类型可以被推断出来, 但是你也可以显式的声明它的类型, 像这样:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eval x: Int = 1 + 1\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"变量\"\u003e变量\u003c/h2\u003e\n\u003cp\u003e变量像值一样, 但是你可以给它重新赋值。用 \u003ccode\u003evar\u003c/code\u003e 关键字来定义一个变量。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003evar x = 1 + 1\nx = 3          // This compiles because \u0026#34;x\u0026#34; is declared with the \u0026#34;var\u0026#34; keyword.\nprintln(x * x) // 9\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e像值那样, 你可以显式地声明变量的类型:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003evar x: Int = 1 + 1\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"blocks\"\u003eBlocks\u003c/h2\u003e\n\u003cp\u003e用 \u003ccode\u003e{}\u003c/code\u003e 把多个表达式组合起来。我们把这个 \u003ccode\u003e{}\u003c/code\u003e 叫做 block. block 中的最后一个表达式的结果也是整个 block 的结果。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eprintln({\n  val x = 1 + 1\n  x + 1\n}) // 3\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"函数\"\u003e函数\u003c/h2\u003e\n\u003cp\u003e函数是接受参数的表达式。你可以定义一个返回给定的整数加 1 的函数:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e(x: Int) =\u0026gt; x + 1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e=\u0026gt;\u003c/code\u003e 的左边是参数列表, 右边是引用该参数的表达式。你也可以给这个函数起个名字:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eval addOne = (x: Int) =\u0026gt; x + 1\nprintln(addOne(1)) // 2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e函数可以接收多个参数.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eval add = (x: Int, y:Int) =\u0026gt; x + y\nprintln(add(1,2)) // 3\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e或者函数也可以不接收参数:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eval getTheAnswer = () =\u0026gt; 42\nprintln(getTheAnswer()) // 42\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们会在\u003ca href=\"http://docs.scala-lang.org/tutorials/tour/anonymous-function-syntax.md\"\u003e稍后\u003c/a\u003e深入讲解它。\u003c/p\u003e\n\u003ch2 id=\"方法\"\u003e方法\u003c/h2\u003e\n\u003cp\u003e方法使用 \u003ccode\u003edef\u003c/code\u003e 关键字来定义。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edef add(x: Int, y:Int):Int = x + y\nprintln(add(1,2)) // 3\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e方法不能使用 \u003ccode\u003eval\u003c/code\u003e 或 \u003ccode\u003evar\u003c/code\u003e 关键字来命名。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edef add(x: Int, y:Int): Int = x + y\nval add2 = add // 这不会编译\nvar add3 = add // 这也不会编译\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e方法可以接收多个参数\u003cstrong\u003e列表\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edef addThenMultiply(x: Int, y: Int)(multiplier: Int): Int = (x + y) * multiplier\nprintln(addThenMultiply(1, 2)(3)) // 9\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e或者不接收任何参数：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edef name: String = System.getProperty(\u0026#34;name\u0026#34;)\nprintln(\u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"类\"\u003e类\u003c/h2\u003e\n\u003cp\u003e使用 \u003ccode\u003eclass\u003c/code\u003e 关键字来定义类。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eclass Greeter(prefix: String, suffix: String) {\n  def greet(name: String): Unit = \n    println(prefix + name + suffix)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e你可以使用 \u003ccode\u003enew\u003c/code\u003e 关键字来实例化一个类.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eval greeter = new Greeter(\u0026#34;Hello, \u0026#34;, \u0026#34;!\u0026#34;)\ngreeter.greet(\u0026#34;Scala developer\u0026#34;) // Hello, Scala developer!\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"case-classes\"\u003eCase Classes\u003c/h2\u003e\n\u003cp\u003eScala 有一种叫做 「case」的特殊类。默认地, case 类是不可变的和按值比较的。你可以使用 \u003ccode\u003ecase class\u003c/code\u003e 关键字来定义 case class。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecase class Point(x: Int, y: Int)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e你不用 \u003ccode\u003enew\u003c/code\u003e 关键字就可以实例化 case class.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eval point = Point(1, 2)\nval anotherPoint = Point(1, 2)\nval yetAnotherPoint = Point(2, 2)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e并且它们是按值比较的:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eif (point == anotherPoint) {\n  println(point + \u0026#34; and \u0026#34; + anotherPoint + \u0026#34; are the same.\u0026#34;)\n} else {\n  println(point + \u0026#34; and \u0026#34; + anotherPoint + \u0026#34; are different.\u0026#34;)\n}\n\n// Point(1,2) and Point(1,2) are the same.\nif (point == yetAnotherPoint) {\n  println(point + \u0026#34; and \u0026#34; + yetAnotherPoint + \u0026#34; are the same.\u0026#34;)\n} else {\n  println(point + \u0026#34; and \u0026#34; + yetAnotherPoint + \u0026#34; are different.\u0026#34;)\n}\n// Point(1,2) and Point(2,2) are different.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们还想介绍更多的 case class, 我们确定你会爱上它! 我们会在\u003ca href=\"http://docs.scala-lang.org/tutorials/tour/case-classes.md\"\u003e之后\u003c/a\u003e深入了解它。\u003c/p\u003e\n\u003ch2 id=\"对象\"\u003e对象\u003c/h2\u003e\n\u003cp\u003e对象是它们自身定义的单个实例。你可以把它们当作它们自身类的单例。\n你可以使用 \u003ccode\u003eobject\u003c/code\u003e 关键字来定义对象。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eobject IdFactory {\n  private var counter = 0\n  def create(): Int = {\n    counter += 1\n    counter\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过引用对象的名字来访问这个对象。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eval newId: Int = IdFactory.create()\nprintln(newId) // 1\nval newerId: Int = IdFactory.create()\nprintln(newerId) // 2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们会在\u003ca href=\"http://docs.scala-lang.org/tutorials/tour/singleton-objects.md\"\u003e之后\u003c/a\u003e深入讨论它。\u003c/p\u003e\n\u003ch2 id=\"traits\"\u003eTraits\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eTraits\u003c/code\u003e 是包含特定字段和方法的类型。 可以组合多个 traits。\u003c/p\u003e\n\u003cp\u003e您可以使用 \u003ccode\u003etrait\u003c/code\u003e 关键字定义 traits。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etrait\u003c/span\u003e \u003cspan class=\"nc\"\u003eGreeter\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"n\"\u003egreet\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eStirng\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eUnit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTraits 也可以拥有默认的实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etrait\u003c/span\u003e \u003cspan class=\"nc\"\u003eGreeter\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"n\"\u003egreet\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eUnit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;!\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以使用 \u003ccode\u003eextends\u003c/code\u003e 关键字扩展 traits 并使用 \u003ccode\u003eoverride\u003c/code\u003e  关键字重写 traits 的实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eDefaultGreeter\u003c/span\u003e \u003cspan class=\"k\"\u003eextends\u003c/span\u003e \u003cspan class=\"nc\"\u003eGreeter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCustomizableGreeter\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprefix\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epostfix\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eextends\u003c/span\u003e \u003cspan class=\"nc\"\u003eGreeter\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"n\"\u003egreet\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eUnit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprefix\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003epostfix\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003egreeter\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eDefaultGreeter\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003egreeter\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreet\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Scala developer\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Hello, Scala developer!\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003ecustomGreeter\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eCustomizeGreeter\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;How are you, \u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;?\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ecustomGreter\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreet\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Scala developer\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// How are you, Scala developer?\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里, \u003ccode\u003eDefaultGreeter\u003c/code\u003e 只扩展单个 trait, 但是它可以扩展多个 traits。我们会在\u003ca href=\"http://docs.scala-lang.org/tutorials/tour/traits.md\"\u003e稍后\u003c/a\u003e深入讨论 traits。\u003c/p\u003e\n\u003ch2 id=\"main-方法\"\u003eMain 方法\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003emain\u003c/code\u003e 方法是程序的入口点。 Java 虚拟机需要一个命名为 \u003ccode\u003emain\u003c/code\u003e 的 main 方法，并接受一个参数，即一个字符串数组。\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003eobject\u003c/code\u003e，可以如下定义 main 方法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eobject\u003c/span\u003e \u003cspan class=\"nc\"\u003eMain\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e])\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eUnit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, Scala developer!\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"在浏览器中运行 Scala scalafiddle.io\n表达式 表达式是可计算的语句。\n你可以使用 println 输出表达式的值。\nprintln(1) // 1 println(1+1) // 2 println(\u0026#34;Hello!\u0026#34;) // Hello! println(\u0026#34;Hello,\u0026#34; + \u0026#34; world!\u0026#34;) // Hello, world! 值 使用 val 关键字来命名表达式的值。\nval x = 1 + 1 println(x) // 2 这里的命名结果, 例如 x, 叫做值。引用一个值不会重新计算它。 值一旦确定就不能被重新赋值。\nval x = 1+1 x = 3 // This does not compile. 值的类型可以被推断出来, 但是你也可以显式的声明它的类型, 像这样:\nval x: Int = 1 + 1 变量 变量像值一样, 但是你可以给它重新赋值。用 var 关键字来定义一个变量。\nvar x = 1 + 1 x = 3 // This compiles because \u0026#34;x\u0026#34; is declared with the \u0026#34;var\u0026#34; keyword. println(x * x) // 9 像值那样, 你可以显式地声明变量的类型:\nvar x: Int = 1 + 1 Blocks 用 {} 把多个表达式组合起来。我们把这个 {} 叫做 block. block 中的最后一个表达式的结果也是整个 block 的结果。\nprintln({ val x = 1 + 1 x + 1 }) // 3 函数 函数是接受参数的表达式。你可以定义一个返回给定的整数加 1 的函数:\n(x: Int) =\u0026gt; x + 1 =\u0026gt; 的左边是参数列表, 右边是引用该参数的表达式。你也可以给这个函数起个名字:\nval addOne = (x: Int) =\u0026gt; x + 1 println(addOne(1)) // 2 函数可以接收多个参数.\nval add = (x: Int, y:Int) =\u0026gt; x + y println(add(1,2)) // 3 或者函数也可以不接收参数:\nval getTheAnswer = () =\u0026gt; 42 println(getTheAnswer()) // 42 我们会在稍后深入讲解它。\n方法 方法使用 def 关键字来定义。\ndef add(x: Int, y:Int):Int = x + y println(add(1,2)) // 3 方法不能使用 val 或 var 关键字来命名。\ndef add(x: Int, y:Int): Int = x + y val add2 = add // 这不会编译 var add3 = add // 这也不会编译 方法可以接收多个参数列表.\ndef addThenMultiply(x: Int, y: Int)(multiplier: Int): Int = (x + y) * multiplier println(addThenMultiply(1, 2)(3)) // 9 或者不接收任何参数：\ndef name: String = System.getProperty(\u0026#34;name\u0026#34;) println(\u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34;) 类 使用 class 关键字来定义类。\nclass Greeter(prefix: String, suffix: String) { def greet(name: String): Unit = println(prefix + name + suffix) } 你可以使用 new 关键字来实例化一个类.\nval greeter = new Greeter(\u0026#34;Hello, \u0026#34;, \u0026#34;!\u0026#34;) greeter.greet(\u0026#34;Scala developer\u0026#34;) // Hello, Scala developer! Case Classes Scala 有一种叫做 「case」的特殊类。默认地, case 类是不可变的和按值比较的。你可以使用 case class 关键字来定义 case class。\ncase class Point(x: Int, y: Int) 你不用 new 关键字就可以实例化 case class.\nval point = Point(1, 2) val anotherPoint = Point(1, 2) val yetAnotherPoint = Point(2, 2) 并且它们是按值比较的:\nif (point == anotherPoint) { println(point + \u0026#34; and \u0026#34; + anotherPoint + \u0026#34; are the same.\u0026#34;) } else { println(point + \u0026#34; and \u0026#34; + anotherPoint + \u0026#34; are different.\u0026#34;) } // Point(1,2) and Point(1,2) are the same. if (point == yetAnotherPoint) { println(point + \u0026#34; and \u0026#34; + yetAnotherPoint + \u0026#34; are the same.\u0026#34;) } else { println(point + \u0026#34; and \u0026#34; + yetAnotherPoint + \u0026#34; are different.\u0026#34;) } // Point(1,2) and Point(2,2) are different. 我们还想介绍更多的 case class, 我们确定你会爱上它! 我们会在之后深入了解它。\n对象 对象是它们自身定义的单个实例。你可以把它们当作它们自身类的单例。 你可以使用 object 关键字来定义对象。\nobject IdFactory { private var counter = 0 def create(): Int = { counter += 1 counter } } 通过引用对象的名字来访问这个对象。\nval newId: Int = IdFactory.create() println(newId) // 1 val newerId: Int = IdFactory.create() println(newerId) // 2 我们会在之后深入讨论它。\nTraits Traits 是包含特定字段和方法的类型。 可以组合多个 traits。\n您可以使用 trait 关键字定义 traits。\ntrait Greeter { def greet(name: Stirng): Unit } Traits 也可以拥有默认的实现。\ntrait Greeter { def greet(name: String): Unit = println(\u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34;) } 你可以使用 extends 关键字扩展 traits 并使用 override 关键字重写 traits 的实现。\nclass DefaultGreeter extends Greeter class CustomizableGreeter(prefix: String, postfix: String) extends Greeter { override def greet(name: String):Unit = { println(prefix + name + postfix) } } val greeter = new DefaultGreeter() greeter.greet(\u0026#34;Scala developer\u0026#34;) // Hello, Scala developer! val customGreeter = new CustomizeGreeter(\u0026#34;How are you, \u0026#34;, \u0026#34;?\u0026#34;) customGreter.greet(\u0026#34;Scala developer\u0026#34;) // How are you, Scala developer? 这里, DefaultGreeter 只扩展单个 trait, 但是它可以扩展多个 traits。我们会在稍后深入讨论 traits。\nMain 方法 main 方法是程序的入口点。 Java 虚拟机需要一个命名为 main 的 main 方法，并接受一个参数，即一个字符串数组。\n使用 object，可以如下定义 main 方法：\nobject Main { def main(args: Array[String]): Unit = println(\u0026#34;Hello, Scala developer!\u0026#34;) } "},"name":"Scala 基础","published":"2017-03-13T16:36:25Z","summary":"在浏览器中运行 Scala scalafiddle.io\n表达式 表达式是可计算的语句。\n你可以使用 println 输出表达式的值。\nprintln(1) // 1 println(1+1) // 2 println(\u0026#34;Hello!\u0026#34;) // Hello! println(\u0026#34;Hello,\u0026#34; + \u0026#34; world!\u0026#34;) // Hello, world! 值 使用 val 关键字来命名表达式的值。\nval x = 1 + 1 println(x) // 2 这里的命名结果, 例如 x, 叫做值。引用一个值不会重新计算它。 值一旦确定就不能被重新赋值。\nval x = 1+1 x = 3 // This does not compile. 值的类型可以被推断出来, 但是你也可以显式的声明它的类型, 像这样:\nval x: Int = 1 + 1 变量 变量像值一样, 但是你可以给它重新赋值。用 var 关键字来定义一个变量。\nvar x = 1 + 1 x = 3 // This compiles because \u0026#34;x\u0026#34; is declared with the \u0026#34;var\u0026#34; keyword.","type":"entry","url":"https://ohmyweekly.github.io/notes/scala-%E5%9F%BA%E7%A1%80/"}