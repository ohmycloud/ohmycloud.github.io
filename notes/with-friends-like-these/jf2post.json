{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003cp\u003e\u003ca href=\"http://blogs.perl.org/users/damian_conway/2019/08/with-friends-like-these.html\"\u003ehttp://blogs.perl.org/users/damian_conway/2019/08/with-friends-like-these.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eC-o-rr-a-ll-i-n-g d-i-tt-o-e-d l-e-tt-e-r-s\u003c/p\u003e\n\u003cp\u003e我本打算本周重点关注\u003ca href=\"https://perlweeklychallenge.org/blog/perl-weekly-challenge-020/\"\u003e第20周挑战\u003c/a\u003e的第一个任务\u0026hellip;\u0026hellip;但我能说什么呢？这个任务是把一个在命令行中指定的字符串分解成相同的字符:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026quot;toolless\u0026quot;        →   t  oo  ll  e  ss\n\u0026quot;subbookkeeper\u0026quot;   →   s  u  bb  oo  kk  ee  p  e  r\n\u0026quot;committee\u0026quot;       →   c  o  mm  i  tt  ee\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e但是这在 Raku 中就是小菜一碟:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"k\"\u003ev\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"ni\"\u003e.d\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nb\"\u003eMAIN\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"kt\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"kt\"\u003estr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecomb\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e/(\u003c/span\u003e\u003cspan class=\"ni\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者使用更优雅的方式：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e$str\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecomb\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"se\"\u003e\\w\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e%\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003esame\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e而在 Perl 中也几乎一样简单:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003ev5\u003c/span\u003e\u003cspan class=\"mf\"\u003e.30\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ARGV\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e//\u003c/span\u003e \u003cspan class=\"nb\"\u003edie\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Usage:\\n  $0 \u0026lt;str\u0026gt;\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"vg\"\u003e$\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"nv\"\u003e$str\u003c/span\u003e \u003cspan class=\"o\"\u003e=~\u003c/span\u003e\u003cspan class=\"sr\"\u003e /(.) \\1*/gx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这这两种情况下, 正则表达式只是简单地匹配任何字符(\u003ccode\u003e(.)\u003c/code\u003e), 然后将相同的字符(\u003ccode\u003e$0\u003c/code\u003e 或 \u003ccode\u003e\\1\u003c/code\u003e)重新匹配零次或多次(\u003ccode\u003e*\u003c/code\u003e)。这两个匹配操作(\u003ccode\u003estr.comb\u003c/code\u003e 和 \u003ccode\u003e$str =~\u003c/code\u003e)都产生一个匹配的字符串列表, 然后我们输出每个字符串(\u003ccode\u003e.say for...\u003c/code\u003e 或 \u003ccode\u003esay $\u0026amp; while...\u003c/code\u003e)。\u003c/p\u003e\n\u003cp\u003e由于这两种情况都没什么好说的了，我反而把注意力转移到第二个任务上：找到并打印第一对友好数。\u003c/p\u003e\n\u003ch2 id=\"朋友的朋友就是敌人\"\u003e朋友的朋友就是敌人\u003c/h2\u003e\n\u003cp\u003e友好数一对整数，每对整数都有一组合适的除数(即被每个较小的数整除)碰巧加起来是另一个数。\u003c/p\u003e\n\u003cp\u003e例如 1184 可以被 1, 2, 4, 8, 16, 32, 37, 74, 148, 296, 和 592 整除; 1+2+4+8+16+32+37+74+148+296+592 之和为 1210。同时, 数字 1210 被 1, 2, 5, 10, 11, 22, 55, 110, 121, 242 和 605 整除; 1+2+5+10+11+22+55+110+121+242+605 的和是\u0026hellip;\u0026hellip;你猜对了\u0026hellip;\u0026hellip;1184。\u003c/p\u003e\n\u003cp\u003e这样的数字对是不常见的。前1万个整数中只有5个，10万以下只有13个，100万以下只有41个。而越往后，它们就越稀少：小于1万亿的这种数对只有7554对。渐进地，它们在正整数中的平均密度趋于零。\u003c/p\u003e\n\u003cp\u003e还没有已知的通用公式来寻找友好数，尽管 9 世纪的伊斯兰学者 بت بن ثاقره 确实发现了一个部分方程, 欧拉(当然!) 随后在 900 年后改进了这个公式。\u003c/p\u003e\n\u003cp\u003e所以他们很罕见，而且他们是不可预测的\u0026hellip;\u0026hellip;但他们并不是特别难找。\u003c/p\u003e\n\u003cp\u003e在数论中, 给出 N 的所有正除数之和的函数(\u003cem\u003e即\u0026quot;有限制的除数函数\u0026quot;\u003c/em\u003e)表示为 𝑠(N):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003e𝑠\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nb\"\u003esum\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eproper\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e末尾的 \u003ccode\u003e:proper\u003c/code\u003e 是一个\u0026quot;副词修饰符\u0026quot;，应用于对 \u003ccode\u003edivisors(N)\u003c/code\u003e 的调用，告诉函数只返回合适的除数(即从列表中排除 N 本身)。\u003c/p\u003e\n\u003cp\u003e还有，是的，我们用 Unicode 斜体 𝑠 作为函数名。因为我们可以。\u003c/p\u003e\n\u003cp\u003e一旦我们定义了限制性除数函数，我们就可以简单地遍历从1到无穷大的每一个整数i，找到 𝑠(i)，然后检查这个数的除数之和(即 𝑠(𝑠(i))) 是否与原数相同。如果我们只需要找到第一对友好数，那就可以了。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"no\"\u003e∞\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \\\u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\friend\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003e𝑠\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003efriend\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nf\"\u003e𝑠\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这输出:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e(220, 284)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e但为什么要停留在一个结果上呢？在不难发现所有友好数的情况下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"no\"\u003e∞\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \\\u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\friend\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003e𝑠\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003efriend\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nf\"\u003e𝑠\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，由于数字之间的友好关系(根据定义)是对称的，我们将 \u003ccode\u003enumber != friend\u003c/code\u003e 测试改为 \u003ccode\u003enumber \u0026lt; friend\u003c/code\u003e\u0026hellip;\u0026hellip;以防止循环将每对数字打印两次:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e(220, 284)\n(284, 220)\n(1184 1210)\n(1210 1184)\n(2620 2924)\n(2924 2620)\n(et cetera)\n(cetera et)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"缺少的内置\"\u003e缺少的内置\u003c/h2\u003e\n\u003cp\u003e这个故事就这样结束了，除了一个小问题：有些出人意料。\u003c/p\u003e\n\u003cp\u003eRaku 并没有内置我们需要的除数来实现 𝑠 函数。所以我们必须自己建立一个。事实上，我们要建立相当多的除数\u0026hellip;\u003c/p\u003e\n\u003cp\u003e一个整数的除数是指所有可以除以整数而不留余数的整数。这包括数字本身和整数1。一个数的\u0026quot;正除数\u0026quot;是指除它本身以外的所有被除数。一个数的\u0026quot;非平分除数\u0026quot;是除它本身或1以外的所有除数。也就是:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                \u003cspan class=\"c1\"\u003e# (1 2 3 4 5 6 12)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eproper\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \u003cspan class=\"c1\"\u003e# (1 2 3 4 5 6)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003enon-trivial\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e#   (2 3 4 5 6)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面的第二种和第三种选择，加上时髦的副词修饰符，其实只是普通的除数调用的\u003ca href=\"http://blogs.perl.org/users/damian_conway/2019/08/with-friends-like-these.html#syntactic-honey\"\u003e语法糖\u003c/a\u003e，但多了一个命名参数:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                \u003cspan class=\"c1\"\u003e# (1 2 3 4 5 6 12)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eproper\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# (1 2 3 4 5 6)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003enon-trivial\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e#   (2 3 4 5 6)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Raku 中，最简单的方法是使用多重分派来实现那种\u0026quot;副词\u0026quot;函数，每种特殊情况都有一个唯一的必需命名参数:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$proper\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e      \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..^\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$non-trivial\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e^..^\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这些特殊情况下的除数中，我们只需调用函数的常规变体(即 \u003ccode\u003edivisors(N)\u003c/code\u003e)，然后 \u003ccode\u003egrep\u003c/code\u003e 出不需要的端点。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/language/operators#infix_..%5E\"\u003e..^\u003c/a\u003e 运算符产生的范围是排除自己的上限，而 \u003ccode\u003e^..^\u003c/code\u003e 运算符产生的范围是排除它的两个边界(是的，也有一个 \u003ccode\u003e^..\u003c/code\u003e 变体只排除下限)。\u003c/p\u003e\n\u003cp\u003e因此，当指定 \u003ccode\u003e:property\u003c/code\u003e 选项时，我们会过滤 \u003ccode\u003edivisors(N)\u003c/code\u003e 返回的完整列表，以省略数字本身(\u003ccode\u003e.grep(1...^N)\u003c/code\u003e)。同样，当包含 \u003ccode\u003e:non-trivial\u003c/code\u003e 选项时，我们也会排除两个极值(\u003ccode\u003e.grep(1^..^N)\u003c/code\u003e)。\u003c/p\u003e\n\u003cp\u003e但是原始的未过滤的除数列表呢？我们首先要怎么得到呢？\u003c/p\u003e\n\u003cp\u003e生成一个数 N 的完整除数列表的天真方法，也就是所谓的\u0026quot;试除\u0026quot;，就是简单地遍历从1到N的所有数字，保留所有那些除以N而没有余数的数字\u0026hellip;\u0026hellip;这很容易测试，因为 Raku 有 \u003ccode\u003e%%\u003c/code\u003e is-divisible-by 运算符:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# Track all divisors found so far...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\divisors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# For every potential divisor...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \\\u003cspan class=\"no\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e# Skip if it\u0026#39;s not an actual divisor...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003enext\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"no\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e# Otherwise, add it to the list...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edivisors\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003epush\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# Deliver the results...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e只不过我们不是穴居人，我们不需要像这样把棍子揉在一起，也不需要用脚趾头数数来做数字理论。我们可以更优雅地得到同样的结果:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这里，我们简单地过滤潜在的除数列表 \u003ccode\u003e(1...N)\u003c/code\u003e，只保留那些均匀地除以 N 的除数(\u003ccode\u003e.grep(N %% *)\u003c/code\u003e)。\u003ccode\u003eN %% *\u003c/code\u003e 测试是创建一个 \u003ccode\u003eCode\u003c/code\u003e 对象的简写，这个对象接受一个参数(用 \u003ccode\u003e*\u003c/code\u003e 表示)并返回 \u003ccode\u003eN %%\u003c/code\u003e 的参数。换句话说，它通过将 \u003ccode\u003einfix %%\u003c/code\u003e 运算符的第一个操作数预先绑定到 N 上，创建了一个单参数函数。如果这对你来说在语法上过于华丽，我们也可以将它写成一个显式的 \u003ccode\u003e%%\u003c/code\u003e 运算符\u003ca href=\"https://docs.raku.org/routine/assuming\"\u003e预先绑定\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nv\"\u003e\u0026amp;infix:\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e%%\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eassuming\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u0026hellip;或者作为一个 lambda:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \\\u003cspan class=\"no\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"no\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u0026hellip;或者作为一个匿名的子例程:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"no\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"no\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u0026hellip;或者作为一个命名子例程:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors-of-N\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"no\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"no\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nv\"\u003e\u0026amp;divisors-of-N\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRaku 的目标是让我们用我们认为最方便、最舒适、最容易理解的任何一种符号来表达自己。\u003c/p\u003e\n\u003ch2 id=\"从问题的根源入手\"\u003e从问题的根源入手\u003c/h2\u003e\n\u003cp\u003e很难想象还有比这更简单的解决找除数问题的方法:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但也很难想象还有效率更低的。例如，为了找到数字2001的8个被除数，我们必须检查所有2001个潜在的被除数，这就浪费了 99.6% 的精力。即使是像2100这样的数字, 它有36个被除数, 我们仍然浪费了超过 98% 的 \u003ccode\u003e1..N\u003c/code\u003e 序列。而且数字越大，被除数的相对数量越少，找到它们的时间也越长。\u003c/p\u003e\n\u003cp\u003e一定有更好的方法。\u003c/p\u003e\n\u003cp\u003e当然，是有的。我们能做的最简单的改进是早在1202年由斐波那契在他的巨著\u003ca href=\"http://lhldigital.lindahall.org/cdm/compoundobject/collection/math/id/8734/rec/49\"\u003e自由女神\u003c/a\u003e中首次发表的。我们首先观察到，一个数字的除数总是以互补的方式出现，这对除数相乘产生数字本身。例如，99 的除数是:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1    3    9\n 99   33   11\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u0026hellip;而 100 的除数是:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1    2    4    5   10\n100   50   25   20   10\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u0026hellip;而 101 的除数是:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1\n101\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e注意，在每一种情况下，顶行除数总是包含不大于原数平方根的\u0026quot;小\u0026quot;整数。而底行则完全由 N 除以相应的顶行除数组成。所以我们可以通过搜索 \u003ccode\u003e1..sqrt N\u003c/code\u003e 的范围找到一半的除数(只需 \u003ccode\u003eO(√N)\u003c/code\u003e步)，然后通过从 N 中减去列表中的每个元素找到另一半(也只需 \u003ccode\u003eO(√N)\u003c/code\u003e 步)。在 Raku 中，这看起来像这样:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\small-divisors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"nb\"\u003esqrt\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\big-divisors\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e«\u003c/span\u003e\u003cspan class=\"ow\"\u003ediv\u003c/span\u003e\u003cspan class=\"o\"\u003e«\u003c/span\u003e \u003cspan class=\"n\"\u003esmall-divisors\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eunique\u003c/span\u003e \u003cspan class=\"nb\"\u003eflat\u003c/span\u003e \u003cspan class=\"n\"\u003esmall-divisors\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebig-divisors\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003ediv\u003c/code\u003e 运算符是整数除法，把双角放在它的周围，使它成为一个\u003ca href=\"https://docs.raku.org/language/operators#index-entry-hyper_%3C%3C-hyper_%3E%3E-hyper_%C2%AB-hyper_%C2%BB-Hyper_operators\"\u003e向量运算符\u003c/a\u003e，将 N 除以小除数列表中的每一个元素。\u003ccode\u003eflat\u003c/code\u003e 是需要的，因为小除数和大除数中的两个列表对象在 Raku 中不会自动\u0026quot;展平\u0026quot;成一个列表。\u003ccode\u003eunique\u003c/code\u003e 是需要的，因为如果 N 是一个完美的平方数，否则我们会得到它的平方根的两个副本(就像上面 100 的除数对中的 \u003ccode\u003e10/10\u003c/code\u003e 的例子)。\u003c/p\u003e\n\u003ch2 id=\"从大处着想\"\u003e从大处着想\u003c/h2\u003e\n\u003cp\u003e很高兴我们能够如此轻松地将 \u003ccode\u003eO(N)\u003c/code\u003e 算法改进为 \u003ccode\u003eO(√N)\u003c/code\u003e，但即使如此也只能做到这一步。除数函数的性能直到 \u003ccode\u003edivisors(10⁹)\u003c/code\u003e，在 0.1 秒以下完全可以接受，但在这之后开始迅速下降:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://blogs.perl.org/users/damian_conway/assets_c/2019/08/trial_division_performance-thumb-1263x493-4097.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果我们希望我们的函数可以用于非常大的数字，我们需要一个更好的算法。\n而令人高兴的是，密码学的世界(它沉迷于对数字进行分解)提供了\u003ca href=\"https://en.wikipedia.org/wiki/Integer_factorization#Factoring_algorithms\"\u003e大量的替代技术\u003c/a\u003e，从仅仅是非常复杂的技术到积极的长生不老的技术都有。\u003c/p\u003e\n\u003cp\u003e其中一个比较容易理解(和编码!)的方法是 \u003ca href=\"https://en.wikipedia.org/wiki/Pollard%27s_rho_algorithm\"\u003ePollard 的 𝜌 算法\u003c/a\u003e，几年前我在 \u003ca href=\"https://youtu.be/g8xXrhjqOZM?t=2329\"\u003ePerl 会议的主题演讲\u003c/a\u003e中简单解释过这个算法。而 Stephen Schulze 随后在一个名为 \u003ccode\u003ePrime::Factor\u003c/code\u003e 的 Raku 模块中把它作为 \u003ccode\u003eprime-factors\u003c/code\u003e 函数提供出来。\u003c/p\u003e\n\u003cp\u003e我不打算在这里解释 𝜌 算法，甚至不打算讨论 Stephen 对它的出色实现\u0026hellip;\u0026hellip;不过绝对值得探索\u003ca href=\"https://github.com/thundergnat/Prime-Factor/blob/master/lib/Prime/Factor.pm6\"\u003e这个模块的代码\u003c/a\u003e，尤其是那个使用 \u003ccode\u003e$n gcd 6541380665835015\u003c/code\u003e 来即时检测数字的质因数是否小于44的崇高捷径。\u003c/p\u003e\n\u003cp\u003e可以说，这个模块很快就找到了所有大数的质因数。例如，我们之前的 \u003ccode\u003edivisors\u003c/code\u003e 实现需要5秒左右才能找到1万亿的除数，而 \u003ccode\u003eprime-factors\u003c/code\u003e 函数在 0.002 秒内就能找到这个数的质因数。\u003c/p\u003e\n\u003cp\u003e唯一的问题是：一个数的质因数和它的除数\u003cstrong\u003e不一样\u003c/strong\u003e。1万亿的除数是所有被它偶数除的数。也就是:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1, 2, 4, 5, 8, 10, 16, 20, 25, 32, 40, 50, 64, 80, 100,\n125, 128, 160, 200, 250, 256, 320, 400, 500, 512, 625,\n640, 800, 1000, 1024, 1250, 1280, 1600, 2000, 2048, 2500,\n         [...218 more integers here...]\n10000000000, 12500000000, 15625000000, 20000000000,\n25000000000, 31250000000, 40000000000, 50000000000,\n62500000000, 100000000000, 125000000000, 200000000000,\n250000000000, 500000000000, 1000000000000\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e相反，一个数的质因数是唯一的(通常是重复的)质数集，可以将 它们相乘以重新组成原来的数。对于1万亿这个数字，这个唯一的质数集是:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,5,5\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u0026hellip;因为:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2×2×2×2×2×2×2×2×2×2×2×2×5×5×5×5×5×5×5×5×5×5×5×5 → 1000000000000\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e为了找到一对友好数，我们需要除数，也需要质因数。幸运的是，从另一个中提取一个并不难。乘以完整的质因数列表，就会产生原数，但如果我们选择质因数的各种子集来代替:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e                2×2×2×2×5×5×5    → 2000\n      2×2×2×2×2×2×2×2            → 256\n                      2×5×5×5×5  → 1250\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u0026hellip;那么我们就会得到一些实际的除数。而如果我们选择质因数的\u003ca href=\"https://en.wikipedia.org/wiki/Set_(mathematics)#Power_sets\"\u003e幂集\u003c/a\u003e(即每一个可能的子集)，那么我们就会得到每一个可能的除数。\u003c/p\u003e\n\u003cp\u003e所以，我们需要做的就是将质因数产生的完整列表，生成该列表中元素的每一个可能的组合，将每个组合的元素相乘，只保留唯一的结果。这一点，在 Raku 看来，就是:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003ePrime::Factor\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprime-factors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecombinations\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;[×]\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e.combinations\u003c/code\u003e 方法产生了一个列表，其中每个内部列表是原始质因数列表的一些唯一子集的一个可能的组合。类似于:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e(2), (5), (2,2), (2,5), (2,2,2), (2,2,5), (2,5,5), ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003e».reduce\u003c/code\u003e 方法调用是 \u003ca href=\"https://docs.raku.org/routine/reduce\"\u003e\u0026ldquo;fold\u0026rdquo; 操作\u003c/a\u003e 的一种向量形式，它在调用它的列表的每个元素之间插入指定的操作符。在本例中，我们通过 \u003ccode\u003e\u0026amp;infix:\u0026lt;×\u0026gt;\u003c/code\u003e 运算符插入中缀乘法\u0026hellip;\u0026hellip;我们可以将其缩写为：\u003ccode\u003e\u0026amp;[×]\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e所以，我们得到的东西像这样:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e(2), (5), (2×2), (2×5), (2×2×2), (2×2×5), (2×5×5), ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e然后我们只需通过最后调用 \u003ccode\u003e.unique\u003c/code\u003e 来剔除所有重复的结果。\u003c/p\u003e\n\u003ch2 id=\"尽可能的简单但不能再简单了\"\u003e尽可能的简单\u0026hellip;\u0026hellip;但不能再简单了！\u003c/h2\u003e\n\u003cp\u003e然后我们测试我们闪亮的新的基于 prime-factor 的算法。然后哭着发现，它比我们最初的试分法慢了很多。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://blogs.perl.org/users/damian_conway/assets_c/2019/08/prime_factors_vs_trial_division-thumb-1263x493-4100.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e这里的问题是，\u003ccode\u003e.combinations\u003c/code\u003e 方法的使用在某些情况下会导致\u003ca href=\"https://en.wikipedia.org/wiki/Combinatorial_explosion\"\u003e组合爆炸\u003c/a\u003e。我们通过取所有可能的质因子集，找到了完整的除数集:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2×2×2×2×2×2×2×2×2×2×2×2×5×5×5×5×5×5×5×5×5×5×5×5 → 1000000000000\n                2×2×2×2×5×5×5                   → 2000\n      2×2×2×2×2×2×2×2                           → 256\n                      2×5×5×5×5                 → 1250\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e但这也意味着，我们采取了这样的子集:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2×2×2                                           → 8\n  2×2×2                                         → 8\n                  2×2×2                         → 8\n2          ×2        ×2                         → 8\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e事实上，我们取了220个不同的 \u003ccode\u003e2×2×2\u003c/code\u003e 子集。更不用说495个 \u003ccode\u003e2×2×2×2\u003c/code\u003e 子集，792个 \u003ccode\u003e2×2×2×2\u003c/code\u003e 子集，等等。总的来说，1万亿的24个质因数产生了 2²⁴ 个不同的子集的幂集，我们再将其缩小到只有168个不同的除数。换句话说，\u003ccode\u003e.combinations\u003c/code\u003e 必须建立并返回一个包含 16777216 个子集的列表，\u003ccode\u003e».reduce\u003c/code\u003e 必须处理其中的每一个子集，之后，\u003ccode\u003e.unique\u003c/code\u003e 会立即丢弃其中的 99.999%。显然，我们需要一种更好的方法来将因子组合成除数。\u003c/p\u003e\n\u003cp\u003e而且，令人高兴的是，有一个。我们可以重写乘法:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2×2×2×2×2×2×2×2×2×2×2×2×5×5×5×5×5×5×5×5×5×5×5×5 → 1000000000000\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u0026hellip;为一个更紧凑的:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2¹² × 5¹²  →  1000000000000\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e然后我们观察到，只要改变两个质数的指数，从零到最大允许值(每种情况下都是12)，就可以得到所有唯一的子集:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2⁰×5⁰ → 1      2¹×5⁰ → 2       2²×5⁰ → 4       2³×5⁰ → 8    ⋯\n2⁰×5¹ → 5      2¹×5¹ → 10      2²×5¹ → 20      2³×5¹ → 40   ⋯\n2⁰×5² → 25     2¹×5² → 50      2²×5² → 100     2³×5² → 200  ⋯\n2⁰×5³ → 125    2¹×5³ → 250     2²×5³ → 500     2³×5³ → 1000 ⋯\n2⁰×5⁴ → 625    2¹×5⁴ → 1250    2²×5⁴ → 2500    2³×5⁴ → 5000 ⋯\n⋮              ⋮                ⋮               ⋮            ⋱\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e一般来说，如果一个数有质因数 \u003ccode\u003epℓᴵ × pₘᴶ × pₙᴷ\u003c/code\u003e，那么它的完整除数集就由 \u003ccode\u003epℓ⁽⁰‥ⁱ⁾ × pₘ⁽⁰‥ʲ⁾ × pₙ⁽⁰‥ᵏ⁾\u003c/code\u003e 给出。\u003c/p\u003e\n\u003cp\u003e也就是说，我们可以这样找到它们:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# Find and count prime factors of N (as before)...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\factors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003ebag\u003c/span\u003e \u003cspan class=\"nf\"\u003eprime-factors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# Short-cut if N is prime...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# Extract list of unique prime factors...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\pₗpₘpₙ\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekeys\u003c/span\u003e \u003cspan class=\"ow\"\u003exx\u003c/span\u003e \u003cspan class=\"no\"\u003e∞\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# Build all unique combinations of exponents...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\ᴵᴶᴷ\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ow\"\u003eX\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e..\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003evalue\u003c/span\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# Each divisor is pₗᴵ × pₘᴶ × pₙᴷ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e[×]\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elist\u003c/span\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  \u003cspan class=\"n\"\u003epₗpₘpₙ\u003c/span\u003e \u003cspan class=\"o\"\u003e«**«\u003c/span\u003e \u003cspan class=\"n\"\u003eᴵᴶᴷ\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们得到了和上一个版本一样的质因子列表(\u003ccode\u003eprime-factors(N)\u003c/code\u003e)，但现在我们将它们直接放入一个 \u003ccode\u003eBag\u003c/code\u003e 数据结构中(\u003ccode\u003ebag prim-factors(N)\u003c/code\u003e)。一个\u0026quot;bag\u0026quot;是一个\u003ca href=\"https://docs.raku.org/type/Bag\"\u003e整数加权集\u003c/a\u003e：一种特殊的哈希，其中键是列表的原始元素，值是每个不同值出现次数的计数（即它在列表中的\u0026quot;权重\u0026quot;）。\u003c/p\u003e\n\u003cp\u003e例如，9876543210 的质因子是(\u003ccode\u003e2, 3, 3, 5, 17, 17, 379721\u003c/code\u003e)。如果我们把这个列表放到一个袋子里，我们得到的等价物是:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{ 2=\u0026gt;1, 3=\u0026gt;2, 5=\u0026gt;1, 17=\u0026gt;2, 379721=\u0026gt;1 }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e因此，将质因数列表转换为一个袋子，我们就有了一个简单而有效的方法来确定所涉及的唯一质数，以及每个质数必须升到的幂。\u003c/p\u003e\n\u003cp\u003e然而，如果在所得的袋子中只有一个质数键，而其对应的数是1，那么原数本身一定是那个质数(升到1的幂)。在这种情况下，我们知道除数只能是那个原数和1，所以我们可以立即返回它们。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e.total\u003c/code\u003e 方法只是简单地将袋子里所有的整数权重相加。如果总和为1，则只能有一个元素，权重为1。\u003c/p\u003e\n\u003cp\u003e否则，袋子中的一个或多个键(\u003ccode\u003efactors.keys\u003c/code\u003e)就是原数的质因子列表(\u003ccode\u003epₗ，pₘ，pₙ，...\u003c/code\u003e)，我们提取这些质因子并存储在一个合适的 Unicode 命名的变量中：\u003ccode\u003epₗpₘpₙ\u003c/code\u003e。请注意，我们需要多个相同的初等因子列表副本：每一个可能的指数组合都需要一个。由于我们还不知道(还不知道)会有多少这样的组合，为了确保我们有足够的数量，我们只需将列表无限长：\u003ccode\u003efactors.keys xx ∞\u003c/code\u003e。在我们的例子中，这将产生这样的因子列表:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e((1,3,5,17,379721), (1,3,5,17,379721), (1,3,5,17,379721), ...)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e为了得到指数集的列表，我们需要每一个可能的指数组合(I,J,K,\u0026hellip;)，从零到每个素数的最大数。也就是说，对于我们的例子来说:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{ 2=\u0026gt;1, 3=\u0026gt;2, 5=\u0026gt;1, 17=\u0026gt;2, 379721=\u0026gt;1 }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e我们需要:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e( (0,0,0,0,0), (0,0,0,0,1), (0,0,0,1,0), (0,0,0,1,1), (0,0,0,2,0), (0,0,0,2,1),\n  (0,0,1,0,0), (0,0,1,0,1), (0,0,1,1,0), (0,0,1,1,1), (0,0,1,2,0), (0,0,1,2,1),\n  (0,1,0,0,0), (0,1,0,0,1), (0,1,0,1,0), (0,1,0,1,1), (0,1,0,2,0), (0,1,0,2,1),\n  (0,1,1,0,0), (0,1,1,0,1), (0,1,1,1,0), (0,1,1,1,1), (0,1,1,2,0), (0,1,1,2,1),\n  (0,2,0,0,0), (0,2,0,0,1), (0,2,0,1,0), (0,2,0,1,1), (0,2,0,2,0), (0,2,0,2,1),\n  (0,2,1,0,0), (0,2,1,0,1), (0,2,1,1,0), (0,2,1,1,1), (0,2,1,2,0), (0,2,1,2,1),\n  (1,0,0,0,0), (1,0,0,0,1), (1,0,0,1,0), (1,0,0,1,1), (1,0,0,2,0), (1,0,0,2,1),\n  (1,0,1,0,0), (1,0,1,0,1), (1,0,1,1,0), (1,0,1,1,1), (1,0,1,2,0), (1,0,1,2,1),\n  (1,1,0,0,0), (1,1,0,0,1), (1,1,0,1,0), (1,1,0,1,1), (1,1,0,2,0), (1,1,0,2,1),\n  (1,1,1,0,0), (1,1,1,0,1), (1,1,1,1,0), (1,1,1,1,1), (1,1,1,2,0), (1,1,1,2,1),\n  (1,2,0,0,0), (1,2,0,0,1), (1,2,0,1,0), (1,2,0,1,1), (1,2,0,2,0), (1,2,0,2,1),\n  (1,2,1,0,0), (1,2,1,0,1), (1,2,1,1,0), (1,2,1,1,1), (1,2,1,2,0)  (1,2,1,2,1)\n)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e或者，为了更简洁地表达，我们需要每个指数的有效范围的交叉乘积(即 \u003ccode\u003eX\u003c/code\u003e 算子):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#  2       3        5        17     379721\n(0..1) X (0..2) X (0..1) X (0..2) X (0..1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e最大指数只是质数因子袋中的值(\u003ccode\u003efactors.value\u003c/code\u003e)，所以我们可以通过将每个\u0026quot;质数值\u0026quot;转换为 \u003ccode\u003e0..count\u003c/code\u003e 范围，得到所需指数范围的列表: \u003ccode\u003e0 .. .value  for factors\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e请注意，在 Raku 中，括号内的循环会产生一个该循环每次迭代的最终值的列表。或者你可以把这个构造看作是一个\u003ca href=\"https://en.wikipedia.org/wiki/List_comprehension\"\u003e列表解析\u003c/a\u003e，就像在 Python 中一样。\u003ccode\u003e[range(0,value) for value in factors.values()]\u003c/code\u003e(但不那么单调)，或者在 Haskell 中，\u003ccode\u003e[ [0..value] | value \u0026lt;- elems factors ]\u003c/code\u003e(但行噪声较小)。\u003c/p\u003e\n\u003cp\u003e然后，我们只需将得到的范围列表，通过在 \u003ccode\u003eX\u003c/code\u003e 运算符上还原列表，计算出 n-ary 交叉乘积: \u003ccode\u003e[X](0 .. .value for factors)\u003c/code\u003e，然后将得到的 I,J,K 指数列表存储在一个适当命名的变量中: ᴵᴶᴷ (是的，上标字母是完全有效的 Unicode 字母表，所以我们当然可以用它们作为标识符。)\u003c/p\u003e\n\u003cp\u003e此时，几乎所有的艰苦工作都已经完成。我们有一个质因数的列表(\u003ccode\u003epₗpₘpₙ\u003c/code\u003e)，还有一个指数的唯一组合的列表，这些指数将产生不同的除数(ᴵᴶᴷ)，所以我们现在需要做的就是用向量指数运算符(\u003ccode\u003epₗpₘpₙ «**« ᴵᴶᴷ)\u003c/code\u003e 将第一个列表中的每一个数字集提高到第二个列表中的各种指数集，然后在另一个列表理解中乘以每个指数产生的值列表(\u003ccode\u003e([×] .list for …)\u003c/code\u003e)，产生除数列表。\u003c/p\u003e\n\u003cp\u003e就这样，就完成了。是五行而不是一行:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\factors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003ebag\u003c/span\u003e \u003cspan class=\"nf\"\u003eprime-factors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\pₗpₘpₙ\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekeys\u003c/span\u003e \u003cspan class=\"ow\"\u003exx\u003c/span\u003e \u003cspan class=\"no\"\u003e∞\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\ᴵᴶᴷ\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ow\"\u003eX\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e..\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003evalue\u003c/span\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e[×]\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elist\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003epₗpₘpₙ\u003c/span\u003e \u003cspan class=\"o\"\u003e«**«\u003c/span\u003e \u003cspan class=\"n\"\u003eᴵᴶᴷ\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u0026hellip;但里面并没有潜伏着组合式的炸药。我们没有直接建立 \u003ccode\u003eO(2ᴺ)\u003c/code\u003e 个因子的子集，而是建立 \u003ccode\u003eO(N)\u003c/code\u003e 个各自指数的子集。\u003c/p\u003e\n\u003cp\u003e然后我们测试我们更闪亮的新式 \u003ccode\u003edivisors\u003c/code\u003e 实现。当我们发现它的尺度比之前的好得离谱时，我们会流泪\u0026hellip;欣慰。也比原来的试除法好得多:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://blogs.perl.org/users/damian_conway/assets_c/2019/08/three_way_performance_comparison-thumb-1263x493-4102.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e任务完成了！\u003c/p\u003e\n\u003ch2 id=\"两全其美\"\u003e两全其美\u003c/h2\u003e\n\u003cp\u003e只不过，如果我们把图形的起点放大。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://blogs.perl.org/users/damian_conway/assets_c/2019/08/small_number_comparison-thumb-1263x493-4104.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u0026hellip;我们看到，我们新算法的性能最终只会更好。由于 Pollard 的 𝜌 算法的核心计算开销相对较高，而且需要建立、指数化、和质因数的幂集相乘，这个版本的除法的性能比简单的试除法略差\u0026hellip;\u0026hellip;至少在小于 N=10000 的数字上是这样。\u003c/p\u003e\n\u003cp\u003e理想情况下，我们可以以某种方式同时采用这两种算法：对\u0026quot;小\u0026quot;的数字使用试除法，而对一切更大的数字使用质因数。而这在 Raku 中也是微不足道的。不，不是把它们混在一起，用某种 Frankenstein 函数:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e⁴ \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\small-divisors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"nb\"\u003esqrt\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\big-divisors\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e«\u003c/span\u003e\u003cspan class=\"ow\"\u003ediv\u003c/span\u003e\u003cspan class=\"o\"\u003e«\u003c/span\u003e \u003cspan class=\"n\"\u003esmall-divisors\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eunique\u003c/span\u003e \u003cspan class=\"nb\"\u003eflat\u003c/span\u003e \u003cspan class=\"n\"\u003esmall-divisors\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebig-divisors\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\factors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003ebag\u003c/span\u003e \u003cspan class=\"nf\"\u003eprime-factors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\pₗpₘpₙ\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekeys\u003c/span\u003e \u003cspan class=\"ow\"\u003exx\u003c/span\u003e \u003cspan class=\"no\"\u003e∞\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\ᴵᴶᴷ\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ow\"\u003eX\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e..\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003evalue\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e[×]\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elist\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003epₗpₘpₙ\u003c/span\u003e \u003cspan class=\"o\"\u003e«**«\u003c/span\u003e \u003cspan class=\"n\"\u003eᴵᴶᴷ\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e相反，我们只需像之前那样，在单独的 \u003ccode\u003emulti\u003c/code\u003e 中独立地实现这两种方法，然后修改它们的签名，告诉编译器它们各自应该应用的N个值的范围:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003econstant\u003c/span\u003e \u003cspan class=\"no\"\u003eSMALL\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e..^\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e⁴\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003econstant\u003c/span\u003e \u003cspan class=\"no\"\u003eBIG\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e⁴ \u003cspan class=\"o\"\u003e..\u003c/span\u003e \u003cspan class=\"no\"\u003e∞\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"n\"\u003eBIG\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\factors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003ebag\u003c/span\u003e \u003cspan class=\"nf\"\u003eprime-factors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\pₗpₘpₙ\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekeys\u003c/span\u003e \u003cspan class=\"ow\"\u003exx\u003c/span\u003e \u003cspan class=\"no\"\u003e∞\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\ᴵᴶᴷ\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ow\"\u003eX\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e..\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003evalue\u003c/span\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003efactors\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e[×]\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elist\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003epₗpₘpₙ\u003c/span\u003e \u003cspan class=\"o\"\u003e«**«\u003c/span\u003e \u003cspan class=\"n\"\u003eᴵᴶᴷ\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emulti\u003c/span\u003e \u003cspan class=\"nf\"\u003edivisors\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"n\"\u003eSMALL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\small-divisors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"nb\"\u003esqrt\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"nv\"\u003e%%\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\big-divisors\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e«\u003c/span\u003e\u003cspan class=\"ow\"\u003ediv\u003c/span\u003e\u003cspan class=\"o\"\u003e«\u003c/span\u003e \u003cspan class=\"n\"\u003esmall-divisors\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eunique\u003c/span\u003e \u003cspan class=\"nb\"\u003eflat\u003c/span\u003e \u003cspan class=\"n\"\u003esmall-divisors\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebig-divisors\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这一特殊情况下，实际的改进只是轻微的；也许是太轻微了，不值得为维持两个相同功能的变体而烦恼。但这里所展示的原则是很重要的。Raku 的多重分派机制使得在现有函数中注入特殊情况下的优化变得非常容易\u0026hellip;而不会使函数的原始源代码变得更复杂、更慢或更难维护。\u003c/p\u003e\n\u003ch2 id=\"同时在平行宇宙中\"\u003e同时，在平行宇宙中\u0026hellip;\u003c/h2\u003e\n\u003cp\u003e现在我们有了一个有效的方法来找到任何数字的合适的除数，我们可以使用前面显示的代码开始定位友好对。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"no\"\u003e∞\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \\\u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\friend\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003e𝑠\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003efriend\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nf\"\u003e𝑠\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当我们这样做的时候，我们会发现，前几对数打印出来的速度非常快，但是，之后，事情就开始明显变慢了。所以我们可能会开始寻找另一种方法来加速搜索。\u003c/p\u003e\n\u003cp\u003e例如，我们可能会注意到，\u003ccode\u003efor\u003c/code\u003e 循环的每一次迭代都是完全独立于任何其他循环的。不需要外部信息来测试特定的友好对，也不需要在迭代之间传递任何持久状态。而我们很快就会意识到，这意味着这是一个引入一点\u003ca href=\"https://docs.raku.org/language/concurrency\"\u003e并发性\u003c/a\u003e的绝佳机会。\u003c/p\u003e\n\u003cp\u003e在许多语言中，将我们简单的线性 \u003ccode\u003efor\u003c/code\u003e 循环转换为某种并发搜索需要大量的额外代码：调度、创建、协调、管理、协调、同步和终止线程或线程对象的集合。\u003c/p\u003e\n\u003cp\u003e但在 Raku 中，这只是意味着我们需要在现有的 \u003ccode\u003efor\u003c/code\u003e 循环中添加一个五字母的修饰符:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ehyper\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"no\"\u003e∞\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \\\u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\friend\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003e𝑠\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003efriend\u003c/span\u003e \u003cspan class=\"nv\"\u003e\u0026amp;\u0026amp;𝑠\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003ehyper\u003c/code\u003e前缀告诉编译器，这个特定的 \u003ccode\u003efor\u003c/code\u003e 循环不需要顺序迭代；它的每一次迭代都可以用编译器认为合适的并发程度来执行（默认情况下，以四个并行线程执行，尽管有额外的参数允许你调整并发程度以匹配你的硬件能力）。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ehyper\u003c/code\u003e前缀实际上只是一个便捷写法，用于在被迭代的列表中添加对 \u003ca href=\"https://docs.raku.org/routine/hyper\"\u003e.hyper 方法\u003c/a\u003e的调用。该方法将对象的迭代器转换为可以并发迭代的方法。所以我们也可以这样写我们的并发循环:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"no\"\u003e∞\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ehyper\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \\\u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\friend\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003e𝑠\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003efriend\u003c/span\u003e \u003cspan class=\"nv\"\u003e\u0026amp;\u0026amp;𝑠\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，无论我们以哪种方式写这个并行 \u003ccode\u003efor\u003c/code\u003e 循环，在多个迭代并行发生的情况下，结果都不再保证严格按照递增顺序打印出来。但实际上，由于整数间友好对的密度较低，无论如何都极有可能出现这种情况。\u003c/p\u003e\n\u003cp\u003e当我们将之前的 \u003ccode\u003efor\u003c/code\u003e 循环转换为 \u003ccode\u003ehyper for\u003c/code\u003e 循环时，循环的性能会翻倍。例如，普通循环可以在一个多小时内找到100万个以内的每一个友好对；\u003ccode\u003ehyper\u003c/code\u003e 循环则在25分钟内完成同样的工作。\u003c/p\u003e\n\u003ch2 id=\"到无穷大甚至更远\"\u003e到无穷大，甚至更远\u003c/h2\u003e\n\u003cp\u003e最后，在构建和优化了我们寻找失落的情侣的所有组件后，我们可以开始认真地寻找了。不仅仅是寻找第一对友好数，而是寻找第一对超过一千的对，超过一百万的对，超过十亿的对，超过一万亿的对，等等。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Convert 1 → \u0026#34;10⁰\u0026#34;, 10 → \u0026#34;10¹\u0026#34;, 100 → \u0026#34;10²\u0026#34;, 1000 → \u0026#34;10³\u0026#34;, ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eorder\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\\\u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"o\"\u003e/^\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003epred\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etrans\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e0123456789\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e⁰¹²³⁴⁵⁶⁷⁸⁹\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# For every power of 1000...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e³\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e⁶ \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"no\"\u003e∞\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \\\u003cspan class=\"nb\"\u003emin\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# Concurrently find the first amicable pair in that range...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003emin\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"no\"\u003e∞\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ehyper\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \\\u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e\\friend\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003e𝑠\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003enext\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003efriend\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nf\"\u003e𝑠\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e# Report it and go on to the next power of 1000...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eFirst amicable pair over \u003c/span\u003e\u003cspan class=\"nv\"\u003e\u0026amp;order\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\t\u003c/span\u003e\u003cspan class=\"s2\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这显示:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFirst amicable pair over 10⁰:   (220, 284)\nFirst amicable pair over 10³:   (1184, 1210)\nFirst amicable pair over 10⁶:   (1077890, 1099390)\nFirst amicable pair over 10⁹:   (1000233608, 1001668568)\nFirst amicable pair over 10¹²:  (1000302285872, 1000452085744)\net cetera\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e好吧，最终揭开了他们的面纱!\u003c/p\u003e\n\u003cp\u003eby \u003ca href=\"http://blogs.perl.org/users/damian_conway/2019/08/with-friends-like-these.html\"\u003eDamian\u003c/a\u003e\u003c/p\u003e\n","text":"http://blogs.perl.org/users/damian_conway/2019/08/with-friends-like-these.html\nC-o-rr-a-ll-i-n-g d-i-tt-o-e-d l-e-tt-e-r-s\n我本打算本周重点关注第20周挑战的第一个任务\u0026hellip;\u0026hellip;但我能说什么呢？这个任务是把一个在命令行中指定的字符串分解成相同的字符:\n\u0026quot;toolless\u0026quot; → t oo ll e ss \u0026quot;subbookkeeper\u0026quot; → s u bb oo kk ee p e r \u0026quot;committee\u0026quot; → c o mm i tt ee 但是这在 Raku 中就是小菜一碟:\nuse v6.d; sub MAIN (\\str) { .say for str.comb: /(.) $0*/ } 或者使用更优雅的方式：\n.say for $str.comb: /\\w+ % \u0026lt;same\u0026gt;/ 而在 Perl 中也几乎一样简单:\nuse v5.30; my $str = $ARGV[0] // die \u0026#34;Usage:\\n $0 \u0026lt;str\u0026gt;\\n\u0026#34;; say $\u0026amp; while $str =~ /(.) \\1*/gx; 这这两种情况下, 正则表达式只是简单地匹配任何字符((.)), 然后将相同的字符($0 或 \\1)重新匹配零次或多次(*)。这两个匹配操作(str.comb 和 $str =~)都产生一个匹配的字符串列表, 然后我们输出每个字符串(.say for... 或 say $\u0026amp; while...)。\n由于这两种情况都没什么好说的了，我反而把注意力转移到第二个任务上：找到并打印第一对友好数。\n朋友的朋友就是敌人 友好数一对整数，每对整数都有一组合适的除数(即被每个较小的数整除)碰巧加起来是另一个数。\n例如 1184 可以被 1, 2, 4, 8, 16, 32, 37, 74, 148, 296, 和 592 整除; 1+2+4+8+16+32+37+74+148+296+592 之和为 1210。同时, 数字 1210 被 1, 2, 5, 10, 11, 22, 55, 110, 121, 242 和 605 整除; 1+2+5+10+11+22+55+110+121+242+605 的和是\u0026hellip;\u0026hellip;你猜对了\u0026hellip;\u0026hellip;1184。\n这样的数字对是不常见的。前1万个整数中只有5个，10万以下只有13个，100万以下只有41个。而越往后，它们就越稀少：小于1万亿的这种数对只有7554对。渐进地，它们在正整数中的平均密度趋于零。\n还没有已知的通用公式来寻找友好数，尽管 9 世纪的伊斯兰学者 بت بن ثاقره 确实发现了一个部分方程, 欧拉(当然!) 随后在 900 年后改进了这个公式。\n所以他们很罕见，而且他们是不可预测的\u0026hellip;\u0026hellip;但他们并不是特别难找。\n在数论中, 给出 N 的所有正除数之和的函数(即\u0026quot;有限制的除数函数\u0026quot;)表示为 𝑠(N):\nsub 𝑠 (\\N) { sum divisors(N) :proper } 末尾的 :proper 是一个\u0026quot;副词修饰符\u0026quot;，应用于对 divisors(N) 的调用，告诉函数只返回合适的除数(即从列表中排除 N 本身)。\n还有，是的，我们用 Unicode 斜体 𝑠 作为函数名。因为我们可以。\n一旦我们定义了限制性除数函数，我们就可以简单地遍历从1到无穷大的每一个整数i，找到 𝑠(i)，然后检查这个数的除数之和(即 𝑠(𝑠(i))) 是否与原数相同。如果我们只需要找到第一对友好数，那就可以了。\nfor 1..∞ -\u0026gt; \\number { my \\friend = 𝑠(number); say (number, friend) and exit if number != friend \u0026amp;\u0026amp; 𝑠(friend) == number; } 这输出:\n(220, 284) 但为什么要停留在一个结果上呢？在不难发现所有友好数的情况下:\nfor 1..∞ -\u0026gt; \\number { my \\friend = 𝑠(number); say (number, friend) if number \u0026lt; friend \u0026amp;\u0026amp; 𝑠(friend) == number; } 请注意，由于数字之间的友好关系(根据定义)是对称的，我们将 number != friend 测试改为 number \u0026lt; friend\u0026hellip;\u0026hellip;以防止循环将每对数字打印两次:\n(220, 284) (284, 220) (1184 1210) (1210 1184) (2620 2924) (2924 2620) (et cetera) (cetera et) 缺少的内置 这个故事就这样结束了，除了一个小问题：有些出人意料。\nRaku 并没有内置我们需要的除数来实现 𝑠 函数。所以我们必须自己建立一个。事实上，我们要建立相当多的除数\u0026hellip;\n一个整数的除数是指所有可以除以整数而不留余数的整数。这包括数字本身和整数1。一个数的\u0026quot;正除数\u0026quot;是指除它本身以外的所有被除数。一个数的\u0026quot;非平分除数\u0026quot;是除它本身或1以外的所有除数。也就是:\nsay divisors(12); # (1 2 3 4 5 6 12) say divisors(12) :proper; # (1 2 3 4 5 6) say divisors(12) :non-trivial; # (2 3 4 5 6) 上面的第二种和第三种选择，加上时髦的副词修饰符，其实只是普通的除数调用的语法糖，但多了一个命名参数:\nsay divisors(12); # (1 2 3 4 5 6 12) say divisors(12, :proper); # (1 2 3 4 5 6) say divisors(12, :non-trivial); # (2 3 4 5 6) 在 Raku 中，最简单的方法是使用多重分派来实现那种\u0026quot;副词\u0026quot;函数，每种特殊情况都有一个唯一的必需命名参数:\nmulti divisors (\\N, :$proper!) { divisors(N).grep(1..^N) } multi divisors (\\N, :$non-trivial!) { divisors(N).grep(1^..^N) } 在这些特殊情况下的除数中，我们只需调用函数的常规变体(即 divisors(N))，然后 grep 出不需要的端点。\n..^ 运算符产生的范围是排除自己的上限，而 ^..^ 运算符产生的范围是排除它的两个边界(是的，也有一个 ^.. 变体只排除下限)。\n因此，当指定 :property 选项时，我们会过滤 divisors(N) 返回的完整列表，以省略数字本身(.grep(1...^N))。同样，当包含 :non-trivial 选项时，我们也会排除两个极值(.grep(1^..^N))。\n但是原始的未过滤的除数列表呢？我们首先要怎么得到呢？\n生成一个数 N 的完整除数列表的天真方法，也就是所谓的\u0026quot;试除\u0026quot;，就是简单地遍历从1到N的所有数字，保留所有那些除以N而没有余数的数字\u0026hellip;\u0026hellip;这很容易测试，因为 Raku 有 %% is-divisible-by 运算符:\nmulti divisors (\\N) { # Track all divisors found so far... my \\divisors = []; # For every potential divisor... for 1..N -\u0026gt; \\i { # Skip if it\u0026#39;s not an actual divisor... next unless N %% i; # Otherwise, add it to the list... divisors.push: i; } # Deliver the results... return divisors; } 只不过我们不是穴居人，我们不需要像这样把棍子揉在一起，也不需要用脚趾头数数来做数字理论。我们可以更优雅地得到同样的结果:\nmulti divisors (\\N) { (1..N).grep(N %% *) } 在这里，我们简单地过滤潜在的除数列表 (1...N)，只保留那些均匀地除以 N 的除数(.grep(N %% *))。N %% * 测试是创建一个 Code 对象的简写，这个对象接受一个参数(用 * 表示)并返回 N %% 的参数。换句话说，它通过将 infix %% 运算符的第一个操作数预先绑定到 N 上，创建了一个单参数函数。如果这对你来说在语法上过于华丽，我们也可以将它写成一个显式的 %% 运算符预先绑定:\n(1..N).grep( \u0026amp;infix:\u0026lt;%%\u0026gt;.assuming(N) ) \u0026hellip;或者作为一个 lambda:\n(1..N).grep( -\u0026gt; \\i { N %% i } ) \u0026hellip;或者作为一个匿名的子例程:\n(1..N).grep( sub (\\i) { N %% i } ) \u0026hellip;或者作为一个命名子例程:\nmy sub divisors-of-N (\\i) { N %% i } (1..N).grep( \u0026amp;divisors-of-N ) Raku 的目标是让我们用我们认为最方便、最舒适、最容易理解的任何一种符号来表达自己。\n从问题的根源入手 很难想象还有比这更简单的解决找除数问题的方法:\nmulti divisors (\\N) { (1..N).grep(N %% *) } 但也很难想象还有效率更低的。例如，为了找到数字2001的8个被除数，我们必须检查所有2001个潜在的被除数，这就浪费了 99.6% 的精力。即使是像2100这样的数字, 它有36个被除数, 我们仍然浪费了超过 98% 的 1..N 序列。而且数字越大，被除数的相对数量越少，找到它们的时间也越长。\n一定有更好的方法。\n当然，是有的。我们能做的最简单的改进是早在1202年由斐波那契在他的巨著自由女神中首次发表的。我们首先观察到，一个数字的除数总是以互补的方式出现，这对除数相乘产生数字本身。例如，99 的除数是:\n1 3 9 99 33 11 \u0026hellip;而 100 的除数是:\n1 2 4 5 10 100 50 25 20 10 \u0026hellip;而 101 的除数是:\n1 101 注意，在每一种情况下，顶行除数总是包含不大于原数平方根的\u0026quot;小\u0026quot;整数。而底行则完全由 N 除以相应的顶行除数组成。所以我们可以通过搜索 1..sqrt N 的范围找到一半的除数(只需 O(√N)步)，然后通过从 N 中减去列表中的每个元素找到另一半(也只需 O(√N) 步)。在 Raku 中，这看起来像这样:\nmulti divisors (\\N) { my \\small-divisors = (1..sqrt N).grep(N %% *); my \\big-divisors = N «div« small-divisors; return unique flat small-divisors, big-divisors; } div 运算符是整数除法，把双角放在它的周围，使它成为一个向量运算符，将 N 除以小除数列表中的每一个元素。flat 是需要的，因为小除数和大除数中的两个列表对象在 Raku 中不会自动\u0026quot;展平\u0026quot;成一个列表。unique 是需要的，因为如果 N 是一个完美的平方数，否则我们会得到它的平方根的两个副本(就像上面 100 的除数对中的 10/10 的例子)。\n从大处着想 很高兴我们能够如此轻松地将 O(N) 算法改进为 O(√N)，但即使如此也只能做到这一步。除数函数的性能直到 divisors(10⁹)，在 0.1 秒以下完全可以接受，但在这之后开始迅速下降:\n如果我们希望我们的函数可以用于非常大的数字，我们需要一个更好的算法。 而令人高兴的是，密码学的世界(它沉迷于对数字进行分解)提供了大量的替代技术，从仅仅是非常复杂的技术到积极的长生不老的技术都有。\n其中一个比较容易理解(和编码!)的方法是 Pollard 的 𝜌 算法，几年前我在 Perl 会议的主题演讲中简单解释过这个算法。而 Stephen Schulze 随后在一个名为 Prime::Factor 的 Raku 模块中把它作为 prime-factors 函数提供出来。\n我不打算在这里解释 𝜌 算法，甚至不打算讨论 Stephen 对它的出色实现\u0026hellip;\u0026hellip;不过绝对值得探索这个模块的代码，尤其是那个使用 $n gcd 6541380665835015 来即时检测数字的质因数是否小于44的崇高捷径。\n可以说，这个模块很快就找到了所有大数的质因数。例如，我们之前的 divisors 实现需要5秒左右才能找到1万亿的除数，而 prime-factors 函数在 0.002 秒内就能找到这个数的质因数。\n唯一的问题是：一个数的质因数和它的除数不一样。1万亿的除数是所有被它偶数除的数。也就是:\n1, 2, 4, 5, 8, 10, 16, 20, 25, 32, 40, 50, 64, 80, 100, 125, 128, 160, 200, 250, 256, 320, 400, 500, 512, 625, 640, 800, 1000, 1024, 1250, 1280, 1600, 2000, 2048, 2500, [...218 more integers here...] 10000000000, 12500000000, 15625000000, 20000000000, 25000000000, 31250000000, 40000000000, 50000000000, 62500000000, 100000000000, 125000000000, 200000000000, 250000000000, 500000000000, 1000000000000 相反，一个数的质因数是唯一的(通常是重复的)质数集，可以将 它们相乘以重新组成原来的数。对于1万亿这个数字，这个唯一的质数集是:\n2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,5,5 \u0026hellip;因为:\n2×2×2×2×2×2×2×2×2×2×2×2×5×5×5×5×5×5×5×5×5×5×5×5 → 1000000000000 为了找到一对友好数，我们需要除数，也需要质因数。幸运的是，从另一个中提取一个并不难。乘以完整的质因数列表，就会产生原数，但如果我们选择质因数的各种子集来代替:\n2×2×2×2×5×5×5 → 2000 2×2×2×2×2×2×2×2 → 256 2×5×5×5×5 → 1250 \u0026hellip;那么我们就会得到一些实际的除数。而如果我们选择质因数的幂集(即每一个可能的子集)，那么我们就会得到每一个可能的除数。\n所以，我们需要做的就是将质因数产生的完整列表，生成该列表中元素的每一个可能的组合，将每个组合的元素相乘，只保留唯一的结果。这一点，在 Raku 看来，就是:\nuse Prime::Factor; multi divisors (\\N) { prime-factors(N).combinations».reduce( \u0026amp;[×] ).unique; } .combinations 方法产生了一个列表，其中每个内部列表是原始质因数列表的一些唯一子集的一个可能的组合。类似于:\n(2), (5), (2,2), (2,5), (2,2,2), (2,2,5), (2,5,5), ... ».reduce 方法调用是 \u0026ldquo;fold\u0026rdquo; 操作 的一种向量形式，它在调用它的列表的每个元素之间插入指定的操作符。在本例中，我们通过 \u0026amp;infix:\u0026lt;×\u0026gt; 运算符插入中缀乘法\u0026hellip;\u0026hellip;我们可以将其缩写为：\u0026amp;[×]。\n所以，我们得到的东西像这样:\n(2), (5), (2×2), (2×5), (2×2×2), (2×2×5), (2×5×5), ... 然后我们只需通过最后调用 .unique 来剔除所有重复的结果。\n尽可能的简单\u0026hellip;\u0026hellip;但不能再简单了！ 然后我们测试我们闪亮的新的基于 prime-factor 的算法。然后哭着发现，它比我们最初的试分法慢了很多。\n这里的问题是，.combinations 方法的使用在某些情况下会导致组合爆炸。我们通过取所有可能的质因子集，找到了完整的除数集:\n2×2×2×2×2×2×2×2×2×2×2×2×5×5×5×5×5×5×5×5×5×5×5×5 → 1000000000000 2×2×2×2×5×5×5 → 2000 2×2×2×2×2×2×2×2 → 256 2×5×5×5×5 → 1250 但这也意味着，我们采取了这样的子集:\n2×2×2 → 8 2×2×2 → 8 2×2×2 → 8 2 ×2 ×2 → 8 事实上，我们取了220个不同的 2×2×2 子集。更不用说495个 2×2×2×2 子集，792个 2×2×2×2 子集，等等。总的来说，1万亿的24个质因数产生了 2²⁴ 个不同的子集的幂集，我们再将其缩小到只有168个不同的除数。换句话说，.combinations 必须建立并返回一个包含 16777216 个子集的列表，».reduce 必须处理其中的每一个子集，之后，.unique 会立即丢弃其中的 99.999%。显然，我们需要一种更好的方法来将因子组合成除数。\n而且，令人高兴的是，有一个。我们可以重写乘法:\n2×2×2×2×2×2×2×2×2×2×2×2×5×5×5×5×5×5×5×5×5×5×5×5 → 1000000000000 \u0026hellip;为一个更紧凑的:\n2¹² × 5¹² → 1000000000000 然后我们观察到，只要改变两个质数的指数，从零到最大允许值(每种情况下都是12)，就可以得到所有唯一的子集:\n2⁰×5⁰ → 1 2¹×5⁰ → 2 2²×5⁰ → 4 2³×5⁰ → 8 ⋯ 2⁰×5¹ → 5 2¹×5¹ → 10 2²×5¹ → 20 2³×5¹ → 40 ⋯ 2⁰×5² → 25 2¹×5² → 50 2²×5² → 100 2³×5² → 200 ⋯ 2⁰×5³ → 125 2¹×5³ → 250 2²×5³ → 500 2³×5³ → 1000 ⋯ 2⁰×5⁴ → 625 2¹×5⁴ → 1250 2²×5⁴ → 2500 2³×5⁴ → 5000 ⋯ ⋮ ⋮ ⋮ ⋮ ⋱ 一般来说，如果一个数有质因数 pℓᴵ × pₘᴶ × pₙᴷ，那么它的完整除数集就由 pℓ⁽⁰‥ⁱ⁾ × pₘ⁽⁰‥ʲ⁾ × pₙ⁽⁰‥ᵏ⁾ 给出。\n也就是说，我们可以这样找到它们:\nmulti divisors (\\N) { # Find and count prime factors of N (as before)... my \\factors = bag prime-factors(N); # Short-cut if N is prime... return (1,N) if factors.total == 1; # Extract list of unique prime factors... my \\pₗpₘpₙ = factors.keys xx ∞; # Build all unique combinations of exponents... my \\ᴵᴶᴷ = [X] (0 .. .value for factors); # Each divisor is pₗᴵ × pₘᴶ × pₙᴷ... return ([×] .list for pₗpₘpₙ «**« ᴵᴶᴷ); } 我们得到了和上一个版本一样的质因子列表(prime-factors(N))，但现在我们将它们直接放入一个 Bag 数据结构中(bag prim-factors(N))。一个\u0026quot;bag\u0026quot;是一个整数加权集：一种特殊的哈希，其中键是列表的原始元素，值是每个不同值出现次数的计数（即它在列表中的\u0026quot;权重\u0026quot;）。\n例如，9876543210 的质因子是(2, 3, 3, 5, 17, 17, 379721)。如果我们把这个列表放到一个袋子里，我们得到的等价物是:\n{ 2=\u0026gt;1, 3=\u0026gt;2, 5=\u0026gt;1, 17=\u0026gt;2, 379721=\u0026gt;1 } 因此，将质因数列表转换为一个袋子，我们就有了一个简单而有效的方法来确定所涉及的唯一质数，以及每个质数必须升到的幂。\n然而，如果在所得的袋子中只有一个质数键，而其对应的数是1，那么原数本身一定是那个质数(升到1的幂)。在这种情况下，我们知道除数只能是那个原数和1，所以我们可以立即返回它们。\nreturn (1,N) if factors.total == 1; .total 方法只是简单地将袋子里所有的整数权重相加。如果总和为1，则只能有一个元素，权重为1。\n否则，袋子中的一个或多个键(factors.keys)就是原数的质因子列表(pₗ，pₘ，pₙ，...)，我们提取这些质因子并存储在一个合适的 Unicode 命名的变量中：pₗpₘpₙ。请注意，我们需要多个相同的初等因子列表副本：每一个可能的指数组合都需要一个。由于我们还不知道(还不知道)会有多少这样的组合，为了确保我们有足够的数量，我们只需将列表无限长：factors.keys xx ∞。在我们的例子中，这将产生这样的因子列表:\n((1,3,5,17,379721), (1,3,5,17,379721), (1,3,5,17,379721), ...) 为了得到指数集的列表，我们需要每一个可能的指数组合(I,J,K,\u0026hellip;)，从零到每个素数的最大数。也就是说，对于我们的例子来说:\n{ 2=\u0026gt;1, 3=\u0026gt;2, 5=\u0026gt;1, 17=\u0026gt;2, 379721=\u0026gt;1 } 我们需要:\n( (0,0,0,0,0), (0,0,0,0,1), (0,0,0,1,0), (0,0,0,1,1), (0,0,0,2,0), (0,0,0,2,1), (0,0,1,0,0), (0,0,1,0,1), (0,0,1,1,0), (0,0,1,1,1), (0,0,1,2,0), (0,0,1,2,1), (0,1,0,0,0), (0,1,0,0,1), (0,1,0,1,0), (0,1,0,1,1), (0,1,0,2,0), (0,1,0,2,1), (0,1,1,0,0), (0,1,1,0,1), (0,1,1,1,0), (0,1,1,1,1), (0,1,1,2,0), (0,1,1,2,1), (0,2,0,0,0), (0,2,0,0,1), (0,2,0,1,0), (0,2,0,1,1), (0,2,0,2,0), (0,2,0,2,1), (0,2,1,0,0), (0,2,1,0,1), (0,2,1,1,0), (0,2,1,1,1), (0,2,1,2,0), (0,2,1,2,1), (1,0,0,0,0), (1,0,0,0,1), (1,0,0,1,0), (1,0,0,1,1), (1,0,0,2,0), (1,0,0,2,1), (1,0,1,0,0), (1,0,1,0,1), (1,0,1,1,0), (1,0,1,1,1), (1,0,1,2,0), (1,0,1,2,1), (1,1,0,0,0), (1,1,0,0,1), (1,1,0,1,0), (1,1,0,1,1), (1,1,0,2,0), (1,1,0,2,1), (1,1,1,0,0), (1,1,1,0,1), (1,1,1,1,0), (1,1,1,1,1), (1,1,1,2,0), (1,1,1,2,1), (1,2,0,0,0), (1,2,0,0,1), (1,2,0,1,0), (1,2,0,1,1), (1,2,0,2,0), (1,2,0,2,1), (1,2,1,0,0), (1,2,1,0,1), (1,2,1,1,0), (1,2,1,1,1), (1,2,1,2,0) (1,2,1,2,1) ) 或者，为了更简洁地表达，我们需要每个指数的有效范围的交叉乘积(即 X 算子):\n# 2 3 5 17 379721 (0..1) X (0..2) X (0..1) X (0..2) X (0..1) 最大指数只是质数因子袋中的值(factors.value)，所以我们可以通过将每个\u0026quot;质数值\u0026quot;转换为 0..count 范围，得到所需指数范围的列表: 0 .. .value for factors。\n请注意，在 Raku 中，括号内的循环会产生一个该循环每次迭代的最终值的列表。或者你可以把这个构造看作是一个列表解析，就像在 Python 中一样。[range(0,value) for value in factors.values()](但不那么单调)，或者在 Haskell 中，[ [0..value] | value \u0026lt;- elems factors ](但行噪声较小)。\n然后，我们只需将得到的范围列表，通过在 X 运算符上还原列表，计算出 n-ary 交叉乘积: [X](0 .. .value for factors)，然后将得到的 I,J,K 指数列表存储在一个适当命名的变量中: ᴵᴶᴷ (是的，上标字母是完全有效的 Unicode 字母表，所以我们当然可以用它们作为标识符。)\n此时，几乎所有的艰苦工作都已经完成。我们有一个质因数的列表(pₗpₘpₙ)，还有一个指数的唯一组合的列表，这些指数将产生不同的除数(ᴵᴶᴷ)，所以我们现在需要做的就是用向量指数运算符(pₗpₘpₙ «**« ᴵᴶᴷ) 将第一个列表中的每一个数字集提高到第二个列表中的各种指数集，然后在另一个列表理解中乘以每个指数产生的值列表(([×] .list for …))，产生除数列表。\n就这样，就完成了。是五行而不是一行:\nmulti divisors (\\N) { my \\factors = bag prime-factors(N); return (1,N) if factors.total == 1; my \\pₗpₘpₙ = factors.keys xx ∞; my \\ᴵᴶᴷ = [X] (0 .. .value for factors); return ([×] .list for pₗpₘpₙ «**« ᴵᴶᴷ); } \u0026hellip;但里面并没有潜伏着组合式的炸药。我们没有直接建立 O(2ᴺ) 个因子的子集，而是建立 O(N) 个各自指数的子集。\n然后我们测试我们更闪亮的新式 divisors 实现。当我们发现它的尺度比之前的好得离谱时，我们会流泪\u0026hellip;欣慰。也比原来的试除法好得多:\n任务完成了！\n两全其美 只不过，如果我们把图形的起点放大。\n\u0026hellip;我们看到，我们新算法的性能最终只会更好。由于 Pollard 的 𝜌 算法的核心计算开销相对较高，而且需要建立、指数化、和质因数的幂集相乘，这个版本的除法的性能比简单的试除法略差\u0026hellip;\u0026hellip;至少在小于 N=10000 的数字上是这样。\n理想情况下，我们可以以某种方式同时采用这两种算法：对\u0026quot;小\u0026quot;的数字使用试除法，而对一切更大的数字使用质因数。而这在 Raku 中也是微不足道的。不，不是把它们混在一起，用某种 Frankenstein 函数:\nmulti divisors (\\N) { if N \u0026lt; 10⁴ { my \\small-divisors = (1..sqrt N).grep(N %% *); my \\big-divisors = N «div« small-divisors; return unique flat small-divisors, big-divisors; } else { my \\factors = bag prime-factors(N); return (1,N) if factors.total == 1; my \\pₗpₘpₙ = factors.keys xx ∞; my \\ᴵᴶᴷ = [X] (0 .. .value for factors); return ([×] .list for pₗpₘpₙ «**« ᴵᴶᴷ); } } 相反，我们只需像之前那样，在单独的 multi 中独立地实现这两种方法，然后修改它们的签名，告诉编译器它们各自应该应用的N个值的范围:\nconstant SMALL = 1 ..^ 10⁴; constant BIG = 10⁴ .. ∞; multi divisors (\\N where BIG) { my \\factors = bag prime-factors(N); return (1,N) if factors.total == 1; my \\pₗpₘpₙ = factors.keys xx ∞; my \\ᴵᴶᴷ = [X] (0 .. .value for factors); return ([×] .list for pₗpₘpₙ «**« ᴵᴶᴷ); } multi divisors (\\N where SMALL) { my \\small-divisors = (1..sqrt N).grep(N %% *); my \\big-divisors = N «div« small-divisors; return unique flat small-divisors, big-divisors; } 在这一特殊情况下，实际的改进只是轻微的；也许是太轻微了，不值得为维持两个相同功能的变体而烦恼。但这里所展示的原则是很重要的。Raku 的多重分派机制使得在现有函数中注入特殊情况下的优化变得非常容易\u0026hellip;而不会使函数的原始源代码变得更复杂、更慢或更难维护。\n同时，在平行宇宙中\u0026hellip; 现在我们有了一个有效的方法来找到任何数字的合适的除数，我们可以使用前面显示的代码开始定位友好对。\nfor 1..∞ -\u0026gt; \\number { my \\friend = 𝑠(number); say (number, friend) if number \u0026lt; friend \u0026amp;\u0026amp; 𝑠(friend) == number; } 当我们这样做的时候，我们会发现，前几对数打印出来的速度非常快，但是，之后，事情就开始明显变慢了。所以我们可能会开始寻找另一种方法来加速搜索。\n例如，我们可能会注意到，for 循环的每一次迭代都是完全独立于任何其他循环的。不需要外部信息来测试特定的友好对，也不需要在迭代之间传递任何持久状态。而我们很快就会意识到，这意味着这是一个引入一点并发性的绝佳机会。\n在许多语言中，将我们简单的线性 for 循环转换为某种并发搜索需要大量的额外代码：调度、创建、协调、管理、协调、同步和终止线程或线程对象的集合。\n但在 Raku 中，这只是意味着我们需要在现有的 for 循环中添加一个五字母的修饰符:\nhyper for 1..∞ -\u0026gt; \\number { my \\friend = 𝑠(number); say (number, friend) if number \u0026lt; friend \u0026amp;\u0026amp;𝑠(friend) == number; } hyper前缀告诉编译器，这个特定的 for 循环不需要顺序迭代；它的每一次迭代都可以用编译器认为合适的并发程度来执行（默认情况下，以四个并行线程执行，尽管有额外的参数允许你调整并发程度以匹配你的硬件能力）。\nhyper前缀实际上只是一个便捷写法，用于在被迭代的列表中添加对 .hyper 方法的调用。该方法将对象的迭代器转换为可以并发迭代的方法。所以我们也可以这样写我们的并发循环:\nfor (1..∞).hyper -\u0026gt; \\number { my \\friend = 𝑠(number); say (number, friend) if number \u0026lt; friend \u0026amp;\u0026amp;𝑠(friend) == number; } 请注意，无论我们以哪种方式写这个并行 for 循环，在多个迭代并行发生的情况下，结果都不再保证严格按照递增顺序打印出来。但实际上，由于整数间友好对的密度较低，无论如何都极有可能出现这种情况。\n当我们将之前的 for 循环转换为 hyper for 循环时，循环的性能会翻倍。例如，普通循环可以在一个多小时内找到100万个以内的每一个友好对；hyper 循环则在25分钟内完成同样的工作。\n到无穷大，甚至更远 最后，在构建和优化了我们寻找失落的情侣的所有组件后，我们可以开始认真地寻找了。不仅仅是寻找第一对友好数，而是寻找第一对超过一千的对，超过一百万的对，超过十亿的对，超过一万亿的对，等等。\n# Convert 1 → \u0026#34;10⁰\u0026#34;, 10 → \u0026#34;10¹\u0026#34;, 100 → \u0026#34;10²\u0026#34;, 1000 → \u0026#34;10³\u0026#34;, ... sub order (\\N where /^ 10* $/) { 10 ~ N.chars.pred.trans: \u0026#39;0123456789\u0026#39; =\u0026gt; \u0026#39;⁰¹²³⁴⁵⁶⁷⁸⁹\u0026#39; } # For every power of 1000... for 1, 10³, 10⁶ ... ∞ -\u0026gt; \\min { # Concurrently find the first amicable pair in that range... for (min..∞).hyper -\u0026gt; \\number { my \\friend = 𝑠(number); next if number \u0026gt;= friend || 𝑠(friend) != number; # Report it and go on to the next power of 1000... say \u0026#34;First amicable pair over \u0026amp;order(min):\u0026#34;, \u0026#34;\\t({number}, {friend})\u0026#34;; last; } } 这显示:\nFirst amicable pair over 10⁰: (220, 284) First amicable pair over 10³: (1184, 1210) First amicable pair over 10⁶: (1077890, 1099390) First amicable pair over 10⁹: (1000233608, 1001668568) First amicable pair over 10¹²: (1000302285872, 1000452085744) et cetera 好吧，最终揭开了他们的面纱!\nby Damian\n"},"name":"with friends like these","published":"2019-09-18T23:15:48Z","summary":"http://blogs.perl.org/users/damian_conway/2019/08/with-friends-like-these.html\nC-o-rr-a-ll-i-n-g d-i-tt-o-e-d l-e-tt-e-r-s\n我本打算本周重点关注第20周挑战的第一个任务\u0026hellip;\u0026hellip;但我能说什么呢？这个任务是把一个在命令行中指定的字符串分解成相同的字符:\n\u0026quot;toolless\u0026quot; → t oo ll e ss \u0026quot;subbookkeeper\u0026quot; → s u bb oo kk ee p e r \u0026quot;committee\u0026quot; → c o mm i tt ee 但是这在 Raku 中就是小菜一碟:\nuse v6.d; sub MAIN (\\str) { .say for str.comb: /(.) $0*/ } 或者使用更优雅的方式：\n.say for $str.comb: /\\w+ % \u0026lt;same\u0026gt;/ 而在 Perl 中也几乎一样简单:\nuse v5.30; my $str = $ARGV[0] // die \u0026#34;Usage:\\n $0 \u0026lt;str\u0026gt;\\n\u0026#34;; say $\u0026amp; while $str =~ /(.","type":"entry","url":"http://localhost:1313/notes/with-friends-like-these/"}