{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003cp\u003e\u003cimg src=\"https://mojolicious.io/blog/2018/12/20/testing-dancer/banner.jpg\" alt=\"舞蹈比赛的舞者和评委\"\u003e\u003c/p\u003e\n\u003cp\u003eDancer（及其他）PSGI 应用程序的作者很可能习惯于\u003ca href=\"https://metacpan.org/pod/distribution/Dancer2/lib/Dancer2/Manual.pod#TESTING\"\u003e测试\u003c/a\u003e与\u003ca href=\"https://metacpan.org/pod/Plack::Test\"\u003ePlack::Test\u003c/a\u003e，虽然这是一个崇敬的选择，这是很裸机。\u003c/p\u003e\n\u003cp\u003e在去年出现的过程中，我写了一篇关于\u003ca href=\"https://mojolicious.org/perldoc/Test/Mojo\"\u003eTest::Mojo的文章\u003c/a\u003e，展示了许多简单易用（我敢说）有趣的方法，你可以用它来测试你的Mojolicious应用程序。如果你错过了，那就去\u003ca href=\"https://mojolicious.io/blog/2017/12/09/day-9-the-best-way-to-test/\"\u003e看看吧\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e我希望至少有一些人能够阅读并思考，“我很乐意使用它，但我不会使用Mojolicious！”; 好吧，你很幸运！只需要一点角色来弥补差距，你也可以使用Test::Mojo来测试你的PSGI应用程序！\u003c/p\u003e\n\u003ch2 id=\"安装psgi应用程序\"\u003e安装PSGI应用程序\u003c/h2\u003e\n\u003cp\u003eMojolicious本身不使用\u003ca href=\"https://metacpan.org/pod/PSGI\"\u003ePSGI\u003c/a\u003e协议，因为它没有提供某些特性，而且某些异步操作也是必需的。也就是说，你可以使用\u003ca href=\"https://mojolicious.org/perldoc/Mojo/Server/PSGI\"\u003eMojo::Server::PSGI\u003c/a\u003e在PSGI服务器上提供Mojolicious应用程序。当你的基于Mojolicious的应用程序检测到它已在PSGI服务器（例如plackup或Starman）下启动时，将自动使用此Mojolicious核心模块。\u003c/p\u003e\n\u003cp\u003e虽然在Mojo应用程序和PSGI服务器之间进行转换是核心功能，但相反，在PSGI应用程序和Mojolicious服务器（或应用程序，如你所见）之间进行转换可作为第三方模块使用。\u003ca href=\"https://metacpan.org/pod/Mojolicious::Plugin::MountPSGI\"\u003eMojolicious::Plugin::MountPSGI\u003c/a\u003e，顾名思义，可以将PSGI应用程序安装到基于Mojolicious的应用程序中。为此，它构建了一个新的，空的Mojolicious应用程序，在将任何请求转移到PSGI环境之前，将其转移到任何\u003ca href=\"https://mojolicious.org/perldoc/Mojolicious/Plugin/Mount\"\u003emount\u003c/a\u003e-ed应用程序。\u003c/p\u003e\n\u003ch2 id=\"使用testmojo进行测试\"\u003e使用Test::Mojo进行测试\u003c/h2\u003e\n\u003cp\u003e一旦你能做到这一点，采用PSGI应用程序，用MountPSGI包装它，并将其设置为与Test::Mojo一起使用的应用程序是微不足道的。尽管如此，为了让它变得更加容易，在\u003ca href=\"https://metacpan.org/pod/Test::Mojo::Role::PSGI\"\u003eTest::Mojo::Role::PSGI中\u003c/a\u003e已经完成了所有这些工作。\u003c/p\u003e\n\u003cp\u003e与任何\u003ca href=\"https://mojolicious.io/blog/2017/12/13/day-13-more-about-roles/\"\u003eMojolicious Role\u003c/a\u003e一样，我们可以使用应用\u003ca href=\"https://mojolicious.io/blog/2017/12/13/day-13-more-about-roles/\"\u003e角色\u003c/a\u003e\u003ccode\u003ewith_roles\u003c/code\u003e创建（主要是匿名）子类。你可以使用快捷方式\u003ccode\u003e+\u003c/code\u003e代替\u003ccode\u003eTest::Mojo::Role::\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eTest::Mojo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$class\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eTest::Mojo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_roles\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;+PSGI\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后使用PSGI应用程序的路径实例化该角色，或者使用PSGI应用程序本身。\u003c/p\u003e\n\u003cp\u003e由于你使用的是角色，这些角色都与组合有关，因此你还可以应用可能\u003ca href=\"https://metacpan.org/search?q=%22Test%3A%3AMojo%3A%3ARole%22\"\u003e在CPAN上找到的\u003c/a\u003e其他角色。\u003c/p\u003e\n\u003ch2 id=\"一个例子\"\u003e一个例子\u003c/h2\u003e\n\u003cp\u003e作为一个例子，假设我们有一个简单的应用程序脚本（命名\u003ccode\u003eapp.psgi\u003c/code\u003e），可以以不同的方式渲染 \u003ccode\u003e\u0026quot;hello world\u0026quot;\u003c/code\u003e或\u003ccode\u003e\u0026quot;hello $user\u0026quot;\u003c/code\u003e 。我将允许纯文本响应，JSON和模板化HTML（使用\u003ca href=\"https://metacpan.org/pod/Dancer2::Template::Simple\"\u003e简单的\u003c/a\u003e模板来保持这种简洁）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eDancer2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eset\u003c/span\u003e \u003cspan class=\"n\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;simple\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eset\u003c/span\u003e \u003cspan class=\"n\"\u003eviews\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;/text\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparam\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"sr\"\u003e//\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;world\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esend_as\u003c/span\u003e \u003cspan class=\"n\"\u003eplain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;hello $name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;/data\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparam\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"sr\"\u003e//\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;world\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esend_as\u003c/span\u003e \u003cspan class=\"n\"\u003eJSON\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ehello\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$name\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;/html\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparam\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"sr\"\u003e//\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;world\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003etemplate\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$name\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e而模板（\u003ccode\u003ehello.tt\u003c/code\u003e）是\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003edl\u003c/span\u003e \u003cspan class=\"na\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;data\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003edt\u003c/span\u003e \u003cspan class=\"na\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003ehello\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003edt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003edd\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026lt;\u003c/span\u003e% name %\u0026gt;\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003edd\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003edl\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\"\u003edl\u003c/a\u003e，\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt\"\u003edt\u003c/a\u003e和\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd\"\u003edd\u003c/a\u003e标签是一种在 HTML 中标记键-值对语义的方式，因此它是几乎和上面的JOSN格式一样。我已经构建的HTML，虽然用于显示很好，但以编程方式查询就不友好了，这对于示例来说是故意的。\u003c/p\u003e\n\u003ch2 id=\"测试\"\u003e测试\u003c/h2\u003e\n\u003cp\u003e当然，我们可以用 \u003ca href=\"https://metacpan.org/pod/distribution/Plack/script/plackup\"\u003e\u003ccode\u003eplackup\u003c/code\u003e\u003c/a\u003e 启动应用程序，但这不是我们想要做的。我会稍微分解下测试脚本，但如果你想看到这些文件中的任何一个，请查看\u003ca href=\"https://github.com/MojoliciousDotIO/mojolicious.io/tree/master/blog/2018/12/20/testing-dancer/ex\"\u003e博客仓库\u003c/a\u003e以获取完整列表。相反，让我们将其加载到测试脚本中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eMojo::Base\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003estrict\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在，如果你不熟悉，\u003ccode\u003euse Mojo::Base -strict\u003c/code\u003e可以快速说出来\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003estrict\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003ewarnings\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eutf8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eIO::Handle\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003efeature\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;:5.10\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但节省了大量的打字。接下来，我们加载必要的测试库。然后创建一个组合了 \u003ccode\u003ePSGI\u003c/code\u003e角色的 \u003ccode\u003eTest::Mojo\u003c/code\u003e实例，并创建一个指向我们要测试的应用程序的新实例。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eTest::More\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eTest::Mojo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$t\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eTest::Mojo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_roles\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;+PSGI\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;app.psgi\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e有了这个，继续测试！在我们的第一次测试中，我们将专注于纯文本端点\u003ccode\u003e/text\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$t\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eget_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/text\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus_is\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type_like\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sx\"\u003eqr[text/plain]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_is\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;hello world\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上述每个方法调用都是一个测试。第一个，\u003ccode\u003eget_ok\u003c/code\u003e构建一个事务并请求资源。由于url是相对的，它由app处理的（如果我们想,我们可以使用完全限定的url请求和web资源）。事务存储在tester对象（\u003ccode\u003e$t\u003c/code\u003e）中，所有后续测试将检查它，直到它被下一个请求替换。\u003c/p\u003e\n\u003cp\u003e剩下的测试是相当不言自明的，我们检查响应状态是200，我们得到了一个我们期望的内容类型标题，其内容是我们期望的。内容已经被utf-8解码，并且脚本拥有隐式的 \u003ccode\u003euse utf8\u003c/code\u003e，所以如果你期望 unicode，你可以轻松地比较它们。该测试返回测试对象，因此可以进行链接，从而实现视觉上干净的测试集。\u003c/p\u003e\n\u003cp\u003e下一个测试类似，但是这个测试使用标准的\u003ca href=\"https://mojolicious.org/perldoc/Mojo/UserAgent\"\u003eMojo::UserAgent\u003c/a\u003e样式请求生成一个查询字符串，为我们的问候语命名为 Santa。测试是完全相同的，当然它检查内容是否迎问候了 Santa。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$t\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eget_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/text\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eform\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;santa\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus_is\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type_like\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sx\"\u003eqr[text/plain]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_is\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;hello santa\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e继续我们请求数据端点，无论是否有查询，然后类似地测试响应。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$t\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eget_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/data\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus_is\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type_like\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sx\"\u003eqr[application/json]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ejson_is\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/hello\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;world\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$t\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epost_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/data\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eform\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;rudolph\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus_is\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type_like\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sx\"\u003eqr[application/json]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ejson_is\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/hello\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;rudolph\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以看到我们使用该\u003ccode\u003ejson_is\u003c/code\u003e方法来测试响应。现在，测试本来可能是\u003ccode\u003e-\u0026gt;json_is({hello =\u0026gt; 'rudolph'})\u003c/code\u003e想要测试整个文档。通过传递\u003ca href=\"https://mojolicious.org/perldoc/Mojo/JSON/Pointer\"\u003eJSON指针，\u003c/a\u003e我只能检查我感兴趣的部分。\u003c/p\u003e\n\u003cp\u003e最后，我将测试HTML端点。正如我上面所说，结果不容易解析。我们想要测试带有id 的\u003ccode\u003edd\u003c/code\u003e标签后面的标签内容，所有这些内容都在带有id 的标签内。那将是一个可怕的正则表达式（呵呵）。然而，使用\u003ca href=\"https://mojolicious.org/perldoc/Mojo/DOM/CSS\"\u003eCSS选择器\u003c/a\u003e就是一小菜一碟了。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$t\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eget_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/html\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus_is\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type_like\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sx\"\u003eqr[text/html]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etext_is\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;dl#data dt#hello + dd\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;world\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$t\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epost_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/html\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eform\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;grinch\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estatus_is\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type_like\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sx\"\u003eqr[text/html]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etext_is\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;dl#data dt#hello + dd\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;grinch\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003edone_testing\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在今年的Mojolicious Advent 日历中，我们已经看到\u003ca href=\"https://mojolicious.io/blog/2018/12/05/compound-selectors/\"\u003eCSS选择器\u003c/a\u003e 强大功能的一些好\u003ca href=\"https://mojolicious.io/blog/2018/12/15/practical-web-content-munging/\"\u003e例子\u003c/a\u003e，所以我不会详细介绍。然而，重点仍然是，使用CSS选择器测试HTML响应允许你编写更多更好测试的方式使测试成为目标，因为你不必破解提取所需的部分。\u003c/p\u003e\n\u003ch2 id=\"测试websockets\"\u003e测试WebSockets\u003c/h2\u003e\n\u003cp\u003e好的，这一切都很好，但当然现在它已经到了你们一直在等待的地步：你能测试一下WebSockets吗？正如Jason Crome在他 \u003ca href=\"http://advent.perldancer.org/2018/13\"\u003eTwelve Days of Dancer\u003c/a\u003e 中所提到的，你现在可以通过\u003ca href=\"https://metacpan.org/pod/Dancer2::Plugin::WebSocket\"\u003eDancer2::Plugin::WebSocket\u003c/a\u003e与WebSockets \u003ca href=\"https://metacpan.org/pod/Dancer2::Plugin::WebSocket\"\u003e共舞\u003c/a\u003e，那么Test::Mojo可以测试它们吗？\u003c/p\u003e\n\u003cp\u003e好吧，到目前为止还没有用过我上面展示的角色。这可能是可能的，但它会涉及学习深度的PSGI魔法，我不确定我是否足够聪明; 补充显然很受欢迎 :D。\u003c/p\u003e\n\u003cp\u003e我上面还提到Test::Mojo可以通过完全限定的URL测试它可以访问的任何内容，所以让我们启动一个服务器并测试它！我将使用\u003ca href=\"https://github.com/yanick/Dancer2-Plugin-WebSocket/tree/releases/example\"\u003e与插件捆绑在一起的示例\u003c/a\u003e来实现简化。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eMojo::Base\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003estrict\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eEV\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eTest::More\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eTest::Mojo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003eTwiggy::Server\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e \u003cspan class=\"nn\"\u003ePlack::Util\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$app\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003ePlack::Util::\u003c/span\u003e\u003cspan class=\"n\"\u003eload_psgi\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;bin/app.psgi\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$url\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$twiggy\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eTwiggy::Server\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003ehost\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;127.0.0.1\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003eserver_ready\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$args\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eshift\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$url\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;ws://$args-\u0026gt;{host}:$args-\u0026gt;{port}/ws\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$twiggy\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eregister_service\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$app\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这启动Twiggy绑定到随机端口上的localhost并使用它启动应用程序。当服务器启动时，实际的主机和端口将传递给\u003ccode\u003eserver_ready\u003c/code\u003e我们用于构建测试URL 的回调。现在你只是正常创建一个Test::Mojo实例，但这次打开一个websocket到我们上面构建的完全限定的url上。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$t\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nn\"\u003eTest::Mojo\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$t\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewebsocket_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$url\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esend_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ehello\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;Dancer\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e}})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"nn\"\u003emessage_ok\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ejson_message_is\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"n\"\u003ehello\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;browser!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efinish_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003edone_testing\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e与前面的示例不同，这次连接在方法调用之间保持打开（但被阻止）。根据示例的协议，我们首先将问候语作为JSON文档发送给Dancer应用程序。由于现实世界的websocket使用只是序列化的JSON消息，Mojolicious提供了许多JSON-over-WebSocket便利。一个这样的便利是虚拟websocket框架类型，它采用数据结构并在将其实际作为文本框架发送之前将其序列化为JSON。\u003c/p\u003e\n\u003cp\u003e然后我们等待收到回复的消息\u003ccode\u003emessage_ok\u003c/code\u003e。在这种情况下，我们希望应用程序通过称我们为“浏览器！”来迎接我们。哦，它不知道更好！我们可以测试JSON回复\u003ccode\u003ejson_message_is\u003c/code\u003e（\u003ccode\u003ejson_is\u003c/code\u003e如上所述，但对于websocket消息）。最后，我们关闭连接，测试它是否正确关闭。\u003c/p\u003e\n\u003cp\u003e即使从Dancer应用程序测试WebSockets也很容易！\u003c/p\u003e\n\u003ch2 id=\"结论\"\u003e结论\u003c/h2\u003e\n\u003cp\u003e虽然PSGI空间中有一些很棒的测试选项，但Test::Mojo对Dancer和PSGI用户有很多好处。通过使用\u003ccode\u003eTest::Mojo::Role::PSGI\u003c/code\u003e或运行本地绑定的服务器，Test::Mojo可以是任何PSGI开发人员工具箱中的工具。\u003c/p\u003e\n","text":"\nDancer（及其他）PSGI 应用程序的作者很可能习惯于测试与Plack::Test，虽然这是一个崇敬的选择，这是很裸机。\n在去年出现的过程中，我写了一篇关于Test::Mojo的文章，展示了许多简单易用（我敢说）有趣的方法，你可以用它来测试你的Mojolicious应用程序。如果你错过了，那就去看看吧。\n我希望至少有一些人能够阅读并思考，“我很乐意使用它，但我不会使用Mojolicious！”; 好吧，你很幸运！只需要一点角色来弥补差距，你也可以使用Test::Mojo来测试你的PSGI应用程序！\n安装PSGI应用程序 Mojolicious本身不使用PSGI协议，因为它没有提供某些特性，而且某些异步操作也是必需的。也就是说，你可以使用Mojo::Server::PSGI在PSGI服务器上提供Mojolicious应用程序。当你的基于Mojolicious的应用程序检测到它已在PSGI服务器（例如plackup或Starman）下启动时，将自动使用此Mojolicious核心模块。\n虽然在Mojo应用程序和PSGI服务器之间进行转换是核心功能，但相反，在PSGI应用程序和Mojolicious服务器（或应用程序，如你所见）之间进行转换可作为第三方模块使用。Mojolicious::Plugin::MountPSGI，顾名思义，可以将PSGI应用程序安装到基于Mojolicious的应用程序中。为此，它构建了一个新的，空的Mojolicious应用程序，在将任何请求转移到PSGI环境之前，将其转移到任何mount-ed应用程序。\n使用Test::Mojo进行测试 一旦你能做到这一点，采用PSGI应用程序，用MountPSGI包装它，并将其设置为与Test::Mojo一起使用的应用程序是微不足道的。尽管如此，为了让它变得更加容易，在Test::Mojo::Role::PSGI中已经完成了所有这些工作。\n与任何Mojolicious Role一样，我们可以使用应用角色with_roles创建（主要是匿名）子类。你可以使用快捷方式+代替Test::Mojo::Role::。\nuse Test::Mojo; my $class = Test::Mojo-\u0026gt;with_roles(\u0026#39;+PSGI\u0026#39;); 然后使用PSGI应用程序的路径实例化该角色，或者使用PSGI应用程序本身。\n由于你使用的是角色，这些角色都与组合有关，因此你还可以应用可能在CPAN上找到的其他角色。\n一个例子 作为一个例子，假设我们有一个简单的应用程序脚本（命名app.psgi），可以以不同的方式渲染 \u0026quot;hello world\u0026quot;或\u0026quot;hello $user\u0026quot; 。我将允许纯文本响应，JSON和模板化HTML（使用简单的模板来保持这种简洁）。\nuse Dancer2; set template =\u0026gt; \u0026#39;simple\u0026#39;; set views =\u0026gt; \u0026#39;.\u0026#39;; any \u0026#39;/text\u0026#39; =\u0026gt; sub { my $name = param(\u0026#39;name\u0026#39;) // \u0026#39;world\u0026#39;; send_as plain =\u0026gt; \u0026#34;hello $name\u0026#34;; }; any \u0026#39;/data\u0026#39; =\u0026gt; sub { my $name = param(\u0026#39;name\u0026#39;) // \u0026#39;world\u0026#39;; send_as JSON =\u0026gt; { hello =\u0026gt; $name }; }; any \u0026#39;/html\u0026#39; =\u0026gt; sub { my $name = param(\u0026#39;name\u0026#39;) // \u0026#39;world\u0026#39;; template \u0026#39;hello\u0026#39; =\u0026gt; { name =\u0026gt; $name }; }; start; 而模板（hello.tt）是\n\u0026lt;dl id=\u0026#34;data\u0026#34;\u0026gt; \u0026lt;dt id=\u0026#34;hello\u0026#34;\u0026gt;hello\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;\u0026lt;% name %\u0026gt;\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; dl，dt和dd标签是一种在 HTML 中标记键-值对语义的方式，因此它是几乎和上面的JOSN格式一样。我已经构建的HTML，虽然用于显示很好，但以编程方式查询就不友好了，这对于示例来说是故意的。\n测试 当然，我们可以用 plackup 启动应用程序，但这不是我们想要做的。我会稍微分解下测试脚本，但如果你想看到这些文件中的任何一个，请查看博客仓库以获取完整列表。相反，让我们将其加载到测试脚本中。\nuse Mojo::Base -strict; 现在，如果你不熟悉，use Mojo::Base -strict可以快速说出来\nuse strict; use warnings; use utf8; use IO::Handle; use feature \u0026#39;:5.10\u0026#39;; 但节省了大量的打字。接下来，我们加载必要的测试库。然后创建一个组合了 PSGI角色的 Test::Mojo实例，并创建一个指向我们要测试的应用程序的新实例。\nuse Test::More; use Test::Mojo; my $t = Test::Mojo-\u0026gt;with_roles(\u0026#39;+PSGI\u0026#39;)-\u0026gt;new(\u0026#39;app.psgi\u0026#39;); 有了这个，继续测试！在我们的第一次测试中，我们将专注于纯文本端点/text。\n$t-\u0026gt;get_ok(\u0026#39;/text\u0026#39;) -\u0026gt;status_is(200) -\u0026gt;content_type_like(qr[text/plain]) -\u0026gt;content_is(\u0026#39;hello world\u0026#39;); 上述每个方法调用都是一个测试。第一个，get_ok构建一个事务并请求资源。由于url是相对的，它由app处理的（如果我们想,我们可以使用完全限定的url请求和web资源）。事务存储在tester对象（$t）中，所有后续测试将检查它，直到它被下一个请求替换。\n剩下的测试是相当不言自明的，我们检查响应状态是200，我们得到了一个我们期望的内容类型标题，其内容是我们期望的。内容已经被utf-8解码，并且脚本拥有隐式的 use utf8，所以如果你期望 unicode，你可以轻松地比较它们。该测试返回测试对象，因此可以进行链接，从而实现视觉上干净的测试集。\n下一个测试类似，但是这个测试使用标准的Mojo::UserAgent样式请求生成一个查询字符串，为我们的问候语命名为 Santa。测试是完全相同的，当然它检查内容是否迎问候了 Santa。\n$t-\u0026gt;get_ok(\u0026#39;/text\u0026#39;, form =\u0026gt; { name =\u0026gt; \u0026#39;santa\u0026#39; }) -\u0026gt;status_is(200) -\u0026gt;content_type_like(qr[text/plain]) -\u0026gt;content_is(\u0026#39;hello santa\u0026#39;); 继续我们请求数据端点，无论是否有查询，然后类似地测试响应。\n$t-\u0026gt;get_ok(\u0026#39;/data\u0026#39;) -\u0026gt;status_is(200) -\u0026gt;content_type_like(qr[application/json]) -\u0026gt;json_is(\u0026#39;/hello\u0026#39; =\u0026gt; \u0026#39;world\u0026#39;); $t-\u0026gt;post_ok(\u0026#39;/data\u0026#39; =\u0026gt; form =\u0026gt; { name =\u0026gt; \u0026#39;rudolph\u0026#39; }) -\u0026gt;status_is(200) -\u0026gt;content_type_like(qr[application/json]) -\u0026gt;json_is(\u0026#39;/hello\u0026#39; =\u0026gt; \u0026#39;rudolph\u0026#39;); 你可以看到我们使用该json_is方法来测试响应。现在，测试本来可能是-\u0026gt;json_is({hello =\u0026gt; 'rudolph'})想要测试整个文档。通过传递JSON指针，我只能检查我感兴趣的部分。\n最后，我将测试HTML端点。正如我上面所说，结果不容易解析。我们想要测试带有id 的dd标签后面的标签内容，所有这些内容都在带有id 的标签内。那将是一个可怕的正则表达式（呵呵）。然而，使用CSS选择器就是一小菜一碟了。\n$t-\u0026gt;get_ok(\u0026#39;/html\u0026#39;) -\u0026gt;status_is(200) -\u0026gt;content_type_like(qr[text/html]) -\u0026gt;text_is(\u0026#39;dl#data dt#hello + dd\u0026#39;, \u0026#39;world\u0026#39;); $t-\u0026gt;post_ok(\u0026#39;/html\u0026#39; =\u0026gt; form =\u0026gt; { name =\u0026gt; \u0026#39;grinch\u0026#39; }) -\u0026gt;status_is(200) -\u0026gt;content_type_like(qr[text/html]) -\u0026gt;text_is(\u0026#39;dl#data dt#hello + dd\u0026#39;, \u0026#39;grinch\u0026#39;); done_testing; 在今年的Mojolicious Advent 日历中，我们已经看到CSS选择器 强大功能的一些好例子，所以我不会详细介绍。然而，重点仍然是，使用CSS选择器测试HTML响应允许你编写更多更好测试的方式使测试成为目标，因为你不必破解提取所需的部分。\n测试WebSockets 好的，这一切都很好，但当然现在它已经到了你们一直在等待的地步：你能测试一下WebSockets吗？正如Jason Crome在他 Twelve Days of Dancer 中所提到的，你现在可以通过Dancer2::Plugin::WebSocket与WebSockets 共舞，那么Test::Mojo可以测试它们吗？\n好吧，到目前为止还没有用过我上面展示的角色。这可能是可能的，但它会涉及学习深度的PSGI魔法，我不确定我是否足够聪明; 补充显然很受欢迎 :D。\n我上面还提到Test::Mojo可以通过完全限定的URL测试它可以访问的任何内容，所以让我们启动一个服务器并测试它！我将使用与插件捆绑在一起的示例来实现简化。\nuse Mojo::Base -strict; use EV; use Test::More; use Test::Mojo; use Twiggy::Server; use Plack::Util; my $app = Plack::Util::load_psgi(\u0026#39;bin/app.psgi\u0026#39;); my $url; my $twiggy = Twiggy::Server-\u0026gt;new( host =\u0026gt; \u0026#39;127.0.0.1\u0026#39;, server_ready =\u0026gt; sub { my $args = shift; $url = \u0026#34;ws://$args-\u0026gt;{host}:$args-\u0026gt;{port}/ws\u0026#34;; }, ); $twiggy-\u0026gt;register_service($app); 这启动Twiggy绑定到随机端口上的localhost并使用它启动应用程序。当服务器启动时，实际的主机和端口将传递给server_ready我们用于构建测试URL 的回调。现在你只是正常创建一个Test::Mojo实例，但这次打开一个websocket到我们上面构建的完全限定的url上。\nmy $t = Test::Mojo-\u0026gt;new; $t-\u0026gt;websocket_ok($url) -\u0026gt;send_ok({json =\u0026gt; {hello =\u0026gt; \u0026#39;Dancer\u0026#39;}}) -\u0026gt;message_ok -\u0026gt;json_message_is({hello =\u0026gt; \u0026#39;browser!\u0026#39;}) -\u0026gt;finish_ok; done_testing; 与前面的示例不同，这次连接在方法调用之间保持打开（但被阻止）。根据示例的协议，我们首先将问候语作为JSON文档发送给Dancer应用程序。由于现实世界的websocket使用只是序列化的JSON消息，Mojolicious提供了许多JSON-over-WebSocket便利。一个这样的便利是虚拟websocket框架类型，它采用数据结构并在将其实际作为文本框架发送之前将其序列化为JSON。\n然后我们等待收到回复的消息message_ok。在这种情况下，我们希望应用程序通过称我们为“浏览器！”来迎接我们。哦，它不知道更好！我们可以测试JSON回复json_message_is（json_is如上所述，但对于websocket消息）。最后，我们关闭连接，测试它是否正确关闭。\n即使从Dancer应用程序测试WebSockets也很容易！\n结论 虽然PSGI空间中有一些很棒的测试选项，但Test::Mojo对Dancer和PSGI用户有很多好处。通过使用Test::Mojo::Role::PSGI或运行本地绑定的服务器，Test::Mojo可以是任何PSGI开发人员工具箱中的工具。\n"},"name":"测试 Dancer","published":"2018-12-20T16:16:47Z","summary":"Dancer（及其他）PSGI 应用程序的作者很可能习惯于测试与Plack::Test，虽然这是一个崇敬的选择，这是很裸机。\n在去年出现的过程中，我写了一篇关于Test::Mojo的文章，展示了许多简单易用（我敢说）有趣的方法，你可以用它来测试你的Mojolicious应用程序。如果你错过了，那就去看看吧。\n我希望至少有一些人能够阅读并思考，“我很乐意使用它，但我不会使用Mojolicious！”; 好吧，你很幸运！只需要一点角色来弥补差距，你也可以使用Test::Mojo来测试你的PSGI应用程序！\n安装PSGI应用程序 Mojolicious本身不使用PSGI协议，因为它没有提供某些特性，而且某些异步操作也是必需的。也就是说，你可以使用Mojo::Server::PSGI在PSGI服务器上提供Mojolicious应用程序。当你的基于Mojolicious的应用程序检测到它已在PSGI服务器（例如plackup或Starman）下启动时，将自动使用此Mojolicious核心模块。\n虽然在Mojo应用程序和PSGI服务器之间进行转换是核心功能，但相反，在PSGI应用程序和Mojolicious服务器（或应用程序，如你所见）之间进行转换可作为第三方模块使用。Mojolicious::Plugin::MountPSGI，顾名思义，可以将PSGI应用程序安装到基于Mojolicious的应用程序中。为此，它构建了一个新的，空的Mojolicious应用程序，在将任何请求转移到PSGI环境之前，将其转移到任何mount-ed应用程序。\n使用Test::Mojo进行测试 一旦你能做到这一点，采用PSGI应用程序，用MountPSGI包装它，并将其设置为与Test::Mojo一起使用的应用程序是微不足道的。尽管如此，为了让它变得更加容易，在Test::Mojo::Role::PSGI中已经完成了所有这些工作。\n与任何Mojolicious Role一样，我们可以使用应用角色with_roles创建（主要是匿名）子类。你可以使用快捷方式+代替Test::Mojo::Role::。\nuse Test::Mojo; my $class = Test::Mojo-\u0026gt;with_roles(\u0026#39;+PSGI\u0026#39;); 然后使用PSGI应用程序的路径实例化该角色，或者使用PSGI应用程序本身。\n由于你使用的是角色，这些角色都与组合有关，因此你还可以应用可能在CPAN上找到的其他角色。\n一个例子 作为一个例子，假设我们有一个简单的应用程序脚本（命名app.psgi），可以以不同的方式渲染 \u0026quot;hello world\u0026quot;或\u0026quot;hello $user\u0026quot; 。我将允许纯文本响应，JSON和模板化HTML（使用简单的模板来保持这种简洁）。\nuse Dancer2; set template =\u0026gt; \u0026#39;simple\u0026#39;; set views =\u0026gt; \u0026#39;.\u0026#39;; any \u0026#39;/text\u0026#39; =\u0026gt; sub { my $name = param(\u0026#39;name\u0026#39;) // \u0026#39;world\u0026#39;; send_as plain =\u0026gt; \u0026#34;hello $name\u0026#34;; }; any \u0026#39;/data\u0026#39; =\u0026gt; sub { my $name = param(\u0026#39;name\u0026#39;) // \u0026#39;world\u0026#39;; send_as JSON =\u0026gt; { hello =\u0026gt; $name }; }; any \u0026#39;/html\u0026#39; =\u0026gt; sub { my $name = param(\u0026#39;name\u0026#39;) // \u0026#39;world\u0026#39;; template \u0026#39;hello\u0026#39; =\u0026gt; { name =\u0026gt; $name }; }; start; 而模板（hello.","type":"entry","url":"https://ohmyweekly.github.io/notes/testing-dancer/"}