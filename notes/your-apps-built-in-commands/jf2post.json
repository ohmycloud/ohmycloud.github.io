{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003cp\u003e\u003cimg src=\"https://mojolicious.io/blog/2017/12/05/day-5-your-apps-built-in-commands/1200px-Rocket_prolant.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e我在本系列文章的开头提到，Mojolicious 应用程序不仅仅是 Web 服务器。然后，我展示了如何使用 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/daemon\"\u003edaemon\u003c/a\u003e 守护程序或 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/prefork\"\u003eprefork\u003c/a\u003e 命令启动 Web 服务器。在上一篇文章中，我提到了一个 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/inflate\"\u003einflate\u003c/a\u003e命令，它可以帮助您将应用程序从 Lite 增加到 Full。\u003c/p\u003e\n\u003cp\u003e但是，还有其他命令，内置在您的应用程序中，可以帮助您立即提高工作效率！\u003c/p\u003e\n\u003ch2 id=\"命令基础\"\u003e命令基础\u003c/h2\u003e\n\u003cp\u003e在开始之前，我想简要讨论与 Mojolicious 发行版捆绑在一起的 \u003ca href=\"http://mojolicious.org/perldoc/mojo\"\u003emojo\u003c/a\u003e 应用程序/脚本。这个命令是一个很小的Mojolicious应用程序（实际上是另一个“hello world”），可以被认为是“空应用程序”。内置命令适用于您的应用程序和此null应用程序，因此请使用更合适的选项。当哪个应用程序运行命令无关紧要时，您可以使用 \u003ccode\u003emojo\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e每个命令都带有一行描述和一个（可能是多行）用法语句。要查看可用命令，请运行 \u003ccode\u003emojo help\u003c/code\u003e，您将看到所有命令及其说明。你应该看到这样的东西：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ mojo \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: APPLICATION COMMAND \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTIONS\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  mojo version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  mojo generate lite_app\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ./myapp.pl daemon -m production -l http://*:8080\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ./myapp.pl get /foo\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ./myapp.pl routes -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTip: CGI and PSGI environments can be automatically detected very often and\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    work without commands.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eOptions \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e all commands\u003cspan class=\"o\"\u003e)\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -h, --help          Get more information on a specific \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --home \u0026lt;path\u0026gt;   Path to home directory of your application, defaults to\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      the value of MOJO_HOME or auto-detection\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -m, --mode \u0026lt;name\u0026gt;   Operating mode \u003cspan class=\"k\"\u003efor\u003c/span\u003e your application, defaults to the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      value of MOJO_MODE/PLACK_ENV or \u003cspan class=\"s2\"\u003e\u0026#34;development\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCommands:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecgi       Start application with CGI\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecpanify   Upload distribution to CPAN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edaemon    Start application with HTTP and WebSocket server\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eeval\u003c/span\u003e      Run code against application\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egenerate  Generate files and directories from templates\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eget       Perform HTTP request\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003einflate   Inflate embedded files to real files\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprefork   Start application with pre-forking HTTP and WebSocket server\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epsgi      Start application with PSGI\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eroutes    Show available routes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e      Run tests\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eversion   Show versions of available modules\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSee \u003cspan class=\"s1\"\u003e\u0026#39;APPLICATION help COMMAND\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e more information on a specific command.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如上所述，您现在可以通过为其中一个命令运行 \u003ccode\u003emojo help COMMAND\u003c/code\u003e 来查看有关每个命令的更详细信息。\u003c/p\u003e\n\u003ch2 id=\"内置命名\"\u003e内置命名\u003c/h2\u003e\n\u003cp\u003e由于我们已经简要讨论了 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Guides/Cookbook#DEPLOYMENT\"\u003edeployment\u003c/a\u003e ，这次我将跳过服务器，包括 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/cgi\"\u003ecgi\u003c/a\u003e 和 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/psgi\"\u003epsgi\u003c/a\u003e 命令。同样，我将跳过 \u003ccode\u003einflate\u003c/code\u003e 命令。为了空间的利益，我将跳过只运行应用程序测试的 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/test\"\u003etest\u003c/a\u003e 命令，如 \u003ca href=\"https://metacpan.org/pod/prove\"\u003eprove\u003c/a\u003e。我还将跳过 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/cpanify\"\u003ecpanify\u003c/a\u003e，让 CPAN 作者将模块上传到 CPAN（我一直使用它）。\u003c/p\u003e\n\u003ch2 id=\"generate-命令\"\u003egenerate 命令\u003c/h2\u003e\n\u003cp\u003e也许您使用的第一个命令应该是 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/generate\"\u003egenerate\u003c/a\u003e 命令。它允许您从模板生成新的应用程序（或其他）项目框架。\u003c/p\u003e\n\u003cp\u003e它有一些子命令，包括一个用于生成每种类型的应用程序的子命令。要创建 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/generate/lite_app\"\u003eLite 应用程序\u003c/a\u003e，请传递要创建的脚本的名称\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ mojo generate lite_app myapp.pl\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e要创建\u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/generate/app\"\u003e完整应用程序\u003c/a\u003e，请传递该类的名称\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ mojo generate app MyApp\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e您还可以创建\u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/generate/plugin\"\u003e插件项目\u003c/a\u003e或\u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/generate/makefile\"\u003e生成 Makefile\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e关于文件生成的主题还有更多的说法，但由于这是一篇概述文章，我现在就把它留在那里。\u003c/p\u003e\n\u003ch2 id=\"version-命令\"\u003eversion 命令\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/version\"\u003eversion\u003c/a\u003e 命令是一个简单的实用程序，用于检查 Mojolicious 安装。\u003c/p\u003e\n\u003cp\u003e它会输出您当前版本的 Perl 和 Mojolicious 以及任何已安装的可选库。例如，如果要通过 HTTPS 获取或提供站点，则需要安装 \u003ca href=\"https://metacpan.org/pod/IO::Socket::SSL\"\u003eIO::Socket::SSL\u003c/a\u003e。然后检查是否有可用的 Mojolicious 更新版本。\u003c/p\u003e\n\u003ch2 id=\"routes-命令\"\u003eroutes 命令\u003c/h2\u003e\n\u003cp\u003e一旦开始编写应用程序，您可能希望对其进行一些内省，尤其是出于调试目的。这种性质最直接的命令是 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/routes\"\u003eroutes\u003c/a\u003e。只需在您的应用上运行它，看看您定义了哪些路由。\u003c/p\u003e\n\u003cp\u003e例如，我们可以从\u003ca href=\"https://mojolicious.io/blog/2017/12/03/day-3-using-named-routes\"\u003e第3天\u003c/a\u003e开始在Santa的应用程序上运行它。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ perl santa.pl routes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/toy/:toy_name  GET  \u003cspan class=\"s2\"\u003e\u0026#34;toy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/meet/:name     GET  \u003cspan class=\"s2\"\u003e\u0026#34;staff\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/               GET  \u003cspan class=\"s2\"\u003e\u0026#34;home\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将显示已定义的三条路由。它显示了每个路由的路径，包括它们的占位符，所有三个路由都处理 GET，以及它们的路由名称。使用此输出在使用命名路由时尤其有用，正如我们在该帖子中所了解的那样;您需要的所有信息都在该表中！\u003c/p\u003e\n\u003cp\u003e我们可以更深入一点，并通过添加标志来请求详细输出\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ perl santa.pl routes -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/toy/:toy_name  ....  GET  \u003cspan class=\"s2\"\u003e\u0026#34;toy\u0026#34;\u003c/span\u003e    ^\u003cspan class=\"se\"\u003e\\/\u003c/span\u003etoy/\u003cspan class=\"o\"\u003e([\u003c/span\u003e^/.\u003cspan class=\"o\"\u003e]\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e/?\u003cspan class=\"o\"\u003e(\u003c/span\u003e?:\u003cspan class=\"se\"\u003e\\.\u003c/span\u003e\u003cspan class=\"o\"\u003e([\u003c/span\u003e^/\u003cspan class=\"o\"\u003e]\u003c/span\u003e+\u003cspan class=\"o\"\u003e))\u003c/span\u003e?$\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/meet/:name     ....  GET  \u003cspan class=\"s2\"\u003e\u0026#34;staff\u0026#34;\u003c/span\u003e  ^\u003cspan class=\"se\"\u003e\\/\u003c/span\u003emeet/\u003cspan class=\"o\"\u003e([\u003c/span\u003e^/.\u003cspan class=\"o\"\u003e]\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e/?\u003cspan class=\"o\"\u003e(\u003c/span\u003e?:\u003cspan class=\"se\"\u003e\\.\u003c/span\u003e\u003cspan class=\"o\"\u003e([\u003c/span\u003e^/\u003cspan class=\"o\"\u003e]\u003c/span\u003e+\u003cspan class=\"o\"\u003e))\u003c/span\u003e?$\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/               ....  GET  \u003cspan class=\"s2\"\u003e\u0026#34;home\u0026#34;\u003c/span\u003e   ^/?\u003cspan class=\"o\"\u003e(\u003c/span\u003e?:\u003cspan class=\"se\"\u003e\\.\u003c/span\u003e\u003cspan class=\"o\"\u003e([\u003c/span\u003e^/\u003cspan class=\"o\"\u003e]\u003c/span\u003e+\u003cspan class=\"o\"\u003e))\u003c/span\u003e?$\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e此输出包含与以前相同的所有内容，但这次它还添加了一些额外的项目。某些路由更复杂，虽然所有这些路由都很简单，因此没有显示任何标志，如果一个路由是 \u003ccode\u003eunder\u003c/code\u003e 路由或者是一个 \u003ccode\u003ewebsocket\u003c/code\u003e，那么它将被 noted\u0026hellip;.最后，它包含一个与路由实际匹配的模式。在调试某些请求与特定路由匹配（或更可能不匹配）的原因时，这有时会很有帮助。请注意，路由按顺序从上到下检查每个路由，第一个匹配是使用的。\u003c/p\u003e\n\u003ch2 id=\"get-命令\"\u003eget 命令\u003c/h2\u003e\n\u003cp\u003e现在我们开始有趣了！\u003c/p\u003e\n\u003cp\u003eMojolicious 附带了一个 \u003ca href=\"http://mojolicious.org/perldoc/Mojo/UserAgent\"\u003euser agent\u003c/a\u003e 和许多后处理功能，包括 \u003ca href=\"http://mojolicious.org/perldoc/Mojo/DOM\"\u003eHTML/XML\u003c/a\u003e 和 \u003ca href=\"http://mojolicious.org/perldoc/Mojo/JSON\"\u003eJSON\u003c/a\u003e 解析器。此命令在命令行上一起暴露这些功能，如 cURL 或 wget 的智能版本。\u003c/p\u003e\n\u003cp\u003e输出将写入 STDOUT，以便您可以根据需要将结果重定向到文件。因此，除非传递 \u003ccode\u003e-v\u003c/code\u003e，否则将从输出中省略标题。\u003c/p\u003e\n\u003cp\u003e让我们看看它能做些什么！您可以使用 \u003ca href=\"https://github.com/metacpan/metacpan-api/blob/master/docs/API-docs.md\"\u003eMeta::CPAN\u003c/a\u003e JSON API 找到最新版本的 \u003ccode\u003eIO::Socket::SSL\u003c/code\u003e。响应被解析为 JSON，只输出 \u003ccode\u003eversion\u003c/code\u003e 元素。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emojo get https://fastapi.metacpan.org/v1/module/IO::Socket::SSL /version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e您可以从 reddit 获取 Perl 标题。为此，我们获取 url（使用 \u003ccode\u003e-r\u003c/code\u003e 重定向后），然后我们给它一个 \u003ca href=\"http://mojolicious.org/perldoc/Mojo/DOM/CSS\"\u003eCSS3选择器\u003c/a\u003e，最后从每个找到的元素中提取文本。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emojo get -r reddit.com/r/perl \u003cspan class=\"s1\"\u003e\u0026#39;p.title \u0026gt; a.title\u0026#39;\u003c/span\u003e text\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这有多有趣？！\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e您可以 POST 或 PUT 或 DELETE 数据\u003c/li\u003e\n\u003cli\u003e它使用 URL 中的 \u003ccode\u003eusername:password\u003c/code\u003e 处理 HTTP 基本身份验证\u003c/li\u003e\n\u003cli\u003e您可以使用标准的 \u003ccode\u003e@filename\u003c/code\u003e 语法提交表单，甚至是文件上传\u003c/li\u003e\n\u003cli\u003e如果您只想发送文件的原始内容而不是对其进行 url-encode，则可以将数据传递给命令\u003c/li\u003e\n\u003cli\u003e请参阅\u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/get#SYNOPSIS\"\u003e文档\u003c/a\u003e中的更多示例\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e但我还没有触及其最酷的功能。当您请求相对 URL 时，此命令也适用于您的应用程序。这对于快速开发期间的调试请求非常方便;你甚至不需要浏览器！\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eperl santa.pl get /meet/rudolph \u003cspan class=\"s1\"\u003e\u0026#39;p\u0026#39;\u003c/span\u003e text\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"eval-命令\"\u003eeval 命令\u003c/h2\u003e\n\u003cp\u003e最后在这次旋风之旅中，我会告诉你我最喜欢的命令。 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/eval\"\u003eeval\u003c/a\u003e 命令。此命令具有使用您的应用程序运行一次性命令的神奇力量！该应用程序可在您的单行中作为 \u003ccode\u003eapp\u003c/code\u003e 提供。\u003c/p\u003e\n\u003cp\u003e所以说你无法弄清楚你的配置有什么问题，只要求它转储它认为它的配置是什么\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eperl myapp.pl \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e -v \u003cspan class=\"s1\"\u003e\u0026#39;app-\u0026gt;home\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eperl myapp.pl \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e -V \u003cspan class=\"s1\"\u003e\u0026#39;app-\u0026gt;config\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e-v\u003c/code\u003e 标志将最后一个语句的字符串结果打印到 STDOUT，\u003ccode\u003e-V\u003c/code\u003e 标志对数据结构执行相同的操作。也许你想知道它为什么找不到你的模板。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eperl\u003c/span\u003e \u003cspan class=\"n\"\u003emyapp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epl\u003c/span\u003e \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;app-\u0026gt;renderer-\u0026gt;paths\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e一旦通过某个模型层设置了数据库交互，这一点尤其有用。如果要查看某些查询的结果，请检查。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eperl myapp.pl \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e -V \u003cspan class=\"s1\"\u003e\u0026#39;app-\u0026gt;model-\u0026gt;users-\u0026gt;find({name =\u0026gt; \u0026#34;Joel\u0026#34;})\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当然，这取决于模型层的工作方式。或者您可能希望部署架构或将其回滚。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eperl myapp.pl \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;app-\u0026gt;pg-\u0026gt;migrations-\u0026gt;migrate\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者只是检查数据库是否可访问。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eperl myapp.pl \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e -V \u003cspan class=\"s1\"\u003e\u0026#39;app-\u0026gt;pg-\u0026gt;db-\u0026gt;query(\u0026#34;SELECT NOW()\u0026#34;)-\u0026gt;hash\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后两个数据库示例假设您的应用程序正在使用 \u003ca href=\"http://mojolicious.org/perldoc/Mojo/Pg\"\u003eMojo::Pg\u003c/a\u003e，但类似的单行程序可以适用于您的应用程序所知道的任何数据库。\u003c/p\u003e\n\u003cp\u003e实际上没有什么比调试或管理应用程序更简单，无需将一堆逻辑从应用程序复制并粘贴到某个脚本中。虽然如果你真的发现自己经常使用 \u003ccode\u003eeval\u003c/code\u003e 命令执行相同的任务\u0026hellip;\u0026hellip;那么应该等到明天。\u003c/p\u003e\n","text":"\n我在本系列文章的开头提到，Mojolicious 应用程序不仅仅是 Web 服务器。然后，我展示了如何使用 daemon 守护程序或 prefork 命令启动 Web 服务器。在上一篇文章中，我提到了一个 inflate命令，它可以帮助您将应用程序从 Lite 增加到 Full。\n但是，还有其他命令，内置在您的应用程序中，可以帮助您立即提高工作效率！\n命令基础 在开始之前，我想简要讨论与 Mojolicious 发行版捆绑在一起的 mojo 应用程序/脚本。这个命令是一个很小的Mojolicious应用程序（实际上是另一个“hello world”），可以被认为是“空应用程序”。内置命令适用于您的应用程序和此null应用程序，因此请使用更合适的选项。当哪个应用程序运行命令无关紧要时，您可以使用 mojo。\n每个命令都带有一行描述和一个（可能是多行）用法语句。要查看可用命令，请运行 mojo help，您将看到所有命令及其说明。你应该看到这样的东西：\n$ mojo help Usage: APPLICATION COMMAND [OPTIONS] mojo version mojo generate lite_app ./myapp.pl daemon -m production -l http://*:8080 ./myapp.pl get /foo ./myapp.pl routes -v Tip: CGI and PSGI environments can be automatically detected very often and work without commands. Options (for all commands): -h, --help Get more information on a specific command --home \u0026lt;path\u0026gt; Path to home directory of your application, defaults to the value of MOJO_HOME or auto-detection -m, --mode \u0026lt;name\u0026gt; Operating mode for your application, defaults to the value of MOJO_MODE/PLACK_ENV or \u0026#34;development\u0026#34; Commands: cgi Start application with CGI cpanify Upload distribution to CPAN daemon Start application with HTTP and WebSocket server eval Run code against application generate Generate files and directories from templates get Perform HTTP request inflate Inflate embedded files to real files prefork Start application with pre-forking HTTP and WebSocket server psgi Start application with PSGI routes Show available routes test Run tests version Show versions of available modules See \u0026#39;APPLICATION help COMMAND\u0026#39; for more information on a specific command. 如上所述，您现在可以通过为其中一个命令运行 mojo help COMMAND 来查看有关每个命令的更详细信息。\n内置命名 由于我们已经简要讨论了 deployment ，这次我将跳过服务器，包括 cgi 和 psgi 命令。同样，我将跳过 inflate 命令。为了空间的利益，我将跳过只运行应用程序测试的 test 命令，如 prove。我还将跳过 cpanify，让 CPAN 作者将模块上传到 CPAN（我一直使用它）。\ngenerate 命令 也许您使用的第一个命令应该是 generate 命令。它允许您从模板生成新的应用程序（或其他）项目框架。\n它有一些子命令，包括一个用于生成每种类型的应用程序的子命令。要创建 Lite 应用程序，请传递要创建的脚本的名称\n$ mojo generate lite_app myapp.pl 要创建完整应用程序，请传递该类的名称\n$ mojo generate app MyApp 您还可以创建插件项目或生成 Makefile。\n关于文件生成的主题还有更多的说法，但由于这是一篇概述文章，我现在就把它留在那里。\nversion 命令 version 命令是一个简单的实用程序，用于检查 Mojolicious 安装。\n它会输出您当前版本的 Perl 和 Mojolicious 以及任何已安装的可选库。例如，如果要通过 HTTPS 获取或提供站点，则需要安装 IO::Socket::SSL。然后检查是否有可用的 Mojolicious 更新版本。\nroutes 命令 一旦开始编写应用程序，您可能希望对其进行一些内省，尤其是出于调试目的。这种性质最直接的命令是 routes。只需在您的应用上运行它，看看您定义了哪些路由。\n例如，我们可以从第3天开始在Santa的应用程序上运行它。\n$ perl santa.pl routes /toy/:toy_name GET \u0026#34;toy\u0026#34; /meet/:name GET \u0026#34;staff\u0026#34; / GET \u0026#34;home\u0026#34; 这将显示已定义的三条路由。它显示了每个路由的路径，包括它们的占位符，所有三个路由都处理 GET，以及它们的路由名称。使用此输出在使用命名路由时尤其有用，正如我们在该帖子中所了解的那样;您需要的所有信息都在该表中！\n我们可以更深入一点，并通过添加标志来请求详细输出\n$ perl santa.pl routes -v /toy/:toy_name .... GET \u0026#34;toy\u0026#34; ^\\/toy/([^/.]+)/?(?:\\.([^/]+))?$ /meet/:name .... GET \u0026#34;staff\u0026#34; ^\\/meet/([^/.]+)/?(?:\\.([^/]+))?$ / .... GET \u0026#34;home\u0026#34; ^/?(?:\\.([^/]+))?$ 此输出包含与以前相同的所有内容，但这次它还添加了一些额外的项目。某些路由更复杂，虽然所有这些路由都很简单，因此没有显示任何标志，如果一个路由是 under 路由或者是一个 websocket，那么它将被 noted\u0026hellip;.最后，它包含一个与路由实际匹配的模式。在调试某些请求与特定路由匹配（或更可能不匹配）的原因时，这有时会很有帮助。请注意，路由按顺序从上到下检查每个路由，第一个匹配是使用的。\nget 命令 现在我们开始有趣了！\nMojolicious 附带了一个 user agent 和许多后处理功能，包括 HTML/XML 和 JSON 解析器。此命令在命令行上一起暴露这些功能，如 cURL 或 wget 的智能版本。\n输出将写入 STDOUT，以便您可以根据需要将结果重定向到文件。因此，除非传递 -v，否则将从输出中省略标题。\n让我们看看它能做些什么！您可以使用 Meta::CPAN JSON API 找到最新版本的 IO::Socket::SSL。响应被解析为 JSON，只输出 version 元素。\nmojo get https://fastapi.metacpan.org/v1/module/IO::Socket::SSL /version 您可以从 reddit 获取 Perl 标题。为此，我们获取 url（使用 -r 重定向后），然后我们给它一个 CSS3选择器，最后从每个找到的元素中提取文本。\nmojo get -r reddit.com/r/perl \u0026#39;p.title \u0026gt; a.title\u0026#39; text 这有多有趣？！\n您可以 POST 或 PUT 或 DELETE 数据 它使用 URL 中的 username:password 处理 HTTP 基本身份验证 您可以使用标准的 @filename 语法提交表单，甚至是文件上传 如果您只想发送文件的原始内容而不是对其进行 url-encode，则可以将数据传递给命令 请参阅文档中的更多示例 但我还没有触及其最酷的功能。当您请求相对 URL 时，此命令也适用于您的应用程序。这对于快速开发期间的调试请求非常方便;你甚至不需要浏览器！\nperl santa.pl get /meet/rudolph \u0026#39;p\u0026#39; text eval 命令 最后在这次旋风之旅中，我会告诉你我最喜欢的命令。 eval 命令。此命令具有使用您的应用程序运行一次性命令的神奇力量！该应用程序可在您的单行中作为 app 提供。\n所以说你无法弄清楚你的配置有什么问题，只要求它转储它认为它的配置是什么\nperl myapp.pl eval -v \u0026#39;app-\u0026gt;home\u0026#39; perl myapp.pl eval -V \u0026#39;app-\u0026gt;config\u0026#39; -v 标志将最后一个语句的字符串结果打印到 STDOUT，-V 标志对数据结构执行相同的操作。也许你想知道它为什么找不到你的模板。\nperl myapp.pl eval -V \u0026#39;app-\u0026gt;renderer-\u0026gt;paths\u0026#39; 一旦通过某个模型层设置了数据库交互，这一点尤其有用。如果要查看某些查询的结果，请检查。\nperl myapp.pl eval -V \u0026#39;app-\u0026gt;model-\u0026gt;users-\u0026gt;find({name =\u0026gt; \u0026#34;Joel\u0026#34;})\u0026#39; 当然，这取决于模型层的工作方式。或者您可能希望部署架构或将其回滚。\nperl myapp.pl eval \u0026#39;app-\u0026gt;pg-\u0026gt;migrations-\u0026gt;migrate\u0026#39; 或者只是检查数据库是否可访问。\nperl myapp.pl eval -V \u0026#39;app-\u0026gt;pg-\u0026gt;db-\u0026gt;query(\u0026#34;SELECT NOW()\u0026#34;)-\u0026gt;hash\u0026#39; 最后两个数据库示例假设您的应用程序正在使用 Mojo::Pg，但类似的单行程序可以适用于您的应用程序所知道的任何数据库。\n实际上没有什么比调试或管理应用程序更简单，无需将一堆逻辑从应用程序复制并粘贴到某个脚本中。虽然如果你真的发现自己经常使用 eval 命令执行相同的任务\u0026hellip;\u0026hellip;那么应该等到明天。\n"},"name":"第五天 - 你应用程序的内置命令","published":"2017-12-05T22:53:24Z","summary":"我在本系列文章的开头提到，Mojolicious 应用程序不仅仅是 Web 服务器。然后，我展示了如何使用 daemon 守护程序或 prefork 命令启动 Web 服务器。在上一篇文章中，我提到了一个 inflate命令，它可以帮助您将应用程序从 Lite 增加到 Full。\n但是，还有其他命令，内置在您的应用程序中，可以帮助您立即提高工作效率！\n命令基础 在开始之前，我想简要讨论与 Mojolicious 发行版捆绑在一起的 mojo 应用程序/脚本。这个命令是一个很小的Mojolicious应用程序（实际上是另一个“hello world”），可以被认为是“空应用程序”。内置命令适用于您的应用程序和此null应用程序，因此请使用更合适的选项。当哪个应用程序运行命令无关紧要时，您可以使用 mojo。\n每个命令都带有一行描述和一个（可能是多行）用法语句。要查看可用命令，请运行 mojo help，您将看到所有命令及其说明。你应该看到这样的东西：\n$ mojo help Usage: APPLICATION COMMAND [OPTIONS] mojo version mojo generate lite_app ./myapp.pl daemon -m production -l http://*:8080 ./myapp.pl get /foo ./myapp.pl routes -v Tip: CGI and PSGI environments can be automatically detected very often and work without commands. Options (for all commands): -h, --help Get more information on a specific command --home \u0026lt;path\u0026gt; Path to home directory of your application, defaults to the value of MOJO_HOME or auto-detection -m, --mode \u0026lt;name\u0026gt; Operating mode for your application, defaults to the value of MOJO_MODE/PLACK_ENV or \u0026#34;development\u0026#34; Commands: cgi Start application with CGI cpanify Upload distribution to CPAN daemon Start application with HTTP and WebSocket server eval Run code against application generate Generate files and directories from templates get Perform HTTP request inflate Inflate embedded files to real files prefork Start application with pre-forking HTTP and WebSocket server psgi Start application with PSGI routes Show available routes test Run tests version Show versions of available modules See \u0026#39;APPLICATION help COMMAND\u0026#39; for more information on a specific command.","type":"entry","url":"http://localhost:1313/notes/your-apps-built-in-commands/"}