{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003ch1 id=\"explain-语句\"\u003eEXPLAIN 语句\u003c/h1\u003e\n\u003cp\u003eEXPLAIN 语句用于解释一个查询或 INSERT 语句的逻辑和优化查询计划。\u003c/p\u003e\n\u003ch2 id=\"运行-explain-语句\"\u003e运行 EXPLAIN 语句\u003c/h2\u003e\n\u003cp\u003eEXPLAIN 语句可以用 \u003ccode\u003eTableEnvironment 的 executeSql()\u003c/code\u003e 方法执行，也可以在 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sqlClient.html\"\u003eSQL CLI\u003c/a\u003e 中执行。\u003ccode\u003eexecuteSql()\u003c/code\u003e 方法在 EXPLAIN 操作成功后返回解释结果，否则将抛出一个异常。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 EXPLAIN 语句。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eStreamExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eStreamTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// register a table named \u0026#34;Orders\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE MyTable1 (count bigint, work VARCHAR(256) WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE MyTable2 (count bigint, work VARCHAR(256) WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// explain SELECT statement through TableEnvironment.explainSql()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eexplanation\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexplainSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;SELECT count, word FROM MyTable1 WHERE word LIKE \u0026#39;F%\u0026#39; \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;UNION ALL \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;SELECT count, word FROM MyTable2\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexplanation\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// explain SELECT statement through TableEnvironment.executeSql()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etableResult\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;EXPLAIN PLAN FOR \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;SELECT count, word FROM MyTable1 WHERE word LIKE \u0026#39;F%\u0026#39; \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;UNION ALL \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;SELECT count, word FROM MyTable2\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003etableResult\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEXPLAIN 的结果是：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e== Abstract Syntax Tree ==\nLogicalUnion(all=[true])\n  LogicalFilter(condition=[LIKE($1, _UTF-16LE\u0026#39;F%\u0026#39;)])\n    FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, MyTable1]], fields=[count, word])\n  FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, MyTable2]], fields=[count, word])\n  \n\n== Optimized Logical Plan ==\nDataStreamUnion(all=[true], union all=[count, word])\n  DataStreamCalc(select=[count, word], where=[LIKE(word, _UTF-16LE\u0026#39;F%\u0026#39;)])\n    TableSourceScan(table=[[default_catalog, default_database, MyTable1]], fields=[count, word])\n  TableSourceScan(table=[[default_catalog, default_database, MyTable2]], fields=[count, word])\n\n== Physical Execution Plan ==\nStage 1 : Data Source\n\tcontent : collect elements with CollectionInputFormat\n\nStage 2 : Data Source\n\tcontent : collect elements with CollectionInputFormat\n\n\tStage 3 : Operator\n\t\tcontent : from: (count, word)\n\t\tship_strategy : REBALANCE\n\n\t\tStage 4 : Operator\n\t\t\tcontent : where: (LIKE(word, _UTF-16LE\u0026#39;F%\u0026#39;)), select: (count, word)\n\t\t\tship_strategy : FORWARD\n\n\t\t\tStage 5 : Operator\n\t\t\t\tcontent : from: (count, word)\n\t\t\t\tship_strategy : REBALANCE\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"语法\"\u003e语法\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eEXPLAIN\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePLAN\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eFOR\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003equery_statement_or_insert_statement\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e关于查询语法，请参考\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/queries.html#supported-syntax\"\u003e查询\u003c/a\u003e页面。关于 INSERT，请参考 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/insert.html\"\u003eINSERT\u003c/a\u003e 页面。\u003c/p\u003e\n","text":"EXPLAIN 语句 EXPLAIN 语句用于解释一个查询或 INSERT 语句的逻辑和优化查询计划。\n运行 EXPLAIN 语句 EXPLAIN 语句可以用 TableEnvironment 的 executeSql() 方法执行，也可以在 SQL CLI 中执行。executeSql() 方法在 EXPLAIN 操作成功后返回解释结果，否则将抛出一个异常。\n下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 EXPLAIN 语句。\nval env = StreamExecutionEnvironment.getExecutionEnvironment() val tEnv = StreamTableEnvironment.create(env) // register a table named \u0026#34;Orders\u0026#34; tEnv.executeSql(\u0026#34;CREATE TABLE MyTable1 (count bigint, work VARCHAR(256) WITH (...)\u0026#34;) tEnv.executeSql(\u0026#34;CREATE TABLE MyTable2 (count bigint, work VARCHAR(256) WITH (...)\u0026#34;) // explain SELECT statement through TableEnvironment.explainSql() val explanation = tEnv.explainSql( \u0026#34;SELECT count, word FROM MyTable1 WHERE word LIKE \u0026#39;F%\u0026#39; \u0026#34; + \u0026#34;UNION ALL \u0026#34; + \u0026#34;SELECT count, word FROM MyTable2\u0026#34;) println(explanation) // explain SELECT statement through TableEnvironment.executeSql() val tableResult = tEnv.executeSql( \u0026#34;EXPLAIN PLAN FOR \u0026#34; + \u0026#34;SELECT count, word FROM MyTable1 WHERE word LIKE \u0026#39;F%\u0026#39; \u0026#34; + \u0026#34;UNION ALL \u0026#34; + \u0026#34;SELECT count, word FROM MyTable2\u0026#34;) tableResult.print() EXPLAIN 的结果是：\n== Abstract Syntax Tree == LogicalUnion(all=[true]) LogicalFilter(condition=[LIKE($1, _UTF-16LE\u0026#39;F%\u0026#39;)]) FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, MyTable1]], fields=[count, word]) FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, MyTable2]], fields=[count, word]) == Optimized Logical Plan == DataStreamUnion(all=[true], union all=[count, word]) DataStreamCalc(select=[count, word], where=[LIKE(word, _UTF-16LE\u0026#39;F%\u0026#39;)]) TableSourceScan(table=[[default_catalog, default_database, MyTable1]], fields=[count, word]) TableSourceScan(table=[[default_catalog, default_database, MyTable2]], fields=[count, word]) == Physical Execution Plan == Stage 1 : Data Source content : collect elements with CollectionInputFormat Stage 2 : Data Source content : collect elements with CollectionInputFormat Stage 3 : Operator content : from: (count, word) ship_strategy : REBALANCE Stage 4 : Operator content : where: (LIKE(word, _UTF-16LE\u0026#39;F%\u0026#39;)), select: (count, word) ship_strategy : FORWARD Stage 5 : Operator content : from: (count, word) ship_strategy : REBALANCE 语法 EXPLAIN PLAN FOR \u0026lt;query_statement_or_insert_statement\u0026gt; 关于查询语法，请参考查询页面。关于 INSERT，请参考 INSERT 页面。\n"},"name":"Explan 语句","published":"2020-08-22T00:00:00Z","summary":"Explan Statements","type":"entry","url":"https://ohmycloud.github.io/notes/2020-08-22-explan-statements/"}