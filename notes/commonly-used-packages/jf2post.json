{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"content":{"html":"\u003cp\u003e本页列出了一些  Dart 开发者发布的最流行和最有用的\u003ca href=\"https://dart.dev/guides/packages\"\u003e包\u003c/a\u003e。要找到更多的软件包\u0026ndash;也可以搜索\u003ca href=\"https://dart.dev/guides/libraries\"\u003e核心库\u003c/a\u003e\u0026ndash;请使用 \u003ca href=\"https://pub.dev/\"\u003epub.dev\u003c/a\u003e 网站。\u003c/p\u003e\n\u003cp\u003e常用的软件包可分为三类:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/libraries/useful-libraries#general-purpose-packages\"\u003e通用包\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/libraries/useful-libraries#packages-that-correspond-to-sdk-libraries\"\u003e扩展 Dart 核心库的包\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/libraries/useful-libraries#specialized-packages\"\u003e特定的包\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"通用包\"\u003e通用包\u003c/h2\u003e\n\u003cp\u003e以下包对各种项目都很有用:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e包\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e描述\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e常用的 API\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/archive\"\u003earchive\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e对各种档案和压缩格式进行编码和解码。\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eArchive, ArchiveFile, TarEncoder, TarDecoder, ZipEncoder, ZipDecoder\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/characters\"\u003echaracters\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e对用户感知的字符进行字符串操作(Unicode 字符簇)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eString.characters, Characters, CharacterRange\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/http\"\u003ehttp\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一组高级的函数和类，使其易于消费 HTTP 资源\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003edelete(), get(), post(), read()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/intl\"\u003eintl\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e国际化和本地化设施，支持复数和性别、日期和数字格式化和解析以及双向文本\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eBidi, DateFormat, MicroMoney, TextDirection\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/json_serializable\"\u003ejson_serializable\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个易于使用的代码生成包。更多信息，请参阅 \u003ca href=\"https://dart.dev/guides/json\"\u003eJSON 支持\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e@JsonSerializable\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/logging\"\u003elogging\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个可配置的机制，为你的应用程序添加消息记录\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eLoggerHandler, Level, LogRecord\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/mockito\"\u003emockito\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个在测试中模拟对象的流行框架。如果你正在编写依赖注入的测试，特别有用。与 \u003ca href=\"https://pub.dev/packages/test\"\u003etest\u003c/a\u003e 包一起使用\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eAnswering, Expectation, Verification\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/path\"\u003epath\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e操作不同类型路径的常用操作。更多信息，请参见\u003ca href=\"https://news.dartlang.org/2016/06/unboxing-packages-path.html\"\u003e拆包: path\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eabsolute(), basename(), extension(), join(), normalize(), relative(), split()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/quiver\"\u003equiver\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e实用工具，使 Dart 核心库的使用更加方便。Quiver 提供额外支持的一些库包括 async、cache、collection、core、iterables、pattern 和 测试\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eCountdownTimer (quiver.async); MapCache (quiver.cache); MultiMap, TreeSet (quiver.collection); EnumerateIterable (quiver.iterables); center(), compareIgnoreCase(), isWhiteSpace() (quiver.strings)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/shelf\"\u003eshelf\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eDart 的 Web 服务器中间件。Shelf 使它能轻松地创建和组成 Web 服务器，以及 Web 服务器的一部分\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eCascade, Pipeline, Request, Response, Server\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/stack_trace\"\u003estack_trace\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e用于解析、检查和处理由底层 Dart 实现产生的堆栈痕迹的方法。还提供了以比原生 StackTrace 实现更可读的格式生成堆栈跟踪的字符串表示的函数,  更多信息，请参见\u003ca href=\"https://news.dartlang.org/2016/01/unboxing-packages-stacktrace.html\"\u003e拆包: stack_trace\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eTrace.current(), Trace.format(), Trace.from()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/stagehand\"\u003estagehand\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个 Dart 项目生成器。当你创建一个新的应用程序时，WebStorm 和 IntelliJ 使用 Stagehand 模板，但你也可以从命令行使用模板\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一般通过 IDE 或 \u003ccode\u003estagehand\u003c/code\u003e 命令来使用\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/test\"\u003etest\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e在 Dart 中编写和运行测试的标准方法\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eexpect(), group(), test()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/yaml\"\u003eyaml\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eYAML 解析器\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eloadYaml(), loadYamlStream()\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"扩展-dart-核心库的包\"\u003e扩展 Dart 核心库的包\u003c/h2\u003e\n\u003cp\u003e以下每个包都建立在一个\u003ca href=\"https://dart.dev/guides/libraries\"\u003e核心库\u003c/a\u003e的基础上，增加了功能并填补了缺失的功能:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e包\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e描述\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e常用的 API\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/async\"\u003easync\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e在 dart:async 的基础上进行了扩展，增加了实用类来处理异步计算。更多信息，请参见\u003ca href=\"https://news.dartlang.org/2016/03/unboxing-packages-async-part-1.html\"\u003e拆包: async 第1部分\u003c/a\u003e、\u003ca href=\"https://news.dartlang.org/2016/03/unboxing-packages-async-part-2.html\"\u003e第2部分\u003c/a\u003e和\u003ca href=\"https://news.dartlang.org/2016/04/unboxing-packages-async-part-3.html\"\u003e第3部分\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eAsyncMemoizer, CancelableOperation, FutureGroup, LazyStream, Result, StreamCompleter, StreamGroup, StreamSplitter\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/collection\"\u003ecollection\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e在 dart:collection 的基础上进行了扩展，增加了实用函数和类，使处理集合的工作变得更加容易。更多信息，请看\u003ca href=\"https://news.dartlang.org/2016/01/unboxing-packages-collection.html\"\u003e拆包：collection\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eEquality, CanonicalizedMap, MapKeySet, MapValueSet, PriorityQueue, QueueList\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/convert\"\u003econvert\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e在 dart:convert 的基础上，增加了编码器和解码器，用于在不同的数据表现形式之间进行转换。其中一种数据表示方式是百分比编码，也被称为 URL 编码\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eHexDecoder, PercentDecoder\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/io\"\u003eio\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e包含两个库，ansi和io，以简化对文件、标准流和进程的处理。使用 ansi 库可以自定义终端输出。io 库有处理进程、stdin 和文件复制的 API\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ecopyPath(), isExecutable(), ExitCode, ProcessManager, sharedStdIn\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"专用包\"\u003e专用包\u003c/h2\u003e\n\u003cp\u003e下面是一些寻找比较专业的包的技巧，比如手机的包(Flutter)和网页开发的包。\u003c/p\u003e\n\u003ch3 id=\"flutter-包\"\u003eFlutter 包\u003c/h3\u003e\n\u003cp\u003e请看 Flutter 网站上的\u003ca href=\"https://flutter.dev/docs/development/packages-and-plugins/using-packages\"\u003e使用包\u003c/a\u003e。或者使用 pub.dev 网站\u003ca href=\"https://pub.dev/flutter\"\u003e搜索 Flutter 包\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"网络包\"\u003e网络包\u003c/h3\u003e\n\u003cp\u003e参见\u003ca href=\"https://dart.dev/web/libraries\"\u003e网络库和包\u003c/a\u003e。或者使用 pub.dev 站点\u003ca href=\"https://pub.dev/web\"\u003e搜索 web 包\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"命令行和服务器软件包\"\u003e命令行和服务器软件包\u003c/h3\u003e\n\u003cp\u003e参见\u003ca href=\"https://dart.dev/server/libraries\"\u003e命令行和服务器库和包\u003c/a\u003e。或者使用 pub.dev 站点\u003ca href=\"https://pub.dev/\"\u003e搜索其他包\u003c/a\u003e。\u003c/p\u003e\n","text":"本页列出了一些 Dart 开发者发布的最流行和最有用的包。要找到更多的软件包\u0026ndash;也可以搜索核心库\u0026ndash;请使用 pub.dev 网站。\n常用的软件包可分为三类:\n 通用包 扩展 Dart 核心库的包 特定的包  通用包 以下包对各种项目都很有用:\n   包 描述 常用的 API     archive 对各种档案和压缩格式进行编码和解码。 Archive, ArchiveFile, TarEncoder, TarDecoder, ZipEncoder, ZipDecoder   characters 对用户感知的字符进行字符串操作(Unicode 字符簇) String.characters, Characters, CharacterRange   http 一组高级的函数和类，使其易于消费 HTTP 资源 delete(), get(), post(), read()   intl 国际化和本地化设施，支持复数和性别、日期和数字格式化和解析以及双向文本 Bidi, DateFormat, MicroMoney, TextDirection   json_serializable 一个易于使用的代码生成包。更多信息，请参阅 JSON 支持 @JsonSerializable   logging 一个可配置的机制，为你的应用程序添加消息记录 LoggerHandler, Level, LogRecord   mockito 一个在测试中模拟对象的流行框架。如果你正在编写依赖注入的测试，特别有用。与 test 包一起使用 Answering, Expectation, Verification   path 操作不同类型路径的常用操作。更多信息，请参见拆包: path absolute(), basename(), extension(), join(), normalize(), relative(), split()   quiver 实用工具，使 Dart 核心库的使用更加方便。Quiver 提供额外支持的一些库包括 async、cache、collection、core、iterables、pattern 和 测试 CountdownTimer (quiver.async); MapCache (quiver.cache); MultiMap, TreeSet (quiver.collection); EnumerateIterable (quiver.iterables); center(), compareIgnoreCase(), isWhiteSpace() (quiver.strings)   shelf Dart 的 Web 服务器中间件。Shelf 使它能轻松地创建和组成 Web 服务器，以及 Web 服务器的一部分 Cascade, Pipeline, Request, Response, Server   stack_trace 用于解析、检查和处理由底层 Dart 实现产生的堆栈痕迹的方法。还提供了以比原生 StackTrace 实现更可读的格式生成堆栈跟踪的字符串表示的函数, 更多信息，请参见拆包: stack_trace Trace.current(), Trace.format(), Trace.from()   stagehand 一个 Dart 项目生成器。当你创建一个新的应用程序时，WebStorm 和 IntelliJ 使用 Stagehand 模板，但你也可以从命令行使用模板 一般通过 IDE 或 stagehand 命令来使用   test 在 Dart 中编写和运行测试的标准方法 expect(), group(), test()   yaml YAML 解析器 loadYaml(), loadYamlStream()    扩展 Dart 核心库的包 以下每个包都建立在一个核心库的基础上，增加了功能并填补了缺失的功能:\n   包 描述 常用的 API     async 在 dart:async 的基础上进行了扩展，增加了实用类来处理异步计算。更多信息，请参见拆包: async 第1部分、第2部分和第3部分 AsyncMemoizer, CancelableOperation, FutureGroup, LazyStream, Result, StreamCompleter, StreamGroup, StreamSplitter   collection 在 dart:collection 的基础上进行了扩展，增加了实用函数和类，使处理集合的工作变得更加容易。更多信息，请看拆包：collection Equality, CanonicalizedMap, MapKeySet, MapValueSet, PriorityQueue, QueueList   convert 在 dart:convert 的基础上，增加了编码器和解码器，用于在不同的数据表现形式之间进行转换。其中一种数据表示方式是百分比编码，也被称为 URL 编码 HexDecoder, PercentDecoder   io 包含两个库，ansi和io，以简化对文件、标准流和进程的处理。使用 ansi 库可以自定义终端输出。io 库有处理进程、stdin 和文件复制的 API copyPath(), isExecutable(), ExitCode, ProcessManager, sharedStdIn    专用包 下面是一些寻找比较专业的包的技巧，比如手机的包(Flutter)和网页开发的包。\nFlutter 包 请看 Flutter 网站上的使用包。或者使用 pub.dev 网站搜索 Flutter 包。\n网络包 参见网络库和包。或者使用 pub.dev 站点搜索 web 包。\n命令行和服务器软件包 参见命令行和服务器库和包。或者使用 pub.dev 站点搜索其他包。\n"},"name":"常用的包","published":"2020-06-29T00:00:00+08:00","summary":"Commonly used packages","type":"entry","url":"https://ohmyweekly.github.io/notes/commonly-used-packages/"}