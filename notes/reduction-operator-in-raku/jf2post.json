{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003cp\u003e欢迎来到 \u003cstrong\u003eRaku One-Liner Advent Calendar\u003c/strong\u003e 的第\u003ca href=\"https://raku.online/2018/12/10/reduction-operator-in-perl-6/\"\u003e10\u003c/a\u003e天！今天，将有三个单行命令而不是一个。\u003c/p\u003e\n\u003cp\u003e我们今天的客人是一个带有方括号的化简结构。当它们不包围数组索引时，它们就工作在完全不同的领域中了。\u003c/p\u003e\n\u003ch2 id=\"例-1\"\u003e例 1\u003c/h2\u003e\n\u003cp\u003e最经典的例子，也是 \u003ca href=\"https://deeptext.media/calendar2019\"\u003eRaku Calendar 2019\u003c/a\u003e，使用化简运算符来计算阶乘：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e2019\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRaku 中的 \u003ccode\u003e[ ]\u003c/code\u003e 是一个\u003ca href=\"https://docs.raku.org/language/operators#index-entry-%5B%5D_%28reduction_metaoperators%29\"\u003e化简元运算符\u003c/a\u003e。名字里面的的「元」告诉我们它可以用作另一个运算符的包层（顺便说一句，不仅仅是作用于运算符）。\u003c/p\u003e\n\u003cp\u003e在第一个示例中，该运算符包含另一个运算符，并且可以通过将范围注册到列表并将 \u003ccode\u003e*\u003c/code\u003e 放在其所有元素之间来重写整行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"c1\"\u003e#`(more elements) * 2018 * 2019\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"例2\"\u003e例2\u003c/h2\u003e\n\u003cp\u003e现在，让我们解决欧拉项目的\u003ca href=\"https://projecteuler.net/problem=5\"\u003e问题5\u003c/a\u003e，我们需要找到最小的数字，这个数字可以被从1到20的所有数字整除。\u003c/p\u003e\n\u003cp\u003e让我在 Raku 中给你一个直接的答案：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elcm\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e此代码看起来与前面的示例非常相似，但使用另一个运算符 \u003ca href=\"https://docs.raku.org/routine/lcm\"\u003elcm\u003c/a\u003e 例程，它是 Raku 中的中缀运算符。这个名字代表最小公倍数，但在文档中你还可以读到它返回这两个参数都可以被整除的最小整数。几乎相同的词，用于表达我们要解决的问题。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"n\"\u003elcm\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"n\"\u003elcm\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"n\"\u003elcm\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"n\"\u003elcm\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"n\"\u003elcm\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e \u003cspan class=\"n\"\u003elcm\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e \u003cspan class=\"c1\"\u003e# ... and up to 20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"例子3\"\u003e例子3\u003c/h2\u003e\n\u003cp\u003e其他已经内置在 Raku 中的中缀运算符也可以非常高效。这是一个只用几个代码字符旋转矩阵的例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eZ\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"n\"\u003eC\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eD\u003c/span\u003e \u003cspan class=\"n\"\u003eE\u003c/span\u003e \u003cspan class=\"n\"\u003eF\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eH\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e \u003cspan class=\"n\"\u003eJ\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这里，我们正在转换具有从A到J九个元素的二维矩阵。在输出中，行成为列，列成为行：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e((A D H) (B E I) (C F J))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca href=\"https://docs.raku.org/language/operators#infix_Z\"\u003ezip 中缀运算符 Z\u003c/a\u003e 已插入列表的元素之间，因此上述代码类似于以下代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"n\"\u003eC\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eZ\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eD\u003c/span\u003e \u003cspan class=\"n\"\u003eE\u003c/span\u003e \u003cspan class=\"n\"\u003eF\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eZ\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eH\u003c/span\u003e \u003cspan class=\"n\"\u003eI\u003c/span\u003e \u003cspan class=\"n\"\u003eJ\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，如果你想强调操作的顺序，你可能不会完全得到您想要的内容：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026gt; (\u0026lt;A B C\u0026gt; Z \u0026lt;D E F\u0026gt;) Z \u0026lt;H I J\u0026gt;\n(((A D) H) ((B E) I) ((C F) J))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e好吧，在我们没有和 Lisp 走得太近之前，我们就此打住。明天见！\u003c/p\u003e\n","text":"欢迎来到 Raku One-Liner Advent Calendar 的第10天！今天，将有三个单行命令而不是一个。\n我们今天的客人是一个带有方括号的化简结构。当它们不包围数组索引时，它们就工作在完全不同的领域中了。\n例 1 最经典的例子，也是 Raku Calendar 2019，使用化简运算符来计算阶乘：\nsay [*] 1..2019 Raku 中的 [ ] 是一个化简元运算符。名字里面的的「元」告诉我们它可以用作另一个运算符的包层（顺便说一句，不仅仅是作用于运算符）。\n在第一个示例中，该运算符包含另一个运算符，并且可以通过将范围注册到列表并将 * 放在其所有元素之间来重写整行：\nsay 1 * 2 * 3 #`(more elements) * 2018 * 2019 例2 现在，让我们解决欧拉项目的问题5，我们需要找到最小的数字，这个数字可以被从1到20的所有数字整除。\n让我在 Raku 中给你一个直接的答案：\nsay [lcm] 1..20 此代码看起来与前面的示例非常相似，但使用另一个运算符 lcm 例程，它是 Raku 中的中缀运算符。这个名字代表最小公倍数，但在文档中你还可以读到它返回这两个参数都可以被整除的最小整数。几乎相同的词，用于表达我们要解决的问题。\nsay 1 lcm 2 lcm 3 lcm 4 lcm 5 lcm 6 lcm 7 # ... and up to 20 例子3 其他已经内置在 Raku 中的中缀运算符也可以非常高效。这是一个只用几个代码字符旋转矩阵的例子：\n[Z] \u0026lt;A B C\u0026gt;, \u0026lt;D E F\u0026gt;, \u0026lt;H I J\u0026gt; 在这里，我们正在转换具有从A到J九个元素的二维矩阵。在输出中，行成为列，列成为行：\n((A D H) (B E I) (C F J)) zip 中缀运算符 Z 已插入列表的元素之间，因此上述代码类似于以下代码：\n\u0026lt;A B C\u0026gt; Z \u0026lt;D E F\u0026gt; Z \u0026lt;H I J\u0026gt; 请注意，如果你想强调操作的顺序，你可能不会完全得到您想要的内容：\n\u0026gt; (\u0026lt;A B C\u0026gt; Z \u0026lt;D E F\u0026gt;) Z \u0026lt;H I J\u0026gt; (((A D) H) ((B E) I) ((C F) J)) 好吧，在我们没有和 Lisp 走得太近之前，我们就此打住。明天见！\n"},"name":"🎄 10/25. Raku 中的化简运算符","published":"2018-12-10T09:52:14Z","summary":"欢迎来到 Raku One-Liner Advent Calendar 的第10天！今天，将有三个单行命令而不是一个。\n我们今天的客人是一个带有方括号的化简结构。当它们不包围数组索引时，它们就工作在完全不同的领域中了。\n例 1 最经典的例子，也是 Raku Calendar 2019，使用化简运算符来计算阶乘：\nsay [*] 1..2019 Raku 中的 [ ] 是一个化简元运算符。名字里面的的「元」告诉我们它可以用作另一个运算符的包层（顺便说一句，不仅仅是作用于运算符）。\n在第一个示例中，该运算符包含另一个运算符，并且可以通过将范围注册到列表并将 * 放在其所有元素之间来重写整行：\nsay 1 * 2 * 3 #`(more elements) * 2018 * 2019 例2 现在，让我们解决欧拉项目的问题5，我们需要找到最小的数字，这个数字可以被从1到20的所有数字整除。\n让我在 Raku 中给你一个直接的答案：\nsay [lcm] 1..20 此代码看起来与前面的示例非常相似，但使用另一个运算符 lcm 例程，它是 Raku 中的中缀运算符。这个名字代表最小公倍数，但在文档中你还可以读到它返回这两个参数都可以被整除的最小整数。几乎相同的词，用于表达我们要解决的问题。\nsay 1 lcm 2 lcm 3 lcm 4 lcm 5 lcm 6 lcm 7 # ... and up to 20 例子3 其他已经内置在 Raku 中的中缀运算符也可以非常高效。这是一个只用几个代码字符旋转矩阵的例子：","type":"entry","url":"https://ohmycloud.github.io/notes/reduction-operator-in-raku/"}