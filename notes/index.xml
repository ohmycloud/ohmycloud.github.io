<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    Notes on
                
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/notes/</link>
        <description>Recent content  in Notes
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Tue, 07 Jul 2020 17:17:07 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/notes/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>ImageMagick - Drawing</title>
                <link>https://ohmyweekly.github.io/notes/imagemagick-drawing/</link>
                
                
                <description>&lt;blockquote&gt;ImageMagick Drawing&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://imagemagick.org/Usage/draw/&#34;&gt;https://imagemagick.org/Usage/draw/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 IM 中绘图是在现有图像中添加新元素的方法。虽然在&lt;a href=&#34;https://imagemagick.org/Usage/fonts/&#34;&gt;复合字体效果&lt;/a&gt;的示例页和&lt;a href=&#34;https://imagemagick.org/Usage/annotating/&#34;&gt;图像注释&lt;/a&gt;中涵盖了很多文本绘制的内容，但本页涉及 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?draw&#34;&gt;-draw&lt;/a&gt;&amp;rdquo; 操作符的其他更普遍的方面。&lt;/p&gt;
&lt;p&gt;绘制命令最初是作为一种创建简单图像的手段。但随着时间的推移，它已经扩展成为矢量图形到光栅图像转换的界面。&lt;/p&gt;
&lt;h2 id=&#34;imagemagick-绘制命令&#34;&gt;ImageMagick 绘制命令&lt;/h2&gt;
&lt;p&gt;计算机中的图像通常以两种不同的方式保存。第一种也是你在这些示例页面中看到的最常见的方式被称为光栅图形。在这种方式中，图像是以像素的矩形阵列来存储的。&lt;/p&gt;
&lt;p&gt;另一种方式不太常见，也不太容易修改，但从另一个意义上讲，它的通用性更强，即对象矢量图形。在这种形式下，图像是用线条、弧线、颜色填充，有时还有深度来描述的。这是非常有用的，因为你可以将这些图像放大到你想要的任何尺寸，而且它们仍然可以完美地显示。与光栅格式的图像相比，您还可以在很小的空间内描述非常大和复杂的图像。&lt;/p&gt;
&lt;p&gt;矢量图形图像的例子包括 postscript 和新的 &lt;a href=&#34;http://www.w3.org/TR/SVG/&#34;&gt;SVG-可缩放矢量图形&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;True-Type 字体也是矢量图形的例子，因为它允许在任何比例下使用单个字符描述。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?draw&#34;&gt;-draw&lt;/a&gt;&amp;rdquo; 图像操作符，是进入 ImageMagick 矢量绘图功能的一个窗口，并形成了一套与 IM 的普通命令行图像操作符相当独立的命令。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般使用的矢量图形文件格式只有几种，因为每一种这样的格式通常与其他这样的格式有很大的不同。其结果是，很少有代码共享的可能。
基于这个原因，ImageMagick 更关注使用矢量图形来绘制 SVG 格式的图像。Postscript 和 true-type 字体图形被传递给其他外部的&amp;rdquo;&lt;a href=&#34;https://imagemagick.org/Usage/files/#delegate&#34;&gt;代理&lt;/a&gt;&amp;ldquo;库和应用程序，它们更适合绘制这些类型的矢量图形格式。
这并不是说 SVG 没有代理库。一个例子是 RSVG 库或 GTK SVG 库，这些库在编译时是可用的。IM 会链接到这些库来转换 SVG，而不是自己尝试去做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;原始绘图命令&#34;&gt;原始绘图命令&lt;/h3&gt;
&lt;p&gt;让我们从 MVG 命令的 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?draw&#34;&gt;-draw&lt;/a&gt;&amp;rdquo; 图像操作符中最古老、最简单、最常见的绘图原语开始。&lt;/p&gt;
&lt;p&gt;请注意，所有的参数都被视为浮点数，不一定是整数，比如我在这些例子中通常使用的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Single Pixel Draw  (两种方式 -- 这些像素点都被放大了)&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Point &amp;#39;paints&amp;#39; the color pixel&lt;/span&gt;
  convert -size 10x6 xc:skyblue  -fill black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;point 3,2&amp;#39;&lt;/span&gt;         -scale 100x60   draw_point.gif

  &lt;span class=&#34;c1&#34;&gt;# Color Point &amp;#39;replaces&amp;#39; the color pixel&lt;/span&gt;
  convert -size 10x6 xc:skyblue  -fill black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 6,3 point&amp;#39;&lt;/span&gt;   -scale 100x60   draw_color_point.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_point.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_color_point.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据给出的注释，当涉及半透明颜色时，这两种点方法会产生不同的结果。详情请参见下面的&lt;a href=&#34;https://imagemagick.org/Usage/draw/#color&#34;&gt;颜色填充原语&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 矩形  /  圆角矩形  /  矩形圆弧&lt;/span&gt;

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;rectangle 20,10 80,50&amp;#34;&lt;/span&gt;       draw_rect.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;roundrectangle 20,10 80,50 20,15&amp;#34;&lt;/span&gt;  draw_rrect.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;arc  20,10 80,50  0,360&amp;#34;&lt;/span&gt;     draw_arc.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;arc  20,10 80,50 45,270&amp;#34;&lt;/span&gt;     draw_arc_partial.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_rect.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_rrect.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_arc.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_arc_partial.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;arc&lt;/code&gt; 绘制原语与矩形一起列出，因为它实际上只是一个&amp;quot;椭圆&amp;rdquo;，装在两个坐标定义的&amp;quot;矩形&amp;rdquo;(&lt;code&gt;rectangle&lt;/code&gt;)内。部分弧线很少使用，因为很难确定端点，除非角度限制在九十度的倍数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;circle&lt;/code&gt; 和 &lt;code&gt;ellipse&lt;/code&gt; 原语涉及&amp;quot;中心&amp;quot;坐标与&amp;quot;边缘&amp;quot;坐标，或&amp;quot;大小&amp;quot;和&amp;quot;角度&amp;quot;值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 圆  /  椭圆    (以某一点为中心)&lt;/span&gt;

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;circle 50,30 40,10&amp;#34;&lt;/span&gt;          draw_circle.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;ellipse 50,30 40,20 0,360&amp;#34;&lt;/span&gt;   draw_ellipse.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;ellipse 50,30 40,20 45,270&amp;#34;&lt;/span&gt;   draw_ellipse_partial.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_circle.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_ellipse.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_ellipse_partial.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你也可以看看 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#push_context&#34;&gt;Push/Pop 上下文&lt;/a&gt;，了解如何创建一个旋转的椭圆的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 直线 / 折线 / 多边形 / 贝塞尔曲线&lt;/span&gt;

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line   20,50 90,10&amp;#34;&lt;/span&gt;                 draw_line.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;polyline 40,10 20,50 90,10 70,40&amp;#34;&lt;/span&gt;   draw_polyline.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;polygon  40,10 20,50 90,10 70,40&amp;#34;&lt;/span&gt;   draw_polygon.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;bezier   40,10 20,50 90,10 70,40&amp;#34;&lt;/span&gt;   draw_bezier.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比较好的画直线和曲线的方法是使用 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#paths&#34;&gt;SVG 路径画法&lt;/a&gt;，它的用途更广，甚至可以实现&amp;quot;比例画线&amp;rdquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# text drawing  / image&lt;/span&gt;

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -font Candice -pointsize &lt;span class=&#34;m&#34;&gt;40&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 0,0 &amp;#39;Hello&amp;#39;&amp;#34;&lt;/span&gt;   draw_text.gif

  convert -size 100x60 xc:skyblue -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;image over 0,0 0,0 &amp;#39;terminal.gif&amp;#39;&amp;#34;&lt;/span&gt;   draw_image.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后这两个填充类型的操作是目前唯一受 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?gravity&#34;&gt;-gravity&lt;/a&gt;&amp;rdquo; 影响的绘制操作。这些操作的其他修饰符，包括 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?fill&#34;&gt;-fill&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?tile&#34;&gt;-tile&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?origin&#34;&gt;-origin&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?stroke&#34;&gt;-stroke&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?strokewidth&#34;&gt;-strokeidth&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?font&#34;&gt;-font&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?pointsize&#34;&gt;-pointsize&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?box&#34;&gt;-box&lt;/a&gt;&amp;quot;。他们还有其他的修饰符，但这些修饰符与更高级的 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#mvg&#34;&gt;Magick Vector Graphics&lt;/a&gt; 语言有关。&lt;/p&gt;
&lt;h2 id=&#34;贝赛尔原语&#34;&gt;贝赛尔原语&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;bezier&amp;rdquo; 原语用于绘制曲线。每条命令只画一条曲线段。通常会给出 4 个点（8 个数字）：一个起点&#39;结&amp;rsquo;、两个控制点和一个终点&#39;结&amp;rsquo;。两个控制点定义了曲线的方向以及曲线偏离附加的终点&#39;结&#39;点的速度。&lt;/p&gt;
&lt;p&gt;为了顺利地将两条曲线连接起来，应该将端点的控制点通过&#39;结&#39;镜像，形成下一条贝塞尔曲线的控制点。例如这里我画了两条平稳连接在一起的贝赛尔曲线。请注意控制线和点（也是画出来的）是如何通过连接坐标直线镜像的，无论是角度还是长度。这一点很重要，否则曲线将不平滑。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10,10 30,90   25,10 50,50   50,50 75,90   70,10 90,40&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;clines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/   /\n/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; line&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;line &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; path &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
             &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

  convert -size 100x100 xc:skyblue -fill none &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke gray &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$clines&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    stroke blue &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$symbols&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 10,10 30,90   25,10 50,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 50,50 75,90   70,10 90,40 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          draw_bezier_joined.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_bezier_joined.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果我移动其中一个控制点，使它不从同一&amp;quot;结&amp;quot;的另一个控制点通过附加的&amp;quot;结&amp;quot;进行&amp;quot;反射&amp;rdquo;，那么曲线将不连续。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10,10 30,90   25,10 50,50   50,50 80,50   70,10 90,40&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;clines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/   /\n/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; line&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;line &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; path &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
             &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

  convert -size 100x100 xc:skyblue -fill none &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke gray &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$clines&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    stroke blue &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$symbols&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 10,10 30,90   25,10 50,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 50,50 80,50   70,10 90,40 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          draw_bezier_disjoint.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_bezier_disjoint.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果再次移动控制点，使其与相关的&amp;quot;结&amp;quot;点相匹配，线条将直接从该点出发，完全没有任何&amp;quot;曲线&amp;rdquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10,10 30,90   25,10 50,50   50,50 50,50   70,10 90,40&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;clines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/   /\n/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; line&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;line &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; path &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
             &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

  convert -size 100x100 xc:skyblue -fill none &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke gray &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$clines&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    stroke blue &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$symbols&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 10,10 30,90   25,10 50,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 50,50 50,50   70,10 90,40 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          draw_bezier_no_curve.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_bezier_no_curve.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果两个控制点都设置为各自的&amp;quot;结点&amp;rdquo;，那么就会生成一条直线。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10,10 10,10   50,50 50,50   50,50 50,50   90,40 90,40&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;clines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/   /\n/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; line&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;line &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; path &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
             &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

  convert -size 100x100 xc:skyblue -fill none &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke gray &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$clines&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    stroke blue &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$symbols&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 10,10 10,10   50,50 50,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 50,50 50,50   90,40 90,40 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          draw_bezier_lines.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_bezier_lines.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果不指定所有 4 个点，&amp;lsquo;bezier&amp;rsquo; 原语并不真正有用。只有第一个点和最后一个点被归类为&#39;结&amp;rsquo;，曲线将通过（或结束）这两个点。所有其他的点纯粹被视为控制点，按照给定的顺序对曲线产生影响，控制点越远，对该段曲线的影响越大。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10,10 30,90   25,10    75,90   70,10 90,40&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
             &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

  convert -size 100x100  xc:skyblue  -fill none &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke gray  polyline &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke red   bezier &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke blue  path &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$symbols&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          draw_bezier_multi.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_bezier_multi.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;为了保持简单，不建议你每条 &amp;lsquo;bezier&amp;rsquo; 曲线段使用超过或少于4个点。&lt;/p&gt;
&lt;p&gt;其实我建议你完全不要使用 &amp;lsquo;bezier&amp;rsquo; 原语，而是使用 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#cubic&#34;&gt;SVG Path Cubic Bezier&lt;/a&gt; 来生成曲线。它有一个特殊的 &amp;ldquo;s&amp;rdquo; 曲线延续功能，可以自动做相应的控制点&amp;quot;反射&amp;rdquo;，生成平滑连接的曲线段，减少你需要使用的控制点数量。您还可以定义相对于路径中最后一个端点的点。&lt;/p&gt;
&lt;h2 id=&#34;颜色填充原语&#34;&gt;颜色填充原语&lt;/h2&gt;
&lt;p&gt;除了上述 &amp;ldquo;简单&amp;quot;原语之外，&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?draw&#34;&gt;-draw&lt;/a&gt;&amp;ldquo;还提供了一组颜色填充或修改原语。这些原语根据所选方法，从指定的点开始修改图像中的颜色。&lt;/p&gt;
&lt;p&gt;这些填充方法实际上不是真正的 &amp;lsquo;draw&amp;rsquo; 命令，而是颜色替换函数。它们被添加到绘图中，因为在程序的早期版本中，将它们的操作插入到 ImageMagick 中是最简单的。&lt;/p&gt;
&lt;p&gt;就像上面一样，使用的颜色是用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?fill&#34;&gt;-fill&lt;/a&gt;&amp;ldquo;颜色设置的，但如果设置了，就会使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?tile&#34;&gt;-tile&lt;/a&gt;&amp;rdquo; 图像来代替。&lt;/p&gt;
&lt;p&gt;上面的其他设置选项没有使用，对这些操作没有影响。&lt;/p&gt;
&lt;p&gt;两个额外的设置也将应用于这些原语，即 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?bordercolor&#34;&gt;-bordercolor&lt;/a&gt;&amp;rdquo; 和 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?fuzz&#34;&gt;-fuzz&lt;/a&gt;&amp;ldquo;系数设置。但是，这些设置不能在 &amp;ldquo;MVG&amp;rdquo; 语言中定义，因此只能在使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?draw&#34;&gt;-draw&lt;/a&gt;&amp;rdquo; 操作符之前进行设置。&lt;/p&gt;
&lt;p&gt;第一个 &amp;lsquo;color point&amp;rsquo; 你已经看到了，它是上述例子中 &amp;lsquo;point&amp;rsquo; 绘制原语的替代。如果你仔细观察，你会看到我们在测试图像中设置的单个白色像素。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 point&amp;#39;&lt;/span&gt;      color_point.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_point.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而在绘制透明色和半透明色时，这些功能是不一样的。&lt;/p&gt;
&lt;p&gt;这里我们有一个三个像素的红色图像（放大了），第二个或中间的像素我们用 &lt;code&gt;point&lt;/code&gt; 函数在红色像素上画上半透明的蓝色，得到紫色的结果。然而如果使用 &lt;code&gt;color point&lt;/code&gt; 函数（最后一个或右边的像素），红色完全被半透明的蓝色像素所取代。它不会被叠加。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 3x1 xc:red -matte -fill &lt;span class=&#34;s1&#34;&gt;&amp;#39;#00F8&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;point 1,0&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 2,0 point&amp;#39;&lt;/span&gt;   -scale 33x33  draw_points.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_points.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;所有的 &lt;code&gt;color&lt;/code&gt; 函数都会进行全色替换，而其他所有的颜色原语都会在图像上面&#39;画&#39;出颜色。因此，你可以使用 &lt;code&gt;color&lt;/code&gt; 来绘制透明色。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;color replace&lt;/code&gt; 绘制函数将在指定的位置替换所有精确给定颜色的实例。而且正如您所看到的，这些区域不一定要连接在一起。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 replace&amp;#39;&lt;/span&gt;      color_replace.png

  convert color_test.png   -fill white   -fuzz 13%&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 replace&amp;#39;&lt;/span&gt;      color_replace_fuzz.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_replace.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而，正如你在第一个结果中所看到的，一些沿边缘的像素没有被替换。这些像素与所选像素的颜色不完全相同，所以它们被忽略了。添加一个小的&lt;a href=&#34;https://imagemagick.org/Usage/color_basics/#fuzz&#34;&gt;模糊因子&lt;/a&gt;也会包含与原色相似的颜色。如上面第二个例子所示。&lt;/p&gt;
&lt;p&gt;当然，&lt;code&gt;fuzz factor&lt;/code&gt; 并不是一个很好的解决方案，因为它不会捕捉所有这样的边缘像素。这是所有这些 &lt;code&gt;color fill&lt;/code&gt; 方法经常出现的问题，也是一个没有通用解决方案的问题。&lt;/p&gt;
&lt;p&gt;如果你想替换一个特定的已知颜色，而不是从图像本身选择一种颜色，那么可以使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?opaque&#34;&gt;-opaque&lt;/a&gt;&amp;rdquo; 图像操作符来代替。该函数还使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?fuzz&#34;&gt;-fuzz&lt;/a&gt;&amp;rdquo; 因子设置来增加与给定颜色相匹配的颜色范围。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;floodfill&lt;/code&gt; 的方法也很简单，因为它只会填充所选点周围的整个区域，而不会选择任何其他没有以某种方式连接的类似颜色的区域。&lt;/p&gt;
&lt;p&gt;你也可以通过使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?fuzz&#34;&gt;-fuzz&lt;/a&gt;&amp;rdquo; 来扩大被填充的区域，以包括相似的颜色。在这种情况下，我们选择了一个足够高的值，也包括了交叉边界，允许洪水填充&amp;quot;泄漏&amp;quot;到图像的另一侧。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 floodfill&amp;#39;&lt;/span&gt;      color_floodfill.png

  convert color_test.png   -fill white   -fuzz 15%   &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 floodfill&amp;#39;&lt;/span&gt;      color_floodfill_fuzz.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_floodfill.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_floodfill_fuzz.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;用颜色填充区域并非没有问题。颜色可能会越过薄薄的边界，渗入到不想要的区域，(&lt;a href=&#34;https://imagemagick.org/Usage/formats/#bg_pattern&#34;&gt;请看背景图案上的 GIF&lt;/a&gt;，以证明这一点)。或者，它可能无法填满所选区域的边缘，（见&lt;a href=&#34;https://imagemagick.org/Usage/antialiasing/#floodfill&#34;&gt;反锯齿和泛滥填充问题&lt;/a&gt;）。但它确实有效。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filltoborder&lt;/code&gt; 就像 &lt;code&gt;floodfill&lt;/code&gt; 一样，只是你指定了一个颜色，这个颜色的边界是要填充的区域，而不是填充过程中要替换的颜色。&lt;/p&gt;
&lt;p&gt;当然也建议在该边框颜色选择中加入 &lt;code&gt;similar colors&lt;/code&gt; 的&lt;a href=&#34;https://imagemagick.org/Usage/color_basics/#fuzz&#34;&gt;模糊因子&lt;/a&gt;，以进一步限制洪水填充。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill white  -bordercolor royalblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 filltoborder&amp;#39;&lt;/span&gt;   color_filltoborder.png

  convert color_test.png   -fill white  -bordercolor blue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 filltoborder&amp;#39;&lt;/span&gt;   color_filltoborder2.png

  convert color_test.png   -fill white  -bordercolor blue  -fuzz 30% &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 filltoborder&amp;#39;&lt;/span&gt;   color_filltoborder_fuzz.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_filltoborder.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_filltoborder2.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_filltoborder_fuzz.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后的绘制颜色方法是 &lt;code&gt;reset&lt;/code&gt;，它只是将整个图像替换或重置为填充颜色。在这种情况下，实际选择的像素对结果没有任何影响。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 reset&amp;#39;&lt;/span&gt;      color_reset.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_reset.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这实际上是非常有用的，因为它提供了一种简单的方法从现有图像生成纯色（或平铺图像）画布。(请参见 &lt;a href=&#34;https://imagemagick.org/Usage/canvas/#sized&#34;&gt;Canvases Sized to an Existing Image&lt;/a&gt;)以了解此方法和其他做同样事情的方法。&lt;/p&gt;
&lt;p&gt;未来：使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?tile&#34;&gt;-tile&lt;/a&gt;&amp;rdquo; 图案来填充该区域。&lt;/p&gt;
&lt;h2 id=&#34;matt-填充原语&#34;&gt;Matt 填充原语&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;matte&lt;/code&gt; 绘制原语的工作方式与上述 &lt;code&gt;color&lt;/code&gt; 原语完全相同，只是它不会替换所选区域的颜色，只会替换所选区域的 &lt;code&gt;matte&lt;/code&gt; 通道。（也就是只有 &lt;code&gt;alpha&lt;/code&gt; 或 &lt;code&gt;matte&lt;/code&gt; 通道被这些填充函数调整）。&lt;/p&gt;
&lt;p&gt;就像 &lt;code&gt;color&lt;/code&gt; 填充函数一样，&lt;code&gt;matte&lt;/code&gt; 值使用的是填充色（除非用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?tile&#34;&gt;-tile&lt;/a&gt;&amp;rdquo; 作为 &lt;code&gt;alpha value&lt;/code&gt; 的来源）。&lt;/p&gt;
&lt;p&gt;这里我们使用上面同样的 &lt;code&gt;color floodfill&lt;/code&gt; 例子，但这里只调整 matte 通道，使填充部分完全透明。也就是说，原来的颜色仍然存在，只是透明而已!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill none &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;matte 30,20 floodfill&amp;#39;&lt;/span&gt;      matte_floodfill.png

  convert color_test.png   -fill none   -fuzz 15%   &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;matte 30,20 floodfill&amp;#39;&lt;/span&gt;      matte_floodfill_fuzz.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/matte_floodfill.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/matte_floodfill_fuzz.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;也可以使用 &lt;code&gt;matte reset&lt;/code&gt; 函数使整个图像变成半透明的。当然在这种情况下，我们必须输出到 PNG，它可以接受半透明颜色的图像。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill &lt;span class=&#34;s1&#34;&gt;&amp;#39;#00000080&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;matte 30,20 reset&amp;#39;&lt;/span&gt;      matte_reset.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/matte_reset.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意，在操作中没有使用 &lt;code&gt;black&lt;/code&gt; 颜色分量，只使用了颜色的 &lt;code&gt;matte&lt;/code&gt; 分量。图像的原色保持原样。&lt;/p&gt;
&lt;p&gt;未来：使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?tile&#34;&gt;-tile&lt;/a&gt;&amp;rdquo; 模式来制作有趣的哑光效果。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;color&lt;/code&gt; 和 &lt;code&gt;matte&lt;/code&gt; 都是完全替换颜色的函数，它总是会产生一个布尔（all or nothing）类型的颜色替换。因此，这些区域的边缘总是会显示出 &lt;a href=&#34;https://imagemagick.org/Usage/antialiasing/&#34;&gt;Aliasing 效果&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;正因为如此，除了设置 GIF 图像的透明区域（也是布尔型）外，一般来说，这些都不是一般图像显影的好图像运算符。不过也不是全无用处，&lt;a href=&#34;https://imagemagick.org/Usage/masking/#bg_remove&#34;&gt;从背景去除&lt;/a&gt;的例子中可以看出。&lt;/p&gt;
&lt;h2 id=&#34;关于绘图命令的具体内容&#34;&gt;关于绘图命令的具体内容&lt;/h2&gt;
&lt;h3 id=&#34;像素坐标&#34;&gt;像素坐标&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[-draw](https://imagemagick.org/Usage/option_link.cgi?draw)&lt;/code&gt; 命令（以及IM中的许多其他命令）使用的是所谓的&amp;quot;像素坐标&amp;rdquo;。也就是 &amp;ldquo;10,10&amp;rdquo; 的坐标是左上角往下10个像素的中心。&lt;/p&gt;
&lt;p&gt;在这个坐标系中，0,0 是左上角像素的中心，w-1,h-1 是右下角的中心。实际的边缘位于 -0.5,-0.5 和 w-0.5,h-0.5，中心像素（如果图像是奇数大小）位于 &amp;lsquo;(w-1)/2,(h-1)/2&amp;rsquo;。&lt;/p&gt;
&lt;p&gt;然而，当您对图像进行数学处理时（如使用扭曲时），实际的像素没有实际意义，因此它使用&amp;quot;图像坐标&amp;rdquo;。在这个系统中，图像的实际边缘在 &amp;lsquo;0,0&amp;rsquo; 和 &amp;lsquo;w,h&amp;rsquo; 处。而图像的中心（可能是，也可能不是像素的中心）在 &amp;lsquo;w/2,h/2&amp;rsquo;。&lt;/p&gt;
&lt;p&gt;要将 &amp;lsquo;像素坐标&amp;rsquo; 转换为图像坐标，请加上 ½ 如左上角像素的中心是 &amp;lsquo;0.5,0.5&amp;rsquo;，右下角像素的中心是 &amp;lsquo;w-0.5,h-0.5&amp;rsquo;。
&lt;em&gt;例如：小图像中的圆心&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;绘制伽马和色域校正&#34;&gt;绘制伽马和色域校正&lt;/h3&gt;
&lt;p&gt;和几乎所有的 ImageMagick 操作一样， &lt;code&gt;[-draw](https://imagemagick.org/Usage/option_link.cgi?draw)&lt;/code&gt; 是一个线性运算符，因此在线性 RGB 色彩空间中工作。这意味着，为了得到平滑的边缘，你可能需要对图像进行一些伽玛校正，然后再保存，这样就可以使用非线性（伽玛校正）的sRGB色彩空间来存储。&lt;/p&gt;
&lt;p&gt;例如，如果你画了一个大圆，然后保存它&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 81x81 xc:black -fill white -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;circle 40,40 40,3&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          circle_raw.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_raw.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;看看圆圈的边缘，其实看起来并不是真的很光滑。你可以看到明显的阶梯效果。&lt;/p&gt;
&lt;p&gt;那是因为你是在线性 RGB 色彩空间中画的圆。但是你却把图像保存成了真正的 sRGB 色域！这就导致了你的图像在保存的过程中出现了明显的阶梯效果。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们需要在保存图像之前给图像添加一个伽玛校正。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 81x81 xc:black -fill white -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;circle 40,40 40,3&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -gamma 2.2 circle_gamma.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_gamma.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在，圆圈边缘实际上看起来光滑圆润，就像它们应该的那样。&lt;/p&gt;
&lt;p&gt;如果你想正确地做这件事，我们真的应该使用色彩空间进行修正。然而，由于IM假设RGB是保存的默认色彩空间，你需要做一些棘手的处理来让它正确地做事情。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 81x81 xc:black -set colorspace RGB &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;circle 40,40 40,3&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -colorspace sRGB circle_sRGB.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_sRGB.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，sRGB色彩空间（这是保存图像的正确方法）与简单地应用2.2伽玛校正并不完全相同。然而，两者之间的结果差异很小，只有在非常非常粗糙的图像中才能看到。
在IM v6.7.5-1之前，色彩空间名称 &amp;ldquo;sRGB&amp;rdquo; 和 &amp;ldquo;RGB&amp;rdquo;（线性-RGB）实际上是颠倒的。因此，在旧版本的IM中，上面的两个标签应该被调换。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要使用真实的图像（在IMv6中）正确地绘制（或进行任何&amp;quot;线性&amp;quot;图像处理），你需要首先删除任何现有的伽玛，处理图像，然后恢复该伽玛校正。更多细节请参见&lt;a href=&#34;https://imagemagick.org/Usage/resize/#resize_colorspace&#34;&gt;使用色域校正调整大小&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面是一个在真实图像上绘图的例子&amp;hellip;。首先是没有任何颜色校正（原始），然后是伽玛和色域校正。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert rose:  -fill none -stroke white -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 5,40 65,5&amp;#39;&lt;/span&gt;  rose_raw.png

  convert rose: -gamma .454545 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill none -stroke white -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 5,40 65,5&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -gamma 2.2 rose_gamma.png

  convert rose: -colorspace RGB &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill none -stroke white -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 5,40 65,5&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -colorspace sRGB rose_sRGB.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/rose_raw.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/rose_gamma.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/rose_sRGB.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;正如你所看到的，通过使用伽玛或色彩空间校正，线条变得非常平滑，没有锯齿状的&amp;quot;楼梯&amp;quot;别离效果，比直接绘制时可以看到。(你需要一个很好的显示器才能看到它)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面的线条是用 &lt;code&gt;[-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke)&lt;/code&gt; 颜色绘制的。您可以使用 &lt;code&gt;[-fill](https://imagemagick.org/Usage/option_link.cgi?fill)&lt;/code&gt; 来绘制线条，并得到同样的结果，但这样您就不能使用 &lt;code&gt;[-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth)&lt;/code&gt; 来控制线条粗细。更多信息请参见下面的&amp;rdquo;&lt;a href=&#34;https://imagemagick.org/Usage/draw/#stroke&#34;&gt;描边颜色设置&lt;/a&gt;&amp;quot;。
色域名称实际上是使用&amp;rsquo;sRGB&#39;色彩空间的值来定义的，但通过绘制应用，就好像图像是在线性RGB色彩空间中一样。因此，对命名的颜色（不是&amp;quot;白&amp;quot;或&amp;quot;黑&amp;rdquo;）使用上述伽玛校正将导致这些颜色变得失真。在这种情况下，最好不要使用伽玛或色域校正，这样命名的颜色就会正确映射。
命名的&amp;rsquo;sRGB&#39;颜色与图像的色彩空间的正确映射，将作为IMv7开发的一部分被修正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;描边描边宽度和填充的相互作用&#34;&gt;描边、描边宽度和填充的相互作用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke)&lt;/code&gt; 和 &lt;code&gt;[-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth)&lt;/code&gt; 选项用于在字体边缘绘制轮廓。&lt;/p&gt;
&lt;p&gt;这些选项通常与 &lt;code&gt;[-fill](https://imagemagick.org/Usage/option_link.cgi?fill)&lt;/code&gt; 一起使用，以使文字更有趣，而不费力。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    convert -size 380x70 xc:lightblue -pointsize &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt; -font Chisel &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -fill green  -stroke black  -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 10,55 &amp;#34;Black Border&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            stroke_font.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认设置是 &lt;code&gt;-strokewidth 1&lt;/code&gt; 和 &lt;code&gt;-stroke None&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但这样做会使轮廓笔画不可见，只留下 &lt;code&gt;[-fill](https://imagemagick.org/Usage/option_link.cgi?fill)&lt;/code&gt; 的颜色，你不会看到它。&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;-strokewidth&lt;/code&gt; 为 &amp;ldquo;不可见 &amp;ldquo;时， &lt;code&gt;-strokewidth&lt;/code&gt; 唯一的效果是对字体大小属性的影响，也就是说它仍然可以影响字体定位和 &lt;a href=&#34;https://imagemagick.org/Usage/text/#label&#34;&gt;Label 和 Caption&lt;/a&gt; 图片生成的大小。否则，宽度在你使笔画可见之前是没有可见效果的。&lt;/p&gt;
&lt;p&gt;为了了解 &lt;code&gt;[-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth)&lt;/code&gt; 对字体外观的实际影响（当使其可见时），我在这里绘制了一些不同宽度的文字，从 &amp;ldquo;turned off&amp;rdquo; 到越来越大。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    convert -size 320x420 xc:lightblue -pointsize &lt;span class=&#34;m&#34;&gt;70&lt;/span&gt; -font Vademecum &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -fill red -stroke none                 -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 30,80  &amp;#34;Stroke -&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -fill red -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 30,160 &amp;#34;Stroke 0&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -fill red -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 30,240 &amp;#34;Stroke 1&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -fill red -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 30,320 &amp;#34;Stroke 2&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -fill red -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 30,400 &amp;#34;Stroke 3&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      stroke_table.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/stroke_table.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，从上面的例子中，设置 &lt;code&gt;-strokewidth&lt;/code&gt; 为 &amp;ldquo;0&amp;rdquo; 与设置 &lt;code&gt;-stroke&lt;/code&gt; 颜色为 &amp;ldquo;none&amp;rdquo;（默认值）是不同的。前者会画出一个非常非常细的笔触轮廓，而后者则会有效地关闭它。在这两种情况下，笔触仍然会被绘制。&lt;/p&gt;
&lt;p&gt;然而你也应该注意到，即使 &lt;code&gt;-strokewidth&lt;/code&gt; 为 &amp;ldquo;0&amp;rdquo;，图像的轮廓也会比普通的 &lt;code&gt;filled&lt;/code&gt; 图像（使用 &lt;code&gt;-stroke&lt;/code&gt; 颜色为 &amp;ldquo;none&amp;rdquo;）扩大非常小。&lt;/p&gt;
&lt;p&gt;最后，使用任何小于 &amp;ldquo;1.0&amp;rdquo; 的宽度都不能正常工作。在这种情况下，你应该谨慎行事。&lt;/p&gt;
&lt;p&gt;但是请记住， &lt;code&gt;-strokewidth&lt;/code&gt; 也是一个浮点设置。也就是说，&amp;ldquo;0.5&amp;rdquo; 的笔画宽度也是有效的。然而，通常只有当您试图在关闭防锐化功能的情况下绘制薄的位图圆时，这才是重要的。&lt;/p&gt;
&lt;p&gt;下面是一个使用超大笔触宽度的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;   convert -size 320x100 xc:lightblue -font Candice -pointsize &lt;span class=&#34;m&#34;&gt;72&lt;/span&gt; -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 25,65 &amp;#39;Anthony&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           stroke_thick.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/stroke_thick.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意， &lt;code&gt;-strokewidth&lt;/code&gt; 可以向内和向外扩展线条。下面是同样的例子，但是重新绘制了字体，没有笔画轮廓，去掉了很粗的笔画的内侧部分。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;   convert -size 320x100 xc:lightblue -font Candice -pointsize &lt;span class=&#34;m&#34;&gt;72&lt;/span&gt; -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 25,65 &amp;#39;Anthony&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           -stroke none                  -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 25,65 &amp;#39;Anthony&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           stroke_outline.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/stroke_outline.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;更多使用描边的例子请看&lt;a href=&#34;https://imagemagick.org/Usage/fonts/&#34;&gt;复合字体效果&lt;/a&gt;。请特别看一下&amp;rdquo;&lt;a href=&#34;https://imagemagick.org/Usage/fonts/#balloon&#34;&gt;气球效果&lt;/a&gt;&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;绘制描边线条&#34;&gt;绘制（描边）线条&lt;/h3&gt;
&lt;p&gt;IM中的默认画线有一些奇怪的行为，值得了解。下面就为大家介绍一下默认画线&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_default.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_default.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以用 &lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?fill&#34;&gt;&lt;code&gt;-fill&lt;/code&gt;&lt;/a&gt; 选项设置线条的颜色。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;此外，你还可以通过设置 &lt;code&gt;[-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke)&lt;/code&gt; 颜色，使线条稍微粗一些。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -stroke black -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_stroke.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是我们用 &lt;code&gt;-fill&lt;/code&gt; 选项指定的白色是怎么回事呢？&lt;/p&gt;
&lt;p&gt;这就是在 ImageMagick 中绘制线条的棘手之处。该程序所做的实际上是将线条视为一个约1像素宽的填充对象。这是自然的，因为通常情况下，多条线通常用于扫出一个要填充的区域。&lt;/p&gt;
&lt;p&gt;所以，就像我们在上一节中使用字体的描边一样，IM 用填充色绘制线条（或对象），然后用描边色在其周围绘制。结果就是，现在上面的描边色线条稍微粗了一点，填充色完全隐藏在下面。如果你把描边色做成半透明的，就可以让这个填充色再次显现出来。&lt;/p&gt;
&lt;p&gt;综上所述，线条会出现在 &lt;code&gt;-fill&lt;/code&gt; 颜色下绘制，但一旦 &lt;code&gt;-stroke&lt;/code&gt; 颜色被定义为默认的&amp;quot;无&amp;quot;或&amp;quot;透明&amp;quot;颜色以外的颜色，该选项就没有任何意义了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;选项 &lt;code&gt;-linewidth&lt;/code&gt; 实际上只是 &lt;code&gt;-strokewidth&lt;/code&gt; 的别名，不应该被使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，你可能会认为这个命令会产生很粗的线条。确实如此，但由于 &lt;code&gt;-stroke&lt;/code&gt; 的颜色是不可见的，所以你看不到它。你只能看到线条的一个像素宽的区域的内部&amp;quot;填充&amp;rdquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -strokewidth &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_fill_3.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_fill_3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以上的结果其实我认为是一个 BUG，什么都没画，因为没有&#39;区域&#39;填充，也没有设置线的&#39;描边颜色&amp;rsquo;。什么都没有画，因为没有&amp;quot;区域 &amp;ldquo;需要填充，也没有设置线的&amp;quot;笔触颜色&amp;rdquo;。IM 目前这样做的原因是为了避免新用户的混淆，但实际上这只会给高级用户带来问题。详见&lt;a href=&#34;https://imagemagick.org/Usage/draw/#bounds&#34;&gt;《绘制填充边界》&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但如果同时定义了描边颜色，就会得到要求的粗线&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_stroke_3.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果将 &lt;code&gt;-strokewidth&lt;/code&gt; 设置为1，则上面的一行将被完全覆盖。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_stroke_1.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然当你掌握了这些知识后，你就可以利用这些知识进行创作，就像画字体一样。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -stroke white -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_multi.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_multi.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这里，我使用了最薄的 &lt;code&gt;-strokewidth&lt;/code&gt; 设置为 &amp;ldquo;0&amp;rdquo;，就像我对上述字体所做的一样。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_stroke_0.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就产生了一个非常奇怪的结果，即由黑点和灰段组成的点线。这是笔触、填充和背景色之间奇怪的&amp;quot;色拍频率&amp;quot;的结果。&lt;/p&gt;
&lt;p&gt;下面是线条的放大图&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 25x10 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 2,8 22,1&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -scale 400%    line_stroke_0_white.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_0_white.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;颜色节拍频率 &amp;ldquo;的效果与&amp;quot;声音节拍&amp;quot;的效果并无二致，当你有两把非常轻微的不调的吉他时，你会得到这样的效果。在这种情况下，你会得到一个黑点，其中笔触颜色完全覆盖了基本的填充颜色，你会得到一个灰色的点，其中笔触颜色与填充和背景颜色混合。
颜色混合是反锯齿过程的自然结果，IM使用反锯齿过程来尝试改善线条和其他绘制对象的外观。更多信息请参见&lt;a href=&#34;https://imagemagick.org/Usage/antialiasing/&#34;&gt; IM 中的抗锯齿&lt;/a&gt;讨论和示例页面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的是，这种效果只出现在倾斜的线条上，而不是纯水平或垂直的线条，因为在这些线条上，别名没有影响，因此也就没有&amp;quot;色拍频率&amp;quot;的效果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,20 95,20&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_stroke_horz.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_horz.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这里，我在放大的视图上使用了不同的底层填充颜色，所以你可以看到颜色如何改变结果的节拍。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 25x10 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill none -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 2,8 22,1&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -scale 400%     line_stroke_0_none.jpg

  convert -size 25x10 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill red -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 2,8 22,1&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -scale 400%    line_stroke_0_red.jpg

  convert -size 25x10 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill black -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 2,8 22,1&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -scale 400%    line_stroke_0_black.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_0_none.jpg&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_0_red.jpg&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_0_black.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;让我们把它和无 stroke 相比&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 25x10 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill black -stroke none -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 2,8 22,1&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -scale 400%    line_stroke_-_black.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_-_black.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;正如你所看到的，当绘制非常细的线条时，你可以通过使用相同的填充和描边颜色，或者将其中一种颜色设置为无来减少&amp;quot;节拍&amp;rdquo;。虽然后者是最好的主意，但前者可能对你的特定编程需求更实用。&lt;/p&gt;
&lt;p&gt;注意，填充线的粗细是 &amp;ldquo;0&amp;rdquo;。但描边线可以有更大的厚度。它也是一个浮点值! 2.5像素宽的线条是完全有效的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这些结果不仅是由于笔画宽度为0的bug，导致颜色跳动，而且在没有实际需要填充的区域时，&amp;ldquo;填充色&amp;quot;被画出了额外的1.0直径厚度。这我也认为是一个bug。请看&lt;a href=&#34;https://imagemagick.org/Usage/draw/#bounds&#34;&gt;绘制填充边界&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;绘制填充边界&#34;&gt;绘制填充边界&lt;/h3&gt;
&lt;p&gt;关于各种绘制原语，还有一些其他要点需要您注意。&lt;/p&gt;
&lt;p&gt;笔画宽度对于大于 1.0 的浮点值工作得很好，但对于小于 1.0 的值似乎会崩溃。这是由于使用的实现算法造成的，而不仅仅是因为它是错误的，因为它在较大厚度的线条上工作得很好。&lt;/p&gt;
&lt;p&gt;基本上，如果你使用的笔画宽度为零，你可以期待没有笔画颜色会被添加。相反，你会得到一种节拍模式，当线条穿过像素的实际&amp;quot;中心&amp;quot;时，笔触颜色就会达到全部强度。&lt;/p&gt;
&lt;p&gt;真正应该发生的是，添加到像素上的颜色数量应该反映出被绘制的线条的面积，而不是像素与该线条的距离。因此，零宽度的线条不应该给图像添加任何颜色，而厚度小于1.0的线条应该只添加较少的颜色。&lt;/p&gt;
&lt;p&gt;请看上面的例子 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#strokewidth&#34;&gt;Draw Lines, with StrokeWidth and Stroke&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另一个问题是，填充颜色没有应用到正在绘制的形状（多边形）的边缘，而是应用到更远的半像素处。这包括没有应用&amp;quot;描边&amp;quot;的情况，而边缘应该是精确的。它也包括画一条&amp;quot;线&amp;rdquo;，它的填充厚度实际上是&amp;quot;零&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;基本上，如果你画了一条线，没有启用描边，从技术上讲，你应该看到，没有线，因为它没有&amp;quot;填充&amp;quot;厚度。相反，线条的绘制至少包括1个像素宽的&amp;quot;填充&amp;quot;颜色。这是出于历史原因，一般来说可以避免新用户对IM的混淆。不幸的是，这对高级用户来说是不正确的。&lt;/p&gt;
&lt;p&gt;这意味着，如果您只使用填充色绘制两个多边形，并共享一个边缘，该边缘将重叠1个像素，因为每个多边形的所有边缘都比它大半像素。换句话说，多边形和其他形状并不适合在一起，而是重叠的。&lt;/p&gt;
&lt;p&gt;例如，在这里我试着使用 &lt;code&gt;draw&lt;/code&gt; 把一张图片分成两半（在白色上绘制黑色）。要做到这一点，我画了两个多边形，共享一个边缘，完全没有重叠。由此产生的&amp;quot;微小&amp;quot;图像，已被放大显示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 10x10 xc: -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;polygon 2,-1 7,10 10,10 10,-1&amp;#39;&lt;/span&gt; bound_left.gif
  convert -size 10x10 xc: -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;polygon 2,-1 7,10 -1,10 -1,-1&amp;#39;&lt;/span&gt; bound_right.gif
  convert bound_left.gif bound_right.gif -compose Plus -composite bound_add.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/bound_left_mag.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/img_www/plus.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/bound_right_mag.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/img_www/right.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/bound_add_mag.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;两个黑色的部分(这是实际绘制的)实际上是相互重叠的! 换句话说，尽管我们试图使用绘制的多边形分别绘制这两个区域，但填充的区域比要求的略大。&lt;/p&gt;
&lt;p&gt;我还将两张图片加（&lt;a href=&#34;https://imagemagick.org/Usage/compose/#plus&#34;&gt;加合成&lt;/a&gt;）在一起，这样你就可以实际看到绘制的黑色区域的重叠。如果两个多边形是完美契合的，那么 &amp;ldquo;添加 &amp;ldquo;的图画将是纯白色的。&lt;/p&gt;
&lt;p&gt;实际的重叠量相当于默认的 &lt;code&gt;-strokewidth 1.0&lt;/code&gt; 设置。因此，通常情况下，这个额外的区域会被一个正常的笔画宽度所覆盖。然而它可能会造成一些实际问题。&lt;/p&gt;
&lt;p&gt;旁白: 对于一个完整的连接测试，你会在黑色背景上生成50%的灰色区域，然后把它们加在一起。这样你就可以看到这些区域是否不仅 &amp;ldquo;重叠&amp;rdquo;（如上图所示），而且还可以测试当你把这些区域加在一起时，它们是否 &amp;ldquo;重叠不足&amp;rdquo;（在填充的区域之间留下一个间隙）。所得到的图像应该是一个完美平滑的50%灰色，沿连接处没有颜色变化。透明度检查会涉及到，在一个完全透明的背景上应该使用50%透明，50%灰色的颜色。&lt;/p&gt;
&lt;p&gt;要查看一个完美的剪切和重新添加的例子，基于一个单一的蒙版图像，请参阅组成方法的例子，&lt;a href=&#34;https://imagemagick.org/Usage/compose/#dstout&#34;&gt;组成 DstOut&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;未来BUG修复：填充的区域应该是精确的，但为了在绘制形状时进行补偿，默认的 &amp;ldquo;描边颜色 &amp;ldquo;应该设置为填充颜色（除非它本身被特别设置）。&lt;/p&gt;
&lt;h2 id=&#34;mvg---魔法矢量图形&#34;&gt;MVG - 魔法矢量图形&lt;/h2&gt;
&lt;p&gt;上面显示的原语构成了所有 &lt;code&gt;-draw&lt;/code&gt; 操作的基础。它们共同构成了 ImageMagick 中特殊内部语言的起点，称为 Magick Vector Graphics 语言。关于这种语言的更多细节，请参见IM网站上的 &lt;a href=&#34;http://www.imagemagick.org/script/magick-vector-graphics.php&#34;&gt;MVG 原语和语法摘要&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这种 &amp;ldquo;MVG&amp;rdquo; 语言的设计目标是让 ImageMagick 处理更复杂的 SVG（可缩放矢量图形）语言。它通过尝试将给定 SVG 格式的图像转换为更简单的内部 MVG 格式来实现。更多细节请看下面的 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#svg&#34;&gt;SVG 处理&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;因此，你上面看到的只是 &lt;code&gt;-draw&lt;/code&gt; 操作符的一小部分功能。如果你想绘制复杂的对象，我建议你使用SVG编辑器（如 &amp;ldquo;Sodipodi&amp;rdquo;）为对象创建一个单独的SVG格式图像。参见下面的非IM矢量图形程序）。&lt;/p&gt;
&lt;p&gt;与 SVG 不同，MVG 没有任何形式的&amp;quot;容器&amp;quot;或图像命令集。在转换过程中，这些命令都被删除，以产生一个简化的 MVG 绘图命令序列。相反，它使用&lt;a href=&#34;https://imagemagick.org/Usage/draw/#push_context&#34;&gt;图形上下文&lt;/a&gt;的概念来保存和恢复各种绘图设置，这就是我们现在要看的。&lt;/p&gt;
&lt;h3 id=&#34;命令行设置与-mvg-设置&#34;&gt;命令行设置与 MVG 设置&lt;/h3&gt;
&lt;p&gt;首先，您通过命令行选项设置的几乎所有设置，绘制原语使用的设置在 MVG 绘制命令中都有直接对应的内容。&lt;/p&gt;
&lt;p&gt;通过命令行选项（如 &lt;code&gt;-strokewidth&lt;/code&gt;）或使用 MVG 绘图字符串（如 &lt;code&gt;strok-width&lt;/code&gt;）中的设置，两者之间的主要区别在于 MVG 设置只在 MVG 命令字符串的持续时间内有效。&lt;/p&gt;
&lt;p&gt;一般绘图设置的总结:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  __cmd_option__   __draw_MVG__        __Argument__
    -fill            fill                color/tile for inside shapes
    -tile            fill                image tile, replaces fill color

    -stroke          stroke              line color/tile around the shapes
    -strokewidth     stroke-width        pixel width
    +antialias       stroke-antialias    0/1 aliasing line edges

    -font            font                font_name / font_file
    -family          font-family            ?
    -weight            ?                    ?
    -stretch           ?                    ?
    -pointsize       font-size           height in points
    -kerning           -                 extra inter-character spacing

    +antialias       text-antialias      0/1 aliasing drawing text
    -box             text-undercolor     fill color for font bounding box
      -              decorate        (None, Underline, LineThrough or Overline)

    -gravity         gravity             (None, North, South-East,...)
    -fuzz              -                 color delta / percentage
    -bordercolor       -                 color
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  - no such option      ? unknown
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这些设置通常很好理解，因为它们经常使用，上面也有演示。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;字体、拉伸、样式和重量用于从 ImageMagick 字体列表中识别字体。然而，大多数人只是选择一个特定的字体和大小点来代替使用。因此，它们在IM中很少使用。
正如您所看到的，&amp;ldquo;color fill&amp;rdquo; 原语的特殊设置在 MVG 中并没有直接对应的设置。这就是 &lt;code&gt;-bordercolor&lt;/code&gt; 和 &lt;code&gt;-fuzz&lt;/code&gt; 因子设置。在使用 &lt;code&gt;-draw&lt;/code&gt; 操作符之前，必须从命令行指定这些设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些 MVG 设置作为全局命令行设置可能更有用，比如字体绘制的 &lt;code&gt;decorate&lt;/code&gt; 设置。&lt;/p&gt;
&lt;p&gt;警告： &lt;code&gt;[-gravity](https://imagemagick.org/Usage/option_link.cgi?gravity)&lt;/code&gt; 不是 SVG 规范的一部分。在 MVG 中，它只用于文本和图像的放置以及对齐。目前没有与默认的&amp;quot;引力&amp;quot;效果分开的调整设置。然而，由于调整是 SVG 文本处理的一部分，这可能会在未来的某个时候改变。&lt;/p&gt;
&lt;p&gt;现在，全局命令行设置（在 MVG 绘制字符串之外）用于初始化你所应用的每个 &lt;code&gt;-draw&lt;/code&gt; 操作的设置，这就是为什么你可以设置一个 &lt;code&gt;-fill&lt;/code&gt; 颜色，然后你可以用它来绘制该颜色的圆。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue   -fill red &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;circle 50,30 40,10&amp;#34;&lt;/span&gt;          draw_circle_global.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_circle_global.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以在 MVG 参数 &lt;code&gt;-draw&lt;/code&gt; 中本地覆盖全局设置&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue   -fill red &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill green   circle 50,30 40,10&amp;#34;&lt;/span&gt;  draw_circle_override.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_circle_override.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而，在单个 &lt;code&gt;-draw&lt;/code&gt; MVG 参数中设置的设置只在 &lt;code&gt;-draw&lt;/code&gt; 操作期间存在。也就是说， &lt;code&gt;-draw&lt;/code&gt; 中的设置只限于该次绘制，而不会带入以后单独的 &lt;code&gt;-draw&lt;/code&gt; 参数中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue   -fill red   -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;fill green&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;circle 50,30 40,10&amp;#34;&lt;/span&gt;          draw_circle_local.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_circle_local.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你打算进行大量的操作，那么在单个 MVG 字符串中进行这些操作可能会比多个 &lt;code&gt;-draw&lt;/code&gt; 操作更好。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill green  circle 41,39 44,57
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill blue   circle 59,39 56,57
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill red    circle 50,21 50,3  &amp;#34;&lt;/span&gt;  draw_circle_multi.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_circle_multi.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;mvg-特定设置&#34;&gt;MVG 特定设置&lt;/h3&gt;
&lt;p&gt;其他控制线条和对象绘制方式的 MVG 设置，即使在使用原语操作时也需要了解。这些设置包括&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   __draw_MVG__       __Description/Argument__
  fill-opacity        fill transparency, from 0.0 to 1.0
  clip-rule           fill style for crossed lines (evenodd, nonzero)

  stroke-opacity      line transparency, number from 0.0 to 1.0
  stroke-dasharray    list of &#39;on&#39; and &#39;off&#39; lengths for lines
  stroke-dash
  stroke-linecap      End of line look: butt round square
  stroke-linejoin     Lines joins:  butt  miter round square
  stroke-miterlimit   Angle when &#39;miter&#39; joins become &#39;bevel&#39; (or &#39;butt&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;记住，所有 MVG 设置和绘图操作符的完整列表可以在 IM 网站的 &lt;a href=&#34;http://www.imagemagick.org/script/magick-vector-graphics.php&#34;&gt;MVG 原语和语法摘要&lt;/a&gt;中看到。&lt;/p&gt;
&lt;p&gt;让我们看看一些简单设置的效果&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Stroke Opacity&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill none -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                           path &amp;#39;M 10,10 L 90,10&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-opacity 0.8         path &amp;#39;M 10,20 L 90,20&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-opacity 0.6         path &amp;#39;M 10,30 L 90,30&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-opacity 0.4         path &amp;#39;M 10,40 L 90,40&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-opacity 0.2         path &amp;#39;M 10,50 L 90,50&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_stroke_opacity.gif

  &lt;span class=&#34;c1&#34;&gt;# Fill Opacity&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                    rectangle  5,10 15,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-opacity 0.8    rectangle 20,10 30,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-opacity 0.6    rectangle 35,10 45,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-opacity 0.4    rectangle 50,10 60,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-opacity 0.2    rectangle 65,10 75,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-opacity  0     rectangle 80,10 90,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_fill_opacity.gif

  &lt;span class=&#34;c1&#34;&gt;# Plain and Dashed Lines&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill none -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                           path &amp;#39;M 10,10 L 90,10&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 5 3       path &amp;#39;M 10,20 L 90,20&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 5 5       path &amp;#39;M 10,30 L 90,30&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 10 3 3 3  path &amp;#39;M 10,40 L 90,40&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 1 6       path &amp;#39;M 10,50 L 90,50&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_lines.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                           path &amp;#39;M 10,10 L 90,10&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 5 3       path &amp;#39;M 10,20 L 90,20&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 5 5       path &amp;#39;M 10,30 L 90,30&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 10 3 3 3  path &amp;#39;M 10,40 L 90,40&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 1 6       path &amp;#39;M 10,50 L 90,50&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_lines_fill.gif

  &lt;span class=&#34;c1&#34;&gt;# Note: Technically the second image should be the same as the first&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# as the &amp;#39;filled&amp;#39; lines contain no area.  This I regard as a BUG.&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Stroke Ends and Joins&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                           path &amp;#39;M 20,20 L 20,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-linecap butt        path &amp;#39;M 40,20 L 40,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-linecap round       path &amp;#39;M 60,20 L 60,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-linecap square      path &amp;#39;M 80,20 L 80,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_endcaps.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                        path &amp;#39;M  5,70 L 20,20  35,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-linejoin miter   path &amp;#39;M 35,70 L 50,20  65,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-linejoin bevel   path &amp;#39;M 55,70 L 70,20  85,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-linejoin round   path &amp;#39;M 75,70 L 90,20 105,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_linejoin.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                        path &amp;#39;M  5,70 L 20,20  35,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-miterlimit 7     path &amp;#39;M 35,70 L 50,20  65,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-miterlimit 6     path &amp;#39;M 65,70 L 80,20  95,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_miterlimit.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_stroke_opacity.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_fill_opacity.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_lines.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_lines_fill.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_endcaps.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_linejoin.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_miterlimit.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stroke-miterlimit&lt;/code&gt; 的设置是相当难以演示的。这个属性定义了将 &lt;code&gt;miter&lt;/code&gt; 连接变为 &lt;code&gt;bevel&lt;/code&gt; 连接的角度。基本上对于非常尖锐的角度，一个斜面可以从两条线的实际接合处延伸很长的距离。这就为这个锐角设置了一个最大限度，当它变得太长时，就会使角点变钝。但请注意，它代表的是某种角度的三角值，而不是长度或距离。该值必须大于1.0。&lt;/p&gt;
&lt;p&gt;上面显示了对于我所显示的连接角度，斜角会突然转换成一个介于6到7之间的斜角。&lt;/p&gt;
&lt;p&gt;例如，1.414 的 &lt;code&gt;troke-miterlimit&lt;/code&gt; 会将小于90度的任何角度的 &amp;ldquo;miter&amp;rdquo; 转换为 &lt;code&gt;bevel&lt;/code&gt; 。4.0的 值（默认值）将小于约29度的角度转换为连接。而10.0的值可以将小于约11.5度的角度转换为斜面。&lt;/p&gt;
&lt;h3 id=&#34;svg-s路径绘制&#34;&gt;SVG s路径绘制&lt;/h3&gt;
&lt;p&gt;SVG 路径是 SVG 的基本绘图原语。它用于绘制线型、圆、曲线、弧线等。SVG 路径的完整规范可以在 &lt;a href=&#34;http://www.w3.org/TR/SVG/paths.html#PathDataGeneralInformation&#34;&gt;SVG 路径规范&lt;/a&gt;文档中找到。&lt;/p&gt;
&lt;p&gt;然而这并不是一个容易阅读的文档，因为它确实是为程序员而不是用户准备的，所以我将简化和总结路径规范&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字母是命令，而所有的数字（浮点）都是参数&lt;/li&gt;
&lt;li&gt;逗号或空格可以作为参数分隔符，否则完全忽略&lt;/li&gt;
&lt;li&gt;每个路径组件的最后两个参数 &lt;code&gt;(x,y)&lt;/code&gt; 将成为该路径组件的终点(或&amp;quot;结&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;大写字母是指最终点的绝对坐标&lt;/li&gt;
&lt;li&gt;小写字母是相对于前一个组件的终点而言的&lt;/li&gt;
&lt;li&gt;例如 &amp;ldquo;M 1,2 L 3,4 L 2,4&amp;rdquo; 和 &amp;ldquo;M 1,2 L 4,6 L 6,2&amp;rdquo; 是一样的。&lt;/li&gt;
&lt;li&gt;即在1,2上加了3,4，画线到4,6。&lt;/li&gt;
&lt;li&gt;然后在1,2上加2,4，画出一条线到最后的坐标6,2。&lt;/li&gt;
&lt;li&gt;每个元素的参数可以重复，不需要重新发布相同的路径字母，可以多加数字参数组。不过对于曲线，为了方便阅读，我建议你还是加上函数字母。&lt;/li&gt;
&lt;li&gt;重复的参数 &amp;ldquo;M&amp;rdquo; 或 &amp;ldquo;m&amp;rdquo; 分别作为 &amp;ldquo;L&amp;rdquo; 或 &amp;ldquo;l&amp;rdquo; 处理。&lt;/li&gt;
&lt;li&gt;例如：&amp;rdquo; M 1,2 3,4 5,6 &amp;quot; 和 &amp;quot; M 1,2 L 3,4 L 5,6 &amp;quot; 是一样的。&lt;/li&gt;
&lt;li&gt;而：&amp;ldquo;m 1,2 3,4 2,4 &amp;quot; 与 &amp;quot; m 1,2 l 3,4 l 2,4 &amp;quot; 相同。&lt;/li&gt;
&lt;li&gt;对于立方贝塞尔，所有的点（控制点和结点）都是相对于前一个路径组件的端点而言的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，您可以用绝对坐标或相对坐标来指定对象。因此，你可以用相对坐标来定义一个对象，只需提供一个初始的绝对&amp;quot;移动&amp;quot;坐标来定位整个路径。&lt;/p&gt;
&lt;p&gt;另一方面，你也可以使用其他的&amp;quot;图形内容&amp;quot;命令来移动整个图形在&amp;quot;视图框&amp;quot;或&amp;quot;转换&amp;quot;中的位置（见下文）。因此，在 SVG 路径中使用绝对或相对坐标并不重要。
移动、线条和路径闭合是学习 SVG 对象路径的最初起点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Open, Completed and Closed Paths (same points)&lt;/span&gt;

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 40,10 L 20,50 90,10 70,40&amp;#39;&amp;#34;&lt;/span&gt; path_open.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 40,10 L 20,50 90,10 70,40 40,10&amp;#39;&amp;#34;&lt;/span&gt; path_complete.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 40,10 20,50 90,10 70,40 Z&amp;#39;&amp;#34;&lt;/span&gt; path_closed.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_open.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_complete.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_closed.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是请注意，&amp;lsquo;z&amp;rsquo; 只是关闭循环。它并没有创建一个单独的对象。因此，两个&amp;quot;关闭&amp;quot;的路径仍然被归类为一个单一的绘制对象，无论它们是重叠的还是完全断开的。&lt;/p&gt;
&lt;p&gt;这里我们展示了两个闭合但重叠的循环，在同一方向上绘制。由于只使用了一条路径，所以对象是一个单一的对象，&lt;code&gt;fill-rule&lt;/code&gt; 设置控制了重叠区域的填充方式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Overlapping Paths and Fill Rule&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-rule evenodd \
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 40,10 20,20 70,50 Z
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                       M 20,40 70,40 90,10 Z&amp;#39; &amp;#34;&lt;/span&gt; path_evenodd.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-rule nonzero \
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 40,10 20,20 70,50 Z
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                       M 20,40 70,40 90,10 Z&amp;#39; &amp;#34;&lt;/span&gt; path_nonzero.gif

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_evenodd.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_nonzero.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于对象围绕中心以相同的角度方向绘制，两个闭合的循环将包含一个周期值为2的区域，因此 &lt;code&gt;evenodd&lt;/code&gt; 规则使得该区域未被填充，而非零的 &lt;code&gt;nonzero&lt;/code&gt; 规则则将其填充。但是请注意，所有的路径都是可见的，因为它们实际上是同一个对象。&lt;/p&gt;
&lt;p&gt;绘制路径的方向是非常重要的，一般情况下，所有的路径相对于对象的&#39;内部&#39;应该绘制在完全相同的方向上。&lt;/p&gt;
&lt;p&gt;例如这里我将第二个对象画成与第一个对象相反的方向。因此，当两个对象重叠时，该区域被圈出 &amp;lsquo;0&amp;rsquo; 次。也就是说，无论使用什么 &lt;code&gt;fill-rule&lt;/code&gt;，它都将是未被填充的，形成一个&#39;洞&amp;rsquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Overlapping Closed Objects, Second object drawn in reverse&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-rule evenodd \
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 40,10 20,20 70,50 Z
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                       M 20,40 90,10 70,40 Z&amp;#39; &amp;#34;&lt;/span&gt; path_rvs_evenodd.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-rule nonzero \
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 40,10 20,20 70,50 Z
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                       M 20,40 90,10 70,40 Z&amp;#39; &amp;#34;&lt;/span&gt; path_rvs_nonzero.gif

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_rvs_nonzero.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_rvs_evenodd.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这意味着你可以在物体上产生一个&amp;quot;洞&amp;rdquo;，通过反转方向，使物体的&amp;quot;内部&amp;quot;保持在行进方向的同一侧。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# An object with a reversed drawn hole!&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,10 20,55 70,50 80,5 Z
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                       M 50,20 60,40 40,30 Z&amp;#39; &amp;#34;&lt;/span&gt; path_with_hole.gif

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_with_hole.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;无论 &lt;code&gt;fill-rule&lt;/code&gt; 的设置如何，结果都是一样的，因为这个洞是&#39;偶数&#39;和&#39;零&amp;rsquo;，所以是未填充的。&lt;/p&gt;
&lt;p&gt;当然，如果您使用一个完全独立的 &lt;code&gt;path&lt;/code&gt; 元素，您将生成一个完全独立的对象。在这种情况下，&lt;code&gt;fill-rule&lt;/code&gt; 不适用，而只是按照给定的顺序，将对象画在彼此的上方。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Separate paths are separate objects&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 40,10 20,20 70,50 Z&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 20,40 70,40 90,10 Z&amp;#39; &amp;#34;&lt;/span&gt; path_separate.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_separate.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;未来：坐标对准路径 &amp;ldquo;H&amp;rdquo; 和 &amp;ldquo;V&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;椭圆弧是 SVG 路径的圆圈绘制功能&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;large&lt;/code&gt; 和 &lt;code&gt;sweep&lt;/code&gt; 参数特别重要，因为它们用于决定从起点到终点的四种弧线中的哪一种。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;large&lt;/code&gt; 和 &lt;code&gt;sweep&lt;/code&gt; 这两个标志定义了四条弧线中哪一条弧线将连接这两个点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#  Elliptical Arcs :   A  radius_x,y  angle   large,sweep  x,y&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,15 0 0,0 70,20&amp;#39;&amp;#34;&lt;/span&gt;    path_arc.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,15 0 0,1 70,20&amp;#39;&amp;#34;&lt;/span&gt;    path_arc2.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,15 0 1,0 70,20&amp;#39;&amp;#34;&lt;/span&gt;    path_arc3.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,15 0 1,1 70,20&amp;#39;&amp;#34;&lt;/span&gt;    path_arc4.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc2.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc3.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc4.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;第二个标志 &lt;code&gt;sweep&lt;/code&gt; 简单地决定了弧线路径的方向的哪一边应该被绘制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;large&lt;/code&gt; 标志是用来选择较长的路径，绕着椭圆的中心走。这是设置的角度的弧线将大于180度。如果关闭，你会得到较小的&#39;弧&amp;rsquo;，不包含椭圆的中心，并且弧线的角度小于180度。&lt;/p&gt;
&lt;p&gt;用 &amp;ldquo;Z&amp;rdquo; 来关闭弧线，只是画出最后的直线段。&lt;/p&gt;
&lt;p&gt;要创建一个完整的椭圆或圆，你至少需要两个&#39;弧线&#39;段，从第一点到第二点，然后回到第一点。两条弧线都应该有相同的 &lt;code&gt;sweep&lt;/code&gt; 设置，所以弧线将在不同的边上，有不同的移动方向。其中一条弧线应该有 &lt;code&gt;large&lt;/code&gt; 的设置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Closed and angled elliptical arcs  (defined by two edge points)&lt;/span&gt;

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,20  20  0,0 70,20 Z &amp;#39;&amp;#34;&lt;/span&gt; path_arc5.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,20  20  1,1 70,20 Z &amp;#39;&amp;#34;&lt;/span&gt; path_arc6.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,20  20  0,0 70,20 \
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                A 30,20  20  1,0 30,40 Z &amp;#39;&amp;#34;&lt;/span&gt; path_arc7.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc5.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc6.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc7.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，如果直线太长，在给定的角度下无法适应给定的椭圆大小，椭圆的大小将被放大，以适应以椭圆为中心的直线，这意味着通过使用小数字作为轴半径，你可以只指定轴长的比例，并保证直线路径通过椭圆的中心点。&lt;/p&gt;
&lt;p&gt;这意味着，通过使用小数字的轴半径，你可以只指定一个轴长的比例，并保证直线路径穿过椭圆的中心点。也就是说，路径从椭圆的一侧到另一侧形成一个椭圆直径。这并不是椭圆的主轴或次轴，只是一个椭圆的直径。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40   A 3,2  45  0,0 70,20&amp;#39;&amp;#34;&lt;/span&gt; path_arc_x.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc_x.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然，使用长度为 &amp;ldquo;1,1&amp;rdquo; 的结果是一个完美的半圆，从一个点，到下一个点。在这种情况下，椭圆角不会有任何区别。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40   A 1,1  0  0,0 70,20&amp;#39;&amp;#34;&lt;/span&gt; path_hcircle.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_hcircle.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于以两点为中心的全圆，用&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40   A 1,1  0  0,0 70,20
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                 A 1,1  0  1,0 30,40  Z&amp;#39;&amp;#34;&lt;/span&gt; path_circle.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_circle.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;SVG 对 &amp;ldquo;弧线&amp;quot;的定义也声明，如果两个半径中的任何一个是0，那么就应该画一条直线。因此，任何半径为 &amp;ldquo;0,0&amp;rdquo; 的圆弧，都只是一条简单的直线圆弧&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40   A 0,0  0  0,0 70,20&amp;#39;&amp;#34;&lt;/span&gt; path_arc_line.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc_line.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你为弧线指定了一个非常大的半径，而没有为回程路径指定 &lt;code&gt;large sweep&lt;/code&gt;，你可以在两点之间创建该半径的透镜形状。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40   A 50,50  0  0,0 70,20
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                 A 50,50  0  0,0 30,40  Z&amp;#39;&amp;#34;&lt;/span&gt; path_lens.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_lens.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这种类型的弧线是一个关键特征。它可以让你很容易地把原本是直线的东西变成一条小而明显的曲线。&lt;/p&gt;
&lt;p&gt;例如，与其说是一个简单的三角形，不如说是一个&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 20,55  L 25,10  L 70,5 L 20,55 Z&amp;#39; &amp;#34;&lt;/span&gt;   triangle.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/triangle.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以用一个大半径的弧线代替每条线，让它们只是有轻微的曲线。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 20,55  A 100,100 0 0,0 25,10
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                A 100,100 0 0,0 70,5
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                A 100,100 0 0,0 20,55 Z&amp;#39; &amp;#34;&lt;/span&gt; triangle_curved.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/triangle_curved.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;线条的端点没有变化，所发生的只是每个 &amp;ldquo;L&amp;rdquo; 被一个弧线段代替。然而弧线的大小应该与线的长度成正比。由于我没有这样做，较长的对角线比其他两条线有更深的曲线。&lt;/p&gt;
&lt;p&gt;请记住，当调整对象的大小或比例时，你也应该将半径的比例与线的长度相同，这样曲线的大小就会相应地调整，所以弧线的比例也会正确。&lt;/p&gt;
&lt;p&gt;请注意，&lt;code&gt;sweep&lt;/code&gt; 标志可以控制曲线是向外凸起还是向内凸起，这取决于每个路径段的绘制方向(见上文)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 20,55  A 100,100 0 0,0 25,10
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                A 100,100 0 0,1 70,5
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                A 100,100 0 0,1 20,55 Z&amp;#39; &amp;#34;&lt;/span&gt; triangle_bulge.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/triangle_bulge.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;看起来 &amp;ldquo;静态&amp;quot;的直边三角形，现在看起来有点像充满风的帆。&lt;/p&gt;
&lt;p&gt;如果你真的想让线条完美的直，而不把它们转换回真正的线段，你可以通过使用弧线半径为零来关闭曲线。&lt;/p&gt;
&lt;p&gt;因此，弧线不仅适合生成椭圆和圆，而且对于绘制直线和微曲线段也很有用。它是一种非常通用的通用点到点的绘制路径。&lt;/p&gt;
&lt;p&gt;使用椭圆弧来生成分离的曲线段的一个简单的替代方法是使用&lt;a href=&#34;https://imagemagick.org/Usage/draw/#quad&#34;&gt;四元贝塞尔段&lt;/a&gt;来代替，主要的区别是使用一个单一的控制点，而不是一个圆形半径来定义弧线。这也允许您将弧线偏向线段的一端，但代价是难以生成对称的弧线。&lt;/p&gt;
&lt;p&gt;当然，您也可以通过使用这两种方法来进行 &lt;code&gt;mix-n-match&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;饼图示例&#34;&gt;饼图示例&lt;/h3&gt;
&lt;p&gt;为了完成对弧线的使用，让我们举个例子，使用为它们生成圆楔。当然，你可能需要使用一些外部的三角数学（你的高中数学有多好？）来确定所需的最终路径点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 140x130 xc:white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -fill red   -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 60,70 L   60,20   A 50,50 0 0,1 68.7,20.8 Z&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -fill green -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 60,70 L 68.7,20.8 A 50,50 0 0,1 77.1,23.0 Z&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -fill blue  -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 68,65 L 85.1,18.0 A 50,50 0 0,1  118,65   Z&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -fill gold  -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 60,70 L  110,70   A 50,50 0 1,1   60,20   Z&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -fill black -stroke none  -pointsize &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 57,19 &amp;#39;10&amp;#39; text 70,20 &amp;#39;10&amp;#39; text 90,19 &amp;#39;70&amp;#39; text 113,78 &amp;#39;270&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    piechart.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/piechart.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，所有的弧线都是画在 &lt;code&gt;line path&lt;/code&gt; 的左边，并有相应的标志（使用 &lt;code&gt;sweep&lt;/code&gt; 标志）。但如果弧线覆盖的角度大于180度，则需要设置 &lt;code&gt;large&lt;/code&gt; 标志。见上面例子中最后一个 &lt;code&gt;gold&lt;/code&gt; 组件。&lt;/p&gt;
&lt;p&gt;还要注意的是，你应该完整地画出每个部分，尽管这意味着你可能要画两次边界线。如果你不这样做，你很可能要么不会完全用颜色填充该部分，要么填充颜色会覆盖之前绘制的部分轮廓。&lt;/p&gt;
&lt;p&gt;避免重复绘制多条线的唯一方法是绘制所有填充区域，然后重复这样绘制轮廓。就是说你需要把所有的东西都画两遍，确保东西正确匹配。因此，将轮廓加倍可能是最简单的解决方案。&lt;/p&gt;
&lt;p&gt;立方贝塞尔曲线可以使用 &lt;code&gt;c&lt;/code&gt; 函数定义两个控制点，以及最终的终点。对于使用最后一个控制点的镜像的持续立方贝塞尔曲线（对于连续曲线），你可以使用 &lt;code&gt;s&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;下面是一个例子。由于这个函数的复杂性，我预先准备了一个画布，显示控制点的位置，以及最后一个控制点的 &lt;code&gt;assumed mirror&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Cubic Bezier:    C  control_1_x,y control_2_x,y  x,y&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Smooth &amp;#34; :       S  control_2_x,y  x,y&lt;/span&gt;

  convert path_cubic_canvas.gif  -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 10,30  C 10,4 50,4 50,30  S 90,55 90,30&amp;#39; &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          path_cubic.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_cubic.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;连接控制点和该路径段路径上的最终点的线（控制线）基本上定义了通过路径上该点的曲线方向。长的控制线会在该点产生一条更平滑的曲线，而短的控制线则会在该点产生一条更清晰的曲线。如果控制点与曲线的点相吻合（控制线长度为零），则曲线在该点有一个尖锐的不连续性，就像只用直线段一样。&lt;/p&gt;
&lt;p&gt;作为一个更实际的例子，下面的代码是从 &lt;a href=&#34;https://imagemagick.org/Usage/scripts/generate_logo&#34;&gt;IM 实例 Logo 生成器脚本&lt;/a&gt;中提取出来的，该脚本创建了 &lt;a href=&#34;https://imagemagick.org/Usage/images/logo.gif&#34;&gt;IM 实例 Logo&lt;/a&gt; 的曲线溅射区域。&lt;/p&gt;
&lt;p&gt;这个例子的棘手之处在于，我将我使用的立方贝塞尔路径字符串，转换为另一个路径，显示用于生成贝塞尔曲线的控制线。这让我可以看到曲线的控制线角度和长度，使得调整结果变得更加容易。只需要调整一组点就可以同时显示曲线和控制线，将错误控制在最小范围内。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;M 12,27  C 7,37  18,50 18,60  S  0,80 10,94
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          S 40,74 50,78  S 60,99 76,95  S 72,70 75,65
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          S 95,55 95,42  S 69,37 66,32  S 67,2  53,7
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          S 43,17 35,22  S 17,17 12,27  Z&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;c_ctrls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$curve&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;              sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;1s/\([0-9]\)  *\([0-9]\)/\1 M \2/;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;                   s/S/M/g; s/C/ /;&amp;#39;&lt;/span&gt; -&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
   convert -size 100x100 xc:white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke None  fill Green  path &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$curve&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke Red   fill None   path &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$c_ctrls&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           curvy_splash.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/curvy_splash.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你仔细观察图像，你会发现曲线的起点和终点有两条方向相反的控制线。对于一个封闭的连续路径来说，开始和结束的控制线应该在相同的角度（只是在镜面方向），当然也应该是相同的长度。这一点很重要，因为很容易弄错。&lt;/p&gt;
&lt;p&gt;沿着曲线的所有其他点只有一个控制点/线，它与曲线的绘制方向相反。该线段越长，曲线在该控制点处的 &lt;code&gt;sharp&lt;/code&gt; 越低，长度为零则产生一个 &lt;code&gt;point&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s&lt;/code&gt; 函数在内部根据前一段的数据生成下一段的镜像控制点/线，从而产生曲线的平滑延续。&lt;/p&gt;
&lt;p&gt;关于这个路径函数的更多例子，请看&lt;a href=&#34;http://www.w3.org/TR/SVG/paths.html#PathDataCubicBezierCommands&#34;&gt;《SVG：立方贝塞尔曲线命令》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;手动生成贝塞尔曲线是比较直接的，不需要任何花哨的 GUI 工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先定义所有你想让曲线经过的坐标点，在列表的最后重复起始坐标。&lt;/li&gt;
&lt;li&gt;现在将这个列表扩大，将所有的 &lt;code&gt;x,y&lt;/code&gt; 坐标点加倍成对，并在每对坐标点前添加一个 &lt;code&gt;s&lt;/code&gt;（Smooth Cubic）函数。每对中的第一个数字是控制点，连接到第二个数字代表曲线上的点。然而第一个点对却把这一点反过来了，第一个点是曲线的起点，第二个点代表第一个也是唯一一个反转的控制点。&lt;/li&gt;
&lt;li&gt;将第一对坐标的函数字母由 &amp;lsquo;S&amp;rsquo; 改为 &amp;lsquo;M&amp;rsquo;，然后在这对坐标之间加一个 &amp;lsquo;C&amp;rsquo;。最后将第二对坐标的 &amp;lsquo;S&amp;rsquo; 去掉，完成初始的立方体（&amp;lsquo;C&amp;rsquo;）函数。&lt;/li&gt;
&lt;li&gt;通过添加最后的 &amp;lsquo;Z&amp;rsquo; 来完成路径，关闭曲线。&lt;/li&gt;
&lt;li&gt;请看上面的示例序列，它应该是怎样的。&lt;/li&gt;
&lt;li&gt;此时您可以测试绘制您的路径。由于所有的控制线长度为零，所以路径将只由直线段组成。&lt;/li&gt;
&lt;li&gt;现在您需要做的就是慢慢地、小心地调整控制线段的位置（每个 &amp;ldquo;S&amp;rdquo; 对的第一个坐标），以得到您想要的最终曲线。不要把控制线做得太长，或者方向不对，否则你会得到一条看起来非常滑稽的曲线。&lt;/li&gt;
&lt;li&gt;为了帮助查看你的变化和发现错误，请使用上面的转换 &amp;ldquo;sed&amp;rdquo; 命令来绘制路径控制点和曲线控制点之间的控制线。但是请注意，零长度的控制线是不可见的，但是由于lin会产生一个尖锐的点，所以位置应该很明显。&lt;/li&gt;
&lt;li&gt;最后，确保 &amp;ldquo;C&amp;rdquo; 之后的第一条控制点/线与终点控制点/线的位置完全相反。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交互式曲线的生成也可以通过使用一些矢量图形编辑器来实现。&lt;/p&gt;
&lt;p&gt;例如 Luis Guerra 报告说，&amp;ldquo;Inkscape&amp;rdquo; 生成的贝塞尔曲线可以使用 &amp;ldquo;Edit -&amp;gt; XML Editor&amp;rdquo; 功能，然后选择你想要控制点的路径或形状。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你知道有什么其他的方法可以用GUI工具来提取贝塞尔曲线（在曲线上每个点给出两个或一个控制点）。或者是一些其他的技术来生成这样的曲线？请发邮件给我! 我很乐意听到它。你将会像其他人一样，被记入该技术的名下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二次方贝塞尔函数是立方贝塞尔函数的简化，当两个控制点合并成一个控制点时。同样，你可以用 &amp;lsquo;Q&amp;rsquo; 函数开始曲线，然后用 &amp;lsquo;T&amp;rsquo; 函数继续曲线，镜像最后一个控制点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#  Quadratic Bezier:  Q  control_x,y  x,y&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#  Smooth &amp;#34; :         T  x,y&lt;/span&gt;

  convert path_quad_canvas.gif  -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 10,30   Q 20,4 50,30   T 90,30&amp;#39; &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          path_quad.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_quad.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;但我要提醒您，&amp;ldquo;T&amp;rdquo; 继续函数只适用于连接间距相等的点的路径。我不推荐使用它。&lt;/p&gt;
&lt;p&gt;二次方曲线的优点是可以替代&lt;a href=&#34;https://imagemagick.org/Usage/draw/#arcs&#34;&gt;椭圆弧&lt;/a&gt;，因为它使用的是实际的位置，而不是弧线的半径。它也可以使弧线偏向于一端而不是另一端，这在使用&lt;a href=&#34;https://imagemagick.org/Usage/draw/#arcs&#34;&gt;椭圆弧&lt;/a&gt;时并不实用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 20,55  Q 30,32 25,10
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                Q 50,1 70,5
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                Q 50,45 20,55 Z&amp;#39; &amp;#34;&lt;/span&gt; triangle_bulge_2.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/triangle_bulge_2.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这种情况下，弧线不是那么均匀，你得到的东西就像一个倒立的鲨鱼鳍，而不是一个帆。&lt;/p&gt;
&lt;p&gt;请记住四边形弧线是抛物线，而椭圆弧线基本上是生成圆弧线段。这可能是决定你应该使用哪种类型的弧线段的关键。&lt;/p&gt;
&lt;p&gt;有关此路径功能的更多例子，请参见：&lt;a href=&#34;http://www.w3.org/TR/SVG/paths.html#PathDataQuadraticBezierCommands&#34;&gt;SVG: Quadratic Bezier Curve Commands&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;绘图表面的变形&#34;&gt;绘图表面的变形&lt;/h3&gt;
&lt;p&gt;在这些能力之上，绘制对象的绘图表面可以以各种方式变形，让你做一些令人惊奇的事情。&lt;/p&gt;
&lt;p&gt;首先，你可以应用一些通用的绘图表面修改，比如&amp;hellip; &amp;ldquo;translate&amp;rdquo;、&amp;ldquo;rotate&amp;rdquo;、&amp;ldquo;scale&amp;rdquo;、&amp;ldquo;skewX&amp;rdquo;、&amp;ldquo;skewY&amp;rdquo; 和 &amp;ldquo;affine&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;例如，给定一个线条的 &lt;code&gt;path&lt;/code&gt;，我们可以 &lt;code&gt;translate&lt;/code&gt; 绘图表面的原点或0,0点到另一个位置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;translate 50,30
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 3,3 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;  transform_translate.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/transform_translate.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，&amp;ldquo;0,0&amp;rdquo; 或绘图区域的原点现在以图像为中心，尽管Y轴在图像的顶部仍然是负数，在底部仍然是正数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rotate&lt;/code&gt; 操作将旋转绘图表面，所以以后在该表面上绘制的任何东西都将被旋转绘制。当然，它会围绕转换后的原点进行旋转，所以最好同时使用这两个变换运算符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;translate 50,30    rotate -30
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;  transform_rotate.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/transform_rotate.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scale&lt;/code&gt; 将放大和缩小原点周围的绘图面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;translate 50,30    scale 1.5,1.5
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;  transform_scale.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/transform_scale.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个常见的 &lt;code&gt;scale&lt;/code&gt; 用法是将Y轴翻转，使Y的正值向上。当然原点也应该移到中心，或者左下角，以保持秩序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;translate 50,30    scale 1,-1
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;    transform_flip.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/transform_flip.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后，&amp;ldquo;skewX&amp;rdquo; 和 &amp;ldquo;skewY&amp;rdquo; 在X和Y方向上对图像进行剪切。例如，这里我们使用 &amp;ldquo;skewX&amp;rdquo; 给图像的垂直Y轴一个倾斜。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;translate 50,30   skewX 20
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;    transform_skewY.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/transform_skewY.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这些操作符在 MVG &lt;code&gt;-draw&lt;/code&gt; 字符串之外有对应的操作符，供一般使用。但是这些命令行版本是运算符，并且立即应用于内存中已经存在的图像，而不是应用于尚未绘制的矢量对象的绘制表面。更多细节请看扭曲图像。&lt;/p&gt;
&lt;h3 id=&#34;绘制表面的平移变形&#34;&gt;绘制表面的平移变形&lt;/h3&gt;
&lt;p&gt;上述所有五种画布变换都可以组合成一个通用的 Affine Matrix Operator，可以使用 MVG 原语 &amp;ldquo;affine&amp;rdquo;，也可以在调用 &lt;code&gt;-draw&lt;/code&gt; 之前使用 &lt;code&gt;-affine&lt;/code&gt; 设置 Affine 变换。&lt;/p&gt;
&lt;p&gt;Affine 变换使用一组 &amp;ldquo;Matrix Coefficients&amp;rdquo;，它定义了如何将你给出的坐标修改为实际的绘图坐标。&lt;/p&gt;
&lt;p&gt;关于这些 &amp;ldquo;coefficients&amp;rdquo; 如何工作的更多细节，请参阅 &lt;a href=&#34;https://imagemagick.org/Usage/distorts/affine/&#34;&gt;Affine Matrix Transforms&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;例如&amp;hellip; 要设置一个相对于对象绘制时的中心原点&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;affine 1,0,0,1,50,30
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;  affine_null.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/affine_null.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;翻转图像&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;affine 1,0,0,-1,50,30
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt; affine_flip.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/affine_flip.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;绕原点旋转30度&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;affine .866,-.5,.5,.866,50,30
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;    affine_rot.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/affine_rot.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于更复杂的仿射变换，您可以使用为此目的创建的&lt;a href=&#34;https://imagemagick.org/Usage/distorts/affine/#affine_scripts&#34;&gt;仿射辅助脚本&lt;/a&gt;。这些脚本将诸如旋转角度和中心点之类的东西转换为 Affine 坐标，你可以直接在 &lt;code&gt;-draw affine&lt;/code&gt; 或 &lt;code&gt;-affine&lt;/code&gt; 设置中使用。&lt;/p&gt;
&lt;h3 id=&#34;推弹上下文&#34;&gt;推/弹上下文&lt;/h3&gt;
&lt;p&gt;一些 MVG 原语实际上依赖于这些变换的使用才能正确使用。例如，&lt;a href=&#34;https://imagemagick.org/Usage/draw/#primitive_circle&#34;&gt;椭圆原语&lt;/a&gt;只能用正交对齐的轴直接指定。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;ellipse 50,30 30,15 0,360&amp;#34;&lt;/span&gt;   ellipse_orthogonal.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/ellipse_orthogonal.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而，通过使用&lt;a href=&#34;https://imagemagick.org/Usage/draw/#transform&#34;&gt;绘图变换&lt;/a&gt;，我们可以很容易地给椭圆添加一个&amp;quot;旋转角&amp;rdquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;push graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 translate 50,30   rotate 30
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 ellipse 0,0 30,15 0,360
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 pop graphic-context&amp;#34;&lt;/span&gt;       ellipse_rotated.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/ellipse_rotated.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，椭圆的 &lt;code&gt;center&lt;/code&gt;(旋转点)在应用旋转之前首先被转换。然后，&lt;code&gt;ellipse&lt;/code&gt; 在 &amp;ldquo;0,0&amp;rdquo; 处的转换位置被绘制。&lt;/p&gt;
&lt;p&gt;上面还显示了两个新的 MVG 绘图原语。&amp;lsquo;push graphic-context&amp;rsquo; 和 &amp;lsquo;pop graphic-context&amp;rsquo;。在上面的例子中，并不是严格意义上的需要，但在进行主要的绘图转换时，建议使用这两个原语。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;push&lt;/code&gt; 和 &lt;code&gt;pop&lt;/code&gt; 原语的作用是保存当前的绘图状态或 &amp;ldquo;graphic-context&amp;rdquo;，然后再次恢复。在这两个原语之间更改的任何绘图设置都会被遗忘。这包括曲面变形（如 &amp;ldquo;平移 &amp;ldquo;和 &amp;ldquo;旋转&amp;rdquo;）、颜色设置 &lt;code&gt;fill&lt;/code&gt; 和 &lt;code&gt;stroke&lt;/code&gt; 或任何其他修改了绘图 &lt;code&gt;state&lt;/code&gt; 的设置。&lt;/p&gt;
&lt;p&gt;这些原语使您可以轻松地绘制具有许多变换的非常复杂的对象，然后将事物恢复到更 &amp;ldquo;正常&amp;quot;的状态，以便以后进行绘制操作。您可以在下面的&lt;a href=&#34;https://imagemagick.org/Usage/draw/#arrows&#34;&gt;绘制箭头&lt;/a&gt;中看到更实用的演示。&lt;/p&gt;
&lt;h3 id=&#34;推弹特殊对象&#34;&gt;推/弹特殊对象&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/img_www/const_barrier.gif&#34; alt=&#34;img&#34;&gt;  建设中 &lt;img src=&#34;https://imagemagick.org/Usage/img_www/const_hole.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;更多专门用于 MVG 处理 SVG 格式的设置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    font-family   font-stretch   font-style   font-weight
    encoding &#39;UTF-8&#39;

    push defs

      push gradient &#39;def_name&#39; linear X1,Y1 X2,Y2
        stop-color &#39;color&#39; where
        stop-color &#39;color&#39; where
          # where is a point between the two pixels given (0 = X1,Y1  1= X2,Y2)
        gradient-units &#39;objectBoundingBox|userSpaceOnUse&#39;
        affine ....
      pop gradient

      push gradient &#39;def_name&#39; radial CX,CY FX,FY R
        # Here CX,CY is the center of the radial gradient of radius R
        # the FX,FY is the focal, and is usually the same a CX,CY
        # unless you are trying to warp the gradient in a specific direction
        stop-color &#39;color&#39; where
        ...
      pop gradient

    pop defs

    push graphic-context
      fill &#39;url(#def_name)&#39;
      ... draw things here ...
    pop graphic-context
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例子见 Florent Monnier 的开发网站&amp;hellip;  &lt;a href=&#34;http://www.linux-nantes.fr.eu.org/~fmonnier/OCaml/MVG/&#34;&gt;http://www.linux-nantes.fr.eu.org/~fmonnier/OCaml/MVG/&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;阅读-mvg-文件&#34;&gt;阅读 MVG 文件&lt;/h3&gt;
&lt;p&gt;正如你在上面的例子中所看到的，MVG 的 &lt;code&gt;-draw&lt;/code&gt; 参数可以变得很长。事实上，SVG 到 MVG 的转换可以产生一些非常长的 MVG 绘图参数（见下文）。&lt;/p&gt;
&lt;p&gt;然而，IM 的一般命令行界面允许您通过使用 &lt;code&gt;&amp;quot;@filename&amp;quot;&lt;/code&gt; 参数从文件中读取任何字符串参数。这很方便，因为这意味着你可以从一个单独的文件中读取非常长和复杂的MVG绘图命令。&lt;/p&gt;
&lt;p&gt;例如，如果我将 MVG 操作放入一个名为 &amp;ldquo;draw_circles.mvg&amp;rdquo; 的文件中，那么我就可以像这样绘制&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue  -draw @mvg_circles.mvg  mvg_draw.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/mvg_circles.mvg.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/mvg_draw.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;不仅如此，ImageMagick 还懂得直接读取 &amp;ldquo;MVG:&amp;rdquo; 图像文件格式，让你可以更直接地绘制此类命令。然而，除非 MVG文 件定义了一个画布，否则你可能需要指定初始画布（ &lt;code&gt;-size&lt;/code&gt; 和&amp;rdquo;-background&amp;rdquo;）来绘制。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60  -background limegreen  mvg_circles.mvg  mvg_file.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/mvg_circles.mvg.gif&#34; alt=&#34;img&#34;&gt; &lt;img src=&#34;https://imagemagick.org/Usage/img_www/right.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/mvg_file.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以通过在 MVG 文件中添加一个 &amp;ldquo;viewbox&amp;rdquo;，并添加适当的背景色填充绘制，将初始画布设置移动到 MVG 图像中。这样就完成了 MVG 图像文件作为一个完整的图像定义。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert    mvg_circles2.mvg    mvg_image.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/mvg_circles2.mvg.gif&#34; alt=&#34;img&#34;&gt; &lt;img src=&#34;https://imagemagick.org/Usage/img_www/right.gif&#34; alt=&#34;img&#34;&gt; &lt;img src=&#34;https://imagemagick.org/Usage/draw/mvg_image.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前只有一种方法可以从 MVG 参数字符串中读取外部 MVG 文件，那就是使用 &amp;ldquo;图像 &amp;ldquo;绘图原语。遗憾的是，这将 MVG 的 include 转换为光栅图像，然后再将该图像覆盖到绘图表面。
换句话说，目前还没有MVG的 &amp;ldquo;include&amp;quot;功能。 :-(&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/img_www/const_barrier.gif&#34; alt=&#34;img&#34;&gt;  建设中 &lt;img src=&#34;https://imagemagick.org/Usage/img_www/const_hole.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;您可以生成IM的低级绘制操作，使用 `&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?render&#34;&gt;+render&lt;/a&gt; 来记录它们。&lt;/p&gt;
&lt;p&gt;当你再给 &lt;code&gt;-render&lt;/code&gt; 设置/操作时，IM将立即绘制这些保存的操作。&lt;/p&gt;
&lt;p&gt;奇怪的是，仅仅输出到 &amp;ldquo;MVG&amp;rdquo; 文件似乎也能做到这一点&amp;hellip;&amp;hellip;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;     convert  ...   -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;....&amp;#39;&lt;/span&gt;  draw_commands.mvg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：如果你在输出 MVG 格式文件时画了一条曲线，文件中会列出以下内容。曲线是一系列的短线段，而不是原始曲线。&lt;/p&gt;
&lt;p&gt;当然您也可以完全使用更通用的 SVG 格式。参见下面的 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/draw/#svg&#34;&gt;SVG 格式处理&lt;/a&gt;&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;mvg-阿尔法构成&#34;&gt;MVG 阿尔法构成&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/img_www/const_barrier.gif&#34; alt=&#34;img&#34;&gt;  建设中 &lt;img src=&#34;https://imagemagick.org/Usage/img_www/const_hole.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;我没有看到任何使用 Alpha 构图的情况（除了 &lt;code&gt;painters&lt;/code&gt; 的算法之外）。基本上是一种 &amp;ldquo;over&amp;rdquo; alpha 合成）来绘制对象。&lt;/p&gt;
&lt;p&gt;然而，这并不是说不能这样做。&lt;/p&gt;
&lt;p&gt;如果你喜欢将你的矩形、椭圆、圆形或其他物体用不同的阿尔法成分（如 &amp;ldquo;DstOver&amp;rdquo;，这是一个类似于 Under 的成分），然后在空白的透明画布上画出你的人物，同样的构图，并将其合成到您的图像上。&lt;/p&gt;
&lt;p&gt;然而，由于 SVG 允许您使用 alpha 合成来绘制文本和其他的图像，因此，您可以使用 SVG 来绘制图像项目到图像上，我想这将是一个未来的补充。&lt;/p&gt;
&lt;p&gt;敬请期待&lt;/p&gt;
&lt;h3 id=&#34;绘制符号&#34;&gt;绘制符号&lt;/h3&gt;
&lt;p&gt;有时你在图像上有一组点，你想在那里绘制参考符号，如十字、圆圈等。遗憾的是，目前IM还没有可以轻松绘制这类符号的命令，但只要稍加努力，你就可以绘制这类符号。&lt;/p&gt;
&lt;h4 id=&#34;符号绘制技巧&#34;&gt;符号绘制技巧&lt;/h4&gt;
&lt;p&gt;在给定的位置列表中绘制多个符号的诀窍是使用 shell 脚本或任何你正在使用的 API 生成 MVG 绘图命令，以便将给定的点集转化为适当的绘图命令集。
例如，我在这里将一条线上的点转换为每一个点的&amp;quot;加号&amp;rdquo;&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Define a string of X and Y coordinates&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# comma between values, space between coordinates.&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;6.6,7.7  25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3  92.5,66.6&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# convert each point into a draw command for a cross (using &amp;#39;awk&amp;#39;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# the &amp;#39;tr&amp;#39; converts spaces into &amp;#39;newlines&amp;#39; (one point per line).&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;crosses&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tr -s &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;\012&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;     awk -F, &lt;span class=&#34;s1&#34;&gt;&amp;#39;{ print &amp;#34;line &amp;#34; $1-3 &amp;#34;,&amp;#34; $2 &amp;#34; &amp;#34; $1+3 &amp;#34;,&amp;#34; $2 ;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;                print &amp;#34;line &amp;#34; $1 &amp;#34;,&amp;#34; $2-3 &amp;#34; &amp;#34; $1 &amp;#34;,&amp;#34; $2+3 ; }&amp;#39;&lt;/span&gt; -&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# draw a red line between the points, and blue crosses on the points.&lt;/span&gt;
  convert -size 100x100 xc:white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;fill none stroke red   polyline &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;fill none stroke blue  &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$crosses&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          points_plus.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_plus.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面使用 &amp;ldquo;tr&amp;rdquo; 将每个点（两个数字）分成每条线上的一个点，然后使用 &amp;ldquo;awk&amp;rdquo; 进行所有数学计算，在给定的点上绘制&amp;quot;加号&amp;rdquo;。你可以使用任何你喜欢的东西，因为我只是在输入点列表上应用了一种文本宏扩展的形式。几乎所有的编程语言都可以做到这一点。对于上面的shell脚本案例，我只是发现 &amp;ldquo;awk&amp;rdquo; 是最简单、最快的手段。&lt;/p&gt;
&lt;p&gt;其实你甚至可以使用 Imagemagick 本身的 &amp;ldquo;convert&amp;rdquo; 格式选项来进行这种 &amp;ldquo;macro&amp;rdquo; 的扩展&amp;hellip;比如这里我用它来计算圆周上的一个点，对于这个&amp;quot;点符号&amp;rdquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Define a string of X and Y coordinates&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# comma between values, space between coordinates.&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;6.6,7.7  25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3  92.5,66.6&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# circle radius (or symbol size) to draw around each point.&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;radius&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3.5

  &lt;span class=&#34;c1&#34;&gt;# convert each point into a draw command for a cross&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# In this case, points are space separated by the shell&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;circles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
             &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -d, -f1&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -d, -f2&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;# use IM to do some floating point math, EG:  y2=$y+$radius&lt;/span&gt;
             &lt;span class=&#34;nv&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;convert xc: -format &lt;span class=&#34;s1&#34;&gt;&amp;#39;%[fx:&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$radius&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt; info:&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;circle &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Draw a red line between the points, and blue circles on the points.&lt;/span&gt;
  convert -size 100x100 xc:white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;fill none stroke red   polyline &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;fill none stroke blue  &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$circles&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          points_circle.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_circle.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在，您生成的绘制字符串可能会变得相当长，并且可能会开始导致您的最终命令的长度问题。所以，与其将点转换成长字符串，然后我们在命令行上传递给 IM，不如将绘制命令以文件的形式管道化给 IM。&lt;/p&gt;
&lt;p&gt;我这次也使用了 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#paths&#34;&gt;SVG 路径&lt;/a&gt;的绘制方法来代替 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#primitives&#34;&gt;Draw Primitive&lt;/a&gt; 的绘制方法。另外我生成的符号是每个点周围的三角形。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Define a string of X and Y coordinates&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# comma between values, space between coordinates.&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;6.6,7.7  25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3  92.5,66.6&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# convert each point into a draw commands to draw a triangle&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
     &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;path &amp;#39;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;  m 0,-5 -4,+8 +8,0 -4,-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    convert -size 100x100 xc:white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill none -stroke red  -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;path &amp;#39;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill none -stroke blue -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;@-&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          points_tri.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_tri.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imagemagick.org/Usage/draw/#paths&#34;&gt;SVG 路径&lt;/a&gt;实际上使这一点变得更容易，通过允许相对像素移动，允许你设计符号，所以它只需要一个单一的初始绝对移动&amp;rsquo;M&amp;rsquo;，然后再给出&#39;移动&#39;和&#39;线&#39;的序列来绘制符号。正因为如此，你实际上根本不需要任何浮点计算，因为IM draw会完成所需的定位数学。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相对移动SVG路径项&amp;rsquo;m&#39;在IM v6.4.3-5之前被破坏了。如果你的IM比这更老，上面（和下一个）的例子可能什么也画不出来。您可以通过将上面的相对移动&amp;rsquo;m&#39;替换为适当的相对线序列&amp;rsquo;l&#39;来解决旧版本的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在你可以更进一步，将一个完整的MVG文件，包括画布规格，直接作为一个绘画命令的流水线输入到IM中。这次让我们做一个&#39;十字&amp;rsquo;，这和上面第一个&#39;加&#39;的例子类似，需要大量的计算。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Define a string of X and Y coordinates&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# comma between values, space between coordinates.&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;6.6,7.7  25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3  92.5,66.6&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Generate a MVG file for IM to draw all components&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;viewbox 0 0 100 100   fill white  rectangle 0,0 100 100&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;fill none stroke red   path &amp;#39;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill none stroke blue  path &amp;#39;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;  M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;  m -2,-2 +4,+4  m -4,0 +4,-4&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; convert mvg:- points_cross.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_cross.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这使用了特殊的shell编程技术，在shell括号中 &amp;ldquo;echo&amp;rdquo; 的任何东西都将作为MVG文件被输入到最终的&amp;quot;转换&amp;quot;命令中。第一个 &amp;ldquo;echo&amp;rdquo; 定义并填充图像的绘图画布，而 &amp;ldquo;while&amp;rdquo; 循环则将每个 &amp;ldquo;点&amp;rdquo; 转换为一个给定半径的圆。&lt;/p&gt;
&lt;p&gt;这种方法的优点是，你不会受到任何字符串的限制，而使用其他两种方法可能会受到限制。&lt;/p&gt;
&lt;p&gt;其他你可以生成的符号包括方框、钻石、错误条等。&lt;/p&gt;
&lt;p&gt;也请参见下面的&amp;quot;绘制圆圈&amp;rdquo;，了解其他圆圈方法，包括不计算相对 &amp;ldquo;路径&amp;quot;的圆圈绘制。&lt;/p&gt;
&lt;h4 id=&#34;绘制符号的替代方法&#34;&gt;绘制符号的替代方法&lt;/h4&gt;
&lt;p&gt;除了直接绘制符号外，还有其他的方法可以将符号添加到图像中。&lt;/p&gt;
&lt;h5 id=&#34;符号字体&#34;&gt;符号字体&lt;/h5&gt;
&lt;p&gt;您可以从 &lt;a href=&#34;https://imagemagick.org/Usage/text/#symbol&#34;&gt;Symbol Font&lt;/a&gt; 中提取符号，并将其保存为一个小位图。你也可以使用小的预定义但色彩丰富的图像来做这件事。&lt;/p&gt;
&lt;p&gt;然而这样做可能会出现问题，无法准确定位字体相对于特定像素的位置。也就是说这不是一个非常精确的技术。但是你可以在任何像素位置组成任何图像。例如这些符号是从一些字体中提取出来的，用于这些示例页面的具体使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;=   =&amp;gt;   x   +   +   +   o   o   o   o
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在&lt;a href=&#34;https://imagemagick.org/Usage/layers/#composite&#34;&gt;分层图像&lt;/a&gt;一节中给出了将图像合成到大背景上的例子。然而，循环的方法可能更有用，例如在&lt;a href=&#34;https://imagemagick.org/Usage/layers/#layer_prog&#34;&gt;分层图像&lt;/a&gt;的程序化定位中给出了。&lt;/p&gt;
&lt;p&gt;未来：使用坐标对图像进行分层的例子&lt;/p&gt;
&lt;h4 id=&#34;形态学&#34;&gt;形态学&lt;/h4&gt;
&lt;p&gt;另一种选择是使用&lt;a href=&#34;https://imagemagick.org/Usage/morphology/#intro&#34;&gt;形态学&lt;/a&gt;，使用特殊的&amp;quot;形状&amp;quot;内核，如 &amp;ldquo;磁盘&amp;rdquo;、&amp;ldquo;环形 &amp;ldquo;和 &amp;ldquo;加&amp;rdquo;，甚至是你自己的用户定义内核，来 &amp;ldquo;稀释&amp;quot;单个像素。&lt;/p&gt;
&lt;p&gt;例如&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 80x80 xc:black -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;point 20,15 point 55,30 point 40,60&amp;#39;&lt;/span&gt;  points_pixels.gif

  convert points_pixels.gif -morphology Dilate Ring    points_rings.gif

  convert points_pixels.gif -morphology Dilate Plus:4  points_pluses.gif

  convert points_pixels.gif -morphology Dilate Cross:3 points_crosses.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_pixels.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/img_www/right.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_rings.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_pluses.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_crosses.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后可以通过使用 &lt;a href=&#34;https://imagemagick.org/Usage/masking/#alpha_shape&#34;&gt;Alpha Shape Operator&lt;/a&gt; 将结果直接转换为彩色叠加。&lt;/p&gt;
&lt;p&gt;这样做的最大好处是，你其实不需要知道每个符号的单独位置。或者有多少个符号。但这也可能是一个缺点。一个主要的缺点是，位置只在整数位置。你不能使用浮点 &amp;ldquo;子像素&amp;quot;定位来&amp;quot;绘制&amp;rdquo;。&lt;/p&gt;
&lt;h4 id=&#34;卷积&#34;&gt;卷积&lt;/h4&gt;
&lt;p&gt;一个几乎相同的技术是使用 &lt;a href=&#34;https://imagemagick.org/Usage/convolve/#convolve&#34;&gt;Convolve&lt;/a&gt;，使用专门设计的内核，它允许你设置不同的灰度，而不仅仅是一个简单的开/关结果，如上所述。&lt;/p&gt;
&lt;p&gt;通过使用不同的&lt;a href=&#34;https://imagemagick.org/Usage/morphology/#user&#34;&gt;用户定义内核&lt;/a&gt;，为图像的每一个通道（红、绿、蓝和阿尔法），甚至可以从每个像素坐标创建多色符号。&lt;/p&gt;
&lt;p&gt;为此，我使用了一个我写的特殊脚本 &lt;a href=&#34;https://imagemagick.org/Usage/scripts/image2kernel&#34;&gt;image2kernel&lt;/a&gt; 来将彩色图像（见右图）转换为每个通道的独立浮点卷积核。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  image2kernel -q marker.png marker.dat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/marker.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这将生成四个文件，比如 &lt;a href=&#34;https://imagemagick.org/Usage/draw/marker_R.dat&#34;&gt;marker_R.dat&lt;/a&gt;，每个通道都有一个非常小的输入图像，这是&lt;a href=&#34;https://imagemagick.org/Usage/morphology/#user&#34;&gt;用户定义&lt;/a&gt;的图像表示（原点在图像中心）。&lt;/p&gt;
&lt;p&gt;现在使用这些内核数据文件，我们可以将这些单点在透明的背景上 &lt;a href=&#34;https://imagemagick.org/Usage/convolve/#convolve&#34;&gt;Convolve&lt;/a&gt; 成我们彩色的标记图像。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert points_pixels.gif -alpha off &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -clone &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -morphology Convolve @marker_R.dat &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -clone &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -morphology Convolve @marker_G.dat &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -clone &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -morphology Convolve @marker_B.dat &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -clone &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -morphology Convolve @marker_A.dat &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -delete &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -channel RGBA -combine point_markers.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_pixels.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/img_www/right.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/point_markers.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在IM v6.7.6-9之前，Combine Operator 要求图像的透明度通道以 &amp;ldquo;哑光&amp;quot;值而不是alpha值的形式给出，因此，由此产生的alpha通道需要被否定。EG:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  ... &lt;span class=&#34;s2&#34;&gt;&amp;#34;`cat marker_A.dat`&amp;#34;&lt;/span&gt; -negate &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只能使用小图像，像素点要足够分散，符号不要重叠。这是因为 &lt;a href=&#34;https://imagemagick.org/Usage/convolve/#convolve&#34;&gt;Convolve&lt;/a&gt; 会将重叠的区域加在一起，使其比预期的更亮。&lt;/p&gt;
&lt;p&gt;以上内容已被转换成UNIX shell脚本 &lt;a href=&#34;https://imagemagick.org/Usage/scripts/convolve_image&#34;&gt;convolve_image&lt;/a&gt;，以方便使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convolve_image  points_pixels.gif marker.png   point_markers.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个技术源于IM论坛上的一个讨论-&lt;a href=&#34;https://imagemagick.org/Usage/forum_link.cgi?t=17259&amp;amp;p=64696&#34;&gt;IM 的有趣体验&lt;/a&gt;。用户希望在足球场的背景图上放置小人，让他们的位置在图片中拼出一个人的名字。&lt;/p&gt;
&lt;h4 id=&#34;分层&#34;&gt;分层&lt;/h4&gt;
&lt;p&gt;一种不同的技术，如&lt;a href=&#34;https://imagemagick.org/Usage/layers/&#34;&gt;图像层&lt;/a&gt;，使用你从源图像中提取的像素列表进行定位，可能是更好的方法。你可以先叠加更远的符号图像，然后再叠加前景图像，你可以通过编程选择或随机选择什么符号替换什么点。&lt;/p&gt;
&lt;p&gt;关于这个例子，请看&lt;a href=&#34;https://imagemagick.org/Usage/layers/#layer_pins&#34;&gt;地图中的图钉&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;绘制圆圈&#34;&gt;绘制圆圈&lt;/h4&gt;
&lt;p&gt;绘制选项为您提供了许多方法来完成一些非常基本的工作。绘制圆。
例如，您可以在圆周上的任何一点上画一个圆，因此您需要计算一个中心点和一个半径为25像素的第二点。因此，您需要计算一个中心点和第二个点，这个点的半径（例如25像素）离第一个点的距离。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:  -stroke Firebrick  -fill tomato  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;circle 50,30 50,55&amp;#39;&lt;/span&gt;    circle_circle.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fred Weinhaus指出，通过使用平移，你可以消除计算圆边坐标的需要，而直接给出半径即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:  -stroke SeaGreen  -fill PaleGreen  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;translate 50,30 circle 0,0 25,0&amp;#39;&lt;/span&gt;    circle_circle_trans.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是当绘制多个圆时，上述操作需要对每个圆进行单独的 &lt;code&gt;-draw&lt;/code&gt; 操作，或者使用Context Pushing。
使用椭圆可以直接指定半径为轴长&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:  -stroke Sienna  -fill Wheat  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;ellipse 50,30 25,25 0,360&amp;#39;&lt;/span&gt;    circle_ellipse.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你也可以用 &amp;ldquo;stroke-lineecap round &amp;ldquo;画一条非常非常短的线来生成一个圆。描边的宽度可以设置圆的直径。注意线条必须有一定的长度（无论多小），否则画不出任何东西。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:  -stroke Blue  -strokewidth &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;stroke-linecap round line 50,30 50,30.0001&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          circle_line.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种技术，不幸的是不能勾勒出生成的圆，但对于覆盖大面积的区域，大笔触宽度是有用的。请看下面一些简单的例子。
这种方法利用了SVG路径的绘制方法，所以可以在不需要计算任何额外坐标的情况下绘制圆形。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:  -stroke Blue  -fill DodgerBlue  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 50,30  m 0,25  a 1,1 0 0,0 0,-50  a 1,1 0 1,0 0,50&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          circle_path.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只有最初的绝对移动&amp;rsquo;M&#39;是用来定义中心的，接下来的路径组件中的&amp;rsquo;25&#39;和&amp;rsquo;50&#39;是定义相对于这个中心的圆的半径和直径。
在IM v6.4.3-5之前，相对移动SVG路径项&amp;rsquo;m&#39;是被破坏的。 如果您的IM比这更早，圆可能只显示为一个像素。您可以通过将上面的&amp;rsquo;m&#39;替换为&amp;rsquo;l&#39;来修复旧版本的问题。
Fred Weinhaus添加了以下bezier圆的方法。它非常接近真实的圆（虽然不精确），并且需要进行浮点计算。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;25&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;cx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;50&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;cy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;30&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;25&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;x2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;75&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# = cx ± radius&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-3.25&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;63.25&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# = cy ± radius*1.275&lt;/span&gt;

  convert -size 100x60 xc:  -stroke Purple  -fill Violet  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;bezier &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cy&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cy&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;bezier &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cy&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cy&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          circle_bezier.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果画一个精确的圆并不重要，你可以使用这个4 Bezier段SVG路径，它只使用圆的X和Y边界进行计算。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;25&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;cx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;50&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;cy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;30&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;25&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;x2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;75&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# X bounds = cx ± radius&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;5&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;55&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# Y bounds = cy ± radius&lt;/span&gt;

  convert -size 100x60 xc:  -stroke Tomato  -fill Gold  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;     -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;path &amp;#39;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cx&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; Q &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cy&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; T &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cx&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cy&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cx&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; z&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;     circle_bezier_path.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你喜欢一个完全相对于中心起点绘制的，你可以使用这种技术。只使用半径值，使其生成简单，只使用API中的字符串函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:  -stroke Orange  -fill LemonChiffon  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;     -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 50,30  m 0,25  q 25,0 25,-25  t -25,-25  -25,25  25,25 z&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;     circle_bezier_path_rel.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你能想到其他画圆的方法吗？
绘制箭头&amp;ndash;定位、旋转和缩放符号。&lt;/p&gt;
&lt;p&gt;使用上述技术，你可以创建一个特殊的符号，如箭头，你可以定位，使其点在线的最末端，并画在它上面。如果你画的箭头后的线（典型的情况），那么箭头将被绘制在该行的顶部。
然而，他们有三种类型的箭头，可以定义，每个类型的定义在不同的方式取决于它的使用。
测量时，你只是想用箭头头标记线的两端，以指示一些工程图中的测量极限。非常简单。
矢量，显示一些数值的方向和强度。
例如在天气风图中。需要一个尾巴，0,0点就是尾巴的末端。通常情况下，这样的向量会形成一个大网格。
指标，指出一些细节。
对于这个0,0点可能应该是箭尖，或者是箭头本身前面的一些距离。
测量箭头&lt;/p&gt;
&lt;p&gt;简单地在一条线的末端添加一个箭头是比较容易做到的。基本上，您可以创建一个 &amp;ldquo;箭头 &amp;ldquo;符号，并将其画在正确的位置。
例如&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;arrow_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;l -15,-5  +5,+5  -5,+5  +15,-5 z&amp;#34;&lt;/span&gt;

  convert -size 100x60 xc: -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 10,30 80,30&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke blue fill skyblue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 80,30  &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$arrow_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          arrow_horizontal.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，我画的符号，使其起点是线的最末端。这样一来，它就可以在之前画好的线上面向后画，形成一个非常漂亮的整齐的符号。
箭头却有一个相关的方向。你可以在许多不同的角度创建大量的箭头定义，许多程序都这样做。但是既然箭头是一个矢量，那么为什么不把箭头作为一个矢量进行旋转呢。IM绘图命令内置了绘图旋转（Canvas Warping），所以让我们使用它们。
这样做还有一个好处，就是把位置从箭头头的 &amp;ldquo;路径 &amp;ldquo;定义中移出来，让你把整个路径指定为 &amp;ldquo;常数&amp;rdquo;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;arrow_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z&amp;#39;&amp;#34;&lt;/span&gt;

  convert -size 100x60 xc: -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 25,55 70,10&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke blue fill skyblue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 translate 70,10 rotate -45
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$arrow_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          arrow_rotate.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你喜欢改变箭头的大小，可以在旋转后增加一个 &amp;ldquo;比例 &amp;ldquo;绘制选项。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;arrow_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z&amp;#39;&amp;#34;&lt;/span&gt;

  convert -size 100x60 xc: -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 25,55 70,10&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke blue fill skyblue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 translate 70,10 rotate -45 scale 2,2
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$arrow_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          arrow_scale.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，它是如何放大离开箭头的 &amp;ldquo;尖端&amp;rdquo;，你指定的地方。这是处理箭头的一个非常重要的方面，因为它是唯一的终点，和角度的线，你正在添加箭头的事项。
变换 &amp;ldquo;的顺序是很重要的，而且实际上与它们实际被处理的顺序是相反的。也就是先将比例尺应用于coodinates，然后是旋转，再是平移。如果coodinate变换不是按照这个顺序进行的，我们最终也会对箭头的最终位置进行缩放，而不是我们期望的位置。
另外由于比例尺有两个数字，而原来的箭头头符号是水平设计的（角度为零），所以可以分别将箭头的宽度与高度进行比例。同时注意笔画宽度也随着箭头的大小而缩放，保持一致。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;arrow_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z&amp;#39;&amp;#34;&lt;/span&gt;

  convert -size 100x60 xc: -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 25,55 70,10&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke blue fill skyblue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 translate 70,10 rotate -45 scale 2,1
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$arrow_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          arrow_scale_aspect.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，当你在画布上翘起一个个箭头时，也许还有许多其他的绘画操作，你可能喜欢在一次&amp;rdquo;-画 &amp;ldquo;操作中把它们全部画完。说要画线，然后在两端添加箭头，需要不同的颜色、位置、旋转，甚至可能是不同的比例。这意味着我们需要将画布翘曲的范围限制在每个单独箭头头的绘制上。如果你不限制范围，你可能会在以后开始影响到其他后面的绘制操作，永远不能很确定你生成的是什么。
为了限制翘曲的范围（以及所有其他的绘图属性），您将涉及到的部分包裹在一个 &amp;ldquo;图形-上下文&amp;rdquo;&amp;hellip;&amp;hellip;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;arrow_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z&amp;#39;&amp;#34;&lt;/span&gt;

  convert -size 100x60 xc: &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke black fill none
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 10,40 A 50,50 0 0,1 90,40&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 push graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   stroke blue fill skyblue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   translate 10,40 rotate 135
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$arrow_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 pop graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 push graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   stroke firebrick fill tomato
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   translate 90,40 rotate 45
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$arrow_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 pop graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          arrow_context.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;推 &amp;ldquo;主要是将当前所有的绘图属性保存起来，以备将来使用，而 &amp;ldquo;弹出 &amp;ldquo;则恢复这些属性，用之前保存的设置替换任何设置（颜色、扭曲、位置等）。这意味着在&amp;rsquo;popping&#39;之后，&amp;lsquo;canvas warp&#39;会被取消，画图会回到修改之前的状态。
上述技术只是生成箭头的一种方法，在绘制箭头作为测量距离的一部分时，如在技术图纸中，是一种很好的方法。
矢量箭头&lt;/p&gt;
&lt;p&gt;如前所述，矢量既显示方向，又显示某个数值的强度。这意味着箭头的长度是可变的，箭头头可以在任何位置远离向量的起点。
现在，你可以做一些沉重的数学计算的位置，箭头头应该是地方给定的向量的长度和角度，但他们是一个更好的方法，这让ImageMagick为你做这些计算。
解决的办法是在Warped Canvas Space中画一条长度合适的水平线作为向量长度。当这条线画好后，只需将绘图空间再次转换到线的末端，而画布仍然是 &amp;ldquo;扭曲的&amp;rdquo;。现在你的位置已经正确了，只要正确的旋转就可以像正常的那样画出矢量的&#39;箭头头&amp;rsquo;。
例如，这里我以-35度角生成一个70像素长的矢量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;vector_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z&amp;#39;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;indicator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 10,0  l +15,+5  -5,-5  +5,-5  -15,+5  m +10,0 +20,0 &amp;#39;&amp;#34;&lt;/span&gt;

  convert -size 100x100 xc: &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke black fill none  circle 20,50 23,50
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 push graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   stroke blue fill skyblue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   translate 20,50 rotate -35
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   line 0,0  70,0
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   translate 70,0
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$vector_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 pop graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 push graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   stroke firebrick fill tomato
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   translate 20,50 rotate 40
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$indicator&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   translate 40,0 rotate -40
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   stroke none fill firebrick
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   text 3,6 &amp;#39;Center&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 pop graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          arrow_with_tails.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;指示箭头&lt;/p&gt;
&lt;p&gt;在上面我还演示了一个指示箭头，指向之前矢量箭头的起点。
然而我没有像之前那样画箭头，而是将它创建为一个反向的箭头符号，它的起始点距离原点（或起始点）10像素。这是一个符号位于我想要指示的位置，所以我实际上并不希望箭头直接在那个位置上面，而是离它稍微远一点。
现在，虽然指示符比向量处理起来更简单，通常不需要可变长度，但你通常要在指示符的远端添加文字来指定指示的内容。和之前一样，计算这个位置可能很困难，何必呢。
文字定位的解决方法也和向量一样。保留原来用于绘制指示箭头的翘曲空间，并将原点转换到该箭头的尾端（在翘曲空间中水平40像素）。现在我们已经重新定位了，我们可以围绕这个新的位置解除扭曲，这样你就可以像正常的那样绘制文本（有轻微的偏移）。
不幸的是，虽然默认的文字对齐方式是 &amp;ldquo;左&amp;rdquo;，但目前你不能在MVG中指定文字对齐方式，作为重力的单独设置。如果这是一个问题，请在IM bugs论坛上提出请求，希望文本对齐（作为独立于重力定位）能够成为现实，尤其是它实际上是SVG规范的一部分。&lt;/p&gt;
&lt;p&gt;绘制对象&lt;/p&gt;
&lt;p&gt;宽广的色彩笔触&lt;/p&gt;
&lt;p&gt;你不需要用路径或轮廓完全封闭填充区域，就能创造出各种形状。使用非常大和宽的笔触，你可以在画布上生成大面积的颜色和色块。
例如，一个宽阔的笔触椭圆弧形可以生成一个漂亮的颜色区域，我实际上已经看到用于创建海报。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x100 xc: -fill none -stroke powderblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;stroke-width 70 ellipse -30,0 90,90 10,50&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -rotate &lt;span class=&#34;m&#34;&gt;180&lt;/span&gt;  arc_background.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者你可以生成一个小丑相当复杂的笑容。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x100 xc: &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;fill none stroke-linecap round
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;             stroke-width 40 stroke tomato ellipse 50,0 70,70 65,115
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;             stroke-width 2  stroke black  ellipse 50,0 70,70 60,120
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;             stroke-width 40 stroke palegreen line 50,40 50,40.01&amp;#39;&lt;/span&gt; clown.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你能想出什么办法？请告诉我们。&lt;/p&gt;
&lt;p&gt;圆柱体&lt;/p&gt;
&lt;p&gt;在 IM 论坛的讨论中，有一个关于使用 ImageMagick 绘制命令绘制圆柱体（特别是阴影圆柱体）的重要讨论。
绘制圆柱体的诀窍是绘制 &amp;ldquo;圆角矩形 &amp;ldquo;原语，使其末端形成椭圆形。也就是说，如果圆柱体的宽度为 50 像素，则将矩形的角分别舍去 25 和 12 像素。这就是矩形宽度的一半，然后再减半。
这样，一个圆柱体就变成了两个相互叠加的圆角矩形。第二个颜色填充的 &amp;ldquo;末端椭圆 &amp;ldquo;的大小正好是两个角的两倍。例如&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 60x100 xc:white -stroke snow4 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill chartreuse3    -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;roundrectangle 5,5 55,95 25,12&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill chartreuse2    -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;roundrectangle 5,5 55,29 25,12&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          cylinder.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过将第一种填充色替换为渐变色（使用记忆中的平铺技术），你可以让圆柱体看起来更像3D&amp;hellip;&amp;hellip;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 60x100 xc:white -stroke snow4 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -size 1x60 gradient:chartreuse1-chartreuse4 -rotate -90 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             -write mpr:shading +delete &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -tile mpr:shading  -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;roundrectangle 5,5 55,95 25,12&amp;#39;&lt;/span&gt; +tile &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill chartreuse2  -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;roundrectangle 5,5 55,29 25,12&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          cylinder_shade.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过慢慢完善圆柱体的绘制（如IM论坛中讨论的那样），你可以走很长的路来生成非常复杂和具有视觉吸引力的圆柱体。这包括增加封闭半透明玻璃圆柱体、阴影效果和标签。
该讨论的最终结果是一个脚本 &amp;ldquo;cylinder_bar&amp;rdquo;，生成一个圆柱体百分比条&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  cylinder_bar &lt;span class=&#34;m&#34;&gt;95&lt;/span&gt; cylinder_95.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该脚本可以生成任何尺寸的图像，根据该尺寸和脚本顶部定义的其他设置适当调整所有参数。还包括 &amp;ldquo;玻璃厚度 &amp;ldquo;的概念，在一个封闭的半透明玻璃圆柱体和内部的彩色圆柱体之间创造一个间隙。
请注意圆柱体非常微妙的阴影，特别是当绿色圆柱体的末端与玻璃圆柱体的末端重叠时。只要稍加预想，就能做出惊人的效果。&lt;/p&gt;
&lt;p&gt;在文字串中绘制特殊字符&lt;/p&gt;
&lt;p&gt;引号还是反斜杠？&lt;/p&gt;
&lt;p&gt;人们在使用-draw时遇到的最大的问题之一是绘制字符，这些字符对UNIX shell和DOS命令行甚至其他语言如C、Perl、PHP、R或Visual Basic都有特殊意义。
在这方面最大的罪魁祸首是两种类型的引号字符，以及变量替换字符，如美元&#39;$&#39;和shell和ImageMagick的转义字符，反斜杠&amp;rsquo;&#39;。
基本上作为 &lt;code&gt;-draw&lt;/code&gt; 的MVG参数需要加引号，而里面的&amp;rsquo;text&#39;字符串参数也可能需要一些额外的引号。
为了解决这个问题，用户通常会使用两个不同的引号字符，一个用于shell，另一个用于MVG文本字符串。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;-draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;... text 0,0 &amp;#34;string&amp;#34; ...&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，对于windows用户来说，这是唯一真正的选择，它有自己的引号问题和方法。
或者他们会交换引号，用&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;-draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;... text 0,0 &amp;#39;string&amp;#39; ...&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它允许你包含shell变量替换（使用&#39;$&#39;而不进行转义。
选择正确的形式可以解决大多数问题，但有些字符仍然存在困难，每个解决方案都取决于你到底使用哪一组引号，因为它们也定义了特殊字符应该如何转义。
以下是四种情况下的引号，以及特殊字符的处理&amp;hellip;
对shell参数使用单引号，对MVG文本字符串周围使用双引号。
处理绘制文本字符串的最简单的技术是为包装shell参数使用单引号。然而，这意味着要在绘制的字符串中包含一个撇号，你需要离开shell的 &amp;ldquo;单引号模式&amp;rdquo;，并在shell的单引号之外提供撇号。
例如，这里是如何处理我提到的四个特殊字符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 250x50 xc:none  -box white  -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 0,0 &amp;#34;  &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;  \&amp;#34;  $  \\  &amp;#34; &amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -trim +repage  text_special_sd.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，由于美元符号不需要转义，你也不能用它来替代shell变量的内容。
重要的是要记住，反斜杠是IM绘图字符串处理的唯一特殊字符。同时，它存在的原因也纯粹是为了让你可以转义任何 &amp;ldquo;IM绘制字符串引号&amp;rdquo;，比如我们在上面使用的双引号。除此以外，其他所有的怪异都是由UNIX命令行shell引起的，而不是IM。
PC-DOS有它自己的怪异之处，我希望在使用环境中的IM时，能对特殊字符进行转义。
在shell参数中使用双引号。
在MVG文本字符串周围使用单引号。
如果你确实想在绘制的字符串中插入一个&amp;rsquo;shell变量&amp;rsquo;，那么你将不得不在shell参数的外面使用双引号。这使得整个事情变得更加复杂，因为你失去了shell的保护，你现在不仅要转义美元&#39;$&#39;符号，而且还要转义反斜杠&amp;rsquo;&#39;。
另一方面，shell将不需要使用单引号字符作为它的参数结束限制字符，所以这方面被简化了。让我们总结一下我们的特殊字符短名单的结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 250x50 xc:none  -box white  -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 0,0 &amp;#39;  \\&amp;#39;  \&amp;#34;  \$  \\\\  &amp;#39; &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -trim +repage  text_special_ds.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，如果你想画一个反斜线本身，MVG文本字符串需要将反斜线加倍（如前面的例子），但是shell本身也需要将每个反斜线加倍，总共产生四个反斜线才能产生一个这样的字符。
这种翻倍很快就会让人不知所措，需要大量的反斜杠才能达到你想要的效果。只要采取的是慢慢的、简单的方法，你就会针对自己的情况想出办法。
使用单引号进行shell论证。
与MVG文本字符串周围的单引号。
最后，让我们总结一下最后两种引号组合。我将让你去弄清楚它们是如何被shell和MVG解码的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 250x50 xc:none  -box white  -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 0,0 &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;  \&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;  &amp;#34;  $  \\  &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -trim +repage  text_special_ss.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在shell参数中使用双引号。
在MVG文本字符串周围加上双引号。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 250x50 xc:none  -box white  -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 0,0 \&amp;#34;  &amp;#39;  \\\&amp;#34;  \$  \\\\  \&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -trim +repage  text_special_dd.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正如你所看到的，来自命令行的 &lt;code&gt;-draw&lt;/code&gt; 参数既要处理命令行shell，也要处理MVG文本字符串中的反斜杠和引号转义。其结果可能会让人感到困惑和棘手。只要记住，shell对这两种引号的处理方式不同，而MVG文本字符串则不同。
当然，在复杂的脚本中，更好的方法可能是完全避免shell和任何脚本问题。你可以通过读取MVG绘图文件中的 &lt;code&gt;-draw&lt;/code&gt; 参数来实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;-draw @drawfile.mvg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，你仍然需要对你使用的任何引号字符进行反斜杠处理，以及对文本中的任何反斜杠进行处理。然而，这比起同时处理shell自己的引号和转义系统要简单得多。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 500x50 xc:lightblue  -font Candice -pointsize &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -gravity center     -draw @text_quotes.mvg      text_quotes.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一张图片来自我使用的一个 &amp;ldquo;MVG &amp;ldquo;文本文件。它不包含转义符或引号。因此，只有MVG引号和转义符是存在的。
请注意，在上面的例子中，如果我对MVG文本字符串使用了单引号，唯一的变化是我需要对字符串中的单引号字符进行反斜杠处理，而不是双引号字符。
关于百分比字符
最后一点是关于&amp;rdquo;-draw text &amp;ldquo;操作符中的特殊 &amp;ldquo;转义 &amp;ldquo;字符。百分号字符&amp;rdquo;%&amp;ldquo;应该 &amp;ldquo;按原样 &amp;ldquo;绘制。你不需要做任何特殊的操作来绘制它们。如果它们不能 &amp;ldquo;按原样 &amp;ldquo;绘制，那么你的IM版本较旧，应该尽快升级。
直到IM 6.2.4版本，&amp;quot;%&amp;ldquo;字符被用作转义字符，在绘制的文本字符串中包含额外的图像信息。现在不再是这样了，因为当SVG图像也试图绘制百分数字符时，这种转义符是混乱和不正确的。
百分号 &amp;ldquo;转义符 &amp;ldquo;的使用（以及&amp;rdquo;/n &amp;ldquo;换行符）被认为与 &lt;code&gt;-draw&lt;/code&gt; 操作符和MVG格式处理SVG图像格式的预期用途不兼容。因此，从IM 6.2.4版本开始，%转义就不适用了，反斜杠只能转义自己和周围的引号。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    convert -size 250x50 xc:none -box white  -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 0,0 &amp;#34;%w\n%h&amp;#34;&amp;#39;&lt;/span&gt;    -trim +repage text_escapes.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于 &amp;ldquo;百分比错误 &amp;ldquo;的更多细节，以及在旧版 ImageMagick 中使用 &lt;code&gt;-draw&lt;/code&gt; 时避免该错误的方法，请参见 Drawing a Percent Bug 页面。
用注释代替绘制
避免这类问题的较好方法是使用 &lt;code&gt;-annotate&lt;/code&gt; 而不是draw来绘制文本。这个操作符是draw操作符的一个封装器，可以使用draw的所有功能，但形式更简单。
基本上这个操作符只需要一组引号（对于shell）。这使得处理特殊字符变得更加简单。
不幸的是，虽然你不再需要为IM转义引号，但你现在有百分比转义，如&amp;rsquo;@&amp;lsquo;文件读取，&#39;\n&#39;换行，以及其他百分比转义扩展。
例如，使用单引号&amp;hellip; &amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    convert -size 200x50 xc:none  -box white  -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -annotate &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;\@  &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;  &amp;#34;  $  \\  %% &amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -trim +repage  annotate_s.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而对于双引号&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    convert -size 200x50 xc:none -box white -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -annotate &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\@  &amp;#39;  \&amp;#34;  \$  \\\\  %% &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -trim +repage  annotate_d.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而，如果你使用&amp;rsquo;@&amp;lsquo;转义符从文件中读取字符串，所有的注释引号和转义符将被完全忽略。
例如，我们在这里包含了一个图像的宽度和高度的信息!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    convert -size 200x50 xc:none -box white -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -annotate &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;%w\n%h&amp;#39;&lt;/span&gt; -trim +repage    annotate_percents.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而，当从文件中读取注释字符串时，所有的转义都会被完全忽略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n &lt;span class=&#34;s1&#34;&gt;&amp;#39;@ %w\n%h&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      convert -size 200x50 xc:none -box white -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;              -annotate &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;@-&amp;#39;&lt;/span&gt;  -trim +repage  annotate_file.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更多信息请参见Annotate Text Drawing Operator，特别是Annotate Escape Characters。
IM和SVG处理&lt;/p&gt;
&lt;p&gt;SVG输入驱动。RSVG与MSVG&lt;/p&gt;
&lt;p&gt;处理实际的SVG图像格式是一项非常复杂的工作。引擎需要处理SVG&amp;ndash;可缩放矢量图形文档所定义的所有方面。这需要大量的编程工作和时间。
因此，ImageMagick在SVG格式图像的处理上提供了两种方法。第一种是使用一个开源的RSVG库，将SVG格式转换成IM没有问题的光栅图像。这个引擎几乎在SVG处理的所有方面都是完整的。
第二种方法是IM尝试将SVG转换为MVG，使用一个名为MSVG的内置IM方法。MSVG试图将SVG图像转换成IM的 &lt;code&gt;-draw&lt;/code&gt; 运算符 &amp;ldquo;MVG &amp;ldquo;绘图语言。绘制MVG的很多功能都是专门为此而创建的。不幸的是，虽然基本的线条绘制和着色功能是存在的，但它远不是一个完整的SVG转换器。
你可以通过使用特殊的输入格式 &amp;ldquo;MSVG:&amp;quot;（IM v6.3.4新增）读取SVG图像来强制使用内部的MSVG转换器。但如果RSVG库存在，大多数ImageMagick将使用它来渲染SVG图像。
要找出你的IM会做什么，请用&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -list format &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep SVG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从括号中的 &amp;ldquo;RSVG &amp;ldquo;可以看出，我自己的IM将使用我电脑上的RSVG库，并给出了版本。
在这里，我 &amp;ldquo;绘制 &amp;ldquo;了一个小的、手工制作的SVG图像 &amp;ldquo;diagonal.svg&amp;rdquo;（由论坛用户penciledin贡献），它在白色背景上创建了一个简单的对角线渐变的矩形。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert diagonal.svg  diagonal_rsvg.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完美的。一个正确的对角线梯度被生成。
然而，如果你使用内部的MSVG（如果没有RSVG库，则为默认值）来渲染&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert msvg:diagonal.svg  diagonal_msvg.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正如你所看到的，内部MSVG转换失败，返回的是垂直梯度而不是对角线。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert msvg:diagonal.svg diagonal.mvg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你大概可以看到MSVG转换器是如何尝试将SVG转换为MVG绘图命令的。
当前内部MSVG已知失败的地方包括&amp;hellip;&amp;hellip;
非垂直梯度(没有转换到新的MVG梯度处理)
沿着弯曲路径的文字
案文说明（与重力分开）。
然而大多数基本的绘图动作都被处理了。
还请记住，MVG语言实际上可以处理SVG不能处理的事情，包括使用重力来定位图像和文本。重力不是SVG规范的一部分，尽管它是IM文本和字体处理的一个组成部分。
另外请记住，MVG没有SVG所拥有的容器机制。内部的MSVG转换器用图形上下文的推送和弹出代替了XML容器（见上面的MVG输出），效果是一样的。
SVG的设置&lt;/p&gt;
&lt;p&gt;SVG图像格式是一种矢量格式（请参见关于矢量图像格式的一个词），因此图像通常没有一个默认的 &amp;ldquo;大小&amp;rdquo;，而是以特定的&amp;rdquo;-密度 &amp;ldquo;来 &amp;ldquo;绘制 &amp;ldquo;或 &amp;ldquo;渲染&amp;rdquo;，就像postscript一样（默认密度是72dpi）。相反，它是以特定的&amp;rdquo;-密度 &amp;ldquo;来 &amp;ldquo;绘制 &amp;ldquo;或 &amp;ldquo;渲染 &amp;ldquo;的，就像postscript一样（默认密度是72dpi）。
另外，如果SVG没有 &amp;ldquo;绘制 &amp;ldquo;背景，您可以通过使用 &lt;code&gt;-background&lt;/code&gt; 设置指定要使用的背景颜色。
例如这里是另一个小的SVG图像 &amp;ldquo;home.svg&amp;rdquo;，它已经使用3种不同的密度，3种不同的背景进行 &amp;ldquo;渲染&amp;rdquo;，包括一个透明的背景。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -density &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt;                      home.svg  home_1.gif

  convert              -background skyblue home.svg  home_2.gif

  convert -density &lt;span class=&#34;m&#34;&gt;144&lt;/span&gt; -background none    home.svg  home_3.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，我使用了PNG格式的图片来制作上面例子中较大的透明背景版本。由于半透明的边缘像素，这产生的图像比GIF图像格式产生的图像更干净。当最终图像中涉及到透明度时，总是建议使用PNG。
我发现有些SVG图像不能缩放。也就是说，它们被定义为 &amp;ldquo;像素&amp;rdquo;，而不是现实世界中的长度，如 &amp;ldquo;点&amp;rdquo;、&amp;ldquo;英寸 &amp;ldquo;或 &amp;ldquo;毫米&amp;rdquo;。因此，虽然&amp;rdquo;-密度 &amp;ldquo;设置可能会改变图像的整体大小（以现实世界为单位），但 &amp;ldquo;像素 &amp;ldquo;的大小不会改变，因此图像本身的大小也不会改变。然而这样的SVG图像是相当罕见的。
更糟糕的是，一些SVG图像使用了 &amp;ldquo;像素 &amp;ldquo;和 &amp;ldquo;点 &amp;ldquo;的混合测量，除非作者故意这样做，否则你可能会得到一个真正的混乱，你可以尝试使用不同的密度，而不是作者想要的。幸运的是，这种情况更加罕见。
一个简单的解决方法就是将SVG中所有的 &amp;ldquo;像素 &amp;ldquo;单位改成 &amp;ldquo;点&amp;rdquo;，但也不能盲目的使用，以防故意使用 &amp;ldquo;像素&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;SVG输出处理&lt;/p&gt;
&lt;p&gt;从IM v6.4.2开始，IM可以将任何位图图像转换为SVG矢量图! 转换并不总是成功的，但较大和/或较简单的图像（如位图蒙版）会转换得很好。
例如，我在这里将一个可怕的位图形状转换为SVG图像，然后再将其转换回来，以便将位图平滑为一个适当的反锯齿形状。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -pointsize &lt;span class=&#34;m&#34;&gt;72&lt;/span&gt; -font Candice label:A -threshold 50% &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -trim +repage -bordercolor white -border 5x5 A.gif

  convert A.gif  A.svg

  convert A.svg  A.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而，要使之工作，必须安装 &amp;ldquo;开发 &amp;ldquo;的 &amp;ldquo;AutoTrace &amp;ldquo;库，并在IM中配置&amp;rdquo;-with-autotrace &amp;ldquo;开关。
如果没有安装 &amp;ldquo;AutoTrace &amp;ldquo;库并将其编译到IM中，那么生成的SVG输出将是大量的单像素圆圈，生成一个二进制结果，而不是一个平滑的SVG轮廓图像。这样的图像比较巨大，通过SVG渲染往往需要很长的时间来渲染。
其实需要一种更好的默认栅格到矢量的技术，可能会使用Morphology skeletion和MAT技术。
有一个 &amp;ldquo;autotrace: &amp;ldquo;输入委托，来 &amp;ldquo;平滑输入位图图像&amp;rdquo;，直接使用 &amp;ldquo;autotrace &amp;ldquo;命令一次性完成上述所有步骤。然而我最后一次看到这个委托人已经消失了。
你应该这样使用它&amp;hellip;&amp;hellip;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert autotrace:A.gif  A_traced.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然这并不能让你从 &amp;ldquo;autotrace &amp;ldquo;命令中得到SVG输出，只是通过SVG过滤输入的图像来平滑它。
作为一种替代方法，你可以直接使用 &amp;ldquo;autotrace &amp;ldquo;命令，如Raster to Vector Edging和Skeleton using Autotrace示例所示。
你也可以看看cancerberosgx的结果，在生成SVG图像，他研究了转换照片的解决方案。
非IM矢量图形编辑器&lt;/p&gt;
&lt;p&gt;ImageMagick是一个像素数组处理器，它一般不会保存矢量图像（&amp;lsquo;MVG&#39;是唯一的例外），只会读取图像并将其转换为像素数组。
其他像素图像编辑器也是如此，如Gimp、Photoshop等。
对于编辑和处理基于矢量的图像，可以使用以下程序，如
Sodipodi基于SVG的矢量图形编辑器。
Xfig 简单但非常好的矢量对象编辑器。
(适用于标志、地图和在页面上排列照片)
直径
AutoTrace 将位图数组中的形状转换为矢量轮廓。
基于Sketch Python的曲线文字矢量编辑器。
当然，这不是一个完整的列表。即使是许多文字处理程序，如OpenOffice、Word和TeX，一般都有各种简单的，虽然往往难以使用的对象编辑器。
然而对于一般将矢量图形格式转换为不同的矢量格式，不要使用ImageMagick。ImageMagick本质上是一个光栅图像或位图图形转换器和操作器，而且永远都是这样。更多信息请参见A word about Vector Image formats。&lt;/p&gt;
&lt;p&gt;创建于: 24 March 2004
更新于: 14 March 2011
作者: Anthony Thyssen, &lt;a href=&#34;mailto:Anthony.Thyssen@gmail.com&#34;&gt;Anthony.Thyssen@gmail.com&lt;/a&gt;
Examples Generated with:  [version image]
URL: &lt;a href=&#34;http://www.imagemagick.org/Usage/draw/&#34;&gt;http://www.imagemagick.org/Usage/draw/&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/imagemagick">imagemagick</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/image">image</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/imagemagick-drawing/</guid>
                <pubDate>Sun, 05 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>ImageMagick - Transform</title>
                <link>https://ohmyweekly.github.io/notes/imagemagick-transform/</link>
                
                
                <description>&lt;blockquote&gt;ImageMagick Transform&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://imagemagick.org/Usage/transform/index.html&#34;&gt;https://imagemagick.org/Usage/transform/index.html&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/imagemagick">imagemagick</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/transform">transform</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/imagemagick-transform/</guid>
                <pubDate>Sun, 05 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>ImageMagick 笔记</title>
                <link>https://ohmyweekly.github.io/notes/imagemagick-notes/</link>
                
                
                <description>&lt;blockquote&gt;ImageMagick&lt;/blockquote&gt;&lt;h2 id=&#34;几个有意思的-imagemagick-脚本&#34;&gt;几个有意思的 ImageMagick 脚本&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.fmwconcepts.com/imagemagick/randomclipart/index.php&#34;&gt;http://www.fmwconcepts.com/imagemagick/randomclipart/index.php&lt;/a&gt;
&lt;a href=&#34;http://www.fmwconcepts.com/imagemagick/sketching/index.php&#34;&gt;http://www.fmwconcepts.com/imagemagick/sketching/index.php&lt;/a&gt;
&lt;a href=&#34;http://www.fmwconcepts.com/imagemagick/sphericalpano2cube/index.php&#34;&gt;http://www.fmwconcepts.com/imagemagick/sphericalpano2cube/index.php&lt;/a&gt;
&lt;a href=&#34;http://www.fmwconcepts.com/imagemagick/surroundblur/index.php&#34;&gt;http://www.fmwconcepts.com/imagemagick/surroundblur/index.php&lt;/a&gt;
&lt;a href=&#34;http://www.fmwconcepts.com/imagemagick/transfercolor/index.php&#34;&gt;http://www.fmwconcepts.com/imagemagick/transfercolor/index.php&lt;/a&gt;
&lt;a href=&#34;http://www.fmwconcepts.com/imagemagick/colorcells/index.php&#34;&gt;http://www.fmwconcepts.com/imagemagick/colorcells/index.php&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;给图片添加网格线&#34;&gt;给图片添加网格线&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./glasseffects -e none -k simple -o &lt;span class=&#34;s1&#34;&gt;&amp;#39;#FFDAB9&amp;#39;&lt;/span&gt; -t single -m overlay -c &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; -w &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -s &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -r &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; in.jpeg out.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./grid -o 0.3 -s &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; -c white in.jpeg out.jpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;折叠图片&#34;&gt;折叠图片&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./picturefold -o &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; -h &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt; in.jpeg out.jpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;给图片添加心形图片&#34;&gt;给图片添加心形图片&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./randomclipart -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;64,16&amp;#34;&lt;/span&gt; -a &lt;span class=&#34;s2&#34;&gt;&amp;#34;45,-45&amp;#34;&lt;/span&gt; -p &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt; -c random in.jpeg heart.png out.jpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;给图片分成带颜色的方块&#34;&gt;给图片分成带颜色的方块&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./colorcells -n 8,8 -d 100,100 in.jpeg out.jpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/imagemagick">imagemagick</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/image">image</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/imagemagick-notes/</guid>
                <pubDate>Sun, 05 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>FFmpeg</title>
                <link>https://ohmyweekly.github.io/notes/ffmpeg/</link>
                
                
                <description>&lt;blockquote&gt;FFmpeg&lt;/blockquote&gt;&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;global_options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;input_file_options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; -i input_url&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; ... &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;output_file_options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; output_url&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;描述&#34;&gt;描述&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ffmpeg.org/ffmpeg.html&#34;&gt;&lt;code&gt;ffmpeg&lt;/code&gt;&lt;/a&gt; 是一款非常快速的视频和音频转换器，它还可以从实时音频/视频源中抓取。它还可以在任意采样率之间进行转换，并通过高质量的多相滤波器在飞行中调整视频大小。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 从任意数量的输入&amp;quot;文件&amp;rdquo;（可以是常规文件、管道、网络流、抓取设备等）中读取，由 &lt;code&gt;-i&lt;/code&gt; 选项指定，并写入任意数量的输出&amp;quot;文件&amp;rdquo;，由一个普通的输出 url 指定。在命令行中找到的任何不能被解释为选项的东西都被认为是一个输出 url。&lt;/p&gt;
&lt;p&gt;原则上，每个输入或输出 url 可以包含任意数量的不同类型的流（视频/音频/字幕/附件/数据）。允许的流的数量和/或类型可能受到容器格式的限制。选择哪些输入的流将进入哪些输出，可以自动完成，也可以使用 &lt;code&gt;-map&lt;/code&gt; 选项完成（请参见流选择章节）。&lt;/p&gt;
&lt;p&gt;要在选项中引用输入文件，您必须使用它们的索引（基于 &lt;code&gt;0&lt;/code&gt;）。例如，第一个输入文件是 &lt;code&gt;0&lt;/code&gt;，第二个是 &lt;code&gt;1&lt;/code&gt;，等等。同样，一个文件中的流也用它们的索引来表示。例如，&lt;code&gt;2:3&lt;/code&gt; 指的是第三个输入文件中的第四个流。也请参见流指定符一章。&lt;/p&gt;
&lt;p&gt;一般来说，选项会应用到下一个指定的文件。因此，顺序是很重要的，您可以在命令行中多次出现同一个选项。每次出现都会被应用到下一个输入或输出文件。这条规则的例外是全局选项（例如 verbosity level），应该先指定。&lt;/p&gt;
&lt;p&gt;不要混合输入和输出文件-首先指定所有输入文件，然后再指定所有输出文件。也不要混合属于不同文件的选项。所有选项只适用于下一个输入或输出文件，并在文件之间被重置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要将输出文件的视频比特率设置为 64 kbit/s:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.avi -b:v 64k -bufsize 64k output.avi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;要强制输出文件的帧率为24帧/秒:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.avi -r &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; output.avi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;强制输入文件的帧率（仅对原始格式有效）为1帧/秒，输出文件的帧率为24帧/秒:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -r &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -i input.m2v -r &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; output.avi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原始输入文件可能需要格式选项。&lt;/p&gt;
&lt;h2 id=&#34;详情描述&#34;&gt;详情描述&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 中每个输出的转码过程可以用下面的图来描述:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _______              ______________
|       |            |              |
| input |  demuxer   | encoded data |   decoder
| file  | ---------&amp;gt; | packets      | -----+
|_______|            |______________|      |
                                           v
                                       _________
                                      |         |
                                      | decoded |
                                      | frames  |
                                      |_________|
 ________             ______________       |
|        |           |              |      |
| output | &amp;lt;-------- | encoded data | &amp;lt;----+
| file   |   muxer   | packets      |   encoder
|________|           |______________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 调用 libavformat 库（包含 demuxers）来读取输入文件，并从其中获取包含编码数据的数据包。当有多个输入文件时，&lt;code&gt;ffmpeg&lt;/code&gt; 试图通过跟踪任何活动输入流上的最低时间戳来保持它们的同步。&lt;/p&gt;
&lt;p&gt;编码后的数据包会被传递给解码器（除非为流选择了 streamcopy，详见下文）。解码器产生未压缩的帧（原始视频/PCM音频/&amp;hellip;），这些帧可以通过过滤进一步处理（见下一节）。过滤后，这些帧被传给编码器，编码器对它们进行编码并输出编码数据包。最后，这些帧被传给 muxer，muxer 将编码后的数据包写入输出文件。&lt;/p&gt;
&lt;h2 id=&#34;滤波&#34;&gt;滤波&lt;/h2&gt;
&lt;p&gt;在编码之前，&lt;code&gt;ffmpeg&lt;/code&gt; 可以使用 libavfilter 库中的过滤器处理原始音频和视频帧。&lt;code&gt;ffmpeg&lt;/code&gt; 区分了两种类型的滤波图：简单和复杂。&lt;/p&gt;
&lt;h3 id=&#34;简单的滤波图&#34;&gt;简单的滤波图&lt;/h3&gt;
&lt;p&gt;简单的滤波图是指那些只有一个输入和输出的滤波图，两者类型相同。在上图中，它们可以通过简单地在解码和编码之间插入一个额外的步骤来表示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _________                        ______________
|         |                      |              |
| decoded |                      | encoded data |
| frames  |\                   _ | packets      |
|_________| \                  /||______________|
             \   __________   /
  simple     _\||          | /  encoder
  filtergraph   | filtered |/
                | frames   |
                |__________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单的滤波图是用 per-stream &lt;code&gt;-filter&lt;/code&gt; 选项配置的（视频和音频分别用 &lt;code&gt;-vf&lt;/code&gt; 和 &lt;code&gt;-af&lt;/code&gt; 别名）。例如，一个简单的视频滤波图可以是这样的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _______        _____________        _______        ________
|       |      |             |      |       |      |        |
| input | ---&amp;gt; | deinterlace | ---&amp;gt; | scale | ---&amp;gt; | output |
|_______|      |_____________|      |_______|      |________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，有些滤镜会改变帧的属性，但不会改变帧的内容。例如，上面例子中的 &lt;code&gt;fps&lt;/code&gt; 过滤器改变了帧数，但没有触及帧内容。另一个例子是 &lt;code&gt;setpts&lt;/code&gt; 过滤器，它只设置了时间戳，而在其他方面没有改变帧的内容。&lt;/p&gt;
&lt;h3 id=&#34;复杂的滤波图&#34;&gt;复杂的滤波图&lt;/h3&gt;
&lt;p&gt;复杂的滤波图是那些不能简单地描述为应用于一个流的线性处理链的图。例如，当图形有一个以上的输入和/或输出时，或者当输出流类型与输入不同时，就会出现这种情况。它们可以用下图来表示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _________
|         |
| input 0 |\                    __________
|_________| \                  |          |
             \   _________    /| output 0 |
              \ |         |  / |__________|
 _________     \| complex | /
|         |     |         |/
| input 1 |----&amp;gt;| filter  |\
|_________|     |         | \   __________
               /| graph   |  \ |          |
              / |         |   \| output 1 |
 _________   /  |_________|    |__________|
|         | /
| input 2 |/
|_________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复杂的滤波图是用 &lt;code&gt;-filter_complex&lt;/code&gt; 选项配置的。注意这个选项是全局性的，因为复杂的滤波图，就其本质而言，不能明确地与一个单一的流或文件相关联。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-lavfi&lt;/code&gt; 选项相当于 &lt;code&gt;-filter_complex&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;一个简单的例子是 &lt;code&gt;overlay&lt;/code&gt; 滤波器，它有两个视频输入和一个视频输出，其中一个视频叠加在另一个视频上。它的音频对应的是 &lt;code&gt;amix&lt;/code&gt; 滤波器。&lt;/p&gt;
&lt;h2 id=&#34;流复制&#34;&gt;流复制&lt;/h2&gt;
&lt;p&gt;流复制是通过向 &lt;code&gt;-codec&lt;/code&gt; 选项提供 &lt;code&gt;copy&lt;/code&gt; 参数来选择的模式，它使 &lt;code&gt;ffmpeg&lt;/code&gt; 省略了对指定流的解码和编码步骤，因此它只做解复用(demuxing)和混叠(muxing)。它对于改变容器格式或修改容器级元数据非常有用。上面的图，在这种情况下，会简化成这样:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _______              ______________            ________
|       |            |              |          |        |
| input |  demuxer   | encoded data |  muxer   | output |
| file  | ---------&amp;gt; | packets      | -------&amp;gt; | file   |
|_______|            |______________|          |________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于不需要解码或编码，所以速度非常快，而且没有质量损失。但是，由于很多因素的影响，在某些情况下可能无法工作。应用过滤器显然也是不可能的，因为过滤器是在未压缩的数据上工作的。&lt;/p&gt;
&lt;h2 id=&#34;流选择&#34;&gt;流选择&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 提供了 &lt;code&gt;-map&lt;/code&gt; 选项来手动控制每个输出文件的流选择。用户可以跳过 &lt;code&gt;-map&lt;/code&gt; 选项，让 &lt;code&gt;ffmpeg&lt;/code&gt; 执行自动流选择，如下所述。&lt;code&gt;-vn / -an / -sn / -dn&lt;/code&gt; 选项可以分别用来跳过视频、音频、字幕和数据流，无论是手动映射还是自动选择，但那些复杂的滤波图输出的流除外。&lt;/p&gt;
&lt;h3 id=&#34;描述-1&#34;&gt;描述：&lt;/h3&gt;
&lt;p&gt;下面的小节描述了涉及到流选择的各种规则。接下来的例子将展示这些规则是如何在实践中应用的。&lt;/p&gt;
&lt;p&gt;虽然我们尽力准确地反映了程序的行为，但 FFmpeg 仍在不断地开发中，代码可能会在写这篇文章的时候有所改变。&lt;/p&gt;
&lt;h4 id=&#34;自动选择流&#34;&gt;自动选择流&lt;/h4&gt;
&lt;p&gt;在没有任何特定输出文件的映射选项的情况下，&lt;code&gt;ffmpeg&lt;/code&gt; 会检查输出格式，以检查哪些类型的流可以被包含在其中，即视频、音频和/或字幕。对于每一种可接受的流类型，&lt;code&gt;ffmpeg&lt;/code&gt; 将从所有输入中选择一个可用的流。&lt;/p&gt;
&lt;p&gt;它将根据以下标准选择该流:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于视频，它是最高分辨率的流,&lt;/li&gt;
&lt;li&gt;对于音频来说，它是拥有最多通道的流,&lt;/li&gt;
&lt;li&gt;对于字幕，它是第一个找到的字幕流，但有一个注意事项。输出格式的默认字幕编码器可以是基于文本的，也可以是基于图像的，而且只会选择相同类型的字幕流。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在几个相同类型的流速率相同的情况下，会选择指数最低的流。&lt;/p&gt;
&lt;p&gt;数据流或附件流不会被自动选择，只能使用 &lt;code&gt;-map&lt;/code&gt; 来包含。&lt;/p&gt;
&lt;h4 id=&#34;手动选择流&#34;&gt;手动选择流&lt;/h4&gt;
&lt;p&gt;当使用 &lt;code&gt;-map&lt;/code&gt; 时，只有用户映射的流才会被包含在该输出文件中，下面描述的滤波图输出可能是一个例外。&lt;/p&gt;
&lt;h4 id=&#34;复杂的滤波图-1&#34;&gt;复杂的滤波图&lt;/h4&gt;
&lt;p&gt;如果有任何复杂的滤波图输出流带有未标记的填补(pad)，它们将被添加到第一个输出文件中。如果流类型不被输出格式支持，这将导致一个致命的错误。在没有 &lt;code&gt;map&lt;/code&gt; 选项的情况下，包含这些流会导致自动选择流的类型被跳过。如果存在 &lt;code&gt;map&lt;/code&gt; 选项，这些滤波图流会被包含在映射流之外。&lt;/p&gt;
&lt;p&gt;带有标签填补的复杂滤波图输出流必须被映射一次，而且是精确地映射一次。&lt;/p&gt;
&lt;h4 id=&#34;流处理&#34;&gt;流处理&lt;/h4&gt;
&lt;p&gt;流处理是独立于流选择的，下面描述的字幕除外。流处理是通过针对特定输出文件中的流的 &lt;code&gt;-codec&lt;/code&gt; 选项来设置的。特别是，编解码器选项是在流选择过程之后由 &lt;code&gt;ffmpeg&lt;/code&gt; 应用的，因此不会影响后者。如果没有为某个流类型指定 &lt;code&gt;-codec&lt;/code&gt; 选项，&lt;code&gt;ffmpeg&lt;/code&gt; 将选择输出文件 muxer 注册的默认编码器。&lt;/p&gt;
&lt;p&gt;字幕存在一个例外。&lt;code&gt;ffmpeg&lt;/code&gt; 不会验证指定的编码器是否可以转换所选的流，也不会验证转换后的流是否可以在输出格式中接受。这通常也适用于：当用户手动设置编码器时，流选择过程不能检查编码后的流是否能被混入输出文件中。如果不能，&lt;code&gt;ffmpeg&lt;/code&gt; 将中止，所有的输出文件将无法被处理。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;下面的例子说明了 &lt;code&gt;ffmpeg&lt;/code&gt; 流选择方法的行为、怪癖和限制。&lt;/p&gt;
&lt;p&gt;它们假设以下三个输入文件:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;input file &#39;A.avi&#39;
      stream 0: video 640x360
      stream 1: audio 2 channels

input file &#39;B.mp4&#39;
      stream 0: video 1920x1080
      stream 1: audio 2 channels
      stream 2: subtitles (text)
      stream 3: audio 5.1 channels
      stream 4: subtitles (text)

input file &#39;C.mkv&#39;
      stream 0: video 1280x720
      stream 1: audio 2 channels
      stream 2: subtitles (image)
&lt;/code&gt;&lt;/pre&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/ffmpeg">ffmpeg</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/ffmpeg">ffmpeg</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/tiktok">tiktok</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/ffmpeg/</guid>
                <pubDate>Sat, 04 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>使用 FFmpeg 提取抖音短视频中的音乐</title>
                <link>https://ohmyweekly.github.io/notes/ffmpeg-notes/</link>
                
                
                <description>&lt;blockquote&gt;Use FFmpeg to extract music in TikTok&lt;/blockquote&gt;&lt;p&gt;最近看抖音短视频有很多好听的歌想转成 mp3 格式, 使用 &lt;a href=&#34;https://ffmpeg.org/ffmpeg.html&#34;&gt;FFmpeg&lt;/a&gt; 来搞定:&lt;/p&gt;
&lt;h2 id=&#34;从视频中采集音频httpsstackoverflowcomquestions9913032how-can-i-extract-audio-from-video-with-ffmpeg2741382427413824&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/9913032/how-can-i-extract-audio-from-video-with-ffmpeg/27413824#27413824&#34;&gt;从视频中采集音频&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.mp4 -f mp3 -vn output.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.mp4 -q:a &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -map a output.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;去除音频中的静音httpsstackoverflowcomquestions25697596using-ffmpeg-with-silencedetect-to-remove-audio-silence2941197329411973&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/25697596/using-ffmpeg-with-silencedetect-to-remove-audio-silence/29411973#29411973&#34;&gt;去除音频中的静音&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.mp3 -af &lt;span class=&#34;nv&#34;&gt;silenceremove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1:0:-50dB output.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;给视频添加字幕httpsenwikipediaorgwikilist_of_iso_639-2_codes&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-2_codes&#34;&gt;给视频添加字幕&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.mp4 -i SRT文件 -c copy -c:s mov_text -metadata:s:s:0  &lt;span class=&#34;nv&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;language code&amp;gt; output.mp4 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;移除超过1秒的静止画面httpsstackoverflowcomquestions40966394how-to-simply-remove-duplicate-frames-from-a-video-using-ffmpeg4097778640977786&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/40966394/how-to-simply-remove-duplicate-frames-from-a-video-using-ffmpeg/40977786#40977786&#34;&gt;移除超过1秒的静止画面&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i in.mp4 -vf
&lt;span class=&#34;s2&#34;&gt;&amp;#34;select=&amp;#39;if(gt(scene,0.01),st(1,t),lte(t-ld(1),1))&amp;#39;,setpts=N/FRAME_RATE/TB&amp;#34;&lt;/span&gt;
trimmed.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;将图片和音频合成视频&#34;&gt;将图片和音频合成视频&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -loop &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -i &lt;span class=&#34;nv&#34;&gt;$image&lt;/span&gt; -i &lt;span class=&#34;nv&#34;&gt;$audio_file&lt;/span&gt; -q:v &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -c:a copy  -shortest &lt;span class=&#34;nv&#34;&gt;$video_file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;将多个视频合并成一个&#34;&gt;将多个视频合并成一个&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -safe &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -f concat -i &lt;span class=&#34;nv&#34;&gt;$list_file&lt;/span&gt; -c:v libx264 &lt;span class=&#34;nv&#34;&gt;$final&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;list file 的格式是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;file &#39;./data_1.ts&#39;
file &#39;./data_2.ts&#39;
file &#39;./data_3.ts&#39;
&lt;/code&gt;&lt;/pre&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/ffmpeg">ffmpeg</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/ffmpeg">ffmpeg</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/tiktok">tiktok</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/ffmpeg-notes/</guid>
                <pubDate>Sat, 04 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>创建包</title>
                <link>https://ohmyweekly.github.io/notes/creating-packages/</link>
                
                
                <description>&lt;blockquote&gt;Creating packages&lt;/blockquote&gt;&lt;p&gt;Dart 生态系统使用&lt;a href=&#34;https://dart.dev/guides/packages&#34;&gt;包&lt;/a&gt;来共享软件，如库和工具。本页告诉你如何创建一个包，重点是最常见的一种包，&lt;a href=&#34;https://dart.dev/tools/pub/glossary#library-package&#34;&gt;库包&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;是什么造就了一个库包&#34;&gt;是什么造就了一个库包&lt;/h2&gt;
&lt;p&gt;下图是最简单的库包的布局:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dart.dev/assets/libraries/simple-lib2-81ebdc20fdb53d3abbc4364956141eb0f6f8f275d1636064fc3e1db959b93c1a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个库的最低要求是&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pubspec 文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;库的 &lt;code&gt;pubspec.yaml&lt;/code&gt; 文件和应用程序包的文件是一样的-没有特别的名称来表示这个包是一个库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lib 目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正如你所期望的那样，库代码存在于 &lt;code&gt;lib&lt;/code&gt; 目录下，对其他包是公开的。你可以根据需要在 &lt;code&gt;lib&lt;/code&gt; 下创建任何层次结构。按照惯例，实现代码被放在 &lt;code&gt;lib/src&lt;/code&gt; 下。&lt;code&gt;lib/src&lt;/code&gt; 下的代码被认为是私有的；其他包不应该需要导入 &lt;code&gt;src/...&lt;/code&gt;。要使 &lt;code&gt;lib/src&lt;/code&gt; 下的 API 公开，您可以从直接位于 &lt;code&gt;lib&lt;/code&gt; 下的文件导出 &lt;code&gt;lib/src&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;注意：当没有指定 &lt;code&gt;library&lt;/code&gt; 指令时，会根据每个库的路径和文件名为其生成一个唯一的标签。因此，我们建议您从代码中省略 &lt;code&gt;library&lt;/code&gt; 指令，除非您计划&lt;a href=&#34;https://dart.dev/guides/libraries/create-library-packages#documenting-a-library&#34;&gt;生成库级文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;组织一个库包&#34;&gt;组织一个库包&lt;/h2&gt;
&lt;p&gt;当你创建小的、单独的库（称为迷你库）时，库包的维护、扩展和测试是最容易的。在大多数情况下，每个类都应该在自己的迷你库中，除非你有两个类是紧密耦合的情况。&lt;/p&gt;
&lt;p&gt;注意：你可能听说过 &lt;code&gt;part&lt;/code&gt; 指令，它允许你将一个库分割成多个 Dart 文件。我们建议你避免使用 &lt;code&gt;part&lt;/code&gt; 指令，而是创建迷你库。&lt;/p&gt;
&lt;p&gt;直接在 &lt;code&gt;lib&lt;/code&gt; 下创建一个&amp;quot;主&amp;quot;库文件，&lt;code&gt;lib/&amp;lt;package-name&amp;gt;.dart&lt;/code&gt;，导出所有的公共 API。这样用户就可以通过导入一个文件来获得一个库的所有功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lib&lt;/code&gt; 目录也可能包含其他可导入的、非src的库。例如，也许你的主库可以跨平台使用，但是你创建了单独的库，这些库依赖于 &lt;code&gt;dart:io&lt;/code&gt; 或者 &lt;code&gt;dart:html&lt;/code&gt;。有些包有单独的库，这些库是要用前缀导入的，而主库不是。&lt;/p&gt;
&lt;p&gt;让我们来看看一个现实世界中的库包的组织： shelf。&lt;a href=&#34;https://github.com/dart-lang/shelf&#34;&gt;shelf&lt;/a&gt; 包提供了一种使用 Dart 创建 web 服务器的简单方法，它的布局结构是 Dart 库包常用的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dart.dev/assets/libraries/shelf-02e5fd43b660fcef7dbe6a883c40159e0379c8ee2088288ca60ed7dc8781bafd.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;直接在 &lt;code&gt;lib&lt;/code&gt; 下，主库文件 &lt;code&gt;shelf.dart&lt;/code&gt; 从 &lt;code&gt;lib/src&lt;/code&gt; 导出几个文件:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/cascade.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/handler.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/handlers/logger.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/hijack_exception.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/middleware.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/pipeline.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/request.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/response.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/server.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/server_handler.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;shelf 包还包含一个迷你库： &lt;code&gt;shelf_io&lt;/code&gt;。这个适配器处理来自 &lt;code&gt;dart:io&lt;/code&gt; 的 &lt;code&gt;HttpRequest&lt;/code&gt; 对象。&lt;/p&gt;
&lt;p&gt;对网络应用的提示: 为了在使用 &lt;a href=&#34;https://dart.dev/tools/dartdevc&#34;&gt;dartdevc&lt;/a&gt; 开发时获得最佳性能，请将&lt;a href=&#34;https://dart.dev/tools/pub/package-layout#implementation-files&#34;&gt;实现文件&lt;/a&gt;放在 &lt;code&gt;/lib/src&lt;/code&gt; 下，而不是放在 &lt;code&gt;/lib&lt;/code&gt; 下的其他地方。同时，避免导入 &lt;code&gt;package:package_name/src/...&lt;/code&gt; 的文件。&lt;/p&gt;
&lt;h2 id=&#34;导入库文件&#34;&gt;导入库文件&lt;/h2&gt;
&lt;p&gt;当从其他包中导入一个库文件时，使用 &lt;code&gt;package:&lt;/code&gt; 指令来指定该文件的 URI。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:utilities/utilities.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当从自己的包中导入一个库文件时，当两个文件都在 lib 内，或者两个文件都在 lib 外时，使用相对路径。使用 &lt;code&gt;:package&lt;/code&gt; 当导入的文件在 lib 内，而导入者在 lib 外时。&lt;/p&gt;
&lt;p&gt;下图显示了如何从 lib 和 web 中导入 &lt;code&gt;lib/foo/a.dart&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dart.dev/assets/libraries/import-lib-rules-e1777e235dd56aa23f770babcccedb6a12be80af2c3e63065640b889d78be595.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;有条件地导入和导出库文件&#34;&gt;有条件地导入和导出库文件&lt;/h2&gt;
&lt;p&gt;如果你的库支持多个平台，那么你可能需要有条件地导入或导出库文件。一个常见的用例是一个同时支持 web 和原生平台的库。&lt;/p&gt;
&lt;p&gt;要有条件的导入或导出，你需要检查 &lt;code&gt;dart:*&lt;/code&gt; 库的存在。下面是一个有条件导出代码的例子，它检查 &lt;code&gt;dart:io&lt;/code&gt; 和 &lt;code&gt;dart:html&lt;/code&gt; 的存在:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/hw_none.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stub&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dart&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/hw_io.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dart&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dart&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;src/hw_html.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// dart:html implementation
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是这段代码的作用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在一个可以使用 &lt;code&gt;dart:io&lt;/code&gt; 的应用程序中(例如，一个命令行应用程序)，导出 &lt;code&gt;src/hw_io.dart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在一个可以使用 &lt;code&gt;dart:html&lt;/code&gt; 的应用程序中(一个 web 应用程序)，导出 &lt;code&gt;src/hw_html.dart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;否则，导出 &lt;code&gt;src/hw_none.dart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要有条件地导入一个文件，使用与上面相同的代码，但将 &lt;code&gt;exporrt&lt;/code&gt; 改为 &lt;code&gt;import&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注意：有条件的导入或导出只检查库在当前平台上是否可用，而不是检查是否实际导入或使用。&lt;/p&gt;
&lt;p&gt;所有有条件导出的库都必须实现相同的 API。例如，这里是 &lt;code&gt;dart:io&lt;/code&gt; 的实现:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dart:io&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alarm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Hello World from the VM!&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里是默认的实现，它是一个抛出 UnsupportedErrors 的 stub。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alarm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UnsupportedError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;hw_none alarm&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UnsupportedError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;hw_none message&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在任何平台上，你都可以导入有条件导出代码的库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:hw_mp/hw_mp.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;提供补充文件&#34;&gt;提供补充文件&lt;/h2&gt;
&lt;p&gt;一个设计良好的库包是很容易测试的。我们建议你使用 &lt;a href=&#34;https://github.com/dart-lang/test&#34;&gt;test&lt;/a&gt; 包来编写测试，将测试代码放在测试包顶部的 &lt;code&gt;test&lt;/code&gt; 目录中。&lt;/p&gt;
&lt;p&gt;如果你创建了任何旨在供公众使用的命令行工具，请将这些工具放在 &lt;code&gt;bin&lt;/code&gt; 目录下，这是公共的。启用从命令行运行工具，使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-global#activating-a-package&#34;&gt;pub global activate&lt;/a&gt;。将工具列在 pubspec 的&lt;a href=&#34;https://dart.dev/tools/pub/pubspec#executables&#34;&gt;可执行文件部分&lt;/a&gt;，允许用户直接运行它，而无需调用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-global#running-a-script-using-pub-global-run&#34;&gt;pub global run&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果你包含了一个如何使用你的库的例子，这将会很有帮助。这将被放入软件包顶部的 &lt;code&gt;example&lt;/code&gt; 目录中。&lt;/p&gt;
&lt;p&gt;你在开发过程中创建的任何工具或可执行文件，如果不是公开使用的，都会进入 &lt;code&gt;tool&lt;/code&gt; 目录。&lt;/p&gt;
&lt;p&gt;如果你把你的库发布到 pub.dev 站点，其他需要的文件，如 &lt;code&gt;README.md&lt;/code&gt; 和 &lt;code&gt;CHANGELOG.md&lt;/code&gt;，将在&lt;a href=&#34;https://dart.dev/tools/pub/publishing&#34;&gt;发布软件包&lt;/a&gt;中描述。有关如何组织包目录的更多信息，请参见 &lt;a href=&#34;https://dart.dev/tools/pub/package-layout&#34;&gt;pub 包布局惯例&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;编写库文档&#34;&gt;编写库文档&lt;/h2&gt;
&lt;p&gt;你可以使用 &lt;a href=&#34;https://github.com/dart-lang/dartdoc#dartdoc&#34;&gt;dartdoc&lt;/a&gt; 工具为你的库生成 API 文档。Dartdoc 解析源码寻找&lt;a href=&#34;https://dart.dev/guides/language/effective-dart/documentation#doc-comments&#34;&gt;文档注释&lt;/a&gt;，其中使用了 &lt;code&gt;///&lt;/code&gt; 语法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;c1&#34;&gt;/// The event handler responsible for updating the badge in the UI.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;updateBadge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于生成文档的例子，请看 &lt;a href=&#34;https://pub.dev/documentation/shelf/latest&#34;&gt;shelf 文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;注意：要在生成的文档中包含任何库级文档，你必须指定 &lt;code&gt;library&lt;/code&gt; 指令。请参阅 &lt;a href=&#34;https://github.com/dart-lang/dartdoc/issues/1082&#34;&gt;问题 1082&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;分发一个开源库&#34;&gt;分发一个开源库&lt;/h2&gt;
&lt;p&gt;如果你的库是开源的，我们建议在 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt; 站点上分享它。要发布或更新库，请使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-lish&#34;&gt;pub publish&lt;/a&gt;，它可以上传您的包并创建或更新其页面。例如，请看 &lt;a href=&#34;https://pub.dev/packages/shelf&#34;&gt;shelf 包&lt;/a&gt;的页面。有关如何准备发布软件包的详细信息，请参见&lt;a href=&#34;https://dart.dev/tools/pub/publishing&#34;&gt;发布包&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;pub.dev 站点不仅托管您的软件包，而且还生成和托管您软件包的 API 参考文档。最新生成的文档的链接在软件包的 &lt;strong&gt;About&lt;/strong&gt; 框中；例如，请看 shelf 包的 &lt;a href=&#34;https://pub.dev/documentation/shelf&#34;&gt;API 文档&lt;/a&gt;。到以前版本的文档的链接在软件包页面的版本选项卡中。&lt;/p&gt;
&lt;p&gt;要确保你的软件包的 API 文档在 pub.dev 网站上看起来不错，请按照以下步骤进行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在发布你的软件包之前，运行 &lt;a href=&#34;https://github.com/dart-lang/dartdoc#dartdoc&#34;&gt;dartdoc&lt;/a&gt; 工具，以确保你的 docs 成功生成，并且看起来符合预期。&lt;/li&gt;
&lt;li&gt;发布软件包后，检查 &lt;strong&gt;Versions&lt;/strong&gt; 选项卡以确保文档成功生成。&lt;/li&gt;
&lt;li&gt;如果文档根本没有生成，点击 &lt;strong&gt;Verrsions&lt;/strong&gt; 选项卡中的 &lt;strong&gt;failed&lt;/strong&gt;，查看 dartdoc 的输出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;资源&#34;&gt;资源&lt;/h2&gt;
&lt;p&gt;使用以下资源了解更多关于库包的信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/language/language-tour&#34;&gt;语言之旅&lt;/a&gt;中的&lt;a href=&#34;https://dart.dev/guides/language/language-tour#libraries-and-visibility&#34;&gt;库和可见性&lt;/a&gt;包括使用库文件。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/packages&#34;&gt;包&lt;/a&gt;文档很有用，特别是&lt;a href=&#34;https://dart.dev/tools/pub/package-layout&#34;&gt;包的布局约定&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/private-files&#34;&gt;不应提交的内容&lt;/a&gt;涵盖了哪些不应该被检查到源代码库中。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang&#34;&gt;dart-lang&lt;/a&gt; 组织下的较新的库包倾向于展示最佳实践。可以考虑研究这些例子：&lt;a href=&#34;https://github.com/dart-lang/dart_style&#34;&gt;dart_style&lt;/a&gt;、&lt;a href=&#34;https://github.com/dart-lang/path&#34;&gt;path&lt;/a&gt;、&lt;a href=&#34;https://github.com/dart-lang/shelf&#34;&gt;shelf&lt;/a&gt;、&lt;a href=&#34;https://github.com/dart-lang/source_gen&#34;&gt;source_gen&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/dart-lang/test&#34;&gt;test&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/packages">packages</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/creating-packages/</guid>
                <pubDate>Tue, 30 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>发布包</title>
                <link>https://ohmyweekly.github.io/notes/publishing-packages/</link>
                
                
                <description>&lt;blockquote&gt;Publishing packages&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://dart.dev/guides/packages&#34;&gt;pub 软件包管理器&lt;/a&gt;不仅仅是用来使用别人的软件包。它还允许你与世界分享你的软件包。如果您有一个有用的项目，并且您希望其他人能够使用它，请使用 &lt;code&gt;pub publish&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;注意: 如果要发布到 pub.dev 以外的其他位置，或者要防止在任何地方发布，请使用 &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec&lt;/a&gt; 中定义的  &lt;code&gt;publish_to&lt;/code&gt; 字段。&lt;/p&gt;
&lt;h2 id=&#34;发布是永远的&#34;&gt;发布是永远的&lt;/h2&gt;
&lt;p&gt;请记住，发布是永远的。只要你发布你的包，用户就可以依赖它。一旦他们开始这样做，删除包就会破坏他们的包。为了避免这种情况，&lt;a href=&#34;https://pub.dev/policy&#34;&gt;pub.dev 政策&lt;/a&gt;不允许取消发布软件包，除非是极少数情况。&lt;/p&gt;
&lt;p&gt;你可以随时上传你的包的新版本，但旧的包将继续为那些还没有准备好升级的用户提供服务。&lt;/p&gt;
&lt;p&gt;对于已经发布的包，如果不再相关或正在维护，你可以&lt;a href=&#34;https://dart.dev/tools/pub/publishing#discontinue&#34;&gt;将其标记为停止发布&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;准备发布&#34;&gt;准备发布&lt;/h2&gt;
&lt;p&gt;当发布一个软件包时，遵循 &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec 格式&lt;/a&gt;和&lt;a href=&#34;https://dart.dev/tools/pub/package-layout&#34;&gt;包布局惯例&lt;/a&gt;是很重要的。其中有些是必须的，以便其他人能够使用你的软件包。另一些则是为了帮助用户更容易理解和使用您的软件包而提出的建议。在这两种情况下，pub 都会尝试帮助你，指出哪些改变会帮助你的软件包在 Dart 生态系统中发挥得更好。上传包有一些额外的要求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;你必须包含一个包含&lt;a href=&#34;https://opensource.org/&#34;&gt;开源许可证&lt;/a&gt;的 &lt;code&gt;LICENSE&lt;/code&gt; 文件。我们推荐 &lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;BSD 许可证&lt;/a&gt;，这是 Dart 自己使用的。你也必须有合法的权利来重新发布你上传的任何东西作为你的包的一部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你的软件包在经过 gzip 压缩后必须小于 10 MB。如果太大，可以考虑将其分割成多个包，或者减少包含的资源或例子的数量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你的包应该只依赖托管的依赖项(来自默认的 pub 包服务器)和 SDK 依赖项(&lt;code&gt;sdk: flutter&lt;/code&gt;)。这些限制确保了你的包的依赖性不会在未来变得不可用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;您必须有一个 &lt;a href=&#34;https://support.google.com/accounts/answer/27441&#34;&gt;Google 帐户&lt;/a&gt;，pub 用来管理包的上传权限。您的 Google 账户可以与 Gmail 地址或任何其他电子邮件地址关联。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：除非您使用&lt;a href=&#34;https://dart.dev/tools/pub/verified-publishers&#34;&gt;已验证的发布者&lt;/a&gt;发布，否则 pub.dev 会显示与您的 Google 帐户关联的电子邮件地址。&lt;/p&gt;
&lt;h3 id=&#34;重要文件&#34;&gt;重要文件&lt;/h3&gt;
&lt;p&gt;Pub 使用一些文件的内容为你的包创建一个页面，地址是 &lt;code&gt;pub.dev/packages/&amp;lt;your_package&amp;gt;&lt;/code&gt;。以下是影响你的包的页面外观的文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;README.md: &lt;code&gt;README.md&lt;/code&gt; 文件是你的包页面中的主要内容。该文件的内容以 &lt;a href=&#34;https://pub.dev/packages/markdown&#34;&gt;Markdown&lt;/a&gt; 的形式呈现。&lt;/li&gt;
&lt;li&gt;CHANGELOG.md：&lt;code&gt;CHANGELOG.md&lt;/code&gt; 文件是你的包页面中的主要内容。你的包的 &lt;code&gt;CHANGELOG.md&lt;/code&gt; 文件，如果找到的话，也会在你的包页面的一个标签中显示，这样开发者就可以直接从 pub.dev 中读取它。该文件的内容会以 &lt;a href=&#34;https://pub.dev/packages/markdown&#34;&gt;Markdown&lt;/a&gt; 的形式呈现。&lt;/li&gt;
&lt;li&gt;pubspec: 你的包的 &lt;code&gt;pubspec.yaml&lt;/code&gt; 文件用来在你的包的页面右侧填写关于你的包的详细信息，比如它的描述、主页等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用经过验证的发布者的优势&#34;&gt;使用经过验证的发布者的优势&lt;/h3&gt;
&lt;p&gt;您可以使用已验证的发布者（推荐）或独立的谷歌账户发布软件包。使用经过验证的发布者有以下优势。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;您的包的消费者知道发布者的域名已经被验证。&lt;/li&gt;
&lt;li&gt;您可以避免让 pub.dev 显示您的个人电子邮件地址。取而代之的是，pub.dev会显示发布者的域名和联系地址。&lt;/li&gt;
&lt;li&gt;经验证的发布者徽章 pub.dev 经验证的发布者标识会在搜索页面和单个软件包页面上显示在您的软件包名称旁边。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建一个验证过的发布者&#34;&gt;创建一个验证过的发布者&lt;/h3&gt;
&lt;p&gt;要创建一个已验证的发布者，请按照以下步骤进行。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进入 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;使用 Google 账户登录 pub.dev。&lt;/li&gt;
&lt;li&gt;在右上角的用户菜单中，选择创建发布者。&lt;/li&gt;
&lt;li&gt;输入您要与您的发布者相关联的域名(例如，&lt;code&gt;dart.dev&lt;/code&gt;)，然后单击&amp;quot;创建发布者&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;在确认对话框中，选择&amp;quot;确定&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;如果提示，完成验证流程，这将打开 &lt;a href=&#34;https://search.google.com/search-console/about&#34;&gt;Google 搜索控制台&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;在添加 DNS 记录时，可能需要几个小时后，搜索控制台才会反映出变化。&lt;/li&gt;
&lt;li&gt;验证流程完成后，返回步骤4。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;发布你的包&#34;&gt;发布你的包&lt;/h2&gt;
&lt;p&gt;使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-lish&#34;&gt;pub publish&lt;/a&gt; 命令来首次发布您的软件包，或将其更新到新版本。&lt;/p&gt;
&lt;h3 id=&#34;执行-dry-run&#34;&gt;执行 dry run&lt;/h3&gt;
&lt;p&gt;为了测试 &lt;code&gt;pub publish&lt;/code&gt; 的工作情况，你可以进行一次 dry run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ pub publish --dry-run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pub 会确保你的软件包遵循 &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec 格式&lt;/a&gt;和&lt;a href=&#34;https://dart.dev/tools/pub/package-layout&#34;&gt;包布局约定&lt;/a&gt;，然后将你的软件包上传到 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt;。Pub 还会向你展示它打算发布的所有文件。下面是一个发布名为 &lt;code&gt;transmogrify&lt;/code&gt; 的软件包的例子:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;Publishing&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;transmogrify&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;.gitignore&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;CHANGELOG.md&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;README.md&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;lib&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;transmogrify.dart&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;src&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;transmogrifier.dart&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;transmogrification.dart&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;pubspec.yaml&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;test&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;transmogrify_test.dart&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;Package&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;has&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;warnings.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;发布&#34;&gt;发布&lt;/h3&gt;
&lt;p&gt;当你准备好发布你的包时，请删除 &lt;code&gt;--dry-run&lt;/code&gt; 参数:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ pub publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意: pub 命令目前不支持直接将新软件包发布到已验证的发布者。作为一个临时的变通方法，可以将新的软件包发布到Google账户，然后将包&lt;a href=&#34;https://dart.dev/tools/pub/publishing#transferring-a-package-to-a-verified-publisher&#34;&gt;转移到发布者&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;一旦软件包被转移到发布者，你就可以使用 &lt;code&gt;pub publish&lt;/code&gt; 更新软件包。&lt;/p&gt;
&lt;p&gt;当你的包成功上传到 pub.dev 后，任何 pub 用户都可以下载它或在他们的项目中依赖它。例如，如果你刚刚发布了 1.0.0 版本的 &lt;code&gt;transmogrify&lt;/code&gt; 包，那么另一个 Dart 开发者可以在他们的 &lt;code&gt;pubspec.yaml&lt;/code&gt; 中添加它作为依赖:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;dependencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;transmogrify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;^&lt;span class=&#34;m&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;将软件包传输给已验证的发布者&#34;&gt;将软件包传输给已验证的发布者&lt;/h3&gt;
&lt;p&gt;要将一个软件包转移到已验证的发布者，您必须是该软件包的&lt;a href=&#34;https://dart.dev/tools/pub/publishing#uploaders&#34;&gt;上传者&lt;/a&gt;和已验证发布者的管理员。&lt;/p&gt;
&lt;p&gt;注意：这个过程是不可逆的。一旦你将一个软件包转移到一个发布者，你不能将它转移回个人账户。&lt;/p&gt;
&lt;p&gt;以下是如何将软件包转移到已验证的发布者:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用一个被列为软件包上传者的 Google 账户登录到 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;进入软件包的详细信息页面(例如，&lt;code&gt;https://pub.dev/packages/http&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;选择&amp;quot;管理&amp;quot;选项卡。&lt;/li&gt;
&lt;li&gt;输入发布者的名称，然后单击&amp;quot;传输到发布者&amp;rdquo;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;哪些文件会被发布&#34;&gt;哪些文件会被发布？&lt;/h3&gt;
&lt;p&gt;您的软件包中的&lt;strong&gt;所有&lt;/strong&gt;文件都包含在已发布的软件包中，但有以下例外:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何包的目录。&lt;/li&gt;
&lt;li&gt;您的软件包的 &lt;a href=&#34;https://dart.dev/tools/pub/glossary#lockfile&#34;&gt;lockfile&lt;/a&gt; 文件。&lt;/li&gt;
&lt;li&gt;如果你没有使用 Git，所有隐藏的文件（也就是名字以 &lt;code&gt;.&lt;/code&gt; 开头的文件）。&lt;/li&gt;
&lt;li&gt;如果使用 Git，则是所有被 &lt;code&gt;.gitignore&lt;/code&gt; 文件忽略的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请确保删除任何你不想包含的文件(或将它们添加到 &lt;code&gt;.gitignore&lt;/code&gt; 中)。 &lt;code&gt;pub publish&lt;/code&gt; 在上传你的包之前列出了它要发布的所有文件，所以在完成上传之前要仔细检查列表。&lt;/p&gt;
&lt;h2 id=&#34;上传者&#34;&gt;上传者&lt;/h2&gt;
&lt;p&gt;谁发布了软件包的第一个版本，谁就会自动成为第一个也是唯一一个被授权上传该软件包其他版本的人。要允许或不允许其他人上传版本，请使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-uploader&#34;&gt;pub uploader&lt;/a&gt; 命令或将软件包转移到&lt;a href=&#34;https://dart.dev/tools/pub/verified-publishers&#34;&gt;已验证的发布者&lt;/a&gt;那里。&lt;/p&gt;
&lt;p&gt;如果一个软件包有一个经过验证的发布者，那么该软件包的 pub.dev 页面会显示发布者的域名。否则，该页面将显示该软件包的授权上传者的电子邮件地址。&lt;/p&gt;
&lt;h2 id=&#34;发布预发包&#34;&gt;发布预发包&lt;/h2&gt;
&lt;p&gt;当你在做一个包的时候，考虑把它作为一个预发布。当以下任何一种情况发生时，预发布都是有用的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你正在积极开发软件包的下一个主要版本。&lt;/li&gt;
&lt;li&gt;你想为软件包的下一个发行候选版本招募测试者。&lt;/li&gt;
&lt;li&gt;该包依赖于 Dart 或 Flutter SDK 的不稳定版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正如在&lt;a href=&#34;https://semver.org/spec/v2.0.0-rc.1.html&#34;&gt;语义版本化&lt;/a&gt;中所描述的那样，为了使一个版本的预发布，你要给版本附加一个后缀。例如，要对 &lt;code&gt;2.0.0&lt;/code&gt; 版本进行预发布，你可以使用 &lt;code&gt;2.0.0-dev.1&lt;/code&gt; 版本。以后，当你发布 &lt;code&gt;2.0.0&lt;/code&gt; 版本时，它将优先于所有 &lt;code&gt;2.0.0-XXX&lt;/code&gt; 预发布版本。&lt;/p&gt;
&lt;p&gt;因为 pub 更倾向于在可用的时候发布稳定版，所以一个预发布包的用户可能需要改变他们的依赖约束。例如，如果用户想要测试 2.1 版本的预发布包，那么他们可以指定 &lt;code&gt;^2.1.0-dev.1&lt;/code&gt;，而不是 &lt;code&gt;^2.0.0&lt;/code&gt; 或 &lt;code&gt;^2.1.0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注意: 如果依赖关系图中的稳定包依赖于一个 prerelease，那么 pub 会选择那个 prerelease 而不是稳定版本。&lt;/p&gt;
&lt;p&gt;当一个 prerelease 被发布到 pub.dev 时，软件包页面会同时显示到 prerelease 和稳定版的链接。prerelease 不会影响分析得分，不会出现在搜索结果中，也不会替换包的 &lt;code&gt;README.md&lt;/code&gt; 和文档。&lt;/p&gt;
&lt;h2 id=&#34;将软件包标记为已停产的软件包&#34;&gt;将软件包标记为已停产的软件包&lt;/h2&gt;
&lt;p&gt;尽管软件包总是保持发布，但向开发者发出信号，表明一个软件包不再被积极维护，是很有用的。为此，您可以将一个软件包标记为 &lt;code&gt;discontinued&lt;/code&gt;。一个已停用的软件包仍然可以在 pub.dev 上发布和查看，但它有一个清晰的 DISCONTINUED 徽章，并且不会出现在 pub.dev 的搜索结果中。&lt;/p&gt;
&lt;p&gt;要将软件包标记为已停用，请使用该软件包的上传者或已验证的发布者管理员的 Google 帐户登录 pub.dev。然后使用单个软件包的管理选项卡将该软件包标记为已停用。&lt;/p&gt;
&lt;h2 id=&#34;资源&#34;&gt;资源&lt;/h2&gt;
&lt;p&gt;有关更多信息，请参见以下 pub 命令的参考页面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-lish&#34;&gt;pub publish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-uploader&#34;&gt;pub uploader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/packages">packages</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/publishing-packages/</guid>
                <pubDate>Tue, 30 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>编写HTTP客户端和服务器</title>
                <link>https://ohmyweekly.github.io/notes/write-http-clients/</link>
                
                
                <description>&lt;blockquote&gt;Write HTTP clients &amp;amp; servers&lt;/blockquote&gt;&lt;p&gt;有什么意义呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 协议允许客户端和服务器进行通信。&lt;/li&gt;
&lt;li&gt;dart:io 包有编写 HTTP 程序的类。&lt;/li&gt;
&lt;li&gt;服务器监听主机和端口上的请求。&lt;/li&gt;
&lt;li&gt;客户端使用 HTTP 方法请求发送请求。&lt;/li&gt;
&lt;li&gt;http_server 包提供了更高级别的构件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前提条件: HTTP 服务器和客户端严重依赖 future 和流，本教程中没有解释这些内容。你可以从&lt;a href=&#34;https://dart.dev/codelabs/async-await&#34;&gt;异步编程 codelab&lt;/a&gt;和&lt;a href=&#34;https://dart.dev/tutorials/language/streams&#34;&gt;流教程&lt;/a&gt;中了解它们。&lt;/p&gt;
&lt;p&gt;HTTP（超文本传输协议）是一种通信协议，用于通过互联网将数据从一个程序发送到另一个程序。数据传输的一端是服务器，另一端是客户端。客户端通常是基于浏览器的（用户在浏览器中输入或在浏览器中运行的脚本），但也可能是一个独立的程序。&lt;/p&gt;
&lt;p&gt;服务器与主机和端口绑定（它与一个IP地址和一个端口号建立专属连接）。然后服务器监听请求。由于 Dart 的异步性，服务器可以同时处理很多请求，具体如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器监听&lt;/li&gt;
&lt;li&gt;客户端连接&lt;/li&gt;
&lt;li&gt;服务器接受并接收请求(并继续监听)&lt;/li&gt;
&lt;li&gt;服务器可以继续接受其他请求&lt;/li&gt;
&lt;li&gt;服务器写入请求的响应或几个请求，可能是交错的请求&lt;/li&gt;
&lt;li&gt;服务器最终结束(关闭)响应&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Dart 中，&lt;a href=&#34;https://api.dart.dev/stable/dart-io/dart-io-library.html&#34;&gt;dart:io&lt;/a&gt; 库包含了编写 HTTP 客户端和服务器所需的类和函数。此外，&lt;a href=&#34;https://pub.dev/packages/http_server&#34;&gt;http_server&lt;/a&gt; 包包含了一些更高层次的类，使其更容易编写客户端和服务器。&lt;/p&gt;
&lt;p&gt;重要：基于浏览器的程序不能使用 dart:io 库。&lt;/p&gt;
&lt;p&gt;dart:io 库中的 API 只适用于独立的命令行程序。它们不能在浏览器中工作。要从基于浏览器的客户端发出 HTTP 请求，请参考 &lt;a href=&#34;https://api.dart.dev/stable/dart-html/HttpRequest-class.html&#34;&gt;dart:html HttpRequest&lt;/a&gt; 类。&lt;/p&gt;
&lt;p&gt;本教程提供了几个例子，说明编写 Dart HTTP 服务器和客户端是多么容易。从服务器的 &lt;code&gt;hello world&lt;/code&gt; 开始，你将学习如何编写服务器的代码，从绑定和监听到响应请求。你还可以学习到客户端：提出不同类型的请求(GET 和 POST)，编写基于浏览器和命令行的客户端。&lt;/p&gt;
&lt;h2 id=&#34;获取源码&#34;&gt;获取源码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;获取 Dart 教程的&lt;a href=&#34;https://github.com/dart-lang/dart-tutorials-samples/archive/master.zip&#34;&gt;示例代码&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;查看 &lt;code&gt;httpserver&lt;/code&gt; 目录，其中包含本教程所需的源码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;运行-hello-world-服务器&#34;&gt;运行 hello world 服务器&lt;/h2&gt;
&lt;p&gt;本节的示例文件：&lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/hello_world_server.dart&#34;&gt;hello_world_server.dart&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;让我们从一个小型的服务器开始，用字符串 &lt;code&gt;Hello, world&lt;/code&gt; 来响应所有的请求。&lt;/p&gt;
&lt;p&gt;在命令行中，运行 &lt;code&gt;hello_world_server.dart&lt;/code&gt; 脚本:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;httpserver&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dart&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello_world_server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dart&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;listening&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;localhost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4040&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在任何浏览器中，访问 &lt;a href=&#34;http://localhost:4040/&#34;&gt;localhost:4040&lt;/a&gt;。浏览器会显示 &lt;code&gt;Hello, world!&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dart.dev/tutorials/server/images/hello_world_response.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这种情况下，服务器是一个 Dart 程序，客户端是你使用的浏览器。然而，你可以用 Dart 编写客户端程序-无论是基于浏览器的客户端脚本，还是独立的程序。&lt;/p&gt;
&lt;h3 id=&#34;快速浏览一下代码&#34;&gt;快速浏览一下代码&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;hello world&lt;/code&gt; 服务器的代码中，一个 HTTP 服务器与主机和端口绑定，监听 HTTP 请求，并写入响应。需要注意的是，该程序导入了 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/dart-io-library.html&#34;&gt;dart:io&lt;/a&gt; 库，其中包含了服务器端程序和客户端程序的 HTTP 相关类(但不包含 Web 应用)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dart:io&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;InternetAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loopbackIPv4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;m&#34;&gt;4040&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Listening on localhost:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Hello, world!&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来的几节内容包括服务器端绑定、发出客户端 GET 请求、监听和响应。&lt;/p&gt;
&lt;h2 id=&#34;将服务器绑定到主机和端口&#34;&gt;将服务器绑定到主机和端口&lt;/h2&gt;
&lt;p&gt;本节示例：&lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/hello_world_server.dart&#34;&gt;hello_world_server.dart&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main()&lt;/code&gt; 中的第一条语句使用 &lt;code&gt;HttpServer.bind()&lt;/code&gt; 创建一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpServer-class.html&#34;&gt;HttpServer&lt;/a&gt; 对象，并将其绑定到主机和端口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;InternetAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loopbackIPv4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;m&#34;&gt;4040&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该代码使用 &lt;code&gt;await&lt;/code&gt; 异步调用 &lt;code&gt;bind&lt;/code&gt; 方法。&lt;/p&gt;
&lt;h3 id=&#34;主机名&#34;&gt;主机名&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bind()&lt;/code&gt; 的第一个参数是指定主机名。你可以用一个字符串来指定一个特定的主机名或IP地址，也可以用 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/InternetAddress-class.html&#34;&gt;InternetAddress&lt;/a&gt; 类提供的这些预定义的值来指定主机。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;用例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;回环 IPv4 或 loopbackIPv6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;服务器在 loopback 地址上监听客户端活动，该地址实际上是 localhost。使用IP协议的4或6版本。这些主要用于测试。我们建议您使用这些值而不是 &lt;code&gt;localhost&lt;/code&gt; 或 &lt;code&gt;127.0.0.1&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;任何 IPv4 或 anyIPv6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;服务器监听任何 IP 地址上指定端口上的客户端活动。使用IP协议的4或6版本。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;默认情况下，当使用V6互联网地址时，也会使用V4监听器。&lt;/p&gt;
&lt;h3 id=&#34;端口&#34;&gt;端口&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bind()&lt;/code&gt; 的第二个参数是指定端口的整数。端口唯一地标识主机上的服务。1024 以下的端口号为标准服务保留(0除外)。例如，FTP 数据传输通常在端口20上运行，每日报价在端口17上运行，HTTP 在端口80上运行。你的程序应该使用1024以上的端口号。如果端口已经在使用中，你的服务器的连接将被拒绝。&lt;/p&gt;
&lt;h3 id=&#34;侦听请求&#34;&gt;侦听请求&lt;/h3&gt;
&lt;p&gt;服务器使用 &lt;code&gt;await for&lt;/code&gt; 开始监听 HTTP 请求。每收到一个请求，代码就会发送一个 &amp;ldquo;Hello, world!&amp;rdquo; 的响应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Hello, world!&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将在&lt;a href=&#34;https://dart.dev/tutorials/server/httpserver#httprequest-object&#34;&gt;监听和处理请求&lt;/a&gt;一节中了解更多关于 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpRequest-class.html&#34;&gt;HttpRequest&lt;/a&gt; 对象包含的内容以及如何编写响应。但首先，让我们看看客户端产生请求的一种方式。&lt;/p&gt;
&lt;h2 id=&#34;使用-html-表单发出-get-请求&#34;&gt;使用 HTML 表单发出 GET 请求&lt;/h2&gt;
&lt;p&gt;本节的示例文件：&lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/number_thinker.dart&#34;&gt;number_thinker.dart&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/web/make_a_guess.html&#34;&gt;make_a_guess.html&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本节介绍了一个命令行服务器，它可以随机选择一个0到9之间的数字。客户端是一个基本的 HTML 网页，&lt;code&gt;make_a_guess.html&lt;/code&gt;，你可以用它来猜数字。&lt;/p&gt;
&lt;p&gt;试试吧&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运行数字思考者服务器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在命令行，运行 &lt;code&gt;number_thinker.dart&lt;/code&gt; server。你应该看到类似下面的东西:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; httpserver
$ dart bin/number_thinker.dart
I&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;m thinking of a number: &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;启动网络服务器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从应用程序的顶部目录运行 &lt;code&gt;webdev serve&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;更多信息：&lt;a href=&#34;https://dart.dev/tools/webdev&#34;&gt;webdev 文档&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;打开 HTML 页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在浏览器中，进入 &lt;a href=&#34;http://localhost:8080/make_a_guess.html&#34;&gt;localhost:8080/make_a_guess.html&lt;/a&gt;。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;做一个猜测&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选择一个数字，然后按猜测按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dart.dev/tutorials/server/images/guessing.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在客户端中没有涉及到 Dart 代码。客户端请求是通过浏览器向 Dart 服务器发出的，在 &lt;code&gt;make_a_guess.html&lt;/code&gt; 中的 HTML 表单，它提供了一个自动制定和发送客户端 HTTP 请求的方法。该表单包含下拉列表和按钮。该表单还指定了 URL，其中包括端口号，以及请求的种类（请求方法）。它还可能包含建立查询字符串的元素。&lt;/p&gt;
&lt;p&gt;下面是 &lt;code&gt;make_a_guess.html&lt;/code&gt; 中的表单 HTML。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://localhost:4041&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;span class=&#34;c&#34;&gt; ··· &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;9&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Guess&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是表单的工作原理:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表单的 &lt;code&gt;action&lt;/code&gt; 属性被分配给发送请求的 URL&lt;/li&gt;
&lt;li&gt;表单的 &lt;code&gt;method&lt;/code&gt; 属性定义了请求的类型，这里是 &lt;code&gt;GET&lt;/code&gt;。其他常见的请求类型包括 POST、PUT 和 DELETE。&lt;/li&gt;
&lt;li&gt;表单中任何有名称(&lt;code&gt;name&lt;/code&gt;)的元素，比如 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 元素，都会成为查询字符串中的一个参数。&lt;/li&gt;
&lt;li&gt;当按下提交按钮(&lt;code&gt;&amp;lt;input type=&amp;quot;submit&amp;quot;...&amp;gt;&lt;/code&gt;)时，提交按钮会根据表单的内容制定请求并发送。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一个-restful-get-请求&#34;&gt;一个 RESTful GET 请求&lt;/h3&gt;
&lt;p&gt;REST(REpresentational State Transfer)是一套设计 Web 服务的原则。乖巧的 HTTP 客户端和服务器遵守为 GET 请求定义的 REST 原则。&lt;/p&gt;
&lt;p&gt;一个 GET 请求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只检索数据&lt;/li&gt;
&lt;li&gt;不会改变服务器的状态&lt;/li&gt;
&lt;li&gt;有长度限制&lt;/li&gt;
&lt;li&gt;可以在请求的 URL 中发送查询字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这个例子中，客户端发出了一个符合 REST 的 GET 请求。&lt;/p&gt;
&lt;h2 id=&#34;监听和处理请求&#34;&gt;监听和处理请求&lt;/h2&gt;
&lt;p&gt;本节的示例文件: &lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/number_thinker.dart&#34;&gt;number_thinker.dart&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/web/make_a_guess.html&#34;&gt;make_a_guess.html&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;现在你已经看到这个基于浏览器的客户端的例子，让我们看看数字思维服务器的 Dart 代码，从 &lt;code&gt;main()&lt;/code&gt; 开始。&lt;/p&gt;
&lt;p&gt;再一次，服务器绑定了一个主机和端口。在这里，每收到一个请求都会调用顶层的 &lt;code&gt;handleRequest()&lt;/code&gt; 方法。因为 HttpServer 实现了 &lt;a href=&#34;https://api.dart.dev/stable/dart-async/Stream-class.html&#34;&gt;Stream&lt;/a&gt;，所以可以使用 &lt;code&gt;await for&lt;/code&gt; 来处理请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dart:io&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dart:math&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;intGenerator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myNumber&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;intGenerator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;I&amp;#39;m thinking of a number: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myNumber&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;HttpServer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;InternetAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loopbackIPv4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;m&#34;&gt;4041&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;handleRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当一个 &lt;code&gt;GET&lt;/code&gt; 请求到达时，&lt;code&gt;handleRequest()&lt;/code&gt; 方法会调用 &lt;code&gt;handleGet()&lt;/code&gt; 来处理该请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handleRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;GET&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;handleGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// ···
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Exception in handleRequest: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Request handled.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpRequest-class.html&#34;&gt;HttpRequest&lt;/a&gt; 对象有很多属性，提供了关于请求的信息。下表列出了一些有用的属性。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;信息&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;method&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;lsquo;GET&amp;rsquo;, &amp;lsquo;POST&amp;rsquo;, &amp;lsquo;PUT&amp;rsquo; 等方法中的一个。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;uri&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/Uri-class.html&#34;&gt;Uri&lt;/a&gt; 对象：scheme、host、port、query string 和其他关于请求资源的信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;response&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpResponse-class.html&#34;&gt;HttpResponse&lt;/a&gt; 对象：服务器将其响应写入其中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;headers&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpHeaders-class.html&#34;&gt;HttpHeaders&lt;/a&gt; 对象：请求的头信息，包括 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/ContentType-class.html&#34;&gt;ContentType&lt;/a&gt;、内容长度、日期等。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;使用方法属性&#34;&gt;使用方法属性&lt;/h3&gt;
&lt;p&gt;下面的数想器例子中的代码使用 HttpRequest 的 &lt;code&gt;method&lt;/code&gt; 属性来确定收到了什么样的请求。这个服务器只处理 GET 请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;GET&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;handleGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statusCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;methodNotAllowed&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Unsupported request: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-uri-属性&#34;&gt;使用 uri 属性&lt;/h3&gt;
&lt;p&gt;在浏览器中输入一个 URL 会产生一个 GET 请求，它只是简单地从指定的资源中请求数据。它可以通过附加在 URI 上的查询字符串随请求发送少量数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handleGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queryParameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ···
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 HttpRequest 对象的 &lt;code&gt;uri&lt;/code&gt; 属性来获取一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/Uri-class.html&#34;&gt;Uri&lt;/a&gt; 对象，这个 Uri 对象包含了用户输入的 URL 的信息。Uri 对象的 &lt;code&gt;queryParameters&lt;/code&gt; 属性是一个 Map，包含查询字符串的组件。通过名称来引用所需的参数。本例使用 &lt;code&gt;q&lt;/code&gt; 来标识猜测的数字。&lt;/p&gt;
&lt;h3 id=&#34;设置响应的状态码&#34;&gt;设置响应的状态码&lt;/h3&gt;
&lt;p&gt;服务器应该设置状态码来表示请求的成功或失败。前面看到数想家将状态码设置为 &lt;code&gt;methodNotAllowed&lt;/code&gt; 来拒绝非 GET 请求。在后面的代码中，为了表示请求成功，响应完成，数想家服务器将 &lt;code&gt;HttpResponse&lt;/code&gt; 状态码设置为 &lt;code&gt;HttpStatus.ok&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handleGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queryParameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statusCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ···
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;HttpStatus.ok&lt;/code&gt; 和 &lt;code&gt;HttpStatus.methodNotAllowed&lt;/code&gt; 是 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpStatus-class.html&#34;&gt;HttpStatus&lt;/a&gt; 类中许多预定义状态码中的两个。另一个有用的预定义状态码是 &lt;code&gt;HttpStatus.notFound&lt;/code&gt;(经典的 404）。&lt;/p&gt;
&lt;p&gt;除了状态码(&lt;code&gt;statusCode&lt;/code&gt;)，HttpResponse 对象还有其他有用的属性:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;信息&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;contentLength&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;响应的长度，-1 表示事先不知道长度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;cookies&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;要在客户端设置的 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/Cookie-class.html&#34;&gt;Cookies&lt;/a&gt; 列表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;encoding&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;编写字符串时使用的&lt;a href=&#34;https://api.dart.dev/stable/dart-convert/Encoding-class.html&#34;&gt;编码&lt;/a&gt;，如 JSON 和 UTF-8。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;headers&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;响应头，是一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpHeaders-class.html&#34;&gt;HttpHeaders&lt;/a&gt; 对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;将响应写到-httpresponse-对象&#34;&gt;将响应写到 HttpResponse 对象&lt;/h3&gt;
&lt;p&gt;每个 HttpRequest 对象都有一个对应的 HttpResponse 对象。服务器通过响应对象将数据发回给客户端。&lt;/p&gt;
&lt;p&gt;使用 HttpResponse 写方法之一(&lt;code&gt;write()&lt;/code&gt;、&lt;code&gt;writeln()&lt;/code&gt;、&lt;code&gt;writeAll()&lt;/code&gt; 或 &lt;code&gt;writeCharCodes()&lt;/code&gt;)将响应数据写入 HttpResponse 对象。或者通过 &lt;code&gt;addStream&lt;/code&gt; 将 &lt;code&gt;HttpResponse&lt;/code&gt; 对象连接到一个流，并写入流。响应完成后关闭对象。关闭 HttpResponse 对象会将数据发回给客户端。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handleGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ···
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;I&amp;#39;m thinking of another number.&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ···
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;从独立的客户端进行-post-请求&#34;&gt;从独立的客户端进行 POST 请求&lt;/h2&gt;
&lt;p&gt;本节的示例文件：&lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_writer_server.dart&#34;&gt;basic_writer_server.dart&lt;/a&gt; 和  &lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_writer_client.dart&#34;&gt;basic_writer_client.dart&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;hello world&lt;/code&gt; 和 &lt;code&gt;number thinker&lt;/code&gt; 的例子中，浏览器生成了简单的 GET 请求，对于更复杂的 GET 请求和其他类型的请求，如 POST、PUT 或 DELETE，你需要写一个客户端程序，其中有两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个独立的客户端程序，它使用 &lt;code&gt;dart:io&lt;/code&gt; 的 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpClient-class.html&#34;&gt;HttpClient&lt;/a&gt; 类。&lt;/li&gt;
&lt;li&gt;基于浏览器的客户端，使用 &lt;a href=&#34;https://api.dart.dev/stable/dart-html/dart-html-library.html&#34;&gt;dart:html&lt;/a&gt; 中的 API。本教程不涉及基于浏览器的客户端。要查看基于浏览器的客户端和相关服务器的代码，请参见 &lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/web/note_client.dart&#34;&gt;note_client.dart&lt;/a&gt;、&lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/note_server.dart&#34;&gt;note_server.dart&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/web/note_taker.html&#34;&gt;note_taker.html&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们看看一个独立的客户端，&lt;code&gt;basic_writer_client.dart&lt;/code&gt; 和它的服务器 &lt;code&gt;basic_writer_server.dart&lt;/code&gt;。客户端发出一个 POST 请求，将 JSON 数据保存到服务器端的文件中。服务器接受请求并保存文件。&lt;/p&gt;
&lt;h4 id=&#34;试试吧&#34;&gt;试试吧&lt;/h4&gt;
&lt;p&gt;在命令行上运行服务器和客户端。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，运行服务器:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; httpserver
$ dart bin/basic_writer_server.dart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在一个新的终端中，运行客户端:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; httpserver
$ dart bin/basic_writer_client.dart
Wrote data &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Han Solo.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看看服务器写入 &lt;code&gt;file.txt&lt;/code&gt; 的 JSON 数据:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Han Solo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;job&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;reluctant hero&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;BFF&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Chewbacca&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;ship&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Millennium Falcon&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;weakness&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;smuggling debts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;客户端创建一个 HttpClient 对象，并使用 &lt;code&gt;post()&lt;/code&gt; 方法进行请求。发起一个请求涉及两个 Future。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;post()&lt;/code&gt; 方法建立与服务器的网络连接并完成第一个 Future，返回一个 HttpClientRequest 对象。&lt;/li&gt;
&lt;li&gt;客户端组成请求对象并关闭它。&lt;code&gt;close()&lt;/code&gt; 方法将请求发送到服务器并返回第二个 Future，它以一个 HttpClientResponse 对象完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dart:io&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dart:convert&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_host&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InternetAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loopbackIPv4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;file.txt&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Han Solo&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;reluctant hero&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;BFF&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Chewbacca&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;ship&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Millennium Falcon&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;weakness&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;smuggling debts&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;HttpClientRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4049&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*1*/&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contentType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ContentType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*2*/&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonEncode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*3*/&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;HttpClientResponse&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*4*/&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*5*/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;/&lt;em&gt;1&lt;/em&gt;/ &lt;code&gt;post()&lt;/code&gt; 方法需要主机、端口和请求资源的路径。除了 &lt;code&gt;post()&lt;/code&gt; 之外，&lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpClient-class.html&#34;&gt;HttpClient&lt;/a&gt; 类还提供了其他类型的请求函数，包括 &lt;code&gt;postUrl()&lt;/code&gt;、&lt;code&gt;get()&lt;/code&gt; 和 &lt;code&gt;open()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;2&lt;/em&gt;/ 一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpClientRequest-class.html&#34;&gt;HttpClientRequest&lt;/a&gt; 对象有一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpHeaders-class.html&#34;&gt;HttpHeaders&lt;/a&gt; 对象，它包含了请求头的信息。对于一些请求头，比如 &lt;code&gt;contentType&lt;/code&gt;，HttpHeaders 有一个针对该请求头的属性。对于其他的请求头，使用 &lt;code&gt;set()&lt;/code&gt; 方法将该请求头放入 HttpHeaders 对象中。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;3&lt;/em&gt;/ 客户端使用 &lt;code&gt;write()&lt;/code&gt; 向请求对象写入数据。编码，在这个例子中是 JSON，与 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/ContentType-class.html&#34;&gt;ContentType&lt;/a&gt; 头中指定的类型相匹配。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;4&lt;/em&gt;/ &lt;code&gt;close()&lt;/code&gt; 方法将请求发送到服务器，完成后返回一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpClientResponse-class.html&#34;&gt;HttpClientResponse&lt;/a&gt; 对象。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;5&lt;/em&gt;/ 来自服务器的 UTF-8 响应将被解码。使用在 &lt;a href=&#34;https://api.dart.dev/stable/dart-convert/dart-convert-library.html&#34;&gt;dart:convert&lt;/a&gt; 库中定义的转换器将数据转换为常规的 Dart 字符串格式。&lt;/p&gt;
&lt;h3 id=&#34;一个-restful-post-请求&#34;&gt;一个 RESTful POST 请求&lt;/h3&gt;
&lt;p&gt;与 GET 请求类似，REST 为 POST 请求提供了指导方针。&lt;/p&gt;
&lt;p&gt;一个 POST 请求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个资源(在这个例子中，一个文件)&lt;/li&gt;
&lt;li&gt;使用一个 URI，其结构与文件和目录路径名相似；例如，URI 没有查询字符串。&lt;/li&gt;
&lt;li&gt;以 JSON 或 XML 格式传输数据&lt;/li&gt;
&lt;li&gt;没有状态，也不会改变服务器的状态。&lt;/li&gt;
&lt;li&gt;无长度限制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个例子中的客户端发出 REST 兼容的 POST 请求。&lt;/p&gt;
&lt;p&gt;要想看到使 REST 兼容的 GET 请求的客户端代码，请看 &lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/number_guesser.dart&#34;&gt;number_guesser.dart&lt;/a&gt;。它是一个独立的客户端，用于数字思考者服务器，定期进行猜测，直到猜对为止。&lt;/p&gt;
&lt;h2 id=&#34;在服务器中处理一个-post-请求&#34;&gt;在服务器中处理一个 POST 请求&lt;/h2&gt;
&lt;p&gt;本节的示例文件：&lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_writer_server.dart&#34;&gt;basic_writer_server.dart&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_writer_client.dart&#34;&gt;basic_writer_client.dart&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;一个 HttpRequest 对象是一个字节列表流(&lt;code&gt;Stream&amp;lt;List&amp;lt;int&amp;gt;&lt;/code&gt;)。要获得客户端发送的数据，就要监听 HttpRequest 对象上的数据。&lt;/p&gt;
&lt;p&gt;如果来自客户端的请求包含了大量的数据，数据可能会以多个分块的形式到达。你可以使用 Stream 中的 &lt;code&gt;join()&lt;/code&gt; 方法来连接这些分块的字符串值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dart.dev/tutorials/server/images/flowchart.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;basic_writer_server.dart&lt;/code&gt; 文件实现了一个遵循这种模式的服务器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dart:io&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dart:convert&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_host&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InternetAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loopbackIPv4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4049&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ContentType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;contentType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contentType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;HttpResponse&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;POST&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;contentType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mimeType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;application/json&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*1*/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*2*/&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonDecode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*3*/&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pathSegments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*4*/&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeAsString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;mode:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statusCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ok&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Wrote data for &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statusCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;internalServerError&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Exception during file I/O: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statusCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;methodNotAllowed&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Unsupported request: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;/&lt;em&gt;1&lt;/em&gt;/ 该请求有一个 HttpHeaders 对象。记得客户端将 &lt;code&gt;contentType&lt;/code&gt; 头设置为 JSON(application/json)。该服务器拒绝不是 JSON 编码的请求。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;2&lt;/em&gt;/ 一个 POST 请求对它可以发送的数据量没有限制，数据可能会以多块形式发送。此外，JSON 是 UTF-8，而 UTF-8 字符可以在多个字节上进行编码。&lt;code&gt;join()&lt;/code&gt; 方法将这些分块放在一起。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;3&lt;/em&gt;/ 客户端发送的数据是 JSON 格式的。服务器使用 &lt;a href=&#34;https://api.dart.dev/stable/dart-convert/dart-convert-library.html&#34;&gt;dart:convert&lt;/a&gt; 库中的 JSON 编解码器对其进行解码。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;4&lt;/em&gt;/ 请求的 URL 是 &lt;a href=&#34;http://localhost:4049/file.txt&#34;&gt;localhost:4049/file.txt&lt;/a&gt;。代码 &lt;code&gt;req.uri.pathSegments.last&lt;/code&gt; 从 URI 中提取文件名: &lt;code&gt;file.txt&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;关于-cors-头的说明&#34;&gt;关于 CORS 头的说明&lt;/h3&gt;
&lt;p&gt;如果你想为运行在不同源头（不同主机或端口）的客户端提供服务，你需要添加 CORS 头。下面的代码，取自 note_server.dart，允许从任何来源的 POST 和 OPTIONS 请求。谨慎使用 CORS 头文件，因为它们会给你的网络带来安全风险。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addCorsHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpResponse&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Access-Control-Allow-Methods&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;POST, OPTIONS&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Access-Control-Allow-Headers&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Origin, X-Requested-With, Content-Type, Accept&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更多信息，请参考维基百科的&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&#34;&gt;跨源资源共享&lt;/a&gt;一文。&lt;/p&gt;
&lt;h2 id=&#34;使用-http_server-包&#34;&gt;使用 http_server 包&lt;/h2&gt;
&lt;p&gt;本节的示例文件：&lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/mini_file_server.dart&#34;&gt;mini_file_server.dart&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/static_file_server.dart&#34;&gt;static_file_server.dart&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;对于一些更高层次的构件，我们推荐你尝试 &lt;a href=&#34;https://pub.dev/packages/http_server&#34;&gt;http_server&lt;/a&gt; pub 包，它包含了一组类，与 &lt;code&gt;dart:io&lt;/code&gt; 库中的 HttpServer 类一起，使得实现 HTTP 务器更加容易。&lt;/p&gt;
&lt;p&gt;在本节中，我们比较了一个只使用 &lt;code&gt;dart:io&lt;/code&gt; 的 API 编写的服务器和一个使用 dart:io 和 http_server 一起编写的具有相同功能的服务器。&lt;/p&gt;
&lt;p&gt;你可以在 &lt;code&gt;mini_file_server.dart&lt;/code&gt; 中找到第一个服务器。它通过从 &lt;code&gt;web&lt;/code&gt; 目录返回 &lt;code&gt;index.html&lt;/code&gt; 文件的内容来响应所有请求。&lt;/p&gt;
&lt;h3 id=&#34;试试吧-1&#34;&gt;试试吧&lt;/h3&gt;
&lt;p&gt;在命令行中运行服务器:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; httpserver
$ dart bin/mini_file_server.dart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在浏览器中输入 &lt;a href=&#34;http://localhost:4044/&#34;&gt;localhost:4044&lt;/a&gt;。服务器会显示一个 HTML 文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dart.dev/tutorials/server/images/index_file.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是迷你文件服务器的代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dart:io&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;targetFile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;web/index.html&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InternetAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loopbackIPv4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4044&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Couldn&amp;#39;t bind to port 4044: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;targetFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Serving &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;targetFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contentType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ContentType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;targetFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;openRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Couldn&amp;#39;t read file: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Can&amp;#39;t open &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;targetFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statusCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notFound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码确定文件是否存在，如果存在，则打开文件，并将文件内容管道化到HttpResponse对象。&lt;/p&gt;
&lt;p&gt;第二个服务器，你可以在 &lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_file_server.dart&#34;&gt;basic_file_server.dart&lt;/a&gt; 中找到它的代码，使用 &lt;a href=&#34;https://pub.dev/packages/http_server&#34;&gt;http_server&lt;/a&gt; 包。&lt;/p&gt;
&lt;h3 id=&#34;试试吧-2&#34;&gt;试试吧&lt;/h3&gt;
&lt;p&gt;在命令行中运行服务器:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; httpserver
$ dart bin/basic_file_server.dart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在浏览器中输入 &lt;a href=&#34;http://localhost:4046/&#34;&gt;localhost:4046&lt;/a&gt;。服务器显示与之前相同的 index.html 文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dart.dev/tutorials/server/images/index_file_4046.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这个服务器中，处理请求的代码要短得多，因为 &lt;a href=&#34;https://pub.dev/documentation/http_server/latest/http_server/VirtualDirectory-class.html&#34;&gt;VirtualDirectory&lt;/a&gt; 类处理服务文件的细节。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dart:io&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:http_server/http_server.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;targetFile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;web/index.html&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;VirtualDirectory&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;staticFiles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;VirtualDirectory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serverRequests&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InternetAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loopbackIPv4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4046&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serverRequests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;staticFiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serveFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;targetFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里，请求的资源 index.html 是由 VirtualDirectory 类中的 &lt;code&gt;serviceFile()&lt;/code&gt; 方法提供的。你不需要写代码来打开一个文件并将其内容用管道传送到请求中。&lt;/p&gt;
&lt;p&gt;另一个文件服务器 &lt;code&gt;static_file_server.dart&lt;/code&gt; 也使用 http_server 包。这个服务器可以服务于服务器目录或子目录中的任何文件。&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;static_file_server.dart&lt;/code&gt;，用 &lt;a href=&#34;http://localhost:4048/&#34;&gt;localhost:4048&lt;/a&gt; 这个 URL 进行测试。&lt;/p&gt;
&lt;p&gt;下面是 &lt;code&gt;static_file_server.dart&lt;/code&gt; 的代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dart:io&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:http_server/http_server.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;staticFiles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;VirtualDirectory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;staticFiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;allowDirectoryListing&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*1*/&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;staticFiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;directoryHandler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*2*/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indexUri&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;index.html&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;staticFiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serveFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexUri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toFilePath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*3*/&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InternetAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loopbackIPv4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4048&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Listening on port 4048&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;staticFiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serveRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*4*/&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;/&lt;em&gt;1&lt;/em&gt;/ 允许客户端请求服务器目录内的文件。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;2&lt;/em&gt;/ 一个匿名函数，处理对目录本身的请求，即 URL 不包含文件名。该函数将这些请求重定向到 &lt;code&gt;index.html&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;3&lt;/em&gt;/ &lt;code&gt;serveFile&lt;/code&gt; 方法为一个文件提供服务，在这个例子中，它为目录请求服务index.html。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;4&lt;/em&gt;/ VirtualDirectory 类提供的 &lt;code&gt;serviceRequest&lt;/code&gt; 方法处理指定文件的请求。&lt;/p&gt;
&lt;h2 id=&#34;使用-bindsecure-的-https-方法&#34;&gt;使用 bindSecure() 的 https 方法&lt;/h2&gt;
&lt;p&gt;本节的示例：&lt;a href=&#34;https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/hello_world_server_secure.dart&#34;&gt;hello_world_server_secure.dart&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;你可能已经注意到，HttpServer 类定义了一个叫做 &lt;code&gt;bindSecure()&lt;/code&gt; 的方法，它使用 HTTPS(Hyper Text Transfer Protocol with Secure Sockets Layer)提供安全连接。要使用 &lt;code&gt;bindSecure()&lt;/code&gt; 方法，你需要一个证书，这个证书由证书颁发机构(CA)提供。有关证书的更多信息，请参考&lt;a href=&#34;https://www.tldp.org/HOWTO/SSL-Certificates-HOWTO/x64.html&#34;&gt;什么是 SSL 和什么是证书&lt;/a&gt;？&lt;/p&gt;
&lt;p&gt;为了说明问题，下面的服务器 &lt;code&gt;hello_world_server_secure.dart&lt;/code&gt; 使用 Dart 团队创建的证书调用 &lt;code&gt;bindSecure()&lt;/code&gt; 进行测试。你必须为你的服务器提供自己的证书。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dart:io&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;certificateChain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;server_chain.pem&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serverKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;server_key.pem&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serverContext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecurityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*1*/&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;serverContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;useCertificateChain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;certificateChain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*2*/&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;serverContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usePrivateKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serverKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;password:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;dartdart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*3*/&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bindSecure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;localhost&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;m&#34;&gt;4047&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;serverContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*4*/&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Listening on localhost:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Hello, world!&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;/&lt;em&gt;1&lt;/em&gt;/ 安全网络连接的可选设置在 SecurityContext 对象中指定，有一个默认的对象 SecurityContext.defaultContext，包括知名证书机构的可信根证书。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;2&lt;/em&gt;/ 一个包含从服务器证书到签名机关根证书链的文件，&lt;a href=&#34;https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail&#34;&gt;格式为 PEM&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;3&lt;/em&gt;/ 一个包含（加密的）服务器证书私钥的文件，&lt;a href=&#34;https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail&#34;&gt;PEM 格式&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;4&lt;/em&gt;/ 在服务器上，上下文参数是必需的，对客户端来说是可选的。如果省略它，则使用默认的内置可信根的上下文。&lt;/p&gt;
&lt;h2 id=&#34;其他资源&#34;&gt;其他资源&lt;/h2&gt;
&lt;p&gt;请访问这些 API 文档，了解本教程中讨论的类和库的更多细节。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Dart 类&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;目的&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpServer-class.html&#34;&gt;HttpServer&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个 HTTP 服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpClient-class.html&#34;&gt;HttpClient&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个 HTTP 客户端&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpRequest-class.html&#34;&gt;HttpRequest&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个服务器端请求对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpResponse-class.html&#34;&gt;HttpResponse&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个服务器端响应对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpClientRequest-class.html&#34;&gt;HttpClientRequest&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个客户端请求对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpClientResponse-class.html&#34;&gt;HttpClientResponse&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个客户端响应对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpHeaders-class.html&#34;&gt;HttpHeaders&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;请求头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-io/HttpStatus-class.html&#34;&gt;HttpStatus&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;响应的状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-io/InternetAddress-class.html&#34;&gt;InternetAddress&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个互联网地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-io/SecurityContext-class.html&#34;&gt;SecurityContext&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;包含安全连接的证书、密钥和信任信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/http_server&#34;&gt;http_server&lt;/a&gt; 包&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个具有较高级别的 HTTP 类的包&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;下一步该怎么做&#34;&gt;下一步该怎么做？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果你还没有尝试过服务器端的 codelab，可以尝试&lt;a href=&#34;https://dart-lang.github.io/server/codelab/&#34;&gt;编写一个服务器应用程序&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart-lang.github.io/server/&#34;&gt;Servers with Dart&lt;/a&gt; 链接到编写独立 Dart 应用程序的资源，包括服务器。&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/client">client</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/write-http-clients/</guid>
                <pubDate>Tue, 30 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>如何使用包</title>
                <link>https://ohmyweekly.github.io/notes/how-to-use-packages/</link>
                
                
                <description>&lt;blockquote&gt;Dart 包管理工具 - pub&lt;/blockquote&gt;&lt;p&gt;Dart 生态系统使用包来管理共享软件，如库和工具。要获得 Dart 包，你可以使用 &lt;code&gt;pub&lt;/code&gt; 包管理器。你可以在 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt; 网站上找到公开的包，也可以从本地文件系统或其他地方加载包，比如 Git 仓库。无论你的包来自哪里，pub 都会管理版本依赖关系，帮助你获得相互之间以及与 SDK 版本兼容的包版本。&lt;/p&gt;
&lt;p&gt;大多数精通 Dart 的 &lt;a href=&#34;https://dart.dev/tools#ides-and-editors&#34;&gt;IDE&lt;/a&gt; 都提供了对 pub 的支持，包括创建、下载、更新和发布包。或者你可以&lt;a href=&#34;https://dart.dev/tools/pub/cmd&#34;&gt;在命令行中使用 pub&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;至少，一个 Dart 包是一个包含 &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec 文件&lt;/a&gt;的目录。pubspec 包含一些关于包的元数据。此外，一个包可以包含依赖关系(在 pubspec 中列出)，Dart 库，应用程序，资源，测试，图像和例子。&lt;/p&gt;
&lt;p&gt;要使用一个包，请执行以下操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个 pubspec(一个名为 &lt;code&gt;pubspec.yaml&lt;/code&gt; 的文件，它列出了软件包的依赖关系，并包含其他元数据，如版本号)。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;pub&lt;/code&gt; 来获取你的包的依赖关系。&lt;/li&gt;
&lt;li&gt;如果你的 Dart 代码依赖于软件包中的一个库，则导入该库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建一个-pubspec&#34;&gt;创建一个 pubspec&lt;/h2&gt;
&lt;p&gt;pubspec 是一个名为 &lt;code&gt;pubspec.yaml&lt;/code&gt; 的文件，它位于你的应用程序的顶级目录中。最简单的 pubspec 只列出了包名:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;nl&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是一个 pubspec 的例子，它声明了两个包(&lt;code&gt;js&lt;/code&gt; 和 &lt;code&gt;intl&lt;/code&gt;)的依赖关系，这两个包都托管在 pub.dev 站点上:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;nl&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_app&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;dependencies:&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;js:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;nl&#34;&gt;intl:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于创建 pubspec 的详细信息，请参见 &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec 文档&lt;/a&gt;和你要使用的包的文档。&lt;/p&gt;
&lt;h2 id=&#34;获取软件包&#34;&gt;获取软件包&lt;/h2&gt;
&lt;p&gt;一旦你有了 pubspec，你就可以从你的应用程序的顶级目录中运行 &lt;code&gt;pub get&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &amp;lt;path-to-my_app&amp;gt;
$ pub get
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个过程被称为获取依赖关系。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pub get&lt;/code&gt; 命令可以确定您的应用程序依赖于哪些软件包，并将它们放在中央&lt;a href=&#34;https://dart.dev/tools/pub/glossary#system-cache&#34;&gt;系统缓存&lt;/a&gt;中。如果您的应用程序依赖于已发布的包，pub 会从 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt; 站点下载该包。对于  &lt;a href=&#34;https://dart.dev/tools/pub/dependencies#git-packages&#34;&gt;Git 依赖&lt;/a&gt;，pub 会克隆 Git 仓库。还包括了过渡性依赖。例如，如果 &lt;code&gt;js&lt;/code&gt; 包依赖于 &lt;code&gt;test&lt;/code&gt; 包，&lt;code&gt;pub&lt;/code&gt; 会同时抓取 &lt;code&gt;js&lt;/code&gt; 包和 &lt;code&gt;test&lt;/code&gt; 包。&lt;/p&gt;
&lt;p&gt;Pub 会创建一个 &lt;code&gt;.packages&lt;/code&gt; 文件(在你的应用程序的顶层目录下)，将你的应用程序所依赖的每个包名映射到系统缓存中的对应包。&lt;/p&gt;
&lt;h2 id=&#34;从包中导入库&#34;&gt;从包中导入库&lt;/h2&gt;
&lt;p&gt;要导入在包中找到的库，使用 &lt;code&gt;package:&lt;/code&gt; 前缀:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:js/js.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;js&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:intl/intl.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dart 运行时在 &lt;code&gt;package:&lt;/code&gt; 之后的所有内容都会在应用程序的 &lt;code&gt;.package&lt;/code&gt; 文件中进行查找。&lt;/p&gt;
&lt;p&gt;你也可以使用这种风格从你自己的包中导入库。比方说，&lt;code&gt;transmogrify&lt;/code&gt; 包的布局如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;transmogrify/
  lib/
    transmogrify.dart
    parser.dart
  test/
    parser/
      parser_test.dart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;parser_test.dart&lt;/code&gt; 文件可以这样导入 &lt;code&gt;parser.dart&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:transmogrify/parser.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;升级依赖关系&#34;&gt;升级依赖关系&lt;/h2&gt;
&lt;p&gt;当你第一次为你的软件包获取一个新的依赖关系时，pub 会下载与你的其他依赖关系兼容的最新版本。然后，它通过创建一个 &lt;strong&gt;lockfile&lt;/strong&gt; 锁文件来锁定您的软件包，使其始终使用该版本。这是一个名为 &lt;code&gt;pubspec.lock&lt;/code&gt; 的文件，由 pub 创建并存储在 pubspec 的旁边。它列出了您的软件包所使用的每个依赖关系的特定版本 (即时的和过渡的)。&lt;/p&gt;
&lt;p&gt;如果你的包是一个应用程序包，你应该把这个文件检查到&lt;a href=&#34;https://dart.dev/guides/libraries/private-files&#34;&gt;源代码控制&lt;/a&gt;中。这样，在你的应用程序上工作的每个人都会使用所有包的相同版本。在 lockfile 文件中检查也可以确保你部署的应用使用相同版本的代码。&lt;/p&gt;
&lt;p&gt;当你准备好将你的依赖项升级到最新版本时，使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-upgrade&#34;&gt;pub upgrade&lt;/a&gt; 命令:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;upgrade&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pub upgrade&lt;/code&gt; 命令告诉 pub 使用你的包的依赖关系的最新版本来重新生成 lockfile 文件。如果你只想升级一个依赖关系，你可以指定要升级的软件包:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;upgrade&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transmogrify&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该命令将 &lt;code&gt;transmogrify&lt;/code&gt; 升级到最新版本，但其他一切都保持不变。&lt;/p&gt;
&lt;p&gt;由于 pubspec 中有冲突的版本限制，&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-upgrade&#34;&gt;pub upgrade&lt;/a&gt; 命令并不能总是将每个软件包升级到最新版本。要识别需要编辑 pubspec 的过期软件包，请使用 &lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-outdated&#34;&gt;pub outdated&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;更多信息&#34;&gt;更多信息&lt;/h2&gt;
&lt;p&gt;下面的页面有更多关于软件包和 pub 包管理器的信息。&lt;/p&gt;
&lt;p&gt;如何使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/create-library-packages&#34;&gt;创建包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/publishing&#34;&gt;发布包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/dependencies&#34;&gt;Pub 依赖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/environment-variables&#34;&gt;Pub 环境变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/glossary&#34;&gt;Pub 词汇表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/package-layout&#34;&gt;Pub 包布局约定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/versioning&#34;&gt;Pub 版本哲学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;Pubspec 格式化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pub 命令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pub&lt;/code&gt; 工具提供了以下命令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-cache&#34;&gt;pub cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-deps&#34;&gt;pub deps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-downgrade&#34;&gt;pub downgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-get&#34;&gt;pub get&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-global&#34;&gt;pub global&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-outdated&#34;&gt;pub outdated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-lish&#34;&gt;pub publish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-run&#34;&gt;pub run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-upgrade&#34;&gt;pub upgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/pub/cmd/pub-uploader&#34;&gt;pub uploader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关所有 pub 命令的概述，请参阅 &lt;a href=&#34;https://dart.dev/tools/pub/cmd&#34;&gt;pub 工具文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;疑难解答&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dart.dev/tools/pub/troubleshoot&#34;&gt;故障排除 pub&lt;/a&gt; 提供了使用 pub 时可能遇到的问题的解决方案。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/packages">packages</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/how-to-use-packages/</guid>
                <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>常用的包</title>
                <link>https://ohmyweekly.github.io/notes/commonly-used-packages/</link>
                
                
                <description>&lt;blockquote&gt;Commonly used packages&lt;/blockquote&gt;&lt;p&gt;本页列出了一些  Dart 开发者发布的最流行和最有用的&lt;a href=&#34;https://dart.dev/guides/packages&#34;&gt;包&lt;/a&gt;。要找到更多的软件包&amp;ndash;也可以搜索&lt;a href=&#34;https://dart.dev/guides/libraries&#34;&gt;核心库&lt;/a&gt;&amp;ndash;请使用 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt; 网站。&lt;/p&gt;
&lt;p&gt;常用的软件包可分为三类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/useful-libraries#general-purpose-packages&#34;&gt;通用包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/useful-libraries#packages-that-correspond-to-sdk-libraries&#34;&gt;扩展 Dart 核心库的包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/libraries/useful-libraries#specialized-packages&#34;&gt;特定的包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通用包&#34;&gt;通用包&lt;/h2&gt;
&lt;p&gt;以下包对各种项目都很有用:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;包&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;常用的 API&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/archive&#34;&gt;archive&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对各种档案和压缩格式进行编码和解码。&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Archive, ArchiveFile, TarEncoder, TarDecoder, ZipEncoder, ZipDecoder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/characters&#34;&gt;characters&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对用户感知的字符进行字符串操作(Unicode 字符簇)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String.characters, Characters, CharacterRange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/http&#34;&gt;http&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一组高级的函数和类，使其易于消费 HTTP 资源&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;delete(), get(), post(), read()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/intl&#34;&gt;intl&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;国际化和本地化设施，支持复数和性别、日期和数字格式化和解析以及双向文本&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bidi, DateFormat, MicroMoney, TextDirection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/json_serializable&#34;&gt;json_serializable&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个易于使用的代码生成包。更多信息，请参阅 &lt;a href=&#34;https://dart.dev/guides/json&#34;&gt;JSON 支持&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;@JsonSerializable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/logging&#34;&gt;logging&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个可配置的机制，为你的应用程序添加消息记录&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LoggerHandler, Level, LogRecord&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/mockito&#34;&gt;mockito&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个在测试中模拟对象的流行框架。如果你正在编写依赖注入的测试，特别有用。与 &lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;test&lt;/a&gt; 包一起使用&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Answering, Expectation, Verification&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/path&#34;&gt;path&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;操作不同类型路径的常用操作。更多信息，请参见&lt;a href=&#34;https://news.dartlang.org/2016/06/unboxing-packages-path.html&#34;&gt;拆包: path&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;absolute(), basename(), extension(), join(), normalize(), relative(), split()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/quiver&#34;&gt;quiver&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;实用工具，使 Dart 核心库的使用更加方便。Quiver 提供额外支持的一些库包括 async、cache、collection、core、iterables、pattern 和 测试&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CountdownTimer (quiver.async); MapCache (quiver.cache); MultiMap, TreeSet (quiver.collection); EnumerateIterable (quiver.iterables); center(), compareIgnoreCase(), isWhiteSpace() (quiver.strings)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/shelf&#34;&gt;shelf&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dart 的 Web 服务器中间件。Shelf 使它能轻松地创建和组成 Web 服务器，以及 Web 服务器的一部分&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cascade, Pipeline, Request, Response, Server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/stack_trace&#34;&gt;stack_trace&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用于解析、检查和处理由底层 Dart 实现产生的堆栈痕迹的方法。还提供了以比原生 StackTrace 实现更可读的格式生成堆栈跟踪的字符串表示的函数,  更多信息，请参见&lt;a href=&#34;https://news.dartlang.org/2016/01/unboxing-packages-stacktrace.html&#34;&gt;拆包: stack_trace&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Trace.current(), Trace.format(), Trace.from()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/stagehand&#34;&gt;stagehand&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个 Dart 项目生成器。当你创建一个新的应用程序时，WebStorm 和 IntelliJ 使用 Stagehand 模板，但你也可以从命令行使用模板&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般通过 IDE 或 &lt;code&gt;stagehand&lt;/code&gt; 命令来使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;test&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 Dart 中编写和运行测试的标准方法&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;expect(), group(), test()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/yaml&#34;&gt;yaml&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;YAML 解析器&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;loadYaml(), loadYamlStream()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;扩展-dart-核心库的包&#34;&gt;扩展 Dart 核心库的包&lt;/h2&gt;
&lt;p&gt;以下每个包都建立在一个&lt;a href=&#34;https://dart.dev/guides/libraries&#34;&gt;核心库&lt;/a&gt;的基础上，增加了功能并填补了缺失的功能:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;包&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;常用的 API&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/async&#34;&gt;async&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 dart:async 的基础上进行了扩展，增加了实用类来处理异步计算。更多信息，请参见&lt;a href=&#34;https://news.dartlang.org/2016/03/unboxing-packages-async-part-1.html&#34;&gt;拆包: async 第1部分&lt;/a&gt;、&lt;a href=&#34;https://news.dartlang.org/2016/03/unboxing-packages-async-part-2.html&#34;&gt;第2部分&lt;/a&gt;和&lt;a href=&#34;https://news.dartlang.org/2016/04/unboxing-packages-async-part-3.html&#34;&gt;第3部分&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AsyncMemoizer, CancelableOperation, FutureGroup, LazyStream, Result, StreamCompleter, StreamGroup, StreamSplitter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/collection&#34;&gt;collection&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 dart:collection 的基础上进行了扩展，增加了实用函数和类，使处理集合的工作变得更加容易。更多信息，请看&lt;a href=&#34;https://news.dartlang.org/2016/01/unboxing-packages-collection.html&#34;&gt;拆包：collection&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Equality, CanonicalizedMap, MapKeySet, MapValueSet, PriorityQueue, QueueList&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/convert&#34;&gt;convert&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 dart:convert 的基础上，增加了编码器和解码器，用于在不同的数据表现形式之间进行转换。其中一种数据表示方式是百分比编码，也被称为 URL 编码&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HexDecoder, PercentDecoder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/io&#34;&gt;io&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;包含两个库，ansi和io，以简化对文件、标准流和进程的处理。使用 ansi 库可以自定义终端输出。io 库有处理进程、stdin 和文件复制的 API&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;copyPath(), isExecutable(), ExitCode, ProcessManager, sharedStdIn&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;专用包&#34;&gt;专用包&lt;/h2&gt;
&lt;p&gt;下面是一些寻找比较专业的包的技巧，比如手机的包(Flutter)和网页开发的包。&lt;/p&gt;
&lt;h3 id=&#34;flutter-包&#34;&gt;Flutter 包&lt;/h3&gt;
&lt;p&gt;请看 Flutter 网站上的&lt;a href=&#34;https://flutter.dev/docs/development/packages-and-plugins/using-packages&#34;&gt;使用包&lt;/a&gt;。或者使用 pub.dev 网站&lt;a href=&#34;https://pub.dev/flutter&#34;&gt;搜索 Flutter 包&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;网络包&#34;&gt;网络包&lt;/h3&gt;
&lt;p&gt;参见&lt;a href=&#34;https://dart.dev/web/libraries&#34;&gt;网络库和包&lt;/a&gt;。或者使用 pub.dev 站点&lt;a href=&#34;https://pub.dev/web&#34;&gt;搜索 web 包&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;命令行和服务器软件包&#34;&gt;命令行和服务器软件包&lt;/h3&gt;
&lt;p&gt;参见&lt;a href=&#34;https://dart.dev/server/libraries&#34;&gt;命令行和服务器库和包&lt;/a&gt;。或者使用 pub.dev 站点&lt;a href=&#34;https://pub.dev/&#34;&gt;搜索其他包&lt;/a&gt;。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/packages">packages</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/commonly-used-packages/</guid>
                <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>异步编程：futures、async、await。</title>
                <link>https://ohmyweekly.github.io/notes/futures-async-await/</link>
                
                
                <description>&lt;blockquote&gt;这个 codelab 教你如何使用 &lt;code&gt;futures&lt;/code&gt;、&lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://dart.dev/codelabs/async-await&#34;&gt;async-await&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个 codelab 教你如何使用 &lt;code&gt;futures&lt;/code&gt;、&lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。&lt;/p&gt;
&lt;p&gt;要想从这个 codelab 中获得最大的收获，你应该具备以下条件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;掌握&lt;a href=&#34;https://dart.dev/samples&#34;&gt;基本的 Dart 语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;有用其他语言编写异步代码的经验。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个 codelab 包括以下材料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何以及何时使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 如何影响执行顺序。&lt;/li&gt;
&lt;li&gt;如何在 &lt;code&gt;async&lt;/code&gt; 函数中使用 &lt;code&gt;try-catch&lt;/code&gt; 表达式处理异步调用中的错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;估计完成这个代码实验的时间。40-60分钟&lt;/p&gt;
&lt;p&gt;注意：本页面使用嵌入式 DartPads 来显示示例和练习。如果你看到的是空框而不是 DartPads，请转到 &lt;a href=&#34;https://dart.dev/tools/dartpad/troubleshoot&#34;&gt;DartPad 故障排除页面&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;为什么异步代码很重要&#34;&gt;为什么异步代码很重要&lt;/h2&gt;
&lt;p&gt;异步操作让你的程序在等待另一个操作完成时完成工作。下面是一些常见的异步操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过网络获取数据。&lt;/li&gt;
&lt;li&gt;写入数据库。&lt;/li&gt;
&lt;li&gt;从文件中读取数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要在 Dart 中执行异步操作，你可以使用 &lt;code&gt;Future&lt;/code&gt; 类以及 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字。&lt;/p&gt;
&lt;h3 id=&#34;例子-错误地使用异步函数&#34;&gt;例子: 错误地使用异步函数&lt;/h3&gt;
&lt;p&gt;下面的例子显示了使用异步函数(&lt;code&gt;fetchUserOrder()&lt;/code&gt;)的错误方法。稍后你将使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 来修复这个例子。在运行这个例子之前，试着发现这个问题-你认为输出会是什么？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// This example shows how *not* to write asynchronous Dart code.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Your order is: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Imagine that this function is more complex and slow.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Large Latte&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是这个例子为什么不能打印 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 最终产生的值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fetchUserOrder()&lt;/code&gt; 是一个异步函数，在延迟之后，提供一个描述用户订单的字符串：&amp;ldquo;Large Latte&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;为了得到用户的订单，&lt;code&gt;createOrderMessage()&lt;/code&gt; 应该调用 &lt;code&gt;fetchUserOrder()&lt;/code&gt;，并等待其完成。由于 &lt;code&gt;createOrderMessage()&lt;/code&gt; 没有等待 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 完成，&lt;code&gt;createOrderMessage()&lt;/code&gt; 无法获得 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 最终提供的字符串值。&lt;/li&gt;
&lt;li&gt;取而代之的是，&lt;code&gt;createOrderMessage()&lt;/code&gt; 得到的是待完成工作的表示：一个未完成的未来。您将在下一节了解更多关于未来的信息。&lt;/li&gt;
&lt;li&gt;因为 &lt;code&gt;createOrderMessage()&lt;/code&gt; 没有得到描述用户订单的值，所以这个例子没有打印 &amp;ldquo;Large Latte&amp;rdquo; 到控制台，而是打印 &amp;ldquo;Your order is: Instance of &amp;lsquo;_Future&amp;rsquo;&amp;quot;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在接下来的章节中，你将学习关于 futures 和关于使用 futures 的工作（使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt;），这样你就能编写必要的代码，使 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 向控制台打印所需的值(&amp;ldquo;Large Latte&amp;rdquo;)。&lt;/p&gt;
&lt;p&gt;关键术语:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步操作: 同步操作会阻止其他操作的执行，直到它完成。&lt;/li&gt;
&lt;li&gt;同步函数：同步函数只执行同步操作。&lt;/li&gt;
&lt;li&gt;异步操作：异步操作一旦启动，就允许其他操作在它完成之前执行。&lt;/li&gt;
&lt;li&gt;异步函数：异步函数至少执行一个异步操作，也可以执行同步操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是未来&#34;&gt;什么是未来？&lt;/h2&gt;
&lt;p&gt;future(小写 &amp;ldquo;f&amp;rdquo;)是 &lt;a href=&#34;https://api.dart.dev/stable/dart-async/Future-class.html&#34;&gt;Future&lt;/a&gt;（大写 &amp;ldquo;F&amp;rdquo;）类的一个实例。一个 future 代表异步操作的结果，可以有两种状态：未完成或完成。&lt;/p&gt;
&lt;p&gt;注意：未完成是一个 Dart 术语，指的是一个未来的状态，在它产生一个值之前。&lt;/p&gt;
&lt;h3 id=&#34;未完成的&#34;&gt;未完成的&lt;/h3&gt;
&lt;p&gt;当你调用一个异步函数时，它会返回一个未完成的未来。这个未来正在等待函数的异步操作完成或抛出一个错误。&lt;/p&gt;
&lt;h3 id=&#34;已完成的&#34;&gt;已完成的&lt;/h3&gt;
&lt;p&gt;如果异步操作成功，未来就以一个值完成。否则它将以一个错误完成。&lt;/p&gt;
&lt;h3 id=&#34;用一个值来完成&#34;&gt;用一个值来完成&lt;/h3&gt;
&lt;p&gt;类型为 &lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt; 的 future 用一个类型为 &lt;code&gt;T&lt;/code&gt; 的值来完成。例如，一个类型为 &lt;code&gt;Future&amp;lt;String&amp;gt;&lt;/code&gt; 的 future 会产生一个字符串值。如果一个 future 没有产生一个可用的值，那么 future 的类型是 &lt;code&gt;Future&amp;lt;void&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;用一个错误来完成&#34;&gt;用一个错误来完成&lt;/h3&gt;
&lt;p&gt;如果函数执行的异步操作因为任何原因而失败，future 就会以错误的方式完成。&lt;/p&gt;
&lt;h3 id=&#34;例子-介绍-future&#34;&gt;例子: 介绍 future&lt;/h3&gt;
&lt;p&gt;在下面的例子中，&lt;code&gt;fetchUserOrder()&lt;/code&gt; 返回一个在打印到控制台后完成的 future。因为它没有返回一个可用的值，&lt;code&gt;fetchUserOrder()&lt;/code&gt; 的类型是 &lt;code&gt;Future&amp;lt;void&amp;gt;&lt;/code&gt;。在运行这个例子之前，试着预测一下哪个会先打印：&amp;ldquo;Large Latte&amp;rdquo; 或 &amp;ldquo;Fetching user order&amp;hellip;&amp;quot;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Imagine that this function is fetching user info from another service or database.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Large Latte&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Fetching user order...&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在前面的例子中，尽管 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 在第8行的 &lt;code&gt;print()&lt;/code&gt; 调用之前执行，控制台还是在 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 的输出 (&amp;ldquo;Large Latte&amp;rdquo;) 之前显示了第8行的输出 (&amp;ldquo;Fetching user order&amp;hellip;&amp;quot;)。这是因为 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 在打印 &amp;ldquo;Large Latte&amp;rdquo; 之前会有延迟。&lt;/p&gt;
&lt;h3 id=&#34;例子-完成时出现错误&#34;&gt;例子: 完成时出现错误&lt;/h3&gt;
&lt;p&gt;运行下面的例子，看看未来如何完成一个错误。稍后你将学习如何处理错误。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Imagine that this function is fetching user info but encounters a bug
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Logout failed: user ID is invalid&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Fetching user order...&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，&lt;code&gt;fetchUserOrder()&lt;/code&gt; 完成时出现错误，表明用户ID无效。&lt;/p&gt;
&lt;p&gt;你已经学习了 future 和它们如何完成，但你如何使用异步函数的结果呢？在下一节中，你将学习如何使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字来获取结果。&lt;/p&gt;
&lt;p&gt;快速回顾:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 &lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt; 实例会产生一个 &lt;code&gt;T&lt;/code&gt; 类型的值。&lt;/li&gt;
&lt;li&gt;如果一个 future 没有产生一个可用的值，那么 future 的类型是 &lt;code&gt;Future&amp;lt;void&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;一个 future 可以处于两种状态之一：未完成或完成。&lt;/li&gt;
&lt;li&gt;当你调用一个返回 future 的函数时，函数会把要做的工作排队，并返回一个未完成的 future。&lt;/li&gt;
&lt;li&gt;当一个 future 的操作完成时，future 以一个值或以一个错误完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键术语:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Future: Dart &lt;a href=&#34;https://api.dart.dev/stable/dart-async/Future-class.html&#34;&gt;Future&lt;/a&gt; 类。&lt;/li&gt;
&lt;li&gt;future：Dart &lt;code&gt;Future&lt;/code&gt; 类的一个实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用-futureasync-和-await&#34;&gt;使用 future：async 和 await&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字提供了一种声明式的方式来定义异步函数并使用它们的结果。在使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 时，请记住以下两个基本准则。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要定义一个异步函数，请在函数主体前添加 &lt;code&gt;async&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;await&lt;/code&gt; 关键字只能在 &lt;code&gt;async&lt;/code&gt; 函数中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个将 &lt;code&gt;main()&lt;/code&gt; 从同步函数转换为异步函数的例子。&lt;/p&gt;
&lt;p&gt;首先，在函数体前添加 &lt;code&gt;async&lt;/code&gt; 关键字:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;·&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果函数有声明的返回类型，那么更新类型为 &lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt;，其中 T 是函数返回的值的类型。如果函数没有明确返回值，那么返回类型为 &lt;code&gt;Future&amp;lt;void&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;·&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在你已经有了一个 &lt;code&gt;async&lt;/code&gt; 函数，你可以使用 &lt;code&gt;await&lt;/code&gt; 关键字来等待一个 future 的完成:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正如下面两个例子所显示的，&lt;code&gt;async&lt;/code&gt; 和a &lt;code&gt;wait&lt;/code&gt; 关键字导致异步代码看起来很像同步代码。唯一的区别在异步示例中突出显示，如果你的窗口足够宽，它就在同步示例的右边。&lt;/p&gt;
&lt;p&gt;示例：同步函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Your order is: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Imagine that this function is
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// more complex and slow.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Large Latte&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Fetching user order...&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Fetching user order...
Your order is: Instance of _Future&amp;lt;String&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例子：异步函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Your order is: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Imagine that this function is
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// more complex and slow.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Large Latte&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Fetching user order...&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Fetching user order...
Your order is: Large Latte
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;异步示例在三个方面有所不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createOrderMessage()&lt;/code&gt; 的返回类型从 &lt;code&gt;String&lt;/code&gt; 变为 &lt;code&gt;Future&amp;lt;String&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async&lt;/code&gt; 关键字出现在 &lt;code&gt;createOrderMessage()&lt;/code&gt; 和 &lt;code&gt;main()&lt;/code&gt; 的函数体之前。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;await&lt;/code&gt; 关键字出现在调用异步函数 &lt;code&gt;fetchUserOrder()&lt;/code&gt; 和 &lt;code&gt;createOrderMessage()&lt;/code&gt; 之前。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键术语:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;async: 你可以在一个函数的主体前使用 &lt;code&gt;async&lt;/code&gt; 关键字来标记它为异步函数。&lt;/li&gt;
&lt;li&gt;async 函数: &lt;code&gt;async&lt;/code&gt; 函数是一个标有 &lt;code&gt;async&lt;/code&gt; 关键字的函数。&lt;/li&gt;
&lt;li&gt;await：可以使用 &lt;code&gt;await&lt;/code&gt; 关键字来获取异步表达式的完成结果。&lt;code&gt;await&lt;/code&gt; 关键字只在 &lt;code&gt;async&lt;/code&gt; 函数中起作用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用-async-和-await-的执行流程&#34;&gt;使用 async 和 await 的执行流程&lt;/h3&gt;
&lt;p&gt;一个异步函数在第一个 &lt;code&gt;await&lt;/code&gt; 关键字之前是同步运行的。这意味着在一个 &lt;code&gt;async&lt;/code&gt; 函数体中，第一个 &lt;code&gt;await&lt;/code&gt; 关键字之前的所有同步代码都会立即执行。&lt;/p&gt;
&lt;p&gt;版本说明：在 Dart 2.0 之前，一个异步函数立即返回，而不会在异步函数体中执行任何代码。&lt;/p&gt;
&lt;h3 id=&#34;例子在异步函数内执行在异步函数中执行&#34;&gt;例子：在异步函数内执行。在异步函数中执行&lt;/h3&gt;
&lt;p&gt;运行下面的例子，看看如何在异步函数体中执行。你认为输出会是什么？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Awaiting user order...&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Your order is: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Imagine that this function is more complex and slow.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Large Latte&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;countSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// You can ignore this function - it&amp;#39;s here to visualize delay time in this example.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;countSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行上例中的代码后，尝试将第2行和第3行反过来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Awaiting user order...&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到输出的时间发生了变化，现在 &lt;code&gt;print(&#39;Awaiting user order&#39;)&lt;/code&gt; 出现在 &lt;code&gt;printOrderMessage()&lt;/code&gt; 中第一个 &lt;code&gt;await&lt;/code&gt; 关键字之后。&lt;/p&gt;
&lt;h3 id=&#34;练习-练习使用-async-和-await&#34;&gt;练习: 练习使用 async 和 await&lt;/h3&gt;
&lt;p&gt;下面的练习是一个失败的单元测试，其中包含部分完成的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 &lt;code&gt;main()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为了模拟异步操作，调用以下函数，这些函数是为你提供的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型签名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;fetchRole()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Future&lt;!-- raw HTML omitted --&gt; fetchRole()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;获取用户角色的简短描述。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;fetchLoginAmount()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Future&lt;!-- raw HTML omitted --&gt; fetchLoginAmount()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;获取用户的登录次数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第1部分：&lt;code&gt;reportUserRole()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为 &lt;code&gt;reportUserRole()&lt;/code&gt; 函数添加代码，使其执行以下操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回一个以下列字符串完成的 future： &lt;code&gt;&amp;quot;User role: &amp;lt;user role&amp;gt;&amp;quot;&lt;/code&gt;。
&lt;ul&gt;
&lt;li&gt;注意：你必须使用 &lt;code&gt;fetchRole()&lt;/code&gt; 返回的实际值；复制和粘贴示例返回值不会使测试通过。&lt;/li&gt;
&lt;li&gt;示例返回值: &amp;ldquo;User role: tester&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过调用提供的函数 &lt;code&gt;fetchRole()&lt;/code&gt; 获取用户角色。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二部分：&lt;code&gt;reportLogins()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实现一个异步函数 &lt;code&gt;reportLogins()&lt;/code&gt;，使其执行以下操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回字符串 &amp;ldquo;Total number of logins: &amp;lt;# of logins&amp;gt;&amp;rdquo;。
&lt;ul&gt;
&lt;li&gt;注意：你必须使用 &lt;code&gt;fetchLoginAmount()&lt;/code&gt; 返回的实际值；复制和粘贴示例返回值不会使测试通过。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reportLogins()&lt;/code&gt; 的返回值示例: &lt;code&gt;&amp;quot;Total number of logins: 57&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过调用提供的函数 &lt;code&gt;fetchLoginAmount()&lt;/code&gt; 来获取登录次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reportUserRole&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchRole&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;User role: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reportLogins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;logins&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchLoginAmount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Total number of logins: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logins&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：如果你的代码通过了测试，你可以忽略信息级的消息。&lt;/p&gt;
&lt;h2 id=&#34;处理错误&#34;&gt;处理错误&lt;/h2&gt;
&lt;p&gt;要处理 &lt;code&gt;async&lt;/code&gt; 函数中的错误，使用 &lt;code&gt;try-catch&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Awaiting user order...&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Caught error: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在一个 &lt;code&gt;async&lt;/code&gt; 函数中，你可以像在同步代码中一样编写 &lt;code&gt;try-catch&lt;/code&gt; 子句。&lt;/p&gt;
&lt;h3 id=&#34;例子async-和-await-的-try-catch-子句&#34;&gt;例子：&lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 的 &lt;code&gt;try-catch&lt;/code&gt; 子句&lt;/h3&gt;
&lt;p&gt;运行下面的例子，看看如何处理一个异步函数的错误。你认为输出会是什么？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Awaiting user order...&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Caught error: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUserOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Imagine that this function is more complex.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delayed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;seconds:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Cannot locate user order&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printOrderMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;练习-练习处理错误&#34;&gt;练习: 练习处理错误&lt;/h3&gt;
&lt;p&gt;下面的练习提供了使用异步代码处理错误的练习，使用上一节中描述的方法。为了模拟异步操作，你的代码将调用以下函数，该函数为你提供。&lt;/p&gt;
&lt;p&gt;| 函数                | 类型签名 | 描述 |
| fetchNewUsername() | Future&lt;!-- raw HTML omitted --&gt; fetchNewUsername() |	返回你可以用来替换旧用户名的新用户名。|&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 来实现一个异步的 &lt;code&gt;changeUsername()&lt;/code&gt; 函数，该函数执行以下操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用提供的异步函数 &lt;code&gt;fetchNewUsername()&lt;/code&gt; 并返回其结果。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;changeUsername()&lt;/code&gt; 的返回值示例: &amp;ldquo;jane_smith_92&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;捕获任何发生的错误并返回错误的字符串值。
&lt;ul&gt;
&lt;li&gt;你可以使用 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/ArgumentError/toString.html&#34;&gt;toString()&lt;/a&gt; 方法对 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/Exception-class.html&#34;&gt;Exceptions&lt;/a&gt; 和&lt;a href=&#34;https://api.dart.dev/stable/dart-core/Error-class.html&#34;&gt;Errors&lt;/a&gt; 进行字符串化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;changeUsername&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchNewUsername&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;练习-把所有的东西放在一起&#34;&gt;练习: 把所有的东西放在一起&lt;/h3&gt;
&lt;p&gt;现在是时候在最后一个练习中练习所学的知识了。为了模拟异步操作，本练习提供了异步函数 &lt;code&gt;fetchUsername()&lt;/code&gt; 和 &lt;code&gt;logoutUser()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;| 函数             | 类型签名                        | 描述 |
| fetchUsername() |	Future&lt;!-- raw HTML omitted --&gt; fetchUsername() | 返回与当前用户相关联的名称。 |
| logoutUser()	  | Future&lt;!-- raw HTML omitted --&gt; logoutUser()	   | 执行当前用户的注销，并返回被注销的用户名。 |&lt;/p&gt;
&lt;p&gt;编写以下内容。&lt;/p&gt;
&lt;p&gt;第一部分：&lt;code&gt;addHello()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写一个函数 &lt;code&gt;addHello()&lt;/code&gt;，它接受一个单一的 &lt;code&gt;String&lt;/code&gt; 参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addHello()&lt;/code&gt; 返回它的 &lt;code&gt;String&lt;/code&gt; 参数，前面加 &amp;lsquo;Hello&amp;rsquo;。
例如：&lt;code&gt;addHello(&#39;Jon&#39;)&lt;/code&gt; 返回 &amp;lsquo;Hello Jon&amp;rsquo;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二部分：&lt;code&gt;greetUser()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写一个不接受参数的函数 &lt;code&gt;greetUser()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;为了得到用户名，&lt;code&gt;greetUser()&lt;/code&gt; 调用提供的异步函数 &lt;code&gt;fetchUsername()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;greetUser()&lt;/code&gt; 通过调用 &lt;code&gt;addHello()&lt;/code&gt; 为用户创建一个问候语，传递用户名，并返回结果。
例子: 如果 &lt;code&gt;fetchUsername()&lt;/code&gt; 返回 &amp;lsquo;Jenny&amp;rsquo;, 那么 &lt;code&gt;greetUser()&lt;/code&gt; 返回 &amp;lsquo;Hello Jenny&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第三部分：&lt;code&gt;sayGoodbye()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编写一个函数 &lt;code&gt;sayGoodbye()&lt;/code&gt;，它的功能如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不接受任何参数&lt;/li&gt;
&lt;li&gt;捕获任何错误。&lt;/li&gt;
&lt;li&gt;调用所提供的异步函数 logoutUser().&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;logoutUser()&lt;/code&gt; 失败，&lt;code&gt;sayGoodbye()&lt;/code&gt; 返回任何你喜欢的字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;logoutUser()&lt;/code&gt; 成功，&lt;code&gt;sayGoodbye()&lt;/code&gt; 返回字符串 &lt;code&gt;&#39;&amp;lt;result&amp;gt; Thanks, see you next time&#39;&lt;/code&gt;，其中 &lt;code&gt;&amp;lt;result&amp;gt;&lt;/code&gt; 是调用 &lt;code&gt;logoutUser()&lt;/code&gt; 返回的字符串值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addHello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;greetUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchUsername&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addHello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sayGoodbye&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;logoutUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; Thanks, see you next time&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Failed to logout user: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;下一步是什么&#34;&gt;下一步是什么？&lt;/h2&gt;
&lt;p&gt;恭喜你，你已经完成了 codelab 的学习！如果你还想了解更多，这里有一些下一步的建议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;玩玩 &lt;a href=&#34;https://dartpad.dev/&#34;&gt;DartPad&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;尝试另一个 &lt;a href=&#34;https://dart.dev/codelabs&#34;&gt;codelab&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;学习更多关于 futures 和异步的知识。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/tutorials/language/streams&#34;&gt;Streams tutorial&lt;/a&gt;: 学习如何使用异步事件的序列。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLjxrf2q8roU0Net_g1NT5_vOO3s_FR02J&#34;&gt;来自 Google 的 Dart视频&lt;/a&gt;: 观看一个或多个关于异步编码的视频。或者，如果你喜欢，阅读基于这些视频的文章。(从&lt;a href=&#34;https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a&#34;&gt;隔离和事件循环&lt;/a&gt;开始。)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/get-dart&#34;&gt;获取 Dart SDK&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你对使用嵌入式 DartPads 感兴趣，就像这个 codelab 一样，请看&lt;a href=&#34;https://dart.dev/resources/dartpad-best-practices&#34;&gt;教程中使用 DartPad 的最佳实践&lt;/a&gt;。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/async">async</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/futures">futures</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/await">await</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/dart">dart</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/futures-async-await/</guid>
                <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>编写你的第一个 Flutter 应用，第一部分</title>
                <link>https://ohmyweekly.github.io/notes/write-your-first-flutter-app/</link>
                
                
                <description>&lt;blockquote&gt;Flutter 是 Google 的 UI 工具包，用于从单一代码库中为手机、网页和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起使用，被世界各地的开发者和组织使用，并且是免费和开源的。&lt;/blockquote&gt;&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Flutter 是 Google 的 UI 工具包，用于从单一代码库中为手机、网页和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起工作，被世界各地的开发者和组织使用，并且是免费和开源的。&lt;/p&gt;
&lt;p&gt;在这个代码实验室中，你将创建一个简单的手机 Flutter 应用。如果你熟悉面向对象的代码和基本的编程概念-如变量、循环和条件, 那么你就可以完成这个 codelab。你不需要以前有 Dart、手机或 Web 编程的经验。&lt;/p&gt;
&lt;h3 id=&#34;你将在第1部分学到什么&#34;&gt;你将在第1部分学到什么&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如何编写一款在 iOS、Android 和 Web 上看起来很自然的 Flutter 应用？&lt;/li&gt;
&lt;li&gt;Flutter 应用程序的基本结构。&lt;/li&gt;
&lt;li&gt;寻找和使用包来扩展功能。&lt;/li&gt;
&lt;li&gt;使用热重装来加快开发周期。&lt;/li&gt;
&lt;li&gt;如何实现一个有状态的小组件。&lt;/li&gt;
&lt;li&gt;如何创建一个无限的、懒加载的列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这个 codelab 的&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/index.html?index=..%2F..%2Findex#0&#34;&gt;第2部分&lt;/a&gt;中，你将添加交互性，修改应用程序的主题，并添加导航到新页面的能力(在 Flutter 中称为路由)。&lt;/p&gt;
&lt;h3 id=&#34;你将在第1部分中构建什么&#34;&gt;你将在第1部分中构建什么&lt;/h3&gt;
&lt;p&gt;你将实现一个移动应用，为一家创业公司生成建议的名字。用户可以选择和取消选择名字，保存最好的名字。代码一次懒惰地生成10个名字。随着用户的滚动，会生成更多的名字。用户可以滚动的范围没有限制。&lt;/p&gt;
&lt;p&gt;下面的 GIF 动画显示了应用程序在完成部分时的工作情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/6556f8b61acd6a89.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;设置你的-flutter-环境&#34;&gt;设置你的 Flutter 环境&lt;/h2&gt;
&lt;p&gt;你需要两个软件来完成这个实验室-&lt;a href=&#34;https://flutter.io/get-started/install/&#34;&gt;Flutter SDK&lt;/a&gt;和&lt;a href=&#34;https://flutter.io/get-started/editor/&#34;&gt;一个编辑器&lt;/a&gt;。(codelab 假设你使用 Android Studio，但你可以使用你的首选编辑器。)&lt;/p&gt;
&lt;p&gt;你可以通过使用以下任何设备来运行 codelab。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个物理的 &lt;a href=&#34;https://flutter.io/setup-macos/#set-up-your-android-device&#34;&gt;Android&lt;/a&gt; 或 &lt;a href=&#34;https://flutter.io/setup-macos/#deploy-to-ios-devices&#34;&gt;iOS&lt;/a&gt; 设备连接到你的计算机并设置为开发者模式。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.io/setup-macos/#set-up-the-ios-simulator&#34;&gt;iOS 模拟器&lt;/a&gt;(需要安装 Xcode 工具)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.io/setup-macos/#set-up-the-android-emulator&#34;&gt;安卓模拟器&lt;/a&gt;(需要在 Android Studio 中进行设置)&lt;/li&gt;
&lt;li&gt;浏览器(调试时需要使用 Chrome 浏览器)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你想编译你的应用程序以在 web 上运行，你必须启用此功能（目前处于测试阶段）。要启用 web 支持，请使用以下说明。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;flutter channel beta
flutter upgrade
flutter config --enable-web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你只需要运行一次 &lt;code&gt;config&lt;/code&gt; 命令。启用 Web 支持后，你创建的每个 Flutter 应用也会为 Web 编译。在你的 IDE 的&lt;strong&gt;设备&lt;/strong&gt;下拉菜单下面，或者在命令行使用 &lt;code&gt;flutter devices&lt;/code&gt;，你现在应该看到 Chrome 和 Web 服务器被列出。&lt;strong&gt;Chrome&lt;/strong&gt; 设备会自动启动 Chrome。Web 服务器会启动一个托管应用程序的服务器，这样你就可以从任何浏览器加载它。在开发过程中使用 &lt;strong&gt;Chrome&lt;/strong&gt; 设备，以便你可以使用 DevTools，而当你要在其他浏览器上进行测试时使用 Web 服务器。有关更多信息，请参阅&lt;a href=&#34;https://flutter.dev/docs/get-started/web&#34;&gt;使用 Flutter 构建 Web 应用程序&lt;/a&gt;和&lt;a href=&#34;https://flutter.dev/docs/get-started/codelab-web&#34;&gt;在 Web 上编写你的第一个 Flutter 应用程序&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;创建-flutter-应用程序的启动器&#34;&gt;创建 Flutter 应用程序的启动器&lt;/h2&gt;
&lt;p&gt;通过使用&lt;a href=&#34;https://flutter.dev/docs/get-started/test-drive#androidstudio&#34;&gt;创建应用程序&lt;/a&gt;中的说明来创建一个简单的、模板化的 Flutter 应用程序。输入 &lt;code&gt;startup_namer&lt;/code&gt;(而不是 &lt;code&gt;flutter_app&lt;/code&gt;)作为项目名称。您将修改启动器应用程序来创建完成的应用程序。&lt;/p&gt;
&lt;p&gt;提示：如果你在 IDE 中没有看到能够启动一个新的 Flutter 项目作为一个选项，那么请确保你已经&lt;a href=&#34;https://flutter.io/get-started/editor/#androidstudio&#34;&gt;安装了 Flutter 和 Dart 的插件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;你将主要编辑 &lt;code&gt;lib/main.dart&lt;/code&gt;，Dart 的代码就在这里。&lt;/p&gt;
&lt;p&gt;替换 &lt;code&gt;lib/main.dart&lt;/code&gt; 的内容。
删除 &lt;code&gt;lib/main.dart&lt;/code&gt; 中的所有代码，并用下面的代码替换，在屏幕中央显示 &amp;ldquo;Hello World&amp;rdquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:flutter/material.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyApp&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StatelessWidget&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MaterialApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Welcome to Flutter&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;home:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scaffold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;appBar:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AppBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
          &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Welcome to Flutter&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;body:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
          &lt;span class=&#34;nl&#34;&gt;child:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Hello World&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提示：当把代码粘贴到你的应用程序中时，缩进会变得歪斜。你可以用以下 Flutter 工具来解决。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio/IntelliJ IDEA: 右键点击 Dart 代码，选择&lt;strong&gt;用 dartfmt 重格式代码&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;VS code: 右键点击并选择&lt;strong&gt;格式化文档&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;终端: 运行 &lt;code&gt;flutter format &amp;lt;文件名&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://flutter.io/get-started/test-drive/#androidstudio&#34;&gt;运行应用程序&lt;/a&gt;。您应该看到 Android，iOS 或 Web 输出，取决于您的设备。&lt;/p&gt;
&lt;p&gt;安卓系统:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/f9df7832965ede9f.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;iOS:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/20374605026d582.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;小贴士：第一次在物理设备上运行时，可能需要一段时间来加载。之后，你可以使用热重载来快速更新。在支持的 IDE 中，如果应用正在运行，&lt;strong&gt;Save&lt;/strong&gt; 也会执行热重载。当使用 &lt;code&gt;flutter run&lt;/code&gt; 直接从控制台运行应用程序时，输入 &lt;code&gt;r&lt;/code&gt; 来执行热重载。&lt;/p&gt;
&lt;p&gt;观察:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个例子创建了一个 Material 应用。&lt;a href=&#34;https://material.io/guidelines/&#34;&gt;Material&lt;/a&gt; 是一种视觉设计语言，是移动和 Web 的标准。Flutter 提供了一套丰富的 Material 部件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; 方法使用箭头(&lt;code&gt;=&amp;gt;&lt;/code&gt;)符号。对单行函数或方法使用箭头符号。&lt;/li&gt;
&lt;li&gt;应用程序扩展了 &lt;code&gt;StatelessWidget&lt;/code&gt;，这使得应用程序本身成为一个组件。在 Flutter 中，几乎所有的东西都是组件，包括对齐、填充和布局。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scaffold&lt;/code&gt; 组件来自 Material 库，它提供了一个默认的应用栏、一个标题和一个 body 属性，其中存放着主屏幕的组件树。组件子树可以相当复杂。&lt;/li&gt;
&lt;li&gt;组件的主要工作是提供一个 &lt;code&gt;build&lt;/code&gt; 方法，描述如何用其他低级组件来显示该组件。&lt;/li&gt;
&lt;li&gt;本例的主体由包含 &lt;code&gt;Text&lt;/code&gt; 子部件的 &lt;code&gt;Center&lt;/code&gt; 部件组成。&lt;code&gt;Center&lt;/code&gt; 组件将其组件子树对齐到屏幕的中心。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用外部软件包&#34;&gt;使用外部软件包&lt;/h2&gt;
&lt;p&gt;在这一步中，您将开始使用一个名为 &lt;code&gt;english_words&lt;/code&gt; 的开源包，它包含了几千个最常用的英语单词，还有一些实用函数。&lt;/p&gt;
&lt;p&gt;你可以在 &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt; 找到 &lt;code&gt;english_words&lt;/code&gt; 包，以及许多其他开源包。&lt;/p&gt;
&lt;p&gt;pubspec 文件管理着 Flutter 应用的资产。在 &lt;code&gt;pubspec.yaml&lt;/code&gt; 中，附加 &lt;code&gt;english_words: ^3.1.5&lt;/code&gt;(&lt;code&gt;english_words&lt;/code&gt; 3.1.5 或更高)到依赖列表中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;dependencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;flutter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sdk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;flutter&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;cupertino_icons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;^&lt;span class=&#34;m&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;english_words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;^&lt;span class=&#34;m&#34;&gt;3.1&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# add this line&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Android Studio 的编辑器视图中查看 pubspec 时，点击 &lt;strong&gt;Packages get&lt;/strong&gt;。这将把包拉到你的项目中。你应该在控制台中看到以下内容。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;flutter packages get
Running &amp;#34;flutter packages get&amp;#34; in startup_namer...
Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行 &lt;code&gt;Pub get&lt;/code&gt; 也会自动生成 &amp;ldquo;pubspec.lock&amp;rdquo; 文件，其中包含所有拉入项目的包的列表和它们的版本号。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;lib/main.dart&lt;/code&gt; 中，导入新包:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:flutter/material.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:english_words/english_words.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// Add this line.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当你输入时，Android Studio 会给你建议导入的库。然后，它将导入的字符串渲染成灰色，让你知道导入的库是未使用的（到目前为止）。&lt;/p&gt;
&lt;p&gt;接下来，你将使用 &lt;code&gt;english_words&lt;/code&gt; 包来生成文本，而不是使用 &amp;ldquo;Hello World&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;做以下修改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:flutter/material.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;package:english_words/english_words.dart&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyApp&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StatelessWidget&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wordPair&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WordPair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Add this line.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MaterialApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Welcome to Flutter&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;home:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scaffold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;appBar:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AppBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
          &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Welcome to Flutter&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;body:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
          &lt;span class=&#34;c1&#34;&gt;//child: Text(&amp;#39;Hello World&amp;#39;),   // Replace this text...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;nl&#34;&gt;child:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wordPair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asPascalCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// With this text.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提示: Pascal 大小写(也称为上驼形大小写)意味着字符串中的每个单词，包括第一个单词，都以大写字母开头。所以，&lt;code&gt;uppercamelcase&lt;/code&gt; 就变成了 &lt;code&gt;UpperCamelCase&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果应用程序正在运行，热重载来更新正在运行的应用程序。(在命令行中，你可以输入 &lt;code&gt;r&lt;/code&gt; 来热重载。)每次点击热重载或保存项目时，你应该会在运行中的应用程序中看到一个不同的单词对，随机选择。这是因为单词对是在 &lt;code&gt;build&lt;/code&gt; 方法里面生成的，每次 &lt;code&gt;MaterialApp&lt;/code&gt; 需要渲染时，或者在 Flutter Inspector 中切换 &lt;strong&gt;Platform&lt;/strong&gt; 时，都会运行该方法。&lt;/p&gt;
&lt;p&gt;Android:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/57cfbac8f2b50e5b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;iOS:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/30ed7f83a1500fa9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;有问题&#34;&gt;有问题？&lt;/h3&gt;
&lt;p&gt;如果您的应用程序没有正确运行，请查找错别字。如果需要，请使用以下链接中的代码来恢复正常。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flutter/codelabs/blob/b3293b5bb0c0187bdbe8112f7759f4d75f4c040a/startup_namer/step2_use_package/pubspec.yaml&#34;&gt;pubspec.yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flutter/codelabs/blob/b3293b5bb0c0187bdbe8112f7759f4d75f4c040a/startup_namer/step2_use_package/lib/main.dart&#34;&gt;lib/main.dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;添加一个有状态的组件&#34;&gt;添加一个有状态的组件&lt;/h2&gt;
&lt;p&gt;无状态组件是不可改变的，这意味着它们的属性不能改变-所有值都是最终值。&lt;/p&gt;
&lt;p&gt;有状态组件维护的状态可能在组件的生命周期内发生变化。实现一个有状态的组件至少需要两个类。1) 一个 &lt;a href=&#34;https://docs.flutter.io/flutter/widgets/StatefulWidget-class.html&#34;&gt;StatefulWidget&lt;/a&gt;，它可以创建一个 &lt;a href=&#34;https://docs.flutter.io/flutter/widgets/State-class.html&#34;&gt;State&lt;/a&gt; 类的实例。&lt;code&gt;StatefulWidget&lt;/code&gt; 对象本身是不可变的，可以被丢弃和再生，但 &lt;code&gt;State&lt;/code&gt; 对象会在 widget 的生命周期内持久存在。&lt;/p&gt;
&lt;p&gt;在这一步骤中，您将添加一个有状态的组件 &lt;code&gt;RandomWords&lt;/code&gt;，并创建其 &lt;code&gt;State&lt;/code&gt; 类 &lt;code&gt;_RandomWordsState&lt;/code&gt;。然后，您将在现有的 MyApp 无状态组件中使用 &lt;code&gt;RandomWords&lt;/code&gt; 作为子类。&lt;/p&gt;
&lt;p&gt;为有状态组件创建模板代码。&lt;/p&gt;
&lt;p&gt;它可以放在 &lt;code&gt;MyApp&lt;/code&gt; 以外的文件中的任何位置，但解决方案将其放在文件的底部。在 &lt;code&gt;lib/main.dart&lt;/code&gt; 中，将光标定位在所有代码之后，输入回车键几次，重新开始一行。在你的 IDE 中，开始输入 &lt;code&gt;stful&lt;/code&gt;。编辑器会询问你是否要创建一个 &lt;code&gt;Stateful&lt;/code&gt; 的组件。按回车键接受。两个类的模板代码出现了，光标定位让你输入无状态组件的名称。&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;RandomWords&lt;/code&gt; 作为您的小组件的名称。&lt;/p&gt;
&lt;p&gt;正如您在下面的代码中所看到的，&lt;code&gt;RandomWords&lt;/code&gt; 组件除了创建它的 &lt;code&gt;State&lt;/code&gt; 类之外，几乎没有其他的功能。&lt;/p&gt;
&lt;p&gt;一旦您输入 &lt;code&gt;RandomWords&lt;/code&gt; 作为有状态组件的名称，IDE 会自动更新相应的 &lt;code&gt;State&lt;/code&gt; 类，将其命名为 &lt;code&gt;_RandomWordState&lt;/code&gt;。默认情况下，&lt;code&gt;State&lt;/code&gt; 类的名称是以下划线为前缀的。在标识符前加上下划线可以加强 Dart 语言的&lt;a href=&#34;https://dart.dev/guides/language/language-tour#libraries-and-visibility&#34;&gt;隐私性&lt;/a&gt;，也是 &lt;code&gt;State&lt;/code&gt; 对象的最佳实践。&lt;/p&gt;
&lt;p&gt;IDE 也会自动更新 State 类以扩展 &lt;code&gt;State&amp;lt;RandomWords&amp;gt;&lt;/code&gt;，表明你正在使用一个专门用于 &lt;code&gt;RandomWords&lt;/code&gt; 的通用 &lt;a href=&#34;https://api.flutter.dev/flutter/widgets/State-class.html&#34;&gt;State&lt;/a&gt; 类。应用程序的大部分逻辑都在这里-它为 &lt;code&gt;RandomWords&lt;/code&gt; 组件维护状态。这个类保存了生成的词对列表，随着用户的滚动而无限增长，在本实验室的第二部分中，当用户通过切换心形图标从列表中添加或删除这些词对时，该类会对其进行收藏。&lt;/p&gt;
&lt;p&gt;现在两个类的外观如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RandomWords&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StatefulWidget&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;_RandomWordsState&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_RandomWordsState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;_RandomWordsState&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RandomWords&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新 &lt;code&gt;_RandomWordsState&lt;/code&gt; 中的 &lt;code&gt;build()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;用以下两行替换 &lt;code&gt;return Container();&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;_RandomWordsState&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RandomWords&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;                                  
  &lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wordPair&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WordPair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// NEW
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wordPair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asPascalCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// NEW
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;                                         
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过以下修改，删除 &lt;code&gt;MyApp&lt;/code&gt; 中的文字生成代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyApp&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StatelessWidget&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wordPair&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WordPair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// DELETE
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MaterialApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Welcome to Flutter&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;home:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scaffold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;appBar:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AppBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
          &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Welcome to Flutter&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;body:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
          &lt;span class=&#34;c1&#34;&gt;//child: Text(wordPair.asPascalCase), // REPLACE with... 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;nl&#34;&gt;child:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RandomWords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;// ...this line
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;热重载应用程序。应用程序应该像以前一样，每次热重载或保存应用程序时都会显示一个单词配对。&lt;/p&gt;
&lt;p&gt;提示：如果您在热重载时看到警告，表明您可能需要重新启动应用程序，您应该考虑重新启动应用程序。这可能是一个假阳性，但重启可以确保您的更改反映在应用程序的 UI 中。&lt;/p&gt;
&lt;h3 id=&#34;遇到问题了&#34;&gt;遇到问题了？&lt;/h3&gt;
&lt;p&gt;如果您的应用程序没有正确运行，您可以使用以下链接中的代码来恢复正常。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flutter/codelabs/blob/b3293b5bb0c0187bdbe8112f7759f4d75f4c040a/startup_namer/step3_stateful_widget/lib/main.dart&#34;&gt;lib/main.dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建一个无限滚动的-listview&#34;&gt;创建一个无限滚动的 ListView&lt;/h2&gt;
&lt;p&gt;在这一步中，您将展开 &lt;code&gt;_RandomWordsState&lt;/code&gt; 来生成并显示单词配对列表。随着用户的滚动，列表（显示在 ListView 小组件中）会无限增长。ListView 中的构建器工厂构造函数允许你按需懒惰地构建一个列表视图。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;_RandomWordState&lt;/code&gt; 类中添加一些状态变量。&lt;/p&gt;
&lt;p&gt;增加一个 &lt;code&gt;_suggestions&lt;/code&gt; 列表，用于保存建议的单词配对。另外，添加一个 &lt;code&gt;_biggerFont&lt;/code&gt; 变量，用于使字体大小变大。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;_RandomWordsState&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RandomWords&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WordPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_suggestions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WordPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;// NEW
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextStyle&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_biggerFont&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;fontSize:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// NEW
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，你将在 &lt;code&gt;_RandomWordsState&lt;/code&gt; 类中添加一个 &lt;code&gt;_buildSuggestions()&lt;/code&gt; 函数。这个方法可以构建显示建议词对的 &lt;code&gt;ListView&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ListView&lt;/code&gt; 类提供了一个构建器属性 &lt;code&gt;itemBuilder&lt;/code&gt;，它是一个工厂构建器和回调函数，指定为一个匿名函数。两个参数被传递给函数&amp;ndash;&lt;code&gt;BuildContext&lt;/code&gt; 和行迭代器 &lt;code&gt;i&lt;/code&gt;。迭代器从0开始，每次调用函数时递增，每一个建议的单词配对都会递增一次。这个模型允许建议列表在用户滚动时继续增长。&lt;/p&gt;
&lt;p&gt;添加整个 &lt;code&gt;_buildSuggestions&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;_RandomWordsState&lt;/code&gt; 类中，添加以下函数，如果你喜欢，请删除注释:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_buildSuggestions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ListView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;padding:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EdgeInsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// The itemBuilder callback is called once per suggested 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// word pairing, and places each suggestion into a ListTile
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// row. For even rows, the function adds a ListTile row for
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// the word pairing. For odd rows, the function adds a 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// Divider widget to visually separate the entries. Note that
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// the divider may be difficult to see on smaller devices.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nl&#34;&gt;itemBuilder:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Add a one-pixel-high divider widget before each row 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// in the ListView.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isOdd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Divider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// The syntax &amp;#34;i ~/ 2&amp;#34; divides i by 2 and returns an 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// integer result.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// For example: 1, 2, 3, 4, 5 becomes 0, 1, 1, 2, 2.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// This calculates the actual number of word pairings 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// in the ListView,minus the divider widgets.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// If you&amp;#39;ve reached the end of the available word
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// pairings...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_suggestions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;c1&#34;&gt;// ...then generate 10 more and add them to the 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// suggestions list.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;n&#34;&gt;_suggestions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generateWordPairs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_buildRow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_suggestions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;_buildSuggestions&lt;/code&gt; 函数对每个词对调用一次 &lt;code&gt;_buildRow&lt;/code&gt;。该函数在 &lt;code&gt;ListTile&lt;/code&gt; 中显示每一个新的词对，这使得你可以在&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/index.html?index=..%2F..index#0&#34;&gt;第2部分&lt;/a&gt;中使行更有吸引力。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;_RandomWordsState&lt;/code&gt; 中添加一个 &lt;code&gt;_buildRow&lt;/code&gt; 函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_buildRow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WordPair&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ListTile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asPascalCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;style:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_biggerFont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新 &lt;code&gt;_RandomWordsState&lt;/code&gt; 的构建方法。&lt;/p&gt;
&lt;p&gt;将其改为使用 &lt;code&gt;_buildSuggestions()&lt;/code&gt;，而不是直接调用单词生成库。(&lt;code&gt;Scaffold&lt;/code&gt; 实现了基本的 Material Design 视觉布局。)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//final wordPair = WordPair.random(); // Delete these... 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//return Text(wordPair.asPascalCase); // ... two lines.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scaffold&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;                     &lt;span class=&#34;c1&#34;&gt;// Add from here... 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nl&#34;&gt;appBar:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AppBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Startup Name Generator&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;body:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_buildSuggestions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                                      &lt;span class=&#34;c1&#34;&gt;// ... to here.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新 &lt;code&gt;MyApp&lt;/code&gt; 的构建方法，更改标题，删除 &lt;code&gt;AppBar&lt;/code&gt;，并将 home 属性改为 &lt;code&gt;RandomWords&lt;/code&gt; 部件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MaterialApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Startup Name Generator&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;home:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RandomWords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重新启动应用程序。无论你滚动多远，你都应该看到一个单词配对的列表。&lt;/p&gt;
&lt;p&gt;Android:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/df2b3cb779e0020e.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;iOS:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/ae47ef0ac2f492b8.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;遇到问题了-1&#34;&gt;遇到问题了？&lt;/h3&gt;
&lt;p&gt;如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flutter/codelabs/blob/b3293b5bb0c0187bdbe8112f7759f4d75f4c040a/startup_namer/step4_infinite_list/lib/main.dart&#34;&gt;lib/main.dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;今后的步骤&#34;&gt;今后的步骤&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;恭喜你！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你已经完成了这个代码实验室的第一部分! 如果你想扩展这款应用，请进入&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/#0&#34;&gt;第二部分&lt;/a&gt;，你将对应用进行如下修改。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加互动性&lt;/li&gt;
&lt;li&gt;增加导航到新路由的功能。&lt;/li&gt;
&lt;li&gt;修改主题颜色。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当第2部分完成后，应用程序将是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/7fcab088cd22cff7.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;其他后续步骤&#34;&gt;其他后续步骤&lt;/h3&gt;
&lt;p&gt;通过以下资源了解更多关于 Flutter SDK 的信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/development/ui/layout&#34;&gt;Flutter 中的布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/development/ui/interactive&#34;&gt;增加互动性教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/development/ui/widgets-intro&#34;&gt;组件介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/get-started/flutter-for/android-devs&#34;&gt;为 Android 开发者提供的 Flutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/get-started/flutter-for/react-native-devs&#34;&gt;针对 React Native 开发者的 Flutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/get-started/flutter-for/web-devs&#34;&gt;Web 开发人员的 Flutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/flutterdev&#34;&gt;Flutter YouTube 频道&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他资源包括以下几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.udacity.com/course/build-native-mobile-apps-with-flutter--ud905&#34;&gt;用 Flutter 构建本地移动应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/from-java-to-dart/#1&#34;&gt;从 Java 到 Dart codelab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/cookbook/&#34;&gt;Flutter cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/bootstrap-into-dart/&#34;&gt;融入 Dart 的 Bootstrap：了解更多关于这门语言的信息&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时，&lt;a href=&#34;https://flutter.dev/community&#34;&gt;与 Flutter 社区联系起来!&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/app">app</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/write-your-first-flutter-app/</guid>
                <pubDate>Fri, 26 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>编写你的第一个 Flutter 应用，第二部分</title>
                <link>https://ohmyweekly.github.io/notes/write-your-first-flutter-app-part-two/</link>
                
                
                <description>&lt;blockquote&gt;Flutter 是 Google 的 UI 工具包，用于从单一代码库中为手机、网页和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起使用，被世界各地的开发者和组织使用，并且是免费和开源的。&lt;/blockquote&gt;&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Flutter 是 Google 的 UI 工具包，用于从单一代码库中为移动、Web 和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起工作，被世界各地的开发者和组织使用，并且是免费和开源的。&lt;/p&gt;
&lt;p&gt;在这个代码实验室中，您将扩展一个基本的、移动的 Flutter 应用程序，以包含交互性。您还将创建一个用户可以导航到的第二个页面（称为路由）。最后，您将修改应用程序的主题（颜色）。这个代码实验室扩展了第1部分，在这部分中，你将&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/&#34;&gt;创建一个无限的懒惰加载的列表&lt;/a&gt;，但如果你想从第2部分开始，我们将提供起始代码。&lt;/p&gt;
&lt;h3 id=&#34;你将在第二部分学到什么&#34;&gt;你将在第二部分学到什么&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如何编写一款在 iOS、Android 和 Web 上看起来很自然的 Flutter 应用？&lt;/li&gt;
&lt;li&gt;如何使用热重装，加快开发周期？&lt;/li&gt;
&lt;li&gt;如何为有状态的 widget 添加交互性？&lt;/li&gt;
&lt;li&gt;如何创建并导航到第二个屏幕？&lt;/li&gt;
&lt;li&gt;如何使用主题来改变应用程序的外观？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;你将在第二部分建立什么&#34;&gt;你将在第二部分建立什么&lt;/h3&gt;
&lt;p&gt;您将从一个简单的移动应用程序开始，为创业公司生成一个无尽的建议名称列表。在代码实验室结束时，您的最终用户可以选择和取消选择名称，保存最好的名称。点击应用栏右上角的列表图标可以导航到一个新的页面（称为路由），该页面只列出了最喜欢的名字。&lt;/p&gt;
&lt;p&gt;下面的 GIF 动画显示了完成的应用程序将如何工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/7fcab088cd22cff7.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;设置您的-flutter-环境&#34;&gt;设置您的 Flutter 环境&lt;/h2&gt;
&lt;p&gt;如果你还没有完成第1部分，请看&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/#1&#34;&gt;设置你的 Flutter 环境&lt;/a&gt;，在&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/&#34;&gt;编写你的第一个Flutter应用，第1部分&lt;/a&gt;，设置你的 Flutter 开发环境。&lt;/p&gt;
&lt;h2 id=&#34;获取启动应用程序&#34;&gt;获取启动应用程序&lt;/h2&gt;
&lt;p&gt;如果你已经完成了这个 codelab 的第一部分，你已经有了启动应用程序，&lt;code&gt;startup_namer&lt;/code&gt;。你可以进行下一步。&lt;/p&gt;
&lt;p&gt;如果你没有 &lt;code&gt;startup_namer&lt;/code&gt;，不要害怕，你可以使用下面的说明得到它。&lt;/p&gt;
&lt;p&gt;使用&lt;a href=&#34;https://flutter.dev/get-started/test-drive/#create-app&#34;&gt;创建应用程序&lt;/a&gt;中的说明创建一个简单的模板化 Flutter 应用程序。将项目命名为 &lt;code&gt;startup_namer&lt;/code&gt;（而不是 &lt;code&gt;flutter_app&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;删除 &lt;code&gt;lib/main.dart&lt;/code&gt; 中的所有代码。用这个&lt;a href=&#34;https://github.com/flutter/codelabs/blob/b3293b5bb0c0187bdbe8112f7759f4d75f4c040a/startup_namer/step4_infinite_list/lib/main.dart&#34;&gt;文件&lt;/a&gt;中的代码替换，它显示了一个无限的，懒惰加载的建议启动名称列表。&lt;/p&gt;
&lt;p&gt;更新 &lt;code&gt;pubspec.yaml&lt;/code&gt;，加入英文单词包。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;dependencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;flutter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sdk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;flutter&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;cupertino_icons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;^&lt;span class=&#34;m&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;english_words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;^&lt;span class=&#34;m&#34;&gt;3.1&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;//&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NEW&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;英文单词包会生成一对随机的单词，作为潜在的启动名称。&lt;/p&gt;
&lt;p&gt;在 Android Studio 的编辑器视图中查看 pubspec 时，点击右上角的 &lt;strong&gt;Pub get&lt;/strong&gt;，这将包拉到你的项目中。你应该在控制台中看到以下内容:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;flutter pub get
Running &lt;span class=&#34;s2&#34;&gt;&amp;#34;flutter pub get&amp;#34;&lt;/span&gt; in startup_namer...
Process finished with &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; code &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行该应用。&lt;/p&gt;
&lt;p&gt;随意滚动，查看持续供应的拟创业公司名称。&lt;/p&gt;
&lt;h2 id=&#34;将图标添加到列表中&#34;&gt;将图标添加到列表中&lt;/h2&gt;
&lt;p&gt;在这一步中，你将为每一行添加心形图标。在下一步中，您将使它们可点击并保存收藏夹。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;_RandomWordsState&lt;/code&gt; 中添加一个 &lt;code&gt;_saved&lt;/code&gt; Set。这个 &lt;code&gt;Set&lt;/code&gt; 存储了用户收藏的单词配对。&lt;code&gt;Set&lt;/code&gt; 比 &lt;code&gt;List&lt;/code&gt; 更受欢迎，因为一个正确实现的 &lt;code&gt;Set&lt;/code&gt; 不允许重复的条目。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;_RandomWordsState&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RandomWords&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_suggestions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WordPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_saved&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WordPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// NEW
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_biggerFont&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;fontSize:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;18.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;_buildRow&lt;/code&gt; 函数中，添加一个 &lt;code&gt;alreadySaved&lt;/code&gt; 检查，以确保一个单词配对还没有被添加到收藏夹中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_buildRow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WordPair&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alreadySaved&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_saved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// NEW
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;_buildRow()&lt;/code&gt; 中，你还将为 &lt;code&gt;ListTile&lt;/code&gt; 对象添加心形图标以实现收藏夹。在下一步中，你将添加与心形图标交互的功能。&lt;/p&gt;
&lt;p&gt;在文本之后添加图标，如下图所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_buildRow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WordPair&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alreadySaved&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_saved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ListTile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asPascalCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;style:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_biggerFont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;trailing:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Icon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// NEW from here... 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;alreadySaved&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Icons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;favorite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Icons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;favorite_border&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;color:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alreadySaved&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;red&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// ... to here.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;热重新加载应用程序。&lt;/p&gt;
&lt;p&gt;你现在应该看到每一行都有空心，但它们还没有互动。&lt;/p&gt;
&lt;p&gt;Android&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/819e2ff89da9421a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;iOS&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/4df48933551e7c48.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;遇到问题了&#34;&gt;遇到问题了？&lt;/h3&gt;
&lt;p&gt;如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flutter/codelabs/blob/master/startup_namer/step5_add_icons/lib/main.dart&#34;&gt;lib/main.dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;增加互动性&#34;&gt;增加互动性&lt;/h2&gt;
&lt;p&gt;在这一步中，你将使心形图标可以点击。当用户点击列表中的一个条目，切换其收藏状态时，该词对就会从一组保存的收藏夹中添加或删除。&lt;/p&gt;
&lt;p&gt;要做到这一点，你将修改 &lt;code&gt;_buildRow&lt;/code&gt; 函数。如果一个词条已经被添加到收藏夹中，再次点击它就会将其从收藏夹中删除。当一个磁贴被点击后，函数会调用 &lt;code&gt;setState()&lt;/code&gt; 来通知框架状态已经改变。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;_buildRow&lt;/code&gt; 方法中加入 &lt;code&gt;onTap&lt;/code&gt;，如下图所示:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_buildRow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WordPair&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alreadySaved&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_saved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ListTile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asPascalCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;style:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_biggerFont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;trailing:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Icon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;alreadySaved&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Icons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;favorite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Icons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;favorite_border&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;color:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alreadySaved&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;red&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;onTap:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// NEW lines from here...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alreadySaved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;_saved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
          &lt;span class=&#34;n&#34;&gt;_saved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;// ... to here.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提示：在 Flutter 的反应式框架中，调用 &lt;code&gt;setState()&lt;/code&gt; 会触发对 &lt;code&gt;State&lt;/code&gt; 对象的 &lt;code&gt;build()&lt;/code&gt; 方法的调用，导致 UI 的更新。&lt;/p&gt;
&lt;p&gt;热重载应用。&lt;/p&gt;
&lt;p&gt;你应该能够点击任何磁贴来收藏或不收藏该条目。点击瓷砖会产生一个隐含的从点击点发出的泼墨动画。&lt;/p&gt;
&lt;p&gt;Android&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/43dfc7ba5f728e8f.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;iOS&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/e7a99a1b94bea7d4.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;遇到问题了-1&#34;&gt;遇到问题了？&lt;/h3&gt;
&lt;p&gt;如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flutter/codelabs/blob/master/startup_namer/step6_add_interactivity/lib/main.dart&#34;&gt;lib/main.dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;导航到一个新的屏幕&#34;&gt;导航到一个新的屏幕&lt;/h2&gt;
&lt;p&gt;在这一步中，您将添加一个新的页面（在 Flutter 中称为路由），显示收藏夹。您将学习如何在主页路线和新路由之间进行导航。&lt;/p&gt;
&lt;p&gt;在 Flutter 中，&lt;code&gt;Navigator&lt;/code&gt; 管理着一个包含应用程序路由的堆栈。将一个路由推到 &lt;code&gt;Navigator&lt;/code&gt; 的堆栈上，会将显示更新到该路由。从 &lt;code&gt;Navigator&lt;/code&gt; 的堆栈中弹出一条路由，会将显示返回到之前的路由。&lt;/p&gt;
&lt;p&gt;接下来，您将在 &lt;code&gt;_RandomWordsState&lt;/code&gt; 的 &lt;code&gt;build&lt;/code&gt; 方法中为 &lt;code&gt;AppBar&lt;/code&gt; 添加一个列表图标。当用户点击列表图标时，一个包含保存的收藏夹的新路由会被推送到 &lt;code&gt;Navigator&lt;/code&gt;，显示图标。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;build&lt;/code&gt; 方法中添加图标及其对应的操作:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;_RandomWordsState&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RandomWords&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scaffold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;appBar:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AppBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Startup Name Generator&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;actions:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;// NEW lines from here...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;n&#34;&gt;IconButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;icon:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Icon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Icons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;onPressed:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_pushSaved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                      &lt;span class=&#34;c1&#34;&gt;// ... to here.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;home:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RandomWords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提示：一些小组件属性会取一个小组件(&lt;code&gt;child&lt;/code&gt;)，而其他属性，如 &lt;code&gt;action&lt;/code&gt;，会取一组小组件(&lt;code&gt;children&lt;/code&gt;), 如方括号(&lt;code&gt;[]&lt;/code&gt;)所示。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;_RandomWordsState&lt;/code&gt; 类中添加一个 &lt;code&gt;_pushSaved()&lt;/code&gt; 函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_pushSaved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;热重新加载应用程序。&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/a114478ae13b853.png&#34;&gt;列表图标&lt;/a&gt;出现在应用栏中。点击它还没有任何作用，因为 &lt;code&gt;_pushSaved&lt;/code&gt; 函数是空的。&lt;/p&gt;
&lt;p&gt;接下来，你将建立一条路由，并将其推送到 &lt;code&gt;Navigator&lt;/code&gt; 的栈中。这个操作会改变屏幕以显示新的路由。新页面的内容是在 &lt;code&gt;MaterialPageRoute&lt;/code&gt; 的构建器属性中以匿名函数的方式构建的。&lt;/p&gt;
&lt;p&gt;调用 &lt;code&gt;Navigator.push&lt;/code&gt;，如下图所示，它将路由推送到 &lt;code&gt;Navigator&lt;/code&gt; 的堆栈中。IDE 会抱怨无效代码，但你会在下一节中解决这个问题。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_pushSaved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，你将添加 &lt;code&gt;MaterialPageRoute&lt;/code&gt; 和它的构建器。现在，添加生成 &lt;code&gt;ListTile&lt;/code&gt; 行的代码。&lt;code&gt;ListTile&lt;/code&gt; 的 &lt;code&gt;divideTiles()&lt;/code&gt; 方法在每个 &lt;code&gt;ListTile&lt;/code&gt; 之间增加了水平间距。被划分的变量持有通过方便函数 &lt;code&gt;toList()&lt;/code&gt; 转换为列表的最终行。&lt;/p&gt;
&lt;p&gt;添加代码，如下面的代码片段所示:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_pushSaved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;MaterialPageRoute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// NEW lines from here...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nl&#34;&gt;builder:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tiles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_saved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WordPair&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ListTile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
                &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
                  &lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asPascalCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                  &lt;span class=&#34;nl&#34;&gt;style:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_biggerFont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;divided&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ListTile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;divideTiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;nl&#34;&gt;context:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nl&#34;&gt;tiles:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

          &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scaffold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;nl&#34;&gt;appBar:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AppBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
              &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Saved Suggestions&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nl&#34;&gt;body:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ListView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;children:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;divided&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ...to here.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;builder&lt;/code&gt; 属性返回一个 &lt;code&gt;Scaffold&lt;/code&gt;，包含名为 &lt;code&gt;SavedSuggestions&lt;/code&gt; 的新路由的应用栏。新路由的主体由一个包含 &lt;code&gt;ListTiles&lt;/code&gt; 行的 &lt;code&gt;ListView&lt;/code&gt; 组成。每一行都由一个分隔符隔开。&lt;/p&gt;
&lt;p&gt;热重载应用。将一些选择收藏起来，然后点击应用栏中的列表图标。新的路由出现，包含收藏夹。请注意，Navigator 在应用栏中增加了一个&amp;quot;返回&amp;quot;按钮。你不必明确地实现 &lt;code&gt;Navigator.pop&lt;/code&gt;。点击&amp;quot;返回&amp;quot;按钮就可以返回到主路由。&lt;/p&gt;
&lt;p&gt;iOS - Main route&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/928693968b8e482a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;iOS - Saved suggestions route&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/2245376356747d5a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;遇到问题了-2&#34;&gt;遇到问题了？&lt;/h3&gt;
&lt;p&gt;如果你的应用程序没有正确运行，那么你可以使用下面链接中的代码来回到正轨。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flutter/codelabs/blob/master/startup_namer/step7_navigate_route/lib/main.dart&#34;&gt;lib/main.dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用主题改变用户界面&#34;&gt;使用主题改变用户界面&lt;/h2&gt;
&lt;p&gt;在这一步中，您将修改应用程序的主题。主题控制你的应用程序的外观和感觉。您可以使用默认主题，这取决于物理设备或模拟器，或者自定义主题以反映您的品牌。&lt;/p&gt;
&lt;p&gt;您可以通过配置 &lt;a href=&#34;https://docs.flutter.io/flutter/material/ThemeData-class.html&#34;&gt;ThemeData&lt;/a&gt; 类轻松更改应用程序的主题。应用程序使用默认主题，但你会将应用程序的主色调改为白色。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;MyApp&lt;/code&gt; 类中更改颜色:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyApp&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StatelessWidget&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MaterialApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;title:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Startup Name Generator&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nl&#34;&gt;theme:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ThemeData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// Add the 3 lines from here... 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nl&#34;&gt;primaryColor:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                         &lt;span class=&#34;c1&#34;&gt;// ... to here.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nl&#34;&gt;home:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RandomWords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;热重载应用。现在整个背景都是白色的，甚至应用栏也是白色的。&lt;/p&gt;
&lt;p&gt;作为一个练习，使用 &lt;code&gt;ThemeData&lt;/code&gt; 来改变 UI 的其他方面。Material 库中的 &lt;a href=&#34;https://docs.flutter.io/flutter/material/Colors-class.html&#34;&gt;Colors&lt;/a&gt; 类提供了许多你可以玩的颜色常量。热重载使得对 UI 的实验变得快速而简单。&lt;/p&gt;
&lt;p&gt;Android&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/5d4ed8aeea9e4d0a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;iOS&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/c325151f1ae4820d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;遇到问题了-3&#34;&gt;遇到问题了？&lt;/h3&gt;
&lt;p&gt;如果你已经偏离了轨道，那么使用下面链接中的代码来查看最终应用的代码。&lt;/p&gt;
&lt;p&gt;= &lt;a href=&#34;https://github.com/flutter/codelabs/blob/master/startup_namer/step8_themes/lib/main.darts&#34;&gt;lib/main.dart&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;做得很好&#34;&gt;做得很好！&lt;/h2&gt;
&lt;p&gt;你写了一个交互式的 Flutter 应用，可以在 iOS 和 Android 上运行，具体做法如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写 Dart 代码。&lt;/li&gt;
&lt;li&gt;使用热重载来加快开发周期。&lt;/li&gt;
&lt;li&gt;实现一个有状态的 widget，为你的应用添加交互性。&lt;/li&gt;
&lt;li&gt;创建途径并添加在原途径和新途径之间移动的逻辑。&lt;/li&gt;
&lt;li&gt;学习如何使用主题改变你的应用程序的 UI 外观。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;今后的步骤&#34;&gt;今后的步骤&lt;/h2&gt;
&lt;p&gt;从以下资源中了解更多关于 Flutter SDK 的信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/development/ui/layout&#34;&gt;Flutter 中的布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/development/ui/interactive&#34;&gt;增加互动性教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/development/ui/widgets-intro&#34;&gt;组件介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/get-started/flutter-for/android-devs&#34;&gt;为 Android 开发者提供的 Flutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/get-started/flutter-for/react-native-devs&#34;&gt;针对 React Native 开发者的 Flutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/get-started/flutter-for/web-devs&#34;&gt;Web 开发人员的 Flutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/flutterdev&#34;&gt;Flutter YouTube 频道&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他资源包括以下几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.udacity.com/course/build-native-mobile-apps-with-flutter--ud905&#34;&gt;用 Flutter 构建本地移动应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/from-java-to-dart/#1&#34;&gt;从 Java 到 Dart codelab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/cookbook/&#34;&gt;Flutter cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev/bootstrap-into-dart/&#34;&gt;融入 Dart 的 Bootstrap：了解更多关于这门语言的信息&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时，&lt;a href=&#34;https://flutter.dev/community&#34;&gt;与 Flutter 社区联系起来!&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flutter">flutter</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/app">app</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/write-your-first-flutter-app-part-two/</guid>
                <pubDate>Fri, 26 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Dart 入门</title>
                <link>https://ohmyweekly.github.io/notes/dart/</link>
                
                
                <description>&lt;blockquote&gt;&lt;a href=&#34;https://www.dartcn.com/&#34;&gt;Dart&lt;/a&gt;入门指南。&lt;/blockquote&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;dart-help&#34;&gt;重要的概念&lt;/h2&gt;
&lt;p&gt;与 Java 不同，Dart 没有关键字 &amp;ldquo;public&amp;rdquo;, &amp;ldquo;protected&amp;rdquo; 和 &amp;ldquo;private&amp;rdquo;。 如果标识符以下划线（&lt;code&gt;_&lt;/code&gt;）开头，则它相对于库是私有的。 有关更多信息，参考&lt;a href=&#34;https://www.dartcn.com/guides/language/language-tour#%E5%BA%93%E5%92%8C%E5%8F%AF%E8%A7%81%E6%80%A7&#34;&gt;库和可见性&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Bob&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// 类型推断
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;dynamic&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Bob&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 动态类型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Bob&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 显式声明
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;默认值&#34;&gt;默认值&lt;/h3&gt;
&lt;p&gt;未初始化的变量默认值是 &lt;code&gt;null&lt;/code&gt;。即使变量是数字, 类型默认值也是 null, 因为在 Dart 中一切都是对象，数字类型也不例外。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lineCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lineCount&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;final-和-const&#34;&gt;final 和 const&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;final&lt;/code&gt; 关键字声明的变量, 其值只能被设置一次, 使用 &lt;code&gt;const&lt;/code&gt; 关键字声明的变量, 其值在编译时就已固定:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Bob&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 不使用类型注解
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nickname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Bobby&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Alice&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// Error: final 变量只能被设置一次
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;const&lt;/code&gt; 声明一个在&lt;strong&gt;编译&lt;/strong&gt;时就固定不变的值, 例如数字字面量、字符串字面量:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1000000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;// 压力单位(dynes/cm2)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;atm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1.01325&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 一个标准大气压强
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;内置类型&#34;&gt;内置类型&lt;/h2&gt;
&lt;p&gt;Dart 语言支持以下内置类型:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;字面量&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;对象&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Number&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2⁶³ -1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;lsquo;Hello&amp;rsquo;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;true,false&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;List&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;[1,2,3]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Set&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{&amp;lsquo;raku&amp;rsquo;,&amp;lsquo;perl&amp;rsquo;}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Map&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{&amp;lsquo;lan&amp;rsquo;: &amp;lsquo;raku&amp;rsquo;}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Rune&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;\u2665, \u{1f600}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Symbol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;#dadix, #bar&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/dart">dart</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/examples">examples</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/dart/</guid>
                <pubDate>Thu, 25 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Dart 可迭代集合</title>
                <link>https://ohmyweekly.github.io/notes/dart-iterable-collections/</link>
                
                
                <description>&lt;blockquote&gt;&lt;a href=&#34;https://dart.dev/codelabs/iterables&#34;&gt;Dart&lt;/a&gt;可迭代集合。&lt;/blockquote&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;这个代码实验室教你如何使用实现 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/Iterable-class.html&#34;&gt;Iterable&lt;/a&gt;类的集合-例如 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/List-class.html&#34;&gt;List&lt;/a&gt;和 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/Set-class.html&#34;&gt;Set&lt;/a&gt;。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。&lt;/p&gt;
&lt;p&gt;使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。&lt;/p&gt;
&lt;p&gt;要想从这个 codelab 中获得最大的收获，你应该具备基本的 &lt;a href=&#34;https://dart.dev/samples&#34;&gt;Dart 语法知识&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本课程包括以下内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何读取一个 Iterable 的元素。&lt;/li&gt;
&lt;li&gt;如何检查一个 Iterable 的元素是否满足一个条件。&lt;/li&gt;
&lt;li&gt;如何过滤一个 Iterable 的内容。&lt;/li&gt;
&lt;li&gt;如何将一个 Iterable 的内容映射到不同的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;估计完成这个代码实验所需的时间: 60分钟。&lt;/p&gt;
&lt;h2 id=&#34;什么是集合&#34;&gt;什么是集合?&lt;/h2&gt;
&lt;p&gt;集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。&lt;/p&gt;
&lt;p&gt;集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-core/List-class.html&#34;&gt;List&lt;/a&gt;: 用来通过索引读取元素。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-core/Set-class.html&#34;&gt;Set&lt;/a&gt;: 用于包含只能出现一次的元素。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://api.dart.dev/stable/dart-core/Map-class.html&#34;&gt;Map&lt;/a&gt;：用于通过键来读取元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是iterable&#34;&gt;什么是Iterable?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Iterable&lt;/code&gt; 是一个元素的集合，它可以被依次访问。&lt;/p&gt;
&lt;p&gt;在 Dart 中，&lt;code&gt;Iterable&lt;/code&gt; 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 &lt;code&gt;List&lt;/code&gt; 或 &lt;code&gt;Set&lt;/code&gt; 来创建一个新的 &lt;code&gt;Iterable&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt; 和 &lt;code&gt;Set&lt;/code&gt; 都是 &lt;code&gt;Iterable&lt;/code&gt;，所以它们和 &lt;code&gt;Iterable&lt;/code&gt; 类有相同的方法和属性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Map&lt;/code&gt; 在内部使用不同的数据结构，这取决于它的实现。例如，&lt;a href=&#34;https://api.dart.dev/stable/dart-collection/HashMap-class.html&#34;&gt;HashMap&lt;/a&gt; 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 &lt;code&gt;Map&lt;/code&gt; 的 &lt;code&gt;entries&lt;/code&gt; 或 &lt;code&gt;values&lt;/code&gt; 属性，&lt;code&gt;Map&lt;/code&gt; 的元素也可以作为 &lt;code&gt;Iterable&lt;/code&gt; 对象读取。&lt;/p&gt;
&lt;p&gt;这个例子显示了一个 &lt;code&gt;int&lt;/code&gt; 的 &lt;code&gt;List&lt;/code&gt;，它也是一个 &lt;code&gt;int&lt;/code&gt; 的 &lt;code&gt;Iterable&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与 &lt;code&gt;List&lt;/code&gt; 的区别在于，使用 &lt;code&gt;Iterable&lt;/code&gt;，你无法保证按索引读取元素的效率。&lt;code&gt;Iterable&lt;/code&gt; 与 &lt;code&gt;List&lt;/code&gt; 相比，没有 &lt;code&gt;[]&lt;/code&gt; 操作符。&lt;/p&gt;
&lt;p&gt;例如，考虑以下代码，这是&lt;strong&gt;无效的&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你用 &lt;code&gt;[]&lt;/code&gt; 读取元素，编译器会告诉你 &lt;code&gt;&#39;[]&#39;&lt;/code&gt; 这个运算符没有为 &lt;code&gt;Iterable&lt;/code&gt; 类定义，这意味着在这种情况下你不能使用 &lt;code&gt;[index]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;你可以用 &lt;code&gt;elementAt()&lt;/code&gt; 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elementAt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;继续下一节，了解更多关于如何访问 &lt;code&gt;Iterable&lt;/code&gt; 的元素。&lt;/p&gt;
&lt;h2 id=&#34;读取元素&#34;&gt;读取元素&lt;/h2&gt;
&lt;p&gt;你可以使用 &lt;code&gt;for-in&lt;/code&gt; 循环，依次读取一个迭代元素。&lt;/p&gt;
&lt;h3 id=&#34;例子-使用-for-in-循环&#34;&gt;例子: 使用 for-in 循环&lt;/h3&gt;
&lt;p&gt;下面的例子展示了如何使用 &lt;code&gt;for-in&lt;/code&gt; 循环读取元素。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Salad&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Popcorn&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Toast&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在幕后，&lt;code&gt;for-in&lt;/code&gt; 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 &lt;code&gt;for-in&lt;/code&gt; 更容易阅读和理解，而且不容易出错。&lt;/p&gt;
&lt;p&gt;关键术语:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Iterable&lt;/strong&gt;: Dart &lt;a href=&#34;https://api.dart.dev/stable/dart-core/Iterable-class.html&#34;&gt;Iterable&lt;/a&gt; 类。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iterator&lt;/strong&gt;: &lt;code&gt;for-in&lt;/code&gt; 用来从一个 Iterable 对象中读取元素的对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for-in&lt;/code&gt; 循环: 从一个 Iterable 对象中依次读取元素的简单方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;例子使用第一个和最后一个元素&#34;&gt;例子：使用第一个和最后一个元素&lt;/h3&gt;
&lt;p&gt;在某些情况下，你只想访问一个 &lt;code&gt;Iterable&lt;/code&gt; 的第一个或最后一个元素。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Iterable&lt;/code&gt; 类中，你不能直接访问元素，所以你不能调用 &lt;code&gt;iterable[0]&lt;/code&gt; 来访问第一个元素。相反，你可以使用 &lt;code&gt;first&lt;/code&gt;，它可以获取第一个元素。&lt;/p&gt;
&lt;p&gt;另外，使用 Iterable 类，你不能使用操作符 &lt;code&gt;[]&lt;/code&gt; 来访问最后一个元素，但是你可以使用 &lt;code&gt;last&lt;/code&gt; 属性。&lt;/p&gt;
&lt;p&gt;因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 &lt;code&gt;last&lt;/code&gt; 可能会很慢。在一个空的 &lt;code&gt;Iterable&lt;/code&gt; 上使用 &lt;code&gt;first&lt;/code&gt; 或 &lt;code&gt;last&lt;/code&gt; 会导致一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/StateError-class.html&#34;&gt;StateError&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Salad&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Popcorn&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Toast&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;The first element is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;The last element is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，你看到了如何使用 &lt;code&gt;first&lt;/code&gt; 和 &lt;code&gt;last&lt;/code&gt; 来获得一个 &lt;code&gt;Iterable&lt;/code&gt; 的第一个和最后一个元素。也可以找到满足条件的第一个元素。下一节将展示如何使用名为 &lt;code&gt;firstWhere()&lt;/code&gt; 的方法来实现这一目标。&lt;/p&gt;
&lt;h3 id=&#34;例子-使用-firstwhere&#34;&gt;例子: 使用 firstWhere()&lt;/h3&gt;
&lt;p&gt;你已经看到，你可以依次访问一个 &lt;code&gt;Iterable&lt;/code&gt; 的元素，你可以很容易地得到第一个或最后一个元素。&lt;/p&gt;
&lt;p&gt;现在，你要学习如何使用 &lt;code&gt;firstWhere()&lt;/code&gt; 来寻找满足某些条件的第一个元素。这个方法需要你传递一个谓词，它是一个函数，如果输入满足一定的条件就返回 true。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;firstWhere&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如，如果你想找到第一个超过 5 个字符的 &lt;code&gt;String&lt;/code&gt;，你必须传递一个当元素大小大于 5 时返回 true 的谓词。&lt;/p&gt;
&lt;p&gt;运行下面的例子，看看 &lt;code&gt;firstWhere()&lt;/code&gt; 是如何工作的。你认为所有的函数都会给出相同的结果吗？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;predicate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Salad&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Popcorn&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Toast&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Lasagne&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// You can find with a simple expression:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;firstWhere&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Or try using a function block:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;firstWhere&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Or even pass in a function reference:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;firstWhere&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;predicate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// You can also use an `orElse` function in case no value is found!
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;firstWhere&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;orElse:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;None!&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，你可以看到三种不同的方式来写一个谓词。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作为一个表达式&lt;/strong&gt;: 测试代码中有一行使用了箭头语法(&lt;code&gt;=&amp;gt;&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作为一个块&lt;/strong&gt;: 测试代码在括号和返回语句之间有多行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作为一个函数&lt;/strong&gt;: 测试代码在一个外部函数中，作为参数传递给 &lt;code&gt;firstWhere()&lt;/code&gt; 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;没有正确或错误的方式。使用最适合你的方式，并且让你的代码更容易阅读和理解。&lt;/p&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;firstWhereWithOrElse()&lt;/code&gt; 调用 &lt;code&gt;firstWhere()&lt;/code&gt; 时，使用了可选的命名参数 &lt;code&gt;orElse&lt;/code&gt;，它在没有找到元素时提供了一个替代方案。在这种情况下，返回文本 &amp;ldquo;None!&amp;quot;，因为没有元素满足提供的条件。&lt;/p&gt;
&lt;p&gt;注意：如果没有元素满足测试谓词，并且没有提供 &lt;code&gt;orElse&lt;/code&gt; 参数，那么 &lt;code&gt;firstWhere()&lt;/code&gt; 会抛出一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/StateError-class.html&#34;&gt;StateError&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;快速回顾。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Iterable&lt;/code&gt; 的元素必须按顺序访问。&lt;/li&gt;
&lt;li&gt;迭代所有元素的最简单方法是使用 &lt;code&gt;for-in&lt;/code&gt; 循环。&lt;/li&gt;
&lt;li&gt;你可以使用 &lt;code&gt;first&lt;/code&gt; 和 &lt;code&gt;last&lt;/code&gt; getters 来获取第一个和最后一个元素。&lt;/li&gt;
&lt;li&gt;你也可以用 &lt;code&gt;firstWhere()&lt;/code&gt; 找到满足条件的第一个元素。&lt;/li&gt;
&lt;li&gt;你可以把测试谓词写成表达式、块或函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键术语。&lt;/p&gt;
&lt;p&gt;谓词: 当某个条件被满足时，返回 &lt;code&gt;true&lt;/code&gt; 的函数。&lt;/p&gt;
&lt;h3 id=&#34;练习-练习写一个测试谓词&#34;&gt;练习: 练习写一个测试谓词&lt;/h3&gt;
&lt;p&gt;下面的练习是一个失败的单元测试，其中包含一个部分完整的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 &lt;code&gt;main()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这个练习介绍了 &lt;code&gt;singleWhere()&lt;/code&gt; 这个方法的工作原理类似于 &lt;code&gt;firstWhere()&lt;/code&gt;，但在这种情况下，它只期望 &lt;code&gt;Iterable&lt;/code&gt; 中的一个元素满足谓词。如果 &lt;code&gt;Iterable&lt;/code&gt; 中超过一个或没有元素满足谓词条件，那么该方法会抛出一个 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/StateError-class.html&#34;&gt;StateError&lt;/a&gt; 异常。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;singleWhere()&lt;/code&gt; 对整个 &lt;code&gt;Iterable&lt;/code&gt; 进行步进，直到最后一个元素，如果  &lt;code&gt;Iterable&lt;/code&gt; 是无限的或包含一个大的元素集合，这可能会引起问题。&lt;/p&gt;
&lt;p&gt;你的目标是实现满足以下条件的 &lt;code&gt;singleWhere()&lt;/code&gt; 谓词。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元素包含字符 &amp;lsquo;a&amp;rsquo;。&lt;/li&gt;
&lt;li&gt;该元素以字符 &amp;lsquo;M&amp;rsquo; 开头。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试数据中的所有元素都是&lt;a href=&#34;https://api.dart.dev/stable/dart-core/String-class.html&#34;&gt;字符串&lt;/a&gt;，你可以查看类文档以获得帮助。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;singleWhere&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singleWhere&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startsWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;检查条件&#34;&gt;检查条件&lt;/h2&gt;
&lt;p&gt;在使用 &lt;code&gt;Iterable&lt;/code&gt; 时，有时你需要验证一个集合的所有元素是否满足某些条件。&lt;/p&gt;
&lt;p&gt;你可能会想用 &lt;code&gt;for-in&lt;/code&gt; 循环来写一个解决方案，比如这个:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而，你可以使用 &lt;code&gt;every()&lt;/code&gt; 方法实现同样的目的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;every&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;every()&lt;/code&gt; 方法可以使代码更易读、更紧凑、更不容易出错。&lt;/p&gt;
&lt;h3 id=&#34;例子-使用-any-和-every&#34;&gt;例子: 使用 any() 和 every()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Iterable&lt;/code&gt; 类提供了两个可以用来验证条件的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;any()&lt;/code&gt;: 如果至少有一个元素满足条件，则返回 true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;every()&lt;/code&gt;: 如果所有元素都满足条件，则返回 true。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行这个练习来看看它们的作用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Salad&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Popcorn&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Toast&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;At least one element contains &amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;every&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;All elements have length &amp;gt;= 5&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，&lt;code&gt;any()&lt;/code&gt; 验证了至少一个元素包含字符 a，&lt;code&gt;every()&lt;/code&gt; 验证了所有元素的长度等于或大于 5。&lt;/p&gt;
&lt;p&gt;运行代码后，尝试更改 &lt;code&gt;any()&lt;/code&gt; 的谓词，使其返回 false:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Z&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;At least one element contains &amp;#34;Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;No element contains &amp;#34;Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你也可以使用 &lt;code&gt;any()&lt;/code&gt; 来验证一个 &lt;code&gt;Iterable&lt;/code&gt; 中没有元素满足某个条件。&lt;/p&gt;
&lt;h3 id=&#34;练习-验证一个-iterable-是否满足一个条件&#34;&gt;练习： 验证一个 Iterable 是否满足一个条件&lt;/h3&gt;
&lt;p&gt;下面的练习提供了使用前面例子中描述的 &lt;code&gt;any()&lt;/code&gt; 和 &lt;code&gt;every()&lt;/code&gt; 方法的练习。在本例中，你的工作对象是一组用户，由具有成员字段 &lt;code&gt;age&lt;/code&gt; 的 &lt;code&gt;User&lt;/code&gt; 对象表示。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;any()&lt;/code&gt; 和 &lt;code&gt;every()&lt;/code&gt; 实现两个函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1部分：实现 &lt;code&gt;anyUserUnder18()&lt;/code&gt;。
&lt;ul&gt;
&lt;li&gt;如果至少有一个用户是17岁或更小，则返回 true。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第2部分：实现 &lt;code&gt;everyUserOver13()&lt;/code&gt;。
&lt;ul&gt;
&lt;li&gt;如果所有用户都是14岁或以上，则返回 true。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;anyUserUnder18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;everyUserOver13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;every&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;快速回顾:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虽然你可以使用 &lt;code&gt;for-in&lt;/code&gt; 循环来检查条件，但还有更好的方法。&lt;/li&gt;
&lt;li&gt;方法 &lt;code&gt;any()&lt;/code&gt; 可以让你检查任何元素是否满足条件。&lt;/li&gt;
&lt;li&gt;方法 &lt;code&gt;every()&lt;/code&gt; 可以让你验证所有元素是否满足条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;过滤&#34;&gt;过滤&lt;/h2&gt;
&lt;p&gt;前面的章节介绍了 &lt;code&gt;firstWhere()&lt;/code&gt; 或 &lt;code&gt;singleWhere()&lt;/code&gt; 等方法，这些方法可以帮助你找到满足某个谓词的元素。&lt;/p&gt;
&lt;p&gt;但是如果你想找到满足某个条件的所有元素呢？你可以使用 &lt;code&gt;where()&lt;/code&gt; 方法来实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;evenNumbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEven&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，&lt;code&gt;numbers&lt;/code&gt; 包含一个有多个 &lt;code&gt;int&lt;/code&gt; 值的 &lt;code&gt;Iterable&lt;/code&gt;，&lt;code&gt;where()&lt;/code&gt; 可以找到所有偶数的数字。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;where()&lt;/code&gt; 的输出是另一个 &lt;code&gt;Iterable&lt;/code&gt;，你可以用它来迭代它或应用其他 &lt;code&gt;Iterable&lt;/code&gt; 方法。在下一个例子中，&lt;code&gt;where()&lt;/code&gt; 的输出直接在 &lt;code&gt;for-in&lt;/code&gt; 循环中使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;evenNumbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEven&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;evenNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; is even&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;例子-使用-where&#34;&gt;例子: 使用 where()&lt;/h3&gt;
&lt;p&gt;运行这个例子，看看如何将 &lt;code&gt;where()&lt;/code&gt; 与其他方法如 &lt;code&gt;any()&lt;/code&gt; 一起使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;evenNumbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEven&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;evenNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; is even.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;evenNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isNegative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;evenNumbers contains negative numbers.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// If no element satisfies the predicate, the output is empty.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;largeNumbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;evenNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largeNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;largeNumbers is empty!&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，&lt;code&gt;where()&lt;/code&gt; 用于查找所有偶数，然后用 &lt;code&gt;any()&lt;/code&gt; 检查结果是否包含负数。&lt;/p&gt;
&lt;p&gt;在本例的后面，再次使用 &lt;code&gt;where()&lt;/code&gt; 来查找所有大于1000的数字，由于没有，结果是一个空的 &lt;code&gt;Iterable&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注意：如果没有元素满足 &lt;code&gt;where()&lt;/code&gt; 中的谓词，那么该方法返回一个空的 &lt;code&gt;Iterable&lt;/code&gt;。与 &lt;code&gt;singleWhere()&lt;/code&gt; 或 &lt;code&gt;firstWhere()&lt;/code&gt; 不同，&lt;code&gt;where()&lt;/code&gt; 不会抛出 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/StateError-class.html&#34;&gt;StateError&lt;/a&gt; 异常。&lt;/p&gt;
&lt;h3 id=&#34;例子-使用-takewhile&#34;&gt;例子: 使用 takeWhile&lt;/h3&gt;
&lt;p&gt;方法 &lt;code&gt;takeWhile()&lt;/code&gt; 和 &lt;code&gt;skipWhile()&lt;/code&gt; 也可以帮助你从一个 &lt;code&gt;Iterable&lt;/code&gt; 中过滤元素。&lt;/p&gt;
&lt;p&gt;运行这个例子，看看 &lt;code&gt;takeWhile()&lt;/code&gt; 和 &lt;code&gt;skipWhile()&lt;/code&gt; 如何分割一个包含数字的 &lt;code&gt;Iterable&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numbersUntilZero&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;takeWhile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Numbers until 0: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numbersUntilZero&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numbersAfterZero&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;skipWhile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Numbers after 0: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numbersAfterZero&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Numbers until 0: (1, 3, -2)
Numbers after 0: (0, 4, 5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，&lt;code&gt;takeWhile()&lt;/code&gt; 返回一个 &lt;code&gt;Iterable&lt;/code&gt;，它包含了通往满足谓词的元素的所有元素。另一方面， &lt;code&gt;skipWhile()&lt;/code&gt; 返回一个 &lt;code&gt;Iterable&lt;/code&gt;，同时跳过满足谓词的元素之前的所有元素。请注意，满足谓词的元素也会被包含在内。&lt;/p&gt;
&lt;p&gt;运行该示例后，将 &lt;code&gt;takeWhile()&lt;/code&gt; 改为取元素，直到到达第一个负数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numbersUntilNegative&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;takeWhile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isNegative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，条件 &lt;code&gt;number.isNegative&lt;/code&gt; 是用 &lt;code&gt;!&lt;/code&gt; 否定的。&lt;/p&gt;
&lt;h3 id=&#34;练习-从列表中过滤元素&#34;&gt;练习: 从列表中过滤元素&lt;/h3&gt;
&lt;p&gt;下面的练习提供了使用上一练习中的 &lt;code&gt;User&lt;/code&gt; 类的 &lt;code&gt;where()&lt;/code&gt; 方法的练习。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;where()&lt;/code&gt; 实现两个函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1部分：实现 &lt;code&gt;filterUnder21()&lt;/code&gt;。
&lt;ul&gt;
&lt;li&gt;返回一个包含所有21岁以上用户的 &lt;code&gt;Iterable&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第2部分：实现 &lt;code&gt;findShortNamed()&lt;/code&gt;。
&lt;ul&gt;
&lt;li&gt;返回一个包含所有名字长度为 3 或更少的用户的 &lt;code&gt;Iterable&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filterUnder21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;findShortNamed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;快速回顾:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;where()&lt;/code&gt; 过滤一个 &lt;code&gt;Iterable&lt;/code&gt; 的元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;where()&lt;/code&gt; 的输出是另一个 &lt;code&gt;Iterable&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;takeWhile()&lt;/code&gt; 和 &lt;code&gt;skipWhile()&lt;/code&gt; 来获取元素，直到满足一个条件或之后。&lt;/li&gt;
&lt;li&gt;这些方法的输出可以是一个空的 &lt;code&gt;Iterable&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;map&#34;&gt;Map&lt;/h2&gt;
&lt;p&gt;通过 &lt;code&gt;map()&lt;/code&gt; 方法映射 &lt;code&gt;Iterables&lt;/code&gt;，你可以在每个元素上应用一个函数，用一个新的元素替换每个元素。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，&lt;code&gt;Iterable&lt;/code&gt; 数字的每个元素都被乘以 10。&lt;/p&gt;
&lt;p&gt;你也可以使用 &lt;code&gt;map()&lt;/code&gt; 将一个元素转换为不同的对象-例如，将所有 &lt;code&gt;int&lt;/code&gt; 转换为 &lt;code&gt;String&lt;/code&gt;，在下面的例子中可以看到。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：&lt;code&gt;map()&lt;/code&gt; 返回一个懒惰的 &lt;code&gt;Iterable&lt;/code&gt;，这意味着只有在元素被迭代时才会调用所提供的函数。&lt;/p&gt;
&lt;h3 id=&#34;例子-使用-map-改变元素&#34;&gt;例子: 使用 map 改变元素&lt;/h3&gt;
&lt;p&gt;运行这个例子，看看如何使用 &lt;code&gt;map()&lt;/code&gt; 将一个 &lt;code&gt;Iterable&lt;/code&gt; 中的所有元素乘以2，你认为输出会是什么？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numbersByTwo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Numbers: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numbersByTwo&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;练习-映射到不同类型&#34;&gt;练习: 映射到不同类型&lt;/h3&gt;
&lt;p&gt;在前面的例子中，你把一个 &lt;code&gt;Iterable&lt;/code&gt; 的元素乘以2，输入和输出都是 &lt;code&gt;int&lt;/code&gt; 的 &lt;code&gt;Iterable&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在这个练习中，你的代码接收一个 &lt;code&gt;User&lt;/code&gt;的 &lt;code&gt;Iterable&lt;/code&gt;，你需要返回一个包含用户名和年龄的字符串的 &lt;code&gt;Iterable&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Iterable&lt;/code&gt; 中的每个字符串必须遵循这样的格式。&lt;code&gt;&#39;{name} is {age}&#39;&lt;/code&gt;-例如 &lt;code&gt;&#39;Alice is 21&#39;&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getNameAndAges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;快速回顾:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map()&lt;/code&gt; 将一个函数应用于一个 &lt;code&gt;Iterable&lt;/code&gt; 的所有元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map()&lt;/code&gt; 的输出是另一个 &lt;code&gt;Iterable&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;Iterable&lt;/code&gt; 被迭代之前，函数不会被计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;练习-把所有的东西放在一起&#34;&gt;练习: 把所有的东西放在一起&lt;/h2&gt;
&lt;p&gt;现在是练习所学知识的时候了，在最后一个练习中。&lt;/p&gt;
&lt;p&gt;这个练习提供了类 &lt;code&gt;EmailAddress&lt;/code&gt;，它有一个构造函数，接收一个字符串。另一个提供的函数是 &lt;code&gt;isValidEmailAddress()&lt;/code&gt;，它测试一个电子邮件地址是否有效。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;构造函数/函数&lt;/th&gt;
&lt;th&gt;类型签名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;EmailAddress()&lt;/td&gt;
&lt;td&gt;EmailAddress(String address)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;为指定的地址创建一个 EmailAddress。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;isValidEmailAddress()&lt;/td&gt;
&lt;td&gt;bool isValidEmailAddress(EmailAddress)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果提供的 EmailAddress 有效，返回 true。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;编写以下代码。&lt;/p&gt;
&lt;p&gt;第1部分：实现 &lt;code&gt;parseEmailAddresses()&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写函数 &lt;code&gt;parseEmailAddresses()&lt;/code&gt;，它接收一个包含电子邮件地址的 &lt;code&gt;Iterable&amp;lt;String&amp;gt;&lt;/code&gt;，并返回一个 &lt;code&gt;Iterable&amp;lt;EmailAddress&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用方法 &lt;code&gt;map()&lt;/code&gt; 从 &lt;code&gt;String&lt;/code&gt; 映射到 &lt;code&gt;EmailAddress&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用构造函数 &lt;code&gt;EmailAddress(String)&lt;/code&gt; 创建 &lt;code&gt;EmailAddress&lt;/code&gt; 对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二部分：实现 &lt;code&gt;anyInvalidEmailAddress()&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写函数 &lt;code&gt;anyInvalidEmailAddress()&lt;/code&gt;，它接收一个 &lt;code&gt;Iterable&amp;lt;EmailAddress&amp;gt;&lt;/code&gt;，并在 &lt;code&gt;Iterable&lt;/code&gt; 中的任何 &lt;code&gt;EmailAddress&lt;/code&gt; 无效时返回 true。&lt;/li&gt;
&lt;li&gt;使用方法 &lt;code&gt;any()&lt;/code&gt; 和提供的函 &lt;code&gt;isValidEmailAddress()&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第3部分：实现 &lt;code&gt;validEmailAddresses()&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写函数 &lt;code&gt;validEmailAddresses()&lt;/code&gt;，它接收一个 &lt;code&gt;Iterable&amp;lt;EmailAddress&amp;gt;&lt;/code&gt; 并返回另一个只包含有效地址的 &lt;code&gt;Iterable&amp;lt;EmailAddress&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用方法 &lt;code&gt;where()&lt;/code&gt; 来过滤 &lt;code&gt;Iterable&amp;lt;EmailAddress&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用提供的函数 &lt;code&gt;isValidEmailAddress()&lt;/code&gt; 来评估一个 &lt;code&gt;EmailAddress&lt;/code&gt; 是否有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EmailAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parseEmailAddresses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EmailAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;anyInvalidEmailAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EmailAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emails&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emails&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isValidEmailAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EmailAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;validEmailAddresses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EmailAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emails&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emails&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isValidEmailAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;EmailAddress&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;EmailAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;identical&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EmailAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;
              &lt;span class=&#34;n&#34;&gt;runtimeType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runtimeType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;
              &lt;span class=&#34;n&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hashCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;override&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;EmailAddress{address: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;下一步是什么&#34;&gt;下一步是什么?&lt;/h2&gt;
&lt;p&gt;恭喜你，你完成了 codelab 的学习! 如果你想了解更多，这里有一些下一步的建议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;玩玩 &lt;a href=&#34;https://dartpad.dev/&#34;&gt;DartPad&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;试试另一个&lt;a href=&#34;https://dart.dev/codelabs&#34;&gt;代码实验&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&#34;https://api.dart.dev/stable/dart-core/Iterable-class.html&#34;&gt;Iterable API&lt;/a&gt; 参考资料，了解本 codelab 未涉及的方法。&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/iterable">iterable</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/collection">collection</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/dart">dart</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/dart-iterable-collections/</guid>
                <pubDate>Thu, 25 Jun 2020 00:00:00 +0800</pubDate>
            </item>
        
    </channel>
</rss>


