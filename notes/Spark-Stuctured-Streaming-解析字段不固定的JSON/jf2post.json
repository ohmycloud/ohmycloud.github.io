{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003ch2 id=\"数据样例\"\u003e数据样例\u003c/h2\u003e\n\u003cp\u003e有两个文件，一个是 json： \u003ccode\u003ea.json\u003c/code\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e{\n  \u0026#34;createTime\u0026#34;: 1532598069,\n  \u0026#34;event\u0026#34;: {\n    \u0026#34;info\u0026#34;: {\n       \u0026#34;AAA\u0026#34;: \u0026#34;one\u0026#34;,\n       \u0026#34;BBB\u0026#34;: \u0026#34;two\u0026#34;,\n       \u0026#34;DDD\u0026#34;: \u0026#34;opps\u0026#34;\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e另一个也是 json： \u003ccode\u003eb.json\u003c/code\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e{\n  \u0026#34;createTime\u0026#34;: \u0026#34;1532598069\u0026#34;,\n  \u0026#34;event\u0026#34;: {\n    \u0026#34;info\u0026#34;: {\n       \u0026#34;AAA\u0026#34;: \u0026#34;three\u0026#34;,\n       \u0026#34;BBB\u0026#34;: \u0026#34;four\u0026#34;,\n       \u0026#34;CCC\u0026#34;: \u0026#34;haha\u0026#34;\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"kafka-producer\"\u003eKafka Producer\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003einfo\u003c/code\u003e 里面的字段个数是不固定的。用下面的代码先将 a.json 发送到  Kafka：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003efrom confluent_kafka import Producer\n\n\np = Producer({\u0026#39;bootstrap.servers\u0026#39;: \u0026#39;localhost:9092\u0026#39;})\n\ndef delivery_report(err, msg):\n    \u0026#34;\u0026#34;\u0026#34; Called once for each message produced to indicate delivery result.\n        Triggered by poll() or flush(). \u0026#34;\u0026#34;\u0026#34;\n    if err is not None:\n        print(\u0026#39;Message delivery failed: {}\u0026#39;.format(err))\n    else:\n        print(\u0026#39;Message delivered to {} [{}]\u0026#39;.format(msg.topic(), msg.partition()))\n\nwith open(\u0026#34;/Users/ohmycloud/work/notes/b.json\u0026#34;) as f:\n  data = f.read()\n  p.poll(0)\n  p.produce(\u0026#39;dynamic-schema\u0026#39;, data.encode(\u0026#39;utf-8\u0026#39;), callback=delivery_report)\n\np.flush()\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"kafka-consumer\"\u003eKafka Consumer\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e \u003cspan class=\"nn\"\u003edynamic.schma.test\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.spark.sql.SparkSession\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.spark.sql.functions._\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.spark.sql.streaming._\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.spark.sql.types._\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eobject\u003c/span\u003e \u003cspan class=\"nc\"\u003eDynamicSchema\u003c/span\u003e \u003cspan class=\"k\"\u003eextends\u003c/span\u003e \u003cspan class=\"nc\"\u003eApp\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003espark\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eSparkSession\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuilder\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappName\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;DynamicSchema\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emaster\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;local[*]\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetOrCreate\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e// 定义 schema，包含 json 中的所有可能出现的字段\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eschema\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eStructType\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;createTime\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nc\"\u003eStringType\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;event\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nc\"\u003eMapType\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eStringType\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eStructType\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;AAA\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nc\"\u003eStringType\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;BBB\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nc\"\u003eStringType\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CCC\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nc\"\u003eStringType\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;DDD\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nc\"\u003eStringType\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eparsed\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereadStream\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;kafka\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoption\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;kafka.bootstrap.servers\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;localhost:9092\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoption\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;subscribe\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;dynamic-schema\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoption\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;startingOffsets\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;earliest\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eload\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom_json\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecol\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003ecast\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;string\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eschema\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003ealias\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;parsed_value\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003espark.implicits._\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparsed\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexplode\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;parsed_value.event\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)).\u003c/span\u003e\u003cspan class=\"n\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;value.*\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003econsole\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewriteStream\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;console\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoutputMode\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eOutputMode\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eAppend\u003c/span\u003e\u003cspan class=\"o\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003equery\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econsole\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003equery\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eawaitTermination\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e打印出来的结果为：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e+---+---+----+----+\n|AAA|BBB| CCC| DDD|\n+---+---+----+----+\n|one|two|null|opps|\n+---+---+----+----+\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e因为 \u003ccode\u003ea.json\u003c/code\u003e 里面没有 \u003cstrong\u003eCCC\u003c/strong\u003e 这个字段，并且 schema 里面设置允许  CCC 的值为 NULL， 所以 OK 的。\u003c/p\u003e\n\u003cp\u003e然后发送 b.json, 打印的结果为：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e+-----+----+----+----+\n|  AAA| BBB| CCC| DDD|\n+-----+----+----+----+\n|three|four|haha|null|\n+-----+----+----+----+\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eb.json 里面没有 \u003cstrong\u003eDDD\u003c/strong\u003e,  schema 设置 CCC 的值允许为空，所以 NULL OK。\u003c/p\u003e\n\u003cp\u003e验证了一下 schema 的问题。\u003c/p\u003e\n","text":"数据样例 有两个文件，一个是 json： a.json\n{ \u0026#34;createTime\u0026#34;: 1532598069, \u0026#34;event\u0026#34;: { \u0026#34;info\u0026#34;: { \u0026#34;AAA\u0026#34;: \u0026#34;one\u0026#34;, \u0026#34;BBB\u0026#34;: \u0026#34;two\u0026#34;, \u0026#34;DDD\u0026#34;: \u0026#34;opps\u0026#34; } } } 另一个也是 json： b.json\n{ \u0026#34;createTime\u0026#34;: \u0026#34;1532598069\u0026#34;, \u0026#34;event\u0026#34;: { \u0026#34;info\u0026#34;: { \u0026#34;AAA\u0026#34;: \u0026#34;three\u0026#34;, \u0026#34;BBB\u0026#34;: \u0026#34;four\u0026#34;, \u0026#34;CCC\u0026#34;: \u0026#34;haha\u0026#34; } } } Kafka Producer info 里面的字段个数是不固定的。用下面的代码先将 a.json 发送到 Kafka：\nfrom confluent_kafka import Producer p = Producer({\u0026#39;bootstrap.servers\u0026#39;: \u0026#39;localhost:9092\u0026#39;}) def delivery_report(err, msg): \u0026#34;\u0026#34;\u0026#34; Called once for each message produced to indicate delivery result. Triggered by poll() or flush(). \u0026#34;\u0026#34;\u0026#34; if err is not None: print(\u0026#39;Message delivery failed: {}\u0026#39;.format(err)) else: print(\u0026#39;Message delivered to {} [{}]\u0026#39;.format(msg.topic(), msg.partition())) with open(\u0026#34;/Users/ohmycloud/work/notes/b.json\u0026#34;) as f: data = f.read() p.poll(0) p.produce(\u0026#39;dynamic-schema\u0026#39;, data.encode(\u0026#39;utf-8\u0026#39;), callback=delivery_report) p.flush() Kafka Consumer package dynamic.schma.test import org.apache.spark.sql.SparkSession import org.apache.spark.sql.functions._ import org.apache.spark.sql.streaming._ import org.apache.spark.sql.types._ object DynamicSchema extends App { val spark = SparkSession .builder .appName(\u0026#34;DynamicSchema\u0026#34;) .master(\u0026#34;local[*]\u0026#34;) .getOrCreate() // 定义 schema，包含 json 中的所有可能出现的字段 val schema = new StructType() .add(\u0026#34;createTime\u0026#34;, StringType) .add(\u0026#34;event\u0026#34;, MapType(StringType, new StructType() .add(\u0026#34;AAA\u0026#34;, StringType, true) .add(\u0026#34;BBB\u0026#34;, StringType, true) .add(\u0026#34;CCC\u0026#34;, StringType, true) .add(\u0026#34;DDD\u0026#34;, StringType, true) )) val parsed = spark.readStream .format(\u0026#34;kafka\u0026#34;) .option(\u0026#34;kafka.bootstrap.servers\u0026#34;, \u0026#34;localhost:9092\u0026#34;) .option(\u0026#34;subscribe\u0026#34;, \u0026#34;dynamic-schema\u0026#34;) .option(\u0026#34;startingOffsets\u0026#34;, \u0026#34;earliest\u0026#34;) .load() .select(from_json(col(\u0026#34;value\u0026#34;).cast(\u0026#34;string\u0026#34;), schema).alias(\u0026#34;parsed_value\u0026#34;)) import spark.implicits._ val event = parsed.select(explode($\u0026#34;parsed_value.event\u0026#34;)).select(\u0026#34;value.*\u0026#34;) val console = event.writeStream .format(\u0026#34;console\u0026#34;) .outputMode(OutputMode.Append()) val query = console.start() query.awaitTermination() } 打印出来的结果为：\n+---+---+----+----+ |AAA|BBB| CCC| DDD| +---+---+----+----+ |one|two|null|opps| +---+---+----+----+ 因为 a.json 里面没有 CCC 这个字段，并且 schema 里面设置允许 CCC 的值为 NULL， 所以 OK 的。\n然后发送 b.json, 打印的结果为：\n+-----+----+----+----+ | AAA| BBB| CCC| DDD| +-----+----+----+----+ |three|four|haha|null| +-----+----+----+----+ b.json 里面没有 DDD, schema 设置 CCC 的值允许为空，所以 NULL OK。\n验证了一下 schema 的问题。\n"},"name":"使用 Spark Structured Streaming 解析字段不固定的 JSON","published":"2017-03-16T16:36:25Z","summary":"数据样例 有两个文件，一个是 json： a.json\n{ \u0026#34;createTime\u0026#34;: 1532598069, \u0026#34;event\u0026#34;: { \u0026#34;info\u0026#34;: { \u0026#34;AAA\u0026#34;: \u0026#34;one\u0026#34;, \u0026#34;BBB\u0026#34;: \u0026#34;two\u0026#34;, \u0026#34;DDD\u0026#34;: \u0026#34;opps\u0026#34; } } } 另一个也是 json： b.json\n{ \u0026#34;createTime\u0026#34;: \u0026#34;1532598069\u0026#34;, \u0026#34;event\u0026#34;: { \u0026#34;info\u0026#34;: { \u0026#34;AAA\u0026#34;: \u0026#34;three\u0026#34;, \u0026#34;BBB\u0026#34;: \u0026#34;four\u0026#34;, \u0026#34;CCC\u0026#34;: \u0026#34;haha\u0026#34; } } } Kafka Producer info 里面的字段个数是不固定的。用下面的代码先将 a.json 发送到 Kafka：\nfrom confluent_kafka import Producer p = Producer({\u0026#39;bootstrap.servers\u0026#39;: \u0026#39;localhost:9092\u0026#39;}) def delivery_report(err, msg): \u0026#34;\u0026#34;\u0026#34; Called once for each message produced to indicate delivery result. Triggered by poll() or flush().","type":"entry","url":"http://localhost:1313/notes/spark-stuctured-streaming-%E8%A7%A3%E6%9E%90%E5%AD%97%E6%AE%B5%E4%B8%8D%E5%9B%BA%E5%AE%9A%E7%9A%84json/"}