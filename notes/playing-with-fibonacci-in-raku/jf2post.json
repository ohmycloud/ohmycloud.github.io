{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003cp\u003e欢迎来到 \u003cstrong\u003eRaku One-Liner Advent Calendar\u003c/strong\u003e 的第\u003ca href=\"https://raku.online/2018/12/15/playing-with-fibonacci-in-perl-6/\"\u003e15\u003c/a\u003e天！今天，将有两个单行程序，它们都产生\u003ca href=\"https://raku.online/2018/12/08/adding-up-even-fibonacci-numbers-in-perl-6/\"\u003e斐波纳契数\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e是的，最有可能的是，你从未在实际代码中使用过这样的数字，而且，很可能，你用它们解决了许多教育问题。然而，今天，让我们解决欧拉项目的\u003ca href=\"https://projecteuler.net/problem=25\"\u003e问题25\u003c/a\u003e，并尝试在 Code-Golf.io 站点上寻找最短的 \u003ca href=\"https://code-golf.io/fibonacci#raku\"\u003eFibonacci 问题\u003c/a\u003e解决方案。\u003c/p\u003e\n\u003ch2 id=\"pre-party\"\u003ePre-party\u003c/h2\u003e\n\u003cp\u003e我们如何在 Raku 中形成 Fibonacci 序列呢？使用序列运算符 \u003ccode\u003e...\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你想在代码中有一些奇特的味道，你可以用 \u003ccode\u003eInf\u003c/code\u003e 或 \u003ccode\u003e∞\u003c/code\u003e 替换最后的那个星号。在任何情况下，结果都是 \u003ccode\u003eSeq\u003c/code\u003e 类型的惰性序列。 Raku 不会立即计算它（并且它不能，因为右边缘是无限的）。\u003c/p\u003e\n\u003ch2 id=\"第1部分\"\u003e第1部分\u003c/h2\u003e\n\u003cp\u003e第一个任务是找到第一个 Fibonacci 数的索引，该数字有 1000 个数字。当然，你可以循环上面创建的序列并自己跟踪索引。但是在 Raku 中，有一个选项可以修改 \u003ccode\u003egrep\u003c/code\u003e 例程簇，并要求它返回匹配项的索引而不是项本​​身。\u003c/p\u003e\n\u003cp\u003e另外，我们将使用更合适的方法 \u003ccode\u003efirst\u003c/code\u003e 代替 \u003ccode\u003egrep\u003c/code\u003e。如果我们用 \u003ccode\u003ek\u003c/code\u003e 键调用该方法，它将返回第一个匹配项或其索引。仅仅提到键就足够了，真的不需要值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e该程序打印一个整数，这是给定问题的正确答案。\u003c/p\u003e\n\u003ch2 id=\"第2部分\"\u003e第2部分\u003c/h2\u003e\n\u003cp\u003e现在让我们解决一个高尔夫任务并打印前30个斐波那契数字，用单行程序。这次，我们必须在代码中使用尽可能少的字符。\u003c/p\u003e\n\u003cp\u003e第一种方法相当冗长（即使使用 \u003ccode\u003e^31\u003c/code\u003e 代替 \u003ccode\u003e0..30\u003c/code\u003e，它需要 33 个字符）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e[^\u003c/span\u003e\u003cspan class=\"mi\"\u003e31\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以压缩一些空间。当然，第一个也是最明显的就是删除空格（剩下28个字符）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,*+*...*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e[^\u003c/span\u003e\u003cspan class=\"mi\"\u003e31\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e另一个有趣的技巧是使用 \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e meta-operator 在序列的每个元素上调用 \u003ccode\u003esay\u003c/code\u003e 方法。它将代码进一步压缩为24个字符：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,*+*...*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e[^\u003c/span\u003e\u003cspan class=\"mi\"\u003e31\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u0026gt;\u0026gt;.\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e此时，我们可以\u003ca href=\"https://raku.online/2018/12/07/the-joy-of-unicode-in-perl-6/\"\u003e使用一些 Unicode\u003c/a\u003e，并节省三个以上的字符（左21）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,*+*…*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e[^\u003c/span\u003e\u003cspan class=\"mi\"\u003e31\u003c/span\u003e\u003cspan class=\"o\"\u003e]».\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e看起来已经够紧凑了，但仍有一些选项可供尝试。让我们摆脱显式切片，并尝试在最后一个元素处停止序列：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,*+*…*\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e514229\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e代码变得更长（23个字符），但我们这里不需要确切的数字 514229。给出一些数字就足够了，这个数字比第29个更大，然后小于序列的第30个元素。例如，它可以是 823543，它是7的7次幂。使用上标（19个字符）来写：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,*+*…*\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e⁷\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后，通过在单个字符中使用另一个\u003ca href=\"http://graphemica.com/%F0%90%A7%B4\"\u003e代表 800000 的 Unicode 字符\u003c/a\u003e，可以减少一个字符。并非每个（\u003ca href=\"https://unicode-table.com/en/109F4/\"\u003e如果有的话\u003c/a\u003e）字体都能显示出具有视觉吸引力的东西，但 Raku 能识别该字符：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,*+*…*\u0026gt;\u003c/span\u003e𐧴\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这\u003cstrong\u003e18个字符\u003c/strong\u003e比\u003ca href=\"https://code-golf.io/scores/fibonacci\"\u003eGode-Golf的第一名\u003c/a\u003e多一个字符。我有一种感觉，你可以通过用 \u003ccode\u003e^2\u003c/code\u003e 替换序列的前两个元素来节省另一个字符，但这在\u003ca href=\"https://codegolf.stackexchange.com/questions/85/fibonacci-function-or-sequence#comment384817_41728\"\u003e当前的Rakudo中不起作用\u003c/a\u003e，你必须多用一个字符来展平列表：\u003ccode\u003e|^2\u003c/code\u003e，这使得答案再次变成18个字符。\u003c/p\u003e\n\u003cp\u003e希望删除条件中的 \u003ccode\u003e*\u0026gt;\u003c/code\u003e 部分以停止序列并用固定数字替换它。不幸的是，没有办法用\u003ca href=\"http://xahlee.info/comp/unicode_circled_numbers.html\"\u003e1到90之间的数字\u003c/a\u003e的幂来表示 832040。这是可能的，我们可以使用上标来计算数字。\u003c/p\u003e\n\u003cp\u003e另一个想法是使用正则表达式，但我们需要至少四个字符，这没有帮助：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,*+*…/\u003c/span\u003e\u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e».\u003c/span\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e让我今天到此为止。你是否碰巧创建了一个更短的答案，请在下方评论。明天见！\u003c/p\u003e\n","text":"欢迎来到 Raku One-Liner Advent Calendar 的第15天！今天，将有两个单行程序，它们都产生斐波纳契数。\n是的，最有可能的是，你从未在实际代码中使用过这样的数字，而且，很可能，你用它们解决了许多教育问题。然而，今天，让我们解决欧拉项目的问题25，并尝试在 Code-Golf.io 站点上寻找最短的 Fibonacci 问题解决方案。\nPre-party 我们如何在 Raku 中形成 Fibonacci 序列呢？使用序列运算符 ...:\n0, 1, * + * ... * 如果你想在代码中有一些奇特的味道，你可以用 Inf 或 ∞ 替换最后的那个星号。在任何情况下，结果都是 Seq 类型的惰性序列。 Raku 不会立即计算它（并且它不能，因为右边缘是无限的）。\n第1部分 第一个任务是找到第一个 Fibonacci 数的索引，该数字有 1000 个数字。当然，你可以循环上面创建的序列并自己跟踪索引。但是在 Raku 中，有一个选项可以修改 grep 例程簇，并要求它返回匹配项的索引而不是项本​​身。\n另外，我们将使用更合适的方法 first 代替 grep。如果我们用 k 键调用该方法，它将返回第一个匹配项或其索引。仅仅提到键就足够了，真的不需要值。\nsay (0, 1, * + * ... *).first(*.chars \u0026gt;= 1000, :k) 该程序打印一个整数，这是给定问题的正确答案。\n第2部分 现在让我们解决一个高尔夫任务并打印前30个斐波那契数字，用单行程序。这次，我们必须在代码中使用尽可能少的字符。\n第一种方法相当冗长（即使使用 ^31 代替 0..30，它需要 33 个字符）：\n.say for (0, 1, * + * ... *)[^31] 可以压缩一些空间。当然，第一个也是最明显的就是删除空格（剩下28个字符）：\n.say for (0,1,*+*...*)[^31] 另一个有趣的技巧是使用 \u0026gt;\u0026gt; meta-operator 在序列的每个元素上调用 say 方法。它将代码进一步压缩为24个字符：\n(0,1,*+*...*)[^31]\u0026gt;\u0026gt;.say 此时，我们可以使用一些 Unicode，并节省三个以上的字符（左21）：\n(0,1,*+*…*)[^31]».say 看起来已经够紧凑了，但仍有一些选项可供尝试。让我们摆脱显式切片，并尝试在最后一个元素处停止序列：\n(0,1,*+*…*\u0026gt;514229)».say 代码变得更长（23个字符），但我们这里不需要确切的数字 514229。给出一些数字就足够了，这个数字比第29个更大，然后小于序列的第30个元素。例如，它可以是 823543，它是7的7次幂。使用上标（19个字符）来写：\n(0,1,*+*…*\u0026gt;7⁷)».say 最后，通过在单个字符中使用另一个代表 800000 的 Unicode 字符，可以减少一个字符。并非每个（如果有的话）字体都能显示出具有视觉吸引力的东西，但 Raku 能识别该字符：\n(0,1,*+*…*\u0026gt;𐧴)».say 这18个字符比Gode-Golf的第一名多一个字符。我有一种感觉，你可以通过用 ^2 替换序列的前两个元素来节省另一个字符，但这在当前的Rakudo中不起作用，你必须多用一个字符来展平列表：|^2，这使得答案再次变成18个字符。\n希望删除条件中的 *\u0026gt; 部分以停止序列并用固定数字替换它。不幸的是，没有办法用1到90之间的数字的幂来表示 832040。这是可能的，我们可以使用上标来计算数字。\n另一个想法是使用正则表达式，但我们需要至少四个字符，这没有帮助：\n(0,1,*+*…/20/)».say 让我今天到此为止。你是否碰巧创建了一个更短的答案，请在下方评论。明天见！\n"},"name":"🎄 15/25. 在 Raku 中使用斐波那契数","published":"2018-12-15T12:04:47Z","summary":"欢迎来到 Raku One-Liner Advent Calendar 的第15天！今天，将有两个单行程序，它们都产生斐波纳契数。\n是的，最有可能的是，你从未在实际代码中使用过这样的数字，而且，很可能，你用它们解决了许多教育问题。然而，今天，让我们解决欧拉项目的问题25，并尝试在 Code-Golf.io 站点上寻找最短的 Fibonacci 问题解决方案。\nPre-party 我们如何在 Raku 中形成 Fibonacci 序列呢？使用序列运算符 ...:\n0, 1, * + * ... * 如果你想在代码中有一些奇特的味道，你可以用 Inf 或 ∞ 替换最后的那个星号。在任何情况下，结果都是 Seq 类型的惰性序列。 Raku 不会立即计算它（并且它不能，因为右边缘是无限的）。\n第1部分 第一个任务是找到第一个 Fibonacci 数的索引，该数字有 1000 个数字。当然，你可以循环上面创建的序列并自己跟踪索引。但是在 Raku 中，有一个选项可以修改 grep 例程簇，并要求它返回匹配项的索引而不是项本​​身。\n另外，我们将使用更合适的方法 first 代替 grep。如果我们用 k 键调用该方法，它将返回第一个匹配项或其索引。仅仅提到键就足够了，真的不需要值。\nsay (0, 1, * + * ... *).first(*.chars \u0026gt;= 1000, :k) 该程序打印一个整数，这是给定问题的正确答案。\n第2部分 现在让我们解决一个高尔夫任务并打印前30个斐波那契数字，用单行程序。这次，我们必须在代码中使用尽可能少的字符。\n第一种方法相当冗长（即使使用 ^31 代替 0..30，它需要 33 个字符）：","type":"entry","url":"http://localhost:1313/notes/playing-with-fibonacci-in-raku/"}