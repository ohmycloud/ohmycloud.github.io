{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003ch1 id=\"rfc-5作者michael-j-mathews多行注释\"\u003eRFC 5，作者：Michael J. Mathews。多行注释\u003c/h1\u003e\n\u003cp\u003e这是第一个与文档有关的 \u003ca href=\"https://raku.org/archive/rfc/5.html\"\u003eRFC\u003c/a\u003e 提案。它要求在大多数现代编程语言中提供一个共同的功能：多行注释。\u003c/p\u003e\n\u003cp\u003e没有多行注释的问题非常明显：如果你需要注释一大段代码，你需要在每一行的开头手动插入一个 \u003ccode\u003e#\u003c/code\u003e 符号（在 Raku 中）。如果你没有一个文本编辑器来完成这个工作，这可能会非常的乏味，比如说，一个快捷键或类似的工具。这种做法在大型代码库中非常常见。出于这个原因，Michael 将 \u003ccode\u003eC++\u003c/code\u003e 和 \u003ccode\u003eJava\u003c/code\u003e 称为:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e流行的语言，从一开始就被设计为对大型项目有用，实现了单行和多行注释。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e在这些语言中，你可以输入如下注释:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e// single line of code\n\n/*\n Several lines of code\n*/\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e但是，除此之外，在 \u003ccode\u003eJava\u003c/code\u003e 中，你还有一种特殊的多行注释语法\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e来编写文档。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e/**\n* Here you can write the doc!\n*\n*/\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e很多人提出 \u003ccode\u003ePOD\u003c/code\u003e 是解决这个问题的方法，但是 Michael 列出了一些不便之处:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;它不直观\u0026rdquo;：鉴于 POD 只用于 \u003ccode\u003ePerl\u003c/code\u003e，来自不同语言的人学习全新的语法将面临一些困难。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在我看来，这并不是一个大问题，因为 \u003ccode\u003ePOD6\u003c/code\u003e 的语法很简单，而且它有很好的\u003ca href=\"https://docs.raku.org/language/pod\"\u003e文档\u003c/a\u003e。此外，对于新手来说，它是相当直观的：如果你想要一个标头，你用 \u003ccode\u003e=head1\u003c/code\u003e，如果你想要斜体，你用 \u003ccode\u003eI\u0026lt;\u0026gt;\u003c/code\u003e 等等。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u0026ldquo;这不是文档\u0026rdquo;：这个还是对的。主要问题是，当你想注释一大段代码时，那很可能不是文档，所以使用 \u003ccode\u003e=begin pod ... =end pod\u003c/code\u003e 就有点奇怪了。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u0026ldquo;它不鼓励一致性\u0026rdquo;：\u003ccode\u003ePOD\u003c/code\u003e 的另一个问题是，你可以在它的语法中使用任意项。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-pod\" data-lang=\"pod\"\u003e=begin ARBITRARYTEXT\n...\n=end ARBITRARYTEXT\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e虽然这种行为给了我们很大的自由度，但也使不同项目和用户的一致性变得复杂。\u003c/p\u003e\n\u003cp\u003e经过讨论，\u003ccode\u003ePerl\u003c/code\u003e 选择了 \u003ccode\u003ePOD\u003c/code\u003e 来实现多行注释。尽管如此，Michael 的建议还是被采纳了，Raku 支持类似于 \u003ccode\u003eC++\u003c/code\u003e 和 \u003ccode\u003eJava\u003c/code\u003e 的多行注释，但语法略有不同:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e#`[\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003eRaku is a large-project-friendly\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003elanguage too!\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e:D\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e而作为一个好奇心，Raku 有嵌入式注释，就是:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"cm\"\u003e#`( embedded comment )\u003c/span\u003e \u003cspan class=\"kt\"\u003eTrue\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eRaku is awesome\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后，作为现代的百年语言，Raku 给你的方式不止一种，所以选择最适合你的方式吧!\u003c/p\u003e\n\u003cdiv class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\"\u003e\n\u003cp\u003e这并不是真正的多行注释 因为你还需要在每一行的开头打上 \u003ccode\u003e*\u003c/code\u003e 号。\u0026#160;\u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n","text":"RFC 5，作者：Michael J. Mathews。多行注释 这是第一个与文档有关的 RFC 提案。它要求在大多数现代编程语言中提供一个共同的功能：多行注释。\n没有多行注释的问题非常明显：如果你需要注释一大段代码，你需要在每一行的开头手动插入一个 # 符号（在 Raku 中）。如果你没有一个文本编辑器来完成这个工作，这可能会非常的乏味，比如说，一个快捷键或类似的工具。这种做法在大型代码库中非常常见。出于这个原因，Michael 将 C++ 和 Java 称为:\n流行的语言，从一开始就被设计为对大型项目有用，实现了单行和多行注释。\n在这些语言中，你可以输入如下注释:\n// single line of code /* Several lines of code */ 但是，除此之外，在 Java 中，你还有一种特殊的多行注释语法1来编写文档。\n/** * Here you can write the doc! * */ 很多人提出 POD 是解决这个问题的方法，但是 Michael 列出了一些不便之处:\n\u0026ldquo;它不直观\u0026rdquo;：鉴于 POD 只用于 Perl，来自不同语言的人学习全新的语法将面临一些困难。 在我看来，这并不是一个大问题，因为 POD6 的语法很简单，而且它有很好的文档。此外，对于新手来说，它是相当直观的：如果你想要一个标头，你用 =head1，如果你想要斜体，你用 I\u0026lt;\u0026gt; 等等。\n\u0026ldquo;这不是文档\u0026rdquo;：这个还是对的。主要问题是，当你想注释一大段代码时，那很可能不是文档，所以使用 =begin pod ... =end pod 就有点奇怪了。\n\u0026ldquo;它不鼓励一致性\u0026rdquo;：POD 的另一个问题是，你可以在它的语法中使用任意项。\n=begin ARBITRARYTEXT ... =end ARBITRARYTEXT 虽然这种行为给了我们很大的自由度，但也使不同项目和用户的一致性变得复杂。\n经过讨论，Perl 选择了 POD 来实现多行注释。尽管如此，Michael 的建议还是被采纳了，Raku 支持类似于 C++ 和 Java 的多行注释，但语法略有不同:\n#`[ Raku is a large-project-friendly language too! ] say \u0026#34;:D\u0026#34;; 而作为一个好奇心，Raku 有嵌入式注释，就是:\nif #`( embedded comment ) True { say \u0026#34;Raku is awesome\u0026#34;; } 最后，作为现代的百年语言，Raku 给你的方式不止一种，所以选择最适合你的方式吧!\n这并不是真正的多行注释 因为你还需要在每一行的开头打上 * 号。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},"name":"多行注释","published":"2020-08-02T00:01:50+08:00","summary":"multiline comments","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-03-rfc5-multiline-comments/"}