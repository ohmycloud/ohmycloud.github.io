{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003cp\u003e欢迎来到 \u003cstrong\u003eRaku One-Liner Advent Calendar\u003c/strong\u003e 的第\u003ca href=\"https://raku.online/2018/12/17/playing-with-prime-numbers-in-perl-6/\"\u003e17\u003c/a\u003e天！今天，我们将有两个单行程序，它们都产生一些素数。\u003c/p\u003e\n\u003ch2 id=\"第1部分\"\u003e第1部分\u003c/h2\u003e\n\u003cp\u003e首先，让我们解决欧拉项目的\u003ca href=\"https://projecteuler.net/problem=7\"\u003e问题7\u003c/a\u003e，你需要打印第 10001 个素数（第一个素数是2）。\u003c/p\u003e\n\u003cp\u003eRaku 擅长素数，因为它有一个 \u003ccode\u003eInt\u003c/code\u003e 类的内置方法，\u003ca href=\"https://docs.raku.org/routine/is-prime\"\u003eis-prime\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e有几种方法可以生成素数。对于单行程序，最简单的就是最好的, 效率也最低, 方法就是测试每个数字。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eprime\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"mi\"\u003e10000\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e计算结果大约需要半分钟，但代码很短。总有一天，我们将使用所谓的\u003ca href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\"\u003e埃拉托色尼筛\u003c/a\u003e来解决这个问题，它应该更快，但可能需要更多的代码。\u003c/p\u003e\n\u003ch2 id=\"第2部分\"\u003e第2部分\u003c/h2\u003e\n\u003cp\u003e在这个 advent 文章的第二部分，让我们娱乐一下并解决 code-golf.io 网站上的相应\u003ca href=\"https://code-golf.io/prime-numbers#raku\"\u003e问题\u003c/a\u003e。我们需要打印100以下的所有素数。\u003c/p\u003e\n\u003cp\u003e我的答案需要22个字符，如下所示：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eprime\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;.\u003c/span\u003e\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"err\"\u003eⅭ\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Raku 中没有更短答案了，而在\u003ca href=\"http://jsoftware.com/\"\u003eJ\u003c/a\u003e中，他们做到了只使用11个字符。在 Raku 中，方法名已经消耗了八个字符。我相信，要赢得所有的高尔夫比赛，你需要一种名称很短的特殊语言（\u003ca href=\"http://www.jsoftware.com/books/pdf/easyj.pdf\"\u003eJ\u003c/a\u003e就是）和一组内置例程来生成素数，或斐波那契或任何其他数字序列的列表。它还应该强烈利用Unicode字符空间。\u003c/p\u003e\n\u003cp\u003e在我们的 Raku 示例中，还有一个 Unicode 字符，\u003ccode\u003eⅭ\u003c/code\u003e。这不是简单的 C，拉丁字母的第三个字母，而是 Unicode 字符 \u003ca href=\"http://graphemica.com/%E2%85%AD\"\u003eROMAN NUMERAL ONE HUNDRED\u003c/a\u003e（原本是拉丁字母的第三个字母，当然）。使用此符号，我们可以在答案中节省两个字符。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e 技巧是可能的，因为如果第一个操作数是 False，Perl 不会执行布尔表达式的第二部分。请注意，您不能在此处使用单个 \u003ccode\u003e＆\u003c/code\u003e。完整的非优化版本的代码需要额外的空格，如下所示：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eprime\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这就是今天 Raku 之旅的终点，明天见！\u003c/p\u003e\n","text":"欢迎来到 Raku One-Liner Advent Calendar 的第17天！今天，我们将有两个单行程序，它们都产生一些素数。\n第1部分 首先，让我们解决欧拉项目的问题7，你需要打印第 10001 个素数（第一个素数是2）。\nRaku 擅长素数，因为它有一个 Int 类的内置方法，is-prime。\n有几种方法可以生成素数。对于单行程序，最简单的就是最好的, 效率也最低, 方法就是测试每个数字。\nsay ((1..*).grep: *.is-prime)[10000] 计算结果大约需要半分钟，但代码很短。总有一天，我们将使用所谓的埃拉托色尼筛来解决这个问题，它应该更快，但可能需要更多的代码。\n第2部分 在这个 advent 文章的第二部分，让我们娱乐一下并解决 code-golf.io 网站上的相应问题。我们需要打印100以下的所有素数。\n我的答案需要22个字符，如下所示：\n.is-prime\u0026amp;\u0026amp;.say for ^Ⅽ 在 Raku 中没有更短答案了，而在J中，他们做到了只使用11个字符。在 Raku 中，方法名已经消耗了八个字符。我相信，要赢得所有的高尔夫比赛，你需要一种名称很短的特殊语言（J就是）和一组内置例程来生成素数，或斐波那契或任何其他数字序列的列表。它还应该强烈利用Unicode字符空间。\n在我们的 Raku 示例中，还有一个 Unicode 字符，Ⅽ。这不是简单的 C，拉丁字母的第三个字母，而是 Unicode 字符 ROMAN NUMERAL ONE HUNDRED（原本是拉丁字母的第三个字母，当然）。使用此符号，我们可以在答案中节省两个字符。\n\u0026amp;\u0026amp; 技巧是可能的，因为如果第一个操作数是 False，Perl 不会执行布尔表达式的第二部分。请注意，您不能在此处使用单个 ＆。完整的非优化版本的代码需要额外的空格，如下所示：\n.say if .is-prime for ^100 这就是今天 Raku 之旅的终点，明天见！\n"},"name":"🎄 17/25. 在 Raku 中使用素数","published":"2018-12-17T10:15:41Z","summary":"欢迎来到 Raku One-Liner Advent Calendar 的第17天！今天，我们将有两个单行程序，它们都产生一些素数。\n第1部分 首先，让我们解决欧拉项目的问题7，你需要打印第 10001 个素数（第一个素数是2）。\nRaku 擅长素数，因为它有一个 Int 类的内置方法，is-prime。\n有几种方法可以生成素数。对于单行程序，最简单的就是最好的, 效率也最低, 方法就是测试每个数字。\nsay ((1..*).grep: *.is-prime)[10000] 计算结果大约需要半分钟，但代码很短。总有一天，我们将使用所谓的埃拉托色尼筛来解决这个问题，它应该更快，但可能需要更多的代码。\n第2部分 在这个 advent 文章的第二部分，让我们娱乐一下并解决 code-golf.io 网站上的相应问题。我们需要打印100以下的所有素数。\n我的答案需要22个字符，如下所示：\n.is-prime\u0026amp;\u0026amp;.say for ^Ⅽ 在 Raku 中没有更短答案了，而在J中，他们做到了只使用11个字符。在 Raku 中，方法名已经消耗了八个字符。我相信，要赢得所有的高尔夫比赛，你需要一种名称很短的特殊语言（J就是）和一组内置例程来生成素数，或斐波那契或任何其他数字序列的列表。它还应该强烈利用Unicode字符空间。\n在我们的 Raku 示例中，还有一个 Unicode 字符，Ⅽ。这不是简单的 C，拉丁字母的第三个字母，而是 Unicode 字符 ROMAN NUMERAL ONE HUNDRED（原本是拉丁字母的第三个字母，当然）。使用此符号，我们可以在答案中节省两个字符。\n\u0026amp;\u0026amp; 技巧是可能的，因为如果第一个操作数是 False，Perl 不会执行布尔表达式的第二部分。请注意，您不能在此处使用单个 ＆。完整的非优化版本的代码需要额外的空格，如下所示：\n.say if .is-prime for ^100 这就是今天 Raku 之旅的终点，明天见！","type":"entry","url":"https://ohmyweekly.github.io/notes/playing-with-prime-numbers-in-perl6/"}