{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"content":{"html":"\u003cp\u003e有什么意义呢？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHTTP 协议允许客户端和服务器进行通信。\u003c/li\u003e\n\u003cli\u003edart:io 包有编写 HTTP 程序的类。\u003c/li\u003e\n\u003cli\u003e服务器监听主机和端口上的请求。\u003c/li\u003e\n\u003cli\u003e客户端使用 HTTP 方法请求发送请求。\u003c/li\u003e\n\u003cli\u003ehttp_server 包提供了更高级别的构件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e前提条件: HTTP 服务器和客户端严重依赖 future 和流，本教程中没有解释这些内容。你可以从\u003ca href=\"https://dart.dev/codelabs/async-await\"\u003e异步编程 codelab\u003c/a\u003e和\u003ca href=\"https://dart.dev/tutorials/language/streams\"\u003e流教程\u003c/a\u003e中了解它们。\u003c/p\u003e\n\u003cp\u003eHTTP（超文本传输协议）是一种通信协议，用于通过互联网将数据从一个程序发送到另一个程序。数据传输的一端是服务器，另一端是客户端。客户端通常是基于浏览器的（用户在浏览器中输入或在浏览器中运行的脚本），但也可能是一个独立的程序。\u003c/p\u003e\n\u003cp\u003e服务器与主机和端口绑定（它与一个IP地址和一个端口号建立专属连接）。然后服务器监听请求。由于 Dart 的异步性，服务器可以同时处理很多请求，具体如下。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务器监听\u003c/li\u003e\n\u003cli\u003e客户端连接\u003c/li\u003e\n\u003cli\u003e服务器接受并接收请求(并继续监听)\u003c/li\u003e\n\u003cli\u003e服务器可以继续接受其他请求\u003c/li\u003e\n\u003cli\u003e服务器写入请求的响应或几个请求，可能是交错的请求\u003c/li\u003e\n\u003cli\u003e服务器最终结束(关闭)响应\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 Dart 中，\u003ca href=\"https://api.dart.dev/stable/dart-io/dart-io-library.html\"\u003edart:io\u003c/a\u003e 库包含了编写 HTTP 客户端和服务器所需的类和函数。此外，\u003ca href=\"https://pub.dev/packages/http_server\"\u003ehttp_server\u003c/a\u003e 包包含了一些更高层次的类，使其更容易编写客户端和服务器。\u003c/p\u003e\n\u003cp\u003e重要：基于浏览器的程序不能使用 dart:io 库。\u003c/p\u003e\n\u003cp\u003edart:io 库中的 API 只适用于独立的命令行程序。它们不能在浏览器中工作。要从基于浏览器的客户端发出 HTTP 请求，请参考 \u003ca href=\"https://api.dart.dev/stable/dart-html/HttpRequest-class.html\"\u003edart:html HttpRequest\u003c/a\u003e 类。\u003c/p\u003e\n\u003cp\u003e本教程提供了几个例子，说明编写 Dart HTTP 服务器和客户端是多么容易。从服务器的 \u003ccode\u003ehello world\u003c/code\u003e 开始，你将学习如何编写服务器的代码，从绑定和监听到响应请求。你还可以学习到客户端：提出不同类型的请求(GET 和 POST)，编写基于浏览器和命令行的客户端。\u003c/p\u003e\n\u003ch2 id=\"获取源码\"\u003e获取源码\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e获取 Dart 教程的\u003ca href=\"https://github.com/dart-lang/dart-tutorials-samples/archive/master.zip\"\u003e示例代码\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e查看 \u003ccode\u003ehttpserver\u003c/code\u003e 目录，其中包含本教程所需的源码。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"运行-hello-world-服务器\"\u003e运行 hello world 服务器\u003c/h2\u003e\n\u003cp\u003e本节的示例文件：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/hello_world_server.dart\"\u003ehello_world_server.dart\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e让我们从一个小型的服务器开始，用字符串 \u003ccode\u003eHello, world\u003c/code\u003e 来响应所有的请求。\u003c/p\u003e\n\u003cp\u003e在命令行中，运行 \u003ccode\u003ehello_world_server.dart\u003c/code\u003e 脚本:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e \u003cspan class=\"n\"\u003ecd\u003c/span\u003e \u003cspan class=\"n\"\u003ehttpserver\u003c/span\u003e\n\u003cspan class=\"n\"\u003e$\u003c/span\u003e \u003cspan class=\"n\"\u003edart\u003c/span\u003e \u003cspan class=\"n\"\u003ebin\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ehello_world_server\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edart\u003c/span\u003e\n\u003cspan class=\"n\"\u003elistening\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003elocalhost\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eport\u003c/span\u003e \u003cspan class=\"m\"\u003e4040\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在任何浏览器中，访问 \u003ca href=\"http://localhost:4040/\"\u003elocalhost:4040\u003c/a\u003e。浏览器会显示 \u003ccode\u003eHello, world!\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/tutorials/server/images/hello_world_response.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在这种情况下，服务器是一个 Dart 程序，客户端是你使用的浏览器。然而，你可以用 Dart 编写客户端程序-无论是基于浏览器的客户端脚本，还是独立的程序。\u003c/p\u003e\n\u003ch3 id=\"快速浏览一下代码\"\u003e快速浏览一下代码\u003c/h3\u003e\n\u003cp\u003e在 \u003ccode\u003ehello world\u003c/code\u003e 服务器的代码中，一个 HTTP 服务器与主机和端口绑定，监听 HTTP 请求，并写入响应。需要注意的是，该程序导入了 \u003ca href=\"https://api.dart.dev/stable/dart-io/dart-io-library.html\"\u003edart:io\u003c/a\u003e 库，其中包含了服务器端程序和客户端程序的 HTTP 相关类(但不包含 Web 应用)。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dart:io\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"m\"\u003e4040\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Listening on localhost:\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eport\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Hello, world!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来的几节内容包括服务器端绑定、发出客户端 GET 请求、监听和响应。\u003c/p\u003e\n\u003ch2 id=\"将服务器绑定到主机和端口\"\u003e将服务器绑定到主机和端口\u003c/h2\u003e\n\u003cp\u003e本节示例：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/hello_world_server.dart\"\u003ehello_world_server.dart\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emain()\u003c/code\u003e 中的第一条语句使用 \u003ccode\u003eHttpServer.bind()\u003c/code\u003e 创建一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpServer-class.html\"\u003eHttpServer\u003c/a\u003e 对象，并将其绑定到主机和端口。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"m\"\u003e4040\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e该代码使用 \u003ccode\u003eawait\u003c/code\u003e 异步调用 \u003ccode\u003ebind\u003c/code\u003e 方法。\u003c/p\u003e\n\u003ch3 id=\"主机名\"\u003e主机名\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ebind()\u003c/code\u003e 的第一个参数是指定主机名。你可以用一个字符串来指定一个特定的主机名或IP地址，也可以用 \u003ca href=\"https://api.dart.dev/stable/dart-io/InternetAddress-class.html\"\u003eInternetAddress\u003c/a\u003e 类提供的这些预定义的值来指定主机。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e值\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e用例\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e回环 IPv4 或 loopbackIPv6\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e服务器在 loopback 地址上监听客户端活动，该地址实际上是 localhost。使用IP协议的4或6版本。这些主要用于测试。我们建议您使用这些值而不是 \u003ccode\u003elocalhost\u003c/code\u003e 或 \u003ccode\u003e127.0.0.1\u003c/code\u003e。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e任何 IPv4 或 anyIPv6\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e服务器监听任何 IP 地址上指定端口上的客户端活动。使用IP协议的4或6版本。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e默认情况下，当使用V6互联网地址时，也会使用V4监听器。\u003c/p\u003e\n\u003ch3 id=\"端口\"\u003e端口\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ebind()\u003c/code\u003e 的第二个参数是指定端口的整数。端口唯一地标识主机上的服务。1024 以下的端口号为标准服务保留(0除外)。例如，FTP 数据传输通常在端口20上运行，每日报价在端口17上运行，HTTP 在端口80上运行。你的程序应该使用1024以上的端口号。如果端口已经在使用中，你的服务器的连接将被拒绝。\u003c/p\u003e\n\u003ch3 id=\"侦听请求\"\u003e侦听请求\u003c/h3\u003e\n\u003cp\u003e服务器使用 \u003ccode\u003eawait for\u003c/code\u003e 开始监听 HTTP 请求。每收到一个请求，代码就会发送一个 \u0026ldquo;Hello, world!\u0026rdquo; 的响应。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Hello, world!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你将在\u003ca href=\"https://dart.dev/tutorials/server/httpserver#httprequest-object\"\u003e监听和处理请求\u003c/a\u003e一节中了解更多关于 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpRequest-class.html\"\u003eHttpRequest\u003c/a\u003e 对象包含的内容以及如何编写响应。但首先，让我们看看客户端产生请求的一种方式。\u003c/p\u003e\n\u003ch2 id=\"使用-html-表单发出-get-请求\"\u003e使用 HTML 表单发出 GET 请求\u003c/h2\u003e\n\u003cp\u003e本节的示例文件：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/number_thinker.dart\"\u003enumber_thinker.dart\u003c/a\u003e 和 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/web/make_a_guess.html\"\u003emake_a_guess.html\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e本节介绍了一个命令行服务器，它可以随机选择一个0到9之间的数字。客户端是一个基本的 HTML 网页，\u003ccode\u003emake_a_guess.html\u003c/code\u003e，你可以用它来猜数字。\u003c/p\u003e\n\u003cp\u003e试试吧\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e运行数字思考者服务器\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在命令行，运行 \u003ccode\u003enumber_thinker.dart\u003c/code\u003e server。你应该看到类似下面的东西:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e httpserver\n$ dart bin/number_thinker.dart\nI\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003em thinking of a number: \u003cspan class=\"m\"\u003e6\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e启动网络服务器\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e从应用程序的顶部目录运行 \u003ccode\u003ewebdev serve\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e更多信息：\u003ca href=\"https://dart.dev/tools/webdev\"\u003ewebdev 文档\u003c/a\u003e\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e打开 HTML 页面\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在浏览器中，进入 \u003ca href=\"http://localhost:8080/make_a_guess.html\"\u003elocalhost:8080/make_a_guess.html\u003c/a\u003e。\u003c/p\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003e做一个猜测\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e选择一个数字，然后按猜测按钮。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/tutorials/server/images/guessing.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在客户端中没有涉及到 Dart 代码。客户端请求是通过浏览器向 Dart 服务器发出的，在 \u003ccode\u003emake_a_guess.html\u003c/code\u003e 中的 HTML 表单，它提供了一个自动制定和发送客户端 HTTP 请求的方法。该表单包含下拉列表和按钮。该表单还指定了 URL，其中包括端口号，以及请求的种类（请求方法）。它还可能包含建立查询字符串的元素。\u003c/p\u003e\n\u003cp\u003e下面是 \u003ccode\u003emake_a_guess.html\u003c/code\u003e 中的表单 HTML。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eform\u003c/span\u003e \u003cspan class=\"na\"\u003eaction\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;http://localhost:4041\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003emethod\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eselect\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;q\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e0\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e1\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e2\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e\u0026lt;!-- ··· --\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;9\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e9\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eselect\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003einput\u003c/span\u003e \u003cspan class=\"na\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;submit\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Guess\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eform\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下面是表单的工作原理:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e表单的 \u003ccode\u003eaction\u003c/code\u003e 属性被分配给发送请求的 URL\u003c/li\u003e\n\u003cli\u003e表单的 \u003ccode\u003emethod\u003c/code\u003e 属性定义了请求的类型，这里是 \u003ccode\u003eGET\u003c/code\u003e。其他常见的请求类型包括 POST、PUT 和 DELETE。\u003c/li\u003e\n\u003cli\u003e表单中任何有名称(\u003ccode\u003ename\u003c/code\u003e)的元素，比如 \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e 元素，都会成为查询字符串中的一个参数。\u003c/li\u003e\n\u003cli\u003e当按下提交按钮(\u003ccode\u003e\u0026lt;input type=\u0026quot;submit\u0026quot;...\u0026gt;\u003c/code\u003e)时，提交按钮会根据表单的内容制定请求并发送。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"一个-restful-get-请求\"\u003e一个 RESTful GET 请求\u003c/h3\u003e\n\u003cp\u003eREST(REpresentational State Transfer)是一套设计 Web 服务的原则。乖巧的 HTTP 客户端和服务器遵守为 GET 请求定义的 REST 原则。\u003c/p\u003e\n\u003cp\u003e一个 GET 请求:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e只检索数据\u003c/li\u003e\n\u003cli\u003e不会改变服务器的状态\u003c/li\u003e\n\u003cli\u003e有长度限制\u003c/li\u003e\n\u003cli\u003e可以在请求的 URL 中发送查询字符串\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在这个例子中，客户端发出了一个符合 REST 的 GET 请求。\u003c/p\u003e\n\u003ch2 id=\"监听和处理请求\"\u003e监听和处理请求\u003c/h2\u003e\n\u003cp\u003e本节的示例文件: \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/number_thinker.dart\"\u003enumber_thinker.dart\u003c/a\u003e 和 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/web/make_a_guess.html\"\u003emake_a_guess.html\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e现在你已经看到这个基于浏览器的客户端的例子，让我们看看数字思维服务器的 Dart 代码，从 \u003ccode\u003emain()\u003c/code\u003e 开始。\u003c/p\u003e\n\u003cp\u003e再一次，服务器绑定了一个主机和端口。在这里，每收到一个请求都会调用顶层的 \u003ccode\u003ehandleRequest()\u003c/code\u003e 方法。因为 HttpServer 实现了 \u003ca href=\"https://api.dart.dev/stable/dart-async/Stream-class.html\"\u003eStream\u003c/a\u003e，所以可以使用 \u003ccode\u003eawait for\u003c/code\u003e 来处理请求。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dart:io\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dart:math\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003eshow\u003c/span\u003e \u003cspan class=\"n\"\u003eRandom\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eRandom\u003c/span\u003e \u003cspan class=\"n\"\u003eintGenerator\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRandom\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emyNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eintGenerator\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enextInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;I\u0026#39;m thinking of a number: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003emyNumber\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"m\"\u003e4041\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当一个 \u003ccode\u003eGET\u003c/code\u003e 请求到达时，\u003ccode\u003ehandleRequest()\u003c/code\u003e 方法会调用 \u003ccode\u003ehandleGet()\u003c/code\u003e 来处理该请求。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;GET\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ehandleGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Exception in handleRequest: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Request handled.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpRequest-class.html\"\u003eHttpRequest\u003c/a\u003e 对象有很多属性，提供了关于请求的信息。下表列出了一些有用的属性。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e属性\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e信息\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003emethod\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u0026lsquo;GET\u0026rsquo;, \u0026lsquo;POST\u0026rsquo;, \u0026lsquo;PUT\u0026rsquo; 等方法中的一个。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003euri\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/Uri-class.html\"\u003eUri\u003c/a\u003e 对象：scheme、host、port、query string 和其他关于请求资源的信息。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eresponse\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpResponse-class.html\"\u003eHttpResponse\u003c/a\u003e 对象：服务器将其响应写入其中。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eheaders\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpHeaders-class.html\"\u003eHttpHeaders\u003c/a\u003e 对象：请求的头信息，包括 \u003ca href=\"https://api.dart.dev/stable/dart-io/ContentType-class.html\"\u003eContentType\u003c/a\u003e、内容长度、日期等。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"使用方法属性\"\u003e使用方法属性\u003c/h3\u003e\n\u003cp\u003e下面的数想器例子中的代码使用 HttpRequest 的 \u003ccode\u003emethod\u003c/code\u003e 属性来确定收到了什么样的请求。这个服务器只处理 GET 请求。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;GET\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ehandleGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003estatusCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethodNotAllowed\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Unsupported request: \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"使用-uri-属性\"\u003e使用 uri 属性\u003c/h3\u003e\n\u003cp\u003e在浏览器中输入一个 URL 会产生一个 GET 请求，它只是简单地从指定的资源中请求数据。它可以通过附加在 URI 上的查询字符串随请求发送少量数据。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ehandleGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eguess\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equeryParameters\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;q\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用 HttpRequest 对象的 \u003ccode\u003euri\u003c/code\u003e 属性来获取一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/Uri-class.html\"\u003eUri\u003c/a\u003e 对象，这个 Uri 对象包含了用户输入的 URL 的信息。Uri 对象的 \u003ccode\u003equeryParameters\u003c/code\u003e 属性是一个 Map，包含查询字符串的组件。通过名称来引用所需的参数。本例使用 \u003ccode\u003eq\u003c/code\u003e 来标识猜测的数字。\u003c/p\u003e\n\u003ch3 id=\"设置响应的状态码\"\u003e设置响应的状态码\u003c/h3\u003e\n\u003cp\u003e服务器应该设置状态码来表示请求的成功或失败。前面看到数想家将状态码设置为 \u003ccode\u003emethodNotAllowed\u003c/code\u003e 来拒绝非 GET 请求。在后面的代码中，为了表示请求成功，响应完成，数想家服务器将 \u003ccode\u003eHttpResponse\u003c/code\u003e 状态码设置为 \u003ccode\u003eHttpStatus.ok\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ehandleGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eguess\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equeryParameters\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;q\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estatusCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eok\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eHttpStatus.ok\u003c/code\u003e 和 \u003ccode\u003eHttpStatus.methodNotAllowed\u003c/code\u003e 是 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpStatus-class.html\"\u003eHttpStatus\u003c/a\u003e 类中许多预定义状态码中的两个。另一个有用的预定义状态码是 \u003ccode\u003eHttpStatus.notFound\u003c/code\u003e(经典的 404）。\u003c/p\u003e\n\u003cp\u003e除了状态码(\u003ccode\u003estatusCode\u003c/code\u003e)，HttpResponse 对象还有其他有用的属性:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e属性\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e信息\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003econtentLength\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e响应的长度，-1 表示事先不知道长度。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003ecookies\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e要在客户端设置的 \u003ca href=\"https://api.dart.dev/stable/dart-io/Cookie-class.html\"\u003eCookies\u003c/a\u003e 列表。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eencoding\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e编写字符串时使用的\u003ca href=\"https://api.dart.dev/stable/dart-convert/Encoding-class.html\"\u003e编码\u003c/a\u003e，如 JSON 和 UTF-8。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eheaders\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e响应头，是一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpHeaders-class.html\"\u003eHttpHeaders\u003c/a\u003e 对象。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"将响应写到-httpresponse-对象\"\u003e将响应写到 HttpResponse 对象\u003c/h3\u003e\n\u003cp\u003e每个 HttpRequest 对象都有一个对应的 HttpResponse 对象。服务器通过响应对象将数据发回给客户端。\u003c/p\u003e\n\u003cp\u003e使用 HttpResponse 写方法之一(\u003ccode\u003ewrite()\u003c/code\u003e、\u003ccode\u003ewriteln()\u003c/code\u003e、\u003ccode\u003ewriteAll()\u003c/code\u003e 或 \u003ccode\u003ewriteCharCodes()\u003c/code\u003e)将响应数据写入 HttpResponse 对象。或者通过 \u003ccode\u003eaddStream\u003c/code\u003e 将 \u003ccode\u003eHttpResponse\u003c/code\u003e 对象连接到一个流，并写入流。响应完成后关闭对象。关闭 HttpResponse 对象会将数据发回给客户端。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ehandleGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eguess\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003emyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003ewriteln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;true\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003ewriteln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;I\u0026#39;m thinking of another number.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"从独立的客户端进行-post-请求\"\u003e从独立的客户端进行 POST 请求\u003c/h2\u003e\n\u003cp\u003e本节的示例文件：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_writer_server.dart\"\u003ebasic_writer_server.dart\u003c/a\u003e 和  \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_writer_client.dart\"\u003ebasic_writer_client.dart\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003ehello world\u003c/code\u003e 和 \u003ccode\u003enumber thinker\u003c/code\u003e 的例子中，浏览器生成了简单的 GET 请求，对于更复杂的 GET 请求和其他类型的请求，如 POST、PUT 或 DELETE，你需要写一个客户端程序，其中有两种。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个独立的客户端程序，它使用 \u003ccode\u003edart:io\u003c/code\u003e 的 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClient-class.html\"\u003eHttpClient\u003c/a\u003e 类。\u003c/li\u003e\n\u003cli\u003e基于浏览器的客户端，使用 \u003ca href=\"https://api.dart.dev/stable/dart-html/dart-html-library.html\"\u003edart:html\u003c/a\u003e 中的 API。本教程不涉及基于浏览器的客户端。要查看基于浏览器的客户端和相关服务器的代码，请参见 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/web/note_client.dart\"\u003enote_client.dart\u003c/a\u003e、\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/note_server.dart\"\u003enote_server.dart\u003c/a\u003e 和 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/web/note_taker.html\"\u003enote_taker.html\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e让我们看看一个独立的客户端，\u003ccode\u003ebasic_writer_client.dart\u003c/code\u003e 和它的服务器 \u003ccode\u003ebasic_writer_server.dart\u003c/code\u003e。客户端发出一个 POST 请求，将 JSON 数据保存到服务器端的文件中。服务器接受请求并保存文件。\u003c/p\u003e\n\u003ch4 id=\"试试吧\"\u003e试试吧\u003c/h4\u003e\n\u003cp\u003e在命令行上运行服务器和客户端。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e首先，运行服务器:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e httpserver\n$ dart bin/basic_writer_server.dart\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e在一个新的终端中，运行客户端:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e httpserver\n$ dart bin/basic_writer_client.dart\nWrote data \u003cspan class=\"k\"\u003efor\u003c/span\u003e Han Solo.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e看看服务器写入 \u003ccode\u003efile.txt\u003c/code\u003e 的 JSON 数据:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Han Solo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026#34;job\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;reluctant hero\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026#34;BFF\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Chewbacca\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026#34;ship\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Millennium Falcon\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026#34;weakness\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;smuggling debts\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e客户端创建一个 HttpClient 对象，并使用 \u003ccode\u003epost()\u003c/code\u003e 方法进行请求。发起一个请求涉及两个 Future。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epost()\u003c/code\u003e 方法建立与服务器的网络连接并完成第一个 Future，返回一个 HttpClientRequest 对象。\u003c/li\u003e\n\u003cli\u003e客户端组成请求对象并关闭它。\u003ccode\u003eclose()\u003c/code\u003e 方法将请求发送到服务器并返回第二个 Future，它以一个 HttpClientResponse 对象完成。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dart:io\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dart:convert\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003e_host\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehost\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;file.txt\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eMap\u003c/span\u003e \u003cspan class=\"n\"\u003ejsonData\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Han Solo\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;job\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;reluctant hero\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;BFF\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Chewbacca\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;ship\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Millennium Falcon\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;weakness\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;smuggling debts\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eHttpClientRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpClient\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003epost\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_host\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4049\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*1*/\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtentType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eContentType\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*2*/\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejsonEncode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejsonData\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*3*/\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eHttpClientResponse\u003c/span\u003e \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*4*/\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eutf8\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecoder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*5*/\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eforEach\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e/\u003cem\u003e1\u003c/em\u003e/ \u003ccode\u003epost()\u003c/code\u003e 方法需要主机、端口和请求资源的路径。除了 \u003ccode\u003epost()\u003c/code\u003e 之外，\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClient-class.html\"\u003eHttpClient\u003c/a\u003e 类还提供了其他类型的请求函数，包括 \u003ccode\u003epostUrl()\u003c/code\u003e、\u003ccode\u003eget()\u003c/code\u003e 和 \u003ccode\u003eopen()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e2\u003c/em\u003e/ 一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClientRequest-class.html\"\u003eHttpClientRequest\u003c/a\u003e 对象有一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpHeaders-class.html\"\u003eHttpHeaders\u003c/a\u003e 对象，它包含了请求头的信息。对于一些请求头，比如 \u003ccode\u003econtentType\u003c/code\u003e，HttpHeaders 有一个针对该请求头的属性。对于其他的请求头，使用 \u003ccode\u003eset()\u003c/code\u003e 方法将该请求头放入 HttpHeaders 对象中。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e3\u003c/em\u003e/ 客户端使用 \u003ccode\u003ewrite()\u003c/code\u003e 向请求对象写入数据。编码，在这个例子中是 JSON，与 \u003ca href=\"https://api.dart.dev/stable/dart-io/ContentType-class.html\"\u003eContentType\u003c/a\u003e 头中指定的类型相匹配。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e4\u003c/em\u003e/ \u003ccode\u003eclose()\u003c/code\u003e 方法将请求发送到服务器，完成后返回一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClientResponse-class.html\"\u003eHttpClientResponse\u003c/a\u003e 对象。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e5\u003c/em\u003e/ 来自服务器的 UTF-8 响应将被解码。使用在 \u003ca href=\"https://api.dart.dev/stable/dart-convert/dart-convert-library.html\"\u003edart:convert\u003c/a\u003e 库中定义的转换器将数据转换为常规的 Dart 字符串格式。\u003c/p\u003e\n\u003ch3 id=\"一个-restful-post-请求\"\u003e一个 RESTful POST 请求\u003c/h3\u003e\n\u003cp\u003e与 GET 请求类似，REST 为 POST 请求提供了指导方针。\u003c/p\u003e\n\u003cp\u003e一个 POST 请求:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建一个资源(在这个例子中，一个文件)\u003c/li\u003e\n\u003cli\u003e使用一个 URI，其结构与文件和目录路径名相似；例如，URI 没有查询字符串。\u003c/li\u003e\n\u003cli\u003e以 JSON 或 XML 格式传输数据\u003c/li\u003e\n\u003cli\u003e没有状态，也不会改变服务器的状态。\u003c/li\u003e\n\u003cli\u003e无长度限制\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这个例子中的客户端发出 REST 兼容的 POST 请求。\u003c/p\u003e\n\u003cp\u003e要想看到使 REST 兼容的 GET 请求的客户端代码，请看 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/number_guesser.dart\"\u003enumber_guesser.dart\u003c/a\u003e。它是一个独立的客户端，用于数字思考者服务器，定期进行猜测，直到猜对为止。\u003c/p\u003e\n\u003ch2 id=\"在服务器中处理一个-post-请求\"\u003e在服务器中处理一个 POST 请求\u003c/h2\u003e\n\u003cp\u003e本节的示例文件：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_writer_server.dart\"\u003ebasic_writer_server.dart\u003c/a\u003e 和 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_writer_client.dart\"\u003ebasic_writer_client.dart\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e一个 HttpRequest 对象是一个字节列表流(\u003ccode\u003eStream\u0026lt;List\u0026lt;int\u0026gt;\u003c/code\u003e)。要获得客户端发送的数据，就要监听 HttpRequest 对象上的数据。\u003c/p\u003e\n\u003cp\u003e如果来自客户端的请求包含了大量的数据，数据可能会以多个分块的形式到达。你可以使用 Stream 中的 \u003ccode\u003ejoin()\u003c/code\u003e 方法来连接这些分块的字符串值。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/tutorials/server/images/flowchart.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ebasic_writer_server.dart\u003c/code\u003e 文件实现了一个遵循这种模式的服务器。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dart:io\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dart:convert\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003e_host\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehost\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_host\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4049\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eContentType\u003c/span\u003e \u003cspan class=\"n\"\u003econtentType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtentType\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eHttpResponse\u003c/span\u003e \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;POST\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003econtentType\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emimeType\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;application/json\u0026#39;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*1*/\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n            \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eutf8\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecoder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*2*/\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejsonDecode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003eMap\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*3*/\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003efileName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epathSegments\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*4*/\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efileName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewriteAsString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nl\"\u003emode:\u003c/span\u003e \u003cspan class=\"n\"\u003eFileMode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003estatusCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eok\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Wrote data for \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003estatusCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einternalServerError\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Exception during file I/O: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003estatusCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethodNotAllowed\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Unsupported request: \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e/\u003cem\u003e1\u003c/em\u003e/ 该请求有一个 HttpHeaders 对象。记得客户端将 \u003ccode\u003econtentType\u003c/code\u003e 头设置为 JSON(application/json)。该服务器拒绝不是 JSON 编码的请求。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e2\u003c/em\u003e/ 一个 POST 请求对它可以发送的数据量没有限制，数据可能会以多块形式发送。此外，JSON 是 UTF-8，而 UTF-8 字符可以在多个字节上进行编码。\u003ccode\u003ejoin()\u003c/code\u003e 方法将这些分块放在一起。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e3\u003c/em\u003e/ 客户端发送的数据是 JSON 格式的。服务器使用 \u003ca href=\"https://api.dart.dev/stable/dart-convert/dart-convert-library.html\"\u003edart:convert\u003c/a\u003e 库中的 JSON 编解码器对其进行解码。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e4\u003c/em\u003e/ 请求的 URL 是 \u003ca href=\"http://localhost:4049/file.txt\"\u003elocalhost:4049/file.txt\u003c/a\u003e。代码 \u003ccode\u003ereq.uri.pathSegments.last\u003c/code\u003e 从 URI 中提取文件名: \u003ccode\u003efile.txt\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"关于-cors-头的说明\"\u003e关于 CORS 头的说明\u003c/h3\u003e\n\u003cp\u003e如果你想为运行在不同源头（不同主机或端口）的客户端提供服务，你需要添加 CORS 头。下面的代码，取自 note_server.dart，允许从任何来源的 POST 和 OPTIONS 请求。谨慎使用 CORS 头文件，因为它们会给你的网络带来安全风险。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eaddCorsHeaders\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpResponse\u003c/span\u003e \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Access-Control-Allow-Origin\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;*\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eheaders\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Access-Control-Allow-Methods\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;POST, OPTIONS\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Access-Control-Allow-Headers\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"s1\"\u003e\u0026#39;Origin, X-Requested-With, Content-Type, Accept\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e更多信息，请参考维基百科的\u003ca href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003e跨源资源共享\u003c/a\u003e一文。\u003c/p\u003e\n\u003ch2 id=\"使用-http_server-包\"\u003e使用 http_server 包\u003c/h2\u003e\n\u003cp\u003e本节的示例文件：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/mini_file_server.dart\"\u003emini_file_server.dart\u003c/a\u003e 和 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/static_file_server.dart\"\u003estatic_file_server.dart\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e对于一些更高层次的构件，我们推荐你尝试 \u003ca href=\"https://pub.dev/packages/http_server\"\u003ehttp_server\u003c/a\u003e pub 包，它包含了一组类，与 \u003ccode\u003edart:io\u003c/code\u003e 库中的 HttpServer 类一起，使得实现 HTTP 务器更加容易。\u003c/p\u003e\n\u003cp\u003e在本节中，我们比较了一个只使用 \u003ccode\u003edart:io\u003c/code\u003e 的 API 编写的服务器和一个使用 dart:io 和 http_server 一起编写的具有相同功能的服务器。\u003c/p\u003e\n\u003cp\u003e你可以在 \u003ccode\u003emini_file_server.dart\u003c/code\u003e 中找到第一个服务器。它通过从 \u003ccode\u003eweb\u003c/code\u003e 目录返回 \u003ccode\u003eindex.html\u003c/code\u003e 文件的内容来响应所有请求。\u003c/p\u003e\n\u003ch3 id=\"试试吧-1\"\u003e试试吧\u003c/h3\u003e\n\u003cp\u003e在命令行中运行服务器:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e httpserver\n$ dart bin/mini_file_server.dart\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在浏览器中输入 \u003ca href=\"http://localhost:4044/\"\u003elocalhost:4044\u003c/a\u003e。服务器会显示一个 HTML 文件。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/tutorials/server/images/index_file.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e这是迷你文件服务器的代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dart:io\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFile\u003c/span\u003e \u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;web/index.html\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4044\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Couldn\u0026#39;t bind to port 4044: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexists\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Serving \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtentType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eContentType\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddStream\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopenRead\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Couldn\u0026#39;t read file: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Can\u0026#39;t open \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estatusCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enotFound\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这段代码确定文件是否存在，如果存在，则打开文件，并将文件内容管道化到HttpResponse对象。\u003c/p\u003e\n\u003cp\u003e第二个服务器，你可以在 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_file_server.dart\"\u003ebasic_file_server.dart\u003c/a\u003e 中找到它的代码，使用 \u003ca href=\"https://pub.dev/packages/http_server\"\u003ehttp_server\u003c/a\u003e 包。\u003c/p\u003e\n\u003ch3 id=\"试试吧-2\"\u003e试试吧\u003c/h3\u003e\n\u003cp\u003e在命令行中运行服务器:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e httpserver\n$ dart bin/basic_file_server.dart\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在浏览器中输入 \u003ca href=\"http://localhost:4046/\"\u003elocalhost:4046\u003c/a\u003e。服务器显示与之前相同的 index.html 文件。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/tutorials/server/images/index_file_4046.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在这个服务器中，处理请求的代码要短得多，因为 \u003ca href=\"https://pub.dev/documentation/http_server/latest/http_server/VirtualDirectory-class.html\"\u003eVirtualDirectory\u003c/a\u003e 类处理服务文件的细节。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dart:io\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;package:http_server/http_server.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFile\u003c/span\u003e \u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;web/index.html\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eVirtualDirectory\u003c/span\u003e \u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVirtualDirectory\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserverRequests\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4046\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserverRequests\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eserveFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里，请求的资源 index.html 是由 VirtualDirectory 类中的 \u003ccode\u003eserviceFile()\u003c/code\u003e 方法提供的。你不需要写代码来打开一个文件并将其内容用管道传送到请求中。\u003c/p\u003e\n\u003cp\u003e另一个文件服务器 \u003ccode\u003estatic_file_server.dart\u003c/code\u003e 也使用 http_server 包。这个服务器可以服务于服务器目录或子目录中的任何文件。\u003c/p\u003e\n\u003cp\u003e运行 \u003ccode\u003estatic_file_server.dart\u003c/code\u003e，用 \u003ca href=\"http://localhost:4048/\"\u003elocalhost:4048\u003c/a\u003e 这个 URL 进行测试。\u003c/p\u003e\n\u003cp\u003e下面是 \u003ccode\u003estatic_file_server.dart\u003c/code\u003e 的代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dart:io\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;package:http_server/http_server.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVirtualDirectory\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;web\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eallowDirectoryListing\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*1*/\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edirectoryHandler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*2*/\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eindexUri\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eresolve\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;index.html\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eserveFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindexUri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoFilePath\u003c/span\u003e\u003cspan class=\"p\"\u003e()),\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*3*/\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4048\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Listening on port 4048\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eforEach\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eserveRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*4*/\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e/\u003cem\u003e1\u003c/em\u003e/ 允许客户端请求服务器目录内的文件。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e2\u003c/em\u003e/ 一个匿名函数，处理对目录本身的请求，即 URL 不包含文件名。该函数将这些请求重定向到 \u003ccode\u003eindex.html\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e3\u003c/em\u003e/ \u003ccode\u003eserveFile\u003c/code\u003e 方法为一个文件提供服务，在这个例子中，它为目录请求服务index.html。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e4\u003c/em\u003e/ VirtualDirectory 类提供的 \u003ccode\u003eserviceRequest\u003c/code\u003e 方法处理指定文件的请求。\u003c/p\u003e\n\u003ch2 id=\"使用-bindsecure-的-https-方法\"\u003e使用 bindSecure() 的 https 方法\u003c/h2\u003e\n\u003cp\u003e本节的示例：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/hello_world_server_secure.dart\"\u003ehello_world_server_secure.dart\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e你可能已经注意到，HttpServer 类定义了一个叫做 \u003ccode\u003ebindSecure()\u003c/code\u003e 的方法，它使用 HTTPS(Hyper Text Transfer Protocol with Secure Sockets Layer)提供安全连接。要使用 \u003ccode\u003ebindSecure()\u003c/code\u003e 方法，你需要一个证书，这个证书由证书颁发机构(CA)提供。有关证书的更多信息，请参考\u003ca href=\"https://www.tldp.org/HOWTO/SSL-Certificates-HOWTO/x64.html\"\u003e什么是 SSL 和什么是证书\u003c/a\u003e？\u003c/p\u003e\n\u003cp\u003e为了说明问题，下面的服务器 \u003ccode\u003ehello_world_server_secure.dart\u003c/code\u003e 使用 Dart 团队创建的证书调用 \u003ccode\u003ebindSecure()\u003c/code\u003e 进行测试。你必须为你的服务器提供自己的证书。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dart:io\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ecertificateChain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;server_chain.pem\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eserverKey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;server_key.pem\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserverContext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSecurityContext\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*1*/\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eserverContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euseCertificateChain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecertificateChain\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*2*/\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eserverContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eusePrivateKey\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eserverKey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nl\"\u003epassword:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dartdart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*3*/\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebindSecure\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s1\"\u003e\u0026#39;localhost\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"m\"\u003e4047\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eserverContext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*4*/\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Listening on localhost:\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eport\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Hello, world!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e/\u003cem\u003e1\u003c/em\u003e/ 安全网络连接的可选设置在 SecurityContext 对象中指定，有一个默认的对象 SecurityContext.defaultContext，包括知名证书机构的可信根证书。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e2\u003c/em\u003e/ 一个包含从服务器证书到签名机关根证书链的文件，\u003ca href=\"https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail\"\u003e格式为 PEM\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e3\u003c/em\u003e/ 一个包含（加密的）服务器证书私钥的文件，\u003ca href=\"https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail\"\u003ePEM 格式\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e4\u003c/em\u003e/ 在服务器上，上下文参数是必需的，对客户端来说是可选的。如果省略它，则使用默认的内置可信根的上下文。\u003c/p\u003e\n\u003ch2 id=\"其他资源\"\u003e其他资源\u003c/h2\u003e\n\u003cp\u003e请访问这些 API 文档，了解本教程中讨论的类和库的更多细节。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eDart 类\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e目的\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpServer-class.html\"\u003eHttpServer\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个 HTTP 服务器\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClient-class.html\"\u003eHttpClient\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个 HTTP 客户端\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpRequest-class.html\"\u003eHttpRequest\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个服务器端请求对象\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpResponse-class.html\"\u003eHttpResponse\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个服务器端响应对象\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClientRequest-class.html\"\u003eHttpClientRequest\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个客户端请求对象\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClientResponse-class.html\"\u003eHttpClientResponse\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个客户端响应对象\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpHeaders-class.html\"\u003eHttpHeaders\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e请求头\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpStatus-class.html\"\u003eHttpStatus\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e响应的状态\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/InternetAddress-class.html\"\u003eInternetAddress\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个互联网地址\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/SecurityContext-class.html\"\u003eSecurityContext\u003c/a\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e包含安全连接的证书、密钥和信任信息。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ca href=\"https://pub.dev/packages/http_server\"\u003ehttp_server\u003c/a\u003e 包\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e一个具有较高级别的 HTTP 类的包\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"下一步该怎么做\"\u003e下一步该怎么做？\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e如果你还没有尝试过服务器端的 codelab，可以尝试\u003ca href=\"https://dart-lang.github.io/server/codelab/\"\u003e编写一个服务器应用程序\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart-lang.github.io/server/\"\u003eServers with Dart\u003c/a\u003e 链接到编写独立 Dart 应用程序的资源，包括服务器。\u003c/li\u003e\n\u003c/ul\u003e\n","text":"有什么意义呢？\n HTTP 协议允许客户端和服务器进行通信。 dart:io 包有编写 HTTP 程序的类。 服务器监听主机和端口上的请求。 客户端使用 HTTP 方法请求发送请求。 http_server 包提供了更高级别的构件。  前提条件: HTTP 服务器和客户端严重依赖 future 和流，本教程中没有解释这些内容。你可以从异步编程 codelab和流教程中了解它们。\nHTTP（超文本传输协议）是一种通信协议，用于通过互联网将数据从一个程序发送到另一个程序。数据传输的一端是服务器，另一端是客户端。客户端通常是基于浏览器的（用户在浏览器中输入或在浏览器中运行的脚本），但也可能是一个独立的程序。\n服务器与主机和端口绑定（它与一个IP地址和一个端口号建立专属连接）。然后服务器监听请求。由于 Dart 的异步性，服务器可以同时处理很多请求，具体如下。\n 服务器监听 客户端连接 服务器接受并接收请求(并继续监听) 服务器可以继续接受其他请求 服务器写入请求的响应或几个请求，可能是交错的请求 服务器最终结束(关闭)响应  在 Dart 中，dart:io 库包含了编写 HTTP 客户端和服务器所需的类和函数。此外，http_server 包包含了一些更高层次的类，使其更容易编写客户端和服务器。\n重要：基于浏览器的程序不能使用 dart:io 库。\ndart:io 库中的 API 只适用于独立的命令行程序。它们不能在浏览器中工作。要从基于浏览器的客户端发出 HTTP 请求，请参考 dart:html HttpRequest 类。\n本教程提供了几个例子，说明编写 Dart HTTP 服务器和客户端是多么容易。从服务器的 hello world 开始，你将学习如何编写服务器的代码，从绑定和监听到响应请求。你还可以学习到客户端：提出不同类型的请求(GET 和 POST)，编写基于浏览器和命令行的客户端。\n获取源码  获取 Dart 教程的示例代码。 查看 httpserver 目录，其中包含本教程所需的源码。  运行 hello world 服务器 本节的示例文件：hello_world_server.dart。\n让我们从一个小型的服务器开始，用字符串 Hello, world 来响应所有的请求。\n在命令行中，运行 hello_world_server.dart 脚本:\n$ cd httpserver $ dart bin/hello_world_server.dart listening on localhost, port 4040 在任何浏览器中，访问 localhost:4040。浏览器会显示 Hello, world!。\n在这种情况下，服务器是一个 Dart 程序，客户端是你使用的浏览器。然而，你可以用 Dart 编写客户端程序-无论是基于浏览器的客户端脚本，还是独立的程序。\n快速浏览一下代码 在 hello world 服务器的代码中，一个 HTTP 服务器与主机和端口绑定，监听 HTTP 请求，并写入响应。需要注意的是，该程序导入了 dart:io 库，其中包含了服务器端程序和客户端程序的 HTTP 相关类(但不包含 Web 应用)。\nimport \u0026#39;dart:io\u0026#39;; Future main() async { var server = await HttpServer.bind( InternetAddress.loopbackIPv4, 4040, ); print(\u0026#39;Listening on localhost:${server.port}\u0026#39;); await for (HttpRequest request in server) { request.response.write(\u0026#39;Hello, world!\u0026#39;); await request.response.close(); } } 接下来的几节内容包括服务器端绑定、发出客户端 GET 请求、监听和响应。\n将服务器绑定到主机和端口 本节示例：hello_world_server.dart。\nmain() 中的第一条语句使用 HttpServer.bind() 创建一个 HttpServer 对象，并将其绑定到主机和端口。\nvar server = await HttpServer.bind( InternetAddress.loopbackIPv4, 4040, ); 该代码使用 await 异步调用 bind 方法。\n主机名 bind() 的第一个参数是指定主机名。你可以用一个字符串来指定一个特定的主机名或IP地址，也可以用 InternetAddress 类提供的这些预定义的值来指定主机。\n   值 用例     回环 IPv4 或 loopbackIPv6 服务器在 loopback 地址上监听客户端活动，该地址实际上是 localhost。使用IP协议的4或6版本。这些主要用于测试。我们建议您使用这些值而不是 localhost 或 127.0.0.1。   任何 IPv4 或 anyIPv6 服务器监听任何 IP 地址上指定端口上的客户端活动。使用IP协议的4或6版本。    默认情况下，当使用V6互联网地址时，也会使用V4监听器。\n端口 bind() 的第二个参数是指定端口的整数。端口唯一地标识主机上的服务。1024 以下的端口号为标准服务保留(0除外)。例如，FTP 数据传输通常在端口20上运行，每日报价在端口17上运行，HTTP 在端口80上运行。你的程序应该使用1024以上的端口号。如果端口已经在使用中，你的服务器的连接将被拒绝。\n侦听请求 服务器使用 await for 开始监听 HTTP 请求。每收到一个请求，代码就会发送一个 \u0026ldquo;Hello, world!\u0026rdquo; 的响应。\nawait for (HttpRequest request in server) { request.response.write(\u0026#39;Hello, world!\u0026#39;); await request.response.close(); } 你将在监听和处理请求一节中了解更多关于 HttpRequest 对象包含的内容以及如何编写响应。但首先，让我们看看客户端产生请求的一种方式。\n使用 HTML 表单发出 GET 请求 本节的示例文件：number_thinker.dart 和 make_a_guess.html。\n本节介绍了一个命令行服务器，它可以随机选择一个0到9之间的数字。客户端是一个基本的 HTML 网页，make_a_guess.html，你可以用它来猜数字。\n试试吧\n 运行数字思考者服务器  在命令行，运行 number_thinker.dart server。你应该看到类似下面的东西:\n$ cd httpserver $ dart bin/number_thinker.dart I\u0026#39;m thinking of a number: 6 启动网络服务器  从应用程序的顶部目录运行 webdev serve。\n更多信息：webdev 文档\n打开 HTML 页面  在浏览器中，进入 localhost:8080/make_a_guess.html。\n做一个猜测  选择一个数字，然后按猜测按钮。\n在客户端中没有涉及到 Dart 代码。客户端请求是通过浏览器向 Dart 服务器发出的，在 make_a_guess.html 中的 HTML 表单，它提供了一个自动制定和发送客户端 HTTP 请求的方法。该表单包含下拉列表和按钮。该表单还指定了 URL，其中包括端口号，以及请求的种类（请求方法）。它还可能包含建立查询字符串的元素。\n下面是 make_a_guess.html 中的表单 HTML。\n\u0026lt;form action=\u0026#34;http://localhost:4041\u0026#34; method=\u0026#34;GET\u0026#34;\u0026gt; \u0026lt;select name=\u0026#34;q\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;0\u0026#34;\u0026gt;0\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;1\u0026#34;\u0026gt;1\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;2\u0026#34;\u0026gt;2\u0026lt;/option\u0026gt; \u0026lt;!-- ··· --\u0026gt; \u0026lt;option value=\u0026#34;9\u0026#34;\u0026gt;9\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Guess\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; 下面是表单的工作原理:\n 表单的 action 属性被分配给发送请求的 URL 表单的 method 属性定义了请求的类型，这里是 GET。其他常见的请求类型包括 POST、PUT 和 DELETE。 表单中任何有名称(name)的元素，比如 \u0026lt;select\u0026gt; 元素，都会成为查询字符串中的一个参数。 当按下提交按钮(\u0026lt;input type=\u0026quot;submit\u0026quot;...\u0026gt;)时，提交按钮会根据表单的内容制定请求并发送。  一个 RESTful GET 请求 REST(REpresentational State Transfer)是一套设计 Web 服务的原则。乖巧的 HTTP 客户端和服务器遵守为 GET 请求定义的 REST 原则。\n一个 GET 请求:\n 只检索数据 不会改变服务器的状态 有长度限制 可以在请求的 URL 中发送查询字符串  在这个例子中，客户端发出了一个符合 REST 的 GET 请求。\n监听和处理请求 本节的示例文件: number_thinker.dart 和 make_a_guess.html。\n现在你已经看到这个基于浏览器的客户端的例子，让我们看看数字思维服务器的 Dart 代码，从 main() 开始。\n再一次，服务器绑定了一个主机和端口。在这里，每收到一个请求都会调用顶层的 handleRequest() 方法。因为 HttpServer 实现了 Stream，所以可以使用 await for 来处理请求。\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:math\u0026#39; show Random; Random intGenerator = Random(); int myNumber = intGenerator.nextInt(10); Future main() async { print(\u0026#34;I\u0026#39;m thinking of a number: $myNumber\u0026#34;); HttpServer server = await HttpServer.bind( InternetAddress.loopbackIPv4, 4041, ); await for (var request in server) { handleRequest(request); } } 当一个 GET 请求到达时，handleRequest() 方法会调用 handleGet() 来处理该请求。\nvoid handleRequest(HttpRequest request) { try { if (request.method == \u0026#39;GET\u0026#39;) { handleGet(request); } else { // ···  } } catch (e) { print(\u0026#39;Exception in handleRequest: $e\u0026#39;); } print(\u0026#39;Request handled.\u0026#39;); } 一个 HttpRequest 对象有很多属性，提供了关于请求的信息。下表列出了一些有用的属性。\n   属性 信息     method \u0026lsquo;GET\u0026rsquo;, \u0026lsquo;POST\u0026rsquo;, \u0026lsquo;PUT\u0026rsquo; 等方法中的一个。   uri 一个 Uri 对象：scheme、host、port、query string 和其他关于请求资源的信息。   response 一个 HttpResponse 对象：服务器将其响应写入其中。   headers 一个 HttpHeaders 对象：请求的头信息，包括 ContentType、内容长度、日期等。    使用方法属性 下面的数想器例子中的代码使用 HttpRequest 的 method 属性来确定收到了什么样的请求。这个服务器只处理 GET 请求。\nif (request.method == \u0026#39;GET\u0026#39;) { handleGet(request); } else { request.response ..statusCode = HttpStatus.methodNotAllowed ..write(\u0026#39;Unsupported request: ${request.method}.\u0026#39;) ..close(); } 使用 uri 属性 在浏览器中输入一个 URL 会产生一个 GET 请求，它只是简单地从指定的资源中请求数据。它可以通过附加在 URI 上的查询字符串随请求发送少量数据。\nvoid handleGet(HttpRequest request) { final guess = request.uri.queryParameters[\u0026#39;q\u0026#39;]; // ··· } 使用 HttpRequest 对象的 uri 属性来获取一个 Uri 对象，这个 Uri 对象包含了用户输入的 URL 的信息。Uri 对象的 queryParameters 属性是一个 Map，包含查询字符串的组件。通过名称来引用所需的参数。本例使用 q 来标识猜测的数字。\n设置响应的状态码 服务器应该设置状态码来表示请求的成功或失败。前面看到数想家将状态码设置为 methodNotAllowed 来拒绝非 GET 请求。在后面的代码中，为了表示请求成功，响应完成，数想家服务器将 HttpResponse 状态码设置为 HttpStatus.ok。\nvoid handleGet(HttpRequest request) { final guess = request.uri.queryParameters[\u0026#39;q\u0026#39;]; final response = request.response; response.statusCode = HttpStatus.ok; // ··· } HttpStatus.ok 和 HttpStatus.methodNotAllowed 是 HttpStatus 类中许多预定义状态码中的两个。另一个有用的预定义状态码是 HttpStatus.notFound(经典的 404）。\n除了状态码(statusCode)，HttpResponse 对象还有其他有用的属性:\n   属性 信息     contentLength 响应的长度，-1 表示事先不知道长度。   cookies 要在客户端设置的 Cookies 列表。   encoding 编写字符串时使用的编码，如 JSON 和 UTF-8。   headers 响应头，是一个 HttpHeaders 对象。    将响应写到 HttpResponse 对象 每个 HttpRequest 对象都有一个对应的 HttpResponse 对象。服务器通过响应对象将数据发回给客户端。\n使用 HttpResponse 写方法之一(write()、writeln()、writeAll() 或 writeCharCodes())将响应数据写入 HttpResponse 对象。或者通过 addStream 将 HttpResponse 对象连接到一个流，并写入流。响应完成后关闭对象。关闭 HttpResponse 对象会将数据发回给客户端。\nvoid handleGet(HttpRequest request) { // ···  if (guess == myNumber.toString()) { response ..writeln(\u0026#39;true\u0026#39;) ..writeln(\u0026#34;I\u0026#39;m thinking of another number.\u0026#34;) ..close(); // ···  } } 从独立的客户端进行 POST 请求 本节的示例文件：basic_writer_server.dart 和 basic_writer_client.dart。\n在 hello world 和 number thinker 的例子中，浏览器生成了简单的 GET 请求，对于更复杂的 GET 请求和其他类型的请求，如 POST、PUT 或 DELETE，你需要写一个客户端程序，其中有两种。\n 一个独立的客户端程序，它使用 dart:io 的 HttpClient 类。 基于浏览器的客户端，使用 dart:html 中的 API。本教程不涉及基于浏览器的客户端。要查看基于浏览器的客户端和相关服务器的代码，请参见 note_client.dart、note_server.dart 和 note_taker.html。  让我们看看一个独立的客户端，basic_writer_client.dart 和它的服务器 basic_writer_server.dart。客户端发出一个 POST 请求，将 JSON 数据保存到服务器端的文件中。服务器接受请求并保存文件。\n试试吧 在命令行上运行服务器和客户端。\n 首先，运行服务器:  cd httpserver $ dart bin/basic_writer_server.dart 在一个新的终端中，运行客户端:  $ cd httpserver $ dart bin/basic_writer_client.dart Wrote data for Han Solo. 看看服务器写入 file.txt 的 JSON 数据:\n{\u0026#34;name\u0026#34;:\u0026#34;Han Solo\u0026#34;,\u0026#34;job\u0026#34;:\u0026#34;reluctant hero\u0026#34;,\u0026#34;BFF\u0026#34;:\u0026#34;Chewbacca\u0026#34;,\u0026#34;ship\u0026#34;:\u0026#34;Millennium Falcon\u0026#34;,\u0026#34;weakness\u0026#34;:\u0026#34;smuggling debts\u0026#34;} 客户端创建一个 HttpClient 对象，并使用 post() 方法进行请求。发起一个请求涉及两个 Future。\n post() 方法建立与服务器的网络连接并完成第一个 Future，返回一个 HttpClientRequest 对象。 客户端组成请求对象并关闭它。close() 方法将请求发送到服务器并返回第二个 Future，它以一个 HttpClientResponse 对象完成。  import \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:convert\u0026#39;; String _host = InternetAddress.loopbackIPv4.host; String path = \u0026#39;file.txt\u0026#39;; Map jsonData = { \u0026#39;name\u0026#39;: \u0026#39;Han Solo\u0026#39;, \u0026#39;job\u0026#39;: \u0026#39;reluctant hero\u0026#39;, \u0026#39;BFF\u0026#39;: \u0026#39;Chewbacca\u0026#39;, \u0026#39;ship\u0026#39;: \u0026#39;Millennium Falcon\u0026#39;, \u0026#39;weakness\u0026#39;: \u0026#39;smuggling debts\u0026#39; }; Future main() async { HttpClientRequest request = await HttpClient().post(_host, 4049, path) /*1*/ ..headers.contentType = ContentType.json /*2*/ ..write(jsonEncode(jsonData)); /*3*/ HttpClientResponse response = await request.close(); /*4*/ await utf8.decoder.bind(response /*5*/).forEach(print); } /1/ post() 方法需要主机、端口和请求资源的路径。除了 post() 之外，HttpClient 类还提供了其他类型的请求函数，包括 postUrl()、get() 和 open()。\n/2/ 一个 HttpClientRequest 对象有一个 HttpHeaders 对象，它包含了请求头的信息。对于一些请求头，比如 contentType，HttpHeaders 有一个针对该请求头的属性。对于其他的请求头，使用 set() 方法将该请求头放入 HttpHeaders 对象中。\n/3/ 客户端使用 write() 向请求对象写入数据。编码，在这个例子中是 JSON，与 ContentType 头中指定的类型相匹配。\n/4/ close() 方法将请求发送到服务器，完成后返回一个 HttpClientResponse 对象。\n/5/ 来自服务器的 UTF-8 响应将被解码。使用在 dart:convert 库中定义的转换器将数据转换为常规的 Dart 字符串格式。\n一个 RESTful POST 请求 与 GET 请求类似，REST 为 POST 请求提供了指导方针。\n一个 POST 请求:\n 创建一个资源(在这个例子中，一个文件) 使用一个 URI，其结构与文件和目录路径名相似；例如，URI 没有查询字符串。 以 JSON 或 XML 格式传输数据 没有状态，也不会改变服务器的状态。 无长度限制  这个例子中的客户端发出 REST 兼容的 POST 请求。\n要想看到使 REST 兼容的 GET 请求的客户端代码，请看 number_guesser.dart。它是一个独立的客户端，用于数字思考者服务器，定期进行猜测，直到猜对为止。\n在服务器中处理一个 POST 请求 本节的示例文件：basic_writer_server.dart 和 basic_writer_client.dart。\n一个 HttpRequest 对象是一个字节列表流(Stream\u0026lt;List\u0026lt;int\u0026gt;)。要获得客户端发送的数据，就要监听 HttpRequest 对象上的数据。\n如果来自客户端的请求包含了大量的数据，数据可能会以多个分块的形式到达。你可以使用 Stream 中的 join() 方法来连接这些分块的字符串值。\nbasic_writer_server.dart 文件实现了一个遵循这种模式的服务器。\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:convert\u0026#39;; String _host = InternetAddress.loopbackIPv4.host; Future main() async { var server = await HttpServer.bind(_host, 4049); await for (var req in server) { ContentType contentType = req.headers.contentType; HttpResponse response = req.response; if (req.method == \u0026#39;POST\u0026#39; \u0026amp;\u0026amp; contentType?.mimeType == \u0026#39;application/json\u0026#39; /*1*/) { try { String content = await utf8.decoder.bind(req).join(); /*2*/ var data = jsonDecode(content) as Map; /*3*/ var fileName = req.uri.pathSegments.last; /*4*/ await File(fileName) .writeAsString(content, mode: FileMode.write); req.response ..statusCode = HttpStatus.ok ..write(\u0026#39;Wrote data for ${data[\u0026#39;name\u0026#39;]}.\u0026#39;); } catch (e) { response ..statusCode = HttpStatus.internalServerError ..write(\u0026#39;Exception during file I/O: $e.\u0026#39;); } } else { response ..statusCode = HttpStatus.methodNotAllowed ..write(\u0026#39;Unsupported request: ${req.method}.\u0026#39;); } await response.close(); } } /1/ 该请求有一个 HttpHeaders 对象。记得客户端将 contentType 头设置为 JSON(application/json)。该服务器拒绝不是 JSON 编码的请求。\n/2/ 一个 POST 请求对它可以发送的数据量没有限制，数据可能会以多块形式发送。此外，JSON 是 UTF-8，而 UTF-8 字符可以在多个字节上进行编码。join() 方法将这些分块放在一起。\n/3/ 客户端发送的数据是 JSON 格式的。服务器使用 dart:convert 库中的 JSON 编解码器对其进行解码。\n/4/ 请求的 URL 是 localhost:4049/file.txt。代码 req.uri.pathSegments.last 从 URI 中提取文件名: file.txt。\n关于 CORS 头的说明 如果你想为运行在不同源头（不同主机或端口）的客户端提供服务，你需要添加 CORS 头。下面的代码，取自 note_server.dart，允许从任何来源的 POST 和 OPTIONS 请求。谨慎使用 CORS 头文件，因为它们会给你的网络带来安全风险。\nvoid addCorsHeaders(HttpResponse response) { response.headers.add(\u0026#39;Access-Control-Allow-Origin\u0026#39;, \u0026#39;*\u0026#39;); response.headers .add(\u0026#39;Access-Control-Allow-Methods\u0026#39;, \u0026#39;POST, OPTIONS\u0026#39;); response.headers.add(\u0026#39;Access-Control-Allow-Headers\u0026#39;, \u0026#39;Origin, X-Requested-With, Content-Type, Accept\u0026#39;); } 更多信息，请参考维基百科的跨源资源共享一文。\n使用 http_server 包 本节的示例文件：mini_file_server.dart 和 static_file_server.dart。\n对于一些更高层次的构件，我们推荐你尝试 http_server pub 包，它包含了一组类，与 dart:io 库中的 HttpServer 类一起，使得实现 HTTP 务器更加容易。\n在本节中，我们比较了一个只使用 dart:io 的 API 编写的服务器和一个使用 dart:io 和 http_server 一起编写的具有相同功能的服务器。\n你可以在 mini_file_server.dart 中找到第一个服务器。它通过从 web 目录返回 index.html 文件的内容来响应所有请求。\n试试吧 在命令行中运行服务器:\n$ cd httpserver $ dart bin/mini_file_server.dart 在浏览器中输入 localhost:4044。服务器会显示一个 HTML 文件。\n这是迷你文件服务器的代码:\nimport \u0026#39;dart:io\u0026#39;; File targetFile = File(\u0026#39;web/index.html\u0026#39;); Future main() async { Stream\u0026lt;HttpRequest\u0026gt; server; try { server = await HttpServer.bind(InternetAddress.loopbackIPv4, 4044); } catch (e) { print(\u0026#34;Couldn\u0026#39;t bind to port 4044: $e\u0026#34;); exit(-1); } await for (HttpRequest req in server) { if (await targetFile.exists()) { print(\u0026#34;Serving ${targetFile.path}.\u0026#34;); req.response.headers.contentType = ContentType.html; try { await req.response.addStream(targetFile.openRead()); } catch (e) { print(\u0026#34;Couldn\u0026#39;t read file: $e\u0026#34;); exit(-1); } } else { print(\u0026#34;Can\u0026#39;t open ${targetFile.path}.\u0026#34;); req.response.statusCode = HttpStatus.notFound; } await req.response.close(); } } 这段代码确定文件是否存在，如果存在，则打开文件，并将文件内容管道化到HttpResponse对象。\n第二个服务器，你可以在 basic_file_server.dart 中找到它的代码，使用 http_server 包。\n试试吧 在命令行中运行服务器:\n$ cd httpserver $ dart bin/basic_file_server.dart 在浏览器中输入 localhost:4046。服务器显示与之前相同的 index.html 文件。\n在这个服务器中，处理请求的代码要短得多，因为 VirtualDirectory 类处理服务文件的细节。\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;package:http_server/http_server.dart\u0026#39;; File targetFile = File(\u0026#39;web/index.html\u0026#39;); Future main() async { VirtualDirectory staticFiles = VirtualDirectory(\u0026#39;.\u0026#39;); var serverRequests = await HttpServer.bind(InternetAddress.loopbackIPv4, 4046); await for (var request in serverRequests) { staticFiles.serveFile(targetFile, request); } } 这里，请求的资源 index.html 是由 VirtualDirectory 类中的 serviceFile() 方法提供的。你不需要写代码来打开一个文件并将其内容用管道传送到请求中。\n另一个文件服务器 static_file_server.dart 也使用 http_server 包。这个服务器可以服务于服务器目录或子目录中的任何文件。\n运行 static_file_server.dart，用 localhost:4048 这个 URL 进行测试。\n下面是 static_file_server.dart 的代码:\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;package:http_server/http_server.dart\u0026#39;; Future main() async { var staticFiles = VirtualDirectory(\u0026#39;web\u0026#39;); staticFiles.allowDirectoryListing = true; /*1*/ staticFiles.directoryHandler = (dir, request) /*2*/ { var indexUri = Uri.file(dir.path).resolve(\u0026#39;index.html\u0026#39;); staticFiles.serveFile(File(indexUri.toFilePath()), request); /*3*/ }; var server = await HttpServer.bind(InternetAddress.loopbackIPv4, 4048); print(\u0026#39;Listening on port 4048\u0026#39;); await server.forEach(staticFiles.serveRequest); /*4*/ } /1/ 允许客户端请求服务器目录内的文件。\n/2/ 一个匿名函数，处理对目录本身的请求，即 URL 不包含文件名。该函数将这些请求重定向到 index.html。\n/3/ serveFile 方法为一个文件提供服务，在这个例子中，它为目录请求服务index.html。\n/4/ VirtualDirectory 类提供的 serviceRequest 方法处理指定文件的请求。\n使用 bindSecure() 的 https 方法 本节的示例：hello_world_server_secure.dart。\n你可能已经注意到，HttpServer 类定义了一个叫做 bindSecure() 的方法，它使用 HTTPS(Hyper Text Transfer Protocol with Secure Sockets Layer)提供安全连接。要使用 bindSecure() 方法，你需要一个证书，这个证书由证书颁发机构(CA)提供。有关证书的更多信息，请参考什么是 SSL 和什么是证书？\n为了说明问题，下面的服务器 hello_world_server_secure.dart 使用 Dart 团队创建的证书调用 bindSecure() 进行测试。你必须为你的服务器提供自己的证书。\nimport \u0026#39;dart:io\u0026#39;; String certificateChain = \u0026#39;server_chain.pem\u0026#39;; String serverKey = \u0026#39;server_key.pem\u0026#39;; Future main() async { var serverContext = SecurityContext(); /*1*/ serverContext.useCertificateChain(certificateChain); /*2*/ serverContext.usePrivateKey(serverKey, password: \u0026#39;dartdart\u0026#39;); /*3*/ var server = await HttpServer.bindSecure( \u0026#39;localhost\u0026#39;, 4047, serverContext, /*4*/ ); print(\u0026#39;Listening on localhost:${server.port}\u0026#39;); await for (HttpRequest request in server) { request.response.write(\u0026#39;Hello, world!\u0026#39;); await request.response.close(); } } /1/ 安全网络连接的可选设置在 SecurityContext 对象中指定，有一个默认的对象 SecurityContext.defaultContext，包括知名证书机构的可信根证书。\n/2/ 一个包含从服务器证书到签名机关根证书链的文件，格式为 PEM。\n/3/ 一个包含（加密的）服务器证书私钥的文件，PEM 格式。\n/4/ 在服务器上，上下文参数是必需的，对客户端来说是可选的。如果省略它，则使用默认的内置可信根的上下文。\n其他资源 请访问这些 API 文档，了解本教程中讨论的类和库的更多细节。\n   Dart 类 目的     HttpServer 一个 HTTP 服务器   HttpClient 一个 HTTP 客户端   HttpRequest 一个服务器端请求对象   HttpResponse 一个服务器端响应对象   HttpClientRequest 一个客户端请求对象   HttpClientResponse 一个客户端响应对象   HttpHeaders 请求头   HttpStatus 响应的状态   InternetAddress 一个互联网地址   SecurityContext 包含安全连接的证书、密钥和信任信息。   http_server 包 一个具有较高级别的 HTTP 类的包    下一步该怎么做？  如果你还没有尝试过服务器端的 codelab，可以尝试编写一个服务器应用程序。 Servers with Dart 链接到编写独立 Dart 应用程序的资源，包括服务器。  "},"name":"编写HTTP客户端和服务器","published":"2020-06-30T00:00:00+08:00","summary":"Write HTTP clients \u0026amp; servers","type":"entry","url":"https://ohmyweekly.github.io/notes/write-http-clients/"}