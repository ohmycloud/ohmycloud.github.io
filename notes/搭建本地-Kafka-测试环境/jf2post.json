{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# 启动 zookeeper\n~/opt/zookeeper-3.4.10/bin/zkServer.sh start \n\n # 创建 topic\n ~/opt/kafka_2.11-0.11.0.1/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 3 --topic ohmyfish\n\n# 创建生产者\n~/opt/kafka_2.11-0.11.0.1/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic  ohmyfish \n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"安装-openresty\"\u003e安装 openresty\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ebrew install openresty/brew/openresty\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e安装的路径应该在:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e/usr/local/Cellar/openresty/1.13.6.1/nginx/sbin/\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e需要把这个路径添加到 PATH 路径中.\u003c/p\u003e\n\u003cp\u003e然后用 \u003ccode\u003enginx -V\u003c/code\u003e 查看 nginx 是否正常:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enginx version: openresty/1.13.6.1\nbuilt by clang 9.0.0 (clang-900.0.39.2)\nbuilt with OpenSSL 1.0.2k  26 Jan 2017\nTLS SNI support enabled\nconfigure arguments: --prefix=/usr/local/Cellar/openresty/1.13.6.1/nginx --with-cc-opt=\u0026#39;-O2 -I/usr/local/include -I/usr/local/opt/pcre/include -I/usr/local/opt/openresty-openssl/include\u0026#39; --add-module=../ngx_devel_kit-0.3.0 --add-module=../echo-nginx-module-0.61 --add-module=../xss-nginx-module-0.05 --add-module=../ngx_coolkit-0.2rc3 --add-module=../set-misc-nginx-module-0.31 --add-module=../form-input-nginx-module-0.12 --add-module=../encrypted-session-nginx-module-0.07 --add-module=../srcache-nginx-module-0.31 --add-module=../ngx_lua-0.10.11 --add-module=../ngx_lua_upstream-0.07 --add-module=../headers-more-nginx-module-0.33 --add-module=../array-var-nginx-module-0.05 --add-module=../memc-nginx-module-0.18 --add-module=../redis2-nginx-module-0.14 --add-moduexport JAVA_HOME=$(/usr/libexec/java_home)\nle=../redis-nginx-module-0.3.7 --add-module=../ngx_stream_lua-0.0.3 --with-ld-opt=\u0026#39;-Wl,-rpath,/usr/local/Cellar/openresty/1.13.6.1/luajit/lib -L/usr/local/lib -L/usr/local/opt/pcre/lib -L/usr/local/opt/openresty-openssl/lib\u0026#39; --pid-path=/usr/local/var/run/openresty.pid --lock-path=/usr/local/var/run/openresty.lock --conf-path=/usr/local/etc/openresty/nginx.conf --http-log-path=/usr/local/var/log/nginx/access.log --error-log-path=/usr/local/var/log/nginx/error.log --with-pcre-jit --with-ipv6 --with-stream --with-stream_ssl_module --with-http_v2_module --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --with-http_stub_status_module --with-http_realip_module --with-http_addition_module --with-http_auth_request_module --with-http_secure_link_module --with-http_random_index_module --with-http_geoip_module --with-http_gzip_static_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-threads --with-dtrace-probes --with-stream --with-stream_ssl_module --with-http_ssl_module\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e安装 luarocks\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewget https://luarocks.org/releases/luarocks-2.4.3.tar.gz\ntar zxpf luarocks-2.4.3.tar.gz\ncd luarocks-2.4.3\n./configure --prefix=/usr/local/luarocks-2.4.3 --with-lua=/usr/local/Cellar/openresty/1.13.6.1/luajit --lua-suffix=\u0026#34;jit\u0026#34; --with-lua-include=/usr/local/Cellar/openresty/1.13.6.1/luajit/include/luajit-2.1\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e使用 luarocks 安装 lua-iconv 模块\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eluarocks install lua-iconv\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e打印 hello world\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ mkdir ~/openresty-test ~/openresty-test/logs/ ~/openresty-test/conf/\n$\n$ tree ~/openresty-test\n/Users/yuansheng/openresty-test\n├── conf\n└── logs\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在 conf 目录下创建一个名为 nginx.conf 的配置文件：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# use root;\nworker_processes  1;        #nginx worker 数量\nerror_log logs/error.log;   #指定错误日志文件路径\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    server {\n        #监听端口，若你的6699端口已经被占用，则需要修改\n        listen 6699;\n        location / {\n            default_type text/html;\n\n            content_by_lua_block {\n                ngx.say(\u0026#34;HelloWorld\u0026#34;)\n            }\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果出错就去 logs 目录看下 error.log 文件。如果是文件权限问题就在 nginx.conf 中加上\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003euser root;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e或修改文件/目录第所属组：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo chown -R www:www /data/app/ald_log/logs\nsudo chown -R www:www proxy_temp\n......\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们要把 nginx 接收到的日志转换为 json 格式, 修改我们的 nginx 配置文件：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003euser root;\nworker_processes  1;\nerror_log logs/error.log;\nevents {\n    worker_connections 1024;\n}\nhttp {\n    server {\n        listen 8080;\n        location / {\n            default_type text/html;\n\n            content_by_lua_block {\n                ngx.say(\u0026#34;Young For Raku\u0026#34;)\n            }\n\n        }\n\n        location /d.html {\n            default_type \u0026#39;text/plain\u0026#39;;\n            content_by_lua_file html/get_to_json.lua;\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e开启 nginx :\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# sudo nginx -p ~/openresty-test\nsudo nginx -p `pwd`/ -c conf/nginx.conf\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"http://upload-images.jianshu.io/upload_images/326727-826e89d446dc59b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"nginx.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://upload-images.jianshu.io/upload_images/326727-4705a36236b5a8dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"html.png\"\u003e\u003c/p\u003e\n\u003cp\u003e然后 ：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecurl  http://localhost:8080\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果正常， 会打印 \u003ccode\u003eYoung For Raku\u003c/code\u003e 这句话。同时\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003etail -f /data/app/ald_log/logs/json_log.log\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e会看到转换出来的 json 日志， 如果出错了， 把 iconv.so  文件拷贝到 openresty 相关目录：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecp /usr/local/luarocks-2.4.3/lib/lua/5.1/iconv.so /usr/local/Cellar/openresty/1.13.6.1/luajit/lib/lua/5.1/\ncp /usr/local/luarocks-2.4.3/lib/lua/5.1/iconv.so ./conf\ncp /usr/local/luarocks-2.4.3/lib/lua/5.1/iconv.so /usr/local/lib/lua/5.1/\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enginx: [emerg] getgrnam(\u0026#34;root\u0026#34;) failed in /usr/local/nginx/conf/nginx.conf:1\n\n加user root owner;\n\n重启\n\nnginx -c /usr/local/nginx/conf/nginx.conf\n\n成功运行\n\n当然你也可以将项目文件夹权限提升\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttp://127.0.0.1:8088/d.html?ak=1b25933fd0123c8bdb3c7b175accb41c\u0026amp;wsr=%7B%22scene%22%3A1089%2C%22path%22%3A%22pages%2Findex%2Findex%22%2C%22query%22%3A%7B%7D%7D\u0026amp;uu=15164276248163540744\u0026amp;at=15168851992628554707\u0026amp;st=1516885201936\u0026amp;tp=ald_pulldownrefresh\u0026amp;ev=event\u0026amp;nt=wifi\u0026amp;pm=iPhone%206s%3CiPhone8%2C1%3E\u0026amp;pr=2\u0026amp;ww=375\u0026amp;wh=603\u0026amp;lang=zh_CN\u0026amp;wv=6.6.1\u0026amp;lat=undefined\u0026amp;lng=undefined\u0026amp;spd=undefined\u0026amp;v=5.4.1\u0026amp;ct=1\u0026amp;sr=34a19c3fbbb51f46\u0026amp;rq_c=10\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eget_to_json.lua:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003elocal uri_args = ngx.req.get_uri_args()\nlocal dkjson = require \u0026#34;cjson\u0026#34;\nlocal iconv = require(\u0026#34;iconv\u0026#34;)\nlocal page_json = { }\n\nfunction mylog(msg)\n\tlocal file, err = io.open(\u0026#34;/data/app/ald_log/logs/json_log.log\u0026#34;,\u0026#34;aw+\u0026#34;)\n\tif file == nil then\n\t\tngx.say(err)\n\telse\n        \tfile:write (msg..\u0026#39;\\n\u0026#39;)\n        \tfile:flush();\n        \tfile:close();\n\tend\nend\n\nfunction get_client_ip()\n    local headers=ngx.req.get_headers()\n    local ip=headers[\u0026#34;X-REAL-IP\u0026#34;] or headers[\u0026#34;X_FORWARDED_FOR\u0026#34;] or ngx.var.remote_addr or \u0026#34;0.0.0.0\u0026#34;\n    return ip\nend\n\nfunction Split(szFullString, szSeparator)\n\tlocal nFindStartIndex = 1\n\tlocal nSplitIndex = 1\n\tlocal nSplitArray = {}\n\twhile true do\n\t\tlocal nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)\n\tif not nFindLastIndex then\n\t\tnSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))\n\tbreak\n\tend\n\tnSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)\n\t\tnFindStartIndex = nFindLastIndex + string.len(szSeparator)\n\tnSplitIndex = nSplitIndex + 1\n\tend\n\treturn nSplitArray\n\tend\n\n\nif uri_args then\n\t for key, val in pairs(uri_args) do\n\t\t\tif key == \u0026#39;ag\u0026#39; then\n\t\t\t\tfor k, v in pairs(dkjson.decode(val)) do\n\t\t\t\t\tpage_json[\u0026#34;ag_\u0026#34;..string.lower(k)] = v\n\t\t\t\tend\n\t\t\tend\n\t\t\tif  key == \u0026#39;wsr\u0026#39; then\n\t\t\t\tif val ~= \u0026#39;undefined\u0026#39; then\n\t\t\t\t\tfor k, v in pairs(dkjson.decode(val)) do\n\t\t\t\t\t\tif k == \u0026#39;query\u0026#39; then\n\t\t\t\t\t\t\tif type(v) == \u0026#39;table\u0026#39; then\n\t\t\t\t\t\t\t\tfor qk, qv in pairs(v) do\n\t\t\t\t\t\t\t\t\tpage_json[\u0026#34;wsr_query_\u0026#34;..string.lower(qk)] = qv\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tpage_json[\u0026#34;wsr_query_\u0026#34;] = v \n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tend\n\n\t\t\t\t\t\tend\n\t\t\t\t\t\tpage_json[string.lower(k)] = v\n\t\t\t\t\tend\n\t\t\t\t\tpage_json[string.lower(key)] = dkjson.decode(val)\n\t\t\t\tend\n\t\t\n\t\t\tend\n\t\t\tif  key == \u0026#39;ct\u0026#39; then\n\t\t\t    if pcall(dkjson.decode,val) then\n \t       \t\t\tif  type(dkjson.decode(val)) == \u0026#34;table\u0026#34; then --处理字典\n                \t\t\tfor k, v in pairs(dkjson.decode(val)) do\n                \t\t\t\tpage_json[\u0026#34;ct_\u0026#34;..k] = v\n                \t\t\tend\n    \t\t\t\t\tpage_json[string.lower(key)] = val --保留原ct的json\n        \t\t\telse\n                \t\t\tpage_json[string.lower(key)] = val --处理数值类型\n        \t\t\tend\n    \t\t\t   else\n        \t\t\tpage_json[string.lower(key)] = val -- 处理字符串类型\n    \t\t\t   end\n\t\t\telse\n    \t\t\t\tpage_json[string.lower(key)] = val\n\t\t\tend\n\n               \t\t\t\n\tend\nend\nfunction getUserAgentByKey(key)\n\tlocal h = ngx.req.get_headers()\n\tlocal lists = Split(h[\u0026#39;user-agent\u0026#39;], \u0026#34; \u0026#34;)\n\n\tfor k,v in pairs(lists) do\n\t\tif string.find(v,key) then \n\t\t \treturn string.lower(string.gsub(v, key..\u0026#34;/\u0026#34;, \u0026#34;\u0026#34;))\n\t\tend\n\tend\n\treturn false\nend\n\npage_json[\u0026#39;server_time\u0026#39;] = ngx.now()\n\n-- local t = io.popen(\u0026#39;/data/app/ald_log/www/ip/main \u0026#39;..get_client_ip())\n-- local ail = t:read(\u0026#34;*all\u0026#34;)\n-- if ail ~= nil then\n-- \tlocal list = Split(ail, \u0026#34;\\t\u0026#34;)\n-- \tpage_json[\u0026#39;country\u0026#39;] = list[1]\n-- \tpage_json[\u0026#39;province\u0026#39;] = list[2]\n-- \tpage_json[\u0026#39;city\u0026#39;] = list[3]\n-- \tif page_json[\u0026#39;city\u0026#39;] == nil then\n-- \t   page_json[\u0026#39;city\u0026#39;] = list[2]\n\t\t\n-- \tend\n-- else\n\t\n-- \tpage_json[\u0026#39;country\u0026#39;] = \u0026#39;\u0026#39; \n-- \tpage_json[\u0026#39;province\u0026#39;] = \u0026#39;\u0026#39;\n-- \tpage_json[\u0026#39;city\u0026#39;] = \u0026#39;\u0026#39;\n-- end\n\nif page_json[\u0026#39;nt\u0026#39;] == nil or page_json[\u0026#39;nt\u0026#39;] == \u0026#39;undefined\u0026#39; then\npage_json[\u0026#39;nt\u0026#39;] = getUserAgentByKey(\u0026#39;NetType\u0026#39;)\n\nend\npage_json[\u0026#39;client_ip\u0026#39;] = get_client_ip()\npage_json[\u0026#39;lua_wechat_version\u0026#39;] = getUserAgentByKey(\u0026#39;MicroMessenger\u0026#39;)\nmylog(dkjson.encode(page_json))\n\u003c/code\u003e\u003c/pre\u003e","text":"# 启动 zookeeper ~/opt/zookeeper-3.4.10/bin/zkServer.sh start # 创建 topic ~/opt/kafka_2.11-0.11.0.1/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 3 --topic ohmyfish # 创建生产者 ~/opt/kafka_2.11-0.11.0.1/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic ohmyfish 安装 openresty brew install openresty/brew/openresty 安装的路径应该在:\n/usr/local/Cellar/openresty/1.13.6.1/nginx/sbin/ 需要把这个路径添加到 PATH 路径中.\n然后用 nginx -V 查看 nginx 是否正常:\nnginx version: openresty/1.13.6.1 built by clang 9.0.0 (clang-900.0.39.2) built with OpenSSL 1.0.2k 26 Jan 2017 TLS SNI support enabled configure arguments: --prefix=/usr/local/Cellar/openresty/1.13.6.1/nginx --with-cc-opt=\u0026#39;-O2 -I/usr/local/include -I/usr/local/opt/pcre/include -I/usr/local/opt/openresty-openssl/include\u0026#39; --add-module=../ngx_devel_kit-0.3.0 --add-module=../echo-nginx-module-0.61 --add-module=../xss-nginx-module-0.05 --add-module=../ngx_coolkit-0.2rc3 --add-module=../set-misc-nginx-module-0.31 --add-module=../form-input-nginx-module-0.12 --add-module=../encrypted-session-nginx-module-0.07 --add-module=../srcache-nginx-module-0.31 --add-module=../ngx_lua-0.10.11 --add-module=../ngx_lua_upstream-0.07 --add-module=../headers-more-nginx-module-0.33 --add-module=../array-var-nginx-module-0.05 --add-module=../memc-nginx-module-0.18 --add-module=../redis2-nginx-module-0.14 --add-moduexport JAVA_HOME=$(/usr/libexec/java_home) le=../redis-nginx-module-0.3.7 --add-module=../ngx_stream_lua-0.0.3 --with-ld-opt=\u0026#39;-Wl,-rpath,/usr/local/Cellar/openresty/1.13.6.1/luajit/lib -L/usr/local/lib -L/usr/local/opt/pcre/lib -L/usr/local/opt/openresty-openssl/lib\u0026#39; --pid-path=/usr/local/var/run/openresty.pid --lock-path=/usr/local/var/run/openresty.lock --conf-path=/usr/local/etc/openresty/nginx.conf --http-log-path=/usr/local/var/log/nginx/access.log --error-log-path=/usr/local/var/log/nginx/error.log --with-pcre-jit --with-ipv6 --with-stream --with-stream_ssl_module --with-http_v2_module --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --with-http_stub_status_module --with-http_realip_module --with-http_addition_module --with-http_auth_request_module --with-http_secure_link_module --with-http_random_index_module --with-http_geoip_module --with-http_gzip_static_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-threads --with-dtrace-probes --with-stream --with-stream_ssl_module --with-http_ssl_module 安装 luarocks wget https://luarocks.org/releases/luarocks-2.4.3.tar.gz tar zxpf luarocks-2.4.3.tar.gz cd luarocks-2.4.3 ./configure --prefix=/usr/local/luarocks-2.4.3 --with-lua=/usr/local/Cellar/openresty/1.13.6.1/luajit --lua-suffix=\u0026#34;jit\u0026#34; --with-lua-include=/usr/local/Cellar/openresty/1.13.6.1/luajit/include/luajit-2.1 使用 luarocks 安装 lua-iconv 模块 luarocks install lua-iconv 打印 hello world $ mkdir ~/openresty-test ~/openresty-test/logs/ ~/openresty-test/conf/ $ $ tree ~/openresty-test /Users/yuansheng/openresty-test ├── conf └── logs 在 conf 目录下创建一个名为 nginx.conf 的配置文件：\n# use root; worker_processes 1; #nginx worker 数量 error_log logs/error.log; #指定错误日志文件路径 events { worker_connections 1024; } http { server { #监听端口，若你的6699端口已经被占用，则需要修改 listen 6699; location / { default_type text/html; content_by_lua_block { ngx.say(\u0026#34;HelloWorld\u0026#34;) } } } } 如果出错就去 logs 目录看下 error.log 文件。如果是文件权限问题就在 nginx.conf 中加上\nuser root; 或修改文件/目录第所属组：\nsudo chown -R www:www /data/app/ald_log/logs sudo chown -R www:www proxy_temp ...... 我们要把 nginx 接收到的日志转换为 json 格式, 修改我们的 nginx 配置文件：\nuser root; worker_processes 1; error_log logs/error.log; events { worker_connections 1024; } http { server { listen 8080; location / { default_type text/html; content_by_lua_block { ngx.say(\u0026#34;Young For Raku\u0026#34;) } } location /d.html { default_type \u0026#39;text/plain\u0026#39;; content_by_lua_file html/get_to_json.lua; } } } 开启 nginx :\n# sudo nginx -p ~/openresty-test sudo nginx -p `pwd`/ -c conf/nginx.conf 然后 ：\ncurl http://localhost:8080 如果正常， 会打印 Young For Raku 这句话。同时\ntail -f /data/app/ald_log/logs/json_log.log 会看到转换出来的 json 日志， 如果出错了， 把 iconv.so 文件拷贝到 openresty 相关目录：\ncp /usr/local/luarocks-2.4.3/lib/lua/5.1/iconv.so /usr/local/Cellar/openresty/1.13.6.1/luajit/lib/lua/5.1/ cp /usr/local/luarocks-2.4.3/lib/lua/5.1/iconv.so ./conf cp /usr/local/luarocks-2.4.3/lib/lua/5.1/iconv.so /usr/local/lib/lua/5.1/ nginx: [emerg] getgrnam(\u0026#34;root\u0026#34;) failed in /usr/local/nginx/conf/nginx.conf:1 加user root owner; 重启 nginx -c /usr/local/nginx/conf/nginx.conf 成功运行 当然你也可以将项目文件夹权限提升 http://127.0.0.1:8088/d.html?ak=1b25933fd0123c8bdb3c7b175accb41c\u0026amp;wsr=%7B%22scene%22%3A1089%2C%22path%22%3A%22pages%2Findex%2Findex%22%2C%22query%22%3A%7B%7D%7D\u0026amp;uu=15164276248163540744\u0026amp;at=15168851992628554707\u0026amp;st=1516885201936\u0026amp;tp=ald_pulldownrefresh\u0026amp;ev=event\u0026amp;nt=wifi\u0026amp;pm=iPhone%206s%3CiPhone8%2C1%3E\u0026amp;pr=2\u0026amp;ww=375\u0026amp;wh=603\u0026amp;lang=zh_CN\u0026amp;wv=6.6.1\u0026amp;lat=undefined\u0026amp;lng=undefined\u0026amp;spd=undefined\u0026amp;v=5.4.1\u0026amp;ct=1\u0026amp;sr=34a19c3fbbb51f46\u0026amp;rq_c=10 get_to_json.lua:\nlocal uri_args = ngx.req.get_uri_args() local dkjson = require \u0026#34;cjson\u0026#34; local iconv = require(\u0026#34;iconv\u0026#34;) local page_json = { } function mylog(msg) local file, err = io.open(\u0026#34;/data/app/ald_log/logs/json_log.log\u0026#34;,\u0026#34;aw+\u0026#34;) if file == nil then ngx.say(err) else file:write (msg..\u0026#39;\\n\u0026#39;) file:flush(); file:close(); end end function get_client_ip() local headers=ngx.req.get_headers() local ip=headers[\u0026#34;X-REAL-IP\u0026#34;] or headers[\u0026#34;X_FORWARDED_FOR\u0026#34;] or ngx.var.remote_addr or \u0026#34;0.0.0.0\u0026#34; return ip end function Split(szFullString, szSeparator) local nFindStartIndex = 1 local nSplitIndex = 1 local nSplitArray = {} while true do local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex) if not nFindLastIndex then nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString)) break end nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1) nFindStartIndex = nFindLastIndex + string.len(szSeparator) nSplitIndex = nSplitIndex + 1 end return nSplitArray end if uri_args then for key, val in pairs(uri_args) do if key == \u0026#39;ag\u0026#39; then for k, v in pairs(dkjson.decode(val)) do page_json[\u0026#34;ag_\u0026#34;..string.lower(k)] = v end end if key == \u0026#39;wsr\u0026#39; then if val ~= \u0026#39;undefined\u0026#39; then for k, v in pairs(dkjson.decode(val)) do if k == \u0026#39;query\u0026#39; then if type(v) == \u0026#39;table\u0026#39; then for qk, qv in pairs(v) do page_json[\u0026#34;wsr_query_\u0026#34;..string.lower(qk)] = qv end else page_json[\u0026#34;wsr_query_\u0026#34;] = v end end page_json[string.lower(k)] = v end page_json[string.lower(key)] = dkjson.decode(val) end end if key == \u0026#39;ct\u0026#39; then if pcall(dkjson.decode,val) then if type(dkjson.decode(val)) == \u0026#34;table\u0026#34; then --处理字典 for k, v in pairs(dkjson.decode(val)) do page_json[\u0026#34;ct_\u0026#34;..k] = v end page_json[string.lower(key)] = val --保留原ct的json else page_json[string.lower(key)] = val --处理数值类型 end else page_json[string.lower(key)] = val -- 处理字符串类型 end else page_json[string.lower(key)] = val end end end function getUserAgentByKey(key) local h = ngx.req.get_headers() local lists = Split(h[\u0026#39;user-agent\u0026#39;], \u0026#34; \u0026#34;) for k,v in pairs(lists) do if string.find(v,key) then return string.lower(string.gsub(v, key..\u0026#34;/\u0026#34;, \u0026#34;\u0026#34;)) end end return false end page_json[\u0026#39;server_time\u0026#39;] = ngx.now() -- local t = io.popen(\u0026#39;/data/app/ald_log/www/ip/main \u0026#39;..get_client_ip()) -- local ail = t:read(\u0026#34;*all\u0026#34;) -- if ail ~= nil then -- local list = Split(ail, \u0026#34;\\t\u0026#34;) -- page_json[\u0026#39;country\u0026#39;] = list[1] -- page_json[\u0026#39;province\u0026#39;] = list[2] -- page_json[\u0026#39;city\u0026#39;] = list[3] -- if page_json[\u0026#39;city\u0026#39;] == nil then -- page_json[\u0026#39;city\u0026#39;] = list[2] -- end -- else -- page_json[\u0026#39;country\u0026#39;] = \u0026#39;\u0026#39; -- page_json[\u0026#39;province\u0026#39;] = \u0026#39;\u0026#39; -- page_json[\u0026#39;city\u0026#39;] = \u0026#39;\u0026#39; -- end if page_json[\u0026#39;nt\u0026#39;] == nil or page_json[\u0026#39;nt\u0026#39;] == \u0026#39;undefined\u0026#39; then page_json[\u0026#39;nt\u0026#39;] = getUserAgentByKey(\u0026#39;NetType\u0026#39;) end page_json[\u0026#39;client_ip\u0026#39;] = get_client_ip() page_json[\u0026#39;lua_wechat_version\u0026#39;] = getUserAgentByKey(\u0026#39;MicroMessenger\u0026#39;) mylog(dkjson.encode(page_json)) "},"name":"搭建本地 Kafka 测试环境","published":"2017-04-09T16:36:25Z","summary":"Kafka Test Environment","type":"entry","url":"https://ohmyweekly.github.io/notes/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0-kafka-%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/"}