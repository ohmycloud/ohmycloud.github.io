{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"content":{"html":"\u003cp\u003e除了 q 和 qq 之外，现在还有一种基本形式的 Q，它不会进行插值，除非显式地修改它那样做。所以，q 实际上是 Q:q 的简称，qq 实际上是 \u003ccode\u003eQ:qq\u003c/code\u003e 的简称。实际上所有的 quote-like 形式都派生自带有副词的 Q 形式：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/raku/roast/blob/master/S02-literals/quoting.t#L95-L116\"\u003eS02-literals/quoting.t lines 95–116\u003c/a\u003e\n\u003ca href=\"https://github.com/raku/roast/blob/master/S02-literals/quoting.t#L132-L139\"\u003eS02-literals/quoting.t lines 132–139\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eq//         Q :q //\nqq//        Q :qq //\nrx//        Q :regex //\ns///        Q :subst ///\ntr///       Q :trans ///\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e诸如 \u003ccode\u003e:regex\u003c/code\u003e 的副词通过转换到不同的解析器改变了语言的解析。这能完全改变任何之后的副词还有所引起的东西自身的解释。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003eq\u003c/span\u003e\u003cspan class=\"sa\"\u003e:s\u003c/span\u003e\u003cspan class=\"p\"\u003e//\u003c/span\u003e\u003cspan class=\"s\"\u003e       Q :q :scalar \u003c/span\u003e\n\u003cspan class=\"k\"\u003erx\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"na\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e//\u003c/span\u003e\u003cspan class=\"sr\"\u003e      Q \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"na\"\u003eregex\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"na\"\u003escalar\u003c/span\u003e\u003cspan class=\"sr\"\u003e //\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e就像 \u003ccode\u003eq[...]\u003c/code\u003e 拥有简写形式的 \u0026lsquo;\u0026hellip;\u0026rsquo;, 并且 \u003ccode\u003eqq[...]\u003c/code\u003e 拥有简写形式的 \u0026ldquo;\u0026hellip;\u0026rdquo; 一样，完整的 \u003ccode\u003eQ[...]\u003c/code\u003e 引用也有一种使用半角括号 ｢\u0026hellip;｣ 的短形式。\u003c/p\u003e\n\u003ch2 id=\"引号上的副词\"\u003e引号上的副词\u003c/h2\u003e\n\u003cp\u003e广义上的引号现在可以接收副词了：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/raku/roast/blob/master/S02-literals/quoting.t#L210-L223\"\u003eS02-literals/quoting.t lines 210–223\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/raku/roast/blob/master/S02-literals/quoting.t#L55-L69\"\u003eS02-literals/quoting.t lines 55–69\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/raku/roast/blob/master/S02-literals/quoting.t#L427-L501\"\u003eS02-literals/quoting.t lines 427–501\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eShort       Long            Meaning\n=====       ====            =======\n:x          :exec           作为命令执行并返回结果\n:w          :words          按单词分割结果(没有引号保护)\n\n\n:ww         :quotewords     按单词分割结果 (带有引号保护)\n:v          :val            Evaluate word or words for value literals\n:q          :single         插值 \\\\, \\q 和 \\' (or whatever)\n\n\n:qq         :double         使用 :s, :a, :h, :f, :c, :b 进行插值\n:s          :scalar         插值 $ vars\n:a          :array          插值 @ vars\n:h          :hash           插值 % vars\n\n\n:f          :function       插值 \u0026amp; 调用\n:c          :closure        插值 {...} 表达式\n:b          :backslash      插值 \\n, \\t, 等. (至少暗示了 :q )\n:to         :heredoc        把结果解析为 heredoc 终止符\n            :regex          解析为正则表达式\n            :subst          解析为置换 (substitution)\n            :trans          解析为转换 (transliteration)\n            :code           Quasiquoting\n:p          :path           返回一个 Path 对象 (查看 S16 获取更多选项)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过在开头加入一个带有短形式的单个副词的 Q，q，或 qq，你可以省略掉第一个冒号，这产生了如下形式：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"k\"\u003eq\u003c/span\u003e\u003cspan class=\"sa\"\u003ew\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"s\"\u003ea b c\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                         \u003cspan class=\"c1\"\u003e# P5-esque qw// meaning q:w\u003c/span\u003e\n\u003cspan class=\"k\"\u003eQ\u003c/span\u003e\u003cspan class=\"sa\"\u003ec\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                    \u003cspan class=\"c1\"\u003e# Q:c//, interpolate only closures\u003c/span\u003e\n\u003cspan class=\"k\"\u003eqq\u003c/span\u003e\u003cspan class=\"sa\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"nv\"\u003e$cmd\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e@args\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e                   \u003cspan class=\"c1\"\u003e# equivalent to P5\u0026#39;s qx//\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e(注意 \u003ccode\u003eqx//\u003c/code\u003e 不插值)\u003c/p\u003e\n\u003cp\u003e如果你想进一步缩写，那么定义一个宏：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"n\"\u003emacro\u003c/span\u003e \u003cspan class=\"k\"\u003eq\u003c/span\u003e\u003cspan class=\"sa\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e \u0026#39;qq:x \u0026#39; \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# equivalent to P5\u0026#39;s qx//\u003c/span\u003e\n\u003cspan class=\"n\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003eqTO\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eqq❌w:to \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# qq❌w:to//\u003c/span\u003e\n\u003cspan class=\"nf\"\u003emacro\u003c/span\u003e \u003cspan class=\"n\"\u003equote:\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e❰ ❱\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$text\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003equasi\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e{{{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$text\u003c/span\u003e\u003cspan class=\"p\"\u003e}}}\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003equoteharder\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所有大写的副词被保留用作用户定义的引号。所有在 Latin-1 上面的 Unicode 分隔符被保留用作用户定义的引号。\n\u003ca href=\"https://github.com/raku/roast/blob/master/S02-literals/quoting.t#L352-L426\"\u003eS02-literals/quoting.t lines 352–426\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e关于上面我们现在有了一个推论，我们现在能说：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nv\"\u003e%hash\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003eq\u003c/span\u003e\u003cspan class=\"sa\"\u003ew:c\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"s\"\u003ea b c d \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e@array\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e%hash\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"nv\"\u003e%hash\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003eqq\u003c/span\u003e\u003cspan class=\"sa\"\u003e:w\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"s2\"\u003ea b c d \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e@array\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e%hash\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把东西(items)插值到 qw 中。默认地，数组和散列在插值时只带有空格分隔符，所以之后的按空格分割仍旧能工作。（但是内置的  «\u0026hellip;»  引号自动进行了等价于 \u003ccode\u003eqq:ww:v/.../\u003c/code\u003e 的插值）。 内置的 \u003ccode\u003e\u0026lt;...\u0026gt;\u003c/code\u003e 等价于 \u003ccode\u003eq:w:v/.../\u003c/code\u003e。\u003c/p\u003e\n","text":"除了 q 和 qq 之外，现在还有一种基本形式的 Q，它不会进行插值，除非显式地修改它那样做。所以，q 实际上是 Q:q 的简称，qq 实际上是 Q:qq 的简称。实际上所有的 quote-like 形式都派生自带有副词的 Q 形式：\nS02-literals/quoting.t lines 95–116 S02-literals/quoting.t lines 132–139\nq// Q :q // qq// Q :qq // rx// Q :regex // s/// Q :subst /// tr/// Q :trans /// 诸如 :regex 的副词通过转换到不同的解析器改变了语言的解析。这能完全改变任何之后的副词还有所引起的东西自身的解释。\nq:s//Q :q :scalar  rx:s//Q :regex:scalar// 就像 q[...] 拥有简写形式的 \u0026lsquo;\u0026hellip;\u0026rsquo;, 并且 qq[...] 拥有简写形式的 \u0026ldquo;\u0026hellip;\u0026rdquo; 一样，完整的 Q[...] 引用也有一种使用半角括号 ｢\u0026hellip;｣ 的短形式。\n引号上的副词 广义上的引号现在可以接收副词了：\n S02-literals/quoting.t lines 210–223 S02-literals/quoting.t lines 55–69 S02-literals/quoting.t lines 427–501  Short Long Meaning ===== ==== ======= :x :exec 作为命令执行并返回结果 :w :words 按单词分割结果(没有引号保护) :ww :quotewords 按单词分割结果 (带有引号保护) :v :val Evaluate word or words for value literals :q :single 插值 \\\\, \\q 和 \\' (or whatever) :qq :double 使用 :s, :a, :h, :f, :c, :b 进行插值 :s :scalar 插值 $ vars :a :array 插值 @ vars :h :hash 插值 % vars :f :function 插值 \u0026amp; 调用 :c :closure 插值 {...} 表达式 :b :backslash 插值 \\n, \\t, 等. (至少暗示了 :q ) :to :heredoc 把结果解析为 heredoc 终止符 :regex 解析为正则表达式 :subst 解析为置换 (substitution) :trans 解析为转换 (transliteration) :code Quasiquoting :p :path 返回一个 Path 对象 (查看 S16 获取更多选项) 通过在开头加入一个带有短形式的单个副词的 Q，q，或 qq，你可以省略掉第一个冒号，这产生了如下形式：\nqw /a b c; # P5-esque qw// meaning q:w Qc \u0026#39;...{$x}...; # Q:c//, interpolate only closures qqx/$cmd@args[] # equivalent to P5\u0026#39;s qx// (注意 qx// 不插值)\n如果你想进一步缩写，那么定义一个宏：\nmacro qx {\u0026#39;qq:x \u0026#39; } # equivalent to P5\u0026#39;s qx// macro qTO { \u0026#39;qq❌w:to \u0026#39; } # qq❌w:to// macro quote:\u0026lt;❰ ❱\u0026gt; ($text) { quasi { {{{$text}}}.quoteharder } } 所有大写的副词被保留用作用户定义的引号。所有在 Latin-1 上面的 Unicode 分隔符被保留用作用户定义的引号。 S02-literals/quoting.t lines 352–426\n关于上面我们现在有了一个推论，我们现在能说：\n%hash = qw:c/a b c d {@array}{%hash}; 或：\n%hash = qq:w/a b c d {@array}{%hash}; 把东西(items)插值到 qw 中。默认地，数组和散列在插值时只带有空格分隔符，所以之后的按空格分割仍旧能工作。（但是内置的 «\u0026hellip;» 引号自动进行了等价于 qq:ww:v/.../ 的插值）。 内置的 \u0026lt;...\u0026gt; 等价于 q:w:v/.../。\n"},"name":"Raku 中的引号","published":"2021-07-11T00:00:00+08:00","summary":"Quote in Raku","type":"entry","url":"https://ohmyweekly.github.io/notes/2015-08-24-quote-in-raku/"}