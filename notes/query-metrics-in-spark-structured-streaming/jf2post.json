{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003cp\u003e长查询的重点之一是跟踪。知道查询的执行方式总是很重要的。在结构化流中，由于有了称为 ProgressReporter 的特殊对象，我们可以追踪此执行。\u003c/p\u003e\n\u003cp\u003e在本文中，我们将重点介绍 ProgressReporter 对象收集的指标。在第一部分中，我们将解释其生命周期以及一些实现细节。下一部分将涵盖公开的信息，而最后一部分将通过一些测试展示 ProgressReporter 的行为。\u003c/p\u003e\n\u003ch2 id=\"progressreporter\"\u003eProgressReporter\u003c/h2\u003e\n\u003cp\u003e首先，让我们定义这个著名的 ProgressReporter。它是 org.apache.spark.sql.execution.streaming 中的一个  trait，由 StreamExecution 抽象类直接继承，因此由其实现间接继承：org.apache.spark.sql.execution.streaming.continuous.ContinuousExecution 和 org.apache.spark.sql.execution.streaming.MicroBatchExecution。 ProgressReporter 的作用是提供一个接口，该接口一旦实现，便可以自由用于报告有关流查询执行情况的统计信息。\u003c/p\u003e\n\u003cp\u003eProgressReporter 定义了严格的生命周期阶段：\u003c/p\u003e\n\u003cp\u003e1、一切开始于流查询触发器（处理时间或事件时间）执行时。触发器要做的第一件事是对 ProgressReporter 的 \u003ccode\u003estartTrigger\u003c/code\u003e 方法的调用。此方法使报告程序准备好累积刚刚开始执行的统计信息。\u003c/p\u003e\n\u003cp\u003e2、稍后，根据选择的流模式（微批或连续），报告器将记录有关几个不同步骤执行情况的统计信息。下一部分将详细介绍这些步骤。为此，它使用了方法 \u003ccode\u003ereportTimeTaken[T](triggerDetailKey: String)(body: =\u0026gt; T)，该方法将有关执行这些步骤的度量添加到 \u003c/code\u003ecurrentDurationsMs: mutable.HashMap[String，Long]` 字段中。\u003c/p\u003e\n\u003cp\u003e3、下一步是数据处理，报告者还将收集一些统计信息。\u003c/p\u003e\n\u003cp\u003e4、将这些统计信息添加到 \u003ccode\u003ecurrentDurationMs\u003c/code\u003e 映射后，如果执行微批处理，则 ProgressReporter 调用 \u003ccode\u003efinishTrigger(hasNewData: Boolean)\u003c/code\u003e。此方法完成触发器的执行，并创建保存执行统计信息的对象，这些统计信息放入 \u003ccode\u003eprogressBuffer = new mutable.Queue[StreamingQueryProgress]()\u003c/code\u003e 中。之后，客户端可以通过公共访问器方法直接从那里检索更新（或最后一个更新）。\u003c/p\u003e\n\u003cp\u003e在 ProgressReporter 中，我们还可以找到其他一些指标，例如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003enewData - 它是一个 \u003ccode\u003eMap[BaseStreamingSource, LogicalPlan]\u003c/code\u003e，其中包含每个源的最新数据。\u003c/li\u003e\n\u003cli\u003eavailableOffsets - 这是一个类似于 map 的 \u003ccode\u003eStreamProgress\u003c/code\u003e 对象，用于存储未提交到接收器的可用于处理的偏移量。\u003c/li\u003e\n\u003cli\u003ecommitOffsets - 类似于 availableOffset。不同之处在于，它存储已处理和已提交数据的偏移量。\u003c/li\u003e\n\u003cli\u003ecurrentBatchId - 当前处理批次的 ID。\u003c/li\u003e\n\u003cli\u003ecurrentStatus - org.apache.spark.sql.streaming.StreamingQueryStatus 的实例，暴露查询的当前状态。它将信息公开为数据可用性或触发器活动标志。\u003c/li\u003e\n\u003cli\u003ewatermarkMsMap - 它不存在于 ProgressReporter trait 中，但值得一提，因为它由 StreamExecution 使用。此字段是一个 map（MutableMap[Int，Long])，其中的键表示物理计划中的运算符，并且值是以毫秒为单位的新水位。此 map 最后用于更新全局水位：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"o\"\u003e(!\u003c/span\u003e\u003cspan class=\"n\"\u003ewatermarkMsMap\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003enewWatermarkMs\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ewatermarkMsMap\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eminBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e_\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_2\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003e_2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enewWatermarkMs\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebatchWatermarkMs\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elogInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003es\u0026#34;Updating eventTime watermark to: \u003c/span\u003e\u003cspan class=\"si\"\u003e$newWatermarkMs\u003c/span\u003e\u003cspan class=\"s\"\u003e ms\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ebatchWatermarkMs\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enewWatermarkMs\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003elogDebug\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"s\"\u003es\u0026#34;Event time didn\u0026#39;t move: \u003c/span\u003e\u003cspan class=\"si\"\u003e$newWatermarkMs\u003c/span\u003e\u003cspan class=\"s\"\u003e \u0026lt; \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s\"\u003es\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e$batchWatermarkMs\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003estateOperators - 通过 ProgressReporter 的 ExecutionStats case 类公开。 它们包含在度量测试期间发现的众所周知的度量：已处理的行数(numRowsTotal)，更新的行数(numRowsUpdated)和有状态操作期间使用的内存(memoryUsedBytes)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"度量指标\"\u003e度量指标\u003c/h2\u003e\n\u003cp\u003e在这一部分中，我们重点介绍使用 \u003ccode\u003ereportTimeTaken[T](triggerDetailKey: String)(body: =\u0026gt; T): T\u003c/code\u003e 度量的指标：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etriggerExecution - 报告给定触发器的执行时间，即偏移量检索，数据处理和 WAL 提交花费的时间\u003c/li\u003e\n\u003cli\u003equeryPlanning - 在这里生成执行计划\u003c/li\u003e\n\u003cli\u003egetBatch - 从可用源中检索新数据（仅微批）\u003c/li\u003e\n\u003cli\u003egetOffset - 测量用于为每个已定义源处理新数据以获取偏移量的时间\u003c/li\u003e\n\u003cli\u003ewalCommit - 测量提交新的可用偏移量所花费的时间\u003c/li\u003e\n\u003cli\u003eaddBatch - 返回将数据发送到给定接收器所花费的时间\u003c/li\u003e\n\u003cli\u003erunContunous - 它测量在连续处理模式下执行流查询所花费的时间\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其中一些指标包括其他指标。 下图显示了此嵌入：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.waitingforcode.com/public/images/articles/spark_structured_streaming_metrics_embedding.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch2 id=\"progressreporter-测试\"\u003eProgressReporter 测试\u003c/h2\u003e\n\u003cp\u003e现在，通过学习测试来研究 ProgressReporter 和其他一些先前提到的属性：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003esparkSession\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eSparkSession\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eSparkSession\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eappName\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Spark Structured Streaming progress reporter\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emaster\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;local[2]\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003egetOrCreate\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003esparkSession.sqlContext.implicits._\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\u0026#34;sample count aggregation per id\u0026#34;\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;have corresponding metricss\u0026#34;\u003c/span\u003e \u003cspan class=\"n\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003einputStream\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eMemoryStream\u003c/span\u003e\u003cspan class=\"o\"\u003e[(\u003c/span\u003e\u003cspan class=\"kt\"\u003eLong\u003c/span\u003e, \u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e)](\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esparkSession\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esqlContext\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eaggregatedStream\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einputStream\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoDS\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003etoDF\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egroupBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eagg\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003equery\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eaggregatedStream\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewriteStream\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etrigger\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eTrigger\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eProcessingTime\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\u003cspan class=\"o\"\u003e)).\u003c/span\u003e\u003cspan class=\"n\"\u003eoutputMode\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;complete\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eforeach\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eNoopForeachWriter\u003c/span\u003e\u003cspan class=\"o\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eprogress\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003escala\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecollection\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emutable\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eListBuffer\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eStreamingQueryProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e]()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eThread\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eRunnable\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eUnit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"k\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrentBatchId\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1L\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003equery\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisActive\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003einputStream\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddData\u003c/span\u003e\u003cspan class=\"o\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e),\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;B\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nc\"\u003eThread\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esleep\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003elastProgress\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003equery\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elastProgress\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrentBatchId\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003elastProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebatchId\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"n\"\u003eprogress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elastProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"n\"\u003ecurrentBatchId\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elastProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebatchId\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e}).\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003equery\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eawaitTermination\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e25000\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003efirstProgress\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprogress\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003efirstProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebatchId\u003c/span\u003e \u003cspan class=\"n\"\u003eshouldEqual\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0L\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003efirstProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estateOperators\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ehave\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003efirstProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enumInputRows\u003c/span\u003e \u003cspan class=\"n\"\u003eshouldEqual\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0L\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprogress\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebatchId\u003c/span\u003e \u003cspan class=\"n\"\u003eshouldEqual\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1L\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e// Below some metrics contained in the progress reported\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// It\u0026#39;s impossible to provide exact numbers it\u0026#39;s why the assertions are approximate\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edurationMs\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;addBatch\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003etoLong\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ebe\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e6000L\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edurationMs\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;getBatch\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003etoLong\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ebe\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000L\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edurationMs\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;queryPlanning\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003etoLong\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ebe\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000L\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edurationMs\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;triggerExecution\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003etoLong\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ebe\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e11000L\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edurationMs\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;walCommit\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003etoLong\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ebe\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e500L\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estateOperators\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003enumRowsTotal\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ebe\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10L\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estateOperators\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003enumRowsTotal\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ebe\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0L\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estateOperators\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003enumRowsTotal\u003c/span\u003e \u003cspan class=\"n\"\u003eshouldEqual\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estateOperators\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003enumRowsUpdated\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estateOperators\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003ememoryUsedBytes\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ebe\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10000L\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esources\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ehave\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esources\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003estartOffset\u003c/span\u003e \u003cspan class=\"n\"\u003eshouldEqual\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esources\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003enumInputRows\u003c/span\u003e \u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ebe\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e200L\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003esecondProgress\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edescription\u003c/span\u003e \u003cspan class=\"n\"\u003eshouldEqual\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;ForeachSink\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e追踪数据处理工作的进度是一项重要的任务，尤其是在流管道的情况下。 尽快发现任何问题，便会更早解决它们，并且可能会减少开销。 Apache Spark 结构化流提供了一个非常有助于跟踪查询性能的对象。 如第一节所示，该对象是 ProgressReporter，它包含在触发器活动中。 它不仅公开了非常常见的度量作为已处理的行数，而且还公开了更复杂的度量，例如有状态聚合中的估计已用内存，更新的行数甚至是计划查询或检索要处理的新偏移量所花费的时间。\u003c/p\u003e\n","text":"长查询的重点之一是跟踪。知道查询的执行方式总是很重要的。在结构化流中，由于有了称为 ProgressReporter 的特殊对象，我们可以追踪此执行。\n在本文中，我们将重点介绍 ProgressReporter 对象收集的指标。在第一部分中，我们将解释其生命周期以及一些实现细节。下一部分将涵盖公开的信息，而最后一部分将通过一些测试展示 ProgressReporter 的行为。\nProgressReporter 首先，让我们定义这个著名的 ProgressReporter。它是 org.apache.spark.sql.execution.streaming 中的一个 trait，由 StreamExecution 抽象类直接继承，因此由其实现间接继承：org.apache.spark.sql.execution.streaming.continuous.ContinuousExecution 和 org.apache.spark.sql.execution.streaming.MicroBatchExecution。 ProgressReporter 的作用是提供一个接口，该接口一旦实现，便可以自由用于报告有关流查询执行情况的统计信息。\nProgressReporter 定义了严格的生命周期阶段：\n1、一切开始于流查询触发器（处理时间或事件时间）执行时。触发器要做的第一件事是对 ProgressReporter 的 startTrigger 方法的调用。此方法使报告程序准备好累积刚刚开始执行的统计信息。\n2、稍后，根据选择的流模式（微批或连续），报告器将记录有关几个不同步骤执行情况的统计信息。下一部分将详细介绍这些步骤。为此，它使用了方法 reportTimeTaken[T](triggerDetailKey: String)(body: =\u0026gt; T)，该方法将有关执行这些步骤的度量添加到 currentDurationsMs: mutable.HashMap[String，Long]` 字段中。\n3、下一步是数据处理，报告者还将收集一些统计信息。\n4、将这些统计信息添加到 currentDurationMs 映射后，如果执行微批处理，则 ProgressReporter 调用 finishTrigger(hasNewData: Boolean)。此方法完成触发器的执行，并创建保存执行统计信息的对象，这些统计信息放入 progressBuffer = new mutable.Queue[StreamingQueryProgress]() 中。之后，客户端可以通过公共访问器方法直接从那里检索更新（或最后一个更新）。\n在 ProgressReporter 中，我们还可以找到其他一些指标，例如：\nnewData - 它是一个 Map[BaseStreamingSource, LogicalPlan]，其中包含每个源的最新数据。 availableOffsets - 这是一个类似于 map 的 StreamProgress 对象，用于存储未提交到接收器的可用于处理的偏移量。 commitOffsets - 类似于 availableOffset。不同之处在于，它存储已处理和已提交数据的偏移量。 currentBatchId - 当前处理批次的 ID。 currentStatus - org.apache.spark.sql.streaming.StreamingQueryStatus 的实例，暴露查询的当前状态。它将信息公开为数据可用性或触发器活动标志。 watermarkMsMap - 它不存在于 ProgressReporter trait 中，但值得一提，因为它由 StreamExecution 使用。此字段是一个 map（MutableMap[Int，Long])，其中的键表示物理计划中的运算符，并且值是以毫秒为单位的新水位。此 map 最后用于更新全局水位： if(!watermarkMsMap.isEmpty) { val newWatermarkMs = watermarkMsMap.minBy(_._2)._2 if (newWatermarkMs \u0026gt; batchWatermarkMs) { logInfo(s\u0026#34;Updating eventTime watermark to: $newWatermarkMs ms\u0026#34;) batchWatermarkMs = newWatermarkMs } else { logDebug( s\u0026#34;Event time didn\u0026#39;t move: $newWatermarkMs \u0026lt; \u0026#34; + s\u0026#34;$batchWatermarkMs\u0026#34;) } } stateOperators - 通过 ProgressReporter 的 ExecutionStats case 类公开。 它们包含在度量测试期间发现的众所周知的度量：已处理的行数(numRowsTotal)，更新的行数(numRowsUpdated)和有状态操作期间使用的内存(memoryUsedBytes)。 度量指标 在这一部分中，我们重点介绍使用 reportTimeTaken[T](triggerDetailKey: String)(body: =\u0026gt; T): T 度量的指标：\ntriggerExecution - 报告给定触发器的执行时间，即偏移量检索，数据处理和 WAL 提交花费的时间 queryPlanning - 在这里生成执行计划 getBatch - 从可用源中检索新数据（仅微批） getOffset - 测量用于为每个已定义源处理新数据以获取偏移量的时间 walCommit - 测量提交新的可用偏移量所花费的时间 addBatch - 返回将数据发送到给定接收器所花费的时间 runContunous - 它测量在连续处理模式下执行流查询所花费的时间 其中一些指标包括其他指标。 下图显示了此嵌入：\nProgressReporter 测试 现在，通过学习测试来研究 ProgressReporter 和其他一些先前提到的属性：\nprivate val sparkSession: SparkSession = SparkSession.builder().appName(\u0026#34;Spark Structured Streaming progress reporter\u0026#34;) .master(\u0026#34;local[2]\u0026#34;).getOrCreate() import sparkSession.sqlContext.implicits._ \u0026#34;sample count aggregation per id\u0026#34; should \u0026#34;have corresponding metricss\u0026#34; in { val inputStream = new MemoryStream[(Long, String)](1, sparkSession.sqlContext) val aggregatedStream = inputStream.toDS().toDF(\u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;) .groupBy(\u0026#34;id\u0026#34;) .agg(count(\u0026#34;*\u0026#34;)) val query = aggregatedStream.writeStream.trigger(Trigger.ProcessingTime(1000)).outputMode(\u0026#34;complete\u0026#34;) .foreach(new NoopForeachWriter()) .start() val progress = new scala.collection.mutable.ListBuffer[StreamingQueryProgress]() new Thread(new Runnable() { override def run(): Unit = { var currentBatchId = -1L while (query.isActive) { inputStream.addData((1, \u0026#34;A\u0026#34;), (2, \u0026#34;B\u0026#34;)) Thread.sleep(1000) val lastProgress = query.lastProgress if (currentBatchId != lastProgress.batchId) { progress.append(lastProgress) currentBatchId = lastProgress.batchId } } } }).start() query.awaitTermination(25000) val firstProgress = progress(0) firstProgress.batchId shouldEqual(0L) firstProgress.stateOperators should have size 0 firstProgress.numInputRows shouldEqual(0L) val secondProgress = progress(1) secondProgress.batchId shouldEqual(1L) // Below some metrics contained in the progress reported // It\u0026#39;s impossible to provide exact numbers it\u0026#39;s why the assertions are approximate secondProgress.durationMs.get(\u0026#34;addBatch\u0026#34;).toLong should be \u0026gt; 6000L secondProgress.durationMs.get(\u0026#34;getBatch\u0026#34;).toLong should be \u0026lt; 1000L secondProgress.durationMs.get(\u0026#34;queryPlanning\u0026#34;).toLong should be \u0026lt; 1000L secondProgress.durationMs.get(\u0026#34;triggerExecution\u0026#34;).toLong should be \u0026lt; 11000L secondProgress.durationMs.get(\u0026#34;walCommit\u0026#34;).toLong should be \u0026lt; 500L secondProgress.stateOperators(0).numRowsTotal should be \u0026lt; 10L secondProgress.stateOperators(0).numRowsTotal should be \u0026gt; 0L secondProgress.stateOperators(0).numRowsTotal shouldEqual(secondProgress.stateOperators(0).numRowsUpdated) secondProgress.stateOperators(0).memoryUsedBytes should be \u0026gt; 10000L secondProgress.sources should have size 1 secondProgress.sources(0).startOffset shouldEqual(\u0026#34;0\u0026#34;) secondProgress.sources(0).numInputRows should be \u0026gt;= 200L secondProgress.sink.description shouldEqual(\u0026#34;ForeachSink\u0026#34;) } 追踪数据处理工作的进度是一项重要的任务，尤其是在流管道的情况下。 尽快发现任何问题，便会更早解决它们，并且可能会减少开销。 Apache Spark 结构化流提供了一个非常有助于跟踪查询性能的对象。 如第一节所示，该对象是 ProgressReporter，它包含在触发器活动中。 它不仅公开了非常常见的度量作为已处理的行数，而且还公开了更复杂的度量，例如有状态聚合中的估计已用内存，更新的行数甚至是计划查询或检索要处理的新偏移量所花费的时间。\n"},"name":"Spark Structured Streaming 中的查询指标","published":"2019-10-03T13:12:56Z","summary":"长查询的重点之一是跟踪。知道查询的执行方式总是很重要的。在结构化流中，由于有了称为 ProgressReporter 的特殊对象，我们可以追踪此执行。\n在本文中，我们将重点介绍 ProgressReporter 对象收集的指标。在第一部分中，我们将解释其生命周期以及一些实现细节。下一部分将涵盖公开的信息，而最后一部分将通过一些测试展示 ProgressReporter 的行为。\nProgressReporter 首先，让我们定义这个著名的 ProgressReporter。它是 org.apache.spark.sql.execution.streaming 中的一个 trait，由 StreamExecution 抽象类直接继承，因此由其实现间接继承：org.apache.spark.sql.execution.streaming.continuous.ContinuousExecution 和 org.apache.spark.sql.execution.streaming.MicroBatchExecution。 ProgressReporter 的作用是提供一个接口，该接口一旦实现，便可以自由用于报告有关流查询执行情况的统计信息。\nProgressReporter 定义了严格的生命周期阶段：\n1、一切开始于流查询触发器（处理时间或事件时间）执行时。触发器要做的第一件事是对 ProgressReporter 的 startTrigger 方法的调用。此方法使报告程序准备好累积刚刚开始执行的统计信息。\n2、稍后，根据选择的流模式（微批或连续），报告器将记录有关几个不同步骤执行情况的统计信息。下一部分将详细介绍这些步骤。为此，它使用了方法 reportTimeTaken[T](triggerDetailKey: String)(body: =\u0026gt; T)，该方法将有关执行这些步骤的度量添加到 currentDurationsMs: mutable.HashMap[String，Long]` 字段中。\n3、下一步是数据处理，报告者还将收集一些统计信息。\n4、将这些统计信息添加到 currentDurationMs 映射后，如果执行微批处理，则 ProgressReporter 调用 finishTrigger(hasNewData: Boolean)。此方法完成触发器的执行，并创建保存执行统计信息的对象，这些统计信息放入 progressBuffer = new mutable.Queue[StreamingQueryProgress]() 中。之后，客户端可以通过公共访问器方法直接从那里检索更新（或最后一个更新）。\n在 ProgressReporter 中，我们还可以找到其他一些指标，例如：\nnewData - 它是一个 Map[BaseStreamingSource, LogicalPlan]，其中包含每个源的最新数据。 availableOffsets - 这是一个类似于 map 的 StreamProgress 对象，用于存储未提交到接收器的可用于处理的偏移量。 commitOffsets - 类似于 availableOffset。不同之处在于，它存储已处理和已提交数据的偏移量。 currentBatchId - 当前处理批次的 ID。 currentStatus - org.","type":"entry","url":"https://ohmyweekly.github.io/notes/query-metrics-in-spark-structured-streaming/"}