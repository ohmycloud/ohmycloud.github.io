{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003cp\u003e又是一个来自 Damian 的好东西，真的是你所期待的对话者和解释者的好东西。\u003c/p\u003e\n\u003cp\u003e胖逗号运算符，\u003ccode\u003e=\u0026gt;\u003c/code\u003e，最初是用来分隔值的\u0026ndash;但有一个变化。它的行为就像 \u003ccode\u003e,\u003c/code\u003e 运算符一样，但修改了解析，将左操作数字符串化。\u003c/p\u003e\n\u003cp\u003e它为你节省了一些字符串的引号，所以这个哈希初始化的代码。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%h\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以被写为:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%h\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这里，裸a和b的解析是正确的，不需要把它们引用成字符串。不过，通常的哈希赋值语义还是一样的：一对对的值会被逐一处理，鉴于 \u003ccode\u003e=\u0026gt;\u003c/code\u003e 只是一个 \u0026ldquo;左侧字符串化\u0026quot;的逗号运算符，有趣的是，上面的代码就相当于这一块:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%h\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e该提案建议改变这个\u0026quot;特殊\u0026quot;操作符的含义，使其成为一个新数据类型的构造函数, \u003ca href=\"https://docs.raku.org/type/Pair\"\u003ePair\u003c/a\u003e:\u003c/p\u003e\n\u003cp\u003e一个 Pair 是由一个键和一个值构成的:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@pairs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@pairs\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e           \u003cspan class=\"c1\"\u003e# a =\u0026gt; 42\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@pairs\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e           \u003cspan class=\"c1\"\u003e# 1 =\u0026gt; 2;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@pairs\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"nb\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Int, not a Str\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里的 \u003ccode\u003e@pairs\u003c/code\u003e 列表只包含2个值，而不是4个，一个是方便我们串联的，第二个只是用裸的Int字面作为键。\u003c/p\u003e\n\u003cp\u003e事实证明，引入 \u003ccode\u003ePair\u003c/code\u003e 不仅是一个方便操作的数据类型，这个变化还为\u0026hellip;子程序提供了新的机会。\u003c/p\u003e\n\u003cp\u003eRaku 对签名的支持是一流的，这里既是为了 \u0026ldquo;第一旅行舱\u0026quot;的双关语，也是为了它的事情，是的，居然有 \u003ca href=\"https://docs.raku.org/type/Signature\"\u003eSignature\u003c/a\u003e、\u003ca href=\"https://docs.raku.org/type/Parameter\"\u003eParameter\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/type/Capture\"\u003eCapture\u003c/a\u003e 作为一流的对象，这就可以有令人惊讶的解决方案。它支持命名参数，有大量的语法为它服务，这并不奇怪。而 \u003ca href=\"https://docs.raku.org/type/Pair\"\u003ePair\u003c/a\u003e 类已经很自然地融入其中。\u003c/p\u003e\n\u003cp\u003e如果把 Pair 传给一个带有命名参数的子程序，其中键匹配，它就能正常工作，否则你就有一个 \u0026ldquo;完整\u0026quot;的 Pair，如果你想坚持，这里的一点语法可以帮助你。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$pos\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$named\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$pos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003egist\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"s2\"\u003e, \u003c/span\u003e\u003cspan class=\"nv\"\u003e$named\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003egist\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                         \u003cspan class=\"c1\"\u003e# 42, (Any)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003enamed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e            \u003cspan class=\"c1\"\u003e# Oops, no positionals were passed!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"s\"\u003enamed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e              \u003cspan class=\"c1\"\u003e# named =\u0026gt; 42, (Any)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"s\"\u003enamed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003enamed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# named =\u0026gt; 42, 42\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e正如我们所看到的，设计一门语言是很有趣的：在一个部分所做的改变可能会对其他部分产生影响，而这些影响可能看起来很不相关，你最好希望你的选择在连接在一起的时候会有很好的效果。感谢 Damian 和所有参与 Raku 设计的人，感谢他们为之付出的巨大努力。\u003c/p\u003e\n\u003cp\u003e最后，但不是最不重要的：我们看到的 \u003ccode\u003e=\u0026gt;\u003c/code\u003e 火车发生了什么？好了，现在它做什么你的意思，如果你的意思是它做什么。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e%a\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eraku\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# {:a(1 =\u0026gt; :b(2))}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e是的，这是一个键a指向值对的1指向值对的b指向值对的2，所以至少这次的方向是不错的。祝大家好运，保持方向!\u003c/p\u003e\n","text":"又是一个来自 Damian 的好东西，真的是你所期待的对话者和解释者的好东西。\n胖逗号运算符，=\u0026gt;，最初是用来分隔值的\u0026ndash;但有一个变化。它的行为就像 , 运算符一样，但修改了解析，将左操作数字符串化。\n它为你节省了一些字符串的引号，所以这个哈希初始化的代码。\nmy %h = ( \u0026#39;a\u0026#39;, 1, \u0026#39;b\u0026#39;, 2, ); 可以被写为:\nmy %h = ( a =\u0026gt; 1, b =\u0026gt; 2, ); 在这里，裸a和b的解析是正确的，不需要把它们引用成字符串。不过，通常的哈希赋值语义还是一样的：一对对的值会被逐一处理，鉴于 =\u0026gt; 只是一个 \u0026ldquo;左侧字符串化\u0026quot;的逗号运算符，有趣的是，上面的代码就相当于这一块:\nmy %h = ( a =\u0026gt; 1 =\u0026gt; b =\u0026gt; 2 =\u0026gt; ); 该提案建议改变这个\u0026quot;特殊\u0026quot;操作符的含义，使其成为一个新数据类型的构造函数, Pair:\n一个 Pair 是由一个键和一个值构成的:\nmy @pairs = a =\u0026gt; 42, 1 =\u0026gt; 2; say @pairs[0]; # a =\u0026gt; 42 say @pairs[1]; # 1 =\u0026gt; 2; say @pairs[1].key.^name; # Int, not a Str 这里的 @pairs 列表只包含2个值，而不是4个，一个是方便我们串联的，第二个只是用裸的Int字面作为键。\n事实证明，引入 Pair 不仅是一个方便操作的数据类型，这个变化还为\u0026hellip;子程序提供了新的机会。\nRaku 对签名的支持是一流的，这里既是为了 \u0026ldquo;第一旅行舱\u0026quot;的双关语，也是为了它的事情，是的，居然有 Signature、Parameter 和 Capture 作为一流的对象，这就可以有令人惊讶的解决方案。它支持命名参数，有大量的语法为它服务，这并不奇怪。而 Pair 类已经很自然地融入其中。\n如果把 Pair 传给一个带有命名参数的子程序，其中键匹配，它就能正常工作，否则你就有一个 \u0026ldquo;完整\u0026quot;的 Pair，如果你想坚持，这里的一点语法可以帮助你。\nsub foo($pos, :$named) { say \u0026#34;$pos.gist(), $named.gist()\u0026#34;; } foo(42); # 42, (Any) try foo(named =\u0026gt; 42); # Oops, no positionals were passed! foo((named =\u0026gt; 42)); # named =\u0026gt; 42, (Any) foo((named =\u0026gt; 42), named =\u0026gt; 42); # named =\u0026gt; 42, 42 正如我们所看到的，设计一门语言是很有趣的：在一个部分所做的改变可能会对其他部分产生影响，而这些影响可能看起来很不相关，你最好希望你的选择在连接在一起的时候会有很好的效果。感谢 Damian 和所有参与 Raku 设计的人，感谢他们为之付出的巨大努力。\n最后，但不是最不重要的：我们看到的 =\u0026gt; 火车发生了什么？好了，现在它做什么你的意思，如果你的意思是它做什么。\nmy %a = a =\u0026gt; 1 =\u0026gt; b =\u0026gt; 2; say %a.raku; # {:a(1 =\u0026gt; :b(2))} 是的，这是一个键a指向值对的1指向值对的b指向值对的2，所以至少这次的方向是不错的。祝大家好运，保持方向!\n"},"name":"Pair Constructor","published":"2020-08-21T12:42:20+08:00","summary":"又是一个来自 Damian 的好东西，真的是你所期待的对话者和解释者的好东西。\n胖逗号运算符，=\u0026gt;，最初是用来分隔值的\u0026ndash;但有一个变化。它的行为就像 , 运算符一样，但修改了解析，将左操作数字符串化。\n它为你节省了一些字符串的引号，所以这个哈希初始化的代码。\nmy %h = ( \u0026#39;a\u0026#39;, 1, \u0026#39;b\u0026#39;, 2, ); 可以被写为:\nmy %h = ( a =\u0026gt; 1, b =\u0026gt; 2, ); 在这里，裸a和b的解析是正确的，不需要把它们引用成字符串。不过，通常的哈希赋值语义还是一样的：一对对的值会被逐一处理，鉴于 =\u0026gt; 只是一个 \u0026ldquo;左侧字符串化\u0026quot;的逗号运算符，有趣的是，上面的代码就相当于这一块:\nmy %h = ( a =\u0026gt; 1 =\u0026gt; b =\u0026gt; 2 =\u0026gt; ); 该提案建议改变这个\u0026quot;特殊\u0026quot;操作符的含义，使其成为一个新数据类型的构造函数, Pair:\n一个 Pair 是由一个键和一个值构成的:\nmy @pairs = a =\u0026gt; 42, 1 =\u0026gt; 2; say @pairs[0]; # a =\u0026gt; 42 say @pairs[1]; # 1 =\u0026gt; 2; say @pairs[1].","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-21-rfc84-pair-constructor/"}