{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"content":{"html":"\u003ch2 id=\"进入-pkg-模式\"\u003e进入 Pkg 模式\u003c/h2\u003e\n\u003cp\u003ePkg 是 Julia 中包管理工具。Pkg 来自于 REPL, 在 Julia 的 REPL 中按下 \u003ccode\u003e]\u003c/code\u003e 就进入 Pkg REPL 了。要回到 Julia REPL, 按退格键或 \u003ccode\u003e^C\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"使用-pkg\"\u003e使用 Pkg\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eadd JSON              \u003cspan class=\"c1\"\u003e# 添加一个 package\u003c/span\u003e\nadd JSON StaticArrays \u003cspan class=\"c1\"\u003e# 添加多个 package\u003c/span\u003e\nrm JSON               \u003cspan class=\"c1\"\u003e# 移除一个 package\u003c/span\u003e\nrm JSON StaticArrays  \u003cspan class=\"c1\"\u003e# 移除多个 package\u003c/span\u003e\nadd https://github.com/JuliaLang/Example.jl \u003cspan class=\"c1\"\u003e# 添加一个未注册的 package\u003c/span\u003e\nrm Example            \u003cspan class=\"c1\"\u003e# 按名字移除 package\u003c/span\u003e\nupdate Example        \u003cspan class=\"c1\"\u003e# 升级一个已安装的 package\u003c/span\u003e\nupdate                \u003cspan class=\"c1\"\u003e# 升级所有已安装的 package\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"environments\"\u003eenvironments\u003c/h2\u003e\n\u003cp\u003e你可能已经注意到 Pkg REPL 提示符前面的 \u003ccode\u003e(@v1.5)\u003c/code\u003e 字符串了。这里的  \u003ccode\u003e(@v1.5)\u003c/code\u003e 就是激活环境(\u003cstrong\u003eactive environment\u003c/strong\u003e)。激活环境是能被诸如 \u003ccode\u003eadd\u003c/code\u003e、\u003ccode\u003erm\u003c/code\u003e 和 \u003ccode\u003eupdate\u003c/code\u003e 等 Pkg 命令修改的环境。\u003c/p\u003e\n\u003cp\u003e我们可以设置一个新的激活环境用于实验。要设置激活环境, 使用 \u003ccode\u003eactivate\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e@v1.5\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; activate tutorial\nActivating new environment at \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e~/tutorial/Project.toml\u003c/code\u003e 是激活环境的项目文件。项目文件是 Pkg 存储环境的元数据的地方。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; status\nStatus \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eempty project\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在这个新的环境是空的, 我们添加一个 package 观察下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; add Example\n   Updating registry at \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/.julia/registries/General\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n   Updating git-repo \u003cspan class=\"sb\"\u003e`\u003c/span\u003ehttps://github.com/JuliaRegistries/General.git\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  Resolving package versions...\n    Cloning \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07-990d-54b4-ab0e-23690620f79a\u003cspan class=\"o\"\u003e]\u003c/span\u003e Example from https://github.com/JuliaLang/Example.jl.git\n  Installed Example ─ v0.5.3\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e + Example v0.5.3\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Manifest.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e + Example v0.5.3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用 \u003ccode\u003estatus\u003c/code\u003e 命令查看激活环境的信息:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; status\nStatus \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e Example v0.5.3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用 \u003ccode\u003edevelop\u003c/code\u003e 命令设置 \u003ccode\u003eExample\u003c/code\u003e package 的 一个 \u003ccode\u003egit clone\u003c/code\u003e, 以供我们修改这个本地仓库:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; develop --local Example\n    Cloning git-repo \u003cspan class=\"sb\"\u003e`\u003c/span\u003ehttps://github.com/JuliaLang/Example.jl.git\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  Resolving package versions...\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e ~ Example v0.5.3 ⇒ v0.5.4 \u003cspan class=\"sb\"\u003e`\u003c/span\u003edev/Example\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Manifest.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e ~ Example v0.5.3 ⇒ v0.5.4 \u003cspan class=\"sb\"\u003e`\u003c/span\u003edev/Example\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用 \u003ccode\u003e;\u003c/code\u003e 切换到 shell 模式, 用 vi 修改 \u003ccode\u003e~/tutorial/dev/Example/src/Example.jl\u003c/code\u003e 文件, 增加一个 \u003ccode\u003eplusone\u003c/code\u003e 函数, 保存。\u003c/p\u003e\n\u003cp\u003e在 Julia 的 REPL 中, 导入修改后的 \u003ccode\u003eExample\u003c/code\u003e package:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; import Example\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e Info: Precompiling Example \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07-990d-54b4-ab0e-23690620f79a\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\njulia\u0026gt; Example.plusone\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e2\u003c/span\u003e\n\njulia\u0026gt; Example.plusone\u003cspan class=\"o\"\u003e(\u003c/span\u003e4\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到我们添加的函数生效了, 这样就很方便我们添加测试新功能。如果我们已经不再需要本地的 \u003ccode\u003eExample\u003c/code\u003e 了, 需要使用 \u003ccode\u003efree\u003c/code\u003e 命令以停止使用本地克隆的 package, 转而使用已注册版本代替:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; free Example\n  Resolving package versions...\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e ~ Example v0.5.4 \u003cspan class=\"sb\"\u003e`\u003c/span\u003edev/Example\u003cspan class=\"sb\"\u003e`\u003c/span\u003e ⇒ v0.5.3\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Manifest.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e ~ Example v0.5.4 \u003cspan class=\"sb\"\u003e`\u003c/span\u003edev/Example\u003cspan class=\"sb\"\u003e`\u003c/span\u003e ⇒ v0.5.3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果已经用 \u003ccode\u003etutorial\u003c/code\u003e 做完实验了, 可以使用不带参数的 \u003ccode\u003eactivate\u003c/code\u003e 回到默认环境:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; activate\n Activating environment at \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/.julia/environments/v1.5/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e@v1.5\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"进入 Pkg 模式 Pkg 是 Julia 中包管理工具。Pkg 来自于 REPL, 在 Julia 的 REPL 中按下 ] 就进入 Pkg REPL 了。要回到 Julia REPL, 按退格键或 ^C。\n使用 Pkg add JSON # 添加一个 package add JSON StaticArrays # 添加多个 package rm JSON # 移除一个 package rm JSON StaticArrays # 移除多个 package add https://github.com/JuliaLang/Example.jl # 添加一个未注册的 package rm Example # 按名字移除 package update Example # 升级一个已安装的 package update # 升级所有已安装的 package environments 你可能已经注意到 Pkg REPL 提示符前面的 (@v1.5) 字符串了。这里的 (@v1.5) 就是激活环境(active environment)。激活环境是能被诸如 add、rm 和 update 等 Pkg 命令修改的环境。\n我们可以设置一个新的激活环境用于实验。要设置激活环境, 使用 activate:\n(@v1.5) pkg\u0026gt; activate tutorial Activating new environment at `~/tutorial/Project.toml` ~/tutorial/Project.toml 是激活环境的项目文件。项目文件是 Pkg 存储环境的元数据的地方。\n(tutorial) pkg\u0026gt; status Status `~/tutorial/Project.toml` (empty project) 现在这个新的环境是空的, 我们添加一个 package 观察下:\n(tutorial) pkg\u0026gt; add Example Updating registry at `~/.julia/registries/General` Updating git-repo `https://github.com/JuliaRegistries/General.git` Resolving package versions... Cloning [7876af07-990d-54b4-ab0e-23690620f79a] Example from https://github.com/JuliaLang/Example.jl.git Installed Example ─ v0.5.3 Updating `~/tutorial/Project.toml` [7876af07] + Example v0.5.3 Updating `~/tutorial/Manifest.toml` [7876af07] + Example v0.5.3 用 status 命令查看激活环境的信息:\n(tutorial) pkg\u0026gt; status Status `~/tutorial/Project.toml` [7876af07] Example v0.5.3 使用 develop 命令设置 Example package 的 一个 git clone, 以供我们修改这个本地仓库:\n(tutorial) pkg\u0026gt; develop --local Example Cloning git-repo `https://github.com/JuliaLang/Example.jl.git` Resolving package versions... Updating `~/tutorial/Project.toml` [7876af07] ~ Example v0.5.3 ⇒ v0.5.4 `dev/Example` Updating `~/tutorial/Manifest.toml` [7876af07] ~ Example v0.5.3 ⇒ v0.5.4 `dev/Example` 用 ; 切换到 shell 模式, 用 vi 修改 ~/tutorial/dev/Example/src/Example.jl 文件, 增加一个 plusone 函数, 保存。\n在 Julia 的 REPL 中, 导入修改后的 Example package:\njulia\u0026gt; import Example [ Info: Precompiling Example [7876af07-990d-54b4-ab0e-23690620f79a] julia\u0026gt; Example.plusone(1) 2 julia\u0026gt; Example.plusone(4) 5 可以看到我们添加的函数生效了, 这样就很方便我们添加测试新功能。如果我们已经不再需要本地的 Example 了, 需要使用 free 命令以停止使用本地克隆的 package, 转而使用已注册版本代替:\n(tutorial) pkg\u0026gt; free Example Resolving package versions... Updating `~/tutorial/Project.toml` [7876af07] ~ Example v0.5.4 `dev/Example` ⇒ v0.5.3 Updating `~/tutorial/Manifest.toml` [7876af07] ~ Example v0.5.4 `dev/Example` ⇒ v0.5.3 如果已经用 tutorial 做完实验了, 可以使用不带参数的 activate 回到默认环境:\n(tutorial) pkg\u0026gt; activate Activating environment at `~/.julia/environments/v1.5/Project.toml` (@v1.5) pkg\u0026gt; "},"name":"Julia 中的 Pkg","published":"2020-08-04T00:00:00+08:00","summary":"Pkg","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-04-pkg-in-julia/"}