{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003cp\u003eDart 生态系统使用\u003ca href=\"https://dart.dev/guides/packages\"\u003e包\u003c/a\u003e来共享软件，如库和工具。本页告诉你如何创建一个包，重点是最常见的一种包，\u003ca href=\"https://dart.dev/tools/pub/glossary#library-package\"\u003e库包\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"是什么造就了一个库包\"\u003e是什么造就了一个库包\u003c/h2\u003e\n\u003cp\u003e下图是最简单的库包的布局:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/assets/libraries/simple-lib2-81ebdc20fdb53d3abbc4364956141eb0f6f8f275d1636064fc3e1db959b93c1a.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e一个库的最低要求是\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003epubspec 文件\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e库的 \u003ccode\u003epubspec.yaml\u003c/code\u003e 文件和应用程序包的文件是一样的-没有特别的名称来表示这个包是一个库。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003elib 目录\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e正如你所期望的那样，库代码存在于 \u003ccode\u003elib\u003c/code\u003e 目录下，对其他包是公开的。你可以根据需要在 \u003ccode\u003elib\u003c/code\u003e 下创建任何层次结构。按照惯例，实现代码被放在 \u003ccode\u003elib/src\u003c/code\u003e 下。\u003ccode\u003elib/src\u003c/code\u003e 下的代码被认为是私有的；其他包不应该需要导入 \u003ccode\u003esrc/...\u003c/code\u003e。要使 \u003ccode\u003elib/src\u003c/code\u003e 下的 API 公开，您可以从直接位于 \u003ccode\u003elib\u003c/code\u003e 下的文件导出 \u003ccode\u003elib/src\u003c/code\u003e 文件。\u003c/p\u003e\n\u003cp\u003e注意：当没有指定 \u003ccode\u003elibrary\u003c/code\u003e 指令时，会根据每个库的路径和文件名为其生成一个唯一的标签。因此，我们建议您从代码中省略 \u003ccode\u003elibrary\u003c/code\u003e 指令，除非您计划\u003ca href=\"https://dart.dev/guides/libraries/create-library-packages#documenting-a-library\"\u003e生成库级文档\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"组织一个库包\"\u003e组织一个库包\u003c/h2\u003e\n\u003cp\u003e当你创建小的、单独的库（称为迷你库）时，库包的维护、扩展和测试是最容易的。在大多数情况下，每个类都应该在自己的迷你库中，除非你有两个类是紧密耦合的情况。\u003c/p\u003e\n\u003cp\u003e注意：你可能听说过 \u003ccode\u003epart\u003c/code\u003e 指令，它允许你将一个库分割成多个 Dart 文件。我们建议你避免使用 \u003ccode\u003epart\u003c/code\u003e 指令，而是创建迷你库。\u003c/p\u003e\n\u003cp\u003e直接在 \u003ccode\u003elib\u003c/code\u003e 下创建一个\u0026quot;主\u0026quot;库文件，\u003ccode\u003elib/\u0026lt;package-name\u0026gt;.dart\u003c/code\u003e，导出所有的公共 API。这样用户就可以通过导入一个文件来获得一个库的所有功能。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003elib\u003c/code\u003e 目录也可能包含其他可导入的、非src的库。例如，也许你的主库可以跨平台使用，但是你创建了单独的库，这些库依赖于 \u003ccode\u003edart:io\u003c/code\u003e 或者 \u003ccode\u003edart:html\u003c/code\u003e。有些包有单独的库，这些库是要用前缀导入的，而主库不是。\u003c/p\u003e\n\u003cp\u003e让我们来看看一个现实世界中的库包的组织： shelf。\u003ca href=\"https://github.com/dart-lang/shelf\"\u003eshelf\u003c/a\u003e 包提供了一种使用 Dart 创建 web 服务器的简单方法，它的布局结构是 Dart 库包常用的:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/assets/libraries/shelf-02e5fd43b660fcef7dbe6a883c40159e0379c8ee2088288ca60ed7dc8781bafd.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e直接在 \u003ccode\u003elib\u003c/code\u003e 下，主库文件 \u003ccode\u003eshelf.dart\u003c/code\u003e 从 \u003ccode\u003elib/src\u003c/code\u003e 导出几个文件:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/cascade.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/handler.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/handlers/logger.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/hijack_exception.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/middleware.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/pipeline.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/request.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/response.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/server.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/server_handler.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eshelf 包还包含一个迷你库： \u003ccode\u003eshelf_io\u003c/code\u003e。这个适配器处理来自 \u003ccode\u003edart:io\u003c/code\u003e 的 \u003ccode\u003eHttpRequest\u003c/code\u003e 对象。\u003c/p\u003e\n\u003cp\u003e对网络应用的提示: 为了在使用 \u003ca href=\"https://dart.dev/tools/dartdevc\"\u003edartdevc\u003c/a\u003e 开发时获得最佳性能，请将\u003ca href=\"https://dart.dev/tools/pub/package-layout#implementation-files\"\u003e实现文件\u003c/a\u003e放在 \u003ccode\u003e/lib/src\u003c/code\u003e 下，而不是放在 \u003ccode\u003e/lib\u003c/code\u003e 下的其他地方。同时，避免导入 \u003ccode\u003epackage:package_name/src/...\u003c/code\u003e 的文件。\u003c/p\u003e\n\u003ch2 id=\"导入库文件\"\u003e导入库文件\u003c/h2\u003e\n\u003cp\u003e当从其他包中导入一个库文件时，使用 \u003ccode\u003epackage:\u003c/code\u003e 指令来指定该文件的 URI。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;package:utilities/utilities.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当从自己的包中导入一个库文件时，当两个文件都在 lib 内，或者两个文件都在 lib 外时，使用相对路径。使用 \u003ccode\u003e:package\u003c/code\u003e 当导入的文件在 lib 内，而导入者在 lib 外时。\u003c/p\u003e\n\u003cp\u003e下图显示了如何从 lib 和 web 中导入 \u003ccode\u003elib/foo/a.dart\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/assets/libraries/import-lib-rules-e1777e235dd56aa23f770babcccedb6a12be80af2c3e63065640b889d78be595.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch2 id=\"有条件地导入和导出库文件\"\u003e有条件地导入和导出库文件\u003c/h2\u003e\n\u003cp\u003e如果你的库支持多个平台，那么你可能需要有条件地导入或导出库文件。一个常见的用例是一个同时支持 web 和原生平台的库。\u003c/p\u003e\n\u003cp\u003e要有条件的导入或导出，你需要检查 \u003ccode\u003edart:*\u003c/code\u003e 库的存在。下面是一个有条件导出代码的例子，它检查 \u003ccode\u003edart:io\u003c/code\u003e 和 \u003ccode\u003edart:html\u003c/code\u003e 的存在:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/hw_none.dart\u0026#39;\u003c/span\u003e \u003cspan class=\"err\"\u003e//\u003c/span\u003e \u003cspan class=\"n\"\u003eStub\u003c/span\u003e \u003cspan class=\"n\"\u003eimplementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eif\u003c/span\u003e \u003cspan class=\"err\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edart\u003c/span\u003e\u003cspan class=\"err\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elibrary\u003c/span\u003e\u003cspan class=\"err\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e\u003cspan class=\"err\"\u003e)\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/hw_io.dart\u0026#39;\u003c/span\u003e \u003cspan class=\"err\"\u003e//\u003c/span\u003e \u003cspan class=\"n\"\u003edart\u003c/span\u003e\u003cspan class=\"err\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e \u003cspan class=\"n\"\u003eimplementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eif\u003c/span\u003e \u003cspan class=\"err\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edart\u003c/span\u003e\u003cspan class=\"err\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elibrary\u003c/span\u003e\u003cspan class=\"err\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehtml\u003c/span\u003e\u003cspan class=\"err\"\u003e)\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;src/hw_html.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// dart:html implementation\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下面是这段代码的作用。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在一个可以使用 \u003ccode\u003edart:io\u003c/code\u003e 的应用程序中(例如，一个命令行应用程序)，导出 \u003ccode\u003esrc/hw_io.dart\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e在一个可以使用 \u003ccode\u003edart:html\u003c/code\u003e 的应用程序中(一个 web 应用程序)，导出 \u003ccode\u003esrc/hw_html.dart\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e否则，导出 \u003ccode\u003esrc/hw_none.dart\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e要有条件地导入一个文件，使用与上面相同的代码，但将 \u003ccode\u003eexporrt\u003c/code\u003e 改为 \u003ccode\u003eimport\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e注意：有条件的导入或导出只检查库在当前平台上是否可用，而不是检查是否实际导入或使用。\u003c/p\u003e\n\u003cp\u003e所有有条件导出的库都必须实现相同的 API。例如，这里是 \u003ccode\u003edart:io\u003c/code\u003e 的实现:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;dart:io\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ealarm\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewriteln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Hello World from the VM!\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里是默认的实现，它是一个抛出 UnsupportedErrors 的 stub。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ealarm\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eUnsupportedError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;hw_none alarm\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eUnsupportedError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;hw_none message\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在任何平台上，你都可以导入有条件导出代码的库。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;package:hw_mp/hw_mp.dart\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"提供补充文件\"\u003e提供补充文件\u003c/h2\u003e\n\u003cp\u003e一个设计良好的库包是很容易测试的。我们建议你使用 \u003ca href=\"https://github.com/dart-lang/test\"\u003etest\u003c/a\u003e 包来编写测试，将测试代码放在测试包顶部的 \u003ccode\u003etest\u003c/code\u003e 目录中。\u003c/p\u003e\n\u003cp\u003e如果你创建了任何旨在供公众使用的命令行工具，请将这些工具放在 \u003ccode\u003ebin\u003c/code\u003e 目录下，这是公共的。启用从命令行运行工具，使用 \u003ca href=\"https://dart.dev/tools/pub/cmd/pub-global#activating-a-package\"\u003epub global activate\u003c/a\u003e。将工具列在 pubspec 的\u003ca href=\"https://dart.dev/tools/pub/pubspec#executables\"\u003e可执行文件部分\u003c/a\u003e，允许用户直接运行它，而无需调用 \u003ca href=\"https://dart.dev/tools/pub/cmd/pub-global#running-a-script-using-pub-global-run\"\u003epub global run\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e如果你包含了一个如何使用你的库的例子，这将会很有帮助。这将被放入软件包顶部的 \u003ccode\u003eexample\u003c/code\u003e 目录中。\u003c/p\u003e\n\u003cp\u003e你在开发过程中创建的任何工具或可执行文件，如果不是公开使用的，都会进入 \u003ccode\u003etool\u003c/code\u003e 目录。\u003c/p\u003e\n\u003cp\u003e如果你把你的库发布到 pub.dev 站点，其他需要的文件，如 \u003ccode\u003eREADME.md\u003c/code\u003e 和 \u003ccode\u003eCHANGELOG.md\u003c/code\u003e，将在\u003ca href=\"https://dart.dev/tools/pub/publishing\"\u003e发布软件包\u003c/a\u003e中描述。有关如何组织包目录的更多信息，请参见 \u003ca href=\"https://dart.dev/tools/pub/package-layout\"\u003epub 包布局惯例\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"编写库文档\"\u003e编写库文档\u003c/h2\u003e\n\u003cp\u003e你可以使用 \u003ca href=\"https://github.com/dart-lang/dartdoc#dartdoc\"\u003edartdoc\u003c/a\u003e 工具为你的库生成 API 文档。Dartdoc 解析源码寻找\u003ca href=\"https://dart.dev/guides/language/effective-dart/documentation#doc-comments\"\u003e文档注释\u003c/a\u003e，其中使用了 \u003ccode\u003e///\u003c/code\u003e 语法:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e/// The event handler responsible for updating the badge in the UI.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eupdateBadge\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e关于生成文档的例子，请看 \u003ca href=\"https://pub.dev/documentation/shelf/latest\"\u003eshelf 文档\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e注意：要在生成的文档中包含任何库级文档，你必须指定 \u003ccode\u003elibrary\u003c/code\u003e 指令。请参阅 \u003ca href=\"https://github.com/dart-lang/dartdoc/issues/1082\"\u003e问题 1082\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"分发一个开源库\"\u003e分发一个开源库\u003c/h2\u003e\n\u003cp\u003e如果你的库是开源的，我们建议在 \u003ca href=\"https://pub.dev/\"\u003epub.dev\u003c/a\u003e 站点上分享它。要发布或更新库，请使用 \u003ca href=\"https://dart.dev/tools/pub/cmd/pub-lish\"\u003epub publish\u003c/a\u003e，它可以上传您的包并创建或更新其页面。例如，请看 \u003ca href=\"https://pub.dev/packages/shelf\"\u003eshelf 包\u003c/a\u003e的页面。有关如何准备发布软件包的详细信息，请参见\u003ca href=\"https://dart.dev/tools/pub/publishing\"\u003e发布包\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003epub.dev 站点不仅托管您的软件包，而且还生成和托管您软件包的 API 参考文档。最新生成的文档的链接在软件包的 \u003cstrong\u003eAbout\u003c/strong\u003e 框中；例如，请看 shelf 包的 \u003ca href=\"https://pub.dev/documentation/shelf\"\u003eAPI 文档\u003c/a\u003e。到以前版本的文档的链接在软件包页面的版本选项卡中。\u003c/p\u003e\n\u003cp\u003e要确保你的软件包的 API 文档在 pub.dev 网站上看起来不错，请按照以下步骤进行。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在发布你的软件包之前，运行 \u003ca href=\"https://github.com/dart-lang/dartdoc#dartdoc\"\u003edartdoc\u003c/a\u003e 工具，以确保你的 docs 成功生成，并且看起来符合预期。\u003c/li\u003e\n\u003cli\u003e发布软件包后，检查 \u003cstrong\u003eVersions\u003c/strong\u003e 选项卡以确保文档成功生成。\u003c/li\u003e\n\u003cli\u003e如果文档根本没有生成，点击 \u003cstrong\u003eVerrsions\u003c/strong\u003e 选项卡中的 \u003cstrong\u003efailed\u003c/strong\u003e，查看 dartdoc 的输出。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"资源\"\u003e资源\u003c/h2\u003e\n\u003cp\u003e使用以下资源了解更多关于库包的信息。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/language/language-tour\"\u003e语言之旅\u003c/a\u003e中的\u003ca href=\"https://dart.dev/guides/language/language-tour#libraries-and-visibility\"\u003e库和可见性\u003c/a\u003e包括使用库文件。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/packages\"\u003e包\u003c/a\u003e文档很有用，特别是\u003ca href=\"https://dart.dev/tools/pub/package-layout\"\u003e包的布局约定\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/libraries/private-files\"\u003e不应提交的内容\u003c/a\u003e涵盖了哪些不应该被检查到源代码库中。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/dart-lang\"\u003edart-lang\u003c/a\u003e 组织下的较新的库包倾向于展示最佳实践。可以考虑研究这些例子：\u003ca href=\"https://github.com/dart-lang/dart_style\"\u003edart_style\u003c/a\u003e、\u003ca href=\"https://github.com/dart-lang/path\"\u003epath\u003c/a\u003e、\u003ca href=\"https://github.com/dart-lang/shelf\"\u003eshelf\u003c/a\u003e、\u003ca href=\"https://github.com/dart-lang/source_gen\"\u003esource_gen\u003c/a\u003e 和 \u003ca href=\"https://github.com/dart-lang/test\"\u003etest\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n","text":"Dart 生态系统使用包来共享软件，如库和工具。本页告诉你如何创建一个包，重点是最常见的一种包，库包。\n是什么造就了一个库包 下图是最简单的库包的布局:\n一个库的最低要求是\npubspec 文件\n库的 pubspec.yaml 文件和应用程序包的文件是一样的-没有特别的名称来表示这个包是一个库。\nlib 目录\n正如你所期望的那样，库代码存在于 lib 目录下，对其他包是公开的。你可以根据需要在 lib 下创建任何层次结构。按照惯例，实现代码被放在 lib/src 下。lib/src 下的代码被认为是私有的；其他包不应该需要导入 src/...。要使 lib/src 下的 API 公开，您可以从直接位于 lib 下的文件导出 lib/src 文件。\n注意：当没有指定 library 指令时，会根据每个库的路径和文件名为其生成一个唯一的标签。因此，我们建议您从代码中省略 library 指令，除非您计划生成库级文档。\n组织一个库包 当你创建小的、单独的库（称为迷你库）时，库包的维护、扩展和测试是最容易的。在大多数情况下，每个类都应该在自己的迷你库中，除非你有两个类是紧密耦合的情况。\n注意：你可能听说过 part 指令，它允许你将一个库分割成多个 Dart 文件。我们建议你避免使用 part 指令，而是创建迷你库。\n直接在 lib 下创建一个\u0026quot;主\u0026quot;库文件，lib/\u0026lt;package-name\u0026gt;.dart，导出所有的公共 API。这样用户就可以通过导入一个文件来获得一个库的所有功能。\nlib 目录也可能包含其他可导入的、非src的库。例如，也许你的主库可以跨平台使用，但是你创建了单独的库，这些库依赖于 dart:io 或者 dart:html。有些包有单独的库，这些库是要用前缀导入的，而主库不是。\n让我们来看看一个现实世界中的库包的组织： shelf。shelf 包提供了一种使用 Dart 创建 web 服务器的简单方法，它的布局结构是 Dart 库包常用的:\n直接在 lib 下，主库文件 shelf.dart 从 lib/src 导出几个文件:\nexport \u0026#39;src/cascade.dart\u0026#39;; export \u0026#39;src/handler.dart\u0026#39;; export \u0026#39;src/handlers/logger.dart\u0026#39;; export \u0026#39;src/hijack_exception.dart\u0026#39;; export \u0026#39;src/middleware.dart\u0026#39;; export \u0026#39;src/pipeline.dart\u0026#39;; export \u0026#39;src/request.dart\u0026#39;; export \u0026#39;src/response.dart\u0026#39;; export \u0026#39;src/server.dart\u0026#39;; export \u0026#39;src/server_handler.dart\u0026#39;; shelf 包还包含一个迷你库： shelf_io。这个适配器处理来自 dart:io 的 HttpRequest 对象。\n对网络应用的提示: 为了在使用 dartdevc 开发时获得最佳性能，请将实现文件放在 /lib/src 下，而不是放在 /lib 下的其他地方。同时，避免导入 package:package_name/src/... 的文件。\n导入库文件 当从其他包中导入一个库文件时，使用 package: 指令来指定该文件的 URI。\nimport \u0026#39;package:utilities/utilities.dart\u0026#39;; 当从自己的包中导入一个库文件时，当两个文件都在 lib 内，或者两个文件都在 lib 外时，使用相对路径。使用 :package 当导入的文件在 lib 内，而导入者在 lib 外时。\n下图显示了如何从 lib 和 web 中导入 lib/foo/a.dart。\n有条件地导入和导出库文件 如果你的库支持多个平台，那么你可能需要有条件地导入或导出库文件。一个常见的用例是一个同时支持 web 和原生平台的库。\n要有条件的导入或导出，你需要检查 dart:* 库的存在。下面是一个有条件导出代码的例子，它检查 dart:io 和 dart:html 的存在:\nexport \u0026#39;src/hw_none.dart\u0026#39; // Stub implementation if (dart.library.io) \u0026#39;src/hw_io.dart\u0026#39; // dart:io implementation if (dart.library.html) \u0026#39;src/hw_html.dart\u0026#39;; // dart:html implementation 下面是这段代码的作用。\n在一个可以使用 dart:io 的应用程序中(例如，一个命令行应用程序)，导出 src/hw_io.dart 在一个可以使用 dart:html 的应用程序中(一个 web 应用程序)，导出 src/hw_html.dart 否则，导出 src/hw_none.dart 要有条件地导入一个文件，使用与上面相同的代码，但将 exporrt 改为 import。\n注意：有条件的导入或导出只检查库在当前平台上是否可用，而不是检查是否实际导入或使用。\n所有有条件导出的库都必须实现相同的 API。例如，这里是 dart:io 的实现:\nimport \u0026#39;dart:io\u0026#39;; void alarm([String text]) { stderr.writeln(text ?? message); } String get message =\u0026gt; \u0026#39;Hello World from the VM!\u0026#39;; 这里是默认的实现，它是一个抛出 UnsupportedErrors 的 stub。\nvoid alarm([String text]) =\u0026gt; throw UnsupportedError(\u0026#39;hw_none alarm\u0026#39;); String get message =\u0026gt; throw UnsupportedError(\u0026#39;hw_none message\u0026#39;); 在任何平台上，你都可以导入有条件导出代码的库。\nimport \u0026#39;package:hw_mp/hw_mp.dart\u0026#39;; void main() { print(message); } 提供补充文件 一个设计良好的库包是很容易测试的。我们建议你使用 test 包来编写测试，将测试代码放在测试包顶部的 test 目录中。\n如果你创建了任何旨在供公众使用的命令行工具，请将这些工具放在 bin 目录下，这是公共的。启用从命令行运行工具，使用 pub global activate。将工具列在 pubspec 的可执行文件部分，允许用户直接运行它，而无需调用 pub global run。\n如果你包含了一个如何使用你的库的例子，这将会很有帮助。这将被放入软件包顶部的 example 目录中。\n你在开发过程中创建的任何工具或可执行文件，如果不是公开使用的，都会进入 tool 目录。\n如果你把你的库发布到 pub.dev 站点，其他需要的文件，如 README.md 和 CHANGELOG.md，将在发布软件包中描述。有关如何组织包目录的更多信息，请参见 pub 包布局惯例。\n编写库文档 你可以使用 dartdoc 工具为你的库生成 API 文档。Dartdoc 解析源码寻找文档注释，其中使用了 /// 语法:\n/// The event handler responsible for updating the badge in the UI. void updateBadge() { ... } 关于生成文档的例子，请看 shelf 文档。\n注意：要在生成的文档中包含任何库级文档，你必须指定 library 指令。请参阅 问题 1082。\n分发一个开源库 如果你的库是开源的，我们建议在 pub.dev 站点上分享它。要发布或更新库，请使用 pub publish，它可以上传您的包并创建或更新其页面。例如，请看 shelf 包的页面。有关如何准备发布软件包的详细信息，请参见发布包。\npub.dev 站点不仅托管您的软件包，而且还生成和托管您软件包的 API 参考文档。最新生成的文档的链接在软件包的 About 框中；例如，请看 shelf 包的 API 文档。到以前版本的文档的链接在软件包页面的版本选项卡中。\n要确保你的软件包的 API 文档在 pub.dev 网站上看起来不错，请按照以下步骤进行。\n在发布你的软件包之前，运行 dartdoc 工具，以确保你的 docs 成功生成，并且看起来符合预期。 发布软件包后，检查 Versions 选项卡以确保文档成功生成。 如果文档根本没有生成，点击 Verrsions 选项卡中的 failed，查看 dartdoc 的输出。 资源 使用以下资源了解更多关于库包的信息。\n语言之旅中的库和可见性包括使用库文件。 包文档很有用，特别是包的布局约定。 不应提交的内容涵盖了哪些不应该被检查到源代码库中。 dart-lang 组织下的较新的库包倾向于展示最佳实践。可以考虑研究这些例子：dart_style、path、shelf、source_gen 和 test。 "},"name":"创建包","published":"2020-06-30T00:00:00Z","summary":"Creating packages","type":"entry","url":"http://localhost:1313/notes/creating-packages/"}