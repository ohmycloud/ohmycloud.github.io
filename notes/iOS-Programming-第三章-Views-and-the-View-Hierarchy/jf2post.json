{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003ch2 id=\"视图和视图层级\"\u003e视图和视图层级\u003c/h2\u003e\n\u003chr\u003e\n\u003ch2 id=\"视图基础\"\u003e视图基础\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e视图是\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eUIView\u003c/strong\u003e 的一个实例, 或它的一个子类\u003c/li\u003e\n\u003cli\u003e视图知道怎么绘制自己\u003c/li\u003e\n\u003cli\u003e能处理\u003cstrong\u003e事件\u003c/strong\u003e, 例如触摸(touches)\u003c/li\u003e\n\u003cli\u003e视图存在于视图层级中, 它的根是程序的窗口\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"视图层级\"\u003e视图层级\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e每个应用程序都有一个 \u003cstrong\u003eUIWindow\u003c/strong\u003e 的单个实例用作程序中所有视图的容器。\u003cstrong\u003eUIWindow\u003c/strong\u003e 是 \u003cstrong\u003eUIView\u003c/strong\u003e 的子类, 所以窗口自己也是一个视图。窗口在程序启动时被创建。一旦窗口创建完成, 其它视图就会被添加到窗口上。\u003c/p\u003e\n\u003cp\u003e当其它视图被添加到窗口中时,  它就是窗口的子视图。窗口的子视图还可以有子视图, 结果就是视图对象的层级, 而 window 窗口是它们的根(root)。\u003c/p\u003e\n\u003cp\u003e一旦视图层级创建完成, 它会被画到屏幕上。这个过程可以被分为2步:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e视图层级中的每个视图, 包括窗口, 绘制自己。它们把自己渲染到它的图层上(layers), 你可以把 layers 看作一张位图。（layer 是 \u003cstrong\u003eCALayer\u003c/strong\u003e 的一个实例）\u003c/li\u003e\n\u003cli\u003e所有视图的 layers 被组合到屏幕上\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"视图和-frames\"\u003e视图和 Frames\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e当你用程序初始化一个视图时, 使用 \u003cstrong\u003einit(frame:)\u003c/strong\u003e 指定初始化函数。(designated initializer) 这个函数接收一个参数, 即 \u003cstrong\u003eCGRect\u003c/strong\u003e , 它会变成视图的 frame, 即\u003cstrong\u003eUIView\u003c/strong\u003e 的一个属性。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eframe\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCGRect\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e视图的frame 指定了视图的大小和它相对于父视图的位置。因为视图的大小总是由它的 frame 指定, 视图的形状总是矩形。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCGRect\u003c/strong\u003e 包含成员 \u003ccode\u003eorigin\u003c/code\u003e 和  \u003ccode\u003esize\u003c/code\u003e。\u003ccode\u003eorigin\u003c/code\u003e 是类型为 \u003cstrong\u003eCGPoint\u003c/strong\u003e 的结构体, 它包含两个 \u003cstrong\u003eCGFloat\u003c/strong\u003e 属性： x 和 y。 \u003ccode\u003esize\u003c/code\u003e是类型为 \u003cstrong\u003eCGSize\u003c/strong\u003e 的结构体, 它包含两个 \u003cstrong\u003eCGFloat\u003c/strong\u003e 属性： width 和 height。\u003c/p\u003e\n\u003cp\u003e在 Xcode 中新建一个叫做 WorldTrotter 的项目, 删除 ViewController.swift 中的其它方法, 只保留如下结构:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eimport\u003c/span\u003e \u003cspan class=\"nc\"\u003eUIKit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eViewController\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eUIViewController\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在视图控制器的 view 被载入到内存中之后, 它的 \u003cstrong\u003eviewDidLoad\u003c/strong\u003e 方法会被调用。这个方法给了你自定义视图层级的机会, 所以那是一个添加你实际视图的好地方。\u003c/p\u003e\n\u003cp\u003e在 ViewController.swift 中重写 \u003cstrong\u003eviewDidLoad\u003c/strong\u003e 方法。创建一个 \u003cstrong\u003eCGRect\u003c/strong\u003e 作为 \u003cstrong\u003eUIView\u003c/strong\u003e 的 frame。然后创建一个 \u003cstrong\u003eUIView\u003c/strong\u003e 的实例, 并设置它的 backgroundColor 属性为蓝色。最后, 把 \u003cstrong\u003eUIView\u003c/strong\u003e 作为视图控制器的 view 的子视图添加上去以使它成为视图层级的一部分。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eimport\u003c/span\u003e \u003cspan class=\"nc\"\u003eUIKit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eViewController\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eUIViewController\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003eoverride\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eviewDidLoad\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eviewDidLoad\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efirstFrame\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCGRect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e160\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e240\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e150\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efirstView\u003c/span\u003e  \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUIView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eframe\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003efirstFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003efirstView\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUIColor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblueColor\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eview\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddSubview\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efirstView\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e为了创建一个 \u003cstrong\u003eCGRect\u003c/strong\u003e, 你要使用它的构造函数并为 origin.x 、 origin.y、size.width、size.height 传入值。\u003c/p\u003e\n\u003cp\u003e为了设置 backgroundColor, 你要使用 \u003cstrong\u003eUIColor\u003c/strong\u003e 的类方法 \u003cstrong\u003eblueColor()\u003c/strong\u003e。这是一个初始化 \u003cstrong\u003eUIColor\u003c/strong\u003e 实例为蓝色的便利方法。有很多 \u003cstrong\u003eUIColor\u003c/strong\u003e 便利方法用于普通颜色, 例如 \u003cstrong\u003egreenColor()\u003c/strong\u003e、\u003cstrong\u003eblackColor()\u003c/strong\u003e 和 \u003cstrong\u003eclearColor()\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e构建并运行该程序(Command-R)。 你会看到一个蓝色的矩形, 它就是 \u003cstrong\u003eUIView\u003c/strong\u003e 的一个实例。 frame 中的这些值都是点(points), 而不是像素。如果那些值是像素, 则它们在不同分辨率的设备之间会不一致(例如 Retina vs. 非 Retina)。根据显示器中像素的多少, 点也会表示多少数量的像素。尺寸、位置、线和曲线总是以点来描述的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUIView\u003c/strong\u003e 的每个实例都有一个 \u003cem\u003esuperview\u003c/em\u003e 属性。当你添加一个视图作为另一个视图的子视图时, 反转的关系就会自动建立。这时, \u003cstrong\u003eUIView\u003c/strong\u003e 的 \u003cem\u003esuperview\u003c/em\u003e 就是 \u003cstrong\u003eUIWindow\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e让我们测试下视图层级。首先, 在 ViewController.swift  中创建另外一个 \u003cstrong\u003eUIView\u003c/strong\u003e 实例, 使用不同的 frame 和背景色。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eimport\u003c/span\u003e \u003cspan class=\"nc\"\u003eUIKit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eViewController\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eUIViewController\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003eoverride\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eviewDidLoad\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eviewDidLoad\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efirstFrame\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCGRect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e160\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e240\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e150\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efirstView\u003c/span\u003e  \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUIView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eframe\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003efirstFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003efirstView\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUIColor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblueColor\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eview\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddSubview\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efirstView\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esecondFrame\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCGRect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esecondView\u003c/span\u003e  \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUIView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eframe\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esecondFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003esecondView\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUIColor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreenColor\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eview\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddSubview\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esecondView\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在我们调整一下视图层级。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esecondView\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUIView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eframe\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esecondFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esecondView\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUIColor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreenColor\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003efirstView\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddSubview\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esecondView\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在绿色视图在蓝色视图里面了。\u003c/p\u003e\n\u003ch2 id=\"自动布局\"\u003e自动布局\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e默认地, 每个视图有一个对齐矩形, 并且每个视图层级都使用自动布局。\u003c/p\u003e\n\u003cp\u003e对齐矩形和 frame 很相似。实际上这两个矩形经常是相似的。而 frame 包围整个视图, 对齐矩形只包围你想用于对齐意图的内容。图 3.17 展示了它俩之间的不同。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://upload-images.jianshu.io/upload_images/326727-8b3f03d4c19214d5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e你不能直接定义 view 的对齐矩形。你没有足够的信息(例如屏幕尺寸)来做到那。相反, 你提供了一系列\u003cem\u003e约束\u003c/em\u003e。 放在一块儿, 这些约束能使系统确定布局属性, 因此还有对齐矩形, 对于视图层级中的每个视图。\u003c/p\u003e\n\u003ch2 id=\"约束\"\u003e约束\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e不是每个布局属性都需要一个约束。如果你指定了最边距和视图的宽度, 那么视图的右边距就自动为了计算好了。\u003c/p\u003e\n\u003cp\u003e描述一个跟屏幕尺寸无关的视图的约束, 例如你想要你最上面的 label 的约束为:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e距离屏幕最上边为 8 个点\u003c/li\u003e\n\u003cli\u003e在它的父视图中水平居中\u003c/li\u003e\n\u003cli\u003e跟它的文本同高同宽\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e要在 \u003cstrong\u003eInterface Builder\u003c/strong\u003e 中把这个描述转换为约束, 懂得怎么找到视图的最近的兄弟视图会有所帮助。最近的邻居是在指定方向上最近的兄弟视图。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://upload-images.jianshu.io/upload_images/326727-0932135cafccbfa3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果一个视图在指定方向上没有任何兄弟视图, 那么最近的邻居就是它的父视图, 也就是作为它的容器。\u003c/p\u003e\n\u003cp\u003e现在你能讲清楚那个 Label 的约束了:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e该 Label 的上边距应该距离它的最近的邻居(就是它的容器 — \u003cstrong\u003eViewController\u003c/strong\u003e 中的 \u003cem\u003eview\u003c/em\u003e) 8 个点。\u003c/li\u003e\n\u003cli\u003e该 Label 的中心应该和它的父视图的中心一样。\u003c/li\u003e\n\u003cli\u003e该 Label 的宽度应该和以文本字体尺寸渲染的文本的宽度一样\u003c/li\u003e\n\u003cli\u003e该 Label 的高度应该和以文本字体尺寸渲染的文本的高度相同。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"固有内容尺寸\"\u003e固有内容尺寸\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e视图的固有内容尺寸作为显式的宽和高约束。如果你不指定明确测定宽度的约束, 那么视图的宽就是它固有的宽度。这同样适用于高度。\u003c/p\u003e\n\u003cp\u003e现在我们对这 5 个 Labels 进行自动布局。\u003c/p\u003e\n\u003cp\u003e选择最上面的那个 Label。 打开 \u003cstrong\u003eAlign\u003c/strong\u003e 菜单并选择 \u003cstrong\u003eHorizontally in Container\u003c/strong\u003e, 其中约束为 0。确保 \u003cstrong\u003eUpdate Frames\u003c/strong\u003e 没有被选中; 记住不要在视图没有足够的约束之前更新 frame, 而这一个约束肯定不会提供足够的信息来计算对齐矩形。继续并添加一个约束。\u003c/p\u003e\n\u003cp\u003e在画布上选择所有 5 个 Labels。同时给多个视图添加约束也很方便。 打开 \u003cstrong\u003ePin\u003c/strong\u003e 菜单并做如下选择:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e选择最上面的 \u003cem\u003etop\u003c/em\u003e 上边距, 设置它的约束为 8\u003c/li\u003e\n\u003cli\u003e从 \u003cstrong\u003eAlign\u003c/strong\u003e 菜单中, 选择 \u003cstrong\u003eHorizontal Centers\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e从 \u003cstrong\u003eUpdates Frames\u003c/strong\u003e 菜单中, 选择 \u003cstrong\u003eItems of New Constraints\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e约束设置完成后的界面如下:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://upload-images.jianshu.io/upload_images/326727-8440078f5bb17b53.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"\u003e\u003c/p\u003e\n","text":"视图和视图层级 视图基础 视图是\nUIView 的一个实例, 或它的一个子类 视图知道怎么绘制自己 能处理事件, 例如触摸(touches) 视图存在于视图层级中, 它的根是程序的窗口 视图层级 每个应用程序都有一个 UIWindow 的单个实例用作程序中所有视图的容器。UIWindow 是 UIView 的子类, 所以窗口自己也是一个视图。窗口在程序启动时被创建。一旦窗口创建完成, 其它视图就会被添加到窗口上。\n当其它视图被添加到窗口中时, 它就是窗口的子视图。窗口的子视图还可以有子视图, 结果就是视图对象的层级, 而 window 窗口是它们的根(root)。\n一旦视图层级创建完成, 它会被画到屏幕上。这个过程可以被分为2步:\n视图层级中的每个视图, 包括窗口, 绘制自己。它们把自己渲染到它的图层上(layers), 你可以把 layers 看作一张位图。（layer 是 CALayer 的一个实例） 所有视图的 layers 被组合到屏幕上 视图和 Frames 当你用程序初始化一个视图时, 使用 init(frame:) 指定初始化函数。(designated initializer) 这个函数接收一个参数, 即 CGRect , 它会变成视图的 frame, 即UIView 的一个属性。\nvar frame: CGRect 视图的frame 指定了视图的大小和它相对于父视图的位置。因为视图的大小总是由它的 frame 指定, 视图的形状总是矩形。\nCGRect 包含成员 origin 和 size。origin 是类型为 CGPoint 的结构体, 它包含两个 CGFloat 属性： x 和 y。 size是类型为 CGSize 的结构体, 它包含两个 CGFloat 属性： width 和 height。\n在 Xcode 中新建一个叫做 WorldTrotter 的项目, 删除 ViewController.swift 中的其它方法, 只保留如下结构:\nimport UIKit class ViewController: UIViewController { } 在视图控制器的 view 被载入到内存中之后, 它的 viewDidLoad 方法会被调用。这个方法给了你自定义视图层级的机会, 所以那是一个添加你实际视图的好地方。\n在 ViewController.swift 中重写 viewDidLoad 方法。创建一个 CGRect 作为 UIView 的 frame。然后创建一个 UIView 的实例, 并设置它的 backgroundColor 属性为蓝色。最后, 把 UIView 作为视图控制器的 view 的子视图添加上去以使它成为视图层级的一部分。\nimport UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let firstFrame = CGRect(x: 160, y: 240, width: 100, height: 150) let firstView = UIView(frame: firstFrame) firstView.backgroundColor = UIColor.blueColor() view.addSubview(firstView) } } 为了创建一个 CGRect, 你要使用它的构造函数并为 origin.x 、 origin.y、size.width、size.height 传入值。\n为了设置 backgroundColor, 你要使用 UIColor 的类方法 blueColor()。这是一个初始化 UIColor 实例为蓝色的便利方法。有很多 UIColor 便利方法用于普通颜色, 例如 greenColor()、blackColor() 和 clearColor()。\n构建并运行该程序(Command-R)。 你会看到一个蓝色的矩形, 它就是 UIView 的一个实例。 frame 中的这些值都是点(points), 而不是像素。如果那些值是像素, 则它们在不同分辨率的设备之间会不一致(例如 Retina vs. 非 Retina)。根据显示器中像素的多少, 点也会表示多少数量的像素。尺寸、位置、线和曲线总是以点来描述的。\nUIView 的每个实例都有一个 superview 属性。当你添加一个视图作为另一个视图的子视图时, 反转的关系就会自动建立。这时, UIView 的 superview 就是 UIWindow。\n让我们测试下视图层级。首先, 在 ViewController.swift 中创建另外一个 UIView 实例, 使用不同的 frame 和背景色。\nimport UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let firstFrame = CGRect(x: 160, y: 240, width: 100, height: 150) let firstView = UIView(frame: firstFrame) firstView.backgroundColor = UIColor.blueColor() view.addSubview(firstView) let secondFrame = CGRect(x: 20, y: 30, width: 50, height: 50) let secondView = UIView(frame: secondFrame) secondView.backgroundColor = UIColor.greenColor() view.addSubview(secondView) } } 现在我们调整一下视图层级。\n... let secondView = UIView(frame: secondFrame) secondView.backgroundColor = UIColor.greenColor() firstView.addSubview(secondView) 现在绿色视图在蓝色视图里面了。\n自动布局 默认地, 每个视图有一个对齐矩形, 并且每个视图层级都使用自动布局。\n对齐矩形和 frame 很相似。实际上这两个矩形经常是相似的。而 frame 包围整个视图, 对齐矩形只包围你想用于对齐意图的内容。图 3.17 展示了它俩之间的不同。\n你不能直接定义 view 的对齐矩形。你没有足够的信息(例如屏幕尺寸)来做到那。相反, 你提供了一系列约束。 放在一块儿, 这些约束能使系统确定布局属性, 因此还有对齐矩形, 对于视图层级中的每个视图。\n约束 不是每个布局属性都需要一个约束。如果你指定了最边距和视图的宽度, 那么视图的右边距就自动为了计算好了。\n描述一个跟屏幕尺寸无关的视图的约束, 例如你想要你最上面的 label 的约束为:\n距离屏幕最上边为 8 个点 在它的父视图中水平居中 跟它的文本同高同宽 要在 Interface Builder 中把这个描述转换为约束, 懂得怎么找到视图的最近的兄弟视图会有所帮助。最近的邻居是在指定方向上最近的兄弟视图。\n如果一个视图在指定方向上没有任何兄弟视图, 那么最近的邻居就是它的父视图, 也就是作为它的容器。\n现在你能讲清楚那个 Label 的约束了:\n该 Label 的上边距应该距离它的最近的邻居(就是它的容器 — ViewController 中的 view) 8 个点。 该 Label 的中心应该和它的父视图的中心一样。 该 Label 的宽度应该和以文本字体尺寸渲染的文本的宽度一样 该 Label 的高度应该和以文本字体尺寸渲染的文本的高度相同。 固有内容尺寸 视图的固有内容尺寸作为显式的宽和高约束。如果你不指定明确测定宽度的约束, 那么视图的宽就是它固有的宽度。这同样适用于高度。\n现在我们对这 5 个 Labels 进行自动布局。\n选择最上面的那个 Label。 打开 Align 菜单并选择 Horizontally in Container, 其中约束为 0。确保 Update Frames 没有被选中; 记住不要在视图没有足够的约束之前更新 frame, 而这一个约束肯定不会提供足够的信息来计算对齐矩形。继续并添加一个约束。\n在画布上选择所有 5 个 Labels。同时给多个视图添加约束也很方便。 打开 Pin 菜单并做如下选择:\n选择最上面的 top 上边距, 设置它的约束为 8 从 Align 菜单中, 选择 Horizontal Centers 从 Updates Frames 菜单中, 选择 Items of New Constraints 约束设置完成后的界面如下:\n"},"name":"视图和视图层级","published":"2015-10-01T16:16:21Z","summary":"视图和视图层级 视图基础 视图是\nUIView 的一个实例, 或它的一个子类 视图知道怎么绘制自己 能处理事件, 例如触摸(touches) 视图存在于视图层级中, 它的根是程序的窗口 视图层级 每个应用程序都有一个 UIWindow 的单个实例用作程序中所有视图的容器。UIWindow 是 UIView 的子类, 所以窗口自己也是一个视图。窗口在程序启动时被创建。一旦窗口创建完成, 其它视图就会被添加到窗口上。\n当其它视图被添加到窗口中时, 它就是窗口的子视图。窗口的子视图还可以有子视图, 结果就是视图对象的层级, 而 window 窗口是它们的根(root)。\n一旦视图层级创建完成, 它会被画到屏幕上。这个过程可以被分为2步:\n视图层级中的每个视图, 包括窗口, 绘制自己。它们把自己渲染到它的图层上(layers), 你可以把 layers 看作一张位图。（layer 是 CALayer 的一个实例） 所有视图的 layers 被组合到屏幕上 视图和 Frames 当你用程序初始化一个视图时, 使用 init(frame:) 指定初始化函数。(designated initializer) 这个函数接收一个参数, 即 CGRect , 它会变成视图的 frame, 即UIView 的一个属性。\nvar frame: CGRect 视图的frame 指定了视图的大小和它相对于父视图的位置。因为视图的大小总是由它的 frame 指定, 视图的形状总是矩形。\nCGRect 包含成员 origin 和 size。origin 是类型为 CGPoint 的结构体, 它包含两个 CGFloat 属性： x 和 y。 size是类型为 CGSize 的结构体, 它包含两个 CGFloat 属性： width 和 height。","type":"entry","url":"https://ohmycloud.github.io/notes/ios-programming-%E7%AC%AC%E4%B8%89%E7%AB%A0-views-and-the-view-hierarchy/"}