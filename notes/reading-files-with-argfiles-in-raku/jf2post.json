{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003cp\u003e欢迎来到\u003cstrong\u003eRaku One-Liner Advent Calendar的\u003c/strong\u003e第\u003ca href=\"https://raku.online/2018/12/24/reading-file-contents-with-argfiles-in-perl-6/\"\u003e24\u003c/a\u003e天！\u003c/p\u003e\n\u003cp\u003e在前几天，我们正在读取文本文件，因此讨论 \u003ca href=\"https://docs.raku.org/language/variables#index-entry-%24%2AARGFILES\"\u003e\u003ccode\u003e$*ARGFILES\u003c/code\u003e\u003c/a\u003e是合乎逻辑的，这是一个内置的动态变量，在处理多个输入文件时可能很方便。\u003c/p\u003e\n\u003cp\u003e如何读取命令行中传递的两个或多个文件？\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ raku work.pl a.txt b.txt\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果您需要将所有文件一起处理，就像它们是单个数据源一样，您可以要求我们今天的变量以单行方式完成工作：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e.say for $*ARGFILES.lines\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在程序内部，您不必考虑循环文件; \u003ccode\u003e$*ARGFILES\u003c/code\u003e将自动为您做到这一点。\u003c/p\u003e\n\u003cp\u003e如果命令行中没有文件，则该变量将附加到 STDIN：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ cat a.txt b.txt | raku work.pl \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e确实很方便，不是吗？\u003c/p\u003e\n\u003ch2 id=\"6d和main\"\u003e6.d和MAIN\u003c/h2\u003e\n\u003cp\u003e如果你想在更大的程序中使用它，我也必须警告你。考虑以下程序：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eMAIN\u003c/span\u003e\u003cspan class=\"p\"\u003e(*@files) {\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esay\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e$\u003c/span\u003e\u003cspan class=\"err\"\u003e*\u003c/span\u003e\u003cspan class=\"nv\"\u003eARGFILES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elines\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Perl  6.d 中, \u003ccode\u003e$*ARGFILES\u003c/code\u003e 在MAIN子例程内部和它之外的工作方式不同。\u003c/p\u003e\n\u003cp\u003e这个程序将完全适用于 Raku.c，但不适用于Raku.d. 换句话说，在\u003ca href=\"https://rakudo.org/files\"\u003eRakudo Star\u003c/a\u003e中，包括版本2018.10，\u003ccode\u003e$*ARGFILES\u003c/code\u003e 在命令行中处理文件名，但从 Rakudo Star 2018.12 开始，如果在 \u003ccode\u003eMAIN\u003c/code\u003e 中使用它，它将始终连接到 \u003ccode\u003e$*IN\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这就是今天的 advent 文章的结束，几乎是今年整个日历的结束。不过，明天再来！\u003c/p\u003e\n","text":"欢迎来到Raku One-Liner Advent Calendar的第24天！\n在前几天，我们正在读取文本文件，因此讨论 $*ARGFILES是合乎逻辑的，这是一个内置的动态变量，在处理多个输入文件时可能很方便。\n如何读取命令行中传递的两个或多个文件？\n$ raku work.pl a.txt b.txt 如果您需要将所有文件一起处理，就像它们是单个数据源一样，您可以要求我们今天的变量以单行方式完成工作：\n.say for $*ARGFILES.lines 在程序内部，您不必考虑循环文件; $*ARGFILES将自动为您做到这一点。\n如果命令行中没有文件，则该变量将附加到 STDIN：\n$ cat a.txt b.txt | raku work.pl 确实很方便，不是吗？\n6.d和MAIN 如果你想在更大的程序中使用它，我也必须警告你。考虑以下程序：\nsub MAIN(*@files) { .say for $*ARGFILES.lines; } 在 Perl 6.d 中, $*ARGFILES 在MAIN子例程内部和它之外的工作方式不同。\n这个程序将完全适用于 Raku.c，但不适用于Raku.d. 换句话说，在Rakudo Star中，包括版本2018.10，$*ARGFILES 在命令行中处理文件名，但从 Rakudo Star 2018.12 开始，如果在 MAIN 中使用它，它将始终连接到 $*IN。\n这就是今天的 advent 文章的结束，几乎是今年整个日历的结束。不过，明天再来！\n"},"name":"🎄 24/25. 在 Raku 中用 $*ARGFILES 读取文件","published":"2018-12-24T10:06:06Z","summary":"欢迎来到Raku One-Liner Advent Calendar的第24天！\n在前几天，我们正在读取文本文件，因此讨论 $*ARGFILES是合乎逻辑的，这是一个内置的动态变量，在处理多个输入文件时可能很方便。\n如何读取命令行中传递的两个或多个文件？\n$ raku work.pl a.txt b.txt 如果您需要将所有文件一起处理，就像它们是单个数据源一样，您可以要求我们今天的变量以单行方式完成工作：\n.say for $*ARGFILES.lines 在程序内部，您不必考虑循环文件; $*ARGFILES将自动为您做到这一点。\n如果命令行中没有文件，则该变量将附加到 STDIN：\n$ cat a.txt b.txt | raku work.pl 确实很方便，不是吗？\n6.d和MAIN 如果你想在更大的程序中使用它，我也必须警告你。考虑以下程序：\nsub MAIN(*@files) { .say for $*ARGFILES.lines; } 在 Perl 6.d 中, $*ARGFILES 在MAIN子例程内部和它之外的工作方式不同。\n这个程序将完全适用于 Raku.c，但不适用于Raku.d. 换句话说，在Rakudo Star中，包括版本2018.10，$*ARGFILES 在命令行中处理文件名，但从 Rakudo Star 2018.12 开始，如果在 MAIN 中使用它，它将始终连接到 $*IN。\n这就是今天的 advent 文章的结束，几乎是今年整个日历的结束。不过，明天再来！","type":"entry","url":"https://ohmycloud.github.io/notes/reading-files-with-argfiles-in-raku/"}