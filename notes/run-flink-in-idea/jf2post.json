{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003cp\u003e我们需要把 Flink 安装路径中的 \u003cstrong\u003eopt\u003c/strong\u003e 和 \u003cstrong\u003elib\u003c/strong\u003e 添加到项目的 Libraries 中。\u003c/p\u003e\n\u003cp\u003e依次点击 File -\u0026gt; Project Structure -\u0026gt; Project Settings -\u0026gt; Libraries,  然后点击右侧栏中的加号 \u003ccode\u003e➕\u003c/code\u003e, 选择 Java, 在弹出的对话框中选择 Flink 安装路径。\u003c/p\u003e\n\u003cp\u003e我的 Flink 安装在 /usr/local/Cellar/apache-flink/1.8.0/libexec, 默认是隐藏的, 所以要点击 Macintosh HD, 同时按住 Command + Shift + . 即可显示出隐藏目录, 分别添加 opt 目录和 lib 目录到相应的模块的 Libraries 中。这样就可以在 IDEA 中直接运行 Flink 程序了。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etree /usr/local/Cellar/apache-flink/1.8.0/libexec\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e├── bin\n│   ├── config.sh\n│   ├── start-cluster.sh\n│   ├── ...\n├── conf\n│   ├── flink-conf.yaml\n│   ├── log4j-cli.properties\n│   ├── ...\n├── lib\n│   ├── flink-dist_2.11-1.8.0.jar\n│   ├── log4j-1.2.17.jar\n│   └── slf4j-log4j12-1.7.15.jar\n├── libexec\n│   ├── config.sh\n│   ├── flink\n│   ├── standalone-job.sh\n│   ├── start-cluster.sh\n│   └── ...\n├── log\n│   ├── flink-ohmycloud-client-summer.log\n│   ├── flink-root-standalonesession-0-summer.log\n│   ├── ...\n└── opt\n    ├── flink-cep-scala_2.11-1.8.0.jar\n    ├── flink-cep_2.11-1.8.0.jar\n    ├── flink-gelly-scala_2.11-1.8.0.jar\n    ├── flink-gelly_2.11-1.8.0.jar\n    ├── flink-metrics-datadog-1.8.0.jar\n    ├── flink-metrics-graphite-1.8.0.jar\n    ├── flink-metrics-influxdb-1.8.0.jar\n    ├── flink-metrics-prometheus-1.8.0.jar\n    ├── flink-metrics-slf4j-1.8.0.jar\n    ├── flink-metrics-statsd-1.8.0.jar\n    ├── flink-ml_2.11-1.8.0.jar\n    ├── flink-oss-fs-hadoop-1.8.0.jar\n    ├── flink-python_2.11-1.8.0.jar\n    ├── flink-queryable-state-runtime_2.11-1.8.0.jar\n    ├── flink-s3-fs-hadoop-1.8.0.jar\n    ├── flink-s3-fs-presto-1.8.0.jar\n    ├── flink-sql-client_2.11-1.8.0.jar\n    ├── flink-streaming-python_2.11-1.8.0.jar\n    ├── flink-swift-fs-hadoop-1.8.0.jar\n    └── flink-table_2.11-1.8.0.jar\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们跑一个程序试试:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e \u003cspan class=\"nn\"\u003edatastream.org.wm.dtc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.flink.api.common.serialization.SimpleStringSchema\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.flink.streaming.api.scala.\u003c/span\u003e\u003cspan class=\"o\"\u003e{\u003c/span\u003e\u003cspan class=\"nc\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nc\"\u003eStreamExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.flink.streaming.api.scala._\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eobject\u003c/span\u003e \u003cspan class=\"nc\"\u003eKafkaProducer\u003c/span\u003e \u003cspan class=\"k\"\u003eextends\u003c/span\u003e \u003cspan class=\"nc\"\u003eApp\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eStreamExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetExecutionEnvironment\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eDataStream\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efromElements\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u0026#34;{\u0026#34;vin\u0026#34;:\u0026#34;LMGAJ1S85J1003265\u0026#34;,\u0026#34;vintype\u0026#34;:\u0026#34;A2APHEV\u0026#34;,\u0026#34;signals\u0026#34;:\u0026#34;{\\\u0026#34;时间\\\u0026#34;:20190510172335,\\\u0026#34;数据头\\\u0026#34;:{\\\u0026#34;answerFlag\\\u0026#34;:\\\u0026#34;车载终端控制命令\\\u0026#34;,\\\u0026#34;dataUnitLen\\\u0026#34;:299,\\\u0026#34;orderFlag\\\u0026#34;:\\\u0026#34;实时信息上传\\\u0026#34;,\\\u0026#34;time\\\u0026#34;:20190510172335,\\\u0026#34;vin\\\u0026#34;:\\\u0026#34;LMGAJ1S85J1003265\\\u0026#34;}}\u0026#34;}\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003emyProducer\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eFlinkKafkaProducer\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e](\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;localhost:9092\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eSimpleStringSchema\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddSink\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emyProducer\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecute\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;start kafka producer\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e直接在 IDEA 中运行, 就往 kafka 里面发送了一条数据。\u003c/p\u003e\n","text":"我们需要把 Flink 安装路径中的 opt 和 lib 添加到项目的 Libraries 中。\n依次点击 File -\u0026gt; Project Structure -\u0026gt; Project Settings -\u0026gt; Libraries, 然后点击右侧栏中的加号 ➕, 选择 Java, 在弹出的对话框中选择 Flink 安装路径。\n我的 Flink 安装在 /usr/local/Cellar/apache-flink/1.8.0/libexec, 默认是隐藏的, 所以要点击 Macintosh HD, 同时按住 Command + Shift + . 即可显示出隐藏目录, 分别添加 opt 目录和 lib 目录到相应的模块的 Libraries 中。这样就可以在 IDEA 中直接运行 Flink 程序了。\ntree /usr/local/Cellar/apache-flink/1.8.0/libexec ├── bin │ ├── config.sh │ ├── start-cluster.sh │ ├── ... ├── conf │ ├── flink-conf.yaml │ ├── log4j-cli.properties │ ├── ... ├── lib │ ├── flink-dist_2.11-1.8.0.jar │ ├── log4j-1.2.17.jar │ └── slf4j-log4j12-1.7.15.jar ├── libexec │ ├── config.sh │ ├── flink │ ├── standalone-job.sh │ ├── start-cluster.sh │ └── ... ├── log │ ├── flink-ohmycloud-client-summer.log │ ├── flink-root-standalonesession-0-summer.log │ ├── ... └── opt ├── flink-cep-scala_2.11-1.8.0.jar ├── flink-cep_2.11-1.8.0.jar ├── flink-gelly-scala_2.11-1.8.0.jar ├── flink-gelly_2.11-1.8.0.jar ├── flink-metrics-datadog-1.8.0.jar ├── flink-metrics-graphite-1.8.0.jar ├── flink-metrics-influxdb-1.8.0.jar ├── flink-metrics-prometheus-1.8.0.jar ├── flink-metrics-slf4j-1.8.0.jar ├── flink-metrics-statsd-1.8.0.jar ├── flink-ml_2.11-1.8.0.jar ├── flink-oss-fs-hadoop-1.8.0.jar ├── flink-python_2.11-1.8.0.jar ├── flink-queryable-state-runtime_2.11-1.8.0.jar ├── flink-s3-fs-hadoop-1.8.0.jar ├── flink-s3-fs-presto-1.8.0.jar ├── flink-sql-client_2.11-1.8.0.jar ├── flink-streaming-python_2.11-1.8.0.jar ├── flink-swift-fs-hadoop-1.8.0.jar └── flink-table_2.11-1.8.0.jar 我们跑一个程序试试:\npackage datastream.org.wm.dtc import org.apache.flink.api.common.serialization.SimpleStringSchema import org.apache.flink.streaming.api.scala.{DataStream, StreamExecutionEnvironment} import org.apache.flink.streaming.api.scala._ import org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer object KafkaProducer extends App { val env = StreamExecutionEnvironment.getExecutionEnvironment val stream: DataStream[String] = env.fromElements( \u0026#34;\u0026#34;\u0026#34;{\u0026#34;vin\u0026#34;:\u0026#34;LMGAJ1S85J1003265\u0026#34;,\u0026#34;vintype\u0026#34;:\u0026#34;A2APHEV\u0026#34;,\u0026#34;signals\u0026#34;:\u0026#34;{\\\u0026#34;时间\\\u0026#34;:20190510172335,\\\u0026#34;数据头\\\u0026#34;:{\\\u0026#34;answerFlag\\\u0026#34;:\\\u0026#34;车载终端控制命令\\\u0026#34;,\\\u0026#34;dataUnitLen\\\u0026#34;:299,\\\u0026#34;orderFlag\\\u0026#34;:\\\u0026#34;实时信息上传\\\u0026#34;,\\\u0026#34;time\\\u0026#34;:20190510172335,\\\u0026#34;vin\\\u0026#34;:\\\u0026#34;LMGAJ1S85J1003265\\\u0026#34;}}\u0026#34;}\u0026#34;\u0026#34;\u0026#34; ) val myProducer = new FlinkKafkaProducer[String]( \u0026#34;localhost:9092\u0026#34;, \u0026#34;test\u0026#34;, new SimpleStringSchema ) stream.addSink(myProducer) env.execute(\u0026#34;start kafka producer\u0026#34;) } 直接在 IDEA 中运行, 就往 kafka 里面发送了一条数据。\n"},"name":"在 IDEA 中运行 Flink 程序","published":"2019-05-14T21:22:28Z","summary":"我们需要把 Flink 安装路径中的 opt 和 lib 添加到项目的 Libraries 中。\n依次点击 File -\u0026gt; Project Structure -\u0026gt; Project Settings -\u0026gt; Libraries, 然后点击右侧栏中的加号 ➕, 选择 Java, 在弹出的对话框中选择 Flink 安装路径。\n我的 Flink 安装在 /usr/local/Cellar/apache-flink/1.8.0/libexec, 默认是隐藏的, 所以要点击 Macintosh HD, 同时按住 Command + Shift + . 即可显示出隐藏目录, 分别添加 opt 目录和 lib 目录到相应的模块的 Libraries 中。这样就可以在 IDEA 中直接运行 Flink 程序了。\ntree /usr/local/Cellar/apache-flink/1.8.0/libexec ├── bin │ ├── config.sh │ ├── start-cluster.sh │ ├── ... ├── conf │ ├── flink-conf.yaml │ ├── log4j-cli.","type":"entry","url":"http://localhost:1313/notes/run-flink-in-idea/"}