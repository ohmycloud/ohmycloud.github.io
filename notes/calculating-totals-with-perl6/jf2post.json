{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003cp\u003e欢迎来到\u003cstrong\u003eRaku One-Liner Advent Calendar的\u003c/strong\u003e第\u003ca href=\"https://raku.online/2018/12/23/compute-totals-with-perl-6/\"\u003e23\u003c/a\u003e天！今年年底是人们计算年度结果的时间，Raku 也可以帮助解决这个问题。\u003c/p\u003e\n\u003cp\u003e今天，我们将看到一个单行程序，用于计算表格列的总数。\u003c/p\u003e\n\u003cp\u003e这是文件中的一些示例数据：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e100.20 303.50 150.25 \n130.44 1505.12 36.41 \n200.12 305.60 78.12\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里是为每列打印三个数字总和的代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eput\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eZ\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"n\"\u003elines\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"n\"\u003ewords\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e该程序打印我们需要的数字：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e430.76 2114.22 264.78\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e从\u003ca href=\"https://raku.online/2018/12/22/reversing-a-file-with-perl-6/\"\u003e昨天的帖子\u003c/a\u003e的更新中，我们知道，裸\u003ccode\u003elines\u003c/code\u003e 和 \u003ccode\u003e$*IN.lines\u003c/code\u003e 是一样的，所以\u003ccode\u003elines.map\u003c/code\u003e在输入流中迭代所有行。然后将每一行拆分成由空格分隔的\u003ca href=\"https://docs.raku.org/routine/words\"\u003e单词\u003c/a\u003e子串。\u003c/p\u003e\n\u003cp\u003e解析输入数据的作业部分已完成。我们得到了许多与输入数据行相对应的序列。对于我们的示例文件，有如下内容：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e((\u0026#34;100.20\u0026#34;, \u0026#34;303.50\u0026#34;, \u0026#34;150.25\u0026#34;).Seq, (\u0026#34;130.44\u0026#34;, \u0026#34;1505.12\u0026#34;, \u0026#34;36.41\u0026#34;).Seq, (\u0026#34;200.12\u0026#34;, \u0026#34;305.60\u0026#34;, \u0026#34;78.12\u0026#34;).Seq).Seq\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e现在，将每个序列的第一个元素，每个序列的第二个元素等相加起来。\u003ca href=\"https://raku.online/2018/12/10/reduction-operator-in-perl-6/\"\u003e化简运算符\u003c/a\u003e和\u003ca href=\"https://raku.online/2018/10/31/zip-operator-z-in-perl-6/\"\u003ezip元运算符\u003c/a\u003e的组合只需要四个代码字符即可完成所有工作：\u003ccode\u003e[Z+]\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e此时，我们有一个化简后的序列：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e（430.76,2114.22,264.78）.Seq\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最后一个简单的步骤是使用 \u003ca href=\"https://docs.raku.org/routine/put\"\u003e\u003ccode\u003eput\u003c/code\u003e 例程\u003c/a\u003e打印值。如果你昨天做了功课，你会知道\u003ccode\u003esay\u003c/code\u003e使用\u003ccode\u003egist\u003c/code\u003e方法（在序列周围添加括号）来显示结果，而\u003ccode\u003eput\u003c/code\u003e只是使用\u003ccode\u003eStr\u003c/code\u003e方法打印值。\u003c/p\u003e\n\u003ch2 id=\"还有\"\u003e还有\u003c/h2\u003e\n\u003cp\u003e让我们在脚本中添加一些字符来演示如何跳过第一列，例如，跳过包含月份名称的列：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eJan 100.20 303.50 150.25 \nFeb 130.44 1505.12 36.41 \nMar 200.12 305.60 78.12\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e您只需要创建一个切片并选择除第一列之外的所有列：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eput\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;Total \u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eZ\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"n\"\u003elines\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"n\"\u003ewords\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..*\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如您所见，我们甚至不需要自己计算列数。\u003ccode\u003e1..*\u003c/code\u003e 范围可以完成这样的工作。\u003c/p\u003e\n\u003cp\u003e这就是今天的 advent 文章的结尾，所以明天再来吧！\u003c/p\u003e\n","text":"欢迎来到Raku One-Liner Advent Calendar的第23天！今年年底是人们计算年度结果的时间，Raku 也可以帮助解决这个问题。\n今天，我们将看到一个单行程序，用于计算表格列的总数。\n这是文件中的一些示例数据：\n100.20 303.50 150.25 130.44 1505.12 36.41 200.12 305.60 78.12 这里是为每列打印三个数字总和的代码：\nput [Z+] lines.map: *.words 该程序打印我们需要的数字：\n430.76 2114.22 264.78 从昨天的帖子的更新中，我们知道，裸lines 和 $*IN.lines 是一样的，所以lines.map在输入流中迭代所有行。然后将每一行拆分成由空格分隔的单词子串。\n解析输入数据的作业部分已完成。我们得到了许多与输入数据行相对应的序列。对于我们的示例文件，有如下内容：\n((\u0026#34;100.20\u0026#34;, \u0026#34;303.50\u0026#34;, \u0026#34;150.25\u0026#34;).Seq, (\u0026#34;130.44\u0026#34;, \u0026#34;1505.12\u0026#34;, \u0026#34;36.41\u0026#34;).Seq, (\u0026#34;200.12\u0026#34;, \u0026#34;305.60\u0026#34;, \u0026#34;78.12\u0026#34;).Seq).Seq 现在，将每个序列的第一个元素，每个序列的第二个元素等相加起来。化简运算符和zip元运算符的组合只需要四个代码字符即可完成所有工作：[Z+]。\n此时，我们有一个化简后的序列：\n（430.76,2114.22,264.78）.Seq 最后一个简单的步骤是使用 put 例程打印值。如果你昨天做了功课，你会知道say使用gist方法（在序列周围添加括号）来显示结果，而put只是使用Str方法打印值。\n还有 让我们在脚本中添加一些字符来演示如何跳过第一列，例如，跳过包含月份名称的列：\nJan 100.20 303.50 150.25 Feb 130.44 1505.12 36.41 Mar 200.12 305.60 78.12 您只需要创建一个切片并选择除第一列之外的所有列：\nput \u0026#39;Total \u0026#39;, [Z+] lines.map: *.words[1..*] 如您所见，我们甚至不需要自己计算列数。1..* 范围可以完成这样的工作。\n这就是今天的 advent 文章的结尾，所以明天再来吧！\n"},"name":"🎄 23/25. 用 Raku 计算总数","published":"2018-12-23T08:44:56Z","summary":"欢迎来到Raku One-Liner Advent Calendar的第23天！今年年底是人们计算年度结果的时间，Raku 也可以帮助解决这个问题。\n今天，我们将看到一个单行程序，用于计算表格列的总数。\n这是文件中的一些示例数据：\n100.20 303.50 150.25 130.44 1505.12 36.41 200.12 305.60 78.12 这里是为每列打印三个数字总和的代码：\nput [Z+] lines.map: *.words 该程序打印我们需要的数字：\n430.76 2114.22 264.78 从昨天的帖子的更新中，我们知道，裸lines 和 $*IN.lines 是一样的，所以lines.map在输入流中迭代所有行。然后将每一行拆分成由空格分隔的单词子串。\n解析输入数据的作业部分已完成。我们得到了许多与输入数据行相对应的序列。对于我们的示例文件，有如下内容：\n((\u0026#34;100.20\u0026#34;, \u0026#34;303.50\u0026#34;, \u0026#34;150.25\u0026#34;).Seq, (\u0026#34;130.44\u0026#34;, \u0026#34;1505.12\u0026#34;, \u0026#34;36.41\u0026#34;).Seq, (\u0026#34;200.12\u0026#34;, \u0026#34;305.60\u0026#34;, \u0026#34;78.12\u0026#34;).Seq).Seq 现在，将每个序列的第一个元素，每个序列的第二个元素等相加起来。化简运算符和zip元运算符的组合只需要四个代码字符即可完成所有工作：[Z+]。\n此时，我们有一个化简后的序列：\n（430.76,2114.22,264.78）.Seq 最后一个简单的步骤是使用 put 例程打印值。如果你昨天做了功课，你会知道say使用gist方法（在序列周围添加括号）来显示结果，而put只是使用Str方法打印值。\n还有 让我们在脚本中添加一些字符来演示如何跳过第一列，例如，跳过包含月份名称的列：\nJan 100.20 303.50 150.25 Feb 130.44 1505.12 36.41 Mar 200.12 305.60 78.12 您只需要创建一个切片并选择除第一列之外的所有列：\nput \u0026#39;Total \u0026#39;, [Z+] lines.map: *.words[1..*] 如您所见，我们甚至不需要自己计算列数。1..* 范围可以完成这样的工作。\n这就是今天的 advent 文章的结尾，所以明天再来吧！","type":"entry","url":"https://ohmycloud.github.io/notes/calculating-totals-with-perl6/"}