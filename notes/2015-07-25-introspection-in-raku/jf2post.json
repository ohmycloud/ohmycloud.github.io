{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003cp\u003eRaku 支持\u0026quot;泛型, roles 和 多重分发\u0026quot;, 它们都是很好的特点, 并且已经在其它 advent calendar 中发布过了。\u003c/p\u003e\n\u003cp\u003e但是今天我们要看的是 \u003cstrong\u003eMOP\u003c/strong\u003e。 \u0026ldquo;MOP\u0026rdquo; 代表着元对象协议(\u0026ldquo;Meta-Object Protocol\u0026rdquo;)。那意味着, 它们实际上是你能从用户那边改变的一部分, 而不是对象、类等定义语言的东西。\u003c/p\u003e\n\u003cp\u003e实际上, 在 Raku中, 你可以为类型添加方法, 移除某个方法, 包裹方法, 使用更多能力增强类(\u003ca href=\"https://github.com/jnthn/oo-actors\"\u003eOO::Actors\u003c/a\u003e 和 \u003ca href=\"https://github.com/jnthn/oo-monitors\"\u003eOO::Monitors\u003c/a\u003e 就是两个这样的例子), 或者你可以完全重定义它(并且, 例如, 使用 Ruby-like 的对象系统。\u003ca href=\"https://github.com/edumentab/rakudo-and-nqp-internals-course\"\u003e这儿有个例子\u003c/a\u003e)。\u003c/p\u003e\n\u003cp\u003e但是今天, 我们首先看一下第一部分: 自省。在类型创建完之后查看它的类型, 了解它, 并使用这些信息。\u003c/p\u003e\n\u003cp\u003e我们将要创建的模块是基于 \u003ca href=\"https://github.com/vendethiel/sixcheck\"\u003eSixcheck\u003c/a\u003e 模块(一个 \u003ca href=\"https://en.wikipedia.org/wiki/QuickCheck\"\u003eQuickCheck-like\u003c/a\u003e 模块)的需求: 为某个类型生成一些随机数据, 然后把数据喂给我们正测试的函数, 并检查某些后置条件(post-condition)。\u003c/p\u003e\n\u003cp\u003e所以, 我们先写出第一个版本:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%special-cases\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eMu\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003epick\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eStr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ez\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003epick\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u0026#39;)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003egenerate-data\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eMu:U\u003c/span\u003e \\\u003cspan class=\"nb\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e%special-cases\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nb\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e??\u003c/span\u003e \u003cspan class=\"nv\"\u003e%special-cases\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nb\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e}()\u003c/span\u003e \u003cspan class=\"o\"\u003e!!\u003c/span\u003e \u003cspan class=\"nb\"\u003et\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nf\"\u003egenerate-data\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意以下几点:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e我们给 \u003ccode\u003e%special-cases\u003c/code\u003e 指定了键的类型。那是因为默认地, 键的类型为 \u003cstrong\u003eStr\u003c/strong\u003e。显然地, 我们不想让我们的类型字符串化。我们实际上做的是指定它们为\u0026quot;Mu\u0026quot;的子类(这在类型\u0026quot;食物链\u0026quot;的顶端)。\u003c/li\u003e\n\u003cli\u003e我们在 \u003cstrong\u003eInt\u003c/strong\u003e 和 \u003cstrong\u003eStr\u003c/strong\u003e 周围放上圆括号, 以避免字符串化。\u003c/li\u003e\n\u003cli\u003e我们在函数参数类型中使用了 \u003ccode\u003e:U\u003c/code\u003e。那意味着那个值必须是未定义的(undefined)。类型对象(就像 Int、Str 等等)是未定义的, 所以它能满足我们(你可能见过一个叫 Nil 的不同的未知值)。\u003c/li\u003e\n\u003cli\u003e类型对象实际上是对象, 就像其它任何对象一样。这就是为什么我们在类型对象上调用 \u003ccode\u003e.new\u003c/code\u003e 方法, 例如, 它和直接调用 \u003ccode\u003eInt.new\u003c/code\u003e 相同(那对一致性和 \u003ca href=\"https://design.raku.org/S09.html#Autovivification\"\u003eautovivification\u003c/a\u003e 很有用)。\u003c/li\u003e\n\u003cli\u003e我们为 \u003cem\u003eInt\u003c/em\u003e 和 \u003cem\u003eStr\u003c/em\u003e 提供了 fallback, 因为调用 \u003cem\u003eInt.new\u003c/em\u003e 和 \u003cem\u003eStr.new\u003c/em\u003e ( 0 和 \u0026quot;\u0026quot; )不会在我们创建的数据中给我们任何随机化。\u003c/li\u003e\n\u003cli\u003eRaku 在函数中自动返回最后一个表达式。所以不需要在那儿放上一个 \u003cem\u003ereturn\u003c/em\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们用代码生成数据, 公平且公正。但是我们需要生成更多那样简单的数据。\u003c/p\u003e\n\u003cp\u003e我们至少需要支持带有属性的类: 我们想查看属性列表, 为它们的类型生成数据, 并把它们喂给构造器。\u003c/p\u003e\n\u003cp\u003e我们要能够看到类的内部。用 Raku 的术语来说, 我们将要到达的是元对象协议(\u003ca href=\"https://rakuadvent.wordpress.com/2010/12/22/day-22-the-meta-object-protocol/\"\u003eMeta-Object Protocol\u003c/a\u003e)。首先我们定义一个类:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eArticle\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"kt\"\u003eStr\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.title\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"kt\"\u003eStr\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.content\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$.view-count\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 我们可以这样手动创建一个实例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eArticle\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003etitle\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eRaku Advent, 第 19 天\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"s\"\u003econtent\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eMagic!\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"s\"\u003eview-count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但是我们不想亲手创建那个文章 (article)。我们想把那个 \u003cstrong\u003eclass\u003c/strong\u003e Article 传递给我们的 \u003cem\u003egenerate-data\u003c/em\u003e 函数, 并返回一个 Article(里面带有随机数据)。让我们回到我们的 \u003cem\u003eREPL\u003c/em\u003e\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003eArticle\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003eattributes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# (Str $!title Str $!content Int $!view-count)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003eArticle\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003eattributes\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"nb\"\u003eWHAT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# (Attribute)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你点击了 MOP 链接, 你不会对我们得到一个含有 3 个元素的数组感到惊讶。如果你仍旧对该语法感到惊讶, 那么 \u003ccode\u003e.^\u003c/code\u003e 是元方法调用。意思是 \u003ccode\u003ea.^b\u003c/code\u003e 会被转换为 \u003ccode\u003ea.HOW.b(a)\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e如果我们想知道我们可以访问到什么, 我们问它就是了(移除了匿名的那些):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eAttribute\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003emethods\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003egrep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"ow\"\u003ene\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026lt;anon\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# (compose apply_handles get_value set_value\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#      container readonly package inlined WHY set_why Str gist)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eAttribute\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003eattributes\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Method \u0026#39;gist\u0026#39; not found for invocant of class \u0026#39;BOOTSTRAPATTR\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e哎吆… 看起来这有点太 meta 了。幸好, 我们能使用 Rakudo 的一个非常好的属性: 它的大部分都是用 Raku 写的! 要查看我们可以得到什么, 我们查看\u003ca href=\"https://github.com/rakudo/rakudo/blob/nom/src/core/Attribute.pm\"\u003e源代码\u003c/a\u003e就好了:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# has Str $!name;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# has Mu $!type;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们得到了键的名字, 还有去生成值的类型。让我们看看\u0026hellip;\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026gt; say Article.^attributes.map(*.name)\n($!title $!content $!view-count)\n\u0026gt; say Article.^attributes.map(*.type)\n((Str) (Str) (Int))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e天才! 看起来是正确的。(如果你想知道为什么我们得到 \u003ccode\u003e$!\u003c/code\u003e（私有的） twigils, 那是因为 \u003ccode\u003e$.\u003c/code\u003e 只意味着将会生成的一个 getter 方法)。属性本身仍然是私有的, 并且在类中是可访问的。\u003c/p\u003e\n\u003cp\u003e现在, 我们唯一要做的事情就是创建一个循环\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e%args\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eArticle\u003c/span\u003e\u003cspan class=\"o\"\u003e.^\u003c/span\u003e\u003cspan class=\"nb\"\u003eattributes\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$attr\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e%args\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$attr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003egenerate-data\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$attr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e%args\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eperl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这是一个将会打印什么的例子:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{:\u003c/span\u003e\u003cspan class=\"s\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003emuenglhaxrvykfdjzopqbtwisc\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003erfpjndgohmasuwkyzebixqtvcl\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eview-count\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e每次你运行你的代码你都会得到不同的结果(然而我不认为它会创建一篇值得阅读的文章…)。剩下唯一要做的就是把它们传递给 Article 的构造函数:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"n\"\u003eArticle\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nv\"\u003e%args\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e(前缀 \u003ccode\u003e|\u003c/code\u003e 允许我们把 \u003cem\u003e%args\u003c/em\u003e 作为具名参数传递, 而不是单个位置参数)。再次, 你应该会打印这些东西:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eArticle\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003etitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ekyvphxqmejtuicrbsnfoldgzaw\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003econtent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ejqbtcyovxlngpwikdszfmeuahr\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003eview-count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e呀! 我们设法在不了解 Article 的情况下胡乱地(blindly)创建了一个 Article 实例。 我们的代码能够用于为任何期望传递它的类属性的构造函数生成数据。好了!\u003c/p\u003e\n\u003cp\u003ePS: 留个作业! 移动到 generate-data 函数, 以至于我们能给 Article 添加一个 User \u003ccode\u003e$.author\u003c/code\u003e 属性, 并且构建好这个函数。祝你好运!\u003c/p\u003e\n","text":"Raku 支持\u0026quot;泛型, roles 和 多重分发\u0026quot;, 它们都是很好的特点, 并且已经在其它 advent calendar 中发布过了。\n但是今天我们要看的是 MOP。 \u0026ldquo;MOP\u0026rdquo; 代表着元对象协议(\u0026ldquo;Meta-Object Protocol\u0026rdquo;)。那意味着, 它们实际上是你能从用户那边改变的一部分, 而不是对象、类等定义语言的东西。\n实际上, 在 Raku中, 你可以为类型添加方法, 移除某个方法, 包裹方法, 使用更多能力增强类(OO::Actors 和 OO::Monitors 就是两个这样的例子), 或者你可以完全重定义它(并且, 例如, 使用 Ruby-like 的对象系统。这儿有个例子)。\n但是今天, 我们首先看一下第一部分: 自省。在类型创建完之后查看它的类型, 了解它, 并使用这些信息。\n我们将要创建的模块是基于 Sixcheck 模块(一个 QuickCheck-like 模块)的需求: 为某个类型生成一些随机数据, 然后把数据喂给我们正测试的函数, 并检查某些后置条件(post-condition)。\n所以, 我们先写出第一个版本:\nmy %special-cases{Mu} = (Int) =\u0026gt; -\u0026gt; { (1..50).pick }, (Str) =\u0026gt; -\u0026gt; { (\u0026#39;a\u0026#39;..\u0026#39;z\u0026#39;).pick(50).join(\u0026#39;\u0026#39;) }, ; sub generate-data(Mu:U \\t) { %special-cases{t} ?? %special-cases{t}() !! t.new; } generate-data(Int); 注意以下几点:\n我们给 %special-cases 指定了键的类型。那是因为默认地, 键的类型为 Str。显然地, 我们不想让我们的类型字符串化。我们实际上做的是指定它们为\u0026quot;Mu\u0026quot;的子类(这在类型\u0026quot;食物链\u0026quot;的顶端)。 我们在 Int 和 Str 周围放上圆括号, 以避免字符串化。 我们在函数参数类型中使用了 :U。那意味着那个值必须是未定义的(undefined)。类型对象(就像 Int、Str 等等)是未定义的, 所以它能满足我们(你可能见过一个叫 Nil 的不同的未知值)。 类型对象实际上是对象, 就像其它任何对象一样。这就是为什么我们在类型对象上调用 .new 方法, 例如, 它和直接调用 Int.new 相同(那对一致性和 autovivification 很有用)。 我们为 Int 和 Str 提供了 fallback, 因为调用 Int.new 和 Str.new ( 0 和 \u0026quot;\u0026quot; )不会在我们创建的数据中给我们任何随机化。 Raku 在函数中自动返回最后一个表达式。所以不需要在那儿放上一个 return。 我们用代码生成数据, 公平且公正。但是我们需要生成更多那样简单的数据。\n我们至少需要支持带有属性的类: 我们想查看属性列表, 为它们的类型生成数据, 并把它们喂给构造器。\n我们要能够看到类的内部。用 Raku 的术语来说, 我们将要到达的是元对象协议(Meta-Object Protocol)。首先我们定义一个类:\nclass Article { has Str $.title; has Str $.content; has Int $.view-count; } # 我们可以这样手动创建一个实例 Article.new(title =\u0026gt; \u0026#34;Raku Advent, 第 19 天\u0026#34;, content =\u0026gt; \u0026#34;Magic!\u0026#34;, view-count =\u0026gt; 0 ); 但是我们不想亲手创建那个文章 (article)。我们想把那个 class Article 传递给我们的 generate-data 函数, 并返回一个 Article(里面带有随机数据)。让我们回到我们的 REPL\u0026hellip;\nsay Article.^attributes; # (Str $!title Str $!content Int $!view-count) say Article.^attributes[0].WHAT; # (Attribute) 如果你点击了 MOP 链接, 你不会对我们得到一个含有 3 个元素的数组感到惊讶。如果你仍旧对该语法感到惊讶, 那么 .^ 是元方法调用。意思是 a.^b 会被转换为 a.HOW.b(a)。\n如果我们想知道我们可以访问到什么, 我们问它就是了(移除了匿名的那些):\nAttribute.^methods.grep(*.name ne \u0026#39;\u0026lt;anon\u0026gt;\u0026#39;); # (compose apply_handles get_value set_value # container readonly package inlined WHY set_why Str gist) Attribute.^attributes # Method \u0026#39;gist\u0026#39; not found for invocant of class \u0026#39;BOOTSTRAPATTR\u0026#39; 哎吆… 看起来这有点太 meta 了。幸好, 我们能使用 Rakudo 的一个非常好的属性: 它的大部分都是用 Raku 写的! 要查看我们可以得到什么, 我们查看源代码就好了:\n# has Str $!name; ... # has Mu $!type; 我们得到了键的名字, 还有去生成值的类型。让我们看看\u0026hellip;\n\u0026gt; say Article.^attributes.map(*.name) ($!title $!content $!view-count) \u0026gt; say Article.^attributes.map(*.type) ((Str) (Str) (Int)) 天才! 看起来是正确的。(如果你想知道为什么我们得到 $!（私有的） twigils, 那是因为 $. 只意味着将会生成的一个 getter 方法)。属性本身仍然是私有的, 并且在类中是可访问的。\n现在, 我们唯一要做的事情就是创建一个循环\u0026hellip;\nmy %args; for Article.^attributes -\u0026gt; $attr { %args{$attr.name.substr(2)} = generate-data($attr.type); } say %args.perl; 这是一个将会打印什么的例子:\n{:content(\u0026#34;muenglhaxrvykfdjzopqbtwisc\u0026#34;), :title(\u0026#34;rfpjndgohmasuwkyzebixqtvcl\u0026#34;), :view-count(45)} 每次你运行你的代码你都会得到不同的结果(然而我不认为它会创建一篇值得阅读的文章…)。剩下唯一要做的就是把它们传递给 Article 的构造函数:\nsay Article.new(|%args); (前缀 | 允许我们把 %args 作为具名参数传递, 而不是单个位置参数)。再次, 你应该会打印这些东西:\nArticle.new(title =\u0026gt; \u0026#34;kyvphxqmejtuicrbsnfoldgzaw\u0026#34;, content =\u0026gt; \u0026#34;jqbtcyovxlngpwikdszfmeuahr\u0026#34;, view-count =\u0026gt; 26) 呀! 我们设法在不了解 Article 的情况下胡乱地(blindly)创建了一个 Article 实例。 我们的代码能够用于为任何期望传递它的类属性的构造函数生成数据。好了!\nPS: 留个作业! 移动到 generate-data 函数, 以至于我们能给 Article 添加一个 User $.author 属性, 并且构建好这个函数。祝你好运!\n"},"name":"Raku 中的自省","published":"2021-07-11T00:00:00Z","summary":"Introspection in Raku","type":"entry","url":"https://ohmycloud.github.io/notes/2015-07-25-introspection-in-raku/"}