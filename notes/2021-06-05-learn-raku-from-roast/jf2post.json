{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"content":{"html":"\u003cp\u003eRaku 的 \u003ca href=\"https://github.com/Raku/roast\"\u003eRoast\u003c/a\u003e 仓库是一个测试套件, 我们可以从这个仓库中学习到很多 Raku 的知识。\u003c/p\u003e\n\u003ch2 id=\"元运算符\"\u003e元运算符\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ecross\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003edd \u0026lt;a b\u0026gt; X \u0026lt;c d\u0026gt;\n# Output: ((\u0026quot;a\u0026quot;, \u0026quot;c\u0026quot;), (\u0026quot;a\u0026quot;, \u0026quot;d\u0026quot;), (\u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;), (\u0026quot;b\u0026quot;, \u0026quot;d\u0026quot;)).Seq\n\n\ndd 1 X 1 X 1 X 1\n# Output: ((1, 1, 1, 1),).Seq\n\n\ndd 1, 2, 3 X** 2, 4\n# Output: 1, 1, 4, 16, 9, 81).Seq\n\n\nmy @result = gather {\n    for 1..3 X 'a'..'b' -\u0026gt; ($n, $a) {\n        take \u0026quot;$n|$a\u0026quot;\n    }\n}\n\ndd @result;\n# Output: Array @result = [\u0026quot;1|a\u0026quot;, \u0026quot;1|b\u0026quot;, \u0026quot;2|a\u0026quot;, \u0026quot;2|b\u0026quot;, \u0026quot;3|a\u0026quot;, \u0026quot;3|b\u0026quot;]\n\n\nmy @result = gather for (1..3 X 'A'..'B') -\u0026gt; $na {\n    take $na.join(':');\n}\n\ndd @result;\n# Output: Array @result = [\u0026quot;1:A\u0026quot;, \u0026quot;1:B\u0026quot;, \u0026quot;2:A\u0026quot;, \u0026quot;2:B\u0026quot;, \u0026quot;3:A\u0026quot;, \u0026quot;3:B\u0026quot;]\n\n\ndd \u0026lt;a b\u0026gt; X, \u0026lt;c d\u0026gt;;\n# Output: ((\u0026quot;a\u0026quot;, \u0026quot;c\u0026quot;), (\u0026quot;a\u0026quot;, \u0026quot;d\u0026quot;), (\u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;), (\u0026quot;b\u0026quot;, \u0026quot;d\u0026quot;)).Seq\n\n\ndd \u0026lt;a b\u0026gt; X~ \u0026lt;1 2\u0026gt;;\n# Output: (\u0026quot;a1\u0026quot;, \u0026quot;a2\u0026quot;, \u0026quot;b1\u0026quot;, \u0026quot;b2\u0026quot;).Seq\n\n\ndd \u0026lt;a b\u0026gt; X, 1,2 X, \u0026lt;x y\u0026gt;;\n# Output: ((\u0026quot;a\u0026quot;, 1, \u0026quot;x\u0026quot;), (\u0026quot;a\u0026quot;, 1, \u0026quot;y\u0026quot;), (\u0026quot;a\u0026quot;, 2, \u0026quot;x\u0026quot;), (\u0026quot;a\u0026quot;, 2, \u0026quot;y\u0026quot;), (\u0026quot;b\u0026quot;, 1, \u0026quot;x\u0026quot;), (\u0026quot;b\u0026quot;, 1, \u0026quot;y\u0026quot;), (\u0026quot;b\u0026quot;, 2, \u0026quot;x\u0026quot;), (\u0026quot;b\u0026quot;, 2, \u0026quot;y\u0026quot;)).Seq\n\n\ndd 1,2 X* 3,4;\n# Output: (3, 4, 6, 8).Seq\n\n\ndd 1,2 Xcmp 3,2,0;\n# Output: (Order::Less, Order::Less, Order::More, Order::Less, Order::Same, Order::More).Seq\n\n\ndd 1 X* 3,4;\n# Output: (3, 4).Seq\n\n\ndd 1, 2 X* 3;\n# Output: (3, 6).Seq\n\n\ndd 1 X* 3;\n# Output: (3,).Seq\n\n\n# $[] does not flatten\ndd $[1,2] X~ \u0026lt;a b\u0026gt;\n# Output: (\u0026quot;1 2a\u0026quot;, \u0026quot;1 2b\u0026quot;).Seq\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003ezip\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003edd \u0026lt;a b\u0026gt; Z \u0026lt;c d\u0026gt;;\n# Output: ((\u0026quot;a\u0026quot;, \u0026quot;c\u0026quot;), (\u0026quot;b\u0026quot;, \u0026quot;d\u0026quot;)).Seq\n\n\ndd 1, 2, 3 Z** 2, 4;\n# Output: (1, 16).Seq\n\n\ndd \u0026lt;a b\u0026gt; Z~ \u0026lt;1 2\u0026gt;;\n# Output: (\u0026quot;a1\u0026quot;, \u0026quot;b2\u0026quot;).Seq\n\n\ndd 1,2 Z* 3,4;\n# Output: (3, 8).Seq\n\n\ndd 1,2 Zcmp 3,2,0;\n# Output: (Order::Less, Order::Same).Seq\n\n\ndd (1..* Z** 1..*).[^5];\n# Output: (1, 4, 27, 256, 3125)\n\n\ndd (1..* Z+ (3, 2 ... *)).[^5];\n# Output: (4, 4, 4, 4, 4)\n\n\ndd 1 Z* 3,4;\n# Output: (3,).Seq\n\n\ndd 1, 2 Z* 3;\n# Output: (3,).Seq\n\n\ndd 1 Z* 3;\n# Output: (3,).Seq\n\n\ndd \u0026lt;a b c d\u0026gt; Z 'x', 'z', *;\n# Output: ((\u0026quot;a\u0026quot;, \u0026quot;x\u0026quot;), (\u0026quot;b\u0026quot;, \u0026quot;z\u0026quot;), (\u0026quot;c\u0026quot;, \u0026quot;z\u0026quot;), (\u0026quot;d\u0026quot;, \u0026quot;z\u0026quot;)).Seq\n\n\ndd 1, 2, 3, * Z 10, 20, 30, 40, 50;\n# Output: ((1, 10), (2, 20), (3, 30), (3, 40), (3, 50)).Seq\n\n\ndd (2, 10, * Z 3, 4, 5, *).[^5];\n# Output: ((2, 3), (10, 4), (10, 5), (10, 5), (10, 5))\n\n\ndd \u0026lt;a b c d\u0026gt; Z~ 'x', 'z', *;\n# Output: (\u0026quot;ax\u0026quot;, \u0026quot;bz\u0026quot;, \u0026quot;cz\u0026quot;, \u0026quot;dz\u0026quot;).Seq\n\n\ndd 1, 2, 3, * Z+ 10, 20, 30, 40, 50;\n# Output: (11, 22, 33, 43, 53).Seq\n\n\ndd (2, 10, * Z* 3, 4, 5, *).[^5];\n# Output: (6, 40, 50, 50, 50)\n\n\ndd [Z](1,2,3;4,5,6;7,8,9);\n# Output: ((1, 4, 7), (2, 5, 8), (3, 6, 9)).Seq\n\n\ndd [Z\u0026lt;](1,2,3;4,5,6;7,8,9);\n(Bool::True, Bool::True, Bool::True).Seq\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003ehyper\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003emy $a      := (1,2,3);\nmy $b      := (2,4,6);\n\n\n# 以下表达式都输出  (3, 6, 9)\n\ndd $a \u0026gt;\u0026gt;+\u0026lt;\u0026lt; $b;\ndd $a  »+«  $b;\ndd $a \u0026gt;\u0026gt;+\u0026gt;\u0026gt; $b;\ndd $a  »+»  $b;\ndd $a \u0026lt;\u0026lt;+\u0026gt;\u0026gt; $b;\ndd $a  «+»  $b;\ndd $a \u0026lt;\u0026lt;+\u0026lt;\u0026lt; $b;\ndd $a  «+«  $b;\n\ndd $a \u0026gt;\u0026gt;[\u0026amp;infix:\u0026lt;+\u0026gt;]\u0026lt;\u0026lt; $b;\ndd $a  »[\u0026amp;infix:\u0026lt;+\u0026gt;]«  $b;\ndd $a \u0026gt;\u0026gt;[\u0026amp;infix:\u0026lt;+\u0026gt;]\u0026gt;\u0026gt; $b;\ndd $a  »[\u0026amp;infix:\u0026lt;+\u0026gt;]»  $b;\ndd $a \u0026lt;\u0026lt;[\u0026amp;infix:\u0026lt;+\u0026gt;]\u0026gt;\u0026gt; $b;\ndd $a  «[\u0026amp;infix:\u0026lt;+\u0026gt;]»  $b;\ndd $a \u0026lt;\u0026lt;[\u0026amp;infix:\u0026lt;+\u0026gt;]\u0026lt;\u0026lt; $b;\ndd $a  «[\u0026amp;infix:\u0026lt;+\u0026gt;]«  $b;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e»*«\u003c/code\u003e 运算符的优先级比 \u003ccode\u003e»+«\u003c/code\u003e 运算符的优先级高:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003edd (1, 2, 3) »+« (10, 20, 30) »*« (2, 3, 4);\n# Output: (21, 62, 123)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eunary postfix(一元后缀运算符)\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003emy @r = (1, 2, 3);\n@r»++;\ndd @r;\n# Output: Array @r = [2, 3, 4]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eunary prefix(一元前缀运算符)\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003emy @r;\n@r = -« (3, 2, 1);\ndd @r;\n# Output: Array @r = [-3, -2, -1]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003edimension upgrade(升维), auto dimension upgrade on rhs/lhs ASCII notation\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003emy @r = (1, 2, 3) \u0026gt;\u0026gt;+\u0026gt;\u0026gt; 1;\ndd @r;\n# Output: Array @r = [2, 3, 4]\n\n\nmy @r = 2 \u0026lt;\u0026lt;*\u0026lt;\u0026lt; (10, 20, 30);\ndd @r;\n# Output: Array @r = [20, 40, 60]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eboth-dwim and non-dwim sanity:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003edd (1,2,3) \u0026lt;\u0026lt;~\u0026gt;\u0026gt; \u0026lt;A B C D E\u0026gt;;\n# Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;3C\u0026quot;, \u0026quot;1D\u0026quot;, \u0026quot;2E\u0026quot;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eextension(扩展)\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003edd (1,2,3,4) \u0026gt;\u0026gt;~\u0026gt;\u0026gt; \u0026lt;A B C D E\u0026gt;;\n# Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;3C\u0026quot;, \u0026quot;4D\u0026quot;)\n\n\ndd (1,2,3,4,5) \u0026lt;\u0026lt;~\u0026lt;\u0026lt; \u0026lt;A B C D\u0026gt;;\n# Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;3C\u0026quot;, \u0026quot;4D\u0026quot;)\n\n\ndd (1,2,3,4) \u0026gt;\u0026gt;~\u0026gt;\u0026gt; \u0026lt;A B C\u0026gt;;\n# Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;3C\u0026quot;, \u0026quot;4A\u0026quot;)\n\n\ndd (1,2,3) \u0026lt;\u0026lt;~\u0026lt;\u0026lt; \u0026lt;A B C D\u0026gt;;\n# Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;3C\u0026quot;, \u0026quot;1D\u0026quot;)\n\n\ndd (1,2,3,4) \u0026gt;\u0026gt;~\u0026gt;\u0026gt; \u0026lt;A B\u0026gt;;\n# Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;3A\u0026quot;, \u0026quot;4B\u0026quot;)\n\n\ndd (1,2) \u0026lt;\u0026lt;~\u0026lt;\u0026lt; \u0026lt;A B C D\u0026gt;;\n# Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;1C\u0026quot;, \u0026quot;2D\u0026quot;)\n\n\ndd (1,2,3,4) \u0026gt;\u0026gt;~\u0026gt;\u0026gt; \u0026lt;A\u0026gt;;\n# Output: (\u0026quot;1A\u0026quot;, \u0026quot;2A\u0026quot;, \u0026quot;3A\u0026quot;, \u0026quot;4A\u0026quot;)\n\n\ndd (1,) \u0026lt;\u0026lt;~\u0026lt;\u0026lt; \u0026lt;A B C D\u0026gt;;\n# Output: (\u0026quot;1A\u0026quot;, \u0026quot;1B\u0026quot;, \u0026quot;1C\u0026quot;, \u0026quot;1D\u0026quot;)\n\n\ndd (1,2,3,4) \u0026gt;\u0026gt;~\u0026gt;\u0026gt; 'A';\n# Output: (\u0026quot;1A\u0026quot;, \u0026quot;2A\u0026quot;, \u0026quot;3A\u0026quot;, \u0026quot;4A\u0026quot;)\n\n\ndd 1 \u0026lt;\u0026lt;~\u0026lt;\u0026lt; \u0026lt;A B C D\u0026gt;;\n# Output: (\u0026quot;1A\u0026quot;, \u0026quot;1B\u0026quot;, \u0026quot;1C\u0026quot;, \u0026quot;1D\u0026quot;)\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"枚举\"\u003e枚举\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e匿名枚举\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e匿名枚举返回一个 Map:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003emy $e = enum \u0026lt; ook! ook. ook? \u0026gt;; # Map.new((ook! =\u0026gt; 0, ook. =\u0026gt; 1, ook? =\u0026gt; 2))\nsay $e.keys.elems; #  3\nsay $e\u0026lt;ook!\u0026gt;;      #  0\nsay $e\u0026lt;ook.\u0026gt;;      #  1\nsay $e\u0026lt;ook?\u0026gt;;      #  2 \nsay so $e ~~ Map;  #  True\nsay $e.keys;       #  (ook? ook! ook.)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eanon enum \u0026lt;un\u0026gt;\u003c/code\u003e 等价于 \u003ccode\u003eenum :: \u0026lt;un\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003eanon enum \u0026lt;un\u0026gt;; #  Map.new((un =\u0026gt; 0))\nsay +un;        #  0\n\nmy %e = enum :: \u0026lt; foo bar baz \u0026gt;; #  {bar =\u0026gt; 1, baz =\u0026gt; 2, foo =\u0026gt; 0}\nsay %e\u0026lt;bar\u0026gt;; #  1\nsay baz;     #  baz\nsay +baz;    #  2\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e枚举作为角色\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e枚举可以用在 \u003ccode\u003ebut\u003c/code\u003e 或 \u003ccode\u003edoes\u003c/code\u003e 中, 用以命令一个想要的属性:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003eenum Maybe \u0026lt;No Yes Dunno\u0026gt;;\nclass Bar { }\n\nclass Foo does Maybe {}\nmy $x = Foo.new(Maybe =\u0026gt; No);\n\nsay $x.No;    # True\nsay $x.Yes;   # False\nsay $x.Dunno; # False\n\nmy $y = Bar.new() does Maybe(Yes);\nsay $y.Yes;   # True\nsay $y.No;    # False\nsay $y.Dunno; # False\n\n\nmy $z = Bar.new() but Maybe(Dunno);\nsay $z.No;\nsay $z.Yes;\nsay $z.Dunno;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"属性\"\u003e属性\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e代理\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e官方文档关于 \u003ca href=\"https://docs.raku.org/routine/handles\"\u003ehandles\u003c/a\u003e 的介绍很粗糙, 看完依然不知道怎么使用。\u003c/p\u003e\n","text":"Raku 的 Roast 仓库是一个测试套件, 我们可以从这个仓库中学习到很多 Raku 的知识。\n元运算符  cross  dd \u0026lt;a b\u0026gt; X \u0026lt;c d\u0026gt; # Output: ((\u0026quot;a\u0026quot;, \u0026quot;c\u0026quot;), (\u0026quot;a\u0026quot;, \u0026quot;d\u0026quot;), (\u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;), (\u0026quot;b\u0026quot;, \u0026quot;d\u0026quot;)).Seq dd 1 X 1 X 1 X 1 # Output: ((1, 1, 1, 1),).Seq dd 1, 2, 3 X** 2, 4 # Output: 1, 1, 4, 16, 9, 81).Seq my @result = gather { for 1..3 X 'a'..'b' -\u0026gt; ($n, $a) { take \u0026quot;$n|$a\u0026quot; } } dd @result; # Output: Array @result = [\u0026quot;1|a\u0026quot;, \u0026quot;1|b\u0026quot;, \u0026quot;2|a\u0026quot;, \u0026quot;2|b\u0026quot;, \u0026quot;3|a\u0026quot;, \u0026quot;3|b\u0026quot;] my @result = gather for (1..3 X 'A'..'B') -\u0026gt; $na { take $na.join(':'); } dd @result; # Output: Array @result = [\u0026quot;1:A\u0026quot;, \u0026quot;1:B\u0026quot;, \u0026quot;2:A\u0026quot;, \u0026quot;2:B\u0026quot;, \u0026quot;3:A\u0026quot;, \u0026quot;3:B\u0026quot;] dd \u0026lt;a b\u0026gt; X, \u0026lt;c d\u0026gt;; # Output: ((\u0026quot;a\u0026quot;, \u0026quot;c\u0026quot;), (\u0026quot;a\u0026quot;, \u0026quot;d\u0026quot;), (\u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;), (\u0026quot;b\u0026quot;, \u0026quot;d\u0026quot;)).Seq dd \u0026lt;a b\u0026gt; X~ \u0026lt;1 2\u0026gt;; # Output: (\u0026quot;a1\u0026quot;, \u0026quot;a2\u0026quot;, \u0026quot;b1\u0026quot;, \u0026quot;b2\u0026quot;).Seq dd \u0026lt;a b\u0026gt; X, 1,2 X, \u0026lt;x y\u0026gt;; # Output: ((\u0026quot;a\u0026quot;, 1, \u0026quot;x\u0026quot;), (\u0026quot;a\u0026quot;, 1, \u0026quot;y\u0026quot;), (\u0026quot;a\u0026quot;, 2, \u0026quot;x\u0026quot;), (\u0026quot;a\u0026quot;, 2, \u0026quot;y\u0026quot;), (\u0026quot;b\u0026quot;, 1, \u0026quot;x\u0026quot;), (\u0026quot;b\u0026quot;, 1, \u0026quot;y\u0026quot;), (\u0026quot;b\u0026quot;, 2, \u0026quot;x\u0026quot;), (\u0026quot;b\u0026quot;, 2, \u0026quot;y\u0026quot;)).Seq dd 1,2 X* 3,4; # Output: (3, 4, 6, 8).Seq dd 1,2 Xcmp 3,2,0; # Output: (Order::Less, Order::Less, Order::More, Order::Less, Order::Same, Order::More).Seq dd 1 X* 3,4; # Output: (3, 4).Seq dd 1, 2 X* 3; # Output: (3, 6).Seq dd 1 X* 3; # Output: (3,).Seq # $[] does not flatten dd $[1,2] X~ \u0026lt;a b\u0026gt; # Output: (\u0026quot;1 2a\u0026quot;, \u0026quot;1 2b\u0026quot;).Seq  zip  dd \u0026lt;a b\u0026gt; Z \u0026lt;c d\u0026gt;; # Output: ((\u0026quot;a\u0026quot;, \u0026quot;c\u0026quot;), (\u0026quot;b\u0026quot;, \u0026quot;d\u0026quot;)).Seq dd 1, 2, 3 Z** 2, 4; # Output: (1, 16).Seq dd \u0026lt;a b\u0026gt; Z~ \u0026lt;1 2\u0026gt;; # Output: (\u0026quot;a1\u0026quot;, \u0026quot;b2\u0026quot;).Seq dd 1,2 Z* 3,4; # Output: (3, 8).Seq dd 1,2 Zcmp 3,2,0; # Output: (Order::Less, Order::Same).Seq dd (1..* Z** 1..*).[^5]; # Output: (1, 4, 27, 256, 3125) dd (1..* Z+ (3, 2 ... *)).[^5]; # Output: (4, 4, 4, 4, 4) dd 1 Z* 3,4; # Output: (3,).Seq dd 1, 2 Z* 3; # Output: (3,).Seq dd 1 Z* 3; # Output: (3,).Seq dd \u0026lt;a b c d\u0026gt; Z 'x', 'z', *; # Output: ((\u0026quot;a\u0026quot;, \u0026quot;x\u0026quot;), (\u0026quot;b\u0026quot;, \u0026quot;z\u0026quot;), (\u0026quot;c\u0026quot;, \u0026quot;z\u0026quot;), (\u0026quot;d\u0026quot;, \u0026quot;z\u0026quot;)).Seq dd 1, 2, 3, * Z 10, 20, 30, 40, 50; # Output: ((1, 10), (2, 20), (3, 30), (3, 40), (3, 50)).Seq dd (2, 10, * Z 3, 4, 5, *).[^5]; # Output: ((2, 3), (10, 4), (10, 5), (10, 5), (10, 5)) dd \u0026lt;a b c d\u0026gt; Z~ 'x', 'z', *; # Output: (\u0026quot;ax\u0026quot;, \u0026quot;bz\u0026quot;, \u0026quot;cz\u0026quot;, \u0026quot;dz\u0026quot;).Seq dd 1, 2, 3, * Z+ 10, 20, 30, 40, 50; # Output: (11, 22, 33, 43, 53).Seq dd (2, 10, * Z* 3, 4, 5, *).[^5]; # Output: (6, 40, 50, 50, 50) dd [Z](1,2,3;4,5,6;7,8,9); # Output: ((1, 4, 7), (2, 5, 8), (3, 6, 9)).Seq dd [Z\u0026lt;](1,2,3;4,5,6;7,8,9); (Bool::True, Bool::True, Bool::True).Seq  hyper  my $a := (1,2,3); my $b := (2,4,6); # 以下表达式都输出 (3, 6, 9) dd $a \u0026gt;\u0026gt;+\u0026lt;\u0026lt; $b; dd $a »+« $b; dd $a \u0026gt;\u0026gt;+\u0026gt;\u0026gt; $b; dd $a »+» $b; dd $a \u0026lt;\u0026lt;+\u0026gt;\u0026gt; $b; dd $a «+» $b; dd $a \u0026lt;\u0026lt;+\u0026lt;\u0026lt; $b; dd $a «+« $b; dd $a \u0026gt;\u0026gt;[\u0026amp;infix:\u0026lt;+\u0026gt;]\u0026lt;\u0026lt; $b; dd $a »[\u0026amp;infix:\u0026lt;+\u0026gt;]« $b; dd $a \u0026gt;\u0026gt;[\u0026amp;infix:\u0026lt;+\u0026gt;]\u0026gt;\u0026gt; $b; dd $a »[\u0026amp;infix:\u0026lt;+\u0026gt;]» $b; dd $a \u0026lt;\u0026lt;[\u0026amp;infix:\u0026lt;+\u0026gt;]\u0026gt;\u0026gt; $b; dd $a «[\u0026amp;infix:\u0026lt;+\u0026gt;]» $b; dd $a \u0026lt;\u0026lt;[\u0026amp;infix:\u0026lt;+\u0026gt;]\u0026lt;\u0026lt; $b; dd $a «[\u0026amp;infix:\u0026lt;+\u0026gt;]« $b; »*« 运算符的优先级比 »+« 运算符的优先级高:\ndd (1, 2, 3) »+« (10, 20, 30) »*« (2, 3, 4); # Output: (21, 62, 123) unary postfix(一元后缀运算符)\nmy @r = (1, 2, 3); @r»++; dd @r; # Output: Array @r = [2, 3, 4] unary prefix(一元前缀运算符)\nmy @r; @r = -« (3, 2, 1); dd @r; # Output: Array @r = [-3, -2, -1] dimension upgrade(升维), auto dimension upgrade on rhs/lhs ASCII notation\nmy @r = (1, 2, 3) \u0026gt;\u0026gt;+\u0026gt;\u0026gt; 1; dd @r; # Output: Array @r = [2, 3, 4] my @r = 2 \u0026lt;\u0026lt;*\u0026lt;\u0026lt; (10, 20, 30); dd @r; # Output: Array @r = [20, 40, 60] both-dwim and non-dwim sanity:\ndd (1,2,3) \u0026lt;\u0026lt;~\u0026gt;\u0026gt; \u0026lt;A B C D E\u0026gt;; # Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;3C\u0026quot;, \u0026quot;1D\u0026quot;, \u0026quot;2E\u0026quot;) extension(扩展)\ndd (1,2,3,4) \u0026gt;\u0026gt;~\u0026gt;\u0026gt; \u0026lt;A B C D E\u0026gt;; # Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;3C\u0026quot;, \u0026quot;4D\u0026quot;) dd (1,2,3,4,5) \u0026lt;\u0026lt;~\u0026lt;\u0026lt; \u0026lt;A B C D\u0026gt;; # Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;3C\u0026quot;, \u0026quot;4D\u0026quot;) dd (1,2,3,4) \u0026gt;\u0026gt;~\u0026gt;\u0026gt; \u0026lt;A B C\u0026gt;; # Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;3C\u0026quot;, \u0026quot;4A\u0026quot;) dd (1,2,3) \u0026lt;\u0026lt;~\u0026lt;\u0026lt; \u0026lt;A B C D\u0026gt;; # Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;3C\u0026quot;, \u0026quot;1D\u0026quot;) dd (1,2,3,4) \u0026gt;\u0026gt;~\u0026gt;\u0026gt; \u0026lt;A B\u0026gt;; # Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;3A\u0026quot;, \u0026quot;4B\u0026quot;) dd (1,2) \u0026lt;\u0026lt;~\u0026lt;\u0026lt; \u0026lt;A B C D\u0026gt;; # Output: (\u0026quot;1A\u0026quot;, \u0026quot;2B\u0026quot;, \u0026quot;1C\u0026quot;, \u0026quot;2D\u0026quot;) dd (1,2,3,4) \u0026gt;\u0026gt;~\u0026gt;\u0026gt; \u0026lt;A\u0026gt;; # Output: (\u0026quot;1A\u0026quot;, \u0026quot;2A\u0026quot;, \u0026quot;3A\u0026quot;, \u0026quot;4A\u0026quot;) dd (1,) \u0026lt;\u0026lt;~\u0026lt;\u0026lt; \u0026lt;A B C D\u0026gt;; # Output: (\u0026quot;1A\u0026quot;, \u0026quot;1B\u0026quot;, \u0026quot;1C\u0026quot;, \u0026quot;1D\u0026quot;) dd (1,2,3,4) \u0026gt;\u0026gt;~\u0026gt;\u0026gt; 'A'; # Output: (\u0026quot;1A\u0026quot;, \u0026quot;2A\u0026quot;, \u0026quot;3A\u0026quot;, \u0026quot;4A\u0026quot;) dd 1 \u0026lt;\u0026lt;~\u0026lt;\u0026lt; \u0026lt;A B C D\u0026gt;; # Output: (\u0026quot;1A\u0026quot;, \u0026quot;1B\u0026quot;, \u0026quot;1C\u0026quot;, \u0026quot;1D\u0026quot;) 枚举  匿名枚举  匿名枚举返回一个 Map:\nmy $e = enum \u0026lt; ook! ook. ook? \u0026gt;; # Map.new((ook! =\u0026gt; 0, ook. =\u0026gt; 1, ook? =\u0026gt; 2)) say $e.keys.elems; # 3 say $e\u0026lt;ook!\u0026gt;; # 0 say $e\u0026lt;ook.\u0026gt;; # 1 say $e\u0026lt;ook?\u0026gt;; # 2 say so $e ~~ Map; # True say $e.keys; # (ook? ook! ook.) anon enum \u0026lt;un\u0026gt; 等价于 enum :: \u0026lt;un\u0026gt;:\nanon enum \u0026lt;un\u0026gt;; # Map.new((un =\u0026gt; 0)) say +un; # 0 my %e = enum :: \u0026lt; foo bar baz \u0026gt;; # {bar =\u0026gt; 1, baz =\u0026gt; 2, foo =\u0026gt; 0} say %e\u0026lt;bar\u0026gt;; # 1 say baz; # baz say +baz; # 2  枚举作为角色  枚举可以用在 but 或 does 中, 用以命令一个想要的属性:\nenum Maybe \u0026lt;No Yes Dunno\u0026gt;; class Bar { } class Foo does Maybe {} my $x = Foo.new(Maybe =\u0026gt; No); say $x.No; # True say $x.Yes; # False say $x.Dunno; # False my $y = Bar.new() does Maybe(Yes); say $y.Yes; # True say $y.No; # False say $y.Dunno; # False my $z = Bar.new() but Maybe(Dunno); say $z.No; say $z.Yes; say $z.Dunno; 属性  代理  官方文档关于 handles 的介绍很粗糙, 看完依然不知道怎么使用。\n"},"name":"Learn Raku From Roast","published":"2021-06-05T00:00:00+08:00","summary":"Learn Raku From Roast","type":"entry","url":"https://ohmyweekly.github.io/notes/2021-06-05-learn-raku-from-roast/"}