{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"content":{"html":"\u003ch1 id=\"create-语句\"\u003eCREATE 语句\u003c/h1\u003e\n\u003cp\u003eCREATE 语句用于在当前或指定的\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/catalogs.html\"\u003e目录\u003c/a\u003e中注册一个表/视图/函数。注册的表/视图/函数可以在 SQL 查询中使用。\u003c/p\u003e\n\u003cp\u003eFlink SQL 目前支持以下 CREATE 语句。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCREATE TABLE\u003c/li\u003e\n\u003cli\u003eCREATE DATABASE\u003c/li\u003e\n\u003cli\u003eCREATE VIEW\u003c/li\u003e\n\u003cli\u003eCREATE FUNCTION\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"运行一条-create-语句\"\u003e运行一条 CREATE 语句\u003c/h2\u003e\n\u003cp\u003eCREATE 语句可以用 TableEnvironment 的 executeSql()方法执行，也可以在 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sqlClient.html\"\u003eSQL CLI\u003c/a\u003e 中执行。executeSql()方法对于一个成功的 CREATE 操作会返回\u0026rsquo;OK'，否则会抛出一个异常。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 CREATE 语句。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"c1\"\u003e// Scala\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003esettings\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e()...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esettings\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// SQL query with a registered table\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// register a table named \u0026#34;Orders\u0026#34;\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// run a SQL query on the Table and retrieve the result as a new Table\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esqlQuery\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;SELECT product, amount FROM Orders WHERE product LIKE \u0026#39;%Rubber%\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Execute insert SQL with a registered table\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// register a TableSink\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE RubberOrders(product STRING, amount INT) WITH (\u0026#39;connector.path\u0026#39;=\u0026#39;/path/to/file\u0026#39; ...)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// run an insert SQL on the Table and emit the result to the TableSink\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etableEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE \u0026#39;%Rubber%\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eFlink SQL\u0026gt; CREATE TABLE Orders \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003euser\u003cspan class=\"sb\"\u003e`\u003c/span\u003e BIGINT, product STRING, amount INT\u003cspan class=\"o\"\u003e)\u003c/span\u003e WITH \u003cspan class=\"o\"\u003e(\u003c/span\u003e...\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eINFO\u003cspan class=\"o\"\u003e]\u003c/span\u003e Table has been created.\n\nFlink SQL\u0026gt; CREATE TABLE RubberOrders \u003cspan class=\"o\"\u003e(\u003c/span\u003eproduct STRING, amount INT\u003cspan class=\"o\"\u003e)\u003c/span\u003e WITH \u003cspan class=\"o\"\u003e(\u003c/span\u003e...\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eINFO\u003cspan class=\"o\"\u003e]\u003c/span\u003e Table has been created.\n\nFlink SQL\u0026gt; INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE \u003cspan class=\"s1\"\u003e\u0026#39;%Rubber%\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eINFO\u003cspan class=\"o\"\u003e]\u003c/span\u003e Submitting SQL update statement to the cluster...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"create-table\"\u003eCREATE TABLE\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.][\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"k\"\u003etable_name\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"err\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecolumn_definition\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecomputed_column_definition\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"err\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewatermark_definition\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003etable_constraint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e][\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eCOMMENT\u003c/span\u003e \u003cspan class=\"n\"\u003etable_comment\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ePARTITIONED\u003c/span\u003e \u003cspan class=\"k\"\u003eBY\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epartition_column_name1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epartition_column_name2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...)]\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eval1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eval2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...)\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e \u003cspan class=\"k\"\u003eLIKE\u003c/span\u003e \u003cspan class=\"n\"\u003esource_table\u003c/span\u003e \u003cspan class=\"p\"\u003e[(\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003elike_options\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e)]\u003c/span\u003e \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n   \n\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecolumn_definition\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ecolumn_name\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumn_type\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecolumn_constraint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eCOMMENT\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumn_comment\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \n\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecolumn_constraint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eCONSTRAINT\u003c/span\u003e \u003cspan class=\"k\"\u003econstraint_name\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003ePRIMARY\u003c/span\u003e \u003cspan class=\"k\"\u003eKEY\u003c/span\u003e \u003cspan class=\"k\"\u003eNOT\u003c/span\u003e \u003cspan class=\"n\"\u003eENFORCED\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003etable_constraint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eCONSTRAINT\u003c/span\u003e \u003cspan class=\"k\"\u003econstraint_name\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003ePRIMARY\u003c/span\u003e \u003cspan class=\"k\"\u003eKEY\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ecolumn_name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...)\u003c/span\u003e \u003cspan class=\"k\"\u003eNOT\u003c/span\u003e \u003cspan class=\"n\"\u003eENFORCED\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecomputed_column_definition\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ecolumn_name\u003c/span\u003e \u003cspan class=\"k\"\u003eAS\u003c/span\u003e \u003cspan class=\"n\"\u003ecomputed_column_expression\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eCOMMENT\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumn_comment\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ewatermark_definition\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eWATERMARK\u003c/span\u003e \u003cspan class=\"k\"\u003eFOR\u003c/span\u003e \u003cspan class=\"n\"\u003erowtime_column_name\u003c/span\u003e \u003cspan class=\"k\"\u003eAS\u003c/span\u003e \u003cspan class=\"n\"\u003ewatermark_strategy_expression\u003c/span\u003e\n  \n\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003elike_options\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003cspan class=\"err\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"err\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003eINCLUDING\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"k\"\u003eEXCLUDING\u003c/span\u003e \u003cspan class=\"err\"\u003e}\u003c/span\u003e \u003cspan class=\"err\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003eALL\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"k\"\u003eCONSTRAINTS\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ePARTITIONS\u003c/span\u003e \u003cspan class=\"err\"\u003e}\u003c/span\u003e\n \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"err\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003eINCLUDING\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"k\"\u003eEXCLUDING\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eOVERWRITING\u003c/span\u003e \u003cspan class=\"err\"\u003e}\u003c/span\u003e \u003cspan class=\"err\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003eGENERATED\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"k\"\u003eOPTIONS\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eWATERMARKS\u003c/span\u003e \u003cspan class=\"err\"\u003e}\u003c/span\u003e \n\u003cspan class=\"err\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e[,\u003c/span\u003e \u003cspan class=\"p\"\u003e...]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用给定的名称创建一个表。如果目录中已经存在同名表，则抛出一个异常。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e计算列\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e计算列是使用 \u0026ldquo;column_name AS computed_column_expression\u0026rdquo; 语法生成的虚拟列。它是由一个非查询表达式生成的，这个表达式使用同一张表中的其他列，而不是实际存储在表中。例如，计算列可以定义为 \u003ccode\u003ecost AS price * quantity\u003c/code\u003e。表达式可以包含物理列、常量、函数或变量的任意组合。表达式不能包含子查询。\u003c/p\u003e\n\u003cp\u003e计算列在 Flink 中通常用于在 CREATE TABLE 语句中定义\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/streaming/time_attributes.html\"\u003e时间属性\u003c/a\u003e。可以通过 \u003ccode\u003eproc AS PROCTIME()\u003c/code\u003e 使用系统 \u003ccode\u003eproctime()\u003c/code\u003e 函数轻松定义一个\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/streaming/time_attributes.html#processing-time\"\u003e处理时间属性\u003c/a\u003e。另一方面，计算列可以用来派生事件时间列，因为事件时间列可能需要从现有的字段中派生出来，比如原来的字段不是 TIMESTAMP(3)类型，或者嵌套在 JSON 字符串中。\u003c/p\u003e\n\u003cp\u003e注意：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在源表上定义的计算列是在从源表读取后计算出来的，它可以用在下面的 SELECT 查询语句中。\u003c/li\u003e\n\u003cli\u003e计算列不能作为 INSERT 语句的目标。在 INSERT 语句中，SELECT 子句的模式应该与没有计算列的目标表的模式相匹配。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eWATERMARK\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWATERMARK 定义了表的事件时间属性，其形式为 \u003ccode\u003eWATERMARK FOR rowtime_column_name AS watermark_strategy_expression\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003erowtime_column_name\u003c/code\u003e 定义了一个现有的列，该列被标记为表的事件时间属性。这个列的类型必须是 TIMESTAMP(3)，并且是模式中的顶层列。它可以是一个计算列。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ewatermark_strategy_expression\u003c/code\u003e 定义了水印生成策略。它允许任意的非查询表达式，包括计算列，来计算水印。表达式的返回类型必须是 TIMESTAMP(3)，它表示自 Epoch 以来的时间戳。只有当返回的水印是非空的，并且它的值大于之前发出的本地水印时，才会发出水印（以保留升水印的契约）。水印生成表达式由框架对每条记录进行评估。框架将定期发射最大的生成水印。如果当前的水印仍然与上一个水印相同，或者是空的，或者返回的水印值小于上一次发射的水印值，那么将不会发射新的水印。水印是在 \u003ccode\u003epipeline.auto-watermark-interval\u003c/code\u003e 配置定义的时间间隔内发出的。如果水印间隔为 0ms，如果生成的水印不是空的，并且大于最后一个水印，则每条记录都会发出水印。\u003c/p\u003e\n\u003cp\u003e当使用事件时间语义时，表必须包含事件时间属性和水印策略。\u003c/p\u003e\n\u003cp\u003eFlink 提供了几种常用的水印策略。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e严格的升序时间戳。WATERMARK FOR rowtime_column AS rowtime_column。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e发出迄今为止观察到的最大时间戳的水印。时间戳小于最大时间戳的行不会迟到。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e升序时间戳。WATERMARK FOR rowtime_column AS rowtime_column - INTERVAL \u0026lsquo;0.001\u0026rsquo; SECOND.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e发出迄今为止观察到的最大时间戳的水印减 1。时间戳等于或小于最大时间戳的行不会迟到。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e绑定出顺序性的时间戳。WATERMARK FOR rowtime_column AS rowtime_column - INTERVAL \u0026lsquo;string\u0026rsquo; timeUnit.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e发出水印，水印是最大观察到的时间戳减去指定的延迟，例如：WATERMARK FOR rowtime_column AS rowtime_column - INTERVAL \u0026lsquo;5\u0026rsquo; SECOND 是 5 秒的延迟水印策略。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"n\"\u003eOrders\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003euser\u003c/span\u003e \u003cspan class=\"nb\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eproduct\u003c/span\u003e \u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e \u003cspan class=\"k\"\u003eTIMESTAMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eWATERMARK\u003c/span\u003e \u003cspan class=\"k\"\u003eFOR\u003c/span\u003e \u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e \u003cspan class=\"k\"\u003eAS\u003c/span\u003e \u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nb\"\u003eINTERVAL\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;5\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003eSECOND\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003ePRIMARY\u003c/span\u003e \u003cspan class=\"k\"\u003eKEY\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003ePRIMARY KEY\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eFlink 利用优化的一个提示。它告诉我们一个表或视图的一列或一组列是唯一的，它们不包含空值。主键中的两列都不能为空。因此，主键可以唯一地识别表中的某一行。\u003c/p\u003e\n\u003cp\u003e主键约束既可以和列定义一起声明（列约束），也可以作为单行（表约束）。对于这两种情况，只能将其声明为一个单子。如果你同时定义了多个主键约束，就会抛出一个异常。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e有效性检查\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSQL 标准规定，一个约束可以是 ENFORCED 或 NOT ENFORCED。这控制了约束检查是否会在输入/输出数据上执行。Flink 并不拥有数据，因此我们要支持的唯一模式是 NOT ENFORCED 模式。用户要确保查询强制执行密钥的完整性。\u003c/p\u003e\n\u003cp\u003eFlink 会假设主键的正确性，假设列的空性与主键的列对齐。连接器应该确保这些是对齐的。\u003c/p\u003e\n\u003cp\u003e注意事项: 在 CREATE TABLE 语句中，创建主键约束会改变列的可空性，也就是说，有主键约束的列是不可空的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePARTITIONED BY\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e按指定的列对创建的表进行分区。如果该表被用作文件系统汇，则会为每个分区创建一个目录。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWITH OPTIONS\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e表属性用于创建表源/接收器。这些属性通常用于查找和创建底层连接器。\u003c/p\u003e\n\u003cp\u003e表达式 key1=val1 的键和值都应该是字符串文字。关于不同连接器的所有支持的表属性，请参见\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/connect.html\"\u003e连接到外部系统\u003c/a\u003e中的详细信息。\u003c/p\u003e\n\u003cp\u003e注释：表名可以有三种格式。表名可以有三种格式。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003ecatalog_name.db_name.table_name\u003c/li\u003e\n\u003cli\u003edb_name.table_name\u003c/li\u003e\n\u003cli\u003etable_name。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e对于 catalog_name.db_name.table_name，表将被注册到元存储中，目录名为 \u0026ldquo;catalog_name\u0026rdquo;，数据库名为 \u0026ldquo;db_name\u0026rdquo;；对于 db_name.table_name，表将被注册到执行表环境的当前目录中，数据库名为 \u0026ldquo;db_name\u0026rdquo;；对于 table_name，表将被注册到执行表环境的当前目录和数据库中。\u003c/p\u003e\n\u003cp\u003e注意事项: 用 CREATE TABLE 语句注册的表既可以作为表源，也可以作为表汇，在 DMLs 中没有引用之前，我们不能决定它是作为表源还是表汇使用。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLIKE 子句\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eLIKE 子句是 SQL 特征的变体/组合（特征 T171，\u0026ldquo;表定义中的 LIKE 子句\u0026quot;和特征 T173，\u0026ldquo;表定义中的扩展 LIKE 子句\u0026rdquo;）。该子句可用于根据现有表的定义创建一个表。此外，用户还可以扩展原表或排除其中的某些部分。与 SQL 标准不同的是，该子句必须在 CREATE 语句的顶层定义。这是因为该子句适用于定义的多个部分，而不仅仅是模式部分。\u003c/p\u003e\n\u003cp\u003e你可以使用该子句来重用（并可能覆盖）某些连接器属性，或者为外部定义的表添加水印。例如，您可以为 Apache Hive 中定义的表添加水印。\u003c/p\u003e\n\u003cp\u003e请考虑下面的示例语句。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"n\"\u003eOrders\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003euser\u003c/span\u003e \u003cspan class=\"nb\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eproduct\u003c/span\u003e \u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e \u003cspan class=\"k\"\u003eTIMESTAMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \n    \u003cspan class=\"s1\"\u003e\u0026#39;connector\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;kafka\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s1\"\u003e\u0026#39;scan.startup.mode\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;earliest-offset\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"n\"\u003eOrders_with_watermark\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e-- Add watermark definition\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eWATERMARK\u003c/span\u003e \u003cspan class=\"k\"\u003eFOR\u003c/span\u003e \u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e \u003cspan class=\"k\"\u003eAS\u003c/span\u003e \u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nb\"\u003eINTERVAL\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;5\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003eSECOND\u003c/span\u003e \n\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e-- Overwrite the startup-mode\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"s1\"\u003e\u0026#39;scan.startup.mode\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;latest-offset\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eLIKE\u003c/span\u003e \u003cspan class=\"n\"\u003eOrders\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由此产生的 Orders_with_watermark 表将等同于用以下语句创建的表。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"n\"\u003eOrders_with_watermark\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003euser\u003c/span\u003e \u003cspan class=\"nb\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eproduct\u003c/span\u003e \u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e \u003cspan class=\"k\"\u003eTIMESTAMP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eWATERMARK\u003c/span\u003e \u003cspan class=\"k\"\u003eFOR\u003c/span\u003e \u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e \u003cspan class=\"k\"\u003eAS\u003c/span\u003e \u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nb\"\u003eINTERVAL\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;5\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003eSECOND\u003c/span\u003e \n\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s1\"\u003e\u0026#39;connector\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;kafka\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s1\"\u003e\u0026#39;scan.startup.mode\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;latest-offset\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以用同类选项控制表功能的合并逻辑。\u003c/p\u003e\n\u003cp\u003e您可以控制以下的合并行为:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCONSTRAINTS - 主键和唯一键等约束条件。\u003c/li\u003e\n\u003cli\u003eGENERATED-计算列\u003c/li\u003e\n\u003cli\u003eOPTIONS - 描述连接器和格式属性的连接器选项。\u003c/li\u003e\n\u003cli\u003ePARTITIONS - 表的分区\u003c/li\u003e\n\u003cli\u003eWATERMARKS - 水印声明\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e有三种不同的合并策略。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eINCLUDING - 包括源表的特征，对重复的条目失败，例如，如果两个表中都存在相同键的选项。\u003c/li\u003e\n\u003cli\u003eEXCLUDING - 不包含源表的给定特征。\u003c/li\u003e\n\u003cli\u003eOVERWRITING - 包括源表的特征，用新表的属性覆盖源表的重复条目，例如，如果两个表中都存在具有相同键的选项，则将使用当前语句中的选项。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e此外，可以使用 INCLUDING/EXCLUDING ALL 选项来指定如果没有定义特定的策略应该是什么，即如果使用 EXCLUDING ALL INCLUDING WATERMARKS，则只从源表中包含水印。\u003c/p\u003e\n\u003cp\u003e例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"c1\"\u003e-- A source table stored in a filesystem\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"n\"\u003eOrders_in_file\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003euser\u003c/span\u003e \u003cspan class=\"nb\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eproduct\u003c/span\u003e \u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eorder_time_string\u003c/span\u003e \u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e \u003cspan class=\"k\"\u003eAS\u003c/span\u003e \u003cspan class=\"n\"\u003eto_timestamp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003ePARTITIONED\u003c/span\u003e \u003cspan class=\"k\"\u003eBY\u003c/span\u003e \u003cspan class=\"k\"\u003euser\u003c/span\u003e \n\u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \n    \u003cspan class=\"s1\"\u003e\u0026#39;connector\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;filesystem\u0026#39;\u003c/span\u003e\n    \u003cspan class=\"s1\"\u003e\u0026#39;path\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;...\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e-- A corresponding table we want to store in kafka\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e \u003cspan class=\"n\"\u003eOrders_in_kafka\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e-- Add watermark definition\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eWATERMARK\u003c/span\u003e \u003cspan class=\"k\"\u003eFOR\u003c/span\u003e \u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e \u003cspan class=\"k\"\u003eAS\u003c/span\u003e \u003cspan class=\"n\"\u003eorder_time\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nb\"\u003eINTERVAL\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;5\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003eSECOND\u003c/span\u003e \n\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s1\"\u003e\u0026#39;connector\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;kafka\u0026#39;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eLIKE\u003c/span\u003e \u003cspan class=\"n\"\u003eOrders_in_file\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e-- Exclude everything besides the computed columns which we need to generate the watermark for.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e-- We do not want to have the partitions or filesystem options as those do not apply to kafka. \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eEXCLUDING\u003c/span\u003e \u003cspan class=\"k\"\u003eALL\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eINCLUDING\u003c/span\u003e \u003cspan class=\"k\"\u003eGENERATED\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果您没有提供同类选项，则默认使用 \u003ccode\u003eINCLUDING ALL OVERWRITING OPTIONS\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e注意: 您无法控制合并物理字段的行为。这些字段将被合并，就像您应用 \u003cstrong\u003eINCLUDING\u003c/strong\u003e 策略一样。\u003c/p\u003e\n\u003ch2 id=\"create-catalog\"\u003eCREATE CATALOG\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eCATALOG\u003c/span\u003e \u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eval1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eval2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用给定的目录属性创建一个目录。如果已经存在同名的目录，则会产生异常。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWITH OPTIONS\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e目录属性，用于存储与本目录相关的额外信息。表达式 key1=val1 的键和值都应该是字符串文字。\u003c/p\u003e\n\u003cp\u003e更多详情请查看\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/catalogs.html\"\u003e目录\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"create-database\"\u003eCREATE DATABASE\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"k\"\u003eDATABASE\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eIF\u003c/span\u003e \u003cspan class=\"k\"\u003eNOT\u003c/span\u003e \u003cspan class=\"k\"\u003eEXISTS\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eCOMMENT\u003c/span\u003e \u003cspan class=\"n\"\u003edatabase_comment\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eWITH\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eval1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eval2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用给定的数据库属性创建一个数据库，如果目录中已经存在同名的数据库，则抛出异常。如果目录中已经存在相同名称的数据库，则会抛出异常。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIF NOT EXISTS\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果数据库已经存在，则不会发生任何事情。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWITH OPTIONS\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e数据库属性，用于存储与本数据库相关的额外信息。表达式 key1=val1 的键和值都应该是字符串文字。\u003c/p\u003e\n\u003ch2 id=\"create-view\"\u003eCREATE VIEW\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eTEMPORARY\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003eVIEW\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eIF\u003c/span\u003e \u003cspan class=\"k\"\u003eNOT\u003c/span\u003e \u003cspan class=\"k\"\u003eEXISTS\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.][\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"n\"\u003eview_name\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"err\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ecolumnName\u003c/span\u003e \u003cspan class=\"p\"\u003e[,\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumnName\u003c/span\u003e \u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"err\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eCOMMENT\u003c/span\u003e \u003cspan class=\"n\"\u003eview_comment\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eAS\u003c/span\u003e \u003cspan class=\"n\"\u003equery_expression\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用给定的查询表达式创建一个视图，如果目录中已经存在同名的视图，则抛出异常。如果目录中已经存在同名的视图，则会抛出异常。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTEMPORARY\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e创建具有目录和数据库命名空间并覆盖视图的临时视图。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIF NOT EXISTS\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果视图已经存在，则不会发生任何事情。\u003c/p\u003e\n\u003ch2 id=\"create-function\"\u003eCREATE FUNCTION\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eTEMPORARY\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"k\"\u003eTEMPORARY\u003c/span\u003e \u003cspan class=\"k\"\u003eSYSTEM\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003eFUNCTION\u003c/span\u003e \n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eIF\u003c/span\u003e \u003cspan class=\"k\"\u003eNOT\u003c/span\u003e \u003cspan class=\"k\"\u003eEXISTS\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ecatalog_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.][\u003c/span\u003e\u003cspan class=\"n\"\u003edb_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"n\"\u003efunction_name\u003c/span\u003e \n  \u003cspan class=\"k\"\u003eAS\u003c/span\u003e \u003cspan class=\"n\"\u003eidentifier\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eLANGUAGE\u003c/span\u003e \u003cspan class=\"n\"\u003eJAVA\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eSCALA\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ePYTHON\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e创建一个目录函数，该函数具有目录和数据库的名称空间，并带有标识符和可选的语言标签。如果目录中已经存在同名函数，则会抛出一个异常。\u003c/p\u003e\n\u003cp\u003e如果语言标签是 JAVA/SCALA，标识符是 UDF 的完整 classpath。关于 Java/Scala UDF 的实现，请参考 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/functions/udfs.html\"\u003eUser-defined Functions\u003c/a\u003e 了解详情。\u003c/p\u003e\n\u003cp\u003e如果语言标签是 PYTHON，标识符是 UDF 的完全限定名，例如 pyflink.table.test.test_udf.add。关于 Python UDF 的实现，更多细节请参考 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/python/user-guide/table/udfs/python_udfs.html\"\u003ePython UDFs\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTEMPORARY\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e创建具有目录和数据库命名空间并覆盖目录功能的临时目录功能。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTEMPORARY SYSTEM\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e创建没有命名空间并覆盖内置函数的临时系统函数。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIF NOT EXISTS\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果函数已经存在，则不会发生任何事情。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLANGUAGE JAVA|SCALA|PYTHON\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e语言标签，用于指示 Flink 运行时如何执行函数。目前只支持 JAVA、SCALA 和 PYTHON，函数的默认语言是 JAVA。\u003c/p\u003e\n\u003cp\u003e原文链接: \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html\"\u003ehttps://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html\u003c/a\u003e\u003c/p\u003e\n","text":"CREATE 语句 CREATE 语句用于在当前或指定的目录中注册一个表/视图/函数。注册的表/视图/函数可以在 SQL 查询中使用。\nFlink SQL 目前支持以下 CREATE 语句。\n CREATE TABLE CREATE DATABASE CREATE VIEW CREATE FUNCTION  运行一条 CREATE 语句 CREATE 语句可以用 TableEnvironment 的 executeSql()方法执行，也可以在 SQL CLI 中执行。executeSql()方法对于一个成功的 CREATE 操作会返回\u0026rsquo;OK'，否则会抛出一个异常。\n下面的例子展示了如何在 TableEnvironment 和 SQL CLI 中运行 CREATE 语句。\n// Scala val settings = EnvironmentSettings.newInstance()... val tableEnv = TableEnvironment.create(settings) // SQL query with a registered table // register a table named \u0026#34;Orders\u0026#34; tableEnv.executeSql(\u0026#34;CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...)\u0026#34;); // run a SQL query on the Table and retrieve the result as a new Table val result = tableEnv.sqlQuery( \u0026#34;SELECT product, amount FROM Orders WHERE product LIKE \u0026#39;%Rubber%\u0026#39;\u0026#34;); // Execute insert SQL with a registered table // register a TableSink tableEnv.executeSql(\u0026#34;CREATE TABLE RubberOrders(product STRING, amount INT) WITH (\u0026#39;connector.path\u0026#39;=\u0026#39;/path/to/file\u0026#39; ...)\u0026#34;); // run an insert SQL on the Table and emit the result to the TableSink tableEnv.executeSql( \u0026#34;INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE \u0026#39;%Rubber%\u0026#39;\u0026#34;) Flink SQL\u0026gt; CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...); [INFO] Table has been created. Flink SQL\u0026gt; CREATE TABLE RubberOrders (product STRING, amount INT) WITH (...); [INFO] Table has been created. Flink SQL\u0026gt; INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE \u0026#39;%Rubber%\u0026#39;; [INFO] Submitting SQL update statement to the cluster... CREATE TABLE CREATE TABLE [catalog_name.][db_name.]table_name ( { \u0026lt;column_definition\u0026gt; | \u0026lt;computed_column_definition\u0026gt; }[ , ...n] [ \u0026lt;watermark_definition\u0026gt; ] [ \u0026lt;table_constraint\u0026gt; ][ , ...n] ) [COMMENT table_comment] [PARTITIONED BY (partition_column_name1, partition_column_name2, ...)] WITH (key1=val1, key2=val2, ...) [ LIKE source_table [( \u0026lt;like_options\u0026gt; )] ] \u0026lt;column_definition\u0026gt;: column_name column_type [ \u0026lt;column_constraint\u0026gt; ] [COMMENT column_comment] \u0026lt;column_constraint\u0026gt;: [CONSTRAINT constraint_name] PRIMARY KEY NOT ENFORCED \u0026lt;table_constraint\u0026gt;: [CONSTRAINT constraint_name] PRIMARY KEY (column_name, ...) NOT ENFORCED \u0026lt;computed_column_definition\u0026gt;: column_name AS computed_column_expression [COMMENT column_comment] \u0026lt;watermark_definition\u0026gt;: WATERMARK FOR rowtime_column_name AS watermark_strategy_expression \u0026lt;like_options\u0026gt;: { { INCLUDING | EXCLUDING } { ALL | CONSTRAINTS | PARTITIONS } | { INCLUDING | EXCLUDING | OVERWRITING } { GENERATED | OPTIONS | WATERMARKS } }[, ...] 用给定的名称创建一个表。如果目录中已经存在同名表，则抛出一个异常。\n计算列\n计算列是使用 \u0026ldquo;column_name AS computed_column_expression\u0026rdquo; 语法生成的虚拟列。它是由一个非查询表达式生成的，这个表达式使用同一张表中的其他列，而不是实际存储在表中。例如，计算列可以定义为 cost AS price * quantity。表达式可以包含物理列、常量、函数或变量的任意组合。表达式不能包含子查询。\n计算列在 Flink 中通常用于在 CREATE TABLE 语句中定义时间属性。可以通过 proc AS PROCTIME() 使用系统 proctime() 函数轻松定义一个处理时间属性。另一方面，计算列可以用来派生事件时间列，因为事件时间列可能需要从现有的字段中派生出来，比如原来的字段不是 TIMESTAMP(3)类型，或者嵌套在 JSON 字符串中。\n注意：\n 在源表上定义的计算列是在从源表读取后计算出来的，它可以用在下面的 SELECT 查询语句中。 计算列不能作为 INSERT 语句的目标。在 INSERT 语句中，SELECT 子句的模式应该与没有计算列的目标表的模式相匹配。  WATERMARK\nWATERMARK 定义了表的事件时间属性，其形式为 WATERMARK FOR rowtime_column_name AS watermark_strategy_expression。\nrowtime_column_name 定义了一个现有的列，该列被标记为表的事件时间属性。这个列的类型必须是 TIMESTAMP(3)，并且是模式中的顶层列。它可以是一个计算列。\nwatermark_strategy_expression 定义了水印生成策略。它允许任意的非查询表达式，包括计算列，来计算水印。表达式的返回类型必须是 TIMESTAMP(3)，它表示自 Epoch 以来的时间戳。只有当返回的水印是非空的，并且它的值大于之前发出的本地水印时，才会发出水印（以保留升水印的契约）。水印生成表达式由框架对每条记录进行评估。框架将定期发射最大的生成水印。如果当前的水印仍然与上一个水印相同，或者是空的，或者返回的水印值小于上一次发射的水印值，那么将不会发射新的水印。水印是在 pipeline.auto-watermark-interval 配置定义的时间间隔内发出的。如果水印间隔为 0ms，如果生成的水印不是空的，并且大于最后一个水印，则每条记录都会发出水印。\n当使用事件时间语义时，表必须包含事件时间属性和水印策略。\nFlink 提供了几种常用的水印策略。\n  严格的升序时间戳。WATERMARK FOR rowtime_column AS rowtime_column。\n  发出迄今为止观察到的最大时间戳的水印。时间戳小于最大时间戳的行不会迟到。\n  升序时间戳。WATERMARK FOR rowtime_column AS rowtime_column - INTERVAL \u0026lsquo;0.001\u0026rsquo; SECOND.\n  发出迄今为止观察到的最大时间戳的水印减 1。时间戳等于或小于最大时间戳的行不会迟到。\n  绑定出顺序性的时间戳。WATERMARK FOR rowtime_column AS rowtime_column - INTERVAL \u0026lsquo;string\u0026rsquo; timeUnit.\n  发出水印，水印是最大观察到的时间戳减去指定的延迟，例如：WATERMARK FOR rowtime_column AS rowtime_column - INTERVAL \u0026lsquo;5\u0026rsquo; SECOND 是 5 秒的延迟水印策略。\nCREATE TABLE Orders ( user BIGINT, product STRING, order_time TIMESTAMP(3), WATERMARK FOR order_time AS order_time - INTERVAL \u0026#39;5\u0026#39; SECOND ) WITH ( . . . ); PRIMARY KEY PRIMARY KEY\nFlink 利用优化的一个提示。它告诉我们一个表或视图的一列或一组列是唯一的，它们不包含空值。主键中的两列都不能为空。因此，主键可以唯一地识别表中的某一行。\n主键约束既可以和列定义一起声明（列约束），也可以作为单行（表约束）。对于这两种情况，只能将其声明为一个单子。如果你同时定义了多个主键约束，就会抛出一个异常。\n有效性检查\nSQL 标准规定，一个约束可以是 ENFORCED 或 NOT ENFORCED。这控制了约束检查是否会在输入/输出数据上执行。Flink 并不拥有数据，因此我们要支持的唯一模式是 NOT ENFORCED 模式。用户要确保查询强制执行密钥的完整性。\nFlink 会假设主键的正确性，假设列的空性与主键的列对齐。连接器应该确保这些是对齐的。\n注意事项: 在 CREATE TABLE 语句中，创建主键约束会改变列的可空性，也就是说，有主键约束的列是不可空的。\nPARTITIONED BY\n按指定的列对创建的表进行分区。如果该表被用作文件系统汇，则会为每个分区创建一个目录。\nWITH OPTIONS\n表属性用于创建表源/接收器。这些属性通常用于查找和创建底层连接器。\n表达式 key1=val1 的键和值都应该是字符串文字。关于不同连接器的所有支持的表属性，请参见连接到外部系统中的详细信息。\n注释：表名可以有三种格式。表名可以有三种格式。\n catalog_name.db_name.table_name db_name.table_name table_name。  对于 catalog_name.db_name.table_name，表将被注册到元存储中，目录名为 \u0026ldquo;catalog_name\u0026rdquo;，数据库名为 \u0026ldquo;db_name\u0026rdquo;；对于 db_name.table_name，表将被注册到执行表环境的当前目录中，数据库名为 \u0026ldquo;db_name\u0026rdquo;；对于 table_name，表将被注册到执行表环境的当前目录和数据库中。\n注意事项: 用 CREATE TABLE 语句注册的表既可以作为表源，也可以作为表汇，在 DMLs 中没有引用之前，我们不能决定它是作为表源还是表汇使用。\nLIKE 子句\nLIKE 子句是 SQL 特征的变体/组合（特征 T171，\u0026ldquo;表定义中的 LIKE 子句\u0026quot;和特征 T173，\u0026ldquo;表定义中的扩展 LIKE 子句\u0026rdquo;）。该子句可用于根据现有表的定义创建一个表。此外，用户还可以扩展原表或排除其中的某些部分。与 SQL 标准不同的是，该子句必须在 CREATE 语句的顶层定义。这是因为该子句适用于定义的多个部分，而不仅仅是模式部分。\n你可以使用该子句来重用（并可能覆盖）某些连接器属性，或者为外部定义的表添加水印。例如，您可以为 Apache Hive 中定义的表添加水印。\n请考虑下面的示例语句。\nCREATE TABLE Orders ( user BIGINT, product STRING, order_time TIMESTAMP(3) ) WITH ( \u0026#39;connector\u0026#39; = \u0026#39;kafka\u0026#39;, \u0026#39;scan.startup.mode\u0026#39; = \u0026#39;earliest-offset\u0026#39; ); CREATE TABLE Orders_with_watermark ( -- Add watermark definition  WATERMARK FOR order_time AS order_time - INTERVAL \u0026#39;5\u0026#39; SECOND ) WITH ( -- Overwrite the startup-mode  \u0026#39;scan.startup.mode\u0026#39; = \u0026#39;latest-offset\u0026#39; ) LIKE Orders; 由此产生的 Orders_with_watermark 表将等同于用以下语句创建的表。\nCREATE TABLE Orders_with_watermark ( user BIGINT, product STRING, order_time TIMESTAMP(3), WATERMARK FOR order_time AS order_time - INTERVAL \u0026#39;5\u0026#39; SECOND ) WITH ( \u0026#39;connector\u0026#39; = \u0026#39;kafka\u0026#39;, \u0026#39;scan.startup.mode\u0026#39; = \u0026#39;latest-offset\u0026#39; ); 可以用同类选项控制表功能的合并逻辑。\n您可以控制以下的合并行为:\n CONSTRAINTS - 主键和唯一键等约束条件。 GENERATED-计算列 OPTIONS - 描述连接器和格式属性的连接器选项。 PARTITIONS - 表的分区 WATERMARKS - 水印声明  有三种不同的合并策略。\n INCLUDING - 包括源表的特征，对重复的条目失败，例如，如果两个表中都存在相同键的选项。 EXCLUDING - 不包含源表的给定特征。 OVERWRITING - 包括源表的特征，用新表的属性覆盖源表的重复条目，例如，如果两个表中都存在具有相同键的选项，则将使用当前语句中的选项。  此外，可以使用 INCLUDING/EXCLUDING ALL 选项来指定如果没有定义特定的策略应该是什么，即如果使用 EXCLUDING ALL INCLUDING WATERMARKS，则只从源表中包含水印。\n例子：\n-- A source table stored in a filesystem CREATE TABLE Orders_in_file ( user BIGINT, product STRING, order_time_string STRING, order_time AS to_timestamp(order_time) ) PARTITIONED BY user WITH ( \u0026#39;connector\u0026#39; = \u0026#39;filesystem\u0026#39; \u0026#39;path\u0026#39; = \u0026#39;...\u0026#39; ); -- A corresponding table we want to store in kafka CREATE TABLE Orders_in_kafka ( -- Add watermark definition  WATERMARK FOR order_time AS order_time - INTERVAL \u0026#39;5\u0026#39; SECOND ) WITH ( \u0026#39;connector\u0026#39;: \u0026#39;kafka\u0026#39; ... ) LIKE Orders_in_file ( -- Exclude everything besides the computed columns which we need to generate the watermark for.  -- We do not want to have the partitions or filesystem options as those do not apply to kafka.  EXCLUDING ALL INCLUDING GENERATED ); 如果您没有提供同类选项，则默认使用 INCLUDING ALL OVERWRITING OPTIONS。\n注意: 您无法控制合并物理字段的行为。这些字段将被合并，就像您应用 INCLUDING 策略一样。\nCREATE CATALOG CREATE CATALOG catalog_name WITH (key1=val1, key2=val2, ...) 用给定的目录属性创建一个目录。如果已经存在同名的目录，则会产生异常。\nWITH OPTIONS\n目录属性，用于存储与本目录相关的额外信息。表达式 key1=val1 的键和值都应该是字符串文字。\n更多详情请查看目录。\nCREATE DATABASE CREATE DATABASE [IF NOT EXISTS] [catalog_name.]db_name [COMMENT database_comment] WITH (key1=val1, key2=val2, ...) 用给定的数据库属性创建一个数据库，如果目录中已经存在同名的数据库，则抛出异常。如果目录中已经存在相同名称的数据库，则会抛出异常。\nIF NOT EXISTS\n如果数据库已经存在，则不会发生任何事情。\nWITH OPTIONS\n数据库属性，用于存储与本数据库相关的额外信息。表达式 key1=val1 的键和值都应该是字符串文字。\nCREATE VIEW CREATE [TEMPORARY] VIEW [IF NOT EXISTS] [catalog_name.][db_name.]view_name [{columnName [, columnName ]* }] [COMMENT view_comment] AS query_expression 用给定的查询表达式创建一个视图，如果目录中已经存在同名的视图，则抛出异常。如果目录中已经存在同名的视图，则会抛出异常。\nTEMPORARY\n创建具有目录和数据库命名空间并覆盖视图的临时视图。\nIF NOT EXISTS\n如果视图已经存在，则不会发生任何事情。\nCREATE FUNCTION CREATE [TEMPORARY|TEMPORARY SYSTEM] FUNCTION [IF NOT EXISTS] [catalog_name.][db_name.]function_name AS identifier [LANGUAGE JAVA|SCALA|PYTHON] 创建一个目录函数，该函数具有目录和数据库的名称空间，并带有标识符和可选的语言标签。如果目录中已经存在同名函数，则会抛出一个异常。\n如果语言标签是 JAVA/SCALA，标识符是 UDF 的完整 classpath。关于 Java/Scala UDF 的实现，请参考 User-defined Functions 了解详情。\n如果语言标签是 PYTHON，标识符是 UDF 的完全限定名，例如 pyflink.table.test.test_udf.add。关于 Python UDF 的实现，更多细节请参考 Python UDFs。\nTEMPORARY\n创建具有目录和数据库命名空间并覆盖目录功能的临时目录功能。\nTEMPORARY SYSTEM\n创建没有命名空间并覆盖内置函数的临时系统函数。\nIF NOT EXISTS\n如果函数已经存在，则不会发生任何事情。\nLANGUAGE JAVA|SCALA|PYTHON\n语言标签，用于指示 Flink 运行时如何执行函数。目前只支持 JAVA、SCALA 和 PYTHON，函数的默认语言是 JAVA。\n原文链接: https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html\n"},"name":"Create 语句","published":"2020-08-22T00:00:00+08:00","summary":"Create Statements","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-22-create-statements/"}