{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003ch2 id=\"项目配置\"\u003e项目配置\u003c/h2\u003e\n\u003cp\u003e每个 Flink 应用都依赖于一组 Flink 库。最起码，应用程序依赖于 Flink APIs。许多应用还依赖于某些连接器库（如 Kafka、Cassandra 等）。当运行 Flink 应用时（无论是在分布式部署中，还是在 IDE 中进行测试），Flink 运行时库也必须是可用的。\u003c/p\u003e\n\u003ch3 id=\"flink-核心和应用依赖性\"\u003eFlink 核心和应用依赖性\u003c/h3\u003e\n\u003cp\u003e与大多数运行用户定义应用的系统一样，Flink 中的依赖和库有两大类。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFlink 核心依赖。Flink 本身由一组运行系统所需的类和依赖关系组成，例如协调、网络、检查点、故障转移、API、操作（如窗口化）、资源管理等。所有这些类和依赖项的集合构成了 Flink 运行时的核心，在 Flink 应用启动时必须存在。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这些核心类和依赖项被打包在 flink-dist jar 中。它们是 Flink 的 lib 文件夹的一部分，也是基本的 Flink 容器镜像的一部分。把这些依赖关系想象成类似于 Java 的核心库（rt.jar，charsets.jar 等），其中包含了 String 和 List 等类。\u003c/p\u003e\n\u003cp\u003eFlink Core Dependencies 不包含任何连接器或库（CEP、SQL、ML 等），以避免默认情况下 classpath 中的依赖关系和类数量过多。事实上，我们尽量让核心依赖关系保持纤细，以保持默认 classpath 小，避免依赖冲突。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用户应用依赖是指特定用户应用所需要的所有连接器、格式或库。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e用户应用程序通常被打包成一个应用程序 jar，其中包含了应用程序代码和所需的连接器和库依赖。\u003c/p\u003e\n\u003cp\u003e用户应用依赖关系明确不包括 Flink DataStream API 和运行时依赖关系，因为这些已经是 Flink 核心依赖关系的一部分。\u003c/p\u003e\n\u003ch3 id=\"设置一个项目-基本依赖性\"\u003e设置一个项目: 基本依赖性\u003c/h3\u003e\n\u003cp\u003e每一个 Flink 应用都需要最低限度的 API 依赖关系，来进行开发。\u003c/p\u003e\n\u003cp\u003e当手动设置项目时，你需要为 Java/Scala API 添加以下依赖关系（这里用 Maven 语法表示，但同样的依赖关系也适用于其他构建工具（Gradle、SBT 等）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.apache.flink\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003eflink-streaming-scala_2.11\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.11.0\u003cspan class=\"nt\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026lt;scope\u0026gt;\u003c/span\u003eprovided\u003cspan class=\"nt\"\u003e\u0026lt;/scope\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e重要：请注意，所有这些依赖关系的范围都被设置为 \u003cem\u003eprovided\u003c/em\u003e。这意味着它们需要被编译，但它们不应该被打包到项目的应用程序 jar 文件中\u0026ndash;这些依赖是 Flink 核心依赖，在任何设置中都是可用的。\u003c/p\u003e\n\u003cp\u003e强烈建议将这些依赖关系保持在 \u003cem\u003eprovid\u003c/em\u003e 的作用域内。如果它们没有被设置为 \u003cem\u003eprovided\u003c/em\u003e，最好的情况是生成的 JAR 变得过大，因为它也包含了所有 Flink 核心依赖。最坏的情况是，添加到应用程序的 jar 文件中的 Flink 核心依赖与你自己的一些依赖版本发生冲突（通常通过倒类加载来避免）。\u003c/p\u003e\n\u003cp\u003e关于 IntelliJ 的说明：要使应用程序在 IntelliJ IDEA 中运行，就必须在运行配置中勾选 Include dependencies with \u0026ldquo;Provided\u0026rdquo; scope box。如果这个选项不可用（可能是由于使用了旧的 IntelliJ IDEA 版本），那么一个简单的变通方法是创建一个调用应用程序 \u003ccode\u003emain()\u003c/code\u003e 方法的测试。\u003c/p\u003e\n\u003ch3 id=\"添加连接器和库依赖性\"\u003e添加连接器和库依赖性\u003c/h3\u003e\n\u003cp\u003e大多数应用都需要特定的连接器或库来运行，例如与 Kafka、Cassandra 等的连接器。这些连接器不是 Flink 核心依赖的一部分，必须作为依赖关系添加到应用程序中。\u003c/p\u003e\n\u003cp\u003e下面是一个将 Kafka 的连接器作为依赖项添加的例子（Maven 语法）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.apache.flink\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003eflink-connector-kafka_2.11\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.11.0\u003cspan class=\"nt\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们建议将应用程序代码和所有需要的依赖关系打包成一个带有依赖关系的 jar，我们称之为应用 jar。应用 jar 可以提交给一个已经运行的 Flink 集群，或者添加到 Flink 应用容器镜像中。\u003c/p\u003e\n\u003cp\u003e从 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/project-configuration.html\"\u003eJava 项目模板\u003c/a\u003e或 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/project-configuration\"\u003eScala 项目模板\u003c/a\u003e创建的项目被配置为在运行 \u003ccode\u003emvn clean package\u003c/code\u003e 时自动将应用依赖关系包含到应用 jar 中。对于没有从这些模板中设置的项目，我们建议添加 Maven Shade Plugin（如下文附录中所列）来构建包含所有所需依赖项的应用 jar。\u003c/p\u003e\n\u003cp\u003e重要的是。为了让 Maven（和其他构建工具）正确地将依赖关系打包到应用 jar 中，这些应用依赖关系必须在编译范围中指定（与核心依赖关系不同，后者必须在提供的范围中指定）。\u003c/p\u003e\n\u003ch3 id=\"scala-版本\"\u003eScala 版本\u003c/h3\u003e\n\u003cp\u003eScala 版本(2.11, 2.12 等)彼此之间不是二进制兼容的。因此，Flink for Scala 2.11 不能用于使用 Scala 2.12 的应用程序。\u003c/p\u003e\n\u003cp\u003e所有的 Flink 依赖性都是以 Scala 版本为后缀的，例如 flink-streaming-scala_2.11。\u003c/p\u003e\n\u003cp\u003e只使用 Java 的开发者可以选择任何 Scala 版本，Scala 开发者需要选择与其应用的 Scala 版本相匹配的 Scala 版本。\u003c/p\u003e\n\u003cp\u003e请参考\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/flinkDev/building.html#scala-versions\"\u003e构建指南\u003c/a\u003e，了解如何为特定的 Scala 版本构建 Flink。\u003c/p\u003e\n\u003ch3 id=\"hadoop-依赖性\"\u003eHadoop 依赖性\u003c/h3\u003e\n\u003cp\u003e一般规则：永远不需要直接将 Hadoop 依赖关系添加到您的应用程序中。唯一的例外是当使用现有的 Hadoop 输入/输出格式和 Flink 的 Hadoop  兼容性包装时。\u003c/p\u003e\n\u003cp\u003e如果您想将 Flink 与 Hadoop 一起使用，您需要有一个包含 Hadoop 依赖的 Flink 设置，而不是将 Hadoop 添加为应用程序依赖。详情请参考 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/deployment/hadoop.html\"\u003eHadoop 设置指南\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e这种设计主要有两个原因。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e一些 Hadoop 交互发生在 Flink 的核心中，可能是在用户应用启动之前，例如为检查点设置 HDFS，通过 Hadoop 的 Kerberos 令牌进行认证，或者在 YARN 上进行部署。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFlink 的倒类加载方法将许多过渡性依赖从核心依赖中隐藏起来。这不仅适用于 Flink 自身的核心依赖，也适用于 Hadoop 在设置中存在的依赖。这样一来，应用程序可以使用相同依赖的不同版本，而不会遇到依赖冲突（相信我们，这是一个大问题，因为 Hadoop 的依赖树是巨大的）。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果你在 IDE 内部的测试或开发过程中需要 Hadoop 依赖关系（例如用于 HDFS 访问），请将这些依赖关系配置成类似于要测试或提供的依赖关系的范围。\u003c/p\u003e\n\u003ch3 id=\"maven-快速入门\"\u003eMaven 快速入门\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e所需\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e唯一的要求是工作中的 Maven 3.0.4（或更高）和 Java 8.x 的安装。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e创建项目\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e使用以下命令之一来创建项目。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用 Maven 原型\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ mvn archetype:generate                           \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -DarchetypeGroupId\u003cspan class=\"o\"\u003e=\u003c/span\u003eorg.apache.flink              \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -DarchetypeArtifactId\u003cspan class=\"o\"\u003e=\u003c/span\u003eflink-quickstart-java      \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -DarchetypeVersion\u003cspan class=\"o\"\u003e=\u003c/span\u003e1.11.0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这可以让你为新创建的项目命名，它将交互式地要求你提供 groupId、artifactId 和包名。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e运行快速启动脚本\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ curl https://flink.apache.org/q/quickstart.sh \u003cspan class=\"p\"\u003e|\u003c/span\u003e bash -s 1.11.0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们建议您将该项目导入到您的 IDE 中进行开发和测试。IntelliJ IDEA 支持开箱即用的 Maven 项目。如果您使用 Eclipse，\u003ca href=\"http://www.eclipse.org/m2e/\"\u003em2e 插件\u003c/a\u003e允许\u003ca href=\"http://books.sonatype.com/m2eclipse-book/reference/creating-sect-importing-projects.html#fig-creating-import\"\u003e导入 Maven 项目\u003c/a\u003e。有些 Eclipse 捆绑包默认包含该插件，有些则需要您手动安装。\u003c/p\u003e\n\u003cp\u003e请注意：Java 默认的 JVM 堆大小对 Flink 来说可能太小。你必须手动增加它。在 Eclipse 中，选择 Run Configurations -\u0026gt; Arguments，并在 VM Arguments 框中写下 -Xmx800m。在 IntelliJ IDEA 中推荐的改变 JVM 选项的方法是来自 Help | Edit Custom VM Options 菜单。详情请看\u003ca href=\"https://intellij-support.jetbrains.com/hc/en-us/articles/206544869-Configuring-JVM-options-and-platform-properties\"\u003e这篇文章\u003c/a\u003e。\u003c/p\u003e\n\u003ch4 id=\"构建项目\"\u003e构建项目\u003c/h4\u003e\n\u003cp\u003e如果你想构建/打包你的项目，进入你的项目目录并运行 \u0026ldquo;mvn clean package\u0026rdquo; 命令。你会发现一个 JAR 文件，其中包含了你的应用程序，加上你可能已经添加的连接器和库作为应用程序的依赖关系：\u003ccode\u003etarget/\u0026lt;artifact-id\u0026gt;-\u0026lt;version\u0026gt;.jar\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e注意：如果您使用与 StreamingJob 不同的类作为应用程序的主类/入口点，我们建议您相应地更改 pom.xml 文件中的 mainClass 设置。这样，Flink 就可以从 JAR 文件中运行应用程序，而不需要额外指定主类。\u003c/p\u003e\n\u003ch3 id=\"gradle\"\u003eGradle\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e需求\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e唯一的要求是工作的 Gradle 3.x（或更高）和 Java 8.x 安装。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e创建项目\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e使用以下命令之一来创建一个项目。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGradle 例子\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ebuild.gradle\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003ebuildscript\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003erepositories\u003c/span\u003e \u003cspan class=\"err\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"err\"\u003ejcenter()\u003c/span\u003e \u003cspan class=\"c1\"\u003e// this applies only to the Gradle \u0026#39;Shadow\u0026#39; plugin\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003edependencies\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"err\"\u003eclasspath\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;com.github.jengelman.gradle.plugins:shadow:2.0.4\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003eplugins\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003eid\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;java\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003eid\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;application\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// shadow plugin to produce fat JARs\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"err\"\u003eid\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;com.github.johnrengelman.shadow\u0026#39;\u003c/span\u003e \u003cspan class=\"err\"\u003eversion\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;2.0.4\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// artifact properties\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"err\"\u003egroup\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;org.myorg.quickstart\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003eversion\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"mf\"\u003e0.1\u003c/span\u003e\u003cspan class=\"err\"\u003e-SNAPSHOT\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003emainClassName\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;org.myorg.quickstart.StreamingJob\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003edescription\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;Flink Quickstart Job\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003eext\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003ejavaVersion\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;1.8\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003eflinkVersion\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;1.11.0\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003escalaBinaryVersion\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;2.11\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003eslf4jVersion\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;1.7.15\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003elog4jVersion\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;2.12.1\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003esourceCompatibility\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003ejavaVersion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003etargetCompatibility\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003ejavaVersion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003etasks.withType(JavaCompile)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"err\"\u003eoptions.encoding\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;UTF-8\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003eapplicationDefaultJvmArgs\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;-Dlog4j.configurationFile=log4j2.properties\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003etask\u003c/span\u003e \u003cspan class=\"err\"\u003ewrapper(type:\u003c/span\u003e \u003cspan class=\"err\"\u003eWrapper)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003egradleVersion\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;3.1\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// declare where to find the dependencies of your project\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"err\"\u003erepositories\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003emavenCentral()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003emaven\u003c/span\u003e \u003cspan class=\"err\"\u003e{\u003c/span\u003e \u003cspan class=\"err\"\u003eurl\u003c/span\u003e \u003cspan class=\"nt\"\u003e\u0026#34;https://repository.apache.org/content/repositories/snapshots/\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// NOTE: We cannot use \u0026#34;compileOnly\u0026#34; or \u0026#34;shadow\u0026#34; configurations since then we could not run code\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// in the IDE or with \u0026#34;gradle run\u0026#34;. We also cannot exclude transitive dependencies from the\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159).\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// -\u0026gt; Explicitly define the // libraries we want to be included in the \u0026#34;flinkShadowJar\u0026#34; configuration!\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"err\"\u003econfigurations\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003eflinkShadowJar\u003c/span\u003e \u003cspan class=\"c1\"\u003e// dependencies which go into the shadowJar\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// always exclude these (also from transitive dependencies) since they are provided by Flink\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"err\"\u003eflinkShadowJar.exclude\u003c/span\u003e \u003cspan class=\"err\"\u003egroup:\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;org.apache.flink\u0026#39;,\u003c/span\u003e \u003cspan class=\"err\"\u003emodule:\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;force-shading\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003eflinkShadowJar.exclude\u003c/span\u003e \u003cspan class=\"err\"\u003egroup:\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;com.google.code.findbugs\u0026#39;,\u003c/span\u003e \u003cspan class=\"err\"\u003emodule:\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;jsr305\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003eflinkShadowJar.exclude\u003c/span\u003e \u003cspan class=\"err\"\u003egroup:\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;org.slf4j\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003eflinkShadowJar.exclude\u003c/span\u003e \u003cspan class=\"err\"\u003egroup:\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;org.apache.logging.log4j\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// declare the dependencies for your production and test code\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"err\"\u003edependencies\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// --------------------------------------------------------------\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Compile-time dependencies that should NOT be part of the\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// shadow jar and are provided in the lib folder of Flink\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// --------------------------------------------------------------\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"err\"\u003ecompile\u003c/span\u003e \u003cspan class=\"nt\"\u003e\u0026#34;org.apache.flink:flink-streaming-java_${scalaBinaryVersion}:${flinkVersion}\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// --------------------------------------------------------------\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Dependencies that should be part of the shadow jar, e.g.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// connectors. These must be in the flinkShadowJar configuration!\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// --------------------------------------------------------------\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//flinkShadowJar \u0026#34;org.apache.flink:flink-connector-kafka-0.11_${scalaBinaryVersion}:${flinkVersion}\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003ecompile\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;org.apache.logging.log4j:log4j-api:${log4jVersion}\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003ecompile\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;org.apache.logging.log4j:log4j-core:${log4jVersion}\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003ecompile\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003ecompile\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;org.slf4j:slf4j-log4j12:${slf4jVersion}\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Add test dependencies here.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// testCompile \u0026#34;junit:junit:4.12\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// make compileOnly dependencies available for tests:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"err\"\u003esourceSets\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003emain.compileClasspath\u003c/span\u003e \u003cspan class=\"err\"\u003e+=\u003c/span\u003e \u003cspan class=\"err\"\u003econfigurations.flinkShadowJar\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003emain.runtimeClasspath\u003c/span\u003e \u003cspan class=\"err\"\u003e+=\u003c/span\u003e \u003cspan class=\"err\"\u003econfigurations.flinkShadowJar\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003etest.compileClasspath\u003c/span\u003e \u003cspan class=\"err\"\u003e+=\u003c/span\u003e \u003cspan class=\"err\"\u003econfigurations.flinkShadowJar\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003etest.runtimeClasspath\u003c/span\u003e \u003cspan class=\"err\"\u003e+=\u003c/span\u003e \u003cspan class=\"err\"\u003econfigurations.flinkShadowJar\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003ejavadoc.classpath\u003c/span\u003e \u003cspan class=\"err\"\u003e+=\u003c/span\u003e \u003cspan class=\"err\"\u003econfigurations.flinkShadowJar\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003erun.classpath\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003esourceSets.main.runtimeClasspath\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003ejar\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003emanifest\u003c/span\u003e \u003cspan class=\"err\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"err\"\u003eattributes\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;Built-By\u0026#39;:\u003c/span\u003e \u003cspan class=\"err\"\u003eSystem.getProperty(\u0026#39;user.name\u0026#39;),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"err\"\u003e\u0026#39;Build-Jdk\u0026#39;:\u003c/span\u003e \u003cspan class=\"err\"\u003eSystem.getProperty(\u0026#39;java.version\u0026#39;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003eshadowJar\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003econfigurations\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e[project.configurations.flinkShadowJar]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003esetting.gradle\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003erootProject.name\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;quickstart\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这允许你为你新创建的项目命名，它将交互式地询问你项目的名称、组织（也用于包名）、项目版本、Scala 和 Flink。它将交互式地要求你提供项目名称、组织（也用于包名）、项目版本、Scala 和 Flink 版本。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e运行快速启动脚本\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebash -c \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ecurl https://flink.apache.org/q/gradle-quickstart.sh\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e -- 1.11.0 2.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们建议你将这个项目导入到你的 IDE 中进行开发和测试。IntelliJ IDEA 在安装 Gradle 插件后，支持 Gradle 项目。Eclipse 通过 \u003ca href=\"https://projects.eclipse.org/projects/tools.buildship\"\u003eEclipse Buildship\u003c/a\u003e 插件来实现（确保在导入向导的最后一步指定 Gradle 版本\u0026gt;=3.0，影子插件需要它）。你也可以使用 \u003ca href=\"https://docs.gradle.org/current/userguide/userguide.html#ide-integration\"\u003eGradle 的 IDE 集成\u003c/a\u003e来从 Gradle 创建项目文件。\u003c/p\u003e\n\u003cp\u003e请注意：Java 默认的 JVM 堆大小对 Flink 来说可能太小。你必须手动增加它。在 Eclipse 中，选择 Run Configurations -\u0026gt; Arguments，并在 VM Arguments 框中写下 \u003ccode\u003e-Xmx800m\u003c/code\u003e。在 IntelliJ IDEA 中推荐的改变 JVM 选项的方法是来自 Help | Edit Custom VM Options 菜单。详情请看\u003ca href=\"https://intellij-support.jetbrains.com/hc/en-us/articles/206544869-Configuring-JVM-options-and-platform-properties\"\u003e这篇文章\u003c/a\u003e。\u003c/p\u003e\n\u003ch4 id=\"构建项目-1\"\u003e构建项目\u003c/h4\u003e\n\u003cp\u003e如果你想构建/打包你的项目，去你的项目目录下运行 \u0026ldquo;gradle clean shadowJar\u0026rdquo; 命令，你会发现一个 JAR 文件，其中包含了你的应用程序，以及你可能已经添加到应用程序中作为依赖的连接器和库：\u003ccode\u003ebuild/libs/\u0026lt;project-name\u0026gt;-\u0026lt;version\u0026gt;-all.jar\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e注意：如果你使用与 StreamingJob 不同的类作为应用程序的主类/入口点，我们建议你相应地更改 build.gradle 文件中的 mainClassName 设置。这样，Flink 就可以从 JAR 文件中运行应用程序，而无需额外指定主类。\u003c/p\u003e\n\u003ch3 id=\"sbt\"\u003eSBT\u003c/h3\u003e\n\u003ch4 id=\"创建项目\"\u003e创建项目\u003c/h4\u003e\n\u003cp\u003e您可以通过以下两种方法中的任何一种来构建一个新项目。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用 sbt 模板\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ sbt new tillrohrmann/flink-project.g8\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e运行快速启动脚本\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ bash \u0026lt;\u003cspan class=\"o\"\u003e(\u003c/span\u003ecurl https://flink.apache.org/q/sbt-quickstart.sh\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将在指定的项目目录下创建一个 Flink 项目。\u003c/p\u003e\n\u003ch4 id=\"构建项目-2\"\u003e构建项目\u003c/h4\u003e\n\u003cp\u003e为了建立你的项目，你只需要发出 sbt clean assembly 命令。这将在 \u003ccode\u003etarget/scala_your-major-scala-version/\u003c/code\u003e 目录下创建 fat-jar \u003ccode\u003eyour-project-name-assembly-0.1-SNAPSHOT.jar\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e运行项目\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e为了运行你的项目，你必须发出 sbt 运行命令。\u003c/p\u003e\n\u003cp\u003e默认情况下，这将在 sbt 运行的同一个 JVM 中运行你的工作。为了在不同的 JVM 中运行你的工作，请在 build.sbt 中添加以下行。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efork in run :\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"intellij\"\u003eIntelliJ\u003c/h4\u003e\n\u003cp\u003e我们推荐您使用 \u003ca href=\"https://www.jetbrains.com/idea/\"\u003eIntelliJ\u003c/a\u003e 进行 Flink 作业开发。为了开始，您必须将新创建的项目导入到 IntelliJ 中。您可以通过 File -\u0026gt; New -\u0026gt; Project from Existing Sources\u0026hellip;然后选择您的项目目录。IntelliJ 会自动检测 build.sbt 文件，并设置好一切。\u003c/p\u003e\n\u003cp\u003e为了运行 Flink 作业，建议选择 mainRunner 模块作为运行/调试配置的 classpath。这将确保所有被设置为提供的依赖关系在执行时都是可用的。您可以通过 Run -\u0026gt; Edit Configurations\u0026hellip;配置 Run/Debug 配置，然后从 Use classpath of module dropbox 中选择 mainRunner。\u003c/p\u003e\n\u003ch4 id=\"eclipse\"\u003eEclipse\u003c/h4\u003e\n\u003cp\u003e为了将新创建的项目导入到 \u003ca href=\"https://eclipse.org/\"\u003eEclipse\u003c/a\u003e 中，首先必须为其创建 Eclipse 项目文件。这些项目文件可以通过  \u003ca href=\"https://github.com/typesafehub/sbteclipse\"\u003esbteclipse\u003c/a\u003e 插件来创建。在 PROJECT_DIR/project/plugins.sbt 文件中添加以下一行。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eaddSbtPlugin(\u0026#34;com.typeafe.sbteclipse\u0026#34; % \u0026#34;sbteclipse-plugin\u0026#34; % \u0026#34;4.0.0\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在 sbt 中使用下面的命令来创建 Eclipse 项目文件\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026gt; eclipse\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e现在你可以通过 File-\u0026gt;Import\u0026hellip;-\u0026gt;Existing Projects into Workspace 导入 Eclipse，然后选择项目目录。\u003c/p\u003e\n\u003ch2 id=\"附录-用依赖关系构建-jar-的模板\"\u003e附录: 用依赖关系构建 Jar 的模板\u003c/h2\u003e\n\u003cp\u003e要构建一个包含声明的连接器和库所需的所有依赖关系的应用程序 JAR，可以使用以下 shade 插件定义。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;build\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;plugins\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;plugin\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.apache.maven.plugins\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003emaven-shade-plugin\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e3.1.1\u003cspan class=\"nt\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;executions\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;execution\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nt\"\u003e\u0026lt;phase\u0026gt;\u003c/span\u003epackage\u003cspan class=\"nt\"\u003e\u0026lt;/phase\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nt\"\u003e\u0026lt;goals\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        \u003cspan class=\"nt\"\u003e\u0026lt;goal\u0026gt;\u003c/span\u003eshade\u003cspan class=\"nt\"\u003e\u0026lt;/goal\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nt\"\u003e\u0026lt;/goals\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nt\"\u003e\u0026lt;configuration\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        \u003cspan class=\"nt\"\u003e\u0026lt;artifactSet\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            \u003cspan class=\"nt\"\u003e\u0026lt;excludes\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                \u003cspan class=\"nt\"\u003e\u0026lt;exclude\u0026gt;\u003c/span\u003ecom.google.code.findbugs:jsr305\u003cspan class=\"nt\"\u003e\u0026lt;/exclude\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                \u003cspan class=\"nt\"\u003e\u0026lt;exclude\u0026gt;\u003c/span\u003eorg.slf4j:*\u003cspan class=\"nt\"\u003e\u0026lt;/exclude\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                \u003cspan class=\"nt\"\u003e\u0026lt;exclude\u0026gt;\u003c/span\u003elog4j:*\u003cspan class=\"nt\"\u003e\u0026lt;/exclude\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            \u003cspan class=\"nt\"\u003e\u0026lt;/excludes\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        \u003cspan class=\"nt\"\u003e\u0026lt;/artifactSet\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        \u003cspan class=\"nt\"\u003e\u0026lt;filters\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            \u003cspan class=\"nt\"\u003e\u0026lt;filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                \u003cspan class=\"c\"\u003e\u0026lt;!-- Do not copy the signatures in the META-INF folder.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e                                Otherwise, this might cause SecurityExceptions when using the JAR. --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                \u003cspan class=\"nt\"\u003e\u0026lt;artifact\u0026gt;\u003c/span\u003e*:*\u003cspan class=\"nt\"\u003e\u0026lt;/artifact\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                \u003cspan class=\"nt\"\u003e\u0026lt;excludes\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                    \u003cspan class=\"nt\"\u003e\u0026lt;exclude\u0026gt;\u003c/span\u003eMETA-INF/*.SF\u003cspan class=\"nt\"\u003e\u0026lt;/exclude\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                    \u003cspan class=\"nt\"\u003e\u0026lt;exclude\u0026gt;\u003c/span\u003eMETA-INF/*.DSA\u003cspan class=\"nt\"\u003e\u0026lt;/exclude\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                    \u003cspan class=\"nt\"\u003e\u0026lt;exclude\u0026gt;\u003c/span\u003eMETA-INF/*.RSA\u003cspan class=\"nt\"\u003e\u0026lt;/exclude\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                \u003cspan class=\"nt\"\u003e\u0026lt;/excludes\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            \u003cspan class=\"nt\"\u003e\u0026lt;/filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        \u003cspan class=\"nt\"\u003e\u0026lt;/filters\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        \u003cspan class=\"nt\"\u003e\u0026lt;transformers\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            \u003cspan class=\"nt\"\u003e\u0026lt;transformer\u003c/span\u003e \u003cspan class=\"na\"\u003eimplementation=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                \u003cspan class=\"nt\"\u003e\u0026lt;mainClass\u0026gt;\u003c/span\u003emy.programs.main.clazz\u003cspan class=\"nt\"\u003e\u0026lt;/mainClass\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            \u003cspan class=\"nt\"\u003e\u0026lt;/transformer\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        \u003cspan class=\"nt\"\u003e\u0026lt;/transformers\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nt\"\u003e\u0026lt;/configuration\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;/execution\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;/executions\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;/plugin\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;/plugins\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/build\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e原文链接: \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/project-configuration.html\"\u003ehttps://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/project-configuration.html\u003c/a\u003e\u003c/p\u003e\n","text":"项目配置 每个 Flink 应用都依赖于一组 Flink 库。最起码，应用程序依赖于 Flink APIs。许多应用还依赖于某些连接器库（如 Kafka、Cassandra 等）。当运行 Flink 应用时（无论是在分布式部署中，还是在 IDE 中进行测试），Flink 运行时库也必须是可用的。\nFlink 核心和应用依赖性 与大多数运行用户定义应用的系统一样，Flink 中的依赖和库有两大类。\nFlink 核心依赖。Flink 本身由一组运行系统所需的类和依赖关系组成，例如协调、网络、检查点、故障转移、API、操作（如窗口化）、资源管理等。所有这些类和依赖项的集合构成了 Flink 运行时的核心，在 Flink 应用启动时必须存在。 这些核心类和依赖项被打包在 flink-dist jar 中。它们是 Flink 的 lib 文件夹的一部分，也是基本的 Flink 容器镜像的一部分。把这些依赖关系想象成类似于 Java 的核心库（rt.jar，charsets.jar 等），其中包含了 String 和 List 等类。\nFlink Core Dependencies 不包含任何连接器或库（CEP、SQL、ML 等），以避免默认情况下 classpath 中的依赖关系和类数量过多。事实上，我们尽量让核心依赖关系保持纤细，以保持默认 classpath 小，避免依赖冲突。\n用户应用依赖是指特定用户应用所需要的所有连接器、格式或库。 用户应用程序通常被打包成一个应用程序 jar，其中包含了应用程序代码和所需的连接器和库依赖。\n用户应用依赖关系明确不包括 Flink DataStream API 和运行时依赖关系，因为这些已经是 Flink 核心依赖关系的一部分。\n设置一个项目: 基本依赖性 每一个 Flink 应用都需要最低限度的 API 依赖关系，来进行开发。\n当手动设置项目时，你需要为 Java/Scala API 添加以下依赖关系（这里用 Maven 语法表示，但同样的依赖关系也适用于其他构建工具（Gradle、SBT 等）。\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.flink\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;flink-streaming-scala_2.11\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.11.0\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; 重要：请注意，所有这些依赖关系的范围都被设置为 provided。这意味着它们需要被编译，但它们不应该被打包到项目的应用程序 jar 文件中\u0026ndash;这些依赖是 Flink 核心依赖，在任何设置中都是可用的。\n强烈建议将这些依赖关系保持在 provid 的作用域内。如果它们没有被设置为 provided，最好的情况是生成的 JAR 变得过大，因为它也包含了所有 Flink 核心依赖。最坏的情况是，添加到应用程序的 jar 文件中的 Flink 核心依赖与你自己的一些依赖版本发生冲突（通常通过倒类加载来避免）。\n关于 IntelliJ 的说明：要使应用程序在 IntelliJ IDEA 中运行，就必须在运行配置中勾选 Include dependencies with \u0026ldquo;Provided\u0026rdquo; scope box。如果这个选项不可用（可能是由于使用了旧的 IntelliJ IDEA 版本），那么一个简单的变通方法是创建一个调用应用程序 main() 方法的测试。\n添加连接器和库依赖性 大多数应用都需要特定的连接器或库来运行，例如与 Kafka、Cassandra 等的连接器。这些连接器不是 Flink 核心依赖的一部分，必须作为依赖关系添加到应用程序中。\n下面是一个将 Kafka 的连接器作为依赖项添加的例子（Maven 语法）。\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.flink\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;flink-connector-kafka_2.11\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.11.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 我们建议将应用程序代码和所有需要的依赖关系打包成一个带有依赖关系的 jar，我们称之为应用 jar。应用 jar 可以提交给一个已经运行的 Flink 集群，或者添加到 Flink 应用容器镜像中。\n从 Java 项目模板或 Scala 项目模板创建的项目被配置为在运行 mvn clean package 时自动将应用依赖关系包含到应用 jar 中。对于没有从这些模板中设置的项目，我们建议添加 Maven Shade Plugin（如下文附录中所列）来构建包含所有所需依赖项的应用 jar。\n重要的是。为了让 Maven（和其他构建工具）正确地将依赖关系打包到应用 jar 中，这些应用依赖关系必须在编译范围中指定（与核心依赖关系不同，后者必须在提供的范围中指定）。\nScala 版本 Scala 版本(2.11, 2.12 等)彼此之间不是二进制兼容的。因此，Flink for Scala 2.11 不能用于使用 Scala 2.12 的应用程序。\n所有的 Flink 依赖性都是以 Scala 版本为后缀的，例如 flink-streaming-scala_2.11。\n只使用 Java 的开发者可以选择任何 Scala 版本，Scala 开发者需要选择与其应用的 Scala 版本相匹配的 Scala 版本。\n请参考构建指南，了解如何为特定的 Scala 版本构建 Flink。\nHadoop 依赖性 一般规则：永远不需要直接将 Hadoop 依赖关系添加到您的应用程序中。唯一的例外是当使用现有的 Hadoop 输入/输出格式和 Flink 的 Hadoop 兼容性包装时。\n如果您想将 Flink 与 Hadoop 一起使用，您需要有一个包含 Hadoop 依赖的 Flink 设置，而不是将 Hadoop 添加为应用程序依赖。详情请参考 Hadoop 设置指南。\n这种设计主要有两个原因。\n一些 Hadoop 交互发生在 Flink 的核心中，可能是在用户应用启动之前，例如为检查点设置 HDFS，通过 Hadoop 的 Kerberos 令牌进行认证，或者在 YARN 上进行部署。\nFlink 的倒类加载方法将许多过渡性依赖从核心依赖中隐藏起来。这不仅适用于 Flink 自身的核心依赖，也适用于 Hadoop 在设置中存在的依赖。这样一来，应用程序可以使用相同依赖的不同版本，而不会遇到依赖冲突（相信我们，这是一个大问题，因为 Hadoop 的依赖树是巨大的）。\n如果你在 IDE 内部的测试或开发过程中需要 Hadoop 依赖关系（例如用于 HDFS 访问），请将这些依赖关系配置成类似于要测试或提供的依赖关系的范围。\nMaven 快速入门 所需\n唯一的要求是工作中的 Maven 3.0.4（或更高）和 Java 8.x 的安装。\n创建项目\n使用以下命令之一来创建项目。\n使用 Maven 原型 $ mvn archetype:generate \\ -DarchetypeGroupId=org.apache.flink \\ -DarchetypeArtifactId=flink-quickstart-java \\ -DarchetypeVersion=1.11.0 这可以让你为新创建的项目命名，它将交互式地要求你提供 groupId、artifactId 和包名。\n运行快速启动脚本 $ curl https://flink.apache.org/q/quickstart.sh | bash -s 1.11.0 我们建议您将该项目导入到您的 IDE 中进行开发和测试。IntelliJ IDEA 支持开箱即用的 Maven 项目。如果您使用 Eclipse，m2e 插件允许导入 Maven 项目。有些 Eclipse 捆绑包默认包含该插件，有些则需要您手动安装。\n请注意：Java 默认的 JVM 堆大小对 Flink 来说可能太小。你必须手动增加它。在 Eclipse 中，选择 Run Configurations -\u0026gt; Arguments，并在 VM Arguments 框中写下 -Xmx800m。在 IntelliJ IDEA 中推荐的改变 JVM 选项的方法是来自 Help | Edit Custom VM Options 菜单。详情请看这篇文章。\n构建项目 如果你想构建/打包你的项目，进入你的项目目录并运行 \u0026ldquo;mvn clean package\u0026rdquo; 命令。你会发现一个 JAR 文件，其中包含了你的应用程序，加上你可能已经添加的连接器和库作为应用程序的依赖关系：target/\u0026lt;artifact-id\u0026gt;-\u0026lt;version\u0026gt;.jar。\n注意：如果您使用与 StreamingJob 不同的类作为应用程序的主类/入口点，我们建议您相应地更改 pom.xml 文件中的 mainClass 设置。这样，Flink 就可以从 JAR 文件中运行应用程序，而不需要额外指定主类。\nGradle 需求\n唯一的要求是工作的 Gradle 3.x（或更高）和 Java 8.x 安装。\n创建项目\n使用以下命令之一来创建一个项目。\nGradle 例子 build.gradle\nbuildscript { repositories { jcenter() // this applies only to the Gradle \u0026#39;Shadow\u0026#39; plugin } dependencies { classpath \u0026#39;com.github.jengelman.gradle.plugins:shadow:2.0.4\u0026#39; } } plugins { id \u0026#39;java\u0026#39; id \u0026#39;application\u0026#39; // shadow plugin to produce fat JARs id \u0026#39;com.github.johnrengelman.shadow\u0026#39; version \u0026#39;2.0.4\u0026#39; } // artifact properties group = \u0026#39;org.myorg.quickstart\u0026#39; version = \u0026#39;0.1-SNAPSHOT\u0026#39; mainClassName = \u0026#39;org.myorg.quickstart.StreamingJob\u0026#39; description = \u0026#34;\u0026#34;\u0026#34;Flink Quickstart Job\u0026#34;\u0026#34;\u0026#34; ext { javaVersion = \u0026#39;1.8\u0026#39; flinkVersion = \u0026#39;1.11.0\u0026#39; scalaBinaryVersion = \u0026#39;2.11\u0026#39; slf4jVersion = \u0026#39;1.7.15\u0026#39; log4jVersion = \u0026#39;2.12.1\u0026#39; } sourceCompatibility = javaVersion targetCompatibility = javaVersion tasks.withType(JavaCompile) { options.encoding = \u0026#39;UTF-8\u0026#39; } applicationDefaultJvmArgs = [\u0026#34;-Dlog4j.configurationFile=log4j2.properties\u0026#34;] task wrapper(type: Wrapper) { gradleVersion = \u0026#39;3.1\u0026#39; } // declare where to find the dependencies of your project repositories { mavenCentral() maven { url \u0026#34;https://repository.apache.org/content/repositories/snapshots/\u0026#34; } } // NOTE: We cannot use \u0026#34;compileOnly\u0026#34; or \u0026#34;shadow\u0026#34; configurations since then we could not run code // in the IDE or with \u0026#34;gradle run\u0026#34;. We also cannot exclude transitive dependencies from the // shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159). // -\u0026gt; Explicitly define the // libraries we want to be included in the \u0026#34;flinkShadowJar\u0026#34; configuration! configurations { flinkShadowJar // dependencies which go into the shadowJar // always exclude these (also from transitive dependencies) since they are provided by Flink flinkShadowJar.exclude group: \u0026#39;org.apache.flink\u0026#39;, module: \u0026#39;force-shading\u0026#39; flinkShadowJar.exclude group: \u0026#39;com.google.code.findbugs\u0026#39;, module: \u0026#39;jsr305\u0026#39; flinkShadowJar.exclude group: \u0026#39;org.slf4j\u0026#39; flinkShadowJar.exclude group: \u0026#39;org.apache.logging.log4j\u0026#39; } // declare the dependencies for your production and test code dependencies { // -------------------------------------------------------------- // Compile-time dependencies that should NOT be part of the // shadow jar and are provided in the lib folder of Flink // -------------------------------------------------------------- compile \u0026#34;org.apache.flink:flink-streaming-java_${scalaBinaryVersion}:${flinkVersion}\u0026#34; // -------------------------------------------------------------- // Dependencies that should be part of the shadow jar, e.g. // connectors. These must be in the flinkShadowJar configuration! // -------------------------------------------------------------- //flinkShadowJar \u0026#34;org.apache.flink:flink-connector-kafka-0.11_${scalaBinaryVersion}:${flinkVersion}\u0026#34; compile \u0026#34;org.apache.logging.log4j:log4j-api:${log4jVersion}\u0026#34; compile \u0026#34;org.apache.logging.log4j:log4j-core:${log4jVersion}\u0026#34; compile \u0026#34;org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}\u0026#34; compile \u0026#34;org.slf4j:slf4j-log4j12:${slf4jVersion}\u0026#34; // Add test dependencies here. // testCompile \u0026#34;junit:junit:4.12\u0026#34; } // make compileOnly dependencies available for tests: sourceSets { main.compileClasspath += configurations.flinkShadowJar main.runtimeClasspath += configurations.flinkShadowJar test.compileClasspath += configurations.flinkShadowJar test.runtimeClasspath += configurations.flinkShadowJar javadoc.classpath += configurations.flinkShadowJar } run.classpath = sourceSets.main.runtimeClasspath jar { manifest { attributes \u0026#39;Built-By\u0026#39;: System.getProperty(\u0026#39;user.name\u0026#39;), \u0026#39;Build-Jdk\u0026#39;: System.getProperty(\u0026#39;java.version\u0026#39;) } } shadowJar { configurations = [project.configurations.flinkShadowJar] } setting.gradle\nrootProject.name = \u0026#39;quickstart\u0026#39; 这允许你为你新创建的项目命名，它将交互式地询问你项目的名称、组织（也用于包名）、项目版本、Scala 和 Flink。它将交互式地要求你提供项目名称、组织（也用于包名）、项目版本、Scala 和 Flink 版本。\n运行快速启动脚本 bash -c \u0026#34;$(curl https://flink.apache.org/q/gradle-quickstart.sh)\u0026#34; -- 1.11.0 2.11 我们建议你将这个项目导入到你的 IDE 中进行开发和测试。IntelliJ IDEA 在安装 Gradle 插件后，支持 Gradle 项目。Eclipse 通过 Eclipse Buildship 插件来实现（确保在导入向导的最后一步指定 Gradle 版本\u0026gt;=3.0，影子插件需要它）。你也可以使用 Gradle 的 IDE 集成来从 Gradle 创建项目文件。\n请注意：Java 默认的 JVM 堆大小对 Flink 来说可能太小。你必须手动增加它。在 Eclipse 中，选择 Run Configurations -\u0026gt; Arguments，并在 VM Arguments 框中写下 -Xmx800m。在 IntelliJ IDEA 中推荐的改变 JVM 选项的方法是来自 Help | Edit Custom VM Options 菜单。详情请看这篇文章。\n构建项目 如果你想构建/打包你的项目，去你的项目目录下运行 \u0026ldquo;gradle clean shadowJar\u0026rdquo; 命令，你会发现一个 JAR 文件，其中包含了你的应用程序，以及你可能已经添加到应用程序中作为依赖的连接器和库：build/libs/\u0026lt;project-name\u0026gt;-\u0026lt;version\u0026gt;-all.jar。\n注意：如果你使用与 StreamingJob 不同的类作为应用程序的主类/入口点，我们建议你相应地更改 build.gradle 文件中的 mainClassName 设置。这样，Flink 就可以从 JAR 文件中运行应用程序，而无需额外指定主类。\nSBT 创建项目 您可以通过以下两种方法中的任何一种来构建一个新项目。\n使用 sbt 模板 $ sbt new tillrohrmann/flink-project.g8 运行快速启动脚本 $ bash \u0026lt;(curl https://flink.apache.org/q/sbt-quickstart.sh) 这将在指定的项目目录下创建一个 Flink 项目。\n构建项目 为了建立你的项目，你只需要发出 sbt clean assembly 命令。这将在 target/scala_your-major-scala-version/ 目录下创建 fat-jar your-project-name-assembly-0.1-SNAPSHOT.jar。\n运行项目\n为了运行你的项目，你必须发出 sbt 运行命令。\n默认情况下，这将在 sbt 运行的同一个 JVM 中运行你的工作。为了在不同的 JVM 中运行你的工作，请在 build.sbt 中添加以下行。\nfork in run := true IntelliJ 我们推荐您使用 IntelliJ 进行 Flink 作业开发。为了开始，您必须将新创建的项目导入到 IntelliJ 中。您可以通过 File -\u0026gt; New -\u0026gt; Project from Existing Sources\u0026hellip;然后选择您的项目目录。IntelliJ 会自动检测 build.sbt 文件，并设置好一切。\n为了运行 Flink 作业，建议选择 mainRunner 模块作为运行/调试配置的 classpath。这将确保所有被设置为提供的依赖关系在执行时都是可用的。您可以通过 Run -\u0026gt; Edit Configurations\u0026hellip;配置 Run/Debug 配置，然后从 Use classpath of module dropbox 中选择 mainRunner。\nEclipse 为了将新创建的项目导入到 Eclipse 中，首先必须为其创建 Eclipse 项目文件。这些项目文件可以通过 sbteclipse 插件来创建。在 PROJECT_DIR/project/plugins.sbt 文件中添加以下一行。\naddSbtPlugin(\u0026#34;com.typeafe.sbteclipse\u0026#34; % \u0026#34;sbteclipse-plugin\u0026#34; % \u0026#34;4.0.0\u0026#34;) 在 sbt 中使用下面的命令来创建 Eclipse 项目文件\n\u0026gt; eclipse 现在你可以通过 File-\u0026gt;Import\u0026hellip;-\u0026gt;Existing Projects into Workspace 导入 Eclipse，然后选择项目目录。\n附录: 用依赖关系构建 Jar 的模板 要构建一个包含声明的连接器和库所需的所有依赖关系的应用程序 JAR，可以使用以下 shade 插件定义。\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-shade-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.1\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;shade\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;artifactSet\u0026gt; \u0026lt;excludes\u0026gt; \u0026lt;exclude\u0026gt;com.google.code.findbugs:jsr305\u0026lt;/exclude\u0026gt; \u0026lt;exclude\u0026gt;org.slf4j:*\u0026lt;/exclude\u0026gt; \u0026lt;exclude\u0026gt;log4j:*\u0026lt;/exclude\u0026gt; \u0026lt;/excludes\u0026gt; \u0026lt;/artifactSet\u0026gt; \u0026lt;filters\u0026gt; \u0026lt;filter\u0026gt; \u0026lt;!-- Do not copy the signatures in the META-INF folder. Otherwise, this might cause SecurityExceptions when using the JAR. --\u0026gt; \u0026lt;artifact\u0026gt;*:*\u0026lt;/artifact\u0026gt; \u0026lt;excludes\u0026gt; \u0026lt;exclude\u0026gt;META-INF/*.SF\u0026lt;/exclude\u0026gt; \u0026lt;exclude\u0026gt;META-INF/*.DSA\u0026lt;/exclude\u0026gt; \u0026lt;exclude\u0026gt;META-INF/*.RSA\u0026lt;/exclude\u0026gt; \u0026lt;/excludes\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;/filters\u0026gt; \u0026lt;transformers\u0026gt; \u0026lt;transformer implementation=\u0026#34;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\u0026#34;\u0026gt; \u0026lt;mainClass\u0026gt;my.programs.main.clazz\u0026lt;/mainClass\u0026gt; \u0026lt;/transformer\u0026gt; \u0026lt;/transformers\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; 原文链接: https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/project-configuration.html\n"},"name":"项目配置","published":"2020-08-22T00:00:00Z","summary":"Project Configuration","type":"entry","url":"https://ohmycloud.github.io/notes/2020-08-22-project-configuration/"}