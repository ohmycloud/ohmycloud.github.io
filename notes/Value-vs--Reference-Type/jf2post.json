{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003ch1 id=\"值和引用类型\"\u003e值和引用类型\u003c/h1\u003e\n\u003chr\u003e\n\u003ch2 id=\"值语义\"\u003e值语义\u003c/h2\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003estr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hello, playground\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eplaygroundGreeting\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eplaygroundGreeting\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;How are you today?\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e#\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hello, playground\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所以 str 的值并没有改变。因为字符串是一个结构体, 而结构体是值类型。那什么是\u003ccode\u003e值类型\u003c/code\u003e呢? 值类型在赋值给实例或作为参数传递给函数时总是被复制一份。\u003c/p\u003e\n\u003cp\u003eSwift 的基本类型 - \u003ccode\u003eArray, Dictionary, Int, String\u003c/code\u003e 等等都是用结构体来实现的, 它们都是值类型。所以在 Swift 中值类型是何等重要。 你应该在模型化你的数据时首先考虑结构体, 然后再考虑类。\u003c/p\u003e\n\u003ch2 id=\"引用语义\"\u003e引用语义\u003c/h2\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eGreekGod\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ehecate\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGreekGod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hecate\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 现在有了一个新的名为 \u0026#34;Hecate\u0026#34; 的 GreekGod 实例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eanotherHecate\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehecate\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 两个常量指向了同一个 GreekGod 类的实例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 想想在 Perl 语言中的按值传递和按引用传递, 就知道引用能产生副作用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eanotherHecate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;AnotherHecate\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eanotherHecate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehecate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// AnotherHecate\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当你把类的实例赋值给一个常量或变量时, 那个常量或变量就拥有了那个实例的引用, 你也看到了, 引用和复制是不一样的。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://upload-images.jianshu.io/upload_images/326727-e0b49be075a09464.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch2 id=\"常量值和引用类型\"\u003e常量值和引用类型\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e当值类型和引用类型是常量(使用 let 声明)的时候, 它俩的表现不一样。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 创建一个名为希腊众神的类\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eGreekGod\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ehecate\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGreekGod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hecate\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 现在有了一个新的名为 \u0026#34;Hecate\u0026#34; 的 GreekGod 实例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eanotherHecate\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehecate\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 两个常量指向了同一个 GreekGod 类的实例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 想想在 Perl 语言中的按值传递和按引用传递, 就知道引用能产生副作用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eanotherHecate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;AnotherHecate\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eanotherHecate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehecate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// AnotherHecate\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 创建一个名为希腊神殿的结构体\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003ePantheon\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003echiefGod\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eGreekGod\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 希腊诸神总是吵架, 所以让这个属性是可变的\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//  hecate: 赫卡特（司夜和冥界的女神）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003epantheon\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePantheon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echiefGod\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ehecate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ezeus\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGreekGod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Zeus\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 宙斯\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003epantheon\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echiefGod\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ezeus\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 编译器在这儿会报错\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e编译器报错: Cannot assign toproperty: \u0026lsquo;pantheon\u0026rsquo; is a \u0026rsquo;let\u0026rsquo; constant。 这个错误告诉你 pantheon 是一个不可变的实例, 这意味着你改变不了它。 声明为常量(let)的值类型修改不了它们的属性, 即使这些属性在类型的实现中是用 \u003ccode\u003evar\u003c/code\u003e 声明的。 你可以把值类型的实例看作单个完整值的代表, 像一个整数那样。如果你把整数声明为一个常量, 那么之后你就不能修改了。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 创建一个名为希腊众神的类\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eGreekGod\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ehecate\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGreekGod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hecate\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ezeus\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGreekGod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Zeus\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 宙斯\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ezeus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Zeus Jr\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ezeus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e看到了? 为什么我们不能改变值类型实例常量的属性值(例如 \u003ccode\u003epantheon.chiefGod\u003c/code\u003e), 但是我们却能改变引用类型实例常量的属性值？(例如 \u003ccode\u003ezeus.name\u003c/code\u003e)\u003c/p\u003e\n\u003cp\u003e因为 zeus 是一个引用类型的实例, zeus 指向 \u003cstrong\u003eGreekGod\u003c/strong\u003e 的一个实例, 这个实例通过 \u003ccode\u003eGreekGod(name: \u0026quot;Zeus\u0026quot;)\u003c/code\u003e 生成。当你改变 \u003ccode\u003ename\u003c/code\u003e 属性存储的值时, 你并没有真正改变 \u003ccode\u003ezeus\u003c/code\u003e , 它只是 \u003cstrong\u003eGreekGod\u003c/strong\u003e 的一个引用。因为你在定义 \u003cstrong\u003eGreekGod\u003c/strong\u003e 时让 \u003ccode\u003ename\u003c/code\u003e 是一个可变存储属性(使用 var), 那你就可以随心所欲修改这个属性的值了。无论你修改了多少次 zeus 的名字, zeus 仍旧指向同一个实例。\u003c/p\u003e\n\u003ch2 id=\"同时使用值类型和引用类型\"\u003e同时使用值类型和引用类型\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e这一章可能会让你疑惑, \u0026ldquo;我能把值类型放在引用类型里面吗?\u0026rdquo;;  \u0026ldquo;我能把引用类型放在值类型里面吗?\u0026rdquo; 答案是可以。后者你可以通过在\u003cstrong\u003eGreekGod\u003c/strong\u003e 类中添加一个 \u003cstrong\u003ePanteon\u003c/strong\u003e 类型的属性。但是在值类型中使用引用类型你必须非常小心。\u003c/p\u003e\n","text":"值和引用类型 值语义 var str = \u0026#34;Hello, playground\u0026#34; var playgroundGreeting = str playgroundGreeting += \u0026#34;How are you today?\u0026#34; print(str) # \u0026#34;Hello, playground\u0026#34; 所以 str 的值并没有改变。因为字符串是一个结构体, 而结构体是值类型。那什么是值类型呢? 值类型在赋值给实例或作为参数传递给函数时总是被复制一份。\nSwift 的基本类型 - Array, Dictionary, Int, String 等等都是用结构体来实现的, 它们都是值类型。所以在 Swift 中值类型是何等重要。 你应该在模型化你的数据时首先考虑结构体, 然后再考虑类。\n引用语义 class GreekGod { var name: String init(name: String) { self.name = name } } let hecate = GreekGod(name: \u0026#34;Hecate\u0026#34;) // 现在有了一个新的名为 \u0026#34;Hecate\u0026#34; 的 GreekGod 实例 let anotherHecate = hecate // 两个常量指向了同一个 GreekGod 类的实例 // 想想在 Perl 语言中的按值传递和按引用传递, 就知道引用能产生副作用 anotherHecate.name = \u0026#34;AnotherHecate\u0026#34; anotherHecate.name hecate.name // AnotherHecate 当你把类的实例赋值给一个常量或变量时, 那个常量或变量就拥有了那个实例的引用, 你也看到了, 引用和复制是不一样的。\n常量值和引用类型 当值类型和引用类型是常量(使用 let 声明)的时候, 它俩的表现不一样。\n// 创建一个名为希腊众神的类 class GreekGod { var name: String init(name: String) { self.name = name } } let hecate = GreekGod(name: \u0026#34;Hecate\u0026#34;) // 现在有了一个新的名为 \u0026#34;Hecate\u0026#34; 的 GreekGod 实例 let anotherHecate = hecate // 两个常量指向了同一个 GreekGod 类的实例 // 想想在 Perl 语言中的按值传递和按引用传递, 就知道引用能产生副作用 anotherHecate.name = \u0026#34;AnotherHecate\u0026#34; anotherHecate.name hecate.name // AnotherHecate // 创建一个名为希腊神殿的结构体 struct Pantheon { var chiefGod: GreekGod // 希腊诸神总是吵架, 所以让这个属性是可变的 } // hecate: 赫卡特（司夜和冥界的女神） let pantheon = Pantheon(chiefGod: hecate) let zeus = GreekGod(name: \u0026#34;Zeus\u0026#34;) // 宙斯 pantheon.chiefGod = zeus // 编译器在这儿会报错 编译器报错: Cannot assign toproperty: \u0026lsquo;pantheon\u0026rsquo; is a \u0026rsquo;let\u0026rsquo; constant。 这个错误告诉你 pantheon 是一个不可变的实例, 这意味着你改变不了它。 声明为常量(let)的值类型修改不了它们的属性, 即使这些属性在类型的实现中是用 var 声明的。 你可以把值类型的实例看作单个完整值的代表, 像一个整数那样。如果你把整数声明为一个常量, 那么之后你就不能修改了。\n// 创建一个名为希腊众神的类 class GreekGod { var name: String init(name: String) { self.name = name } } let hecate = GreekGod(name: \u0026#34;Hecate\u0026#34;) let zeus = GreekGod(name: \u0026#34;Zeus\u0026#34;) // 宙斯 zeus.name = \u0026#34;Zeus Jr\u0026#34; zeus.name 看到了? 为什么我们不能改变值类型实例常量的属性值(例如 pantheon.chiefGod), 但是我们却能改变引用类型实例常量的属性值？(例如 zeus.name)\n因为 zeus 是一个引用类型的实例, zeus 指向 GreekGod 的一个实例, 这个实例通过 GreekGod(name: \u0026quot;Zeus\u0026quot;) 生成。当你改变 name 属性存储的值时, 你并没有真正改变 zeus , 它只是 GreekGod 的一个引用。因为你在定义 GreekGod 时让 name 是一个可变存储属性(使用 var), 那你就可以随心所欲修改这个属性的值了。无论你修改了多少次 zeus 的名字, zeus 仍旧指向同一个实例。\n同时使用值类型和引用类型 这一章可能会让你疑惑, \u0026ldquo;我能把值类型放在引用类型里面吗?\u0026rdquo;; \u0026ldquo;我能把引用类型放在值类型里面吗?\u0026rdquo; 答案是可以。后者你可以通过在GreekGod 类中添加一个 Panteon 类型的属性。但是在值类型中使用引用类型你必须非常小心。\n"},"name":"Swift 值类型和引用类型","published":"2015-10-09T16:16:21Z","summary":"值和引用类型 值语义 var str = \u0026#34;Hello, playground\u0026#34; var playgroundGreeting = str playgroundGreeting += \u0026#34;How are you today?\u0026#34; print(str) # \u0026#34;Hello, playground\u0026#34; 所以 str 的值并没有改变。因为字符串是一个结构体, 而结构体是值类型。那什么是值类型呢? 值类型在赋值给实例或作为参数传递给函数时总是被复制一份。\nSwift 的基本类型 - Array, Dictionary, Int, String 等等都是用结构体来实现的, 它们都是值类型。所以在 Swift 中值类型是何等重要。 你应该在模型化你的数据时首先考虑结构体, 然后再考虑类。\n引用语义 class GreekGod { var name: String init(name: String) { self.name = name } } let hecate = GreekGod(name: \u0026#34;Hecate\u0026#34;) // 现在有了一个新的名为 \u0026#34;Hecate\u0026#34; 的 GreekGod 实例 let anotherHecate = hecate // 两个常量指向了同一个 GreekGod 类的实例 // 想想在 Perl 语言中的按值传递和按引用传递, 就知道引用能产生副作用 anotherHecate.","type":"entry","url":"https://ohmyweekly.github.io/notes/value-vs--reference-type/"}