{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003cp\u003e\u003cimg src=\"https://mojolicious.io/blog/2017/12/04/day-4-dont-fear-the-full-app/arucaria.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e关于Mojolicious最常见的误解之一是，我们目前看到的声明式“Lite”应用程序与大型结构化“完整”应用程序之间存在很大差异。没有东西会离事实很远。 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Lite\"\u003eMojolicious::Lite\u003c/a\u003e 是一个非常小的包装器，围绕着所谓的“完整”应用程序架构，赋予它平易近人的关键字语法。\u003c/p\u003e\n\u003cp\u003e因为文档的简洁单文件示例要好得多，所以 Mojolicious 的大多数文档大多数时候都使用Lite语法。可以理解的是，即使一旦他们的应用程序受益于面向对象的结构，人们也会担心迁移（或者我们称之为“成长”）;毕竟所有的文档似乎都面向Lite应用程序。但是，让这些担忧消失，过渡很容易。一旦你理解了它，文档化的例子就很难翻译了。\u003c/p\u003e\n\u003cp\u003e此外，Mojolicious 在转换时提供两种形式的帮助。第一个是\u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Guides/Growing\"\u003e成长指南\u003c/a\u003e，涵盖了这篇文章的所有内容，但是从移植现有应用程序的角度来看（我不会在这里复制）。第二个是 \u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Command/inflate\"\u003einflate 命令\u003c/a\u003e，它甚至可以通过将模板从数据部分移动到自己的文件中来启动您的过程。\u003c/p\u003e\n\u003cp\u003e也就是说，为了进一步揭开神秘面纱的神秘面纱，我将介绍一些差异，并对Lite语法本身拉开帷幕。\u003c/p\u003e\n\u003ch2 id=\"让我说服你\"\u003e让我说服你\u003c/h2\u003e\n\u003cp\u003e在反复试图说服人们两者之间几乎没有什么区别后，我发现有一种非常好的方式来转变对话。我告诉他们代码。没有真正\u003ca href=\"https://github.com/kraih/mojo/blob/master/lib/Mojolicious/Lite.pm\"\u003e看一看\u003c/a\u003e。在撰写本文时，Mojolicious::Lite 只有37行代码（由David A. Wheeler的 \u003ca href=\"https://www.dwheeler.com/sloccount/\"\u003eSLOCCount\u003c/a\u003e计算的）！ 37 行代码有多大差异？\u003c/p\u003e\n\u003cp\u003e好了，现在你相信我，让我们谈谈这些差异。\u003c/p\u003e\n\u003ch2 id=\"脚本和类\"\u003e脚本和类\u003c/h2\u003e\n\u003cp\u003e在 Lite 脚本中，您的应用程序逻辑就位于脚本中。如果是一个完整的应用程序，你的逻辑进入一个单独的类，主要是在 \u003ccode\u003estartup\u003c/code\u003e 方法中，但删除 \u003ccode\u003eapp-\u0026gt;start\u003c/code\u003e 这一行。虽然方法（调用者）的第一个参数通常被称为 \u003ccode\u003e$self\u003c/code\u003e，你会看到，为了在本系列中保持清晰，我将始终使用 \u003ccode\u003e$app\u003c/code\u003e。所以我们有：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003estartup\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$app\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eshift\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"c1\"\u003e# the rest of what was your script\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e与此同时，运行的脚本只是启动应用程序的几行。该脚本始终是相同的，与您的应用程序无关，而是要调用的类的名称。我只是使用\u003ca href=\"http://mojolicious.org/perldoc/Mojolicious/Guides/Growing#Script\"\u003e成长指南末尾\u003c/a\u003e的那个。\u003c/p\u003e\n\u003ch2 id=\"关键词\"\u003e关键词\u003c/h2\u003e\n\u003cp\u003e现在代码生活在正确的位置，它需要被转换为面向对象。第一步是将逻辑放入一个名为 \u003ccode\u003estartup\u003c/code\u003e 的方法中，该方法将应用程序对象作为其第一个参数。\u003c/p\u003e\n\u003cp\u003e实际上有三种类型的关键字，即应用程序对象或应用程序上的方法，路由上的方法和 \u003ccode\u003egroup\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eapp\u003c/code\u003e 关键字就是之前的调用，因此 \u003ccode\u003eapp\u003c/code\u003e 成为 \u003ccode\u003e$app\u003c/code\u003e。关键字 \u003ccode\u003ehelper\u003c/code\u003e，\u003ccode\u003ehook\u003c/code\u003e 和 \u003ccode\u003eplugin\u003c/code\u003e 只是 app 上的方法，所以 \u003ccode\u003eplugin ...\u003c/code\u003e 变成 \u003ccode\u003e$app-\u0026gt;plugin(...)\u003c/code\u003e 等。\u003c/p\u003e\n\u003cp\u003e路由方法有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eany\u003c/li\u003e\n\u003cli\u003edel (as delete)\u003c/li\u003e\n\u003cli\u003eget\u003c/li\u003e\n\u003cli\u003eoptions\u003c/li\u003e\n\u003cli\u003epatch\u003c/li\u003e\n\u003cli\u003epost\u003c/li\u003e\n\u003cli\u003eput\u003c/li\u003e\n\u003cli\u003ewebsocket\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e路径对象的方法与之前完全一样。要获取顶级路由对象，请调用 \u003ccode\u003e$app-\u0026gt; routes;\u003c/code\u003e按照惯例，我们称之为toplevel route object \u003ccode\u003e$r\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;route_name\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e变成：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$r\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$app\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eroutes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$r\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;route_name\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"c1\"\u003e# add more toplevel routes to $r\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这就是我们所说的“混合路由”。它们基本上使用 Lite 参数，但是给出了方法。当您深入了解 Mojolicious 时，您可能更喜欢通过属性设置路由而不是位置参数\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$r\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;route_name\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但无论哪种方式都有效，请选择您喜欢的方式！ TIMTOWTDI再次。\u003c/p\u003e\n\u003cp\u003e如果您只使用了上述关键字，请按照我刚刚向您展示的方式进行翻译，然后您就完成了。\u003c/p\u003e\n\u003ch2 id=\"嵌套路由\"\u003e嵌套路由\u003c/h2\u003e\n\u003cp\u003e到现在为止，你必须看到我一直认为我的陈述是“顶级路由”。好的，所以Lite和Full之间存在一个小的区别，不同之处在于嵌套路由的工作方式。\u003c/p\u003e\n\u003cp\u003e还有另外两个关键字，\u003ccode\u003eunder\u003c/code\u003e 和 \u003ccode\u003egroup\u003c/code\u003e。 \u003ccode\u003eunder\u003c/code\u003e 允许路由共享代码，比如说用于身份验证。他们也可以分享他们的部分路径。例如，需要身份验证的API部分可能都在 \u003ccode\u003e/protected\u003c/code\u003e 下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;/unsafe\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;unsafe\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eunder\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;/protected\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e# check authentication\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# /protected/safe\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;/safe\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;safe\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在Lite应用程序中，这些受保护的路由实际上属于它们的 \u003ccode\u003eunder\u003c/code\u003e 下。这种方法很好，直到你认为“现在等待，这意味着我无法回到无保护的空间。”好眼力！那就是 \u003ccode\u003egroup\u003c/code\u003e 进来的地方。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;/unsafe\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;unsafe\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003egroup\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003eunder\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;/protected\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# check authentication\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e# /protected/safe\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003eget\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;/safe\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;safe\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;/another_unsafe\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"等等什么\"\u003e等等，什么？\u003c/h2\u003e\n\u003cp\u003e如果你感到困惑，那没关系。我会告诉你一个小秘密，我觉得这也很混乱。嵌套路由的Lite形式实际上更完整，一旦你需要它，它可能是一个好的迹象，你应该看看切换到完整的应用程序。完整的应用程序让它更容易！\u003c/p\u003e\n\u003cp\u003e在完整应用程序中，路由方法都返回一个新的路由对象。如果将它们存储在变量中，则可以使用它们相互构建。在我看来，这是用于构建嵌套结构的更自然的API。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-perl\" data-lang=\"perl\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$r\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$app\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eroutes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$r\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/unsafe\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;unsafe\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$protected\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$r\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eunder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/protected\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e# check authentication\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# /protected/safe\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$protected\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/safe\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;safe\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$r\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;/another_unsafe\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于Lite app关键字没有办法附加到另一条路由，因此它们基本上总是将它们添加到“当前全局路由”。这就是混乱的来源。\u003c/p\u003e\n\u003cp\u003e说到这，我会让你更深入地了解我的秘密。我喜欢链接类型的路由，而不是使用我在Lite应用程序中实际使用它的 \u003ccode\u003egroup\u003c/code\u003e。当然我仍然使用 \u003ccode\u003eapp\u003c/code\u003e 和 \u003ccode\u003eplugin\u003c/code\u003e，但我做的第一件事就是我的 \u003ccode\u003e$r = app-\u0026gt;routes\u003c/code\u003e。然后，除了最简单的情况之外，我使用它而不是路由关键字。\u003c/p\u003e\n\u003ch2 id=\"结论\"\u003e结论\u003c/h2\u003e\n\u003cp\u003e就是这样，除了使用嵌套路由组，它只是直接翻译。如果你总是使用方法形式的路由，你甚至不用担心！有了这个，我鼓励你回过头来阅读\u003ca href=\"http://mojolicious.org/perldoc#TUTORIAL\"\u003e教程和指南\u003c/a\u003e，并意识到看起来像Lite应用程序的所有东西都是完全正确的。\u003c/p\u003e\n","text":"\n关于Mojolicious最常见的误解之一是，我们目前看到的声明式“Lite”应用程序与大型结构化“完整”应用程序之间存在很大差异。没有东西会离事实很远。 Mojolicious::Lite 是一个非常小的包装器，围绕着所谓的“完整”应用程序架构，赋予它平易近人的关键字语法。\n因为文档的简洁单文件示例要好得多，所以 Mojolicious 的大多数文档大多数时候都使用Lite语法。可以理解的是，即使一旦他们的应用程序受益于面向对象的结构，人们也会担心迁移（或者我们称之为“成长”）;毕竟所有的文档似乎都面向Lite应用程序。但是，让这些担忧消失，过渡很容易。一旦你理解了它，文档化的例子就很难翻译了。\n此外，Mojolicious 在转换时提供两种形式的帮助。第一个是成长指南，涵盖了这篇文章的所有内容，但是从移植现有应用程序的角度来看（我不会在这里复制）。第二个是 inflate 命令，它甚至可以通过将模板从数据部分移动到自己的文件中来启动您的过程。\n也就是说，为了进一步揭开神秘面纱的神秘面纱，我将介绍一些差异，并对Lite语法本身拉开帷幕。\n让我说服你 在反复试图说服人们两者之间几乎没有什么区别后，我发现有一种非常好的方式来转变对话。我告诉他们代码。没有真正看一看。在撰写本文时，Mojolicious::Lite 只有37行代码（由David A. Wheeler的 SLOCCount计算的）！ 37 行代码有多大差异？\n好了，现在你相信我，让我们谈谈这些差异。\n脚本和类 在 Lite 脚本中，您的应用程序逻辑就位于脚本中。如果是一个完整的应用程序，你的逻辑进入一个单独的类，主要是在 startup 方法中，但删除 app-\u0026gt;start 这一行。虽然方法（调用者）的第一个参数通常被称为 $self，你会看到，为了在本系列中保持清晰，我将始终使用 $app。所以我们有：\nsub startup { my $app = shift; ... # the rest of what was your script } 与此同时，运行的脚本只是启动应用程序的几行。该脚本始终是相同的，与您的应用程序无关，而是要调用的类的名称。我只是使用成长指南末尾的那个。\n关键词 现在代码生活在正确的位置，它需要被转换为面向对象。第一步是将逻辑放入一个名为 startup 的方法中，该方法将应用程序对象作为其第一个参数。\n实际上有三种类型的关键字，即应用程序对象或应用程序上的方法，路由上的方法和 group。\napp 关键字就是之前的调用，因此 app 成为 $app。关键字 helper，hook 和 plugin 只是 app 上的方法，所以 plugin ... 变成 $app-\u0026gt;plugin(...) 等。\n路由方法有：\nany del (as delete) get options patch post put websocket 路径对象的方法与之前完全一样。要获取顶级路由对象，请调用 $app-\u0026gt; routes;按照惯例，我们称之为toplevel route object $r。\nget \u0026#39;/\u0026#39; =\u0026gt; sub { ... } =\u0026gt; \u0026#39;route_name\u0026#39;; 变成：\nmy $r = $app-\u0026gt;routes; $r-\u0026gt;get(\u0026#39;/\u0026#39; =\u0026gt; sub { ... } =\u0026gt; \u0026#39;route_name\u0026#39;); ... # add more toplevel routes to $r 这就是我们所说的“混合路由”。它们基本上使用 Lite 参数，但是给出了方法。当您深入了解 Mojolicious 时，您可能更喜欢通过属性设置路由而不是位置参数\n$r-\u0026gt;get(\u0026#39;/\u0026#39;)-\u0026gt;to(cb =\u0026gt; sub { ... })-\u0026gt;name(\u0026#39;route_name\u0026#39;); 但无论哪种方式都有效，请选择您喜欢的方式！ TIMTOWTDI再次。\n如果您只使用了上述关键字，请按照我刚刚向您展示的方式进行翻译，然后您就完成了。\n嵌套路由 到现在为止，你必须看到我一直认为我的陈述是“顶级路由”。好的，所以Lite和Full之间存在一个小的区别，不同之处在于嵌套路由的工作方式。\n还有另外两个关键字，under 和 group。 under 允许路由共享代码，比如说用于身份验证。他们也可以分享他们的部分路径。例如，需要身份验证的API部分可能都在 /protected 下。\nget \u0026#39;/unsafe\u0026#39; =\u0026gt; \u0026#39;unsafe\u0026#39;; under \u0026#39;/protected\u0026#39; =\u0026gt; sub { # check authentication }; # /protected/safe get \u0026#39;/safe\u0026#39; =\u0026gt; \u0026#39;safe\u0026#39;; 在Lite应用程序中，这些受保护的路由实际上属于它们的 under 下。这种方法很好，直到你认为“现在等待，这意味着我无法回到无保护的空间。”好眼力！那就是 group 进来的地方。\nget \u0026#39;/unsafe\u0026#39; =\u0026gt; \u0026#39;unsafe\u0026#39;; group { under \u0026#39;/protected\u0026#39; =\u0026gt; sub { # check authentication }; # /protected/safe get \u0026#39;/safe\u0026#39; =\u0026gt; \u0026#39;safe\u0026#39;; }; get \u0026#39;/another_unsafe\u0026#39; =\u0026gt; ...; 等等，什么？ 如果你感到困惑，那没关系。我会告诉你一个小秘密，我觉得这也很混乱。嵌套路由的Lite形式实际上更完整，一旦你需要它，它可能是一个好的迹象，你应该看看切换到完整的应用程序。完整的应用程序让它更容易！\n在完整应用程序中，路由方法都返回一个新的路由对象。如果将它们存储在变量中，则可以使用它们相互构建。在我看来，这是用于构建嵌套结构的更自然的API。\nmy $r = $app-\u0026gt;routes; $r-\u0026gt;get(\u0026#39;/unsafe\u0026#39; =\u0026gt; \u0026#39;unsafe\u0026#39;); my $protected = $r-\u0026gt;under(\u0026#39;/protected\u0026#39; =\u0026gt; sub { # check authentication }); # /protected/safe $protected-\u0026gt;get(\u0026#39;/safe\u0026#39; =\u0026gt; \u0026#39;safe\u0026#39;); $r-\u0026gt;get(\u0026#39;/another_unsafe\u0026#39; =\u0026gt; ...); 由于Lite app关键字没有办法附加到另一条路由，因此它们基本上总是将它们添加到“当前全局路由”。这就是混乱的来源。\n说到这，我会让你更深入地了解我的秘密。我喜欢链接类型的路由，而不是使用我在Lite应用程序中实际使用它的 group。当然我仍然使用 app 和 plugin，但我做的第一件事就是我的 $r = app-\u0026gt;routes。然后，除了最简单的情况之外，我使用它而不是路由关键字。\n结论 就是这样，除了使用嵌套路由组，它只是直接翻译。如果你总是使用方法形式的路由，你甚至不用担心！有了这个，我鼓励你回过头来阅读教程和指南，并意识到看起来像Lite应用程序的所有东西都是完全正确的。\n"},"name":"第四天 - 不要害怕完整的应用程序","published":"2017-12-04T18:41:59Z","summary":"关于Mojolicious最常见的误解之一是，我们目前看到的声明式“Lite”应用程序与大型结构化“完整”应用程序之间存在很大差异。没有东西会离事实很远。 Mojolicious::Lite 是一个非常小的包装器，围绕着所谓的“完整”应用程序架构，赋予它平易近人的关键字语法。\n因为文档的简洁单文件示例要好得多，所以 Mojolicious 的大多数文档大多数时候都使用Lite语法。可以理解的是，即使一旦他们的应用程序受益于面向对象的结构，人们也会担心迁移（或者我们称之为“成长”）;毕竟所有的文档似乎都面向Lite应用程序。但是，让这些担忧消失，过渡很容易。一旦你理解了它，文档化的例子就很难翻译了。\n此外，Mojolicious 在转换时提供两种形式的帮助。第一个是成长指南，涵盖了这篇文章的所有内容，但是从移植现有应用程序的角度来看（我不会在这里复制）。第二个是 inflate 命令，它甚至可以通过将模板从数据部分移动到自己的文件中来启动您的过程。\n也就是说，为了进一步揭开神秘面纱的神秘面纱，我将介绍一些差异，并对Lite语法本身拉开帷幕。\n让我说服你 在反复试图说服人们两者之间几乎没有什么区别后，我发现有一种非常好的方式来转变对话。我告诉他们代码。没有真正看一看。在撰写本文时，Mojolicious::Lite 只有37行代码（由David A. Wheeler的 SLOCCount计算的）！ 37 行代码有多大差异？\n好了，现在你相信我，让我们谈谈这些差异。\n脚本和类 在 Lite 脚本中，您的应用程序逻辑就位于脚本中。如果是一个完整的应用程序，你的逻辑进入一个单独的类，主要是在 startup 方法中，但删除 app-\u0026gt;start 这一行。虽然方法（调用者）的第一个参数通常被称为 $self，你会看到，为了在本系列中保持清晰，我将始终使用 $app。所以我们有：\nsub startup { my $app = shift; ... # the rest of what was your script } 与此同时，运行的脚本只是启动应用程序的几行。该脚本始终是相同的，与您的应用程序无关，而是要调用的类的名称。我只是使用成长指南末尾的那个。\n关键词 现在代码生活在正确的位置，它需要被转换为面向对象。第一步是将逻辑放入一个名为 startup 的方法中，该方法将应用程序对象作为其第一个参数。\n实际上有三种类型的关键字，即应用程序对象或应用程序上的方法，路由上的方法和 group。\napp 关键字就是之前的调用，因此 app 成为 $app。关键字 helper，hook 和 plugin 只是 app 上的方法，所以 plugin ... 变成 $app-\u0026gt;plugin(...) 等。","type":"entry","url":"http://localhost:1313/notes/dont-fear-the-full-app/"}