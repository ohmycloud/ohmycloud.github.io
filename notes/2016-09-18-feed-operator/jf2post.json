{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io/"},"content":{"html":"\u003ch2 id=\"infix-\"\u003einfix \u003ccode\u003e==\u0026gt;\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003e这个流操作符(feed operator)从它的左侧接收结果并把结果作为最后一个参数传递给下一个(右侧的)例程(routine)。\u003c/p\u003e\n\u003cp\u003e这个操作符的优先级很松散所以你需要使用圆括号把结果赋值给其它变量, 或者你甚至可以使用另外一个流操作符! 在接收单个参数或第一个参数为 block 的程序/方法的例子中, 你必须经常使用圆括号来调用(尽管这对于最后一个例程/方法不是必须的)。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# Traditional structure, read bottom-to-top\nmy @result =\n    sort               # (4) Sort, result is \u0026lt;Earth People\u0026gt;\n    grep { /\u0026lt;[PE]\u0026gt;/ }, # (3) Look for P or E\n    map { .tc },       # (2) Capitalize the words\n    \u0026lt;people of earth\u0026gt;; # (1) Start with the input\n\n# Feed (left-to-right) with parentheses, read top-to-bottom\n@result = (\n    \u0026lt;people of earth\u0026gt;  # (1) Start with the input\n    ==\u0026gt; map({ .tc })   # (2) Capitalize the words\n    ==\u0026gt; grep /\u0026lt;[PE]\u0026gt;/  # (3) Look for P or E\n    ==\u0026gt; sort           # (4) Sort, result is \u0026lt;Earth People\u0026gt;\n);\n\n# For illustration, method chaining equivalent, read top-to-bottom\n@result =\n    \u0026lt;people of earth\u0026gt;  # (1) Start with the input\n    .map({ .tc })      # (2) Capitalize the words\n    .grep(/\u0026lt;[PE]\u0026gt;/)    # (3) Look for P or E\n    .sort;             # (4) Sort, result is \u0026lt;Earth People\u0026gt;\n\n# To assign without the need of parentheses use another feed operator\n\u0026lt;people of earth\u0026gt;\n    ==\u0026gt; map({ .tc })\n    ==\u0026gt; grep /\u0026lt;[PE]\u0026gt;/\n    ==\u0026gt; sort()\n    ==\u0026gt; @result;\n\n# It can be useful to capture a partial result, however, unlike\n# the leftward feed operator, it does require parentheses or a semicolon\n\u0026lt;people of earth\u0026gt;\n    ==\u0026gt; map({ .tc })\n    ==\u0026gt; my @caps; @caps # also could wrap in parentheses instead\n    ==\u0026gt; grep /\u0026lt;[PE]\u0026gt;/\n    ==\u0026gt; sort()\n    ==\u0026gt; @result;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这个流操作符能让你在例程之外构建方法链那样的模式并且方法的结果能在不相关的数据上调用。在方法链中, 你被限制于使用数据身上可用的方法或使用之前的方法调用的结果。使用流操作符, 那个限制没有了。写出来的代码比一系列用多个换行符打断的方法调用更加可读。\u003c/p\u003e\n\u003cp\u003e注: 在将来, 这个操作符会在它获得并行地运行列表操作的能力之后有所变化。它会强制左侧的操作数作为一个闭包(它能被克隆并运行在子线程中)变得可闭合。\u003c/p\u003e\n\u003ch2 id=\"infix--1\"\u003einfix \u003ccode\u003e\u0026lt;==\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003e这个向左的流操作符从右侧接收结果并把结果作为最后的一个参数传递给它前面的(左侧的)例程。这为一系列列表操作函数阐明了从右到左的数据流。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# Traditional structure, read bottom-to-top\nmy @result =\n    sort                   # (4) Sort, result is \u0026lt;Earth People\u0026gt;\n    grep { /\u0026lt;[PE]\u0026gt;/ },     # (3) Look for P or E\n    map { .tc },           # (2) Capitalize the words\n    \u0026lt;people of earth\u0026gt;;     # (1) Start with the input\n\n# Feed (right-to-left) with parentheses, read bottom-to-top\n@result = (\n    sort()                 # (4) Sort, result is \u0026lt;Earth People\u0026gt;\n    \u0026lt;== grep({ /\u0026lt;[PE]\u0026gt;/ }) # (3) Look for P or E\n    \u0026lt;== map({ .tc })       # (2) Capitalize the words\n    \u0026lt;== \u0026lt;people of earth\u0026gt;  # (1) Start with the input\n);\n\n# To assign without parentheses, use another feed operator\n@result\n    \u0026lt;== sort()             # (4) Sort, result is \u0026lt;Earth People\u0026gt;\n    \u0026lt;== grep({ /\u0026lt;[PE]\u0026gt;/ }) # (3) Look for P or E\n    \u0026lt;== map({ .tc })       # (2) Capitalize the words\n    \u0026lt;== \u0026lt;people of earth\u0026gt;; # (1) Start with the input\n\n# It can be useful to capture a partial result\n@result\n    \u0026lt;== sort()\n    \u0026lt;== grep({ /\u0026lt;[PE]\u0026gt;/ })\n    \u0026lt;== my @caps # unlike ==\u0026gt;, there is no need for additional statement\n    \u0026lt;== map({ .tc })\n    \u0026lt;== \u0026lt;people of earth\u0026gt;;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e和向右的流操作符不一样, 这个结果不能严格地映射为方法链。然而, 和上面传统的结构中每个参数使用一行分割相比, feed 操作符写出的代码比逗号更具描述性。向左的流操作符也允许你打断语句并捕获一个可能对调试来说极其方便的中间结果或者接收那个结果并在最终结果身上创建另外一个变种。\u003c/p\u003e\n\u003cp\u003e注意: 在将来, 这个操作符会在它获得并行地运行列表操作的能力之后有所变化。它会强制右侧的操作数作为一个闭包变得可闭合(它能被克隆并运行在子线程中)\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.raku.org/language/operators#Sequencer_Precedence\"\u003ehttps://docs.raku.org/language/operators#Sequencer_Precedence\u003c/a\u003e\u003c/p\u003e\n","text":"infix ==\u0026gt; 这个流操作符(feed operator)从它的左侧接收结果并把结果作为最后一个参数传递给下一个(右侧的)例程(routine)。\n这个操作符的优先级很松散所以你需要使用圆括号把结果赋值给其它变量, 或者你甚至可以使用另外一个流操作符! 在接收单个参数或第一个参数为 block 的程序/方法的例子中, 你必须经常使用圆括号来调用(尽管这对于最后一个例程/方法不是必须的)。\n# Traditional structure, read bottom-to-top my @result = sort # (4) Sort, result is \u0026lt;Earth People\u0026gt; grep { /\u0026lt;[PE]\u0026gt;/ }, # (3) Look for P or E map { .tc }, # (2) Capitalize the words \u0026lt;people of earth\u0026gt;; # (1) Start with the input # Feed (left-to-right) with parentheses, read top-to-bottom @result = ( \u0026lt;people of earth\u0026gt; # (1) Start with the input ==\u0026gt; map({ .tc }) # (2) Capitalize the words ==\u0026gt; grep /\u0026lt;[PE]\u0026gt;/ # (3) Look for P or E ==\u0026gt; sort # (4) Sort, result is \u0026lt;Earth People\u0026gt; ); # For illustration, method chaining equivalent, read top-to-bottom @result = \u0026lt;people of earth\u0026gt; # (1) Start with the input .map({ .tc }) # (2) Capitalize the words .grep(/\u0026lt;[PE]\u0026gt;/) # (3) Look for P or E .sort; # (4) Sort, result is \u0026lt;Earth People\u0026gt; # To assign without the need of parentheses use another feed operator \u0026lt;people of earth\u0026gt; ==\u0026gt; map({ .tc }) ==\u0026gt; grep /\u0026lt;[PE]\u0026gt;/ ==\u0026gt; sort() ==\u0026gt; @result; # It can be useful to capture a partial result, however, unlike # the leftward feed operator, it does require parentheses or a semicolon \u0026lt;people of earth\u0026gt; ==\u0026gt; map({ .tc }) ==\u0026gt; my @caps; @caps # also could wrap in parentheses instead ==\u0026gt; grep /\u0026lt;[PE]\u0026gt;/ ==\u0026gt; sort() ==\u0026gt; @result; 这个流操作符能让你在例程之外构建方法链那样的模式并且方法的结果能在不相关的数据上调用。在方法链中, 你被限制于使用数据身上可用的方法或使用之前的方法调用的结果。使用流操作符, 那个限制没有了。写出来的代码比一系列用多个换行符打断的方法调用更加可读。\n注: 在将来, 这个操作符会在它获得并行地运行列表操作的能力之后有所变化。它会强制左侧的操作数作为一个闭包(它能被克隆并运行在子线程中)变得可闭合。\ninfix \u0026lt;== 这个向左的流操作符从右侧接收结果并把结果作为最后的一个参数传递给它前面的(左侧的)例程。这为一系列列表操作函数阐明了从右到左的数据流。\n# Traditional structure, read bottom-to-top my @result = sort # (4) Sort, result is \u0026lt;Earth People\u0026gt; grep { /\u0026lt;[PE]\u0026gt;/ }, # (3) Look for P or E map { .tc }, # (2) Capitalize the words \u0026lt;people of earth\u0026gt;; # (1) Start with the input # Feed (right-to-left) with parentheses, read bottom-to-top @result = ( sort() # (4) Sort, result is \u0026lt;Earth People\u0026gt; \u0026lt;== grep({ /\u0026lt;[PE]\u0026gt;/ }) # (3) Look for P or E \u0026lt;== map({ .tc }) # (2) Capitalize the words \u0026lt;== \u0026lt;people of earth\u0026gt; # (1) Start with the input ); # To assign without parentheses, use another feed operator @result \u0026lt;== sort() # (4) Sort, result is \u0026lt;Earth People\u0026gt; \u0026lt;== grep({ /\u0026lt;[PE]\u0026gt;/ }) # (3) Look for P or E \u0026lt;== map({ .tc }) # (2) Capitalize the words \u0026lt;== \u0026lt;people of earth\u0026gt;; # (1) Start with the input # It can be useful to capture a partial result @result \u0026lt;== sort() \u0026lt;== grep({ /\u0026lt;[PE]\u0026gt;/ }) \u0026lt;== my @caps # unlike ==\u0026gt;, there is no need for additional statement \u0026lt;== map({ .tc }) \u0026lt;== \u0026lt;people of earth\u0026gt;; 和向右的流操作符不一样, 这个结果不能严格地映射为方法链。然而, 和上面传统的结构中每个参数使用一行分割相比, feed 操作符写出的代码比逗号更具描述性。向左的流操作符也允许你打断语句并捕获一个可能对调试来说极其方便的中间结果或者接收那个结果并在最终结果身上创建另外一个变种。\n注意: 在将来, 这个操作符会在它获得并行地运行列表操作的能力之后有所变化。它会强制右侧的操作数作为一个闭包变得可闭合(它能被克隆并运行在子线程中)\nhttps://docs.raku.org/language/operators#Sequencer_Precedence\n"},"name":"Feed 运算符","published":"2021-07-18T00:00:00Z","summary":"Feed Operator","type":"entry","url":"https://ohmyweekly.github.io/notes/2016-09-18-feed-operator/"}