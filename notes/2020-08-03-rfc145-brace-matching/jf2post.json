{"author":{"name":null,"type":"card","url":"https://ohmycloud.github.io/"},"content":{"html":"\u003ch1 id=\"rfc-145作者-eric-j-roodeperl-正则表达式的括号匹配\"\u003eRFC 145，作者 Eric J. Roode：Perl 正则表达式的括号匹配。\u003c/h1\u003e\n\u003ch2 id=\"问题和建议\"\u003e问题和建议\u003c/h2\u003e\n\u003cp\u003eRFC 145 呼吁建立一个新的 regex 机制，以协助匹配像括号这样的配对字符，确保它们是平衡的。日常使用中或多或少都有很多“配对字符”。 \u003ccode\u003e()\u003c/code\u003e、\u003ccode\u003e[]\u003c/code\u003e、\u003ccode\u003e{}\u003c/code\u003e、\u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e、\u003ccode\u003e«»\u003c/code\u003e、\u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e、\u003ccode\u003e''\u003c/code\u003e，根据你的本地情况甚至还有 \u003ccode\u003e»«\u003c/code\u003e，或者在 Unicode 的花哨世界里还有 \u003ccode\u003e⟦⟧\u003c/code\u003e 以及很多很多。在本文中，我将采用 RFC 的标题，并将它们全部称为“括号”。\u003c/p\u003e\n\u003cp\u003e例如考虑字符串 \u003ccode\u003e ([b - (a + 1)] * 7)\u003c/code\u003e。我们可能希望提取所有的子公式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e[b - (a + 1)] * 7\u003c/code\u003e,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eb - (a + 1)\u003c/code\u003e,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ea + 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e中的内容，并使用全局匹配的方式用一对大括号包围。请读者现在就尝试编写这样的 regex。\u003c/p\u003e\n\u003cp\u003eRFC 作者 \u003ca href=\"https://metacpan.org/author/ROODE\"\u003eEric Roode\u003c/a\u003e 指出，在2000年的 Perl 中，这还是相当困难的。这个任务分为两部分。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e确定一个开头的括号和结尾的括号的对应关系。\u003c/li\u003e\n\u003cli\u003e追踪嵌套层次和每个层次上的匹配括号。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e当开口括号有多个选项时，第一个子任务在 regex 中变得很棘手。第二个子任务很难，有一个更深刻的原因，这个原因叫做 \u003ca href=\"https://en.wikipedia.org/wiki/Dyck_language\"\u003e\u0026ldquo;Dyck语言\u0026rdquo;\u003c/a\u003e。Dyck 语言是所有正确配对的小括号字符串的集合（它们之间的假设内容被抹去）。它是计算机科学意义上的语言的原型例子，它不是有规律的，但仍然是无上下文的，这意味着它以某种方式需要一个堆栈来跟踪嵌套级别。当然，regex 比计算机科学意义上的正则表达式更强大，但这一事实可能仍然证明了为什么这是一件困难的事情。Eric Roode 认识到了这个在解析结构化数据中非常常见的任务应该有多容易，与它之间的差距，于是写了一个 RFC。\u003c/p\u003e\n\u003cp\u003e他提出了一个 \u003ccode\u003euse matchpairs\u003c/code\u003e 编译指令来解决子任务 №1，提供一个从开括号到收括号的映射。编译指令在词法作用域中被激活，并影响其中所有的 regex 匹配。对于子任务 №2，我们提出了两个新的  regex  元字符，\u003ccode\u003e\\m\u003c/code\u003e 和 \u003ccode\u003e\\M\u003c/code\u003e 用于匹配和记忆相应的括号。使用这些钩子，嵌套层的业务被卸载到 regex 引擎上。\u003c/p\u003e\n\u003ch2 id=\"规范和解决方案\"\u003e规范和解决方案\u003c/h2\u003e\n\u003cp\u003eRFC 145 被标记为\u0026quot;开发中\u0026quot;，这意味着它在 Perl 6 和现在的 Raku 规范中没有得到充分的解决。（关于模式匹配的启示录5包含了对 RFC 145 的\u003ca href=\"https://raku.org/archive/doc/design/apo/A05.html#RFC%20145:%20Brace-matching%20for%20Perl%20Regular%20Expressions\"\u003e回应\u003c/a\u003e）但是有一些相关的改进，我将在这一节中使用这些改进来展示如何在今天的 Raku 中处理一开始提出的问题。\u003c/p\u003e\n\u003cp\u003e使用编译指令来建立一个有效的括号表，然后使用\u0026quot;括号\u0026quot; regex 元字符的想法并没有实现，但是无论如何都要重新设计 regex 语言，设计者从括号匹配中推断出了一个新的用于嵌套结构的 regex 操作符，即 \u003ca href=\"https://docs.raku.org/language/regexes#index-entry-regex__tilde-_regex__~-Tilde_for_nesting_structures\"\u003etilde\u003c/a\u003e。这个操作符的使用方法是这样的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eanon\u003c/span\u003e \u003cspan class=\"k\"\u003eregex\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e并且它实现了两点：它将 \u003ccode\u003ebody\u003c/code\u003e 和闭合括号转置，使这两个定界符相互靠近，即使 \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e 很长，它还为没有找到闭合括号时设置了错误报告。\u003c/p\u003e\n\u003cp\u003e我们可以利用这个新功能稍微改进一下 regex 结构，并免费获得错误报告，但它不会跟踪小括号的嵌套级别，如果开头的小括号有多个选项，它也不会为我们计算收尾括号。\u003c/p\u003e\n\u003cp\u003e要计算收尾括号，只要有一种方法来捕获开头的括号，并将其传递给一个函数，该函数的返回值被动态地插值到 regex 中就足够了。现在，在 Raku 的 \u003ca href=\"https://docs.raku.org/language/regexes\"\u003eregex\u003c/a\u003e 和 \u003ca href=\"https://docs.raku.org/language/grammars\"\u003egrammar\u003c/a\u003e 中，这很容易实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003egrammar\u003c/span\u003e \u003cspan class=\"nc\"\u003eFormula\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# Registry of understood braces.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003econstant\u003c/span\u003e \u003cspan class=\"nv\"\u003e%braces\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# A parametric token which matches the closing brace\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# corresponding to its argument.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003etoken\u003c/span\u003e \u003cspan class=\"nf\"\u003eclosing\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$opening\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e%braces\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$opening\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u0026#34;\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003erule\u003c/span\u003e \u003cspan class=\"nf\"\u003ebraced\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"nv\"\u003e$\u0026lt;opening\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e@\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e%braces\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003eclosing\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$\u0026lt;opening\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e          \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003erule\u003c/span\u003e \u003cspan class=\"nf\"\u003eexpr\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;:\u003c/span\u003e\u003cspan class=\"na\"\u003eLetter\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;:\u003c/span\u003e\u003cspan class=\"na\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003ebraced\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e%\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;[\u003c/span\u003e\u003cspan class=\"sr\"\u003e+*/-\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e关键的部分是 \u003ccode\u003erule braced\u003c/code\u003e。¹ 我们捕获开头的括号，然后稍后从 \u003ccode\u003e%braces\u003c/code\u003e map² 中的查找中要求其对应的结尾括号。列表的 \u003ccode\u003e@(%braces.keys)\u003c/code\u003e 插值调用\u003ca href=\"https://docs.raku.org/language/regexes#Quoted_lists_are_LTM_matches\"\u003e最长标记匹配\u003c/a\u003e，所以当存在多个前缀重叠的括号时，它会 DWIM。\u003c/p\u003e\n\u003cp\u003e注意，\u003ccode\u003e\u0026lt;expr\u0026gt;\u003c/code\u003e 和 \u003ccode\u003e\u0026lt;braced\u0026gt;\u003c/code\u003e 规则的相互递归使用保证了括号的正确嵌套，而不需要在 regex 引擎中为此专门设置一个齿轮。这属于 Raku 改进的 regex 结构和重用设施。是时候进行测试了。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003egrammar\u003c/span\u003e \u003cspan class=\"nc\"\u003eFormula\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e…\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ebraced-subexprs\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$expr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e…\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ebraced-subexprs\u003c/span\u003e \u003cspan class=\"k\"\u003eQ\u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"s\"\u003e([b - (a + 1)] * 7)\u003c/span\u003e\u003cspan class=\"p\"\u003e|;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e---------------------------------------------------------\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eBraces:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|||\u003c/span\u003e \u003cspan class=\"n\"\u003eSubexpr:\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eBraces:\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e|||\u003c/span\u003e \u003cspan class=\"n\"\u003eSubexpr:\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eBraces:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|||\u003c/span\u003e \u003cspan class=\"n\"\u003eSubexpr:\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\n\u003cp\u003e总而言之，在解析结构化数据时，括号匹配显然是有用的。Eric Roode 提出在 Perl 6 / Raku 中使之简单化。虽然这个功能没有以建议的形式实现，但任务确实变得更容易完成，代码也更容易阅读，特别是由于新的 regex 语法和 grammar 支持。\u003c/p\u003e\n\u003ch2 id=\"这还没完\"\u003e这还没完!\u003c/h2\u003e\n\u003cp\u003e如果你和我一样，对静态括号表稍有困扰，但对启发式方法无所谓，那么 Unicode 联盟可能是一个意想不到的盟友。\u003ccode\u003eUnicode Bidi_Mirroring_Glyph\u003c/code\u003e 属性给出了关于双向书写的提示，即当涉及多个脚本时，将文本放在屏幕上，其中一些脚本从左到右书写，另一些脚本从右到左书写。Raku 内置了对 Unicode 属性的支持，我们可以用这个属性让 Unicode 联盟为我们挑选收尾括号。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eunicode-mirror\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003ejoin\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecomb\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ereverse\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003euniprop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eBidi_Mirroring_Glyph\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"ow\"\u003eor\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eself\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003etoken\u003c/span\u003e \u003cspan class=\"nf\"\u003eclosing\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$opening\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;{\u003c/span\u003e \u003cspan class=\"nf\"\u003eunicode-mirror\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$opening\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u0026#34;\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eregex\u003c/span\u003e \u003cspan class=\"nf\"\u003ebraced\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"na\"\u003esigspace\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"nv\"\u003e$\u0026lt;opening\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;:\u003c/span\u003e\u003cspan class=\"na\"\u003eSymbol\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"na\"\u003ePunctuation\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003eclosing\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$\u0026lt;opening\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nf\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003cspan class=\"sr\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"sr\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sr\"\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e\u0026amp;unicode-mirror\u003c/code\u003e 启发式将参数分割成字符，颠倒其顺序，然后选择其镜像字形（如果有定义的话），或者保持字符原样，然后将它们重新组合成一个字符串。例如，这个函数成功地将 \u003ccode\u003e\u0026lt;{\u003c/code\u003e 变成 \u003ccode\u003e}\u0026gt;\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ebraced\u003c/code\u003e 在两个方面进行了调整：现在它接受任何符号和标点符号序列作为开括号，而且当它在消耗开括号时太过贪婪时，它已经变成了一个完全回溯能力的 \u003ccode\u003eregex\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e有了这些调整，我们就可以疯狂地让 grammar 进行自由联想，匹配一切 \u0026ldquo;看起来像括号对\u0026rdquo; 的东西。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e-- ([b - (a + 1)] * 7) ---------------------------------------------------------\nBraces: ( * ) ||| Subexpr: a + 1\nBraces: [ * ] ||| Subexpr: b - (a + 1)\nBraces: ( * ) ||| Subexpr: [b - (a + 1)] * 7\n\n-- (=^123^=) -------------------------------------------------------------------\nBraces: (=^ * ^=) ||| Subexpr: 123\n\n-- \u0026lt;\u0026lt;\u0026lt;123\u0026gt;\u0026gt; --------------------------------------------------------------------\nFAILED\n\n-- \u0026gt;123\u0026lt; -----------------------------------------------------------------------\nBraces: \u0026gt; * \u0026lt; ||| Subexpr: 123\n\n-- \u0026gt;123\u0026gt; -----------------------------------------------------------------------\nFAILED\n\n-- \u0026lt;{ (a + \u0026lt;b\u0026gt;) / !c! / e * »~d~« }\u0026gt; -------------------------------------------\nBraces: \u0026lt; * \u0026gt; ||| Subexpr: b\nBraces: ( * ) ||| Subexpr: a + \u0026lt;b\u0026gt;\nBraces: ! * ! ||| Subexpr: c\nBraces: »~ * ~« ||| Subexpr: d\nBraces: \u0026lt;{ * }\u0026gt; ||| Subexpr: (a + \u0026lt;b\u0026gt;) / !c! / e * »~d~«\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"脚注\"\u003e脚注\u003c/h2\u003e\n\u003cp\u003e用于报告大括号子表达式的函数是这样的:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003ebraced-subexprs\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$expr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# Get all submatches of the C\u0026lt;braced\u0026gt; subrule.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBracedCollector\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ehas\u003c/span\u003e \u003cspan class=\"nv\"\u003e@.braced-subexprs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nf\"\u003ebraced\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nb\"\u003epush\u003c/span\u003e \u003cspan class=\"nv\"\u003e@!braced-subexprs\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"nf\"\u003ebraced-subexprs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e@!braced-subexprs\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003eas\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e*.\u003c/span\u003e\u003cspan class=\"nb\"\u003epos\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e-- \u003c/span\u003e\u003cspan class=\"nv\"\u003e$expr\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e-\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"nb\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e76\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nv\"\u003e$expr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003echars\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"n\"\u003eBracedCollector\u003c/span\u003e \u003cspan class=\"nv\"\u003e$collect\u003c/span\u003e \u003cspan class=\"o\"\u003e.=\u003c/span\u003e \u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eFAILED\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"n\"\u003eFormula\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$expr\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003erule\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003eactions\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$collect\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e$collect\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ebraced-subexprs\u003c/span\u003e \u003cspan class=\"k\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$/\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eBraces: $\u0026lt;opening\u0026gt; * $\u0026lt;closing\u0026gt; ||| Subexpr: $\u0026lt;expr\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e¹ 如果你对 \u003ccode\u003e[\u0026lt;expr\u0026gt; {}]\u003c/code\u003e 中使用空块感到疑惑，这是由于 Rakudo 的 regex 引擎中的一个实现细节，它不会使捕获 \u003ccode\u003e$\u0026lt;opening\u0026gt;\u003c/code\u003e 用于后来的子规则 \u003ccode\u003eclosing\u003c/code\u003e，除非它是被迫的。空块是强制的一种方式；参见 \u003ca href=\"https://github.com/Raku/old-issue-tracker/issues/2662\"\u003eRT#111518\u003c/a\u003e 和 \u003ca href=\"https://github.com/Raku/doc/issues/3478\"\u003eDOC#3478\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e² 据我所知，在 2000 年左右 (也就是本 RFC 发布的时候) ，Perl 5.6 中加入了一个重要的功能，就是将函数调用闭包 \u003ccode\u003e$\u0026lt;op\u0026gt;\u003c/code\u003e 的返回值插值回来，而这个返回值可能取决于之前的捕获，在这种情况下，它的拼写是 \u003ccode\u003e(??{closing $+{op}})\u003c/code\u003e。\u003c/p\u003e\n","text":"RFC 145，作者 Eric J. Roode：Perl 正则表达式的括号匹配。 问题和建议 RFC 145 呼吁建立一个新的 regex 机制，以协助匹配像括号这样的配对字符，确保它们是平衡的。日常使用中或多或少都有很多“配对字符”。 ()、[]、{}、\u0026lt;\u0026gt;、«»、\u0026quot;\u0026quot;、''，根据你的本地情况甚至还有 »«，或者在 Unicode 的花哨世界里还有 ⟦⟧ 以及很多很多。在本文中，我将采用 RFC 的标题，并将它们全部称为“括号”。\n例如考虑字符串 ([b - (a + 1)] * 7)。我们可能希望提取所有的子公式。\n[b - (a + 1)] * 7, b - (a + 1), a + 1 中的内容，并使用全局匹配的方式用一对大括号包围。请读者现在就尝试编写这样的 regex。\nRFC 作者 Eric Roode 指出，在2000年的 Perl 中，这还是相当困难的。这个任务分为两部分。\n确定一个开头的括号和结尾的括号的对应关系。 追踪嵌套层次和每个层次上的匹配括号。 当开口括号有多个选项时，第一个子任务在 regex 中变得很棘手。第二个子任务很难，有一个更深刻的原因，这个原因叫做 \u0026ldquo;Dyck语言\u0026rdquo;。Dyck 语言是所有正确配对的小括号字符串的集合（它们之间的假设内容被抹去）。它是计算机科学意义上的语言的原型例子，它不是有规律的，但仍然是无上下文的，这意味着它以某种方式需要一个堆栈来跟踪嵌套级别。当然，regex 比计算机科学意义上的正则表达式更强大，但这一事实可能仍然证明了为什么这是一件困难的事情。Eric Roode 认识到了这个在解析结构化数据中非常常见的任务应该有多容易，与它之间的差距，于是写了一个 RFC。\n他提出了一个 use matchpairs 编译指令来解决子任务 №1，提供一个从开括号到收括号的映射。编译指令在词法作用域中被激活，并影响其中所有的 regex 匹配。对于子任务 №2，我们提出了两个新的 regex 元字符，\\m 和 \\M 用于匹配和记忆相应的括号。使用这些钩子，嵌套层的业务被卸载到 regex 引擎上。\n规范和解决方案 RFC 145 被标记为\u0026quot;开发中\u0026quot;，这意味着它在 Perl 6 和现在的 Raku 规范中没有得到充分的解决。（关于模式匹配的启示录5包含了对 RFC 145 的回应）但是有一些相关的改进，我将在这一节中使用这些改进来展示如何在今天的 Raku 中处理一开始提出的问题。\n使用编译指令来建立一个有效的括号表，然后使用\u0026quot;括号\u0026quot; regex 元字符的想法并没有实现，但是无论如何都要重新设计 regex 语言，设计者从括号匹配中推断出了一个新的用于嵌套结构的 regex 操作符，即 tilde。这个操作符的使用方法是这样的。\nanon regex { \u0026#39;(\u0026#39; ~ \u0026#39;)\u0026#39; \u0026lt;body\u0026gt; } 并且它实现了两点：它将 body 和闭合括号转置，使这两个定界符相互靠近，即使 \u0026lt;body\u0026gt; 很长，它还为没有找到闭合括号时设置了错误报告。\n我们可以利用这个新功能稍微改进一下 regex 结构，并免费获得错误报告，但它不会跟踪小括号的嵌套级别，如果开头的小括号有多个选项，它也不会为我们计算收尾括号。\n要计算收尾括号，只要有一种方法来捕获开头的括号，并将其传递给一个函数，该函数的返回值被动态地插值到 regex 中就足够了。现在，在 Raku 的 regex 和 grammar 中，这很容易实现。\ngrammar Formula { # Registry of understood braces. constant %braces = \u0026#39;(\u0026#39; =\u0026gt; \u0026#39;)\u0026#39;, \u0026#39;[\u0026#39; =\u0026gt; \u0026#39;]\u0026#39;, \u0026#39;{\u0026#39; =\u0026gt; \u0026#39;}\u0026#39;, ; # A parametric token which matches the closing brace # corresponding to its argument. token closing ($opening) { \u0026#34;%braces{$opening}\u0026#34; } rule braced { $\u0026lt;opening\u0026gt;=@(%braces.keys) ~ \u0026lt;closing($\u0026lt;opening\u0026gt;)\u0026gt; [ \u0026lt;expr\u0026gt; {} ] } rule expr { [ \u0026lt;:Letter\u0026gt;+ || \u0026lt;:Number\u0026gt;+ || \u0026lt;braced\u0026gt; ]+ % \u0026lt;[+*/-]\u0026gt; } } 关键的部分是 rule braced。¹ 我们捕获开头的括号，然后稍后从 %braces map² 中的查找中要求其对应的结尾括号。列表的 @(%braces.keys) 插值调用最长标记匹配，所以当存在多个前缀重叠的括号时，它会 DWIM。\n注意，\u0026lt;expr\u0026gt; 和 \u0026lt;braced\u0026gt; 规则的相互递归使用保证了括号的正确嵌套，而不需要在 regex 引擎中为此专门设置一个齿轮。这属于 Raku 改进的 regex 结构和重用设施。是时候进行测试了。\ngrammar Formula { … } sub braced-subexprs ($expr) { … } braced-subexprs Q|([b - (a + 1)] * 7)|; -- ([b - (a + 1)] * 7) --------------------------------------------------------- Braces: ( * ) ||| Subexpr: a + 1 Braces: [ * ] ||| Subexpr: b - (a + 1) Braces: ( * ) ||| Subexpr: [b - (a + 1)] * 7 总结 总而言之，在解析结构化数据时，括号匹配显然是有用的。Eric Roode 提出在 Perl 6 / Raku 中使之简单化。虽然这个功能没有以建议的形式实现，但任务确实变得更容易完成，代码也更容易阅读，特别是由于新的 regex 语法和 grammar 支持。\n这还没完! 如果你和我一样，对静态括号表稍有困扰，但对启发式方法无所谓，那么 Unicode 联盟可能是一个意想不到的盟友。Unicode Bidi_Mirroring_Glyph 属性给出了关于双向书写的提示，即当涉及多个脚本时，将文本放在屏幕上，其中一些脚本从左到右书写，另一些脚本从右到左书写。Raku 内置了对 Unicode 属性的支持，我们可以用这个属性让 Unicode 联盟为我们挑选收尾括号。\nsub unicode-mirror ($_) { join \u0026#39;\u0026#39;, .comb.reverse.map: { .uniprop(\u0026#39;Bidi_Mirroring_Glyph\u0026#39;) or .self } } token closing ($opening) { \u0026#34;{ unicode-mirror($opening) }\u0026#34; } regex braced { :sigspace $\u0026lt;opening\u0026gt;=\u0026lt;:Symbol + :Punctuation\u0026gt;+ ~ \u0026lt;closing($\u0026lt;opening\u0026gt;)\u0026gt; [ \u0026lt;expr\u0026gt; {} ] } \u0026amp;unicode-mirror 启发式将参数分割成字符，颠倒其顺序，然后选择其镜像字形（如果有定义的话），或者保持字符原样，然后将它们重新组合成一个字符串。例如，这个函数成功地将 \u0026lt;{ 变成 }\u0026gt;。\nbraced 在两个方面进行了调整：现在它接受任何符号和标点符号序列作为开括号，而且当它在消耗开括号时太过贪婪时，它已经变成了一个完全回溯能力的 regex。\n有了这些调整，我们就可以疯狂地让 grammar 进行自由联想，匹配一切 \u0026ldquo;看起来像括号对\u0026rdquo; 的东西。\n-- ([b - (a + 1)] * 7) --------------------------------------------------------- Braces: ( * ) ||| Subexpr: a + 1 Braces: [ * ] ||| Subexpr: b - (a + 1) Braces: ( * ) ||| Subexpr: [b - (a + 1)] * 7 -- (=^123^=) ------------------------------------------------------------------- Braces: (=^ * ^=) ||| Subexpr: 123 -- \u0026lt;\u0026lt;\u0026lt;123\u0026gt;\u0026gt; -------------------------------------------------------------------- FAILED -- \u0026gt;123\u0026lt; ----------------------------------------------------------------------- Braces: \u0026gt; * \u0026lt; ||| Subexpr: 123 -- \u0026gt;123\u0026gt; ----------------------------------------------------------------------- FAILED -- \u0026lt;{ (a + \u0026lt;b\u0026gt;) / !c! / e * »~d~« }\u0026gt; ------------------------------------------- Braces: \u0026lt; * \u0026gt; ||| Subexpr: b Braces: ( * ) ||| Subexpr: a + \u0026lt;b\u0026gt; Braces: ! * ! ||| Subexpr: c Braces: »~ * ~« ||| Subexpr: d Braces: \u0026lt;{ * }\u0026gt; ||| Subexpr: (a + \u0026lt;b\u0026gt;) / !c! / e * »~d~« 脚注 用于报告大括号子表达式的函数是这样的:\nsub braced-subexprs ($expr) { # Get all submatches of the C\u0026lt;braced\u0026gt; subrule. class BracedCollector { has @.braced-subexprs; method braced ($/) { push @!braced-subexprs, $/ } method braced-subexprs { @!braced-subexprs.unique(as =\u0026gt; *.pos) } } say \u0026#34;-- $expr \u0026#34;, \u0026#39;-\u0026#39; x (76 - $expr.chars); my BracedCollector $collect .= new; say \u0026#34;FAILED\u0026#34; and return unless Formula.parse($expr, :rule\u0026lt;expr\u0026gt;, :actions($collect)); for $collect.braced-subexprs -\u0026gt; $/ { say \u0026#34;Braces: $\u0026lt;opening\u0026gt; * $\u0026lt;closing\u0026gt; ||| Subexpr: $\u0026lt;expr\u0026gt;\u0026#34;; } } ¹ 如果你对 [\u0026lt;expr\u0026gt; {}] 中使用空块感到疑惑，这是由于 Rakudo 的 regex 引擎中的一个实现细节，它不会使捕获 $\u0026lt;opening\u0026gt; 用于后来的子规则 closing，除非它是被迫的。空块是强制的一种方式；参见 RT#111518 和 DOC#3478。\n² 据我所知，在 2000 年左右 (也就是本 RFC 发布的时候) ，Perl 5.6 中加入了一个重要的功能，就是将函数调用闭包 $\u0026lt;op\u0026gt; 的返回值插值回来，而这个返回值可能取决于之前的捕获，在这种情况下，它的拼写是 (??{closing $+{op}})。\n"},"name":"括号的匹配","published":"2020-08-02T10:02:45+08:00","summary":"brace matching","type":"entry","url":"https://ohmycloud.github.io/notes/2020-08-03-rfc145-brace-matching/"}