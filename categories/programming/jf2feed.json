{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003ch2 id=\"flink-操作游乐场\"\u003eFlink 操作游乐场\u003c/h2\u003e\n\u003cp\u003e在各种环境中部署和操作 Apache Flink 的方法有很多。无论这种多样性如何，Flink 集群的基本构件保持不变，类似的操作原则也适用。\u003c/p\u003e\n\u003cp\u003e在这个操场上，你将学习如何管理和运行 Flink Jobs。您将看到如何部署和监控应用程序，体验 Flink 如何从 Job 故障中恢复，并执行日常操作任务，如升级和重新缩放。\u003c/p\u003e\n\u003ch3 id=\"这个游乐场的解剖\"\u003e这个游乐场的解剖\u003c/h3\u003e\n\u003cp\u003e这个游乐场由一个持久的 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-session-cluster\"\u003eFlink Session Cluster\u003c/a\u003e和一个 Kafka Cluster 组成。\u003c/p\u003e\n\u003cp\u003e一个 Flink Cluster 总是由一个 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-jobmanager\"\u003eJobManager\u003c/a\u003e 和一个或多个 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-taskmanager\"\u003eFlink TaskManager\u003c/a\u003e 组成。JobManager 负责处理 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-job\"\u003eJob\u003c/a\u003e 提交，监督 Job 以及资源管理。Flink TaskManager 是 worker 进程，负责执行构成 Flink Job 的实际\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#task\"\u003e任务\u003c/a\u003e。在这个游戏场中，你将从一个单一的 TaskManager 开始，但以后会扩展到更多的 TaskManager。此外，这个游乐场还带有一个专门的客户端容器，我们使用它来提交 Flink Job，并在以后执行各种操作任务。客户端容器不是 Flink Cluster 本身需要的，只是为了方便使用才包含在里面。\u003c/p\u003e\n\u003cp\u003eKafka 集群由一个 Zookeeper 服务器和一个 Kafka Broker 组成。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/flink-docker-playground.svg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e当游乐场启动时，一个名为 Flink Event Count 的 Flink Job 将被提交给 JobManager。此外，还会创建两个 Kafka 主题 \u003cem\u003einput\u003c/em\u003e 和 \u003cem\u003eoutput\u003c/em\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/click-event-count-example.svg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e该作业从 \u003cem\u003einput\u003c/em\u003e 主题中消耗点击事件(\u003cstrong\u003eClickEvent\u003c/strong\u003e)，每个点击事件(\u003cstrong\u003eClickEvent\u003c/strong\u003e)都有一个时间戳(\u003cstrong\u003etimestamp\u003c/strong\u003e)和一个页面(\u003cstrong\u003epage\u003c/strong\u003e)。然后按页面对事件进行分组(\u003cstrong\u003ekeyed by\u003c/strong\u003e)，并在 15 秒的\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/windows.html\"\u003e窗口\u003c/a\u003e中进行计数。结果被写入 \u003cem\u003eoutput\u003c/em\u003e 主题。\u003c/p\u003e\n\u003cp\u003e有6个不同的页面，我们在每个页面和15秒内产生1000个点击事件。因此，Flink 作业的输出应该显示每个页面和窗口有1000个浏览量。\u003c/p\u003e\n\u003ch3 id=\"启动游乐场\"\u003e启动游乐场\u003c/h3\u003e\n\u003cp\u003e游戏场环境的设置只需几步。我们将引导你完成必要的命令，并展示如何验证一切都在正确运行。\u003c/p\u003e\n\u003cp\u003e我们假设你的机器上安装了 \u003ca href=\"https://docs.docker.com/\"\u003eDocker\u003c/a\u003e（1.12+）和 \u003ca href=\"https://docs.docker.com/compose/\"\u003edocker-compose\u003c/a\u003e（2.1+）。\u003c/p\u003e\n\u003cp\u003e所需的配置文件可以在 \u003ca href=\"https://github.com/apache/flink-playgrounds\"\u003eflink-playgrounds\u003c/a\u003e 仓库中找到。检查一下，然后对齐环境。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003egit clone --branch release-1.11 https://github.com/apache/flink-playgrounds.git\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e flink-playgrounds/operations-playground\ndocker-compose build\ndocker-compose up -d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e之后，你可以用以下命令检查正在运行的 Docker 容器。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose ps\n\n                    Name                                  Command               State                   Ports                \n-----------------------------------------------------------------------------------------------------------------------------\noperations-playground_clickevent-generator_1   /docker-entrypoint.sh java ...   Up       6123/tcp, 8081/tcp                  \noperations-playground_client_1                 /docker-entrypoint.sh flin ...   Exit \u003cspan class=\"m\"\u003e0\u003c/span\u003e                                       \noperations-playground_jobmanager_1             /docker-entrypoint.sh jobm ...   Up       6123/tcp, 0.0.0.0:8081-\u0026gt;8081/tcp    \noperations-playground_kafka_1                  start-kafka.sh                   Up       0.0.0.0:9094-\u0026gt;9094/tcp              \noperations-playground_taskmanager_1            /docker-entrypoint.sh task ...   Up       6123/tcp, 8081/tcp                  \noperations-playground_zookeeper_1              /bin/sh -c /usr/sbin/sshd  ...   Up       2181/tcp, 22/tcp, 2888/tcp, 3888/tcp\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这表明客户端容器已经成功提交了 Flink Job（Exit 0），所有集群组件以及数据生成器都在运行（Up）。\u003c/p\u003e\n\u003cp\u003e您可以通过调用来停止游乐场环境。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose down -v\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"进入游乐场\"\u003e进入游乐场\u003c/h3\u003e\n\u003cp\u003e在这个游乐场中，有很多东西你可以尝试和检查。在下面的两节中，我们将向您展示如何与 Flink 集群进行交互，并展示 Flink 的一些关键功能。\u003c/p\u003e\n\u003ch4 id=\"flink-webui\"\u003eFlink WebUI\u003c/h4\u003e\n\u003cp\u003e观察你的 Flink 集群最自然的出发点是在 \u003ca href=\"http://localhost:8081/\"\u003ehttp://localhost:8081\u003c/a\u003e 下暴露的 WebUI。如果一切顺利，你会看到集群最初由一个任务管理器组成，并执行一个名为 Click Event Count 的 Job。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/playground-webui.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003eFlink WebUI 包含了很多关于 Flink 集群和它的工作的有用和有趣的信息（JobGraph, Metrics, Checkpointing Statistics, TaskManager Status, \u0026hellip;）。\u003c/p\u003e\n\u003ch4 id=\"日志\"\u003e日志\u003c/h4\u003e\n\u003ch5 id=\"jobmanager\"\u003eJobManager\u003c/h5\u003e\n\u003cp\u003e可以通过 \u003ccode\u003edocker-compose\u003c/code\u003e 对 JobManager 日志进行跟踪。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose logs -f jobmanager\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在初始启动后，你应该主要看到每一个检查点完成的日志信息。\u003c/p\u003e\n\u003ch5 id=\"taskmanager\"\u003eTaskManager\u003c/h5\u003e\n\u003cp\u003eTaskManager 的日志也可以用同样的方式进行 tail。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose logs -f taskmanager\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在初始启动后，你应该主要看到每个检查点完成的日志信息。\u003c/p\u003e\n\u003ch4 id=\"flink-cli\"\u003eFlink CLI\u003c/h4\u003e\n\u003cp\u003eFlink CLI 可以在客户端容器中使用。例如，要打印 Flink CLI 的帮助信息，你可以运行以下命令\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose run --no-deps client flink --help\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"flink-rest-api\"\u003eFlink REST API\u003c/h4\u003e\n\u003cp\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/rest_api.html#api\"\u003eFlink REST API\u003c/a\u003e 通过主机上的 localhost:8081 或客户端容器中的 jobmanager:8081 暴露出来，例如，要列出所有当前正在运行的作业，你可以运行:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ecurl localhost:8081/jobs\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"kafka-topics\"\u003eKafka Topics\u003c/h4\u003e\n\u003cp\u003e你可以通过运行以下命令来查看写入 Kafka 主题的记录\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e//input topic \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1000\u003c/span\u003e records/s\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ndocker-compose \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e kafka kafka-console-consumer.sh \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --bootstrap-server localhost:9092 --topic input\n\n//output topic \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e24\u003c/span\u003e records/min\u003cspan class=\"o\"\u003e)\u003c/span\u003e\ndocker-compose \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e kafka kafka-console-consumer.sh \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --bootstrap-server localhost:9092 --topic output\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"time-to-play\"\u003eTime to Play!\u003c/h4\u003e\n\u003cp\u003e现在你已经学会了如何与 Flink 和 Docker 容器进行交互，让我们来看看一些常见的操作任务，你可以在我们的游乐场上尝试一下。所有这些任务都是相互独立的，即你可以以任何顺序执行它们。大多数任务可以通过 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#flink-cli\"\u003eCLI\u003c/a\u003e 和 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#flink-rest-api\"\u003eREST API\u003c/a\u003e 来执行。\u003c/p\u003e\n\u003ch5 id=\"列出正在运行的-job\"\u003e列出正在运行的 Job\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eCLI\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e命令\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose run --no-deps client flink list\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e期望的输出\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWaiting for response...\n------------------ Running/Restarting Jobs -------------------\n16.07.2019 16:37:55 : \u0026lt;job-id\u0026gt; : Click Event Count (RUNNING)\n--------------------------------------------------------------\nNo scheduled jobs.\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eREST API\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurl localhost:8081/jobs\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e期待的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;jobs\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eJobID 在提交时被分配给作业(Job)，并且需要通过 CLI 或 REST API 对作业(Job)执行操作。\u003c/p\u003e\n\u003ch5 id=\"观察故障和恢复\"\u003e观察故障和恢复\u003c/h5\u003e\n\u003cp\u003eFlink 在(部分)失败下提供了精确的一次处理保证。在这个游乐场中，你可以观察并在一定程度上验证这种行为。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e步骤1：观察输出\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#anatomy-of-this-playground\"\u003e如上所述\u003c/a\u003e，在这个游乐场中的事件是这样生成的，每个窗口正好包含一千条记录。因此，为了验证 Flink 是否成功地从 TaskManager 故障中恢复，而没有数据丢失或重复，你可以跟踪 \u003cem\u003eoutput\u003c/em\u003e 主题，并检查恢复后所有的窗口都存在，而且计数是正确的。\u003c/p\u003e\n\u003cp\u003e为此，从 \u003cem\u003eoutput\u003c/em\u003e 主题开始读取，并让这个命令运行到恢复后（步骤3）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e kafka kafka-console-consumer.sh \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --bootstrap-server localhost:9092 --topic output\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e第二步：引入故障\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e为了模拟部分故障，你可以杀死一个 TaskManager，在生产设置中，这可能对应于 TaskManager 进程、TaskManager 机器的丢失，或者仅仅是框架或用户代码抛出的瞬时异常（例如由于暂时不可用）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose \u003cspan class=\"nb\"\u003ekill\u003c/span\u003e taskmanager\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e几秒钟后，JobManager 会注意到 TaskManager 的丢失，取消受影响的 Job，并立即重新提交它进行恢复。当 Job 被重新启动后，其任务仍处于 \u003cstrong\u003eSCHEDULED\u003c/strong\u003e 状态，由紫色的方块表示（见下面的截图）。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/playground-webui-failure.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e注意：即使作业(Job)的任务(Task)处于 \u003cstrong\u003eSCHEDULED\u003c/strong\u003e 状态而不是 \u003cstrong\u003eRUNNING\u003c/strong\u003e 状态，作业(Job)的整体状态也会显示为 \u003cstrong\u003eRUNNING\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e此时，Job 的任务(Task)不能从 \u003cstrong\u003eSCHEDULED\u003c/strong\u003e 状态转为 \u003cstrong\u003eRUNNING\u003c/strong\u003e 状态，因为没有资源(\u003cstrong\u003eTaskManager\u003c/strong\u003e 提供的 \u003cstrong\u003eTaskSlots\u003c/strong\u003e）来运行这些任务。在新的 TaskManager 可用之前，Job 将经历一个取消和重新提交的循环。\u003c/p\u003e\n\u003cp\u003e同时，数据生成器会不断地将 ClickEvents 推送到 \u003cem\u003einput\u003c/em\u003e 主题中。这类似于真正的生产设置，在生产数据的同时，要处理数据的 Job 却宕机了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e步骤3：恢复\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e一旦你重新启动 TaskManager，它就会重新连接到 JobManager。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose up -d taskmanager\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当 JobManager 被通知到新的 TaskManager 时，它将恢复中的 Job 的任务(tasks)调度到新的可用 TaskSlots。重新启动后，任务会从故障前最后一次成功的\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/fault_tolerance.html\"\u003e检查点\u003c/a\u003e恢复其状态，并切换到 RUNNING 状态。\u003c/p\u003e\n\u003cp\u003eJob 将快速处理来自 Kafka 的全部积压输入事件(在故障期间积累的)，并以更高的速度(\u0026gt;24条记录/分钟)产生输出，直到到达流的头部。在输出中，你会看到所有的键(页面)都存在于所有的时间窗口中，而且每个计数都是精确的 1000。由于我们是在\u0026quot;至少一次\u0026quot;模式下使用 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/kafka.html#kafka-producers-and-fault-tolerance\"\u003eFlinkKafkaProducer\u003c/a\u003e，所以你有可能会看到一些重复的输出记录。\u003c/p\u003e\n\u003cp\u003e注意：大多数生产设置依赖于资源管理器(Kubernetes、Yarn、Mesos)来自动重启失败的进程。\u003c/p\u003e\n\u003ch5 id=\"升级和重新缩放作业\"\u003e升级和重新缩放作业\u003c/h5\u003e\n\u003cp\u003e升级 Flink 作业总是涉及两个步骤。首先，用一个\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/state/savepoints.html\"\u003e保存点\u003c/a\u003e优雅地停止 Flink Job。保存点是在一个明确定义的、全局一致的时间点(类似于检查点)上的完整应用状态的一致快照。其次，升级后的 Flink Job 从 Savepoint 开始。在这种情况下，\u0026ldquo;升级\u0026quot;可以意味着不同的事情，包括以下内容:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e配置的升级（包括作业的并行性）。\u003c/li\u003e\n\u003cli\u003e对 Job 的拓扑结构进行升级（增加/删除 Operator）。\u003c/li\u003e\n\u003cli\u003e对 Job 的用户定义的函数进行升级。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在开始升级之前，你可能要开始 tailing \u003cem\u003eoutput\u003c/em\u003e 主题，以观察在升级过程中没有数据丢失或损坏。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e kafka kafka-console-consumer.sh \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --bootstrap-server localhost:9092 --topic output\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e第一步：停止工作\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e要优雅地停止作业，您需要使用 CLI 或 REST API 的 \u0026ldquo;stop\u0026rdquo; 命令。为此，您需要该作业的 JobID，您可以通过\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#listing-running-jobs\"\u003e列出所有正在运行的 Job\u003c/a\u003e 或从 WebUI 中获得。有了 JobID，您就可以继续停止该作业:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCLI\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e命令\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose run --no-deps client flink stop \u0026lt;job-id\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的输出\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSuspending job \u0026quot;\u0026lt;job-id\u0026gt;\u0026quot; with a savepoint.\nSuspended job \u0026quot;\u0026lt;job-id\u0026gt;\u0026quot; with a savepoint.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSavepoint 已经被存储到 flink-conf.yaml 中配置的 state.savepoint.dir 中，它被安装在本地机器的 /tmp/flink-savepoints-directory/ 下。在下一步中，你将需要这个 Savepoint 的路径。在 REST API 的情况下，这个路径已经是响应的一部分，你将需要直接查看文件系统。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e命令\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003els -lia /tmp/flink-savepoints-directory\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的输出\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003etotal \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"m\"\u003e17\u003c/span\u003e drwxr-xr-x   \u003cspan class=\"m\"\u003e3\u003c/span\u003e root root   \u003cspan class=\"m\"\u003e60\u003c/span\u003e \u003cspan class=\"m\"\u003e17\u003c/span\u003e jul 17:05 .\n   \u003cspan class=\"m\"\u003e2\u003c/span\u003e drwxrwxrwt \u003cspan class=\"m\"\u003e135\u003c/span\u003e root root \u003cspan class=\"m\"\u003e3420\u003c/span\u003e \u003cspan class=\"m\"\u003e17\u003c/span\u003e jul 17:09 ..\n\u003cspan class=\"m\"\u003e1002\u003c/span\u003e drwxr-xr-x   \u003cspan class=\"m\"\u003e2\u003c/span\u003e root root  \u003cspan class=\"m\"\u003e140\u003c/span\u003e \u003cspan class=\"m\"\u003e17\u003c/span\u003e jul 17:05 savepoint-\u0026lt;short-job-id\u0026gt;-\u0026lt;uuid\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eREST API\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# triggering stop\u003c/span\u003e\ncurl -X POST localhost:8081/jobs/\u0026lt;job-id\u0026gt;/stop -d \u003cspan class=\"s1\"\u003e\u0026#39;{\u0026#34;drain\u0026#34;: false}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;request-id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;trigger-id\u0026gt;\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# check status of stop action and retrieve savepoint path\u003c/span\u003e\ncurl localhost:8081/jobs/\u0026lt;job-id\u0026gt;/savepoints/\u0026lt;trigger-id\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;COMPLETED\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;operation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;location\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;savepoint-path\u0026gt;\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e步骤2a: 重启 Job，不做任何改变\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e现在您可以从该保存点重新启动升级后的作业(Job)。为了简单起见，您可以在不做任何更改的情况下重新启动它。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCLI\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e命令\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose run --no-deps client flink run -s \u0026lt;savepoint-path\u0026gt; \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -d /opt/ClickCountJob.jar \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --bootstrap.servers kafka:9092 --checkpointing --event-time\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的输出\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStarting execution of program\nJob has been submitted with JobID \u0026lt;job-id\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eREST API\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# Uploading the JAR from the Client container\u003c/span\u003e\ndocker-compose run --no-deps client curl -X POST -H \u003cspan class=\"s2\"\u003e\u0026#34;Expect:\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -F \u003cspan class=\"s2\"\u003e\u0026#34;jarfile=@/opt/ClickCountJob.jar\u0026#34;\u003c/span\u003e http://jobmanager:8081/jars/upload\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;filename\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;/tmp/flink-web-\u0026lt;uuid\u0026gt;/flink-web-upload/\u0026lt;jar-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# Submitting the Job\u003c/span\u003e\ncurl -X POST http://localhost:8081/jars/\u0026lt;jar-id\u0026gt;/run \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -d \u003cspan class=\"s1\"\u003e\u0026#39;{\u0026#34;programArgs\u0026#34;: \u0026#34;--bootstrap.servers kafka:9092 --checkpointing --event-time\u0026#34;, \u0026#34;savepointPath\u0026#34;: \u0026#34;\u0026lt;savepoint-path\u0026gt;\u0026#34;}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的输出\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;jobid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e一旦 Job 再次 RUNNING，你会在 \u003cem\u003eoutput\u003c/em\u003e 主题中看到，当 Job 在处理中断期间积累的积压时，记录以较高的速度产生。此外，你会看到在升级过程中没有丢失任何数据：所有窗口都存在，数量正好是 1000。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e步骤2b: 用不同的并行度重新启动作业（重新缩放）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e另外，您也可以在重新提交时通过传递不同的并行性，从这个保存点重新缩放作业。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCLI\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose run --no-deps client flink run -p \u003cspan class=\"m\"\u003e3\u003c/span\u003e -s \u0026lt;savepoint-path\u0026gt; \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -d /opt/ClickCountJob.jar \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --bootstrap.servers kafka:9092 --checkpointing --event-time\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的输出\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStarting execution of program\nJob has been submitted with JobID \u0026lt;job-id\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eREST API\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# Uploading the JAR from the Client container\u003c/span\u003e\ndocker-compose run --no-deps client curl -X POST -H \u003cspan class=\"s2\"\u003e\u0026#34;Expect:\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -F \u003cspan class=\"s2\"\u003e\u0026#34;jarfile=@/opt/ClickCountJob.jar\u0026#34;\u003c/span\u003e http://jobmanager:8081/jars/upload\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;filename\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;/tmp/flink-web-\u0026lt;uuid\u0026gt;/flink-web-upload/\u0026lt;jar-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# Submitting the Job\u003c/span\u003e\ncurl -X POST http://localhost:8081/jars/\u0026lt;jar-id\u0026gt;/run \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -d \u003cspan class=\"s1\"\u003e\u0026#39;{\u0026#34;parallelism\u0026#34;: 3, \u0026#34;programArgs\u0026#34;: \u0026#34;--bootstrap.servers kafka:9092 --checkpointing --event-time\u0026#34;, \u0026#34;savepointPath\u0026#34;: \u0026#34;\u0026lt;savepoint-path\u0026gt;\u0026#34;}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;jobid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在，作业(Job)已经被重新提交，但它不会启动，因为没有足够的 TaskSlots 在增加的并行度下执行它（2个可用，需要3个）。使用:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edocker-compose scale \u003cspan class=\"nv\"\u003etaskmanager\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以在 Flink 集群中添加一个带有两个 TaskSlots 的第二个 TaskManager，它将自动注册到 JobManager 中。添加 TaskManager 后不久，该任务(Job)应该再次开始运行。\u003c/p\u003e\n\u003cp\u003e一旦 Job 再次 \u0026ldquo;RUNNING\u0026rdquo;，你会在 \u003cem\u003eoutput\u003c/em\u003e Topic 中看到在重新缩放过程中没有丢失数据：所有的窗口都存在，计数正好是 1000。\u003c/p\u003e\n\u003ch5 id=\"查询作业job的指标\"\u003e查询作业(Job)的指标\u003c/h5\u003e\n\u003cp\u003eJobManager 通过其 REST API 公开系统和用户\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/metrics.html\"\u003e指标\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e端点取决于这些指标的范围。可以通过 \u003ccode\u003ejobs/\u0026lt;job-id\u0026gt;/metrics\u003c/code\u003e 来列出一个作业的范围内的度量。指标的实际值可以通过 get query 参数进行查询。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-shells\" data-lang=\"shells\"\u003ecurl \u0026quot;localhost:8081/jobs/\u0026lt;jod-id\u0026gt;/metrics?get=lastCheckpointSize\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印; 没有占位符)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;lastCheckpointSize\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;9378\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eREST API 不仅可以用来查询指标，还可以检索运行中的作业状态的详细信息。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# find the vertex-id of the vertex of interest\u003c/span\u003e\ncurl localhost:8081/jobs/\u0026lt;jod-id\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e预期的响应(美化了打印)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;jid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Click Event Count\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;isStoppable\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;state\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;start-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066026\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;end-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e-1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;duration\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e374793\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;now\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467440819\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;timestamps\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;CREATED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066026\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;FINISHED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;SUSPENDED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;FAILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;CANCELLING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;CANCELED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;RECONCILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066126\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;FAILED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;RESTARTING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;vertices\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ClickEvent Source\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;start-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066423\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;end-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e-1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;duration\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e374396\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;tasks\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CREATED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FINISHED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;DEPLOYING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FAILED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RECONCILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;SCHEDULED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;metrics\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5033461\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e166351\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Timestamps/Watermarks\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;start-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066441\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;end-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e-1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;duration\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e374378\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;tasks\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CREATED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FINISHED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;DEPLOYING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FAILED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RECONCILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;SCHEDULED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;metrics\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5066280\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5033496\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e166349\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e166349\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ClickEvent Counter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;start-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066469\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;end-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e-1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;duration\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e374350\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;tasks\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CREATED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FINISHED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;DEPLOYING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FAILED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RECONCILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;SCHEDULED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;metrics\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5085332\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e316\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e166305\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ClickEventStatistics Sink\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;start-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1564467066476\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;end-time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e-1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;duration\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e374343\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;tasks\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CREATED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FINISHED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;DEPLOYING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;FAILED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;CANCELED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;RECONCILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;SCHEDULED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;metrics\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e20668\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-bytes-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;read-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;write-records-complete\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;status-counts\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;CREATED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;FINISHED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;DEPLOYING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;RUNNING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;CANCELING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;FAILED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;CANCELED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;RECONCILING\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;SCHEDULED\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;plan\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;jid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Click Event Count\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;nodes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ClickEventStatistics Sink\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;inputs\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;num\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;ship_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;FORWARD\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;exchange\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;pipelined_bounded\u0026#34;\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;optimizer_properties\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ClickEvent Counter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;inputs\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;num\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;ship_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;HASH\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;exchange\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;pipelined_bounded\u0026#34;\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;optimizer_properties\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Timestamps/Watermarks\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;inputs\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;num\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;ship_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;FORWARD\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;exchange\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;pipelined_bounded\u0026#34;\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;optimizer_properties\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;parallelism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;operator_strategy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ClickEvent Source\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;optimizer_properties\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请查阅 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/rest_api.html#api\"\u003eREST API 参考资料\u003c/a\u003e，了解可能查询的完整列表，包括如何查询不同作用域的指标（如 TaskManager 指标）。\u003c/p\u003e\n\u003ch4 id=\"变体\"\u003e变体\u003c/h4\u003e\n\u003cp\u003e你可能已经注意到，Click Event Count 应用程序总是以 \u003ccode\u003e--checkpointing\u003c/code\u003e 和 \u003ccode\u003e--event-time\u003c/code\u003e 程序参数启动。通过在 docker-compose.yaml 的客户端容器的命令中省略这些，你可以改变 Job 的行为。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e--checkpointing\u003c/code\u003e 启用了 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/fault_tolerance.html\"\u003echeckpoint\u003c/a\u003e，这是 Flink 的容错机制。如果你在没有它的情况下运行，并通过\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#observing-failure--recovery\"\u003e故障和恢复\u003c/a\u003e，你应该会看到数据实际上已经丢失了。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e--event-time\u003c/code\u003e 启用了你的 Job 的\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/event_time.html\"\u003e事件时间语义\u003c/a\u003e。当禁用时，作业将根据挂钟时间而不是 ClickEvent 的时间戳将事件分配给窗口。因此，每个窗口的事件数量将不再是精确的 1000。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eClick Event Count 应用程序还有另一个选项，默认情况下是关闭的，你可以启用这个选项来探索这个作业在背压下的行为。你可以在 \u003ccode\u003edocker-compose.yaml\u003c/code\u003e 的客户端容器的命令中添加这个选项。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--backpressure\u003c/code\u003e 在作业中间增加了一个额外的 operator，在偶数分钟内会造成严重的背压（例如，在10:12期间，但在10:13期间不会）。这可以通过检查各种\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/metrics.html#default-shuffle-service\"\u003e网络指标\u003c/a\u003e（如 outputQueueLength 和 outPoolUsage）和/或使用 WebUI 中的\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/back_pressure.html#monitoring-back-pressure\"\u003e背压监控\u003c/a\u003e来观察。\u003c/li\u003e\n\u003c/ul\u003e\n","text":"Flink 操作游乐场 在各种环境中部署和操作 Apache Flink 的方法有很多。无论这种多样性如何，Flink 集群的基本构件保持不变，类似的操作原则也适用。\n在这个操场上，你将学习如何管理和运行 Flink Jobs。您将看到如何部署和监控应用程序，体验 Flink 如何从 Job 故障中恢复，并执行日常操作任务，如升级和重新缩放。\n这个游乐场的解剖 这个游乐场由一个持久的 Flink Session Cluster和一个 Kafka Cluster 组成。\n一个 Flink Cluster 总是由一个 JobManager 和一个或多个 Flink TaskManager 组成。JobManager 负责处理 Job 提交，监督 Job 以及资源管理。Flink TaskManager 是 worker 进程，负责执行构成 Flink Job 的实际任务。在这个游戏场中，你将从一个单一的 TaskManager 开始，但以后会扩展到更多的 TaskManager。此外，这个游乐场还带有一个专门的客户端容器，我们使用它来提交 Flink Job，并在以后执行各种操作任务。客户端容器不是 Flink Cluster 本身需要的，只是为了方便使用才包含在里面。\nKafka 集群由一个 Zookeeper 服务器和一个 Kafka Broker 组成。\n当游乐场启动时，一个名为 Flink Event Count 的 Flink Job 将被提交给 JobManager。此外，还会创建两个 Kafka 主题 input 和 output。\n该作业从 input 主题中消耗点击事件(ClickEvent)，每个点击事件(ClickEvent)都有一个时间戳(timestamp)和一个页面(page)。然后按页面对事件进行分组(keyed by)，并在 15 秒的窗口中进行计数。结果被写入 output 主题。\n有6个不同的页面，我们在每个页面和15秒内产生1000个点击事件。因此，Flink 作业的输出应该显示每个页面和窗口有1000个浏览量。\n启动游乐场 游戏场环境的设置只需几步。我们将引导你完成必要的命令，并展示如何验证一切都在正确运行。\n我们假设你的机器上安装了 Docker（1.12+）和 docker-compose（2.1+）。\n所需的配置文件可以在 flink-playgrounds 仓库中找到。检查一下，然后对齐环境。\ngit clone --branch release-1.11 https://github.com/apache/flink-playgrounds.git cd flink-playgrounds/operations-playground docker-compose build docker-compose up -d 之后，你可以用以下命令检查正在运行的 Docker 容器。\ndocker-compose ps Name Command State Ports ----------------------------------------------------------------------------------------------------------------------------- operations-playground_clickevent-generator_1 /docker-entrypoint.sh java ... Up 6123/tcp, 8081/tcp operations-playground_client_1 /docker-entrypoint.sh flin ... Exit 0 operations-playground_jobmanager_1 /docker-entrypoint.sh jobm ... Up 6123/tcp, 0.0.0.0:8081-\u0026gt;8081/tcp operations-playground_kafka_1 start-kafka.sh Up 0.0.0.0:9094-\u0026gt;9094/tcp operations-playground_taskmanager_1 /docker-entrypoint.sh task ... Up 6123/tcp, 8081/tcp operations-playground_zookeeper_1 /bin/sh -c /usr/sbin/sshd ... Up 2181/tcp, 22/tcp, 2888/tcp, 3888/tcp 这表明客户端容器已经成功提交了 Flink Job（Exit 0），所有集群组件以及数据生成器都在运行（Up）。\n您可以通过调用来停止游乐场环境。\ndocker-compose down -v 进入游乐场 在这个游乐场中，有很多东西你可以尝试和检查。在下面的两节中，我们将向您展示如何与 Flink 集群进行交互，并展示 Flink 的一些关键功能。\nFlink WebUI 观察你的 Flink 集群最自然的出发点是在 http://localhost:8081 下暴露的 WebUI。如果一切顺利，你会看到集群最初由一个任务管理器组成，并执行一个名为 Click Event Count 的 Job。\nFlink WebUI 包含了很多关于 Flink 集群和它的工作的有用和有趣的信息（JobGraph, Metrics, Checkpointing Statistics, TaskManager Status, \u0026hellip;）。\n日志 JobManager 可以通过 docker-compose 对 JobManager 日志进行跟踪。\ndocker-compose logs -f jobmanager 在初始启动后，你应该主要看到每一个检查点完成的日志信息。\nTaskManager TaskManager 的日志也可以用同样的方式进行 tail。\ndocker-compose logs -f taskmanager 在初始启动后，你应该主要看到每个检查点完成的日志信息。\nFlink CLI Flink CLI 可以在客户端容器中使用。例如，要打印 Flink CLI 的帮助信息，你可以运行以下命令\ndocker-compose run --no-deps client flink --help Flink REST API Flink REST API 通过主机上的 localhost:8081 或客户端容器中的 jobmanager:8081 暴露出来，例如，要列出所有当前正在运行的作业，你可以运行:\ncurl localhost:8081/jobs Kafka Topics 你可以通过运行以下命令来查看写入 Kafka 主题的记录\n//input topic (1000 records/s) docker-compose exec kafka kafka-console-consumer.sh \\  --bootstrap-server localhost:9092 --topic input //output topic (24 records/min) docker-compose exec kafka kafka-console-consumer.sh \\  --bootstrap-server localhost:9092 --topic output Time to Play! 现在你已经学会了如何与 Flink 和 Docker 容器进行交互，让我们来看看一些常见的操作任务，你可以在我们的游乐场上尝试一下。所有这些任务都是相互独立的，即你可以以任何顺序执行它们。大多数任务可以通过 CLI 和 REST API 来执行。\n列出正在运行的 Job  CLI  命令\ndocker-compose run --no-deps client flink list 期望的输出\nWaiting for response... ------------------ Running/Restarting Jobs ------------------- 16.07.2019 16:37:55 : \u0026lt;job-id\u0026gt; : Click Event Count (RUNNING) -------------------------------------------------------------- No scheduled jobs.  REST API  请求\ncurl localhost:8081/jobs 期待的响应(美化了打印)\n{ \u0026#34;jobs\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;RUNNING\u0026#34; } ] } JobID 在提交时被分配给作业(Job)，并且需要通过 CLI 或 REST API 对作业(Job)执行操作。\n观察故障和恢复 Flink 在(部分)失败下提供了精确的一次处理保证。在这个游乐场中，你可以观察并在一定程度上验证这种行为。\n步骤1：观察输出\n如上所述，在这个游乐场中的事件是这样生成的，每个窗口正好包含一千条记录。因此，为了验证 Flink 是否成功地从 TaskManager 故障中恢复，而没有数据丢失或重复，你可以跟踪 output 主题，并检查恢复后所有的窗口都存在，而且计数是正确的。\n为此，从 output 主题开始读取，并让这个命令运行到恢复后（步骤3）。\ndocker-compose exec kafka kafka-console-consumer.sh \\  --bootstrap-server localhost:9092 --topic output 第二步：引入故障\n为了模拟部分故障，你可以杀死一个 TaskManager，在生产设置中，这可能对应于 TaskManager 进程、TaskManager 机器的丢失，或者仅仅是框架或用户代码抛出的瞬时异常（例如由于暂时不可用）。\ndocker-compose kill taskmanager 几秒钟后，JobManager 会注意到 TaskManager 的丢失，取消受影响的 Job，并立即重新提交它进行恢复。当 Job 被重新启动后，其任务仍处于 SCHEDULED 状态，由紫色的方块表示（见下面的截图）。\n注意：即使作业(Job)的任务(Task)处于 SCHEDULED 状态而不是 RUNNING 状态，作业(Job)的整体状态也会显示为 RUNNING。\n此时，Job 的任务(Task)不能从 SCHEDULED 状态转为 RUNNING 状态，因为没有资源(TaskManager 提供的 TaskSlots）来运行这些任务。在新的 TaskManager 可用之前，Job 将经历一个取消和重新提交的循环。\n同时，数据生成器会不断地将 ClickEvents 推送到 input 主题中。这类似于真正的生产设置，在生产数据的同时，要处理数据的 Job 却宕机了。\n步骤3：恢复\n一旦你重新启动 TaskManager，它就会重新连接到 JobManager。\ndocker-compose up -d taskmanager 当 JobManager 被通知到新的 TaskManager 时，它将恢复中的 Job 的任务(tasks)调度到新的可用 TaskSlots。重新启动后，任务会从故障前最后一次成功的检查点恢复其状态，并切换到 RUNNING 状态。\nJob 将快速处理来自 Kafka 的全部积压输入事件(在故障期间积累的)，并以更高的速度(\u0026gt;24条记录/分钟)产生输出，直到到达流的头部。在输出中，你会看到所有的键(页面)都存在于所有的时间窗口中，而且每个计数都是精确的 1000。由于我们是在\u0026quot;至少一次\u0026quot;模式下使用 FlinkKafkaProducer，所以你有可能会看到一些重复的输出记录。\n注意：大多数生产设置依赖于资源管理器(Kubernetes、Yarn、Mesos)来自动重启失败的进程。\n升级和重新缩放作业 升级 Flink 作业总是涉及两个步骤。首先，用一个保存点优雅地停止 Flink Job。保存点是在一个明确定义的、全局一致的时间点(类似于检查点)上的完整应用状态的一致快照。其次，升级后的 Flink Job 从 Savepoint 开始。在这种情况下，\u0026ldquo;升级\u0026quot;可以意味着不同的事情，包括以下内容:\n 配置的升级（包括作业的并行性）。 对 Job 的拓扑结构进行升级（增加/删除 Operator）。 对 Job 的用户定义的函数进行升级。  在开始升级之前，你可能要开始 tailing output 主题，以观察在升级过程中没有数据丢失或损坏。\ndocker-compose exec kafka kafka-console-consumer.sh \\  --bootstrap-server localhost:9092 --topic output 第一步：停止工作\n要优雅地停止作业，您需要使用 CLI 或 REST API 的 \u0026ldquo;stop\u0026rdquo; 命令。为此，您需要该作业的 JobID，您可以通过列出所有正在运行的 Job 或从 WebUI 中获得。有了 JobID，您就可以继续停止该作业:\n CLI  命令\ndocker-compose run --no-deps client flink stop \u0026lt;job-id\u0026gt; 预期的输出\nSuspending job \u0026quot;\u0026lt;job-id\u0026gt;\u0026quot; with a savepoint. Suspended job \u0026quot;\u0026lt;job-id\u0026gt;\u0026quot; with a savepoint. Savepoint 已经被存储到 flink-conf.yaml 中配置的 state.savepoint.dir 中，它被安装在本地机器的 /tmp/flink-savepoints-directory/ 下。在下一步中，你将需要这个 Savepoint 的路径。在 REST API 的情况下，这个路径已经是响应的一部分，你将需要直接查看文件系统。\n命令\nls -lia /tmp/flink-savepoints-directory 预期的输出\ntotal 0 17 drwxr-xr-x 3 root root 60 17 jul 17:05 . 2 drwxrwxrwt 135 root root 3420 17 jul 17:09 .. 1002 drwxr-xr-x 2 root root 140 17 jul 17:05 savepoint-\u0026lt;short-job-id\u0026gt;-\u0026lt;uuid\u0026gt;  REST API  请求\n# triggering stop curl -X POST localhost:8081/jobs/\u0026lt;job-id\u0026gt;/stop -d \u0026#39;{\u0026#34;drain\u0026#34;: false}\u0026#39; 预期的响应(美化了打印)\n{ \u0026#34;request-id\u0026#34;: \u0026#34;\u0026lt;trigger-id\u0026gt;\u0026#34; } 请求\n# check status of stop action and retrieve savepoint path curl localhost:8081/jobs/\u0026lt;job-id\u0026gt;/savepoints/\u0026lt;trigger-id\u0026gt; 预期的响应(美化了打印)\n{ \u0026#34;status\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;COMPLETED\u0026#34; }, \u0026#34;operation\u0026#34;: { \u0026#34;location\u0026#34;: \u0026#34;\u0026lt;savepoint-path\u0026gt;\u0026#34; } } 步骤2a: 重启 Job，不做任何改变\n现在您可以从该保存点重新启动升级后的作业(Job)。为了简单起见，您可以在不做任何更改的情况下重新启动它。\n CLI  命令\ndocker-compose run --no-deps client flink run -s \u0026lt;savepoint-path\u0026gt; \\  -d /opt/ClickCountJob.jar \\  --bootstrap.servers kafka:9092 --checkpointing --event-time 预期的输出\nStarting execution of program Job has been submitted with JobID \u0026lt;job-id\u0026gt;  REST API  请求\n# Uploading the JAR from the Client container docker-compose run --no-deps client curl -X POST -H \u0026#34;Expect:\u0026#34; \\  -F \u0026#34;jarfile=@/opt/ClickCountJob.jar\u0026#34; http://jobmanager:8081/jars/upload 预期的响应(美化了打印)\n{ \u0026#34;filename\u0026#34;: \u0026#34;/tmp/flink-web-\u0026lt;uuid\u0026gt;/flink-web-upload/\u0026lt;jar-id\u0026gt;\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;success\u0026#34; } 请求\n# Submitting the Job curl -X POST http://localhost:8081/jars/\u0026lt;jar-id\u0026gt;/run \\  -d \u0026#39;{\u0026#34;programArgs\u0026#34;: \u0026#34;--bootstrap.servers kafka:9092 --checkpointing --event-time\u0026#34;, \u0026#34;savepointPath\u0026#34;: \u0026#34;\u0026lt;savepoint-path\u0026gt;\u0026#34;}\u0026#39; 预期的输出\n{ \u0026#34;jobid\u0026#34;: \u0026#34;\u0026lt;job-id\u0026gt;\u0026#34; } 一旦 Job 再次 RUNNING，你会在 output 主题中看到，当 Job 在处理中断期间积累的积压时，记录以较高的速度产生。此外，你会看到在升级过程中没有丢失任何数据：所有窗口都存在，数量正好是 1000。\n步骤2b: 用不同的并行度重新启动作业（重新缩放）\n另外，您也可以在重新提交时通过传递不同的并行性，从这个保存点重新缩放作业。\n CLI  docker-compose run --no-deps client flink run -p 3 -s \u0026lt;savepoint-path\u0026gt; \\  -d /opt/ClickCountJob.jar \\  --bootstrap.servers kafka:9092 --checkpointing --event-time 预期的输出\nStarting execution of program Job has been submitted with JobID \u0026lt;job-id\u0026gt;  REST API  请求\n# Uploading the JAR from the Client container docker-compose run --no-deps client curl -X POST -H \u0026#34;Expect:\u0026#34; \\  -F \u0026#34;jarfile=@/opt/ClickCountJob.jar\u0026#34; http://jobmanager:8081/jars/upload 预期的响应(美化了打印)\n{ \u0026#34;filename\u0026#34;: \u0026#34;/tmp/flink-web-\u0026lt;uuid\u0026gt;/flink-web-upload/\u0026lt;jar-id\u0026gt;\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;success\u0026#34; } 请求\n# Submitting the Job curl -X POST http://localhost:8081/jars/\u0026lt;jar-id\u0026gt;/run \\  -d \u0026#39;{\u0026#34;parallelism\u0026#34;: 3, \u0026#34;programArgs\u0026#34;: \u0026#34;--bootstrap.servers kafka:9092 --checkpointing --event-time\u0026#34;, \u0026#34;savepointPath\u0026#34;: \u0026#34;\u0026lt;savepoint-path\u0026gt;\u0026#34;}\u0026#39; 预期的响应(美化了打印)\n{ \u0026#34;jobid\u0026#34;: \u0026#34;\u0026lt;job-id\u0026gt;\u0026#34; } 现在，作业(Job)已经被重新提交，但它不会启动，因为没有足够的 TaskSlots 在增加的并行度下执行它（2个可用，需要3个）。使用:\ndocker-compose scale taskmanager=2 你可以在 Flink 集群中添加一个带有两个 TaskSlots 的第二个 TaskManager，它将自动注册到 JobManager 中。添加 TaskManager 后不久，该任务(Job)应该再次开始运行。\n一旦 Job 再次 \u0026ldquo;RUNNING\u0026rdquo;，你会在 output Topic 中看到在重新缩放过程中没有丢失数据：所有的窗口都存在，计数正好是 1000。\n查询作业(Job)的指标 JobManager 通过其 REST API 公开系统和用户指标。\n端点取决于这些指标的范围。可以通过 jobs/\u0026lt;job-id\u0026gt;/metrics 来列出一个作业的范围内的度量。指标的实际值可以通过 get query 参数进行查询。\n请求\ncurl \u0026quot;localhost:8081/jobs/\u0026lt;jod-id\u0026gt;/metrics?get=lastCheckpointSize\u0026quot; 预期的响应(美化了打印; 没有占位符)\n[ { \u0026#34;id\u0026#34;: \u0026#34;lastCheckpointSize\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;9378\u0026#34; } ] REST API 不仅可以用来查询指标，还可以检索运行中的作业状态的详细信息。\n请求\n# find the vertex-id of the vertex of interest curl localhost:8081/jobs/\u0026lt;jod-id\u0026gt; 预期的响应(美化了打印)\n{ \u0026#34;jid\u0026#34;: \u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Click Event Count\u0026#34;, \u0026#34;isStoppable\u0026#34;: false, \u0026#34;state\u0026#34;: \u0026#34;RUNNING\u0026#34;, \u0026#34;start-time\u0026#34;: 1564467066026, \u0026#34;end-time\u0026#34;: -1, \u0026#34;duration\u0026#34;: 374793, \u0026#34;now\u0026#34;: 1564467440819, \u0026#34;timestamps\u0026#34;: { \u0026#34;CREATED\u0026#34;: 1564467066026, \u0026#34;FINISHED\u0026#34;: 0, \u0026#34;SUSPENDED\u0026#34;: 0, \u0026#34;FAILING\u0026#34;: 0, \u0026#34;CANCELLING\u0026#34;: 0, \u0026#34;CANCELED\u0026#34;: 0, \u0026#34;RECONCILING\u0026#34;: 0, \u0026#34;RUNNING\u0026#34;: 1564467066126, \u0026#34;FAILED\u0026#34;: 0, \u0026#34;RESTARTING\u0026#34;: 0 }, \u0026#34;vertices\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;ClickEvent Source\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;status\u0026#34;: \u0026#34;RUNNING\u0026#34;, \u0026#34;start-time\u0026#34;: 1564467066423, \u0026#34;end-time\u0026#34;: -1, \u0026#34;duration\u0026#34;: 374396, \u0026#34;tasks\u0026#34;: { \u0026#34;CREATED\u0026#34;: 0, \u0026#34;FINISHED\u0026#34;: 0, \u0026#34;DEPLOYING\u0026#34;: 0, \u0026#34;RUNNING\u0026#34;: 2, \u0026#34;CANCELING\u0026#34;: 0, \u0026#34;FAILED\u0026#34;: 0, \u0026#34;CANCELED\u0026#34;: 0, \u0026#34;RECONCILING\u0026#34;: 0, \u0026#34;SCHEDULED\u0026#34;: 0 }, \u0026#34;metrics\u0026#34;: { \u0026#34;read-bytes\u0026#34;: 0, \u0026#34;read-bytes-complete\u0026#34;: true, \u0026#34;write-bytes\u0026#34;: 5033461, \u0026#34;write-bytes-complete\u0026#34;: true, \u0026#34;read-records\u0026#34;: 0, \u0026#34;read-records-complete\u0026#34;: true, \u0026#34;write-records\u0026#34;: 166351, \u0026#34;write-records-complete\u0026#34;: true } }, { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Timestamps/Watermarks\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;status\u0026#34;: \u0026#34;RUNNING\u0026#34;, \u0026#34;start-time\u0026#34;: 1564467066441, \u0026#34;end-time\u0026#34;: -1, \u0026#34;duration\u0026#34;: 374378, \u0026#34;tasks\u0026#34;: { \u0026#34;CREATED\u0026#34;: 0, \u0026#34;FINISHED\u0026#34;: 0, \u0026#34;DEPLOYING\u0026#34;: 0, \u0026#34;RUNNING\u0026#34;: 2, \u0026#34;CANCELING\u0026#34;: 0, \u0026#34;FAILED\u0026#34;: 0, \u0026#34;CANCELED\u0026#34;: 0, \u0026#34;RECONCILING\u0026#34;: 0, \u0026#34;SCHEDULED\u0026#34;: 0 }, \u0026#34;metrics\u0026#34;: { \u0026#34;read-bytes\u0026#34;: 5066280, \u0026#34;read-bytes-complete\u0026#34;: true, \u0026#34;write-bytes\u0026#34;: 5033496, \u0026#34;write-bytes-complete\u0026#34;: true, \u0026#34;read-records\u0026#34;: 166349, \u0026#34;read-records-complete\u0026#34;: true, \u0026#34;write-records\u0026#34;: 166349, \u0026#34;write-records-complete\u0026#34;: true } }, { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;ClickEvent Counter\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;status\u0026#34;: \u0026#34;RUNNING\u0026#34;, \u0026#34;start-time\u0026#34;: 1564467066469, \u0026#34;end-time\u0026#34;: -1, \u0026#34;duration\u0026#34;: 374350, \u0026#34;tasks\u0026#34;: { \u0026#34;CREATED\u0026#34;: 0, \u0026#34;FINISHED\u0026#34;: 0, \u0026#34;DEPLOYING\u0026#34;: 0, \u0026#34;RUNNING\u0026#34;: 2, \u0026#34;CANCELING\u0026#34;: 0, \u0026#34;FAILED\u0026#34;: 0, \u0026#34;CANCELED\u0026#34;: 0, \u0026#34;RECONCILING\u0026#34;: 0, \u0026#34;SCHEDULED\u0026#34;: 0 }, \u0026#34;metrics\u0026#34;: { \u0026#34;read-bytes\u0026#34;: 5085332, \u0026#34;read-bytes-complete\u0026#34;: true, \u0026#34;write-bytes\u0026#34;: 316, \u0026#34;write-bytes-complete\u0026#34;: true, \u0026#34;read-records\u0026#34;: 166305, \u0026#34;read-records-complete\u0026#34;: true, \u0026#34;write-records\u0026#34;: 6, \u0026#34;write-records-complete\u0026#34;: true } }, { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;ClickEventStatistics Sink\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;status\u0026#34;: \u0026#34;RUNNING\u0026#34;, \u0026#34;start-time\u0026#34;: 1564467066476, \u0026#34;end-time\u0026#34;: -1, \u0026#34;duration\u0026#34;: 374343, \u0026#34;tasks\u0026#34;: { \u0026#34;CREATED\u0026#34;: 0, \u0026#34;FINISHED\u0026#34;: 0, \u0026#34;DEPLOYING\u0026#34;: 0, \u0026#34;RUNNING\u0026#34;: 2, \u0026#34;CANCELING\u0026#34;: 0, \u0026#34;FAILED\u0026#34;: 0, \u0026#34;CANCELED\u0026#34;: 0, \u0026#34;RECONCILING\u0026#34;: 0, \u0026#34;SCHEDULED\u0026#34;: 0 }, \u0026#34;metrics\u0026#34;: { \u0026#34;read-bytes\u0026#34;: 20668, \u0026#34;read-bytes-complete\u0026#34;: true, \u0026#34;write-bytes\u0026#34;: 0, \u0026#34;write-bytes-complete\u0026#34;: true, \u0026#34;read-records\u0026#34;: 6, \u0026#34;read-records-complete\u0026#34;: true, \u0026#34;write-records\u0026#34;: 0, \u0026#34;write-records-complete\u0026#34;: true } } ], \u0026#34;status-counts\u0026#34;: { \u0026#34;CREATED\u0026#34;: 0, \u0026#34;FINISHED\u0026#34;: 0, \u0026#34;DEPLOYING\u0026#34;: 0, \u0026#34;RUNNING\u0026#34;: 4, \u0026#34;CANCELING\u0026#34;: 0, \u0026#34;FAILED\u0026#34;: 0, \u0026#34;CANCELED\u0026#34;: 0, \u0026#34;RECONCILING\u0026#34;: 0, \u0026#34;SCHEDULED\u0026#34;: 0 }, \u0026#34;plan\u0026#34;: { \u0026#34;jid\u0026#34;: \u0026#34;\u0026lt;job-id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Click Event Count\u0026#34;, \u0026#34;nodes\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;operator\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;operator_strategy\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ClickEventStatistics Sink\u0026#34;, \u0026#34;inputs\u0026#34;: [ { \u0026#34;num\u0026#34;: 0, \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;ship_strategy\u0026#34;: \u0026#34;FORWARD\u0026#34;, \u0026#34;exchange\u0026#34;: \u0026#34;pipelined_bounded\u0026#34; } ], \u0026#34;optimizer_properties\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;operator\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;operator_strategy\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ClickEvent Counter\u0026#34;, \u0026#34;inputs\u0026#34;: [ { \u0026#34;num\u0026#34;: 0, \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;ship_strategy\u0026#34;: \u0026#34;HASH\u0026#34;, \u0026#34;exchange\u0026#34;: \u0026#34;pipelined_bounded\u0026#34; } ], \u0026#34;optimizer_properties\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;operator\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;operator_strategy\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Timestamps/Watermarks\u0026#34;, \u0026#34;inputs\u0026#34;: [ { \u0026#34;num\u0026#34;: 0, \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;ship_strategy\u0026#34;: \u0026#34;FORWARD\u0026#34;, \u0026#34;exchange\u0026#34;: \u0026#34;pipelined_bounded\u0026#34; } ], \u0026#34;optimizer_properties\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;vertex-id\u0026gt;\u0026#34;, \u0026#34;parallelism\u0026#34;: 2, \u0026#34;operator\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;operator_strategy\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ClickEvent Source\u0026#34;, \u0026#34;optimizer_properties\u0026#34;: {} } ] } } 请查阅 REST API 参考资料，了解可能查询的完整列表，包括如何查询不同作用域的指标（如 TaskManager 指标）。\n变体 你可能已经注意到，Click Event Count 应用程序总是以 --checkpointing 和 --event-time 程序参数启动。通过在 docker-compose.yaml 的客户端容器的命令中省略这些，你可以改变 Job 的行为。\n  --checkpointing 启用了 checkpoint，这是 Flink 的容错机制。如果你在没有它的情况下运行，并通过故障和恢复，你应该会看到数据实际上已经丢失了。\n  --event-time 启用了你的 Job 的事件时间语义。当禁用时，作业将根据挂钟时间而不是 ClickEvent 的时间戳将事件分配给窗口。因此，每个窗口的事件数量将不再是精确的 1000。\n  Click Event Count 应用程序还有另一个选项，默认情况下是关闭的，你可以启用这个选项来探索这个作业在背压下的行为。你可以在 docker-compose.yaml 的客户端容器的命令中添加这个选项。\n --backpressure 在作业中间增加了一个额外的 operator，在偶数分钟内会造成严重的背压（例如，在10:12期间，但在10:13期间不会）。这可以通过检查各种网络指标（如 outputQueueLength 和 outPoolUsage）和/或使用 WebUI 中的背压监控来观察。  "},"name":"Flink 操作游乐场","published":"2020-08-17T00:00:00+08:00","summary":"Flink Operations Playground","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-17-flink-operations-playground/"},{"content":{"html":"\u003ch2 id=\"python-api-指南\"\u003ePython API 指南\u003c/h2\u003e\n\u003cp\u003e本演练将快速让你开始构建一个纯 Python Flink 项目。\u003c/p\u003e\n\u003cp\u003e关于如何设置 Python 执行环境，请参考 Python Table API \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/python/installation.html\"\u003e安装指南\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"设置一个-python-项目\"\u003e设置一个 Python 项目\u003c/h3\u003e\n\u003cp\u003e您可以先创建一个 Python 项目，然后按照\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/python/installation.html#installation-of-pyflink\"\u003e安装指南\u003c/a\u003e安装 PyFlink 包。\u003c/p\u003e\n\u003ch3 id=\"编写一个-flink-python-table-api-程序\"\u003e编写一个 Flink Python Table API 程序\u003c/h3\u003e\n\u003cp\u003eTable API 应用程序通过声明一个表环境开始；对于批处理应用程序，可以是 BatchTableEvironment，对于流式应用程序，可以是 StreamTableEnvironment。这作为与 Flink 运行时交互的主要入口点。它可以用来设置执行参数，如重启策略、默认并行度等。表配置允许设置 Table API 的具体配置。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003eexec_env\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget_execution_environment\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexec_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eset_parallelism\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003et_config\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTableConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBatchTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexec_env\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003et_config\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在创建的表环境中，可以声明 source/sink 表。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFileSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e/tmp/input\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_format\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOldCsv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_schema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSchema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate_temporary_table\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySource\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFileSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e/tmp/output\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_format\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOldCsv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield_delimiter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\t\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecount\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_schema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSchema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecount\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate_temporary_table\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySink\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你也可以使用 \u003ccode\u003eTableEnvironment.sql_update()\u003c/code\u003e 方法来注册 DDL 中定义的 source/sink 表。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003emy_source_ddl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e    create table mySource (\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        word VARCHAR\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e    ) with (\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003econnector.type\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e = \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003efilesystem\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003eformat.type\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e = \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003ecsv\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003econnector.path\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e = \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e/tmp/input\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e    )\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emy_sink_ddl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e    create table mySink (\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        word VARCHAR,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        `count` BIGINT\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e    ) with (\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003econnector.type\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e = \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003efilesystem\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003eformat.type\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e = \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003ecsv\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e        \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003econnector.path\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e = \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e/tmp/output\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e    )\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esql_update\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_source_ddl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esql_update\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_sink_ddl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将在执行环境中注册一个名为 \u003cstrong\u003emySource\u003c/strong\u003e 的表和一个名为 \u003cstrong\u003emySink\u003c/strong\u003e 的表。表 \u003cstrong\u003emySource\u003c/strong\u003e 只有一列，即 \u003cstrong\u003eword\u003c/strong\u003e，它消耗从文件 \u003ccode\u003e/tmp/input\u003c/code\u003e 中读取的字符串。表 \u003cstrong\u003emySink\u003c/strong\u003e 有两列，分别是 \u003cstrong\u003eword\u003c/strong\u003e 和 \u003cstrong\u003ecount\u003c/strong\u003e，将数据写入文件 \u003ccode\u003e/tmp/output\u003c/code\u003e，用 \u003ccode\u003e/t\u003c/code\u003e 作为字段分隔符。\u003c/p\u003e\n\u003cp\u003e现在，你可以创建一个作业(job)，它从表 \u003cstrong\u003emySource\u003c/strong\u003e 中读取输入，预先执行一些转换，并将结果写入表 \u003cstrong\u003emySink\u003c/strong\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efrom_path\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySource\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egroup_by\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword, count(1)\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einsert_into\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySink\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后你必须执行实际的 Flink Python Table API 作业。所有的操作，如创建源、转换和 sink 都是懒惰的。只有当 \u003ccode\u003et_env.execute(job_name)\u003c/code\u003e 被调用时，作业才会被运行。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003etutorial_job\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e到目前为止，完整的代码如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003epyflink.dataset\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eExecutionEnvironment\u003c/span\u003e\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003epyflink.table\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eTableConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBatchTableEnvironment\u003c/span\u003e\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003epyflink.table.descriptors\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eSchema\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eOldCsv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFileSystem\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eexec_env\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eExecutionEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget_execution_environment\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexec_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eset_parallelism\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003et_config\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTableConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBatchTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexec_env\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003et_config\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFileSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e/tmp/input\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_format\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOldCsv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_schema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSchema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate_temporary_table\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySource\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFileSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e/tmp/output\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_format\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOldCsv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield_delimiter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\t\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecount\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_schema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSchema\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTRING\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                 \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efield\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecount\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDataTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate_temporary_table\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySink\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efrom_path\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySource\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egroup_by\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eselect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eword, count(1)\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \\\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einsert_into\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emySink\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003et_env\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003etutorial_job\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"执行-flink-python-table-api-程序\"\u003e执行 Flink Python Table API 程序\u003c/h3\u003e\n\u003cp\u003e首先，你需要在 \u0026ldquo;/tmp/input\u0026rdquo; 文件中准备输入数据。你可以选择以下命令行来准备输入数据。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e -e  \u003cspan class=\"s2\"\u003e\u0026#34;flink\\npyflink\\nflink\u0026#34;\u003c/span\u003e \u0026gt; /tmp/input\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来，你可以在命令行上运行这个例子（注意：如果结果文件 \u0026ldquo;/tmp/output\u0026rdquo; 已经存在，你需要在运行这个例子之前删除该文件）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ python WordCount.py\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e该命令在本地小型集群中构建并运行 Python Table API 程序。你也可以将 Python Table API 程序提交到远程集群，详情可以参考 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/cli.html#job-submission-examples\"\u003eJob Submission Examples\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e最后，您可以在命令行中看到执行结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ cat /tmp/output\nflink\t\u003cspan class=\"m\"\u003e2\u003c/span\u003e\npyflink\t\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这应该可以让你开始编写自己的 Flink Python Table API 程序。要了解更多关于 Python Table API 的信息，你可以参考 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/api/python\"\u003eFlink Python Table API Docs\u003c/a\u003e 了解更多细节。\u003c/p\u003e\n","text":"Python API 指南 本演练将快速让你开始构建一个纯 Python Flink 项目。\n关于如何设置 Python 执行环境，请参考 Python Table API 安装指南。\n设置一个 Python 项目 您可以先创建一个 Python 项目，然后按照安装指南安装 PyFlink 包。\n编写一个 Flink Python Table API 程序 Table API 应用程序通过声明一个表环境开始；对于批处理应用程序，可以是 BatchTableEvironment，对于流式应用程序，可以是 StreamTableEnvironment。这作为与 Flink 运行时交互的主要入口点。它可以用来设置执行参数，如重启策略、默认并行度等。表配置允许设置 Table API 的具体配置。\nexec_env = ExecutionEnvironment.get_execution_environment() exec_env.set_parallelism(1) t_config = TableConfig() t_env = BatchTableEnvironment.create(exec_env, t_config) 在创建的表环境中，可以声明 source/sink 表。\nt_env.connect(FileSystem().path(\u0026#39;/tmp/input\u0026#39;)) \\ .with_format(OldCsv() .field(\u0026#39;word\u0026#39;, DataTypes.STRING())) \\ .with_schema(Schema() .field(\u0026#39;word\u0026#39;, DataTypes.STRING())) \\ .create_temporary_table(\u0026#39;mySource\u0026#39;) t_env.connect(FileSystem().path(\u0026#39;/tmp/output\u0026#39;)) \\ .with_format(OldCsv() .field_delimiter(\u0026#39;\\t\u0026#39;) .field(\u0026#39;word\u0026#39;, DataTypes.STRING()) .field(\u0026#39;count\u0026#39;, DataTypes.BIGINT())) \\ .with_schema(Schema() .field(\u0026#39;word\u0026#39;, DataTypes.STRING()) .field(\u0026#39;count\u0026#39;, DataTypes.BIGINT())) \\ .create_temporary_table(\u0026#39;mySink\u0026#39;) 你也可以使用 TableEnvironment.sql_update() 方法来注册 DDL 中定义的 source/sink 表。\nmy_source_ddl = \u0026#34;\u0026#34;\u0026#34;create table mySource (word VARCHAR) with (\u0026#39;connector.type\u0026#39;= \u0026#39;filesystem\u0026#39;,\u0026#39;format.type\u0026#39;= \u0026#39;csv\u0026#39;,\u0026#39;connector.path\u0026#39;= \u0026#39;/tmp/input\u0026#39;)\u0026#34;\u0026#34;\u0026#34; my_sink_ddl = \u0026#34;\u0026#34;\u0026#34;create table mySink (word VARCHAR,`count` BIGINT) with (\u0026#39;connector.type\u0026#39;= \u0026#39;filesystem\u0026#39;,\u0026#39;format.type\u0026#39;= \u0026#39;csv\u0026#39;,\u0026#39;connector.path\u0026#39;= \u0026#39;/tmp/output\u0026#39;)\u0026#34;\u0026#34;\u0026#34; t_env.sql_update(my_source_ddl) t_env.sql_update(my_sink_ddl) 这将在执行环境中注册一个名为 mySource 的表和一个名为 mySink 的表。表 mySource 只有一列，即 word，它消耗从文件 /tmp/input 中读取的字符串。表 mySink 有两列，分别是 word 和 count，将数据写入文件 /tmp/output，用 /t 作为字段分隔符。\n现在，你可以创建一个作业(job)，它从表 mySource 中读取输入，预先执行一些转换，并将结果写入表 mySink。\nt_env.from_path(\u0026#39;mySource\u0026#39;) \\ .group_by(\u0026#39;word\u0026#39;) \\ .select(\u0026#39;word, count(1)\u0026#39;) \\ .insert_into(\u0026#39;mySink\u0026#39;) 最后你必须执行实际的 Flink Python Table API 作业。所有的操作，如创建源、转换和 sink 都是懒惰的。只有当 t_env.execute(job_name) 被调用时，作业才会被运行。\nt_env.execute(\u0026#34;tutorial_job\u0026#34;) 到目前为止，完整的代码如下:\nfrom pyflink.dataset import ExecutionEnvironment from pyflink.table import TableConfig, DataTypes, BatchTableEnvironment from pyflink.table.descriptors import Schema, OldCsv, FileSystem exec_env = ExecutionEnvironment.get_execution_environment() exec_env.set_parallelism(1) t_config = TableConfig() t_env = BatchTableEnvironment.create(exec_env, t_config) t_env.connect(FileSystem().path(\u0026#39;/tmp/input\u0026#39;)) \\ .with_format(OldCsv() .field(\u0026#39;word\u0026#39;, DataTypes.STRING())) \\ .with_schema(Schema() .field(\u0026#39;word\u0026#39;, DataTypes.STRING())) \\ .create_temporary_table(\u0026#39;mySource\u0026#39;) t_env.connect(FileSystem().path(\u0026#39;/tmp/output\u0026#39;)) \\ .with_format(OldCsv() .field_delimiter(\u0026#39;\\t\u0026#39;) .field(\u0026#39;word\u0026#39;, DataTypes.STRING()) .field(\u0026#39;count\u0026#39;, DataTypes.BIGINT())) \\ .with_schema(Schema() .field(\u0026#39;word\u0026#39;, DataTypes.STRING()) .field(\u0026#39;count\u0026#39;, DataTypes.BIGINT())) \\ .create_temporary_table(\u0026#39;mySink\u0026#39;) t_env.from_path(\u0026#39;mySource\u0026#39;) \\ .group_by(\u0026#39;word\u0026#39;) \\ .select(\u0026#39;word, count(1)\u0026#39;) \\ .insert_into(\u0026#39;mySink\u0026#39;) t_env.execute(\u0026#34;tutorial_job\u0026#34;) 执行 Flink Python Table API 程序 首先，你需要在 \u0026ldquo;/tmp/input\u0026rdquo; 文件中准备输入数据。你可以选择以下命令行来准备输入数据。\n$ echo -e \u0026#34;flink\\npyflink\\nflink\u0026#34; \u0026gt; /tmp/input 接下来，你可以在命令行上运行这个例子（注意：如果结果文件 \u0026ldquo;/tmp/output\u0026rdquo; 已经存在，你需要在运行这个例子之前删除该文件）。\n$ python WordCount.py 该命令在本地小型集群中构建并运行 Python Table API 程序。你也可以将 Python Table API 程序提交到远程集群，详情可以参考 Job Submission Examples。\n最后，您可以在命令行中看到执行结果。\n$ cat /tmp/output flink\t2 pyflink\t1 这应该可以让你开始编写自己的 Flink Python Table API 程序。要了解更多关于 Python Table API 的信息，你可以参考 Flink Python Table API Docs 了解更多细节。\n"},"name":"Python API 指南","published":"2020-08-17T00:00:00+08:00","summary":"Python API Tutorial","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-17-python-api-tutorial/"},{"content":{"html":"\u003ch1 id=\"apache-kafka-connector\"\u003eApache Kafka Connector\u003c/h1\u003e\n\u003ch2 id=\"kafka-consumer\"\u003eKafka Consumer\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eproperties\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eProperties\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eproperties\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetProperty\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;bootstrap.servers\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;localhost:9092\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eproperties\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetProperty\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;group.id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003estream\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eenv\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddSource\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eFlinkKafkaConsumer\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;topic\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eSimpleStringSchema\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eproperties\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"Apache Kafka Connector Kafka Consumer val properties = new Properties() properties.setProperty(\u0026#34;bootstrap.servers\u0026#34;, \u0026#34;localhost:9092\u0026#34;) properties.setProperty(\u0026#34;group.id\u0026#34;, \u0026#34;test\u0026#34;) stream = env .addSource(new FlinkKafkaConsumer[String](\u0026#34;topic\u0026#34;, new SimpleStringSchema(), properties)) "},"name":"Flink 中的 Connectors","published":"2020-08-07T00:00:00+08:00","summary":"连接器","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-05-connectors-in-flink/"},{"content":{"html":"\u003ch1 id=\"模块\"\u003e模块\u003c/h1\u003e\n\u003cp\u003eJulia 中的模块是独立的变量工作空间，即它们引入了一个新的全局作用域。它们在语法上是有分界的，在 \u003ccode\u003emodule Name ... end\u003c/code\u003e 里面。模块允许您创建顶层定义（也就是全局变量），而不用担心您的代码与别人的代码一起使用时的名称冲突。在一个模块中，你可以控制哪些来自其他模块的名字是可见的（通过导入），并指定哪些名字是要公开的（通过导出）。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了模块的主要功能。这个例子并不是为了运行，而是为了说明问题。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eMyModule\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eLib\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eBigLib\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ething1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ething2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshow\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"n\"\u003eMyType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eMyType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eMyType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eshow\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eIO\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eMyType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003eM\u003c/span\u003e\u003cspan class=\"s\"\u003ey\u003c/span\u003e\u003cspan class=\"s\"\u003eT\u003c/span\u003e\u003cspan class=\"s\"\u003ey\u003c/span\u003e\u003cspan class=\"s\"\u003ep\u003c/span\u003e\u003cspan class=\"s\"\u003ee\u003c/span\u003e\u003cspan class=\"s\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e需要注意的是，这个样式并不是要在模块的正文中缩进，因为这通常会导致整个文件被缩进。\u003c/p\u003e\n\u003cp\u003e这个模块定义了一个 \u003ccode\u003eMyType\u003c/code\u003e 类型和两个函数。函数 \u003ccode\u003efoo\u003c/code\u003e 和 \u003ccode\u003eMyType\u003c/code\u003e 类型是导出的，因此可以导入到其他模块中。函数 \u003ccode\u003ebar\u003c/code\u003e 是 \u003ccode\u003eMyModule\u003c/code\u003e 的私有函数。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eusing Lib\u003c/code\u003e 语句意味着将有一个名为 \u003ccode\u003eLib\u003c/code\u003e 的模块可以根据需要解析名称。当遇到一个全局变量在当前模块中没有定义时，系统会在 \u003ccode\u003eLib\u003c/code\u003e 导出的变量中搜索它，如果在那里找到了，就会导入它。这意味着在当前模块内对该全局的所有使用都将解析为该变量在 \u003ccode\u003eLib\u003c/code\u003e 中的定义。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eusing BigLib: thing1, thing2\u003c/code\u003e 语句，只将标识符 \u003ccode\u003ething1\u003c/code\u003e 和 \u003ccode\u003ething2\u003c/code\u003e 从模块 \u003ccode\u003eBigLib\u003c/code\u003e 中带入作用域。如果这些名称指的是函数，那么将不允许向它们添加方法（你只能 \u0026ldquo;使用 \u0026ldquo;它们，而不是扩展它们）。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eimport\u003c/code\u003e 关键字支持与 \u003ccode\u003eusing\u003c/code\u003e 相同的语法。\u003ccode\u003eimport\u003c/code\u003e 与 \u003ccode\u003eusing\u003c/code\u003e 的不同之处在于，使用 \u003ccode\u003eimport\u003c/code\u003e 导入的函数可以用新的方法进行扩展。\u003c/p\u003e\n\u003cp\u003e在上面的 \u003ccode\u003eMyModule\u003c/code\u003e 中，我们想给标准的 \u003ccode\u003eshow\u003c/code\u003e 函数添加一个方法，所以我们必须写 \u003ccode\u003eimport Base.show\u003c/code\u003e。只有通过 \u003ccode\u003eusing\u003c/code\u003e 才能看到名字的函数不能被扩展。\u003c/p\u003e\n\u003cp\u003e一旦一个变量通过 \u003ccode\u003eusing\u003c/code\u003e 或 \u003ccode\u003eimport\u003c/code\u003e 变得可见，一个模块就不能创建自己的同名变量。导入的变量是只读的，分配给全局变量总是会影响到当前模块所拥有的变量，否则会引发错误。\u003c/p\u003e\n\u003ch2 id=\"模块使用情况概述\"\u003e模块使用情况概述\u003c/h2\u003e\n\u003cp\u003e要加载一个模块，可以使用两个主要的关键词：\u003ccode\u003eusing\u003c/code\u003e 和 \u003ccode\u003eimport\u003c/code\u003e。要了解它们的区别，请看下面的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eMyModule\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003ex\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003ey\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003ep\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个模块中，我们导出了 \u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ey\u003c/code\u003e 函数(用关键字 \u003ccode\u003eexport\u003c/code\u003e)，也有非导出的函数 \u003ccode\u003ep\u003c/code\u003e，有几种不同的方法可以将 \u003ccode\u003eModule\u003c/code\u003e 及其内部函数加载到当前的工作空间中。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e导入命令\u003c/th\u003e\n\u003cth align=\"left\"\u003e带入带作用域中的东西\u003c/th\u003e\n\u003cth align=\"left\"\u003e可用于方法扩展\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eusing MyModule\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e所有导出的名字(\u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ey\u003c/code\u003e), \u003ccode\u003eMyModule.x\u003c/code\u003e, \u003ccode\u003eMyModule.y\u003c/code\u003e 和 \u003ccode\u003eMyModule.p\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eMyModule.x\u003c/code\u003e, \u003ccode\u003eMyModule.y\u003c/code\u003e 和 \u003ccode\u003eMyModule.p\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eusing MyModule: x, p\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ep\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eimport MyModule\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eMyModule.x\u003c/code\u003e, \u003ccode\u003eMyModule.y\u003c/code\u003e 和 \u003ccode\u003eMyModule.p\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eMyModule.x\u003c/code\u003e, \u003ccode\u003eMyModule.y\u003c/code\u003e 和 \u003ccode\u003eMyModule.p\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eimport MyModule.x, MyModule.p\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ep\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ep\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003eimport MyModule: x, p\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ep\u003c/code\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ep\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"模块和文件\"\u003e模块和文件\u003c/h2\u003e\n\u003cp\u003e文件和文件名大多与模块无关，模块只与模块表达式有关。一个模块可以有多个文件，一个文件可以有多个模块。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eFoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003ef\u003c/span\u003e\u003cspan class=\"s\"\u003ei\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003ee\u003c/span\u003e\u003cspan class=\"s\"\u003e1\u003c/span\u003e\u003cspan class=\"s\"\u003e.\u003c/span\u003e\u003cspan class=\"s\"\u003ej\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003ef\u003c/span\u003e\u003cspan class=\"s\"\u003ei\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003ee\u003c/span\u003e\u003cspan class=\"s\"\u003e2\u003c/span\u003e\u003cspan class=\"s\"\u003e.\u003c/span\u003e\u003cspan class=\"s\"\u003ej\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在不同的模块中包含相同的代码，提供了类似 mixin 的行为。人们可以使用这一点来用不同的基础定义来运行相同的代码，例如，通过使用某些操作符的\u0026quot;安全\u0026quot;版本来测试代码。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eNormal\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003em\u003c/span\u003e\u003cspan class=\"s\"\u003ey\u003c/span\u003e\u003cspan class=\"s\"\u003ec\u003c/span\u003e\u003cspan class=\"s\"\u003eo\u003c/span\u003e\u003cspan class=\"s\"\u003ed\u003c/span\u003e\u003cspan class=\"s\"\u003ee\u003c/span\u003e\u003cspan class=\"s\"\u003e.\u003c/span\u003e\u003cspan class=\"s\"\u003ej\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eTesting\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003es\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"s\"\u003ef\u003c/span\u003e\u003cspan class=\"s\"\u003ee\u003c/span\u003e\u003cspan class=\"s\"\u003e_\u003c/span\u003e\u003cspan class=\"s\"\u003eo\u003c/span\u003e\u003cspan class=\"s\"\u003ep\u003c/span\u003e\u003cspan class=\"s\"\u003ee\u003c/span\u003e\u003cspan class=\"s\"\u003er\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"s\"\u003et\u003c/span\u003e\u003cspan class=\"s\"\u003eo\u003c/span\u003e\u003cspan class=\"s\"\u003er\u003c/span\u003e\u003cspan class=\"s\"\u003es\u003c/span\u003e\u003cspan class=\"s\"\u003e.\u003c/span\u003e\u003cspan class=\"s\"\u003ej\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003em\u003c/span\u003e\u003cspan class=\"s\"\u003ey\u003c/span\u003e\u003cspan class=\"s\"\u003ec\u003c/span\u003e\u003cspan class=\"s\"\u003eo\u003c/span\u003e\u003cspan class=\"s\"\u003ed\u003c/span\u003e\u003cspan class=\"s\"\u003ee\u003c/span\u003e\u003cspan class=\"s\"\u003e.\u003c/span\u003e\u003cspan class=\"s\"\u003ej\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"标准模块\"\u003e标准模块\u003c/h2\u003e\n\u003cp\u003eThere are three important standard modules:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Core\"\u003eCore\u003c/a\u003e 包含\u0026quot;内置于\u0026quot;语言中的所有功能。\n\u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base\"\u003eBase\u003c/a\u003e 包含几乎在所有情况下都有用的基本功能。\n\u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Main\"\u003eMain\u003c/a\u003e 是当 Julia 被启动时的顶级模块和当前模块。\u003c/p\u003e\n\u003ch2 id=\"默认的顶层定义和裸模块\"\u003e默认的顶层定义和裸模块\u003c/h2\u003e\n\u003cp\u003e除了 \u003ccode\u003eusing Base\u003c/code\u003e 之外，模块还自动包含 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.eval\"\u003eeval\u003c/a\u003e和 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.include\"\u003einclude\u003c/a\u003e 函数的定义，这些函数在该模块的全局作用域内评估表达式/文件。\u003c/p\u003e\n\u003cp\u003e如果不想要这些默认的定义，可以使用关键字 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#baremodule\"\u003ebaremodule\u003c/a\u003e 来代替定义模块（注意： \u003ccode\u003eCore\u003c/code\u003e 仍然是导入的，如上所述）。以 \u003ccode\u003ebaremodule\u003c/code\u003e 来说，一个标准的模块是这样的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003ebaremodule\u003c/span\u003e \u003cspan class=\"n\"\u003eMod\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCore\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeval\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMod\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einclude\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMod\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"相对和绝对模块路径\"\u003e相对和绝对模块路径\u003c/h2\u003e\n\u003cp\u003e给定 \u003ccode\u003eusing Foo\u003c/code\u003e 语句，系统会查询内部的顶层模块表，寻找一个名为 \u003ccode\u003eFoo\u003c/code\u003e 的模块。如果该模块不存在，系统会尝试 \u003ccode\u003erequire(:Foo)\u003c/code\u003e，这通常会导致从安装的包中加载代码。\u003c/p\u003e\n\u003cp\u003e然而，有些模块包含子模块，这意味着你有时需要访问一个非顶层模块。有两种方法可以做到这一点。第一种是使用绝对路径，例如 \u003ccode\u003eusing Base.Sort\u003c/code\u003e。第二种是使用相对路径，这样可以更容易地导入当前模块的子模块或其任何一个外层模块。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eParent\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"n\"\u003eUtils\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUtils\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里模块 \u003ccode\u003eParent\u003c/code\u003e 包含一个子模块 \u003ccode\u003eUtils\u003c/code\u003e，\u003ccode\u003eParent\u003c/code\u003e 中的代码希望 \u003ccode\u003eUtils\u003c/code\u003e 的内容可见。这可以通过在 \u003ccode\u003eusing\u003c/code\u003e 路径中使用点号来实现。添加更多的前导点号会使模块的层次结构上升。例如，\u003ccode\u003eusing ..Utils\u003c/code\u003e 会在 \u003ccode\u003eParent\u003c/code\u003e 的外层模块中查找\u003ccode\u003eUtils\u003c/code\u003e，而不是在 \u003ccode\u003eParent\u003c/code\u003e 本身中查找。\u003c/p\u003e\n\u003cp\u003e注意相对导入限定符只在使用和导入语句中有效。\u003c/p\u003e\n\u003ch2 id=\"命名空间杂项\"\u003e命名空间杂项\u003c/h2\u003e\n\u003cp\u003e如果一个名字是限定的(例如 \u003ccode\u003eBase.sin\u003c/code\u003e)，那么即使它没有被导出，也可以被访问。这在调试时往往很有用。它也可以通过使用限定名作为函数名来添加方法。但是，由于会产生语法上的歧义，如果你想给不同模块中的一个函数添加方法，而这个函数的名称只包含符号，例如一个运算符，\u003ccode\u003eBase.+\u003c/code\u003e，你必须使用 \u003ccode\u003eBase.:+\u003c/code\u003e 来引用它。如果运算符的长度超过一个字符，你必须用括号把它括起来，比如 \u003ccode\u003eBase.:(==)\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在导入和导出语句中，宏的名称用 \u003ccode\u003e@\u003c/code\u003e 书写，例如 \u003ccode\u003eimport Mod.@mac\u003c/code\u003e。其他模块中的宏可以用 \u003ccode\u003eMod.@mac\u003c/code\u003e 或 \u003ccode\u003e@Mod.mac\u003c/code\u003e 来调用。\u003c/p\u003e\n\u003cp\u003e语法 \u003ccode\u003eM.x = y\u003c/code\u003e 不能用于分配其他模块中的全局，全局分配总是模块-局部的。\u003c/p\u003e\n\u003cp\u003e变量名可以通过声明为 \u003ccode\u003eglobal x\u003c/code\u003e 来 \u0026ldquo;保留\u0026quot;而不分配给它，这样可以防止加载后初始化的 globals 的名称冲突。\u003c/p\u003e\n\u003ch2 id=\"模块初始化和预编译\"\u003e模块初始化和预编译\u003c/h2\u003e\n\u003cp\u003e大型模块可能需要几秒钟的时间来加载，因为执行一个模块中的所有语句往往需要编译大量的代码。Julia 创建了模块的预编译缓存来减少这个时间。\u003c/p\u003e\n\u003cp\u003e当使用 \u003ccode\u003eimport\u003c/code\u003e 或 \u003ccode\u003eusing\u003c/code\u003e 加载模块时，会自动创建并使用增量的预编译模块文件。这将导致它在第一次导入时自动编译。另外，您也可以手动调用 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.compilecache\"\u003eBase.compilecache(modulename)\u003c/a\u003e。由此产生的缓存文件将存储在 \u003ccode\u003eDEPOT_PATH[1]/compiled/\u003c/code\u003e 中。随后，只要模块的任何依赖关系发生变化，模块就会在 \u003ccode\u003eusing\u003c/code\u003e 或 \u003ccode\u003eimport\u003c/code\u003e 时自动重新编译；依赖关系是指导入的模块、Julia 构建的模块、包含的文件，或者模块文件中 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.include_dependency\"\u003einclude_dependency(path)\u003c/a\u003e 声明的显式依赖关系。\u003c/p\u003e\n\u003cp\u003e对于文件依赖，通过检查由 \u003ccode\u003einclude\u003c/code\u003e 加载的文件或由 \u003ccode\u003einclude_dependency\u003c/code\u003e 显式添加的文件的修改时间(mtime)是否保持不变，或者是否等于被截断到最接近秒的修改时间(以适应无法以亚秒级精度复制 mtime 的系统)来确定变化。它还考虑到在 \u003ccode\u003erequire\u003c/code\u003e 中搜索逻辑选择的文件路径是否与创建预编译文件的路径匹配。它还会考虑到已经加载到当前进程中的一组依赖关系，即使这些模块的文件发生变化或消失，也不会重新编译这些模块，以避免在运行系统和预编译缓存之间产生不兼容的情况。\u003c/p\u003e\n\u003cp\u003e如果你知道某个模块预编译你的模块是不安全的（例如，出于下面描述的原因之一），你应该在模块文件中加上 \u003ccode\u003e__precompile__(false)\u003c/code\u003e（通常放在顶部）。这将导致 \u003ccode\u003eBase.compilecache\u003c/code\u003e 抛出一个错误，并将导致 \u003ccode\u003eusing\u003c/code\u003e / \u003ccode\u003eimport\u003c/code\u003e 直接将其加载到当前进程中而跳过预编译和缓存。这也因此阻止了该模块被任何其他预编译模块导入。\u003c/p\u003e\n\u003cp\u003e您可能需要注意创建增量共享库时固有的某些行为，在编写模块时可能需要注意。例如，外部状态不会被保存。为了适应这一点，明确地将任何必须在运行时发生的初始化步骤与可以在编译时发生的步骤分开。为此，Julia 允许您在您的模块中定义一个 \u003ccode\u003e__init__()\u003c/code\u003e 函数来执行任何必须在运行时发生的初始化步骤。这个函数在编译时不会被调用（\u003ccode\u003e--output-*\u003c/code\u003e）。实际上，你可以假设它在代码的生命周期中只运行一次。当然，如果有必要的话，你可以手动调用它，但是默认情况下，你可以假设这个函数处理的是本地机器的计算状态，它不需要\u0026ndash;甚至不应该\u0026ndash;在编译后的镜像中捕获。它将在模块被加载到一个进程后被调用，包括如果它被加载到增量编译中(\u003ccode\u003e--output-incremental=yes\u003c/code\u003e)，但如果它被加载到一个完整的编译进程中，则不会被调用。\u003c/p\u003e\n\u003cp\u003e特别是，如果你在一个模块中定义了一个 \u003ccode\u003efunction __init__()\u003c/code\u003e，那么 Julia 将在模块被加载后（例如通过 \u003ccode\u003eimport\u003c/code\u003e、\u003ccode\u003eusing\u003c/code\u003e 或 \u003ccode\u003erequire\u003c/code\u003e）在运行时第一次立即调用 \u003ccode\u003e__init__()\u003c/code\u003e（也就是说，\u003ccode\u003e__init__\u003c/code\u003e 只被调用一次，而且是在模块中的所有语句被执行后才被调用）。因为它是在模块完全导入之后被调用的，所以任何子模块或其它导入的模块都会在外层模块的 \u003ccode\u003e__init__\u003c/code\u003e 之前调用它们的 \u003ccode\u003e__init__\u003c/code\u003e 函数。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e__init__\u003c/code\u003e 的两个典型用途是调用外部 C 库的运行时初始化函数和初始化涉及外部库返回指针的全局常量。例如，假设我们正在调用一个 C 库 \u003ccode\u003elibfoo\u003c/code\u003e，它要求我们在运行时调用 \u003ccode\u003efoo_init()\u003c/code\u003e 初始化函数。假设我们还想定义一个全局常量 \u003ccode\u003efoo_data_ptr\u003c/code\u003e，用来存放 \u003ccode\u003elibfoo\u003c/code\u003e 定义的 \u003ccode\u003evoid *foo_data()\u003c/code\u003e 函数的返回值\u0026ndash;这个常量必须在运行时（而不是在编译时）初始化，因为指针地址会随着运行而改变。你可以通过在你的模块中定义下面的 \u003ccode\u003e__init__\u003c/code\u003e 函数来实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003efoo_data_ptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eRef\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003ePtr\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eCvoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003e__init__\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eccall\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003efoo_init\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003elibfoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCvoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efoo_data_ptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003eccall\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003efoo_data\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003elibfoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003ePtr\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eCvoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003enothing\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，我们完全可以在函数内部定义一个全局，比如 \u003ccode\u003e__init__\u003c/code\u003e；这是使用动态语言的优势之一。但是通过在全局作用域内定义一个常量，我们可以确保编译器知道这个类型，并允许它生成更好的优化代码。显然，你的模块中任何其他依赖于 \u003ccode\u003efoo_data_ptr\u003c/code\u003e 的 globals 也必须在 \u003ccode\u003e__init__\u003c/code\u003e 中初始化。\u003c/p\u003e\n\u003cp\u003e涉及大多数不是由 \u003ca href=\"https://docs.julialang.org/en/v1/base/c/#ccall\"\u003eccall\u003c/a\u003e 产生的 Julia 对象的常量不需要放在 \u003ccode\u003e__init__\u003c/code\u003e 中：它们的定义可以被预编译并从缓存的模块映像中加载。这包括像数组这样复杂的堆分配对象。然而，任何返回原始指针值的例程都必须在运行时调用，以便预编译工作（\u003ca href=\"https://docs.julialang.org/en/v1/base/c/#Core.Ptr\"\u003ePtr\u003c/a\u003e 对象将变成空指针，除非它们被隐藏在 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.isbits\"\u003eisbits\u003c/a\u003e 对象中）。这包括 Julia 函数 \u003ccode\u003ecfunction\u003c/code\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/base/c/#Base.pointer\"\u003epointer\u003c/a\u003e 的返回值。\u003c/p\u003e\n\u003cp\u003e字典和集合类型，或者一般来说任何依赖于 \u003ccode\u003ehash(key)\u003c/code\u003e 方法输出的东西，都是比较棘手的情况。在常见的情况下，键是数字、字符串、符号、范围、\u003ccode\u003eExpr\u003c/code\u003e 或这些类型的组合（通过数组、元组、集合、对等），它们可以安全地进行预编译。然而，对于其他一些关键类型，如 \u003ccode\u003eFunction\u003c/code\u003e 或 \u003ccode\u003eDataType\u003c/code\u003e 和通用的用户定义类型，在这些类型中，你没有定义 \u003ccode\u003ehash\u003c/code\u003e 方法，回退 \u003ccode\u003ehash\u003c/code\u003e 方法取决于对象的内存地址（通过它的 \u003ccode\u003eobjectid\u003c/code\u003e），因此可能会在运行时改变。如果你有这些键类型之一，或者如果你不确定，为了安全起见，你可以在你的 \u003ccode\u003e__init__\u003c/code\u003e 函数中初始化这个字典。或者，你也可以使用 \u003ca href=\"https://docs.julialang.org/en/v1/base/collections/#Base.IdDict\"\u003eIdDict\u003c/a\u003e 字典类型，它由预编译特别处理，所以在编译时初始化是安全的。\u003c/p\u003e\n\u003cp\u003e在使用预编译时，保持对编译阶段和执行阶段的清晰认识很重要。在这种模式下，往往会更清楚地认识到 Julia 是一个允许执行任意 Julia 代码的编译器，而不是一个同时生成编译代码的独立解释器。\u003c/p\u003e\n\u003cp\u003e其他已知的潜在故障情况包括。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e全局计数器（例如，用于试图唯一识别对象）。考虑以下代码片段。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emutable\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eUniquedById\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n    \u003cspan class=\"n\"\u003emyid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\n    \u003cspan class=\"k\"\u003elet\u003c/span\u003e \u003cspan class=\"n\"\u003ecounter\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eUniquedById\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecounter\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e虽然这段代码的目的是给每个实例一个唯一的 id，但计数器的值是在编译结束时记录的。这个增量编译模块的所有后续使用将从同一个计数器值开始。\u003c/p\u003e\n\u003cp\u003e请注意，\u003ccode\u003eobjectid\u003c/code\u003e（通过哈希内存指针工作）也有类似的问题（参见下面关于 \u003ccode\u003eDict\u003c/code\u003e 用法的说明）。\u003c/p\u003e\n\u003cp\u003e一种替代方法是使用宏来捕获 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.@__MODULE__\"\u003e@\u003cstrong\u003eMODULE\u003c/strong\u003e\u003c/a\u003e，并将其与当前的计数器值一起单独存储，然而，重新设计代码使其不依赖于这个全局状态可能会更好。\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e\n\u003cp\u003e关联集合(比如 \u003ccode\u003eDict\u003c/code\u003e 和 \u003ccode\u003eSet\u003c/code\u003e)需要在 \u003ccode\u003e__init__\u003c/code\u003e 中重新洗牌(将来可能会提供一个机制来注册一个初始化函数)。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e根据编译时的副作用在加载时持续存在。例如：修改其他 Julia 模块中的数组或其他变量；维护打开的文件或设备的句柄；存储其他系统资源（包括内存）的指针。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e通过直接引用而不是通过它的查找路径，从另一个模块创建意外的全局状态\u0026quot;副本\u0026rdquo;。例如，（在全局作用域内）。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"c\"\u003e#mystdout = Base.stdout #= will not work correctly, since this will copy Base.stdout into this module =#\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# instead use accessor functions:\u003c/span\u003e\n\u003cspan class=\"n\"\u003egetstdout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"cm\"\u003e#=\u003c/span\u003e\u003cspan class=\"cm\"\u003e \u003c/span\u003e\u003cspan class=\"cm\"\u003eb\u003c/span\u003e\u003cspan class=\"cm\"\u003ee\u003c/span\u003e\u003cspan class=\"cm\"\u003es\u003c/span\u003e\u003cspan class=\"cm\"\u003et\u003c/span\u003e\u003cspan class=\"cm\"\u003e \u003c/span\u003e\u003cspan class=\"cm\"\u003eo\u003c/span\u003e\u003cspan class=\"cm\"\u003ep\u003c/span\u003e\u003cspan class=\"cm\"\u003et\u003c/span\u003e\u003cspan class=\"cm\"\u003ei\u003c/span\u003e\u003cspan class=\"cm\"\u003eo\u003c/span\u003e\u003cspan class=\"cm\"\u003en\u003c/span\u003e\u003cspan class=\"cm\"\u003e \u003c/span\u003e\u003cspan class=\"cm\"\u003e=#\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# or move the assignment into the runtime:\u003c/span\u003e\n\u003cspan class=\"n\"\u003e__init__\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eglobal\u003c/span\u003e \u003cspan class=\"n\"\u003emystdout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBase\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"cm\"\u003e#=\u003c/span\u003e\u003cspan class=\"cm\"\u003e \u003c/span\u003e\u003cspan class=\"cm\"\u003ea\u003c/span\u003e\u003cspan class=\"cm\"\u003el\u003c/span\u003e\u003cspan class=\"cm\"\u003es\u003c/span\u003e\u003cspan class=\"cm\"\u003eo\u003c/span\u003e\u003cspan class=\"cm\"\u003e \u003c/span\u003e\u003cspan class=\"cm\"\u003ew\u003c/span\u003e\u003cspan class=\"cm\"\u003eo\u003c/span\u003e\u003cspan class=\"cm\"\u003er\u003c/span\u003e\u003cspan class=\"cm\"\u003ek\u003c/span\u003e\u003cspan class=\"cm\"\u003es\u003c/span\u003e\u003cspan class=\"cm\"\u003e \u003c/span\u003e\u003cspan class=\"cm\"\u003e=#\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对预编译代码时可以进行的操作进行了一些额外的限制，以帮助用户避免其他错误行为的情况。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e调用 \u003ca href=\"https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.eval\"\u003eeval\u003c/a\u003e 引起另一个模块的副作用。当增量预编译标志被设置时，这也会导致发出警告。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在 \u003ccode\u003e__init__()\u003c/code\u003e 被启动后，从本地作用域调用 \u003ccode\u003eglobal const\u003c/code\u003e 语句(参见问题 \u003ccode\u003e#12010\u003c/code\u003e，计划为此增加一个错误)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在进行增量预编译时，替换一个模块是一个运行时错误。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e还有几点需要注意。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e在对源文件本身进行修改之后，不会进行代码重载/缓存无效化（包括通过 \u003ccode\u003ePkg.update\u003c/code\u003e），而且在 \u003ccode\u003ePkg.rm\u003c/code\u003e 之后也不会进行清理。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e预编译不考虑重塑数组的内存共享行为 (每个视图都有自己的副本)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e期待文件系统在编译时和运行时之间保持不变，例如 \u003ca href=\"https://docs.julialang.org/en/v1/base/file/#Base.@__FILE__\"\u003e@\u003cstrong\u003eFILE\u003c/strong\u003e\u003c/a\u003e/\u003ccode\u003esource_path()\u003c/code\u003e 在运行时查找资源，或者 BinDeps 的 \u003ccode\u003e@checked_lib\u003c/code\u003e 宏。有时这是不可避免的。然而，在可能的情况下，在编译时将资源复制到模块中是一个很好的做法，这样它们就不需要在运行时被找到。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eWeakRef\u003c/code\u003e 对象和 finalizers 目前还没有被序列化器正确处理（这将在即将发布的版本中得到修正）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e通常最好避免捕获对内部元数据对象实例的引用，如 \u003ccode\u003eMethod\u003c/code\u003e、\u003ccode\u003eMethodInstance\u003c/code\u003e、\u003ccode\u003eMethodTable\u003c/code\u003e、\u003ccode\u003eTypeMapLevel\u003c/code\u003e、\u003ccode\u003eTypeMapEntry\u003c/code\u003e 以及这些对象的字段，因为这可能会混淆序列化器，可能不会导致你想要的结果。这样做不一定会出错，但你只需要做好准备，系统会尝试复制其中的一些对象，并为其他对象创建一个唯一的实例。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在模块开发过程中，有时关闭增量预编译是很有帮助的。命令行标志 \u003ccode\u003e--compiled-modules={yes|no}\u003c/code\u003e 可以让你开启或关闭模块预编译。当 Julia 以 \u003ccode\u003e--compiled-modules=no\u003c/code\u003e 启动时，当加载模块和模块依赖时，编译缓存中的序列化模块会被忽略。\u003ccode\u003eBase.compilecache\u003c/code\u003e 仍然可以被手动调用。这个命令行标志的状态被传递给 \u003ccode\u003ePkg.build\u003c/code\u003e，以便在安装、更新和显式构建包时禁用自动预编译触发。\u003c/p\u003e\n","text":"模块 Julia 中的模块是独立的变量工作空间，即它们引入了一个新的全局作用域。它们在语法上是有分界的，在 module Name ... end 里面。模块允许您创建顶层定义（也就是全局变量），而不用担心您的代码与别人的代码一起使用时的名称冲突。在一个模块中，你可以控制哪些来自其他模块的名字是可见的（通过导入），并指定哪些名字是要公开的（通过导出）。\n下面的例子展示了模块的主要功能。这个例子并不是为了运行，而是为了说明问题。\nmodule MyModule using Lib using BigLib: thing1, thing2 import Base.show export MyType, foo struct MyType x end bar(x) = 2x foo(a::MyType) = bar(a.x) + 1 show(io::IO, a::MyType) = print(io, \u0026#34;MyType$(a.x)\u0026#34;) end 需要注意的是，这个样式并不是要在模块的正文中缩进，因为这通常会导致整个文件被缩进。\n这个模块定义了一个 MyType 类型和两个函数。函数 foo 和 MyType 类型是导出的，因此可以导入到其他模块中。函数 bar 是 MyModule 的私有函数。\nusing Lib 语句意味着将有一个名为 Lib 的模块可以根据需要解析名称。当遇到一个全局变量在当前模块中没有定义时，系统会在 Lib 导出的变量中搜索它，如果在那里找到了，就会导入它。这意味着在当前模块内对该全局的所有使用都将解析为该变量在 Lib 中的定义。\nusing BigLib: thing1, thing2 语句，只将标识符 thing1 和 thing2 从模块 BigLib 中带入作用域。如果这些名称指的是函数，那么将不允许向它们添加方法（你只能 \u0026ldquo;使用 \u0026ldquo;它们，而不是扩展它们）。\nimport 关键字支持与 using 相同的语法。import 与 using 的不同之处在于，使用 import 导入的函数可以用新的方法进行扩展。\n在上面的 MyModule 中，我们想给标准的 show 函数添加一个方法，所以我们必须写 import Base.show。只有通过 using 才能看到名字的函数不能被扩展。\n一旦一个变量通过 using 或 import 变得可见，一个模块就不能创建自己的同名变量。导入的变量是只读的，分配给全局变量总是会影响到当前模块所拥有的变量，否则会引发错误。\n模块使用情况概述 要加载一个模块，可以使用两个主要的关键词：using 和 import。要了解它们的区别，请看下面的例子。\nmodule MyModule export x, y x() = \u0026#34;x\u0026#34; y() = \u0026#34;y\u0026#34; p() = \u0026#34;p\u0026#34; end 在这个模块中，我们导出了 x 和 y 函数(用关键字 export)，也有非导出的函数 p，有几种不同的方法可以将 Module 及其内部函数加载到当前的工作空间中。\n   导入命令 带入带作用域中的东西 可用于方法扩展     using MyModule 所有导出的名字(x 和 y), MyModule.x, MyModule.y 和 MyModule.p MyModule.x, MyModule.y 和 MyModule.p   using MyModule: x, p x 和 p    import MyModule MyModule.x, MyModule.y 和 MyModule.p MyModule.x, MyModule.y 和 MyModule.p   import MyModule.x, MyModule.p x 和 p x 和 p   import MyModule: x, p x 和 p x 和 p    模块和文件 文件和文件名大多与模块无关，模块只与模块表达式有关。一个模块可以有多个文件，一个文件可以有多个模块。\nmodule Foo include(\u0026#34;file1.jl\u0026#34;) include(\u0026#34;file2.jl\u0026#34;) end 在不同的模块中包含相同的代码，提供了类似 mixin 的行为。人们可以使用这一点来用不同的基础定义来运行相同的代码，例如，通过使用某些操作符的\u0026quot;安全\u0026quot;版本来测试代码。\nmodule Normal include(\u0026#34;mycode.jl\u0026#34;) end module Testing include(\u0026#34;safe_operators.jl\u0026#34;) include(\u0026#34;mycode.jl\u0026#34;) end 标准模块 There are three important standard modules:\nCore 包含\u0026quot;内置于\u0026quot;语言中的所有功能。 Base 包含几乎在所有情况下都有用的基本功能。 Main 是当 Julia 被启动时的顶级模块和当前模块。\n默认的顶层定义和裸模块 除了 using Base 之外，模块还自动包含 eval和 include 函数的定义，这些函数在该模块的全局作用域内评估表达式/文件。\n如果不想要这些默认的定义，可以使用关键字 baremodule 来代替定义模块（注意： Core 仍然是导入的，如上所述）。以 baremodule 来说，一个标准的模块是这样的。\nbaremodule Mod using Base eval(x) = Core.eval(Mod, x) include(p) = Base.include(Mod, p) ... end 相对和绝对模块路径 给定 using Foo 语句，系统会查询内部的顶层模块表，寻找一个名为 Foo 的模块。如果该模块不存在，系统会尝试 require(:Foo)，这通常会导致从安装的包中加载代码。\n然而，有些模块包含子模块，这意味着你有时需要访问一个非顶层模块。有两种方法可以做到这一点。第一种是使用绝对路径，例如 using Base.Sort。第二种是使用相对路径，这样可以更容易地导入当前模块的子模块或其任何一个外层模块。\nmodule Parent module Utils ... end using .Utils ... end 这里模块 Parent 包含一个子模块 Utils，Parent 中的代码希望 Utils 的内容可见。这可以通过在 using 路径中使用点号来实现。添加更多的前导点号会使模块的层次结构上升。例如，using ..Utils 会在 Parent 的外层模块中查找Utils，而不是在 Parent 本身中查找。\n注意相对导入限定符只在使用和导入语句中有效。\n命名空间杂项 如果一个名字是限定的(例如 Base.sin)，那么即使它没有被导出，也可以被访问。这在调试时往往很有用。它也可以通过使用限定名作为函数名来添加方法。但是，由于会产生语法上的歧义，如果你想给不同模块中的一个函数添加方法，而这个函数的名称只包含符号，例如一个运算符，Base.+，你必须使用 Base.:+ 来引用它。如果运算符的长度超过一个字符，你必须用括号把它括起来，比如 Base.:(==)。\n在导入和导出语句中，宏的名称用 @ 书写，例如 import Mod.@mac。其他模块中的宏可以用 Mod.@mac 或 @Mod.mac 来调用。\n语法 M.x = y 不能用于分配其他模块中的全局，全局分配总是模块-局部的。\n变量名可以通过声明为 global x 来 \u0026ldquo;保留\u0026quot;而不分配给它，这样可以防止加载后初始化的 globals 的名称冲突。\n模块初始化和预编译 大型模块可能需要几秒钟的时间来加载，因为执行一个模块中的所有语句往往需要编译大量的代码。Julia 创建了模块的预编译缓存来减少这个时间。\n当使用 import 或 using 加载模块时，会自动创建并使用增量的预编译模块文件。这将导致它在第一次导入时自动编译。另外，您也可以手动调用 Base.compilecache(modulename)。由此产生的缓存文件将存储在 DEPOT_PATH[1]/compiled/ 中。随后，只要模块的任何依赖关系发生变化，模块就会在 using 或 import 时自动重新编译；依赖关系是指导入的模块、Julia 构建的模块、包含的文件，或者模块文件中 include_dependency(path) 声明的显式依赖关系。\n对于文件依赖，通过检查由 include 加载的文件或由 include_dependency 显式添加的文件的修改时间(mtime)是否保持不变，或者是否等于被截断到最接近秒的修改时间(以适应无法以亚秒级精度复制 mtime 的系统)来确定变化。它还考虑到在 require 中搜索逻辑选择的文件路径是否与创建预编译文件的路径匹配。它还会考虑到已经加载到当前进程中的一组依赖关系，即使这些模块的文件发生变化或消失，也不会重新编译这些模块，以避免在运行系统和预编译缓存之间产生不兼容的情况。\n如果你知道某个模块预编译你的模块是不安全的（例如，出于下面描述的原因之一），你应该在模块文件中加上 __precompile__(false)（通常放在顶部）。这将导致 Base.compilecache 抛出一个错误，并将导致 using / import 直接将其加载到当前进程中而跳过预编译和缓存。这也因此阻止了该模块被任何其他预编译模块导入。\n您可能需要注意创建增量共享库时固有的某些行为，在编写模块时可能需要注意。例如，外部状态不会被保存。为了适应这一点，明确地将任何必须在运行时发生的初始化步骤与可以在编译时发生的步骤分开。为此，Julia 允许您在您的模块中定义一个 __init__() 函数来执行任何必须在运行时发生的初始化步骤。这个函数在编译时不会被调用（--output-*）。实际上，你可以假设它在代码的生命周期中只运行一次。当然，如果有必要的话，你可以手动调用它，但是默认情况下，你可以假设这个函数处理的是本地机器的计算状态，它不需要\u0026ndash;甚至不应该\u0026ndash;在编译后的镜像中捕获。它将在模块被加载到一个进程后被调用，包括如果它被加载到增量编译中(--output-incremental=yes)，但如果它被加载到一个完整的编译进程中，则不会被调用。\n特别是，如果你在一个模块中定义了一个 function __init__()，那么 Julia 将在模块被加载后（例如通过 import、using 或 require）在运行时第一次立即调用 __init__()（也就是说，__init__ 只被调用一次，而且是在模块中的所有语句被执行后才被调用）。因为它是在模块完全导入之后被调用的，所以任何子模块或其它导入的模块都会在外层模块的 __init__ 之前调用它们的 __init__ 函数。\n__init__ 的两个典型用途是调用外部 C 库的运行时初始化函数和初始化涉及外部库返回指针的全局常量。例如，假设我们正在调用一个 C 库 libfoo，它要求我们在运行时调用 foo_init() 初始化函数。假设我们还想定义一个全局常量 foo_data_ptr，用来存放 libfoo 定义的 void *foo_data() 函数的返回值\u0026ndash;这个常量必须在运行时（而不是在编译时）初始化，因为指针地址会随着运行而改变。你可以通过在你的模块中定义下面的 __init__ 函数来实现。\nconst foo_data_ptr = Ref{Ptr{Cvoid}}(0) function __init__() ccall((:foo_init, :libfoo), Cvoid, ()) foo_data_ptr[] = ccall((:foo_data, :libfoo), Ptr{Cvoid}, ()) nothing end 请注意，我们完全可以在函数内部定义一个全局，比如 __init__；这是使用动态语言的优势之一。但是通过在全局作用域内定义一个常量，我们可以确保编译器知道这个类型，并允许它生成更好的优化代码。显然，你的模块中任何其他依赖于 foo_data_ptr 的 globals 也必须在 __init__ 中初始化。\n涉及大多数不是由 ccall 产生的 Julia 对象的常量不需要放在 __init__ 中：它们的定义可以被预编译并从缓存的模块映像中加载。这包括像数组这样复杂的堆分配对象。然而，任何返回原始指针值的例程都必须在运行时调用，以便预编译工作（Ptr 对象将变成空指针，除非它们被隐藏在 isbits 对象中）。这包括 Julia 函数 cfunction 和 pointer 的返回值。\n字典和集合类型，或者一般来说任何依赖于 hash(key) 方法输出的东西，都是比较棘手的情况。在常见的情况下，键是数字、字符串、符号、范围、Expr 或这些类型的组合（通过数组、元组、集合、对等），它们可以安全地进行预编译。然而，对于其他一些关键类型，如 Function 或 DataType 和通用的用户定义类型，在这些类型中，你没有定义 hash 方法，回退 hash 方法取决于对象的内存地址（通过它的 objectid），因此可能会在运行时改变。如果你有这些键类型之一，或者如果你不确定，为了安全起见，你可以在你的 __init__ 函数中初始化这个字典。或者，你也可以使用 IdDict 字典类型，它由预编译特别处理，所以在编译时初始化是安全的。\n在使用预编译时，保持对编译阶段和执行阶段的清晰认识很重要。在这种模式下，往往会更清楚地认识到 Julia 是一个允许执行任意 Julia 代码的编译器，而不是一个同时生成编译代码的独立解释器。\n其他已知的潜在故障情况包括。\n 全局计数器（例如，用于试图唯一识别对象）。考虑以下代码片段。  mutable struct UniquedById myid::Int let counter = 0 UniquedById() = new(counter += 1) end end 虽然这段代码的目的是给每个实例一个唯一的 id，但计数器的值是在编译结束时记录的。这个增量编译模块的所有后续使用将从同一个计数器值开始。\n请注意，objectid（通过哈希内存指针工作）也有类似的问题（参见下面关于 Dict 用法的说明）。\n一种替代方法是使用宏来捕获 @MODULE，并将其与当前的计数器值一起单独存储，然而，重新设计代码使其不依赖于这个全局状态可能会更好。\n 关联集合(比如 Dict 和 Set)需要在 __init__ 中重新洗牌(将来可能会提供一个机制来注册一个初始化函数)。\n  根据编译时的副作用在加载时持续存在。例如：修改其他 Julia 模块中的数组或其他变量；维护打开的文件或设备的句柄；存储其他系统资源（包括内存）的指针。\n  通过直接引用而不是通过它的查找路径，从另一个模块创建意外的全局状态\u0026quot;副本\u0026rdquo;。例如，（在全局作用域内）。\n  #mystdout = Base.stdout #= will not work correctly, since this will copy Base.stdout into this module =# # instead use accessor functions: getstdout() = Base.stdout #=bestoption=# # or move the assignment into the runtime: __init__() = global mystdout = Base.stdout #=alsoworks=# 对预编译代码时可以进行的操作进行了一些额外的限制，以帮助用户避免其他错误行为的情况。\n  调用 eval 引起另一个模块的副作用。当增量预编译标志被设置时，这也会导致发出警告。\n  在 __init__() 被启动后，从本地作用域调用 global const 语句(参见问题 #12010，计划为此增加一个错误)\n  在进行增量预编译时，替换一个模块是一个运行时错误。\n  还有几点需要注意。\n  在对源文件本身进行修改之后，不会进行代码重载/缓存无效化（包括通过 Pkg.update），而且在 Pkg.rm 之后也不会进行清理。\n  预编译不考虑重塑数组的内存共享行为 (每个视图都有自己的副本)\n  期待文件系统在编译时和运行时之间保持不变，例如 @FILE/source_path() 在运行时查找资源，或者 BinDeps 的 @checked_lib 宏。有时这是不可避免的。然而，在可能的情况下，在编译时将资源复制到模块中是一个很好的做法，这样它们就不需要在运行时被找到。\n  WeakRef 对象和 finalizers 目前还没有被序列化器正确处理（这将在即将发布的版本中得到修正）。\n  通常最好避免捕获对内部元数据对象实例的引用，如 Method、MethodInstance、MethodTable、TypeMapLevel、TypeMapEntry 以及这些对象的字段，因为这可能会混淆序列化器，可能不会导致你想要的结果。这样做不一定会出错，但你只需要做好准备，系统会尝试复制其中的一些对象，并为其他对象创建一个唯一的实例。\n  在模块开发过程中，有时关闭增量预编译是很有帮助的。命令行标志 --compiled-modules={yes|no} 可以让你开启或关闭模块预编译。当 Julia 以 --compiled-modules=no 启动时，当加载模块和模块依赖时，编译缓存中的序列化模块会被忽略。Base.compilecache 仍然可以被手动调用。这个命令行标志的状态被传递给 Pkg.build，以便在安装、更新和显式构建包时禁用自动预编译触发。\n"},"name":"Julia 中的 模块","published":"2020-08-05T00:00:00+08:00","summary":"Modules","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-05-modules-in-julia/"},{"content":{"html":"\u003ch2 id=\"进入-pkg-模式\"\u003e进入 Pkg 模式\u003c/h2\u003e\n\u003cp\u003ePkg 是 Julia 中包管理工具。Pkg 来自于 REPL, 在 Julia 的 REPL 中按下 \u003ccode\u003e]\u003c/code\u003e 就进入 Pkg REPL 了。要回到 Julia REPL, 按退格键或 \u003ccode\u003e^C\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"使用-pkg\"\u003e使用 Pkg\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eadd JSON              \u003cspan class=\"c1\"\u003e# 添加一个 package\u003c/span\u003e\nadd JSON StaticArrays \u003cspan class=\"c1\"\u003e# 添加多个 package\u003c/span\u003e\nrm JSON               \u003cspan class=\"c1\"\u003e# 移除一个 package\u003c/span\u003e\nrm JSON StaticArrays  \u003cspan class=\"c1\"\u003e# 移除多个 package\u003c/span\u003e\nadd https://github.com/JuliaLang/Example.jl \u003cspan class=\"c1\"\u003e# 添加一个未注册的 package\u003c/span\u003e\nrm Example            \u003cspan class=\"c1\"\u003e# 按名字移除 package\u003c/span\u003e\nupdate Example        \u003cspan class=\"c1\"\u003e# 升级一个已安装的 package\u003c/span\u003e\nupdate                \u003cspan class=\"c1\"\u003e# 升级所有已安装的 package\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"environments\"\u003eenvironments\u003c/h2\u003e\n\u003cp\u003e你可能已经注意到 Pkg REPL 提示符前面的 \u003ccode\u003e(@v1.5)\u003c/code\u003e 字符串了。这里的  \u003ccode\u003e(@v1.5)\u003c/code\u003e 就是激活环境(\u003cstrong\u003eactive environment\u003c/strong\u003e)。激活环境是能被诸如 \u003ccode\u003eadd\u003c/code\u003e、\u003ccode\u003erm\u003c/code\u003e 和 \u003ccode\u003eupdate\u003c/code\u003e 等 Pkg 命令修改的环境。\u003c/p\u003e\n\u003cp\u003e我们可以设置一个新的激活环境用于实验。要设置激活环境, 使用 \u003ccode\u003eactivate\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e@v1.5\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; activate tutorial\nActivating new environment at \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e~/tutorial/Project.toml\u003c/code\u003e 是激活环境的项目文件。项目文件是 Pkg 存储环境的元数据的地方。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; status\nStatus \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eempty project\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在这个新的环境是空的, 我们添加一个 package 观察下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; add Example\n   Updating registry at \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/.julia/registries/General\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n   Updating git-repo \u003cspan class=\"sb\"\u003e`\u003c/span\u003ehttps://github.com/JuliaRegistries/General.git\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  Resolving package versions...\n    Cloning \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07-990d-54b4-ab0e-23690620f79a\u003cspan class=\"o\"\u003e]\u003c/span\u003e Example from https://github.com/JuliaLang/Example.jl.git\n  Installed Example ─ v0.5.3\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e + Example v0.5.3\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Manifest.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e + Example v0.5.3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用 \u003ccode\u003estatus\u003c/code\u003e 命令查看激活环境的信息:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; status\nStatus \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e Example v0.5.3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用 \u003ccode\u003edevelop\u003c/code\u003e 命令设置 \u003ccode\u003eExample\u003c/code\u003e package 的 一个 \u003ccode\u003egit clone\u003c/code\u003e, 以供我们修改这个本地仓库:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; develop --local Example\n    Cloning git-repo \u003cspan class=\"sb\"\u003e`\u003c/span\u003ehttps://github.com/JuliaLang/Example.jl.git\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  Resolving package versions...\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e ~ Example v0.5.3 ⇒ v0.5.4 \u003cspan class=\"sb\"\u003e`\u003c/span\u003edev/Example\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Manifest.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e ~ Example v0.5.3 ⇒ v0.5.4 \u003cspan class=\"sb\"\u003e`\u003c/span\u003edev/Example\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e用 \u003ccode\u003e;\u003c/code\u003e 切换到 shell 模式, 用 vi 修改 \u003ccode\u003e~/tutorial/dev/Example/src/Example.jl\u003c/code\u003e 文件, 增加一个 \u003ccode\u003eplusone\u003c/code\u003e 函数, 保存。\u003c/p\u003e\n\u003cp\u003e在 Julia 的 REPL 中, 导入修改后的 \u003ccode\u003eExample\u003c/code\u003e package:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; import Example\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e Info: Precompiling Example \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07-990d-54b4-ab0e-23690620f79a\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\njulia\u0026gt; Example.plusone\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e2\u003c/span\u003e\n\njulia\u0026gt; Example.plusone\u003cspan class=\"o\"\u003e(\u003c/span\u003e4\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到我们添加的函数生效了, 这样就很方便我们添加测试新功能。如果我们已经不再需要本地的 \u003ccode\u003eExample\u003c/code\u003e 了, 需要使用 \u003ccode\u003efree\u003c/code\u003e 命令以停止使用本地克隆的 package, 转而使用已注册版本代替:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; free Example\n  Resolving package versions...\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e ~ Example v0.5.4 \u003cspan class=\"sb\"\u003e`\u003c/span\u003edev/Example\u003cspan class=\"sb\"\u003e`\u003c/span\u003e ⇒ v0.5.3\nUpdating \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/tutorial/Manifest.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[\u003c/span\u003e7876af07\u003cspan class=\"o\"\u003e]\u003c/span\u003e ~ Example v0.5.4 \u003cspan class=\"sb\"\u003e`\u003c/span\u003edev/Example\u003cspan class=\"sb\"\u003e`\u003c/span\u003e ⇒ v0.5.3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果已经用 \u003ccode\u003etutorial\u003c/code\u003e 做完实验了, 可以使用不带参数的 \u003ccode\u003eactivate\u003c/code\u003e 回到默认环境:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003etutorial\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; activate\n Activating environment at \u003cspan class=\"sb\"\u003e`\u003c/span\u003e~/.julia/environments/v1.5/Project.toml\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e@v1.5\u003cspan class=\"o\"\u003e)\u003c/span\u003e pkg\u0026gt; \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"进入 Pkg 模式 Pkg 是 Julia 中包管理工具。Pkg 来自于 REPL, 在 Julia 的 REPL 中按下 ] 就进入 Pkg REPL 了。要回到 Julia REPL, 按退格键或 ^C。\n使用 Pkg add JSON # 添加一个 package add JSON StaticArrays # 添加多个 package rm JSON # 移除一个 package rm JSON StaticArrays # 移除多个 package add https://github.com/JuliaLang/Example.jl # 添加一个未注册的 package rm Example # 按名字移除 package update Example # 升级一个已安装的 package update # 升级所有已安装的 package environments 你可能已经注意到 Pkg REPL 提示符前面的 (@v1.5) 字符串了。这里的 (@v1.5) 就是激活环境(active environment)。激活环境是能被诸如 add、rm 和 update 等 Pkg 命令修改的环境。\n我们可以设置一个新的激活环境用于实验。要设置激活环境, 使用 activate:\n(@v1.5) pkg\u0026gt; activate tutorial Activating new environment at `~/tutorial/Project.toml` ~/tutorial/Project.toml 是激活环境的项目文件。项目文件是 Pkg 存储环境的元数据的地方。\n(tutorial) pkg\u0026gt; status Status `~/tutorial/Project.toml` (empty project) 现在这个新的环境是空的, 我们添加一个 package 观察下:\n(tutorial) pkg\u0026gt; add Example Updating registry at `~/.julia/registries/General` Updating git-repo `https://github.com/JuliaRegistries/General.git` Resolving package versions... Cloning [7876af07-990d-54b4-ab0e-23690620f79a] Example from https://github.com/JuliaLang/Example.jl.git Installed Example ─ v0.5.3 Updating `~/tutorial/Project.toml` [7876af07] + Example v0.5.3 Updating `~/tutorial/Manifest.toml` [7876af07] + Example v0.5.3 用 status 命令查看激活环境的信息:\n(tutorial) pkg\u0026gt; status Status `~/tutorial/Project.toml` [7876af07] Example v0.5.3 使用 develop 命令设置 Example package 的 一个 git clone, 以供我们修改这个本地仓库:\n(tutorial) pkg\u0026gt; develop --local Example Cloning git-repo `https://github.com/JuliaLang/Example.jl.git` Resolving package versions... Updating `~/tutorial/Project.toml` [7876af07] ~ Example v0.5.3 ⇒ v0.5.4 `dev/Example` Updating `~/tutorial/Manifest.toml` [7876af07] ~ Example v0.5.3 ⇒ v0.5.4 `dev/Example` 用 ; 切换到 shell 模式, 用 vi 修改 ~/tutorial/dev/Example/src/Example.jl 文件, 增加一个 plusone 函数, 保存。\n在 Julia 的 REPL 中, 导入修改后的 Example package:\njulia\u0026gt; import Example [ Info: Precompiling Example [7876af07-990d-54b4-ab0e-23690620f79a] julia\u0026gt; Example.plusone(1) 2 julia\u0026gt; Example.plusone(4) 5 可以看到我们添加的函数生效了, 这样就很方便我们添加测试新功能。如果我们已经不再需要本地的 Example 了, 需要使用 free 命令以停止使用本地克隆的 package, 转而使用已注册版本代替:\n(tutorial) pkg\u0026gt; free Example Resolving package versions... Updating `~/tutorial/Project.toml` [7876af07] ~ Example v0.5.4 `dev/Example` ⇒ v0.5.3 Updating `~/tutorial/Manifest.toml` [7876af07] ~ Example v0.5.4 `dev/Example` ⇒ v0.5.3 如果已经用 tutorial 做完实验了, 可以使用不带参数的 activate 回到默认环境:\n(tutorial) pkg\u0026gt; activate Activating environment at `~/.julia/environments/v1.5/Project.toml` (@v1.5) pkg\u0026gt; "},"name":"Julia 中的 Pkg","published":"2020-08-04T00:00:00+08:00","summary":"Pkg","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-04-pkg-in-julia/"},{"content":{"html":"\u003ch1 id=\"dates-模块的加载和使用\"\u003eDates 模块的加载和使用\u003c/h1\u003e\n\u003cp\u003e在 Julia 的 Pkg REPL 中, 输入 \u003ccode\u003eadd Dates\u003c/code\u003e 添加 Dates 模块。回到 Julia 的 REPL 中, 输入:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; using Dates\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-01-01T00:00:00\n\njulia\u0026gt; typeof\u003cspan class=\"o\"\u003e(\u003c/span\u003eDateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDateTime\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T00:00:00\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1,12\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T12:00:00\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1,12,30\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T12:30:00\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1,12,30,59\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T12:30:59\n\njulia\u0026gt; DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020,8,1,12,30,59, 999\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01T12:30:59.999\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020, 8\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020, 8, 1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003eDates.Year\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020\u003cspan class=\"o\"\u003e)\u003c/span\u003e,Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e8\u003cspan class=\"o\"\u003e)\u003c/span\u003e,Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003eDates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e8\u003cspan class=\"o\"\u003e)\u003c/span\u003e,Dates.Year\u003cspan class=\"o\"\u003e(\u003c/span\u003e2020\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2020-08-01\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"date-和-datetime-的算术操作\"\u003eDate 和 DateTime 的算术操作\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003edt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2012,2,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2012-02-29\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003edt2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2000,2,1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2000-02-01\n\njulia\u0026gt; dump\u003cspan class=\"o\"\u003e(\u003c/span\u003edt\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\n  instant: Dates.UTInstant\u003cspan class=\"o\"\u003e{\u003c/span\u003eDay\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    periods: Day\n      value: Int64 \u003cspan class=\"m\"\u003e734562\u003c/span\u003e\n\njulia\u0026gt; dump\u003cspan class=\"o\"\u003e(\u003c/span\u003edt2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\n  instant: Dates.UTInstant\u003cspan class=\"o\"\u003e{\u003c/span\u003eDay\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    periods: Day\n      value: Int64 \u003cspan class=\"m\"\u003e730151\u003c/span\u003e\n\njulia\u0026gt; dt \u0026gt; dt2\n\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\njulia\u0026gt; dt !\u003cspan class=\"o\"\u003e=\u003c/span\u003e dt2\n\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\njulia\u0026gt; dt + dt2\nERROR: MethodError: no method matching +\u003cspan class=\"o\"\u003e(\u003c/span\u003e::Date, ::Date\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\njulia\u0026gt; dt * dt2\nERROR: MethodError: no method matching *\u003cspan class=\"o\"\u003e(\u003c/span\u003e::Date, ::Date\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\njulia\u0026gt; dt / dt2\nERROR: MethodError: no method matching /\u003cspan class=\"o\"\u003e(\u003c/span\u003e::Date, ::Date\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; dt - dt2\n\u003cspan class=\"m\"\u003e4411\u003c/span\u003e days\n\njulia\u0026gt; typeof\u003cspan class=\"o\"\u003e(\u003c/span\u003edt - dt2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDay\n\njulia\u0026gt; dt2 - dt\n-4411 days\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003edt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2012,2,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2012-02-29T00:00:00\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003edt2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e DateTime\u003cspan class=\"o\"\u003e(\u003c/span\u003e2000,2,1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2000-02-01T00:00:00\n\njulia\u0026gt; dt - dt2\n\u003cspan class=\"m\"\u003e381110400000\u003c/span\u003e milliseconds\n\njulia\u0026gt; typeof\u003cspan class=\"o\"\u003e(\u003c/span\u003edt - dt2\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nMillisecond\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"访问器函数\"\u003e访问器函数\u003c/h1\u003e\n\u003cp\u003e因为 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Date\"\u003eDate\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.DateTime\"\u003eDateTime\u003c/a\u003e 类型被存储为单个 \u003ca href=\"https://docs.julialang.org/en/v1/base/numbers/#Core.Int64\"\u003eInt64\u003c/a\u003e 值，所以日期部分或字段可以通过访问器函数进行检索。小写访问器函数以整数形式返回字段。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014, 1, 31\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-01-31\n\njulia\u0026gt; Dates.year\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e2014\u003c/span\u003e\n\njulia\u0026gt; Dates.month\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\njulia\u0026gt; Dates.week\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\njulia\u0026gt; Dates.day\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e而专有形式返回相应 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Period\"\u003ePeriod\u003c/a\u003e 类型中的相同值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.Year\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e2014\u003c/span\u003e years\n\njulia\u0026gt; Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e days\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eJulia 还提供了复合方法，因为在同时需要多个字段的情况下，这些方法提供了一种效率衡量标准。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.yearmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014, 1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; Dates.monthday\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e1, 31\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; Dates.yearmonthday\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014, 1, 31\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也可以访问底层 \u003ccode\u003eUTInstant\u003c/code\u003e 或整数值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; dump\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\n  instant: Dates.UTInstant\u003cspan class=\"o\"\u003e{\u003c/span\u003eDay\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    periods: Day\n      value: Int64 \u003cspan class=\"m\"\u003e735264\u003c/span\u003e\n\njulia\u0026gt; t.instant\nDates.UTInstant\u003cspan class=\"o\"\u003e{\u003c/span\u003eDay\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eDay\u003cspan class=\"o\"\u003e(\u003c/span\u003e735264\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; Dates.value\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e735264\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"查询函数\"\u003e查询函数\u003c/h1\u003e\n\u003cp\u003e查询函数提供关于 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 的历法信息。它们包括关于一周中的某一天的信息。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014, 1, 31\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-01-31\n\njulia\u0026gt; Dates.dayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\njulia\u0026gt; Dates.dayname\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;Friday\u0026#34;\u003c/span\u003e\n\njulia\u0026gt; Dates.dayofweekofmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 5th Friday of January\u003c/span\u003e\n\u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\njulia\u0026gt; Dates.monthname\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;January\u0026#34;\u003c/span\u003e\n\njulia\u0026gt; Dates.daysinmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以及 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 的年份和季度信息。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.isleapyear\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\n\njulia\u0026gt; Dates.dayofyear\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\njulia\u0026gt; Dates.quarterofyear\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\njulia\u0026gt; Dates.dayofquarter\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.dayname\"\u003edayname\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.monthname\"\u003emonthname\u003c/a\u003e 方法也可以使用一个可选的 \u003ccode\u003elocale\u003c/code\u003e 关键字，它可以用来返回其他语言/地区的年份或月份的名称。这些函数也有返回缩写名称的版本，即 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.dayabbr\"\u003edayabbr\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.monthabbr\"\u003emonthabbr\u003c/a\u003e。首先将映射加载到 \u003ccode\u003eLOCALES\u003c/code\u003e 变量中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003efrench_months\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;janvier\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;février\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;mars\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;avril\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;mai\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;juin\u0026#34;\u003c/span\u003e,\n                        \u003cspan class=\"s2\"\u003e\u0026#34;juillet\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;août\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;septembre\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;octobre\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;novembre\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;décembre\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003efrench_monts_abbrev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;janv\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;févr\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;mars\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;avril\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;mai\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;juin\u0026#34;\u003c/span\u003e,\n                              \u003cspan class=\"s2\"\u003e\u0026#34;juil\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;août\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;sept\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;oct\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;nov\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;déc\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003efrench_days\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;lundi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;mardi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;mercredi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;jeudi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;vendredi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;samedi\u0026#34;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026#34;dimanche\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; Dates.LOCALES\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.DateLocale\u003cspan class=\"o\"\u003e(\u003c/span\u003efrench_months, french_monts_abbrev, french_days, \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后可以利用上述函数进行查询。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.dayname\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;vendredi\u0026#34;\u003c/span\u003e\n\njulia\u0026gt; Dates.monthname\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;janvier\u0026#34;\u003c/span\u003e\n\njulia\u0026gt; Dates.monthabbr\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;janv\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e由于没有加载日期的缩写版本，试图使用函数 \u003ccode\u003edayabbr\u003c/code\u003e 会出错。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.dayabbr\u003cspan class=\"o\"\u003e(\u003c/span\u003et\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;french\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nERROR: BoundsError: attempt to access 1-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eString,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e at index \u003cspan class=\"o\"\u003e[\u003c/span\u003e5\u003cspan class=\"o\"\u003e]\u003c/span\u003e\nStacktrace:\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"时间类型-周期算术\"\u003e时间类型-周期算术\u003c/h1\u003e\n\u003cp\u003e在使用任何语言/日期框架时，熟悉如何处理日期-周期算术是一个很好的做法，因为有一些\u003ca href=\"https://codeblog.jonskeet.uk/2010/12/01/the-joys-of-date-time-arithmetic/\"\u003e棘手的问题\u003c/a\u003e需要处理（尽管对于日-精度类型来说要少得多）。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eDates\u003c/code\u003e 模块的方法试图遵循简单的原则，即在做 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Period\"\u003ePeriod\u003c/a\u003e 算术时尽量少改。这种方法也常被称为历法算术，或者说如果有人在对话中问你同样的计算方法，你可能会猜到。为什么要大惊小怪呢？我们举个经典的例子：把2014年1月31日加1个月。答案是什么？Javascript 会说\u003ca href=\"https://markhneedham.com/blog/2009/01/07/javascript-add-a-month-to-a-date/\"\u003e3月3日\u003c/a\u003e（假设31天）。PHP 会说\u003ca href=\"https://stackoverflow.com/questions/5760262/php-adding-months-to-a-date-while-not-exceeding-the-last-day-of-the-month\"\u003e3月2日\u003c/a\u003e（假设30天）。事实上，没有正确的答案。在 \u003ccode\u003eDates\u003c/code\u003e 模块中，它给出的结果是2月28日。它是如何计算出来的呢？我喜欢想到赌场里经典的 7-7-7 赌博游戏。\u003c/p\u003e\n\u003cp\u003e现在只要想象一下，老虎机不是 7-7-7，而是年-月-日，或者在我们的例子中，2014-01-31。当你要求在这个日期的基础上增加1个月的时候，月份槽就会递增，所以现在我们有 2014-02-31。然后检查日号是否大于新月份的最后有效日，如果大于（如上例），则日号向下调整到最后有效日（28）。这种方法的后果是什么呢？继续在我们的日期上再加一个月，\u003ccode\u003e2014-02-28 + Month(1) == 2014-03-28\u003c/code\u003e。什么？你是在期待3月的最后一天吗？不对，对不起，记得 7-7-7 的档期。尽可能少的槽位要改变，所以我们先把月份槽位递增1，2014-03-28，轰，我们就完成了，因为这是一个有效的日期。另一方面，如果我们要在原来的日期 2014-01-31 的基础上增加2个月，那么我们最终的结果是 2014-03-31，正如预期的那样。这种方法的另一个后果是，当强行进行特定的排序时，关联性会有所损失（即以不同的顺序添加东西会导致不同的结果）。比如说：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e+Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-02-28\n\njulia\u0026gt; \u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e+Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-03-01\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e那是怎么回事呢？在第一行中，我们在1月29日的基础上加1天，结果是 2014-01-30；然后再加1个月，于是得到 2014-02-30，再往下调整为 2014-02-28。在第二个例子中，我们先加1个月，我们得到 2014-02-29，再往下调整为 2014-02-28，然后再加1天，结果是 2014-03-01。在这种情况下，有一个设计原则是有帮助的，那就是在存在多个 Periods 的情况下，操作将按照 Periods 的类型来排序，而不是按照它们的值或位置顺序来排序；这意味着总是先加 \u003ccode\u003eYear\u003c/code\u003e，然后加 \u003ccode\u003eMonth\u003c/code\u003e，再加 \u003ccode\u003eWeek\u003c/code\u003e 等。因此，以下确实会导致关联性并正好有用:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-03-01\n\njulia\u0026gt; Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e + Dates.Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2014-03-01\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e棘手吗？也许吧。一个无辜的 \u003ccode\u003eDates\u003c/code\u003e 用户该怎么做？最重要的是要注意，当处理月份时，明确地强制执行某种关联性，可能会导致一些意想不到的结果，但除此之外，一切都应该按照预期工作。值得庆幸的是，在 UT 中处理时间时，日期-周期算术中的奇特情况几乎就是这样了（避免了处理夏令时、闰秒等的 \u0026ldquo;乐趣\u0026rdquo;）。\u003c/p\u003e\n\u003cp\u003e作为奖励，所有的周期算术对象都可以直接与范围一起工作。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003edr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,2,3\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2014-01-29\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2014-02-03\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; collect\u003cspan class=\"o\"\u003e(\u003c/span\u003edr\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n6-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eDate,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 2014-01-29\n 2014-01-30\n 2014-01-31\n 2014-02-01\n 2014-02-02\n 2014-02-03\n\njulia\u0026gt; \u003cspan class=\"nv\"\u003edr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,1,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Dates.Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,07,29\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2014-01-29\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Month\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2014-07-29\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\njulia\u0026gt; collect\u003cspan class=\"o\"\u003e(\u003c/span\u003edr\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n7-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eDate,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 2014-01-29\n 2014-02-28\n 2014-03-29\n 2014-04-29\n 2014-05-29\n 2014-06-29\n 2014-07-29\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003efor i in Date(\u0026quot;2020-08-01\u0026quot;):Day(1):Date(\u0026quot;2020-08-09\u0026quot;)\n           println(i)\nend\n\n2020-08-01\n2020-08-02\n2020-08-03\n2020-08-04\n2020-08-05\n2020-08-06\n2020-08-07\n2020-08-08\n2020-08-09\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"调整器函数\"\u003e调整器函数\u003c/h1\u003e\n\u003cp\u003e尽管日期-周期算术很方便，但经常需要在日期上进行的计算具有日历或时间的性质，而不是固定的周期数。节日就是一个很好的例子，大多数都遵循这样的规则：\u0026ldquo;纪念日 = 五月的最后一个星期一\u0026rdquo;，或者 \u0026ldquo;感恩节 = 十一月的第四个星期四\u0026rdquo;。这类时间表达式处理的是相对于日历的规则，比如本月的第一天或最后一天，下周二，或第一个和第三个星期三等。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eDates\u003c/code\u003e 模块通过几个方便的方法提供了调整器 API，这些方法有助于简单、简洁地表达时间规则。第一组调整器方法处理周、月、季度和年的首尾。它们每个方法都接收一个单一的 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 作为输入，并返回或调整到相对于输入的所需时期的第一个或最后一个。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.firstdayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,16\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Adjusts the input to the Monday of the input\u0026#39;s week\u003c/span\u003e\n2014-07-14\n\njulia\u0026gt; Dates.lastdayofmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,16\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Adjusts to the last day of the input\u0026#39;s month\u003c/span\u003e\n2014-07-31\n\njulia\u0026gt; Dates.lastdayofquarter\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,16\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Adjusts to the last day of the input\u0026#39;s quarter\u003c/span\u003e\n2014-09-30\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来的两个高阶方法 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.tonext-Tuple%7BTimeType,Int64%7D\"\u003etonext\u003c/a\u003e 和 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.toprev-Tuple%7BTimeType,Int64%7D\"\u003etoprev\u003c/a\u003e，通过将一个 \u003ccode\u003eDateFunction\u003c/code\u003e 和一个起始 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 作为第一个参数来概括处理时间表达式。\u003ccode\u003eDateFunction\u003c/code\u003e 只是一个函数，通常是匿名的，它接受一个单一的 \u003ca href=\"https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType\"\u003eTimeType\u003c/a\u003e 作为输入，并返回一个 \u003ca href=\"https://docs.julialang.org/en/v1/base/numbers/#Core.Bool\"\u003eBool\u003c/a\u003e，\u003ccode\u003etrue\u003c/code\u003e 表示满足调整标准。例如:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; \u003cspan class=\"nv\"\u003eistuesday\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e x-\u0026gt;Dates.dayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.Tuesday\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Returns true if the day of the week of x is Tuesday\u003c/span\u003e\n\njulia\u0026gt; Dates.tonext\u003cspan class=\"o\"\u003e(\u003c/span\u003eistuesday, Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,13\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 2014-07-13 is a Sunday\u003c/span\u003e\n2014-07-15\n\njulia\u0026gt; Dates.tonext\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,13\u003cspan class=\"o\"\u003e)\u003c/span\u003e, Dates.Tuesday\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Convenience method provided for day of the week adjustments\u003c/span\u003e\n2014-07-15\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这对于更复杂的时间表达式的 do-block 语法是很有用的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ejulia\u0026gt; Dates.tonext\u003cspan class=\"o\"\u003e(\u003c/span\u003eDate\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014,7,13\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e x\n           \u003cspan class=\"c1\"\u003e# Return true on the 4th Thursday of November (Thanksgiving)\u003c/span\u003e\n           Dates.dayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.Thursday \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n           Dates.dayofweekofmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n           Dates.month\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.November\n       end\n2014-11-27\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.julialang.org/en/v1/base/collections/#Base.filter\"\u003eBase.filter\u003c/a\u003e 方法可以用来获取指定范围内的所有有效日期/时刻。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# 匹兹堡街道清洁; 从 4月到11月的每第二个周二\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 日期范围从 2014-01-01 到 2015-01-01\u003c/span\u003e\njulia\u0026gt; \u003cspan class=\"nv\"\u003edr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2014\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Day\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e:Dates.Date\u003cspan class=\"o\"\u003e(\u003c/span\u003e2015\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\njulia\u0026gt; filter\u003cspan class=\"o\"\u003e(\u003c/span\u003edr\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e x\n           Dates.dayofweek\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.Tue \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n           Dates.April \u0026lt;\u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.month\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u0026lt;\u003cspan class=\"o\"\u003e=\u003c/span\u003e Dates.Nov \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n           Dates.dayofweekofmonth\u003cspan class=\"o\"\u003e(\u003c/span\u003ex\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\n       end\n8-element Array\u003cspan class=\"o\"\u003e{\u003c/span\u003eDate,1\u003cspan class=\"o\"\u003e}\u003c/span\u003e:\n 2014-04-08\n 2014-05-13\n 2014-06-10\n 2014-07-08\n 2014-08-12\n 2014-09-09\n 2014-10-14\n 2014-11-11\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Raku 中上面的代码可以写成:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003elazy my @dates = Date.new('2014-01-01') ... Date.new('2015-01-01');\n\n.say for @dates.grep: -\u0026gt; $d {\n    $d.day-of-week == 2 \u0026amp;\u0026amp;\n    4  \u0026lt;= $d.month \u0026lt;= 11 \u0026amp;\u0026amp;\n    $d.weekday-of-month == 2\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其他的例子和测试可以在 \u003ca href=\"https://github.com/JuliaLang/julia/blob/master/stdlib/Dates/test/adjusters.jl\"\u003estdlib/Dates/test/adjusters.jl\u003c/a\u003e 中找到。\u003c/p\u003e\n","text":"Dates 模块的加载和使用 在 Julia 的 Pkg REPL 中, 输入 add Dates 添加 Dates 模块。回到 Julia 的 REPL 中, 输入:\njulia\u0026gt; using Dates julia\u0026gt; DateTime(2020) 2020-01-01T00:00:00 julia\u0026gt; typeof(DateTime(2020)) DateTime julia\u0026gt; DateTime(2020,8,1) 2020-08-01T00:00:00 julia\u0026gt; DateTime(2020,8,1,12) 2020-08-01T12:00:00 julia\u0026gt; DateTime(2020,8,1,12,30) 2020-08-01T12:30:00 julia\u0026gt; DateTime(2020,8,1,12,30,59) 2020-08-01T12:30:59 julia\u0026gt; DateTime(2020,8,1,12,30,59, 999) 2020-08-01T12:30:59.999 julia\u0026gt; Date(2020, 8) 2020-08-01 julia\u0026gt; Date(2020, 8, 1) 2020-08-01 julia\u0026gt; Date(Dates.Year(2020),Dates.Month(8),Dates.Day(1)) 2020-08-01 julia\u0026gt; Date(Dates.Month(8),Dates.Year(2020)) 2020-08-01 Date 和 DateTime 的算术操作 julia\u0026gt; dt = Date(2012,2,29) 2012-02-29 julia\u0026gt; dt2 = Date(2000,2,1) 2000-02-01 julia\u0026gt; dump(dt) Date instant: Dates.UTInstant{Day} periods: Day value: Int64 734562 julia\u0026gt; dump(dt2) Date instant: Dates.UTInstant{Day} periods: Day value: Int64 730151 julia\u0026gt; dt \u0026gt; dt2 true julia\u0026gt; dt != dt2 true julia\u0026gt; dt + dt2 ERROR: MethodError: no method matching +(::Date, ::Date) [...] julia\u0026gt; dt * dt2 ERROR: MethodError: no method matching *(::Date, ::Date) [...] julia\u0026gt; dt / dt2 ERROR: MethodError: no method matching /(::Date, ::Date) julia\u0026gt; dt - dt2 4411 days julia\u0026gt; typeof(dt - dt2) Day julia\u0026gt; dt2 - dt -4411 days julia\u0026gt; dt = DateTime(2012,2,29) 2012-02-29T00:00:00 julia\u0026gt; dt2 = DateTime(2000,2,1) 2000-02-01T00:00:00 julia\u0026gt; dt - dt2 381110400000 milliseconds julia\u0026gt; typeof(dt - dt2) Millisecond 访问器函数 因为 Date 和 DateTime 类型被存储为单个 Int64 值，所以日期部分或字段可以通过访问器函数进行检索。小写访问器函数以整数形式返回字段。\njulia\u0026gt; t = Date(2014, 1, 31) 2014-01-31 julia\u0026gt; Dates.year(t) 2014 julia\u0026gt; Dates.month(t) 1 julia\u0026gt; Dates.week(t) 5 julia\u0026gt; Dates.day(t) 31 而专有形式返回相应 Period 类型中的相同值。\njulia\u0026gt; Dates.Year(t) 2014 years julia\u0026gt; Dates.Day(t) 31 days Julia 还提供了复合方法，因为在同时需要多个字段的情况下，这些方法提供了一种效率衡量标准。\njulia\u0026gt; Dates.yearmonth(t) (2014, 1) julia\u0026gt; Dates.monthday(t) (1, 31) julia\u0026gt; Dates.yearmonthday(t) (2014, 1, 31) 也可以访问底层 UTInstant 或整数值。\njulia\u0026gt; dump(t) Date instant: Dates.UTInstant{Day} periods: Day value: Int64 735264 julia\u0026gt; t.instant Dates.UTInstant{Day}(Day(735264)) julia\u0026gt; Dates.value(t) 735264 查询函数 查询函数提供关于 TimeType 的历法信息。它们包括关于一周中的某一天的信息。\njulia\u0026gt; t = Date(2014, 1, 31) 2014-01-31 julia\u0026gt; Dates.dayofweek(t) 5 julia\u0026gt; Dates.dayname(t) \u0026#34;Friday\u0026#34; julia\u0026gt; Dates.dayofweekofmonth(t) # 5th Friday of January 5 julia\u0026gt; Dates.monthname(t) \u0026#34;January\u0026#34; julia\u0026gt; Dates.daysinmonth(t) 31 以及 TimeType 的年份和季度信息。\njulia\u0026gt; Dates.isleapyear(t) false julia\u0026gt; Dates.dayofyear(t) 31 julia\u0026gt; Dates.quarterofyear(t) 1 julia\u0026gt; Dates.dayofquarter(t) 31 dayname 和 monthname 方法也可以使用一个可选的 locale 关键字，它可以用来返回其他语言/地区的年份或月份的名称。这些函数也有返回缩写名称的版本，即 dayabbr 和 monthabbr。首先将映射加载到 LOCALES 变量中。\njulia\u0026gt; french_months = [\u0026#34;janvier\u0026#34;, \u0026#34;février\u0026#34;, \u0026#34;mars\u0026#34;, \u0026#34;avril\u0026#34;, \u0026#34;mai\u0026#34;, \u0026#34;juin\u0026#34;, \u0026#34;juillet\u0026#34;, \u0026#34;août\u0026#34;, \u0026#34;septembre\u0026#34;, \u0026#34;octobre\u0026#34;, \u0026#34;novembre\u0026#34;, \u0026#34;décembre\u0026#34;]; julia\u0026gt; french_monts_abbrev = [\u0026#34;janv\u0026#34;,\u0026#34;févr\u0026#34;,\u0026#34;mars\u0026#34;,\u0026#34;avril\u0026#34;,\u0026#34;mai\u0026#34;,\u0026#34;juin\u0026#34;, \u0026#34;juil\u0026#34;,\u0026#34;août\u0026#34;,\u0026#34;sept\u0026#34;,\u0026#34;oct\u0026#34;,\u0026#34;nov\u0026#34;,\u0026#34;déc\u0026#34;]; julia\u0026gt; french_days = [\u0026#34;lundi\u0026#34;,\u0026#34;mardi\u0026#34;,\u0026#34;mercredi\u0026#34;,\u0026#34;jeudi\u0026#34;,\u0026#34;vendredi\u0026#34;,\u0026#34;samedi\u0026#34;,\u0026#34;dimanche\u0026#34;]; julia\u0026gt; Dates.LOCALES[\u0026#34;french\u0026#34;] = Dates.DateLocale(french_months, french_monts_abbrev, french_days, [\u0026#34;\u0026#34;]); 然后可以利用上述函数进行查询。\njulia\u0026gt; Dates.dayname(t;locale=\u0026#34;french\u0026#34;) \u0026#34;vendredi\u0026#34; julia\u0026gt; Dates.monthname(t;locale=\u0026#34;french\u0026#34;) \u0026#34;janvier\u0026#34; julia\u0026gt; Dates.monthabbr(t;locale=\u0026#34;french\u0026#34;) \u0026#34;janv\u0026#34; 由于没有加载日期的缩写版本，试图使用函数 dayabbr 会出错。\njulia\u0026gt; Dates.dayabbr(t;locale=\u0026#34;french\u0026#34;) ERROR: BoundsError: attempt to access 1-element Array{String,1} at index [5] Stacktrace: [...] 时间类型-周期算术 在使用任何语言/日期框架时，熟悉如何处理日期-周期算术是一个很好的做法，因为有一些棘手的问题需要处理（尽管对于日-精度类型来说要少得多）。\nDates 模块的方法试图遵循简单的原则，即在做 Period 算术时尽量少改。这种方法也常被称为历法算术，或者说如果有人在对话中问你同样的计算方法，你可能会猜到。为什么要大惊小怪呢？我们举个经典的例子：把2014年1月31日加1个月。答案是什么？Javascript 会说3月3日（假设31天）。PHP 会说3月2日（假设30天）。事实上，没有正确的答案。在 Dates 模块中，它给出的结果是2月28日。它是如何计算出来的呢？我喜欢想到赌场里经典的 7-7-7 赌博游戏。\n现在只要想象一下，老虎机不是 7-7-7，而是年-月-日，或者在我们的例子中，2014-01-31。当你要求在这个日期的基础上增加1个月的时候，月份槽就会递增，所以现在我们有 2014-02-31。然后检查日号是否大于新月份的最后有效日，如果大于（如上例），则日号向下调整到最后有效日（28）。这种方法的后果是什么呢？继续在我们的日期上再加一个月，2014-02-28 + Month(1) == 2014-03-28。什么？你是在期待3月的最后一天吗？不对，对不起，记得 7-7-7 的档期。尽可能少的槽位要改变，所以我们先把月份槽位递增1，2014-03-28，轰，我们就完成了，因为这是一个有效的日期。另一方面，如果我们要在原来的日期 2014-01-31 的基础上增加2个月，那么我们最终的结果是 2014-03-31，正如预期的那样。这种方法的另一个后果是，当强行进行特定的排序时，关联性会有所损失（即以不同的顺序添加东西会导致不同的结果）。比如说：\njulia\u0026gt; (Date(2014,1,29)+Dates.Day(1)) + Dates.Month(1) 2014-02-28 julia\u0026gt; (Date(2014,1,29)+Dates.Month(1)) + Dates.Day(1) 2014-03-01 那是怎么回事呢？在第一行中，我们在1月29日的基础上加1天，结果是 2014-01-30；然后再加1个月，于是得到 2014-02-30，再往下调整为 2014-02-28。在第二个例子中，我们先加1个月，我们得到 2014-02-29，再往下调整为 2014-02-28，然后再加1天，结果是 2014-03-01。在这种情况下，有一个设计原则是有帮助的，那就是在存在多个 Periods 的情况下，操作将按照 Periods 的类型来排序，而不是按照它们的值或位置顺序来排序；这意味着总是先加 Year，然后加 Month，再加 Week 等。因此，以下确实会导致关联性并正好有用:\njulia\u0026gt; Date(2014,1,29) + Dates.Day(1) + Dates.Month(1) 2014-03-01 julia\u0026gt; Date(2014,1,29) + Dates.Month(1) + Dates.Day(1) 2014-03-01 棘手吗？也许吧。一个无辜的 Dates 用户该怎么做？最重要的是要注意，当处理月份时，明确地强制执行某种关联性，可能会导致一些意想不到的结果，但除此之外，一切都应该按照预期工作。值得庆幸的是，在 UT 中处理时间时，日期-周期算术中的奇特情况几乎就是这样了（避免了处理夏令时、闰秒等的 \u0026ldquo;乐趣\u0026rdquo;）。\n作为奖励，所有的周期算术对象都可以直接与范围一起工作。\njulia\u0026gt; dr = Date(2014,1,29):Day(1):Date(2014,2,3) Date(\u0026#34;2014-01-29\u0026#34;):Day(1):Date(\u0026#34;2014-02-03\u0026#34;) julia\u0026gt; collect(dr) 6-element Array{Date,1}: 2014-01-29 2014-01-30 2014-01-31 2014-02-01 2014-02-02 2014-02-03 julia\u0026gt; dr = Date(2014,1,29):Dates.Month(1):Date(2014,07,29) Date(\u0026#34;2014-01-29\u0026#34;):Month(1):Date(\u0026#34;2014-07-29\u0026#34;) julia\u0026gt; collect(dr) 7-element Array{Date,1}: 2014-01-29 2014-02-28 2014-03-29 2014-04-29 2014-05-29 2014-06-29 2014-07-29 for i in Date(\u0026quot;2020-08-01\u0026quot;):Day(1):Date(\u0026quot;2020-08-09\u0026quot;) println(i) end 2020-08-01 2020-08-02 2020-08-03 2020-08-04 2020-08-05 2020-08-06 2020-08-07 2020-08-08 2020-08-09 调整器函数 尽管日期-周期算术很方便，但经常需要在日期上进行的计算具有日历或时间的性质，而不是固定的周期数。节日就是一个很好的例子，大多数都遵循这样的规则：\u0026ldquo;纪念日 = 五月的最后一个星期一\u0026rdquo;，或者 \u0026ldquo;感恩节 = 十一月的第四个星期四\u0026rdquo;。这类时间表达式处理的是相对于日历的规则，比如本月的第一天或最后一天，下周二，或第一个和第三个星期三等。\nDates 模块通过几个方便的方法提供了调整器 API，这些方法有助于简单、简洁地表达时间规则。第一组调整器方法处理周、月、季度和年的首尾。它们每个方法都接收一个单一的 TimeType 作为输入，并返回或调整到相对于输入的所需时期的第一个或最后一个。\njulia\u0026gt; Dates.firstdayofweek(Date(2014,7,16)) # Adjusts the input to the Monday of the input\u0026#39;s week 2014-07-14 julia\u0026gt; Dates.lastdayofmonth(Date(2014,7,16)) # Adjusts to the last day of the input\u0026#39;s month 2014-07-31 julia\u0026gt; Dates.lastdayofquarter(Date(2014,7,16)) # Adjusts to the last day of the input\u0026#39;s quarter 2014-09-30 接下来的两个高阶方法 tonext 和 toprev，通过将一个 DateFunction 和一个起始 TimeType 作为第一个参数来概括处理时间表达式。DateFunction 只是一个函数，通常是匿名的，它接受一个单一的 TimeType 作为输入，并返回一个 Bool，true 表示满足调整标准。例如:\njulia\u0026gt; istuesday = x-\u0026gt;Dates.dayofweek(x) == Dates.Tuesday; # Returns true if the day of the week of x is Tuesday julia\u0026gt; Dates.tonext(istuesday, Date(2014,7,13)) # 2014-07-13 is a Sunday 2014-07-15 julia\u0026gt; Dates.tonext(Date(2014,7,13), Dates.Tuesday) # Convenience method provided for day of the week adjustments 2014-07-15 这对于更复杂的时间表达式的 do-block 语法是很有用的。\njulia\u0026gt; Dates.tonext(Date(2014,7,13)) do x # Return true on the 4th Thursday of November (Thanksgiving) Dates.dayofweek(x) == Dates.Thursday \u0026amp;\u0026amp; Dates.dayofweekofmonth(x) == 4 \u0026amp;\u0026amp; Dates.month(x) == Dates.November end 2014-11-27 Base.filter 方法可以用来获取指定范围内的所有有效日期/时刻。\n# 匹兹堡街道清洁; 从 4月到11月的每第二个周二 # 日期范围从 2014-01-01 到 2015-01-01 julia\u0026gt; dr = Dates.Date(2014):Day(1):Dates.Date(2015); julia\u0026gt; filter(dr) do x Dates.dayofweek(x) == Dates.Tue \u0026amp;\u0026amp; Dates.April \u0026lt;= Dates.month(x) \u0026lt;= Dates.Nov \u0026amp;\u0026amp; Dates.dayofweekofmonth(x) == 2 end 8-element Array{Date,1}: 2014-04-08 2014-05-13 2014-06-10 2014-07-08 2014-08-12 2014-09-09 2014-10-14 2014-11-11 在 Raku 中上面的代码可以写成:\nlazy my @dates = Date.new('2014-01-01') ... Date.new('2015-01-01'); .say for @dates.grep: -\u0026gt; $d { $d.day-of-week == 2 \u0026amp;\u0026amp; 4 \u0026lt;= $d.month \u0026lt;= 11 \u0026amp;\u0026amp; $d.weekday-of-month == 2 } 其他的例子和测试可以在 stdlib/Dates/test/adjusters.jl 中找到。\n"},"name":"Julia 中的日期和时间","published":"2020-08-04T00:00:00+08:00","summary":"Dates in Julia","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-08-04-dates-in-julia/"},{"content":{"html":"\u003cp\u003eApache Flink 提供的 Table API 是一个统一的、关系型的 API，用于批处理和流处理，即在无边界的、实时的流或有边界的、批处理的数据集上以相同的语义执行查询，并产生相同的结果。Flink 中的 Table API 通常用于简化数据分析、数据管道化和 ETL 应用的定义。\u003c/p\u003e\n\u003ch2 id=\"你要构建什么\"\u003e你要构建什么?\u003c/h2\u003e\n\u003cp\u003e在本教程中，你将学习如何构建一个实时的仪表盘，以按账户跟踪金融交易。该管道将从 Kafka 读取数据，并将结果写入 MySQL，通过 Grafana 可视化。\u003c/p\u003e\n\u003ch2 id=\"先决条件\"\u003e先决条件\u003c/h2\u003e\n\u003cp\u003e本演练假设你对 Java 或 Scala 有一定的熟悉，但即使你来自不同的编程语言，你也应该能够跟上。它还假设你熟悉基本的关系概念，如 SELECT 和 GROUP BY 子句。\u003c/p\u003e\n\u003ch2 id=\"救命-我被卡住了\"\u003e救命, 我被卡住了!\u003c/h2\u003e\n\u003cp\u003e如果你遇到困难，请查看\u003ca href=\"https://flink.apache.org/community.html\"\u003e社区支持资源\u003c/a\u003e。特别是 Apache Flink 的\u003ca href=\"https://flink.apache.org/community.html#mailing-lists\"\u003e用户邮件列表\u003c/a\u003e，它一直是 Apache 项目中最活跃的一个，也是快速获得帮助的好方法。\u003c/p\u003e\n\u003ch2 id=\"如何跟进\"\u003e如何跟进\u003c/h2\u003e\n\u003cp\u003e如果你想跟着走，你需要一台电脑与。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJava 8 或 11\u003c/li\u003e\n\u003cli\u003eMaven\u003c/li\u003e\n\u003cli\u003eDocker\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所需的配置文件可在 \u003ca href=\"https://github.com/apache/flink-playgrounds\"\u003eflink-playgrounds\u003c/a\u003e 资源库中获得。下载后，在 IDE 中打开项目 flink-playground/table-walkthrough，并导航到文件 SpendReport。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e \u003cspan class=\"n\"\u003esettings\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esettings\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE transactions (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    account_id  BIGINT,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    amount      BIGINT,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    transaction_time TIMESTAMP(3),\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    WATERMARK FOR transaction_time AS transaction_time - INTERVAL \u0026#39;5\u0026#39; SECOND\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;) WITH (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;connector\u0026#39; = \u0026#39;kafka\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;topic\u0026#39;     = \u0026#39;transactions\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;properties.bootstrap.servers\u0026#39; = \u0026#39;kafka:9092\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;format\u0026#39;    = \u0026#39;csv\u0026#39;\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE spend_report (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    account_id BIGINT,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    log_ts     TIMESTAMP(3),\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    amount     BIGINT\\n,\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    PRIMARY KEY (account_id, log_ts) NOT ENFORCED\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;) WITH (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;   \u0026#39;connector\u0026#39;  = \u0026#39;jdbc\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;   \u0026#39;url\u0026#39;        = \u0026#39;jdbc:mysql://mysql:3306/sql-demo\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;   \u0026#39;table-name\u0026#39; = \u0026#39;spend_report\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;   \u0026#39;driver\u0026#39;     = \u0026#39;com.mysql.jdbc.Driver\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;   \u0026#39;username\u0026#39;   = \u0026#39;sql-demo\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;   \u0026#39;password\u0026#39;   = \u0026#39;demo-sql\u0026#39;\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nc\"\u003eTable\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;transactions\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ereport\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteInsert\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;spend_report\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"拆解代码\"\u003e拆解代码\u003c/h2\u003e\n\u003ch3 id=\"the-execution-environment\"\u003eThe Execution Environment\u003c/h3\u003e\n\u003cp\u003e前两行设置了你的 \u003ccode\u003eTableEnvironment\u003c/code\u003e。表环境是你如何为你的 Job 设置属性，指定你是在写批处理还是流式应用，以及创建你的源。本演练创建了一个使用流式执行的标准表环境。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e \u003cspan class=\"n\"\u003esettings\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esettings\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"注册表\"\u003e注册表\u003c/h3\u003e\n\u003cp\u003e接下来，在当前\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/catalogs.html\"\u003e目录\u003c/a\u003e中注册了表，您可以使用这些表连接到外部系统，以便读写批处理和流数据。表源提供对存储在外部系统中的数据的访问，如数据库、键值存储、消息队列或文件系统。table sink 向外部存储系统发出一个表。根据源和 sink 的类型，它们支持不同的格式，如 CSV、JSON、Avro 或 Parquet。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE transactions (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    account_id  BIGINT,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    amount      BIGINT,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    transaction_time TIMESTAMP(3),\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    WATERMARK FOR transaction_time AS transaction_time - INTERVAL \u0026#39;5\u0026#39; SECOND\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;) WITH (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;connector\u0026#39; = \u0026#39;kafka\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;topic\u0026#39;     = \u0026#39;transactions\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;properties.bootstrap.servers\u0026#39; = \u0026#39;kafka:9092\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;format\u0026#39;    = \u0026#39;csv\u0026#39;\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n     \u003cspan class=\"s\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注册了两个表：一个是交易输入表，一个是消费报告输出表。交易(transaction)表让我们可以读取信用卡交易，其中包含账户ID(account_id)、时间戳(transaction_time)和美元金额(amount)。该表是在一个名为 \u003ccode\u003etransactions\u003c/code\u003e 的 Kafka 主题上的逻辑视图，包含 CSV 数据。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteSql\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;CREATE TABLE spend_report (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    account_id BIGINT,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    log_ts     TIMESTAMP(3),\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    amount     BIGINT\\n,\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    PRIMARY KEY (account_id, log_ts) NOT ENFORCED\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;) WITH (\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;connector\u0026#39;  = \u0026#39;jdbc\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;url\u0026#39;        = \u0026#39;jdbc:mysql://mysql:3306/sql-demo\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;table-name\u0026#39; = \u0026#39;spend_report\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;driver\u0026#39;     = \u0026#39;com.mysql.jdbc.Driver\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;username\u0026#39;   = \u0026#39;sql-demo\u0026#39;,\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;    \u0026#39;password\u0026#39;   = \u0026#39;demo-sql\u0026#39;\\n\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e第二张表 \u003ccode\u003espend_report\u003c/code\u003e，存储了最终的汇总结果。其底层存储是 MySql 数据库中的一张表。\u003c/p\u003e\n\u003ch3 id=\"查询\"\u003e查询\u003c/h3\u003e\n\u003cp\u003e配置好环境和注册好表之后，你就可以构建你的第一个应用程序了。从 \u003ccode\u003eTableEnvironment\u003c/code\u003e 中，你可以从一个输入表中读取它的行，然后使用 \u003ccode\u003eexecuteInsert\u003c/code\u003e 将这些结果写入到一个输出表中。\u003ccode\u003ereport\u003c/code\u003e 函数是你实现业务逻辑的地方。它目前还没有被实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"nc\"\u003eTable\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;transactions\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ereport\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecuteInsert\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;spend_report\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"测试\"\u003e测试\u003c/h2\u003e\n\u003cp\u003e该项目包含一个二次测试类 \u003ccode\u003eSpendReportTest\u003c/code\u003e，用于验证报表的逻辑。它以批处理模式创建了一个表环境。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e \u003cspan class=\"n\"\u003esettings\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eEnvironmentSettings\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einBatchMode\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e \u003cspan class=\"n\"\u003etEnv\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eTableEnvironment\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esettings\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFlink 的独特属性之一是它在批处理和流式处理之间提供一致的语义。这意味着你可以在静态数据集上以批处理模式开发和测试应用程序，并以流式应用程序的形式部署到生产中。\u003c/p\u003e\n\u003ch2 id=\"尝试一下\"\u003e尝试一下\u003c/h2\u003e\n\u003cp\u003e现在有了 Job 设置的骨架，你就可以添加一些业务逻辑了。目标是建立一个报告，显示每个账户在一天中每个小时的总支出。这意味着时间戳列需要从毫秒到小时的颗粒度进行舍入。\u003c/p\u003e\n\u003cp\u003eFlink 支持用纯 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/\"\u003eSQL\u003c/a\u003e 或使用 \u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/tableApi.html\"\u003eTable API\u003c/a\u003e 开发关系型应用。Table API 是一个受 SQL 启发的流畅 DSL，可以用 Python、Java 或 Scala 编写，并支持强大的 IDE 集成。就像 SQL 查询一样，Table 程序可以选择所需的字段，并通过你的键进行分组。这些功能，加上\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/functions/systemFunctions.html\"\u003e内置的函数\u003c/a\u003e，如 \u003ccode\u003efloor\u003c/code\u003e 和 \u003ccode\u003esum\u003c/code\u003e，写这个报告问题不大。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"nf\"\u003ereport\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;transaction_time\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efloor\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTimeIntervalUnit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eHOUR\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egroupBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"用户定义的函数\"\u003e用户定义的函数\u003c/h2\u003e\n\u003cp\u003eFlink 包含有限的内置函数，有时你需要用\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/functions/udfs.html\"\u003e用户定义的函数\u003c/a\u003e来扩展它。如果 \u003ccode\u003efloor\u003c/code\u003e 不是预定义的，你可以自己实现它。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003ejava.time.LocalDateTime\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003ejava.time.temporal.ChronoUnit\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.flink.table.annotation.DataTypeHint\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eorg.apache.flink.table.functions.ScalarFunction\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyFloor\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eScalarFunction\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"nd\"\u003e@DataTypeHint\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;TIMESTAMP(3)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eLocalDateTime\u003c/span\u003e \u003cspan class=\"nf\"\u003eeval\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"nd\"\u003e@DataTypeHint\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;TIMESTAMP(3)\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eLocalDateTime\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etruncatedTo\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eChronoUnit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eHOURS\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后迅速将其集成到你的应用程序中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"nf\"\u003ereport\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ecall\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMyFloor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;transaction_time\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egroupBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个查询会消耗 \u003ccode\u003etransactions\u003c/code\u003e 表的所有记录，计算报表，并以高效、可扩展的方式输出结果。使用该实现运行测试将通过。\u003c/p\u003e\n\u003ch2 id=\"添加窗口\"\u003e添加窗口\u003c/h2\u003e\n\u003cp\u003e基于时间的数据分组是数据处理中的典型操作，尤其是在处理无限流时。基于时间的分组被称为\u003ca href=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/windows.html\"\u003e窗口\u003c/a\u003e，Flink 提供了灵活的窗口语义。最基本的窗口类型称为 \u003ccode\u003eTumble\u003c/code\u003e 窗口，它有一个固定的大小，其桶不重叠。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"nf\"\u003ereport\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etransactions\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewindow\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTumble\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eover\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elit\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ehour\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eon\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;transaction_time\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egroupBy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselect\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;account_id\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estart\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;log_ts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003e$\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;amount\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这就定义了你的应用程序使用基于时间戳列的一小时翻滚窗口。因此，时间戳为 2019-06-01 01:23:47 的行被放在 2019-06-01 01:00:00 窗口中。\u003c/p\u003e\n\u003cp\u003e基于时间的聚合是独一无二的，因为在连续流应用中，时间与其他属性不同，一般是向前移动的。与 floor 和你的 UDF 不同，窗口函数是\u003ca href=\"https://en.wikipedia.org/wiki/Intrinsic_function\"\u003e内在的\u003c/a\u003e，它允许运行时应用额外的优化。在批处理上下文中，窗口提供了一个方便的 API，用于通过时间戳属性对记录进行分组。\u003c/p\u003e\n\u003cp\u003e用这个实现运行测试也会通过。\u003c/p\u003e\n\u003ch2 id=\"再来一次用流\"\u003e再来一次，用流!\u003c/h2\u003e\n\u003cp\u003e就这样，一个功能齐全的、有状态的、分布式的流式应用! 查询不断地消耗 Kafka 的事务流，计算每小时的花费，并在结果准备好后立即发出。由于输入是界的，所以查询一直在运行，直到手动停止。而且由于 Job 使用了基于时间窗口的聚合，所以当框架知道某个窗口不会再有记录到达时，Flink 可以进行特定的优化，比如状态清理。\u003c/p\u003e\n\u003cp\u003e表游乐场是完全 docker 化的，可以作为流式应用在本地运行。该环境包含一个 Kafka 主题、一个连续数据生成器、MySql 和 Grafana。\u003c/p\u003e\n\u003cp\u003e从 \u003ccode\u003etable-walkthrough\u003c/code\u003e 文件夹内启动 \u003ccode\u003edocker-compose\u003c/code\u003e 脚本。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ docker-compose build\n$ docker-compose up -d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以通过 \u003ca href=\"http://localhost:8082/\"\u003eFlink 控制台\u003c/a\u003e查看正在运行的作业信息。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/spend-report-console.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e从 MySQL 里面探索结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ docker-compose \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e mysql mysql -Dsql-demo -usql-demo -pdemo-sql\n\nmysql\u0026gt; use sql-demo\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nDatabase changed\n\nmysql\u0026gt; \u003cspan class=\"k\"\u003eselect\u003c/span\u003e count\u003cspan class=\"o\"\u003e(\u003c/span\u003e*\u003cspan class=\"o\"\u003e)\u003c/span\u003e from spend_report\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n+----------+\n\u003cspan class=\"p\"\u003e|\u003c/span\u003e count\u003cspan class=\"o\"\u003e(\u003c/span\u003e*\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e\n+----------+\n\u003cspan class=\"p\"\u003e|\u003c/span\u003e      \u003cspan class=\"m\"\u003e110\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e\n+----------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后，去 \u003ca href=\"http://localhost:3000/d/FOe0PbmGk/walkthrough?viewPanel=2\u0026amp;orgId=1\u0026amp;refresh=5s\"\u003eGrafana\u003c/a\u003e 看看完全可视化的结果吧!\u003c/p\u003e\n","text":"Apache Flink 提供的 Table API 是一个统一的、关系型的 API，用于批处理和流处理，即在无边界的、实时的流或有边界的、批处理的数据集上以相同的语义执行查询，并产生相同的结果。Flink 中的 Table API 通常用于简化数据分析、数据管道化和 ETL 应用的定义。\n你要构建什么? 在本教程中，你将学习如何构建一个实时的仪表盘，以按账户跟踪金融交易。该管道将从 Kafka 读取数据，并将结果写入 MySQL，通过 Grafana 可视化。\n先决条件 本演练假设你对 Java 或 Scala 有一定的熟悉，但即使你来自不同的编程语言，你也应该能够跟上。它还假设你熟悉基本的关系概念，如 SELECT 和 GROUP BY 子句。\n救命, 我被卡住了! 如果你遇到困难，请查看社区支持资源。特别是 Apache Flink 的用户邮件列表，它一直是 Apache 项目中最活跃的一个，也是快速获得帮助的好方法。\n如何跟进 如果你想跟着走，你需要一台电脑与。\n Java 8 或 11 Maven Docker  所需的配置文件可在 flink-playgrounds 资源库中获得。下载后，在 IDE 中打开项目 flink-playground/table-walkthrough，并导航到文件 SpendReport。\nEnvironmentSettings settings = EnvironmentSettings.newInstance().build(); TableEnvironment tEnv = TableEnvironment.create(settings); tEnv.executeSql(\u0026#34;CREATE TABLE transactions (\\n\u0026#34; + \u0026#34; account_id BIGINT,\\n\u0026#34; + \u0026#34; amount BIGINT,\\n\u0026#34; + \u0026#34; transaction_time TIMESTAMP(3),\\n\u0026#34; + \u0026#34; WATERMARK FOR transaction_time AS transaction_time - INTERVAL \u0026#39;5\u0026#39; SECOND\\n\u0026#34; + \u0026#34;) WITH (\\n\u0026#34; + \u0026#34; \u0026#39;connector\u0026#39; = \u0026#39;kafka\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;topic\u0026#39; = \u0026#39;transactions\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;properties.bootstrap.servers\u0026#39; = \u0026#39;kafka:9092\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;format\u0026#39; = \u0026#39;csv\u0026#39;\\n\u0026#34; + \u0026#34;)\u0026#34;); tEnv.executeSql(\u0026#34;CREATE TABLE spend_report (\\n\u0026#34; + \u0026#34; account_id BIGINT,\\n\u0026#34; + \u0026#34; log_ts TIMESTAMP(3),\\n\u0026#34; + \u0026#34; amount BIGINT\\n,\u0026#34; + \u0026#34; PRIMARY KEY (account_id, log_ts) NOT ENFORCED\u0026#34; + \u0026#34;) WITH (\\n\u0026#34; + \u0026#34; \u0026#39;connector\u0026#39; = \u0026#39;jdbc\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;url\u0026#39; = \u0026#39;jdbc:mysql://mysql:3306/sql-demo\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;table-name\u0026#39; = \u0026#39;spend_report\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;driver\u0026#39; = \u0026#39;com.mysql.jdbc.Driver\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;username\u0026#39; = \u0026#39;sql-demo\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;password\u0026#39; = \u0026#39;demo-sql\u0026#39;\\n\u0026#34; + \u0026#34;)\u0026#34;); Table transactions = tEnv.from(\u0026#34;transactions\u0026#34;); report(transactions).executeInsert(\u0026#34;spend_report\u0026#34;); 拆解代码 The Execution Environment 前两行设置了你的 TableEnvironment。表环境是你如何为你的 Job 设置属性，指定你是在写批处理还是流式应用，以及创建你的源。本演练创建了一个使用流式执行的标准表环境。\nEnvironmentSettings settings = EnvironmentSettings.newInstance().build(); TableEnvironment tEnv = TableEnvironment.create(settings); 注册表 接下来，在当前目录中注册了表，您可以使用这些表连接到外部系统，以便读写批处理和流数据。表源提供对存储在外部系统中的数据的访问，如数据库、键值存储、消息队列或文件系统。table sink 向外部存储系统发出一个表。根据源和 sink 的类型，它们支持不同的格式，如 CSV、JSON、Avro 或 Parquet。\ntEnv.executeSql(\u0026#34;CREATE TABLE transactions (\\n\u0026#34; + \u0026#34; account_id BIGINT,\\n\u0026#34; + \u0026#34; amount BIGINT,\\n\u0026#34; + \u0026#34; transaction_time TIMESTAMP(3),\\n\u0026#34; + \u0026#34; WATERMARK FOR transaction_time AS transaction_time - INTERVAL \u0026#39;5\u0026#39; SECOND\\n\u0026#34; + \u0026#34;) WITH (\\n\u0026#34; + \u0026#34; \u0026#39;connector\u0026#39; = \u0026#39;kafka\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;topic\u0026#39; = \u0026#39;transactions\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;properties.bootstrap.servers\u0026#39; = \u0026#39;kafka:9092\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;format\u0026#39; = \u0026#39;csv\u0026#39;\\n\u0026#34; + \u0026#34;)\u0026#34;); 注册了两个表：一个是交易输入表，一个是消费报告输出表。交易(transaction)表让我们可以读取信用卡交易，其中包含账户ID(account_id)、时间戳(transaction_time)和美元金额(amount)。该表是在一个名为 transactions 的 Kafka 主题上的逻辑视图，包含 CSV 数据。\ntEnv.executeSql(\u0026#34;CREATE TABLE spend_report (\\n\u0026#34; + \u0026#34; account_id BIGINT,\\n\u0026#34; + \u0026#34; log_ts TIMESTAMP(3),\\n\u0026#34; + \u0026#34; amount BIGINT\\n,\u0026#34; + \u0026#34; PRIMARY KEY (account_id, log_ts) NOT ENFORCED\u0026#34; + \u0026#34;) WITH (\\n\u0026#34; + \u0026#34; \u0026#39;connector\u0026#39; = \u0026#39;jdbc\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;url\u0026#39; = \u0026#39;jdbc:mysql://mysql:3306/sql-demo\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;table-name\u0026#39; = \u0026#39;spend_report\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;driver\u0026#39; = \u0026#39;com.mysql.jdbc.Driver\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;username\u0026#39; = \u0026#39;sql-demo\u0026#39;,\\n\u0026#34; + \u0026#34; \u0026#39;password\u0026#39; = \u0026#39;demo-sql\u0026#39;\\n\u0026#34; + \u0026#34;)\u0026#34;); 第二张表 spend_report，存储了最终的汇总结果。其底层存储是 MySql 数据库中的一张表。\n查询 配置好环境和注册好表之后，你就可以构建你的第一个应用程序了。从 TableEnvironment 中，你可以从一个输入表中读取它的行，然后使用 executeInsert 将这些结果写入到一个输出表中。report 函数是你实现业务逻辑的地方。它目前还没有被实现。\nTable transactions = tEnv.from(\u0026#34;transactions\u0026#34;); report(transactions).executeInsert(\u0026#34;spend_report\u0026#34;); 测试 该项目包含一个二次测试类 SpendReportTest，用于验证报表的逻辑。它以批处理模式创建了一个表环境。\nEnvironmentSettings settings = EnvironmentSettings.newInstance().inBatchMode().build(); TableEnvironment tEnv = TableEnvironment.create(settings); Flink 的独特属性之一是它在批处理和流式处理之间提供一致的语义。这意味着你可以在静态数据集上以批处理模式开发和测试应用程序，并以流式应用程序的形式部署到生产中。\n尝试一下 现在有了 Job 设置的骨架，你就可以添加一些业务逻辑了。目标是建立一个报告，显示每个账户在一天中每个小时的总支出。这意味着时间戳列需要从毫秒到小时的颗粒度进行舍入。\nFlink 支持用纯 SQL 或使用 Table API 开发关系型应用。Table API 是一个受 SQL 启发的流畅 DSL，可以用 Python、Java 或 Scala 编写，并支持强大的 IDE 集成。就像 SQL 查询一样，Table 程序可以选择所需的字段，并通过你的键进行分组。这些功能，加上内置的函数，如 floor 和 sum，写这个报告问题不大。\npublic static Table report(Table transactions) { return transactions.select( $(\u0026#34;account_id\u0026#34;), $(\u0026#34;transaction_time\u0026#34;).floor(TimeIntervalUnit.HOUR).as(\u0026#34;log_ts\u0026#34;), $(\u0026#34;amount\u0026#34;)) .groupBy($(\u0026#34;account_id\u0026#34;), $(\u0026#34;log_ts\u0026#34;)) .select( $(\u0026#34;account_id\u0026#34;), $(\u0026#34;log_ts\u0026#34;), $(\u0026#34;amount\u0026#34;).sum().as(\u0026#34;amount\u0026#34;)); } 用户定义的函数 Flink 包含有限的内置函数，有时你需要用用户定义的函数来扩展它。如果 floor 不是预定义的，你可以自己实现它。\nimport java.time.LocalDateTime; import java.time.temporal.ChronoUnit; import org.apache.flink.table.annotation.DataTypeHint; import org.apache.flink.table.functions.ScalarFunction; public class MyFloor extends ScalarFunction { public @DataTypeHint(\u0026#34;TIMESTAMP(3)\u0026#34;) LocalDateTime eval( @DataTypeHint(\u0026#34;TIMESTAMP(3)\u0026#34;) LocalDateTime timestamp) { return timestamp.truncatedTo(ChronoUnit.HOURS); } } 然后迅速将其集成到你的应用程序中。\npublic static Table report(Table transactions) { return transactions.select( $(\u0026#34;account_id\u0026#34;), call(MyFloor.class, $(\u0026#34;transaction_time\u0026#34;)).as(\u0026#34;log_ts\u0026#34;), $(\u0026#34;amount\u0026#34;)) .groupBy($(\u0026#34;account_id\u0026#34;), $(\u0026#34;log_ts\u0026#34;)) .select( $(\u0026#34;account_id\u0026#34;), $(\u0026#34;log_ts\u0026#34;), $(\u0026#34;amount\u0026#34;).sum().as(\u0026#34;amount\u0026#34;)); } 这个查询会消耗 transactions 表的所有记录，计算报表，并以高效、可扩展的方式输出结果。使用该实现运行测试将通过。\n添加窗口 基于时间的数据分组是数据处理中的典型操作，尤其是在处理无限流时。基于时间的分组被称为窗口，Flink 提供了灵活的窗口语义。最基本的窗口类型称为 Tumble 窗口，它有一个固定的大小，其桶不重叠。\npublic static Table report(Table transactions) { return transactions .window(Tumble.over(lit(1).hour()).on($(\u0026#34;transaction_time\u0026#34;)).as(\u0026#34;log_ts\u0026#34;)) .groupBy($(\u0026#34;account_id\u0026#34;), $(\u0026#34;log_ts\u0026#34;)) .select( $(\u0026#34;account_id\u0026#34;), $(\u0026#34;log_ts\u0026#34;).start().as(\u0026#34;log_ts\u0026#34;), $(\u0026#34;amount\u0026#34;).sum().as(\u0026#34;amount\u0026#34;)); } 这就定义了你的应用程序使用基于时间戳列的一小时翻滚窗口。因此，时间戳为 2019-06-01 01:23:47 的行被放在 2019-06-01 01:00:00 窗口中。\n基于时间的聚合是独一无二的，因为在连续流应用中，时间与其他属性不同，一般是向前移动的。与 floor 和你的 UDF 不同，窗口函数是内在的，它允许运行时应用额外的优化。在批处理上下文中，窗口提供了一个方便的 API，用于通过时间戳属性对记录进行分组。\n用这个实现运行测试也会通过。\n再来一次，用流! 就这样，一个功能齐全的、有状态的、分布式的流式应用! 查询不断地消耗 Kafka 的事务流，计算每小时的花费，并在结果准备好后立即发出。由于输入是界的，所以查询一直在运行，直到手动停止。而且由于 Job 使用了基于时间窗口的聚合，所以当框架知道某个窗口不会再有记录到达时，Flink 可以进行特定的优化，比如状态清理。\n表游乐场是完全 docker 化的，可以作为流式应用在本地运行。该环境包含一个 Kafka 主题、一个连续数据生成器、MySql 和 Grafana。\n从 table-walkthrough 文件夹内启动 docker-compose 脚本。\n$ docker-compose build $ docker-compose up -d 你可以通过 Flink 控制台查看正在运行的作业信息。\n从 MySQL 里面探索结果。\n$ docker-compose exec mysql mysql -Dsql-demo -usql-demo -pdemo-sql mysql\u0026gt; use sql-demo; Database changed mysql\u0026gt; select count(*) from spend_report; +----------+ | count(*) | +----------+ | 110 | +----------+ 最后，去 Grafana 看看完全可视化的结果吧!\n"},"name":"Flink 中的 Table API","published":"2020-07-26T00:00:00+08:00","summary":"Real Time Reporting with the Table API","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-07-30-table-api-in-flink/"},{"content":{"html":"\u003ch2 id=\"语法\"\u003e语法\u003c/h2\u003e\n\u003ch3 id=\"数值字面量系数\"\u003e数值字面量系数\u003c/h3\u003e\n\u003cp\u003e在标识符或圆括号前面直接放一个数字, 例如 \u003ccode\u003e2x\u003c/code\u003e 或 \u003ccode\u003e2(x+y)\u003c/code\u003e, 会被认为是把标识符和它前面的数字相乘。这样写多项式就很方便了。\u003c/p\u003e\n\u003ch3 id=\"向量化的点号运算符\"\u003e向量化的点号运算符\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e.+\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e.+\u003c/code\u003e 类似于 Raku 中的 \u003ccode\u003e»+»\u003c/code\u003e 超运算符:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e[1,2,3] »+» 3\n[4 5 6]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e但是 Julia 的 \u003ccode\u003eVectorized \u0026quot;dot\u0026quot;\u003c/code\u003e 语法没有 Raku 的超运算符语法清晰。\u003c/p\u003e\n\u003cp\u003e类似的例子还有:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003esin\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# 0.479425538604203\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.5\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"n\"\u003esin\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e0.479425538604203\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e0.8414709848078965\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e0.9974949866040544\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eB\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mf\"\u003e4.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e5.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e6.0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e13.42477796076938\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e17.42477796076938\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e21.42477796076938\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e15.566370614359172\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e18.566370614359172\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e21.566370614359172\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eB\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e19.0\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e26.0\u003c/span\u003e\n \u003cspan class=\"mf\"\u003e33.0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e等价的 Raku 写法为:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003esub f(\\x, \\y) { 3*x + 4*y};\n\nmy \\A = [1.0, 2.0, 3.0];\nmy \\B = [4.0, 5.0, 6.0];\n\nA».\u0026amp;f(pi)\n[15.566370614359172 18.566370614359172 21.566370614359172]\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"链式比较\"\u003e链式比较\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRaku 同样支持这种链式比较。\u003c/p\u003e\n\u003ch3 id=\"虚数\"\u003e虚数\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ereal\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"nb\"\u003eim\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e         \u003cspan class=\"c\"\u003e# 1\u003c/span\u003e\n\u003cspan class=\"n\"\u003eimag\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"nb\"\u003eim\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e         \u003cspan class=\"c\"\u003e# 2\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"nb\"\u003eim\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"nb\"\u003eim\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# 5 + 0im\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e(1 + 2i).re         # 1\n(1 + 2i).im         # 2\n(1 + 2i) * (1 - 2i) # 5+0i\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"命名参数\"\u003e命名参数\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"n\"\u003eplot\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003estyle\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003es\u003c/span\u003e\u003cspan class=\"s\"\u003eo\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003ei\u003c/span\u003e\u003cspan class=\"s\"\u003ed\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewidth\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecolor\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003eb\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"s\"\u003ec\u003c/span\u003e\u003cspan class=\"s\"\u003ek\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e###\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eplot\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewidth\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eplot\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ewidth\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"函数组合\"\u003e函数组合\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esqrt\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"n\"\u003e∘\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# 3.0\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"n\"\u003e∘\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"n\"\u003ereverse\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"n\"\u003e∘\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"n\"\u003euppercase\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003ey\u003c/span\u003e\u003cspan class=\"s\"\u003eo\u003c/span\u003e\u003cspan class=\"s\"\u003eu\u003c/span\u003e\u003cspan class=\"s\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003ec\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"s\"\u003en\u003c/span\u003e\u003cspan class=\"s\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003ec\u003c/span\u003e\u003cspan class=\"s\"\u003eo\u003c/span\u003e\u003cspan class=\"s\"\u003em\u003c/span\u003e\u003cspan class=\"s\"\u003ep\u003c/span\u003e\u003cspan class=\"s\"\u003eo\u003c/span\u003e\u003cspan class=\"s\"\u003es\u003c/span\u003e\u003cspan class=\"s\"\u003ee\u003c/span\u003e\u003cspan class=\"s\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003ef\u003c/span\u003e\u003cspan class=\"s\"\u003eu\u003c/span\u003e\u003cspan class=\"s\"\u003en\u003c/span\u003e\u003cspan class=\"s\"\u003ec\u003c/span\u003e\u003cspan class=\"s\"\u003et\u003c/span\u003e\u003cspan class=\"s\"\u003ei\u003c/span\u003e\u003cspan class=\"s\"\u003eo\u003c/span\u003e\u003cspan class=\"s\"\u003en\u003c/span\u003e\u003cspan class=\"s\"\u003es\u003c/span\u003e\u003cspan class=\"s\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003ei\u003c/span\u003e\u003cspan class=\"s\"\u003ek\u003c/span\u003e\u003cspan class=\"s\"\u003ee\u003c/span\u003e\u003cspan class=\"s\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003et\u003c/span\u003e\u003cspan class=\"s\"\u003eh\u003c/span\u003e\u003cspan class=\"s\"\u003ei\u003c/span\u003e\u003cspan class=\"s\"\u003es\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eChar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n \u003cspan class=\"sc\"\u003e\u0026#39;U\u0026#39;\u003c/span\u003e\n \u003cspan class=\"sc\"\u003e\u0026#39;N\u0026#39;\u003c/span\u003e\n \u003cspan class=\"sc\"\u003e\u0026#39;E\u0026#39;\u003c/span\u003e\n \u003cspan class=\"sc\"\u003e\u0026#39;S\u0026#39;\u003c/span\u003e\n \u003cspan class=\"sc\"\u003e\u0026#39;E\u0026#39;\u003c/span\u003e\n \u003cspan class=\"sc\"\u003e\u0026#39;S\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"piping\"\u003ePiping\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esqrt\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"c\"\u003e# 7.416198487095663\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# 等价于\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esqrt\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"n\"\u003e∘\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c\"\u003e# 7.416198487095663\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"广播和管道一起使用\"\u003e广播和管道一起使用\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003ei\u003c/span\u003e\u003cspan class=\"s\"\u003es\u003c/span\u003e\u003cspan class=\"s\"\u003et\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003eo\u003c/span\u003e\u003cspan class=\"s\"\u003ef\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003es\u003c/span\u003e\u003cspan class=\"s\"\u003et\u003c/span\u003e\u003cspan class=\"s\"\u003er\u003c/span\u003e\u003cspan class=\"s\"\u003ei\u003c/span\u003e\u003cspan class=\"s\"\u003en\u003c/span\u003e\u003cspan class=\"s\"\u003eg\u003c/span\u003e\u003cspan class=\"s\"\u003es\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003euppercase\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereverse\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etitlecase\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"kt\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003eA\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003et\u003c/span\u003e\u003cspan class=\"s\"\u003es\u003c/span\u003e\u003cspan class=\"s\"\u003ei\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003eO\u003c/span\u003e\u003cspan class=\"s\"\u003ef\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"组合类型\"\u003e组合类型\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e不可变组合类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eFoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebaz\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\n    \u003cspan class=\"n\"\u003equx\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003er\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"s\"\u003ek\u003c/span\u003e\u003cspan class=\"s\"\u003eu\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"s\"\u003en\u003c/span\u003e\u003cspan class=\"s\"\u003eg\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# Foo\u003c/span\u003e\n\u003cspan class=\"n\"\u003etypeof\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# DataType\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e     \u003cspan class=\"c\"\u003e# rakulang\u003c/span\u003e\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equx\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e     \u003cspan class=\"c\"\u003e# 1.5\u003c/span\u003e\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equx\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"c\"\u003e# ERROR: setfield! immutable struct of type Foo cannot be changed\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e可变组合类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003emutable\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eBar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebaz\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n    \u003cspan class=\"n\"\u003equx\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003er\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"s\"\u003ek\u003c/span\u003e\u003cspan class=\"s\"\u003eu\u003c/span\u003e\u003cspan class=\"s\"\u003ed\u003c/span\u003e\u003cspan class=\"s\"\u003eo\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e6.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebaz\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equx\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"联合类型\"\u003e联合类型\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003eIntOrString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eUnion\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"kt\"\u003eAbstractString\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIntOrString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e          \u003cspan class=\"c\"\u003e# 1\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003er\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"s\"\u003ek\u003c/span\u003e\u003cspan class=\"s\"\u003eu\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"s\"\u003en\u003c/span\u003e\u003cspan class=\"s\"\u003eg\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIntOrString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"c\"\u003e# rakulang\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"参数化类型\"\u003e参数化类型\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e参数化组合类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003epoint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003epoint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"c\"\u003e# 1.0\u003c/span\u003e\n\u003cspan class=\"n\"\u003epoint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"c\"\u003e# 2.0\u003c/span\u003e\n\n\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eU\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eU\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"kt\"\u003eAbstractString\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e6.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003er\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"s\"\u003ek\u003c/span\u003e\u003cspan class=\"s\"\u003eu\u003c/span\u003e\u003cspan class=\"s\"\u003el\u003c/span\u003e\u003cspan class=\"s\"\u003ea\u003c/span\u003e\u003cspan class=\"s\"\u003en\u003c/span\u003e\u003cspan class=\"s\"\u003eg\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"c\"\u003e# 6.0\u003c/span\u003e\n\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"c\"\u003e# rakulang\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"多重分派\"\u003e多重分派\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-julia\" data-lang=\"julia\"\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emethods\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# 2 methods for generic function \u0026#34;f\u0026#34;:\u003c/span\u003e\n\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kp\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"n\"\u003eat\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e33\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"kt\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kp\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eMain\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"n\"\u003eat\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e \u003cspan class=\"n\"\u003eREPL\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e34\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e2.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# 7\u003c/span\u003e\n\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e   \u003cspan class=\"c\"\u003e# 1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"语法 数值字面量系数 在标识符或圆括号前面直接放一个数字, 例如 2x 或 2(x+y), 会被认为是把标识符和它前面的数字相乘。这样写多项式就很方便了。\n向量化的点号运算符 [1,2,3] .+ 3 3-element Array{Int64,1}: 4 5 6 .+ 类似于 Raku 中的 »+» 超运算符:\n[1,2,3] »+» 3 [4 5 6] 但是 Julia 的 Vectorized \u0026quot;dot\u0026quot; 语法没有 Raku 的超运算符语法清晰。\n类似的例子还有:\nsin(0.5) # 0.479425538604203 A = [0.5, 1.0, 1.5] sin.(A) 3-element Array{Float64,1}: 0.479425538604203 0.8414709848078965 0.9974949866040544 f(x,y) = 3x + 4y; A = [1.0, 2.0, 3.0]; B = [4.0, 5.0, 6.0]; f.(pi, A) 3-element Array{Float64,1}: 13.42477796076938 17.42477796076938 21.42477796076938 f.(A, pi) 3-element Array{Float64,1}: 15.566370614359172 18.566370614359172 21.566370614359172 f.(A,B) 3-element Array{Float64,1}: 19.0 26.0 33.0 等价的 Raku 写法为:\nsub f(\\x, \\y) { 3*x + 4*y}; my \\A = [1.0, 2.0, 3.0]; my \\B = [4.0, 5.0, 6.0]; A».\u0026amp;f(pi) [15.566370614359172 18.566370614359172 21.566370614359172] 链式比较 1 \u0026lt; 2 \u0026lt;= 2 \u0026lt; 3 == 3 \u0026gt; 2 \u0026gt;= 1 == 1 \u0026lt; 3 != 5 true Raku 同样支持这种链式比较。\n虚数 real(1 + 2im) # 1 imag(1 + 2im) # 2 (1 + 2im) * (1 - 2im) # 5 + 0im (1 + 2i).re # 1 (1 + 2i).im # 2 (1 + 2i) * (1 - 2i) # 5+0i 命名参数 function plot(x, y; style=\u0026#34;solid\u0026#34;, width=1, color=\u0026#34;black\u0026#34;) ### end plot(x, y, width=2) plot(x, y, :width =\u0026gt; 2) 函数组合 (sqrt ∘ +)(3,6) # 3.0 map(first ∘ reverse ∘ uppercase, split(\u0026#34;youcancomposefunctionslikethis\u0026#34;)) 6-element Array{Char,1}: \u0026#39;U\u0026#39; \u0026#39;N\u0026#39; \u0026#39;E\u0026#39; \u0026#39;S\u0026#39; \u0026#39;E\u0026#39; \u0026#39;S\u0026#39; Piping 1:10 |\u0026gt; sum |\u0026gt; sqrt # 7.416198487095663 # 等价于 (sqrt ∘ sum)(1:10) # 7.416198487095663 广播和管道一起使用 [\u0026#34;a\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;of\u0026#34;, \u0026#34;strings\u0026#34;] .|\u0026gt; [uppercase, reverse, titlecase, length] 4-element Array{Any,1}: \u0026#34;A\u0026#34; \u0026#34;tsil\u0026#34; \u0026#34;Of\u0026#34; 7 组合类型  不可变组合类型  struct Foo bar baz::Int qux::Float64 end foo = Foo(\u0026#34;rakulang\u0026#34;, 6, 1.5) typeof(foo) # Foo typeof(Foo) # DataType foo.bar # rakulang foo.qux # 1.5 foo.qux = 1 # ERROR: setfield! immutable struct of type Foo cannot be changed  可变组合类型  mutable struct Bar baz qux::Float64 end bar = Bar(\u0026#34;rakudo\u0026#34;, 6.0) bar.baz = 1//2 bar.qux = 2.0 联合类型 IntOrString = Union{Int,AbstractString} 1 :: IntOrString # 1 \u0026#34;rakulang\u0026#34; :: IntOrString # rakulang 参数化类型  参数化组合类型  struct Point{T} x::T y::T end point=Point{Float64}(1.0, 2.0) point.x # 1.0 point.y # 2.0 struct Circle{T,U} x::T y::U end c = Circle{Float64,AbstractString}(6.0, \u0026#34;rakulang\u0026#34;) c.x # 6.0 c.y # rakulang 多重分派 f(x::Float64, y::Float64) = 2x + y f(x::Number, y::Number) = 2x - y methods(f) # 2 methods for generic function \u0026#34;f\u0026#34;: [1] f(x::Float64, y::Float64) in Main at REPL[33]:1 [2] f(x::Number, y::Number) in Main at REPL[34]:1 f(2.0, 3.0) # 7 f(2, 3.0) # 1 "},"name":"Julia 语言学习笔记","published":"2020-07-26T00:00:00+08:00","summary":"Learning Julia","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-07-27-learning-julialang/"},{"content":{"html":"\u003cp\u003e函数式编程是一种编程风格，现代语言或多或少都支持这种风格。在这篇文章中，我想解释一下函数式编程如何为你提供强大的抽象，使你的代码更加简洁。我将用 Raku 和 Python 中的例子来说明这一点，我们将看到这两种语言都是函数式编程的优秀语言。\u003c/p\u003e\n\u003ch2 id=\"raku-简介\"\u003eRaku: 简介\u003c/h2\u003e\n\u003cp\u003e本文的代码示例是用 Python 和 Raku 编写的。我想大多数人都熟悉 Python，但 Raku 不太为人所知，所以我先解释一下基础知识。本文中的代码不是很习惯，所以如果你懂得其他编程语言，应该很容易理解。\u003c/p\u003e\n\u003cp\u003eRaku 与 Perl 最为相似。两种语言在语法上都与 C/C++、Java 和 JavaScript 相似：基于块，语句用分号隔开，块用大括号分界，参数列表放在括号中，用逗号隔开。将 Perl 和 Raku 与其他语言区分开来的主要特征是使用魔符（\u0026ldquo;有趣的字符\u0026rdquo;）来识别变量的类型：\u003ccode\u003e$\u003c/code\u003e 代表标量，\u003ccode\u003e@\u003c/code\u003e 代表数组，\u003ccode\u003e%\u003c/code\u003e 代表哈希（映射），\u003ccode\u003e\u0026amp;\u003c/code\u003e 代表子程序。变量也有关键字来标识它们的作用域，我只用 \u003ccode\u003emy\u003c/code\u003e 来标识变量的词法作用域。子程序是用 \u003ccode\u003esub\u003c/code\u003e 关键字来声明的，子程序可以是命名的，也可以是匿名的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003esub square ($x) {\n    $x*$x;\n}\n# anonymous subroutine \nmy $anon_square = sub ($x) {\n    $x*$x;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在 Python 中，这将是：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003esquare\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# anonymous subroutine \u003c/span\u003e\n\u003cspan class=\"n\"\u003eanon_square\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRaku 支持无符号变量，并使用 \u003ccode\u003e\\\u003c/code\u003e 语法来声明它们。更多关于普通变量和无符号变量之间的区别，请参见 \u003ca href=\"https://docs.raku.org/language/variables#Sigilless_variables\"\u003eRaku 文档\u003c/a\u003e。例如(\u003ccode\u003esay\u003c/code\u003e 打印它的参数，后面加一个换行)。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy \\x = 42; # sigilless\nmy $y = 43; \nsay x + $y; \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在本文的代码中，我将尽可能地使用无符号变量。\u003c/p\u003e\n\u003cp\u003eRaku 有几种类型的序列数据结构。在下面的代码中，我将使用\u003ca href=\"https://docs.raku.org/language/list\"\u003e列表和数组\u003c/a\u003e以及\u003ca href=\"https://docs.raku.org/type/Range\"\u003e范围\u003c/a\u003e。在 Raku 中，列表和数组的主要区别在于，列表是不可变的，这意味着一旦创建，就不能修改。所以它是一个只读的数据结构。要\u0026quot;更新\u0026quot;一个不可变的数据结构，你需要创建一个更新的副本。另一方面，数组是可变的，所以我们可以更新它们的元素，扩展它们，缩小它们等等。所有的更新都发生在原始数据的位置上。\u003c/p\u003e\n\u003cp\u003eRaku 的数组类似于 Python 的 list，Raku 的 list 类似于 Python 的 tuple，也是不可变的。除了语法之外，Raku 中的范围与 Python 中的范围相似，都是不可变的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy @array1 = 1,2,3; #=\u0026gt; an array because of the '@' sigil\nmy \\array2 = [1,2,3]; #=\u0026gt; an array, because of the '[...]'\n\nmy \\range1 = 1 .. 10; #=\u0026gt; a range 1 .. 10\nmy @array3 = 1 .. 10; #=\u0026gt; an array from a range, because of the '@' sigil\n\nmy \\list1 = 1,2,3; #=\u0026gt; a list\nmy $list2 = (1,2,3); #=\u0026gt; also a list\nmy \\list3 = |(1 .. 10);  #=\u0026gt; an array from a range because of the '|' flattening operation\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e相应的 Python 代码为:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003elist1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; a list from a tuple\u003c/span\u003e\n\u003cspan class=\"n\"\u003elist2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; a list, because of the \u0026#39;[...]\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003erange1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; a range 1 .. 10\u003c/span\u003e\n\u003cspan class=\"n\"\u003elist3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; a list from a range\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003etuple1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; a tuple\u003c/span\u003e\n\u003cspan class=\"n\"\u003etuple2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; a tuple from a list\u003c/span\u003e\n\u003cspan class=\"n\"\u003etuple3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; creates a tuple from a range\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e其他具体的语法或功能将针对具体的例子进行解释。\u003c/p\u003e\n\u003ch2 id=\"其他任何名称的函数---作为值的函数\"\u003e\u003cem\u003e其他任何名称的函数\u003c/em\u003e - 作为值的函数\u003c/h2\u003e\n\u003cp\u003e函数是函数式编程的精髓。正如我在\u003ca href=\"https://wimvanderbauwhede.github.io/articles/everything-is-a-function\"\u003e\u0026ldquo;万物皆函数\u0026rdquo;\u003c/a\u003e一文中所解释的那样，在适当的函数式语言中，所有的结构都是由函数构建的。\u003c/p\u003e\n\u003cp\u003e所有现代编程语言都有函数、程序、子程序或方法的概念。它们是代码重用的重要机制。通常，我们认为函数是对一些输入值进行操作以产生一个或多个输出值的东西。输入值可以是全局声明的，也可以是一个类的属性，或者作为参数传递给函数。同样，输出值可以直接返回，到全局变量，作为类的属性或通过修改输入值。\u003c/p\u003e\n\u003cp\u003e要想从函数式编程中获益最多，最好是函数是纯粹的，这意味着对函数的调用总是对相同的输入产生相同的输出。在实践中，如果函数只接受输入作为参数，并直接返回输出，这一点比较容易实现，但这并不是必不可少的。\u003c/p\u003e\n\u003cp\u003e函数式编程的关键特征是，函数的输入值和输出值本身可以是函数。所以函数必须是你语言中的值。有时这被称为 \u0026ldquo;函数必须是一等公民\u0026rdquo;，一个接收和/或返回函数的函数有时被称为\u0026quot;高阶函数\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e如果函数是值，那么我们就可以将它们赋值给变量。特别是我们会将它们赋值给其他函数的参数。但我们也可以将它们赋值给普通的变量。\u003c/p\u003e\n\u003cp\u003e让我们考虑以下函数，\u003ccode\u003echoose\u003c/code\u003e，它需要三个参数 \u003ccode\u003et\u003c/code\u003e，\u003ccode\u003ef\u003c/code\u003e 和 \u003ccode\u003ec\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub choose (\\t, \\f, \\d) {\n    if (d) {t} else {f}\n}\n# Python\ndef choose (t, f, d):\n  if d:\n    return t \n  else:\n    return f\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e首先让我们用字符串作为前两个参数的值来调用 \u003ccode\u003echoose\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\tstr = \u0026quot;True!\u0026quot;;\nmy \\fstr = \u0026quot;False!\u0026quot;;\n\nmy \\res_str = choose(tstr, fstr, True);\n\nsay res_str; #=\u0026gt; says \u0026quot;True!\u0026quot;\n# Python\ntstr = \u0026quot;True!\u0026quot;\nfstr = \u0026quot;False!\u0026quot;\n\nres_str = choose(tstr,fstr,True)\n\nprint(res_str) #=\u0026gt; says \u0026quot;True!\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e现在让我们尝试用函数作为参数:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub tt (\\s) { say \u0026quot;True {s}!\u0026quot; }\nsub ff (\\s) { say \u0026quot;False {s}!\u0026quot; }\n\nmy \u0026amp;res_f = choose(\u0026amp;tt, \u0026amp;ff, False);\n\nsay \u0026amp;res_f; #=\u0026gt; says \u0026amp;ff\nres_f(\u0026quot;rumour\u0026quot;); #=\u0026gt; says \u0026quot;False rumour!\u0026quot;\n# Python\ndef tt(s):\n  print( \u0026quot;True \u0026quot;+s+\u0026quot;!\u0026quot;)\ndef ff(s):  \n  print( \u0026quot;False\u0026quot;+s+\u0026quot;!\u0026quot;)\n\nres_f = choose(tt,ff,True)\n\nprint(res_f) #=\u0026gt; says \u0026lt;function tt at 0x7f829c3aa310\u0026gt;\nres_f(\u0026quot;rumour\u0026quot;) #=\u0026gt; says \u0026quot;False rumour!\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e因此，我们的函数 \u003ccode\u003echoose\u003c/code\u003e  接收两个函数作为它的前两个参数，并返回一个函数。在 Raku 中，我们需要在函数名上加上 \u003ccode\u003e\u0026amp;\u003c/code\u003e 符号，因为否则它们会被求值：像 \u003ccode\u003ett\u003c/code\u003e 这样的裸函数名就等于调用没有参数的函数 \u003ccode\u003ett()\u003c/code\u003e。通过将这个函数赋值给一个变量(\u003ccode\u003eres_f\u003c/code\u003e)，我们现在可以将 \u003ccode\u003eres_f\u003c/code\u003e 作为一个函数来调用，它最终会根据选择来调用 \u003ccode\u003ett\u003c/code\u003e 或 \u003ccode\u003eff\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"函数不需要名字\"\u003e函数不需要名字\u003c/h2\u003e\n\u003cp\u003e现在，如果我们可以将函数赋值给变量，它们本身其实并不需要一个名字。所以我们的函数可以是匿名的。大多数语言都支持匿名函数，在函数式语言中，它们通常被称为 \u0026ldquo;lambda 函数\u0026rdquo;。在 Raku 中，我们有两种方法来创建匿名函数。\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003esub (...)\u003c/code\u003e 语法:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy \\tt = sub (\\s) { say \u0026quot;True {s}!\u0026quot; };\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e或者使用\u003ca href=\"https://docs.raku.org/language/functions#index-entry-pointy_blocks\"\u003e\u0026lsquo;尖号块\u0026rsquo;\u003c/a\u003e语法，这样更紧凑一些:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy \\ff = -\u0026gt; \\s { say \u0026quot;False {s}!\u0026quot; };\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePython 使用 \u003ccode\u003elambda\u003c/code\u003e 关键字:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003ett\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eTrue \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e!\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eff\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eFalse \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e!\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所以现在我们可以说:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy \u0026amp;res_f = choose(tt, ff, True);\n\nsay \u0026amp;res_f; #=\u0026gt; says sub { }\nres_f(\u0026quot;story\u0026quot;); #=\u0026gt; says \u0026quot;True story!\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当我们打印出函数所绑定的变量时，Raku 返回 \u003ccode\u003esub { }\u003c/code\u003e 来表示该变量包含一个函数。\u003c/p\u003e\n\u003cp\u003e在 Python 中:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003eres_f\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echoose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ett\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003eres_f\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; says \u0026lt;function \u0026lt;lambda\u0026gt; at 0x7f829b298b80\u0026gt;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eres_f\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estory\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; says \u0026#34;True story!\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"例子-map-grep-和-reduce\"\u003e例子: \u003ccode\u003emap\u003c/code\u003e、 \u003ccode\u003egrep\u003c/code\u003e 和 \u003ccode\u003ereduce\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003e函数的功能有很多用途，我只想重点介绍三个在 Raku 中现成的例子：\u003ccode\u003emap\u003c/code\u003e、\u003ccode\u003ereduce\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e。Python 有 \u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003efilter\u003c/code\u003e，并通过 \u003ccode\u003efunctools\u003c/code\u003e 模块提供 \u003ccode\u003ereduce\u003c/code\u003e。这些函数的共同点是，它们提供了一种对列表进行 \u003ccode\u003efor\u003c/code\u003e 循环的替代方法。\u003c/p\u003e\n\u003ch3 id=\"map--对列表中的所有元素进行函数应用\"\u003e\u003ccode\u003emap\u003c/code\u003e : 对列表中的所有元素进行函数应用\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003emap\u003c/code\u003e 有两个参数：一个函数和一个列表。它将函数按顺序应用于列表中的所有值，并返回结果，例如将列表中的所有值平方。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy \\res = map -\u0026gt; \\x {x*x} , 1 .. 10;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在 Python 中，我们需要显式地创建元组，但除了语法上的差异，结构是完全一样的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这是对传统 \u003ccode\u003efor\u003c/code\u003e 循环的功能替代。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\res = [];\nfor 1 .. 10 -\u0026gt; \\x {\n    res.push(x*x);\n}\n# Python\nres = []\nfor x in range(1,11):\n    res.append(x*x)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e请注意，在 Raku 和 Python 中，我们需要为 \u003ccode\u003efor\u003c/code\u003e 循环版本使用一个可变的数据结构，而 \u003ccode\u003emap\u003c/code\u003e 版本则使用不可变的数据结构。\u003c/p\u003e\n\u003ch3 id=\"grep--过滤列表\"\u003e\u003ccode\u003egrep\u003c/code\u003e : 过滤列表\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003egrep\u003c/code\u003e (在 Python 中称为 \u003ccode\u003efilter\u003c/code\u003e)也接受参数，一个函数和一个列表，但它只返回函数返回真的列表中的值。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\res = grep -\u0026gt; \\x { x % 5 == 0 }, 1 .. 30;\n# Python\nres = tuple(filter( lambda x : x % 5 == 0 ,range(1,31)))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当然我们也可以用 \u003ccode\u003efor\u003c/code\u003e 循环和 \u003ccode\u003eif\u003c/code\u003e 语句来写，但这又需要一个可变的数据结构。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\res = [];\nfor 1 .. 30 -\u0026gt; \\x {\n    if (x % 5 == 0) {\n    res.push(x);\n    }\n}\n# Python\nres = []\nfor x in range(1,31): \n  if (x % 5 == 0):\n    res.append(x)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e 的好处是，你可以很容易地把它们链在一起。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\ngrep -\u0026gt; \\x { x % 5 == 0 }, map -\u0026gt; \\x {x*x}, 1..30\n# Python\nres = tuple(filter( lambda x : x % 5 == 0 ,map( lambda x : x*x ,range(1,31))))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这是因为 \u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e 接受一个列表并返回一个列表，所以只要你需要对一个列表进行操作，就可以通过链式调用来实现。\u003c/p\u003e\n\u003ch3 id=\"reduce--化整为零\"\u003e\u003ccode\u003ereduce\u003c/code\u003e : 化整为零\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ereduce\u003c/code\u003e 也接受一个函数和一个 list，但它使用函数将 list 的所有元素合并成一个结果。所以函数必须接受两个参数。第二个参数是从列表中取出的元素，第一个参数作为状态变量来组合所有元素。例如，计算一个数字列表的和:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\sum = reduce sub (\\acc,\\elt) {acc+elt}, 1 .. 10;\n\nsay sum; #=\u0026gt; says 55\n# Python\nfrom functools import reduce\n\nsum = reduce(lambda acc,elt: acc+elt, range(1,11))\n\nprint( sum); #=\u0026gt; says 55\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里发生的情况是，首先将 \u003ccode\u003eacc\u003c/code\u003e 设置为列表中的第一个元素(1)，然后加上第二个元素，所以 \u003ccode\u003eacc\u003c/code\u003e 变成 1+2=3；然后加上第三个元素(3)，以此类推。其效果是将列表中的所有数字连续相加。\u003c/p\u003e\n\u003cp\u003e为了更清楚地说明这一点，我们来写一个我们自己的 \u003ccode\u003ereduce\u003c/code\u003e 版本。\u003c/p\u003e\n\u003ch3 id=\"编写你自己的\"\u003e编写你自己的\u003c/h3\u003e\n\u003cp\u003e在许多函数式语言中，从左到右（从最低索引开始）和从右到左（从最高索引开始）的还原是有区别的。这一点很重要，因为根据做还原的函数，如果从左边或右边消耗列表，结果可能会不同。例如，假设我们的化简函数是\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\n-\u0026gt; \\x,\\y {x+y}\n# Python\nlambda x,y: x+y\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e那么我们从哪个方向遍历列表并不重要。但考虑以下函数:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\n-\u0026gt; \\x,\\y { x \u0026lt; y ?? x+y !! x }\n\n# Python\nlambda x,y: x+y if x\u0026lt;y else x\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e( \u003ccode\u003e... ?? ... !! ...\u003c/code\u003e 是条件操作符的 Raku 句法，在大多数其他语言中是 \u003ccode\u003e... ? ... : ...\u003c/code\u003e 在 Python 中是 \u003ccode\u003e... if ... else ...\u003c/code\u003e)。\u003c/p\u003e\n\u003cp\u003e在这种情况下，如果列表从左或从右还原，结果会有所不同。在 Raku 和 Python 中，\u003ccode\u003ereduce\u003c/code\u003e 是一种从左到右的还原。\u003c/p\u003e\n\u003cp\u003e另外，\u003ccode\u003ereduce\u003c/code\u003e 函数可以不使用列表的第一个元素，而是取一个额外的参数，通常称为累加器。在函数式语言中，\u003ccode\u003ereduce\u003c/code\u003e 通常被称为 \u003ccode\u003efold\u003c/code\u003e，所以我们可以有一个左折和一个右折。让我们来看看如何实现这些。\u003c/p\u003e\n\u003ch4 id=\"left-fold\"\u003eLeft fold\u003c/h4\u003e\n\u003cp\u003e实现左折的直接方法（所以和 \u003ccode\u003ereduce\u003c/code\u003e 一样）是在函数内部使用 \u003ccode\u003efor\u003c/code\u003e 循环。这意味着我们必须在循环的每次迭代上更新累加器的值。在 Raku 中，无符号变量是不可变的（我在这里简化了，完整的故事请看 \u003ca href=\"https://docs.raku.org/language/containers#Binding\"\u003eRaku 文档\u003c/a\u003e），所以我们需要使用一个有符号的变量，\u003ccode\u003e$acc\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub foldll (\u0026amp;f, \\iacc, \\lst) { \n  my $acc = iacc; \n  for lst -\u0026gt; \\elt {\n    $acc = f($acc,elt);\n  }\n  $acc;\n}\n\n# Python\ndef foldll (f, iacc, lst):\n  acc = iacc\n  for elt in lst:\n    acc = f(acc,elt)  \n  return acc\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果我们只想使用不可变的变量，我们可以使用递归。Raku 使这一点变得简单，因为它允许一个子程序有多个签名(\u003ccode\u003emulti sub\u003c/code\u003e)，并且它会调用与签名相匹配的变量。\u003c/p\u003e\n\u003cp\u003e我们的 \u003ccode\u003efoldl\u003c/code\u003e 将消耗输入列表 \u003ccode\u003elst\u003c/code\u003e，并使用 \u003ccode\u003ef\u003c/code\u003e 将其元素组合到累加器 \u003ccode\u003eacc\u003c/code\u003e 中，当列表被消耗后，计算结束，我们可以返回 \u003ccode\u003eacc\u003c/code\u003e 作为结果。所以我们的第一个变体说，如果输入列表是空的，我们应该返回 \u003ccode\u003eacc\u003c/code\u003e。 第二个变体从列表中取出一个元素 \u003ccode\u003eelt\u003c/code\u003e (关于 \u003ccode\u003e*\u003c/code\u003e 的细节请参见 \u003ca href=\"https://docs.raku.org/type/Range\"\u003eRaku 文档\u003c/a\u003e)，并将其与 \u003ccode\u003eacc\u003c/code\u003e 结合到 \u003ccode\u003ef(acc,elt)\u003c/code\u003e 中。然后用这个新的累加器和 list 的剩余部分 \u003ccode\u003erest\u003c/code\u003e 再次调用 \u003ccode\u003efoldl\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# When the list is empty, return the accumulator\nmulti sub foldl (\u0026amp;f, \\acc, ()) { acc }\nmulti sub foldl (\u0026amp;f, \\acc, \\lst) {\n  # Raku's way of splitting a list in the first elt and the rest\n  # The '*' is a shorthand for the end of the list\n   my (\\elt,\\rest) = lst[0, 1 .. * ]; \n   # The actual recursion\n   foldl( \u0026amp;f, f(acc, elt), rest);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePython 不允许这种模式匹配，所以我们需要使用条件来编写递归。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efoldl\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eacc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elst\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003elst\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eacc\u003c/span\u003e \n  \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# Python\u0026#39;s way of splitting a tuple in the first elt and the rest\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# rest will be a list, not a tuple, but we\u0026#39;ll let that pass\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003erest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elst\u003c/span\u003e \n   \u003cspan class=\"c1\"\u003e# The actual recursion\u003c/span\u003e\n   \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003efoldl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eacc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eelt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个实现中，所有的变量都不会被更新。所以所有的变量都可以是不可变的。\u003c/p\u003e\n\u003ch4 id=\"right-fold\"\u003eRight fold\u003c/h4\u003e\n\u003cp\u003e右折与左折颇为相似。对于基于循环的版本，我们所做的只是将列表反转(\u003ccode\u003ereverse\u003c/code\u003e)。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub foldrl (\u0026amp;f, \\acc, \\lst) { \n  my $res = acc;\n  for  lst.reverse -\u0026gt; \\elt {\n    $res = f($res,elt);\n  }\n  $res;\n}\n\n# Python\ndef foldlr (f, iacc, lst):\n  acc = iacc\n  for elt in lst.reverse():\n    acc = f(acc,elt)  \n  return acc\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在递归版本中，我们从列表中取最后一个元素而不是第一个元素。关于 \u003ccode\u003e..^ * - 1\u003c/code\u003e 语法的细节，请参见 \u003ca href=\"https://docs.raku.org/language/operators#infix_..%5E\"\u003eRaku 文档\u003c/a\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmulti sub foldr ( \u0026amp;f, \\acc, ()) { acc }\nmulti sub foldr (\u0026amp;f, \\acc, \\lst) {\n    my (\\rest,\\elt) = lst[0..^*-1, *  ];\n    foldr( \u0026amp;f, f(acc, elt), rest);\n}\n\n# Python\ndef foldr (f, acc, lst):\n  if lst == (): \n    return acc \n  else:\n   (*rest,elt) = lst \n   return foldr( f, f(acc, elt), rest)\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"map-and-grep-are-folds\"\u003e\u003ccode\u003emap\u003c/code\u003e and \u003ccode\u003egrep\u003c/code\u003e are folds\u003c/h4\u003e\n\u003cp\u003e现在，\u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e 呢？我们当然可以用 \u003ccode\u003efor\u003c/code\u003e 循环来实现，但我们也可以用我们的 \u003ccode\u003efoldl\u003c/code\u003e 来实现它们。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub map (\u0026amp;f,\\lst) {\n    foldl( sub (\\acc,\\elt) {\n            (|acc,f(elt))\n            }, (), lst);\n}\n\n# Python\ndef map (f,lst):\n    return foldl( \n      lambda acc,elt:(*acc, f(elt))\n      ,()\n      ,lst\n    )\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e因为函数 \u003ccode\u003ef\u003c/code\u003e 是可映射的，所以它只有一个参数。但是 \u003ccode\u003efoldl\u003c/code\u003e 需要一个有两个参数的函数，第一个参数为累加器。所以我们用两个参数的匿名函数调用 \u003ccode\u003efoldl\u003c/code\u003e。累积器本身是一个空列表。虽然我们前面说过，还原将原来列表的所有元素合并成一个返回值，当然这个返回值可以是任何数据类型，所以也是一个列表。所以我们对原始列表中的每一个元素都调用 \u003ccode\u003ef\u003c/code\u003e，并将其添加到累加器列表的末尾。(\u003ccode\u003e|\u003c/code\u003e 将列表扁平化，所以 \u003ccode\u003e(|acc,f(elt))\u003c/code\u003e 是一个由 \u003ccode\u003eacc\u003c/code\u003e 的元素和 \u003ccode\u003ef(elt)\u003c/code\u003e 的结果建立的新列表。)\u003c/p\u003e\n\u003cp\u003e类似地，我们也可以定义 \u003ccode\u003egrep\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub grep (\u0026amp;f,\\lst) {\n    foldl( sub (\\acc,\\elt) {\n      if (f(elt)) {\n          (|acc,elt)\n      } else {\n          acc\n      }\n    }, (), lst);\n}\n\n# Python\ndef filter (f,lst):\n    return foldl( \n      lambda acc,elt:\n        (*acc,elt) if f(elt) else acc\n      , (), lst)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e就像在 \u003ccode\u003emap\u003c/code\u003e 实现中一样，我们用一个匿名函数调用 \u003ccode\u003efoldl\u003c/code\u003e。在这个函数中，我们测试 \u003ccode\u003elst\u003c/code\u003e 中的每个 \u003ccode\u003eelt\u003c/code\u003e 是否为 \u003ccode\u003ef(elt)\u003c/code\u003e 为真。如果是真，我们就从 \u003ccode\u003eacc\u003c/code\u003e 和 \u003ccode\u003eelt\u003c/code\u003e 创建一个新的列表，否则我们就只返回 \u003ccode\u003eacc\u003c/code\u003e。 因为 \u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e 分别对列表中的每个元素进行操作，所以我们也可以使用右折来实现它们。\u003c/p\u003e\n\u003cp\u003e通过这些例子，我希望无论是对函数工作的概念，还是对函数可能的实现方式，都变得更加清晰。递归实现的优点是它允许我们使用不可变的数据结构。\u003c/p\u003e\n\u003ch3 id=\"为什么是不可变的数据结构\"\u003e为什么是不可变的数据结构？\u003c/h3\u003e\n\u003cp\u003e你可能会好奇为什么我关注这些不可变的数据结构。正如我们将看到的那样，函数式编程与不可改变的数据结构配合得非常好。而且它们有一个很大的优势：你永远不用担心是否不小心修改了你的数据，也不用担心是否应该做一个副本来确定。所以使用不可变数据结构可以使代码不易出错，更容易调试。它们还具有潜在的性能优势。而我们接下来会看到，在 Raku 中还有另一个优势。\u003c/p\u003e\n\u003ch2 id=\"返回函数的函数\"\u003e返回函数的函数\u003c/h2\u003e\n\u003cp\u003e函数也可以返回函数。如果我们想拥有一个可参数化的函数，这一点尤其有用。举个简单的例子，假设我们想要一系列以固定值递增一个数字的函数：\u003ccode\u003eadd1\u003c/code\u003e、\u003ccode\u003eadd2\u003c/code\u003e 等。当然，我们可以分别写出每一个函数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub add_1 (\\x) {x+1}\nsub add_2 (\\x) {x+2}\nsub add_3 (\\x) {x+3}\nsub add_4 (\\x) {x+4}\nsub add_5 (\\x) {x+5}\n\nsay add_1(4); #=\u0026gt; says 5\n# Python\ndef add_1 (x) : return x+1\ndef add_2 (x) : return x+2\ndef add_3 (x) : return x+3\ndef add_4 (x) : return x+4\ndef add_5 (x) : return x+5\n\nprint( add_1(4)) #=\u0026gt; says 5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e或者我们可以使用一个充满匿名函数的列表。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\add =\nsub (\\x) {x},\nsub (\\x) {x+1},\nsub (\\x) {x+2},\nsub (\\x) {x+3},\nsub (\\x) {x+4},\nsub (\\x) {x+5};\n\nsay add[0].(4); #=\u0026gt; says 5\n\n\n# Python\nadd = (\nlambda x : x+1,\nlambda x : x+2,\nlambda x : x+3,\nlambda x : x+4,\nlambda x : x+5\n)\n\nprint( add[0](4)) #=\u0026gt; says 5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们可以做得更好，用一个循环来填充一个匿名函数的数组。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\add = [];\nfor 0 .. 5 -\u0026gt; \\n {\n  add.push(sub (\\x) {x+n});\n}\n\nsay add[1].(4); #=\u0026gt; says 5\n\n# Python\nadd = []\nfor n in range(0,6):\n  add.append(lambda x: x+n)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们每次循环迭代都会创建一个新的匿名函数，并将其添加到数组中。但是，我们可以使用一个函数来创建这些匿名函数，然后我们可以使用 \u003ccode\u003emap\u003c/code\u003e 来代替循环，并使用一个不可改变的数据结构。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub gen_add(\\n) {  \n  sub (\\x) {x+n}\n}\n\nmy \\add = map \u0026amp;gen_add, 0..5;\n\nsay add[1].(4); #=\u0026gt; says 5\n\n# Python\ndef gen_add(n):  \n  return lambda x : x+n\n\nadd = tuple(map( gen_add, range(0,6)))\n\nprint( add[1](4)) #=\u0026gt; says 5\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"laziness\"\u003eLaziness\u003c/h3\u003e\n\u003cp\u003e在 Raku 中，使用(不可改变的)范围有一个额外的好处：我们可以将范围的末端设置为无穷大，在 Raku 中可以写成 \u003ccode\u003e∞\u003c/code\u003e(unicode 221E)、\u003ccode\u003e*\u003c/code\u003e 或 \u003ccode\u003eInf\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmy \\add = map \u0026amp;gen_add, 0 .. ∞;  \n\nsay add[244].(7124); #=\u0026gt; says 7368\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这是一个所谓的\u0026quot;懒惰求值\u0026quot;的例子，简称 laziness：Raku 不会尝试（和失败）处理这个无限的列表。相反，它将在我们实际使用该列表中的一个元素时进行处理。表达式的评估会延迟到需要结果的时候，所以当我们调用 \u003ccode\u003eadd[244]\u003c/code\u003e 时，发生的情况是 \u003ccode\u003egen_add(244)\u003c/code\u003e 被调用来生成该函数。请注意，这在 \u003ccode\u003efor\u003c/code\u003e 循环中是行不通的，因为要使用 \u003ccode\u003efor\u003c/code\u003e 循环，我们需要一个可变的数据结构，而惰性列表必须是不可变的。所以这是一个很好的例子，说明函数式编程风格如何让你从懒惰中获益。\u003c/p\u003e\n\u003cp\u003e这也是为什么我们递归地实现了 \u003ccode\u003efoldl\u003c/code\u003e，然后用它来实现我们自己的 \u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e：基于递归的版本不需要更新任何变量，所以它们可以与不可变的惰性数据结构一起工作。\u003c/p\u003e\n\u003ch2 id=\"函数组合\"\u003e函数组合\u003c/h2\u003e\n\u003cp\u003e我们在上面看到，你可以把 \u003ccode\u003emap\u003c/code\u003e 和 \u003ccode\u003egrep\u003c/code\u003e 的调用链在一起。通常情况下，你只需要将 \u003ccode\u003emap\u003c/code\u003e 调用链在一起，例如\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nmap -\u0026gt; \\x { x + 5 }, map -\u0026gt; \\x {x*x}, 1..30;\n\n# Python\nmap( lambda x : x + 5, map( lambda x : x*x, range(1,31)))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在这种情况下，我们可以做得更有效率一些：比起创建一个列表，然后在这个列表上调用 \u003ccode\u003emap\u003c/code\u003e，我们可以通过组合函数一次完成两个计算。Raku 为此提供了一个特殊的操作符。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emap -\u0026gt; \\x { x + 5 } ∘ -\u0026gt; \\x { x * x }, 1..30;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e操作符 \u003ccode\u003e∘\u003c/code\u003e（\u0026ldquo;环形操作符\u0026rdquo;，unicode 2218，但你也可以用普通的 \u003ccode\u003eo\u003c/code\u003e）是函数组成操作符，它的发音是 \u0026ldquo;after\u0026rdquo;，所以 \u003ccode\u003ef ∘ g\u003c/code\u003e 是 \u0026ldquo;f after g\u0026rdquo;。它的作用是将两个现有的函数组合起来，创建一个新的函数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003emy \u0026amp;h = \u0026amp;f ∘ \u0026amp;g;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e是下面的代码是一样的:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003esub h (\\x) {\n    f(g(x))\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e组成运算符的优点是，它可以适用于任何函数，包括匿名函数。但实际上，它只是另一个高阶函数。它只是下面函数的运算符形式。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-perl6\" data-lang=\"perl6\"\u003e# Raku\nsub compose(\u0026amp;f,\u0026amp;g) {\n    sub (\\x) { f(g(x)) }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePython 没有函数组成操作符，但你也可以很容易地在 Python 中拥有 \u003ccode\u003ecompose\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"c1\"\u003e# Python\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ecompose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"结论\"\u003e结论\u003c/h2\u003e\n\u003cp\u003e在这篇文章中，我用 Raku 和 Python 的例子介绍了三种关键的函数式编程技术：对函数进行操作的函数、返回函数的函数和函数组成。我已经展示了你如何使用函数 \u003ccode\u003emap\u003c/code\u003e、\u003ccode\u003ereduce\u003c/code\u003e(折叠)和 \u003ccode\u003egrep\u003c/code\u003e(过滤)来操作不可变的列表。我已经解释了哟(如何用递归和不递归实现这样的函数，以及递归实现的优势是什么。下面是《 \u003ca href=\"https://github.com/wimvanderbauwhede/raku-examples/blob/master/decluttering-with-functional-programming.raku\"\u003eRaku\u003c/a\u003e 与 \u003ca href=\"https://github.com/wimvanderbauwhede/raku-examples/blob/master/decluttering-with-functional-programming.py\"\u003ePython\u003c/a\u003e》一文中的代码。\u003c/p\u003e\n\u003cp\u003e当然，函数式编程的内容还有很多，我也写了\u003ca href=\"https://wimvanderbauwhede.github.io/articles/\"\u003e几篇更高级的文章\u003c/a\u003e。本文介绍的概念应该为理解那些更高级的主题打下良好的基础。如果你想了解更多关于函数式编程的知识，你可以考虑我的\u003ca href=\"https://www.futurelearn.com/courses/functional-programming-haskell\"\u003e免费在线课程\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e原文: \u003ca href=\"https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/\"\u003ehttps://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/\u003c/a\u003e\u003c/p\u003e\n","text":"函数式编程是一种编程风格，现代语言或多或少都支持这种风格。在这篇文章中，我想解释一下函数式编程如何为你提供强大的抽象，使你的代码更加简洁。我将用 Raku 和 Python 中的例子来说明这一点，我们将看到这两种语言都是函数式编程的优秀语言。\nRaku: 简介 本文的代码示例是用 Python 和 Raku 编写的。我想大多数人都熟悉 Python，但 Raku 不太为人所知，所以我先解释一下基础知识。本文中的代码不是很习惯，所以如果你懂得其他编程语言，应该很容易理解。\nRaku 与 Perl 最为相似。两种语言在语法上都与 C/C++、Java 和 JavaScript 相似：基于块，语句用分号隔开，块用大括号分界，参数列表放在括号中，用逗号隔开。将 Perl 和 Raku 与其他语言区分开来的主要特征是使用魔符（\u0026ldquo;有趣的字符\u0026rdquo;）来识别变量的类型：$ 代表标量，@ 代表数组，% 代表哈希（映射），\u0026amp; 代表子程序。变量也有关键字来标识它们的作用域，我只用 my 来标识变量的词法作用域。子程序是用 sub 关键字来声明的，子程序可以是命名的，也可以是匿名的。\nsub square ($x) { $x*$x; } # anonymous subroutine my $anon_square = sub ($x) { $x*$x; } 在 Python 中，这将是：\ndef square(x): return x*x # anonymous subroutine  anon_square = lambda x: x*x Raku 支持无符号变量，并使用 \\ 语法来声明它们。更多关于普通变量和无符号变量之间的区别，请参见 Raku 文档。例如(say 打印它的参数，后面加一个换行)。\nmy \\x = 42; # sigilless my $y = 43; say x + $y; 在本文的代码中，我将尽可能地使用无符号变量。\nRaku 有几种类型的序列数据结构。在下面的代码中，我将使用列表和数组以及范围。在 Raku 中，列表和数组的主要区别在于，列表是不可变的，这意味着一旦创建，就不能修改。所以它是一个只读的数据结构。要\u0026quot;更新\u0026quot;一个不可变的数据结构，你需要创建一个更新的副本。另一方面，数组是可变的，所以我们可以更新它们的元素，扩展它们，缩小它们等等。所有的更新都发生在原始数据的位置上。\nRaku 的数组类似于 Python 的 list，Raku 的 list 类似于 Python 的 tuple，也是不可变的。除了语法之外，Raku 中的范围与 Python 中的范围相似，都是不可变的。\nmy @array1 = 1,2,3; #=\u0026gt; an array because of the '@' sigil my \\array2 = [1,2,3]; #=\u0026gt; an array, because of the '[...]' my \\range1 = 1 .. 10; #=\u0026gt; a range 1 .. 10 my @array3 = 1 .. 10; #=\u0026gt; an array from a range, because of the '@' sigil my \\list1 = 1,2,3; #=\u0026gt; a list my $list2 = (1,2,3); #=\u0026gt; also a list my \\list3 = |(1 .. 10); #=\u0026gt; an array from a range because of the '|' flattening operation 相应的 Python 代码为:\nlist1 = list((1,2,3)) #=\u0026gt; a list from a tuple list2 = [1,2,3]; #=\u0026gt; a list, because of the \u0026#39;[...]\u0026#39; range1 = range(1,11) #=\u0026gt; a range 1 .. 10 list3 = list(range(1,11)); #=\u0026gt; a list from a range tuple1 = 1,2,3; #=\u0026gt; a tuple tuple2 = tuple([1,2,3]) #=\u0026gt; a tuple from a list tuple3 = tuple(range(1,11)) #=\u0026gt; creates a tuple from a range 其他具体的语法或功能将针对具体的例子进行解释。\n其他任何名称的函数 - 作为值的函数 函数是函数式编程的精髓。正如我在\u0026ldquo;万物皆函数\u0026rdquo;一文中所解释的那样，在适当的函数式语言中，所有的结构都是由函数构建的。\n所有现代编程语言都有函数、程序、子程序或方法的概念。它们是代码重用的重要机制。通常，我们认为函数是对一些输入值进行操作以产生一个或多个输出值的东西。输入值可以是全局声明的，也可以是一个类的属性，或者作为参数传递给函数。同样，输出值可以直接返回，到全局变量，作为类的属性或通过修改输入值。\n要想从函数式编程中获益最多，最好是函数是纯粹的，这意味着对函数的调用总是对相同的输入产生相同的输出。在实践中，如果函数只接受输入作为参数，并直接返回输出，这一点比较容易实现，但这并不是必不可少的。\n函数式编程的关键特征是，函数的输入值和输出值本身可以是函数。所以函数必须是你语言中的值。有时这被称为 \u0026ldquo;函数必须是一等公民\u0026rdquo;，一个接收和/或返回函数的函数有时被称为\u0026quot;高阶函数\u0026rdquo;。\n如果函数是值，那么我们就可以将它们赋值给变量。特别是我们会将它们赋值给其他函数的参数。但我们也可以将它们赋值给普通的变量。\n让我们考虑以下函数，choose，它需要三个参数 t，f 和 c。\n# Raku sub choose (\\t, \\f, \\d) { if (d) {t} else {f} } # Python def choose (t, f, d): if d: return t else: return f 首先让我们用字符串作为前两个参数的值来调用 choose。\n# Raku my \\tstr = \u0026quot;True!\u0026quot;; my \\fstr = \u0026quot;False!\u0026quot;; my \\res_str = choose(tstr, fstr, True); say res_str; #=\u0026gt; says \u0026quot;True!\u0026quot; # Python tstr = \u0026quot;True!\u0026quot; fstr = \u0026quot;False!\u0026quot; res_str = choose(tstr,fstr,True) print(res_str) #=\u0026gt; says \u0026quot;True!\u0026quot; 现在让我们尝试用函数作为参数:\n# Raku sub tt (\\s) { say \u0026quot;True {s}!\u0026quot; } sub ff (\\s) { say \u0026quot;False {s}!\u0026quot; } my \u0026amp;res_f = choose(\u0026amp;tt, \u0026amp;ff, False); say \u0026amp;res_f; #=\u0026gt; says \u0026amp;ff res_f(\u0026quot;rumour\u0026quot;); #=\u0026gt; says \u0026quot;False rumour!\u0026quot; # Python def tt(s): print( \u0026quot;True \u0026quot;+s+\u0026quot;!\u0026quot;) def ff(s): print( \u0026quot;False\u0026quot;+s+\u0026quot;!\u0026quot;) res_f = choose(tt,ff,True) print(res_f) #=\u0026gt; says \u0026lt;function tt at 0x7f829c3aa310\u0026gt; res_f(\u0026quot;rumour\u0026quot;) #=\u0026gt; says \u0026quot;False rumour!\u0026quot; 因此，我们的函数 choose 接收两个函数作为它的前两个参数，并返回一个函数。在 Raku 中，我们需要在函数名上加上 \u0026amp; 符号，因为否则它们会被求值：像 tt 这样的裸函数名就等于调用没有参数的函数 tt()。通过将这个函数赋值给一个变量(res_f)，我们现在可以将 res_f 作为一个函数来调用，它最终会根据选择来调用 tt 或 ff。\n函数不需要名字 现在，如果我们可以将函数赋值给变量，它们本身其实并不需要一个名字。所以我们的函数可以是匿名的。大多数语言都支持匿名函数，在函数式语言中，它们通常被称为 \u0026ldquo;lambda 函数\u0026rdquo;。在 Raku 中，我们有两种方法来创建匿名函数。\n使用 sub (...) 语法:\nmy \\tt = sub (\\s) { say \u0026quot;True {s}!\u0026quot; }; 或者使用\u0026lsquo;尖号块\u0026rsquo;语法，这样更紧凑一些:\nmy \\ff = -\u0026gt; \\s { say \u0026quot;False {s}!\u0026quot; }; Python 使用 lambda 关键字:\ntt = lambda s : print( \u0026#34;True \u0026#34;+s+\u0026#34;!\u0026#34; ) ff = lambda s : print( \u0026#34;False \u0026#34;+s+\u0026#34;!\u0026#34; ) 所以现在我们可以说:\nmy \u0026amp;res_f = choose(tt, ff, True); say \u0026amp;res_f; #=\u0026gt; says sub { } res_f(\u0026quot;story\u0026quot;); #=\u0026gt; says \u0026quot;True story!\u0026quot; 当我们打印出函数所绑定的变量时，Raku 返回 sub { } 来表示该变量包含一个函数。\n在 Python 中:\nres_f = choose(tt, ff, True); print( res_f) #=\u0026gt; says \u0026lt;function \u0026lt;lambda\u0026gt; at 0x7f829b298b80\u0026gt; res_f(\u0026#34;story\u0026#34;) #=\u0026gt; says \u0026#34;True story!\u0026#34; 例子: map、 grep 和 reduce 函数的功能有很多用途，我只想重点介绍三个在 Raku 中现成的例子：map、reduce 和 grep。Python 有 map 和 filter，并通过 functools 模块提供 reduce。这些函数的共同点是，它们提供了一种对列表进行 for 循环的替代方法。\nmap : 对列表中的所有元素进行函数应用 map 有两个参数：一个函数和一个列表。它将函数按顺序应用于列表中的所有值，并返回结果，例如将列表中的所有值平方。\nmy \\res = map -\u0026gt; \\x {x*x} , 1 .. 10; 在 Python 中，我们需要显式地创建元组，但除了语法上的差异，结构是完全一样的。\nres = tuple( map( lambda x : x*x , range(1,11))) 这是对传统 for 循环的功能替代。\n# Raku my \\res = []; for 1 .. 10 -\u0026gt; \\x { res.push(x*x); } # Python res = [] for x in range(1,11): res.append(x*x) 请注意，在 Raku 和 Python 中，我们需要为 for 循环版本使用一个可变的数据结构，而 map 版本则使用不可变的数据结构。\ngrep : 过滤列表 grep (在 Python 中称为 filter)也接受参数，一个函数和一个列表，但它只返回函数返回真的列表中的值。\n# Raku my \\res = grep -\u0026gt; \\x { x % 5 == 0 }, 1 .. 30; # Python res = tuple(filter( lambda x : x % 5 == 0 ,range(1,31))) 当然我们也可以用 for 循环和 if 语句来写，但这又需要一个可变的数据结构。\n# Raku my \\res = []; for 1 .. 30 -\u0026gt; \\x { if (x % 5 == 0) { res.push(x); } } # Python res = [] for x in range(1,31): if (x % 5 == 0): res.append(x) map 和 grep 的好处是，你可以很容易地把它们链在一起。\n# Raku grep -\u0026gt; \\x { x % 5 == 0 }, map -\u0026gt; \\x {x*x}, 1..30 # Python res = tuple(filter( lambda x : x % 5 == 0 ,map( lambda x : x*x ,range(1,31)))) 这是因为 map 和 grep 接受一个列表并返回一个列表，所以只要你需要对一个列表进行操作，就可以通过链式调用来实现。\nreduce : 化整为零 reduce 也接受一个函数和一个 list，但它使用函数将 list 的所有元素合并成一个结果。所以函数必须接受两个参数。第二个参数是从列表中取出的元素，第一个参数作为状态变量来组合所有元素。例如，计算一个数字列表的和:\n# Raku my \\sum = reduce sub (\\acc,\\elt) {acc+elt}, 1 .. 10; say sum; #=\u0026gt; says 55 # Python from functools import reduce sum = reduce(lambda acc,elt: acc+elt, range(1,11)) print( sum); #=\u0026gt; says 55 这里发生的情况是，首先将 acc 设置为列表中的第一个元素(1)，然后加上第二个元素，所以 acc 变成 1+2=3；然后加上第三个元素(3)，以此类推。其效果是将列表中的所有数字连续相加。\n为了更清楚地说明这一点，我们来写一个我们自己的 reduce 版本。\n编写你自己的 在许多函数式语言中，从左到右（从最低索引开始）和从右到左（从最高索引开始）的还原是有区别的。这一点很重要，因为根据做还原的函数，如果从左边或右边消耗列表，结果可能会不同。例如，假设我们的化简函数是\n# Raku -\u0026gt; \\x,\\y {x+y} # Python lambda x,y: x+y 那么我们从哪个方向遍历列表并不重要。但考虑以下函数:\n# Raku -\u0026gt; \\x,\\y { x \u0026lt; y ?? x+y !! x } # Python lambda x,y: x+y if x\u0026lt;y else x ( ... ?? ... !! ... 是条件操作符的 Raku 句法，在大多数其他语言中是 ... ? ... : ... 在 Python 中是 ... if ... else ...)。\n在这种情况下，如果列表从左或从右还原，结果会有所不同。在 Raku 和 Python 中，reduce 是一种从左到右的还原。\n另外，reduce 函数可以不使用列表的第一个元素，而是取一个额外的参数，通常称为累加器。在函数式语言中，reduce 通常被称为 fold，所以我们可以有一个左折和一个右折。让我们来看看如何实现这些。\nLeft fold 实现左折的直接方法（所以和 reduce 一样）是在函数内部使用 for 循环。这意味着我们必须在循环的每次迭代上更新累加器的值。在 Raku 中，无符号变量是不可变的（我在这里简化了，完整的故事请看 Raku 文档），所以我们需要使用一个有符号的变量，$acc。\n# Raku sub foldll (\u0026amp;f, \\iacc, \\lst) { my $acc = iacc; for lst -\u0026gt; \\elt { $acc = f($acc,elt); } $acc; } # Python def foldll (f, iacc, lst): acc = iacc for elt in lst: acc = f(acc,elt) return acc 如果我们只想使用不可变的变量，我们可以使用递归。Raku 使这一点变得简单，因为它允许一个子程序有多个签名(multi sub)，并且它会调用与签名相匹配的变量。\n我们的 foldl 将消耗输入列表 lst，并使用 f 将其元素组合到累加器 acc 中，当列表被消耗后，计算结束，我们可以返回 acc 作为结果。所以我们的第一个变体说，如果输入列表是空的，我们应该返回 acc。 第二个变体从列表中取出一个元素 elt (关于 * 的细节请参见 Raku 文档)，并将其与 acc 结合到 f(acc,elt) 中。然后用这个新的累加器和 list 的剩余部分 rest 再次调用 foldl。\n# When the list is empty, return the accumulator multi sub foldl (\u0026amp;f, \\acc, ()) { acc } multi sub foldl (\u0026amp;f, \\acc, \\lst) { # Raku's way of splitting a list in the first elt and the rest # The '*' is a shorthand for the end of the list my (\\elt,\\rest) = lst[0, 1 .. * ]; # The actual recursion foldl( \u0026amp;f, f(acc, elt), rest); } Python 不允许这种模式匹配，所以我们需要使用条件来编写递归。\ndef foldl (f, acc, lst): if lst == (): return acc else: # Python\u0026#39;s way of splitting a tuple in the first elt and the rest # rest will be a list, not a tuple, but we\u0026#39;ll let that pass (elt,*rest) = lst # The actual recursion return foldl( f, f(acc, elt), rest) 在这个实现中，所有的变量都不会被更新。所以所有的变量都可以是不可变的。\nRight fold 右折与左折颇为相似。对于基于循环的版本，我们所做的只是将列表反转(reverse)。\n# Raku sub foldrl (\u0026amp;f, \\acc, \\lst) { my $res = acc; for lst.reverse -\u0026gt; \\elt { $res = f($res,elt); } $res; } # Python def foldlr (f, iacc, lst): acc = iacc for elt in lst.reverse(): acc = f(acc,elt) return acc 在递归版本中，我们从列表中取最后一个元素而不是第一个元素。关于 ..^ * - 1 语法的细节，请参见 Raku 文档。\n# Raku multi sub foldr ( \u0026amp;f, \\acc, ()) { acc } multi sub foldr (\u0026amp;f, \\acc, \\lst) { my (\\rest,\\elt) = lst[0..^*-1, * ]; foldr( \u0026amp;f, f(acc, elt), rest); } # Python def foldr (f, acc, lst): if lst == (): return acc else: (*rest,elt) = lst return foldr( f, f(acc, elt), rest) map and grep are folds 现在，map 和 grep 呢？我们当然可以用 for 循环来实现，但我们也可以用我们的 foldl 来实现它们。\n# Raku sub map (\u0026amp;f,\\lst) { foldl( sub (\\acc,\\elt) { (|acc,f(elt)) }, (), lst); } # Python def map (f,lst): return foldl( lambda acc,elt:(*acc, f(elt)) ,() ,lst ) 因为函数 f 是可映射的，所以它只有一个参数。但是 foldl 需要一个有两个参数的函数，第一个参数为累加器。所以我们用两个参数的匿名函数调用 foldl。累积器本身是一个空列表。虽然我们前面说过，还原将原来列表的所有元素合并成一个返回值，当然这个返回值可以是任何数据类型，所以也是一个列表。所以我们对原始列表中的每一个元素都调用 f，并将其添加到累加器列表的末尾。(| 将列表扁平化，所以 (|acc,f(elt)) 是一个由 acc 的元素和 f(elt) 的结果建立的新列表。)\n类似地，我们也可以定义 grep:\n# Raku sub grep (\u0026amp;f,\\lst) { foldl( sub (\\acc,\\elt) { if (f(elt)) { (|acc,elt) } else { acc } }, (), lst); } # Python def filter (f,lst): return foldl( lambda acc,elt: (*acc,elt) if f(elt) else acc , (), lst) 就像在 map 实现中一样，我们用一个匿名函数调用 foldl。在这个函数中，我们测试 lst 中的每个 elt 是否为 f(elt) 为真。如果是真，我们就从 acc 和 elt 创建一个新的列表，否则我们就只返回 acc。 因为 map 和 grep 分别对列表中的每个元素进行操作，所以我们也可以使用右折来实现它们。\n通过这些例子，我希望无论是对函数工作的概念，还是对函数可能的实现方式，都变得更加清晰。递归实现的优点是它允许我们使用不可变的数据结构。\n为什么是不可变的数据结构？ 你可能会好奇为什么我关注这些不可变的数据结构。正如我们将看到的那样，函数式编程与不可改变的数据结构配合得非常好。而且它们有一个很大的优势：你永远不用担心是否不小心修改了你的数据，也不用担心是否应该做一个副本来确定。所以使用不可变数据结构可以使代码不易出错，更容易调试。它们还具有潜在的性能优势。而我们接下来会看到，在 Raku 中还有另一个优势。\n返回函数的函数 函数也可以返回函数。如果我们想拥有一个可参数化的函数，这一点尤其有用。举个简单的例子，假设我们想要一系列以固定值递增一个数字的函数：add1、add2 等。当然，我们可以分别写出每一个函数。\n# Raku sub add_1 (\\x) {x+1} sub add_2 (\\x) {x+2} sub add_3 (\\x) {x+3} sub add_4 (\\x) {x+4} sub add_5 (\\x) {x+5} say add_1(4); #=\u0026gt; says 5 # Python def add_1 (x) : return x+1 def add_2 (x) : return x+2 def add_3 (x) : return x+3 def add_4 (x) : return x+4 def add_5 (x) : return x+5 print( add_1(4)) #=\u0026gt; says 5 或者我们可以使用一个充满匿名函数的列表。\n# Raku my \\add = sub (\\x) {x}, sub (\\x) {x+1}, sub (\\x) {x+2}, sub (\\x) {x+3}, sub (\\x) {x+4}, sub (\\x) {x+5}; say add[0].(4); #=\u0026gt; says 5 # Python add = ( lambda x : x+1, lambda x : x+2, lambda x : x+3, lambda x : x+4, lambda x : x+5 ) print( add[0](4)) #=\u0026gt; says 5 我们可以做得更好，用一个循环来填充一个匿名函数的数组。\n# Raku my \\add = []; for 0 .. 5 -\u0026gt; \\n { add.push(sub (\\x) {x+n}); } say add[1].(4); #=\u0026gt; says 5 # Python add = [] for n in range(0,6): add.append(lambda x: x+n) 我们每次循环迭代都会创建一个新的匿名函数，并将其添加到数组中。但是，我们可以使用一个函数来创建这些匿名函数，然后我们可以使用 map 来代替循环，并使用一个不可改变的数据结构。\n# Raku sub gen_add(\\n) { sub (\\x) {x+n} } my \\add = map \u0026amp;gen_add, 0..5; say add[1].(4); #=\u0026gt; says 5 # Python def gen_add(n): return lambda x : x+n add = tuple(map( gen_add, range(0,6))) print( add[1](4)) #=\u0026gt; says 5 Laziness 在 Raku 中，使用(不可改变的)范围有一个额外的好处：我们可以将范围的末端设置为无穷大，在 Raku 中可以写成 ∞(unicode 221E)、* 或 Inf。\n# Raku my \\add = map \u0026amp;gen_add, 0 .. ∞; say add[244].(7124); #=\u0026gt; says 7368 这是一个所谓的\u0026quot;懒惰求值\u0026quot;的例子，简称 laziness：Raku 不会尝试（和失败）处理这个无限的列表。相反，它将在我们实际使用该列表中的一个元素时进行处理。表达式的评估会延迟到需要结果的时候，所以当我们调用 add[244] 时，发生的情况是 gen_add(244) 被调用来生成该函数。请注意，这在 for 循环中是行不通的，因为要使用 for 循环，我们需要一个可变的数据结构，而惰性列表必须是不可变的。所以这是一个很好的例子，说明函数式编程风格如何让你从懒惰中获益。\n这也是为什么我们递归地实现了 foldl，然后用它来实现我们自己的 map 和 grep：基于递归的版本不需要更新任何变量，所以它们可以与不可变的惰性数据结构一起工作。\n函数组合 我们在上面看到，你可以把 map 和 grep 的调用链在一起。通常情况下，你只需要将 map 调用链在一起，例如\n# Raku map -\u0026gt; \\x { x + 5 }, map -\u0026gt; \\x {x*x}, 1..30; # Python map( lambda x : x + 5, map( lambda x : x*x, range(1,31))) 在这种情况下，我们可以做得更有效率一些：比起创建一个列表，然后在这个列表上调用 map，我们可以通过组合函数一次完成两个计算。Raku 为此提供了一个特殊的操作符。\nmap -\u0026gt; \\x { x + 5 } ∘ -\u0026gt; \\x { x * x }, 1..30; 操作符 ∘（\u0026ldquo;环形操作符\u0026rdquo;，unicode 2218，但你也可以用普通的 o）是函数组成操作符，它的发音是 \u0026ldquo;after\u0026rdquo;，所以 f ∘ g 是 \u0026ldquo;f after g\u0026rdquo;。它的作用是将两个现有的函数组合起来，创建一个新的函数。\nmy \u0026amp;h = \u0026amp;f ∘ \u0026amp;g; 是下面的代码是一样的:\nsub h (\\x) { f(g(x)) } 组成运算符的优点是，它可以适用于任何函数，包括匿名函数。但实际上，它只是另一个高阶函数。它只是下面函数的运算符形式。\n# Raku sub compose(\u0026amp;f,\u0026amp;g) { sub (\\x) { f(g(x)) } } Python 没有函数组成操作符，但你也可以很容易地在 Python 中拥有 compose。\n# Python def compose(f,g): return lambda x: f(g(x)) 结论 在这篇文章中，我用 Raku 和 Python 的例子介绍了三种关键的函数式编程技术：对函数进行操作的函数、返回函数的函数和函数组成。我已经展示了你如何使用函数 map、reduce(折叠)和 grep(过滤)来操作不可变的列表。我已经解释了哟(如何用递归和不递归实现这样的函数，以及递归实现的优势是什么。下面是《 Raku 与 Python》一文中的代码。\n当然，函数式编程的内容还有很多，我也写了几篇更高级的文章。本文介绍的概念应该为理解那些更高级的主题打下良好的基础。如果你想了解更多关于函数式编程的知识，你可以考虑我的免费在线课程。\n原文: https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/\n"},"name":"通过函数式编程实现更简洁的代码","published":"2020-07-26T00:00:00+08:00","summary":"Cleaner code with functional programming","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-07-26-cleaner-code-with-functional-programming/"},{"content":{"html":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e在 6.d 版本中, 很多东西都发生了变化, 我们至少需要发布一个版本。\u003ca href=\"https://github.com/perl6/roast/blob/master/docs/announce/6.d.md\"\u003e这里有个列表\u003c/a\u003e。然而, 覆盖面是不完整的。弃用通知采取了不同的形式, 一些新的类型和方法在那里, 一些则没有\u0026hellip;\u0026hellip;\u003c/p\u003e\n\u003cp\u003e用 \u003ccode\u003e#2632\u003c/code\u003e 引用这个问题, 并检查项目, 当你的工作, 无论是通过改变后的文档, 看到没有变化, 需要做它。在这种情况下, 请通过评论或如何解释为什么是这种情况。\u003c/p\u003e\n\u003ch2 id=\"版本控制的变更\"\u003e版本控制的变更\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e \u003ccode\u003e\u0026amp;await\u003c/code\u003e 在等待的时候不再阻塞线程\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e \u003ccode\u003ewhenever\u003c/code\u003e 不在 \u003ccode\u003ereact\u003c/code\u003e 抛出的词法作用域内\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e 在 \u003ccode\u003esub MAIN\u003c/code\u003e 里面的 \u003ccode\u003e$*ARGFILES\u003c/code\u003e 总是由 \u003ccode\u003e$*IN\u003c/code\u003e 馈入\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e 结构(字面上的) \u003ccode\u003e$()\u003c/code\u003e、\u003ccode\u003e@()\u003c/code\u003e 和 \u003ccode\u003e%()\u003c/code\u003e 不复存在\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e 带有 \u003ccode\u003e:D\u003c/code\u003e/\u003ccode\u003e:U\u003c/code\u003e 类型约束的变量默认为约束类型的类型对象(例如, 你可以在它们身上使用 \u003ccode\u003e.new\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e \u003ccode\u003estart\u003c/code\u003e 块在 sink 上下文中附加异常处理程序\u003c/li\u003e\n\u003cli\u003e~~**[6.d]** 例程必须使用 \u003ccode\u003ereturn-rw\u003c/code\u003e 来返回一个 \u003ccode\u003eProxy\u003c/code\u003e, 即使例程被标记为 \u003ccode\u003eis raw\u003c/code\u003e 或 \u003ccode\u003eis rw\u003c/code\u003e~~\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e 原生的 \u003ccode\u003enum\u003c/code\u003e 类型默认为 \u003ccode\u003e0e0\u003c/code\u003e 而不是 \u003ccode\u003eNaN\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[6.d]\u003c/strong\u003e 在子程序名中, 保留了键名为 \u003ccode\u003esym\u003c/code\u003e 的冒号对（如\u003ccode\u003e:sym\u0026lt;foo\u0026gt;\u003c/code\u003e）, 以备将来使用\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"废弃\"\u003e废弃\u003c/h2\u003e\n\u003cp\u003e这些方法在 6.d 语言中已被废弃, 并将在 6.e 中被删除。实现者可以选择发出弃用警告, 或者在 6.e 版本发布后更长的时间内提供这些方法。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用 \u003ccode\u003e'-'\u003c/code\u003e (单连字符)作为 \u003ccode\u003e\u0026amp;open\u003c/code\u003e 的特殊路径, 表示特殊的句柄(使用 \u003ccode\u003eIO::Special\u003c/code\u003e 对象代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Handle.slurp-rest\u003c/code\u003e (使用 \u003ccode\u003e.slurp\u003c/code\u003e 代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAny.flatmap\u003c/code\u003e (使用\u003ccode\u003e.flat\u003c/code\u003e 和 \u003ccode\u003e.map\u003c/code\u003e 方法的组合来代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCool.path\u003c/code\u003e (使用 \u003ccode\u003e.IO\u003c/code\u003e 代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePair.freeze\u003c/code\u003e (使用去容器化的参数的 \u003ccode\u003ePair.new\u003c/code\u003e 来代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eStr.subst-mutate\u003c/code\u003e (使用带有 \u003ccode\u003e.=\u003c/code\u003e 方法调用赋值元运算符的 \u003ccode\u003eStr.subst\u003c/code\u003e 代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRational.norm\u003c/code\u003e (现在 \u003ccode\u003eRational\u003c/code\u003e 类型必须在创建时标准化)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path.child\u003c/code\u003e (使用 \u003ccode\u003e.add\u003c/code\u003e 代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;undefine\u003c/code\u003e (直接分配 \u003ccode\u003eEmpty\u003c/code\u003e/\u003ccode\u003eNil\u003c/code\u003e 代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:count\u003c/code\u003e \u003ccode\u003e\u0026amp;lines\u003c/code\u003e/\u003ccode\u003eStr.lines\u003c/code\u003e 例程上的参数(使用所返回的 \u003ccode\u003eSeq\u003c/code\u003e 上的 \u003ccode\u003e.elems\u003c/code\u003e 代替)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;is_approx\u003c/code\u003e in Test.pm6 (使用与 \u003ccode\u003e\u0026amp;is-approx\u003c/code\u003e 非常相似的行为来代替)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"新的行为\"\u003e新的行为\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e通过新的可定义的 \u003ccode\u003e\u0026amp;RUN-MAIN\u003c/code\u003e、\u003ccode\u003e\u0026amp;ARGS-TO-CAPTURE\u003c/code\u003e 和 \u003ccode\u003e\u0026amp;GENERATE-USAGE\u003c/code\u003e 子例程改善 \u003ccode\u003esub MAIN\u003c/code\u003e 的自定义处理\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e%\u003c/code\u003e 变量中的 \u003ccode\u003eQuantHash\u003c/code\u003e/\u003ccode\u003eMap\u003c/code\u003e 和 \u003ccode\u003e@\u003c/code\u003e 变量中的 \u003ccode\u003eList\u003c/code\u003e 可以用 \u003ccode\u003eis\u003c/code\u003e 特性来声明（例如，\u003ccode\u003emy %h is Set\u003c/code\u003e）\u003c/li\u003e\n\u003cli\u003e新的 \u003ccode\u003e\u0026lt;ww\u0026gt;\u003c/code\u003e regex 规则: 只在单词内匹配\u003c/li\u003e\n\u003cli\u003e循环可以从上一条语句的值中产生一个值的列表\u003c/li\u003e\n\u003cli\u003e循环中的 \u003ccode\u003enext\u003c/code\u003e/\u003ccode\u003elast\u003c/code\u003e 收集其最后的语句值, 对它们运行的迭代返回 \u003ccode\u003eEmpty\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.perl\u003c/code\u003e 可以在消耗过的 \u003ccode\u003eSeq\u003c/code\u003e、多维数组、\u003ccode\u003eDate\u003c/code\u003e 和 \u003ccode\u003eCallFrame\u003c/code\u003e 上调用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.gist\u003c/code\u003e 可以在 \u003ccode\u003eAttribute\u003c/code\u003e 上调用\u003c/li\u003e\n\u003cli\u003e对自动生成的 \u003ccode\u003eUSAGE\u003c/code\u003e 信息进行了大量改进\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eis hidden-from-USAGE\u003c/code\u003e 特性，从自动生成的 \u003ccode\u003eUSAGE\u003c/code\u003e 消息中隐藏 \u003ccode\u003esub MAIN\u003c/code\u003e 候选者\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eParameter.perl\u003c/code\u003e 包括可内省的默认值\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e%*ENV\u003c/code\u003e 值是同素异形的\u003c/li\u003e\n\u003cli\u003e尝试使用变量 \u003ccode\u003e$;\u003c/code\u003e、\u003ccode\u003e$,\u003c/code\u003e、\u003ccode\u003e$.\u003c/code\u003e、\u003ccode\u003e$\\\u003c/code\u003e、\u003ccode\u003e$(\u003c/code\u003e、\u003ccode\u003e$)\u003c/code\u003e、\u003ccode\u003e$\u0026lt;\u003c/code\u003e、\u003ccode\u003e$\u0026gt;\u003c/code\u003e、\u003ccode\u003e$/\u003c/code\u003e、\u003ccode\u003e$\\\u003c/code\u003e、\u003ccode\u003e$[\u003c/code\u003e、\u003ccode\u003e$-\u003c/code\u003e、\u003ccode\u003e$+\u003c/code\u003e 和 \u003ccode\u003e$@\u003c/code\u003e 会抛出 \u003ccode\u003eX::Syntax::Perl5Var\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e默认的 \u003ccode\u003eHash.keyof\u003c/code\u003e 返回一个 \u003ccode\u003eStr(Any)\u003c/code\u003e 强转类型对象\u003c/li\u003e\n\u003cli\u003e非 ASCII 数字可以在 \u003ccode\u003e:42foo\u003c/code\u003e 冒号对快捷方式中使用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eStrDistance\u003c/code\u003e 字符串化为 \u003ccode\u003e.after\u003c/code\u003e 字符串\u003c/li\u003e\n\u003cli\u003e更明确的 Pod 表格格式\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEnumeration.enums\u003c/code\u003e 返回一个 \u003ccode\u003eMap\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e各种整数类型的 \u003ccode\u003e.Range\u003c/code\u003e 返回它们支持的值的范围\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emin\u003c/code\u003e/\u003ccode\u003emax\u003c/code\u003e  例程也适用于 \u003ccode\u003eHash\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSignature\u003c/code\u003e 字面值可以包含字符串/数字字面值以及调用者标记\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eList.invert\u003c/code\u003e 通过所需的 \u003ccode\u003ePair\u003c/code\u003e 绑定映射, 导致潜在的类型检查失败\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:exists\u003c/code\u003e 可以与多维关联下标一起使用\u003c/li\u003e\n\u003cli\u003e动态创建的列表可以用来定义一个枚举\u003c/li\u003e\n\u003cli\u003e在 \u003ccode\u003e.first\u003c/code\u003e 中, Junction 可以作为匹配器使用\u003c/li\u003e\n\u003cli\u003e原生属性可以作为参数中的绑定目标\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProc\u003c/code\u003e 可以与其他 \u003ccode\u003eProc\u003c/code\u003e 中的 \u003ccode\u003eIO::Pipe\u003c/code\u003e 一起工作\u003c/li\u003e\n\u003cli\u003e类型数组可以用 \u003ccode\u003emy SomeType @array\u003c/code\u003e 和 \u003ccode\u003emy @array of SomeType\u003c/code\u003e 创建\u003c/li\u003e\n\u003cli\u003e当把 \u003ccode\u003eMixy\u003c/code\u003e 强转为 \u003ccode\u003eSetty\u003c/code\u003e/\u003ccode\u003eBaggy \u003c/code\u003e 时, 负数权重的项将被删除\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:nth\u003c/code\u003e 副词在 \u003ccode\u003em//\u003c/code\u003e 上接受一个 \u003ccode\u003eJunction\u003c/code\u003e 作为参数\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCX::Warn' 和 \u003c/code\u003eCX::Done\u003ccode\u003e可以在\u003c/code\u003eCONTROL` phaser 中捕获\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enext\u003c/code\u003e 可用于 \u003ccode\u003ewhenever\u003c/code\u003e 中\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erequire\u003c/code\u003e 符号不再过境性地暴露出来\u003c/li\u003e\n\u003cli\u003e通过 \u003ccode\u003e{...}\u003c/code\u003e 进行多维访问, 类似于 \u003ccode\u003e[...]\u003c/code\u003e 的工作方式\u003c/li\u003e\n\u003cli\u003e在 \u003ccode\u003eEND\u003c/code\u003e 时间打开的任何手柄都会自动关闭\u003c/li\u003e\n\u003cli\u003e在缓存的 \u003ccode\u003eSeq\u003c/code\u003e 上, 当 \u003ccode\u003e\u0026amp;infix:\u0026lt;eqv\u0026gt;\u003c/code\u003e、\u003ccode\u003e.Slip\u003c/code\u003e、\u003ccode\u003e.join\u003c/code\u003e、\u003ccode\u003e.List\u003c/code\u003e、\u003ccode\u003e.list\u003c/code\u003e、\u003ccode\u003e.eager\u003c/code\u003e、\u003ccode\u003e.Array\u003c/code\u003e 和 \u003ccode\u003e.is-lazy\u003c/code\u003e 被调用时, 就会使用缓存列表\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Handle.encoding\u003c/code\u003e 以 \u003ccode\u003eNil\u003c/code\u003e 表示切换到二进制模式\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eis default\u003c/code\u003e 特质与属性一起工作\u003c/li\u003e\n\u003cli\u003e在多重分派中, 带有 \u003ccode\u003eis rw\u003c/code\u003e 特性的参数被认为比没有特性的参数窄\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eBlob\u003c/code\u003e 和 \u003ccode\u003eMap\u003c/code\u003e 的 \u003ccode\u003e.gist\u003c/code\u003e 被裁剪成100个元素\u003c/li\u003e\n\u003cli\u003e新的 \u003ccode\u003efor\u003c/code\u003e 语句修饰符 \u003ccode\u003ehyper for\u003c/code\u003e、\u003ccode\u003erace for\u003c/code\u003e 和 \u003ccode\u003elazy for\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efor\u003c/code\u003e 循环自动序列化 \u003ccode\u003eRaceSeq\u003c/code\u003e/\u003ccode\u003eHyperSeq\u003c/code\u003e；使用新的 \u003ccode\u003efor\u003c/code\u003e 语句修饰符\u003ccode\u003ehyper for\u003c/code\u003e/\u003ccode\u003erace for\u003c/code\u003e避免\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt;does\u0026gt;\u003c/code\u003e 可用于 RHS 上的非组合实例\u003c/li\u003e\n\u003cli\u003e数值比较器可以与 \u003ccode\u003eDateTime \u003c/code\u003e 对象一起使用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePod\u003c/code\u003e 保留空白类型\u003c/li\u003e\n\u003cli\u003e定义了带 \u003ccode\u003e@\u003c/code\u003e、\u003ccode\u003e%\u003c/code\u003e 和 \u003ccode\u003e\u0026amp;\u003c/code\u003e 魔符常数的语义\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"math\"\u003eMath\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRational\u003c/code\u003e 总是在创建时被化简, 并在其一生中保持不变\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eInf\u003c/code\u003e、\u003ccode\u003eInf\u003c/code\u003e 和 \u003ccode\u003eNaN\u003c/code\u003e 可以分别用 \u003ccode\u003e\u0026lt;-1/0\u0026gt;\u003c/code\u003e、\u003ccode\u003e\u0026lt;1/0\u0026gt;\u003c/code\u003e 和 \u003ccode\u003e\u0026lt;0/0\u003c/code\u003e\u0026gt; 表示, 通过\u003ccode\u003eRational\u003c/code\u003e 类型进行舍去。零分母 \u003ccode\u003eRational\u003c/code\u003e 被标准化为这三个值之一\u003c/li\u003e\n\u003cli\u003e在 ±\u003ccode\u003eInf\u003c/code\u003e 和 \u003ccode\u003eNaN\u003c/code\u003e 上调用 \u003ccode\u003e.Int\u003c/code\u003e, 会抛出异常\u003c/li\u003e\n\u003cli\u003e改进了 \u003ccode\u003eNum\u003c/code\u003e 运算符和数学函数的 IEEE 754-2008 合规性\u003c/li\u003e\n\u003cli\u003e负零 \u003ccode\u003eNum\u003c/code\u003e(\u003ccode\u003e-0e0\u003c/code\u003e)被所有例程和语法结构正确处理\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNum\u003c/code\u003e 类型的字符串化必须是可舍弃到原始 \u003ccode\u003eNum\u003c/code\u003e 的\u003c/li\u003e\n\u003cli\u003e定义了涉及零的 \u003ccode\u003eComplex \u003c/code\u003e 指数\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.expmod\u003c/code\u003e 中的负数幂有效\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"setsbagsmixesaka-quanthashes和集合运算符\"\u003eSets、Bags、Mixes(aka QuantHashes)和集合运算符\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSet 运算符可以用在任何对象上, 在需要的时候会被强转\n\u003cul\u003e\n\u003cli\u003e所以, 不需要也不希望有任何预先的强转\u003c/li\u003e\n\u003cli\u003e如果没有 QuantHash 就能实现所需的功能, 那么 Set 运算符可以自由地不创建任何 QuantHash\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e对不同类型的 QuantHashes 的 Set 操作将强转到最自由的形式（Set -\u0026gt; Bag -\u0026gt; Mix）\u003c/li\u003e\n\u003cli\u003e集合运算符的 set_precedes 家族( \u003ccode\u003e(\u0026lt;+)\u003c/code\u003e、\u003ccode\u003e≼\u003c/code\u003e、\u003ccode\u003e(\u0026gt;+)\u003c/code\u003e、\u003ccode\u003e≽\u003c/code\u003e) 已被移除\n\u003cul\u003e\n\u003cli\u003e曾经是子集运算符的 Baggy 形式\u003c/li\u003e\n\u003cli\u003eQuantHash 升级为最自由的形式, 所以 \u003ccode\u003e(\u0026lt;=)\u003c/code\u003e、\u003ccode\u003e⊆\u003c/code\u003e、\u003ccode\u003e(\u0026gt;=)\u003c/code\u003e、\u003ccode\u003e⊇\u003c/code\u003e 做正确的事情\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.classify-list\u003c/code\u003e 方法可用于 \u003ccode\u003eBaggy\u003c/code\u003e 类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.categorize-list\u003c/code\u003e 方法可用于 \u003ccode\u003eBaggy\u003c/code\u003e 类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.invert\u003c/code\u003e 方法可用于核心 \u003ccode\u003eQuantHash\u003c/code\u003e 类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.antipairs\u003c/code\u003e 方法可用于 \u003ccode\u003eQuantHash\u003c/code\u003e 类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eQuantHash\u003c/code\u003e 类型有 \u003ccode\u003e.new-from-pairs\u003c/code\u003e 和将一个 \u003ccode\u003eQuantHash\u003c/code\u003e 类型转换为另一个 \u003ccode\u003eQuantHash\u003c/code\u003e 类型的方法(例如 \u003ccode\u003eSet\u003c/code\u003e 类型的 \u003ccode\u003e.Bag\u003c/code\u003e 方法)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eQuantHash\u003c/code\u003e 类型上的 \u003ccode\u003e.hash\u003c/code\u003e 对键值进行了字符串化\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"新的形参和实参\"\u003e新的形参和实参\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eDate.new\u003c/code\u003e 接受一个 \u003ccode\u003e:\u0026amp;formatter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.first\u003c/code\u003e 可以接受 \u003ccode\u003e:kv\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunique\u003c/code\u003e 和 \u003ccode\u003e.repeated\u003c/code\u003e 可以接受 \u003ccode\u003e:\u0026amp;as\u003c/code\u003e 和 \u003ccode\u003e:\u0026amp;with\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eTest.pm6 中的 \u003ccode\u003e\u0026amp;plan\u003c/code\u003e 可以接受 \u003ccode\u003e:skip-all\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;run\u003c/code\u003e/\u003ccode\u003e\u0026amp;shell\u003c/code\u003e 可以接受 \u003ccode\u003e:merge\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;note\u003c/code\u003e 可以在没有参数的情况下调用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eopen\u003c/code\u003e 接受 \u003ccode\u003e:$out-buffer\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path.resolve\u003c/code\u003e 可以接受 \u003ccode\u003e:completely\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path.parent\u003c/code\u003e 可以接受一个 \u003ccode\u003eInt\u003c/code\u003e 表示父级\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProc::Async.new\u003c/code\u003e 吞噬位置参数\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSignature.ACCEPTS\u003c/code\u003e 接受非 \u003ccode\u003eSignature\u003c/code\u003e/\u003ccode\u003eCapture\u003c/code\u003e 参数\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;EVAL\u003c/code\u003e 可以接受一个 \u003ccode\u003eBlob\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePromise.keep\u003c/code\u003e/\u003ccode\u003e.break\u003c/code\u003e 可以在没有参数的情况下调用\u003c/li\u003e\n\u003cli\u003e原生数组上的 \u003ccode\u003e.sum\u003c/code\u003e 可以接受 \u003ccode\u003e:wrap\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eis required\u003c/code\u003e 现在可以接受一个表示理由的参数\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Socket::Async.listen\u003c/code\u003e 可以绑定到端口 \u003ccode\u003e0\u003c/code\u003e 以向操作系统申请免费端口\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.encode\u003c/code\u003e 可以接受 \u003ccode\u003e:translate-nl\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"新的例程和运算符\"\u003e新的例程和运算符\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e新的 \u003ccode\u003eatomicint\u003c/code\u003e Unicode 运算符和 ASCII 等价物, 保证线程安全, 原子操作:\n\u003ccode\u003e\u0026amp;infix:\u0026lt;⚛=\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-assign\u003c/code\u003e、\u003ccode\u003e\u0026amp;prefix:\u0026lt;⚛\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-fetch\u003c/code\u003e、\n\u003ccode\u003e\u0026amp;prefix:\u0026lt;++⚛\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-inc-fetch\u003c/code\u003e、\u003ccode\u003e\u0026amp;postfix:\u0026lt;⚛++\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-fetch-inc\u003c/code\u003e、\n\u003ccode\u003e\u0026amp;prefix:\u0026lt;--⚛\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-dec-fetch\u003c/code\u003e、\u003ccode\u003e\u0026amp;postfix:\u0026lt;⚛--\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-fetch-dec\u003c/code\u003e、\n\u003ccode\u003e\u0026amp;infix:\u0026lt;⚛-=\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;infix:\u0026lt;⚛−=\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-fetch-sub\u003c/code\u003e 和 \u003ccode\u003e\u0026amp;infix:\u0026lt;⚛+=\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;atomic-fetch-add\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;cas\u003c/code\u003e: 原子比较与交换\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e≤\u003c/code\u003e、\u003ccode\u003e≥\u003c/code\u003e 和 \u003ccode\u003e≠\u003c/code\u003e 运算符是 Unicode 运算符, 分别等价于 \u003ccode\u003e\u0026lt;=\u003c/code\u003e、\u003ccode\u003e\u0026gt;=\u003c/code\u003e 和 \u003ccode\u003e!=\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt;unicmp\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;infix:\u0026lt;coll\u0026gt;\u003c/code\u003e: \u003ccode\u003e\u0026amp;infix:\u0026lt;cmp\u0026gt;\u003c/code\u003e 的替代行为\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTR///\u003c/code\u003e: \u003ccode\u003etr///\u003c/code\u003e 的非变异版本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubmethod TWEAK\u003c/code\u003e: 与 \u003ccode\u003eBUILD\u003c/code\u003e 类似, 除了它与属性默认值兼容之外\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;duckmap\u003c/code\u003e: 应用 \u003ccode\u003e\u0026amp;callable\u003c/code\u003e 到每个元素上\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;deepmap\u003c/code\u003e: 应用 \u003ccode\u003e\u0026amp;callable\u003c/code\u003e 到每个元素上, 下降到 \u003ccode\u003eIterable\u003c/code\u003e 中\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;take-rw\u003c/code\u003e: 像 \u003ccode\u003e\u0026amp;take\u003c/code\u003e 一样, 但有一个可写的容器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;indir\u003c/code\u003e: 在给定的 \u003ccode\u003e$*CWD\u003c/code\u003e 中执行代码\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;spurt\u003c/code\u003e: 参见 \u003ccode\u003eIO::Path.spurt\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;prompt\u003c/code\u003e: 提示用户输入\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euniprops\u003c/code\u003e: \u003ccode\u003euniprop\u003c/code\u003e 的多字符版本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esymlink\u003c/code\u003e: 建立文件符号链接\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elink\u003c/code\u003e: 创建文件硬连接\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.hyper\u003c/code\u003e/\u003ccode\u003e.race\u003c/code\u003e: 并行处理值的列表\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSeq.from-loop\u003c/code\u003e: 从 \u003ccode\u003eCallable\u003c/code\u003e 生产一个 \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eStr.uniparse\u003c/code\u003e: 将一个或多个 Unicode 字符名解析为实际字符\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eStr.parse-base\u003c/code\u003e: \u003ccode\u003eInt.base\u003c/code\u003e 操作的反转\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path\u003c/code\u003e 提供了 \u003ccode\u003e.ACCEPTS\u003c/code\u003e、\u003ccode\u003e.SPEC\u003c/code\u003e、\u003ccode\u003e.CWD\u003c/code\u003e、\u003ccode\u003e.Numeric\u003c/code\u003e、\u003ccode\u003e.add\u003c/code\u003e、\u003ccode\u003e.extension\u003c/code\u003e、\u003ccode\u003e.mode\u003c/code\u003e 和各种文件测试、\u003ccode\u003e.parts\u003c/code\u003e、\u003ccode\u003e.sibling\u003c/code\u003e 和 \u003ccode\u003e.spurt\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Handle\u003c/code\u003e 提供了 \u003ccode\u003e.READ\u003c/code\u003e、\u003ccode\u003e.WRITE\u003c/code\u003e、\u003ccode\u003e.EOF\u003c/code\u003e、\u003ccode\u003e.DESTROY\u003c/code\u003e,\n\u003ccode\u003e.readchars\u003c/code\u003e、\u003ccode\u003e.flush\u003c/code\u003e、\u003ccode\u003e.lock\u003c/code\u003e、\u003ccode\u003e.unlock\u003c/code\u003e、\u003ccode\u003e.out-buffer\u003c/code\u003e、\u003ccode\u003e.tell\u003c/code\u003e,\n\u003ccode\u003e.say\u003c/code\u003e、\u003ccode\u003e.slurp\u003c/code\u003e、\u003ccode\u003e.seek\u003c/code\u003e、\u003ccode\u003e.printf\u003c/code\u003e、\u003ccode\u003e.print-nl\u003c/code\u003e 和 \u003ccode\u003e.watch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Pipe\u003c/code\u003e 提供了 \u003ccode\u003e.proc\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIterator\u003c/code\u003e 提供了 \u003ccode\u003e.skip-one\u003c/code\u003e、\u003ccode\u003e.skip-at-least\u003c/code\u003e 和 \u003ccode\u003e.skip-at-least-pull-one\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMu.emit\u003c/code\u003e: \u003ccode\u003e\u0026amp;emit\u003c/code\u003e 的方法形式\u003c/li\u003e\n\u003cli\u003eTest.pm6 模块中的 \u003ccode\u003e\u0026amp;fails-like\u003c/code\u003e: 允许测试失败\u003c/li\u003e\n\u003cli\u003eTest.pm6 模块中的 \u003ccode\u003e\u0026amp;bail-out\u003c/code\u003e: 退出失败的测试套件\u003c/li\u003e\n\u003cli\u003eTest.pm6 模块中的 \u003ccode\u003e\u0026amp;is-approx\u003c/code\u003e: 测试一个数字近似于另一个\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBuf\u003c/code\u003e 拥有 \u003ccode\u003e.allocate\u003c/code\u003e、\u003ccode\u003e.reallocate\u003c/code\u003e、\u003ccode\u003e.append\u003c/code\u003e、\u003ccode\u003e.push\u003c/code\u003e、\u003ccode\u003e.pop\u003c/code\u003e、\u003ccode\u003e.splice\u003c/code\u003e、\u003ccode\u003e.subbuf-rw\u003c/code\u003e、\u003ccode\u003e.prepend\u003c/code\u003e 和 \u003ccode\u003e.unshift\u003c/code\u003e 方法\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRange\u003c/code\u003e 支持了 \u003ccode\u003e.rand\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBacktrace\u003c/code\u003e 拥有方法 \u003ccode\u003e.map\u003c/code\u003e、\u003ccode\u003e.flat\u003c/code\u003e、\u003ccode\u003e.concise\u003c/code\u003e 和 \u003ccode\u003e.summary\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.classify-list\u003c/code\u003e 方法可用于 \u003ccode\u003eHash\u003c/code\u003e 类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.categorize-list\u003c/code\u003e 方法可用于 \u003ccode\u003eHash\u003c/code\u003e 类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCode.of\u003c/code\u003e: 返回返回类型约束\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCode.line\u003c/code\u003e/\u003ccode\u003e.file\u003c/code\u003e: 返回定义的行/文件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProc::Async\u003c/code\u003e 提供了 \u003ccode\u003e.Supply\u003c/code\u003e、\u003ccode\u003e.ready\u003c/code\u003e、\u003ccode\u003e.pid\u003c/code\u003e、\u003ccode\u003e.bind-stdin\u003c/code\u003e、\u003ccode\u003e.bind-stdout\u003c/code\u003e 和 \u003ccode\u003e.bind-stderr\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProc.command\u003c/code\u003e/\u003ccode\u003eProc::Async.command\u003c/code\u003e: 我们要执行的命令\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProc\u003c/code\u003e 提供了 \u003ccode\u003e.signal\u003c/code\u003e、\u003ccode\u003e.pid\u003c/code\u003e 和 \u003cdel\u003e\u003ccode\u003e.encoding\u003c/code\u003e\u003c/del\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eComplex\u003c/code\u003e 提供了 \u003ccode\u003e.cis\u003c/code\u003e、\u003ccode\u003e.reals\u003c/code\u003e、\u003ccode\u003e.ceiling\u003c/code\u003e、\u003ccode\u003e.floor\u003c/code\u003e、\u003ccode\u003e.round\u003c/code\u003e、\u003ccode\u003e.truncate\u003c/code\u003e 和 \u003ccode\u003e.abs\u003c/code\u003e 方法, 并可以使用 \u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e 进行比较(只要虚部可以忽略不计)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDateTime\u003c/code\u003e 提供了 \u003ccode\u003e.offset-in-hours\u003c/code\u003e、\u003ccode\u003e.hh-mm-ss\u003c/code\u003e 和 \u003ccode\u003e.Date\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDateTime\u003c/code\u003e 可以使用 \u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e 运算符和其它 \u003ccode\u003eDateTime\u003c/code\u003e 对象进行比较\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDate\u003c/code\u003e 提供了 \u003ccode\u003e.DateTime\u003c/code\u003e 方法\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt;+\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;infix:\u0026lt;-\u0026gt;\u003c/code\u003e 可以被 \u003ccode\u003eDuration\u003c/code\u003e、\u003ccode\u003eDateTime\u003c/code\u003e 和 \u003ccode\u003eReal\u003c/code\u003e 类型调用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEnumeration\u003c/code\u003e 提供了 \u003ccode\u003e.Int\u003c/code\u003e、\u003ccode\u003e.pred\u003c/code\u003e、\u003ccode\u003e.succ\u003c/code\u003e、\u003ccode\u003e.kv\u003c/code\u003e 和 \u003ccode\u003e.pair\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.Date\u003c/code\u003e 可以在 \u003ccode\u003eInstant\u003c/code\u003e 上调用\u003c/li\u003e\n\u003cli\u003eJunction 能使用 \u003ccode\u003eJunction.new\u003c/code\u003e 调用来创建\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eList\u003c/code\u003e 类型拥有 \u003ccode\u003e.to\u003c/code\u003e 和 \u003ccode\u003e.from\u003c/code\u003e 方法\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMap\u003c/code\u003e type 提供了 \u003ccode\u003eInt\u003c/code\u003e 方法, 返回 pair 的数量\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAny.skip\u003c/code\u003e: 跳过列表中的值\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAny.batch\u003c/code\u003e: \u003ccode\u003e.rotor\u003c/code\u003e 的更基本的表兄弟\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMu.iterator\u003c/code\u003e: 为一个列表中的值生成一个 \u003ccode\u003eIterator\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Spec::*\u003c/code\u003e 类型提供了 \u003ccode\u003e.tmpdir\u003c/code\u003e、\u003ccode\u003e.extension\u003c/code\u003e 和 \u003ccode\u003e.path\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePair\u003c/code\u003e 提供了 \u003ccode\u003e.ACCEPTS\u003c/code\u003e、\u003ccode\u003e.Pair\u003c/code\u003e 和 \u003ccode\u003e.invert\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.Capture\u003c/code\u003e 方法对所有核心类型都有明确定义\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003e.ACCEPTS\u003c/code\u003e 在同素异形体上的语义\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFailure.self\u003c/code\u003e 使未处理的 \u003ccode\u003eFailure\u003c/code\u003e 爆发\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eThread.is-initial-thread\u003c/code\u003e: 我们是在初始线程中运行吗\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMatch\u003c/code\u003e 提供了 \u003ccode\u003e.Int\u003c/code\u003e 和 \u003ccode\u003e.actions\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Socket::Async\u003c/code\u003e 提供了 \u003ccode\u003e.socket-port\u003c/code\u003e 和 \u003ccode\u003e.peer-port\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePromise\u003c/code\u003e 提供了另一种构造函器 \u003ccode\u003e.kept\u003c/code\u003e 和 \u003ccode\u003e.broken\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eWhateverCode\u003c/code\u003e 提供了 \u003ccode\u003e.assuming\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eWhateverCode\u003c/code\u003e 和 \u003ccode\u003eBlock\u003c/code\u003e 提供了 \u003ccode\u003e.cando\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.:\u0026lt;…\u0026gt;\u003c/code\u003e 语法用于调用前缀运算符作为后缀\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$*KERNEL\u003c/code\u003e 提供了 \u003ccode\u003e.hostname\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNil\u003c/code\u003e 拥有定义的 \u003ccode\u003e.FALLBACK\u003c/code\u003e 特殊方法来返回 \u003ccode\u003eNil\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"新类型\"\u003e新类型\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eatomicint\u003c/code\u003e: 原生的 \u003ccode\u003eint\u003c/code\u003e, 大小可用于新的原子运算符\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLock::Async\u003c/code\u003e: 互斥的非阻塞机制\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEncoding::Registry\u003c/code\u003e: 管理可用的编码\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEncoding::Encoder\u003c/code\u003e: 编码器, 用于特定的编码\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEncoding::Decoder\u003c/code\u003e: 解码器, 用于特定的编码\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::CatHandle\u003c/code\u003e: 将多个只读的 \u003ccode\u003eIO::Handle\u003c/code\u003e 视同一个\u003c/li\u003e\n\u003cli\u003e原生的 \u003ccode\u003estr\u003c/code\u003e 数组\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSupplier::Preserving\u003c/code\u003e: 缓存的实时 \u003ccode\u003eSupply\u003c/code\u003e 工厂\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSemaphore\u003c/code\u003e: 控制多线程对共享资源的访问\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Special\u003c/code\u003e: 特殊I/O设备的路径 (例如 \u003ccode\u003eSTDOUT\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eExceptions::JSON\u003c/code\u003e 自定义异常处理程序的实现(可与\u003ccode\u003ePERL6_EXCEPTIONS_HANDLER\u003c/code\u003e 环境变量一起使用)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSeekType\u003c/code\u003e 枚举: \u003ccode\u003eIO::Handle.seek\u003c/code\u003e 中使用的值\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"新的变量\"\u003e新的变量\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e$*USAGE\u003c/code\u003e: 可在 \u003ccode\u003eMAIN\u003c/code\u003e 子例程中使用, 包含自动生成的 \u003ccode\u003eUSAGE\u003c/code\u003e 信息\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e%*SUB-MAIN-OPTS: 设置 \u003ccode\u003esub MAIN\u003c/code\u003e 的行为\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e%*SUB-MAIN-OPTS\u0026lt;named-anywhere\u0026gt;\u003c/code\u003e 允许将命名参数放在命令行的任何位置\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e$*COLLATION\u003c/code\u003e: 配置四个 Unicode 校对级别\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e$*INIT-INSTANT\u003c/code\u003e: 代表程序启动时间的 \u003ccode\u003eInstant\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e$*HOME\u003c/code\u003e: 用户的主目录, 如果存在的话\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e\u0026amp;*chdir\u003c/code\u003e: \u003ccode\u003eCallable\u003c/code\u003e 包含 \u003ccode\u003eIO::Path.chdir\u003c/code\u003e 的变体, 也设置进程的当前目录\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ePERL6_TEST_DIE_ON_FAIL\u003c/code\u003e 环境变量: 在第一次失败时停止测试套件\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ePERL6_EXCEPTIONS_HANDLER\u003c/code\u003e 环境变量: 指定自定义异常处理类\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"对边缘情况强转行为的澄清\"\u003e对边缘情况/强转行为的澄清\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eUInt\u003c/code\u003e 与 \u003ccode\u003eInt\u003c/code\u003e 类型对象智能匹配为 \u003ccode\u003eTrue\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esink\u003c/code\u003e 语句前缀爆炸 \u003ccode\u003eFailure\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义了1项和0项列表以及负参数和非整数参数的 \u003ccode\u003epermutations\u003c/code\u003e/\u003ccode\u003ecombinations\u003c/code\u003e 的行为\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;val\u003c/code\u003e、\u003ccode\u003eStr.Numeric\u003c/code\u003e 和其他 \u003ccode\u003eStr\u003c/code\u003e 数字转换方法在试图转换 Unicode \u003ccode\u003eNo\u003c/code\u003e 字符组或合成数字时会 \u003ccode\u003efail\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:42foo\u003c/code\u003e 冒号对快捷方式中不能使用合成数字\u003c/li\u003e\n\u003cli\u003e现在、\u003ccode\u003eEnumeration\u003c/code\u003e 可以作为一个数组形状指定器使用\u003c/li\u003e\n\u003cli\u003e含有空格的 \u003ccode\u003eStr\u003c/code\u003e 的数值转换现在返回 \u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e带空的模式参数的 \u003ccode\u003esamark\u003c/code\u003e, 简单地返回调用者\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.polymod\u003c/code\u003e 可用于 \u003ccode\u003elazy\u003c/code\u003e 但有限的除数列表\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003e.[*-0]\u003c/code\u003e 索引\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.rotor\u003c/code\u003e 中大于子列表的负数空隙抛出异常\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.rotor\u003c/code\u003e 的非 \u003ccode\u003eInt\u003c/code\u003e 参数被强转为 \u003ccode\u003eInt\u003c/code\u003e 参数\u003c/li\u003e\n\u003cli\u003e读取 \u003ccode\u003e/proc\u003c/code\u003e 文件时定义了 \u003ccode\u003e.lines\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义了字符串上后缀/前缀  \u003ccode\u003e++\u003c/code\u003e/\u003ccode\u003e--\u003c/code\u003e 中泰语数字的行为\u003c/li\u003e\n\u003cli\u003esunk \u003ccode\u003efor\u003c/code\u003e 里面的 \u003ccode\u003emap\u003c/code\u003e 被视为 sunk\u003c/li\u003e\n\u003cli\u003eSunk \u003ccode\u003efor\u003c/code\u003e 循环将上一条语句的方法调用值下沉\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBool\u003c/code\u003e 对象上的 \u003ccode\u003e.Int\u003c/code\u003e 返回一个 \u003ccode\u003eInt\u003c/code\u003e 对象\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esplice\u003c/code\u003e 可用于扩展数组\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eclassify\u003c/code\u003e 可以与 \u003ccode\u003eJunction\u003c/code\u003e 配合使用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.pairup\u003c/code\u003e on a type object returns an empty \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.pairup\u003c/code\u003e 总是返回一个 \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e拒绝接受  \u003ccode\u003eDate\u003c/code\u003e/\u003ccode\u003eDateTime\u003c/code\u003e 构造函数中的合成代码点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e⸨\u003c/code\u003e/\u003ccode\u003e⸩\u003c/code\u003e 对儿现在可以作为引号结构中的匹配字符使用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eArray\u003c/code\u003e 类型对象上的 \u003ccode\u003e.flat\u003c/code\u003e 简单地返回该类型对象\u003c/li\u003e\n\u003cli\u003e混合级 \u003ccode\u003eclassify\u003c/code\u003e 在 \u003ccode\u003eHash\u003c/code\u003e 上抛出异常\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eJunction\u003c/code\u003e 可以用于给 \u003ccode\u003eHash\u003c/code\u003e 指定多个键\u003c/li\u003e\n\u003cli\u003e给 \u003ccode\u003e.classify-list\u003c/code\u003e 的 \u003ccode\u003eCallable\u003c/code\u003e 现在保证每项只执行一次\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:delete\u003c/code\u003e 对 \u003ccode\u003eHash\u003c/code\u003e 类型对象进行关联查找时返回 \u003ccode\u003eNil\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eTest.pm6 中的 \u003ccode\u003e\u0026amp;is-deeply\u003c/code\u003e 会自动 \u003ccode\u003e.cache\u003c/code\u003e 作为参数的 \u003ccode\u003eSeq\u003c/code\u003e, 并使用返回的 \u003ccode\u003eList\u003c/code\u003e 进行测试\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eComplex.new()\u003c/code\u003e 给出 \u003ccode\u003e\u0026lt;0+0i\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eInt.new\u003c/code\u003e 现在可以保证构建一个新的 \u003ccode\u003eInt\u003c/code\u003e (而不是, 比如说, 从常量缓存中重用一个)\u003c/li\u003e\n\u003cli\u003e定义了一个参数(1-arg)版本的 \u003ccode\u003e\u0026amp;infix:\u0026lt;=:=\u0026gt;\u003c/code\u003e 和 \u003ccode\u003e\u0026amp;infix:\u0026lt;eqv\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e如果直接或间接地调用 \u003ccode\u003e.BIND-POS\u003c/code\u003e、\u003ccode\u003e.BIND-KEY\u003c/code\u003e、\u003ccode\u003e.ASSIGN-POS\u003c/code\u003e、\u003ccode\u003e.ASSIGN-KEY\u003c/code\u003e、\u003ccode\u003e.STORE\u003c/code\u003e、\u003ccode\u003e.push\u003c/code\u003e、\u003ccode\u003e.append\u003c/code\u003e、\u003ccode\u003e.unshift\u003c/code\u003e、\u003ccode\u003e.prepend\u003c/code\u003e、\u003ccode\u003eNil\u003c/code\u003e 类型现在抛出异常\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNil.ord\u003c/code\u003e 返回一个空的 \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNil.chrs\u003c/code\u003e 返回一个 \u003ccode\u003e\u0026quot;\\0\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNum.new\u003c/code\u003e 强转参数为 \u003ccode\u003eNum\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003einfix:\u0026lt;Z\u0026gt;()\u003c/code\u003e 返回一个空的 \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.comb\u003c/code\u003e 总是返回一个 \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e用 \u003ccode\u003e\u0026amp;infix:\u0026lt;+\u0026gt;\u003c/code\u003e 化简一个项, 简单地返回该项\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e()[0]\u003c/code\u003e 返回 \u003ccode\u003eNil\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e允许在(可能是无限的) \u003ccode\u003eSeq\u003c/code\u003e 上使用 Regex 智能匹配\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003eRange\u003c/code\u003e 对象的智能匹配\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSet\u003c/code\u003e 转换为\u003ccode\u003eMix\u003c/code\u003e/\u003ccode\u003eBag\u003c/code\u003e 不再有 \u003ccode\u003eBool\u003c/code\u003e 权重\u003c/li\u003e\n\u003cli\u003e当一个或多个操作数为 \u003ccode\u003e0\u003c/code\u003e 时、\u003ccode\u003egcd\u003c/code\u003e 是有定义的\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edefined\u003c/code\u003e 例程中的 \u003ccode\u003eJunction\u003c/code\u003e 自动线程化\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esum\u003c/code\u003e 可以处理含有 \u003ccode\u003eJunction\u003c/code\u003e 的列表\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGrammar.parse\u003c/code\u003e 让顶级 \u003ccode\u003eregex\u003c/code\u003e 回溯\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eU+2212 MINUS SIGN [Sm] (-)\u003c/code\u003e 现在得到更多结构的支持, 如 \u003ccode\u003eStr.Numeric\u003c/code\u003e 和 \u003ccode\u003e\u0026amp;val\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eArity-1 \u003ccode\u003e\u0026amp;infix:\u0026lt;~\u0026gt;\u003c/code\u003e 与 \u003ccode\u003eBlob\u003c/code\u003e 可以一起工作\u003c/li\u003e\n\u003cli\u003e在签名中, 所有的 \u003ccode\u003eNumeric\u003c/code\u003e 字面值都支持作为值字面值\u003c/li\u003e\n\u003cli\u003e正则表达式中的 \u003ccode\u003e\\b\u003c/code\u003e 和 \u003ccode\u003e\\B\u003c/code\u003e 抛出 \u003ccode\u003eX::Obsolete\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTrue\u003c/code\u003e 和 \u003ccode\u003eFalse\u003c/code\u003e 作为签名中的值字面量发出警告\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.sort\u003c/code\u003e 和 \u003ccode\u003eIO::Spec::Unix.path\u003c/code\u003e 的返回值总是 \u003ccode\u003eSeq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRange\u003c/code\u003e 对象上的 Out-of-range \u003ccode\u003e.AT-POS\u003c/code\u003e 返回 \u003ccode\u003eNil\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e对于不存在的键、\u003ccode\u003ePair.AT-KEY\u003c/code\u003e 返回 \u003ccode\u003eNil\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e所有的 \u003ccode\u003eCool\u003c/code\u003e 类型都提供了 \u003ccode\u003e.Rat\u003c/code\u003e/\u003ccode\u003e.FatRat\u003c/code\u003e 强转器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path\u003c/code\u003e 文件测试不缓存先前测试执行的结果\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSeq\u003c/code\u003e eqv \u003ccode\u003eList\u003c/code\u003e 仅根据类型不匹配就定为 \u003ccode\u003eFalse\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cdel\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e在 \u003ccode\u003eHash \u003c/code\u003e、\u003ccode\u003eHash \u003c/code\u003e 和 \u003ccode\u003eQuantHash\u003c/code\u003e 上, 来自 \u003ccode\u003e.kv\u003c/code\u003e、\u003ccode\u003e.values\u003c/code\u003e 和 \u003ccode\u003e.pair\u003c/code\u003e 序列的值是可写的\u003c/del\u003e 参见 \u003ca href=\"https://github.com/Raku/roast/issues/614\"\u003eRaku/roast#614\u003c/a\u003e 和 \u003ca href=\"https://github.com/Raku/doc/issues/3519\"\u003e#3519\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt;∘\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;infix:\u0026lt;o\u0026gt;\u003c/code\u003e 保留 LHF 的 \u003ccode\u003e.of\u003c/code\u003e 和 RHS 的 \u003ccode\u003e.arity\u003c/code\u003e 和 \u003ccode\u003e.count\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e完善了 regex 运算符副词中的可接受参数(例如:\u003ccode\u003e:in(…)\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e完善了 \u003ccode\u003eIO::Handle.open\u003c/code\u003e 中可接受的参数组合\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path.Str\u003c/code\u003e 不包含 \u003ccode\u003e.CWD\u003c/code\u003e 属性的值\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Path\u003c/code\u003e 类型拒绝带有  \u003ccode\u003enul\u003c/code\u003e 字节 (\u003ccode\u003e\u0026quot;\\0\u0026quot;\u003c/code\u003e) 的路径\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Pipe\u003c/code\u003e 的 \u003ccode\u003e.path\u003c/code\u003e/\u003ccode\u003e.IO\u003c/code\u003e 返回一个 \u003ccode\u003eIO::Path\u003c/code\u003e 类型对象\u003c/li\u003e\n\u003cli\u003e如果目的路径和源路径是一样的 \u003ccode\u003eIO::Path\u003c/code\u003e 的 \u003ccode\u003e.copy\u003c/code\u003e/\u003ccode\u003e.move\u003c/code\u003e 会 \u003ccode\u003efail\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edir\u003c/code\u003e 创建的 \u003ccode\u003eIO::Path\u003c/code\u003e 绝对性由调用者控制\u003c/li\u003e\n\u003cli\u003e更多定义的边缘行为、\u003ccode\u003eCallable \u003c/code\u003e 处理、\u003ccode\u003e. defined\u003c/code\u003e 调用, 以及 \u003ccode\u003e\u0026amp;infix:\u0026lt;andthen\u0026gt;\u003c/code\u003e、\u003ccode\u003e\u0026amp;infix:\u0026lt;orelse\u0026gt;\u003c/code\u003e 和 \u003ccode\u003e\u0026amp;infix:\u0026lt;notandthen\u0026gt;\u003c/code\u003e 操作符的链接\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSeq\u003c/code\u003e 的禅切不缓存它们\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eList.Capture\u003c/code\u003e 将任何包含的 \u003ccode\u003ePair\u003c/code\u003e 对象的键字符串化\u003c/li\u003e\n\u003cli\u003e带处理的 \u003ccode\u003eFailure\u003c/code\u003e 参数的 \u003ccode\u003e\u0026amp;fail\u003c/code\u003e 把它标记为是未处理的\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euse lib\u003c/code\u003e 接受 \u003ccode\u003eIO::Path\u003c/code\u003e 对象\u003c/li\u003e\n\u003cli\u003e锚点 \u003ccode\u003e^\u003c/code\u003e、\u003ccode\u003e^^\u003c/code\u003e、\u003ccode\u003e$\u003c/code\u003e 和 \u003ccode\u003e$$\u003c/code\u003e 在环视中有效\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGrammar.made\u003c/code\u003e 支持类型对象\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.isa\u003c/code\u003e 支持 \u003ccode\u003esubset \u003c/code\u003e 类型对象\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:delete\u003c/code\u003e 可用于惰性数组\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt;eqv\u0026gt;\u003c/code\u003e 可以在某些情况下对惰性参数起作用\u003c/li\u003e\n\u003cli\u003e动态查询(\u003ccode\u003e::(...)\u003c/code\u003e) 是限制性的 regex 语法, 并且需要 \u003ccode\u003euse MONKEY-SEE-NO-EVAL\u003c/code\u003e 的许可\u003c/li\u003e\n\u003cli\u003e定义了带孔数组的 \u003ccode\u003e.Slip\u003c/code\u003e 和 \u003ccode\u003e.List\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePromise.in\u003c/code\u003e/\u003ccode\u003e.at\u003c/code\u003e 和 \u003ccode\u003eSupply.interval\u003c/code\u003e 可以用零值和负值工作\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSupply.interval\u003c/code\u003e 最小值为 \u003ccode\u003e0.001\u003c/code\u003e；较低值被处理为 \u003ccode\u003e0.001\u003c/code\u003e, 并发出警告#, 参见 \u003ca href=\"https://github.com/Raku/doc/pull/2649\"\u003ehttps://docs.perl6.org/type/Supply#method_interval PR [#2649]\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSupply\u003c/code\u003e 提供了 \u003ccode\u003e.Seq\u003c/code\u003e、\u003ccode\u003e.list\u003c/code\u003e 和 \u003ccode\u003e.zip\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e可以在构建方法中绑定到原生类型属性\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eWhateverCode\u003c/code\u003e 传播 \u003ccode\u003euse fatal\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esay\u003c/code\u003e、\u003ccode\u003enote\u003c/code\u003e、\u003ccode\u003eput\u003c/code\u003e、\u003ccode\u003eprint\u003c/code\u003e 和 \u003ccode\u003eprintf\u003c/code\u003e 例程自动线程化 \u003ccode\u003eJunction\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIO::Handle.eof\u003c/code\u003e 值在 \u003ccode\u003e.seek\u003c/code\u003e 过终点后再返回时也会相应改变\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003e.succ'、\u003c/code\u003e.pred\u003ccode\u003e和\u003c/code\u003e.Bool` 的同质异形体\u003c/li\u003e\n\u003cli\u003e在核心 \u003ccode\u003eNumeric\u003c/code\u003e 上定义了 \u003ccode\u003e.Bridge\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cdel\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e在核心 \u003ccode\u003eNumeric\u003c/code\u003e 的类型对象上定义了 \u003ccode\u003e.Numeric\u003c/code\u003e/\u003ccode\u003e.Real\u003c/code\u003e\u003c/del\u003e\u003c/li\u003e\n\u003cli\u003e定义了关于零分母有理数的 \u003ccode\u003eRational.Bool\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esay\u003c/code\u003e/\u003ccode\u003enote\u003c/code\u003e 保证在 \u003ccode\u003eStr\u003c/code\u003e 的子类上调用 \u003ccode\u003e.gist\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003eJunction.Str\u003c/code\u003e 返回 \u003ccode\u003eJunction\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003eJunction.gist\u003c/code\u003e/\u003ccode\u003e.perl\u003c/code\u003e 返回一个 \u003ccode\u003eStr\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMap\u003c/code\u003e/\u003ccode\u003eHash\u003c/code\u003e 的 \u003ccode\u003e.list\u003c/code\u003e/\u003ccode\u003e.cache\u003c/code\u003e 返回一个 \u003ccode\u003eList\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003e.round\u003c/code\u003e 的返回类型\u003c/li\u003e\n\u003cli\u003e定义了 \u003ccode\u003eEnumeration:D\u003c/code\u003e  不  \u003ccode\u003e.ACCEPT\u003c/code\u003e 一个 \u003ccode\u003eEnumeration:U\u003c/code\u003e , 参见 \u003ca href=\"https://github.com/rakudo/rakudo/issues/2073\"\u003erakudo/rakudo#2073\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"杂项\"\u003e杂项\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIO::ArgFiles\u003c/code\u003e 类型只是 \u003ccode\u003eIO::CatHandle\u003c/code\u003e 的一个空的子类\u003c/li\u003e\n\u003cli\u003e对常量的约束\n\u003cul\u003e\n\u003cli\u003e约束是完全强制的\u003c/li\u003e\n\u003cli\u003e试图在常量上使用参数化类型约束(例如使用 \u003ccode\u003emy Foo constant @int\u003c/code\u003e) 会引发 \u003ccode\u003eX::ParametricConstant\u003c/code\u003e 异常\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePod\u003c/code\u003e \u003ccode\u003e=defn\u003c/code\u003e(定义列表)指令可用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePod\u003c/code\u003e 提供了 \u003ccode\u003e:numbered\u003c/code\u003e 配置键\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.^ver\u003c/code\u003e、\u003ccode\u003e.^auth\u003c/code\u003e 和 \u003ccode\u003e.^name\u003c/code\u003e 元方法在 \u003ccode\u003emodule\u003c/code\u003e 中可用, 而在 \u003ccode\u003epackage\u003c/code\u003e 中则没有, 这是设计上的原因\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eqww\u0026lt;…\u0026gt;\u003c/code\u003e 中支持花哨的引号(\u003ccode\u003e’…’\u003c/code\u003e、\u003ccode\u003e“…”\u003c/code\u003e、\u003ccode\u003e｢…｣\u003c/code\u003e 和变体)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt; \u0026gt;\u003c/code\u003e 支持查找自动生成的 \u003ccode\u003eCallables\u003c/code\u003e (例如: \u003ccode\u003e\u0026amp;infix:\u0026lt;XX\u0026gt;\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e使用命名的 \u003ccode\u003eanon\u003c/code\u003e 子例程不再产生重声明警告\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e::?MODULE\u003c/code\u003e/\u003ccode\u003e$?MODULE\u003c/code\u003e 变量的扩展规范\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esub MAIN\u003c/code\u003e 可以接受一个参数上的 \u003ccode\u003eEnumeration\u003c/code\u003e 类型约束和 \u003ccode\u003ewhere\u003c/code\u003e 子句\u003c/li\u003e\n\u003cli\u003e笑脸型约束可以用在子集上\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estart\u003c/code\u003e 块和 thunks 得到新的 \u003ccode\u003e$/\u003c/code\u003e 和 \u003ccode\u003e$!\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定义了与列表关联运算符一起使用的 \u003ccode\u003eR\u003c/code\u003e 元运算符\u003c/li\u003e\n\u003cli\u003e类型强转可以用在签名返回类型约束中\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026amp;infix:\u0026lt;x\u0026gt;\u003c/code\u003e/\u003ccode\u003e\u0026amp;infix:\u0026lt;x\u0026gt;\u003c/code\u003e 抛出了 \u003ccode\u003e-Inf\u003c/code\u003e/\u003ccode\u003eNaN\u003c/code\u003e 重复参数\u003c/li\u003e\n\u003cli\u003e字面结构 \u003ccode\u003eput\u003c/code\u003e 和 \u003ccode\u003eput for\u003c/code\u003e 抛出, 需要使用括号\u003c/li\u003e\n\u003cli\u003e扩大了 Unicode 例程和功能的规范覆盖面-将覆盖面升级到 Unicode 第11版\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$.\u003c/code\u003e 方法调用语法能用在元方法中了\u003c/li\u003e\n\u003c/ul\u003e\n","text":"问题 在 6.d 版本中, 很多东西都发生了变化, 我们至少需要发布一个版本。这里有个列表。然而, 覆盖面是不完整的。弃用通知采取了不同的形式, 一些新的类型和方法在那里, 一些则没有\u0026hellip;\u0026hellip;\n用 #2632 引用这个问题, 并检查项目, 当你的工作, 无论是通过改变后的文档, 看到没有变化, 需要做它。在这种情况下, 请通过评论或如何解释为什么是这种情况。\n版本控制的变更  [6.d] \u0026amp;await 在等待的时候不再阻塞线程 [6.d] whenever 不在 react 抛出的词法作用域内 [6.d] 在 sub MAIN 里面的 $*ARGFILES 总是由 $*IN 馈入 [6.d] 结构(字面上的) $()、@() 和 %() 不复存在 [6.d] 带有 :D/:U 类型约束的变量默认为约束类型的类型对象(例如, 你可以在它们身上使用 .new) [6.d] start 块在 sink 上下文中附加异常处理程序 ~~**[6.d]** 例程必须使用 return-rw 来返回一个 Proxy, 即使例程被标记为 is raw 或 is rw~~ [6.d] 原生的 num 类型默认为 0e0 而不是 NaN [6.d] 在子程序名中, 保留了键名为 sym 的冒号对（如:sym\u0026lt;foo\u0026gt;）, 以备将来使用  废弃 这些方法在 6.d 语言中已被废弃, 并将在 6.e 中被删除。实现者可以选择发出弃用警告, 或者在 6.e 版本发布后更长的时间内提供这些方法。\n 使用 '-' (单连字符)作为 \u0026amp;open 的特殊路径, 表示特殊的句柄(使用 IO::Special 对象代替) IO::Handle.slurp-rest (使用 .slurp 代替) Any.flatmap (使用.flat 和 .map 方法的组合来代替) Cool.path (使用 .IO 代替) Pair.freeze (使用去容器化的参数的 Pair.new 来代替) Str.subst-mutate (使用带有 .= 方法调用赋值元运算符的 Str.subst 代替) Rational.norm (现在 Rational 类型必须在创建时标准化) IO::Path.child (使用 .add 代替) \u0026amp;undefine (直接分配 Empty/Nil 代替) :count \u0026amp;lines/Str.lines 例程上的参数(使用所返回的 Seq 上的 .elems 代替) \u0026amp;is_approx in Test.pm6 (使用与 \u0026amp;is-approx 非常相似的行为来代替)  新的行为  通过新的可定义的 \u0026amp;RUN-MAIN、\u0026amp;ARGS-TO-CAPTURE 和 \u0026amp;GENERATE-USAGE 子例程改善 sub MAIN 的自定义处理 % 变量中的 QuantHash/Map 和 @ 变量中的 List 可以用 is 特性来声明（例如，my %h is Set） 新的 \u0026lt;ww\u0026gt; regex 规则: 只在单词内匹配 循环可以从上一条语句的值中产生一个值的列表 循环中的 next/last 收集其最后的语句值, 对它们运行的迭代返回 Empty .perl 可以在消耗过的 Seq、多维数组、Date 和 CallFrame 上调用 .gist 可以在 Attribute 上调用 对自动生成的 USAGE 信息进行了大量改进 is hidden-from-USAGE 特性，从自动生成的 USAGE 消息中隐藏 sub MAIN 候选者 Parameter.perl 包括可内省的默认值 %*ENV 值是同素异形的 尝试使用变量 $;、$,、$.、$\\、$(、$)、$\u0026lt;、$\u0026gt;、$/、$\\、$[、$-、$+ 和 $@ 会抛出 X::Syntax::Perl5Var 默认的 Hash.keyof 返回一个 Str(Any) 强转类型对象 非 ASCII 数字可以在 :42foo 冒号对快捷方式中使用 StrDistance 字符串化为 .after 字符串 更明确的 Pod 表格格式 Enumeration.enums 返回一个 Map 各种整数类型的 .Range 返回它们支持的值的范围 min/max 例程也适用于 Hash Signature 字面值可以包含字符串/数字字面值以及调用者标记 List.invert 通过所需的 Pair 绑定映射, 导致潜在的类型检查失败 :exists 可以与多维关联下标一起使用 动态创建的列表可以用来定义一个枚举 在 .first 中, Junction 可以作为匹配器使用 原生属性可以作为参数中的绑定目标 Proc 可以与其他 Proc 中的 IO::Pipe 一起工作 类型数组可以用 my SomeType @array 和 my @array of SomeType 创建 当把 Mixy 强转为 Setty/Baggy  时, 负数权重的项将被删除 :nth 副词在 m// 上接受一个 Junction 作为参数 CX::Warn' 和 CX::Done可以在CONTROL` phaser 中捕获 next 可用于 whenever 中 require 符号不再过境性地暴露出来 通过 {...} 进行多维访问, 类似于 [...] 的工作方式 在 END 时间打开的任何手柄都会自动关闭 在缓存的 Seq 上, 当 \u0026amp;infix:\u0026lt;eqv\u0026gt;、.Slip、.join、.List、.list、.eager、.Array 和 .is-lazy 被调用时, 就会使用缓存列表 IO::Handle.encoding 以 Nil 表示切换到二进制模式 is default 特质与属性一起工作 在多重分派中, 带有 is rw 特性的参数被认为比没有特性的参数窄 Array、Blob 和 Map 的 .gist 被裁剪成100个元素 新的 for 语句修饰符 hyper for、race for 和 lazy for for 循环自动序列化 RaceSeq/HyperSeq；使用新的 for 语句修饰符hyper for/race for避免 \u0026amp;infix:\u0026lt;does\u0026gt; 可用于 RHS 上的非组合实例 数值比较器可以与 DateTime  对象一起使用 Pod 保留空白类型 定义了带 @、% 和 \u0026amp; 魔符常数的语义  Math  Rational 总是在创建时被化简, 并在其一生中保持不变 Inf、Inf 和 NaN 可以分别用 \u0026lt;-1/0\u0026gt;、\u0026lt;1/0\u0026gt; 和 \u0026lt;0/0\u0026gt; 表示, 通过Rational 类型进行舍去。零分母 Rational 被标准化为这三个值之一 在 ±Inf 和 NaN 上调用 .Int, 会抛出异常 改进了 Num 运算符和数学函数的 IEEE 754-2008 合规性 负零 Num(-0e0)被所有例程和语法结构正确处理 Num 类型的字符串化必须是可舍弃到原始 Num 的 定义了涉及零的 Complex  指数 .expmod 中的负数幂有效  Sets、Bags、Mixes(aka QuantHashes)和集合运算符  Set 运算符可以用在任何对象上, 在需要的时候会被强转  所以, 不需要也不希望有任何预先的强转 如果没有 QuantHash 就能实现所需的功能, 那么 Set 运算符可以自由地不创建任何 QuantHash   对不同类型的 QuantHashes 的 Set 操作将强转到最自由的形式（Set -\u0026gt; Bag -\u0026gt; Mix） 集合运算符的 set_precedes 家族( (\u0026lt;+)、≼、(\u0026gt;+)、≽) 已被移除  曾经是子集运算符的 Baggy 形式 QuantHash 升级为最自由的形式, 所以 (\u0026lt;=)、⊆、(\u0026gt;=)、⊇ 做正确的事情   .classify-list 方法可用于 Baggy 类型 .categorize-list 方法可用于 Baggy 类型 .invert 方法可用于核心 QuantHash 类型 .antipairs 方法可用于 QuantHash 类型 QuantHash 类型有 .new-from-pairs 和将一个 QuantHash 类型转换为另一个 QuantHash 类型的方法(例如 Set 类型的 .Bag 方法) QuantHash 类型上的 .hash 对键值进行了字符串化  新的形参和实参  Date.new 接受一个 :\u0026amp;formatter .first 可以接受 :kv unique 和 .repeated 可以接受 :\u0026amp;as 和 :\u0026amp;with Test.pm6 中的 \u0026amp;plan 可以接受 :skip-all \u0026amp;run/\u0026amp;shell 可以接受 :merge \u0026amp;note 可以在没有参数的情况下调用 open 接受 :$out-buffer IO::Path.resolve 可以接受 :completely IO::Path.parent 可以接受一个 Int 表示父级 Proc::Async.new 吞噬位置参数 Signature.ACCEPTS 接受非 Signature/Capture 参数 \u0026amp;EVAL 可以接受一个 Blob Promise.keep/.break 可以在没有参数的情况下调用 原生数组上的 .sum 可以接受 :wrap is required 现在可以接受一个表示理由的参数 IO::Socket::Async.listen 可以绑定到端口 0 以向操作系统申请免费端口 .encode 可以接受 :translate-nl  新的例程和运算符  新的 atomicint Unicode 运算符和 ASCII 等价物, 保证线程安全, 原子操作: \u0026amp;infix:\u0026lt;⚛=\u0026gt;/\u0026amp;atomic-assign、\u0026amp;prefix:\u0026lt;⚛\u0026gt;/\u0026amp;atomic-fetch、 \u0026amp;prefix:\u0026lt;++⚛\u0026gt;/\u0026amp;atomic-inc-fetch、\u0026amp;postfix:\u0026lt;⚛++\u0026gt;/\u0026amp;atomic-fetch-inc、 \u0026amp;prefix:\u0026lt;--⚛\u0026gt;/\u0026amp;atomic-dec-fetch、\u0026amp;postfix:\u0026lt;⚛--\u0026gt;/\u0026amp;atomic-fetch-dec、 \u0026amp;infix:\u0026lt;⚛-=\u0026gt;/\u0026amp;infix:\u0026lt;⚛−=\u0026gt;/\u0026amp;atomic-fetch-sub 和 \u0026amp;infix:\u0026lt;⚛+=\u0026gt;/\u0026amp;atomic-fetch-add \u0026amp;cas: 原子比较与交换 ≤、≥ 和 ≠ 运算符是 Unicode 运算符, 分别等价于 \u0026lt;=、\u0026gt;= 和 != \u0026amp;infix:\u0026lt;unicmp\u0026gt;/\u0026amp;infix:\u0026lt;coll\u0026gt;: \u0026amp;infix:\u0026lt;cmp\u0026gt; 的替代行为 TR///: tr/// 的非变异版本 submethod TWEAK: 与 BUILD 类似, 除了它与属性默认值兼容之外 \u0026amp;duckmap: 应用 \u0026amp;callable 到每个元素上 \u0026amp;deepmap: 应用 \u0026amp;callable 到每个元素上, 下降到 Iterable 中 \u0026amp;take-rw: 像 \u0026amp;take 一样, 但有一个可写的容器 \u0026amp;indir: 在给定的 $*CWD 中执行代码 \u0026amp;spurt: 参见 IO::Path.spurt \u0026amp;prompt: 提示用户输入 uniprops: uniprop 的多字符版本 symlink: 建立文件符号链接 link: 创建文件硬连接 .hyper/.race: 并行处理值的列表 Seq.from-loop: 从 Callable 生产一个 Seq Str.uniparse: 将一个或多个 Unicode 字符名解析为实际字符 Str.parse-base: Int.base 操作的反转 IO::Path 提供了 .ACCEPTS、.SPEC、.CWD、.Numeric、.add、.extension、.mode 和各种文件测试、.parts、.sibling 和 .spurt IO::Handle 提供了 .READ、.WRITE、.EOF、.DESTROY, .readchars、.flush、.lock、.unlock、.out-buffer、.tell, .say、.slurp、.seek、.printf、.print-nl 和 .watch IO::Pipe 提供了 .proc Iterator 提供了 .skip-one、.skip-at-least 和 .skip-at-least-pull-one Mu.emit: \u0026amp;emit 的方法形式 Test.pm6 模块中的 \u0026amp;fails-like: 允许测试失败 Test.pm6 模块中的 \u0026amp;bail-out: 退出失败的测试套件 Test.pm6 模块中的 \u0026amp;is-approx: 测试一个数字近似于另一个 Buf 拥有 .allocate、.reallocate、.append、.push、.pop、.splice、.subbuf-rw、.prepend 和 .unshift 方法 Range 支持了 .rand Backtrace 拥有方法 .map、.flat、.concise 和 .summary .classify-list 方法可用于 Hash 类型 .categorize-list 方法可用于 Hash 类型 Code.of: 返回返回类型约束 Code.line/.file: 返回定义的行/文件 Proc::Async 提供了 .Supply、.ready、.pid、.bind-stdin、.bind-stdout 和 .bind-stderr Proc.command/Proc::Async.command: 我们要执行的命令 Proc 提供了 .signal、.pid 和 .encoding Complex 提供了 .cis、.reals、.ceiling、.floor、.round、.truncate 和 .abs 方法, 并可以使用 \u0026lt;=\u0026gt; 进行比较(只要虚部可以忽略不计) DateTime 提供了 .offset-in-hours、.hh-mm-ss 和 .Date DateTime 可以使用 \u0026lt;=\u0026gt; 运算符和其它 DateTime 对象进行比较 Date 提供了 .DateTime 方法 \u0026amp;infix:\u0026lt;+\u0026gt;/\u0026amp;infix:\u0026lt;-\u0026gt; 可以被 Duration、DateTime 和 Real 类型调用 Enumeration 提供了 .Int、.pred、.succ、.kv 和 .pair .Date 可以在 Instant 上调用 Junction 能使用 Junction.new 调用来创建 List 类型拥有 .to 和 .from 方法 Map type 提供了 Int 方法, 返回 pair 的数量 Any.skip: 跳过列表中的值 Any.batch: .rotor 的更基本的表兄弟 Mu.iterator: 为一个列表中的值生成一个 Iterator IO::Spec::* 类型提供了 .tmpdir、.extension 和 .path Pair 提供了 .ACCEPTS、.Pair 和 .invert .Capture 方法对所有核心类型都有明确定义 定义了 .ACCEPTS 在同素异形体上的语义 Failure.self 使未处理的 Failure 爆发 Thread.is-initial-thread: 我们是在初始线程中运行吗 Match 提供了 .Int 和 .actions IO::Socket::Async 提供了 .socket-port 和 .peer-port Promise 提供了另一种构造函器 .kept 和 .broken WhateverCode 提供了 .assuming WhateverCode 和 Block 提供了 .cando .:\u0026lt;…\u0026gt; 语法用于调用前缀运算符作为后缀 $*KERNEL 提供了 .hostname Nil 拥有定义的 .FALLBACK 特殊方法来返回 Nil  新类型  atomicint: 原生的 int, 大小可用于新的原子运算符 Lock::Async: 互斥的非阻塞机制 Encoding::Registry: 管理可用的编码 Encoding::Encoder: 编码器, 用于特定的编码 Encoding::Decoder: 解码器, 用于特定的编码 IO::CatHandle: 将多个只读的 IO::Handle 视同一个 原生的 str 数组 Supplier::Preserving: 缓存的实时 Supply 工厂 Semaphore: 控制多线程对共享资源的访问 IO::Special: 特殊I/O设备的路径 (例如 STDOUT) Exceptions::JSON 自定义异常处理程序的实现(可与PERL6_EXCEPTIONS_HANDLER 环境变量一起使用) SeekType 枚举: IO::Handle.seek 中使用的值  新的变量   $*USAGE: 可在 MAIN 子例程中使用, 包含自动生成的 USAGE 信息\n  %*SUB-MAIN-OPTS: 设置 sub MAIN 的行为\n %*SUB-MAIN-OPTS\u0026lt;named-anywhere\u0026gt; 允许将命名参数放在命令行的任何位置    $*COLLATION: 配置四个 Unicode 校对级别\n  $*INIT-INSTANT: 代表程序启动时间的 Instant\n  $*HOME: 用户的主目录, 如果存在的话\n  \u0026amp;*chdir: Callable 包含 IO::Path.chdir 的变体, 也设置进程的当前目录\n  PERL6_TEST_DIE_ON_FAIL 环境变量: 在第一次失败时停止测试套件\n  PERL6_EXCEPTIONS_HANDLER 环境变量: 指定自定义异常处理类\n  对边缘情况/强转行为的澄清  UInt 与 Int 类型对象智能匹配为 True sink 语句前缀爆炸 Failure 定义了1项和0项列表以及负参数和非整数参数的 permutations/combinations 的行为 \u0026amp;val、Str.Numeric 和其他 Str 数字转换方法在试图转换 Unicode No 字符组或合成数字时会 fail :42foo 冒号对快捷方式中不能使用合成数字 现在、Enumeration 可以作为一个数组形状指定器使用 含有空格的 Str 的数值转换现在返回 0 带空的模式参数的 samark, 简单地返回调用者 .polymod 可用于 lazy 但有限的除数列表 定义了 .[*-0] 索引 .rotor 中大于子列表的负数空隙抛出异常 .rotor 的非 Int 参数被强转为 Int 参数 读取 /proc 文件时定义了 .lines 定义了字符串上后缀/前缀 ++/-- 中泰语数字的行为 sunk for 里面的 map 被视为 sunk Sunk for 循环将上一条语句的方法调用值下沉 Bool 对象上的 .Int 返回一个 Int 对象 splice 可用于扩展数组 classify 可以与 Junction 配合使用 .pairup on a type object returns an empty Seq .pairup 总是返回一个 Seq 拒绝接受 Date/DateTime 构造函数中的合成代码点 ⸨/⸩ 对儿现在可以作为引号结构中的匹配字符使用 Array 类型对象上的 .flat 简单地返回该类型对象 混合级 classify 在 Hash 上抛出异常 Junction 可以用于给 Hash 指定多个键 给 .classify-list 的 Callable 现在保证每项只执行一次 :delete 对 Hash 类型对象进行关联查找时返回 Nil Test.pm6 中的 \u0026amp;is-deeply 会自动 .cache 作为参数的 Seq, 并使用返回的 List 进行测试 Complex.new() 给出 \u0026lt;0+0i\u0026gt; Int.new 现在可以保证构建一个新的 Int (而不是, 比如说, 从常量缓存中重用一个) 定义了一个参数(1-arg)版本的 \u0026amp;infix:\u0026lt;=:=\u0026gt; 和 \u0026amp;infix:\u0026lt;eqv\u0026gt; 如果直接或间接地调用 .BIND-POS、.BIND-KEY、.ASSIGN-POS、.ASSIGN-KEY、.STORE、.push、.append、.unshift、.prepend、Nil 类型现在抛出异常 Nil.ord 返回一个空的 Seq Nil.chrs 返回一个 \u0026quot;\\0\u0026quot; Num.new 强转参数为 Num infix:\u0026lt;Z\u0026gt;() 返回一个空的 Seq .comb 总是返回一个 Seq 用 \u0026amp;infix:\u0026lt;+\u0026gt; 化简一个项, 简单地返回该项 ()[0] 返回 Nil 允许在(可能是无限的) Seq 上使用 Regex 智能匹配 定义了 Range 对象的智能匹配 Set 转换为Mix/Bag 不再有 Bool 权重 当一个或多个操作数为 0 时、gcd 是有定义的 defined 例程中的 Junction 自动线程化 sum 可以处理含有 Junction 的列表 Grammar.parse 让顶级 regex 回溯 U+2212 MINUS SIGN [Sm] (-) 现在得到更多结构的支持, 如 Str.Numeric 和 \u0026amp;val Arity-1 \u0026amp;infix:\u0026lt;~\u0026gt; 与 Blob 可以一起工作 在签名中, 所有的 Numeric 字面值都支持作为值字面值 正则表达式中的 \\b 和 \\B 抛出 X::Obsolete True 和 False 作为签名中的值字面量发出警告 .sort 和 IO::Spec::Unix.path 的返回值总是 Seq Range 对象上的 Out-of-range .AT-POS 返回 Nil 对于不存在的键、Pair.AT-KEY 返回 Nil 所有的 Cool 类型都提供了 .Rat/.FatRat 强转器 IO::Path 文件测试不缓存先前测试执行的结果 Seq eqv List 仅根据类型不匹配就定为 False 在 Hash 、Hash  和 QuantHash 上, 来自 .kv、.values 和 .pair 序列的值是可写的 参见 Raku/roast#614 和 #3519 \u0026amp;infix:\u0026lt;∘\u0026gt;/\u0026amp;infix:\u0026lt;o\u0026gt; 保留 LHF 的 .of 和 RHS 的 .arity 和 .count 完善了 regex 运算符副词中的可接受参数(例如::in(…)) 完善了 IO::Handle.open 中可接受的参数组合 IO::Path.Str 不包含 .CWD 属性的值 IO::Path 类型拒绝带有 nul 字节 (\u0026quot;\\0\u0026quot;) 的路径 IO::Pipe 的 .path/.IO 返回一个 IO::Path 类型对象 如果目的路径和源路径是一样的 IO::Path 的 .copy/.move 会 fail dir 创建的 IO::Path 绝对性由调用者控制 更多定义的边缘行为、Callable  处理、. defined 调用, 以及 \u0026amp;infix:\u0026lt;andthen\u0026gt;、\u0026amp;infix:\u0026lt;orelse\u0026gt; 和 \u0026amp;infix:\u0026lt;notandthen\u0026gt; 操作符的链接 Seq 的禅切不缓存它们 List.Capture 将任何包含的 Pair 对象的键字符串化 带处理的 Failure 参数的 \u0026amp;fail 把它标记为是未处理的 use lib 接受 IO::Path 对象 锚点 ^、^^、$ 和 $$ 在环视中有效 Grammar.made 支持类型对象 .isa 支持 subset  类型对象 :delete 可用于惰性数组 \u0026amp;infix:\u0026lt;eqv\u0026gt; 可以在某些情况下对惰性参数起作用 动态查询(::(...)) 是限制性的 regex 语法, 并且需要 use MONKEY-SEE-NO-EVAL 的许可 定义了带孔数组的 .Slip 和 .List Promise.in/.at 和 Supply.interval 可以用零值和负值工作 Supply.interval 最小值为 0.001；较低值被处理为 0.001, 并发出警告#, 参见 https://docs.perl6.org/type/Supply#method_interval PR [#2649] Supply 提供了 .Seq、.list 和 .zip 可以在构建方法中绑定到原生类型属性 WhateverCode 传播 use fatal say、note、put、print 和 printf 例程自动线程化 Junction IO::Handle.eof 值在 .seek 过终点后再返回时也会相应改变 定义了 .succ'、.pred和.Bool` 的同质异形体 在核心 Numeric 上定义了 .Bridge 在核心 Numeric 的类型对象上定义了 .Numeric/.Real 定义了关于零分母有理数的 Rational.Bool say/note 保证在 Str 的子类上调用 .gist 定义了 Junction.Str 返回 Junction 定义了 Junction.gist/.perl 返回一个 Str Map/Hash 的 .list/.cache 返回一个 List 定义了 .round 的返回类型 定义了 Enumeration:D 不 .ACCEPT 一个 Enumeration:U , 参见 rakudo/rakudo#2073  杂项  IO::ArgFiles 类型只是 IO::CatHandle 的一个空的子类 对常量的约束  约束是完全强制的 试图在常量上使用参数化类型约束(例如使用 my Foo constant @int) 会引发 X::ParametricConstant 异常   Pod =defn(定义列表)指令可用 Pod 提供了 :numbered 配置键 .^ver、.^auth 和 .^name 元方法在 module 中可用, 而在 package 中则没有, 这是设计上的原因 qww\u0026lt;…\u0026gt; 中支持花哨的引号(’…’、“…”、｢…｣ 和变体) \u0026amp;infix:\u0026lt; \u0026gt; 支持查找自动生成的 Callables (例如: \u0026amp;infix:\u0026lt;XX\u0026gt;) 使用命名的 anon 子例程不再产生重声明警告 ::?MODULE/$?MODULE 变量的扩展规范 sub MAIN 可以接受一个参数上的 Enumeration 类型约束和 where 子句 笑脸型约束可以用在子集上 start 块和 thunks 得到新的 $/ 和 $! 定义了与列表关联运算符一起使用的 R 元运算符 类型强转可以用在签名返回类型约束中 \u0026amp;infix:\u0026lt;x\u0026gt;/\u0026amp;infix:\u0026lt;x\u0026gt; 抛出了 -Inf/NaN 重复参数 字面结构 put 和 put for 抛出, 需要使用括号 扩大了 Unicode 例程和功能的规范覆盖面-将覆盖面升级到 Unicode 第11版 $. 方法调用语法能用在元方法中了  "},"name":"Checklist for Raku 6.d","published":"2020-07-21T00:00:00+08:00","summary":"Checklist for 6.d","type":"entry","url":"https://ohmyweekly.github.io/notes/2020-07-21-checklist-for-6-dot-d/"},{"content":{"html":"\u003cp\u003e\u003ca href=\"https://imagemagick.org/Usage/draw/\"\u003ehttps://imagemagick.org/Usage/draw/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在 IM 中绘图是在现有图像中添加新元素的方法。虽然在\u003ca href=\"https://imagemagick.org/Usage/fonts/\"\u003e复合字体效果\u003c/a\u003e的示例页和\u003ca href=\"https://imagemagick.org/Usage/annotating/\"\u003e图像注释\u003c/a\u003e中涵盖了很多文本绘制的内容，但本页涉及 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?draw\"\u003e-draw\u003c/a\u003e\u0026rdquo; 操作符的其他更普遍的方面。\u003c/p\u003e\n\u003cp\u003e绘制命令最初是作为一种创建简单图像的手段。但随着时间的推移，它已经扩展成为矢量图形到光栅图像转换的界面。\u003c/p\u003e\n\u003ch2 id=\"imagemagick-绘制命令\"\u003eImageMagick 绘制命令\u003c/h2\u003e\n\u003cp\u003e计算机中的图像通常以两种不同的方式保存。第一种也是你在这些示例页面中看到的最常见的方式被称为光栅图形。在这种方式中，图像是以像素的矩形阵列来存储的。\u003c/p\u003e\n\u003cp\u003e另一种方式不太常见，也不太容易修改，但从另一个意义上讲，它的通用性更强，即对象矢量图形。在这种形式下，图像是用线条、弧线、颜色填充，有时还有深度来描述的。这是非常有用的，因为你可以将这些图像放大到你想要的任何尺寸，而且它们仍然可以完美地显示。与光栅格式的图像相比，您还可以在很小的空间内描述非常大和复杂的图像。\u003c/p\u003e\n\u003cp\u003e矢量图形图像的例子包括 postscript 和新的 \u003ca href=\"http://www.w3.org/TR/SVG/\"\u003eSVG-可缩放矢量图形\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003eTrue-Type 字体也是矢量图形的例子，因为它允许在任何比例下使用单个字符描述。\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?draw\"\u003e-draw\u003c/a\u003e\u0026rdquo; 图像操作符，是进入 ImageMagick 矢量绘图功能的一个窗口，并形成了一套与 IM 的普通命令行图像操作符相当独立的命令。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e一般使用的矢量图形文件格式只有几种，因为每一种这样的格式通常与其他这样的格式有很大的不同。其结果是，很少有代码共享的可能。\n基于这个原因，ImageMagick 更关注使用矢量图形来绘制 SVG 格式的图像。Postscript 和 true-type 字体图形被传递给其他外部的\u0026rdquo;\u003ca href=\"https://imagemagick.org/Usage/files/#delegate\"\u003e代理\u003c/a\u003e\u0026ldquo;库和应用程序，它们更适合绘制这些类型的矢量图形格式。\n这并不是说 SVG 没有代理库。一个例子是 RSVG 库或 GTK SVG 库，这些库在编译时是可用的。IM 会链接到这些库来转换 SVG，而不是自己尝试去做。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"原始绘图命令\"\u003e原始绘图命令\u003c/h3\u003e\n\u003cp\u003e让我们从 MVG 命令的 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?draw\"\u003e-draw\u003c/a\u003e\u0026rdquo; 图像操作符中最古老、最简单、最常见的绘图原语开始。\u003c/p\u003e\n\u003cp\u003e请注意，所有的参数都被视为浮点数，不一定是整数，比如我在这些例子中通常使用的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# Single Pixel Draw  (两种方式 -- 这些像素点都被放大了)\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# Point \u0026#39;paints\u0026#39; the color pixel\u003c/span\u003e\n  convert -size 10x6 xc:skyblue  -fill black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;point 3,2\u0026#39;\u003c/span\u003e         -scale 100x60   draw_point.gif\n\n  \u003cspan class=\"c1\"\u003e# Color Point \u0026#39;replaces\u0026#39; the color pixel\u003c/span\u003e\n  convert -size 10x6 xc:skyblue  -fill black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;color 6,3 point\u0026#39;\u003c/span\u003e   -scale 100x60   draw_color_point.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_point.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_color_point.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e根据给出的注释，当涉及半透明颜色时，这两种点方法会产生不同的结果。详情请参见下面的\u003ca href=\"https://imagemagick.org/Usage/draw/#color\"\u003e颜色填充原语\u003c/a\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# 矩形  /  圆角矩形  /  矩形圆弧\u003c/span\u003e\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;rectangle 20,10 80,50\u0026#34;\u003c/span\u003e       draw_rect.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;roundrectangle 20,10 80,50 20,15\u0026#34;\u003c/span\u003e  draw_rrect.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;arc  20,10 80,50  0,360\u0026#34;\u003c/span\u003e     draw_arc.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;arc  20,10 80,50 45,270\u0026#34;\u003c/span\u003e     draw_arc_partial.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_rect.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_rrect.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_arc.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_arc_partial.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003earc\u003c/code\u003e 绘制原语与矩形一起列出，因为它实际上只是一个\u0026quot;椭圆\u0026rdquo;，装在两个坐标定义的\u0026quot;矩形\u0026rdquo;(\u003ccode\u003erectangle\u003c/code\u003e)内。部分弧线很少使用，因为很难确定端点，除非角度限制在九十度的倍数。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ecircle\u003c/code\u003e 和 \u003ccode\u003eellipse\u003c/code\u003e 原语涉及\u0026quot;中心\u0026quot;坐标与\u0026quot;边缘\u0026quot;坐标，或\u0026quot;大小\u0026quot;和\u0026quot;角度\u0026quot;值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# 圆  /  椭圆    (以某一点为中心)\u003c/span\u003e\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;circle 50,30 40,10\u0026#34;\u003c/span\u003e          draw_circle.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;ellipse 50,30 40,20 0,360\u0026#34;\u003c/span\u003e   draw_ellipse.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;ellipse 50,30 40,20 45,270\u0026#34;\u003c/span\u003e   draw_ellipse_partial.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_circle.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_ellipse.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_ellipse_partial.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e你也可以看看 \u003ca href=\"https://imagemagick.org/Usage/draw/#push_context\"\u003ePush/Pop 上下文\u003c/a\u003e，了解如何创建一个旋转的椭圆的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# 直线 / 折线 / 多边形 / 贝塞尔曲线\u003c/span\u003e\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;line   20,50 90,10\u0026#34;\u003c/span\u003e                 draw_line.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;polyline 40,10 20,50 90,10 70,40\u0026#34;\u003c/span\u003e   draw_polyline.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;polygon  40,10 20,50 90,10 70,40\u0026#34;\u003c/span\u003e   draw_polygon.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;bezier   40,10 20,50 90,10 70,40\u0026#34;\u003c/span\u003e   draw_bezier.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e比较好的画直线和曲线的方法是使用 \u003ca href=\"https://imagemagick.org/Usage/draw/#paths\"\u003eSVG 路径画法\u003c/a\u003e，它的用途更广，甚至可以实现\u0026quot;比例画线\u0026rdquo;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# text drawing  / image\u003c/span\u003e\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -font Candice -pointsize \u003cspan class=\"m\"\u003e40\u003c/span\u003e -gravity center \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;text 0,0 \u0026#39;Hello\u0026#39;\u0026#34;\u003c/span\u003e   draw_text.gif\n\n  convert -size 100x60 xc:skyblue -gravity center \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;image over 0,0 0,0 \u0026#39;terminal.gif\u0026#39;\u0026#34;\u003c/span\u003e   draw_image.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后这两个填充类型的操作是目前唯一受 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?gravity\"\u003e-gravity\u003c/a\u003e\u0026rdquo; 影响的绘制操作。这些操作的其他修饰符，包括 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?fill\"\u003e-fill\u003c/a\u003e\u0026quot;、\u0026quot;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?tile\"\u003e-tile\u003c/a\u003e\u0026quot;、\u0026quot;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?origin\"\u003e-origin\u003c/a\u003e\u0026quot;、\u0026quot;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?stroke\"\u003e-stroke\u003c/a\u003e\u0026quot;、\u0026quot;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?strokewidth\"\u003e-strokeidth\u003c/a\u003e\u0026quot;、\u0026quot;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?font\"\u003e-font\u003c/a\u003e\u0026quot;、\u0026quot;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?pointsize\"\u003e-pointsize\u003c/a\u003e\u0026quot;、\u0026quot;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?box\"\u003e-box\u003c/a\u003e\u0026quot;。他们还有其他的修饰符，但这些修饰符与更高级的 \u003ca href=\"https://imagemagick.org/Usage/draw/#mvg\"\u003eMagick Vector Graphics\u003c/a\u003e 语言有关。\u003c/p\u003e\n\u003ch2 id=\"贝赛尔原语\"\u003e贝赛尔原语\u003c/h2\u003e\n\u003cp\u003e\u0026ldquo;bezier\u0026rdquo; 原语用于绘制曲线。每条命令只画一条曲线段。通常会给出 4 个点（8 个数字）：一个起点'结\u0026rsquo;、两个控制点和一个终点'结\u0026rsquo;。两个控制点定义了曲线的方向以及曲线偏离附加的终点'结'点的速度。\u003c/p\u003e\n\u003cp\u003e为了顺利地将两条曲线连接起来，应该将端点的控制点通过'结'镜像，形成下一条贝塞尔曲线的控制点。例如这里我画了两条平稳连接在一起的贝赛尔曲线。请注意控制线和点（也是画出来的）是如何通过连接坐标直线镜像的，无论是角度还是长度。这一点很重要，否则曲线将不平滑。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003epoints\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;10,10 30,90   25,10 50,50   50,50 75,90   70,10 90,40\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003eclines\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e sed \u003cspan class=\"s1\"\u003e\u0026#39;s/   /\\n/g\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e             \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"nb\"\u003eread\u003c/span\u003e line\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eline \u003c/span\u003e\u003cspan class=\"nv\"\u003e$line\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003esymbols\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e path \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e point in \u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n             \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eM \u003c/span\u003e\u003cspan class=\"nv\"\u003e$point\u003c/span\u003e\u003cspan class=\"s2\"\u003e   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n           \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\n  convert -size 100x100 xc:skyblue -fill none \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke gray \u003c/span\u003e\u003cspan class=\"nv\"\u003e$clines\u003c/span\u003e\u003cspan class=\"s2\"\u003e    stroke blue \u003c/span\u003e\u003cspan class=\"nv\"\u003e$symbols\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke red  bezier 10,10 30,90   25,10 50,50 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke red  bezier 50,50 75,90   70,10 90,40 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          draw_bezier_joined.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_bezier_joined.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果我移动其中一个控制点，使它不从同一\u0026quot;结\u0026quot;的另一个控制点通过附加的\u0026quot;结\u0026quot;进行\u0026quot;反射\u0026rdquo;，那么曲线将不连续。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003epoints\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;10,10 30,90   25,10 50,50   50,50 80,50   70,10 90,40\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003eclines\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e sed \u003cspan class=\"s1\"\u003e\u0026#39;s/   /\\n/g\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e             \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"nb\"\u003eread\u003c/span\u003e line\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eline \u003c/span\u003e\u003cspan class=\"nv\"\u003e$line\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003esymbols\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e path \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e point in \u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n             \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eM \u003c/span\u003e\u003cspan class=\"nv\"\u003e$point\u003c/span\u003e\u003cspan class=\"s2\"\u003e   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n           \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\n  convert -size 100x100 xc:skyblue -fill none \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke gray \u003c/span\u003e\u003cspan class=\"nv\"\u003e$clines\u003c/span\u003e\u003cspan class=\"s2\"\u003e    stroke blue \u003c/span\u003e\u003cspan class=\"nv\"\u003e$symbols\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke red  bezier 10,10 30,90   25,10 50,50 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke red  bezier 50,50 80,50   70,10 90,40 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          draw_bezier_disjoint.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_bezier_disjoint.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果再次移动控制点，使其与相关的\u0026quot;结\u0026quot;点相匹配，线条将直接从该点出发，完全没有任何\u0026quot;曲线\u0026rdquo;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003epoints\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;10,10 30,90   25,10 50,50   50,50 50,50   70,10 90,40\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003eclines\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e sed \u003cspan class=\"s1\"\u003e\u0026#39;s/   /\\n/g\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e             \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"nb\"\u003eread\u003c/span\u003e line\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eline \u003c/span\u003e\u003cspan class=\"nv\"\u003e$line\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003esymbols\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e path \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e point in \u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n             \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eM \u003c/span\u003e\u003cspan class=\"nv\"\u003e$point\u003c/span\u003e\u003cspan class=\"s2\"\u003e   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n           \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\n  convert -size 100x100 xc:skyblue -fill none \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke gray \u003c/span\u003e\u003cspan class=\"nv\"\u003e$clines\u003c/span\u003e\u003cspan class=\"s2\"\u003e    stroke blue \u003c/span\u003e\u003cspan class=\"nv\"\u003e$symbols\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke red  bezier 10,10 30,90   25,10 50,50 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke red  bezier 50,50 50,50   70,10 90,40 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          draw_bezier_no_curve.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_bezier_no_curve.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果两个控制点都设置为各自的\u0026quot;结点\u0026rdquo;，那么就会生成一条直线。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003epoints\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;10,10 10,10   50,50 50,50   50,50 50,50   90,40 90,40\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003eclines\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e sed \u003cspan class=\"s1\"\u003e\u0026#39;s/   /\\n/g\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e             \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"nb\"\u003eread\u003c/span\u003e line\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eline \u003c/span\u003e\u003cspan class=\"nv\"\u003e$line\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003esymbols\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e path \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e point in \u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n             \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eM \u003c/span\u003e\u003cspan class=\"nv\"\u003e$point\u003c/span\u003e\u003cspan class=\"s2\"\u003e   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n           \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\n  convert -size 100x100 xc:skyblue -fill none \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke gray \u003c/span\u003e\u003cspan class=\"nv\"\u003e$clines\u003c/span\u003e\u003cspan class=\"s2\"\u003e    stroke blue \u003c/span\u003e\u003cspan class=\"nv\"\u003e$symbols\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke red  bezier 10,10 10,10   50,50 50,50 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke red  bezier 50,50 50,50   90,40 90,40 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          draw_bezier_lines.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_bezier_lines.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果不指定所有 4 个点，\u0026lsquo;bezier\u0026rsquo; 原语并不真正有用。只有第一个点和最后一个点被归类为'结\u0026rsquo;，曲线将通过（或结束）这两个点。所有其他的点纯粹被视为控制点，按照给定的顺序对曲线产生影响，控制点越远，对该段曲线的影响越大。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003epoints\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;10,10 30,90   25,10    75,90   70,10 90,40\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003esymbols\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e point in \u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n             \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eM \u003c/span\u003e\u003cspan class=\"nv\"\u003e$point\u003c/span\u003e\u003cspan class=\"s2\"\u003e   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n           \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\n  convert -size 100x100  xc:skyblue  -fill none \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke gray  polyline \u003c/span\u003e\u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke red   bezier \u003c/span\u003e\u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke blue  path \u0026#39;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$symbols\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39; \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          draw_bezier_multi.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_bezier_multi.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e为了保持简单，不建议你每条 \u0026lsquo;bezier\u0026rsquo; 曲线段使用超过或少于4个点。\u003c/p\u003e\n\u003cp\u003e其实我建议你完全不要使用 \u0026lsquo;bezier\u0026rsquo; 原语，而是使用 \u003ca href=\"https://imagemagick.org/Usage/draw/#cubic\"\u003eSVG Path Cubic Bezier\u003c/a\u003e 来生成曲线。它有一个特殊的 \u0026ldquo;s\u0026rdquo; 曲线延续功能，可以自动做相应的控制点\u0026quot;反射\u0026rdquo;，生成平滑连接的曲线段，减少你需要使用的控制点数量。您还可以定义相对于路径中最后一个端点的点。\u003c/p\u003e\n\u003ch2 id=\"颜色填充原语\"\u003e颜色填充原语\u003c/h2\u003e\n\u003cp\u003e除了上述 \u0026ldquo;简单\u0026quot;原语之外，\u0026quot;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?draw\"\u003e-draw\u003c/a\u003e\u0026ldquo;还提供了一组颜色填充或修改原语。这些原语根据所选方法，从指定的点开始修改图像中的颜色。\u003c/p\u003e\n\u003cp\u003e这些填充方法实际上不是真正的 \u0026lsquo;draw\u0026rsquo; 命令，而是颜色替换函数。它们被添加到绘图中，因为在程序的早期版本中，将它们的操作插入到 ImageMagick 中是最简单的。\u003c/p\u003e\n\u003cp\u003e就像上面一样，使用的颜色是用 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?fill\"\u003e-fill\u003c/a\u003e\u0026ldquo;颜色设置的，但如果设置了，就会使用 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?tile\"\u003e-tile\u003c/a\u003e\u0026rdquo; 图像来代替。\u003c/p\u003e\n\u003cp\u003e上面的其他设置选项没有使用，对这些操作没有影响。\u003c/p\u003e\n\u003cp\u003e两个额外的设置也将应用于这些原语，即 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?bordercolor\"\u003e-bordercolor\u003c/a\u003e\u0026rdquo; 和 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?fuzz\"\u003e-fuzz\u003c/a\u003e\u0026ldquo;系数设置。但是，这些设置不能在 \u0026ldquo;MVG\u0026rdquo; 语言中定义，因此只能在使用 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?draw\"\u003e-draw\u003c/a\u003e\u0026rdquo; 操作符之前进行设置。\u003c/p\u003e\n\u003cp\u003e第一个 \u0026lsquo;color point\u0026rsquo; 你已经看到了，它是上述例子中 \u0026lsquo;point\u0026rsquo; 绘制原语的替代。如果你仔细观察，你会看到我们在测试图像中设置的单个白色像素。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert color_test.png   -fill white \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;color 30,20 point\u0026#39;\u003c/span\u003e      color_point.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/color_point.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e然而在绘制透明色和半透明色时，这些功能是不一样的。\u003c/p\u003e\n\u003cp\u003e这里我们有一个三个像素的红色图像（放大了），第二个或中间的像素我们用 \u003ccode\u003epoint\u003c/code\u003e 函数在红色像素上画上半透明的蓝色，得到紫色的结果。然而如果使用 \u003ccode\u003ecolor point\u003c/code\u003e 函数（最后一个或右边的像素），红色完全被半透明的蓝色像素所取代。它不会被叠加。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 3x1 xc:red -matte -fill \u003cspan class=\"s1\"\u003e\u0026#39;#00F8\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;point 1,0\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;color 2,0 point\u0026#39;\u003c/span\u003e   -scale 33x33  draw_points.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_points.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e所有的 \u003ccode\u003ecolor\u003c/code\u003e 函数都会进行全色替换，而其他所有的颜色原语都会在图像上面'画'出颜色。因此，你可以使用 \u003ccode\u003ecolor\u003c/code\u003e 来绘制透明色。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ecolor replace\u003c/code\u003e 绘制函数将在指定的位置替换所有精确给定颜色的实例。而且正如您所看到的，这些区域不一定要连接在一起。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert color_test.png   -fill white \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;color 30,20 replace\u0026#39;\u003c/span\u003e      color_replace.png\n\n  convert color_test.png   -fill white   -fuzz 13%\u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;color 30,20 replace\u0026#39;\u003c/span\u003e      color_replace_fuzz.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/color_replace.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e然而，正如你在第一个结果中所看到的，一些沿边缘的像素没有被替换。这些像素与所选像素的颜色不完全相同，所以它们被忽略了。添加一个小的\u003ca href=\"https://imagemagick.org/Usage/color_basics/#fuzz\"\u003e模糊因子\u003c/a\u003e也会包含与原色相似的颜色。如上面第二个例子所示。\u003c/p\u003e\n\u003cp\u003e当然，\u003ccode\u003efuzz factor\u003c/code\u003e 并不是一个很好的解决方案，因为它不会捕捉所有这样的边缘像素。这是所有这些 \u003ccode\u003ecolor fill\u003c/code\u003e 方法经常出现的问题，也是一个没有通用解决方案的问题。\u003c/p\u003e\n\u003cp\u003e如果你想替换一个特定的已知颜色，而不是从图像本身选择一种颜色，那么可以使用 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?opaque\"\u003e-opaque\u003c/a\u003e\u0026rdquo; 图像操作符来代替。该函数还使用 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?fuzz\"\u003e-fuzz\u003c/a\u003e\u0026rdquo; 因子设置来增加与给定颜色相匹配的颜色范围。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efloodfill\u003c/code\u003e 的方法也很简单，因为它只会填充所选点周围的整个区域，而不会选择任何其他没有以某种方式连接的类似颜色的区域。\u003c/p\u003e\n\u003cp\u003e你也可以通过使用 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?fuzz\"\u003e-fuzz\u003c/a\u003e\u0026rdquo; 来扩大被填充的区域，以包括相似的颜色。在这种情况下，我们选择了一个足够高的值，也包括了交叉边界，允许洪水填充\u0026quot;泄漏\u0026quot;到图像的另一侧。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert color_test.png   -fill white \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;color 30,20 floodfill\u0026#39;\u003c/span\u003e      color_floodfill.png\n\n  convert color_test.png   -fill white   -fuzz 15%   \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;color 30,20 floodfill\u0026#39;\u003c/span\u003e      color_floodfill_fuzz.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/color_floodfill.png\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/color_floodfill_fuzz.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e用颜色填充区域并非没有问题。颜色可能会越过薄薄的边界，渗入到不想要的区域，(\u003ca href=\"https://imagemagick.org/Usage/formats/#bg_pattern\"\u003e请看背景图案上的 GIF\u003c/a\u003e，以证明这一点)。或者，它可能无法填满所选区域的边缘，（见\u003ca href=\"https://imagemagick.org/Usage/antialiasing/#floodfill\"\u003e反锯齿和泛滥填充问题\u003c/a\u003e）。但它确实有效。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efilltoborder\u003c/code\u003e 就像 \u003ccode\u003efloodfill\u003c/code\u003e 一样，只是你指定了一个颜色，这个颜色的边界是要填充的区域，而不是填充过程中要替换的颜色。\u003c/p\u003e\n\u003cp\u003e当然也建议在该边框颜色选择中加入 \u003ccode\u003esimilar colors\u003c/code\u003e 的\u003ca href=\"https://imagemagick.org/Usage/color_basics/#fuzz\"\u003e模糊因子\u003c/a\u003e，以进一步限制洪水填充。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert color_test.png   -fill white  -bordercolor royalblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;color 30,20 filltoborder\u0026#39;\u003c/span\u003e   color_filltoborder.png\n\n  convert color_test.png   -fill white  -bordercolor blue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;color 30,20 filltoborder\u0026#39;\u003c/span\u003e   color_filltoborder2.png\n\n  convert color_test.png   -fill white  -bordercolor blue  -fuzz 30% \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;color 30,20 filltoborder\u0026#39;\u003c/span\u003e   color_filltoborder_fuzz.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/color_filltoborder.png\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/color_filltoborder2.png\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/color_filltoborder_fuzz.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e最后的绘制颜色方法是 \u003ccode\u003ereset\u003c/code\u003e，它只是将整个图像替换或重置为填充颜色。在这种情况下，实际选择的像素对结果没有任何影响。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert color_test.png   -fill white \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;color 30,20 reset\u0026#39;\u003c/span\u003e      color_reset.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/color_reset.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e这实际上是非常有用的，因为它提供了一种简单的方法从现有图像生成纯色（或平铺图像）画布。(请参见 \u003ca href=\"https://imagemagick.org/Usage/canvas/#sized\"\u003eCanvases Sized to an Existing Image\u003c/a\u003e)以了解此方法和其他做同样事情的方法。\u003c/p\u003e\n\u003cp\u003e未来：使用 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?tile\"\u003e-tile\u003c/a\u003e\u0026rdquo; 图案来填充该区域。\u003c/p\u003e\n\u003ch2 id=\"matt-填充原语\"\u003eMatt 填充原语\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ematte\u003c/code\u003e 绘制原语的工作方式与上述 \u003ccode\u003ecolor\u003c/code\u003e 原语完全相同，只是它不会替换所选区域的颜色，只会替换所选区域的 \u003ccode\u003ematte\u003c/code\u003e 通道。（也就是只有 \u003ccode\u003ealpha\u003c/code\u003e 或 \u003ccode\u003ematte\u003c/code\u003e 通道被这些填充函数调整）。\u003c/p\u003e\n\u003cp\u003e就像 \u003ccode\u003ecolor\u003c/code\u003e 填充函数一样，\u003ccode\u003ematte\u003c/code\u003e 值使用的是填充色（除非用 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?tile\"\u003e-tile\u003c/a\u003e\u0026rdquo; 作为 \u003ccode\u003ealpha value\u003c/code\u003e 的来源）。\u003c/p\u003e\n\u003cp\u003e这里我们使用上面同样的 \u003ccode\u003ecolor floodfill\u003c/code\u003e 例子，但这里只调整 matte 通道，使填充部分完全透明。也就是说，原来的颜色仍然存在，只是透明而已!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert color_test.png   -fill none \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;matte 30,20 floodfill\u0026#39;\u003c/span\u003e      matte_floodfill.png\n\n  convert color_test.png   -fill none   -fuzz 15%   \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;matte 30,20 floodfill\u0026#39;\u003c/span\u003e      matte_floodfill_fuzz.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/matte_floodfill.png\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/matte_floodfill_fuzz.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e也可以使用 \u003ccode\u003ematte reset\u003c/code\u003e 函数使整个图像变成半透明的。当然在这种情况下，我们必须输出到 PNG，它可以接受半透明颜色的图像。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert color_test.png   -fill \u003cspan class=\"s1\"\u003e\u0026#39;#00000080\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;matte 30,20 reset\u0026#39;\u003c/span\u003e      matte_reset.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/matte_reset.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e注意，在操作中没有使用 \u003ccode\u003eblack\u003c/code\u003e 颜色分量，只使用了颜色的 \u003ccode\u003ematte\u003c/code\u003e 分量。图像的原色保持原样。\u003c/p\u003e\n\u003cp\u003e未来：使用 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?tile\"\u003e-tile\u003c/a\u003e\u0026rdquo; 模式来制作有趣的哑光效果。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ecolor\u003c/code\u003e 和 \u003ccode\u003ematte\u003c/code\u003e 都是完全替换颜色的函数，它总是会产生一个布尔（all or nothing）类型的颜色替换。因此，这些区域的边缘总是会显示出 \u003ca href=\"https://imagemagick.org/Usage/antialiasing/\"\u003eAliasing 效果\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e正因为如此，除了设置 GIF 图像的透明区域（也是布尔型）外，一般来说，这些都不是一般图像显影的好图像运算符。不过也不是全无用处，\u003ca href=\"https://imagemagick.org/Usage/masking/#bg_remove\"\u003e从背景去除\u003c/a\u003e的例子中可以看出。\u003c/p\u003e\n\u003ch2 id=\"关于绘图命令的具体内容\"\u003e关于绘图命令的具体内容\u003c/h2\u003e\n\u003ch3 id=\"像素坐标\"\u003e像素坐标\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e[-draw](https://imagemagick.org/Usage/option_link.cgi?draw)\u003c/code\u003e 命令（以及IM中的许多其他命令）使用的是所谓的\u0026quot;像素坐标\u0026rdquo;。也就是 \u0026ldquo;10,10\u0026rdquo; 的坐标是左上角往下10个像素的中心。\u003c/p\u003e\n\u003cp\u003e在这个坐标系中，0,0 是左上角像素的中心，w-1,h-1 是右下角的中心。实际的边缘位于 -0.5,-0.5 和 w-0.5,h-0.5，中心像素（如果图像是奇数大小）位于 \u0026lsquo;(w-1)/2,(h-1)/2\u0026rsquo;。\u003c/p\u003e\n\u003cp\u003e然而，当您对图像进行数学处理时（如使用扭曲时），实际的像素没有实际意义，因此它使用\u0026quot;图像坐标\u0026rdquo;。在这个系统中，图像的实际边缘在 \u0026lsquo;0,0\u0026rsquo; 和 \u0026lsquo;w,h\u0026rsquo; 处。而图像的中心（可能是，也可能不是像素的中心）在 \u0026lsquo;w/2,h/2\u0026rsquo;。\u003c/p\u003e\n\u003cp\u003e要将 \u0026lsquo;像素坐标\u0026rsquo; 转换为图像坐标，请加上 ½ 如左上角像素的中心是 \u0026lsquo;0.5,0.5\u0026rsquo;，右下角像素的中心是 \u0026lsquo;w-0.5,h-0.5\u0026rsquo;。\n\u003cem\u003e例如：小图像中的圆心\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"绘制伽马和色域校正\"\u003e绘制伽马和色域校正\u003c/h3\u003e\n\u003cp\u003e和几乎所有的 ImageMagick 操作一样， \u003ccode\u003e[-draw](https://imagemagick.org/Usage/option_link.cgi?draw)\u003c/code\u003e 是一个线性运算符，因此在线性 RGB 色彩空间中工作。这意味着，为了得到平滑的边缘，你可能需要对图像进行一些伽玛校正，然后再保存，这样就可以使用非线性（伽玛校正）的sRGB色彩空间来存储。\u003c/p\u003e\n\u003cp\u003e例如，如果你画了一个大圆，然后保存它\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 81x81 xc:black -fill white -draw \u003cspan class=\"s1\"\u003e\u0026#39;circle 40,40 40,3\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          circle_raw.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/circle_raw.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e看看圆圈的边缘，其实看起来并不是真的很光滑。你可以看到明显的阶梯效果。\u003c/p\u003e\n\u003cp\u003e那是因为你是在线性 RGB 色彩空间中画的圆。但是你却把图像保存成了真正的 sRGB 色域！这就导致了你的图像在保存的过程中出现了明显的阶梯效果。\u003c/p\u003e\n\u003cp\u003e为了解决这个问题，我们需要在保存图像之前给图像添加一个伽玛校正。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 81x81 xc:black -fill white -draw \u003cspan class=\"s1\"\u003e\u0026#39;circle 40,40 40,3\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -gamma 2.2 circle_gamma.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/circle_gamma.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e现在，圆圈边缘实际上看起来光滑圆润，就像它们应该的那样。\u003c/p\u003e\n\u003cp\u003e如果你想正确地做这件事，我们真的应该使用色彩空间进行修正。然而，由于IM假设RGB是保存的默认色彩空间，你需要做一些棘手的处理来让它正确地做事情。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 81x81 xc:black -set colorspace RGB \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill white -draw \u003cspan class=\"s1\"\u003e\u0026#39;circle 40,40 40,3\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -colorspace sRGB circle_sRGB.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/circle_sRGB.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e请注意，sRGB色彩空间（这是保存图像的正确方法）与简单地应用2.2伽玛校正并不完全相同。然而，两者之间的结果差异很小，只有在非常非常粗糙的图像中才能看到。\n在IM v6.7.5-1之前，色彩空间名称 \u0026ldquo;sRGB\u0026rdquo; 和 \u0026ldquo;RGB\u0026rdquo;（线性-RGB）实际上是颠倒的。因此，在旧版本的IM中，上面的两个标签应该被调换。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e要使用真实的图像（在IMv6中）正确地绘制（或进行任何\u0026quot;线性\u0026quot;图像处理），你需要首先删除任何现有的伽玛，处理图像，然后恢复该伽玛校正。更多细节请参见\u003ca href=\"https://imagemagick.org/Usage/resize/#resize_colorspace\"\u003e使用色域校正调整大小\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e下面是一个在真实图像上绘图的例子\u0026hellip;。首先是没有任何颜色校正（原始），然后是伽玛和色域校正。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert rose:  -fill none -stroke white -draw \u003cspan class=\"s1\"\u003e\u0026#39;line 5,40 65,5\u0026#39;\u003c/span\u003e  rose_raw.png\n\n  convert rose: -gamma .454545 \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill none -stroke white -draw \u003cspan class=\"s1\"\u003e\u0026#39;line 5,40 65,5\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -gamma 2.2 rose_gamma.png\n\n  convert rose: -colorspace RGB \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill none -stroke white -draw \u003cspan class=\"s1\"\u003e\u0026#39;line 5,40 65,5\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -colorspace sRGB rose_sRGB.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/rose_raw.png\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/rose_gamma.png\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/rose_sRGB.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e正如你所看到的，通过使用伽玛或色彩空间校正，线条变得非常平滑，没有锯齿状的\u0026quot;楼梯\u0026quot;别离效果，比直接绘制时可以看到。(你需要一个很好的显示器才能看到它)\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e上面的线条是用 \u003ccode\u003e[-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke)\u003c/code\u003e 颜色绘制的。您可以使用 \u003ccode\u003e[-fill](https://imagemagick.org/Usage/option_link.cgi?fill)\u003c/code\u003e 来绘制线条，并得到同样的结果，但这样您就不能使用 \u003ccode\u003e[-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth)\u003c/code\u003e 来控制线条粗细。更多信息请参见下面的\u0026rdquo;\u003ca href=\"https://imagemagick.org/Usage/draw/#stroke\"\u003e描边颜色设置\u003c/a\u003e\u0026quot;。\n色域名称实际上是使用\u0026rsquo;sRGB'色彩空间的值来定义的，但通过绘制应用，就好像图像是在线性RGB色彩空间中一样。因此，对命名的颜色（不是\u0026quot;白\u0026quot;或\u0026quot;黑\u0026rdquo;）使用上述伽玛校正将导致这些颜色变得失真。在这种情况下，最好不要使用伽玛或色域校正，这样命名的颜色就会正确映射。\n命名的\u0026rsquo;sRGB'颜色与图像的色彩空间的正确映射，将作为IMv7开发的一部分被修正。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"描边描边宽度和填充的相互作用\"\u003e描边、描边宽度和填充的相互作用\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e[-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke)\u003c/code\u003e 和 \u003ccode\u003e[-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth)\u003c/code\u003e 选项用于在字体边缘绘制轮廓。\u003c/p\u003e\n\u003cp\u003e这些选项通常与 \u003ccode\u003e[-fill](https://imagemagick.org/Usage/option_link.cgi?fill)\u003c/code\u003e 一起使用，以使文字更有趣，而不费力。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e    convert -size 380x70 xc:lightblue -pointsize \u003cspan class=\"m\"\u003e50\u003c/span\u003e -font Chisel \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e            -fill green  -stroke black  -draw \u003cspan class=\"s1\"\u003e\u0026#39;text 10,55 \u0026#34;Black Border\u0026#34;\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e            stroke_font.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e默认设置是 \u003ccode\u003e-strokewidth 1\u003c/code\u003e 和 \u003ccode\u003e-stroke None\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e但这样做会使轮廓笔画不可见，只留下 \u003ccode\u003e[-fill](https://imagemagick.org/Usage/option_link.cgi?fill)\u003c/code\u003e 的颜色，你不会看到它。\u003c/p\u003e\n\u003cp\u003e当 \u003ccode\u003e-strokewidth\u003c/code\u003e 为 \u0026ldquo;不可见 \u0026ldquo;时， \u003ccode\u003e-strokewidth\u003c/code\u003e 唯一的效果是对字体大小属性的影响，也就是说它仍然可以影响字体定位和 \u003ca href=\"https://imagemagick.org/Usage/text/#label\"\u003eLabel 和 Caption\u003c/a\u003e 图片生成的大小。否则，宽度在你使笔画可见之前是没有可见效果的。\u003c/p\u003e\n\u003cp\u003e为了了解 \u003ccode\u003e[-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth)\u003c/code\u003e 对字体外观的实际影响（当使其可见时），我在这里绘制了一些不同宽度的文字，从 \u0026ldquo;turned off\u0026rdquo; 到越来越大。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e    convert -size 320x420 xc:lightblue -pointsize \u003cspan class=\"m\"\u003e70\u003c/span\u003e -font Vademecum \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      -fill red -stroke none                 -draw \u003cspan class=\"s1\"\u003e\u0026#39;text 30,80  \u0026#34;Stroke -\u0026#34;\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      -fill red -stroke black -strokewidth \u003cspan class=\"m\"\u003e0\u003c/span\u003e -draw \u003cspan class=\"s1\"\u003e\u0026#39;text 30,160 \u0026#34;Stroke 0\u0026#34;\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      -fill red -stroke black -strokewidth \u003cspan class=\"m\"\u003e1\u003c/span\u003e -draw \u003cspan class=\"s1\"\u003e\u0026#39;text 30,240 \u0026#34;Stroke 1\u0026#34;\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      -fill red -stroke black -strokewidth \u003cspan class=\"m\"\u003e2\u003c/span\u003e -draw \u003cspan class=\"s1\"\u003e\u0026#39;text 30,320 \u0026#34;Stroke 2\u0026#34;\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      -fill red -stroke black -strokewidth \u003cspan class=\"m\"\u003e3\u003c/span\u003e -draw \u003cspan class=\"s1\"\u003e\u0026#39;text 30,400 \u0026#34;Stroke 3\u0026#34;\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      stroke_table.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/stroke_table.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e请注意，从上面的例子中，设置 \u003ccode\u003e-strokewidth\u003c/code\u003e 为 \u0026ldquo;0\u0026rdquo; 与设置 \u003ccode\u003e-stroke\u003c/code\u003e 颜色为 \u0026ldquo;none\u0026rdquo;（默认值）是不同的。前者会画出一个非常非常细的笔触轮廓，而后者则会有效地关闭它。在这两种情况下，笔触仍然会被绘制。\u003c/p\u003e\n\u003cp\u003e然而你也应该注意到，即使 \u003ccode\u003e-strokewidth\u003c/code\u003e 为 \u0026ldquo;0\u0026rdquo;，图像的轮廓也会比普通的 \u003ccode\u003efilled\u003c/code\u003e 图像（使用 \u003ccode\u003e-stroke\u003c/code\u003e 颜色为 \u0026ldquo;none\u0026rdquo;）扩大非常小。\u003c/p\u003e\n\u003cp\u003e最后，使用任何小于 \u0026ldquo;1.0\u0026rdquo; 的宽度都不能正常工作。在这种情况下，你应该谨慎行事。\u003c/p\u003e\n\u003cp\u003e但是请记住， \u003ccode\u003e-strokewidth\u003c/code\u003e 也是一个浮点设置。也就是说，\u0026ldquo;0.5\u0026rdquo; 的笔画宽度也是有效的。然而，通常只有当您试图在关闭防锐化功能的情况下绘制薄的位图圆时，这才是重要的。\u003c/p\u003e\n\u003cp\u003e下面是一个使用超大笔触宽度的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e   convert -size 320x100 xc:lightblue -font Candice -pointsize \u003cspan class=\"m\"\u003e72\u003c/span\u003e -fill white \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e           -stroke black -strokewidth \u003cspan class=\"m\"\u003e15\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;text 25,65 \u0026#39;Anthony\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e           stroke_thick.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/stroke_thick.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e请注意， \u003ccode\u003e-strokewidth\u003c/code\u003e 可以向内和向外扩展线条。下面是同样的例子，但是重新绘制了字体，没有笔画轮廓，去掉了很粗的笔画的内侧部分。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e   convert -size 320x100 xc:lightblue -font Candice -pointsize \u003cspan class=\"m\"\u003e72\u003c/span\u003e -fill white \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e           -stroke black -strokewidth \u003cspan class=\"m\"\u003e15\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;text 25,65 \u0026#39;Anthony\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e           -stroke none                  -draw \u003cspan class=\"s2\"\u003e\u0026#34;text 25,65 \u0026#39;Anthony\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e           stroke_outline.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/stroke_outline.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e更多使用描边的例子请看\u003ca href=\"https://imagemagick.org/Usage/fonts/\"\u003e复合字体效果\u003c/a\u003e。请特别看一下\u0026rdquo;\u003ca href=\"https://imagemagick.org/Usage/fonts/#balloon\"\u003e气球效果\u003c/a\u003e\u0026quot;。\u003c/p\u003e\n\u003ch3 id=\"绘制描边线条\"\u003e绘制（描边）线条\u003c/h3\u003e\n\u003cp\u003eIM中的默认画线有一些奇怪的行为，值得了解。下面就为大家介绍一下默认画线\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x40 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 5,35 95,5\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          line_default.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/line_default.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e你可以用 \u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?fill\"\u003e\u003ccode\u003e-fill\u003c/code\u003e\u003c/a\u003e 选项设置线条的颜色。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x40 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill white -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 5,35 95,5\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          line.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/line.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e此外，你还可以通过设置 \u003ccode\u003e[-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke)\u003c/code\u003e 颜色，使线条稍微粗一些。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x40 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill white -stroke black -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 5,35 95,5\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          line_stroke.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/line_stroke.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e但是我们用 \u003ccode\u003e-fill\u003c/code\u003e 选项指定的白色是怎么回事呢？\u003c/p\u003e\n\u003cp\u003e这就是在 ImageMagick 中绘制线条的棘手之处。该程序所做的实际上是将线条视为一个约1像素宽的填充对象。这是自然的，因为通常情况下，多条线通常用于扫出一个要填充的区域。\u003c/p\u003e\n\u003cp\u003e所以，就像我们在上一节中使用字体的描边一样，IM 用填充色绘制线条（或对象），然后用描边色在其周围绘制。结果就是，现在上面的描边色线条稍微粗了一点，填充色完全隐藏在下面。如果你把描边色做成半透明的，就可以让这个填充色再次显现出来。\u003c/p\u003e\n\u003cp\u003e综上所述，线条会出现在 \u003ccode\u003e-fill\u003c/code\u003e 颜色下绘制，但一旦 \u003ccode\u003e-stroke\u003c/code\u003e 颜色被定义为默认的\u0026quot;无\u0026quot;或\u0026quot;透明\u0026quot;颜色以外的颜色，该选项就没有任何意义了。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e选项 \u003ccode\u003e-linewidth\u003c/code\u003e 实际上只是 \u003ccode\u003e-strokewidth\u003c/code\u003e 的别名，不应该被使用。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e例如，你可能会认为这个命令会产生很粗的线条。确实如此，但由于 \u003ccode\u003e-stroke\u003c/code\u003e 的颜色是不可见的，所以你看不到它。你只能看到线条的一个像素宽的区域的内部\u0026quot;填充\u0026rdquo;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x40 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill white -strokewidth \u003cspan class=\"m\"\u003e3\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 5,35 95,5\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          line_fill_3.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/line_fill_3.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e以上的结果其实我认为是一个 BUG，什么都没画，因为没有'区域'填充，也没有设置线的'描边颜色\u0026rsquo;。什么都没有画，因为没有\u0026quot;区域 \u0026ldquo;需要填充，也没有设置线的\u0026quot;笔触颜色\u0026rdquo;。IM 目前这样做的原因是为了避免新用户的混淆，但实际上这只会给高级用户带来问题。详见\u003ca href=\"https://imagemagick.org/Usage/draw/#bounds\"\u003e《绘制填充边界》\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e但如果同时定义了描边颜色，就会得到要求的粗线\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x40 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -stroke black -strokewidth \u003cspan class=\"m\"\u003e3\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 5,35 95,5\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          line_stroke_3.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/line_stroke_3.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果将 \u003ccode\u003e-strokewidth\u003c/code\u003e 设置为1，则上面的一行将被完全覆盖。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x40 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -stroke black -strokewidth \u003cspan class=\"m\"\u003e1\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 5,35 95,5\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          line_stroke_1.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/line_stroke_1.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e当然当你掌握了这些知识后，你就可以利用这些知识进行创作，就像画字体一样。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x40 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -stroke black -strokewidth \u003cspan class=\"m\"\u003e5\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 5,35 95,5\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -stroke white -strokewidth \u003cspan class=\"m\"\u003e2\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 5,35 95,5\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          line_multi.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/line_multi.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在这里，我使用了最薄的 \u003ccode\u003e-strokewidth\u003c/code\u003e 设置为 \u0026ldquo;0\u0026rdquo;，就像我对上述字体所做的一样。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x40 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill white -stroke black -strokewidth \u003cspan class=\"m\"\u003e0\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 5,35 95,5\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          line_stroke_0.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这就产生了一个非常奇怪的结果，即由黑点和灰段组成的点线。这是笔触、填充和背景色之间奇怪的\u0026quot;色拍频率\u0026quot;的结果。\u003c/p\u003e\n\u003cp\u003e下面是线条的放大图\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 25x10 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill white -stroke black -strokewidth \u003cspan class=\"m\"\u003e0\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 2,8 22,1\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -scale 400%    line_stroke_0_white.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/line_stroke_0_white.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e颜色节拍频率 \u0026ldquo;的效果与\u0026quot;声音节拍\u0026quot;的效果并无二致，当你有两把非常轻微的不调的吉他时，你会得到这样的效果。在这种情况下，你会得到一个黑点，其中笔触颜色完全覆盖了基本的填充颜色，你会得到一个灰色的点，其中笔触颜色与填充和背景颜色混合。\n颜色混合是反锯齿过程的自然结果，IM使用反锯齿过程来尝试改善线条和其他绘制对象的外观。更多信息请参见\u003ca href=\"https://imagemagick.org/Usage/antialiasing/\"\u003e IM 中的抗锯齿\u003c/a\u003e讨论和示例页面。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e需要注意的是，这种效果只出现在倾斜的线条上，而不是纯水平或垂直的线条，因为在这些线条上，别名没有影响，因此也就没有\u0026quot;色拍频率\u0026quot;的效果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x40 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill white -stroke black -strokewidth \u003cspan class=\"m\"\u003e0\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 5,20 95,20\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          line_stroke_horz.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/line_stroke_horz.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在这里，我在放大的视图上使用了不同的底层填充颜色，所以你可以看到颜色如何改变结果的节拍。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 25x10 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill none -stroke black -strokewidth \u003cspan class=\"m\"\u003e0\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 2,8 22,1\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -scale 400%     line_stroke_0_none.jpg\n\n  convert -size 25x10 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill red -stroke black -strokewidth \u003cspan class=\"m\"\u003e0\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 2,8 22,1\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -scale 400%    line_stroke_0_red.jpg\n\n  convert -size 25x10 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill black -stroke black -strokewidth \u003cspan class=\"m\"\u003e0\u003c/span\u003e -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 2,8 22,1\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -scale 400%    line_stroke_0_black.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/line_stroke_0_none.jpg\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/line_stroke_0_red.jpg\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/line_stroke_0_black.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e让我们把它和无 stroke 相比\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 25x10 xc:lightblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill black -stroke none -draw \u003cspan class=\"s2\"\u003e\u0026#34;line 2,8 22,1\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -scale 400%    line_stroke_-_black.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/line_stroke_-_black.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e正如你所看到的，当绘制非常细的线条时，你可以通过使用相同的填充和描边颜色，或者将其中一种颜色设置为无来减少\u0026quot;节拍\u0026rdquo;。虽然后者是最好的主意，但前者可能对你的特定编程需求更实用。\u003c/p\u003e\n\u003cp\u003e注意，填充线的粗细是 \u0026ldquo;0\u0026rdquo;。但描边线可以有更大的厚度。它也是一个浮点值! 2.5像素宽的线条是完全有效的。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这些结果不仅是由于笔画宽度为0的bug，导致颜色跳动，而且在没有实际需要填充的区域时，\u0026ldquo;填充色\u0026quot;被画出了额外的1.0直径厚度。这我也认为是一个bug。请看\u003ca href=\"https://imagemagick.org/Usage/draw/#bounds\"\u003e绘制填充边界\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"绘制填充边界\"\u003e绘制填充边界\u003c/h3\u003e\n\u003cp\u003e关于各种绘制原语，还有一些其他要点需要您注意。\u003c/p\u003e\n\u003cp\u003e笔画宽度对于大于 1.0 的浮点值工作得很好，但对于小于 1.0 的值似乎会崩溃。这是由于使用的实现算法造成的，而不仅仅是因为它是错误的，因为它在较大厚度的线条上工作得很好。\u003c/p\u003e\n\u003cp\u003e基本上，如果你使用的笔画宽度为零，你可以期待没有笔画颜色会被添加。相反，你会得到一种节拍模式，当线条穿过像素的实际\u0026quot;中心\u0026quot;时，笔触颜色就会达到全部强度。\u003c/p\u003e\n\u003cp\u003e真正应该发生的是，添加到像素上的颜色数量应该反映出被绘制的线条的面积，而不是像素与该线条的距离。因此，零宽度的线条不应该给图像添加任何颜色，而厚度小于1.0的线条应该只添加较少的颜色。\u003c/p\u003e\n\u003cp\u003e请看上面的例子 \u003ca href=\"https://imagemagick.org/Usage/draw/#strokewidth\"\u003eDraw Lines, with StrokeWidth and Stroke\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e另一个问题是，填充颜色没有应用到正在绘制的形状（多边形）的边缘，而是应用到更远的半像素处。这包括没有应用\u0026quot;描边\u0026quot;的情况，而边缘应该是精确的。它也包括画一条\u0026quot;线\u0026rdquo;，它的填充厚度实际上是\u0026quot;零\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e基本上，如果你画了一条线，没有启用描边，从技术上讲，你应该看到，没有线，因为它没有\u0026quot;填充\u0026quot;厚度。相反，线条的绘制至少包括1个像素宽的\u0026quot;填充\u0026quot;颜色。这是出于历史原因，一般来说可以避免新用户对IM的混淆。不幸的是，这对高级用户来说是不正确的。\u003c/p\u003e\n\u003cp\u003e这意味着，如果您只使用填充色绘制两个多边形，并共享一个边缘，该边缘将重叠1个像素，因为每个多边形的所有边缘都比它大半像素。换句话说，多边形和其他形状并不适合在一起，而是重叠的。\u003c/p\u003e\n\u003cp\u003e例如，在这里我试着使用 \u003ccode\u003edraw\u003c/code\u003e 把一张图片分成两半（在白色上绘制黑色）。要做到这一点，我画了两个多边形，共享一个边缘，完全没有重叠。由此产生的\u0026quot;微小\u0026quot;图像，已被放大显示。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 10x10 xc: -draw \u003cspan class=\"s1\"\u003e\u0026#39;polygon 2,-1 7,10 10,10 10,-1\u0026#39;\u003c/span\u003e bound_left.gif\n  convert -size 10x10 xc: -draw \u003cspan class=\"s1\"\u003e\u0026#39;polygon 2,-1 7,10 -1,10 -1,-1\u0026#39;\u003c/span\u003e bound_right.gif\n  convert bound_left.gif bound_right.gif -compose Plus -composite bound_add.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/bound_left_mag.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/img_www/plus.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/bound_right_mag.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/img_www/right.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/bound_add_mag.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e两个黑色的部分(这是实际绘制的)实际上是相互重叠的! 换句话说，尽管我们试图使用绘制的多边形分别绘制这两个区域，但填充的区域比要求的略大。\u003c/p\u003e\n\u003cp\u003e我还将两张图片加（\u003ca href=\"https://imagemagick.org/Usage/compose/#plus\"\u003e加合成\u003c/a\u003e）在一起，这样你就可以实际看到绘制的黑色区域的重叠。如果两个多边形是完美契合的，那么 \u0026ldquo;添加 \u0026ldquo;的图画将是纯白色的。\u003c/p\u003e\n\u003cp\u003e实际的重叠量相当于默认的 \u003ccode\u003e-strokewidth 1.0\u003c/code\u003e 设置。因此，通常情况下，这个额外的区域会被一个正常的笔画宽度所覆盖。然而它可能会造成一些实际问题。\u003c/p\u003e\n\u003cp\u003e旁白: 对于一个完整的连接测试，你会在黑色背景上生成50%的灰色区域，然后把它们加在一起。这样你就可以看到这些区域是否不仅 \u0026ldquo;重叠\u0026rdquo;（如上图所示），而且还可以测试当你把这些区域加在一起时，它们是否 \u0026ldquo;重叠不足\u0026rdquo;（在填充的区域之间留下一个间隙）。所得到的图像应该是一个完美平滑的50%灰色，沿连接处没有颜色变化。透明度检查会涉及到，在一个完全透明的背景上应该使用50%透明，50%灰色的颜色。\u003c/p\u003e\n\u003cp\u003e要查看一个完美的剪切和重新添加的例子，基于一个单一的蒙版图像，请参阅组成方法的例子，\u003ca href=\"https://imagemagick.org/Usage/compose/#dstout\"\u003e组成 DstOut\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e未来BUG修复：填充的区域应该是精确的，但为了在绘制形状时进行补偿，默认的 \u0026ldquo;描边颜色 \u0026ldquo;应该设置为填充颜色（除非它本身被特别设置）。\u003c/p\u003e\n\u003ch2 id=\"mvg---魔法矢量图形\"\u003eMVG - 魔法矢量图形\u003c/h2\u003e\n\u003cp\u003e上面显示的原语构成了所有 \u003ccode\u003e-draw\u003c/code\u003e 操作的基础。它们共同构成了 ImageMagick 中特殊内部语言的起点，称为 Magick Vector Graphics 语言。关于这种语言的更多细节，请参见IM网站上的 \u003ca href=\"http://www.imagemagick.org/script/magick-vector-graphics.php\"\u003eMVG 原语和语法摘要\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e这种 \u0026ldquo;MVG\u0026rdquo; 语言的设计目标是让 ImageMagick 处理更复杂的 SVG（可缩放矢量图形）语言。它通过尝试将给定 SVG 格式的图像转换为更简单的内部 MVG 格式来实现。更多细节请看下面的 \u003ca href=\"https://imagemagick.org/Usage/draw/#svg\"\u003eSVG 处理\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e因此，你上面看到的只是 \u003ccode\u003e-draw\u003c/code\u003e 操作符的一小部分功能。如果你想绘制复杂的对象，我建议你使用SVG编辑器（如 \u0026ldquo;Sodipodi\u0026rdquo;）为对象创建一个单独的SVG格式图像。参见下面的非IM矢量图形程序）。\u003c/p\u003e\n\u003cp\u003e与 SVG 不同，MVG 没有任何形式的\u0026quot;容器\u0026quot;或图像命令集。在转换过程中，这些命令都被删除，以产生一个简化的 MVG 绘图命令序列。相反，它使用\u003ca href=\"https://imagemagick.org/Usage/draw/#push_context\"\u003e图形上下文\u003c/a\u003e的概念来保存和恢复各种绘图设置，这就是我们现在要看的。\u003c/p\u003e\n\u003ch3 id=\"命令行设置与-mvg-设置\"\u003e命令行设置与 MVG 设置\u003c/h3\u003e\n\u003cp\u003e首先，您通过命令行选项设置的几乎所有设置，绘制原语使用的设置在 MVG 绘制命令中都有直接对应的内容。\u003c/p\u003e\n\u003cp\u003e通过命令行选项（如 \u003ccode\u003e-strokewidth\u003c/code\u003e）或使用 MVG 绘图字符串（如 \u003ccode\u003estrok-width\u003c/code\u003e）中的设置，两者之间的主要区别在于 MVG 设置只在 MVG 命令字符串的持续时间内有效。\u003c/p\u003e\n\u003cp\u003e一般绘图设置的总结:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  __cmd_option__   __draw_MVG__        __Argument__\n    -fill            fill                color/tile for inside shapes\n    -tile            fill                image tile, replaces fill color\n\n    -stroke          stroke              line color/tile around the shapes\n    -strokewidth     stroke-width        pixel width\n    +antialias       stroke-antialias    0/1 aliasing line edges\n\n    -font            font                font_name / font_file\n    -family          font-family            ?\n    -weight            ?                    ?\n    -stretch           ?                    ?\n    -pointsize       font-size           height in points\n    -kerning           -                 extra inter-character spacing\n\n    +antialias       text-antialias      0/1 aliasing drawing text\n    -box             text-undercolor     fill color for font bounding box\n      -              decorate        (None, Underline, LineThrough or Overline)\n\n    -gravity         gravity             (None, North, South-East,...)\n    -fuzz              -                 color delta / percentage\n    -bordercolor       -                 color\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNotes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  - no such option      ? unknown\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这些设置通常很好理解，因为它们经常使用，上面也有演示。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e字体、拉伸、样式和重量用于从 ImageMagick 字体列表中识别字体。然而，大多数人只是选择一个特定的字体和大小点来代替使用。因此，它们在IM中很少使用。\n正如您所看到的，\u0026ldquo;color fill\u0026rdquo; 原语的特殊设置在 MVG 中并没有直接对应的设置。这就是 \u003ccode\u003e-bordercolor\u003c/code\u003e 和 \u003ccode\u003e-fuzz\u003c/code\u003e 因子设置。在使用 \u003ccode\u003e-draw\u003c/code\u003e 操作符之前，必须从命令行指定这些设置。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e有些 MVG 设置作为全局命令行设置可能更有用，比如字体绘制的 \u003ccode\u003edecorate\u003c/code\u003e 设置。\u003c/p\u003e\n\u003cp\u003e警告： \u003ccode\u003e[-gravity](https://imagemagick.org/Usage/option_link.cgi?gravity)\u003c/code\u003e 不是 SVG 规范的一部分。在 MVG 中，它只用于文本和图像的放置以及对齐。目前没有与默认的\u0026quot;引力\u0026quot;效果分开的调整设置。然而，由于调整是 SVG 文本处理的一部分，这可能会在未来的某个时候改变。\u003c/p\u003e\n\u003cp\u003e现在，全局命令行设置（在 MVG 绘制字符串之外）用于初始化你所应用的每个 \u003ccode\u003e-draw\u003c/code\u003e 操作的设置，这就是为什么你可以设置一个 \u003ccode\u003e-fill\u003c/code\u003e 颜色，然后你可以用它来绘制该颜色的圆。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue   -fill red \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;circle 50,30 40,10\u0026#34;\u003c/span\u003e          draw_circle_global.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_circle_global.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e你可以在 MVG 参数 \u003ccode\u003e-draw\u003c/code\u003e 中本地覆盖全局设置\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue   -fill red \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;fill green   circle 50,30 40,10\u0026#34;\u003c/span\u003e  draw_circle_override.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_circle_override.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e然而，在单个 \u003ccode\u003e-draw\u003c/code\u003e MVG 参数中设置的设置只在 \u003ccode\u003e-draw\u003c/code\u003e 操作期间存在。也就是说， \u003ccode\u003e-draw\u003c/code\u003e 中的设置只限于该次绘制，而不会带入以后单独的 \u003ccode\u003e-draw\u003c/code\u003e 参数中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue   -fill red   -draw \u003cspan class=\"s1\"\u003e\u0026#39;fill green\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;circle 50,30 40,10\u0026#34;\u003c/span\u003e          draw_circle_local.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_circle_local.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果你打算进行大量的操作，那么在单个 MVG 字符串中进行这些操作可能会比多个 \u003ccode\u003e-draw\u003c/code\u003e 操作更好。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue  \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;fill green  circle 41,39 44,57\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill blue   circle 59,39 56,57\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill red    circle 50,21 50,3  \u0026#34;\u003c/span\u003e  draw_circle_multi.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/draw_circle_multi.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch3 id=\"mvg-特定设置\"\u003eMVG 特定设置\u003c/h3\u003e\n\u003cp\u003e其他控制线条和对象绘制方式的 MVG 设置，即使在使用原语操作时也需要了解。这些设置包括\u0026hellip;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   __draw_MVG__       __Description/Argument__\n  fill-opacity        fill transparency, from 0.0 to 1.0\n  clip-rule           fill style for crossed lines (evenodd, nonzero)\n\n  stroke-opacity      line transparency, number from 0.0 to 1.0\n  stroke-dasharray    list of 'on' and 'off' lengths for lines\n  stroke-dash\n  stroke-linecap      End of line look: butt round square\n  stroke-linejoin     Lines joins:  butt  miter round square\n  stroke-miterlimit   Angle when 'miter' joins become 'bevel' (or 'butt')\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e记住，所有 MVG 设置和绘图操作符的完整列表可以在 IM 网站的 \u003ca href=\"http://www.imagemagick.org/script/magick-vector-graphics.php\"\u003eMVG 原语和语法摘要\u003c/a\u003e中看到。\u003c/p\u003e\n\u003cp\u003e让我们看看一些简单设置的效果\u0026hellip;\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# Stroke Opacity\u003c/span\u003e\n  convert -size 100x60 xc:skyblue -fill none -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;                           path \u0026#39;M 10,10 L 90,10\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-opacity 0.8         path \u0026#39;M 10,20 L 90,20\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-opacity 0.6         path \u0026#39;M 10,30 L 90,30\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-opacity 0.4         path \u0026#39;M 10,40 L 90,40\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-opacity 0.2         path \u0026#39;M 10,50 L 90,50\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          set_stroke_opacity.gif\n\n  \u003cspan class=\"c1\"\u003e# Fill Opacity\u003c/span\u003e\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;                    rectangle  5,10 15,50 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;fill-opacity 0.8    rectangle 20,10 30,50 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;fill-opacity 0.6    rectangle 35,10 45,50 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;fill-opacity 0.4    rectangle 50,10 60,50 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;fill-opacity 0.2    rectangle 65,10 75,50 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;fill-opacity  0     rectangle 80,10 90,50 \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          set_fill_opacity.gif\n\n  \u003cspan class=\"c1\"\u003e# Plain and Dashed Lines\u003c/span\u003e\n  convert -size 100x60 xc:skyblue -fill none -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;                           path \u0026#39;M 10,10 L 90,10\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-dasharray 5 3       path \u0026#39;M 10,20 L 90,20\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-dasharray 5 5       path \u0026#39;M 10,30 L 90,30\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-dasharray 10 3 3 3  path \u0026#39;M 10,40 L 90,40\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-dasharray 1 6       path \u0026#39;M 10,50 L 90,50\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          set_lines.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;                           path \u0026#39;M 10,10 L 90,10\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-dasharray 5 3       path \u0026#39;M 10,20 L 90,20\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-dasharray 5 5       path \u0026#39;M 10,30 L 90,30\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-dasharray 10 3 3 3  path \u0026#39;M 10,40 L 90,40\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-dasharray 1 6       path \u0026#39;M 10,50 L 90,50\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          set_lines_fill.gif\n\n  \u003cspan class=\"c1\"\u003e# Note: Technically the second image should be the same as the first\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# as the \u0026#39;filled\u0026#39; lines contain no area.  This I regard as a BUG.\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# Stroke Ends and Joins\u003c/span\u003e\n  convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth \u003cspan class=\"m\"\u003e8\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;                           path \u0026#39;M 20,20 L 20,70\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-linecap butt        path \u0026#39;M 40,20 L 40,70\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-linecap round       path \u0026#39;M 60,20 L 60,70\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-linecap square      path \u0026#39;M 80,20 L 80,70\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          set_endcaps.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth \u003cspan class=\"m\"\u003e5\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;                        path \u0026#39;M  5,70 L 20,20  35,70\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-linejoin miter   path \u0026#39;M 35,70 L 50,20  65,70\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-linejoin bevel   path \u0026#39;M 55,70 L 70,20  85,70\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-linejoin round   path \u0026#39;M 75,70 L 90,20 105,70\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          set_linejoin.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth \u003cspan class=\"m\"\u003e5\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;                        path \u0026#39;M  5,70 L 20,20  35,70\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-miterlimit 7     path \u0026#39;M 35,70 L 50,20  65,70\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;stroke-miterlimit 6     path \u0026#39;M 65,70 L 80,20  95,70\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          set_miterlimit.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/set_stroke_opacity.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/set_fill_opacity.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/set_lines.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/set_lines_fill.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/set_endcaps.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/set_linejoin.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/set_miterlimit.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003estroke-miterlimit\u003c/code\u003e 的设置是相当难以演示的。这个属性定义了将 \u003ccode\u003emiter\u003c/code\u003e 连接变为 \u003ccode\u003ebevel\u003c/code\u003e 连接的角度。基本上对于非常尖锐的角度，一个斜面可以从两条线的实际接合处延伸很长的距离。这就为这个锐角设置了一个最大限度，当它变得太长时，就会使角点变钝。但请注意，它代表的是某种角度的三角值，而不是长度或距离。该值必须大于1.0。\u003c/p\u003e\n\u003cp\u003e上面显示了对于我所显示的连接角度，斜角会突然转换成一个介于6到7之间的斜角。\u003c/p\u003e\n\u003cp\u003e例如，1.414 的 \u003ccode\u003etroke-miterlimit\u003c/code\u003e 会将小于90度的任何角度的 \u0026ldquo;miter\u0026rdquo; 转换为 \u003ccode\u003ebevel\u003c/code\u003e 。4.0的 值（默认值）将小于约29度的角度转换为连接。而10.0的值可以将小于约11.5度的角度转换为斜面。\u003c/p\u003e\n\u003ch3 id=\"svg-s路径绘制\"\u003eSVG s路径绘制\u003c/h3\u003e\n\u003cp\u003eSVG 路径是 SVG 的基本绘图原语。它用于绘制线型、圆、曲线、弧线等。SVG 路径的完整规范可以在 \u003ca href=\"http://www.w3.org/TR/SVG/paths.html#PathDataGeneralInformation\"\u003eSVG 路径规范\u003c/a\u003e文档中找到。\u003c/p\u003e\n\u003cp\u003e然而这并不是一个容易阅读的文档，因为它确实是为程序员而不是用户准备的，所以我将简化和总结路径规范\u0026hellip;\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e字母是命令，而所有的数字（浮点）都是参数\u003c/li\u003e\n\u003cli\u003e逗号或空格可以作为参数分隔符，否则完全忽略\u003c/li\u003e\n\u003cli\u003e每个路径组件的最后两个参数 \u003ccode\u003e(x,y)\u003c/code\u003e 将成为该路径组件的终点(或\u0026quot;结\u0026rdquo;)\u003c/li\u003e\n\u003cli\u003e大写字母是指最终点的绝对坐标\u003c/li\u003e\n\u003cli\u003e小写字母是相对于前一个组件的终点而言的\u003c/li\u003e\n\u003cli\u003e例如 \u0026ldquo;M 1,2 L 3,4 L 2,4\u0026rdquo; 和 \u0026ldquo;M 1,2 L 4,6 L 6,2\u0026rdquo; 是一样的。\u003c/li\u003e\n\u003cli\u003e即在1,2上加了3,4，画线到4,6。\u003c/li\u003e\n\u003cli\u003e然后在1,2上加2,4，画出一条线到最后的坐标6,2。\u003c/li\u003e\n\u003cli\u003e每个元素的参数可以重复，不需要重新发布相同的路径字母，可以多加数字参数组。不过对于曲线，为了方便阅读，我建议你还是加上函数字母。\u003c/li\u003e\n\u003cli\u003e重复的参数 \u0026ldquo;M\u0026rdquo; 或 \u0026ldquo;m\u0026rdquo; 分别作为 \u0026ldquo;L\u0026rdquo; 或 \u0026ldquo;l\u0026rdquo; 处理。\u003c/li\u003e\n\u003cli\u003e例如：\u0026rdquo; M 1,2 3,4 5,6 \u0026quot; 和 \u0026quot; M 1,2 L 3,4 L 5,6 \u0026quot; 是一样的。\u003c/li\u003e\n\u003cli\u003e而：\u0026ldquo;m 1,2 3,4 2,4 \u0026quot; 与 \u0026quot; m 1,2 l 3,4 l 2,4 \u0026quot; 相同。\u003c/li\u003e\n\u003cli\u003e对于立方贝塞尔，所有的点（控制点和结点）都是相对于前一个路径组件的端点而言的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e请注意，您可以用绝对坐标或相对坐标来指定对象。因此，你可以用相对坐标来定义一个对象，只需提供一个初始的绝对\u0026quot;移动\u0026quot;坐标来定位整个路径。\u003c/p\u003e\n\u003cp\u003e另一方面，你也可以使用其他的\u0026quot;图形内容\u0026quot;命令来移动整个图形在\u0026quot;视图框\u0026quot;或\u0026quot;转换\u0026quot;中的位置（见下文）。因此，在 SVG 路径中使用绝对或相对坐标并不重要。\n移动、线条和路径闭合是学习 SVG 对象路径的最初起点。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# Open, Completed and Closed Paths (same points)\u003c/span\u003e\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 40,10 L 20,50 90,10 70,40\u0026#39;\u0026#34;\u003c/span\u003e path_open.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 40,10 L 20,50 90,10 70,40 40,10\u0026#39;\u0026#34;\u003c/span\u003e path_complete.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 40,10 20,50 90,10 70,40 Z\u0026#39;\u0026#34;\u003c/span\u003e path_closed.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_open.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/path_complete.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/path_closed.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e但是请注意，\u0026lsquo;z\u0026rsquo; 只是关闭循环。它并没有创建一个单独的对象。因此，两个\u0026quot;关闭\u0026quot;的路径仍然被归类为一个单一的绘制对象，无论它们是重叠的还是完全断开的。\u003c/p\u003e\n\u003cp\u003e这里我们展示了两个闭合但重叠的循环，在同一方向上绘制。由于只使用了一条路径，所以对象是一个单一的对象，\u003ccode\u003efill-rule\u003c/code\u003e 设置控制了重叠区域的填充方式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# Overlapping Paths and Fill Rule\u003c/span\u003e\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;fill-rule evenodd \\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 40,10 20,20 70,50 Z\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                       M 20,40 70,40 90,10 Z\u0026#39; \u0026#34;\u003c/span\u003e path_evenodd.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;fill-rule nonzero \\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 40,10 20,20 70,50 Z\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                       M 20,40 70,40 90,10 Z\u0026#39; \u0026#34;\u003c/span\u003e path_nonzero.gif\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_evenodd.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/path_nonzero.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e由于对象围绕中心以相同的角度方向绘制，两个闭合的循环将包含一个周期值为2的区域，因此 \u003ccode\u003eevenodd\u003c/code\u003e 规则使得该区域未被填充，而非零的 \u003ccode\u003enonzero\u003c/code\u003e 规则则将其填充。但是请注意，所有的路径都是可见的，因为它们实际上是同一个对象。\u003c/p\u003e\n\u003cp\u003e绘制路径的方向是非常重要的，一般情况下，所有的路径相对于对象的'内部'应该绘制在完全相同的方向上。\u003c/p\u003e\n\u003cp\u003e例如这里我将第二个对象画成与第一个对象相反的方向。因此，当两个对象重叠时，该区域被圈出 \u0026lsquo;0\u0026rsquo; 次。也就是说，无论使用什么 \u003ccode\u003efill-rule\u003c/code\u003e，它都将是未被填充的，形成一个'洞\u0026rsquo;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# Overlapping Closed Objects, Second object drawn in reverse\u003c/span\u003e\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;fill-rule evenodd \\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 40,10 20,20 70,50 Z\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                       M 20,40 90,10 70,40 Z\u0026#39; \u0026#34;\u003c/span\u003e path_rvs_evenodd.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;fill-rule nonzero \\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 40,10 20,20 70,50 Z\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                       M 20,40 90,10 70,40 Z\u0026#39; \u0026#34;\u003c/span\u003e path_rvs_nonzero.gif\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_rvs_nonzero.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/path_rvs_evenodd.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e这意味着你可以在物体上产生一个\u0026quot;洞\u0026rdquo;，通过反转方向，使物体的\u0026quot;内部\u0026quot;保持在行进方向的同一侧。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# An object with a reversed drawn hole!\u003c/span\u003e\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,10 20,55 70,50 80,5 Z\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                       M 50,20 60,40 40,30 Z\u0026#39; \u0026#34;\u003c/span\u003e path_with_hole.gif\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_with_hole.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e无论 \u003ccode\u003efill-rule\u003c/code\u003e 的设置如何，结果都是一样的，因为这个洞是'偶数'和'零\u0026rsquo;，所以是未填充的。\u003c/p\u003e\n\u003cp\u003e当然，如果您使用一个完全独立的 \u003ccode\u003epath\u003c/code\u003e 元素，您将生成一个完全独立的对象。在这种情况下，\u003ccode\u003efill-rule\u003c/code\u003e 不适用，而只是按照给定的顺序，将对象画在彼此的上方。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# Separate paths are separate objects\u003c/span\u003e\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 40,10 20,20 70,50 Z\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 20,40 70,40 90,10 Z\u0026#39; \u0026#34;\u003c/span\u003e path_separate.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_separate.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e未来：坐标对准路径 \u0026ldquo;H\u0026rdquo; 和 \u0026ldquo;V\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e椭圆弧是 SVG 路径的圆圈绘制功能\u0026hellip;\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003elarge\u003c/code\u003e 和 \u003ccode\u003esweep\u003c/code\u003e 参数特别重要，因为它们用于决定从起点到终点的四种弧线中的哪一种。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003elarge\u003c/code\u003e 和 \u003ccode\u003esweep\u003c/code\u003e 这两个标志定义了四条弧线中哪一条弧线将连接这两个点。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e#  Elliptical Arcs :   A  radius_x,y  angle   large,sweep  x,y\u003c/span\u003e\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,40  A 30,15 0 0,0 70,20\u0026#39;\u0026#34;\u003c/span\u003e    path_arc.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,40  A 30,15 0 0,1 70,20\u0026#39;\u0026#34;\u003c/span\u003e    path_arc2.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,40  A 30,15 0 1,0 70,20\u0026#39;\u0026#34;\u003c/span\u003e    path_arc3.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,40  A 30,15 0 1,1 70,20\u0026#39;\u0026#34;\u003c/span\u003e    path_arc4.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_arc.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/path_arc2.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/path_arc3.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/path_arc4.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e第二个标志 \u003ccode\u003esweep\u003c/code\u003e 简单地决定了弧线路径的方向的哪一边应该被绘制。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003elarge\u003c/code\u003e 标志是用来选择较长的路径，绕着椭圆的中心走。这是设置的角度的弧线将大于180度。如果关闭，你会得到较小的'弧\u0026rsquo;，不包含椭圆的中心，并且弧线的角度小于180度。\u003c/p\u003e\n\u003cp\u003e用 \u0026ldquo;Z\u0026rdquo; 来关闭弧线，只是画出最后的直线段。\u003c/p\u003e\n\u003cp\u003e要创建一个完整的椭圆或圆，你至少需要两个'弧线'段，从第一点到第二点，然后回到第一点。两条弧线都应该有相同的 \u003ccode\u003esweep\u003c/code\u003e 设置，所以弧线将在不同的边上，有不同的移动方向。其中一条弧线应该有 \u003ccode\u003elarge\u003c/code\u003e 的设置。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# Closed and angled elliptical arcs  (defined by two edge points)\u003c/span\u003e\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,40  A 30,20  20  0,0 70,20 Z \u0026#39;\u0026#34;\u003c/span\u003e path_arc5.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,40  A 30,20  20  1,1 70,20 Z \u0026#39;\u0026#34;\u003c/span\u003e path_arc6.gif\n\n  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,40  A 30,20  20  0,0 70,20 \\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                                A 30,20  20  1,0 30,40 Z \u0026#39;\u0026#34;\u003c/span\u003e path_arc7.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_arc5.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/path_arc6.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/path_arc7.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e请注意，如果直线太长，在给定的角度下无法适应给定的椭圆大小，椭圆的大小将被放大，以适应以椭圆为中心的直线，这意味着通过使用小数字作为轴半径，你可以只指定轴长的比例，并保证直线路径通过椭圆的中心点。\u003c/p\u003e\n\u003cp\u003e这意味着，通过使用小数字的轴半径，你可以只指定一个轴长的比例，并保证直线路径穿过椭圆的中心点。也就是说，路径从椭圆的一侧到另一侧形成一个椭圆直径。这并不是椭圆的主轴或次轴，只是一个椭圆的直径。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,40   A 3,2  45  0,0 70,20\u0026#39;\u0026#34;\u003c/span\u003e path_arc_x.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_arc_x.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e当然，使用长度为 \u0026ldquo;1,1\u0026rdquo; 的结果是一个完美的半圆，从一个点，到下一个点。在这种情况下，椭圆角不会有任何区别。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,40   A 1,1  0  0,0 70,20\u0026#39;\u0026#34;\u003c/span\u003e path_hcircle.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_hcircle.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e对于以两点为中心的全圆，用\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,40   A 1,1  0  0,0 70,20\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                                 A 1,1  0  1,0 30,40  Z\u0026#39;\u0026#34;\u003c/span\u003e path_circle.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_circle.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003eSVG 对 \u0026ldquo;弧线\u0026quot;的定义也声明，如果两个半径中的任何一个是0，那么就应该画一条直线。因此，任何半径为 \u0026ldquo;0,0\u0026rdquo; 的圆弧，都只是一条简单的直线圆弧\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,40   A 0,0  0  0,0 70,20\u0026#39;\u0026#34;\u003c/span\u003e path_arc_line.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_arc_line.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果你为弧线指定了一个非常大的半径，而没有为回程路径指定 \u003ccode\u003elarge sweep\u003c/code\u003e，你可以在两点之间创建该半径的透镜形状。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 30,40   A 50,50  0  0,0 70,20\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                                 A 50,50  0  0,0 30,40  Z\u0026#39;\u0026#34;\u003c/span\u003e path_lens.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_lens.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e这种类型的弧线是一个关键特征。它可以让你很容易地把原本是直线的东西变成一条小而明显的曲线。\u003c/p\u003e\n\u003cp\u003e例如，与其说是一个简单的三角形，不如说是一个\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 20,55  L 25,10  L 70,5 L 20,55 Z\u0026#39; \u0026#34;\u003c/span\u003e   triangle.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/triangle.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e你可以用一个大半径的弧线代替每条线，让它们只是有轻微的曲线。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 20,55  A 100,100 0 0,0 25,10\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                                A 100,100 0 0,0 70,5\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                                A 100,100 0 0,0 20,55 Z\u0026#39; \u0026#34;\u003c/span\u003e triangle_curved.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/triangle_curved.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e线条的端点没有变化，所发生的只是每个 \u0026ldquo;L\u0026rdquo; 被一个弧线段代替。然而弧线的大小应该与线的长度成正比。由于我没有这样做，较长的对角线比其他两条线有更深的曲线。\u003c/p\u003e\n\u003cp\u003e请记住，当调整对象的大小或比例时，你也应该将半径的比例与线的长度相同，这样曲线的大小就会相应地调整，所以弧线的比例也会正确。\u003c/p\u003e\n\u003cp\u003e请注意，\u003ccode\u003esweep\u003c/code\u003e 标志可以控制曲线是向外凸起还是向内凸起，这取决于每个路径段的绘制方向(见上文)。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 20,55  A 100,100 0 0,0 25,10\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                                A 100,100 0 0,1 70,5\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                                A 100,100 0 0,1 20,55 Z\u0026#39; \u0026#34;\u003c/span\u003e triangle_bulge.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/triangle_bulge.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e看起来 \u0026ldquo;静态\u0026quot;的直边三角形，现在看起来有点像充满风的帆。\u003c/p\u003e\n\u003cp\u003e如果你真的想让线条完美的直，而不把它们转换回真正的线段，你可以通过使用弧线半径为零来关闭曲线。\u003c/p\u003e\n\u003cp\u003e因此，弧线不仅适合生成椭圆和圆，而且对于绘制直线和微曲线段也很有用。它是一种非常通用的通用点到点的绘制路径。\u003c/p\u003e\n\u003cp\u003e使用椭圆弧来生成分离的曲线段的一个简单的替代方法是使用\u003ca href=\"https://imagemagick.org/Usage/draw/#quad\"\u003e四元贝塞尔段\u003c/a\u003e来代替，主要的区别是使用一个单一的控制点，而不是一个圆形半径来定义弧线。这也允许您将弧线偏向线段的一端，但代价是难以生成对称的弧线。\u003c/p\u003e\n\u003cp\u003e当然，您也可以通过使用这两种方法来进行 \u003ccode\u003emix-n-match\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"饼图示例\"\u003e饼图示例\u003c/h3\u003e\n\u003cp\u003e为了完成对弧线的使用，让我们举个例子，使用为它们生成圆楔。当然，你可能需要使用一些外部的三角数学（你的高中数学有多好？）来确定所需的最终路径点。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 140x130 xc:white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e    -fill red   -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 60,70 L   60,20   A 50,50 0 0,1 68.7,20.8 Z\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e    -fill green -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 60,70 L 68.7,20.8 A 50,50 0 0,1 77.1,23.0 Z\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e    -fill blue  -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 68,65 L 85.1,18.0 A 50,50 0 0,1  118,65   Z\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e    -fill gold  -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 60,70 L  110,70   A 50,50 0 1,1   60,20   Z\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e    -fill black -stroke none  -pointsize \u003cspan class=\"m\"\u003e10\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e    -draw \u003cspan class=\"s2\"\u003e\u0026#34;text 57,19 \u0026#39;10\u0026#39; text 70,20 \u0026#39;10\u0026#39; text 90,19 \u0026#39;70\u0026#39; text 113,78 \u0026#39;270\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e    piechart.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/piechart.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e请注意，所有的弧线都是画在 \u003ccode\u003eline path\u003c/code\u003e 的左边，并有相应的标志（使用 \u003ccode\u003esweep\u003c/code\u003e 标志）。但如果弧线覆盖的角度大于180度，则需要设置 \u003ccode\u003elarge\u003c/code\u003e 标志。见上面例子中最后一个 \u003ccode\u003egold\u003c/code\u003e 组件。\u003c/p\u003e\n\u003cp\u003e还要注意的是，你应该完整地画出每个部分，尽管这意味着你可能要画两次边界线。如果你不这样做，你很可能要么不会完全用颜色填充该部分，要么填充颜色会覆盖之前绘制的部分轮廓。\u003c/p\u003e\n\u003cp\u003e避免重复绘制多条线的唯一方法是绘制所有填充区域，然后重复这样绘制轮廓。就是说你需要把所有的东西都画两遍，确保东西正确匹配。因此，将轮廓加倍可能是最简单的解决方案。\u003c/p\u003e\n\u003cp\u003e立方贝塞尔曲线可以使用 \u003ccode\u003ec\u003c/code\u003e 函数定义两个控制点，以及最终的终点。对于使用最后一个控制点的镜像的持续立方贝塞尔曲线（对于连续曲线），你可以使用 \u003ccode\u003es\u003c/code\u003e 函数。\u003c/p\u003e\n\u003cp\u003e下面是一个例子。由于这个函数的复杂性，我预先准备了一个画布，显示控制点的位置，以及最后一个控制点的 \u003ccode\u003eassumed mirror\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# Cubic Bezier:    C  control_1_x,y control_2_x,y  x,y\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# Smooth \u0026#34; :       S  control_2_x,y  x,y\u003c/span\u003e\n\n  convert path_cubic_canvas.gif  -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 10,30  C 10,4 50,4 50,30  S 90,55 90,30\u0026#39; \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          path_cubic.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_cubic.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e连接控制点和该路径段路径上的最终点的线（控制线）基本上定义了通过路径上该点的曲线方向。长的控制线会在该点产生一条更平滑的曲线，而短的控制线则会在该点产生一条更清晰的曲线。如果控制点与曲线的点相吻合（控制线长度为零），则曲线在该点有一个尖锐的不连续性，就像只用直线段一样。\u003c/p\u003e\n\u003cp\u003e作为一个更实际的例子，下面的代码是从 \u003ca href=\"https://imagemagick.org/Usage/scripts/generate_logo\"\u003eIM 实例 Logo 生成器脚本\u003c/a\u003e中提取出来的，该脚本创建了 \u003ca href=\"https://imagemagick.org/Usage/images/logo.gif\"\u003eIM 实例 Logo\u003c/a\u003e 的曲线溅射区域。\u003c/p\u003e\n\u003cp\u003e这个例子的棘手之处在于，我将我使用的立方贝塞尔路径字符串，转换为另一个路径，显示用于生成贝塞尔曲线的控制线。这让我可以看到曲线的控制线角度和长度，使得调整结果变得更加容易。只需要调整一组点就可以同时显示曲线和控制线，将错误控制在最小范围内。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e   \u003cspan class=\"nv\"\u003ecurve\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;M 12,27  C 7,37  18,50 18,60  S  0,80 10,94\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e          S 40,74 50,78  S 60,99 76,95  S 72,70 75,65\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e          S 95,55 95,42  S 69,37 66,32  S 67,2  53,7\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e          S 43,17 35,22  S 17,17 12,27  Z\u0026#34;\u003c/span\u003e\n   \u003cspan class=\"nv\"\u003ec_ctrls\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$curve\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e              sed \u003cspan class=\"s1\"\u003e\u0026#39;1s/\\([0-9]\\)  *\\([0-9]\\)/\\1 M \\2/;\n\u003c/span\u003e\u003cspan class=\"s1\"\u003e                   s/S/M/g; s/C/ /;\u0026#39;\u003c/span\u003e -\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n   convert -size 100x100 xc:white \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e           -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke None  fill Green  path \u0026#39;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$curve\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e           -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke Red   fill None   path \u0026#39;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$c_ctrls\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e           curvy_splash.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/curvy_splash.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果你仔细观察图像，你会发现曲线的起点和终点有两条方向相反的控制线。对于一个封闭的连续路径来说，开始和结束的控制线应该在相同的角度（只是在镜面方向），当然也应该是相同的长度。这一点很重要，因为很容易弄错。\u003c/p\u003e\n\u003cp\u003e沿着曲线的所有其他点只有一个控制点/线，它与曲线的绘制方向相反。该线段越长，曲线在该控制点处的 \u003ccode\u003esharp\u003c/code\u003e 越低，长度为零则产生一个 \u003ccode\u003epoint\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003es\u003c/code\u003e 函数在内部根据前一段的数据生成下一段的镜像控制点/线，从而产生曲线的平滑延续。\u003c/p\u003e\n\u003cp\u003e关于这个路径函数的更多例子，请看\u003ca href=\"http://www.w3.org/TR/SVG/paths.html#PathDataCubicBezierCommands\"\u003e《SVG：立方贝塞尔曲线命令》\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e手动生成贝塞尔曲线是比较直接的，不需要任何花哨的 GUI 工具。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e首先定义所有你想让曲线经过的坐标点，在列表的最后重复起始坐标。\u003c/li\u003e\n\u003cli\u003e现在将这个列表扩大，将所有的 \u003ccode\u003ex,y\u003c/code\u003e 坐标点加倍成对，并在每对坐标点前添加一个 \u003ccode\u003es\u003c/code\u003e（Smooth Cubic）函数。每对中的第一个数字是控制点，连接到第二个数字代表曲线上的点。然而第一个点对却把这一点反过来了，第一个点是曲线的起点，第二个点代表第一个也是唯一一个反转的控制点。\u003c/li\u003e\n\u003cli\u003e将第一对坐标的函数字母由 \u0026lsquo;S\u0026rsquo; 改为 \u0026lsquo;M\u0026rsquo;，然后在这对坐标之间加一个 \u0026lsquo;C\u0026rsquo;。最后将第二对坐标的 \u0026lsquo;S\u0026rsquo; 去掉，完成初始的立方体（\u0026lsquo;C\u0026rsquo;）函数。\u003c/li\u003e\n\u003cli\u003e通过添加最后的 \u0026lsquo;Z\u0026rsquo; 来完成路径，关闭曲线。\u003c/li\u003e\n\u003cli\u003e请看上面的示例序列，它应该是怎样的。\u003c/li\u003e\n\u003cli\u003e此时您可以测试绘制您的路径。由于所有的控制线长度为零，所以路径将只由直线段组成。\u003c/li\u003e\n\u003cli\u003e现在您需要做的就是慢慢地、小心地调整控制线段的位置（每个 \u0026ldquo;S\u0026rdquo; 对的第一个坐标），以得到您想要的最终曲线。不要把控制线做得太长，或者方向不对，否则你会得到一条看起来非常滑稽的曲线。\u003c/li\u003e\n\u003cli\u003e为了帮助查看你的变化和发现错误，请使用上面的转换 \u0026ldquo;sed\u0026rdquo; 命令来绘制路径控制点和曲线控制点之间的控制线。但是请注意，零长度的控制线是不可见的，但是由于lin会产生一个尖锐的点，所以位置应该很明显。\u003c/li\u003e\n\u003cli\u003e最后，确保 \u0026ldquo;C\u0026rdquo; 之后的第一条控制点/线与终点控制点/线的位置完全相反。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e交互式曲线的生成也可以通过使用一些矢量图形编辑器来实现。\u003c/p\u003e\n\u003cp\u003e例如 Luis Guerra 报告说，\u0026ldquo;Inkscape\u0026rdquo; 生成的贝塞尔曲线可以使用 \u0026ldquo;Edit -\u0026gt; XML Editor\u0026rdquo; 功能，然后选择你想要控制点的路径或形状。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e你知道有什么其他的方法可以用GUI工具来提取贝塞尔曲线（在曲线上每个点给出两个或一个控制点）。或者是一些其他的技术来生成这样的曲线？请发邮件给我! 我很乐意听到它。你将会像其他人一样，被记入该技术的名下。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e二次方贝塞尔函数是立方贝塞尔函数的简化，当两个控制点合并成一个控制点时。同样，你可以用 \u0026lsquo;Q\u0026rsquo; 函数开始曲线，然后用 \u0026lsquo;T\u0026rsquo; 函数继续曲线，镜像最后一个控制点。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e#  Quadratic Bezier:  Q  control_x,y  x,y\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e#  Smooth \u0026#34; :         T  x,y\u003c/span\u003e\n\n  convert path_quad_canvas.gif  -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 10,30   Q 20,4 50,30   T 90,30\u0026#39; \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          path_quad.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/path_quad.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e但我要提醒您，\u0026ldquo;T\u0026rdquo; 继续函数只适用于连接间距相等的点的路径。我不推荐使用它。\u003c/p\u003e\n\u003cp\u003e二次方曲线的优点是可以替代\u003ca href=\"https://imagemagick.org/Usage/draw/#arcs\"\u003e椭圆弧\u003c/a\u003e，因为它使用的是实际的位置，而不是弧线的半径。它也可以使弧线偏向于一端而不是另一端，这在使用\u003ca href=\"https://imagemagick.org/Usage/draw/#arcs\"\u003e椭圆弧\u003c/a\u003e时并不实用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 20,55  Q 30,32 25,10\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                                Q 50,1 70,5\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                                Q 50,45 20,55 Z\u0026#39; \u0026#34;\u003c/span\u003e triangle_bulge_2.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/triangle_bulge_2.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在这种情况下，弧线不是那么均匀，你得到的东西就像一个倒立的鲨鱼鳍，而不是一个帆。\u003c/p\u003e\n\u003cp\u003e请记住四边形弧线是抛物线，而椭圆弧线基本上是生成圆弧线段。这可能是决定你应该使用哪种类型的弧线段的关键。\u003c/p\u003e\n\u003cp\u003e有关此路径功能的更多例子，请参见：\u003ca href=\"http://www.w3.org/TR/SVG/paths.html#PathDataQuadraticBezierCommands\"\u003eSVG: Quadratic Bezier Curve Commands\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"绘图表面的变形\"\u003e绘图表面的变形\u003c/h3\u003e\n\u003cp\u003e在这些能力之上，绘制对象的绘图表面可以以各种方式变形，让你做一些令人惊奇的事情。\u003c/p\u003e\n\u003cp\u003e首先，你可以应用一些通用的绘图表面修改，比如\u0026hellip; \u0026ldquo;translate\u0026rdquo;、\u0026ldquo;rotate\u0026rdquo;、\u0026ldquo;scale\u0026rdquo;、\u0026ldquo;skewX\u0026rdquo;、\u0026ldquo;skewY\u0026rdquo; 和 \u0026ldquo;affine\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e例如，给定一个线条的 \u003ccode\u003epath\u003c/code\u003e，我们可以 \u003ccode\u003etranslate\u003c/code\u003e 绘图表面的原点或0,0点到另一个位置。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;translate 50,30\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 image over 3,3 0,0 \u0026#39;terminal.gif\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill white  stroke black\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill none  stroke red\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,10 0,-10  M 10,0 -10,0\u0026#39; \u0026#34;\u003c/span\u003e  transform_translate.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/transform_translate.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e请注意，\u0026ldquo;0,0\u0026rdquo; 或绘图区域的原点现在以图像为中心，尽管Y轴在图像的顶部仍然是负数，在底部仍然是正数。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003erotate\u003c/code\u003e 操作将旋转绘图表面，所以以后在该表面上绘制的任何东西都将被旋转绘制。当然，它会围绕转换后的原点进行旋转，所以最好同时使用这两个变换运算符。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;translate 50,30    rotate -30\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill white  stroke black\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill none  stroke red\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,10 0,-10  M 10,0 -10,0\u0026#39; \u0026#34;\u003c/span\u003e  transform_rotate.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/transform_rotate.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003escale\u003c/code\u003e 将放大和缩小原点周围的绘图面。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;translate 50,30    scale 1.5,1.5\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill white  stroke black\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill none  stroke red\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,10 0,-10  M 10,0 -10,0\u0026#39; \u0026#34;\u003c/span\u003e  transform_scale.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/transform_scale.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e一个常见的 \u003ccode\u003escale\u003c/code\u003e 用法是将Y轴翻转，使Y的正值向上。当然原点也应该移到中心，或者左下角，以保持秩序。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;translate 50,30    scale 1,-1\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill white  stroke black\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill none  stroke red\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,10 0,-10  M 10,0 -10,0\u0026#39; \u0026#34;\u003c/span\u003e    transform_flip.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/transform_flip.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e最后，\u0026ldquo;skewX\u0026rdquo; 和 \u0026ldquo;skewY\u0026rdquo; 在X和Y方向上对图像进行剪切。例如，这里我们使用 \u0026ldquo;skewX\u0026rdquo; 给图像的垂直Y轴一个倾斜。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;translate 50,30   skewX 20\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill white  stroke black\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill none  stroke red\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,10 0,-10  M 10,0 -10,0\u0026#39; \u0026#34;\u003c/span\u003e    transform_skewY.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/transform_skewY.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e这些操作符在 MVG \u003ccode\u003e-draw\u003c/code\u003e 字符串之外有对应的操作符，供一般使用。但是这些命令行版本是运算符，并且立即应用于内存中已经存在的图像，而不是应用于尚未绘制的矢量对象的绘制表面。更多细节请看扭曲图像。\u003c/p\u003e\n\u003ch3 id=\"绘制表面的平移变形\"\u003e绘制表面的平移变形\u003c/h3\u003e\n\u003cp\u003e上述所有五种画布变换都可以组合成一个通用的 Affine Matrix Operator，可以使用 MVG 原语 \u0026ldquo;affine\u0026rdquo;，也可以在调用 \u003ccode\u003e-draw\u003c/code\u003e 之前使用 \u003ccode\u003e-affine\u003c/code\u003e 设置 Affine 变换。\u003c/p\u003e\n\u003cp\u003eAffine 变换使用一组 \u0026ldquo;Matrix Coefficients\u0026rdquo;，它定义了如何将你给出的坐标修改为实际的绘图坐标。\u003c/p\u003e\n\u003cp\u003e关于这些 \u0026ldquo;coefficients\u0026rdquo; 如何工作的更多细节，请参阅 \u003ca href=\"https://imagemagick.org/Usage/distorts/affine/\"\u003eAffine Matrix Transforms\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e例如\u0026hellip; 要设置一个相对于对象绘制时的中心原点\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;affine 1,0,0,1,50,30\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill white  stroke black\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill none  stroke red\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,10 0,-10  M 10,0 -10,0\u0026#39; \u0026#34;\u003c/span\u003e  affine_null.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/affine_null.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e翻转图像\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;affine 1,0,0,-1,50,30\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill white  stroke black\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill none  stroke red\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,10 0,-10  M 10,0 -10,0\u0026#39; \u0026#34;\u003c/span\u003e affine_flip.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/affine_flip.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e绕原点旋转30度\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;affine .866,-.5,.5,.866,50,30\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill white  stroke black\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill none  stroke red\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 0,10 0,-10  M 10,0 -10,0\u0026#39; \u0026#34;\u003c/span\u003e    affine_rot.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/affine_rot.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e对于更复杂的仿射变换，您可以使用为此目的创建的\u003ca href=\"https://imagemagick.org/Usage/distorts/affine/#affine_scripts\"\u003e仿射辅助脚本\u003c/a\u003e。这些脚本将诸如旋转角度和中心点之类的东西转换为 Affine 坐标，你可以直接在 \u003ccode\u003e-draw affine\u003c/code\u003e 或 \u003ccode\u003e-affine\u003c/code\u003e 设置中使用。\u003c/p\u003e\n\u003ch3 id=\"推弹上下文\"\u003e推/弹上下文\u003c/h3\u003e\n\u003cp\u003e一些 MVG 原语实际上依赖于这些变换的使用才能正确使用。例如，\u003ca href=\"https://imagemagick.org/Usage/draw/#primitive_circle\"\u003e椭圆原语\u003c/a\u003e只能用正交对齐的轴直接指定。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;ellipse 50,30 30,15 0,360\u0026#34;\u003c/span\u003e   ellipse_orthogonal.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/ellipse_orthogonal.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e然而，通过使用\u003ca href=\"https://imagemagick.org/Usage/draw/#transform\"\u003e绘图变换\u003c/a\u003e，我们可以很容易地给椭圆添加一个\u0026quot;旋转角\u0026rdquo;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue -fill white -stroke black \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;push graphic-context\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 translate 50,30   rotate 30\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 fill white  stroke black\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 ellipse 0,0 30,15 0,360\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 pop graphic-context\u0026#34;\u003c/span\u003e       ellipse_rotated.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/ellipse_rotated.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e请注意，椭圆的 \u003ccode\u003ecenter\u003c/code\u003e(旋转点)在应用旋转之前首先被转换。然后，\u003ccode\u003eellipse\u003c/code\u003e 在 \u0026ldquo;0,0\u0026rdquo; 处的转换位置被绘制。\u003c/p\u003e\n\u003cp\u003e上面还显示了两个新的 MVG 绘图原语。\u0026lsquo;push graphic-context\u0026rsquo; 和 \u0026lsquo;pop graphic-context\u0026rsquo;。在上面的例子中，并不是严格意义上的需要，但在进行主要的绘图转换时，建议使用这两个原语。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epush\u003c/code\u003e 和 \u003ccode\u003epop\u003c/code\u003e 原语的作用是保存当前的绘图状态或 \u0026ldquo;graphic-context\u0026rdquo;，然后再次恢复。在这两个原语之间更改的任何绘图设置都会被遗忘。这包括曲面变形（如 \u0026ldquo;平移 \u0026ldquo;和 \u0026ldquo;旋转\u0026rdquo;）、颜色设置 \u003ccode\u003efill\u003c/code\u003e 和 \u003ccode\u003estroke\u003c/code\u003e 或任何其他修改了绘图 \u003ccode\u003estate\u003c/code\u003e 的设置。\u003c/p\u003e\n\u003cp\u003e这些原语使您可以轻松地绘制具有许多变换的非常复杂的对象，然后将事物恢复到更 \u0026ldquo;正常\u0026quot;的状态，以便以后进行绘制操作。您可以在下面的\u003ca href=\"https://imagemagick.org/Usage/draw/#arrows\"\u003e绘制箭头\u003c/a\u003e中看到更实用的演示。\u003c/p\u003e\n\u003ch3 id=\"推弹特殊对象\"\u003e推/弹特殊对象\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/img_www/const_barrier.gif\" alt=\"img\"\u003e  建设中 \u003cimg src=\"https://imagemagick.org/Usage/img_www/const_hole.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e更多专门用于 MVG 处理 SVG 格式的设置。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    font-family   font-stretch   font-style   font-weight\n    encoding 'UTF-8'\n\n    push defs\n\n      push gradient 'def_name' linear X1,Y1 X2,Y2\n        stop-color 'color' where\n        stop-color 'color' where\n          # where is a point between the two pixels given (0 = X1,Y1  1= X2,Y2)\n        gradient-units 'objectBoundingBox|userSpaceOnUse'\n        affine ....\n      pop gradient\n\n      push gradient 'def_name' radial CX,CY FX,FY R\n        # Here CX,CY is the center of the radial gradient of radius R\n        # the FX,FY is the focal, and is usually the same a CX,CY\n        # unless you are trying to warp the gradient in a specific direction\n        stop-color 'color' where\n        ...\n      pop gradient\n\n    pop defs\n\n    push graphic-context\n      fill 'url(#def_name)'\n      ... draw things here ...\n    pop graphic-context\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e例子见 Florent Monnier 的开发网站\u0026hellip;  \u003ca href=\"http://www.linux-nantes.fr.eu.org/~fmonnier/OCaml/MVG/\"\u003ehttp://www.linux-nantes.fr.eu.org/~fmonnier/OCaml/MVG/\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"阅读-mvg-文件\"\u003e阅读 MVG 文件\u003c/h3\u003e\n\u003cp\u003e正如你在上面的例子中所看到的，MVG 的 \u003ccode\u003e-draw\u003c/code\u003e 参数可以变得很长。事实上，SVG 到 MVG 的转换可以产生一些非常长的 MVG 绘图参数（见下文）。\u003c/p\u003e\n\u003cp\u003e然而，IM 的一般命令行界面允许您通过使用 \u003ccode\u003e\u0026quot;@filename\u0026quot;\u003c/code\u003e 参数从文件中读取任何字符串参数。这很方便，因为这意味着你可以从一个单独的文件中读取非常长和复杂的MVG绘图命令。\u003c/p\u003e\n\u003cp\u003e例如，如果我将 MVG 操作放入一个名为 \u0026ldquo;draw_circles.mvg\u0026rdquo; 的文件中，那么我就可以像这样绘制\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:skyblue  -draw @mvg_circles.mvg  mvg_draw.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/mvg_circles.mvg.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/mvg_draw.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e不仅如此，ImageMagick 还懂得直接读取 \u0026ldquo;MVG:\u0026rdquo; 图像文件格式，让你可以更直接地绘制此类命令。然而，除非 MVG文 件定义了一个画布，否则你可能需要指定初始画布（ \u003ccode\u003e-size\u003c/code\u003e 和\u0026rdquo;-background\u0026rdquo;）来绘制。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60  -background limegreen  mvg_circles.mvg  mvg_file.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/mvg_circles.mvg.gif\" alt=\"img\"\u003e \u003cimg src=\"https://imagemagick.org/Usage/img_www/right.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/mvg_file.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e你可以通过在 MVG 文件中添加一个 \u0026ldquo;viewbox\u0026rdquo;，并添加适当的背景色填充绘制，将初始画布设置移动到 MVG 图像中。这样就完成了 MVG 图像文件作为一个完整的图像定义。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert    mvg_circles2.mvg    mvg_image.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/mvg_circles2.mvg.gif\" alt=\"img\"\u003e \u003cimg src=\"https://imagemagick.org/Usage/img_www/right.gif\" alt=\"img\"\u003e \u003cimg src=\"https://imagemagick.org/Usage/draw/mvg_image.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e目前只有一种方法可以从 MVG 参数字符串中读取外部 MVG 文件，那就是使用 \u0026ldquo;图像 \u0026ldquo;绘图原语。遗憾的是，这将 MVG 的 include 转换为光栅图像，然后再将该图像覆盖到绘图表面。\n换句话说，目前还没有MVG的 \u0026ldquo;include\u0026quot;功能。 :-(\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/img_www/const_barrier.gif\" alt=\"img\"\u003e  建设中 \u003cimg src=\"https://imagemagick.org/Usage/img_www/const_hole.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e您可以生成IM的低级绘制操作，使用 `\u003ca href=\"https://imagemagick.org/Usage/option_link.cgi?render\"\u003e+render\u003c/a\u003e 来记录它们。\u003c/p\u003e\n\u003cp\u003e当你再给 \u003ccode\u003e-render\u003c/code\u003e 设置/操作时，IM将立即绘制这些保存的操作。\u003c/p\u003e\n\u003cp\u003e奇怪的是，仅仅输出到 \u0026ldquo;MVG\u0026rdquo; 文件似乎也能做到这一点\u0026hellip;\u0026hellip;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e     convert  ...   -draw \u003cspan class=\"s1\"\u003e\u0026#39;....\u0026#39;\u003c/span\u003e  draw_commands.mvg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意：如果你在输出 MVG 格式文件时画了一条曲线，文件中会列出以下内容。曲线是一系列的短线段，而不是原始曲线。\u003c/p\u003e\n\u003cp\u003e当然您也可以完全使用更通用的 SVG 格式。参见下面的 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/draw/#svg\"\u003eSVG 格式处理\u003c/a\u003e\u0026quot;。\u003c/p\u003e\n\u003ch3 id=\"mvg-阿尔法构成\"\u003eMVG 阿尔法构成\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/img_www/const_barrier.gif\" alt=\"img\"\u003e  建设中 \u003cimg src=\"https://imagemagick.org/Usage/img_www/const_hole.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e我没有看到任何使用 Alpha 构图的情况（除了 \u003ccode\u003epainters\u003c/code\u003e 的算法之外）。基本上是一种 \u0026ldquo;over\u0026rdquo; alpha 合成）来绘制对象。\u003c/p\u003e\n\u003cp\u003e然而，这并不是说不能这样做。\u003c/p\u003e\n\u003cp\u003e如果你喜欢将你的矩形、椭圆、圆形或其他物体用不同的阿尔法成分（如 \u0026ldquo;DstOver\u0026rdquo;，这是一个类似于 Under 的成分），然后在空白的透明画布上画出你的人物，同样的构图，并将其合成到您的图像上。\u003c/p\u003e\n\u003cp\u003e然而，由于 SVG 允许您使用 alpha 合成来绘制文本和其他的图像，因此，您可以使用 SVG 来绘制图像项目到图像上，我想这将是一个未来的补充。\u003c/p\u003e\n\u003cp\u003e敬请期待\u003c/p\u003e\n\u003ch3 id=\"绘制符号\"\u003e绘制符号\u003c/h3\u003e\n\u003cp\u003e有时你在图像上有一组点，你想在那里绘制参考符号，如十字、圆圈等。遗憾的是，目前IM还没有可以轻松绘制这类符号的命令，但只要稍加努力，你就可以绘制这类符号。\u003c/p\u003e\n\u003ch4 id=\"符号绘制技巧\"\u003e符号绘制技巧\u003c/h4\u003e\n\u003cp\u003e在给定的位置列表中绘制多个符号的诀窍是使用 shell 脚本或任何你正在使用的 API 生成 MVG 绘图命令，以便将给定的点集转化为适当的绘图命令集。\n例如，我在这里将一条线上的点转换为每一个点的\u0026quot;加号\u0026rdquo;\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# Define a string of X and Y coordinates\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# comma between values, space between coordinates.\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003epoints\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;6.6,7.7  25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3  92.5,66.6\u0026#34;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# convert each point into a draw command for a cross (using \u0026#39;awk\u0026#39;)\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# the \u0026#39;tr\u0026#39; converts spaces into \u0026#39;newlines\u0026#39; (one point per line).\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003ecrosses\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$points\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e tr -s \u003cspan class=\"s1\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\\012\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e     awk -F, \u003cspan class=\"s1\"\u003e\u0026#39;{ print \u0026#34;line \u0026#34; $1-3 \u0026#34;,\u0026#34; $2 \u0026#34; \u0026#34; $1+3 \u0026#34;,\u0026#34; $2 ;\n\u003c/span\u003e\u003cspan class=\"s1\"\u003e                print \u0026#34;line \u0026#34; $1 \u0026#34;,\u0026#34; $2-3 \u0026#34; \u0026#34; $1 \u0026#34;,\u0026#34; $2+3 ; }\u0026#39;\u003c/span\u003e -\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# draw a red line between the points, and blue crosses on the points.\u003c/span\u003e\n  convert -size 100x100 xc:white \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003efill none stroke red   polyline \u003c/span\u003e\u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003efill none stroke blue  \u003c/span\u003e\u003cspan class=\"nv\"\u003e$crosses\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          points_plus.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/points_plus.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e上面使用 \u0026ldquo;tr\u0026rdquo; 将每个点（两个数字）分成每条线上的一个点，然后使用 \u0026ldquo;awk\u0026rdquo; 进行所有数学计算，在给定的点上绘制\u0026quot;加号\u0026rdquo;。你可以使用任何你喜欢的东西，因为我只是在输入点列表上应用了一种文本宏扩展的形式。几乎所有的编程语言都可以做到这一点。对于上面的shell脚本案例，我只是发现 \u0026ldquo;awk\u0026rdquo; 是最简单、最快的手段。\u003c/p\u003e\n\u003cp\u003e其实你甚至可以使用 Imagemagick 本身的 \u0026ldquo;convert\u0026rdquo; 格式选项来进行这种 \u0026ldquo;macro\u0026rdquo; 的扩展\u0026hellip;比如这里我用它来计算圆周上的一个点，对于这个\u0026quot;点符号\u0026rdquo;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# Define a string of X and Y coordinates\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# comma between values, space between coordinates.\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003epoints\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;6.6,7.7  25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3  92.5,66.6\u0026#34;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# circle radius (or symbol size) to draw around each point.\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003eradius\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.5\n\n  \u003cspan class=\"c1\"\u003e# convert each point into a draw command for a cross\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# In this case, points are space separated by the shell\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003ecircles\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e point in \u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n             \u003cspan class=\"nv\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$point\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e cut -d, -f1\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n             \u003cspan class=\"nv\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$point\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e cut -d, -f2\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n             \u003cspan class=\"c1\"\u003e# use IM to do some floating point math, EG:  y2=$y+$radius\u003c/span\u003e\n             \u003cspan class=\"nv\"\u003ey2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003econvert xc: -format \u003cspan class=\"s1\"\u003e\u0026#39;%[fx:\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;+\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$radius\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;]\u0026#39;\u003c/span\u003e info:\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n             \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ecircle \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y2\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n           \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# Draw a red line between the points, and blue circles on the points.\u003c/span\u003e\n  convert -size 100x100 xc:white \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003efill none stroke red   polyline \u003c/span\u003e\u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003efill none stroke blue  \u003c/span\u003e\u003cspan class=\"nv\"\u003e$circles\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          points_circle.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/points_circle.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e现在，您生成的绘制字符串可能会变得相当长，并且可能会开始导致您的最终命令的长度问题。所以，与其将点转换成长字符串，然后我们在命令行上传递给 IM，不如将绘制命令以文件的形式管道化给 IM。\u003c/p\u003e\n\u003cp\u003e我这次也使用了 \u003ca href=\"https://imagemagick.org/Usage/draw/#paths\"\u003eSVG 路径\u003c/a\u003e的绘制方法来代替 \u003ca href=\"https://imagemagick.org/Usage/draw/#primitives\"\u003eDraw Primitive\u003c/a\u003e 的绘制方法。另外我生成的符号是每个点周围的三角形。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# Define a string of X and Y coordinates\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# comma between values, space between coordinates.\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003epoints\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;6.6,7.7  25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3  92.5,66.6\u0026#34;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# convert each point into a draw commands to draw a triangle\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e point in \u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n     \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003epath \u0026#39;M \u003c/span\u003e\u003cspan class=\"nv\"\u003e$point\u003c/span\u003e\u003cspan class=\"s2\"\u003e  m 0,-5 -4,+8 +8,0 -4,-8\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edone\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e    convert -size 100x100 xc:white \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill none -stroke red  -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003epath \u0026#39;M \u003c/span\u003e\u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39; \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill none -stroke blue -draw \u003cspan class=\"s1\"\u003e\u0026#39;@-\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          points_tri.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/points_tri.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://imagemagick.org/Usage/draw/#paths\"\u003eSVG 路径\u003c/a\u003e实际上使这一点变得更容易，通过允许相对像素移动，允许你设计符号，所以它只需要一个单一的初始绝对移动\u0026rsquo;M\u0026rsquo;，然后再给出'移动'和'线'的序列来绘制符号。正因为如此，你实际上根本不需要任何浮点计算，因为IM draw会完成所需的定位数学。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e相对移动SVG路径项\u0026rsquo;m'在IM v6.4.3-5之前被破坏了。如果你的IM比这更老，上面（和下一个）的例子可能什么也画不出来。您可以通过将上面的相对移动\u0026rsquo;m'替换为适当的相对线序列\u0026rsquo;l'来解决旧版本的问题。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e现在你可以更进一步，将一个完整的MVG文件，包括画布规格，直接作为一个绘画命令的流水线输入到IM中。这次让我们做一个'十字\u0026rsquo;，这和上面第一个'加'的例子类似，需要大量的计算。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"c1\"\u003e# Define a string of X and Y coordinates\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# comma between values, space between coordinates.\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003epoints\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;6.6,7.7  25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3  92.5,66.6\u0026#34;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# Generate a MVG file for IM to draw all components\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;viewbox 0 0 100 100   fill white  rectangle 0,0 100 100\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003efill none stroke red   path \u0026#39;M \u003c/span\u003e\u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;fill none stroke blue  path \u0026#39;\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e point in \u003cspan class=\"nv\"\u003e$points\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e  M \u003c/span\u003e\u003cspan class=\"nv\"\u003e$point\u003c/span\u003e\u003cspan class=\"s2\"\u003e  m -2,-2 +4,+4  m -4,0 +4,-4\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e convert mvg:- points_cross.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/points_cross.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e这使用了特殊的shell编程技术，在shell括号中 \u0026ldquo;echo\u0026rdquo; 的任何东西都将作为MVG文件被输入到最终的\u0026quot;转换\u0026quot;命令中。第一个 \u0026ldquo;echo\u0026rdquo; 定义并填充图像的绘图画布，而 \u0026ldquo;while\u0026rdquo; 循环则将每个 \u0026ldquo;点\u0026rdquo; 转换为一个给定半径的圆。\u003c/p\u003e\n\u003cp\u003e这种方法的优点是，你不会受到任何字符串的限制，而使用其他两种方法可能会受到限制。\u003c/p\u003e\n\u003cp\u003e其他你可以生成的符号包括方框、钻石、错误条等。\u003c/p\u003e\n\u003cp\u003e也请参见下面的\u0026quot;绘制圆圈\u0026rdquo;，了解其他圆圈方法，包括不计算相对 \u0026ldquo;路径\u0026quot;的圆圈绘制。\u003c/p\u003e\n\u003ch4 id=\"绘制符号的替代方法\"\u003e绘制符号的替代方法\u003c/h4\u003e\n\u003cp\u003e除了直接绘制符号外，还有其他的方法可以将符号添加到图像中。\u003c/p\u003e\n\u003ch5 id=\"符号字体\"\u003e符号字体\u003c/h5\u003e\n\u003cp\u003e您可以从 \u003ca href=\"https://imagemagick.org/Usage/text/#symbol\"\u003eSymbol Font\u003c/a\u003e 中提取符号，并将其保存为一个小位图。你也可以使用小的预定义但色彩丰富的图像来做这件事。\u003c/p\u003e\n\u003cp\u003e然而这样做可能会出现问题，无法准确定位字体相对于特定像素的位置。也就是说这不是一个非常精确的技术。但是你可以在任何像素位置组成任何图像。例如这些符号是从一些字体中提取出来的，用于这些示例页面的具体使用。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;=   =\u0026gt;   x   +   +   +   o   o   o   o\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在\u003ca href=\"https://imagemagick.org/Usage/layers/#composite\"\u003e分层图像\u003c/a\u003e一节中给出了将图像合成到大背景上的例子。然而，循环的方法可能更有用，例如在\u003ca href=\"https://imagemagick.org/Usage/layers/#layer_prog\"\u003e分层图像\u003c/a\u003e的程序化定位中给出了。\u003c/p\u003e\n\u003cp\u003e未来：使用坐标对图像进行分层的例子\u003c/p\u003e\n\u003ch4 id=\"形态学\"\u003e形态学\u003c/h4\u003e\n\u003cp\u003e另一种选择是使用\u003ca href=\"https://imagemagick.org/Usage/morphology/#intro\"\u003e形态学\u003c/a\u003e，使用特殊的\u0026quot;形状\u0026quot;内核，如 \u0026ldquo;磁盘\u0026rdquo;、\u0026ldquo;环形 \u0026ldquo;和 \u0026ldquo;加\u0026rdquo;，甚至是你自己的用户定义内核，来 \u0026ldquo;稀释\u0026quot;单个像素。\u003c/p\u003e\n\u003cp\u003e例如\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 80x80 xc:black -fill white \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;point 20,15 point 55,30 point 40,60\u0026#39;\u003c/span\u003e  points_pixels.gif\n\n  convert points_pixels.gif -morphology Dilate Ring    points_rings.gif\n\n  convert points_pixels.gif -morphology Dilate Plus:4  points_pluses.gif\n\n  convert points_pixels.gif -morphology Dilate Cross:3 points_crosses.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/points_pixels.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/img_www/right.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/points_rings.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/points_pluses.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/points_crosses.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e然后可以通过使用 \u003ca href=\"https://imagemagick.org/Usage/masking/#alpha_shape\"\u003eAlpha Shape Operator\u003c/a\u003e 将结果直接转换为彩色叠加。\u003c/p\u003e\n\u003cp\u003e这样做的最大好处是，你其实不需要知道每个符号的单独位置。或者有多少个符号。但这也可能是一个缺点。一个主要的缺点是，位置只在整数位置。你不能使用浮点 \u0026ldquo;子像素\u0026quot;定位来\u0026quot;绘制\u0026rdquo;。\u003c/p\u003e\n\u003ch4 id=\"卷积\"\u003e卷积\u003c/h4\u003e\n\u003cp\u003e一个几乎相同的技术是使用 \u003ca href=\"https://imagemagick.org/Usage/convolve/#convolve\"\u003eConvolve\u003c/a\u003e，使用专门设计的内核，它允许你设置不同的灰度，而不仅仅是一个简单的开/关结果，如上所述。\u003c/p\u003e\n\u003cp\u003e通过使用不同的\u003ca href=\"https://imagemagick.org/Usage/morphology/#user\"\u003e用户定义内核\u003c/a\u003e，为图像的每一个通道（红、绿、蓝和阿尔法），甚至可以从每个像素坐标创建多色符号。\u003c/p\u003e\n\u003cp\u003e为此，我使用了一个我写的特殊脚本 \u003ca href=\"https://imagemagick.org/Usage/scripts/image2kernel\"\u003eimage2kernel\u003c/a\u003e 来将彩色图像（见右图）转换为每个通道的独立浮点卷积核。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  image2kernel -q marker.png marker.dat\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/marker.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e这将生成四个文件，比如 \u003ca href=\"https://imagemagick.org/Usage/draw/marker_R.dat\"\u003emarker_R.dat\u003c/a\u003e，每个通道都有一个非常小的输入图像，这是\u003ca href=\"https://imagemagick.org/Usage/morphology/#user\"\u003e用户定义\u003c/a\u003e的图像表示（原点在图像中心）。\u003c/p\u003e\n\u003cp\u003e现在使用这些内核数据文件，我们可以将这些单点在透明的背景上 \u003ca href=\"https://imagemagick.org/Usage/convolve/#convolve\"\u003eConvolve\u003c/a\u003e 成我们彩色的标记图像。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert points_pixels.gif -alpha off \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          \u003cspan class=\"se\"\u003e\\(\u003c/span\u003e -clone \u003cspan class=\"m\"\u003e0\u003c/span\u003e -morphology Convolve @marker_R.dat \u003cspan class=\"se\"\u003e\\)\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          \u003cspan class=\"se\"\u003e\\(\u003c/span\u003e -clone \u003cspan class=\"m\"\u003e0\u003c/span\u003e -morphology Convolve @marker_G.dat \u003cspan class=\"se\"\u003e\\)\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          \u003cspan class=\"se\"\u003e\\(\u003c/span\u003e -clone \u003cspan class=\"m\"\u003e0\u003c/span\u003e -morphology Convolve @marker_B.dat \u003cspan class=\"se\"\u003e\\)\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          \u003cspan class=\"se\"\u003e\\(\u003c/span\u003e -clone \u003cspan class=\"m\"\u003e0\u003c/span\u003e -morphology Convolve @marker_A.dat \u003cspan class=\"se\"\u003e\\)\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -delete \u003cspan class=\"m\"\u003e0\u003c/span\u003e -channel RGBA -combine point_markers.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/points_pixels.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/img_www/right.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/point_markers.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在IM v6.7.6-9之前，Combine Operator 要求图像的透明度通道以 \u0026ldquo;哑光\u0026quot;值而不是alpha值的形式给出，因此，由此产生的alpha通道需要被否定。EG:\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  ... \u003cspan class=\"s2\"\u003e\u0026#34;`cat marker_A.dat`\u0026#34;\u003c/span\u003e -negate \u003cspan class=\"se\"\u003e\\)\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e只能使用小图像，像素点要足够分散，符号不要重叠。这是因为 \u003ca href=\"https://imagemagick.org/Usage/convolve/#convolve\"\u003eConvolve\u003c/a\u003e 会将重叠的区域加在一起，使其比预期的更亮。\u003c/p\u003e\n\u003cp\u003e以上内容已被转换成UNIX shell脚本 \u003ca href=\"https://imagemagick.org/Usage/scripts/convolve_image\"\u003econvolve_image\u003c/a\u003e，以方便使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convolve_image  points_pixels.gif marker.png   point_markers.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个技术源于IM论坛上的一个讨论-\u003ca href=\"https://imagemagick.org/Usage/forum_link.cgi?t=17259\u0026amp;p=64696\"\u003eIM 的有趣体验\u003c/a\u003e。用户希望在足球场的背景图上放置小人，让他们的位置在图片中拼出一个人的名字。\u003c/p\u003e\n\u003ch4 id=\"分层\"\u003e分层\u003c/h4\u003e\n\u003cp\u003e一种不同的技术，如\u003ca href=\"https://imagemagick.org/Usage/layers/\"\u003e图像层\u003c/a\u003e，使用你从源图像中提取的像素列表进行定位，可能是更好的方法。你可以先叠加更远的符号图像，然后再叠加前景图像，你可以通过编程选择或随机选择什么符号替换什么点。\u003c/p\u003e\n\u003cp\u003e关于这个例子，请看\u003ca href=\"https://imagemagick.org/Usage/layers/#layer_pins\"\u003e地图中的图钉\u003c/a\u003e。\u003c/p\u003e\n\u003ch4 id=\"绘制圆圈\"\u003e绘制圆圈\u003c/h4\u003e\n\u003cp\u003e绘制选项为您提供了许多方法来完成一些非常基本的工作。绘制圆。\u003c/p\u003e\n\u003cp\u003e例如，您可以在圆周上的任何一点上画一个圆，因此您需要计算一个中心点和一个半径为25像素的第二点。因此，您需要计算一个中心点和第二个点，这个点的半径（例如25像素）离第一个点的距离。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:  -stroke Firebrick  -fill tomato  -strokewidth \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;circle 50,30 50,55\u0026#39;\u003c/span\u003e    circle_circle.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/circle_circle.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://www.fmwconcepts.com/fmw/fmw.html\"\u003eFred Weinhaus\u003c/a\u003e 指出，通过使用平移，你可以消除计算圆边坐标的需要，而直接给出半径即可。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:  -stroke SeaGreen  -fill PaleGreen  -strokewidth \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;translate 50,30 circle 0,0 25,0\u0026#39;\u003c/span\u003e    circle_circle_trans.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/circle_circle_trans.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e但是当绘制多个圆时，上述操作需要对每个圆进行单独的 \u003ccode\u003e-draw\u003c/code\u003e 操作，或者使用 \u003ca href=\"https://imagemagick.org/Usage/draw/#push_context\"\u003eContext Pushing\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e使用椭圆可以直接指定半径为轴长\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:  -stroke Sienna  -fill Wheat  -strokewidth \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;ellipse 50,30 25,25 0,360\u0026#39;\u003c/span\u003e    circle_ellipse.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/circle_ellipse.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e你也可以用 \u003ccode\u003estroke-lineecap round\u003c/code\u003e 画一条非常非常短的线来生成一个圆。描边的宽度可以设置圆的直径。注意线条必须有一定的长度（无论多小），否则画不出任何东西。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:  -stroke Blue  -strokewidth \u003cspan class=\"m\"\u003e50\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;stroke-linecap round line 50,30 50,30.0001\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          circle_line.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/circle_line.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e这种技术，不幸的是不能勾勒出生成的圆，但对于覆盖大面积的区域，大笔触宽度是有用的。请看下面一些简单的例子。\u003c/p\u003e\n\u003cp\u003e这种方法利用了 \u003ca href=\"https://imagemagick.org/Usage/draw/#paths\"\u003eSVG 路径\u003c/a\u003e的绘制方法，所以可以在不需要计算任何额外坐标的情况下绘制圆形。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:  -stroke Blue  -fill DodgerBlue  -strokewidth \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 50,30  m 0,25  a 1,1 0 0,0 0,-50  a 1,1 0 1,0 0,50\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          circle_path.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/circle_path.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e只有最初的绝对移动 \u0026lsquo;M\u0026rsquo; 是用来定义中心的，接下来的路径组件中的 \u0026lsquo;25\u0026rsquo; 和 \u0026lsquo;50\u0026rsquo; 是定义相对于这个中心的圆的半径和直径。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在IM v6.4.3-5之前，相对移动SVG路径项 \u0026lsquo;m\u0026rsquo; 是被破坏的。 如果您的IM比这更早，圆可能只显示为一个像素。您可以通过将上面的 \u0026lsquo;m\u0026rsquo; 替换为 \u0026lsquo;l\u0026rsquo; 来修复旧版本的问题。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"http://www.fmwconcepts.com/fmw/fmw.html\"\u003eFred Weinhaus\u003c/a\u003e 添加了以下贝塞尔圆的方法。它非常接近真实的圆（虽然不精确），并且需要进行浮点计算。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e25\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"nv\"\u003ecx\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e50\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"nv\"\u003ecy\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e30\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003ex1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e25\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"nv\"\u003ex2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e75\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# = cx ± radius\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003ey1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e-3.25\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"nv\"\u003ey2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e63.25\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# = cy ± radius*1.275\u003c/span\u003e\n\n  convert -size 100x60 xc:  -stroke Purple  -fill Violet  -strokewidth \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ebezier \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x1\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$cy\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x1\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y1\u003c/span\u003e\u003cspan class=\"s2\"\u003e  \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x2\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y1\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x2\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$cy\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003ebezier \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x1\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$cy\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x1\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y2\u003c/span\u003e\u003cspan class=\"s2\"\u003e  \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x2\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y2\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x2\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$cy\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          circle_bezier.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/circle_bezier.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果画一个精确的圆并不重要，你可以使用这个4 Bezier段 SVG 路径，它只使用圆的X和Y边界进行计算。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e25\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"nv\"\u003ecx\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e50\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"nv\"\u003ecy\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e30\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003ex1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e25\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"nv\"\u003ex2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e75\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# X bounds = cx ± radius\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003ey1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e5\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"nv\"\u003ey2\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e55\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# Y bounds = cy ± radius\u003c/span\u003e\n\n  convert -size 100x60 xc:  -stroke Tomato  -fill Gold  -strokewidth \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e     -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003epath \u0026#39;M \u003c/span\u003e\u003cspan class=\"nv\"\u003e$cx\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y1\u003c/span\u003e\u003cspan class=\"s2\"\u003e Q \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x1\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y1\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x1\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$cy\u003c/span\u003e\u003cspan class=\"s2\"\u003e T \u003c/span\u003e\u003cspan class=\"nv\"\u003e$cx\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y2\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e$x2\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$cy\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e$cx\u003c/span\u003e\u003cspan class=\"s2\"\u003e,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$y1\u003c/span\u003e\u003cspan class=\"s2\"\u003e z\u0026#39;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e     circle_bezier_path.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/circle_bezier_path.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果你喜欢一个完全相对于中心起点绘制的，你可以使用这种技术。只使用半径值，使其生成简单，只使用 API 中的字符串函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x60 xc:  -stroke Orange  -fill LemonChiffon  -strokewidth \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e     -draw \u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 50,30  m 0,25  q 25,0 25,-25  t -25,-25  -25,25  25,25 z\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e     circle_bezier_path_rel.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/circle_bezier_path_rel.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e你能想到其他画圆的方法吗？\u003c/p\u003e\n\u003ch3 id=\"绘制箭头-定位旋转和缩放符号\"\u003e绘制箭头-定位、旋转和缩放符号\u003c/h3\u003e\n\u003cp\u003e使用上述技术，你可以创建一个特殊的符号，如箭头，你可以定位，使其点在线的最末端，并画在它上面。如果你画的箭头后的线（典型的情况），那么箭头将被绘制在该行的顶部。\u003c/p\u003e\n\u003cp\u003e然而，他们有三种类型的箭头，可以定义，每个类型的定义在不同的方式取决于它的使用。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e测量时，你只是想用箭头头标记线的两端，以指示一些工程图中的测量极限。非常简单。\u003c/li\u003e\n\u003cli\u003e矢量，显示一些数值的方向和强度。例如在天气风图中。需要一个尾巴，0,0点就是尾巴的末端。通常情况下，这样的向量会形成一个大网格。\u003c/li\u003e\n\u003cli\u003e指标，指出一些细节。对于这个0,0点可能应该是箭尖，或者是箭头本身前面的一些距离。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"测量箭头\"\u003e测量箭头\u003c/h4\u003e\n\u003cp\u003e简单地在一条线的末端添加一个箭头是比较容易做到的。基本上，您可以创建一个 \u0026lsquo;arrow head\u0026rsquo; \u003ca href=\"https://imagemagick.org/Usage/draw/#symbols\"\u003e符号\u003c/a\u003e，并将其画在正确的位置。\u003c/p\u003e\n\u003cp\u003e例如\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003earrow_head\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;l -15,-5  +5,+5  -5,+5  +15,-5 z\u0026#34;\u003c/span\u003e\n\n  convert -size 100x60 xc: -draw \u003cspan class=\"s1\"\u003e\u0026#39;line 10,30 80,30\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke blue fill skyblue\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 80,30  \u003c/span\u003e\u003cspan class=\"nv\"\u003e$arrow_head\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#39; \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          arrow_horizontal.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/arrow_horizontal.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e请注意，我画的符号，使其起点是线的最末端。这样一来，它就可以在之前画好的线上面向后画，形成一个非常漂亮的整齐的符号。\u003c/p\u003e\n\u003cp\u003e箭头却有一个相关的方向。你可以在许多不同的角度创建大量的箭头定义，许多程序都这样做。但是既然箭头是一个矢量，那么为什么不把箭头作为一个矢量进行旋转呢。IM绘图命令内置了绘图旋转（\u003ca href=\"https://imagemagick.org/Usage/draw/#transform\"\u003eCanvas Warping\u003c/a\u003e），所以让我们使用它们。\u003c/p\u003e\n\u003cp\u003e这样做还有一个好处，就是把位置从箭头头的 \u003ccode\u003epath\u003c/code\u003e 定义中移出来，让你把整个路径指定为 \u003ccode\u003econstant\u003c/code\u003e\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003earrow_head\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z\u0026#39;\u0026#34;\u003c/span\u003e\n\n  convert -size 100x60 xc: -draw \u003cspan class=\"s1\"\u003e\u0026#39;line 25,55 70,10\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke blue fill skyblue\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 translate 70,10 rotate -45\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 \u003c/span\u003e\u003cspan class=\"nv\"\u003e$arrow_head\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          arrow_rotate.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/arrow_rotate.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e如果你喜欢改变箭头的大小，可以在旋转后增加一个 \u003ccode\u003escale\u003c/code\u003e 绘制选项。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003earrow_head\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z\u0026#39;\u0026#34;\u003c/span\u003e\n\n  convert -size 100x60 xc: -draw \u003cspan class=\"s1\"\u003e\u0026#39;line 25,55 70,10\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke blue fill skyblue\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 translate 70,10 rotate -45 scale 2,2\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 \u003c/span\u003e\u003cspan class=\"nv\"\u003e$arrow_head\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          arrow_scale.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/arrow_scale.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e请注意，它是如何放大离开箭头的\u0026quot;尖端\u0026rdquo;，你指定的地方。这是处理箭头的一个非常重要的方面，因为它是唯一的终点，和角度的线，你正在添加箭头的事项。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003etransforms\u003c/code\u003e 的顺序是很重要的，而且实际上与它们实际被处理的顺序是相反的。也就是先将比例尺应用于座标，然后是旋转，再是平移。如果座标变换不是按照这个顺序进行的，我们最终也会对箭头的最终位置进行缩放，而不是我们期望的位置。\u003c/p\u003e\n\u003cp\u003e另外由于比例尺有两个数字，而原来的箭头头符号是水平设计的（角度为零），所以可以分别将箭头的宽度与高度进行比例。同时注意笔画宽度也随着箭头的大小而缩放，保持一致。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003earrow_head\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z\u0026#39;\u0026#34;\u003c/span\u003e\n\n  convert -size 100x60 xc: -draw \u003cspan class=\"s1\"\u003e\u0026#39;line 25,55 70,10\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke blue fill skyblue\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 translate 70,10 rotate -45 scale 2,1\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 \u003c/span\u003e\u003cspan class=\"nv\"\u003e$arrow_head\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          arrow_scale_aspect.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/arrow_scale_aspect.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e现在，当你在画布上翘起一个个箭头时，也许还有许多其他的绘画操作，你可能喜欢在一次 \u003ccode\u003e[\u0026quot;-draw\u0026quot;](https://imagemagick.org/Usage/option_link.cgi?draw)\u003c/code\u003e 操作中把它们全部画完。说要画线，然后在两端添加箭头，需要不同的颜色、位置、旋转，甚至可能是不同的比例。这意味着我们需要将画布翘曲的范围限制在每个单独箭头头的绘制上。如果你不限制范围，你可能会在以后开始影响到其他后面的绘制操作，永远不能很确定你生成的是什么。\u003c/p\u003e\n\u003cp\u003e为了限制翘曲的范围（以及所有其他的绘图属性），您将涉及到的部分包裹在一个 \u003ccode\u003egraphic-context\u003c/code\u003e\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003earrow_head\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z\u0026#39;\u0026#34;\u003c/span\u003e\n\n  convert -size 100x60 xc: \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke black fill none\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 path \u0026#39;M 10,40 A 50,50 0 0,1 90,40\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 push graphic-context\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   stroke blue fill skyblue\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   translate 10,40 rotate 135\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   \u003c/span\u003e\u003cspan class=\"nv\"\u003e$arrow_head\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 pop graphic-context\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 push graphic-context\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   stroke firebrick fill tomato\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   translate 90,40 rotate 45\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   \u003c/span\u003e\u003cspan class=\"nv\"\u003e$arrow_head\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 pop graphic-context\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          arrow_context.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/arrow_context.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epush\u003c/code\u003e 主要是将当前所有的绘图属性保存起来，以备将来使用，而 \u003ccode\u003epop\u003c/code\u003e 则恢复这些属性，用之前保存的设置替换任何设置（颜色、扭曲、位置等）。这意味着在 \u0026lsquo;popping\u0026rsquo; 之后，\u0026lsquo;canvas warp\u0026rsquo; 会被取消，画图会回到修改之前的状态。\u003c/p\u003e\n\u003cp\u003e上述技术只是生成箭头的一种方法，在绘制箭头作为测量距离的一部分时，如在技术图纸中，是一种很好的方法。\u003c/p\u003e\n\u003ch4 id=\"矢量箭头\"\u003e矢量箭头\u003c/h4\u003e\n\u003cp\u003e如前所述，矢量既显示方向，又显示某个数值的强度。这意味着箭头的长度是可变的，箭头头可以在任何位置远离向量的起点。\u003c/p\u003e\n\u003cp\u003e现在，你可以做一些沉重的数学计算的位置，箭头头应该是地方给定的向量的长度和角度，但他们是一个更好的方法，这让 ImageMagick 为你做这些计算。\u003c/p\u003e\n\u003cp\u003e解决的办法是在 \u003ca href=\"https://imagemagick.org/Usage/draw/#transform\"\u003eWarped Canvas Space\u003c/a\u003e 中画一条长度合适的水平线作为向量长度。当这条线画好后，只需将绘图空间再次转换到线的末端，而画布仍然是\u0026quot;扭曲的\u0026rdquo;(\u003ccode\u003ewarped\u003c/code\u003e)。现在你的位置已经正确了，只要正确的旋转就可以像正常的那样画出矢量的 \u003ccode\u003e'arrow head'\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e例如，这里我以-35度角生成一个70像素长的矢量。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  \u003cspan class=\"nv\"\u003evector_head\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z\u0026#39;\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003eindicator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;path \u0026#39;M 10,0  l +15,+5  -5,-5  +5,-5  -15,+5  m +10,0 +20,0 \u0026#39;\u0026#34;\u003c/span\u003e\n\n  convert -size 100x100 xc: \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003estroke black fill none  circle 20,50 23,50\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 push graphic-context\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   stroke blue fill skyblue\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   translate 20,50 rotate -35\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   line 0,0  70,0\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   translate 70,0\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   \u003c/span\u003e\u003cspan class=\"nv\"\u003e$vector_head\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 pop graphic-context\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 push graphic-context\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   stroke firebrick fill tomato\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   translate 20,50 rotate 40\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   \u003c/span\u003e\u003cspan class=\"nv\"\u003e$indicator\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   translate 40,0 rotate -40\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   stroke none fill firebrick\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                   text 3,6 \u0026#39;Center\u0026#39;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                 pop graphic-context\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e                \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          arrow_with_tails.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/arrow_with_tails.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch4 id=\"指示箭头\"\u003e指示箭头\u003c/h4\u003e\n\u003cp\u003e在上面我还演示了一个指示箭头，指向之前矢量箭头的起点。\u003c/p\u003e\n\u003cp\u003e然而我没有像之前那样画箭头，而是将它创建为一个反向的箭头符号，它的起始点距离原点（或起始点）10像素。这是一个符号位于我想要指示的位置，所以我实际上并不希望箭头直接在那个位置上面，而是离它稍微远一点。\u003c/p\u003e\n\u003cp\u003e现在，虽然指示符比向量处理起来更简单，通常不需要可变长度，但你通常要在指示符的远端添加文字来指定指示的内容。和之前一样，计算这个位置可能很困难，何必呢。\u003c/p\u003e\n\u003cp\u003e文字定位的解决方法也和向量一样。保留原来用于绘制指示箭头的翘曲空间，并将原点转换到该箭头的尾端（在翘曲空间中水平40像素）。现在我们已经重新定位了，我们可以围绕这个新的位置解除扭曲，这样你就可以像正常的那样绘制文本（有轻微的偏移）。\u003c/p\u003e\n\u003cp\u003e不幸的是，虽然默认的文字对齐方式是\u0026quot;左\u0026rdquo;，但目前你不能在 MVG 中指定文字对齐方式，作为重力的单独设置。如果这是一个问题，请在 IM bugs 论坛上提出请求，希望文本对齐（作为独立于重力定位）能够成为现实，尤其是它实际上是 SVG 规范的一部分。\u003c/p\u003e\n\u003ch3 id=\"绘制对象\"\u003e绘制对象\u003c/h3\u003e\n\u003ch4 id=\"宽广的色彩笔触\"\u003e宽广的色彩笔触\u003c/h4\u003e\n\u003cp\u003e你不需要用路径或轮廓完全封闭填充区域，就能创造出各种形状。使用非常大和宽的\u003ca href=\"https://imagemagick.org/Usage/draw/#stroke\"\u003e笔触\u003c/a\u003e，你可以在画布上生成大面积的颜色和色块。\u003c/p\u003e\n\u003cp\u003e例如，一个宽阔的笔触椭圆弧形可以生成一个漂亮的颜色区域，我实际上已经看到用于创建海报。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x100 xc: -fill none -stroke powderblue \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;stroke-width 70 ellipse -30,0 90,90 10,50\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -rotate \u003cspan class=\"m\"\u003e180\u003c/span\u003e  arc_background.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/arc_background.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e或者你可以生成一个小丑相当复杂的笑容。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 100x100 xc: \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;fill none stroke-linecap round\n\u003c/span\u003e\u003cspan class=\"s1\"\u003e             stroke-width 40 stroke tomato ellipse 50,0 70,70 65,115\n\u003c/span\u003e\u003cspan class=\"s1\"\u003e             stroke-width 2  stroke black  ellipse 50,0 70,70 60,120\n\u003c/span\u003e\u003cspan class=\"s1\"\u003e             stroke-width 40 stroke palegreen line 50,40 50,40.01\u0026#39;\u003c/span\u003e clown.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/clown.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e你能想出什么办法？请告诉我们。\u003c/p\u003e\n\u003ch4 id=\"圆柱体\"\u003e圆柱体\u003c/h4\u003e\n\u003cp\u003e在 \u003ca href=\"https://imagemagick.org/Usage/forum_link.cgi?t=17550\"\u003eIM 论坛的讨论\u003c/a\u003e中，有一个关于使用 ImageMagick 绘制命令绘制圆柱体（特别是阴影圆柱体）的重要讨论。\u003c/p\u003e\n\u003cp\u003e绘制圆柱体的诀窍是绘制 \u003ccode\u003eroundrectangle\u003c/code\u003e 原语，使其末端形成椭圆形。也就是说，如果圆柱体的宽度为 50 像素，则将矩形的角分别舍去 25 和 12 像素。这就是矩形宽度的一半，然后再减半。\u003c/p\u003e\n\u003cp\u003e这样，一个圆柱体就变成了两个相互叠加的圆角矩形。第二个颜色填充的 \u003ccode\u003e'end oval'\u003c/code\u003e 的大小正好是两个角的两倍。例如\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 60x100 xc:white -stroke snow4 \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill chartreuse3    -draw \u003cspan class=\"s1\"\u003e\u0026#39;roundrectangle 5,5 55,95 25,12\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill chartreuse2    -draw \u003cspan class=\"s1\"\u003e\u0026#39;roundrectangle 5,5 55,29 25,12\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          cylinder.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/cylinder.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e通过将第一种填充色替换为渐变色（使用\u003ca href=\"https://imagemagick.org/Usage/canvas/#tile_memory\"\u003e记忆中的平铺技术\u003c/a\u003e），你可以让圆柱体看起来更像3D\u0026hellip;\u0026hellip;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 60x100 xc:white -stroke snow4 \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          \u003cspan class=\"se\"\u003e\\(\u003c/span\u003e -size 1x60 gradient:chartreuse1-chartreuse4 -rotate -90 \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e             -write mpr:shading +delete \u003cspan class=\"se\"\u003e\\)\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -tile mpr:shading  -draw \u003cspan class=\"s1\"\u003e\u0026#39;roundrectangle 5,5 55,95 25,12\u0026#39;\u003c/span\u003e +tile \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -fill chartreuse2  -draw \u003cspan class=\"s1\"\u003e\u0026#39;roundrectangle 5,5 55,29 25,12\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          cylinder_shade.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/cylinder_shade.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e通过慢慢完善圆柱体的绘制（如IM论坛中讨论的那样），你可以走很长的路来生成非常复杂和具有视觉吸引力的圆柱体。这包括增加封闭半透明玻璃圆柱体、阴影效果和标签。\u003c/p\u003e\n\u003cp\u003e该讨论的最终结果是一个脚本 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/scripts/cylinder_bar\"\u003ecylinder_bar\u003c/a\u003e\u0026quot;，生成一个圆柱体百分比条\u0026hellip;\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  cylinder_bar \u003cspan class=\"m\"\u003e95\u003c/span\u003e cylinder_95.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/cylinder_95.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e该脚本可以生成任何尺寸的图像，根据该尺寸和脚本顶部定义的其他设置适当调整所有参数。还包括 \u003ccode\u003eglass thickness\u003c/code\u003e 的概念，在一个封闭的半透明玻璃圆柱体和内部的彩色圆柱体之间创造一个间隙。\u003c/p\u003e\n\u003cp\u003e请注意圆柱体非常微妙的阴影，特别是当绿色圆柱体的末端与玻璃圆柱体的末端重叠时。只要稍加预想，就能做出惊人的效果。\u003c/p\u003e\n\u003ch3 id=\"在文字串中绘制特殊字符\"\u003e在文字串中绘制特殊字符\u003c/h3\u003e\n\u003ch4 id=\"引号还是反斜杠\"\u003e引号还是反斜杠？\u003c/h4\u003e\n\u003cp\u003e人们在使用 \u003ccode\u003e-draw\u003c/code\u003e 时遇到的最大的问题之一是绘制字符，这些字符对 UNIX shell 和 DOS 命令行甚至其他语言如 C、Perl、PHP、R 或 Visual Basic 都有特殊意义。\u003c/p\u003e\n\u003cp\u003e在这方面最大的罪魁祸首是两种类型的引号字符，以及变量替换字符，如美元 \u003ccode\u003e'$'\u003c/code\u003e 和 shell 和 ImageMagick 的转义字符，反斜杠 \u003ccode\u003e'\\'\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e基本上作为 \u003ccode\u003e-draw\u003c/code\u003e 的MVG参数需要加引号，而里面的 \u003ccode\u003e'text'\u003c/code\u003e 字符串参数也可能需要一些额外的引号。\u003c/p\u003e\n\u003cp\u003e为了解决这个问题，用户通常会使用两个不同的引号字符，一个用于 shell，另一个用于 MVG 文本字符串。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e-draw \u003cspan class=\"s1\"\u003e\u0026#39;... text 0,0 \u0026#34;string\u0026#34; ...\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e需要注意的是，对于 windows 用户来说，这是唯一真正的选择，它有自己的引号问题和方法。或者他们会交换引号，用\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e-draw \u003cspan class=\"s2\"\u003e\u0026#34;... text 0,0 \u0026#39;string\u0026#39; ...\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e它允许你包含 shell 变量替换(使用 \u003ccode\u003e'$'\u003c/code\u003e 而不进行转义。)\u003c/p\u003e\n\u003cp\u003e选择正确的形式可以解决大多数问题，但有些字符仍然存在困难，每个解决方案都取决于你到底使用哪一组引号，因为它们也定义了特殊字符应该如何转义。\u003c/p\u003e\n\u003cp\u003e以下是四种情况下的引号，以及特殊字符的处理\u0026hellip;\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对 shell 参数使用单引号，对 MVG 文本字符串周围使用双引号。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e处理绘制文本字符串的最简单的技术是为包装 shell 参数使用单引号。然而，这意味着要在绘制的字符串中包含一个撇号，你需要离开 shell 的\u0026quot;单引号模式\u0026rdquo;，并在 shell 的单引号之外提供撇号。\u003c/p\u003e\n\u003cp\u003e例如，这里是如何处理我提到的四个特殊字符。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 250x50 xc:none  -box white  -pointsize \u003cspan class=\"m\"\u003e20\u003c/span\u003e -gravity center \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;text 0,0 \u0026#34;  \u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;  \\\u0026#34;  $  \\\\  \u0026#34; \u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -trim +repage  text_special_sd.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/text_special_sd.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e请注意，由于美元符号不需要转义，你也不能用它来替代 shell 变量的内容。\u003c/p\u003e\n\u003cp\u003e重要的是要记住，反斜杠是IM绘图字符串处理的唯一特殊字符。同时，它存在的原因也纯粹是为了让你可以转义任何\u0026quot;IM 绘制字符串引号\u0026rdquo;，比如我们在上面使用的双引号。除此以外，其他所有的怪异都是由 UNIX 命令行 shell 引起的，而不是 IM。\u003c/p\u003e\n\u003cp\u003ePC-DOS 有它自己的怪异之处，我希望在使用环境中的IM时，能对特殊字符进行转义。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在 shell 参数中使用双引号。\n在 MVG 文本字符串周围使用单引号。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果你确实想在绘制的字符串中插入一个 \u0026lsquo;shell variable\u0026rsquo;，那么你将不得不在 shell 参数的外面使用双引号。这使得整个事情变得更加复杂，因为你失去了 shell 的保护，你现在不仅要转义美元 \u003ccode\u003e'$'\u003c/code\u003e 符号，而且还要转义反斜杠 \u003ccode\u003e'\\'\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e另一方面，shell 将不需要使用单引号字符作为它的参数结束限制字符，所以这方面被简化了。让我们总结一下我们的特殊字符短名单的结果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 250x50 xc:none  -box white  -pointsize \u003cspan class=\"m\"\u003e20\u003c/span\u003e -gravity center \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;text 0,0 \u0026#39;  \\\\\u0026#39;  \\\u0026#34;  \\$  \\\\\\\\  \u0026#39; \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -trim +repage  text_special_ds.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/text_special_ds.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e请注意，如果你想画一个反斜线本身，MVG 文本字符串需要将反斜线加倍（如前面的例子），但是 shell 本身也需要将每个反斜线加倍，总共产生四个反斜线才能产生一个这样的字符。\u003c/p\u003e\n\u003cp\u003e这种翻倍很快就会让人不知所措，需要大量的反斜杠才能达到你想要的效果。只要采取的是慢慢的、简单的方法，你就会针对自己的情况想出办法。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用单引号进行 shell 论证。\n与 MVG 文本字符串周围的单引号。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e最后，让我们总结一下最后两种引号组合。我将让你去弄清楚它们是如何被 shell 和 MVG 解码的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 250x50 xc:none  -box white  -pointsize \u003cspan class=\"m\"\u003e20\u003c/span\u003e -gravity center \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s1\"\u003e\u0026#39;text 0,0 \u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;  \\\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;  \u0026#34;  $  \\\\  \u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -trim +repage  text_special_ss.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/text_special_ss.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在shell参数中使用双引号。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 MVG 文本字符串周围加上双引号。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 250x50 xc:none  -box white  -pointsize \u003cspan class=\"m\"\u003e20\u003c/span\u003e -gravity center \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -draw \u003cspan class=\"s2\"\u003e\u0026#34;text 0,0 \\\u0026#34;  \u0026#39;  \\\\\\\u0026#34;  \\$  \\\\\\\\  \\\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -trim +repage  text_special_dd.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/text_special_dd.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e正如你所看到的，来自命令行的 \u003ccode\u003e-draw\u003c/code\u003e 参数既要处理命令行 shell，也要处理 MVG 文本字符串中的反斜杠和引号转义。其结果可能会让人感到困惑和棘手。只要记住，shell 对这两种引号的处理方式不同，而 MVG 文本字符串则不同。\u003c/p\u003e\n\u003cp\u003e当然，在复杂的脚本中，更好的方法可能是完全避免 shell 和任何脚本问题。你可以通过读取 MVG 绘图文件中的 \u003ccode\u003e-draw\u003c/code\u003e 参数来实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e-draw @drawfile.mvg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当然，你仍然需要对你使用的任何引号字符进行反斜杠处理，以及对文本中的任何反斜杠进行处理。然而，这比起同时处理 shell 自己的引号和转义系统要简单得多。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -size 500x50 xc:lightblue  -font Candice -pointsize \u003cspan class=\"m\"\u003e36\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -gravity center     -draw @text_quotes.mvg      text_quotes.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/img_www/right.gif\" alt=\"img\"\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/text_quotes.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e第一张图片来自我使用的一个 \u0026ldquo;MVG\u0026rdquo; 文本文件。它不包含转义符或引号。因此，只有 MVG 引号和转义符是存在的。\u003c/p\u003e\n\u003cp\u003e请注意，在上面的例子中，如果我对 MVG 文本字符串使用了单引号，唯一的变化是我需要对字符串中的单引号字符进行反斜杠处理，而不是双引号字符。\u003c/p\u003e\n\u003ch4 id=\"关于百分比字符\"\u003e关于百分比字符\u003c/h4\u003e\n\u003cp\u003e最后一点是关于 \u003ccode\u003e\u0026quot;-draw text\u0026quot;\u003c/code\u003e 操作符中的特殊 \u003ccode\u003eescape\u003c/code\u003e 字符。百分号字符 \u003ccode\u003e\u0026quot;%\u0026quot;\u003c/code\u003e 应该\u0026quot;按原样\u0026quot;绘制。你不需要做任何特殊的操作来绘制它们。如果它们不能\u0026quot;按原样\u0026quot;绘制，那么你的IM版本较旧，应该尽快升级。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e直到IM 6.2.4版本，\u003ccode\u003e\u0026quot;%\u0026quot;\u003c/code\u003e 字符被用作转义字符，在绘制的文本字符串中包含额外的图像信息。现在不再是这样了，因为当SVG图像也试图绘制百分数字符时，这种转义符是混乱和不正确的。\n百分号 \u0026ldquo;转义符 \u0026ldquo;的使用（以及\u0026rdquo;/n \u0026ldquo;换行符）被认为与 \u003ccode\u003e-draw\u003c/code\u003e 操作符和MVG格式处理SVG图像格式的预期用途不兼容。因此，从 IM 6.2.4 版本开始，%转义就不适用了，反斜杠只能转义自己和周围的引号。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e    convert -size 250x50 xc:none -box white  -pointsize \u003cspan class=\"m\"\u003e20\u003c/span\u003e -gravity center \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e            -draw \u003cspan class=\"s1\"\u003e\u0026#39;text 0,0 \u0026#34;%w\\n%h\u0026#34;\u0026#39;\u003c/span\u003e    -trim +repage text_escapes.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/text_escapes.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e关于\u0026quot;百分比错误\u0026quot;的更多细节，以及在旧版 ImageMagick 中使用 \u003ccode\u003e-draw\u003c/code\u003e 时避免该错误的方法，请参见 \u003ca href=\"https://imagemagick.org/Usage/bugs/draw_percent/\"\u003eDrawing a Percent Bug\u003c/a\u003e 页面。\u003c/p\u003e\n\u003ch4 id=\"用注释代替绘制\"\u003e用注释代替绘制\u003c/h4\u003e\n\u003cp\u003e避免这类问题的较好方法是使用 \u003ccode\u003e[-annotate](https://imagemagick.org/Usage/option_link.cgi?annotate)\u003c/code\u003e 而不是  \u003ccode\u003edraw\u003c/code\u003e 来绘制文本。这个操作符是 \u003ccode\u003edraw\u003c/code\u003e 操作符的一个封装器，可以使用 \u003ccode\u003edraw\u003c/code\u003e 的所有功能，但形式更简单。\u003c/p\u003e\n\u003cp\u003e基本上这个操作符只需要一组引号（对于 shell）。这使得处理特殊字符变得更加简单。\u003c/p\u003e\n\u003cp\u003e不幸的是，虽然你不再需要为 IM 转义引号，但你现在有百分比转义，如 \u003ccode\u003e'@'\u003c/code\u003e 文件读取，\u003ccode\u003e'\\n'\u003c/code\u003e 换行，以及其他\u003ca href=\"https://imagemagick.org/Usage/basics/#arg_percent\"\u003e百分号转义\u003c/a\u003e扩展。\u003c/p\u003e\n\u003cp\u003e例如，使用单引号\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e    convert -size 200x50 xc:none  -box white  -pointsize \u003cspan class=\"m\"\u003e20\u003c/span\u003e -gravity center \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e            -annotate \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\\@  \u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;  \u0026#34;  $  \\\\  %% \u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e            -trim +repage  annotate_s.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/annotate_s.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e而对于双引号\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e    convert -size 200x50 xc:none -box white -pointsize \u003cspan class=\"m\"\u003e20\u003c/span\u003e -gravity center \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e            -annotate \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\\@  \u0026#39;  \\\u0026#34;  \\$  \\\\\\\\  %% \u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e            -trim +repage  annotate_d.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/annotate_d.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e然而，如果你使用 \u003ccode\u003e'@'\u003c/code\u003e 转义符从文件中读取字符串，所有的注释引号和转义符将被完全忽略。\u003c/p\u003e\n\u003cp\u003e例如，我们在这里包含了一个图像的宽度和高度的信息!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e    convert -size 200x50 xc:none -box white -pointsize \u003cspan class=\"m\"\u003e20\u003c/span\u003e -gravity center \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e            -annotate \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;%w\\n%h\u0026#39;\u003c/span\u003e -trim +repage    annotate_percents.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然而，当从文件中读取注释字符串时，所有的转义都会被完全忽略。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e -n \u003cspan class=\"s1\"\u003e\u0026#39;@ %w\\n%h\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      convert -size 200x50 xc:none -box white -pointsize \u003cspan class=\"m\"\u003e20\u003c/span\u003e -gravity center \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e              -annotate \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;@-\u0026#39;\u003c/span\u003e  -trim +repage  annotate_file.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/annotate_file.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e更多信息请参见 \u003ca href=\"https://imagemagick.org/Usage/text/#annotate\"\u003eAnnotate Text Drawing Operator\u003c/a\u003e，特别是 \u003ca href=\"https://imagemagick.org/Usage/text/#escape_chars\"\u003eAnnotate Escape Characters\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"im-和-svg-处理\"\u003eIM 和 SVG 处理\u003c/h2\u003e\n\u003ch3 id=\"svg-输入驱动rsvg-与-msvg\"\u003eSVG 输入驱动。RSVG 与 MSVG\u003c/h3\u003e\n\u003cp\u003e处理实际的 SVG 图像格式是一项非常复杂的工作。引擎需要处理 \u003ca href=\"http://www.w3.org/TR/SVG/\"\u003eSVG\u0026ndash;可缩放矢量图形\u003c/a\u003e文档所定义的所有方面。这需要大量的编程工作和时间。\u003c/p\u003e\n\u003cp\u003e因此，ImageMagick 在 SVG 格式图像的处理上提供了两种方法。第一种是使用一个开源的 RSV G库，将 SVG 格式转换成 IM 没有问题的光栅图像。这个引擎几乎在 SVG 处理的所有方面都是完整的。\u003c/p\u003e\n\u003cp\u003e第二种方法是IM尝试将 SVG 转换为 MVG，使用一个名为 MSVG 的内置IM方法。MSVG 试图将SVG图像转换成IM的 \u003ccode\u003e-draw\u003c/code\u003e 运算符 \u0026ldquo;MVG\u0026quot;绘图语言。绘制 MVG 的很多功能都是专门为此而创建的。不幸的是，虽然基本的线条绘制和着色功能是存在的，但它远不是一个完整的 SVG 转换器。\u003c/p\u003e\n\u003cp\u003e你可以通过使用特殊的输入格式 \u0026ldquo;MSVG:\u0026quot;（IM v6.3.4新增）读取 SVG 图像来强制使用内部的 MSVG 转换器。但如果 RSVG 库存在，大多数 ImageMagick 将使用它来渲染 \u003ccode\u003eSVG\u003c/code\u003e 图像。\u003c/p\u003e\n\u003cp\u003e要找出你的 IM 会做什么，请用\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -list format \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep SVG\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e从括号中的 \u0026ldquo;RSVG\u0026rdquo; 可以看出，我自己的 IM 将使用我电脑上的 RSVG 库，并给出了版本。\u003c/p\u003e\n\u003cp\u003e在这里，我\u0026quot;绘制\u0026quot;了一个小的、手工制作的 SVG 图像 \u0026ldquo;\u003ca href=\"https://imagemagick.org/Usage/draw/diagonal.svg\"\u003ediagonal.svg\u003c/a\u003e\u0026quot;（由论坛用户 \u003ca href=\"https://imagemagick.org/Usage/forum_link.cgi?u=8538\"\u003epenciledin\u003c/a\u003e 贡献），它在白色背景上创建了一个简单的对角线渐变的矩形。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert diagonal.svg  diagonal_rsvg.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/diagonal_rsvg.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e完美的。一个正确的对角线梯度被生成。\u003c/p\u003e\n\u003cp\u003e然而，如果你使用内部的 MSVG（如果没有 RSVG 库，则为默认值）来渲染\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert msvg:diagonal.svg  diagonal_msvg.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/diagonal_msvg.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e正如你所看到的，内部 MSVG 转换失败，返回的是垂直梯度而不是对角线。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert msvg:diagonal.svg diagonal.mvg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你大概可以看到MSVG转换器是如何尝试将 SVG 转换为 MVG 绘图命令的。\u003c/p\u003e\n\u003cp\u003e当前内部 MSVG 已知失败的地方包括\u0026hellip;\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e非垂直梯度(没有转换到新的MVG梯度处理)\u003c/li\u003e\n\u003cli\u003e沿着弯曲路径的文字\u003c/li\u003e\n\u003cli\u003e文本对齐（与重力分开）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e然而大多数基本的绘图动作都被处理了。\u003c/p\u003e\n\u003cp\u003e还请记住，MVG 语言实际上可以处理 SVG 不能处理的事情，包括使用重力来定位图像和文本。重力不是 SVG 规范的一部分，尽管它是 IM 文本和字体处理的一个组成部分。\u003c/p\u003e\n\u003cp\u003e另外请记住，MVG 没有 SVG 所拥有的容器机制。内部的 MSVG 转换器用图形上下文的推送和弹出代替了 XML 容器（见上面的 MVG  输出），效果是一样的。\nSVG 的设置\u003c/p\u003e\n\u003cp\u003eSVG 图像格式是一种矢量格式（请参见\u003ca href=\"https://imagemagick.org/Usage/formats/#vector\"\u003e关于矢量图像格式的一句话\u003c/a\u003e），因此图像通常没有一个默认的\u0026quot;大小\u0026rdquo;，而是以特定的 \u003ccode\u003e \u0026quot;-density\u0026quot;\u003c/code\u003e 来 \u0026ldquo;绘制\u0026quot;或\u0026quot;渲染\u0026rdquo;，就像 postscript 一样（默认密度是72dpi）。\u003c/p\u003e\n\u003cp\u003e另外，如果 SVG 没有 \u0026ldquo;绘制\u0026quot;背景，您可以通过使用 \u003ccode\u003e-background\u003c/code\u003e 设置指定要使用的背景颜色。\u003c/p\u003e\n\u003cp\u003e例如这里是另一个小的 SVG 图像 \u0026ldquo;home.svg\u0026rdquo;，它已经使用3种不同的密度，3种不同的背景进行\u0026quot;渲染\u0026rdquo;，包括一个透明的背景。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -density \u003cspan class=\"m\"\u003e36\u003c/span\u003e                      home.svg  home_1.gif\n\n  convert              -background skyblue home.svg  home_2.gif\n\n  convert -density \u003cspan class=\"m\"\u003e144\u003c/span\u003e -background none    home.svg  home_3.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/home_1.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/home_2.gif\" alt=\"img\"\u003e\n\u003cimg src=\"https://imagemagick.org/Usage/draw/home_3.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e请注意，我使用了 PNG 格式的图片来制作上面例子中较大的透明背景版本。由于半透明的边缘像素，这产生的图像比 GIF 图像格式产生的图像更干净。当最终图像中涉及到透明度时，总是建议使用 PNG。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e我发现有些 SVG 图像不能缩放。也就是说，它们被定义为\u0026quot;像素\u0026rdquo;，而不是现实世界中的长度，如\u0026quot;点\u0026rdquo;、\u0026ldquo;英寸\u0026quot;或\u0026quot;毫米\u0026rdquo;。因此，虽然 \u003ccode\u003e-density\u003c/code\u003e 设置可能会改变图像的整体大小（以现实世界为单位），但 \u0026ldquo;像素 \u0026ldquo;的大小不会改变，因此图像本身的大小也不会改变。然而这样的SVG图像是相当罕见的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e更糟糕的是，一些 SVG 图像使用了\u0026quot;像素\u0026quot;和 \u0026ldquo;点\u0026quot;的混合测量，除非作者故意这样做，否则你可能会得到一个真正的混乱，你可以尝试使用不同的密度，而不是作者想要的。幸运的是，这种情况更加罕见。\u003c/p\u003e\n\u003cp\u003e一个简单的解决方法就是将 SVG 中所有的 \u0026ldquo;像素\u0026quot;单位改成\u0026quot;点\u0026rdquo;，但也不能盲目的使用，以防故意使用\u0026quot;像素\u0026rdquo;。\u003c/p\u003e\n\u003ch2 id=\"svg-输出处理\"\u003eSVG 输出处理\u003c/h2\u003e\n\u003cp\u003e从 IM v6.4.2 开始，IM 可以将任何位图图像转换为 SVG 矢量图! 转换并不总是成功的，但较大和/或较简单的图像（如位图蒙版）会转换得很好。\u003c/p\u003e\n\u003cp\u003e例如，我在这里将一个可怕的位图形状转换为SVG图像，然后再将其转换回来，以便将位图平滑为一个适当的反锯齿形状。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert -pointsize \u003cspan class=\"m\"\u003e72\u003c/span\u003e -font Candice label:A -threshold 50% \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -trim +repage -bordercolor white -border 5x5 A.gif\n\n  convert A.gif  A.svg\n\n  convert A.svg  A.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/A.gif\" alt=\"img\"\u003e -\u0026gt; \u003cimg src=\"https://imagemagick.org/Usage/draw/A.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e然而，要使之工作，必须安装\u0026quot;开发\u0026quot;的 \u003ca href=\"http://autotrace.sourceforge.net/\"\u003eAutoTrace\u003c/a\u003e 库，并在IM中配置 \u003ccode\u003e-with-autotrace\u003c/code\u003e 开关。\u003c/p\u003e\n\u003cp\u003e如果没有安装 \u003ca href=\"http://autotrace.sourceforge.net/\"\u003eAutoTrace\u003c/a\u003e 库并将其编译到 IM 中，那么生成的 SVG 输出将是大量的单像素圆圈，生成一个二进制结果，而不是一个平滑的 SVG 轮廓图像。这样的图像比较巨大，通过 SVG 渲染往往需要很长的时间来渲染。\u003c/p\u003e\n\u003cp\u003e其实需要一种更好的默认栅格到矢量的技术，可能会使用 Morphology skeletion 和 MAT 技术。\u003c/p\u003e\n\u003cp\u003e有一个 \u003ccode\u003eautotrace:\u003c/code\u003e \u003ca href=\"https://imagemagick.org/Usage/files/#delegates\"\u003e输入代理\u003c/a\u003e，来\u0026quot;平滑输入位图图像\u0026rdquo;，直接使用 \u0026ldquo;autotrace\u0026rdquo; 命令一次性完成上述所有步骤。然而我最后一次看到这个代理已经消失了。\u003c/p\u003e\n\u003cp\u003e你应该这样使用它\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e  convert autotrace:A.gif  A_traced.png\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://imagemagick.org/Usage/draw/A_traced.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e当然这并不能让你从 \u0026ldquo;autotrace\u0026rdquo; 命令中得到 SVG 输出，只是通过 SVG 过滤输入的图像来平滑它。\u003c/p\u003e\n\u003cp\u003e作为一种替代方法，你可以直接使用 \u0026ldquo;autotrace\u0026rdquo; 命令，如 \u003ca href=\"https://imagemagick.org/Usage/transform/#edge_vector\"\u003eRaster to Vector Edging\u003c/a\u003e 和 \u003ca href=\"https://imagemagick.org/Usage/morphology/#autotrace_skeleton\"\u003eSkeleton using Autotrace\u003c/a\u003e 示例所示。\u003c/p\u003e\n\u003cp\u003e你也可以看看 \u003ca href=\"https://imagemagick.org/Usage/forum_link.cgi?u=39994\"\u003ecancerberosgx\u003c/a\u003e 的结果，在\u003ca href=\"https://imagemagick.org/Usage/forum_link.cgi?p=167161\"\u003e生成 SVG 图像\u003c/a\u003e，他研究了转换照片的解决方案。\u003c/p\u003e\n\u003ch2 id=\"非im矢量图形编辑器\"\u003e非IM矢量图形编辑器\u003c/h2\u003e\n\u003cp\u003eImageMagick 是一个像素数组处理器，它一般不会保存矢量图像（\u0026lsquo;MVG\u0026rsquo; 是唯一的例外），只会读取图像并将其转换为像素数组。\u003c/p\u003e\n\u003cp\u003e其他像素图像编辑器也是如此，如 Gimp、Photoshop 等。\u003c/p\u003e\n\u003cp\u003e对于编辑和处理基于矢量的图像，可以使用以下程序，如\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSodipodi 基于SVG的矢量图形编辑器。\u003c/li\u003e\n\u003cli\u003eXfig 简单但非常好的矢量对象编辑器。(适用于标志、地图和在页面上排列照片)\u003c/li\u003e\n\u003cli\u003eDia\u003c/li\u003e\n\u003cli\u003eAutoTrace 将位图数组中的形状转换为矢量轮廓。\u003c/li\u003e\n\u003cli\u003eSketch 基于 Python 的曲线文字矢量编辑器。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当然，这不是一个完整的列表。即使是许多文字处理程序，如 OpenOffice、Word 和 TeX，一般都有各种简单的，虽然往往难以使用的对象编辑器。\u003c/p\u003e\n\u003cp\u003e然而对于一般将矢量图形格式转换为不同的矢量格式，不要使用 ImageMagick。ImageMagick 本质上是一个光栅图像或位图图形转换器和操作器，而且永远都是这样。更多信息请参见 \u003ca href=\"https://imagemagick.org/Usage/formats/#vector\"\u003eA word about Vector Image formats\u003c/a\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建于: 24 March 2004\u003c/li\u003e\n\u003cli\u003e更新于: 14 March 2011\u003c/li\u003e\n\u003cli\u003e作者: Anthony Thyssen, \u003ca href=\"mailto:Anthony.Thyssen@gmail.com\"\u003eAnthony.Thyssen@gmail.com\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eExamples Generated with:  [version image]\u003c/li\u003e\n\u003cli\u003eURL: \u003ca href=\"http://www.imagemagick.org/Usage/draw/\"\u003ehttp://www.imagemagick.org/Usage/draw/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","text":"https://imagemagick.org/Usage/draw/\n在 IM 中绘图是在现有图像中添加新元素的方法。虽然在复合字体效果的示例页和图像注释中涵盖了很多文本绘制的内容，但本页涉及 \u0026ldquo;-draw\u0026rdquo; 操作符的其他更普遍的方面。\n绘制命令最初是作为一种创建简单图像的手段。但随着时间的推移，它已经扩展成为矢量图形到光栅图像转换的界面。\nImageMagick 绘制命令 计算机中的图像通常以两种不同的方式保存。第一种也是你在这些示例页面中看到的最常见的方式被称为光栅图形。在这种方式中，图像是以像素的矩形阵列来存储的。\n另一种方式不太常见，也不太容易修改，但从另一个意义上讲，它的通用性更强，即对象矢量图形。在这种形式下，图像是用线条、弧线、颜色填充，有时还有深度来描述的。这是非常有用的，因为你可以将这些图像放大到你想要的任何尺寸，而且它们仍然可以完美地显示。与光栅格式的图像相比，您还可以在很小的空间内描述非常大和复杂的图像。\n矢量图形图像的例子包括 postscript 和新的 SVG-可缩放矢量图形。\nTrue-Type 字体也是矢量图形的例子，因为它允许在任何比例下使用单个字符描述。\n\u0026ldquo;-draw\u0026rdquo; 图像操作符，是进入 ImageMagick 矢量绘图功能的一个窗口，并形成了一套与 IM 的普通命令行图像操作符相当独立的命令。\n 一般使用的矢量图形文件格式只有几种，因为每一种这样的格式通常与其他这样的格式有很大的不同。其结果是，很少有代码共享的可能。 基于这个原因，ImageMagick 更关注使用矢量图形来绘制 SVG 格式的图像。Postscript 和 true-type 字体图形被传递给其他外部的\u0026rdquo;代理\u0026ldquo;库和应用程序，它们更适合绘制这些类型的矢量图形格式。 这并不是说 SVG 没有代理库。一个例子是 RSVG 库或 GTK SVG 库，这些库在编译时是可用的。IM 会链接到这些库来转换 SVG，而不是自己尝试去做。\n 原始绘图命令 让我们从 MVG 命令的 \u0026ldquo;-draw\u0026rdquo; 图像操作符中最古老、最简单、最常见的绘图原语开始。\n请注意，所有的参数都被视为浮点数，不一定是整数，比如我在这些例子中通常使用的。\n# Single Pixel Draw (两种方式 -- 这些像素点都被放大了) # Point \u0026#39;paints\u0026#39; the color pixel convert -size 10x6 xc:skyblue -fill black \\  -draw \u0026#39;point 3,2\u0026#39; -scale 100x60 draw_point.gif # Color Point \u0026#39;replaces\u0026#39; the color pixel convert -size 10x6 xc:skyblue -fill black \\  -draw \u0026#39;color 6,3 point\u0026#39; -scale 100x60 draw_color_point.gif 根据给出的注释，当涉及半透明颜色时，这两种点方法会产生不同的结果。详情请参见下面的颜色填充原语。\n# 矩形 / 圆角矩形 / 矩形圆弧 convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;rectangle 20,10 80,50\u0026#34; draw_rect.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;roundrectangle 20,10 80,50 20,15\u0026#34; draw_rrect.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;arc 20,10 80,50 0,360\u0026#34; draw_arc.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;arc 20,10 80,50 45,270\u0026#34; draw_arc_partial.gif arc 绘制原语与矩形一起列出，因为它实际上只是一个\u0026quot;椭圆\u0026rdquo;，装在两个坐标定义的\u0026quot;矩形\u0026rdquo;(rectangle)内。部分弧线很少使用，因为很难确定端点，除非角度限制在九十度的倍数。\ncircle 和 ellipse 原语涉及\u0026quot;中心\u0026quot;坐标与\u0026quot;边缘\u0026quot;坐标，或\u0026quot;大小\u0026quot;和\u0026quot;角度\u0026quot;值。\n# 圆 / 椭圆 (以某一点为中心) convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;circle 50,30 40,10\u0026#34; draw_circle.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;ellipse 50,30 40,20 0,360\u0026#34; draw_ellipse.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;ellipse 50,30 40,20 45,270\u0026#34; draw_ellipse_partial.gif 你也可以看看 Push/Pop 上下文，了解如何创建一个旋转的椭圆的例子。\n# 直线 / 折线 / 多边形 / 贝塞尔曲线 convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;line 20,50 90,10\u0026#34; draw_line.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;polyline 40,10 20,50 90,10 70,40\u0026#34; draw_polyline.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;polygon 40,10 20,50 90,10 70,40\u0026#34; draw_polygon.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;bezier 40,10 20,50 90,10 70,40\u0026#34; draw_bezier.gif 比较好的画直线和曲线的方法是使用 SVG 路径画法，它的用途更广，甚至可以实现\u0026quot;比例画线\u0026rdquo;。\n# text drawing / image convert -size 100x60 xc:skyblue -fill white -stroke black \\  -font Candice -pointsize 40 -gravity center \\  -draw \u0026#34;text 0,0 \u0026#39;Hello\u0026#39;\u0026#34; draw_text.gif convert -size 100x60 xc:skyblue -gravity center \\  -draw \u0026#34;image over 0,0 0,0 \u0026#39;terminal.gif\u0026#39;\u0026#34; draw_image.gif 最后这两个填充类型的操作是目前唯一受 \u0026ldquo;-gravity\u0026rdquo; 影响的绘制操作。这些操作的其他修饰符，包括 \u0026ldquo;-fill\u0026quot;、\u0026quot;-tile\u0026quot;、\u0026quot;-origin\u0026quot;、\u0026quot;-stroke\u0026quot;、\u0026quot;-strokeidth\u0026quot;、\u0026quot;-font\u0026quot;、\u0026quot;-pointsize\u0026quot;、\u0026quot;-box\u0026quot;。他们还有其他的修饰符，但这些修饰符与更高级的 Magick Vector Graphics 语言有关。\n贝赛尔原语 \u0026ldquo;bezier\u0026rdquo; 原语用于绘制曲线。每条命令只画一条曲线段。通常会给出 4 个点（8 个数字）：一个起点'结\u0026rsquo;、两个控制点和一个终点'结\u0026rsquo;。两个控制点定义了曲线的方向以及曲线偏离附加的终点'结'点的速度。\n为了顺利地将两条曲线连接起来，应该将端点的控制点通过'结'镜像，形成下一条贝塞尔曲线的控制点。例如这里我画了两条平稳连接在一起的贝赛尔曲线。请注意控制线和点（也是画出来的）是如何通过连接坐标直线镜像的，无论是角度还是长度。这一点很重要，否则曲线将不平滑。\npoints=\u0026#34;10,10 30,90 25,10 50,50 50,50 75,90 70,10 90,40\u0026#34; clines=`echo \u0026#34;$points\u0026#34; | sed \u0026#39;s/ /\\n/g\u0026#39; |\\  while read line; do echo \u0026#34;line $line\u0026#34;; done` symbols=`echo path \u0026#34;\u0026#39;\u0026#34;; for point in $points; do echo \u0026#34;M $pointl -2,-2 +4,+4 -2,-2 l -2,+2 +4,-4 -2,+2\u0026#34; done; echo \u0026#34;\u0026#39;\u0026#34;` convert -size 100x100 xc:skyblue -fill none \\  -draw \u0026#34;stroke gray $clinesstroke blue $symbols\u0026#34; \\  -draw \u0026#34;stroke red bezier 10,10 30,90 25,10 50,50 \u0026#34; \\  -draw \u0026#34;stroke red bezier 50,50 75,90 70,10 90,40 \u0026#34; \\  draw_bezier_joined.gif 如果我移动其中一个控制点，使它不从同一\u0026quot;结\u0026quot;的另一个控制点通过附加的\u0026quot;结\u0026quot;进行\u0026quot;反射\u0026rdquo;，那么曲线将不连续。\npoints=\u0026#34;10,10 30,90 25,10 50,50 50,50 80,50 70,10 90,40\u0026#34; clines=`echo \u0026#34;$points\u0026#34; | sed \u0026#39;s/ /\\n/g\u0026#39; |\\  while read line; do echo \u0026#34;line $line\u0026#34;; done` symbols=`echo path \u0026#34;\u0026#39;\u0026#34;; for point in $points; do echo \u0026#34;M $pointl -2,-2 +4,+4 -2,-2 l -2,+2 +4,-4 -2,+2\u0026#34; done; echo \u0026#34;\u0026#39;\u0026#34;` convert -size 100x100 xc:skyblue -fill none \\  -draw \u0026#34;stroke gray $clinesstroke blue $symbols\u0026#34; \\  -draw \u0026#34;stroke red bezier 10,10 30,90 25,10 50,50 \u0026#34; \\  -draw \u0026#34;stroke red bezier 50,50 80,50 70,10 90,40 \u0026#34; \\  draw_bezier_disjoint.gif 如果再次移动控制点，使其与相关的\u0026quot;结\u0026quot;点相匹配，线条将直接从该点出发，完全没有任何\u0026quot;曲线\u0026rdquo;。\npoints=\u0026#34;10,10 30,90 25,10 50,50 50,50 50,50 70,10 90,40\u0026#34; clines=`echo \u0026#34;$points\u0026#34; | sed \u0026#39;s/ /\\n/g\u0026#39; |\\  while read line; do echo \u0026#34;line $line\u0026#34;; done` symbols=`echo path \u0026#34;\u0026#39;\u0026#34;; for point in $points; do echo \u0026#34;M $pointl -2,-2 +4,+4 -2,-2 l -2,+2 +4,-4 -2,+2\u0026#34; done; echo \u0026#34;\u0026#39;\u0026#34;` convert -size 100x100 xc:skyblue -fill none \\  -draw \u0026#34;stroke gray $clinesstroke blue $symbols\u0026#34; \\  -draw \u0026#34;stroke red bezier 10,10 30,90 25,10 50,50 \u0026#34; \\  -draw \u0026#34;stroke red bezier 50,50 50,50 70,10 90,40 \u0026#34; \\  draw_bezier_no_curve.gif 如果两个控制点都设置为各自的\u0026quot;结点\u0026rdquo;，那么就会生成一条直线。\npoints=\u0026#34;10,10 10,10 50,50 50,50 50,50 50,50 90,40 90,40\u0026#34; clines=`echo \u0026#34;$points\u0026#34; | sed \u0026#39;s/ /\\n/g\u0026#39; |\\  while read line; do echo \u0026#34;line $line\u0026#34;; done` symbols=`echo path \u0026#34;\u0026#39;\u0026#34;; for point in $points; do echo \u0026#34;M $pointl -2,-2 +4,+4 -2,-2 l -2,+2 +4,-4 -2,+2\u0026#34; done; echo \u0026#34;\u0026#39;\u0026#34;` convert -size 100x100 xc:skyblue -fill none \\  -draw \u0026#34;stroke gray $clinesstroke blue $symbols\u0026#34; \\  -draw \u0026#34;stroke red bezier 10,10 10,10 50,50 50,50 \u0026#34; \\  -draw \u0026#34;stroke red bezier 50,50 50,50 90,40 90,40 \u0026#34; \\  draw_bezier_lines.gif 如果不指定所有 4 个点，\u0026lsquo;bezier\u0026rsquo; 原语并不真正有用。只有第一个点和最后一个点被归类为'结\u0026rsquo;，曲线将通过（或结束）这两个点。所有其他的点纯粹被视为控制点，按照给定的顺序对曲线产生影响，控制点越远，对该段曲线的影响越大。\npoints=\u0026#34;10,10 30,90 25,10 75,90 70,10 90,40\u0026#34; symbols=`for point in $points; do echo \u0026#34;M $pointl -2,-2 +4,+4 -2,-2 l -2,+2 +4,-4 -2,+2\u0026#34; done` convert -size 100x100 xc:skyblue -fill none \\  -draw \u0026#34;stroke gray polyline $points\u0026#34; \\  -draw \u0026#34;stroke red bezier $points\u0026#34; \\  -draw \u0026#34;stroke blue path \u0026#39;$symbols\u0026#39; \u0026#34; \\  draw_bezier_multi.gif 为了保持简单，不建议你每条 \u0026lsquo;bezier\u0026rsquo; 曲线段使用超过或少于4个点。\n其实我建议你完全不要使用 \u0026lsquo;bezier\u0026rsquo; 原语，而是使用 SVG Path Cubic Bezier 来生成曲线。它有一个特殊的 \u0026ldquo;s\u0026rdquo; 曲线延续功能，可以自动做相应的控制点\u0026quot;反射\u0026rdquo;，生成平滑连接的曲线段，减少你需要使用的控制点数量。您还可以定义相对于路径中最后一个端点的点。\n颜色填充原语 除了上述 \u0026ldquo;简单\u0026quot;原语之外，\u0026quot;-draw\u0026ldquo;还提供了一组颜色填充或修改原语。这些原语根据所选方法，从指定的点开始修改图像中的颜色。\n这些填充方法实际上不是真正的 \u0026lsquo;draw\u0026rsquo; 命令，而是颜色替换函数。它们被添加到绘图中，因为在程序的早期版本中，将它们的操作插入到 ImageMagick 中是最简单的。\n就像上面一样，使用的颜色是用 \u0026ldquo;-fill\u0026ldquo;颜色设置的，但如果设置了，就会使用 \u0026ldquo;-tile\u0026rdquo; 图像来代替。\n上面的其他设置选项没有使用，对这些操作没有影响。\n两个额外的设置也将应用于这些原语，即 \u0026ldquo;-bordercolor\u0026rdquo; 和 \u0026ldquo;-fuzz\u0026ldquo;系数设置。但是，这些设置不能在 \u0026ldquo;MVG\u0026rdquo; 语言中定义，因此只能在使用 \u0026ldquo;-draw\u0026rdquo; 操作符之前进行设置。\n第一个 \u0026lsquo;color point\u0026rsquo; 你已经看到了，它是上述例子中 \u0026lsquo;point\u0026rsquo; 绘制原语的替代。如果你仔细观察，你会看到我们在测试图像中设置的单个白色像素。\nconvert color_test.png -fill white \\  -draw \u0026#39;color 30,20 point\u0026#39; color_point.png 然而在绘制透明色和半透明色时，这些功能是不一样的。\n这里我们有一个三个像素的红色图像（放大了），第二个或中间的像素我们用 point 函数在红色像素上画上半透明的蓝色，得到紫色的结果。然而如果使用 color point 函数（最后一个或右边的像素），红色完全被半透明的蓝色像素所取代。它不会被叠加。\nconvert -size 3x1 xc:red -matte -fill \u0026#39;#00F8\u0026#39; \\  -draw \u0026#39;point 1,0\u0026#39; \\  -draw \u0026#39;color 2,0 point\u0026#39; -scale 33x33 draw_points.png 所有的 color 函数都会进行全色替换，而其他所有的颜色原语都会在图像上面'画'出颜色。因此，你可以使用 color 来绘制透明色。\ncolor replace 绘制函数将在指定的位置替换所有精确给定颜色的实例。而且正如您所看到的，这些区域不一定要连接在一起。\nconvert color_test.png -fill white \\  -draw \u0026#39;color 30,20 replace\u0026#39; color_replace.png convert color_test.png -fill white -fuzz 13%\\  -draw \u0026#39;color 30,20 replace\u0026#39; color_replace_fuzz.png 然而，正如你在第一个结果中所看到的，一些沿边缘的像素没有被替换。这些像素与所选像素的颜色不完全相同，所以它们被忽略了。添加一个小的模糊因子也会包含与原色相似的颜色。如上面第二个例子所示。\n当然，fuzz factor 并不是一个很好的解决方案，因为它不会捕捉所有这样的边缘像素。这是所有这些 color fill 方法经常出现的问题，也是一个没有通用解决方案的问题。\n如果你想替换一个特定的已知颜色，而不是从图像本身选择一种颜色，那么可以使用 \u0026ldquo;-opaque\u0026rdquo; 图像操作符来代替。该函数还使用 \u0026ldquo;-fuzz\u0026rdquo; 因子设置来增加与给定颜色相匹配的颜色范围。\nfloodfill 的方法也很简单，因为它只会填充所选点周围的整个区域，而不会选择任何其他没有以某种方式连接的类似颜色的区域。\n你也可以通过使用 \u0026ldquo;-fuzz\u0026rdquo; 来扩大被填充的区域，以包括相似的颜色。在这种情况下，我们选择了一个足够高的值，也包括了交叉边界，允许洪水填充\u0026quot;泄漏\u0026quot;到图像的另一侧。\nconvert color_test.png -fill white \\  -draw \u0026#39;color 30,20 floodfill\u0026#39; color_floodfill.png convert color_test.png -fill white -fuzz 15% \\  -draw \u0026#39;color 30,20 floodfill\u0026#39; color_floodfill_fuzz.png 用颜色填充区域并非没有问题。颜色可能会越过薄薄的边界，渗入到不想要的区域，(请看背景图案上的 GIF，以证明这一点)。或者，它可能无法填满所选区域的边缘，（见反锯齿和泛滥填充问题）。但它确实有效。\nfilltoborder 就像 floodfill 一样，只是你指定了一个颜色，这个颜色的边界是要填充的区域，而不是填充过程中要替换的颜色。\n当然也建议在该边框颜色选择中加入 similar colors 的模糊因子，以进一步限制洪水填充。\nconvert color_test.png -fill white -bordercolor royalblue \\  -draw \u0026#39;color 30,20 filltoborder\u0026#39; color_filltoborder.png convert color_test.png -fill white -bordercolor blue \\  -draw \u0026#39;color 30,20 filltoborder\u0026#39; color_filltoborder2.png convert color_test.png -fill white -bordercolor blue -fuzz 30% \\  -draw \u0026#39;color 30,20 filltoborder\u0026#39; color_filltoborder_fuzz.png 最后的绘制颜色方法是 reset，它只是将整个图像替换或重置为填充颜色。在这种情况下，实际选择的像素对结果没有任何影响。\nconvert color_test.png -fill white \\  -draw \u0026#39;color 30,20 reset\u0026#39; color_reset.png 这实际上是非常有用的，因为它提供了一种简单的方法从现有图像生成纯色（或平铺图像）画布。(请参见 Canvases Sized to an Existing Image)以了解此方法和其他做同样事情的方法。\n未来：使用 \u0026ldquo;-tile\u0026rdquo; 图案来填充该区域。\nMatt 填充原语 matte 绘制原语的工作方式与上述 color 原语完全相同，只是它不会替换所选区域的颜色，只会替换所选区域的 matte 通道。（也就是只有 alpha 或 matte 通道被这些填充函数调整）。\n就像 color 填充函数一样，matte 值使用的是填充色（除非用 \u0026ldquo;-tile\u0026rdquo; 作为 alpha value 的来源）。\n这里我们使用上面同样的 color floodfill 例子，但这里只调整 matte 通道，使填充部分完全透明。也就是说，原来的颜色仍然存在，只是透明而已!\nconvert color_test.png -fill none \\  -draw \u0026#39;matte 30,20 floodfill\u0026#39; matte_floodfill.png convert color_test.png -fill none -fuzz 15% \\  -draw \u0026#39;matte 30,20 floodfill\u0026#39; matte_floodfill_fuzz.png 也可以使用 matte reset 函数使整个图像变成半透明的。当然在这种情况下，我们必须输出到 PNG，它可以接受半透明颜色的图像。\nconvert color_test.png -fill \u0026#39;#00000080\u0026#39; \\  -draw \u0026#39;matte 30,20 reset\u0026#39; matte_reset.png 注意，在操作中没有使用 black 颜色分量，只使用了颜色的 matte 分量。图像的原色保持原样。\n未来：使用 \u0026ldquo;-tile\u0026rdquo; 模式来制作有趣的哑光效果。\ncolor 和 matte 都是完全替换颜色的函数，它总是会产生一个布尔（all or nothing）类型的颜色替换。因此，这些区域的边缘总是会显示出 Aliasing 效果。\n正因为如此，除了设置 GIF 图像的透明区域（也是布尔型）外，一般来说，这些都不是一般图像显影的好图像运算符。不过也不是全无用处，从背景去除的例子中可以看出。\n关于绘图命令的具体内容 像素坐标 [-draw](https://imagemagick.org/Usage/option_link.cgi?draw) 命令（以及IM中的许多其他命令）使用的是所谓的\u0026quot;像素坐标\u0026rdquo;。也就是 \u0026ldquo;10,10\u0026rdquo; 的坐标是左上角往下10个像素的中心。\n在这个坐标系中，0,0 是左上角像素的中心，w-1,h-1 是右下角的中心。实际的边缘位于 -0.5,-0.5 和 w-0.5,h-0.5，中心像素（如果图像是奇数大小）位于 \u0026lsquo;(w-1)/2,(h-1)/2\u0026rsquo;。\n然而，当您对图像进行数学处理时（如使用扭曲时），实际的像素没有实际意义，因此它使用\u0026quot;图像坐标\u0026rdquo;。在这个系统中，图像的实际边缘在 \u0026lsquo;0,0\u0026rsquo; 和 \u0026lsquo;w,h\u0026rsquo; 处。而图像的中心（可能是，也可能不是像素的中心）在 \u0026lsquo;w/2,h/2\u0026rsquo;。\n要将 \u0026lsquo;像素坐标\u0026rsquo; 转换为图像坐标，请加上 ½ 如左上角像素的中心是 \u0026lsquo;0.5,0.5\u0026rsquo;，右下角像素的中心是 \u0026lsquo;w-0.5,h-0.5\u0026rsquo;。 例如：小图像中的圆心\n绘制伽马和色域校正 和几乎所有的 ImageMagick 操作一样， [-draw](https://imagemagick.org/Usage/option_link.cgi?draw) 是一个线性运算符，因此在线性 RGB 色彩空间中工作。这意味着，为了得到平滑的边缘，你可能需要对图像进行一些伽玛校正，然后再保存，这样就可以使用非线性（伽玛校正）的sRGB色彩空间来存储。\n例如，如果你画了一个大圆，然后保存它\u0026hellip;\nconvert -size 81x81 xc:black -fill white -draw \u0026#39;circle 40,40 40,3\u0026#39; \\  circle_raw.png 看看圆圈的边缘，其实看起来并不是真的很光滑。你可以看到明显的阶梯效果。\n那是因为你是在线性 RGB 色彩空间中画的圆。但是你却把图像保存成了真正的 sRGB 色域！这就导致了你的图像在保存的过程中出现了明显的阶梯效果。\n为了解决这个问题，我们需要在保存图像之前给图像添加一个伽玛校正。\nconvert -size 81x81 xc:black -fill white -draw \u0026#39;circle 40,40 40,3\u0026#39; \\  -gamma 2.2 circle_gamma.png 现在，圆圈边缘实际上看起来光滑圆润，就像它们应该的那样。\n如果你想正确地做这件事，我们真的应该使用色彩空间进行修正。然而，由于IM假设RGB是保存的默认色彩空间，你需要做一些棘手的处理来让它正确地做事情。\nconvert -size 81x81 xc:black -set colorspace RGB \\  -fill white -draw \u0026#39;circle 40,40 40,3\u0026#39; \\  -colorspace sRGB circle_sRGB.png  请注意，sRGB色彩空间（这是保存图像的正确方法）与简单地应用2.2伽玛校正并不完全相同。然而，两者之间的结果差异很小，只有在非常非常粗糙的图像中才能看到。 在IM v6.7.5-1之前，色彩空间名称 \u0026ldquo;sRGB\u0026rdquo; 和 \u0026ldquo;RGB\u0026rdquo;（线性-RGB）实际上是颠倒的。因此，在旧版本的IM中，上面的两个标签应该被调换。\n 要使用真实的图像（在IMv6中）正确地绘制（或进行任何\u0026quot;线性\u0026quot;图像处理），你需要首先删除任何现有的伽玛，处理图像，然后恢复该伽玛校正。更多细节请参见使用色域校正调整大小。\n下面是一个在真实图像上绘图的例子\u0026hellip;。首先是没有任何颜色校正（原始），然后是伽玛和色域校正。\nconvert rose: -fill none -stroke white -draw \u0026#39;line 5,40 65,5\u0026#39; rose_raw.png convert rose: -gamma .454545 \\  -fill none -stroke white -draw \u0026#39;line 5,40 65,5\u0026#39; \\  -gamma 2.2 rose_gamma.png convert rose: -colorspace RGB \\  -fill none -stroke white -draw \u0026#39;line 5,40 65,5\u0026#39; \\  -colorspace sRGB rose_sRGB.png 正如你所看到的，通过使用伽玛或色彩空间校正，线条变得非常平滑，没有锯齿状的\u0026quot;楼梯\u0026quot;别离效果，比直接绘制时可以看到。(你需要一个很好的显示器才能看到它)\n 上面的线条是用 [-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke) 颜色绘制的。您可以使用 [-fill](https://imagemagick.org/Usage/option_link.cgi?fill) 来绘制线条，并得到同样的结果，但这样您就不能使用 [-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth) 来控制线条粗细。更多信息请参见下面的\u0026rdquo;描边颜色设置\u0026quot;。 色域名称实际上是使用\u0026rsquo;sRGB'色彩空间的值来定义的，但通过绘制应用，就好像图像是在线性RGB色彩空间中一样。因此，对命名的颜色（不是\u0026quot;白\u0026quot;或\u0026quot;黑\u0026rdquo;）使用上述伽玛校正将导致这些颜色变得失真。在这种情况下，最好不要使用伽玛或色域校正，这样命名的颜色就会正确映射。 命名的\u0026rsquo;sRGB'颜色与图像的色彩空间的正确映射，将作为IMv7开发的一部分被修正。\n 描边、描边宽度和填充的相互作用 [-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke) 和 [-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth) 选项用于在字体边缘绘制轮廓。\n这些选项通常与 [-fill](https://imagemagick.org/Usage/option_link.cgi?fill) 一起使用，以使文字更有趣，而不费力。\nconvert -size 380x70 xc:lightblue -pointsize 50 -font Chisel \\  -fill green -stroke black -draw \u0026#39;text 10,55 \u0026#34;Black Border\u0026#34;\u0026#39; \\  stroke_font.jpg 默认设置是 -strokewidth 1 和 -stroke None。\n但这样做会使轮廓笔画不可见，只留下 [-fill](https://imagemagick.org/Usage/option_link.cgi?fill) 的颜色，你不会看到它。\n当 -strokewidth 为 \u0026ldquo;不可见 \u0026ldquo;时， -strokewidth 唯一的效果是对字体大小属性的影响，也就是说它仍然可以影响字体定位和 Label 和 Caption 图片生成的大小。否则，宽度在你使笔画可见之前是没有可见效果的。\n为了了解 [-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth) 对字体外观的实际影响（当使其可见时），我在这里绘制了一些不同宽度的文字，从 \u0026ldquo;turned off\u0026rdquo; 到越来越大。\nconvert -size 320x420 xc:lightblue -pointsize 70 -font Vademecum \\  -fill red -stroke none -draw \u0026#39;text 30,80 \u0026#34;Stroke -\u0026#34;\u0026#39; \\  -fill red -stroke black -strokewidth 0 -draw \u0026#39;text 30,160 \u0026#34;Stroke 0\u0026#34;\u0026#39; \\  -fill red -stroke black -strokewidth 1 -draw \u0026#39;text 30,240 \u0026#34;Stroke 1\u0026#34;\u0026#39; \\  -fill red -stroke black -strokewidth 2 -draw \u0026#39;text 30,320 \u0026#34;Stroke 2\u0026#34;\u0026#39; \\  -fill red -stroke black -strokewidth 3 -draw \u0026#39;text 30,400 \u0026#34;Stroke 3\u0026#34;\u0026#39; \\  stroke_table.jpg 请注意，从上面的例子中，设置 -strokewidth 为 \u0026ldquo;0\u0026rdquo; 与设置 -stroke 颜色为 \u0026ldquo;none\u0026rdquo;（默认值）是不同的。前者会画出一个非常非常细的笔触轮廓，而后者则会有效地关闭它。在这两种情况下，笔触仍然会被绘制。\n然而你也应该注意到，即使 -strokewidth 为 \u0026ldquo;0\u0026rdquo;，图像的轮廓也会比普通的 filled 图像（使用 -stroke 颜色为 \u0026ldquo;none\u0026rdquo;）扩大非常小。\n最后，使用任何小于 \u0026ldquo;1.0\u0026rdquo; 的宽度都不能正常工作。在这种情况下，你应该谨慎行事。\n但是请记住， -strokewidth 也是一个浮点设置。也就是说，\u0026ldquo;0.5\u0026rdquo; 的笔画宽度也是有效的。然而，通常只有当您试图在关闭防锐化功能的情况下绘制薄的位图圆时，这才是重要的。\n下面是一个使用超大笔触宽度的例子。\nconvert -size 320x100 xc:lightblue -font Candice -pointsize 72 -fill white \\  -stroke black -strokewidth 15 -draw \u0026#34;text 25,65 \u0026#39;Anthony\u0026#39;\u0026#34; \\  stroke_thick.jpg 请注意， -strokewidth 可以向内和向外扩展线条。下面是同样的例子，但是重新绘制了字体，没有笔画轮廓，去掉了很粗的笔画的内侧部分。\nconvert -size 320x100 xc:lightblue -font Candice -pointsize 72 -fill white \\  -stroke black -strokewidth 15 -draw \u0026#34;text 25,65 \u0026#39;Anthony\u0026#39;\u0026#34; \\  -stroke none -draw \u0026#34;text 25,65 \u0026#39;Anthony\u0026#39;\u0026#34; \\  stroke_outline.jpg 更多使用描边的例子请看复合字体效果。请特别看一下\u0026rdquo;气球效果\u0026quot;。\n绘制（描边）线条 IM中的默认画线有一些奇怪的行为，值得了解。下面就为大家介绍一下默认画线\u0026hellip;\nconvert -size 100x40 xc:lightblue \\  -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_default.jpg 你可以用 -fill 选项设置线条的颜色。\nconvert -size 100x40 xc:lightblue \\  -fill white -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line.jpg 此外，你还可以通过设置 [-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke) 颜色，使线条稍微粗一些。\nconvert -size 100x40 xc:lightblue \\  -fill white -stroke black -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_stroke.jpg 但是我们用 -fill 选项指定的白色是怎么回事呢？\n这就是在 ImageMagick 中绘制线条的棘手之处。该程序所做的实际上是将线条视为一个约1像素宽的填充对象。这是自然的，因为通常情况下，多条线通常用于扫出一个要填充的区域。\n所以，就像我们在上一节中使用字体的描边一样，IM 用填充色绘制线条（或对象），然后用描边色在其周围绘制。结果就是，现在上面的描边色线条稍微粗了一点，填充色完全隐藏在下面。如果你把描边色做成半透明的，就可以让这个填充色再次显现出来。\n综上所述，线条会出现在 -fill 颜色下绘制，但一旦 -stroke 颜色被定义为默认的\u0026quot;无\u0026quot;或\u0026quot;透明\u0026quot;颜色以外的颜色，该选项就没有任何意义了。\n 选项 -linewidth 实际上只是 -strokewidth 的别名，不应该被使用。\n 例如，你可能会认为这个命令会产生很粗的线条。确实如此，但由于 -stroke 的颜色是不可见的，所以你看不到它。你只能看到线条的一个像素宽的区域的内部\u0026quot;填充\u0026rdquo;。\nconvert -size 100x40 xc:lightblue \\  -fill white -strokewidth 3 -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_fill_3.jpg  以上的结果其实我认为是一个 BUG，什么都没画，因为没有'区域'填充，也没有设置线的'描边颜色\u0026rsquo;。什么都没有画，因为没有\u0026quot;区域 \u0026ldquo;需要填充，也没有设置线的\u0026quot;笔触颜色\u0026rdquo;。IM 目前这样做的原因是为了避免新用户的混淆，但实际上这只会给高级用户带来问题。详见《绘制填充边界》。\n 但如果同时定义了描边颜色，就会得到要求的粗线\u0026hellip;\nconvert -size 100x40 xc:lightblue \\  -stroke black -strokewidth 3 -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_stroke_3.jpg 如果将 -strokewidth 设置为1，则上面的一行将被完全覆盖。\nconvert -size 100x40 xc:lightblue \\  -stroke black -strokewidth 1 -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_stroke_1.jpg 当然当你掌握了这些知识后，你就可以利用这些知识进行创作，就像画字体一样。\nconvert -size 100x40 xc:lightblue \\  -stroke black -strokewidth 5 -draw \u0026#34;line 5,35 95,5\u0026#34; \\  -stroke white -strokewidth 2 -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_multi.jpg 在这里，我使用了最薄的 -strokewidth 设置为 \u0026ldquo;0\u0026rdquo;，就像我对上述字体所做的一样。\nconvert -size 100x40 xc:lightblue \\  -fill white -stroke black -strokewidth 0 -draw \u0026#34;line 5,35 95,5\u0026#34; \\  line_stroke_0.jpg 这就产生了一个非常奇怪的结果，即由黑点和灰段组成的点线。这是笔触、填充和背景色之间奇怪的\u0026quot;色拍频率\u0026quot;的结果。\n下面是线条的放大图\u0026hellip;\nconvert -size 25x10 xc:lightblue \\  -fill white -stroke black -strokewidth 0 -draw \u0026#34;line 2,8 22,1\u0026#34; \\  -scale 400% line_stroke_0_white.jpg  颜色节拍频率 \u0026ldquo;的效果与\u0026quot;声音节拍\u0026quot;的效果并无二致，当你有两把非常轻微的不调的吉他时，你会得到这样的效果。在这种情况下，你会得到一个黑点，其中笔触颜色完全覆盖了基本的填充颜色，你会得到一个灰色的点，其中笔触颜色与填充和背景颜色混合。 颜色混合是反锯齿过程的自然结果，IM使用反锯齿过程来尝试改善线条和其他绘制对象的外观。更多信息请参见IM 中的抗锯齿讨论和示例页面。\n 需要注意的是，这种效果只出现在倾斜的线条上，而不是纯水平或垂直的线条，因为在这些线条上，别名没有影响，因此也就没有\u0026quot;色拍频率\u0026quot;的效果。\nconvert -size 100x40 xc:lightblue \\  -fill white -stroke black -strokewidth 0 -draw \u0026#34;line 5,20 95,20\u0026#34; \\  line_stroke_horz.jpg 在这里，我在放大的视图上使用了不同的底层填充颜色，所以你可以看到颜色如何改变结果的节拍。\nconvert -size 25x10 xc:lightblue \\  -fill none -stroke black -strokewidth 0 -draw \u0026#34;line 2,8 22,1\u0026#34; \\  -scale 400% line_stroke_0_none.jpg convert -size 25x10 xc:lightblue \\  -fill red -stroke black -strokewidth 0 -draw \u0026#34;line 2,8 22,1\u0026#34; \\  -scale 400% line_stroke_0_red.jpg convert -size 25x10 xc:lightblue \\  -fill black -stroke black -strokewidth 0 -draw \u0026#34;line 2,8 22,1\u0026#34; \\  -scale 400% line_stroke_0_black.jpg 让我们把它和无 stroke 相比\u0026hellip;\nconvert -size 25x10 xc:lightblue \\  -fill black -stroke none -draw \u0026#34;line 2,8 22,1\u0026#34; \\  -scale 400% line_stroke_-_black.jpg 正如你所看到的，当绘制非常细的线条时，你可以通过使用相同的填充和描边颜色，或者将其中一种颜色设置为无来减少\u0026quot;节拍\u0026rdquo;。虽然后者是最好的主意，但前者可能对你的特定编程需求更实用。\n注意，填充线的粗细是 \u0026ldquo;0\u0026rdquo;。但描边线可以有更大的厚度。它也是一个浮点值! 2.5像素宽的线条是完全有效的。\n 这些结果不仅是由于笔画宽度为0的bug，导致颜色跳动，而且在没有实际需要填充的区域时，\u0026ldquo;填充色\u0026quot;被画出了额外的1.0直径厚度。这我也认为是一个bug。请看绘制填充边界。\n 绘制填充边界 关于各种绘制原语，还有一些其他要点需要您注意。\n笔画宽度对于大于 1.0 的浮点值工作得很好，但对于小于 1.0 的值似乎会崩溃。这是由于使用的实现算法造成的，而不仅仅是因为它是错误的，因为它在较大厚度的线条上工作得很好。\n基本上，如果你使用的笔画宽度为零，你可以期待没有笔画颜色会被添加。相反，你会得到一种节拍模式，当线条穿过像素的实际\u0026quot;中心\u0026quot;时，笔触颜色就会达到全部强度。\n真正应该发生的是，添加到像素上的颜色数量应该反映出被绘制的线条的面积，而不是像素与该线条的距离。因此，零宽度的线条不应该给图像添加任何颜色，而厚度小于1.0的线条应该只添加较少的颜色。\n请看上面的例子 Draw Lines, with StrokeWidth and Stroke。\n另一个问题是，填充颜色没有应用到正在绘制的形状（多边形）的边缘，而是应用到更远的半像素处。这包括没有应用\u0026quot;描边\u0026quot;的情况，而边缘应该是精确的。它也包括画一条\u0026quot;线\u0026rdquo;，它的填充厚度实际上是\u0026quot;零\u0026rdquo;。\n基本上，如果你画了一条线，没有启用描边，从技术上讲，你应该看到，没有线，因为它没有\u0026quot;填充\u0026quot;厚度。相反，线条的绘制至少包括1个像素宽的\u0026quot;填充\u0026quot;颜色。这是出于历史原因，一般来说可以避免新用户对IM的混淆。不幸的是，这对高级用户来说是不正确的。\n这意味着，如果您只使用填充色绘制两个多边形，并共享一个边缘，该边缘将重叠1个像素，因为每个多边形的所有边缘都比它大半像素。换句话说，多边形和其他形状并不适合在一起，而是重叠的。\n例如，在这里我试着使用 draw 把一张图片分成两半（在白色上绘制黑色）。要做到这一点，我画了两个多边形，共享一个边缘，完全没有重叠。由此产生的\u0026quot;微小\u0026quot;图像，已被放大显示。\nconvert -size 10x10 xc: -draw \u0026#39;polygon 2,-1 7,10 10,10 10,-1\u0026#39; bound_left.gif convert -size 10x10 xc: -draw \u0026#39;polygon 2,-1 7,10 -1,10 -1,-1\u0026#39; bound_right.gif convert bound_left.gif bound_right.gif -compose Plus -composite bound_add.gif 两个黑色的部分(这是实际绘制的)实际上是相互重叠的! 换句话说，尽管我们试图使用绘制的多边形分别绘制这两个区域，但填充的区域比要求的略大。\n我还将两张图片加（加合成）在一起，这样你就可以实际看到绘制的黑色区域的重叠。如果两个多边形是完美契合的，那么 \u0026ldquo;添加 \u0026ldquo;的图画将是纯白色的。\n实际的重叠量相当于默认的 -strokewidth 1.0 设置。因此，通常情况下，这个额外的区域会被一个正常的笔画宽度所覆盖。然而它可能会造成一些实际问题。\n旁白: 对于一个完整的连接测试，你会在黑色背景上生成50%的灰色区域，然后把它们加在一起。这样你就可以看到这些区域是否不仅 \u0026ldquo;重叠\u0026rdquo;（如上图所示），而且还可以测试当你把这些区域加在一起时，它们是否 \u0026ldquo;重叠不足\u0026rdquo;（在填充的区域之间留下一个间隙）。所得到的图像应该是一个完美平滑的50%灰色，沿连接处没有颜色变化。透明度检查会涉及到，在一个完全透明的背景上应该使用50%透明，50%灰色的颜色。\n要查看一个完美的剪切和重新添加的例子，基于一个单一的蒙版图像，请参阅组成方法的例子，组成 DstOut。\n未来BUG修复：填充的区域应该是精确的，但为了在绘制形状时进行补偿，默认的 \u0026ldquo;描边颜色 \u0026ldquo;应该设置为填充颜色（除非它本身被特别设置）。\nMVG - 魔法矢量图形 上面显示的原语构成了所有 -draw 操作的基础。它们共同构成了 ImageMagick 中特殊内部语言的起点，称为 Magick Vector Graphics 语言。关于这种语言的更多细节，请参见IM网站上的 MVG 原语和语法摘要。\n这种 \u0026ldquo;MVG\u0026rdquo; 语言的设计目标是让 ImageMagick 处理更复杂的 SVG（可缩放矢量图形）语言。它通过尝试将给定 SVG 格式的图像转换为更简单的内部 MVG 格式来实现。更多细节请看下面的 SVG 处理。\n因此，你上面看到的只是 -draw 操作符的一小部分功能。如果你想绘制复杂的对象，我建议你使用SVG编辑器（如 \u0026ldquo;Sodipodi\u0026rdquo;）为对象创建一个单独的SVG格式图像。参见下面的非IM矢量图形程序）。\n与 SVG 不同，MVG 没有任何形式的\u0026quot;容器\u0026quot;或图像命令集。在转换过程中，这些命令都被删除，以产生一个简化的 MVG 绘图命令序列。相反，它使用图形上下文的概念来保存和恢复各种绘图设置，这就是我们现在要看的。\n命令行设置与 MVG 设置 首先，您通过命令行选项设置的几乎所有设置，绘制原语使用的设置在 MVG 绘制命令中都有直接对应的内容。\n通过命令行选项（如 -strokewidth）或使用 MVG 绘图字符串（如 strok-width）中的设置，两者之间的主要区别在于 MVG 设置只在 MVG 命令字符串的持续时间内有效。\n一般绘图设置的总结:\n __cmd_option__ __draw_MVG__ __Argument__ -fill fill color/tile for inside shapes -tile fill image tile, replaces fill color -stroke stroke line color/tile around the shapes -strokewidth stroke-width pixel width +antialias stroke-antialias 0/1 aliasing line edges -font font font_name / font_file -family font-family ? -weight ? ? -stretch ? ? -pointsize font-size height in points -kerning - extra inter-character spacing +antialias text-antialias 0/1 aliasing drawing text -box text-undercolor fill color for font bounding box - decorate (None, Underline, LineThrough or Overline) -gravity gravity (None, North, South-East,...) -fuzz - color delta / percentage -bordercolor - color Notes:\n - no such option ? unknown 这些设置通常很好理解，因为它们经常使用，上面也有演示。\n 字体、拉伸、样式和重量用于从 ImageMagick 字体列表中识别字体。然而，大多数人只是选择一个特定的字体和大小点来代替使用。因此，它们在IM中很少使用。 正如您所看到的，\u0026ldquo;color fill\u0026rdquo; 原语的特殊设置在 MVG 中并没有直接对应的设置。这就是 -bordercolor 和 -fuzz 因子设置。在使用 -draw 操作符之前，必须从命令行指定这些设置。\n 有些 MVG 设置作为全局命令行设置可能更有用，比如字体绘制的 decorate 设置。\n警告： [-gravity](https://imagemagick.org/Usage/option_link.cgi?gravity) 不是 SVG 规范的一部分。在 MVG 中，它只用于文本和图像的放置以及对齐。目前没有与默认的\u0026quot;引力\u0026quot;效果分开的调整设置。然而，由于调整是 SVG 文本处理的一部分，这可能会在未来的某个时候改变。\n现在，全局命令行设置（在 MVG 绘制字符串之外）用于初始化你所应用的每个 -draw 操作的设置，这就是为什么你可以设置一个 -fill 颜色，然后你可以用它来绘制该颜色的圆。\nconvert -size 100x60 xc:skyblue -fill red \\  -draw \u0026#34;circle 50,30 40,10\u0026#34; draw_circle_global.gif 你可以在 MVG 参数 -draw 中本地覆盖全局设置\u0026hellip;\nconvert -size 100x60 xc:skyblue -fill red \\  -draw \u0026#34;fill green circle 50,30 40,10\u0026#34; draw_circle_override.gif 然而，在单个 -draw MVG 参数中设置的设置只在 -draw 操作期间存在。也就是说， -draw 中的设置只限于该次绘制，而不会带入以后单独的 -draw 参数中。\nconvert -size 100x60 xc:skyblue -fill red -draw \u0026#39;fill green\u0026#39; \\  -draw \u0026#34;circle 50,30 40,10\u0026#34; draw_circle_local.gif 如果你打算进行大量的操作，那么在单个 MVG 字符串中进行这些操作可能会比多个 -draw 操作更好。\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;fill green circle 41,39 44,57 fill blue circle 59,39 56,57 fill red circle 50,21 50,3 \u0026#34; draw_circle_multi.gif MVG 特定设置 其他控制线条和对象绘制方式的 MVG 设置，即使在使用原语操作时也需要了解。这些设置包括\u0026hellip;\n __draw_MVG__ __Description/Argument__ fill-opacity fill transparency, from 0.0 to 1.0 clip-rule fill style for crossed lines (evenodd, nonzero) stroke-opacity line transparency, number from 0.0 to 1.0 stroke-dasharray list of 'on' and 'off' lengths for lines stroke-dash stroke-linecap End of line look: butt round square stroke-linejoin Lines joins: butt miter round square stroke-miterlimit Angle when 'miter' joins become 'bevel' (or 'butt') 记住，所有 MVG 设置和绘图操作符的完整列表可以在 IM 网站的 MVG 原语和语法摘要中看到。\n让我们看看一些简单设置的效果\u0026hellip;\u0026hellip;\n# Stroke Opacity convert -size 100x60 xc:skyblue -fill none -stroke black \\  -draw \u0026#34; path \u0026#39;M 10,10 L 90,10\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-opacity 0.8 path \u0026#39;M 10,20 L 90,20\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-opacity 0.6 path \u0026#39;M 10,30 L 90,30\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-opacity 0.4 path \u0026#39;M 10,40 L 90,40\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-opacity 0.2 path \u0026#39;M 10,50 L 90,50\u0026#39;\u0026#34; \\  set_stroke_opacity.gif # Fill Opacity convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34; rectangle 5,10 15,50 \u0026#34; \\  -draw \u0026#34;fill-opacity 0.8 rectangle 20,10 30,50 \u0026#34; \\  -draw \u0026#34;fill-opacity 0.6 rectangle 35,10 45,50 \u0026#34; \\  -draw \u0026#34;fill-opacity 0.4 rectangle 50,10 60,50 \u0026#34; \\  -draw \u0026#34;fill-opacity 0.2 rectangle 65,10 75,50 \u0026#34; \\  -draw \u0026#34;fill-opacity 0 rectangle 80,10 90,50 \u0026#34; \\  set_fill_opacity.gif # Plain and Dashed Lines convert -size 100x60 xc:skyblue -fill none -stroke black \\  -draw \u0026#34; path \u0026#39;M 10,10 L 90,10\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 5 3 path \u0026#39;M 10,20 L 90,20\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 5 5 path \u0026#39;M 10,30 L 90,30\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 10 3 3 3 path \u0026#39;M 10,40 L 90,40\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 1 6 path \u0026#39;M 10,50 L 90,50\u0026#39;\u0026#34; \\  set_lines.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34; path \u0026#39;M 10,10 L 90,10\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 5 3 path \u0026#39;M 10,20 L 90,20\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 5 5 path \u0026#39;M 10,30 L 90,30\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 10 3 3 3 path \u0026#39;M 10,40 L 90,40\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-dasharray 1 6 path \u0026#39;M 10,50 L 90,50\u0026#39;\u0026#34; \\  set_lines_fill.gif # Note: Technically the second image should be the same as the first # as the \u0026#39;filled\u0026#39; lines contain no area. This I regard as a BUG. # Stroke Ends and Joins convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth 8 \\  -draw \u0026#34; path \u0026#39;M 20,20 L 20,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-linecap butt path \u0026#39;M 40,20 L 40,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-linecap round path \u0026#39;M 60,20 L 60,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-linecap square path \u0026#39;M 80,20 L 80,70\u0026#39;\u0026#34; \\  set_endcaps.gif convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth 5 \\  -draw \u0026#34; path \u0026#39;M 5,70 L 20,20 35,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-linejoin miter path \u0026#39;M 35,70 L 50,20 65,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-linejoin bevel path \u0026#39;M 55,70 L 70,20 85,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-linejoin round path \u0026#39;M 75,70 L 90,20 105,70\u0026#39;\u0026#34; \\  set_linejoin.gif convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth 5 \\  -draw \u0026#34; path \u0026#39;M 5,70 L 20,20 35,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-miterlimit 7 path \u0026#39;M 35,70 L 50,20 65,70\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke-miterlimit 6 path \u0026#39;M 65,70 L 80,20 95,70\u0026#39;\u0026#34; \\  set_miterlimit.gif stroke-miterlimit 的设置是相当难以演示的。这个属性定义了将 miter 连接变为 bevel 连接的角度。基本上对于非常尖锐的角度，一个斜面可以从两条线的实际接合处延伸很长的距离。这就为这个锐角设置了一个最大限度，当它变得太长时，就会使角点变钝。但请注意，它代表的是某种角度的三角值，而不是长度或距离。该值必须大于1.0。\n上面显示了对于我所显示的连接角度，斜角会突然转换成一个介于6到7之间的斜角。\n例如，1.414 的 troke-miterlimit 会将小于90度的任何角度的 \u0026ldquo;miter\u0026rdquo; 转换为 bevel 。4.0的 值（默认值）将小于约29度的角度转换为连接。而10.0的值可以将小于约11.5度的角度转换为斜面。\nSVG s路径绘制 SVG 路径是 SVG 的基本绘图原语。它用于绘制线型、圆、曲线、弧线等。SVG 路径的完整规范可以在 SVG 路径规范文档中找到。\n然而这并不是一个容易阅读的文档，因为它确实是为程序员而不是用户准备的，所以我将简化和总结路径规范\u0026hellip;\n 字母是命令，而所有的数字（浮点）都是参数 逗号或空格可以作为参数分隔符，否则完全忽略 每个路径组件的最后两个参数 (x,y) 将成为该路径组件的终点(或\u0026quot;结\u0026rdquo;) 大写字母是指最终点的绝对坐标 小写字母是相对于前一个组件的终点而言的 例如 \u0026ldquo;M 1,2 L 3,4 L 2,4\u0026rdquo; 和 \u0026ldquo;M 1,2 L 4,6 L 6,2\u0026rdquo; 是一样的。 即在1,2上加了3,4，画线到4,6。 然后在1,2上加2,4，画出一条线到最后的坐标6,2。 每个元素的参数可以重复，不需要重新发布相同的路径字母，可以多加数字参数组。不过对于曲线，为了方便阅读，我建议你还是加上函数字母。 重复的参数 \u0026ldquo;M\u0026rdquo; 或 \u0026ldquo;m\u0026rdquo; 分别作为 \u0026ldquo;L\u0026rdquo; 或 \u0026ldquo;l\u0026rdquo; 处理。 例如：\u0026rdquo; M 1,2 3,4 5,6 \u0026quot; 和 \u0026quot; M 1,2 L 3,4 L 5,6 \u0026quot; 是一样的。 而：\u0026ldquo;m 1,2 3,4 2,4 \u0026quot; 与 \u0026quot; m 1,2 l 3,4 l 2,4 \u0026quot; 相同。 对于立方贝塞尔，所有的点（控制点和结点）都是相对于前一个路径组件的端点而言的。  请注意，您可以用绝对坐标或相对坐标来指定对象。因此，你可以用相对坐标来定义一个对象，只需提供一个初始的绝对\u0026quot;移动\u0026quot;坐标来定位整个路径。\n另一方面，你也可以使用其他的\u0026quot;图形内容\u0026quot;命令来移动整个图形在\u0026quot;视图框\u0026quot;或\u0026quot;转换\u0026quot;中的位置（见下文）。因此，在 SVG 路径中使用绝对或相对坐标并不重要。 移动、线条和路径闭合是学习 SVG 对象路径的最初起点。\n# Open, Completed and Closed Paths (same points) convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 40,10 L 20,50 90,10 70,40\u0026#39;\u0026#34; path_open.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 40,10 L 20,50 90,10 70,40 40,10\u0026#39;\u0026#34; path_complete.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 40,10 20,50 90,10 70,40 Z\u0026#39;\u0026#34; path_closed.gif 但是请注意，\u0026lsquo;z\u0026rsquo; 只是关闭循环。它并没有创建一个单独的对象。因此，两个\u0026quot;关闭\u0026quot;的路径仍然被归类为一个单一的绘制对象，无论它们是重叠的还是完全断开的。\n这里我们展示了两个闭合但重叠的循环，在同一方向上绘制。由于只使用了一条路径，所以对象是一个单一的对象，fill-rule 设置控制了重叠区域的填充方式。\n# Overlapping Paths and Fill Rule convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;fill-rule evenodd \\ path \u0026#39;M 40,10 20,20 70,50 Z M 20,40 70,40 90,10 Z\u0026#39; \u0026#34; path_evenodd.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;fill-rule nonzero \\ path \u0026#39;M 40,10 20,20 70,50 Z M 20,40 70,40 90,10 Z\u0026#39; \u0026#34; path_nonzero.gif 由于对象围绕中心以相同的角度方向绘制，两个闭合的循环将包含一个周期值为2的区域，因此 evenodd 规则使得该区域未被填充，而非零的 nonzero 规则则将其填充。但是请注意，所有的路径都是可见的，因为它们实际上是同一个对象。\n绘制路径的方向是非常重要的，一般情况下，所有的路径相对于对象的'内部'应该绘制在完全相同的方向上。\n例如这里我将第二个对象画成与第一个对象相反的方向。因此，当两个对象重叠时，该区域被圈出 \u0026lsquo;0\u0026rsquo; 次。也就是说，无论使用什么 fill-rule，它都将是未被填充的，形成一个'洞\u0026rsquo;。\n# Overlapping Closed Objects, Second object drawn in reverse convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;fill-rule evenodd \\ path \u0026#39;M 40,10 20,20 70,50 Z M 20,40 90,10 70,40 Z\u0026#39; \u0026#34; path_rvs_evenodd.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;fill-rule nonzero \\ path \u0026#39;M 40,10 20,20 70,50 Z M 20,40 90,10 70,40 Z\u0026#39; \u0026#34; path_rvs_nonzero.gif 这意味着你可以在物体上产生一个\u0026quot;洞\u0026rdquo;，通过反转方向，使物体的\u0026quot;内部\u0026quot;保持在行进方向的同一侧。\n# An object with a reversed drawn hole! convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,10 20,55 70,50 80,5 Z M 50,20 60,40 40,30 Z\u0026#39; \u0026#34; path_with_hole.gif 无论 fill-rule 的设置如何，结果都是一样的，因为这个洞是'偶数'和'零\u0026rsquo;，所以是未填充的。\n当然，如果您使用一个完全独立的 path 元素，您将生成一个完全独立的对象。在这种情况下，fill-rule 不适用，而只是按照给定的顺序，将对象画在彼此的上方。\n# Separate paths are separate objects convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 40,10 20,20 70,50 Z\u0026#39; path \u0026#39;M 20,40 70,40 90,10 Z\u0026#39; \u0026#34; path_separate.gif 未来：坐标对准路径 \u0026ldquo;H\u0026rdquo; 和 \u0026ldquo;V\u0026rdquo;。\n椭圆弧是 SVG 路径的圆圈绘制功能\u0026hellip;\nlarge 和 sweep 参数特别重要，因为它们用于决定从起点到终点的四种弧线中的哪一种。\nlarge 和 sweep 这两个标志定义了四条弧线中哪一条弧线将连接这两个点。\n# Elliptical Arcs : A radius_x,y angle large,sweep x,y convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,15 0 0,0 70,20\u0026#39;\u0026#34; path_arc.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,15 0 0,1 70,20\u0026#39;\u0026#34; path_arc2.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,15 0 1,0 70,20\u0026#39;\u0026#34; path_arc3.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,15 0 1,1 70,20\u0026#39;\u0026#34; path_arc4.gif 第二个标志 sweep 简单地决定了弧线路径的方向的哪一边应该被绘制。\nlarge 标志是用来选择较长的路径，绕着椭圆的中心走。这是设置的角度的弧线将大于180度。如果关闭，你会得到较小的'弧\u0026rsquo;，不包含椭圆的中心，并且弧线的角度小于180度。\n用 \u0026ldquo;Z\u0026rdquo; 来关闭弧线，只是画出最后的直线段。\n要创建一个完整的椭圆或圆，你至少需要两个'弧线'段，从第一点到第二点，然后回到第一点。两条弧线都应该有相同的 sweep 设置，所以弧线将在不同的边上，有不同的移动方向。其中一条弧线应该有 large 的设置。\n# Closed and angled elliptical arcs (defined by two edge points) convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,20 20 0,0 70,20 Z \u0026#39;\u0026#34; path_arc5.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,20 20 1,1 70,20 Z \u0026#39;\u0026#34; path_arc6.gif convert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 30,20 20 0,0 70,20 \\ A 30,20 20 1,0 30,40 Z \u0026#39;\u0026#34; path_arc7.gif 请注意，如果直线太长，在给定的角度下无法适应给定的椭圆大小，椭圆的大小将被放大，以适应以椭圆为中心的直线，这意味着通过使用小数字作为轴半径，你可以只指定轴长的比例，并保证直线路径通过椭圆的中心点。\n这意味着，通过使用小数字的轴半径，你可以只指定一个轴长的比例，并保证直线路径穿过椭圆的中心点。也就是说，路径从椭圆的一侧到另一侧形成一个椭圆直径。这并不是椭圆的主轴或次轴，只是一个椭圆的直径。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 3,2 45 0,0 70,20\u0026#39;\u0026#34; path_arc_x.gif 当然，使用长度为 \u0026ldquo;1,1\u0026rdquo; 的结果是一个完美的半圆，从一个点，到下一个点。在这种情况下，椭圆角不会有任何区别。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 1,1 0 0,0 70,20\u0026#39;\u0026#34; path_hcircle.gif 对于以两点为中心的全圆，用\u0026hellip;\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 1,1 0 0,0 70,20 A 1,1 0 1,0 30,40 Z\u0026#39;\u0026#34; path_circle.gif SVG 对 \u0026ldquo;弧线\u0026quot;的定义也声明，如果两个半径中的任何一个是0，那么就应该画一条直线。因此，任何半径为 \u0026ldquo;0,0\u0026rdquo; 的圆弧，都只是一条简单的直线圆弧\u0026hellip;\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 0,0 0 0,0 70,20\u0026#39;\u0026#34; path_arc_line.gif 如果你为弧线指定了一个非常大的半径，而没有为回程路径指定 large sweep，你可以在两点之间创建该半径的透镜形状。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 30,40 A 50,50 0 0,0 70,20 A 50,50 0 0,0 30,40 Z\u0026#39;\u0026#34; path_lens.gif 这种类型的弧线是一个关键特征。它可以让你很容易地把原本是直线的东西变成一条小而明显的曲线。\n例如，与其说是一个简单的三角形，不如说是一个\u0026hellip;\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 20,55 L 25,10 L 70,5 L 20,55 Z\u0026#39; \u0026#34; triangle.gif 你可以用一个大半径的弧线代替每条线，让它们只是有轻微的曲线。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 20,55 A 100,100 0 0,0 25,10 A 100,100 0 0,0 70,5 A 100,100 0 0,0 20,55 Z\u0026#39; \u0026#34; triangle_curved.gif 线条的端点没有变化，所发生的只是每个 \u0026ldquo;L\u0026rdquo; 被一个弧线段代替。然而弧线的大小应该与线的长度成正比。由于我没有这样做，较长的对角线比其他两条线有更深的曲线。\n请记住，当调整对象的大小或比例时，你也应该将半径的比例与线的长度相同，这样曲线的大小就会相应地调整，所以弧线的比例也会正确。\n请注意，sweep 标志可以控制曲线是向外凸起还是向内凸起，这取决于每个路径段的绘制方向(见上文)。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 20,55 A 100,100 0 0,0 25,10 A 100,100 0 0,1 70,5 A 100,100 0 0,1 20,55 Z\u0026#39; \u0026#34; triangle_bulge.gif 看起来 \u0026ldquo;静态\u0026quot;的直边三角形，现在看起来有点像充满风的帆。\n如果你真的想让线条完美的直，而不把它们转换回真正的线段，你可以通过使用弧线半径为零来关闭曲线。\n因此，弧线不仅适合生成椭圆和圆，而且对于绘制直线和微曲线段也很有用。它是一种非常通用的通用点到点的绘制路径。\n使用椭圆弧来生成分离的曲线段的一个简单的替代方法是使用四元贝塞尔段来代替，主要的区别是使用一个单一的控制点，而不是一个圆形半径来定义弧线。这也允许您将弧线偏向线段的一端，但代价是难以生成对称的弧线。\n当然，您也可以通过使用这两种方法来进行 mix-n-match。\n饼图示例 为了完成对弧线的使用，让我们举个例子，使用为它们生成圆楔。当然，你可能需要使用一些外部的三角数学（你的高中数学有多好？）来确定所需的最终路径点。\nconvert -size 140x130 xc:white -stroke black \\  -fill red -draw \u0026#34;path \u0026#39;M 60,70 L 60,20 A 50,50 0 0,1 68.7,20.8 Z\u0026#39;\u0026#34; \\  -fill green -draw \u0026#34;path \u0026#39;M 60,70 L 68.7,20.8 A 50,50 0 0,1 77.1,23.0 Z\u0026#39;\u0026#34; \\  -fill blue -draw \u0026#34;path \u0026#39;M 68,65 L 85.1,18.0 A 50,50 0 0,1 118,65 Z\u0026#39;\u0026#34; \\  -fill gold -draw \u0026#34;path \u0026#39;M 60,70 L 110,70 A 50,50 0 1,1 60,20 Z\u0026#39;\u0026#34; \\  -fill black -stroke none -pointsize 10 \\  -draw \u0026#34;text 57,19 \u0026#39;10\u0026#39; text 70,20 \u0026#39;10\u0026#39; text 90,19 \u0026#39;70\u0026#39; text 113,78 \u0026#39;270\u0026#39;\u0026#34; \\  piechart.jpg 请注意，所有的弧线都是画在 line path 的左边，并有相应的标志（使用 sweep 标志）。但如果弧线覆盖的角度大于180度，则需要设置 large 标志。见上面例子中最后一个 gold 组件。\n还要注意的是，你应该完整地画出每个部分，尽管这意味着你可能要画两次边界线。如果你不这样做，你很可能要么不会完全用颜色填充该部分，要么填充颜色会覆盖之前绘制的部分轮廓。\n避免重复绘制多条线的唯一方法是绘制所有填充区域，然后重复这样绘制轮廓。就是说你需要把所有的东西都画两遍，确保东西正确匹配。因此，将轮廓加倍可能是最简单的解决方案。\n立方贝塞尔曲线可以使用 c 函数定义两个控制点，以及最终的终点。对于使用最后一个控制点的镜像的持续立方贝塞尔曲线（对于连续曲线），你可以使用 s 函数。\n下面是一个例子。由于这个函数的复杂性，我预先准备了一个画布，显示控制点的位置，以及最后一个控制点的 assumed mirror。\n# Cubic Bezier: C control_1_x,y control_2_x,y x,y # Smooth \u0026#34; : S control_2_x,y x,y convert path_cubic_canvas.gif -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 10,30 C 10,4 50,4 50,30 S 90,55 90,30\u0026#39; \u0026#34; \\  path_cubic.gif 连接控制点和该路径段路径上的最终点的线（控制线）基本上定义了通过路径上该点的曲线方向。长的控制线会在该点产生一条更平滑的曲线，而短的控制线则会在该点产生一条更清晰的曲线。如果控制点与曲线的点相吻合（控制线长度为零），则曲线在该点有一个尖锐的不连续性，就像只用直线段一样。\n作为一个更实际的例子，下面的代码是从 IM 实例 Logo 生成器脚本中提取出来的，该脚本创建了 IM 实例 Logo 的曲线溅射区域。\n这个例子的棘手之处在于，我将我使用的立方贝塞尔路径字符串，转换为另一个路径，显示用于生成贝塞尔曲线的控制线。这让我可以看到曲线的控制线角度和长度，使得调整结果变得更加容易。只需要调整一组点就可以同时显示曲线和控制线，将错误控制在最小范围内。\ncurve=\u0026#34;M 12,27 C 7,37 18,50 18,60 S 0,80 10,94 S 40,74 50,78 S 60,99 76,95 S 72,70 75,65 S 95,55 95,42 S 69,37 66,32 S 67,2 53,7 S 43,17 35,22 S 17,17 12,27 Z\u0026#34; c_ctrls=`echo $curve | \\  sed \u0026#39;1s/\\([0-9]\\) *\\([0-9]\\)/\\1 M \\2/; s/S/M/g; s/C/ /;\u0026#39; -` convert -size 100x100 xc:white \\  -draw \u0026#34;stroke None fill Green path \u0026#39;$curve\u0026#39;\u0026#34; \\  -draw \u0026#34;stroke Red fill None path \u0026#39;$c_ctrls\u0026#39;\u0026#34; \\  curvy_splash.gif 如果你仔细观察图像，你会发现曲线的起点和终点有两条方向相反的控制线。对于一个封闭的连续路径来说，开始和结束的控制线应该在相同的角度（只是在镜面方向），当然也应该是相同的长度。这一点很重要，因为很容易弄错。\n沿着曲线的所有其他点只有一个控制点/线，它与曲线的绘制方向相反。该线段越长，曲线在该控制点处的 sharp 越低，长度为零则产生一个 point。\ns 函数在内部根据前一段的数据生成下一段的镜像控制点/线，从而产生曲线的平滑延续。\n关于这个路径函数的更多例子，请看《SVG：立方贝塞尔曲线命令》。\n手动生成贝塞尔曲线是比较直接的，不需要任何花哨的 GUI 工具。\n 首先定义所有你想让曲线经过的坐标点，在列表的最后重复起始坐标。 现在将这个列表扩大，将所有的 x,y 坐标点加倍成对，并在每对坐标点前添加一个 s（Smooth Cubic）函数。每对中的第一个数字是控制点，连接到第二个数字代表曲线上的点。然而第一个点对却把这一点反过来了，第一个点是曲线的起点，第二个点代表第一个也是唯一一个反转的控制点。 将第一对坐标的函数字母由 \u0026lsquo;S\u0026rsquo; 改为 \u0026lsquo;M\u0026rsquo;，然后在这对坐标之间加一个 \u0026lsquo;C\u0026rsquo;。最后将第二对坐标的 \u0026lsquo;S\u0026rsquo; 去掉，完成初始的立方体（\u0026lsquo;C\u0026rsquo;）函数。 通过添加最后的 \u0026lsquo;Z\u0026rsquo; 来完成路径，关闭曲线。 请看上面的示例序列，它应该是怎样的。 此时您可以测试绘制您的路径。由于所有的控制线长度为零，所以路径将只由直线段组成。 现在您需要做的就是慢慢地、小心地调整控制线段的位置（每个 \u0026ldquo;S\u0026rdquo; 对的第一个坐标），以得到您想要的最终曲线。不要把控制线做得太长，或者方向不对，否则你会得到一条看起来非常滑稽的曲线。 为了帮助查看你的变化和发现错误，请使用上面的转换 \u0026ldquo;sed\u0026rdquo; 命令来绘制路径控制点和曲线控制点之间的控制线。但是请注意，零长度的控制线是不可见的，但是由于lin会产生一个尖锐的点，所以位置应该很明显。 最后，确保 \u0026ldquo;C\u0026rdquo; 之后的第一条控制点/线与终点控制点/线的位置完全相反。  交互式曲线的生成也可以通过使用一些矢量图形编辑器来实现。\n例如 Luis Guerra 报告说，\u0026ldquo;Inkscape\u0026rdquo; 生成的贝塞尔曲线可以使用 \u0026ldquo;Edit -\u0026gt; XML Editor\u0026rdquo; 功能，然后选择你想要控制点的路径或形状。\n 你知道有什么其他的方法可以用GUI工具来提取贝塞尔曲线（在曲线上每个点给出两个或一个控制点）。或者是一些其他的技术来生成这样的曲线？请发邮件给我! 我很乐意听到它。你将会像其他人一样，被记入该技术的名下。\n 二次方贝塞尔函数是立方贝塞尔函数的简化，当两个控制点合并成一个控制点时。同样，你可以用 \u0026lsquo;Q\u0026rsquo; 函数开始曲线，然后用 \u0026lsquo;T\u0026rsquo; 函数继续曲线，镜像最后一个控制点。\n# Quadratic Bezier: Q control_x,y x,y # Smooth \u0026#34; : T x,y convert path_quad_canvas.gif -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 10,30 Q 20,4 50,30 T 90,30\u0026#39; \u0026#34; \\  path_quad.gif 但我要提醒您，\u0026ldquo;T\u0026rdquo; 继续函数只适用于连接间距相等的点的路径。我不推荐使用它。\n二次方曲线的优点是可以替代椭圆弧，因为它使用的是实际的位置，而不是弧线的半径。它也可以使弧线偏向于一端而不是另一端，这在使用椭圆弧时并不实用。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;path \u0026#39;M 20,55 Q 30,32 25,10 Q 50,1 70,5 Q 50,45 20,55 Z\u0026#39; \u0026#34; triangle_bulge_2.gif 在这种情况下，弧线不是那么均匀，你得到的东西就像一个倒立的鲨鱼鳍，而不是一个帆。\n请记住四边形弧线是抛物线，而椭圆弧线基本上是生成圆弧线段。这可能是决定你应该使用哪种类型的弧线段的关键。\n有关此路径功能的更多例子，请参见：SVG: Quadratic Bezier Curve Commands。\n绘图表面的变形 在这些能力之上，绘制对象的绘图表面可以以各种方式变形，让你做一些令人惊奇的事情。\n首先，你可以应用一些通用的绘图表面修改，比如\u0026hellip; \u0026ldquo;translate\u0026rdquo;、\u0026ldquo;rotate\u0026rdquo;、\u0026ldquo;scale\u0026rdquo;、\u0026ldquo;skewX\u0026rdquo;、\u0026ldquo;skewY\u0026rdquo; 和 \u0026ldquo;affine\u0026rdquo;。\n例如，给定一个线条的 path，我们可以 translate 绘图表面的原点或0,0点到另一个位置。\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;translate 50,30 image over 3,3 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; transform_translate.gif 请注意，\u0026ldquo;0,0\u0026rdquo; 或绘图区域的原点现在以图像为中心，尽管Y轴在图像的顶部仍然是负数，在底部仍然是正数。\nrotate 操作将旋转绘图表面，所以以后在该表面上绘制的任何东西都将被旋转绘制。当然，它会围绕转换后的原点进行旋转，所以最好同时使用这两个变换运算符。\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;translate 50,30 rotate -30 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; transform_rotate.gif scale 将放大和缩小原点周围的绘图面。\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;translate 50,30 scale 1.5,1.5 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; transform_scale.gif 一个常见的 scale 用法是将Y轴翻转，使Y的正值向上。当然原点也应该移到中心，或者左下角，以保持秩序。\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;translate 50,30 scale 1,-1 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; transform_flip.gif 最后，\u0026ldquo;skewX\u0026rdquo; 和 \u0026ldquo;skewY\u0026rdquo; 在X和Y方向上对图像进行剪切。例如，这里我们使用 \u0026ldquo;skewX\u0026rdquo; 给图像的垂直Y轴一个倾斜。\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;translate 50,30 skewX 20 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; transform_skewY.gif 这些操作符在 MVG -draw 字符串之外有对应的操作符，供一般使用。但是这些命令行版本是运算符，并且立即应用于内存中已经存在的图像，而不是应用于尚未绘制的矢量对象的绘制表面。更多细节请看扭曲图像。\n绘制表面的平移变形 上述所有五种画布变换都可以组合成一个通用的 Affine Matrix Operator，可以使用 MVG 原语 \u0026ldquo;affine\u0026rdquo;，也可以在调用 -draw 之前使用 -affine 设置 Affine 变换。\nAffine 变换使用一组 \u0026ldquo;Matrix Coefficients\u0026rdquo;，它定义了如何将你给出的坐标修改为实际的绘图坐标。\n关于这些 \u0026ldquo;coefficients\u0026rdquo; 如何工作的更多细节，请参阅 Affine Matrix Transforms。\n例如\u0026hellip; 要设置一个相对于对象绘制时的中心原点\u0026hellip;\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;affine 1,0,0,1,50,30 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; affine_null.gif 翻转图像\u0026hellip;\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;affine 1,0,0,-1,50,30 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; affine_flip.gif 绕原点旋转30度\u0026hellip;\nconvert -size 100x60 xc:skyblue \\  -draw \u0026#34;affine .866,-.5,.5,.866,50,30 image over 4,4 0,0 \u0026#39;terminal.gif\u0026#39; fill white stroke black path \u0026#39;M 0,20 -45,20 20,-25 -25,-25\u0026#39; fill none stroke red path \u0026#39;M 0,10 0,-10 M 10,0 -10,0\u0026#39; \u0026#34; affine_rot.gif 对于更复杂的仿射变换，您可以使用为此目的创建的仿射辅助脚本。这些脚本将诸如旋转角度和中心点之类的东西转换为 Affine 坐标，你可以直接在 -draw affine 或 -affine 设置中使用。\n推/弹上下文 一些 MVG 原语实际上依赖于这些变换的使用才能正确使用。例如，椭圆原语只能用正交对齐的轴直接指定。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;ellipse 50,30 30,15 0,360\u0026#34; ellipse_orthogonal.gif 然而，通过使用绘图变换，我们可以很容易地给椭圆添加一个\u0026quot;旋转角\u0026rdquo;。\nconvert -size 100x60 xc:skyblue -fill white -stroke black \\  -draw \u0026#34;push graphic-context translate 50,30 rotate 30 fill white stroke black ellipse 0,0 30,15 0,360 pop graphic-context\u0026#34; ellipse_rotated.gif 请注意，椭圆的 center(旋转点)在应用旋转之前首先被转换。然后，ellipse 在 \u0026ldquo;0,0\u0026rdquo; 处的转换位置被绘制。\n上面还显示了两个新的 MVG 绘图原语。\u0026lsquo;push graphic-context\u0026rsquo; 和 \u0026lsquo;pop graphic-context\u0026rsquo;。在上面的例子中，并不是严格意义上的需要，但在进行主要的绘图转换时，建议使用这两个原语。\npush 和 pop 原语的作用是保存当前的绘图状态或 \u0026ldquo;graphic-context\u0026rdquo;，然后再次恢复。在这两个原语之间更改的任何绘图设置都会被遗忘。这包括曲面变形（如 \u0026ldquo;平移 \u0026ldquo;和 \u0026ldquo;旋转\u0026rdquo;）、颜色设置 fill 和 stroke 或任何其他修改了绘图 state 的设置。\n这些原语使您可以轻松地绘制具有许多变换的非常复杂的对象，然后将事物恢复到更 \u0026ldquo;正常\u0026quot;的状态，以便以后进行绘制操作。您可以在下面的绘制箭头中看到更实用的演示。\n推/弹特殊对象 建设中 更多专门用于 MVG 处理 SVG 格式的设置。\n font-family font-stretch font-style font-weight encoding 'UTF-8' push defs push gradient 'def_name' linear X1,Y1 X2,Y2 stop-color 'color' where stop-color 'color' where # where is a point between the two pixels given (0 = X1,Y1 1= X2,Y2) gradient-units 'objectBoundingBox|userSpaceOnUse' affine .... pop gradient push gradient 'def_name' radial CX,CY FX,FY R # Here CX,CY is the center of the radial gradient of radius R # the FX,FY is the focal, and is usually the same a CX,CY # unless you are trying to warp the gradient in a specific direction stop-color 'color' where ... pop gradient pop defs push graphic-context fill 'url(#def_name)' ... draw things here ... pop graphic-context 例子见 Florent Monnier 的开发网站\u0026hellip; http://www.linux-nantes.fr.eu.org/~fmonnier/OCaml/MVG/。\n阅读 MVG 文件 正如你在上面的例子中所看到的，MVG 的 -draw 参数可以变得很长。事实上，SVG 到 MVG 的转换可以产生一些非常长的 MVG 绘图参数（见下文）。\n然而，IM 的一般命令行界面允许您通过使用 \u0026quot;@filename\u0026quot; 参数从文件中读取任何字符串参数。这很方便，因为这意味着你可以从一个单独的文件中读取非常长和复杂的MVG绘图命令。\n例如，如果我将 MVG 操作放入一个名为 \u0026ldquo;draw_circles.mvg\u0026rdquo; 的文件中，那么我就可以像这样绘制\u0026hellip;\nconvert -size 100x60 xc:skyblue -draw @mvg_circles.mvg mvg_draw.gif 不仅如此，ImageMagick 还懂得直接读取 \u0026ldquo;MVG:\u0026rdquo; 图像文件格式，让你可以更直接地绘制此类命令。然而，除非 MVG文 件定义了一个画布，否则你可能需要指定初始画布（ -size 和\u0026rdquo;-background\u0026rdquo;）来绘制。\nconvert -size 100x60 -background limegreen mvg_circles.mvg mvg_file.gif 你可以通过在 MVG 文件中添加一个 \u0026ldquo;viewbox\u0026rdquo;，并添加适当的背景色填充绘制，将初始画布设置移动到 MVG 图像中。这样就完成了 MVG 图像文件作为一个完整的图像定义。\nconvert mvg_circles2.mvg mvg_image.gif  目前只有一种方法可以从 MVG 参数字符串中读取外部 MVG 文件，那就是使用 \u0026ldquo;图像 \u0026ldquo;绘图原语。遗憾的是，这将 MVG 的 include 转换为光栅图像，然后再将该图像覆盖到绘图表面。 换句话说，目前还没有MVG的 \u0026ldquo;include\u0026quot;功能。 :-(\n 建设中 您可以生成IM的低级绘制操作，使用 `+render 来记录它们。\n当你再给 -render 设置/操作时，IM将立即绘制这些保存的操作。\n奇怪的是，仅仅输出到 \u0026ldquo;MVG\u0026rdquo; 文件似乎也能做到这一点\u0026hellip;\u0026hellip;。\nconvert ... -draw \u0026#39;....\u0026#39; draw_commands.mvg 注意：如果你在输出 MVG 格式文件时画了一条曲线，文件中会列出以下内容。曲线是一系列的短线段，而不是原始曲线。\n当然您也可以完全使用更通用的 SVG 格式。参见下面的 \u0026ldquo;SVG 格式处理\u0026quot;。\nMVG 阿尔法构成 建设中 我没有看到任何使用 Alpha 构图的情况（除了 painters 的算法之外）。基本上是一种 \u0026ldquo;over\u0026rdquo; alpha 合成）来绘制对象。\n然而，这并不是说不能这样做。\n如果你喜欢将你的矩形、椭圆、圆形或其他物体用不同的阿尔法成分（如 \u0026ldquo;DstOver\u0026rdquo;，这是一个类似于 Under 的成分），然后在空白的透明画布上画出你的人物，同样的构图，并将其合成到您的图像上。\n然而，由于 SVG 允许您使用 alpha 合成来绘制文本和其他的图像，因此，您可以使用 SVG 来绘制图像项目到图像上，我想这将是一个未来的补充。\n敬请期待\n绘制符号 有时你在图像上有一组点，你想在那里绘制参考符号，如十字、圆圈等。遗憾的是，目前IM还没有可以轻松绘制这类符号的命令，但只要稍加努力，你就可以绘制这类符号。\n符号绘制技巧 在给定的位置列表中绘制多个符号的诀窍是使用 shell 脚本或任何你正在使用的 API 生成 MVG 绘图命令，以便将给定的点集转化为适当的绘图命令集。 例如，我在这里将一条线上的点转换为每一个点的\u0026quot;加号\u0026rdquo;\u0026hellip;\n# Define a string of X and Y coordinates # comma between values, space between coordinates. points=\u0026#34;6.6,7.7 25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3 92.5,66.6\u0026#34; # convert each point into a draw command for a cross (using \u0026#39;awk\u0026#39;) # the \u0026#39;tr\u0026#39; converts spaces into \u0026#39;newlines\u0026#39; (one point per line). crosses=`echo $points | tr -s \u0026#39; \u0026#39; \u0026#39;\\012\u0026#39; |\\  awk -F, \u0026#39;{ print \u0026#34;line \u0026#34; $1-3 \u0026#34;,\u0026#34; $2 \u0026#34; \u0026#34; $1+3 \u0026#34;,\u0026#34; $2 ; print \u0026#34;line \u0026#34; $1 \u0026#34;,\u0026#34; $2-3 \u0026#34; \u0026#34; $1 \u0026#34;,\u0026#34; $2+3 ; }\u0026#39; -` # draw a red line between the points, and blue crosses on the points. convert -size 100x100 xc:white \\  -draw \u0026#34;fill none stroke red polyline $points\u0026#34; \\  -draw \u0026#34;fill none stroke blue $crosses\u0026#34; \\  points_plus.gif 上面使用 \u0026ldquo;tr\u0026rdquo; 将每个点（两个数字）分成每条线上的一个点，然后使用 \u0026ldquo;awk\u0026rdquo; 进行所有数学计算，在给定的点上绘制\u0026quot;加号\u0026rdquo;。你可以使用任何你喜欢的东西，因为我只是在输入点列表上应用了一种文本宏扩展的形式。几乎所有的编程语言都可以做到这一点。对于上面的shell脚本案例，我只是发现 \u0026ldquo;awk\u0026rdquo; 是最简单、最快的手段。\n其实你甚至可以使用 Imagemagick 本身的 \u0026ldquo;convert\u0026rdquo; 格式选项来进行这种 \u0026ldquo;macro\u0026rdquo; 的扩展\u0026hellip;比如这里我用它来计算圆周上的一个点，对于这个\u0026quot;点符号\u0026rdquo;。\n# Define a string of X and Y coordinates # comma between values, space between coordinates. points=\u0026#34;6.6,7.7 25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3 92.5,66.6\u0026#34; # circle radius (or symbol size) to draw around each point. radius=3.5 # convert each point into a draw command for a cross # In this case, points are space separated by the shell circles=$(for point in $points; do x=$(echo \u0026#34;$point\u0026#34; | cut -d, -f1) y=$(echo \u0026#34;$point\u0026#34; | cut -d, -f2) # use IM to do some floating point math, EG: y2=$y+$radius y2=$(convert xc: -format \u0026#39;%[fx:\u0026#39;\u0026#34;$y\u0026#34;\u0026#39;+\u0026#39;\u0026#34;$radius\u0026#34;\u0026#39;]\u0026#39; info:) echo \u0026#34;circle $x,$y$x,$y2\u0026#34; done) # Draw a red line between the points, and blue circles on the points. convert -size 100x100 xc:white \\  -draw \u0026#34;fill none stroke red polyline $points\u0026#34; \\  -draw \u0026#34;fill none stroke blue $circles\u0026#34; \\  points_circle.gif 现在，您生成的绘制字符串可能会变得相当长，并且可能会开始导致您的最终命令的长度问题。所以，与其将点转换成长字符串，然后我们在命令行上传递给 IM，不如将绘制命令以文件的形式管道化给 IM。\n我这次也使用了 SVG 路径的绘制方法来代替 Draw Primitive 的绘制方法。另外我生成的符号是每个点周围的三角形。\n# Define a string of X and Y coordinates # comma between values, space between coordinates. points=\u0026#34;6.6,7.7 25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3 92.5,66.6\u0026#34; # convert each point into a draw commands to draw a triangle for point in $points; do echo \u0026#34;path \u0026#39;M $pointm 0,-5 -4,+8 +8,0 -4,-8\u0026#39;\u0026#34; done |\\  convert -size 100x100 xc:white \\  -fill none -stroke red -draw \u0026#34;path \u0026#39;M $points\u0026#39; \u0026#34; \\  -fill none -stroke blue -draw \u0026#39;@-\u0026#39; \\  points_tri.gif SVG 路径实际上使这一点变得更容易，通过允许相对像素移动，允许你设计符号，所以它只需要一个单一的初始绝对移动\u0026rsquo;M\u0026rsquo;，然后再给出'移动'和'线'的序列来绘制符号。正因为如此，你实际上根本不需要任何浮点计算，因为IM draw会完成所需的定位数学。\n 相对移动SVG路径项\u0026rsquo;m'在IM v6.4.3-5之前被破坏了。如果你的IM比这更老，上面（和下一个）的例子可能什么也画不出来。您可以通过将上面的相对移动\u0026rsquo;m'替换为适当的相对线序列\u0026rsquo;l'来解决旧版本的问题。\n 现在你可以更进一步，将一个完整的MVG文件，包括画布规格，直接作为一个绘画命令的流水线输入到IM中。这次让我们做一个'十字\u0026rsquo;，这和上面第一个'加'的例子类似，需要大量的计算。\n# Define a string of X and Y coordinates # comma between values, space between coordinates. points=\u0026#34;6.6,7.7 25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3 92.5,66.6\u0026#34; # Generate a MVG file for IM to draw all components ( echo \u0026#34;viewbox 0 0 100 100 fill white rectangle 0,0 100 100\u0026#34; echo \u0026#34;fill none stroke red path \u0026#39;M $points\u0026#39;\u0026#34; echo \u0026#34;fill none stroke blue path \u0026#39;\u0026#34; for point in $points; do echo \u0026#34;M $pointm -2,-2 +4,+4 m -4,0 +4,-4\u0026#34; done echo \u0026#34;\u0026#39;\u0026#34; ) | convert mvg:- points_cross.gif 这使用了特殊的shell编程技术，在shell括号中 \u0026ldquo;echo\u0026rdquo; 的任何东西都将作为MVG文件被输入到最终的\u0026quot;转换\u0026quot;命令中。第一个 \u0026ldquo;echo\u0026rdquo; 定义并填充图像的绘图画布，而 \u0026ldquo;while\u0026rdquo; 循环则将每个 \u0026ldquo;点\u0026rdquo; 转换为一个给定半径的圆。\n这种方法的优点是，你不会受到任何字符串的限制，而使用其他两种方法可能会受到限制。\n其他你可以生成的符号包括方框、钻石、错误条等。\n也请参见下面的\u0026quot;绘制圆圈\u0026rdquo;，了解其他圆圈方法，包括不计算相对 \u0026ldquo;路径\u0026quot;的圆圈绘制。\n绘制符号的替代方法 除了直接绘制符号外，还有其他的方法可以将符号添加到图像中。\n符号字体 您可以从 Symbol Font 中提取符号，并将其保存为一个小位图。你也可以使用小的预定义但色彩丰富的图像来做这件事。\n然而这样做可能会出现问题，无法准确定位字体相对于特定像素的位置。也就是说这不是一个非常精确的技术。但是你可以在任何像素位置组成任何图像。例如这些符号是从一些字体中提取出来的，用于这些示例页面的具体使用。\n\u0026lt;= =\u0026gt; x + + + o o o o 在分层图像一节中给出了将图像合成到大背景上的例子。然而，循环的方法可能更有用，例如在分层图像的程序化定位中给出了。\n未来：使用坐标对图像进行分层的例子\n形态学 另一种选择是使用形态学，使用特殊的\u0026quot;形状\u0026quot;内核，如 \u0026ldquo;磁盘\u0026rdquo;、\u0026ldquo;环形 \u0026ldquo;和 \u0026ldquo;加\u0026rdquo;，甚至是你自己的用户定义内核，来 \u0026ldquo;稀释\u0026quot;单个像素。\n例如\u0026hellip;\nconvert -size 80x80 xc:black -fill white \\  -draw \u0026#39;point 20,15 point 55,30 point 40,60\u0026#39; points_pixels.gif convert points_pixels.gif -morphology Dilate Ring points_rings.gif convert points_pixels.gif -morphology Dilate Plus:4 points_pluses.gif convert points_pixels.gif -morphology Dilate Cross:3 points_crosses.gif 然后可以通过使用 Alpha Shape Operator 将结果直接转换为彩色叠加。\n这样做的最大好处是，你其实不需要知道每个符号的单独位置。或者有多少个符号。但这也可能是一个缺点。一个主要的缺点是，位置只在整数位置。你不能使用浮点 \u0026ldquo;子像素\u0026quot;定位来\u0026quot;绘制\u0026rdquo;。\n卷积 一个几乎相同的技术是使用 Convolve，使用专门设计的内核，它允许你设置不同的灰度，而不仅仅是一个简单的开/关结果，如上所述。\n通过使用不同的用户定义内核，为图像的每一个通道（红、绿、蓝和阿尔法），甚至可以从每个像素坐标创建多色符号。\n为此，我使用了一个我写的特殊脚本 image2kernel 来将彩色图像（见右图）转换为每个通道的独立浮点卷积核。\nimage2kernel -q marker.png marker.dat 这将生成四个文件，比如 marker_R.dat，每个通道都有一个非常小的输入图像，这是用户定义的图像表示（原点在图像中心）。\n现在使用这些内核数据文件，我们可以将这些单点在透明的背景上 Convolve 成我们彩色的标记图像。\nconvert points_pixels.gif -alpha off \\  \\( -clone 0 -morphology Convolve @marker_R.dat \\) \\  \\( -clone 0 -morphology Convolve @marker_G.dat \\) \\  \\( -clone 0 -morphology Convolve @marker_B.dat \\) \\  \\( -clone 0 -morphology Convolve @marker_A.dat \\) \\  -delete 0 -channel RGBA -combine point_markers.png  在IM v6.7.6-9之前，Combine Operator 要求图像的透明度通道以 \u0026ldquo;哑光\u0026quot;值而不是alpha值的形式给出，因此，由此产生的alpha通道需要被否定。EG:\n ... \u0026#34;`cat marker_A.dat`\u0026#34; -negate \\) \\ 只能使用小图像，像素点要足够分散，符号不要重叠。这是因为 Convolve 会将重叠的区域加在一起，使其比预期的更亮。\n以上内容已被转换成UNIX shell脚本 convolve_image，以方便使用。\nconvolve_image points_pixels.gif marker.png point_markers.png 这个技术源于IM论坛上的一个讨论-IM 的有趣体验。用户希望在足球场的背景图上放置小人，让他们的位置在图片中拼出一个人的名字。\n分层 一种不同的技术，如图像层，使用你从源图像中提取的像素列表进行定位，可能是更好的方法。你可以先叠加更远的符号图像，然后再叠加前景图像，你可以通过编程选择或随机选择什么符号替换什么点。\n关于这个例子，请看地图中的图钉。\n绘制圆圈 绘制选项为您提供了许多方法来完成一些非常基本的工作。绘制圆。\n例如，您可以在圆周上的任何一点上画一个圆，因此您需要计算一个中心点和一个半径为25像素的第二点。因此，您需要计算一个中心点和第二个点，这个点的半径（例如25像素）离第一个点的距离。\nconvert -size 100x60 xc: -stroke Firebrick -fill tomato -strokewidth 2 \\  -draw \u0026#39;circle 50,30 50,55\u0026#39; circle_circle.gif Fred Weinhaus 指出，通过使用平移，你可以消除计算圆边坐标的需要，而直接给出半径即可。\nconvert -size 100x60 xc: -stroke SeaGreen -fill PaleGreen -strokewidth 2 \\  -draw \u0026#39;translate 50,30 circle 0,0 25,0\u0026#39; circle_circle_trans.gif 但是当绘制多个圆时，上述操作需要对每个圆进行单独的 -draw 操作，或者使用 Context Pushing。\n使用椭圆可以直接指定半径为轴长\nconvert -size 100x60 xc: -stroke Sienna -fill Wheat -strokewidth 2 \\  -draw \u0026#39;ellipse 50,30 25,25 0,360\u0026#39; circle_ellipse.gif 你也可以用 stroke-lineecap round 画一条非常非常短的线来生成一个圆。描边的宽度可以设置圆的直径。注意线条必须有一定的长度（无论多小），否则画不出任何东西。\nconvert -size 100x60 xc: -stroke Blue -strokewidth 50 \\  -draw \u0026#39;stroke-linecap round line 50,30 50,30.0001\u0026#39; \\  circle_line.gif 这种技术，不幸的是不能勾勒出生成的圆，但对于覆盖大面积的区域，大笔触宽度是有用的。请看下面一些简单的例子。\n这种方法利用了 SVG 路径的绘制方法，所以可以在不需要计算任何额外坐标的情况下绘制圆形。\nconvert -size 100x60 xc: -stroke Blue -fill DodgerBlue -strokewidth 2 \\  -draw \u0026#34;path \u0026#39;M 50,30 m 0,25 a 1,1 0 0,0 0,-50 a 1,1 0 1,0 0,50\u0026#39;\u0026#34; \\  circle_path.gif 只有最初的绝对移动 \u0026lsquo;M\u0026rsquo; 是用来定义中心的，接下来的路径组件中的 \u0026lsquo;25\u0026rsquo; 和 \u0026lsquo;50\u0026rsquo; 是定义相对于这个中心的圆的半径和直径。\n 在IM v6.4.3-5之前，相对移动SVG路径项 \u0026lsquo;m\u0026rsquo; 是被破坏的。 如果您的IM比这更早，圆可能只显示为一个像素。您可以通过将上面的 \u0026lsquo;m\u0026rsquo; 替换为 \u0026lsquo;l\u0026rsquo; 来修复旧版本的问题。\n Fred Weinhaus 添加了以下贝塞尔圆的方法。它非常接近真实的圆（虽然不精确），并且需要进行浮点计算。\nr=25; cx=50; cy=30; x1=25; x2=75; # = cx ± radius y1=-3.25; y2=63.25; # = cy ± radius*1.275 convert -size 100x60 xc: -stroke Purple -fill Violet -strokewidth 2 \\  -draw \u0026#34;bezier $x1,$cy$x1,$y1$x2,$y1$x2,$cy\u0026#34; \\  -draw \u0026#34;bezier $x1,$cy$x1,$y2$x2,$y2$x2,$cy\u0026#34; \\  circle_bezier.gif 如果画一个精确的圆并不重要，你可以使用这个4 Bezier段 SVG 路径，它只使用圆的X和Y边界进行计算。\nr=25; cx=50; cy=30; x1=25; x2=75; # X bounds = cx ± radius y1=5; y2=55; # Y bounds = cy ± radius convert -size 100x60 xc: -stroke Tomato -fill Gold -strokewidth 2 \\  -draw \u0026#34;path \u0026#39;M $cx,$y1Q $x1,$y1$x1,$cyT $cx,$y2$x2,$cy$cx,$y1z\u0026#39;\u0026#34; \\  circle_bezier_path.gif 如果你喜欢一个完全相对于中心起点绘制的，你可以使用这种技术。只使用半径值，使其生成简单，只使用 API 中的字符串函数。\nconvert -size 100x60 xc: -stroke Orange -fill LemonChiffon -strokewidth 2 \\  -draw \u0026#34;path \u0026#39;M 50,30 m 0,25 q 25,0 25,-25 t -25,-25 -25,25 25,25 z\u0026#39;\u0026#34;\\  circle_bezier_path_rel.gif 你能想到其他画圆的方法吗？\n绘制箭头-定位、旋转和缩放符号 使用上述技术，你可以创建一个特殊的符号，如箭头，你可以定位，使其点在线的最末端，并画在它上面。如果你画的箭头后的线（典型的情况），那么箭头将被绘制在该行的顶部。\n然而，他们有三种类型的箭头，可以定义，每个类型的定义在不同的方式取决于它的使用。\n 测量时，你只是想用箭头头标记线的两端，以指示一些工程图中的测量极限。非常简单。 矢量，显示一些数值的方向和强度。例如在天气风图中。需要一个尾巴，0,0点就是尾巴的末端。通常情况下，这样的向量会形成一个大网格。 指标，指出一些细节。对于这个0,0点可能应该是箭尖，或者是箭头本身前面的一些距离。  测量箭头 简单地在一条线的末端添加一个箭头是比较容易做到的。基本上，您可以创建一个 \u0026lsquo;arrow head\u0026rsquo; 符号，并将其画在正确的位置。\n例如\u0026hellip;\narrow_head=\u0026#34;l -15,-5 +5,+5 -5,+5 +15,-5 z\u0026#34; convert -size 100x60 xc: -draw \u0026#39;line 10,30 80,30\u0026#39; \\  -draw \u0026#34;stroke blue fill skyblue path \u0026#39;M 80,30 $arrow_head\u0026#39; \u0026#34; \\  arrow_horizontal.gif 请注意，我画的符号，使其起点是线的最末端。这样一来，它就可以在之前画好的线上面向后画，形成一个非常漂亮的整齐的符号。\n箭头却有一个相关的方向。你可以在许多不同的角度创建大量的箭头定义，许多程序都这样做。但是既然箭头是一个矢量，那么为什么不把箭头作为一个矢量进行旋转呢。IM绘图命令内置了绘图旋转（Canvas Warping），所以让我们使用它们。\n这样做还有一个好处，就是把位置从箭头头的 path 定义中移出来，让你把整个路径指定为 constant\u0026hellip;\narrow_head=\u0026#34;path \u0026#39;M 0,0 l -15,-5 +5,+5 -5,+5 +15,-5 z\u0026#39;\u0026#34; convert -size 100x60 xc: -draw \u0026#39;line 25,55 70,10\u0026#39; \\  -draw \u0026#34;stroke blue fill skyblue translate 70,10 rotate -45 $arrow_head\u0026#34; \\  arrow_rotate.gif 如果你喜欢改变箭头的大小，可以在旋转后增加一个 scale 绘制选项。\narrow_head=\u0026#34;path \u0026#39;M 0,0 l -15,-5 +5,+5 -5,+5 +15,-5 z\u0026#39;\u0026#34; convert -size 100x60 xc: -draw \u0026#39;line 25,55 70,10\u0026#39; \\  -draw \u0026#34;stroke blue fill skyblue translate 70,10 rotate -45 scale 2,2 $arrow_head\u0026#34; \\  arrow_scale.gif 请注意，它是如何放大离开箭头的\u0026quot;尖端\u0026rdquo;，你指定的地方。这是处理箭头的一个非常重要的方面，因为它是唯一的终点，和角度的线，你正在添加箭头的事项。\ntransforms 的顺序是很重要的，而且实际上与它们实际被处理的顺序是相反的。也就是先将比例尺应用于座标，然后是旋转，再是平移。如果座标变换不是按照这个顺序进行的，我们最终也会对箭头的最终位置进行缩放，而不是我们期望的位置。\n另外由于比例尺有两个数字，而原来的箭头头符号是水平设计的（角度为零），所以可以分别将箭头的宽度与高度进行比例。同时注意笔画宽度也随着箭头的大小而缩放，保持一致。\narrow_head=\u0026#34;path \u0026#39;M 0,0 l -15,-5 +5,+5 -5,+5 +15,-5 z\u0026#39;\u0026#34; convert -size 100x60 xc: -draw \u0026#39;line 25,55 70,10\u0026#39; \\  -draw \u0026#34;stroke blue fill skyblue translate 70,10 rotate -45 scale 2,1 $arrow_head\u0026#34; \\  arrow_scale_aspect.gif 现在，当你在画布上翘起一个个箭头时，也许还有许多其他的绘画操作，你可能喜欢在一次 [\u0026quot;-draw\u0026quot;](https://imagemagick.org/Usage/option_link.cgi?draw) 操作中把它们全部画完。说要画线，然后在两端添加箭头，需要不同的颜色、位置、旋转，甚至可能是不同的比例。这意味着我们需要将画布翘曲的范围限制在每个单独箭头头的绘制上。如果你不限制范围，你可能会在以后开始影响到其他后面的绘制操作，永远不能很确定你生成的是什么。\n为了限制翘曲的范围（以及所有其他的绘图属性），您将涉及到的部分包裹在一个 graphic-context\u0026hellip;\narrow_head=\u0026#34;path \u0026#39;M 0,0 l -15,-5 +5,+5 -5,+5 +15,-5 z\u0026#39;\u0026#34; convert -size 100x60 xc: \\  -draw \u0026#34;stroke black fill none path \u0026#39;M 10,40 A 50,50 0 0,1 90,40\u0026#39; push graphic-context stroke blue fill skyblue translate 10,40 rotate 135 $arrow_headpop graphic-context push graphic-context stroke firebrick fill tomato translate 90,40 rotate 45 $arrow_headpop graphic-context \u0026#34; \\  arrow_context.gif push 主要是将当前所有的绘图属性保存起来，以备将来使用，而 pop 则恢复这些属性，用之前保存的设置替换任何设置（颜色、扭曲、位置等）。这意味着在 \u0026lsquo;popping\u0026rsquo; 之后，\u0026lsquo;canvas warp\u0026rsquo; 会被取消，画图会回到修改之前的状态。\n上述技术只是生成箭头的一种方法，在绘制箭头作为测量距离的一部分时，如在技术图纸中，是一种很好的方法。\n矢量箭头 如前所述，矢量既显示方向，又显示某个数值的强度。这意味着箭头的长度是可变的，箭头头可以在任何位置远离向量的起点。\n现在，你可以做一些沉重的数学计算的位置，箭头头应该是地方给定的向量的长度和角度，但他们是一个更好的方法，这让 ImageMagick 为你做这些计算。\n解决的办法是在 Warped Canvas Space 中画一条长度合适的水平线作为向量长度。当这条线画好后，只需将绘图空间再次转换到线的末端，而画布仍然是\u0026quot;扭曲的\u0026rdquo;(warped)。现在你的位置已经正确了，只要正确的旋转就可以像正常的那样画出矢量的 'arrow head'。\n例如，这里我以-35度角生成一个70像素长的矢量。\nvector_head=\u0026#34;path \u0026#39;M 0,0 l -15,-5 +5,+5 -5,+5 +15,-5 z\u0026#39;\u0026#34; indicator=\u0026#34;path \u0026#39;M 10,0 l +15,+5 -5,-5 +5,-5 -15,+5 m +10,0 +20,0 \u0026#39;\u0026#34; convert -size 100x100 xc: \\  -draw \u0026#34;stroke black fill none circle 20,50 23,50 push graphic-context stroke blue fill skyblue translate 20,50 rotate -35 line 0,0 70,0 translate 70,0 $vector_headpop graphic-context push graphic-context stroke firebrick fill tomato translate 20,50 rotate 40 $indicatortranslate 40,0 rotate -40 stroke none fill firebrick text 3,6 \u0026#39;Center\u0026#39; pop graphic-context \u0026#34; \\  arrow_with_tails.gif 指示箭头 在上面我还演示了一个指示箭头，指向之前矢量箭头的起点。\n然而我没有像之前那样画箭头，而是将它创建为一个反向的箭头符号，它的起始点距离原点（或起始点）10像素。这是一个符号位于我想要指示的位置，所以我实际上并不希望箭头直接在那个位置上面，而是离它稍微远一点。\n现在，虽然指示符比向量处理起来更简单，通常不需要可变长度，但你通常要在指示符的远端添加文字来指定指示的内容。和之前一样，计算这个位置可能很困难，何必呢。\n文字定位的解决方法也和向量一样。保留原来用于绘制指示箭头的翘曲空间，并将原点转换到该箭头的尾端（在翘曲空间中水平40像素）。现在我们已经重新定位了，我们可以围绕这个新的位置解除扭曲，这样你就可以像正常的那样绘制文本（有轻微的偏移）。\n不幸的是，虽然默认的文字对齐方式是\u0026quot;左\u0026rdquo;，但目前你不能在 MVG 中指定文字对齐方式，作为重力的单独设置。如果这是一个问题，请在 IM bugs 论坛上提出请求，希望文本对齐（作为独立于重力定位）能够成为现实，尤其是它实际上是 SVG 规范的一部分。\n绘制对象 宽广的色彩笔触 你不需要用路径或轮廓完全封闭填充区域，就能创造出各种形状。使用非常大和宽的笔触，你可以在画布上生成大面积的颜色和色块。\n例如，一个宽阔的笔触椭圆弧形可以生成一个漂亮的颜色区域，我实际上已经看到用于创建海报。\nconvert -size 100x100 xc: -fill none -stroke powderblue \\  -draw \u0026#39;stroke-width 70 ellipse -30,0 90,90 10,50\u0026#39; \\  -rotate 180 arc_background.gif 或者你可以生成一个小丑相当复杂的笑容。\nconvert -size 100x100 xc: \\  -draw \u0026#39;fill none stroke-linecap round stroke-width 40 stroke tomato ellipse 50,0 70,70 65,115 stroke-width 2 stroke black ellipse 50,0 70,70 60,120 stroke-width 40 stroke palegreen line 50,40 50,40.01\u0026#39; clown.gif 你能想出什么办法？请告诉我们。\n圆柱体 在 IM 论坛的讨论中，有一个关于使用 ImageMagick 绘制命令绘制圆柱体（特别是阴影圆柱体）的重要讨论。\n绘制圆柱体的诀窍是绘制 roundrectangle 原语，使其末端形成椭圆形。也就是说，如果圆柱体的宽度为 50 像素，则将矩形的角分别舍去 25 和 12 像素。这就是矩形宽度的一半，然后再减半。\n这样，一个圆柱体就变成了两个相互叠加的圆角矩形。第二个颜色填充的 'end oval' 的大小正好是两个角的两倍。例如\u0026hellip;\nconvert -size 60x100 xc:white -stroke snow4 \\  -fill chartreuse3 -draw \u0026#39;roundrectangle 5,5 55,95 25,12\u0026#39; \\  -fill chartreuse2 -draw \u0026#39;roundrectangle 5,5 55,29 25,12\u0026#39; \\  cylinder.gif 通过将第一种填充色替换为渐变色（使用记忆中的平铺技术），你可以让圆柱体看起来更像3D\u0026hellip;\u0026hellip;。\nconvert -size 60x100 xc:white -stroke snow4 \\  \\( -size 1x60 gradient:chartreuse1-chartreuse4 -rotate -90 \\  -write mpr:shading +delete \\) \\  -tile mpr:shading -draw \u0026#39;roundrectangle 5,5 55,95 25,12\u0026#39; +tile \\  -fill chartreuse2 -draw \u0026#39;roundrectangle 5,5 55,29 25,12\u0026#39; \\  cylinder_shade.gif 通过慢慢完善圆柱体的绘制（如IM论坛中讨论的那样），你可以走很长的路来生成非常复杂和具有视觉吸引力的圆柱体。这包括增加封闭半透明玻璃圆柱体、阴影效果和标签。\n该讨论的最终结果是一个脚本 \u0026ldquo;cylinder_bar\u0026quot;，生成一个圆柱体百分比条\u0026hellip;\u0026hellip;\ncylinder_bar 95 cylinder_95.png 该脚本可以生成任何尺寸的图像，根据该尺寸和脚本顶部定义的其他设置适当调整所有参数。还包括 glass thickness 的概念，在一个封闭的半透明玻璃圆柱体和内部的彩色圆柱体之间创造一个间隙。\n请注意圆柱体非常微妙的阴影，特别是当绿色圆柱体的末端与玻璃圆柱体的末端重叠时。只要稍加预想，就能做出惊人的效果。\n在文字串中绘制特殊字符 引号还是反斜杠？ 人们在使用 -draw 时遇到的最大的问题之一是绘制字符，这些字符对 UNIX shell 和 DOS 命令行甚至其他语言如 C、Perl、PHP、R 或 Visual Basic 都有特殊意义。\n在这方面最大的罪魁祸首是两种类型的引号字符，以及变量替换字符，如美元 '$' 和 shell 和 ImageMagick 的转义字符，反斜杠 '\\'。\n基本上作为 -draw 的MVG参数需要加引号，而里面的 'text' 字符串参数也可能需要一些额外的引号。\n为了解决这个问题，用户通常会使用两个不同的引号字符，一个用于 shell，另一个用于 MVG 文本字符串。\n-draw \u0026#39;... text 0,0 \u0026#34;string\u0026#34; ...\u0026#39; 需要注意的是，对于 windows 用户来说，这是唯一真正的选择，它有自己的引号问题和方法。或者他们会交换引号，用\u0026hellip;\n-draw \u0026#34;... text 0,0 \u0026#39;string\u0026#39; ...\u0026#34; 它允许你包含 shell 变量替换(使用 '$' 而不进行转义。)\n选择正确的形式可以解决大多数问题，但有些字符仍然存在困难，每个解决方案都取决于你到底使用哪一组引号，因为它们也定义了特殊字符应该如何转义。\n以下是四种情况下的引号，以及特殊字符的处理\u0026hellip;\n 对 shell 参数使用单引号，对 MVG 文本字符串周围使用双引号。  处理绘制文本字符串的最简单的技术是为包装 shell 参数使用单引号。然而，这意味着要在绘制的字符串中包含一个撇号，你需要离开 shell 的\u0026quot;单引号模式\u0026rdquo;，并在 shell 的单引号之外提供撇号。\n例如，这里是如何处理我提到的四个特殊字符。\nconvert -size 250x50 xc:none -box white -pointsize 20 -gravity center \\  -draw \u0026#39;text 0,0 \u0026#34; \u0026#39;\\\u0026#39;\u0026#39; \\\u0026#34; $ \\\\ \u0026#34; \u0026#39; \\  -trim +repage text_special_sd.gif 请注意，由于美元符号不需要转义，你也不能用它来替代 shell 变量的内容。\n重要的是要记住，反斜杠是IM绘图字符串处理的唯一特殊字符。同时，它存在的原因也纯粹是为了让你可以转义任何\u0026quot;IM 绘制字符串引号\u0026rdquo;，比如我们在上面使用的双引号。除此以外，其他所有的怪异都是由 UNIX 命令行 shell 引起的，而不是 IM。\nPC-DOS 有它自己的怪异之处，我希望在使用环境中的IM时，能对特殊字符进行转义。\n 在 shell 参数中使用双引号。 在 MVG 文本字符串周围使用单引号。  如果你确实想在绘制的字符串中插入一个 \u0026lsquo;shell variable\u0026rsquo;，那么你将不得不在 shell 参数的外面使用双引号。这使得整个事情变得更加复杂，因为你失去了 shell 的保护，你现在不仅要转义美元 '$' 符号，而且还要转义反斜杠 '\\'。\n另一方面，shell 将不需要使用单引号字符作为它的参数结束限制字符，所以这方面被简化了。让我们总结一下我们的特殊字符短名单的结果。\nconvert -size 250x50 xc:none -box white -pointsize 20 -gravity center \\  -draw \u0026#34;text 0,0 \u0026#39; \\\\\u0026#39; \\\u0026#34; \\$ \\\\\\\\ \u0026#39; \u0026#34; \\  -trim +repage text_special_ds.gif 请注意，如果你想画一个反斜线本身，MVG 文本字符串需要将反斜线加倍（如前面的例子），但是 shell 本身也需要将每个反斜线加倍，总共产生四个反斜线才能产生一个这样的字符。\n这种翻倍很快就会让人不知所措，需要大量的反斜杠才能达到你想要的效果。只要采取的是慢慢的、简单的方法，你就会针对自己的情况想出办法。\n 使用单引号进行 shell 论证。 与 MVG 文本字符串周围的单引号。  最后，让我们总结一下最后两种引号组合。我将让你去弄清楚它们是如何被 shell 和 MVG 解码的。\nconvert -size 250x50 xc:none -box white -pointsize 20 -gravity center \\  -draw \u0026#39;text 0,0 \u0026#39;\\\u0026#39;\u0026#39; \\\u0026#39;\\\u0026#39;\u0026#39; \u0026#34; $ \\\\ \u0026#39;\\\u0026#39;\u0026#39; \u0026#39; \\  -trim +repage text_special_ss.gif  在shell参数中使用双引号。  在 MVG 文本字符串周围加上双引号。\nconvert -size 250x50 xc:none -box white -pointsize 20 -gravity center \\  -draw \u0026#34;text 0,0 \\\u0026#34; \u0026#39; \\\\\\\u0026#34; \\$ \\\\\\\\ \\\u0026#34;\u0026#34; \\  -trim +repage text_special_dd.gif 正如你所看到的，来自命令行的 -draw 参数既要处理命令行 shell，也要处理 MVG 文本字符串中的反斜杠和引号转义。其结果可能会让人感到困惑和棘手。只要记住，shell 对这两种引号的处理方式不同，而 MVG 文本字符串则不同。\n当然，在复杂的脚本中，更好的方法可能是完全避免 shell 和任何脚本问题。你可以通过读取 MVG 绘图文件中的 -draw 参数来实现。\n-draw @drawfile.mvg 当然，你仍然需要对你使用的任何引号字符进行反斜杠处理，以及对文本中的任何反斜杠进行处理。然而，这比起同时处理 shell 自己的引号和转义系统要简单得多。\nconvert -size 500x50 xc:lightblue -font Candice -pointsize 36 \\  -gravity center -draw @text_quotes.mvg text_quotes.gif 第一张图片来自我使用的一个 \u0026ldquo;MVG\u0026rdquo; 文本文件。它不包含转义符或引号。因此，只有 MVG 引号和转义符是存在的。\n请注意，在上面的例子中，如果我对 MVG 文本字符串使用了单引号，唯一的变化是我需要对字符串中的单引号字符进行反斜杠处理，而不是双引号字符。\n关于百分比字符 最后一点是关于 \u0026quot;-draw text\u0026quot; 操作符中的特殊 escape 字符。百分号字符 \u0026quot;%\u0026quot; 应该\u0026quot;按原样\u0026quot;绘制。你不需要做任何特殊的操作来绘制它们。如果它们不能\u0026quot;按原样\u0026quot;绘制，那么你的IM版本较旧，应该尽快升级。\n 直到IM 6.2.4版本，\u0026quot;%\u0026quot; 字符被用作转义字符，在绘制的文本字符串中包含额外的图像信息。现在不再是这样了，因为当SVG图像也试图绘制百分数字符时，这种转义符是混乱和不正确的。 百分号 \u0026ldquo;转义符 \u0026ldquo;的使用（以及\u0026rdquo;/n \u0026ldquo;换行符）被认为与 -draw 操作符和MVG格式处理SVG图像格式的预期用途不兼容。因此，从 IM 6.2.4 版本开始，%转义就不适用了，反斜杠只能转义自己和周围的引号。\n convert -size 250x50 xc:none -box white -pointsize 20 -gravity center \\  -draw \u0026#39;text 0,0 \u0026#34;%w\\n%h\u0026#34;\u0026#39; -trim +repage text_escapes.gif 关于\u0026quot;百分比错误\u0026quot;的更多细节，以及在旧版 ImageMagick 中使用 -draw 时避免该错误的方法，请参见 Drawing a Percent Bug 页面。\n用注释代替绘制 避免这类问题的较好方法是使用 [-annotate](https://imagemagick.org/Usage/option_link.cgi?annotate) 而不是 draw 来绘制文本。这个操作符是 draw 操作符的一个封装器，可以使用 draw 的所有功能，但形式更简单。\n基本上这个操作符只需要一组引号（对于 shell）。这使得处理特殊字符变得更加简单。\n不幸的是，虽然你不再需要为 IM 转义引号，但你现在有百分比转义，如 '@' 文件读取，'\\n' 换行，以及其他百分号转义扩展。\n例如，使用单引号\u0026hellip;\nconvert -size 200x50 xc:none -box white -pointsize 20 -gravity center \\  -annotate 0 \u0026#39;\\@ \u0026#39;\\\u0026#39;\u0026#39; \u0026#34; $ \\\\ %% \u0026#39; \\  -trim +repage annotate_s.gif 而对于双引号\u0026hellip;\nconvert -size 200x50 xc:none -box white -pointsize 20 -gravity center \\  -annotate 0 \u0026#34;\\@ \u0026#39; \\\u0026#34; \\$ \\\\\\\\ %% \u0026#34; \\  -trim +repage annotate_d.gif 然而，如果你使用 '@' 转义符从文件中读取字符串，所有的注释引号和转义符将被完全忽略。\n例如，我们在这里包含了一个图像的宽度和高度的信息!\nconvert -size 200x50 xc:none -box white -pointsize 20 -gravity center \\  -annotate 0 \u0026#39;%w\\n%h\u0026#39; -trim +repage annotate_percents.gif 然而，当从文件中读取注释字符串时，所有的转义都会被完全忽略。\necho -n \u0026#39;@ %w\\n%h\u0026#39; |\\  convert -size 200x50 xc:none -box white -pointsize 20 -gravity center \\  -annotate 0 \u0026#39;@-\u0026#39; -trim +repage annotate_file.gif 更多信息请参见 Annotate Text Drawing Operator，特别是 Annotate Escape Characters。\nIM 和 SVG 处理 SVG 输入驱动。RSVG 与 MSVG 处理实际的 SVG 图像格式是一项非常复杂的工作。引擎需要处理 SVG\u0026ndash;可缩放矢量图形文档所定义的所有方面。这需要大量的编程工作和时间。\n因此，ImageMagick 在 SVG 格式图像的处理上提供了两种方法。第一种是使用一个开源的 RSV G库，将 SVG 格式转换成 IM 没有问题的光栅图像。这个引擎几乎在 SVG 处理的所有方面都是完整的。\n第二种方法是IM尝试将 SVG 转换为 MVG，使用一个名为 MSVG 的内置IM方法。MSVG 试图将SVG图像转换成IM的 -draw 运算符 \u0026ldquo;MVG\u0026quot;绘图语言。绘制 MVG 的很多功能都是专门为此而创建的。不幸的是，虽然基本的线条绘制和着色功能是存在的，但它远不是一个完整的 SVG 转换器。\n你可以通过使用特殊的输入格式 \u0026ldquo;MSVG:\u0026quot;（IM v6.3.4新增）读取 SVG 图像来强制使用内部的 MSVG 转换器。但如果 RSVG 库存在，大多数 ImageMagick 将使用它来渲染 SVG 图像。\n要找出你的 IM 会做什么，请用\u0026hellip;\nconvert -list format | grep SVG 从括号中的 \u0026ldquo;RSVG\u0026rdquo; 可以看出，我自己的 IM 将使用我电脑上的 RSVG 库，并给出了版本。\n在这里，我\u0026quot;绘制\u0026quot;了一个小的、手工制作的 SVG 图像 \u0026ldquo;diagonal.svg\u0026quot;（由论坛用户 penciledin 贡献），它在白色背景上创建了一个简单的对角线渐变的矩形。\nconvert diagonal.svg diagonal_rsvg.gif 完美的。一个正确的对角线梯度被生成。\n然而，如果你使用内部的 MSVG（如果没有 RSVG 库，则为默认值）来渲染\u0026hellip;\nconvert msvg:diagonal.svg diagonal_msvg.gif 正如你所看到的，内部 MSVG 转换失败，返回的是垂直梯度而不是对角线。\nconvert msvg:diagonal.svg diagonal.mvg 你大概可以看到MSVG转换器是如何尝试将 SVG 转换为 MVG 绘图命令的。\n当前内部 MSVG 已知失败的地方包括\u0026hellip;\n 非垂直梯度(没有转换到新的MVG梯度处理) 沿着弯曲路径的文字 文本对齐（与重力分开）。  然而大多数基本的绘图动作都被处理了。\n还请记住，MVG 语言实际上可以处理 SVG 不能处理的事情，包括使用重力来定位图像和文本。重力不是 SVG 规范的一部分，尽管它是 IM 文本和字体处理的一个组成部分。\n另外请记住，MVG 没有 SVG 所拥有的容器机制。内部的 MSVG 转换器用图形上下文的推送和弹出代替了 XML 容器（见上面的 MVG 输出），效果是一样的。 SVG 的设置\nSVG 图像格式是一种矢量格式（请参见关于矢量图像格式的一句话），因此图像通常没有一个默认的\u0026quot;大小\u0026rdquo;，而是以特定的  \u0026quot;-density\u0026quot; 来 \u0026ldquo;绘制\u0026quot;或\u0026quot;渲染\u0026rdquo;，就像 postscript 一样（默认密度是72dpi）。\n另外，如果 SVG 没有 \u0026ldquo;绘制\u0026quot;背景，您可以通过使用 -background 设置指定要使用的背景颜色。\n例如这里是另一个小的 SVG 图像 \u0026ldquo;home.svg\u0026rdquo;，它已经使用3种不同的密度，3种不同的背景进行\u0026quot;渲染\u0026rdquo;，包括一个透明的背景。\nconvert -density 36 home.svg home_1.gif convert -background skyblue home.svg home_2.gif convert -density 144 -background none home.svg home_3.png 请注意，我使用了 PNG 格式的图片来制作上面例子中较大的透明背景版本。由于半透明的边缘像素，这产生的图像比 GIF 图像格式产生的图像更干净。当最终图像中涉及到透明度时，总是建议使用 PNG。\n 我发现有些 SVG 图像不能缩放。也就是说，它们被定义为\u0026quot;像素\u0026rdquo;，而不是现实世界中的长度，如\u0026quot;点\u0026rdquo;、\u0026ldquo;英寸\u0026quot;或\u0026quot;毫米\u0026rdquo;。因此，虽然 -density 设置可能会改变图像的整体大小（以现实世界为单位），但 \u0026ldquo;像素 \u0026ldquo;的大小不会改变，因此图像本身的大小也不会改变。然而这样的SVG图像是相当罕见的。\n 更糟糕的是，一些 SVG 图像使用了\u0026quot;像素\u0026quot;和 \u0026ldquo;点\u0026quot;的混合测量，除非作者故意这样做，否则你可能会得到一个真正的混乱，你可以尝试使用不同的密度，而不是作者想要的。幸运的是，这种情况更加罕见。\n一个简单的解决方法就是将 SVG 中所有的 \u0026ldquo;像素\u0026quot;单位改成\u0026quot;点\u0026rdquo;，但也不能盲目的使用，以防故意使用\u0026quot;像素\u0026rdquo;。\nSVG 输出处理 从 IM v6.4.2 开始，IM 可以将任何位图图像转换为 SVG 矢量图! 转换并不总是成功的，但较大和/或较简单的图像（如位图蒙版）会转换得很好。\n例如，我在这里将一个可怕的位图形状转换为SVG图像，然后再将其转换回来，以便将位图平滑为一个适当的反锯齿形状。\nconvert -pointsize 72 -font Candice label:A -threshold 50% \\  -trim +repage -bordercolor white -border 5x5 A.gif convert A.gif A.svg convert A.svg A.png -\u0026gt; 然而，要使之工作，必须安装\u0026quot;开发\u0026quot;的 AutoTrace 库，并在IM中配置 -with-autotrace 开关。\n如果没有安装 AutoTrace 库并将其编译到 IM 中，那么生成的 SVG 输出将是大量的单像素圆圈，生成一个二进制结果，而不是一个平滑的 SVG 轮廓图像。这样的图像比较巨大，通过 SVG 渲染往往需要很长的时间来渲染。\n其实需要一种更好的默认栅格到矢量的技术，可能会使用 Morphology skeletion 和 MAT 技术。\n有一个 autotrace: 输入代理，来\u0026quot;平滑输入位图图像\u0026rdquo;，直接使用 \u0026ldquo;autotrace\u0026rdquo; 命令一次性完成上述所有步骤。然而我最后一次看到这个代理已经消失了。\n你应该这样使用它\u0026hellip;\nconvert autotrace:A.gif A_traced.png 当然这并不能让你从 \u0026ldquo;autotrace\u0026rdquo; 命令中得到 SVG 输出，只是通过 SVG 过滤输入的图像来平滑它。\n作为一种替代方法，你可以直接使用 \u0026ldquo;autotrace\u0026rdquo; 命令，如 Raster to Vector Edging 和 Skeleton using Autotrace 示例所示。\n你也可以看看 cancerberosgx 的结果，在生成 SVG 图像，他研究了转换照片的解决方案。\n非IM矢量图形编辑器 ImageMagick 是一个像素数组处理器，它一般不会保存矢量图像（\u0026lsquo;MVG\u0026rsquo; 是唯一的例外），只会读取图像并将其转换为像素数组。\n其他像素图像编辑器也是如此，如 Gimp、Photoshop 等。\n对于编辑和处理基于矢量的图像，可以使用以下程序，如\n Sodipodi 基于SVG的矢量图形编辑器。 Xfig 简单但非常好的矢量对象编辑器。(适用于标志、地图和在页面上排列照片) Dia AutoTrace 将位图数组中的形状转换为矢量轮廓。 Sketch 基于 Python 的曲线文字矢量编辑器。  当然，这不是一个完整的列表。即使是许多文字处理程序，如 OpenOffice、Word 和 TeX，一般都有各种简单的，虽然往往难以使用的对象编辑器。\n然而对于一般将矢量图形格式转换为不同的矢量格式，不要使用 ImageMagick。ImageMagick 本质上是一个光栅图像或位图图形转换器和操作器，而且永远都是这样。更多信息请参见 A word about Vector Image formats。\n 创建于: 24 March 2004 更新于: 14 March 2011 作者: Anthony Thyssen, Anthony.Thyssen@gmail.com Examples Generated with: [version image] URL: http://www.imagemagick.org/Usage/draw/  "},"name":"ImageMagick - Drawing","published":"2020-07-05T00:00:00+08:00","summary":"ImageMagick Drawing","type":"entry","url":"https://ohmyweekly.github.io/notes/imagemagick-drawing/"},{"content":{"html":"\u003cp\u003e\u003ca href=\"https://imagemagick.org/Usage/transform/index.html\"\u003ehttps://imagemagick.org/Usage/transform/index.html\u003c/a\u003e\u003c/p\u003e\n","text":"https://imagemagick.org/Usage/transform/index.html\n"},"name":"ImageMagick - Transform","published":"2020-07-05T00:00:00+08:00","summary":"ImageMagick Transform","type":"entry","url":"https://ohmyweekly.github.io/notes/imagemagick-transform/"},{"content":{"html":"\u003ch2 id=\"几个有意思的-imagemagick-脚本\"\u003e几个有意思的 ImageMagick 脚本\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://www.fmwconcepts.com/imagemagick/randomclipart/index.php\"\u003ehttp://www.fmwconcepts.com/imagemagick/randomclipart/index.php\u003c/a\u003e\n\u003ca href=\"http://www.fmwconcepts.com/imagemagick/sketching/index.php\"\u003ehttp://www.fmwconcepts.com/imagemagick/sketching/index.php\u003c/a\u003e\n\u003ca href=\"http://www.fmwconcepts.com/imagemagick/sphericalpano2cube/index.php\"\u003ehttp://www.fmwconcepts.com/imagemagick/sphericalpano2cube/index.php\u003c/a\u003e\n\u003ca href=\"http://www.fmwconcepts.com/imagemagick/surroundblur/index.php\"\u003ehttp://www.fmwconcepts.com/imagemagick/surroundblur/index.php\u003c/a\u003e\n\u003ca href=\"http://www.fmwconcepts.com/imagemagick/transfercolor/index.php\"\u003ehttp://www.fmwconcepts.com/imagemagick/transfercolor/index.php\u003c/a\u003e\n\u003ca href=\"http://www.fmwconcepts.com/imagemagick/colorcells/index.php\"\u003ehttp://www.fmwconcepts.com/imagemagick/colorcells/index.php\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"给图片添加网格线\"\u003e给图片添加网格线\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e./glasseffects -e none -k simple -o \u003cspan class=\"s1\"\u003e\u0026#39;#FFDAB9\u0026#39;\u003c/span\u003e -t single -m overlay -c \u003cspan class=\"m\"\u003e200\u003c/span\u003e -w \u003cspan class=\"m\"\u003e1\u003c/span\u003e -s \u003cspan class=\"m\"\u003e20\u003c/span\u003e -r \u003cspan class=\"m\"\u003e10\u003c/span\u003e in.jpeg out.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e./grid -o 0.3 -s \u003cspan class=\"m\"\u003e200\u003c/span\u003e -c white in.jpeg out.jpeg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"折叠图片\"\u003e折叠图片\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e./picturefold -o \u003cspan class=\"m\"\u003e80\u003c/span\u003e -h \u003cspan class=\"m\"\u003e50\u003c/span\u003e in.jpeg out.jpeg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"给图片添加心形图片\"\u003e给图片添加心形图片\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e./randomclipart -d \u003cspan class=\"s2\"\u003e\u0026#34;64,16\u0026#34;\u003c/span\u003e -a \u003cspan class=\"s2\"\u003e\u0026#34;45,-45\u0026#34;\u003c/span\u003e -p \u003cspan class=\"m\"\u003e50\u003c/span\u003e -c random in.jpeg heart.png out.jpeg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"给图片分成带颜色的方块\"\u003e给图片分成带颜色的方块\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e./colorcells -n 8,8 -d 100,100 in.jpeg out.jpeg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","text":"几个有意思的 ImageMagick 脚本 http://www.fmwconcepts.com/imagemagick/randomclipart/index.php http://www.fmwconcepts.com/imagemagick/sketching/index.php http://www.fmwconcepts.com/imagemagick/sphericalpano2cube/index.php http://www.fmwconcepts.com/imagemagick/surroundblur/index.php http://www.fmwconcepts.com/imagemagick/transfercolor/index.php http://www.fmwconcepts.com/imagemagick/colorcells/index.php\n给图片添加网格线 ./glasseffects -e none -k simple -o \u0026#39;#FFDAB9\u0026#39; -t single -m overlay -c 200 -w 1 -s 20 -r 10 in.jpeg out.jpg ./grid -o 0.3 -s 200 -c white in.jpeg out.jpeg 折叠图片 ./picturefold -o 80 -h 50 in.jpeg out.jpeg 给图片添加心形图片 ./randomclipart -d \u0026#34;64,16\u0026#34; -a \u0026#34;45,-45\u0026#34; -p 50 -c random in.jpeg heart.png out.jpeg 给图片分成带颜色的方块 ./colorcells -n 8,8 -d 100,100 in.jpeg out.jpeg "},"name":"ImageMagick 笔记","published":"2020-07-05T00:00:00+08:00","summary":"ImageMagick","type":"entry","url":"https://ohmyweekly.github.io/notes/imagemagick-notes/"},{"content":{"html":"\u003cp\u003eDart 生态系统使用\u003ca href=\"https://dart.dev/guides/packages\"\u003e包\u003c/a\u003e来共享软件，如库和工具。本页告诉你如何创建一个包，重点是最常见的一种包，\u003ca href=\"https://dart.dev/tools/pub/glossary#library-package\"\u003e库包\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"是什么造就了一个库包\"\u003e是什么造就了一个库包\u003c/h2\u003e\n\u003cp\u003e下图是最简单的库包的布局:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/assets/libraries/simple-lib2-81ebdc20fdb53d3abbc4364956141eb0f6f8f275d1636064fc3e1db959b93c1a.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e一个库的最低要求是\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003epubspec 文件\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e库的 \u003ccode\u003epubspec.yaml\u003c/code\u003e 文件和应用程序包的文件是一样的-没有特别的名称来表示这个包是一个库。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003elib 目录\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e正如你所期望的那样，库代码存在于 \u003ccode\u003elib\u003c/code\u003e 目录下，对其他包是公开的。你可以根据需要在 \u003ccode\u003elib\u003c/code\u003e 下创建任何层次结构。按照惯例，实现代码被放在 \u003ccode\u003elib/src\u003c/code\u003e 下。\u003ccode\u003elib/src\u003c/code\u003e 下的代码被认为是私有的；其他包不应该需要导入 \u003ccode\u003esrc/...\u003c/code\u003e。要使 \u003ccode\u003elib/src\u003c/code\u003e 下的 API 公开，您可以从直接位于 \u003ccode\u003elib\u003c/code\u003e 下的文件导出 \u003ccode\u003elib/src\u003c/code\u003e 文件。\u003c/p\u003e\n\u003cp\u003e注意：当没有指定 \u003ccode\u003elibrary\u003c/code\u003e 指令时，会根据每个库的路径和文件名为其生成一个唯一的标签。因此，我们建议您从代码中省略 \u003ccode\u003elibrary\u003c/code\u003e 指令，除非您计划\u003ca href=\"https://dart.dev/guides/libraries/create-library-packages#documenting-a-library\"\u003e生成库级文档\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"组织一个库包\"\u003e组织一个库包\u003c/h2\u003e\n\u003cp\u003e当你创建小的、单独的库（称为迷你库）时，库包的维护、扩展和测试是最容易的。在大多数情况下，每个类都应该在自己的迷你库中，除非你有两个类是紧密耦合的情况。\u003c/p\u003e\n\u003cp\u003e注意：你可能听说过 \u003ccode\u003epart\u003c/code\u003e 指令，它允许你将一个库分割成多个 Dart 文件。我们建议你避免使用 \u003ccode\u003epart\u003c/code\u003e 指令，而是创建迷你库。\u003c/p\u003e\n\u003cp\u003e直接在 \u003ccode\u003elib\u003c/code\u003e 下创建一个\u0026quot;主\u0026quot;库文件，\u003ccode\u003elib/\u0026lt;package-name\u0026gt;.dart\u003c/code\u003e，导出所有的公共 API。这样用户就可以通过导入一个文件来获得一个库的所有功能。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003elib\u003c/code\u003e 目录也可能包含其他可导入的、非src的库。例如，也许你的主库可以跨平台使用，但是你创建了单独的库，这些库依赖于 \u003ccode\u003edart:io\u003c/code\u003e 或者 \u003ccode\u003edart:html\u003c/code\u003e。有些包有单独的库，这些库是要用前缀导入的，而主库不是。\u003c/p\u003e\n\u003cp\u003e让我们来看看一个现实世界中的库包的组织： shelf。\u003ca href=\"https://github.com/dart-lang/shelf\"\u003eshelf\u003c/a\u003e 包提供了一种使用 Dart 创建 web 服务器的简单方法，它的布局结构是 Dart 库包常用的:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/assets/libraries/shelf-02e5fd43b660fcef7dbe6a883c40159e0379c8ee2088288ca60ed7dc8781bafd.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e直接在 \u003ccode\u003elib\u003c/code\u003e 下，主库文件 \u003ccode\u003eshelf.dart\u003c/code\u003e 从 \u003ccode\u003elib/src\u003c/code\u003e 导出几个文件:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/cascade.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/handler.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/handlers/logger.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/hijack_exception.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/middleware.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/pipeline.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/request.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/response.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/server.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/server_handler.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eshelf 包还包含一个迷你库： \u003ccode\u003eshelf_io\u003c/code\u003e。这个适配器处理来自 \u003ccode\u003edart:io\u003c/code\u003e 的 \u003ccode\u003eHttpRequest\u003c/code\u003e 对象。\u003c/p\u003e\n\u003cp\u003e对网络应用的提示: 为了在使用 \u003ca href=\"https://dart.dev/tools/dartdevc\"\u003edartdevc\u003c/a\u003e 开发时获得最佳性能，请将\u003ca href=\"https://dart.dev/tools/pub/package-layout#implementation-files\"\u003e实现文件\u003c/a\u003e放在 \u003ccode\u003e/lib/src\u003c/code\u003e 下，而不是放在 \u003ccode\u003e/lib\u003c/code\u003e 下的其他地方。同时，避免导入 \u003ccode\u003epackage:package_name/src/...\u003c/code\u003e 的文件。\u003c/p\u003e\n\u003ch2 id=\"导入库文件\"\u003e导入库文件\u003c/h2\u003e\n\u003cp\u003e当从其他包中导入一个库文件时，使用 \u003ccode\u003epackage:\u003c/code\u003e 指令来指定该文件的 URI。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epackage:utilities/utilities.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当从自己的包中导入一个库文件时，当两个文件都在 lib 内，或者两个文件都在 lib 外时，使用相对路径。使用 \u003ccode\u003e:package\u003c/code\u003e 当导入的文件在 lib 内，而导入者在 lib 外时。\u003c/p\u003e\n\u003cp\u003e下图显示了如何从 lib 和 web 中导入 \u003ccode\u003elib/foo/a.dart\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/assets/libraries/import-lib-rules-e1777e235dd56aa23f770babcccedb6a12be80af2c3e63065640b889d78be595.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch2 id=\"有条件地导入和导出库文件\"\u003e有条件地导入和导出库文件\u003c/h2\u003e\n\u003cp\u003e如果你的库支持多个平台，那么你可能需要有条件地导入或导出库文件。一个常见的用例是一个同时支持 web 和原生平台的库。\u003c/p\u003e\n\u003cp\u003e要有条件的导入或导出，你需要检查 \u003ccode\u003edart:*\u003c/code\u003e 库的存在。下面是一个有条件导出代码的例子，它检查 \u003ccode\u003edart:io\u003c/code\u003e 和 \u003ccode\u003edart:html\u003c/code\u003e 的存在:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/hw_none.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"err\"\u003e/\u003c/span\u003e\u003cspan class=\"err\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003eStub\u003c/span\u003e \u003cspan class=\"n\"\u003eimplementation\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eif\u003c/span\u003e \u003cspan class=\"err\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edart\u003c/span\u003e\u003cspan class=\"err\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elibrary\u003c/span\u003e\u003cspan class=\"err\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e\u003cspan class=\"err\"\u003e)\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/hw_io.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"err\"\u003e/\u003c/span\u003e\u003cspan class=\"err\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003edart\u003c/span\u003e\u003cspan class=\"err\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e \u003cspan class=\"n\"\u003eimplementation\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eif\u003c/span\u003e \u003cspan class=\"err\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edart\u003c/span\u003e\u003cspan class=\"err\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elibrary\u003c/span\u003e\u003cspan class=\"err\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehtml\u003c/span\u003e\u003cspan class=\"err\"\u003e)\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esrc/hw_html.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// dart:html implementation\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下面是这段代码的作用。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在一个可以使用 \u003ccode\u003edart:io\u003c/code\u003e 的应用程序中(例如，一个命令行应用程序)，导出 \u003ccode\u003esrc/hw_io.dart\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e在一个可以使用 \u003ccode\u003edart:html\u003c/code\u003e 的应用程序中(一个 web 应用程序)，导出 \u003ccode\u003esrc/hw_html.dart\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e否则，导出 \u003ccode\u003esrc/hw_none.dart\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e要有条件地导入一个文件，使用与上面相同的代码，但将 \u003ccode\u003eexporrt\u003c/code\u003e 改为 \u003ccode\u003eimport\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e注意：有条件的导入或导出只检查库在当前平台上是否可用，而不是检查是否实际导入或使用。\u003c/p\u003e\n\u003cp\u003e所有有条件导出的库都必须实现相同的 API。例如，这里是 \u003ccode\u003edart:io\u003c/code\u003e 的实现:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edart:io\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ealarm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewriteln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello World from the VM!\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里是默认的实现，它是一个抛出 UnsupportedErrors 的 stub。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ealarm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eUnsupportedError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehw_none alarm\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eUnsupportedError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehw_none message\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在任何平台上，你都可以导入有条件导出代码的库。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epackage:hw_mp/hw_mp.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"提供补充文件\"\u003e提供补充文件\u003c/h2\u003e\n\u003cp\u003e一个设计良好的库包是很容易测试的。我们建议你使用 \u003ca href=\"https://github.com/dart-lang/test\"\u003etest\u003c/a\u003e 包来编写测试，将测试代码放在测试包顶部的 \u003ccode\u003etest\u003c/code\u003e 目录中。\u003c/p\u003e\n\u003cp\u003e如果你创建了任何旨在供公众使用的命令行工具，请将这些工具放在 \u003ccode\u003ebin\u003c/code\u003e 目录下，这是公共的。启用从命令行运行工具，使用 \u003ca href=\"https://dart.dev/tools/pub/cmd/pub-global#activating-a-package\"\u003epub global activate\u003c/a\u003e。将工具列在 pubspec 的\u003ca href=\"https://dart.dev/tools/pub/pubspec#executables\"\u003e可执行文件部分\u003c/a\u003e，允许用户直接运行它，而无需调用 \u003ca href=\"https://dart.dev/tools/pub/cmd/pub-global#running-a-script-using-pub-global-run\"\u003epub global run\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e如果你包含了一个如何使用你的库的例子，这将会很有帮助。这将被放入软件包顶部的 \u003ccode\u003eexample\u003c/code\u003e 目录中。\u003c/p\u003e\n\u003cp\u003e你在开发过程中创建的任何工具或可执行文件，如果不是公开使用的，都会进入 \u003ccode\u003etool\u003c/code\u003e 目录。\u003c/p\u003e\n\u003cp\u003e如果你把你的库发布到 pub.dev 站点，其他需要的文件，如 \u003ccode\u003eREADME.md\u003c/code\u003e 和 \u003ccode\u003eCHANGELOG.md\u003c/code\u003e，将在\u003ca href=\"https://dart.dev/tools/pub/publishing\"\u003e发布软件包\u003c/a\u003e中描述。有关如何组织包目录的更多信息，请参见 \u003ca href=\"https://dart.dev/tools/pub/package-layout\"\u003epub 包布局惯例\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"编写库文档\"\u003e编写库文档\u003c/h2\u003e\n\u003cp\u003e你可以使用 \u003ca href=\"https://github.com/dart-lang/dartdoc#dartdoc\"\u003edartdoc\u003c/a\u003e 工具为你的库生成 API 文档。Dartdoc 解析源码寻找\u003ca href=\"https://dart.dev/guides/language/effective-dart/documentation#doc-comments\"\u003e文档注释\u003c/a\u003e，其中使用了 \u003ccode\u003e///\u003c/code\u003e 语法:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e/// The event handler responsible for updating the badge in the UI.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eupdateBadge\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e关于生成文档的例子，请看 \u003ca href=\"https://pub.dev/documentation/shelf/latest\"\u003eshelf 文档\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e注意：要在生成的文档中包含任何库级文档，你必须指定 \u003ccode\u003elibrary\u003c/code\u003e 指令。请参阅 \u003ca href=\"https://github.com/dart-lang/dartdoc/issues/1082\"\u003e问题 1082\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"分发一个开源库\"\u003e分发一个开源库\u003c/h2\u003e\n\u003cp\u003e如果你的库是开源的，我们建议在 \u003ca href=\"https://pub.dev/\"\u003epub.dev\u003c/a\u003e 站点上分享它。要发布或更新库，请使用 \u003ca href=\"https://dart.dev/tools/pub/cmd/pub-lish\"\u003epub publish\u003c/a\u003e，它可以上传您的包并创建或更新其页面。例如，请看 \u003ca href=\"https://pub.dev/packages/shelf\"\u003eshelf 包\u003c/a\u003e的页面。有关如何准备发布软件包的详细信息，请参见\u003ca href=\"https://dart.dev/tools/pub/publishing\"\u003e发布包\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003epub.dev 站点不仅托管您的软件包，而且还生成和托管您软件包的 API 参考文档。最新生成的文档的链接在软件包的 \u003cstrong\u003eAbout\u003c/strong\u003e 框中；例如，请看 shelf 包的 \u003ca href=\"https://pub.dev/documentation/shelf\"\u003eAPI 文档\u003c/a\u003e。到以前版本的文档的链接在软件包页面的版本选项卡中。\u003c/p\u003e\n\u003cp\u003e要确保你的软件包的 API 文档在 pub.dev 网站上看起来不错，请按照以下步骤进行。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在发布你的软件包之前，运行 \u003ca href=\"https://github.com/dart-lang/dartdoc#dartdoc\"\u003edartdoc\u003c/a\u003e 工具，以确保你的 docs 成功生成，并且看起来符合预期。\u003c/li\u003e\n\u003cli\u003e发布软件包后，检查 \u003cstrong\u003eVersions\u003c/strong\u003e 选项卡以确保文档成功生成。\u003c/li\u003e\n\u003cli\u003e如果文档根本没有生成，点击 \u003cstrong\u003eVerrsions\u003c/strong\u003e 选项卡中的 \u003cstrong\u003efailed\u003c/strong\u003e，查看 dartdoc 的输出。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"资源\"\u003e资源\u003c/h2\u003e\n\u003cp\u003e使用以下资源了解更多关于库包的信息。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/language/language-tour\"\u003e语言之旅\u003c/a\u003e中的\u003ca href=\"https://dart.dev/guides/language/language-tour#libraries-and-visibility\"\u003e库和可见性\u003c/a\u003e包括使用库文件。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/packages\"\u003e包\u003c/a\u003e文档很有用，特别是\u003ca href=\"https://dart.dev/tools/pub/package-layout\"\u003e包的布局约定\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/libraries/private-files\"\u003e不应提交的内容\u003c/a\u003e涵盖了哪些不应该被检查到源代码库中。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/dart-lang\"\u003edart-lang\u003c/a\u003e 组织下的较新的库包倾向于展示最佳实践。可以考虑研究这些例子：\u003ca href=\"https://github.com/dart-lang/dart_style\"\u003edart_style\u003c/a\u003e、\u003ca href=\"https://github.com/dart-lang/path\"\u003epath\u003c/a\u003e、\u003ca href=\"https://github.com/dart-lang/shelf\"\u003eshelf\u003c/a\u003e、\u003ca href=\"https://github.com/dart-lang/source_gen\"\u003esource_gen\u003c/a\u003e 和 \u003ca href=\"https://github.com/dart-lang/test\"\u003etest\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n","text":"Dart 生态系统使用包来共享软件，如库和工具。本页告诉你如何创建一个包，重点是最常见的一种包，库包。\n是什么造就了一个库包 下图是最简单的库包的布局:\n一个库的最低要求是\npubspec 文件\n库的 pubspec.yaml 文件和应用程序包的文件是一样的-没有特别的名称来表示这个包是一个库。\nlib 目录\n正如你所期望的那样，库代码存在于 lib 目录下，对其他包是公开的。你可以根据需要在 lib 下创建任何层次结构。按照惯例，实现代码被放在 lib/src 下。lib/src 下的代码被认为是私有的；其他包不应该需要导入 src/...。要使 lib/src 下的 API 公开，您可以从直接位于 lib 下的文件导出 lib/src 文件。\n注意：当没有指定 library 指令时，会根据每个库的路径和文件名为其生成一个唯一的标签。因此，我们建议您从代码中省略 library 指令，除非您计划生成库级文档。\n组织一个库包 当你创建小的、单独的库（称为迷你库）时，库包的维护、扩展和测试是最容易的。在大多数情况下，每个类都应该在自己的迷你库中，除非你有两个类是紧密耦合的情况。\n注意：你可能听说过 part 指令，它允许你将一个库分割成多个 Dart 文件。我们建议你避免使用 part 指令，而是创建迷你库。\n直接在 lib 下创建一个\u0026quot;主\u0026quot;库文件，lib/\u0026lt;package-name\u0026gt;.dart，导出所有的公共 API。这样用户就可以通过导入一个文件来获得一个库的所有功能。\nlib 目录也可能包含其他可导入的、非src的库。例如，也许你的主库可以跨平台使用，但是你创建了单独的库，这些库依赖于 dart:io 或者 dart:html。有些包有单独的库，这些库是要用前缀导入的，而主库不是。\n让我们来看看一个现实世界中的库包的组织： shelf。shelf 包提供了一种使用 Dart 创建 web 服务器的简单方法，它的布局结构是 Dart 库包常用的:\n直接在 lib 下，主库文件 shelf.dart 从 lib/src 导出几个文件:\nexport \u0026#39;src/cascade.dart\u0026#39;; export \u0026#39;src/handler.dart\u0026#39;; export \u0026#39;src/handlers/logger.dart\u0026#39;; export \u0026#39;src/hijack_exception.dart\u0026#39;; export \u0026#39;src/middleware.dart\u0026#39;; export \u0026#39;src/pipeline.dart\u0026#39;; export \u0026#39;src/request.dart\u0026#39;; export \u0026#39;src/response.dart\u0026#39;; export \u0026#39;src/server.dart\u0026#39;; export \u0026#39;src/server_handler.dart\u0026#39;; shelf 包还包含一个迷你库： shelf_io。这个适配器处理来自 dart:io 的 HttpRequest 对象。\n对网络应用的提示: 为了在使用 dartdevc 开发时获得最佳性能，请将实现文件放在 /lib/src 下，而不是放在 /lib 下的其他地方。同时，避免导入 package:package_name/src/... 的文件。\n导入库文件 当从其他包中导入一个库文件时，使用 package: 指令来指定该文件的 URI。\nimport \u0026#39;package:utilities/utilities.dart\u0026#39;; 当从自己的包中导入一个库文件时，当两个文件都在 lib 内，或者两个文件都在 lib 外时，使用相对路径。使用 :package 当导入的文件在 lib 内，而导入者在 lib 外时。\n下图显示了如何从 lib 和 web 中导入 lib/foo/a.dart。\n有条件地导入和导出库文件 如果你的库支持多个平台，那么你可能需要有条件地导入或导出库文件。一个常见的用例是一个同时支持 web 和原生平台的库。\n要有条件的导入或导出，你需要检查 dart:* 库的存在。下面是一个有条件导出代码的例子，它检查 dart:io 和 dart:html 的存在:\nexport \u0026#39;src/hw_none.dart\u0026#39; // Stub implementation if (dart.library.io) \u0026#39;src/hw_io.dart\u0026#39; // dart:io implementation if (dart.library.html) \u0026#39;src/hw_html.dart\u0026#39;; // dart:html implementation 下面是这段代码的作用。\n 在一个可以使用 dart:io 的应用程序中(例如，一个命令行应用程序)，导出 src/hw_io.dart 在一个可以使用 dart:html 的应用程序中(一个 web 应用程序)，导出 src/hw_html.dart 否则，导出 src/hw_none.dart  要有条件地导入一个文件，使用与上面相同的代码，但将 exporrt 改为 import。\n注意：有条件的导入或导出只检查库在当前平台上是否可用，而不是检查是否实际导入或使用。\n所有有条件导出的库都必须实现相同的 API。例如，这里是 dart:io 的实现:\nimport \u0026#39;dart:io\u0026#39;; void alarm([String text]) { stderr.writeln(text ?? message); } String get message =\u0026gt; \u0026#39;Hello World from the VM!\u0026#39;; 这里是默认的实现，它是一个抛出 UnsupportedErrors 的 stub。\nvoid alarm([String text]) =\u0026gt; throw UnsupportedError(\u0026#39;hw_none alarm\u0026#39;); String get message =\u0026gt; throw UnsupportedError(\u0026#39;hw_none message\u0026#39;); 在任何平台上，你都可以导入有条件导出代码的库。\nimport \u0026#39;package:hw_mp/hw_mp.dart\u0026#39;; void main() { print(message); } 提供补充文件 一个设计良好的库包是很容易测试的。我们建议你使用 test 包来编写测试，将测试代码放在测试包顶部的 test 目录中。\n如果你创建了任何旨在供公众使用的命令行工具，请将这些工具放在 bin 目录下，这是公共的。启用从命令行运行工具，使用 pub global activate。将工具列在 pubspec 的可执行文件部分，允许用户直接运行它，而无需调用 pub global run。\n如果你包含了一个如何使用你的库的例子，这将会很有帮助。这将被放入软件包顶部的 example 目录中。\n你在开发过程中创建的任何工具或可执行文件，如果不是公开使用的，都会进入 tool 目录。\n如果你把你的库发布到 pub.dev 站点，其他需要的文件，如 README.md 和 CHANGELOG.md，将在发布软件包中描述。有关如何组织包目录的更多信息，请参见 pub 包布局惯例。\n编写库文档 你可以使用 dartdoc 工具为你的库生成 API 文档。Dartdoc 解析源码寻找文档注释，其中使用了 /// 语法:\n/// The event handler responsible for updating the badge in the UI. void updateBadge() { ... } 关于生成文档的例子，请看 shelf 文档。\n注意：要在生成的文档中包含任何库级文档，你必须指定 library 指令。请参阅 问题 1082。\n分发一个开源库 如果你的库是开源的，我们建议在 pub.dev 站点上分享它。要发布或更新库，请使用 pub publish，它可以上传您的包并创建或更新其页面。例如，请看 shelf 包的页面。有关如何准备发布软件包的详细信息，请参见发布包。\npub.dev 站点不仅托管您的软件包，而且还生成和托管您软件包的 API 参考文档。最新生成的文档的链接在软件包的 About 框中；例如，请看 shelf 包的 API 文档。到以前版本的文档的链接在软件包页面的版本选项卡中。\n要确保你的软件包的 API 文档在 pub.dev 网站上看起来不错，请按照以下步骤进行。\n 在发布你的软件包之前，运行 dartdoc 工具，以确保你的 docs 成功生成，并且看起来符合预期。 发布软件包后，检查 Versions 选项卡以确保文档成功生成。 如果文档根本没有生成，点击 Verrsions 选项卡中的 failed，查看 dartdoc 的输出。  资源 使用以下资源了解更多关于库包的信息。\n 语言之旅中的库和可见性包括使用库文件。 包文档很有用，特别是包的布局约定。 不应提交的内容涵盖了哪些不应该被检查到源代码库中。 dart-lang 组织下的较新的库包倾向于展示最佳实践。可以考虑研究这些例子：dart_style、path、shelf、source_gen 和 test。  "},"name":"创建包","published":"2020-06-30T00:00:00+08:00","summary":"Creating packages","type":"entry","url":"https://ohmyweekly.github.io/notes/creating-packages/"},{"content":{"html":"\u003cp\u003e\u003ca href=\"https://dart.dev/guides/packages\"\u003epub 软件包管理器\u003c/a\u003e不仅仅是用来使用别人的软件包。它还允许你与世界分享你的软件包。如果您有一个有用的项目，并且您希望其他人能够使用它，请使用 \u003ccode\u003epub publish\u003c/code\u003e 命令。\u003c/p\u003e\n\u003cp\u003e注意: 如果要发布到 pub.dev 以外的其他位置，或者要防止在任何地方发布，请使用 \u003ca href=\"https://dart.dev/tools/pub/pubspec\"\u003epubspec\u003c/a\u003e 中定义的  \u003ccode\u003epublish_to\u003c/code\u003e 字段。\u003c/p\u003e\n\u003ch2 id=\"发布是永远的\"\u003e发布是永远的\u003c/h2\u003e\n\u003cp\u003e请记住，发布是永远的。只要你发布你的包，用户就可以依赖它。一旦他们开始这样做，删除包就会破坏他们的包。为了避免这种情况，\u003ca href=\"https://pub.dev/policy\"\u003epub.dev 政策\u003c/a\u003e不允许取消发布软件包，除非是极少数情况。\u003c/p\u003e\n\u003cp\u003e你可以随时上传你的包的新版本，但旧的包将继续为那些还没有准备好升级的用户提供服务。\u003c/p\u003e\n\u003cp\u003e对于已经发布的包，如果不再相关或正在维护，你可以\u003ca href=\"https://dart.dev/tools/pub/publishing#discontinue\"\u003e将其标记为停止发布\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"准备发布\"\u003e准备发布\u003c/h2\u003e\n\u003cp\u003e当发布一个软件包时，遵循 \u003ca href=\"https://dart.dev/tools/pub/pubspec\"\u003epubspec 格式\u003c/a\u003e和\u003ca href=\"https://dart.dev/tools/pub/package-layout\"\u003e包布局惯例\u003c/a\u003e是很重要的。其中有些是必须的，以便其他人能够使用你的软件包。另一些则是为了帮助用户更容易理解和使用您的软件包而提出的建议。在这两种情况下，pub 都会尝试帮助你，指出哪些改变会帮助你的软件包在 Dart 生态系统中发挥得更好。上传包有一些额外的要求:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e你必须包含一个包含\u003ca href=\"https://opensource.org/\"\u003e开源许可证\u003c/a\u003e的 \u003ccode\u003eLICENSE\u003c/code\u003e 文件。我们推荐 \u003ca href=\"https://opensource.org/licenses/BSD-3-Clause\"\u003eBSD 许可证\u003c/a\u003e，这是 Dart 自己使用的。你也必须有合法的权利来重新发布你上传的任何东西作为你的包的一部分。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e你的软件包在经过 gzip 压缩后必须小于 10 MB。如果太大，可以考虑将其分割成多个包，或者减少包含的资源或例子的数量。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e你的包应该只依赖托管的依赖项(来自默认的 pub 包服务器)和 SDK 依赖项(\u003ccode\u003esdk: flutter\u003c/code\u003e)。这些限制确保了你的包的依赖性不会在未来变得不可用。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e您必须有一个 \u003ca href=\"https://support.google.com/accounts/answer/27441\"\u003eGoogle 帐户\u003c/a\u003e，pub 用来管理包的上传权限。您的 Google 账户可以与 Gmail 地址或任何其他电子邮件地址关联。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e注意：除非您使用\u003ca href=\"https://dart.dev/tools/pub/verified-publishers\"\u003e已验证的发布者\u003c/a\u003e发布，否则 pub.dev 会显示与您的 Google 帐户关联的电子邮件地址。\u003c/p\u003e\n\u003ch3 id=\"重要文件\"\u003e重要文件\u003c/h3\u003e\n\u003cp\u003ePub 使用一些文件的内容为你的包创建一个页面，地址是 \u003ccode\u003epub.dev/packages/\u0026lt;your_package\u0026gt;\u003c/code\u003e。以下是影响你的包的页面外观的文件。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eREADME.md: \u003ccode\u003eREADME.md\u003c/code\u003e 文件是你的包页面中的主要内容。该文件的内容以 \u003ca href=\"https://pub.dev/packages/markdown\"\u003eMarkdown\u003c/a\u003e 的形式呈现。\u003c/li\u003e\n\u003cli\u003eCHANGELOG.md：\u003ccode\u003eCHANGELOG.md\u003c/code\u003e 文件是你的包页面中的主要内容。你的包的 \u003ccode\u003eCHANGELOG.md\u003c/code\u003e 文件，如果找到的话，也会在你的包页面的一个标签中显示，这样开发者就可以直接从 pub.dev 中读取它。该文件的内容会以 \u003ca href=\"https://pub.dev/packages/markdown\"\u003eMarkdown\u003c/a\u003e 的形式呈现。\u003c/li\u003e\n\u003cli\u003epubspec: 你的包的 \u003ccode\u003epubspec.yaml\u003c/code\u003e 文件用来在你的包的页面右侧填写关于你的包的详细信息，比如它的描述、主页等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"使用经过验证的发布者的优势\"\u003e使用经过验证的发布者的优势\u003c/h3\u003e\n\u003cp\u003e您可以使用已验证的发布者（推荐）或独立的谷歌账户发布软件包。使用经过验证的发布者有以下优势。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e您的包的消费者知道发布者的域名已经被验证。\u003c/li\u003e\n\u003cli\u003e您可以避免让 pub.dev 显示您的个人电子邮件地址。取而代之的是，pub.dev会显示发布者的域名和联系地址。\u003c/li\u003e\n\u003cli\u003e经验证的发布者徽章 pub.dev 经验证的发布者标识会在搜索页面和单个软件包页面上显示在您的软件包名称旁边。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"创建一个验证过的发布者\"\u003e创建一个验证过的发布者\u003c/h3\u003e\n\u003cp\u003e要创建一个已验证的发布者，请按照以下步骤进行。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e进入 \u003ca href=\"https://pub.dev/\"\u003epub.dev\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e使用 Google 账户登录 pub.dev。\u003c/li\u003e\n\u003cli\u003e在右上角的用户菜单中，选择创建发布者。\u003c/li\u003e\n\u003cli\u003e输入您要与您的发布者相关联的域名(例如，\u003ccode\u003edart.dev\u003c/code\u003e)，然后单击\u0026quot;创建发布者\u0026rdquo;。\u003c/li\u003e\n\u003cli\u003e在确认对话框中，选择\u0026quot;确定\u0026rdquo;。\u003c/li\u003e\n\u003cli\u003e如果提示，完成验证流程，这将打开 \u003ca href=\"https://search.google.com/search-console/about\"\u003eGoogle 搜索控制台\u003c/a\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e在添加 DNS 记录时，可能需要几个小时后，搜索控制台才会反映出变化。\u003c/li\u003e\n\u003cli\u003e验证流程完成后，返回步骤4。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"发布你的包\"\u003e发布你的包\u003c/h2\u003e\n\u003cp\u003e使用 \u003ca href=\"https://dart.dev/tools/pub/cmd/pub-lish\"\u003epub publish\u003c/a\u003e 命令来首次发布您的软件包，或将其更新到新版本。\u003c/p\u003e\n\u003ch3 id=\"执行-dry-run\"\u003e执行 dry run\u003c/h3\u003e\n\u003cp\u003e为了测试 \u003ccode\u003epub publish\u003c/code\u003e 的工作情况，你可以进行一次 dry run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ pub publish --dry-run\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePub 会确保你的软件包遵循 \u003ca href=\"https://dart.dev/tools/pub/pubspec\"\u003epubspec 格式\u003c/a\u003e和\u003ca href=\"https://dart.dev/tools/pub/package-layout\"\u003e包布局约定\u003c/a\u003e，然后将你的软件包上传到 \u003ca href=\"https://pub.dev/\"\u003epub.dev\u003c/a\u003e。Pub 还会向你展示它打算发布的所有文件。下面是一个发布名为 \u003ccode\u003etransmogrify\u003c/code\u003e 的软件包的例子:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003ePublishing\u003cspan class=\"w\"\u003e \u003c/span\u003etransmogrify\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"m\"\u003e1.0\u003c/span\u003e\u003cspan class=\"m\"\u003e.0\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e.gitignore\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003eCHANGELOG.md\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003eREADME.md\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003elib\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003etransmogrify.dart\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003esrc\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003etransmogrifier.dart\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003etransmogrification.dart\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003epubspec.yaml\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003etest\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003etransmogrify_test.dart\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003ePackage\u003cspan class=\"w\"\u003e \u003c/span\u003ehas\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ewarnings.\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"发布\"\u003e发布\u003c/h3\u003e\n\u003cp\u003e当你准备好发布你的包时，请删除 \u003ccode\u003e--dry-run\u003c/code\u003e 参数:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ pub publish\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意: pub 命令目前不支持直接将新软件包发布到已验证的发布者。作为一个临时的变通方法，可以将新的软件包发布到Google账户，然后将包\u003ca href=\"https://dart.dev/tools/pub/publishing#transferring-a-package-to-a-verified-publisher\"\u003e转移到发布者\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e一旦软件包被转移到发布者，你就可以使用 \u003ccode\u003epub publish\u003c/code\u003e 更新软件包。\u003c/p\u003e\n\u003cp\u003e当你的包成功上传到 pub.dev 后，任何 pub 用户都可以下载它或在他们的项目中依赖它。例如，如果你刚刚发布了 1.0.0 版本的 \u003ccode\u003etransmogrify\u003c/code\u003e 包，那么另一个 Dart 开发者可以在他们的 \u003ccode\u003epubspec.yaml\u003c/code\u003e 中添加它作为依赖:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"k\"\u003edependencies\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003etransmogrify\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e^\u003cspan class=\"m\"\u003e1.0\u003c/span\u003e\u003cspan class=\"m\"\u003e.0\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"将软件包传输给已验证的发布者\"\u003e将软件包传输给已验证的发布者\u003c/h3\u003e\n\u003cp\u003e要将一个软件包转移到已验证的发布者，您必须是该软件包的\u003ca href=\"https://dart.dev/tools/pub/publishing#uploaders\"\u003e上传者\u003c/a\u003e和已验证发布者的管理员。\u003c/p\u003e\n\u003cp\u003e注意：这个过程是不可逆的。一旦你将一个软件包转移到一个发布者，你不能将它转移回个人账户。\u003c/p\u003e\n\u003cp\u003e以下是如何将软件包转移到已验证的发布者:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e用一个被列为软件包上传者的 Google 账户登录到 \u003ca href=\"https://pub.dev/\"\u003epub.dev\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e进入软件包的详细信息页面(例如，\u003ccode\u003ehttps://pub.dev/packages/http\u003c/code\u003e)。\u003c/li\u003e\n\u003cli\u003e选择\u0026quot;管理\u0026quot;选项卡。\u003c/li\u003e\n\u003cli\u003e输入发布者的名称，然后单击\u0026quot;传输到发布者\u0026rdquo;。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"哪些文件会被发布\"\u003e哪些文件会被发布？\u003c/h3\u003e\n\u003cp\u003e您的软件包中的\u003cstrong\u003e所有\u003c/strong\u003e文件都包含在已发布的软件包中，但有以下例外:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e任何包的目录。\u003c/li\u003e\n\u003cli\u003e您的软件包的 \u003ca href=\"https://dart.dev/tools/pub/glossary#lockfile\"\u003elockfile\u003c/a\u003e 文件。\u003c/li\u003e\n\u003cli\u003e如果你没有使用 Git，所有隐藏的文件（也就是名字以 \u003ccode\u003e.\u003c/code\u003e 开头的文件）。\u003c/li\u003e\n\u003cli\u003e如果使用 Git，则是所有被 \u003ccode\u003e.gitignore\u003c/code\u003e 文件忽略的文件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e请确保删除任何你不想包含的文件(或将它们添加到 \u003ccode\u003e.gitignore\u003c/code\u003e 中)。 \u003ccode\u003epub publish\u003c/code\u003e 在上传你的包之前列出了它要发布的所有文件，所以在完成上传之前要仔细检查列表。\u003c/p\u003e\n\u003ch2 id=\"上传者\"\u003e上传者\u003c/h2\u003e\n\u003cp\u003e谁发布了软件包的第一个版本，谁就会自动成为第一个也是唯一一个被授权上传该软件包其他版本的人。要允许或不允许其他人上传版本，请使用 \u003ca href=\"https://dart.dev/tools/pub/cmd/pub-uploader\"\u003epub uploader\u003c/a\u003e 命令或将软件包转移到\u003ca href=\"https://dart.dev/tools/pub/verified-publishers\"\u003e已验证的发布者\u003c/a\u003e那里。\u003c/p\u003e\n\u003cp\u003e如果一个软件包有一个经过验证的发布者，那么该软件包的 pub.dev 页面会显示发布者的域名。否则，该页面将显示该软件包的授权上传者的电子邮件地址。\u003c/p\u003e\n\u003ch2 id=\"发布预发包\"\u003e发布预发包\u003c/h2\u003e\n\u003cp\u003e当你在做一个包的时候，考虑把它作为一个预发布。当以下任何一种情况发生时，预发布都是有用的。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e你正在积极开发软件包的下一个主要版本。\u003c/li\u003e\n\u003cli\u003e你想为软件包的下一个发行候选版本招募测试者。\u003c/li\u003e\n\u003cli\u003e该包依赖于 Dart 或 Flutter SDK 的不稳定版本。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e正如在\u003ca href=\"https://semver.org/spec/v2.0.0-rc.1.html\"\u003e语义版本化\u003c/a\u003e中所描述的那样，为了使一个版本的预发布，你要给版本附加一个后缀。例如，要对 \u003ccode\u003e2.0.0\u003c/code\u003e 版本进行预发布，你可以使用 \u003ccode\u003e2.0.0-dev.1\u003c/code\u003e 版本。以后，当你发布 \u003ccode\u003e2.0.0\u003c/code\u003e 版本时，它将优先于所有 \u003ccode\u003e2.0.0-XXX\u003c/code\u003e 预发布版本。\u003c/p\u003e\n\u003cp\u003e因为 pub 更倾向于在可用的时候发布稳定版，所以一个预发布包的用户可能需要改变他们的依赖约束。例如，如果用户想要测试 2.1 版本的预发布包，那么他们可以指定 \u003ccode\u003e^2.1.0-dev.1\u003c/code\u003e，而不是 \u003ccode\u003e^2.0.0\u003c/code\u003e 或 \u003ccode\u003e^2.1.0\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e注意: 如果依赖关系图中的稳定包依赖于一个 prerelease，那么 pub 会选择那个 prerelease 而不是稳定版本。\u003c/p\u003e\n\u003cp\u003e当一个 prerelease 被发布到 pub.dev 时，软件包页面会同时显示到 prerelease 和稳定版的链接。prerelease 不会影响分析得分，不会出现在搜索结果中，也不会替换包的 \u003ccode\u003eREADME.md\u003c/code\u003e 和文档。\u003c/p\u003e\n\u003ch2 id=\"将软件包标记为已停产的软件包\"\u003e将软件包标记为已停产的软件包\u003c/h2\u003e\n\u003cp\u003e尽管软件包总是保持发布，但向开发者发出信号，表明一个软件包不再被积极维护，是很有用的。为此，您可以将一个软件包标记为 \u003ccode\u003ediscontinued\u003c/code\u003e。一个已停用的软件包仍然可以在 pub.dev 上发布和查看，但它有一个清晰的 DISCONTINUED 徽章，并且不会出现在 pub.dev 的搜索结果中。\u003c/p\u003e\n\u003cp\u003e要将软件包标记为已停用，请使用该软件包的上传者或已验证的发布者管理员的 Google 帐户登录 pub.dev。然后使用单个软件包的管理选项卡将该软件包标记为已停用。\u003c/p\u003e\n\u003ch2 id=\"资源\"\u003e资源\u003c/h2\u003e\n\u003cp\u003e有关更多信息，请参见以下 pub 命令的参考页面。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-lish\"\u003epub publish\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-uploader\"\u003epub uploader\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","text":"pub 软件包管理器不仅仅是用来使用别人的软件包。它还允许你与世界分享你的软件包。如果您有一个有用的项目，并且您希望其他人能够使用它，请使用 pub publish 命令。\n注意: 如果要发布到 pub.dev 以外的其他位置，或者要防止在任何地方发布，请使用 pubspec 中定义的 publish_to 字段。\n发布是永远的 请记住，发布是永远的。只要你发布你的包，用户就可以依赖它。一旦他们开始这样做，删除包就会破坏他们的包。为了避免这种情况，pub.dev 政策不允许取消发布软件包，除非是极少数情况。\n你可以随时上传你的包的新版本，但旧的包将继续为那些还没有准备好升级的用户提供服务。\n对于已经发布的包，如果不再相关或正在维护，你可以将其标记为停止发布。\n准备发布 当发布一个软件包时，遵循 pubspec 格式和包布局惯例是很重要的。其中有些是必须的，以便其他人能够使用你的软件包。另一些则是为了帮助用户更容易理解和使用您的软件包而提出的建议。在这两种情况下，pub 都会尝试帮助你，指出哪些改变会帮助你的软件包在 Dart 生态系统中发挥得更好。上传包有一些额外的要求:\n  你必须包含一个包含开源许可证的 LICENSE 文件。我们推荐 BSD 许可证，这是 Dart 自己使用的。你也必须有合法的权利来重新发布你上传的任何东西作为你的包的一部分。\n  你的软件包在经过 gzip 压缩后必须小于 10 MB。如果太大，可以考虑将其分割成多个包，或者减少包含的资源或例子的数量。\n  你的包应该只依赖托管的依赖项(来自默认的 pub 包服务器)和 SDK 依赖项(sdk: flutter)。这些限制确保了你的包的依赖性不会在未来变得不可用。\n  您必须有一个 Google 帐户，pub 用来管理包的上传权限。您的 Google 账户可以与 Gmail 地址或任何其他电子邮件地址关联。\n  注意：除非您使用已验证的发布者发布，否则 pub.dev 会显示与您的 Google 帐户关联的电子邮件地址。\n重要文件 Pub 使用一些文件的内容为你的包创建一个页面，地址是 pub.dev/packages/\u0026lt;your_package\u0026gt;。以下是影响你的包的页面外观的文件。\n README.md: README.md 文件是你的包页面中的主要内容。该文件的内容以 Markdown 的形式呈现。 CHANGELOG.md：CHANGELOG.md 文件是你的包页面中的主要内容。你的包的 CHANGELOG.md 文件，如果找到的话，也会在你的包页面的一个标签中显示，这样开发者就可以直接从 pub.dev 中读取它。该文件的内容会以 Markdown 的形式呈现。 pubspec: 你的包的 pubspec.yaml 文件用来在你的包的页面右侧填写关于你的包的详细信息，比如它的描述、主页等。  使用经过验证的发布者的优势 您可以使用已验证的发布者（推荐）或独立的谷歌账户发布软件包。使用经过验证的发布者有以下优势。\n 您的包的消费者知道发布者的域名已经被验证。 您可以避免让 pub.dev 显示您的个人电子邮件地址。取而代之的是，pub.dev会显示发布者的域名和联系地址。 经验证的发布者徽章 pub.dev 经验证的发布者标识会在搜索页面和单个软件包页面上显示在您的软件包名称旁边。  创建一个验证过的发布者 要创建一个已验证的发布者，请按照以下步骤进行。\n 进入 pub.dev。 使用 Google 账户登录 pub.dev。 在右上角的用户菜单中，选择创建发布者。 输入您要与您的发布者相关联的域名(例如，dart.dev)，然后单击\u0026quot;创建发布者\u0026rdquo;。 在确认对话框中，选择\u0026quot;确定\u0026rdquo;。 如果提示，完成验证流程，这将打开 Google 搜索控制台。   在添加 DNS 记录时，可能需要几个小时后，搜索控制台才会反映出变化。 验证流程完成后，返回步骤4。  发布你的包 使用 pub publish 命令来首次发布您的软件包，或将其更新到新版本。\n执行 dry run 为了测试 pub publish 的工作情况，你可以进行一次 dry run:\n$ pub publish --dry-run Pub 会确保你的软件包遵循 pubspec 格式和包布局约定，然后将你的软件包上传到 pub.dev。Pub 还会向你展示它打算发布的所有文件。下面是一个发布名为 transmogrify 的软件包的例子:\nPublishingtransmogrify1.0.0.gitignoreCHANGELOG.mdREADME.mdlibtransmogrify.dartsrctransmogrifier.darttransmogrification.dartpubspec.yamltesttransmogrify_test.dartPackagehas0warnings.发布 当你准备好发布你的包时，请删除 --dry-run 参数:\n$ pub publish 注意: pub 命令目前不支持直接将新软件包发布到已验证的发布者。作为一个临时的变通方法，可以将新的软件包发布到Google账户，然后将包转移到发布者。\n一旦软件包被转移到发布者，你就可以使用 pub publish 更新软件包。\n当你的包成功上传到 pub.dev 后，任何 pub 用户都可以下载它或在他们的项目中依赖它。例如，如果你刚刚发布了 1.0.0 版本的 transmogrify 包，那么另一个 Dart 开发者可以在他们的 pubspec.yaml 中添加它作为依赖:\ndependencies:transmogrify:^1.0.0将软件包传输给已验证的发布者 要将一个软件包转移到已验证的发布者，您必须是该软件包的上传者和已验证发布者的管理员。\n注意：这个过程是不可逆的。一旦你将一个软件包转移到一个发布者，你不能将它转移回个人账户。\n以下是如何将软件包转移到已验证的发布者:\n 用一个被列为软件包上传者的 Google 账户登录到 pub.dev。 进入软件包的详细信息页面(例如，https://pub.dev/packages/http)。 选择\u0026quot;管理\u0026quot;选项卡。 输入发布者的名称，然后单击\u0026quot;传输到发布者\u0026rdquo;。  哪些文件会被发布？ 您的软件包中的所有文件都包含在已发布的软件包中，但有以下例外:\n 任何包的目录。 您的软件包的 lockfile 文件。 如果你没有使用 Git，所有隐藏的文件（也就是名字以 . 开头的文件）。 如果使用 Git，则是所有被 .gitignore 文件忽略的文件。  请确保删除任何你不想包含的文件(或将它们添加到 .gitignore 中)。 pub publish 在上传你的包之前列出了它要发布的所有文件，所以在完成上传之前要仔细检查列表。\n上传者 谁发布了软件包的第一个版本，谁就会自动成为第一个也是唯一一个被授权上传该软件包其他版本的人。要允许或不允许其他人上传版本，请使用 pub uploader 命令或将软件包转移到已验证的发布者那里。\n如果一个软件包有一个经过验证的发布者，那么该软件包的 pub.dev 页面会显示发布者的域名。否则，该页面将显示该软件包的授权上传者的电子邮件地址。\n发布预发包 当你在做一个包的时候，考虑把它作为一个预发布。当以下任何一种情况发生时，预发布都是有用的。\n 你正在积极开发软件包的下一个主要版本。 你想为软件包的下一个发行候选版本招募测试者。 该包依赖于 Dart 或 Flutter SDK 的不稳定版本。  正如在语义版本化中所描述的那样，为了使一个版本的预发布，你要给版本附加一个后缀。例如，要对 2.0.0 版本进行预发布，你可以使用 2.0.0-dev.1 版本。以后，当你发布 2.0.0 版本时，它将优先于所有 2.0.0-XXX 预发布版本。\n因为 pub 更倾向于在可用的时候发布稳定版，所以一个预发布包的用户可能需要改变他们的依赖约束。例如，如果用户想要测试 2.1 版本的预发布包，那么他们可以指定 ^2.1.0-dev.1，而不是 ^2.0.0 或 ^2.1.0。\n注意: 如果依赖关系图中的稳定包依赖于一个 prerelease，那么 pub 会选择那个 prerelease 而不是稳定版本。\n当一个 prerelease 被发布到 pub.dev 时，软件包页面会同时显示到 prerelease 和稳定版的链接。prerelease 不会影响分析得分，不会出现在搜索结果中，也不会替换包的 README.md 和文档。\n将软件包标记为已停产的软件包 尽管软件包总是保持发布，但向开发者发出信号，表明一个软件包不再被积极维护，是很有用的。为此，您可以将一个软件包标记为 discontinued。一个已停用的软件包仍然可以在 pub.dev 上发布和查看，但它有一个清晰的 DISCONTINUED 徽章，并且不会出现在 pub.dev 的搜索结果中。\n要将软件包标记为已停用，请使用该软件包的上传者或已验证的发布者管理员的 Google 帐户登录 pub.dev。然后使用单个软件包的管理选项卡将该软件包标记为已停用。\n资源 有关更多信息，请参见以下 pub 命令的参考页面。\n pub publish pub uploader  "},"name":"发布包","published":"2020-06-30T00:00:00+08:00","summary":"Publishing packages","type":"entry","url":"https://ohmyweekly.github.io/notes/publishing-packages/"},{"content":{"html":"\u003cp\u003e有什么意义呢？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHTTP 协议允许客户端和服务器进行通信。\u003c/li\u003e\n\u003cli\u003edart:io 包有编写 HTTP 程序的类。\u003c/li\u003e\n\u003cli\u003e服务器监听主机和端口上的请求。\u003c/li\u003e\n\u003cli\u003e客户端使用 HTTP 方法请求发送请求。\u003c/li\u003e\n\u003cli\u003ehttp_server 包提供了更高级别的构件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e前提条件: HTTP 服务器和客户端严重依赖 future 和流，本教程中没有解释这些内容。你可以从\u003ca href=\"https://dart.dev/codelabs/async-await\"\u003e异步编程 codelab\u003c/a\u003e和\u003ca href=\"https://dart.dev/tutorials/language/streams\"\u003e流教程\u003c/a\u003e中了解它们。\u003c/p\u003e\n\u003cp\u003eHTTP（超文本传输协议）是一种通信协议，用于通过互联网将数据从一个程序发送到另一个程序。数据传输的一端是服务器，另一端是客户端。客户端通常是基于浏览器的（用户在浏览器中输入或在浏览器中运行的脚本），但也可能是一个独立的程序。\u003c/p\u003e\n\u003cp\u003e服务器与主机和端口绑定（它与一个IP地址和一个端口号建立专属连接）。然后服务器监听请求。由于 Dart 的异步性，服务器可以同时处理很多请求，具体如下。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务器监听\u003c/li\u003e\n\u003cli\u003e客户端连接\u003c/li\u003e\n\u003cli\u003e服务器接受并接收请求(并继续监听)\u003c/li\u003e\n\u003cli\u003e服务器可以继续接受其他请求\u003c/li\u003e\n\u003cli\u003e服务器写入请求的响应或几个请求，可能是交错的请求\u003c/li\u003e\n\u003cli\u003e服务器最终结束(关闭)响应\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 Dart 中，\u003ca href=\"https://api.dart.dev/stable/dart-io/dart-io-library.html\"\u003edart:io\u003c/a\u003e 库包含了编写 HTTP 客户端和服务器所需的类和函数。此外，\u003ca href=\"https://pub.dev/packages/http_server\"\u003ehttp_server\u003c/a\u003e 包包含了一些更高层次的类，使其更容易编写客户端和服务器。\u003c/p\u003e\n\u003cp\u003e重要：基于浏览器的程序不能使用 dart:io 库。\u003c/p\u003e\n\u003cp\u003edart:io 库中的 API 只适用于独立的命令行程序。它们不能在浏览器中工作。要从基于浏览器的客户端发出 HTTP 请求，请参考 \u003ca href=\"https://api.dart.dev/stable/dart-html/HttpRequest-class.html\"\u003edart:html HttpRequest\u003c/a\u003e 类。\u003c/p\u003e\n\u003cp\u003e本教程提供了几个例子，说明编写 Dart HTTP 服务器和客户端是多么容易。从服务器的 \u003ccode\u003ehello world\u003c/code\u003e 开始，你将学习如何编写服务器的代码，从绑定和监听到响应请求。你还可以学习到客户端：提出不同类型的请求(GET 和 POST)，编写基于浏览器和命令行的客户端。\u003c/p\u003e\n\u003ch2 id=\"获取源码\"\u003e获取源码\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e获取 Dart 教程的\u003ca href=\"https://github.com/dart-lang/dart-tutorials-samples/archive/master.zip\"\u003e示例代码\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e查看 \u003ccode\u003ehttpserver\u003c/code\u003e 目录，其中包含本教程所需的源码。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"运行-hello-world-服务器\"\u003e运行 hello world 服务器\u003c/h2\u003e\n\u003cp\u003e本节的示例文件：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/hello_world_server.dart\"\u003ehello_world_server.dart\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e让我们从一个小型的服务器开始，用字符串 \u003ccode\u003eHello, world\u003c/code\u003e 来响应所有的请求。\u003c/p\u003e\n\u003cp\u003e在命令行中，运行 \u003ccode\u003ehello_world_server.dart\u003c/code\u003e 脚本:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e \u003cspan class=\"n\"\u003ecd\u003c/span\u003e \u003cspan class=\"n\"\u003ehttpserver\u003c/span\u003e\n\u003cspan class=\"n\"\u003e$\u003c/span\u003e \u003cspan class=\"n\"\u003edart\u003c/span\u003e \u003cspan class=\"n\"\u003ebin\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ehello_world_server\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edart\u003c/span\u003e\n\u003cspan class=\"n\"\u003elistening\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003elocalhost\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eport\u003c/span\u003e \u003cspan class=\"m\"\u003e4040\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在任何浏览器中，访问 \u003ca href=\"http://localhost:4040/\"\u003elocalhost:4040\u003c/a\u003e。浏览器会显示 \u003ccode\u003eHello, world!\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/tutorials/server/images/hello_world_response.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在这种情况下，服务器是一个 Dart 程序，客户端是你使用的浏览器。然而，你可以用 Dart 编写客户端程序-无论是基于浏览器的客户端脚本，还是独立的程序。\u003c/p\u003e\n\u003ch3 id=\"快速浏览一下代码\"\u003e快速浏览一下代码\u003c/h3\u003e\n\u003cp\u003e在 \u003ccode\u003ehello world\u003c/code\u003e 服务器的代码中，一个 HTTP 服务器与主机和端口绑定，监听 HTTP 请求，并写入响应。需要注意的是，该程序导入了 \u003ca href=\"https://api.dart.dev/stable/dart-io/dart-io-library.html\"\u003edart:io\u003c/a\u003e 库，其中包含了服务器端程序和客户端程序的 HTTP 相关类(但不包含 Web 应用)。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edart:io\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"m\"\u003e4040\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eListening on localhost:\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eport\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来的几节内容包括服务器端绑定、发出客户端 GET 请求、监听和响应。\u003c/p\u003e\n\u003ch2 id=\"将服务器绑定到主机和端口\"\u003e将服务器绑定到主机和端口\u003c/h2\u003e\n\u003cp\u003e本节示例：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/hello_world_server.dart\"\u003ehello_world_server.dart\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emain()\u003c/code\u003e 中的第一条语句使用 \u003ccode\u003eHttpServer.bind()\u003c/code\u003e 创建一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpServer-class.html\"\u003eHttpServer\u003c/a\u003e 对象，并将其绑定到主机和端口。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"m\"\u003e4040\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e该代码使用 \u003ccode\u003eawait\u003c/code\u003e 异步调用 \u003ccode\u003ebind\u003c/code\u003e 方法。\u003c/p\u003e\n\u003ch3 id=\"主机名\"\u003e主机名\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ebind()\u003c/code\u003e 的第一个参数是指定主机名。你可以用一个字符串来指定一个特定的主机名或IP地址，也可以用 \u003ca href=\"https://api.dart.dev/stable/dart-io/InternetAddress-class.html\"\u003eInternetAddress\u003c/a\u003e 类提供的这些预定义的值来指定主机。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e值\u003c/th\u003e\n\u003cth align=\"left\"\u003e用例\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e回环 IPv4 或 loopbackIPv6\u003c/td\u003e\n\u003ctd align=\"left\"\u003e服务器在 loopback 地址上监听客户端活动，该地址实际上是 localhost。使用IP协议的4或6版本。这些主要用于测试。我们建议您使用这些值而不是 \u003ccode\u003elocalhost\u003c/code\u003e 或 \u003ccode\u003e127.0.0.1\u003c/code\u003e。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e任何 IPv4 或 anyIPv6\u003c/td\u003e\n\u003ctd align=\"left\"\u003e服务器监听任何 IP 地址上指定端口上的客户端活动。使用IP协议的4或6版本。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e默认情况下，当使用V6互联网地址时，也会使用V4监听器。\u003c/p\u003e\n\u003ch3 id=\"端口\"\u003e端口\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ebind()\u003c/code\u003e 的第二个参数是指定端口的整数。端口唯一地标识主机上的服务。1024 以下的端口号为标准服务保留(0除外)。例如，FTP 数据传输通常在端口20上运行，每日报价在端口17上运行，HTTP 在端口80上运行。你的程序应该使用1024以上的端口号。如果端口已经在使用中，你的服务器的连接将被拒绝。\u003c/p\u003e\n\u003ch3 id=\"侦听请求\"\u003e侦听请求\u003c/h3\u003e\n\u003cp\u003e服务器使用 \u003ccode\u003eawait for\u003c/code\u003e 开始监听 HTTP 请求。每收到一个请求，代码就会发送一个 \u0026ldquo;Hello, world!\u0026rdquo; 的响应。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你将在\u003ca href=\"https://dart.dev/tutorials/server/httpserver#httprequest-object\"\u003e监听和处理请求\u003c/a\u003e一节中了解更多关于 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpRequest-class.html\"\u003eHttpRequest\u003c/a\u003e 对象包含的内容以及如何编写响应。但首先，让我们看看客户端产生请求的一种方式。\u003c/p\u003e\n\u003ch2 id=\"使用-html-表单发出-get-请求\"\u003e使用 HTML 表单发出 GET 请求\u003c/h2\u003e\n\u003cp\u003e本节的示例文件：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/number_thinker.dart\"\u003enumber_thinker.dart\u003c/a\u003e 和 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/web/make_a_guess.html\"\u003emake_a_guess.html\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e本节介绍了一个命令行服务器，它可以随机选择一个0到9之间的数字。客户端是一个基本的 HTML 网页，\u003ccode\u003emake_a_guess.html\u003c/code\u003e，你可以用它来猜数字。\u003c/p\u003e\n\u003cp\u003e试试吧\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e运行数字思考者服务器\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在命令行，运行 \u003ccode\u003enumber_thinker.dart\u003c/code\u003e server。你应该看到类似下面的东西:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e httpserver\n$ dart bin/number_thinker.dart\nI\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003em thinking of a number: \u003cspan class=\"m\"\u003e6\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e启动网络服务器\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e从应用程序的顶部目录运行 \u003ccode\u003ewebdev serve\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e更多信息：\u003ca href=\"https://dart.dev/tools/webdev\"\u003ewebdev 文档\u003c/a\u003e\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e打开 HTML 页面\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在浏览器中，进入 \u003ca href=\"http://localhost:8080/make_a_guess.html\"\u003elocalhost:8080/make_a_guess.html\u003c/a\u003e。\u003c/p\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003e做一个猜测\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e选择一个数字，然后按猜测按钮。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/tutorials/server/images/guessing.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在客户端中没有涉及到 Dart 代码。客户端请求是通过浏览器向 Dart 服务器发出的，在 \u003ccode\u003emake_a_guess.html\u003c/code\u003e 中的 HTML 表单，它提供了一个自动制定和发送客户端 HTTP 请求的方法。该表单包含下拉列表和按钮。该表单还指定了 URL，其中包括端口号，以及请求的种类（请求方法）。它还可能包含建立查询字符串的元素。\u003c/p\u003e\n\u003cp\u003e下面是 \u003ccode\u003emake_a_guess.html\u003c/code\u003e 中的表单 HTML。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eform\u003c/span\u003e \u003cspan class=\"na\"\u003eaction\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;http://localhost:4041\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003emethod\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eselect\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;q\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e0\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e1\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e2\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e\u0026lt;!--\u003c/span\u003e\u003cspan class=\"c\"\u003e ··· \u003c/span\u003e\u003cspan class=\"c\"\u003e--\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;9\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e9\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"nt\"\u003eselect\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003einput\u003c/span\u003e \u003cspan class=\"na\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;submit\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Guess\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"nt\"\u003eform\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下面是表单的工作原理:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e表单的 \u003ccode\u003eaction\u003c/code\u003e 属性被分配给发送请求的 URL\u003c/li\u003e\n\u003cli\u003e表单的 \u003ccode\u003emethod\u003c/code\u003e 属性定义了请求的类型，这里是 \u003ccode\u003eGET\u003c/code\u003e。其他常见的请求类型包括 POST、PUT 和 DELETE。\u003c/li\u003e\n\u003cli\u003e表单中任何有名称(\u003ccode\u003ename\u003c/code\u003e)的元素，比如 \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e 元素，都会成为查询字符串中的一个参数。\u003c/li\u003e\n\u003cli\u003e当按下提交按钮(\u003ccode\u003e\u0026lt;input type=\u0026quot;submit\u0026quot;...\u0026gt;\u003c/code\u003e)时，提交按钮会根据表单的内容制定请求并发送。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"一个-restful-get-请求\"\u003e一个 RESTful GET 请求\u003c/h3\u003e\n\u003cp\u003eREST(REpresentational State Transfer)是一套设计 Web 服务的原则。乖巧的 HTTP 客户端和服务器遵守为 GET 请求定义的 REST 原则。\u003c/p\u003e\n\u003cp\u003e一个 GET 请求:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e只检索数据\u003c/li\u003e\n\u003cli\u003e不会改变服务器的状态\u003c/li\u003e\n\u003cli\u003e有长度限制\u003c/li\u003e\n\u003cli\u003e可以在请求的 URL 中发送查询字符串\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在这个例子中，客户端发出了一个符合 REST 的 GET 请求。\u003c/p\u003e\n\u003ch2 id=\"监听和处理请求\"\u003e监听和处理请求\u003c/h2\u003e\n\u003cp\u003e本节的示例文件: \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/number_thinker.dart\"\u003enumber_thinker.dart\u003c/a\u003e 和 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/web/make_a_guess.html\"\u003emake_a_guess.html\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e现在你已经看到这个基于浏览器的客户端的例子，让我们看看数字思维服务器的 Dart 代码，从 \u003ccode\u003emain()\u003c/code\u003e 开始。\u003c/p\u003e\n\u003cp\u003e再一次，服务器绑定了一个主机和端口。在这里，每收到一个请求都会调用顶层的 \u003ccode\u003ehandleRequest()\u003c/code\u003e 方法。因为 HttpServer 实现了 \u003ca href=\"https://api.dart.dev/stable/dart-async/Stream-class.html\"\u003eStream\u003c/a\u003e，所以可以使用 \u003ccode\u003eawait for\u003c/code\u003e 来处理请求。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edart:io\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edart:math\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003eshow\u003c/span\u003e \u003cspan class=\"n\"\u003eRandom\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eRandom\u003c/span\u003e \u003cspan class=\"n\"\u003eintGenerator\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRandom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emyNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eintGenerator\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enextInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eI\u0026#39;m thinking of a number: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003emyNumber\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"m\"\u003e4041\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当一个 \u003ccode\u003eGET\u003c/code\u003e 请求到达时，\u003ccode\u003ehandleRequest()\u003c/code\u003e 方法会调用 \u003ccode\u003ehandleGet()\u003c/code\u003e 来处理该请求。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eGET\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ehandleGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eException in handleRequest: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eRequest handled.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpRequest-class.html\"\u003eHttpRequest\u003c/a\u003e 对象有很多属性，提供了关于请求的信息。下表列出了一些有用的属性。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e属性\u003c/th\u003e\n\u003cth align=\"left\"\u003e信息\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003emethod\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u0026lsquo;GET\u0026rsquo;, \u0026lsquo;POST\u0026rsquo;, \u0026lsquo;PUT\u0026rsquo; 等方法中的一个。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003euri\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/Uri-class.html\"\u003eUri\u003c/a\u003e 对象：scheme、host、port、query string 和其他关于请求资源的信息。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eresponse\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpResponse-class.html\"\u003eHttpResponse\u003c/a\u003e 对象：服务器将其响应写入其中。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eheaders\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpHeaders-class.html\"\u003eHttpHeaders\u003c/a\u003e 对象：请求的头信息，包括 \u003ca href=\"https://api.dart.dev/stable/dart-io/ContentType-class.html\"\u003eContentType\u003c/a\u003e、内容长度、日期等。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"使用方法属性\"\u003e使用方法属性\u003c/h3\u003e\n\u003cp\u003e下面的数想器例子中的代码使用 HttpRequest 的 \u003ccode\u003emethod\u003c/code\u003e 属性来确定收到了什么样的请求。这个服务器只处理 GET 请求。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eGET\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ehandleGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estatusCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethodNotAllowed\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eUnsupported request: \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"使用-uri-属性\"\u003e使用 uri 属性\u003c/h3\u003e\n\u003cp\u003e在浏览器中输入一个 URL 会产生一个 GET 请求，它只是简单地从指定的资源中请求数据。它可以通过附加在 URI 上的查询字符串随请求发送少量数据。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ehandleGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eguess\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equeryParameters\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eq\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用 HttpRequest 对象的 \u003ccode\u003euri\u003c/code\u003e 属性来获取一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/Uri-class.html\"\u003eUri\u003c/a\u003e 对象，这个 Uri 对象包含了用户输入的 URL 的信息。Uri 对象的 \u003ccode\u003equeryParameters\u003c/code\u003e 属性是一个 Map，包含查询字符串的组件。通过名称来引用所需的参数。本例使用 \u003ccode\u003eq\u003c/code\u003e 来标识猜测的数字。\u003c/p\u003e\n\u003ch3 id=\"设置响应的状态码\"\u003e设置响应的状态码\u003c/h3\u003e\n\u003cp\u003e服务器应该设置状态码来表示请求的成功或失败。前面看到数想家将状态码设置为 \u003ccode\u003emethodNotAllowed\u003c/code\u003e 来拒绝非 GET 请求。在后面的代码中，为了表示请求成功，响应完成，数想家服务器将 \u003ccode\u003eHttpResponse\u003c/code\u003e 状态码设置为 \u003ccode\u003eHttpStatus.ok\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ehandleGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eguess\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equeryParameters\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eq\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estatusCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eok\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eHttpStatus.ok\u003c/code\u003e 和 \u003ccode\u003eHttpStatus.methodNotAllowed\u003c/code\u003e 是 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpStatus-class.html\"\u003eHttpStatus\u003c/a\u003e 类中许多预定义状态码中的两个。另一个有用的预定义状态码是 \u003ccode\u003eHttpStatus.notFound\u003c/code\u003e(经典的 404）。\u003c/p\u003e\n\u003cp\u003e除了状态码(\u003ccode\u003estatusCode\u003c/code\u003e)，HttpResponse 对象还有其他有用的属性:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e属性\u003c/th\u003e\n\u003cth align=\"left\"\u003e信息\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003econtentLength\u003c/td\u003e\n\u003ctd align=\"left\"\u003e响应的长度，-1 表示事先不知道长度。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003ecookies\u003c/td\u003e\n\u003ctd align=\"left\"\u003e要在客户端设置的 \u003ca href=\"https://api.dart.dev/stable/dart-io/Cookie-class.html\"\u003eCookies\u003c/a\u003e 列表。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eencoding\u003c/td\u003e\n\u003ctd align=\"left\"\u003e编写字符串时使用的\u003ca href=\"https://api.dart.dev/stable/dart-convert/Encoding-class.html\"\u003e编码\u003c/a\u003e，如 JSON 和 UTF-8。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eheaders\u003c/td\u003e\n\u003ctd align=\"left\"\u003e响应头，是一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpHeaders-class.html\"\u003eHttpHeaders\u003c/a\u003e 对象。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"将响应写到-httpresponse-对象\"\u003e将响应写到 HttpResponse 对象\u003c/h3\u003e\n\u003cp\u003e每个 HttpRequest 对象都有一个对应的 HttpResponse 对象。服务器通过响应对象将数据发回给客户端。\u003c/p\u003e\n\u003cp\u003e使用 HttpResponse 写方法之一(\u003ccode\u003ewrite()\u003c/code\u003e、\u003ccode\u003ewriteln()\u003c/code\u003e、\u003ccode\u003ewriteAll()\u003c/code\u003e 或 \u003ccode\u003ewriteCharCodes()\u003c/code\u003e)将响应数据写入 HttpResponse 对象。或者通过 \u003ccode\u003eaddStream\u003c/code\u003e 将 \u003ccode\u003eHttpResponse\u003c/code\u003e 对象连接到一个流，并写入流。响应完成后关闭对象。关闭 HttpResponse 对象会将数据发回给客户端。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ehandleGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eguess\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewriteln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003etrue\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewriteln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eI\u0026#39;m thinking of another number.\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"从独立的客户端进行-post-请求\"\u003e从独立的客户端进行 POST 请求\u003c/h2\u003e\n\u003cp\u003e本节的示例文件：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_writer_server.dart\"\u003ebasic_writer_server.dart\u003c/a\u003e 和  \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_writer_client.dart\"\u003ebasic_writer_client.dart\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003ehello world\u003c/code\u003e 和 \u003ccode\u003enumber thinker\u003c/code\u003e 的例子中，浏览器生成了简单的 GET 请求，对于更复杂的 GET 请求和其他类型的请求，如 POST、PUT 或 DELETE，你需要写一个客户端程序，其中有两种。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个独立的客户端程序，它使用 \u003ccode\u003edart:io\u003c/code\u003e 的 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClient-class.html\"\u003eHttpClient\u003c/a\u003e 类。\u003c/li\u003e\n\u003cli\u003e基于浏览器的客户端，使用 \u003ca href=\"https://api.dart.dev/stable/dart-html/dart-html-library.html\"\u003edart:html\u003c/a\u003e 中的 API。本教程不涉及基于浏览器的客户端。要查看基于浏览器的客户端和相关服务器的代码，请参见 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/web/note_client.dart\"\u003enote_client.dart\u003c/a\u003e、\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/note_server.dart\"\u003enote_server.dart\u003c/a\u003e 和 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/web/note_taker.html\"\u003enote_taker.html\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e让我们看看一个独立的客户端，\u003ccode\u003ebasic_writer_client.dart\u003c/code\u003e 和它的服务器 \u003ccode\u003ebasic_writer_server.dart\u003c/code\u003e。客户端发出一个 POST 请求，将 JSON 数据保存到服务器端的文件中。服务器接受请求并保存文件。\u003c/p\u003e\n\u003ch4 id=\"试试吧\"\u003e试试吧\u003c/h4\u003e\n\u003cp\u003e在命令行上运行服务器和客户端。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e首先，运行服务器:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e httpserver\n$ dart bin/basic_writer_server.dart\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e在一个新的终端中，运行客户端:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e httpserver\n$ dart bin/basic_writer_client.dart\nWrote data \u003cspan class=\"k\"\u003efor\u003c/span\u003e Han Solo.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e看看服务器写入 \u003ccode\u003efile.txt\u003c/code\u003e 的 JSON 数据:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Han Solo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026#34;job\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;reluctant hero\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026#34;BFF\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Chewbacca\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026#34;ship\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Millennium Falcon\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026#34;weakness\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;smuggling debts\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e客户端创建一个 HttpClient 对象，并使用 \u003ccode\u003epost()\u003c/code\u003e 方法进行请求。发起一个请求涉及两个 Future。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epost()\u003c/code\u003e 方法建立与服务器的网络连接并完成第一个 Future，返回一个 HttpClientRequest 对象。\u003c/li\u003e\n\u003cli\u003e客户端组成请求对象并关闭它。\u003ccode\u003eclose()\u003c/code\u003e 方法将请求发送到服务器并返回第二个 Future，它以一个 HttpClientResponse 对象完成。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edart:io\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edart:convert\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003e_host\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehost\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003efile.txt\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eMap\u003c/span\u003e \u003cspan class=\"n\"\u003ejsonData\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ename\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eHan Solo\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ejob\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ereluctant hero\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eBFF\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eChewbacca\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eship\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eMillennium Falcon\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eweakness\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esmuggling debts\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eHttpClientRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpClient\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epost\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_host\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4049\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*1*/\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtentType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eContentType\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*2*/\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejsonEncode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejsonData\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*3*/\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eHttpClientResponse\u003c/span\u003e \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*4*/\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eutf8\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecoder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*5*/\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eforEach\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e/\u003cem\u003e1\u003c/em\u003e/ \u003ccode\u003epost()\u003c/code\u003e 方法需要主机、端口和请求资源的路径。除了 \u003ccode\u003epost()\u003c/code\u003e 之外，\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClient-class.html\"\u003eHttpClient\u003c/a\u003e 类还提供了其他类型的请求函数，包括 \u003ccode\u003epostUrl()\u003c/code\u003e、\u003ccode\u003eget()\u003c/code\u003e 和 \u003ccode\u003eopen()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e2\u003c/em\u003e/ 一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClientRequest-class.html\"\u003eHttpClientRequest\u003c/a\u003e 对象有一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpHeaders-class.html\"\u003eHttpHeaders\u003c/a\u003e 对象，它包含了请求头的信息。对于一些请求头，比如 \u003ccode\u003econtentType\u003c/code\u003e，HttpHeaders 有一个针对该请求头的属性。对于其他的请求头，使用 \u003ccode\u003eset()\u003c/code\u003e 方法将该请求头放入 HttpHeaders 对象中。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e3\u003c/em\u003e/ 客户端使用 \u003ccode\u003ewrite()\u003c/code\u003e 向请求对象写入数据。编码，在这个例子中是 JSON，与 \u003ca href=\"https://api.dart.dev/stable/dart-io/ContentType-class.html\"\u003eContentType\u003c/a\u003e 头中指定的类型相匹配。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e4\u003c/em\u003e/ \u003ccode\u003eclose()\u003c/code\u003e 方法将请求发送到服务器，完成后返回一个 \u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClientResponse-class.html\"\u003eHttpClientResponse\u003c/a\u003e 对象。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e5\u003c/em\u003e/ 来自服务器的 UTF-8 响应将被解码。使用在 \u003ca href=\"https://api.dart.dev/stable/dart-convert/dart-convert-library.html\"\u003edart:convert\u003c/a\u003e 库中定义的转换器将数据转换为常规的 Dart 字符串格式。\u003c/p\u003e\n\u003ch3 id=\"一个-restful-post-请求\"\u003e一个 RESTful POST 请求\u003c/h3\u003e\n\u003cp\u003e与 GET 请求类似，REST 为 POST 请求提供了指导方针。\u003c/p\u003e\n\u003cp\u003e一个 POST 请求:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建一个资源(在这个例子中，一个文件)\u003c/li\u003e\n\u003cli\u003e使用一个 URI，其结构与文件和目录路径名相似；例如，URI 没有查询字符串。\u003c/li\u003e\n\u003cli\u003e以 JSON 或 XML 格式传输数据\u003c/li\u003e\n\u003cli\u003e没有状态，也不会改变服务器的状态。\u003c/li\u003e\n\u003cli\u003e无长度限制\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这个例子中的客户端发出 REST 兼容的 POST 请求。\u003c/p\u003e\n\u003cp\u003e要想看到使 REST 兼容的 GET 请求的客户端代码，请看 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/number_guesser.dart\"\u003enumber_guesser.dart\u003c/a\u003e。它是一个独立的客户端，用于数字思考者服务器，定期进行猜测，直到猜对为止。\u003c/p\u003e\n\u003ch2 id=\"在服务器中处理一个-post-请求\"\u003e在服务器中处理一个 POST 请求\u003c/h2\u003e\n\u003cp\u003e本节的示例文件：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_writer_server.dart\"\u003ebasic_writer_server.dart\u003c/a\u003e 和 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_writer_client.dart\"\u003ebasic_writer_client.dart\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e一个 HttpRequest 对象是一个字节列表流(\u003ccode\u003eStream\u0026lt;List\u0026lt;int\u0026gt;\u003c/code\u003e)。要获得客户端发送的数据，就要监听 HttpRequest 对象上的数据。\u003c/p\u003e\n\u003cp\u003e如果来自客户端的请求包含了大量的数据，数据可能会以多个分块的形式到达。你可以使用 Stream 中的 \u003ccode\u003ejoin()\u003c/code\u003e 方法来连接这些分块的字符串值。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/tutorials/server/images/flowchart.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ebasic_writer_server.dart\u003c/code\u003e 文件实现了一个遵循这种模式的服务器。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edart:io\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edart:convert\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003e_host\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehost\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_host\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4049\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eContentType\u003c/span\u003e \u003cspan class=\"n\"\u003econtentType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtentType\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eHttpResponse\u003c/span\u003e \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ePOST\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003econtentType\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emimeType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eapplication/json\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*1*/\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n            \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eutf8\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecoder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*2*/\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejsonDecode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003eMap\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*3*/\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003efileName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epathSegments\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*4*/\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efileName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewriteAsString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nl\"\u003emode:\u003c/span\u003e \u003cspan class=\"n\"\u003eFileMode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estatusCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eok\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eWrote data for \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ename\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estatusCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einternalServerError\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eException during file I/O: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estatusCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethodNotAllowed\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eUnsupported request: \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emethod\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e/\u003cem\u003e1\u003c/em\u003e/ 该请求有一个 HttpHeaders 对象。记得客户端将 \u003ccode\u003econtentType\u003c/code\u003e 头设置为 JSON(application/json)。该服务器拒绝不是 JSON 编码的请求。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e2\u003c/em\u003e/ 一个 POST 请求对它可以发送的数据量没有限制，数据可能会以多块形式发送。此外，JSON 是 UTF-8，而 UTF-8 字符可以在多个字节上进行编码。\u003ccode\u003ejoin()\u003c/code\u003e 方法将这些分块放在一起。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e3\u003c/em\u003e/ 客户端发送的数据是 JSON 格式的。服务器使用 \u003ca href=\"https://api.dart.dev/stable/dart-convert/dart-convert-library.html\"\u003edart:convert\u003c/a\u003e 库中的 JSON 编解码器对其进行解码。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e4\u003c/em\u003e/ 请求的 URL 是 \u003ca href=\"http://localhost:4049/file.txt\"\u003elocalhost:4049/file.txt\u003c/a\u003e。代码 \u003ccode\u003ereq.uri.pathSegments.last\u003c/code\u003e 从 URI 中提取文件名: \u003ccode\u003efile.txt\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"关于-cors-头的说明\"\u003e关于 CORS 头的说明\u003c/h3\u003e\n\u003cp\u003e如果你想为运行在不同源头（不同主机或端口）的客户端提供服务，你需要添加 CORS 头。下面的代码，取自 note_server.dart，允许从任何来源的 POST 和 OPTIONS 请求。谨慎使用 CORS 头文件，因为它们会给你的网络带来安全风险。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eaddCorsHeaders\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpResponse\u003c/span\u003e \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAccess-Control-Allow-Origin\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e*\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eheaders\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAccess-Control-Allow-Methods\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ePOST, OPTIONS\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAccess-Control-Allow-Headers\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eOrigin, X-Requested-With, Content-Type, Accept\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e更多信息，请参考维基百科的\u003ca href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003e跨源资源共享\u003c/a\u003e一文。\u003c/p\u003e\n\u003ch2 id=\"使用-http_server-包\"\u003e使用 http_server 包\u003c/h2\u003e\n\u003cp\u003e本节的示例文件：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/mini_file_server.dart\"\u003emini_file_server.dart\u003c/a\u003e 和 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/static_file_server.dart\"\u003estatic_file_server.dart\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e对于一些更高层次的构件，我们推荐你尝试 \u003ca href=\"https://pub.dev/packages/http_server\"\u003ehttp_server\u003c/a\u003e pub 包，它包含了一组类，与 \u003ccode\u003edart:io\u003c/code\u003e 库中的 HttpServer 类一起，使得实现 HTTP 务器更加容易。\u003c/p\u003e\n\u003cp\u003e在本节中，我们比较了一个只使用 \u003ccode\u003edart:io\u003c/code\u003e 的 API 编写的服务器和一个使用 dart:io 和 http_server 一起编写的具有相同功能的服务器。\u003c/p\u003e\n\u003cp\u003e你可以在 \u003ccode\u003emini_file_server.dart\u003c/code\u003e 中找到第一个服务器。它通过从 \u003ccode\u003eweb\u003c/code\u003e 目录返回 \u003ccode\u003eindex.html\u003c/code\u003e 文件的内容来响应所有请求。\u003c/p\u003e\n\u003ch3 id=\"试试吧-1\"\u003e试试吧\u003c/h3\u003e\n\u003cp\u003e在命令行中运行服务器:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e httpserver\n$ dart bin/mini_file_server.dart\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在浏览器中输入 \u003ca href=\"http://localhost:4044/\"\u003elocalhost:4044\u003c/a\u003e。服务器会显示一个 HTML 文件。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/tutorials/server/images/index_file.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e这是迷你文件服务器的代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edart:io\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFile\u003c/span\u003e \u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eweb/index.html\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4044\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eCouldn\u0026#39;t bind to port 4044: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexists\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eServing \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtentType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eContentType\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddStream\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopenRead\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eCouldn\u0026#39;t read file: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003eCan\u0026#39;t open \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estatusCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enotFound\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这段代码确定文件是否存在，如果存在，则打开文件，并将文件内容管道化到HttpResponse对象。\u003c/p\u003e\n\u003cp\u003e第二个服务器，你可以在 \u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/basic_file_server.dart\"\u003ebasic_file_server.dart\u003c/a\u003e 中找到它的代码，使用 \u003ca href=\"https://pub.dev/packages/http_server\"\u003ehttp_server\u003c/a\u003e 包。\u003c/p\u003e\n\u003ch3 id=\"试试吧-2\"\u003e试试吧\u003c/h3\u003e\n\u003cp\u003e在命令行中运行服务器:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e httpserver\n$ dart bin/basic_file_server.dart\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在浏览器中输入 \u003ca href=\"http://localhost:4046/\"\u003elocalhost:4046\u003c/a\u003e。服务器显示与之前相同的 index.html 文件。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://dart.dev/tutorials/server/images/index_file_4046.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e在这个服务器中，处理请求的代码要短得多，因为 \u003ca href=\"https://pub.dev/documentation/http_server/latest/http_server/VirtualDirectory-class.html\"\u003eVirtualDirectory\u003c/a\u003e 类处理服务文件的细节。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edart:io\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epackage:http_server/http_server.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFile\u003c/span\u003e \u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eweb/index.html\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eVirtualDirectory\u003c/span\u003e \u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVirtualDirectory\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserverRequests\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4046\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserverRequests\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eserveFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etargetFile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里，请求的资源 index.html 是由 VirtualDirectory 类中的 \u003ccode\u003eserviceFile()\u003c/code\u003e 方法提供的。你不需要写代码来打开一个文件并将其内容用管道传送到请求中。\u003c/p\u003e\n\u003cp\u003e另一个文件服务器 \u003ccode\u003estatic_file_server.dart\u003c/code\u003e 也使用 http_server 包。这个服务器可以服务于服务器目录或子目录中的任何文件。\u003c/p\u003e\n\u003cp\u003e运行 \u003ccode\u003estatic_file_server.dart\u003c/code\u003e，用 \u003ca href=\"http://localhost:4048/\"\u003elocalhost:4048\u003c/a\u003e 这个 URL 进行测试。\u003c/p\u003e\n\u003cp\u003e下面是 \u003ccode\u003estatic_file_server.dart\u003c/code\u003e 的代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edart:io\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epackage:http_server/http_server.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVirtualDirectory\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eweb\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eallowDirectoryListing\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*1*/\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edirectoryHandler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*2*/\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eindexUri\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresolve\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eindex.html\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eserveFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindexUri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoFilePath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*3*/\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eInternetAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloopbackIPv4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4048\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eListening on port 4048\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eforEach\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estaticFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eserveRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*4*/\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e/\u003cem\u003e1\u003c/em\u003e/ 允许客户端请求服务器目录内的文件。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e2\u003c/em\u003e/ 一个匿名函数，处理对目录本身的请求，即 URL 不包含文件名。该函数将这些请求重定向到 \u003ccode\u003eindex.html\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e3\u003c/em\u003e/ \u003ccode\u003eserveFile\u003c/code\u003e 方法为一个文件提供服务，在这个例子中，它为目录请求服务index.html。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e4\u003c/em\u003e/ VirtualDirectory 类提供的 \u003ccode\u003eserviceRequest\u003c/code\u003e 方法处理指定文件的请求。\u003c/p\u003e\n\u003ch2 id=\"使用-bindsecure-的-https-方法\"\u003e使用 bindSecure() 的 https 方法\u003c/h2\u003e\n\u003cp\u003e本节的示例：\u003ca href=\"https://github.com/dart-lang/site-www/blob/master/examples/httpserver/bin/hello_world_server_secure.dart\"\u003ehello_world_server_secure.dart\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e你可能已经注意到，HttpServer 类定义了一个叫做 \u003ccode\u003ebindSecure()\u003c/code\u003e 的方法，它使用 HTTPS(Hyper Text Transfer Protocol with Secure Sockets Layer)提供安全连接。要使用 \u003ccode\u003ebindSecure()\u003c/code\u003e 方法，你需要一个证书，这个证书由证书颁发机构(CA)提供。有关证书的更多信息，请参考\u003ca href=\"https://www.tldp.org/HOWTO/SSL-Certificates-HOWTO/x64.html\"\u003e什么是 SSL 和什么是证书\u003c/a\u003e？\u003c/p\u003e\n\u003cp\u003e为了说明问题，下面的服务器 \u003ccode\u003ehello_world_server_secure.dart\u003c/code\u003e 使用 Dart 团队创建的证书调用 \u003ccode\u003ebindSecure()\u003c/code\u003e 进行测试。你必须为你的服务器提供自己的证书。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edart:io\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ecertificateChain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eserver_chain.pem\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eserverKey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eserver_key.pem\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserverContext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSecurityContext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*1*/\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eserverContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euseCertificateChain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecertificateChain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*2*/\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eserverContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eusePrivateKey\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eserverKey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nl\"\u003epassword:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003edartdart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*3*/\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eHttpServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebindSecure\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003elocalhost\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"m\"\u003e4047\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eserverContext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*4*/\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eListening on localhost:\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eport\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpRequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e/\u003cem\u003e1\u003c/em\u003e/ 安全网络连接的可选设置在 SecurityContext 对象中指定，有一个默认的对象 SecurityContext.defaultContext，包括知名证书机构的可信根证书。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e2\u003c/em\u003e/ 一个包含从服务器证书到签名机关根证书链的文件，\u003ca href=\"https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail\"\u003e格式为 PEM\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e3\u003c/em\u003e/ 一个包含（加密的）服务器证书私钥的文件，\u003ca href=\"https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail\"\u003ePEM 格式\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e/\u003cem\u003e4\u003c/em\u003e/ 在服务器上，上下文参数是必需的，对客户端来说是可选的。如果省略它，则使用默认的内置可信根的上下文。\u003c/p\u003e\n\u003ch2 id=\"其他资源\"\u003e其他资源\u003c/h2\u003e\n\u003cp\u003e请访问这些 API 文档，了解本教程中讨论的类和库的更多细节。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003eDart 类\u003c/th\u003e\n\u003cth align=\"left\"\u003e目的\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpServer-class.html\"\u003eHttpServer\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个 HTTP 服务器\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClient-class.html\"\u003eHttpClient\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个 HTTP 客户端\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpRequest-class.html\"\u003eHttpRequest\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个服务器端请求对象\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpResponse-class.html\"\u003eHttpResponse\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个服务器端响应对象\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClientRequest-class.html\"\u003eHttpClientRequest\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个客户端请求对象\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpClientResponse-class.html\"\u003eHttpClientResponse\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个客户端响应对象\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpHeaders-class.html\"\u003eHttpHeaders\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e请求头\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/HttpStatus-class.html\"\u003eHttpStatus\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e响应的状态\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/InternetAddress-class.html\"\u003eInternetAddress\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个互联网地址\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://api.dart.dev/stable/dart-io/SecurityContext-class.html\"\u003eSecurityContext\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e包含安全连接的证书、密钥和信任信息。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/http_server\"\u003ehttp_server\u003c/a\u003e 包\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个具有较高级别的 HTTP 类的包\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"下一步该怎么做\"\u003e下一步该怎么做？\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e如果你还没有尝试过服务器端的 codelab，可以尝试\u003ca href=\"https://dart-lang.github.io/server/codelab/\"\u003e编写一个服务器应用程序\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart-lang.github.io/server/\"\u003eServers with Dart\u003c/a\u003e 链接到编写独立 Dart 应用程序的资源，包括服务器。\u003c/li\u003e\n\u003c/ul\u003e\n","text":"有什么意义呢？\n HTTP 协议允许客户端和服务器进行通信。 dart:io 包有编写 HTTP 程序的类。 服务器监听主机和端口上的请求。 客户端使用 HTTP 方法请求发送请求。 http_server 包提供了更高级别的构件。  前提条件: HTTP 服务器和客户端严重依赖 future 和流，本教程中没有解释这些内容。你可以从异步编程 codelab和流教程中了解它们。\nHTTP（超文本传输协议）是一种通信协议，用于通过互联网将数据从一个程序发送到另一个程序。数据传输的一端是服务器，另一端是客户端。客户端通常是基于浏览器的（用户在浏览器中输入或在浏览器中运行的脚本），但也可能是一个独立的程序。\n服务器与主机和端口绑定（它与一个IP地址和一个端口号建立专属连接）。然后服务器监听请求。由于 Dart 的异步性，服务器可以同时处理很多请求，具体如下。\n 服务器监听 客户端连接 服务器接受并接收请求(并继续监听) 服务器可以继续接受其他请求 服务器写入请求的响应或几个请求，可能是交错的请求 服务器最终结束(关闭)响应  在 Dart 中，dart:io 库包含了编写 HTTP 客户端和服务器所需的类和函数。此外，http_server 包包含了一些更高层次的类，使其更容易编写客户端和服务器。\n重要：基于浏览器的程序不能使用 dart:io 库。\ndart:io 库中的 API 只适用于独立的命令行程序。它们不能在浏览器中工作。要从基于浏览器的客户端发出 HTTP 请求，请参考 dart:html HttpRequest 类。\n本教程提供了几个例子，说明编写 Dart HTTP 服务器和客户端是多么容易。从服务器的 hello world 开始，你将学习如何编写服务器的代码，从绑定和监听到响应请求。你还可以学习到客户端：提出不同类型的请求(GET 和 POST)，编写基于浏览器和命令行的客户端。\n获取源码  获取 Dart 教程的示例代码。 查看 httpserver 目录，其中包含本教程所需的源码。  运行 hello world 服务器 本节的示例文件：hello_world_server.dart。\n让我们从一个小型的服务器开始，用字符串 Hello, world 来响应所有的请求。\n在命令行中，运行 hello_world_server.dart 脚本:\n$ cd httpserver $ dart bin/hello_world_server.dart listening on localhost, port 4040 在任何浏览器中，访问 localhost:4040。浏览器会显示 Hello, world!。\n在这种情况下，服务器是一个 Dart 程序，客户端是你使用的浏览器。然而，你可以用 Dart 编写客户端程序-无论是基于浏览器的客户端脚本，还是独立的程序。\n快速浏览一下代码 在 hello world 服务器的代码中，一个 HTTP 服务器与主机和端口绑定，监听 HTTP 请求，并写入响应。需要注意的是，该程序导入了 dart:io 库，其中包含了服务器端程序和客户端程序的 HTTP 相关类(但不包含 Web 应用)。\nimport \u0026#39;dart:io\u0026#39;; Future main() async { var server = await HttpServer.bind( InternetAddress.loopbackIPv4, 4040, ); print(\u0026#39;Listening on localhost:${server.port}\u0026#39;); await for (HttpRequest request in server) { request.response.write(\u0026#39;Hello, world!\u0026#39;); await request.response.close(); } } 接下来的几节内容包括服务器端绑定、发出客户端 GET 请求、监听和响应。\n将服务器绑定到主机和端口 本节示例：hello_world_server.dart。\nmain() 中的第一条语句使用 HttpServer.bind() 创建一个 HttpServer 对象，并将其绑定到主机和端口。\nvar server = await HttpServer.bind( InternetAddress.loopbackIPv4, 4040, ); 该代码使用 await 异步调用 bind 方法。\n主机名 bind() 的第一个参数是指定主机名。你可以用一个字符串来指定一个特定的主机名或IP地址，也可以用 InternetAddress 类提供的这些预定义的值来指定主机。\n   值 用例     回环 IPv4 或 loopbackIPv6 服务器在 loopback 地址上监听客户端活动，该地址实际上是 localhost。使用IP协议的4或6版本。这些主要用于测试。我们建议您使用这些值而不是 localhost 或 127.0.0.1。   任何 IPv4 或 anyIPv6 服务器监听任何 IP 地址上指定端口上的客户端活动。使用IP协议的4或6版本。    默认情况下，当使用V6互联网地址时，也会使用V4监听器。\n端口 bind() 的第二个参数是指定端口的整数。端口唯一地标识主机上的服务。1024 以下的端口号为标准服务保留(0除外)。例如，FTP 数据传输通常在端口20上运行，每日报价在端口17上运行，HTTP 在端口80上运行。你的程序应该使用1024以上的端口号。如果端口已经在使用中，你的服务器的连接将被拒绝。\n侦听请求 服务器使用 await for 开始监听 HTTP 请求。每收到一个请求，代码就会发送一个 \u0026ldquo;Hello, world!\u0026rdquo; 的响应。\nawait for (HttpRequest request in server) { request.response.write(\u0026#39;Hello, world!\u0026#39;); await request.response.close(); } 你将在监听和处理请求一节中了解更多关于 HttpRequest 对象包含的内容以及如何编写响应。但首先，让我们看看客户端产生请求的一种方式。\n使用 HTML 表单发出 GET 请求 本节的示例文件：number_thinker.dart 和 make_a_guess.html。\n本节介绍了一个命令行服务器，它可以随机选择一个0到9之间的数字。客户端是一个基本的 HTML 网页，make_a_guess.html，你可以用它来猜数字。\n试试吧\n 运行数字思考者服务器  在命令行，运行 number_thinker.dart server。你应该看到类似下面的东西:\n$ cd httpserver $ dart bin/number_thinker.dart I\u0026#39;m thinking of a number: 6 启动网络服务器  从应用程序的顶部目录运行 webdev serve。\n更多信息：webdev 文档\n打开 HTML 页面  在浏览器中，进入 localhost:8080/make_a_guess.html。\n做一个猜测  选择一个数字，然后按猜测按钮。\n在客户端中没有涉及到 Dart 代码。客户端请求是通过浏览器向 Dart 服务器发出的，在 make_a_guess.html 中的 HTML 表单，它提供了一个自动制定和发送客户端 HTTP 请求的方法。该表单包含下拉列表和按钮。该表单还指定了 URL，其中包括端口号，以及请求的种类（请求方法）。它还可能包含建立查询字符串的元素。\n下面是 make_a_guess.html 中的表单 HTML。\n\u0026lt;form action=\u0026#34;http://localhost:4041\u0026#34; method=\u0026#34;GET\u0026#34;\u0026gt; \u0026lt;select name=\u0026#34;q\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;0\u0026#34;\u0026gt;0\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;1\u0026#34;\u0026gt;1\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;2\u0026#34;\u0026gt;2\u0026lt;/option\u0026gt; \u0026lt;!--··· --\u0026gt; \u0026lt;option value=\u0026#34;9\u0026#34;\u0026gt;9\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Guess\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; 下面是表单的工作原理:\n 表单的 action 属性被分配给发送请求的 URL 表单的 method 属性定义了请求的类型，这里是 GET。其他常见的请求类型包括 POST、PUT 和 DELETE。 表单中任何有名称(name)的元素，比如 \u0026lt;select\u0026gt; 元素，都会成为查询字符串中的一个参数。 当按下提交按钮(\u0026lt;input type=\u0026quot;submit\u0026quot;...\u0026gt;)时，提交按钮会根据表单的内容制定请求并发送。  一个 RESTful GET 请求 REST(REpresentational State Transfer)是一套设计 Web 服务的原则。乖巧的 HTTP 客户端和服务器遵守为 GET 请求定义的 REST 原则。\n一个 GET 请求:\n 只检索数据 不会改变服务器的状态 有长度限制 可以在请求的 URL 中发送查询字符串  在这个例子中，客户端发出了一个符合 REST 的 GET 请求。\n监听和处理请求 本节的示例文件: number_thinker.dart 和 make_a_guess.html。\n现在你已经看到这个基于浏览器的客户端的例子，让我们看看数字思维服务器的 Dart 代码，从 main() 开始。\n再一次，服务器绑定了一个主机和端口。在这里，每收到一个请求都会调用顶层的 handleRequest() 方法。因为 HttpServer 实现了 Stream，所以可以使用 await for 来处理请求。\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:math\u0026#39; show Random; Random intGenerator = Random(); int myNumber = intGenerator.nextInt(10); Future main() async { print(\u0026#34;I\u0026#39;m thinking of a number: $myNumber\u0026#34;); HttpServer server = await HttpServer.bind( InternetAddress.loopbackIPv4, 4041, ); await for (var request in server) { handleRequest(request); } } 当一个 GET 请求到达时，handleRequest() 方法会调用 handleGet() 来处理该请求。\nvoid handleRequest(HttpRequest request) { try { if (request.method == \u0026#39;GET\u0026#39;) { handleGet(request); } else { // ···  } } catch (e) { print(\u0026#39;Exception in handleRequest: $e\u0026#39;); } print(\u0026#39;Request handled.\u0026#39;); } 一个 HttpRequest 对象有很多属性，提供了关于请求的信息。下表列出了一些有用的属性。\n   属性 信息     method \u0026lsquo;GET\u0026rsquo;, \u0026lsquo;POST\u0026rsquo;, \u0026lsquo;PUT\u0026rsquo; 等方法中的一个。   uri 一个 Uri 对象：scheme、host、port、query string 和其他关于请求资源的信息。   response 一个 HttpResponse 对象：服务器将其响应写入其中。   headers 一个 HttpHeaders 对象：请求的头信息，包括 ContentType、内容长度、日期等。    使用方法属性 下面的数想器例子中的代码使用 HttpRequest 的 method 属性来确定收到了什么样的请求。这个服务器只处理 GET 请求。\nif (request.method == \u0026#39;GET\u0026#39;) { handleGet(request); } else { request.response ..statusCode = HttpStatus.methodNotAllowed ..write(\u0026#39;Unsupported request: ${request.method}.\u0026#39;) ..close(); } 使用 uri 属性 在浏览器中输入一个 URL 会产生一个 GET 请求，它只是简单地从指定的资源中请求数据。它可以通过附加在 URI 上的查询字符串随请求发送少量数据。\nvoid handleGet(HttpRequest request) { final guess = request.uri.queryParameters[\u0026#39;q\u0026#39;]; // ··· } 使用 HttpRequest 对象的 uri 属性来获取一个 Uri 对象，这个 Uri 对象包含了用户输入的 URL 的信息。Uri 对象的 queryParameters 属性是一个 Map，包含查询字符串的组件。通过名称来引用所需的参数。本例使用 q 来标识猜测的数字。\n设置响应的状态码 服务器应该设置状态码来表示请求的成功或失败。前面看到数想家将状态码设置为 methodNotAllowed 来拒绝非 GET 请求。在后面的代码中，为了表示请求成功，响应完成，数想家服务器将 HttpResponse 状态码设置为 HttpStatus.ok。\nvoid handleGet(HttpRequest request) { final guess = request.uri.queryParameters[\u0026#39;q\u0026#39;]; final response = request.response; response.statusCode = HttpStatus.ok; // ··· } HttpStatus.ok 和 HttpStatus.methodNotAllowed 是 HttpStatus 类中许多预定义状态码中的两个。另一个有用的预定义状态码是 HttpStatus.notFound(经典的 404）。\n除了状态码(statusCode)，HttpResponse 对象还有其他有用的属性:\n   属性 信息     contentLength 响应的长度，-1 表示事先不知道长度。   cookies 要在客户端设置的 Cookies 列表。   encoding 编写字符串时使用的编码，如 JSON 和 UTF-8。   headers 响应头，是一个 HttpHeaders 对象。    将响应写到 HttpResponse 对象 每个 HttpRequest 对象都有一个对应的 HttpResponse 对象。服务器通过响应对象将数据发回给客户端。\n使用 HttpResponse 写方法之一(write()、writeln()、writeAll() 或 writeCharCodes())将响应数据写入 HttpResponse 对象。或者通过 addStream 将 HttpResponse 对象连接到一个流，并写入流。响应完成后关闭对象。关闭 HttpResponse 对象会将数据发回给客户端。\nvoid handleGet(HttpRequest request) { // ···  if (guess == myNumber.toString()) { response ..writeln(\u0026#39;true\u0026#39;) ..writeln(\u0026#34;I\u0026#39;m thinking of another number.\u0026#34;) ..close(); // ···  } } 从独立的客户端进行 POST 请求 本节的示例文件：basic_writer_server.dart 和 basic_writer_client.dart。\n在 hello world 和 number thinker 的例子中，浏览器生成了简单的 GET 请求，对于更复杂的 GET 请求和其他类型的请求，如 POST、PUT 或 DELETE，你需要写一个客户端程序，其中有两种。\n 一个独立的客户端程序，它使用 dart:io 的 HttpClient 类。 基于浏览器的客户端，使用 dart:html 中的 API。本教程不涉及基于浏览器的客户端。要查看基于浏览器的客户端和相关服务器的代码，请参见 note_client.dart、note_server.dart 和 note_taker.html。  让我们看看一个独立的客户端，basic_writer_client.dart 和它的服务器 basic_writer_server.dart。客户端发出一个 POST 请求，将 JSON 数据保存到服务器端的文件中。服务器接受请求并保存文件。\n试试吧 在命令行上运行服务器和客户端。\n 首先，运行服务器:  cd httpserver $ dart bin/basic_writer_server.dart 在一个新的终端中，运行客户端:  $ cd httpserver $ dart bin/basic_writer_client.dart Wrote data for Han Solo. 看看服务器写入 file.txt 的 JSON 数据:\n{\u0026#34;name\u0026#34;:\u0026#34;Han Solo\u0026#34;,\u0026#34;job\u0026#34;:\u0026#34;reluctant hero\u0026#34;,\u0026#34;BFF\u0026#34;:\u0026#34;Chewbacca\u0026#34;,\u0026#34;ship\u0026#34;:\u0026#34;Millennium Falcon\u0026#34;,\u0026#34;weakness\u0026#34;:\u0026#34;smuggling debts\u0026#34;} 客户端创建一个 HttpClient 对象，并使用 post() 方法进行请求。发起一个请求涉及两个 Future。\n post() 方法建立与服务器的网络连接并完成第一个 Future，返回一个 HttpClientRequest 对象。 客户端组成请求对象并关闭它。close() 方法将请求发送到服务器并返回第二个 Future，它以一个 HttpClientResponse 对象完成。  import \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:convert\u0026#39;; String _host = InternetAddress.loopbackIPv4.host; String path = \u0026#39;file.txt\u0026#39;; Map jsonData = { \u0026#39;name\u0026#39;: \u0026#39;Han Solo\u0026#39;, \u0026#39;job\u0026#39;: \u0026#39;reluctant hero\u0026#39;, \u0026#39;BFF\u0026#39;: \u0026#39;Chewbacca\u0026#39;, \u0026#39;ship\u0026#39;: \u0026#39;Millennium Falcon\u0026#39;, \u0026#39;weakness\u0026#39;: \u0026#39;smuggling debts\u0026#39; }; Future main() async { HttpClientRequest request = await HttpClient().post(_host, 4049, path) /*1*/ ..headers.contentType = ContentType.json /*2*/ ..write(jsonEncode(jsonData)); /*3*/ HttpClientResponse response = await request.close(); /*4*/ await utf8.decoder.bind(response /*5*/).forEach(print); } /1/ post() 方法需要主机、端口和请求资源的路径。除了 post() 之外，HttpClient 类还提供了其他类型的请求函数，包括 postUrl()、get() 和 open()。\n/2/ 一个 HttpClientRequest 对象有一个 HttpHeaders 对象，它包含了请求头的信息。对于一些请求头，比如 contentType，HttpHeaders 有一个针对该请求头的属性。对于其他的请求头，使用 set() 方法将该请求头放入 HttpHeaders 对象中。\n/3/ 客户端使用 write() 向请求对象写入数据。编码，在这个例子中是 JSON，与 ContentType 头中指定的类型相匹配。\n/4/ close() 方法将请求发送到服务器，完成后返回一个 HttpClientResponse 对象。\n/5/ 来自服务器的 UTF-8 响应将被解码。使用在 dart:convert 库中定义的转换器将数据转换为常规的 Dart 字符串格式。\n一个 RESTful POST 请求 与 GET 请求类似，REST 为 POST 请求提供了指导方针。\n一个 POST 请求:\n 创建一个资源(在这个例子中，一个文件) 使用一个 URI，其结构与文件和目录路径名相似；例如，URI 没有查询字符串。 以 JSON 或 XML 格式传输数据 没有状态，也不会改变服务器的状态。 无长度限制  这个例子中的客户端发出 REST 兼容的 POST 请求。\n要想看到使 REST 兼容的 GET 请求的客户端代码，请看 number_guesser.dart。它是一个独立的客户端，用于数字思考者服务器，定期进行猜测，直到猜对为止。\n在服务器中处理一个 POST 请求 本节的示例文件：basic_writer_server.dart 和 basic_writer_client.dart。\n一个 HttpRequest 对象是一个字节列表流(Stream\u0026lt;List\u0026lt;int\u0026gt;)。要获得客户端发送的数据，就要监听 HttpRequest 对象上的数据。\n如果来自客户端的请求包含了大量的数据，数据可能会以多个分块的形式到达。你可以使用 Stream 中的 join() 方法来连接这些分块的字符串值。\nbasic_writer_server.dart 文件实现了一个遵循这种模式的服务器。\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:convert\u0026#39;; String _host = InternetAddress.loopbackIPv4.host; Future main() async { var server = await HttpServer.bind(_host, 4049); await for (var req in server) { ContentType contentType = req.headers.contentType; HttpResponse response = req.response; if (req.method == \u0026#39;POST\u0026#39; \u0026amp;\u0026amp; contentType?.mimeType == \u0026#39;application/json\u0026#39; /*1*/) { try { String content = await utf8.decoder.bind(req).join(); /*2*/ var data = jsonDecode(content) as Map; /*3*/ var fileName = req.uri.pathSegments.last; /*4*/ await File(fileName) .writeAsString(content, mode: FileMode.write); req.response ..statusCode = HttpStatus.ok ..write(\u0026#39;Wrote data for ${data[\u0026#39;name\u0026#39;]}.\u0026#39;); } catch (e) { response ..statusCode = HttpStatus.internalServerError ..write(\u0026#39;Exception during file I/O: $e.\u0026#39;); } } else { response ..statusCode = HttpStatus.methodNotAllowed ..write(\u0026#39;Unsupported request: ${req.method}.\u0026#39;); } await response.close(); } } /1/ 该请求有一个 HttpHeaders 对象。记得客户端将 contentType 头设置为 JSON(application/json)。该服务器拒绝不是 JSON 编码的请求。\n/2/ 一个 POST 请求对它可以发送的数据量没有限制，数据可能会以多块形式发送。此外，JSON 是 UTF-8，而 UTF-8 字符可以在多个字节上进行编码。join() 方法将这些分块放在一起。\n/3/ 客户端发送的数据是 JSON 格式的。服务器使用 dart:convert 库中的 JSON 编解码器对其进行解码。\n/4/ 请求的 URL 是 localhost:4049/file.txt。代码 req.uri.pathSegments.last 从 URI 中提取文件名: file.txt。\n关于 CORS 头的说明 如果你想为运行在不同源头（不同主机或端口）的客户端提供服务，你需要添加 CORS 头。下面的代码，取自 note_server.dart，允许从任何来源的 POST 和 OPTIONS 请求。谨慎使用 CORS 头文件，因为它们会给你的网络带来安全风险。\nvoid addCorsHeaders(HttpResponse response) { response.headers.add(\u0026#39;Access-Control-Allow-Origin\u0026#39;, \u0026#39;*\u0026#39;); response.headers .add(\u0026#39;Access-Control-Allow-Methods\u0026#39;, \u0026#39;POST, OPTIONS\u0026#39;); response.headers.add(\u0026#39;Access-Control-Allow-Headers\u0026#39;, \u0026#39;Origin, X-Requested-With, Content-Type, Accept\u0026#39;); } 更多信息，请参考维基百科的跨源资源共享一文。\n使用 http_server 包 本节的示例文件：mini_file_server.dart 和 static_file_server.dart。\n对于一些更高层次的构件，我们推荐你尝试 http_server pub 包，它包含了一组类，与 dart:io 库中的 HttpServer 类一起，使得实现 HTTP 务器更加容易。\n在本节中，我们比较了一个只使用 dart:io 的 API 编写的服务器和一个使用 dart:io 和 http_server 一起编写的具有相同功能的服务器。\n你可以在 mini_file_server.dart 中找到第一个服务器。它通过从 web 目录返回 index.html 文件的内容来响应所有请求。\n试试吧 在命令行中运行服务器:\n$ cd httpserver $ dart bin/mini_file_server.dart 在浏览器中输入 localhost:4044。服务器会显示一个 HTML 文件。\n这是迷你文件服务器的代码:\nimport \u0026#39;dart:io\u0026#39;; File targetFile = File(\u0026#39;web/index.html\u0026#39;); Future main() async { Stream\u0026lt;HttpRequest\u0026gt; server; try { server = await HttpServer.bind(InternetAddress.loopbackIPv4, 4044); } catch (e) { print(\u0026#34;Couldn\u0026#39;t bind to port 4044: $e\u0026#34;); exit(-1); } await for (HttpRequest req in server) { if (await targetFile.exists()) { print(\u0026#34;Serving ${targetFile.path}.\u0026#34;); req.response.headers.contentType = ContentType.html; try { await req.response.addStream(targetFile.openRead()); } catch (e) { print(\u0026#34;Couldn\u0026#39;t read file: $e\u0026#34;); exit(-1); } } else { print(\u0026#34;Can\u0026#39;t open ${targetFile.path}.\u0026#34;); req.response.statusCode = HttpStatus.notFound; } await req.response.close(); } } 这段代码确定文件是否存在，如果存在，则打开文件，并将文件内容管道化到HttpResponse对象。\n第二个服务器，你可以在 basic_file_server.dart 中找到它的代码，使用 http_server 包。\n试试吧 在命令行中运行服务器:\n$ cd httpserver $ dart bin/basic_file_server.dart 在浏览器中输入 localhost:4046。服务器显示与之前相同的 index.html 文件。\n在这个服务器中，处理请求的代码要短得多，因为 VirtualDirectory 类处理服务文件的细节。\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;package:http_server/http_server.dart\u0026#39;; File targetFile = File(\u0026#39;web/index.html\u0026#39;); Future main() async { VirtualDirectory staticFiles = VirtualDirectory(\u0026#39;.\u0026#39;); var serverRequests = await HttpServer.bind(InternetAddress.loopbackIPv4, 4046); await for (var request in serverRequests) { staticFiles.serveFile(targetFile, request); } } 这里，请求的资源 index.html 是由 VirtualDirectory 类中的 serviceFile() 方法提供的。你不需要写代码来打开一个文件并将其内容用管道传送到请求中。\n另一个文件服务器 static_file_server.dart 也使用 http_server 包。这个服务器可以服务于服务器目录或子目录中的任何文件。\n运行 static_file_server.dart，用 localhost:4048 这个 URL 进行测试。\n下面是 static_file_server.dart 的代码:\nimport \u0026#39;dart:io\u0026#39;; import \u0026#39;package:http_server/http_server.dart\u0026#39;; Future main() async { var staticFiles = VirtualDirectory(\u0026#39;web\u0026#39;); staticFiles.allowDirectoryListing = true; /*1*/ staticFiles.directoryHandler = (dir, request) /*2*/ { var indexUri = Uri.file(dir.path).resolve(\u0026#39;index.html\u0026#39;); staticFiles.serveFile(File(indexUri.toFilePath()), request); /*3*/ }; var server = await HttpServer.bind(InternetAddress.loopbackIPv4, 4048); print(\u0026#39;Listening on port 4048\u0026#39;); await server.forEach(staticFiles.serveRequest); /*4*/ } /1/ 允许客户端请求服务器目录内的文件。\n/2/ 一个匿名函数，处理对目录本身的请求，即 URL 不包含文件名。该函数将这些请求重定向到 index.html。\n/3/ serveFile 方法为一个文件提供服务，在这个例子中，它为目录请求服务index.html。\n/4/ VirtualDirectory 类提供的 serviceRequest 方法处理指定文件的请求。\n使用 bindSecure() 的 https 方法 本节的示例：hello_world_server_secure.dart。\n你可能已经注意到，HttpServer 类定义了一个叫做 bindSecure() 的方法，它使用 HTTPS(Hyper Text Transfer Protocol with Secure Sockets Layer)提供安全连接。要使用 bindSecure() 方法，你需要一个证书，这个证书由证书颁发机构(CA)提供。有关证书的更多信息，请参考什么是 SSL 和什么是证书？\n为了说明问题，下面的服务器 hello_world_server_secure.dart 使用 Dart 团队创建的证书调用 bindSecure() 进行测试。你必须为你的服务器提供自己的证书。\nimport \u0026#39;dart:io\u0026#39;; String certificateChain = \u0026#39;server_chain.pem\u0026#39;; String serverKey = \u0026#39;server_key.pem\u0026#39;; Future main() async { var serverContext = SecurityContext(); /*1*/ serverContext.useCertificateChain(certificateChain); /*2*/ serverContext.usePrivateKey(serverKey, password: \u0026#39;dartdart\u0026#39;); /*3*/ var server = await HttpServer.bindSecure( \u0026#39;localhost\u0026#39;, 4047, serverContext, /*4*/ ); print(\u0026#39;Listening on localhost:${server.port}\u0026#39;); await for (HttpRequest request in server) { request.response.write(\u0026#39;Hello, world!\u0026#39;); await request.response.close(); } } /1/ 安全网络连接的可选设置在 SecurityContext 对象中指定，有一个默认的对象 SecurityContext.defaultContext，包括知名证书机构的可信根证书。\n/2/ 一个包含从服务器证书到签名机关根证书链的文件，格式为 PEM。\n/3/ 一个包含（加密的）服务器证书私钥的文件，PEM 格式。\n/4/ 在服务器上，上下文参数是必需的，对客户端来说是可选的。如果省略它，则使用默认的内置可信根的上下文。\n其他资源 请访问这些 API 文档，了解本教程中讨论的类和库的更多细节。\n   Dart 类 目的     HttpServer 一个 HTTP 服务器   HttpClient 一个 HTTP 客户端   HttpRequest 一个服务器端请求对象   HttpResponse 一个服务器端响应对象   HttpClientRequest 一个客户端请求对象   HttpClientResponse 一个客户端响应对象   HttpHeaders 请求头   HttpStatus 响应的状态   InternetAddress 一个互联网地址   SecurityContext 包含安全连接的证书、密钥和信任信息。   http_server 包 一个具有较高级别的 HTTP 类的包    下一步该怎么做？  如果你还没有尝试过服务器端的 codelab，可以尝试编写一个服务器应用程序。 Servers with Dart 链接到编写独立 Dart 应用程序的资源，包括服务器。  "},"name":"编写HTTP客户端和服务器","published":"2020-06-30T00:00:00+08:00","summary":"Write HTTP clients \u0026amp; servers","type":"entry","url":"https://ohmyweekly.github.io/notes/write-http-clients/"},{"content":{"html":"\u003cp\u003eDart 生态系统使用包来管理共享软件，如库和工具。要获得 Dart 包，你可以使用 \u003ccode\u003epub\u003c/code\u003e 包管理器。你可以在 \u003ca href=\"https://pub.dev/\"\u003epub.dev\u003c/a\u003e 网站上找到公开的包，也可以从本地文件系统或其他地方加载包，比如 Git 仓库。无论你的包来自哪里，pub 都会管理版本依赖关系，帮助你获得相互之间以及与 SDK 版本兼容的包版本。\u003c/p\u003e\n\u003cp\u003e大多数精通 Dart 的 \u003ca href=\"https://dart.dev/tools#ides-and-editors\"\u003eIDE\u003c/a\u003e 都提供了对 pub 的支持，包括创建、下载、更新和发布包。或者你可以\u003ca href=\"https://dart.dev/tools/pub/cmd\"\u003e在命令行中使用 pub\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e至少，一个 Dart 包是一个包含 \u003ca href=\"https://dart.dev/tools/pub/pubspec\"\u003epubspec 文件\u003c/a\u003e的目录。pubspec 包含一些关于包的元数据。此外，一个包可以包含依赖关系(在 pubspec 中列出)，Dart 库，应用程序，资源，测试，图像和例子。\u003c/p\u003e\n\u003cp\u003e要使用一个包，请执行以下操作:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建一个 pubspec(一个名为 \u003ccode\u003epubspec.yaml\u003c/code\u003e 的文件，它列出了软件包的依赖关系，并包含其他元数据，如版本号)。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003epub\u003c/code\u003e 来获取你的包的依赖关系。\u003c/li\u003e\n\u003cli\u003e如果你的 Dart 代码依赖于软件包中的一个库，则导入该库。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"创建一个-pubspec\"\u003e创建一个 pubspec\u003c/h2\u003e\n\u003cp\u003epubspec 是一个名为 \u003ccode\u003epubspec.yaml\u003c/code\u003e 的文件，它位于你的应用程序的顶级目录中。最简单的 pubspec 只列出了包名:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"nl\"\u003ename:\u003c/span\u003e \u003cspan class=\"n\"\u003emy_app\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下面是一个 pubspec 的例子，它声明了两个包(\u003ccode\u003ejs\u003c/code\u003e 和 \u003ccode\u003eintl\u003c/code\u003e)的依赖关系，这两个包都托管在 pub.dev 站点上:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"nl\"\u003ename:\u003c/span\u003e \u003cspan class=\"n\"\u003emy_app\u003c/span\u003e\n\u003cspan class=\"nl\"\u003edependencies:\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ejs:\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"m\"\u003e0.6\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003eintl:\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"m\"\u003e0.15\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e8\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e关于创建 pubspec 的详细信息，请参见 \u003ca href=\"https://dart.dev/tools/pub/pubspec\"\u003epubspec 文档\u003c/a\u003e和你要使用的包的文档。\u003c/p\u003e\n\u003ch2 id=\"获取软件包\"\u003e获取软件包\u003c/h2\u003e\n\u003cp\u003e一旦你有了 pubspec，你就可以从你的应用程序的顶级目录中运行 \u003ccode\u003epub get\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u0026lt;path-to-my_app\u0026gt;\n$ pub get\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个过程被称为获取依赖关系。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epub get\u003c/code\u003e 命令可以确定您的应用程序依赖于哪些软件包，并将它们放在中央\u003ca href=\"https://dart.dev/tools/pub/glossary#system-cache\"\u003e系统缓存\u003c/a\u003e中。如果您的应用程序依赖于已发布的包，pub 会从 \u003ca href=\"https://pub.dev/\"\u003epub.dev\u003c/a\u003e 站点下载该包。对于  \u003ca href=\"https://dart.dev/tools/pub/dependencies#git-packages\"\u003eGit 依赖\u003c/a\u003e，pub 会克隆 Git 仓库。还包括了过渡性依赖。例如，如果 \u003ccode\u003ejs\u003c/code\u003e 包依赖于 \u003ccode\u003etest\u003c/code\u003e 包，\u003ccode\u003epub\u003c/code\u003e 会同时抓取 \u003ccode\u003ejs\u003c/code\u003e 包和 \u003ccode\u003etest\u003c/code\u003e 包。\u003c/p\u003e\n\u003cp\u003ePub 会创建一个 \u003ccode\u003e.packages\u003c/code\u003e 文件(在你的应用程序的顶层目录下)，将你的应用程序所依赖的每个包名映射到系统缓存中的对应包。\u003c/p\u003e\n\u003ch2 id=\"从包中导入库\"\u003e从包中导入库\u003c/h2\u003e\n\u003cp\u003e要导入在包中找到的库，使用 \u003ccode\u003epackage:\u003c/code\u003e 前缀:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epackage:js/js.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ejs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epackage:intl/intl.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDart 运行时在 \u003ccode\u003epackage:\u003c/code\u003e 之后的所有内容都会在应用程序的 \u003ccode\u003e.package\u003c/code\u003e 文件中进行查找。\u003c/p\u003e\n\u003cp\u003e你也可以使用这种风格从你自己的包中导入库。比方说，\u003ccode\u003etransmogrify\u003c/code\u003e 包的布局如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003etransmogrify/\n  lib/\n    transmogrify.dart\n    parser.dart\n  test/\n    parser/\n      parser_test.dart\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eparser_test.dart\u003c/code\u003e 文件可以这样导入 \u003ccode\u003eparser.dart\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epackage:transmogrify/parser.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"升级依赖关系\"\u003e升级依赖关系\u003c/h2\u003e\n\u003cp\u003e当你第一次为你的软件包获取一个新的依赖关系时，pub 会下载与你的其他依赖关系兼容的最新版本。然后，它通过创建一个 \u003cstrong\u003elockfile\u003c/strong\u003e 锁文件来锁定您的软件包，使其始终使用该版本。这是一个名为 \u003ccode\u003epubspec.lock\u003c/code\u003e 的文件，由 pub 创建并存储在 pubspec 的旁边。它列出了您的软件包所使用的每个依赖关系的特定版本 (即时的和过渡的)。\u003c/p\u003e\n\u003cp\u003e如果你的包是一个应用程序包，你应该把这个文件检查到\u003ca href=\"https://dart.dev/guides/libraries/private-files\"\u003e源代码控制\u003c/a\u003e中。这样，在你的应用程序上工作的每个人都会使用所有包的相同版本。在 lockfile 文件中检查也可以确保你部署的应用使用相同版本的代码。\u003c/p\u003e\n\u003cp\u003e当你准备好将你的依赖项升级到最新版本时，使用 \u003ca href=\"https://dart.dev/tools/pub/cmd/pub-upgrade\"\u003epub upgrade\u003c/a\u003e 命令:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e \u003cspan class=\"n\"\u003epub\u003c/span\u003e \u003cspan class=\"n\"\u003eupgrade\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003epub upgrade\u003c/code\u003e 命令告诉 pub 使用你的包的依赖关系的最新版本来重新生成 lockfile 文件。如果你只想升级一个依赖关系，你可以指定要升级的软件包:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003e$\u003c/span\u003e \u003cspan class=\"n\"\u003epub\u003c/span\u003e \u003cspan class=\"n\"\u003eupgrade\u003c/span\u003e \u003cspan class=\"n\"\u003etransmogrify\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e该命令将 \u003ccode\u003etransmogrify\u003c/code\u003e 升级到最新版本，但其他一切都保持不变。\u003c/p\u003e\n\u003cp\u003e由于 pubspec 中有冲突的版本限制，\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-upgrade\"\u003epub upgrade\u003c/a\u003e 命令并不能总是将每个软件包升级到最新版本。要识别需要编辑 pubspec 的过期软件包，请使用 \u003ca href=\"https://dart.dev/tools/pub/cmd/pub-outdated\"\u003epub outdated\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"更多信息\"\u003e更多信息\u003c/h2\u003e\n\u003cp\u003e下面的页面有更多关于软件包和 pub 包管理器的信息。\u003c/p\u003e\n\u003cp\u003e如何使用\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/libraries/create-library-packages\"\u003e创建包\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/publishing\"\u003e发布包\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e参考\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/dependencies\"\u003ePub 依赖\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/environment-variables\"\u003ePub 环境变量\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/glossary\"\u003ePub 词汇表\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/package-layout\"\u003ePub 包布局约定\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/versioning\"\u003ePub 版本哲学\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/pubspec\"\u003ePubspec 格式化\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePub 命令\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epub\u003c/code\u003e 工具提供了以下命令:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-cache\"\u003epub cache\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-deps\"\u003epub deps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-downgrade\"\u003epub downgrade\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-get\"\u003epub get\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-global\"\u003epub global\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-outdated\"\u003epub outdated\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-lish\"\u003epub publish\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-run\"\u003epub run\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-upgrade\"\u003epub upgrade\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tools/pub/cmd/pub-uploader\"\u003epub uploader\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e有关所有 pub 命令的概述，请参阅 \u003ca href=\"https://dart.dev/tools/pub/cmd\"\u003epub 工具文档\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e疑难解答\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://dart.dev/tools/pub/troubleshoot\"\u003e故障排除 pub\u003c/a\u003e 提供了使用 pub 时可能遇到的问题的解决方案。\u003c/p\u003e\n","text":"Dart 生态系统使用包来管理共享软件，如库和工具。要获得 Dart 包，你可以使用 pub 包管理器。你可以在 pub.dev 网站上找到公开的包，也可以从本地文件系统或其他地方加载包，比如 Git 仓库。无论你的包来自哪里，pub 都会管理版本依赖关系，帮助你获得相互之间以及与 SDK 版本兼容的包版本。\n大多数精通 Dart 的 IDE 都提供了对 pub 的支持，包括创建、下载、更新和发布包。或者你可以在命令行中使用 pub。\n至少，一个 Dart 包是一个包含 pubspec 文件的目录。pubspec 包含一些关于包的元数据。此外，一个包可以包含依赖关系(在 pubspec 中列出)，Dart 库，应用程序，资源，测试，图像和例子。\n要使用一个包，请执行以下操作:\n 创建一个 pubspec(一个名为 pubspec.yaml 的文件，它列出了软件包的依赖关系，并包含其他元数据，如版本号)。 使用 pub 来获取你的包的依赖关系。 如果你的 Dart 代码依赖于软件包中的一个库，则导入该库。  创建一个 pubspec pubspec 是一个名为 pubspec.yaml 的文件，它位于你的应用程序的顶级目录中。最简单的 pubspec 只列出了包名:\nname: my_app 下面是一个 pubspec 的例子，它声明了两个包(js 和 intl)的依赖关系，这两个包都托管在 pub.dev 站点上:\nname: my_app dependencies: js: ^0.6.0 intl: ^0.15.8 关于创建 pubspec 的详细信息，请参见 pubspec 文档和你要使用的包的文档。\n获取软件包 一旦你有了 pubspec，你就可以从你的应用程序的顶级目录中运行 pub get:\n$ cd \u0026lt;path-to-my_app\u0026gt; $ pub get 这个过程被称为获取依赖关系。\npub get 命令可以确定您的应用程序依赖于哪些软件包，并将它们放在中央系统缓存中。如果您的应用程序依赖于已发布的包，pub 会从 pub.dev 站点下载该包。对于 Git 依赖，pub 会克隆 Git 仓库。还包括了过渡性依赖。例如，如果 js 包依赖于 test 包，pub 会同时抓取 js 包和 test 包。\nPub 会创建一个 .packages 文件(在你的应用程序的顶层目录下)，将你的应用程序所依赖的每个包名映射到系统缓存中的对应包。\n从包中导入库 要导入在包中找到的库，使用 package: 前缀:\nimport \u0026#39;package:js/js.dart\u0026#39; as js; import \u0026#39;package:intl/intl.dart\u0026#39;; Dart 运行时在 package: 之后的所有内容都会在应用程序的 .package 文件中进行查找。\n你也可以使用这种风格从你自己的包中导入库。比方说，transmogrify 包的布局如下:\ntransmogrify/ lib/ transmogrify.dart parser.dart test/ parser/ parser_test.dart parser_test.dart 文件可以这样导入 parser.dart:\nimport \u0026#39;package:transmogrify/parser.dart\u0026#39;; 升级依赖关系 当你第一次为你的软件包获取一个新的依赖关系时，pub 会下载与你的其他依赖关系兼容的最新版本。然后，它通过创建一个 lockfile 锁文件来锁定您的软件包，使其始终使用该版本。这是一个名为 pubspec.lock 的文件，由 pub 创建并存储在 pubspec 的旁边。它列出了您的软件包所使用的每个依赖关系的特定版本 (即时的和过渡的)。\n如果你的包是一个应用程序包，你应该把这个文件检查到源代码控制中。这样，在你的应用程序上工作的每个人都会使用所有包的相同版本。在 lockfile 文件中检查也可以确保你部署的应用使用相同版本的代码。\n当你准备好将你的依赖项升级到最新版本时，使用 pub upgrade 命令:\n$ pub upgrade pub upgrade 命令告诉 pub 使用你的包的依赖关系的最新版本来重新生成 lockfile 文件。如果你只想升级一个依赖关系，你可以指定要升级的软件包:\n$ pub upgrade transmogrify 该命令将 transmogrify 升级到最新版本，但其他一切都保持不变。\n由于 pubspec 中有冲突的版本限制，pub upgrade 命令并不能总是将每个软件包升级到最新版本。要识别需要编辑 pubspec 的过期软件包，请使用 pub outdated。\n更多信息 下面的页面有更多关于软件包和 pub 包管理器的信息。\n如何使用\n 创建包 发布包  参考\n Pub 依赖 Pub 环境变量 Pub 词汇表 Pub 包布局约定 Pub 版本哲学 Pubspec 格式化  Pub 命令\npub 工具提供了以下命令:\n pub cache pub deps pub downgrade pub get pub global pub outdated pub publish pub run pub upgrade pub uploader  有关所有 pub 命令的概述，请参阅 pub 工具文档。\n疑难解答\n故障排除 pub 提供了使用 pub 时可能遇到的问题的解决方案。\n"},"name":"如何使用包","published":"2020-06-29T00:00:00+08:00","summary":"Dart 包管理工具 - pub","type":"entry","url":"https://ohmyweekly.github.io/notes/how-to-use-packages/"},{"content":{"html":"\u003cp\u003e本页列出了一些  Dart 开发者发布的最流行和最有用的\u003ca href=\"https://dart.dev/guides/packages\"\u003e包\u003c/a\u003e。要找到更多的软件包\u0026ndash;也可以搜索\u003ca href=\"https://dart.dev/guides/libraries\"\u003e核心库\u003c/a\u003e\u0026ndash;请使用 \u003ca href=\"https://pub.dev/\"\u003epub.dev\u003c/a\u003e 网站。\u003c/p\u003e\n\u003cp\u003e常用的软件包可分为三类:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/libraries/useful-libraries#general-purpose-packages\"\u003e通用包\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/libraries/useful-libraries#packages-that-correspond-to-sdk-libraries\"\u003e扩展 Dart 核心库的包\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/guides/libraries/useful-libraries#specialized-packages\"\u003e特定的包\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"通用包\"\u003e通用包\u003c/h2\u003e\n\u003cp\u003e以下包对各种项目都很有用:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e包\u003c/th\u003e\n\u003cth align=\"left\"\u003e描述\u003c/th\u003e\n\u003cth align=\"left\"\u003e常用的 API\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/archive\"\u003earchive\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e对各种档案和压缩格式进行编码和解码。\u003c/td\u003e\n\u003ctd align=\"left\"\u003eArchive, ArchiveFile, TarEncoder, TarDecoder, ZipEncoder, ZipDecoder\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/characters\"\u003echaracters\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e对用户感知的字符进行字符串操作(Unicode 字符簇)\u003c/td\u003e\n\u003ctd align=\"left\"\u003eString.characters, Characters, CharacterRange\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/http\"\u003ehttp\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一组高级的函数和类，使其易于消费 HTTP 资源\u003c/td\u003e\n\u003ctd align=\"left\"\u003edelete(), get(), post(), read()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/intl\"\u003eintl\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e国际化和本地化设施，支持复数和性别、日期和数字格式化和解析以及双向文本\u003c/td\u003e\n\u003ctd align=\"left\"\u003eBidi, DateFormat, MicroMoney, TextDirection\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/json_serializable\"\u003ejson_serializable\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个易于使用的代码生成包。更多信息，请参阅 \u003ca href=\"https://dart.dev/guides/json\"\u003eJSON 支持\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e@JsonSerializable\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/logging\"\u003elogging\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个可配置的机制，为你的应用程序添加消息记录\u003c/td\u003e\n\u003ctd align=\"left\"\u003eLoggerHandler, Level, LogRecord\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/mockito\"\u003emockito\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个在测试中模拟对象的流行框架。如果你正在编写依赖注入的测试，特别有用。与 \u003ca href=\"https://pub.dev/packages/test\"\u003etest\u003c/a\u003e 包一起使用\u003c/td\u003e\n\u003ctd align=\"left\"\u003eAnswering, Expectation, Verification\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/path\"\u003epath\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e操作不同类型路径的常用操作。更多信息，请参见\u003ca href=\"https://news.dartlang.org/2016/06/unboxing-packages-path.html\"\u003e拆包: path\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003eabsolute(), basename(), extension(), join(), normalize(), relative(), split()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/quiver\"\u003equiver\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e实用工具，使 Dart 核心库的使用更加方便。Quiver 提供额外支持的一些库包括 async、cache、collection、core、iterables、pattern 和 测试\u003c/td\u003e\n\u003ctd align=\"left\"\u003eCountdownTimer (quiver.async); MapCache (quiver.cache); MultiMap, TreeSet (quiver.collection); EnumerateIterable (quiver.iterables); center(), compareIgnoreCase(), isWhiteSpace() (quiver.strings)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/shelf\"\u003eshelf\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003eDart 的 Web 服务器中间件。Shelf 使它能轻松地创建和组成 Web 服务器，以及 Web 服务器的一部分\u003c/td\u003e\n\u003ctd align=\"left\"\u003eCascade, Pipeline, Request, Response, Server\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/stack_trace\"\u003estack_trace\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e用于解析、检查和处理由底层 Dart 实现产生的堆栈痕迹的方法。还提供了以比原生 StackTrace 实现更可读的格式生成堆栈跟踪的字符串表示的函数,  更多信息，请参见\u003ca href=\"https://news.dartlang.org/2016/01/unboxing-packages-stacktrace.html\"\u003e拆包: stack_trace\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003eTrace.current(), Trace.format(), Trace.from()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/stagehand\"\u003estagehand\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一个 Dart 项目生成器。当你创建一个新的应用程序时，WebStorm 和 IntelliJ 使用 Stagehand 模板，但你也可以从命令行使用模板\u003c/td\u003e\n\u003ctd align=\"left\"\u003e一般通过 IDE 或 \u003ccode\u003estagehand\u003c/code\u003e 命令来使用\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/test\"\u003etest\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e在 Dart 中编写和运行测试的标准方法\u003c/td\u003e\n\u003ctd align=\"left\"\u003eexpect(), group(), test()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/yaml\"\u003eyaml\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003eYAML 解析器\u003c/td\u003e\n\u003ctd align=\"left\"\u003eloadYaml(), loadYamlStream()\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"扩展-dart-核心库的包\"\u003e扩展 Dart 核心库的包\u003c/h2\u003e\n\u003cp\u003e以下每个包都建立在一个\u003ca href=\"https://dart.dev/guides/libraries\"\u003e核心库\u003c/a\u003e的基础上，增加了功能并填补了缺失的功能:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e包\u003c/th\u003e\n\u003cth align=\"left\"\u003e描述\u003c/th\u003e\n\u003cth align=\"left\"\u003e常用的 API\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/async\"\u003easync\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e在 dart:async 的基础上进行了扩展，增加了实用类来处理异步计算。更多信息，请参见\u003ca href=\"https://news.dartlang.org/2016/03/unboxing-packages-async-part-1.html\"\u003e拆包: async 第1部分\u003c/a\u003e、\u003ca href=\"https://news.dartlang.org/2016/03/unboxing-packages-async-part-2.html\"\u003e第2部分\u003c/a\u003e和\u003ca href=\"https://news.dartlang.org/2016/04/unboxing-packages-async-part-3.html\"\u003e第3部分\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003eAsyncMemoizer, CancelableOperation, FutureGroup, LazyStream, Result, StreamCompleter, StreamGroup, StreamSplitter\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/collection\"\u003ecollection\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e在 dart:collection 的基础上进行了扩展，增加了实用函数和类，使处理集合的工作变得更加容易。更多信息，请看\u003ca href=\"https://news.dartlang.org/2016/01/unboxing-packages-collection.html\"\u003e拆包：collection\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003eEquality, CanonicalizedMap, MapKeySet, MapValueSet, PriorityQueue, QueueList\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/convert\"\u003econvert\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e在 dart:convert 的基础上，增加了编码器和解码器，用于在不同的数据表现形式之间进行转换。其中一种数据表示方式是百分比编码，也被称为 URL 编码\u003c/td\u003e\n\u003ctd align=\"left\"\u003eHexDecoder, PercentDecoder\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca href=\"https://pub.dev/packages/io\"\u003eio\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e包含两个库，ansi和io，以简化对文件、标准流和进程的处理。使用 ansi 库可以自定义终端输出。io 库有处理进程、stdin 和文件复制的 API\u003c/td\u003e\n\u003ctd align=\"left\"\u003ecopyPath(), isExecutable(), ExitCode, ProcessManager, sharedStdIn\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"专用包\"\u003e专用包\u003c/h2\u003e\n\u003cp\u003e下面是一些寻找比较专业的包的技巧，比如手机的包(Flutter)和网页开发的包。\u003c/p\u003e\n\u003ch3 id=\"flutter-包\"\u003eFlutter 包\u003c/h3\u003e\n\u003cp\u003e请看 Flutter 网站上的\u003ca href=\"https://flutter.dev/docs/development/packages-and-plugins/using-packages\"\u003e使用包\u003c/a\u003e。或者使用 pub.dev 网站\u003ca href=\"https://pub.dev/flutter\"\u003e搜索 Flutter 包\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"网络包\"\u003e网络包\u003c/h3\u003e\n\u003cp\u003e参见\u003ca href=\"https://dart.dev/web/libraries\"\u003e网络库和包\u003c/a\u003e。或者使用 pub.dev 站点\u003ca href=\"https://pub.dev/web\"\u003e搜索 web 包\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"命令行和服务器软件包\"\u003e命令行和服务器软件包\u003c/h3\u003e\n\u003cp\u003e参见\u003ca href=\"https://dart.dev/server/libraries\"\u003e命令行和服务器库和包\u003c/a\u003e。或者使用 pub.dev 站点\u003ca href=\"https://pub.dev/\"\u003e搜索其他包\u003c/a\u003e。\u003c/p\u003e\n","text":"本页列出了一些 Dart 开发者发布的最流行和最有用的包。要找到更多的软件包\u0026ndash;也可以搜索核心库\u0026ndash;请使用 pub.dev 网站。\n常用的软件包可分为三类:\n 通用包 扩展 Dart 核心库的包 特定的包  通用包 以下包对各种项目都很有用:\n   包 描述 常用的 API     archive 对各种档案和压缩格式进行编码和解码。 Archive, ArchiveFile, TarEncoder, TarDecoder, ZipEncoder, ZipDecoder   characters 对用户感知的字符进行字符串操作(Unicode 字符簇) String.characters, Characters, CharacterRange   http 一组高级的函数和类，使其易于消费 HTTP 资源 delete(), get(), post(), read()   intl 国际化和本地化设施，支持复数和性别、日期和数字格式化和解析以及双向文本 Bidi, DateFormat, MicroMoney, TextDirection   json_serializable 一个易于使用的代码生成包。更多信息，请参阅 JSON 支持 @JsonSerializable   logging 一个可配置的机制，为你的应用程序添加消息记录 LoggerHandler, Level, LogRecord   mockito 一个在测试中模拟对象的流行框架。如果你正在编写依赖注入的测试，特别有用。与 test 包一起使用 Answering, Expectation, Verification   path 操作不同类型路径的常用操作。更多信息，请参见拆包: path absolute(), basename(), extension(), join(), normalize(), relative(), split()   quiver 实用工具，使 Dart 核心库的使用更加方便。Quiver 提供额外支持的一些库包括 async、cache、collection、core、iterables、pattern 和 测试 CountdownTimer (quiver.async); MapCache (quiver.cache); MultiMap, TreeSet (quiver.collection); EnumerateIterable (quiver.iterables); center(), compareIgnoreCase(), isWhiteSpace() (quiver.strings)   shelf Dart 的 Web 服务器中间件。Shelf 使它能轻松地创建和组成 Web 服务器，以及 Web 服务器的一部分 Cascade, Pipeline, Request, Response, Server   stack_trace 用于解析、检查和处理由底层 Dart 实现产生的堆栈痕迹的方法。还提供了以比原生 StackTrace 实现更可读的格式生成堆栈跟踪的字符串表示的函数, 更多信息，请参见拆包: stack_trace Trace.current(), Trace.format(), Trace.from()   stagehand 一个 Dart 项目生成器。当你创建一个新的应用程序时，WebStorm 和 IntelliJ 使用 Stagehand 模板，但你也可以从命令行使用模板 一般通过 IDE 或 stagehand 命令来使用   test 在 Dart 中编写和运行测试的标准方法 expect(), group(), test()   yaml YAML 解析器 loadYaml(), loadYamlStream()    扩展 Dart 核心库的包 以下每个包都建立在一个核心库的基础上，增加了功能并填补了缺失的功能:\n   包 描述 常用的 API     async 在 dart:async 的基础上进行了扩展，增加了实用类来处理异步计算。更多信息，请参见拆包: async 第1部分、第2部分和第3部分 AsyncMemoizer, CancelableOperation, FutureGroup, LazyStream, Result, StreamCompleter, StreamGroup, StreamSplitter   collection 在 dart:collection 的基础上进行了扩展，增加了实用函数和类，使处理集合的工作变得更加容易。更多信息，请看拆包：collection Equality, CanonicalizedMap, MapKeySet, MapValueSet, PriorityQueue, QueueList   convert 在 dart:convert 的基础上，增加了编码器和解码器，用于在不同的数据表现形式之间进行转换。其中一种数据表示方式是百分比编码，也被称为 URL 编码 HexDecoder, PercentDecoder   io 包含两个库，ansi和io，以简化对文件、标准流和进程的处理。使用 ansi 库可以自定义终端输出。io 库有处理进程、stdin 和文件复制的 API copyPath(), isExecutable(), ExitCode, ProcessManager, sharedStdIn    专用包 下面是一些寻找比较专业的包的技巧，比如手机的包(Flutter)和网页开发的包。\nFlutter 包 请看 Flutter 网站上的使用包。或者使用 pub.dev 网站搜索 Flutter 包。\n网络包 参见网络库和包。或者使用 pub.dev 站点搜索 web 包。\n命令行和服务器软件包 参见命令行和服务器库和包。或者使用 pub.dev 站点搜索其他包。\n"},"name":"常用的包","published":"2020-06-29T00:00:00+08:00","summary":"Commonly used packages","type":"entry","url":"https://ohmyweekly.github.io/notes/commonly-used-packages/"},{"content":{"html":"\u003cp\u003e\u003ca href=\"https://dart.dev/codelabs/async-await\"\u003easync-await\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e这个 codelab 教你如何使用 \u003ccode\u003efutures\u003c/code\u003e、\u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\u003c/p\u003e\n\u003cp\u003e要想从这个 codelab 中获得最大的收获，你应该具备以下条件。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e掌握\u003ca href=\"https://dart.dev/samples\"\u003e基本的 Dart 语法\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e有用其他语言编写异步代码的经验。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这个 codelab 包括以下材料。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如何以及何时使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 如何影响执行顺序。\u003c/li\u003e\n\u003cli\u003e如何在 \u003ccode\u003easync\u003c/code\u003e 函数中使用 \u003ccode\u003etry-catch\u003c/code\u003e 表达式处理异步调用中的错误。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e估计完成这个代码实验的时间。40-60分钟\u003c/p\u003e\n\u003cp\u003e注意：本页面使用嵌入式 DartPads 来显示示例和练习。如果你看到的是空框而不是 DartPads，请转到 \u003ca href=\"https://dart.dev/tools/dartpad/troubleshoot\"\u003eDartPad 故障排除页面\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"为什么异步代码很重要\"\u003e为什么异步代码很重要\u003c/h2\u003e\n\u003cp\u003e异步操作让你的程序在等待另一个操作完成时完成工作。下面是一些常见的异步操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e通过网络获取数据。\u003c/li\u003e\n\u003cli\u003e写入数据库。\u003c/li\u003e\n\u003cli\u003e从文件中读取数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e要在 Dart 中执行异步操作，你可以使用 \u003ccode\u003eFuture\u003c/code\u003e 类以及 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字。\u003c/p\u003e\n\u003ch3 id=\"例子-错误地使用异步函数\"\u003e例子: 错误地使用异步函数\u003c/h3\u003e\n\u003cp\u003e下面的例子显示了使用异步函数(\u003ccode\u003efetchUserOrder()\u003c/code\u003e)的错误方法。稍后你将使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 来修复这个例子。在运行这个例子之前，试着发现这个问题-你认为输出会是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// This example shows how *not* to write asynchronous Dart code.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eYour order is: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Imagine that this function is more complex and slow.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLarge Latte\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下面是这个例子为什么不能打印 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 最终产生的值。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efetchUserOrder()\u003c/code\u003e 是一个异步函数，在延迟之后，提供一个描述用户订单的字符串：\u0026ldquo;Large Latte\u0026rdquo;。\u003c/li\u003e\n\u003cli\u003e为了得到用户的订单，\u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 应该调用 \u003ccode\u003efetchUserOrder()\u003c/code\u003e，并等待其完成。由于 \u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 没有等待 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 完成，\u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 无法获得 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 最终提供的字符串值。\u003c/li\u003e\n\u003cli\u003e取而代之的是，\u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 得到的是待完成工作的表示：一个未完成的未来。您将在下一节了解更多关于未来的信息。\u003c/li\u003e\n\u003cli\u003e因为 \u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 没有得到描述用户订单的值，所以这个例子没有打印 \u0026ldquo;Large Latte\u0026rdquo; 到控制台，而是打印 \u0026ldquo;Your order is: Instance of \u0026lsquo;_Future\u0026rsquo;\u0026quot;。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在接下来的章节中，你将学习关于 futures 和关于使用 futures 的工作（使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e），这样你就能编写必要的代码，使 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 向控制台打印所需的值(\u0026ldquo;Large Latte\u0026rdquo;)。\u003c/p\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e同步操作: 同步操作会阻止其他操作的执行，直到它完成。\u003c/li\u003e\n\u003cli\u003e同步函数：同步函数只执行同步操作。\u003c/li\u003e\n\u003cli\u003e异步操作：异步操作一旦启动，就允许其他操作在它完成之前执行。\u003c/li\u003e\n\u003cli\u003e异步函数：异步函数至少执行一个异步操作，也可以执行同步操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"什么是未来\"\u003e什么是未来？\u003c/h2\u003e\n\u003cp\u003efuture(小写 \u0026ldquo;f\u0026rdquo;)是 \u003ca href=\"https://api.dart.dev/stable/dart-async/Future-class.html\"\u003eFuture\u003c/a\u003e（大写 \u0026ldquo;F\u0026rdquo;）类的一个实例。一个 future 代表异步操作的结果，可以有两种状态：未完成或完成。\u003c/p\u003e\n\u003cp\u003e注意：未完成是一个 Dart 术语，指的是一个未来的状态，在它产生一个值之前。\u003c/p\u003e\n\u003ch3 id=\"未完成的\"\u003e未完成的\u003c/h3\u003e\n\u003cp\u003e当你调用一个异步函数时，它会返回一个未完成的未来。这个未来正在等待函数的异步操作完成或抛出一个错误。\u003c/p\u003e\n\u003ch3 id=\"已完成的\"\u003e已完成的\u003c/h3\u003e\n\u003cp\u003e如果异步操作成功，未来就以一个值完成。否则它将以一个错误完成。\u003c/p\u003e\n\u003ch3 id=\"用一个值来完成\"\u003e用一个值来完成\u003c/h3\u003e\n\u003cp\u003e类型为 \u003ccode\u003eFuture\u0026lt;T\u0026gt;\u003c/code\u003e 的 future 用一个类型为 \u003ccode\u003eT\u003c/code\u003e 的值来完成。例如，一个类型为 \u003ccode\u003eFuture\u0026lt;String\u0026gt;\u003c/code\u003e 的 future 会产生一个字符串值。如果一个 future 没有产生一个可用的值，那么 future 的类型是 \u003ccode\u003eFuture\u0026lt;void\u0026gt;\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"用一个错误来完成\"\u003e用一个错误来完成\u003c/h3\u003e\n\u003cp\u003e如果函数执行的异步操作因为任何原因而失败，future 就会以错误的方式完成。\u003c/p\u003e\n\u003ch3 id=\"例子-介绍-future\"\u003e例子: 介绍 future\u003c/h3\u003e\n\u003cp\u003e在下面的例子中，\u003ccode\u003efetchUserOrder()\u003c/code\u003e 返回一个在打印到控制台后完成的 future。因为它没有返回一个可用的值，\u003ccode\u003efetchUserOrder()\u003c/code\u003e 的类型是 \u003ccode\u003eFuture\u0026lt;void\u0026gt;\u003c/code\u003e。在运行这个例子之前，试着预测一下哪个会先打印：\u0026ldquo;Large Latte\u0026rdquo; 或 \u0026ldquo;Fetching user order\u0026hellip;\u0026quot;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Imagine that this function is fetching user info from another service or database.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLarge Latte\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eFetching user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在前面的例子中，尽管 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 在第8行的 \u003ccode\u003eprint()\u003c/code\u003e 调用之前执行，控制台还是在 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 的输出 (\u0026ldquo;Large Latte\u0026rdquo;) 之前显示了第8行的输出 (\u0026ldquo;Fetching user order\u0026hellip;\u0026quot;)。这是因为 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 在打印 \u0026ldquo;Large Latte\u0026rdquo; 之前会有延迟。\u003c/p\u003e\n\u003ch3 id=\"例子-完成时出现错误\"\u003e例子: 完成时出现错误\u003c/h3\u003e\n\u003cp\u003e运行下面的例子，看看未来如何完成一个错误。稍后你将学习如何处理错误。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Imagine that this function is fetching user info but encounters a bug\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLogout failed: user ID is invalid\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eFetching user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003efetchUserOrder()\u003c/code\u003e 完成时出现错误，表明用户ID无效。\u003c/p\u003e\n\u003cp\u003e你已经学习了 future 和它们如何完成，但你如何使用异步函数的结果呢？在下一节中，你将学习如何使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字来获取结果。\u003c/p\u003e\n\u003cp\u003e快速回顾:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个 \u003ccode\u003eFuture\u0026lt;T\u0026gt;\u003c/code\u003e 实例会产生一个 \u003ccode\u003eT\u003c/code\u003e 类型的值。\u003c/li\u003e\n\u003cli\u003e如果一个 future 没有产生一个可用的值，那么 future 的类型是 \u003ccode\u003eFuture\u0026lt;void\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e一个 future 可以处于两种状态之一：未完成或完成。\u003c/li\u003e\n\u003cli\u003e当你调用一个返回 future 的函数时，函数会把要做的工作排队，并返回一个未完成的 future。\u003c/li\u003e\n\u003cli\u003e当一个 future 的操作完成时，future 以一个值或以一个错误完成。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFuture: Dart \u003ca href=\"https://api.dart.dev/stable/dart-async/Future-class.html\"\u003eFuture\u003c/a\u003e 类。\u003c/li\u003e\n\u003cli\u003efuture：Dart \u003ccode\u003eFuture\u003c/code\u003e 类的一个实例。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"使用-futureasync-和-await\"\u003e使用 future：async 和 await\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 关键字提供了一种声明式的方式来定义异步函数并使用它们的结果。在使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 时，请记住以下两个基本准则。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e要定义一个异步函数，请在函数主体前添加 \u003ccode\u003easync\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eawait\u003c/code\u003e 关键字只能在 \u003ccode\u003easync\u003c/code\u003e 函数中使用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下面是一个将 \u003ccode\u003emain()\u003c/code\u003e 从同步函数转换为异步函数的例子。\u003c/p\u003e\n\u003cp\u003e首先，在函数体前添加 \u003ccode\u003easync\u003c/code\u003e 关键字:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"err\"\u003e·\u003c/span\u003e\u003cspan class=\"err\"\u003e·\u003c/span\u003e\u003cspan class=\"err\"\u003e·\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果函数有声明的返回类型，那么更新类型为 \u003ccode\u003eFuture\u0026lt;T\u0026gt;\u003c/code\u003e，其中 T 是函数返回的值的类型。如果函数没有明确返回值，那么返回类型为 \u003ccode\u003eFuture\u0026lt;void\u0026gt;\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"err\"\u003e·\u003c/span\u003e\u003cspan class=\"err\"\u003e·\u003c/span\u003e\u003cspan class=\"err\"\u003e·\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在你已经有了一个 \u003ccode\u003easync\u003c/code\u003e 函数，你可以使用 \u003ccode\u003eawait\u003c/code\u003e 关键字来等待一个 future 的完成:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e正如下面两个例子所显示的，\u003ccode\u003easync\u003c/code\u003e 和a \u003ccode\u003ewait\u003c/code\u003e 关键字导致异步代码看起来很像同步代码。唯一的区别在异步示例中突出显示，如果你的窗口足够宽，它就在同步示例的右边。\u003c/p\u003e\n\u003cp\u003e示例：同步函数\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eYour order is: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Imagine that this function is\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// more complex and slow.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLarge Latte\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eFetching user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eFetching user order...\nYour order is: Instance of _Future\u0026lt;String\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e例子：异步函数\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eYour order is: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Imagine that this function is\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// more complex and slow.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLarge Latte\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eFetching user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eFetching user order...\nYour order is: Large Latte\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e异步示例在三个方面有所不同。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 的返回类型从 \u003ccode\u003eString\u003c/code\u003e 变为 \u003ccode\u003eFuture\u0026lt;String\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003easync\u003c/code\u003e 关键字出现在 \u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 和 \u003ccode\u003emain()\u003c/code\u003e 的函数体之前。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eawait\u003c/code\u003e 关键字出现在调用异步函数 \u003ccode\u003efetchUserOrder()\u003c/code\u003e 和 \u003ccode\u003ecreateOrderMessage()\u003c/code\u003e 之前。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003easync: 你可以在一个函数的主体前使用 \u003ccode\u003easync\u003c/code\u003e 关键字来标记它为异步函数。\u003c/li\u003e\n\u003cli\u003easync 函数: \u003ccode\u003easync\u003c/code\u003e 函数是一个标有 \u003ccode\u003easync\u003c/code\u003e 关键字的函数。\u003c/li\u003e\n\u003cli\u003eawait：可以使用 \u003ccode\u003eawait\u003c/code\u003e 关键字来获取异步表达式的完成结果。\u003ccode\u003eawait\u003c/code\u003e 关键字只在 \u003ccode\u003easync\u003c/code\u003e 函数中起作用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"使用-async-和-await-的执行流程\"\u003e使用 async 和 await 的执行流程\u003c/h3\u003e\n\u003cp\u003e一个异步函数在第一个 \u003ccode\u003eawait\u003c/code\u003e 关键字之前是同步运行的。这意味着在一个 \u003ccode\u003easync\u003c/code\u003e 函数体中，第一个 \u003ccode\u003eawait\u003c/code\u003e 关键字之前的所有同步代码都会立即执行。\u003c/p\u003e\n\u003cp\u003e版本说明：在 Dart 2.0 之前，一个异步函数立即返回，而不会在异步函数体中执行任何代码。\u003c/p\u003e\n\u003ch3 id=\"例子在异步函数内执行在异步函数中执行\"\u003e例子：在异步函数内执行。在异步函数中执行\u003c/h3\u003e\n\u003cp\u003e运行下面的例子，看看如何在异步函数体中执行。你认为输出会是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprintOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAwaiting user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eYour order is: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Imagine that this function is more complex and slow.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLarge Latte\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ecountSeconds\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eprintOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// You can ignore this function - it\u0026#39;s here to visualize delay time in this example.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ecountSeconds\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e运行上例中的代码后，尝试将第2行和第3行反过来。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAwaiting user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意到输出的时间发生了变化，现在 \u003ccode\u003eprint('Awaiting user order')\u003c/code\u003e 出现在 \u003ccode\u003eprintOrderMessage()\u003c/code\u003e 中第一个 \u003ccode\u003eawait\u003c/code\u003e 关键字之后。\u003c/p\u003e\n\u003ch3 id=\"练习-练习使用-async-和-await\"\u003e练习: 练习使用 async 和 await\u003c/h3\u003e\n\u003cp\u003e下面的练习是一个失败的单元测试，其中包含部分完成的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 \u003ccode\u003emain()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e为了模拟异步操作，调用以下函数，这些函数是为你提供的。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e函数\u003c/th\u003e\n\u003cth align=\"left\"\u003e类型签名\u003c/th\u003e\n\u003cth align=\"left\"\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003efetchRole()\u003c/td\u003e\n\u003ctd align=\"left\"\u003eFuture\u003c!-- raw HTML omitted --\u003e fetchRole()\u003c/td\u003e\n\u003ctd align=\"left\"\u003e获取用户角色的简短描述。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003efetchLoginAmount()\u003c/td\u003e\n\u003ctd align=\"left\"\u003eFuture\u003c!-- raw HTML omitted --\u003e fetchLoginAmount()\u003c/td\u003e\n\u003ctd align=\"left\"\u003e获取用户的登录次数。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e第1部分：\u003ccode\u003ereportUserRole()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e为 \u003ccode\u003ereportUserRole()\u003c/code\u003e 函数添加代码，使其执行以下操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e返回一个以下列字符串完成的 future： \u003ccode\u003e\u0026quot;User role: \u0026lt;user role\u0026gt;\u0026quot;\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e注意：你必须使用 \u003ccode\u003efetchRole()\u003c/code\u003e 返回的实际值；复制和粘贴示例返回值不会使测试通过。\u003c/li\u003e\n\u003cli\u003e示例返回值: \u0026ldquo;User role: tester\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e通过调用提供的函数 \u003ccode\u003efetchRole()\u003c/code\u003e 获取用户角色。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第二部分：\u003ccode\u003ereportLogins()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e实现一个异步函数 \u003ccode\u003ereportLogins()\u003c/code\u003e，使其执行以下操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e返回字符串 \u0026ldquo;Total number of logins: \u0026lt;# of logins\u0026gt;\u0026rdquo;。\n\u003cul\u003e\n\u003cli\u003e注意：你必须使用 \u003ccode\u003efetchLoginAmount()\u003c/code\u003e 返回的实际值；复制和粘贴示例返回值不会使测试通过。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereportLogins()\u003c/code\u003e 的返回值示例: \u003ccode\u003e\u0026quot;Total number of logins: 57\u0026quot;\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e通过调用提供的函数 \u003ccode\u003efetchLoginAmount()\u003c/code\u003e 来获取登录次数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ereportUserRole\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eusername\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchRole\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eUser role: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eusername\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ereportLogins\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003elogins\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchLoginAmount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eTotal number of logins: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003elogins\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意：如果你的代码通过了测试，你可以忽略信息级的消息。\u003c/p\u003e\n\u003ch2 id=\"处理错误\"\u003e处理错误\u003c/h2\u003e\n\u003cp\u003e要处理 \u003ccode\u003easync\u003c/code\u003e 函数中的错误，使用 \u003ccode\u003etry-catch\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAwaiting user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eCaught error: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在一个 \u003ccode\u003easync\u003c/code\u003e 函数中，你可以像在同步代码中一样编写 \u003ccode\u003etry-catch\u003c/code\u003e 子句。\u003c/p\u003e\n\u003ch3 id=\"例子async-和-await-的-try-catch-子句\"\u003e例子：\u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 的 \u003ccode\u003etry-catch\u003c/code\u003e 子句\u003c/h3\u003e\n\u003cp\u003e运行下面的例子，看看如何处理一个异步函数的错误。你认为输出会是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprintOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAwaiting user order...\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eCaught error: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUserOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Imagine that this function is more complex.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelayed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eseconds:\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eCannot locate user order\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003eprintOrderMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"练习-练习处理错误\"\u003e练习: 练习处理错误\u003c/h3\u003e\n\u003cp\u003e下面的练习提供了使用异步代码处理错误的练习，使用上一节中描述的方法。为了模拟异步操作，你的代码将调用以下函数，该函数为你提供。\u003c/p\u003e\n\u003cp\u003e| 函数                | 类型签名 | 描述 |\n| fetchNewUsername() | Future\u003c!-- raw HTML omitted --\u003e fetchNewUsername() |\t返回你可以用来替换旧用户名的新用户名。|\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003easync\u003c/code\u003e 和 \u003ccode\u003eawait\u003c/code\u003e 来实现一个异步的 \u003ccode\u003echangeUsername()\u003c/code\u003e 函数，该函数执行以下操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e调用提供的异步函数 \u003ccode\u003efetchNewUsername()\u003c/code\u003e 并返回其结果。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echangeUsername()\u003c/code\u003e 的返回值示例: \u0026ldquo;jane_smith_92\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e捕获任何发生的错误并返回错误的字符串值。\n\u003cul\u003e\n\u003cli\u003e你可以使用 \u003ca href=\"https://api.dart.dev/stable/dart-core/ArgumentError/toString.html\"\u003etoString()\u003c/a\u003e 方法对 \u003ca href=\"https://api.dart.dev/stable/dart-core/Exception-class.html\"\u003eExceptions\u003c/a\u003e 和\u003ca href=\"https://api.dart.dev/stable/dart-core/Error-class.html\"\u003eErrors\u003c/a\u003e 进行字符串化。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003echangeUsername\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchNewUsername\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"练习-把所有的东西放在一起\"\u003e练习: 把所有的东西放在一起\u003c/h3\u003e\n\u003cp\u003e现在是时候在最后一个练习中练习所学的知识了。为了模拟异步操作，本练习提供了异步函数 \u003ccode\u003efetchUsername()\u003c/code\u003e 和 \u003ccode\u003elogoutUser()\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e| 函数             | 类型签名                        | 描述 |\n| fetchUsername() |\tFuture\u003c!-- raw HTML omitted --\u003e fetchUsername() | 返回与当前用户相关联的名称。 |\n| logoutUser()\t  | Future\u003c!-- raw HTML omitted --\u003e logoutUser()\t   | 执行当前用户的注销，并返回被注销的用户名。 |\u003c/p\u003e\n\u003cp\u003e编写以下内容。\u003c/p\u003e\n\u003cp\u003e第一部分：\u003ccode\u003eaddHello()\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写一个函数 \u003ccode\u003eaddHello()\u003c/code\u003e，它接受一个单一的 \u003ccode\u003eString\u003c/code\u003e 参数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaddHello()\u003c/code\u003e 返回它的 \u003ccode\u003eString\u003c/code\u003e 参数，前面加 \u0026lsquo;Hello\u0026rsquo;。\n例如：\u003ccode\u003eaddHello('Jon')\u003c/code\u003e 返回 \u0026lsquo;Hello Jon\u0026rsquo;。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第二部分：\u003ccode\u003egreetUser()\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写一个不接受参数的函数 \u003ccode\u003egreetUser()\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e为了得到用户名，\u003ccode\u003egreetUser()\u003c/code\u003e 调用提供的异步函数 \u003ccode\u003efetchUsername()\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egreetUser()\u003c/code\u003e 通过调用 \u003ccode\u003eaddHello()\u003c/code\u003e 为用户创建一个问候语，传递用户名，并返回结果。\n例子: 如果 \u003ccode\u003efetchUsername()\u003c/code\u003e 返回 \u0026lsquo;Jenny\u0026rsquo;, 那么 \u003ccode\u003egreetUser()\u003c/code\u003e 返回 \u0026lsquo;Hello Jenny\u0026rsquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第三部分：\u003ccode\u003esayGoodbye()\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e编写一个函数 \u003ccode\u003esayGoodbye()\u003c/code\u003e，它的功能如下。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不接受任何参数\u003c/li\u003e\n\u003cli\u003e捕获任何错误。\u003c/li\u003e\n\u003cli\u003e调用所提供的异步函数 logoutUser().\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e如果 \u003ccode\u003elogoutUser()\u003c/code\u003e 失败，\u003ccode\u003esayGoodbye()\u003c/code\u003e 返回任何你喜欢的字符串。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e如果 \u003ccode\u003elogoutUser()\u003c/code\u003e 成功，\u003ccode\u003esayGoodbye()\u003c/code\u003e 返回字符串 \u003ccode\u003e'\u0026lt;result\u0026gt; Thanks, see you next time'\u003c/code\u003e，其中 \u003ccode\u003e\u0026lt;result\u0026gt;\u003c/code\u003e 是调用 \u003ccode\u003elogoutUser()\u003c/code\u003e 返回的字符串值。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eaddHello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egreetUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eusername\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003efetchUsername\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eaddHello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esayGoodbye\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003elogoutUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"s1\"\u003e Thanks, see you next time\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eFailed to logout user: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"下一步是什么\"\u003e下一步是什么？\u003c/h2\u003e\n\u003cp\u003e恭喜你，你已经完成了 codelab 的学习！如果你还想了解更多，这里有一些下一步的建议。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e玩玩 \u003ca href=\"https://dartpad.dev/\"\u003eDartPad\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e尝试另一个 \u003ca href=\"https://dart.dev/codelabs\"\u003ecodelab\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e学习更多关于 futures 和异步的知识。\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/tutorials/language/streams\"\u003eStreams tutorial\u003c/a\u003e: 学习如何使用异步事件的序列。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/playlist?list=PLjxrf2q8roU0Net_g1NT5_vOO3s_FR02J\"\u003e来自 Google 的 Dart视频\u003c/a\u003e: 观看一个或多个关于异步编码的视频。或者，如果你喜欢，阅读基于这些视频的文章。(从\u003ca href=\"https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a\"\u003e隔离和事件循环\u003c/a\u003e开始。)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dart.dev/get-dart\"\u003e获取 Dart SDK\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果你对使用嵌入式 DartPads 感兴趣，就像这个 codelab 一样，请看\u003ca href=\"https://dart.dev/resources/dartpad-best-practices\"\u003e教程中使用 DartPad 的最佳实践\u003c/a\u003e。\u003c/p\u003e\n","text":"async-await\n这个 codelab 教你如何使用 futures、async 和 await 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\n要想从这个 codelab 中获得最大的收获，你应该具备以下条件。\n 掌握基本的 Dart 语法 有用其他语言编写异步代码的经验。  这个 codelab 包括以下材料。\n 如何以及何时使用 async 和 await 关键字。 使用 async 和 await 如何影响执行顺序。 如何在 async 函数中使用 try-catch 表达式处理异步调用中的错误。  估计完成这个代码实验的时间。40-60分钟\n注意：本页面使用嵌入式 DartPads 来显示示例和练习。如果你看到的是空框而不是 DartPads，请转到 DartPad 故障排除页面。\n为什么异步代码很重要 异步操作让你的程序在等待另一个操作完成时完成工作。下面是一些常见的异步操作。\n 通过网络获取数据。 写入数据库。 从文件中读取数据。  要在 Dart 中执行异步操作，你可以使用 Future 类以及 async 和 await 关键字。\n例子: 错误地使用异步函数 下面的例子显示了使用异步函数(fetchUserOrder())的错误方法。稍后你将使用 async 和 await 来修复这个例子。在运行这个例子之前，试着发现这个问题-你认为输出会是什么？\n// This example shows how *not* to write asynchronous Dart code.  String createOrderMessage() { var order = fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); void main() { print(createOrderMessage()); } 下面是这个例子为什么不能打印 fetchUserOrder() 最终产生的值。\n fetchUserOrder() 是一个异步函数，在延迟之后，提供一个描述用户订单的字符串：\u0026ldquo;Large Latte\u0026rdquo;。 为了得到用户的订单，createOrderMessage() 应该调用 fetchUserOrder()，并等待其完成。由于 createOrderMessage() 没有等待 fetchUserOrder() 完成，createOrderMessage() 无法获得 fetchUserOrder() 最终提供的字符串值。 取而代之的是，createOrderMessage() 得到的是待完成工作的表示：一个未完成的未来。您将在下一节了解更多关于未来的信息。 因为 createOrderMessage() 没有得到描述用户订单的值，所以这个例子没有打印 \u0026ldquo;Large Latte\u0026rdquo; 到控制台，而是打印 \u0026ldquo;Your order is: Instance of \u0026lsquo;_Future\u0026rsquo;\u0026quot;。  在接下来的章节中，你将学习关于 futures 和关于使用 futures 的工作（使用 async 和 await），这样你就能编写必要的代码，使 fetchUserOrder() 向控制台打印所需的值(\u0026ldquo;Large Latte\u0026rdquo;)。\n关键术语:\n 同步操作: 同步操作会阻止其他操作的执行，直到它完成。 同步函数：同步函数只执行同步操作。 异步操作：异步操作一旦启动，就允许其他操作在它完成之前执行。 异步函数：异步函数至少执行一个异步操作，也可以执行同步操作。  什么是未来？ future(小写 \u0026ldquo;f\u0026rdquo;)是 Future（大写 \u0026ldquo;F\u0026rdquo;）类的一个实例。一个 future 代表异步操作的结果，可以有两种状态：未完成或完成。\n注意：未完成是一个 Dart 术语，指的是一个未来的状态，在它产生一个值之前。\n未完成的 当你调用一个异步函数时，它会返回一个未完成的未来。这个未来正在等待函数的异步操作完成或抛出一个错误。\n已完成的 如果异步操作成功，未来就以一个值完成。否则它将以一个错误完成。\n用一个值来完成 类型为 Future\u0026lt;T\u0026gt; 的 future 用一个类型为 T 的值来完成。例如，一个类型为 Future\u0026lt;String\u0026gt; 的 future 会产生一个字符串值。如果一个 future 没有产生一个可用的值，那么 future 的类型是 Future\u0026lt;void\u0026gt;。\n用一个错误来完成 如果函数执行的异步操作因为任何原因而失败，future 就会以错误的方式完成。\n例子: 介绍 future 在下面的例子中，fetchUserOrder() 返回一个在打印到控制台后完成的 future。因为它没有返回一个可用的值，fetchUserOrder() 的类型是 Future\u0026lt;void\u0026gt;。在运行这个例子之前，试着预测一下哪个会先打印：\u0026ldquo;Large Latte\u0026rdquo; 或 \u0026ldquo;Fetching user order\u0026hellip;\u0026quot;。\nFuture\u0026lt;void\u0026gt; fetchUserOrder() { // Imagine that this function is fetching user info from another service or database.  return Future.delayed(Duration(seconds: 2), () =\u0026gt; print(\u0026#39;Large Latte\u0026#39;)); } void main() { fetchUserOrder(); print(\u0026#39;Fetching user order...\u0026#39;); } 在前面的例子中，尽管 fetchUserOrder() 在第8行的 print() 调用之前执行，控制台还是在 fetchUserOrder() 的输出 (\u0026ldquo;Large Latte\u0026rdquo;) 之前显示了第8行的输出 (\u0026ldquo;Fetching user order\u0026hellip;\u0026quot;)。这是因为 fetchUserOrder() 在打印 \u0026ldquo;Large Latte\u0026rdquo; 之前会有延迟。\n例子: 完成时出现错误 运行下面的例子，看看未来如何完成一个错误。稍后你将学习如何处理错误。\nFuture\u0026lt;void\u0026gt; fetchUserOrder() { // Imagine that this function is fetching user info but encounters a bug  return Future.delayed(Duration(seconds: 2), () =\u0026gt; throw Exception(\u0026#39;Logout failed: user ID is invalid\u0026#39;)); } void main() { fetchUserOrder(); print(\u0026#39;Fetching user order...\u0026#39;); } 在这个例子中，fetchUserOrder() 完成时出现错误，表明用户ID无效。\n你已经学习了 future 和它们如何完成，但你如何使用异步函数的结果呢？在下一节中，你将学习如何使用 async 和 await 关键字来获取结果。\n快速回顾:\n 一个 Future\u0026lt;T\u0026gt; 实例会产生一个 T 类型的值。 如果一个 future 没有产生一个可用的值，那么 future 的类型是 Future\u0026lt;void\u0026gt;。 一个 future 可以处于两种状态之一：未完成或完成。 当你调用一个返回 future 的函数时，函数会把要做的工作排队，并返回一个未完成的 future。 当一个 future 的操作完成时，future 以一个值或以一个错误完成。  关键术语:\n Future: Dart Future 类。 future：Dart Future 类的一个实例。  使用 future：async 和 await async 和 await 关键字提供了一种声明式的方式来定义异步函数并使用它们的结果。在使用 async 和 await 时，请记住以下两个基本准则。\n 要定义一个异步函数，请在函数主体前添加 async。 await 关键字只能在 async 函数中使用。  下面是一个将 main() 从同步函数转换为异步函数的例子。\n首先，在函数体前添加 async 关键字:\nvoid main() async { ··· } 如果函数有声明的返回类型，那么更新类型为 Future\u0026lt;T\u0026gt;，其中 T 是函数返回的值的类型。如果函数没有明确返回值，那么返回类型为 Future\u0026lt;void\u0026gt;。\nFuture\u0026lt;void\u0026gt; main() async { ··· } 现在你已经有了一个 async 函数，你可以使用 await 关键字来等待一个 future 的完成:\nprint(await createOrderMessage()); 正如下面两个例子所显示的，async 和a wait 关键字导致异步代码看起来很像同步代码。唯一的区别在异步示例中突出显示，如果你的窗口足够宽，它就在同步示例的右边。\n示例：同步函数\nString createOrderMessage() { var order = fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is  // more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); void main() { print(\u0026#39;Fetching user order...\u0026#39;); print(createOrderMessage()); } Fetching user order... Your order is: Instance of _Future\u0026lt;String\u0026gt; 例子：异步函数\nFuture\u0026lt;String\u0026gt; createOrderMessage() async { var order = await fetchUserOrder(); return \u0026#39;Your order is: $order\u0026#39;; } Future\u0026lt;String\u0026gt; fetchUserOrder() =\u0026gt; // Imagine that this function is  // more complex and slow.  Future.delayed( Duration(seconds: 2), () =\u0026gt; \u0026#39;Large Latte\u0026#39;, ); Future\u0026lt;void\u0026gt; main() async { print(\u0026#39;Fetching user order...\u0026#39;); print(await createOrderMessage()); } Fetching user order... Your order is: Large Latte 异步示例在三个方面有所不同。\n createOrderMessage() 的返回类型从 String 变为 Future\u0026lt;String\u0026gt;。 async 关键字出现在 createOrderMessage() 和 main() 的函数体之前。 await 关键字出现在调用异步函数 fetchUserOrder() 和 createOrderMessage() 之前。  关键术语:\n async: 你可以在一个函数的主体前使用 async 关键字来标记它为异步函数。 async 函数: async 函数是一个标有 async 关键字的函数。 await：可以使用 await 关键字来获取异步表达式的完成结果。await 关键字只在 async 函数中起作用。  使用 async 和 await 的执行流程 一个异步函数在第一个 await 关键字之前是同步运行的。这意味着在一个 async 函数体中，第一个 await 关键字之前的所有同步代码都会立即执行。\n版本说明：在 Dart 2.0 之前，一个异步函数立即返回，而不会在异步函数体中执行任何代码。\n例子：在异步函数内执行。在异步函数中执行 运行下面的例子，看看如何在异步函数体中执行。你认为输出会是什么？\nFuture\u0026lt;void\u0026gt; printOrderMessage() async { print(\u0026#39;Awaiting user order...\u0026#39;); var order = await fetchUserOrder(); print(\u0026#39;Your order is: $order\u0026#39;); } Future\u0026lt;String\u0026gt; fetchUserOrder() { // Imagine that this function is more complex and slow.  return Future.delayed(Duration(seconds: 4), () =\u0026gt; \u0026#39;Large Latte\u0026#39;); } Future\u0026lt;void\u0026gt; main() async { countSeconds(4); await printOrderMessage(); } // You can ignore this function - it\u0026#39;s here to visualize delay time in this example. void countSeconds(int s) { for (var i = 1; i \u0026lt;= s; i++) { Future.delayed(Duration(seconds: i), () =\u0026gt; print(i)); } } 运行上例中的代码后，尝试将第2行和第3行反过来。\nvar order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); 注意到输出的时间发生了变化，现在 print('Awaiting user order') 出现在 printOrderMessage() 中第一个 await 关键字之后。\n练习: 练习使用 async 和 await 下面的练习是一个失败的单元测试，其中包含部分完成的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 main()。\n为了模拟异步操作，调用以下函数，这些函数是为你提供的。\n   函数 类型签名 描述     fetchRole() FuturefetchRole() 获取用户角色的简短描述。   fetchLoginAmount() FuturefetchLoginAmount() 获取用户的登录次数。    第1部分：reportUserRole()\n为 reportUserRole() 函数添加代码，使其执行以下操作。\n 返回一个以下列字符串完成的 future： \u0026quot;User role: \u0026lt;user role\u0026gt;\u0026quot;。  注意：你必须使用 fetchRole() 返回的实际值；复制和粘贴示例返回值不会使测试通过。 示例返回值: \u0026ldquo;User role: tester\u0026rdquo;   通过调用提供的函数 fetchRole() 获取用户角色。  第二部分：reportLogins()\n实现一个异步函数 reportLogins()，使其执行以下操作。\n 返回字符串 \u0026ldquo;Total number of logins: \u0026lt;# of logins\u0026gt;\u0026rdquo;。  注意：你必须使用 fetchLoginAmount() 返回的实际值；复制和粘贴示例返回值不会使测试通过。 reportLogins() 的返回值示例: \u0026quot;Total number of logins: 57\u0026quot;。   通过调用提供的函数 fetchLoginAmount() 来获取登录次数。  Future\u0026lt;String\u0026gt; reportUserRole() async { var username = await fetchRole(); return \u0026#39;User role: $username\u0026#39;; } Future\u0026lt;String\u0026gt; reportLogins() async { var logins = await fetchLoginAmount(); return \u0026#39;Total number of logins: $logins\u0026#39;; } 注意：如果你的代码通过了测试，你可以忽略信息级的消息。\n处理错误 要处理 async 函数中的错误，使用 try-catch:\ntry { var order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); } catch (err) { print(\u0026#39;Caught error: $err\u0026#39;); } 在一个 async 函数中，你可以像在同步代码中一样编写 try-catch 子句。\n例子：async 和 await 的 try-catch 子句 运行下面的例子，看看如何处理一个异步函数的错误。你认为输出会是什么？\nFuture\u0026lt;void\u0026gt; printOrderMessage() async { try { var order = await fetchUserOrder(); print(\u0026#39;Awaiting user order...\u0026#39;); print(order); } catch (err) { print(\u0026#39;Caught error: $err\u0026#39;); } } Future\u0026lt;String\u0026gt; fetchUserOrder() { // Imagine that this function is more complex.  var str = Future.delayed( Duration(seconds: 4), () =\u0026gt; throw \u0026#39;Cannot locate user order\u0026#39;); return str; } Future\u0026lt;void\u0026gt; main() async { await printOrderMessage(); } 练习: 练习处理错误 下面的练习提供了使用异步代码处理错误的练习，使用上一节中描述的方法。为了模拟异步操作，你的代码将调用以下函数，该函数为你提供。\n| 函数 | 类型签名 | 描述 | | fetchNewUsername() | FuturefetchNewUsername() |\t返回你可以用来替换旧用户名的新用户名。|\n使用 async 和 await 来实现一个异步的 changeUsername() 函数，该函数执行以下操作。\n 调用提供的异步函数 fetchNewUsername() 并返回其结果。  changeUsername() 的返回值示例: \u0026ldquo;jane_smith_92\u0026rdquo;   捕获任何发生的错误并返回错误的字符串值。  你可以使用 toString() 方法对 Exceptions 和Errors 进行字符串化。    Future\u0026lt;String\u0026gt; changeUsername () async { try { return await fetchNewUsername(); } catch (err) { return err.toString(); } } 练习: 把所有的东西放在一起 现在是时候在最后一个练习中练习所学的知识了。为了模拟异步操作，本练习提供了异步函数 fetchUsername() 和 logoutUser():\n| 函数 | 类型签名 | 描述 | | fetchUsername() |\tFuturefetchUsername() | 返回与当前用户相关联的名称。 | | logoutUser()\t| FuturelogoutUser()\t| 执行当前用户的注销，并返回被注销的用户名。 |\n编写以下内容。\n第一部分：addHello()\n 编写一个函数 addHello()，它接受一个单一的 String 参数。 addHello() 返回它的 String 参数，前面加 \u0026lsquo;Hello\u0026rsquo;。 例如：addHello('Jon') 返回 \u0026lsquo;Hello Jon\u0026rsquo;。  第二部分：greetUser()\n 编写一个不接受参数的函数 greetUser()。 为了得到用户名，greetUser() 调用提供的异步函数 fetchUsername()。 greetUser() 通过调用 addHello() 为用户创建一个问候语，传递用户名，并返回结果。 例子: 如果 fetchUsername() 返回 \u0026lsquo;Jenny\u0026rsquo;, 那么 greetUser() 返回 \u0026lsquo;Hello Jenny\u0026rsquo;.  第三部分：sayGoodbye()\n  编写一个函数 sayGoodbye()，它的功能如下。\n 不接受任何参数 捕获任何错误。 调用所提供的异步函数 logoutUser().    如果 logoutUser() 失败，sayGoodbye() 返回任何你喜欢的字符串。\n  如果 logoutUser() 成功，sayGoodbye() 返回字符串 '\u0026lt;result\u0026gt; Thanks, see you next time'，其中 \u0026lt;result\u0026gt; 是调用 logoutUser() 返回的字符串值。\n  String addHello(user) =\u0026gt; \u0026#39;Hello $user\u0026#39;; Future\u0026lt;String\u0026gt; greetUser() async { var username = await fetchUsername(); return addHello(username); } Future\u0026lt;String\u0026gt; sayGoodbye() async { try { var result = await logoutUser(); return \u0026#39;$resultThanks, see you next time\u0026#39;; } catch (e) { return \u0026#39;Failed to logout user: $e\u0026#39;; } } 下一步是什么？ 恭喜你，你已经完成了 codelab 的学习！如果你还想了解更多，这里有一些下一步的建议。\n 玩玩 DartPad。 尝试另一个 codelab。 学习更多关于 futures 和异步的知识。  Streams tutorial: 学习如何使用异步事件的序列。 来自 Google 的 Dart视频: 观看一个或多个关于异步编码的视频。或者，如果你喜欢，阅读基于这些视频的文章。(从隔离和事件循环开始。)   获取 Dart SDK。  如果你对使用嵌入式 DartPads 感兴趣，就像这个 codelab 一样，请看教程中使用 DartPad 的最佳实践。\n"},"name":"异步编程：futures、async、await。","published":"2020-06-27T00:00:00+08:00","summary":"这个 codelab 教你如何使用 futures、async 和 await 关键字编写异步代码。使用内嵌的 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。","type":"entry","url":"https://ohmyweekly.github.io/notes/futures-async-await/"},{"content":{"html":"\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003eFlutter 是 Google 的 UI 工具包，用于从单一代码库中为手机、网页和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起工作，被世界各地的开发者和组织使用，并且是免费和开源的。\u003c/p\u003e\n\u003cp\u003e在这个代码实验室中，你将创建一个简单的手机 Flutter 应用。如果你熟悉面向对象的代码和基本的编程概念-如变量、循环和条件, 那么你就可以完成这个 codelab。你不需要以前有 Dart、手机或 Web 编程的经验。\u003c/p\u003e\n\u003ch3 id=\"你将在第1部分学到什么\"\u003e你将在第1部分学到什么\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e如何编写一款在 iOS、Android 和 Web 上看起来很自然的 Flutter 应用？\u003c/li\u003e\n\u003cli\u003eFlutter 应用程序的基本结构。\u003c/li\u003e\n\u003cli\u003e寻找和使用包来扩展功能。\u003c/li\u003e\n\u003cli\u003e使用热重装来加快开发周期。\u003c/li\u003e\n\u003cli\u003e如何实现一个有状态的小组件。\u003c/li\u003e\n\u003cli\u003e如何创建一个无限的、懒加载的列表。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在这个 codelab 的\u003ca href=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/index.html?index=..%2F..%2Findex#0\"\u003e第2部分\u003c/a\u003e中，你将添加交互性，修改应用程序的主题，并添加导航到新页面的能力(在 Flutter 中称为路由)。\u003c/p\u003e\n\u003ch3 id=\"你将在第1部分中构建什么\"\u003e你将在第1部分中构建什么\u003c/h3\u003e\n\u003cp\u003e你将实现一个移动应用，为一家创业公司生成建议的名字。用户可以选择和取消选择名字，保存最好的名字。代码一次懒惰地生成10个名字。随着用户的滚动，会生成更多的名字。用户可以滚动的范围没有限制。\u003c/p\u003e\n\u003cp\u003e下面的 GIF 动画显示了应用程序在完成部分时的工作情况。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/6556f8b61acd6a89.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch2 id=\"设置你的-flutter-环境\"\u003e设置你的 Flutter 环境\u003c/h2\u003e\n\u003cp\u003e你需要两个软件来完成这个实验室-\u003ca href=\"https://flutter.io/get-started/install/\"\u003eFlutter SDK\u003c/a\u003e和\u003ca href=\"https://flutter.io/get-started/editor/\"\u003e一个编辑器\u003c/a\u003e。(codelab 假设你使用 Android Studio，但你可以使用你的首选编辑器。)\u003c/p\u003e\n\u003cp\u003e你可以通过使用以下任何设备来运行 codelab。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个物理的 \u003ca href=\"https://flutter.io/setup-macos/#set-up-your-android-device\"\u003eAndroid\u003c/a\u003e 或 \u003ca href=\"https://flutter.io/setup-macos/#deploy-to-ios-devices\"\u003eiOS\u003c/a\u003e 设备连接到你的计算机并设置为开发者模式。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.io/setup-macos/#set-up-the-ios-simulator\"\u003eiOS 模拟器\u003c/a\u003e(需要安装 Xcode 工具)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.io/setup-macos/#set-up-the-android-emulator\"\u003e安卓模拟器\u003c/a\u003e(需要在 Android Studio 中进行设置)\u003c/li\u003e\n\u003cli\u003e浏览器(调试时需要使用 Chrome 浏览器)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果你想编译你的应用程序以在 web 上运行，你必须启用此功能（目前处于测试阶段）。要启用 web 支持，请使用以下说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eflutter channel beta\nflutter upgrade\nflutter config --enable-web\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你只需要运行一次 \u003ccode\u003econfig\u003c/code\u003e 命令。启用 Web 支持后，你创建的每个 Flutter 应用也会为 Web 编译。在你的 IDE 的\u003cstrong\u003e设备\u003c/strong\u003e下拉菜单下面，或者在命令行使用 \u003ccode\u003eflutter devices\u003c/code\u003e，你现在应该看到 Chrome 和 Web 服务器被列出。\u003cstrong\u003eChrome\u003c/strong\u003e 设备会自动启动 Chrome。Web 服务器会启动一个托管应用程序的服务器，这样你就可以从任何浏览器加载它。在开发过程中使用 \u003cstrong\u003eChrome\u003c/strong\u003e 设备，以便你可以使用 DevTools，而当你要在其他浏览器上进行测试时使用 Web 服务器。有关更多信息，请参阅\u003ca href=\"https://flutter.dev/docs/get-started/web\"\u003e使用 Flutter 构建 Web 应用程序\u003c/a\u003e和\u003ca href=\"https://flutter.dev/docs/get-started/codelab-web\"\u003e在 Web 上编写你的第一个 Flutter 应用程序\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"创建-flutter-应用程序的启动器\"\u003e创建 Flutter 应用程序的启动器\u003c/h2\u003e\n\u003cp\u003e通过使用\u003ca href=\"https://flutter.dev/docs/get-started/test-drive#androidstudio\"\u003e创建应用程序\u003c/a\u003e中的说明来创建一个简单的、模板化的 Flutter 应用程序。输入 \u003ccode\u003estartup_namer\u003c/code\u003e(而不是 \u003ccode\u003eflutter_app\u003c/code\u003e)作为项目名称。您将修改启动器应用程序来创建完成的应用程序。\u003c/p\u003e\n\u003cp\u003e提示：如果你在 IDE 中没有看到能够启动一个新的 Flutter 项目作为一个选项，那么请确保你已经\u003ca href=\"https://flutter.io/get-started/editor/#androidstudio\"\u003e安装了 Flutter 和 Dart 的插件\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e你将主要编辑 \u003ccode\u003elib/main.dart\u003c/code\u003e，Dart 的代码就在这里。\u003c/p\u003e\n\u003cp\u003e替换 \u003ccode\u003elib/main.dart\u003c/code\u003e 的内容。\n删除 \u003ccode\u003elib/main.dart\u003c/code\u003e 中的所有代码，并用下面的代码替换，在屏幕中央显示 \u0026ldquo;Hello World\u0026rdquo;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epackage:flutter/material.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003erunApp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMyApp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyApp\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eStatelessWidget\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBuildContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eMaterialApp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eWelcome to Flutter\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003ehome:\u003c/span\u003e \u003cspan class=\"n\"\u003eScaffold\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003eappBar:\u003c/span\u003e \u003cspan class=\"n\"\u003eAppBar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n          \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eWelcome to Flutter\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003ebody:\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eCenter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n          \u003cspan class=\"nl\"\u003echild:\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello World\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e提示：当把代码粘贴到你的应用程序中时，缩进会变得歪斜。你可以用以下 Flutter 工具来解决。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAndroid Studio/IntelliJ IDEA: 右键点击 Dart 代码，选择\u003cstrong\u003e用 dartfmt 重格式代码\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003eVS code: 右键点击并选择\u003cstrong\u003e格式化文档\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e终端: 运行 \u003ccode\u003eflutter format \u0026lt;文件名\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://flutter.io/get-started/test-drive/#androidstudio\"\u003e运行应用程序\u003c/a\u003e。您应该看到 Android，iOS 或 Web 输出，取决于您的设备。\u003c/p\u003e\n\u003cp\u003e安卓系统:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/f9df7832965ede9f.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003eiOS:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/20374605026d582.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e小贴士：第一次在物理设备上运行时，可能需要一段时间来加载。之后，你可以使用热重载来快速更新。在支持的 IDE 中，如果应用正在运行，\u003cstrong\u003eSave\u003c/strong\u003e 也会执行热重载。当使用 \u003ccode\u003eflutter run\u003c/code\u003e 直接从控制台运行应用程序时，输入 \u003ccode\u003er\u003c/code\u003e 来执行热重载。\u003c/p\u003e\n\u003cp\u003e观察:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e这个例子创建了一个 Material 应用。\u003ca href=\"https://material.io/guidelines/\"\u003eMaterial\u003c/a\u003e 是一种视觉设计语言，是移动和 Web 的标准。Flutter 提供了一套丰富的 Material 部件。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emain\u003c/code\u003e 方法使用箭头(\u003ccode\u003e=\u0026gt;\u003c/code\u003e)符号。对单行函数或方法使用箭头符号。\u003c/li\u003e\n\u003cli\u003e应用程序扩展了 \u003ccode\u003eStatelessWidget\u003c/code\u003e，这使得应用程序本身成为一个组件。在 Flutter 中，几乎所有的东西都是组件，包括对齐、填充和布局。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eScaffold\u003c/code\u003e 组件来自 Material 库，它提供了一个默认的应用栏、一个标题和一个 body 属性，其中存放着主屏幕的组件树。组件子树可以相当复杂。\u003c/li\u003e\n\u003cli\u003e组件的主要工作是提供一个 \u003ccode\u003ebuild\u003c/code\u003e 方法，描述如何用其他低级组件来显示该组件。\u003c/li\u003e\n\u003cli\u003e本例的主体由包含 \u003ccode\u003eText\u003c/code\u003e 子部件的 \u003ccode\u003eCenter\u003c/code\u003e 部件组成。\u003ccode\u003eCenter\u003c/code\u003e 组件将其组件子树对齐到屏幕的中心。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"使用外部软件包\"\u003e使用外部软件包\u003c/h2\u003e\n\u003cp\u003e在这一步中，您将开始使用一个名为 \u003ccode\u003eenglish_words\u003c/code\u003e 的开源包，它包含了几千个最常用的英语单词，还有一些实用函数。\u003c/p\u003e\n\u003cp\u003e你可以在 \u003ca href=\"https://pub.dev/\"\u003epub.dev\u003c/a\u003e 找到 \u003ccode\u003eenglish_words\u003c/code\u003e 包，以及许多其他开源包。\u003c/p\u003e\n\u003cp\u003epubspec 文件管理着 Flutter 应用的资产。在 \u003ccode\u003epubspec.yaml\u003c/code\u003e 中，附加 \u003ccode\u003eenglish_words: ^3.1.5\u003c/code\u003e(\u003ccode\u003eenglish_words\u003c/code\u003e 3.1.5 或更高)到依赖列表中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"k\"\u003edependencies\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003eflutter\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003esdk\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003eflutter\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003ecupertino_icons\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e^\u003cspan class=\"m\"\u003e0.1\u003c/span\u003e\u003cspan class=\"m\"\u003e.2\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003eenglish_words\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e^\u003cspan class=\"m\"\u003e3.1\u003c/span\u003e\u003cspan class=\"m\"\u003e.5\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"c\"\u003e# add this line\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Android Studio 的编辑器视图中查看 pubspec 时，点击 \u003cstrong\u003ePackages get\u003c/strong\u003e。这将把包拉到你的项目中。你应该在控制台中看到以下内容。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eflutter packages get\nRunning \u0026#34;flutter packages get\u0026#34; in startup_namer...\nProcess finished with exit code 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e执行 \u003ccode\u003ePub get\u003c/code\u003e 也会自动生成 \u0026ldquo;pubspec.lock\u0026rdquo; 文件，其中包含所有拉入项目的包的列表和它们的版本号。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003elib/main.dart\u003c/code\u003e 中，导入新包:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epackage:flutter/material.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epackage:english_words/english_words.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// Add this line.\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当你输入时，Android Studio 会给你建议导入的库。然后，它将导入的字符串渲染成灰色，让你知道导入的库是未使用的（到目前为止）。\u003c/p\u003e\n\u003cp\u003e接下来，你将使用 \u003ccode\u003eenglish_words\u003c/code\u003e 包来生成文本，而不是使用 \u0026ldquo;Hello World\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e做以下修改。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epackage:flutter/material.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003epackage:english_words/english_words.dart\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003erunApp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMyApp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyApp\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eStatelessWidget\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBuildContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ewordPair\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eWordPair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erandom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Add this line.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eMaterialApp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eWelcome to Flutter\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003ehome:\u003c/span\u003e \u003cspan class=\"n\"\u003eScaffold\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003eappBar:\u003c/span\u003e \u003cspan class=\"n\"\u003eAppBar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n          \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eWelcome to Flutter\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003ebody:\u003c/span\u003e \u003cspan class=\"n\"\u003eCenter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n          \u003cspan class=\"c1\"\u003e//child: Text(\u0026#39;Hello World\u0026#39;),   // Replace this text...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e          \u003cspan class=\"nl\"\u003echild:\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ewordPair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003easPascalCase\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// With this text.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e提示: Pascal 大小写(也称为上驼形大小写)意味着字符串中的每个单词，包括第一个单词，都以大写字母开头。所以，\u003ccode\u003euppercamelcase\u003c/code\u003e 就变成了 \u003ccode\u003eUpperCamelCase\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e如果应用程序正在运行，热重载来更新正在运行的应用程序。(在命令行中，你可以输入 \u003ccode\u003er\u003c/code\u003e 来热重载。)每次点击热重载或保存项目时，你应该会在运行中的应用程序中看到一个不同的单词对，随机选择。这是因为单词对是在 \u003ccode\u003ebuild\u003c/code\u003e 方法里面生成的，每次 \u003ccode\u003eMaterialApp\u003c/code\u003e 需要渲染时，或者在 Flutter Inspector 中切换 \u003cstrong\u003ePlatform\u003c/strong\u003e 时，都会运行该方法。\u003c/p\u003e\n\u003cp\u003eAndroid:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/57cfbac8f2b50e5b.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003eiOS:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/30ed7f83a1500fa9.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch3 id=\"有问题\"\u003e有问题？\u003c/h3\u003e\n\u003cp\u003e如果您的应用程序没有正确运行，请查找错别字。如果需要，请使用以下链接中的代码来恢复正常。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/flutter/codelabs/blob/b3293b5bb0c0187bdbe8112f7759f4d75f4c040a/startup_namer/step2_use_package/pubspec.yaml\"\u003epubspec.yaml\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/flutter/codelabs/blob/b3293b5bb0c0187bdbe8112f7759f4d75f4c040a/startup_namer/step2_use_package/lib/main.dart\"\u003elib/main.dart\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"添加一个有状态的组件\"\u003e添加一个有状态的组件\u003c/h2\u003e\n\u003cp\u003e无状态组件是不可改变的，这意味着它们的属性不能改变-所有值都是最终值。\u003c/p\u003e\n\u003cp\u003e有状态组件维护的状态可能在组件的生命周期内发生变化。实现一个有状态的组件至少需要两个类。1) 一个 \u003ca href=\"https://docs.flutter.io/flutter/widgets/StatefulWidget-class.html\"\u003eStatefulWidget\u003c/a\u003e，它可以创建一个 \u003ca href=\"https://docs.flutter.io/flutter/widgets/State-class.html\"\u003eState\u003c/a\u003e 类的实例。\u003ccode\u003eStatefulWidget\u003c/code\u003e 对象本身是不可变的，可以被丢弃和再生，但 \u003ccode\u003eState\u003c/code\u003e 对象会在 widget 的生命周期内持久存在。\u003c/p\u003e\n\u003cp\u003e在这一步骤中，您将添加一个有状态的组件 \u003ccode\u003eRandomWords\u003c/code\u003e，并创建其 \u003ccode\u003eState\u003c/code\u003e 类 \u003ccode\u003e_RandomWordsState\u003c/code\u003e。然后，您将在现有的 MyApp 无状态组件中使用 \u003ccode\u003eRandomWords\u003c/code\u003e 作为子类。\u003c/p\u003e\n\u003cp\u003e为有状态组件创建模板代码。\u003c/p\u003e\n\u003cp\u003e它可以放在 \u003ccode\u003eMyApp\u003c/code\u003e 以外的文件中的任何位置，但解决方案将其放在文件的底部。在 \u003ccode\u003elib/main.dart\u003c/code\u003e 中，将光标定位在所有代码之后，输入回车键几次，重新开始一行。在你的 IDE 中，开始输入 \u003ccode\u003estful\u003c/code\u003e。编辑器会询问你是否要创建一个 \u003ccode\u003eStateful\u003c/code\u003e 的组件。按回车键接受。两个类的模板代码出现了，光标定位让你输入无状态组件的名称。\u003c/p\u003e\n\u003cp\u003e输入 \u003ccode\u003eRandomWords\u003c/code\u003e 作为您的小组件的名称。\u003c/p\u003e\n\u003cp\u003e正如您在下面的代码中所看到的，\u003ccode\u003eRandomWords\u003c/code\u003e 组件除了创建它的 \u003ccode\u003eState\u003c/code\u003e 类之外，几乎没有其他的功能。\u003c/p\u003e\n\u003cp\u003e一旦您输入 \u003ccode\u003eRandomWords\u003c/code\u003e 作为有状态组件的名称，IDE 会自动更新相应的 \u003ccode\u003eState\u003c/code\u003e 类，将其命名为 \u003ccode\u003e_RandomWordState\u003c/code\u003e。默认情况下，\u003ccode\u003eState\u003c/code\u003e 类的名称是以下划线为前缀的。在标识符前加上下划线可以加强 Dart 语言的\u003ca href=\"https://dart.dev/guides/language/language-tour#libraries-and-visibility\"\u003e隐私性\u003c/a\u003e，也是 \u003ccode\u003eState\u003c/code\u003e 对象的最佳实践。\u003c/p\u003e\n\u003cp\u003eIDE 也会自动更新 State 类以扩展 \u003ccode\u003eState\u0026lt;RandomWords\u0026gt;\u003c/code\u003e，表明你正在使用一个专门用于 \u003ccode\u003eRandomWords\u003c/code\u003e 的通用 \u003ca href=\"https://api.flutter.dev/flutter/widgets/State-class.html\"\u003eState\u003c/a\u003e 类。应用程序的大部分逻辑都在这里-它为 \u003ccode\u003eRandomWords\u003c/code\u003e 组件维护状态。这个类保存了生成的词对列表，随着用户的滚动而无限增长，在本实验室的第二部分中，当用户通过切换心形图标从列表中添加或删除这些词对时，该类会对其进行收藏。\u003c/p\u003e\n\u003cp\u003e现在两个类的外观如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRandomWords\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eStatefulWidget\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"n\"\u003e_RandomWordsState\u003c/span\u003e \u003cspan class=\"n\"\u003ecreateState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_RandomWordsState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003e_RandomWordsState\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eState\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRandomWords\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBuildContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eContainer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e更新 \u003ccode\u003e_RandomWordsState\u003c/code\u003e 中的 \u003ccode\u003ebuild()\u003c/code\u003e 方法。\u003c/p\u003e\n\u003cp\u003e用以下两行替换 \u003ccode\u003ereturn Container();\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003e_RandomWordsState\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eState\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRandomWords\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e                                  \n  \u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBuildContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ewordPair\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eWordPair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erandom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// NEW\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ewordPair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003easPascalCase\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// NEW\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e                                         \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e通过以下修改，删除 \u003ccode\u003eMyApp\u003c/code\u003e 中的文字生成代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyApp\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eStatelessWidget\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBuildContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ewordPair\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eWordPair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erandom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// DELETE\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eMaterialApp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eWelcome to Flutter\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003ehome:\u003c/span\u003e \u003cspan class=\"n\"\u003eScaffold\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003eappBar:\u003c/span\u003e \u003cspan class=\"n\"\u003eAppBar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n          \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eWelcome to Flutter\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003ebody:\u003c/span\u003e \u003cspan class=\"n\"\u003eCenter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n          \u003cspan class=\"c1\"\u003e//child: Text(wordPair.asPascalCase), // REPLACE with... \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e          \u003cspan class=\"nl\"\u003echild:\u003c/span\u003e \u003cspan class=\"n\"\u003eRandomWords\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e// ...this line\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e热重载应用程序。应用程序应该像以前一样，每次热重载或保存应用程序时都会显示一个单词配对。\u003c/p\u003e\n\u003cp\u003e提示：如果您在热重载时看到警告，表明您可能需要重新启动应用程序，您应该考虑重新启动应用程序。这可能是一个假阳性，但重启可以确保您的更改反映在应用程序的 UI 中。\u003c/p\u003e\n\u003ch3 id=\"遇到问题了\"\u003e遇到问题了？\u003c/h3\u003e\n\u003cp\u003e如果您的应用程序没有正确运行，您可以使用以下链接中的代码来恢复正常。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/flutter/codelabs/blob/b3293b5bb0c0187bdbe8112f7759f4d75f4c040a/startup_namer/step3_stateful_widget/lib/main.dart\"\u003elib/main.dart\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"创建一个无限滚动的-listview\"\u003e创建一个无限滚动的 ListView\u003c/h2\u003e\n\u003cp\u003e在这一步中，您将展开 \u003ccode\u003e_RandomWordsState\u003c/code\u003e 来生成并显示单词配对列表。随着用户的滚动，列表（显示在 ListView 小组件中）会无限增长。ListView 中的构建器工厂构造函数允许你按需懒惰地构建一个列表视图。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003e_RandomWordState\u003c/code\u003e 类中添加一些状态变量。\u003c/p\u003e\n\u003cp\u003e增加一个 \u003ccode\u003e_suggestions\u003c/code\u003e 列表，用于保存建议的单词配对。另外，添加一个 \u003ccode\u003e_biggerFont\u003c/code\u003e 变量，用于使字体大小变大。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003e_RandomWordsState\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eState\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRandomWords\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eWordPair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_suggestions\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eWordPair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// NEW\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eTextStyle\u003c/span\u003e \u003cspan class=\"n\"\u003e_biggerFont\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eTextStyle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003efontSize:\u003c/span\u003e \u003cspan class=\"m\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// NEW\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来，你将在 \u003ccode\u003e_RandomWordsState\u003c/code\u003e 类中添加一个 \u003ccode\u003e_buildSuggestions()\u003c/code\u003e 函数。这个方法可以构建显示建议词对的 \u003ccode\u003eListView\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eListView\u003c/code\u003e 类提供了一个构建器属性 \u003ccode\u003eitemBuilder\u003c/code\u003e，它是一个工厂构建器和回调函数，指定为一个匿名函数。两个参数被传递给函数\u0026ndash;\u003ccode\u003eBuildContext\u003c/code\u003e 和行迭代器 \u003ccode\u003ei\u003c/code\u003e。迭代器从0开始，每次调用函数时递增，每一个建议的单词配对都会递增一次。这个模型允许建议列表在用户滚动时继续增长。\u003c/p\u003e\n\u003cp\u003e添加整个 \u003ccode\u003e_buildSuggestions\u003c/code\u003e 函数。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003e_RandomWordsState\u003c/code\u003e 类中，添加以下函数，如果你喜欢，请删除注释:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003e_buildSuggestions\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eListView\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003epadding:\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eEdgeInsets\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eall\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"c1\"\u003e// The itemBuilder callback is called once per suggested \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// word pairing, and places each suggestion into a ListTile\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// row. For even rows, the function adds a ListTile row for\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// the word pairing. For odd rows, the function adds a \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// Divider widget to visually separate the entries. Note that\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// the divider may be difficult to see on smaller devices.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"nl\"\u003eitemBuilder:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBuildContext\u003c/span\u003e \u003cspan class=\"n\"\u003e_context\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// Add a one-pixel-high divider widget before each row \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// in the ListView.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisOdd\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eDivider\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// The syntax \u0026#34;i ~/ 2\u0026#34; divides i by 2 and returns an \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// integer result.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// For example: 1, 2, 3, 4, 5 becomes 0, 1, 1, 2, 2.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// This calculates the actual number of word pairings \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// in the ListView,minus the divider widgets.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eindex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// If you\u0026#39;ve reached the end of the available word\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// pairings...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_suggestions\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"c1\"\u003e// ...then generate 10 more and add them to the \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e          \u003cspan class=\"c1\"\u003e// suggestions list.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e          \u003cspan class=\"n\"\u003e_suggestions\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenerateWordPairs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003e_buildRow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_suggestions\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e_buildSuggestions\u003c/code\u003e 函数对每个词对调用一次 \u003ccode\u003e_buildRow\u003c/code\u003e。该函数在 \u003ccode\u003eListTile\u003c/code\u003e 中显示每一个新的词对，这使得你可以在\u003ca href=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/index.html?index=..%2F..index#0\"\u003e第2部分\u003c/a\u003e中使行更有吸引力。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003e_RandomWordsState\u003c/code\u003e 中添加一个 \u003ccode\u003e_buildRow\u003c/code\u003e 函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003e_buildRow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eWordPair\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eListTile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003easPascalCase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003estyle:\u003c/span\u003e \u003cspan class=\"n\"\u003e_biggerFont\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e更新 \u003ccode\u003e_RandomWordsState\u003c/code\u003e 的构建方法。\u003c/p\u003e\n\u003cp\u003e将其改为使用 \u003ccode\u003e_buildSuggestions()\u003c/code\u003e，而不是直接调用单词生成库。(\u003ccode\u003eScaffold\u003c/code\u003e 实现了基本的 Material Design 视觉布局。)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n\u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBuildContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//final wordPair = WordPair.random(); // Delete these... \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e//return Text(wordPair.asPascalCase); // ... two lines.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eScaffold\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e                     \u003cspan class=\"c1\"\u003e// Add from here... \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"nl\"\u003eappBar:\u003c/span\u003e \u003cspan class=\"n\"\u003eAppBar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eStartup Name Generator\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003ebody:\u003c/span\u003e \u003cspan class=\"n\"\u003e_buildSuggestions\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                                      \u003cspan class=\"c1\"\u003e// ... to here.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e更新 \u003ccode\u003eMyApp\u003c/code\u003e 的构建方法，更改标题，删除 \u003ccode\u003eAppBar\u003c/code\u003e，并将 home 属性改为 \u003ccode\u003eRandomWords\u003c/code\u003e 部件。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n\u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBuildContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eMaterialApp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eStartup Name Generator\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003ehome:\u003c/span\u003e \u003cspan class=\"n\"\u003eRandomWords\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e重新启动应用程序。无论你滚动多远，你都应该看到一个单词配对的列表。\u003c/p\u003e\n\u003cp\u003eAndroid:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/df2b3cb779e0020e.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003eiOS:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/ae47ef0ac2f492b8.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch3 id=\"遇到问题了-1\"\u003e遇到问题了？\u003c/h3\u003e\n\u003cp\u003e如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/flutter/codelabs/blob/b3293b5bb0c0187bdbe8112f7759f4d75f4c040a/startup_namer/step4_infinite_list/lib/main.dart\"\u003elib/main.dart\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"今后的步骤\"\u003e今后的步骤\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e恭喜你！\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e你已经完成了这个代码实验室的第一部分! 如果你想扩展这款应用，请进入\u003ca href=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/#0\"\u003e第二部分\u003c/a\u003e，你将对应用进行如下修改。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e增加互动性\u003c/li\u003e\n\u003cli\u003e增加导航到新路由的功能。\u003c/li\u003e\n\u003cli\u003e修改主题颜色。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当第2部分完成后，应用程序将是这样的：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/img/7fcab088cd22cff7.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch3 id=\"其他后续步骤\"\u003e其他后续步骤\u003c/h3\u003e\n\u003cp\u003e通过以下资源了解更多关于 Flutter SDK 的信息。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/docs/development/ui/layout\"\u003eFlutter 中的布局\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/docs/development/ui/interactive\"\u003e增加互动性教程\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/docs/development/ui/widgets-intro\"\u003e组件介绍\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/docs/get-started/flutter-for/android-devs\"\u003e为 Android 开发者提供的 Flutter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/docs/get-started/flutter-for/react-native-devs\"\u003e针对 React Native 开发者的 Flutter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/docs/get-started/flutter-for/web-devs\"\u003eWeb 开发人员的 Flutter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/flutterdev\"\u003eFlutter YouTube 频道\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其他资源包括以下几点:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.udacity.com/course/build-native-mobile-apps-with-flutter--ud905\"\u003e用 Flutter 构建本地移动应用\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://codelabs.developers.google.com/codelabs/from-java-to-dart/#1\"\u003e从 Java 到 Dart codelab\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/cookbook/\"\u003eFlutter cookbook\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/bootstrap-into-dart/\"\u003e融入 Dart 的 Bootstrap：了解更多关于这门语言的信息\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e同时，\u003ca href=\"https://flutter.dev/community\"\u003e与 Flutter 社区联系起来!\u003c/a\u003e\u003c/p\u003e\n","text":"介绍 Flutter 是 Google 的 UI 工具包，用于从单一代码库中为手机、网页和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起工作，被世界各地的开发者和组织使用，并且是免费和开源的。\n在这个代码实验室中，你将创建一个简单的手机 Flutter 应用。如果你熟悉面向对象的代码和基本的编程概念-如变量、循环和条件, 那么你就可以完成这个 codelab。你不需要以前有 Dart、手机或 Web 编程的经验。\n你将在第1部分学到什么  如何编写一款在 iOS、Android 和 Web 上看起来很自然的 Flutter 应用？ Flutter 应用程序的基本结构。 寻找和使用包来扩展功能。 使用热重装来加快开发周期。 如何实现一个有状态的小组件。 如何创建一个无限的、懒加载的列表。  在这个 codelab 的第2部分中，你将添加交互性，修改应用程序的主题，并添加导航到新页面的能力(在 Flutter 中称为路由)。\n你将在第1部分中构建什么 你将实现一个移动应用，为一家创业公司生成建议的名字。用户可以选择和取消选择名字，保存最好的名字。代码一次懒惰地生成10个名字。随着用户的滚动，会生成更多的名字。用户可以滚动的范围没有限制。\n下面的 GIF 动画显示了应用程序在完成部分时的工作情况。\n设置你的 Flutter 环境 你需要两个软件来完成这个实验室-Flutter SDK和一个编辑器。(codelab 假设你使用 Android Studio，但你可以使用你的首选编辑器。)\n你可以通过使用以下任何设备来运行 codelab。\n 一个物理的 Android 或 iOS 设备连接到你的计算机并设置为开发者模式。 iOS 模拟器(需要安装 Xcode 工具) 安卓模拟器(需要在 Android Studio 中进行设置) 浏览器(调试时需要使用 Chrome 浏览器)  如果你想编译你的应用程序以在 web 上运行，你必须启用此功能（目前处于测试阶段）。要启用 web 支持，请使用以下说明。\nflutter channel beta flutter upgrade flutter config --enable-web 你只需要运行一次 config 命令。启用 Web 支持后，你创建的每个 Flutter 应用也会为 Web 编译。在你的 IDE 的设备下拉菜单下面，或者在命令行使用 flutter devices，你现在应该看到 Chrome 和 Web 服务器被列出。Chrome 设备会自动启动 Chrome。Web 服务器会启动一个托管应用程序的服务器，这样你就可以从任何浏览器加载它。在开发过程中使用 Chrome 设备，以便你可以使用 DevTools，而当你要在其他浏览器上进行测试时使用 Web 服务器。有关更多信息，请参阅使用 Flutter 构建 Web 应用程序和在 Web 上编写你的第一个 Flutter 应用程序。\n创建 Flutter 应用程序的启动器 通过使用创建应用程序中的说明来创建一个简单的、模板化的 Flutter 应用程序。输入 startup_namer(而不是 flutter_app)作为项目名称。您将修改启动器应用程序来创建完成的应用程序。\n提示：如果你在 IDE 中没有看到能够启动一个新的 Flutter 项目作为一个选项，那么请确保你已经安装了 Flutter 和 Dart 的插件。\n你将主要编辑 lib/main.dart，Dart 的代码就在这里。\n替换 lib/main.dart 的内容。 删除 lib/main.dart 中的所有代码，并用下面的代码替换，在屏幕中央显示 \u0026ldquo;Hello World\u0026rdquo;。\nimport \u0026#39;package:flutter/material.dart\u0026#39;; void main() =\u0026gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Welcome to Flutter\u0026#39;, home: Scaffold( appBar: AppBar( title: const Text(\u0026#39;Welcome to Flutter\u0026#39;), ), body: const Center( child: const Text(\u0026#39;Hello World\u0026#39;), ), ), ); } } 提示：当把代码粘贴到你的应用程序中时，缩进会变得歪斜。你可以用以下 Flutter 工具来解决。\n Android Studio/IntelliJ IDEA: 右键点击 Dart 代码，选择用 dartfmt 重格式代码。 VS code: 右键点击并选择格式化文档。 终端: 运行 flutter format \u0026lt;文件名\u0026gt;。  运行应用程序。您应该看到 Android，iOS 或 Web 输出，取决于您的设备。\n安卓系统:\niOS:\n小贴士：第一次在物理设备上运行时，可能需要一段时间来加载。之后，你可以使用热重载来快速更新。在支持的 IDE 中，如果应用正在运行，Save 也会执行热重载。当使用 flutter run 直接从控制台运行应用程序时，输入 r 来执行热重载。\n观察:\n 这个例子创建了一个 Material 应用。Material 是一种视觉设计语言，是移动和 Web 的标准。Flutter 提供了一套丰富的 Material 部件。 main 方法使用箭头(=\u0026gt;)符号。对单行函数或方法使用箭头符号。 应用程序扩展了 StatelessWidget，这使得应用程序本身成为一个组件。在 Flutter 中，几乎所有的东西都是组件，包括对齐、填充和布局。 Scaffold 组件来自 Material 库，它提供了一个默认的应用栏、一个标题和一个 body 属性，其中存放着主屏幕的组件树。组件子树可以相当复杂。 组件的主要工作是提供一个 build 方法，描述如何用其他低级组件来显示该组件。 本例的主体由包含 Text 子部件的 Center 部件组成。Center 组件将其组件子树对齐到屏幕的中心。  使用外部软件包 在这一步中，您将开始使用一个名为 english_words 的开源包，它包含了几千个最常用的英语单词，还有一些实用函数。\n你可以在 pub.dev 找到 english_words 包，以及许多其他开源包。\npubspec 文件管理着 Flutter 应用的资产。在 pubspec.yaml 中，附加 english_words: ^3.1.5(english_words 3.1.5 或更高)到依赖列表中。\ndependencies:flutter:sdk:fluttercupertino_icons:^0.1.2english_words:^3.1.5# add this line在 Android Studio 的编辑器视图中查看 pubspec 时，点击 Packages get。这将把包拉到你的项目中。你应该在控制台中看到以下内容。\nflutter packages get Running \u0026#34;flutter packages get\u0026#34; in startup_namer... Process finished with exit code 0 执行 Pub get 也会自动生成 \u0026ldquo;pubspec.lock\u0026rdquo; 文件，其中包含所有拉入项目的包的列表和它们的版本号。\n在 lib/main.dart 中，导入新包:\nimport \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:english_words/english_words.dart\u0026#39;; // Add this line. 当你输入时，Android Studio 会给你建议导入的库。然后，它将导入的字符串渲染成灰色，让你知道导入的库是未使用的（到目前为止）。\n接下来，你将使用 english_words 包来生成文本，而不是使用 \u0026ldquo;Hello World\u0026rdquo;。\n做以下修改。\nimport \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:english_words/english_words.dart\u0026#39;; void main() =\u0026gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); // Add this line.  return MaterialApp( title: \u0026#39;Welcome to Flutter\u0026#39;, home: Scaffold( appBar: AppBar( title: Text(\u0026#39;Welcome to Flutter\u0026#39;), ), body: Center( //child: Text(\u0026#39;Hello World\u0026#39;), // Replace this text...  child: Text(wordPair.asPascalCase), // With this text.  ), ), ); } } 提示: Pascal 大小写(也称为上驼形大小写)意味着字符串中的每个单词，包括第一个单词，都以大写字母开头。所以，uppercamelcase 就变成了 UpperCamelCase。\n如果应用程序正在运行，热重载来更新正在运行的应用程序。(在命令行中，你可以输入 r 来热重载。)每次点击热重载或保存项目时，你应该会在运行中的应用程序中看到一个不同的单词对，随机选择。这是因为单词对是在 build 方法里面生成的，每次 MaterialApp 需要渲染时，或者在 Flutter Inspector 中切换 Platform 时，都会运行该方法。\nAndroid:\niOS:\n有问题？ 如果您的应用程序没有正确运行，请查找错别字。如果需要，请使用以下链接中的代码来恢复正常。\n pubspec.yaml lib/main.dart  添加一个有状态的组件 无状态组件是不可改变的，这意味着它们的属性不能改变-所有值都是最终值。\n有状态组件维护的状态可能在组件的生命周期内发生变化。实现一个有状态的组件至少需要两个类。1) 一个 StatefulWidget，它可以创建一个 State 类的实例。StatefulWidget 对象本身是不可变的，可以被丢弃和再生，但 State 对象会在 widget 的生命周期内持久存在。\n在这一步骤中，您将添加一个有状态的组件 RandomWords，并创建其 State 类 _RandomWordsState。然后，您将在现有的 MyApp 无状态组件中使用 RandomWords 作为子类。\n为有状态组件创建模板代码。\n它可以放在 MyApp 以外的文件中的任何位置，但解决方案将其放在文件的底部。在 lib/main.dart 中，将光标定位在所有代码之后，输入回车键几次，重新开始一行。在你的 IDE 中，开始输入 stful。编辑器会询问你是否要创建一个 Stateful 的组件。按回车键接受。两个类的模板代码出现了，光标定位让你输入无状态组件的名称。\n输入 RandomWords 作为您的小组件的名称。\n正如您在下面的代码中所看到的，RandomWords 组件除了创建它的 State 类之外，几乎没有其他的功能。\n一旦您输入 RandomWords 作为有状态组件的名称，IDE 会自动更新相应的 State 类，将其命名为 _RandomWordState。默认情况下，State 类的名称是以下划线为前缀的。在标识符前加上下划线可以加强 Dart 语言的隐私性，也是 State 对象的最佳实践。\nIDE 也会自动更新 State 类以扩展 State\u0026lt;RandomWords\u0026gt;，表明你正在使用一个专门用于 RandomWords 的通用 State 类。应用程序的大部分逻辑都在这里-它为 RandomWords 组件维护状态。这个类保存了生成的词对列表，随着用户的滚动而无限增长，在本实验室的第二部分中，当用户通过切换心形图标从列表中添加或删除这些词对时，该类会对其进行收藏。\n现在两个类的外观如下:\nclass RandomWords extends StatefulWidget { @override _RandomWordsState createState() =\u0026gt; _RandomWordsState(); } class _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { @override Widget build(BuildContext context) { return Container(); } } 更新 _RandomWordsState 中的 build() 方法。\n用以下两行替换 return Container();:\nclass _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); // NEW  return Text(wordPair.asPascalCase); // NEW  } } 通过以下修改，删除 MyApp 中的文字生成代码:\nclass MyApp extends StatelessWidget { @override Widget build(BuildContext context) { final wordPair = WordPair.random(); // DELETE  return MaterialApp( title: \u0026#39;Welcome to Flutter\u0026#39;, home: Scaffold( appBar: AppBar( title: Text(\u0026#39;Welcome to Flutter\u0026#39;), ), body: Center( //child: Text(wordPair.asPascalCase), // REPLACE with...  child: RandomWords(), // ...this line  ), ), ); } } 热重载应用程序。应用程序应该像以前一样，每次热重载或保存应用程序时都会显示一个单词配对。\n提示：如果您在热重载时看到警告，表明您可能需要重新启动应用程序，您应该考虑重新启动应用程序。这可能是一个假阳性，但重启可以确保您的更改反映在应用程序的 UI 中。\n遇到问题了？ 如果您的应用程序没有正确运行，您可以使用以下链接中的代码来恢复正常。\n lib/main.dart  创建一个无限滚动的 ListView 在这一步中，您将展开 _RandomWordsState 来生成并显示单词配对列表。随着用户的滚动，列表（显示在 ListView 小组件中）会无限增长。ListView 中的构建器工厂构造函数允许你按需懒惰地构建一个列表视图。\n在 _RandomWordState 类中添加一些状态变量。\n增加一个 _suggestions 列表，用于保存建议的单词配对。另外，添加一个 _biggerFont 变量，用于使字体大小变大。\nclass _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { final List\u0026lt;WordPair\u0026gt; _suggestions = \u0026lt;WordPair\u0026gt;[]; // NEW  final TextStyle _biggerFont = const TextStyle(fontSize: 18); // NEW  ... } 接下来，你将在 _RandomWordsState 类中添加一个 _buildSuggestions() 函数。这个方法可以构建显示建议词对的 ListView。\nListView 类提供了一个构建器属性 itemBuilder，它是一个工厂构建器和回调函数，指定为一个匿名函数。两个参数被传递给函数\u0026ndash;BuildContext 和行迭代器 i。迭代器从0开始，每次调用函数时递增，每一个建议的单词配对都会递增一次。这个模型允许建议列表在用户滚动时继续增长。\n添加整个 _buildSuggestions 函数。\n在 _RandomWordsState 类中，添加以下函数，如果你喜欢，请删除注释:\nWidget _buildSuggestions() { return ListView.builder( padding: const EdgeInsets.all(16), // The itemBuilder callback is called once per suggested  // word pairing, and places each suggestion into a ListTile  // row. For even rows, the function adds a ListTile row for  // the word pairing. For odd rows, the function adds a  // Divider widget to visually separate the entries. Note that  // the divider may be difficult to see on smaller devices.  itemBuilder: (BuildContext _context, int i) { // Add a one-pixel-high divider widget before each row  // in the ListView.  if (i.isOdd) { return Divider(); } // The syntax \u0026#34;i ~/ 2\u0026#34; divides i by 2 and returns an  // integer result.  // For example: 1, 2, 3, 4, 5 becomes 0, 1, 1, 2, 2.  // This calculates the actual number of word pairings  // in the ListView,minus the divider widgets.  final int index = i ~/ 2; // If you\u0026#39;ve reached the end of the available word  // pairings...  if (index \u0026gt;= _suggestions.length) { // ...then generate 10 more and add them to the  // suggestions list.  _suggestions.addAll(generateWordPairs().take(10)); } return _buildRow(_suggestions[index]); } ); } _buildSuggestions 函数对每个词对调用一次 _buildRow。该函数在 ListTile 中显示每一个新的词对，这使得你可以在第2部分中使行更有吸引力。\n在 _RandomWordsState 中添加一个 _buildRow 函数。\nWidget _buildRow(WordPair pair) { return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), ); } 更新 _RandomWordsState 的构建方法。\n将其改为使用 _buildSuggestions()，而不是直接调用单词生成库。(Scaffold 实现了基本的 Material Design 视觉布局。)\n@override Widget build(BuildContext context) { //final wordPair = WordPair.random(); // Delete these...  //return Text(wordPair.asPascalCase); // ... two lines.  return Scaffold ( // Add from here...  appBar: AppBar( title: Text(\u0026#39;Startup Name Generator\u0026#39;), ), body: _buildSuggestions(), ); // ... to here.  } 更新 MyApp 的构建方法，更改标题，删除 AppBar，并将 home 属性改为 RandomWords 部件。\n@override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Startup Name Generator\u0026#39;, home: RandomWords(), ); } 重新启动应用程序。无论你滚动多远，你都应该看到一个单词配对的列表。\nAndroid:\niOS:\n遇到问题了？ 如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。\n lib/main.dart  今后的步骤 恭喜你！\n你已经完成了这个代码实验室的第一部分! 如果你想扩展这款应用，请进入第二部分，你将对应用进行如下修改。\n 增加互动性 增加导航到新路由的功能。 修改主题颜色。  当第2部分完成后，应用程序将是这样的：\n其他后续步骤 通过以下资源了解更多关于 Flutter SDK 的信息。\n Flutter 中的布局 增加互动性教程 组件介绍 为 Android 开发者提供的 Flutter 针对 React Native 开发者的 Flutter Web 开发人员的 Flutter Flutter YouTube 频道  其他资源包括以下几点:\n 用 Flutter 构建本地移动应用 从 Java 到 Dart codelab Flutter cookbook 融入 Dart 的 Bootstrap：了解更多关于这门语言的信息  同时，与 Flutter 社区联系起来!\n"},"name":"编写你的第一个 Flutter 应用，第一部分","published":"2020-06-26T00:00:00+08:00","summary":"Flutter 是 Google 的 UI 工具包，用于从单一代码库中为手机、网页和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起使用，被世界各地的开发者和组织使用，并且是免费和开源的。","type":"entry","url":"https://ohmyweekly.github.io/notes/write-your-first-flutter-app/"},{"content":{"html":"\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003eFlutter 是 Google 的 UI 工具包，用于从单一代码库中为移动、Web 和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起工作，被世界各地的开发者和组织使用，并且是免费和开源的。\u003c/p\u003e\n\u003cp\u003e在这个代码实验室中，您将扩展一个基本的、移动的 Flutter 应用程序，以包含交互性。您还将创建一个用户可以导航到的第二个页面（称为路由）。最后，您将修改应用程序的主题（颜色）。这个代码实验室扩展了第1部分，在这部分中，你将\u003ca href=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/\"\u003e创建一个无限的懒惰加载的列表\u003c/a\u003e，但如果你想从第2部分开始，我们将提供起始代码。\u003c/p\u003e\n\u003ch3 id=\"你将在第二部分学到什么\"\u003e你将在第二部分学到什么\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e如何编写一款在 iOS、Android 和 Web 上看起来很自然的 Flutter 应用？\u003c/li\u003e\n\u003cli\u003e如何使用热重装，加快开发周期？\u003c/li\u003e\n\u003cli\u003e如何为有状态的 widget 添加交互性？\u003c/li\u003e\n\u003cli\u003e如何创建并导航到第二个屏幕？\u003c/li\u003e\n\u003cli\u003e如何使用主题来改变应用程序的外观？\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"你将在第二部分建立什么\"\u003e你将在第二部分建立什么\u003c/h3\u003e\n\u003cp\u003e您将从一个简单的移动应用程序开始，为创业公司生成一个无尽的建议名称列表。在代码实验室结束时，您的最终用户可以选择和取消选择名称，保存最好的名称。点击应用栏右上角的列表图标可以导航到一个新的页面（称为路由），该页面只列出了最喜欢的名字。\u003c/p\u003e\n\u003cp\u003e下面的 GIF 动画显示了完成的应用程序将如何工作。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/7fcab088cd22cff7.gif\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch2 id=\"设置您的-flutter-环境\"\u003e设置您的 Flutter 环境\u003c/h2\u003e\n\u003cp\u003e如果你还没有完成第1部分，请看\u003ca href=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/#1\"\u003e设置你的 Flutter 环境\u003c/a\u003e，在\u003ca href=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1/\"\u003e编写你的第一个Flutter应用，第1部分\u003c/a\u003e，设置你的 Flutter 开发环境。\u003c/p\u003e\n\u003ch2 id=\"获取启动应用程序\"\u003e获取启动应用程序\u003c/h2\u003e\n\u003cp\u003e如果你已经完成了这个 codelab 的第一部分，你已经有了启动应用程序，\u003ccode\u003estartup_namer\u003c/code\u003e。你可以进行下一步。\u003c/p\u003e\n\u003cp\u003e如果你没有 \u003ccode\u003estartup_namer\u003c/code\u003e，不要害怕，你可以使用下面的说明得到它。\u003c/p\u003e\n\u003cp\u003e使用\u003ca href=\"https://flutter.dev/get-started/test-drive/#create-app\"\u003e创建应用程序\u003c/a\u003e中的说明创建一个简单的模板化 Flutter 应用程序。将项目命名为 \u003ccode\u003estartup_namer\u003c/code\u003e（而不是 \u003ccode\u003eflutter_app\u003c/code\u003e）。\u003c/p\u003e\n\u003cp\u003e删除 \u003ccode\u003elib/main.dart\u003c/code\u003e 中的所有代码。用这个\u003ca href=\"https://github.com/flutter/codelabs/blob/b3293b5bb0c0187bdbe8112f7759f4d75f4c040a/startup_namer/step4_infinite_list/lib/main.dart\"\u003e文件\u003c/a\u003e中的代码替换，它显示了一个无限的，懒惰加载的建议启动名称列表。\u003c/p\u003e\n\u003cp\u003e更新 \u003ccode\u003epubspec.yaml\u003c/code\u003e，加入英文单词包。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"k\"\u003edependencies\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003eflutter\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003esdk\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003eflutter\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003ecupertino_icons\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e^\u003cspan class=\"m\"\u003e0.1\u003c/span\u003e\u003cspan class=\"m\"\u003e.2\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003eenglish_words\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e^\u003cspan class=\"m\"\u003e3.1\u003c/span\u003e\u003cspan class=\"m\"\u003e.5\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e//\u003cspan class=\"w\"\u003e \u003c/span\u003eNEW\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e英文单词包会生成一对随机的单词，作为潜在的启动名称。\u003c/p\u003e\n\u003cp\u003e在 Android Studio 的编辑器视图中查看 pubspec 时，点击右上角的 \u003cstrong\u003ePub get\u003c/strong\u003e，这将包拉到你的项目中。你应该在控制台中看到以下内容:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eflutter pub get\nRunning \u003cspan class=\"s2\"\u003e\u0026#34;flutter pub get\u0026#34;\u003c/span\u003e in startup_namer...\nProcess finished with \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e code \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e运行该应用。\u003c/p\u003e\n\u003cp\u003e随意滚动，查看持续供应的拟创业公司名称。\u003c/p\u003e\n\u003ch2 id=\"将图标添加到列表中\"\u003e将图标添加到列表中\u003c/h2\u003e\n\u003cp\u003e在这一步中，你将为每一行添加心形图标。在下一步中，您将使它们可点击并保存收藏夹。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003e_RandomWordsState\u003c/code\u003e 中添加一个 \u003ccode\u003e_saved\u003c/code\u003e Set。这个 \u003ccode\u003eSet\u003c/code\u003e 存储了用户收藏的单词配对。\u003ccode\u003eSet\u003c/code\u003e 比 \u003ccode\u003eList\u003c/code\u003e 更受欢迎，因为一个正确实现的 \u003ccode\u003eSet\u003c/code\u003e 不允许重复的条目。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003e_RandomWordsState\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eState\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRandomWords\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003e_suggestions\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eWordPair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003e_saved\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSet\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eWordPair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// NEW\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003e_biggerFont\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTextStyle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003efontSize:\u003c/span\u003e \u003cspan class=\"m\"\u003e18.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 \u003ccode\u003e_buildRow\u003c/code\u003e 函数中，添加一个 \u003ccode\u003ealreadySaved\u003c/code\u003e 检查，以确保一个单词配对还没有被添加到收藏夹中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003e_buildRow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eWordPair\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ealreadySaved\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_saved\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// NEW\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 \u003ccode\u003e_buildRow()\u003c/code\u003e 中，你还将为 \u003ccode\u003eListTile\u003c/code\u003e 对象添加心形图标以实现收藏夹。在下一步中，你将添加与心形图标交互的功能。\u003c/p\u003e\n\u003cp\u003e在文本之后添加图标，如下图所示。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003e_buildRow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eWordPair\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ealreadySaved\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_saved\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eListTile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003easPascalCase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003estyle:\u003c/span\u003e \u003cspan class=\"n\"\u003e_biggerFont\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nl\"\u003etrailing:\u003c/span\u003e \u003cspan class=\"n\"\u003eIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// NEW from here... \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003ealreadySaved\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eIcons\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efavorite\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIcons\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efavorite_border\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003ecolor:\u003c/span\u003e \u003cspan class=\"n\"\u003ealreadySaved\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eColors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// ... to here.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e热重新加载应用程序。\u003c/p\u003e\n\u003cp\u003e你现在应该看到每一行都有空心，但它们还没有互动。\u003c/p\u003e\n\u003cp\u003eAndroid\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/819e2ff89da9421a.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003eiOS\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/4df48933551e7c48.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch3 id=\"遇到问题了\"\u003e遇到问题了？\u003c/h3\u003e\n\u003cp\u003e如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/flutter/codelabs/blob/master/startup_namer/step5_add_icons/lib/main.dart\"\u003elib/main.dart\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"增加互动性\"\u003e增加互动性\u003c/h2\u003e\n\u003cp\u003e在这一步中，你将使心形图标可以点击。当用户点击列表中的一个条目，切换其收藏状态时，该词对就会从一组保存的收藏夹中添加或删除。\u003c/p\u003e\n\u003cp\u003e要做到这一点，你将修改 \u003ccode\u003e_buildRow\u003c/code\u003e 函数。如果一个词条已经被添加到收藏夹中，再次点击它就会将其从收藏夹中删除。当一个磁贴被点击后，函数会调用 \u003ccode\u003esetState()\u003c/code\u003e 来通知框架状态已经改变。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003e_buildRow\u003c/code\u003e 方法中加入 \u003ccode\u003eonTap\u003c/code\u003e，如下图所示:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003e_buildRow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eWordPair\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ealreadySaved\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_saved\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eListTile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003easPascalCase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003estyle:\u003c/span\u003e \u003cspan class=\"n\"\u003e_biggerFont\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nl\"\u003etrailing:\u003c/span\u003e \u003cspan class=\"n\"\u003eIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ealreadySaved\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eIcons\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efavorite\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIcons\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efavorite_border\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003ecolor:\u003c/span\u003e \u003cspan class=\"n\"\u003ealreadySaved\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eColors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nl\"\u003eonTap:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e      \u003cspan class=\"c1\"\u003e// NEW lines from here...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003esetState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ealreadySaved\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"n\"\u003e_saved\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \n          \u003cspan class=\"n\"\u003e_saved\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e               \u003cspan class=\"c1\"\u003e// ... to here.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e提示：在 Flutter 的反应式框架中，调用 \u003ccode\u003esetState()\u003c/code\u003e 会触发对 \u003ccode\u003eState\u003c/code\u003e 对象的 \u003ccode\u003ebuild()\u003c/code\u003e 方法的调用，导致 UI 的更新。\u003c/p\u003e\n\u003cp\u003e热重载应用。\u003c/p\u003e\n\u003cp\u003e你应该能够点击任何磁贴来收藏或不收藏该条目。点击瓷砖会产生一个隐含的从点击点发出的泼墨动画。\u003c/p\u003e\n\u003cp\u003eAndroid\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/43dfc7ba5f728e8f.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003eiOS\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/e7a99a1b94bea7d4.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch3 id=\"遇到问题了-1\"\u003e遇到问题了？\u003c/h3\u003e\n\u003cp\u003e如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/flutter/codelabs/blob/master/startup_namer/step6_add_interactivity/lib/main.dart\"\u003elib/main.dart\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"导航到一个新的屏幕\"\u003e导航到一个新的屏幕\u003c/h2\u003e\n\u003cp\u003e在这一步中，您将添加一个新的页面（在 Flutter 中称为路由），显示收藏夹。您将学习如何在主页路线和新路由之间进行导航。\u003c/p\u003e\n\u003cp\u003e在 Flutter 中，\u003ccode\u003eNavigator\u003c/code\u003e 管理着一个包含应用程序路由的堆栈。将一个路由推到 \u003ccode\u003eNavigator\u003c/code\u003e 的堆栈上，会将显示更新到该路由。从 \u003ccode\u003eNavigator\u003c/code\u003e 的堆栈中弹出一条路由，会将显示返回到之前的路由。\u003c/p\u003e\n\u003cp\u003e接下来，您将在 \u003ccode\u003e_RandomWordsState\u003c/code\u003e 的 \u003ccode\u003ebuild\u003c/code\u003e 方法中为 \u003ccode\u003eAppBar\u003c/code\u003e 添加一个列表图标。当用户点击列表图标时，一个包含保存的收藏夹的新路由会被推送到 \u003ccode\u003eNavigator\u003c/code\u003e，显示图标。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003ebuild\u003c/code\u003e 方法中添加图标及其对应的操作:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003e_RandomWordsState\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eState\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRandomWords\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBuildContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eScaffold\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003eappBar:\u003c/span\u003e \u003cspan class=\"n\"\u003eAppBar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eStartup Name Generator\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003eactions:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e              \u003cspan class=\"c1\"\u003e// NEW lines from here...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e          \u003cspan class=\"n\"\u003eIconButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003eicon:\u003c/span\u003e \u003cspan class=\"n\"\u003eIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIcons\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nl\"\u003eonPressed:\u003c/span\u003e \u003cspan class=\"n\"\u003e_pushSaved\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                      \u003cspan class=\"c1\"\u003e// ... to here.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003ehome:\u003c/span\u003e \u003cspan class=\"n\"\u003eRandomWords\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e提示：一些小组件属性会取一个小组件(\u003ccode\u003echild\u003c/code\u003e)，而其他属性，如 \u003ccode\u003eaction\u003c/code\u003e，会取一组小组件(\u003ccode\u003echildren\u003c/code\u003e), 如方括号(\u003ccode\u003e[]\u003c/code\u003e)所示。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003e_RandomWordsState\u003c/code\u003e 类中添加一个 \u003ccode\u003e_pushSaved()\u003c/code\u003e 函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003e_pushSaved\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e热重新加载应用程序。\u003ca href=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/a114478ae13b853.png\"\u003e列表图标\u003c/a\u003e出现在应用栏中。点击它还没有任何作用，因为 \u003ccode\u003e_pushSaved\u003c/code\u003e 函数是空的。\u003c/p\u003e\n\u003cp\u003e接下来，你将建立一条路由，并将其推送到 \u003ccode\u003eNavigator\u003c/code\u003e 的栈中。这个操作会改变屏幕以显示新的路由。新页面的内容是在 \u003ccode\u003eMaterialPageRoute\u003c/code\u003e 的构建器属性中以匿名函数的方式构建的。\u003c/p\u003e\n\u003cp\u003e调用 \u003ccode\u003eNavigator.push\u003c/code\u003e，如下图所示，它将路由推送到 \u003ccode\u003eNavigator\u003c/code\u003e 的堆栈中。IDE 会抱怨无效代码，但你会在下一节中解决这个问题。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003e_pushSaved\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eNavigator\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来，你将添加 \u003ccode\u003eMaterialPageRoute\u003c/code\u003e 和它的构建器。现在，添加生成 \u003ccode\u003eListTile\u003c/code\u003e 行的代码。\u003ccode\u003eListTile\u003c/code\u003e 的 \u003ccode\u003edivideTiles()\u003c/code\u003e 方法在每个 \u003ccode\u003eListTile\u003c/code\u003e 之间增加了水平间距。被划分的变量持有通过方便函数 \u003ccode\u003etoList()\u003c/code\u003e 转换为列表的最终行。\u003c/p\u003e\n\u003cp\u003e添加代码，如下面的代码片段所示:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003e_pushSaved\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eNavigator\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eMaterialPageRoute\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// NEW lines from here...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nl\"\u003ebuilder:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBuildContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003etiles\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_saved\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eWordPair\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n              \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eListTile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n                \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003easPascalCase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"nl\"\u003estyle:\u003c/span\u003e \u003cspan class=\"n\"\u003e_biggerFont\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n              \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n          \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003edivided\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eListTile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edivideTiles\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"nl\"\u003econtext:\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nl\"\u003etiles:\u003c/span\u003e \u003cspan class=\"n\"\u003etiles\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n          \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eScaffold\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"nl\"\u003eappBar:\u003c/span\u003e \u003cspan class=\"n\"\u003eAppBar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n              \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eSaved Suggestions\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"nl\"\u003ebody:\u003c/span\u003e \u003cspan class=\"n\"\u003eListView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003echildren:\u003c/span\u003e \u003cspan class=\"n\"\u003edivided\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"c1\"\u003e// ...to here.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003ebuilder\u003c/code\u003e 属性返回一个 \u003ccode\u003eScaffold\u003c/code\u003e，包含名为 \u003ccode\u003eSavedSuggestions\u003c/code\u003e 的新路由的应用栏。新路由的主体由一个包含 \u003ccode\u003eListTiles\u003c/code\u003e 行的 \u003ccode\u003eListView\u003c/code\u003e 组成。每一行都由一个分隔符隔开。\u003c/p\u003e\n\u003cp\u003e热重载应用。将一些选择收藏起来，然后点击应用栏中的列表图标。新的路由出现，包含收藏夹。请注意，Navigator 在应用栏中增加了一个\u0026quot;返回\u0026quot;按钮。你不必明确地实现 \u003ccode\u003eNavigator.pop\u003c/code\u003e。点击\u0026quot;返回\u0026quot;按钮就可以返回到主路由。\u003c/p\u003e\n\u003cp\u003eiOS - Main route\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/928693968b8e482a.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003eiOS - Saved suggestions route\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/2245376356747d5a.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch3 id=\"遇到问题了-2\"\u003e遇到问题了？\u003c/h3\u003e\n\u003cp\u003e如果你的应用程序没有正确运行，那么你可以使用下面链接中的代码来回到正轨。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/flutter/codelabs/blob/master/startup_namer/step7_navigate_route/lib/main.dart\"\u003elib/main.dart\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"使用主题改变用户界面\"\u003e使用主题改变用户界面\u003c/h2\u003e\n\u003cp\u003e在这一步中，您将修改应用程序的主题。主题控制你的应用程序的外观和感觉。您可以使用默认主题，这取决于物理设备或模拟器，或者自定义主题以反映您的品牌。\u003c/p\u003e\n\u003cp\u003e您可以通过配置 \u003ca href=\"https://docs.flutter.io/flutter/material/ThemeData-class.html\"\u003eThemeData\u003c/a\u003e 类轻松更改应用程序的主题。应用程序使用默认主题，但你会将应用程序的主色调改为白色。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003eMyApp\u003c/code\u003e 类中更改颜色:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyApp\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eStatelessWidget\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eWidget\u003c/span\u003e \u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBuildContext\u003c/span\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eMaterialApp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003etitle:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eStartup Name Generator\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003etheme:\u003c/span\u003e \u003cspan class=\"n\"\u003eThemeData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e          \u003cspan class=\"c1\"\u003e// Add the 3 lines from here... \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nl\"\u003eprimaryColor:\u003c/span\u003e \u003cspan class=\"n\"\u003eColors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhite\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                         \u003cspan class=\"c1\"\u003e// ... to here.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"nl\"\u003ehome:\u003c/span\u003e \u003cspan class=\"n\"\u003eRandomWords\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e热重载应用。现在整个背景都是白色的，甚至应用栏也是白色的。\u003c/p\u003e\n\u003cp\u003e作为一个练习，使用 \u003ccode\u003eThemeData\u003c/code\u003e 来改变 UI 的其他方面。Material 库中的 \u003ca href=\"https://docs.flutter.io/flutter/material/Colors-class.html\"\u003eColors\u003c/a\u003e 类提供了许多你可以玩的颜色常量。热重载使得对 UI 的实验变得快速而简单。\u003c/p\u003e\n\u003cp\u003eAndroid\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/5d4ed8aeea9e4d0a.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003eiOS\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/img/c325151f1ae4820d.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch3 id=\"遇到问题了-3\"\u003e遇到问题了？\u003c/h3\u003e\n\u003cp\u003e如果你已经偏离了轨道，那么使用下面链接中的代码来查看最终应用的代码。\u003c/p\u003e\n\u003cp\u003e= \u003ca href=\"https://github.com/flutter/codelabs/blob/master/startup_namer/step8_themes/lib/main.darts\"\u003elib/main.dart\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"做得很好\"\u003e做得很好！\u003c/h2\u003e\n\u003cp\u003e你写了一个交互式的 Flutter 应用，可以在 iOS 和 Android 上运行，具体做法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写 Dart 代码。\u003c/li\u003e\n\u003cli\u003e使用热重载来加快开发周期。\u003c/li\u003e\n\u003cli\u003e实现一个有状态的 widget，为你的应用添加交互性。\u003c/li\u003e\n\u003cli\u003e创建途径并添加在原途径和新途径之间移动的逻辑。\u003c/li\u003e\n\u003cli\u003e学习如何使用主题改变你的应用程序的 UI 外观。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"今后的步骤\"\u003e今后的步骤\u003c/h2\u003e\n\u003cp\u003e从以下资源中了解更多关于 Flutter SDK 的信息。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/docs/development/ui/layout\"\u003eFlutter 中的布局\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/docs/development/ui/interactive\"\u003e增加互动性教程\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/docs/development/ui/widgets-intro\"\u003e组件介绍\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/docs/get-started/flutter-for/android-devs\"\u003e为 Android 开发者提供的 Flutter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/docs/get-started/flutter-for/react-native-devs\"\u003e针对 React Native 开发者的 Flutter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/docs/get-started/flutter-for/web-devs\"\u003eWeb 开发人员的 Flutter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/flutterdev\"\u003eFlutter YouTube 频道\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其他资源包括以下几点:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.udacity.com/course/build-native-mobile-apps-with-flutter--ud905\"\u003e用 Flutter 构建本地移动应用\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://codelabs.developers.google.com/codelabs/from-java-to-dart/#1\"\u003e从 Java 到 Dart codelab\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/cookbook/\"\u003eFlutter cookbook\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flutter.dev/bootstrap-into-dart/\"\u003e融入 Dart 的 Bootstrap：了解更多关于这门语言的信息\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e同时，\u003ca href=\"https://flutter.dev/community\"\u003e与 Flutter 社区联系起来!\u003c/a\u003e\u003c/p\u003e\n","text":"介绍 Flutter 是 Google 的 UI 工具包，用于从单一代码库中为移动、Web 和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起工作，被世界各地的开发者和组织使用，并且是免费和开源的。\n在这个代码实验室中，您将扩展一个基本的、移动的 Flutter 应用程序，以包含交互性。您还将创建一个用户可以导航到的第二个页面（称为路由）。最后，您将修改应用程序的主题（颜色）。这个代码实验室扩展了第1部分，在这部分中，你将创建一个无限的懒惰加载的列表，但如果你想从第2部分开始，我们将提供起始代码。\n你将在第二部分学到什么  如何编写一款在 iOS、Android 和 Web 上看起来很自然的 Flutter 应用？ 如何使用热重装，加快开发周期？ 如何为有状态的 widget 添加交互性？ 如何创建并导航到第二个屏幕？ 如何使用主题来改变应用程序的外观？  你将在第二部分建立什么 您将从一个简单的移动应用程序开始，为创业公司生成一个无尽的建议名称列表。在代码实验室结束时，您的最终用户可以选择和取消选择名称，保存最好的名称。点击应用栏右上角的列表图标可以导航到一个新的页面（称为路由），该页面只列出了最喜欢的名字。\n下面的 GIF 动画显示了完成的应用程序将如何工作。\n设置您的 Flutter 环境 如果你还没有完成第1部分，请看设置你的 Flutter 环境，在编写你的第一个Flutter应用，第1部分，设置你的 Flutter 开发环境。\n获取启动应用程序 如果你已经完成了这个 codelab 的第一部分，你已经有了启动应用程序，startup_namer。你可以进行下一步。\n如果你没有 startup_namer，不要害怕，你可以使用下面的说明得到它。\n使用创建应用程序中的说明创建一个简单的模板化 Flutter 应用程序。将项目命名为 startup_namer（而不是 flutter_app）。\n删除 lib/main.dart 中的所有代码。用这个文件中的代码替换，它显示了一个无限的，懒惰加载的建议启动名称列表。\n更新 pubspec.yaml，加入英文单词包。\ndependencies:flutter:sdk:fluttercupertino_icons:^0.1.2english_words:^3.1.5//NEW英文单词包会生成一对随机的单词，作为潜在的启动名称。\n在 Android Studio 的编辑器视图中查看 pubspec 时，点击右上角的 Pub get，这将包拉到你的项目中。你应该在控制台中看到以下内容:\nflutter pub get Running \u0026#34;flutter pub get\u0026#34; in startup_namer... Process finished with exit code 0 运行该应用。\n随意滚动，查看持续供应的拟创业公司名称。\n将图标添加到列表中 在这一步中，你将为每一行添加心形图标。在下一步中，您将使它们可点击并保存收藏夹。\n在 _RandomWordsState 中添加一个 _saved Set。这个 Set 存储了用户收藏的单词配对。Set 比 List 更受欢迎，因为一个正确实现的 Set 不允许重复的条目。\nclass _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { final _suggestions = \u0026lt;WordPair\u0026gt;[]; final _saved = Set\u0026lt;WordPair\u0026gt;(); // NEW  final _biggerFont = TextStyle(fontSize: 18.0); ... } 在 _buildRow 函数中，添加一个 alreadySaved 检查，以确保一个单词配对还没有被添加到收藏夹中。\nWidget _buildRow(WordPair pair) { final alreadySaved = _saved.contains(pair); // NEW  ... } 在 _buildRow() 中，你还将为 ListTile 对象添加心形图标以实现收藏夹。在下一步中，你将添加与心形图标交互的功能。\n在文本之后添加图标，如下图所示。\nWidget _buildRow(WordPair pair) { final alreadySaved = _saved.contains(pair); return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), trailing: Icon( // NEW from here...  alreadySaved ? Icons.favorite : Icons.favorite_border, color: alreadySaved ? Colors.red : null, ), // ... to here.  ); } 热重新加载应用程序。\n你现在应该看到每一行都有空心，但它们还没有互动。\nAndroid\niOS\n遇到问题了？ 如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。\n lib/main.dart  增加互动性 在这一步中，你将使心形图标可以点击。当用户点击列表中的一个条目，切换其收藏状态时，该词对就会从一组保存的收藏夹中添加或删除。\n要做到这一点，你将修改 _buildRow 函数。如果一个词条已经被添加到收藏夹中，再次点击它就会将其从收藏夹中删除。当一个磁贴被点击后，函数会调用 setState() 来通知框架状态已经改变。\n在 _buildRow 方法中加入 onTap，如下图所示:\nWidget _buildRow(WordPair pair) { final alreadySaved = _saved.contains(pair); return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), trailing: Icon( alreadySaved ? Icons.favorite : Icons.favorite_border, color: alreadySaved ? Colors.red : null, ), onTap: () { // NEW lines from here...  setState(() { if (alreadySaved) { _saved.remove(pair); } else { _saved.add(pair); } }); }, // ... to here.  ); } 提示：在 Flutter 的反应式框架中，调用 setState() 会触发对 State 对象的 build() 方法的调用，导致 UI 的更新。\n热重载应用。\n你应该能够点击任何磁贴来收藏或不收藏该条目。点击瓷砖会产生一个隐含的从点击点发出的泼墨动画。\nAndroid\niOS\n遇到问题了？ 如果你的应用程序不能正常运行，你可以使用下面链接中的代码来回到正轨。\n lib/main.dart  导航到一个新的屏幕 在这一步中，您将添加一个新的页面（在 Flutter 中称为路由），显示收藏夹。您将学习如何在主页路线和新路由之间进行导航。\n在 Flutter 中，Navigator 管理着一个包含应用程序路由的堆栈。将一个路由推到 Navigator 的堆栈上，会将显示更新到该路由。从 Navigator 的堆栈中弹出一条路由，会将显示返回到之前的路由。\n接下来，您将在 _RandomWordsState 的 build 方法中为 AppBar 添加一个列表图标。当用户点击列表图标时，一个包含保存的收藏夹的新路由会被推送到 Navigator，显示图标。\n在 build 方法中添加图标及其对应的操作:\nclass _RandomWordsState extends State\u0026lt;RandomWords\u0026gt; { ... @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\u0026#39;Startup Name Generator\u0026#39;), actions: [ // NEW lines from here...  IconButton(icon: Icon(Icons.list), onPressed: _pushSaved), ], // ... to here.  ), home: RandomWords(), ); } ... } 提示：一些小组件属性会取一个小组件(child)，而其他属性，如 action，会取一组小组件(children), 如方括号([])所示。\n在 _RandomWordsState 类中添加一个 _pushSaved() 函数。\nvoid _pushSaved() { } 热重新加载应用程序。列表图标出现在应用栏中。点击它还没有任何作用，因为 _pushSaved 函数是空的。\n接下来，你将建立一条路由，并将其推送到 Navigator 的栈中。这个操作会改变屏幕以显示新的路由。新页面的内容是在 MaterialPageRoute 的构建器属性中以匿名函数的方式构建的。\n调用 Navigator.push，如下图所示，它将路由推送到 Navigator 的堆栈中。IDE 会抱怨无效代码，但你会在下一节中解决这个问题。\nvoid _pushSaved() { Navigator.of(context).push( ); } 接下来，你将添加 MaterialPageRoute 和它的构建器。现在，添加生成 ListTile 行的代码。ListTile 的 divideTiles() 方法在每个 ListTile 之间增加了水平间距。被划分的变量持有通过方便函数 toList() 转换为列表的最终行。\n添加代码，如下面的代码片段所示:\nvoid _pushSaved() { Navigator.of(context).push( MaterialPageRoute\u0026lt;void\u0026gt;( // NEW lines from here...  builder: (BuildContext context) { final tiles = _saved.map( (WordPair pair) { return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), ); }, ); final divided = ListTile.divideTiles( context: context, tiles: tiles, ).toList(); return Scaffold( appBar: AppBar( title: Text(\u0026#39;Saved Suggestions\u0026#39;), ), body: ListView(children: divided), ); }, // ...to here.  ), ); } } builder 属性返回一个 Scaffold，包含名为 SavedSuggestions 的新路由的应用栏。新路由的主体由一个包含 ListTiles 行的 ListView 组成。每一行都由一个分隔符隔开。\n热重载应用。将一些选择收藏起来，然后点击应用栏中的列表图标。新的路由出现，包含收藏夹。请注意，Navigator 在应用栏中增加了一个\u0026quot;返回\u0026quot;按钮。你不必明确地实现 Navigator.pop。点击\u0026quot;返回\u0026quot;按钮就可以返回到主路由。\niOS - Main route\niOS - Saved suggestions route\n遇到问题了？ 如果你的应用程序没有正确运行，那么你可以使用下面链接中的代码来回到正轨。\n lib/main.dart  使用主题改变用户界面 在这一步中，您将修改应用程序的主题。主题控制你的应用程序的外观和感觉。您可以使用默认主题，这取决于物理设备或模拟器，或者自定义主题以反映您的品牌。\n您可以通过配置 ThemeData 类轻松更改应用程序的主题。应用程序使用默认主题，但你会将应用程序的主色调改为白色。\n在 MyApp 类中更改颜色:\nclass MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Startup Name Generator\u0026#39;, theme: ThemeData( // Add the 3 lines from here...  primaryColor: Colors.white, ), // ... to here.  home: RandomWords(), ); } } 热重载应用。现在整个背景都是白色的，甚至应用栏也是白色的。\n作为一个练习，使用 ThemeData 来改变 UI 的其他方面。Material 库中的 Colors 类提供了许多你可以玩的颜色常量。热重载使得对 UI 的实验变得快速而简单。\nAndroid\niOS\n遇到问题了？ 如果你已经偏离了轨道，那么使用下面链接中的代码来查看最终应用的代码。\n= lib/main.dart\n做得很好！ 你写了一个交互式的 Flutter 应用，可以在 iOS 和 Android 上运行，具体做法如下\n 编写 Dart 代码。 使用热重载来加快开发周期。 实现一个有状态的 widget，为你的应用添加交互性。 创建途径并添加在原途径和新途径之间移动的逻辑。 学习如何使用主题改变你的应用程序的 UI 外观。  今后的步骤 从以下资源中了解更多关于 Flutter SDK 的信息。\n Flutter 中的布局 增加互动性教程 组件介绍 为 Android 开发者提供的 Flutter 针对 React Native 开发者的 Flutter Web 开发人员的 Flutter Flutter YouTube 频道  其他资源包括以下几点:\n 用 Flutter 构建本地移动应用 从 Java 到 Dart codelab Flutter cookbook 融入 Dart 的 Bootstrap：了解更多关于这门语言的信息  同时，与 Flutter 社区联系起来!\n"},"name":"编写你的第一个 Flutter 应用，第二部分","published":"2020-06-26T00:00:00+08:00","summary":"Flutter 是 Google 的 UI 工具包，用于从单一代码库中为手机、网页和桌面构建漂亮的、原生编译的应用程序。Flutter 可以与现有的代码一起使用，被世界各地的开发者和组织使用，并且是免费和开源的。","type":"entry","url":"https://ohmyweekly.github.io/notes/write-your-first-flutter-app-part-two/"},{"content":{"html":"\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch2 id=\"dart-help\"\u003e重要的概念\u003c/h2\u003e\n\u003cp\u003e与 Java 不同，Dart 没有关键字 \u0026ldquo;public\u0026rdquo;, \u0026ldquo;protected\u0026rdquo; 和 \u0026ldquo;private\u0026rdquo;。 如果标识符以下划线（\u003ccode\u003e_\u003c/code\u003e）开头，则它相对于库是私有的。 有关更多信息，参考\u003ca href=\"https://www.dartcn.com/guides/language/language-tour#%E5%BA%93%E5%92%8C%E5%8F%AF%E8%A7%81%E6%80%A7\"\u003e库和可见性\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"变量\"\u003e变量\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eBob\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 类型推断\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"kt\"\u003edynamic\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eBob\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 动态类型\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e  \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eBob\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 显式声明\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"默认值\"\u003e默认值\u003c/h3\u003e\n\u003cp\u003e未初始化的变量默认值是 \u003ccode\u003enull\u003c/code\u003e。即使变量是数字, 类型默认值也是 null, 因为在 Dart 中一切都是对象，数字类型也不例外。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003elineCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elineCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"final-和-const\"\u003efinal 和 const\u003c/h3\u003e\n\u003cp\u003e使用 \u003ccode\u003efinal\u003c/code\u003e 关键字声明的变量, 其值只能被设置一次, 使用 \u003ccode\u003econst\u003c/code\u003e 关键字声明的变量, 其值在编译时就已固定:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eBob\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 不使用类型注解\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003enickname\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eBobby\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAlice\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// Error: final 变量只能被设置一次\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003econst\u003c/code\u003e 声明一个在\u003cstrong\u003e编译\u003c/strong\u003e时就固定不变的值, 例如数字字面量、字符串字面量:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1000000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e              \u003cspan class=\"c1\"\u003e// 压力单位(dynes/cm2)\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eatm\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1.01325\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 一个标准大气压强\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"内置类型\"\u003e内置类型\u003c/h2\u003e\n\u003cp\u003eDart 语言支持以下内置类型:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e类型\u003c/th\u003e\n\u003cth align=\"left\"\u003e字面量\u003c/th\u003e\n\u003cth align=\"left\"\u003e对象\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eNumber\u003c/td\u003e\n\u003ctd align=\"left\"\u003e2⁶³ -1\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eString\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u0026lsquo;Hello\u0026rsquo;\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eBoolean\u003c/td\u003e\n\u003ctd align=\"left\"\u003etrue,false\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eList\u003c/td\u003e\n\u003ctd align=\"left\"\u003e[1,2,3]\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eSet\u003c/td\u003e\n\u003ctd align=\"left\"\u003e{\u0026lsquo;raku\u0026rsquo;,\u0026lsquo;perl\u0026rsquo;}\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eMap\u003c/td\u003e\n\u003ctd align=\"left\"\u003e{\u0026lsquo;lan\u0026rsquo;: \u0026lsquo;raku\u0026rsquo;}\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eRune\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\\u2665, \\u{1f600}\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eSymbol\u003c/td\u003e\n\u003ctd align=\"left\"\u003e#dadix, #bar\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n","text":"重要的概念 与 Java 不同，Dart 没有关键字 \u0026ldquo;public\u0026rdquo;, \u0026ldquo;protected\u0026rdquo; 和 \u0026ldquo;private\u0026rdquo;。 如果标识符以下划线（_）开头，则它相对于库是私有的。 有关更多信息，参考库和可见性。\n变量 var name = \u0026#39;Bob\u0026#39;; // 类型推断  dynamic name = \u0026#39;Bob\u0026#39;; // 动态类型 String name = \u0026#39;Bob\u0026#39;; // 显式声明 默认值 未初始化的变量默认值是 null。即使变量是数字, 类型默认值也是 null, 因为在 Dart 中一切都是对象，数字类型也不例外。\nint lineCount; assert(lineCount == null); final 和 const 使用 final 关键字声明的变量, 其值只能被设置一次, 使用 const 关键字声明的变量, 其值在编译时就已固定:\nfinal name = \u0026#39;Bob\u0026#39;; // 不使用类型注解 final String nickname = \u0026#39;Bobby\u0026#39;; name = \u0026#39;Alice\u0026#39;; // Error: final 变量只能被设置一次 const 声明一个在编译时就固定不变的值, 例如数字字面量、字符串字面量:\nconst bar = 1000000; // 压力单位(dynes/cm2) const double atm = 1.01325 * bar; // 一个标准大气压强 内置类型 Dart 语言支持以下内置类型:\n   类型 字面量 对象     Number 2⁶³ -1    String \u0026lsquo;Hello\u0026rsquo;    Boolean true,false    List [1,2,3]    Set {\u0026lsquo;raku\u0026rsquo;,\u0026lsquo;perl\u0026rsquo;}    Map {\u0026lsquo;lan\u0026rsquo;: \u0026lsquo;raku\u0026rsquo;}    Rune \\u2665, \\u{1f600}    Symbol #dadix, #bar     "},"name":"Dart 入门","published":"2020-06-25T00:00:00+08:00","summary":"Dart入门指南。","type":"entry","url":"https://ohmyweekly.github.io/notes/dart/"},{"content":{"html":"\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e这个代码实验室教你如何使用实现 \u003ca href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\"\u003eIterable\u003c/a\u003e类的集合-例如 \u003ca href=\"https://api.dart.dev/stable/dart-core/List-class.html\"\u003eList\u003c/a\u003e和 \u003ca href=\"https://api.dart.dev/stable/dart-core/Set-class.html\"\u003eSet\u003c/a\u003e。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。\u003c/p\u003e\n\u003cp\u003e使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\u003c/p\u003e\n\u003cp\u003e要想从这个 codelab 中获得最大的收获，你应该具备基本的 \u003ca href=\"https://dart.dev/samples\"\u003eDart 语法知识\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e本课程包括以下内容。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如何读取一个 Iterable 的元素。\u003c/li\u003e\n\u003cli\u003e如何检查一个 Iterable 的元素是否满足一个条件。\u003c/li\u003e\n\u003cli\u003e如何过滤一个 Iterable 的内容。\u003c/li\u003e\n\u003cli\u003e如何将一个 Iterable 的内容映射到不同的值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e估计完成这个代码实验所需的时间: 60分钟。\u003c/p\u003e\n\u003ch2 id=\"什么是集合\"\u003e什么是集合?\u003c/h2\u003e\n\u003cp\u003e集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。\u003c/p\u003e\n\u003cp\u003e集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://api.dart.dev/stable/dart-core/List-class.html\"\u003eList\u003c/a\u003e: 用来通过索引读取元素。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://api.dart.dev/stable/dart-core/Set-class.html\"\u003eSet\u003c/a\u003e: 用于包含只能出现一次的元素。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://api.dart.dev/stable/dart-core/Map-class.html\"\u003eMap\u003c/a\u003e：用于通过键来读取元素。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"什么是iterable\"\u003e什么是Iterable?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eIterable\u003c/code\u003e 是一个元素的集合，它可以被依次访问。\u003c/p\u003e\n\u003cp\u003e在 Dart 中，\u003ccode\u003eIterable\u003c/code\u003e 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 \u003ccode\u003eList\u003c/code\u003e 或 \u003ccode\u003eSet\u003c/code\u003e 来创建一个新的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eList\u003c/code\u003e 和 \u003ccode\u003eSet\u003c/code\u003e 都是 \u003ccode\u003eIterable\u003c/code\u003e，所以它们和 \u003ccode\u003eIterable\u003c/code\u003e 类有相同的方法和属性。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMap\u003c/code\u003e 在内部使用不同的数据结构，这取决于它的实现。例如，\u003ca href=\"https://api.dart.dev/stable/dart-collection/HashMap-class.html\"\u003eHashMap\u003c/a\u003e 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 \u003ccode\u003eMap\u003c/code\u003e 的 \u003ccode\u003eentries\u003c/code\u003e 或 \u003ccode\u003evalues\u003c/code\u003e 属性，\u003ccode\u003eMap\u003c/code\u003e 的元素也可以作为 \u003ccode\u003eIterable\u003c/code\u003e 对象读取。\u003c/p\u003e\n\u003cp\u003e这个例子显示了一个 \u003ccode\u003eint\u003c/code\u003e 的 \u003ccode\u003eList\u003c/code\u003e，它也是一个 \u003ccode\u003eint\u003c/code\u003e 的 \u003ccode\u003eIterable\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e与 \u003ccode\u003eList\u003c/code\u003e 的区别在于，使用 \u003ccode\u003eIterable\u003c/code\u003e，你无法保证按索引读取元素的效率。\u003ccode\u003eIterable\u003c/code\u003e 与 \u003ccode\u003eList\u003c/code\u003e 相比，没有 \u003ccode\u003e[]\u003c/code\u003e 操作符。\u003c/p\u003e\n\u003cp\u003e例如，考虑以下代码，这是\u003cstrong\u003e无效的\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你用 \u003ccode\u003e[]\u003c/code\u003e 读取元素，编译器会告诉你 \u003ccode\u003e'[]'\u003c/code\u003e 这个运算符没有为 \u003ccode\u003eIterable\u003c/code\u003e 类定义，这意味着在这种情况下你不能使用 \u003ccode\u003e[index]\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e你可以用 \u003ccode\u003eelementAt()\u003c/code\u003e 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eelementAt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e继续下一节，了解更多关于如何访问 \u003ccode\u003eIterable\u003c/code\u003e 的元素。\u003c/p\u003e\n\u003ch2 id=\"读取元素\"\u003e读取元素\u003c/h2\u003e\n\u003cp\u003e你可以使用 \u003ccode\u003efor-in\u003c/code\u003e 循环，依次读取一个迭代元素。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-for-in-循环\"\u003e例子: 使用 for-in 循环\u003c/h3\u003e\n\u003cp\u003e下面的例子展示了如何使用 \u003ccode\u003efor-in\u003c/code\u003e 循环读取元素。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eSalad\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ePopcorn\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eToast\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在幕后，\u003ccode\u003efor-in\u003c/code\u003e 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 \u003ccode\u003efor-in\u003c/code\u003e 更容易阅读和理解，而且不容易出错。\u003c/p\u003e\n\u003cp\u003e关键术语:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIterable\u003c/strong\u003e: Dart \u003ca href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\"\u003eIterable\u003c/a\u003e 类。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIterator\u003c/strong\u003e: \u003ccode\u003efor-in\u003c/code\u003e 用来从一个 Iterable 对象中读取元素的对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efor-in\u003c/code\u003e 循环: 从一个 Iterable 对象中依次读取元素的简单方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"例子使用第一个和最后一个元素\"\u003e例子：使用第一个和最后一个元素\u003c/h3\u003e\n\u003cp\u003e在某些情况下，你只想访问一个 \u003ccode\u003eIterable\u003c/code\u003e 的第一个或最后一个元素。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003eIterable\u003c/code\u003e 类中，你不能直接访问元素，所以你不能调用 \u003ccode\u003eiterable[0]\u003c/code\u003e 来访问第一个元素。相反，你可以使用 \u003ccode\u003efirst\u003c/code\u003e，它可以获取第一个元素。\u003c/p\u003e\n\u003cp\u003e另外，使用 Iterable 类，你不能使用操作符 \u003ccode\u003e[]\u003c/code\u003e 来访问最后一个元素，但是你可以使用 \u003ccode\u003elast\u003c/code\u003e 属性。\u003c/p\u003e\n\u003cp\u003e因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 \u003ccode\u003elast\u003c/code\u003e 可能会很慢。在一个空的 \u003ccode\u003eIterable\u003c/code\u003e 上使用 \u003ccode\u003efirst\u003c/code\u003e 或 \u003ccode\u003elast\u003c/code\u003e 会导致一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIterable\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eSalad\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ePopcorn\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eToast\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eThe first element is \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eThe last element is \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，你看到了如何使用 \u003ccode\u003efirst\u003c/code\u003e 和 \u003ccode\u003elast\u003c/code\u003e 来获得一个 \u003ccode\u003eIterable\u003c/code\u003e 的第一个和最后一个元素。也可以找到满足条件的第一个元素。下一节将展示如何使用名为 \u003ccode\u003efirstWhere()\u003c/code\u003e 的方法来实现这一目标。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-firstwhere\"\u003e例子: 使用 firstWhere()\u003c/h3\u003e\n\u003cp\u003e你已经看到，你可以依次访问一个 \u003ccode\u003eIterable\u003c/code\u003e 的元素，你可以很容易地得到第一个或最后一个元素。\u003c/p\u003e\n\u003cp\u003e现在，你要学习如何使用 \u003ccode\u003efirstWhere()\u003c/code\u003e 来寻找满足某些条件的第一个元素。这个方法需要你传递一个谓词，它是一个函数，如果输入满足一定的条件就返回 true。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiterable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e例如，如果你想找到第一个超过 5 个字符的 \u003ccode\u003eString\u003c/code\u003e，你必须传递一个当元素大小大于 5 时返回 true 的谓词。\u003c/p\u003e\n\u003cp\u003e运行下面的例子，看看 \u003ccode\u003efirstWhere()\u003c/code\u003e 是如何工作的。你认为所有的函数都会给出相同的结果吗？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003epredicate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eSalad\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ePopcorn\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eToast\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLasagne\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// You can find with a simple expression:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Or try using a function block:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Or even pass in a function reference:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epredicate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// You can also use an `orElse` function in case no value is found!\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eelement4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nl\"\u003eorElse:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eNone!\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，你可以看到三种不同的方式来写一个谓词。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e作为一个表达式\u003c/strong\u003e: 测试代码中有一行使用了箭头语法(\u003ccode\u003e=\u0026gt;\u003c/code\u003e)。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e作为一个块\u003c/strong\u003e: 测试代码在括号和返回语句之间有多行。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e作为一个函数\u003c/strong\u003e: 测试代码在一个外部函数中，作为参数传递给 \u003ccode\u003efirstWhere()\u003c/code\u003e 方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e没有正确或错误的方式。使用最适合你的方式，并且让你的代码更容易阅读和理解。\u003c/p\u003e\n\u003cp\u003e在这个例子中，\u003ccode\u003efirstWhereWithOrElse()\u003c/code\u003e 调用 \u003ccode\u003efirstWhere()\u003c/code\u003e 时，使用了可选的命名参数 \u003ccode\u003eorElse\u003c/code\u003e，它在没有找到元素时提供了一个替代方案。在这种情况下，返回文本 \u0026ldquo;None!\u0026quot;，因为没有元素满足提供的条件。\u003c/p\u003e\n\u003cp\u003e注意：如果没有元素满足测试谓词，并且没有提供 \u003ccode\u003eorElse\u003c/code\u003e 参数，那么 \u003ccode\u003efirstWhere()\u003c/code\u003e 会抛出一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e快速回顾。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIterable\u003c/code\u003e 的元素必须按顺序访问。\u003c/li\u003e\n\u003cli\u003e迭代所有元素的最简单方法是使用 \u003ccode\u003efor-in\u003c/code\u003e 循环。\u003c/li\u003e\n\u003cli\u003e你可以使用 \u003ccode\u003efirst\u003c/code\u003e 和 \u003ccode\u003elast\u003c/code\u003e getters 来获取第一个和最后一个元素。\u003c/li\u003e\n\u003cli\u003e你也可以用 \u003ccode\u003efirstWhere()\u003c/code\u003e 找到满足条件的第一个元素。\u003c/li\u003e\n\u003cli\u003e你可以把测试谓词写成表达式、块或函数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关键术语。\u003c/p\u003e\n\u003cp\u003e谓词: 当某个条件被满足时，返回 \u003ccode\u003etrue\u003c/code\u003e 的函数。\u003c/p\u003e\n\u003ch3 id=\"练习-练习写一个测试谓词\"\u003e练习: 练习写一个测试谓词\u003c/h3\u003e\n\u003cp\u003e下面的练习是一个失败的单元测试，其中包含一个部分完整的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 \u003ccode\u003emain()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这个练习介绍了 \u003ccode\u003esingleWhere()\u003c/code\u003e 这个方法的工作原理类似于 \u003ccode\u003efirstWhere()\u003c/code\u003e，但在这种情况下，它只期望 \u003ccode\u003eIterable\u003c/code\u003e 中的一个元素满足谓词。如果 \u003ccode\u003eIterable\u003c/code\u003e 中超过一个或没有元素满足谓词条件，那么该方法会抛出一个 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e 异常。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esingleWhere()\u003c/code\u003e 对整个 \u003ccode\u003eIterable\u003c/code\u003e 进行步进，直到最后一个元素，如果  \u003ccode\u003eIterable\u003c/code\u003e 是无限的或包含一个大的元素集合，这可能会引起问题。\u003c/p\u003e\n\u003cp\u003e你的目标是实现满足以下条件的 \u003ccode\u003esingleWhere()\u003c/code\u003e 谓词。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e元素包含字符 \u0026lsquo;a\u0026rsquo;。\u003c/li\u003e\n\u003cli\u003e该元素以字符 \u0026lsquo;M\u0026rsquo; 开头。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e测试数据中的所有元素都是\u003ca href=\"https://api.dart.dev/stable/dart-core/String-class.html\"\u003e字符串\u003c/a\u003e，你可以查看类文档以获得帮助。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003esingleWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esingleWhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estartsWith\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eM\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"检查条件\"\u003e检查条件\u003c/h2\u003e\n\u003cp\u003e在使用 \u003ccode\u003eIterable\u003c/code\u003e 时，有时你需要验证一个集合的所有元素是否满足某些条件。\u003c/p\u003e\n\u003cp\u003e你可能会想用 \u003ccode\u003efor-in\u003c/code\u003e 循环来写一个解决方案，比如这个:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然而，你可以使用 \u003ccode\u003eevery()\u003c/code\u003e 方法实现同样的目的:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用 \u003ccode\u003eevery()\u003c/code\u003e 方法可以使代码更易读、更紧凑、更不容易出错。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-any-和-every\"\u003e例子: 使用 any() 和 every()\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eIterable\u003c/code\u003e 类提供了两个可以用来验证条件的方法。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eany()\u003c/code\u003e: 如果至少有一个元素满足条件，则返回 true。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eevery()\u003c/code\u003e: 如果所有元素都满足条件，则返回 true。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e运行这个练习来看看它们的作用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eSalad\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ePopcorn\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eToast\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAt least one element contains \u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAll elements have length \u0026gt;= 5\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003eany()\u003c/code\u003e 验证了至少一个元素包含字符 a，\u003ccode\u003eevery()\u003c/code\u003e 验证了所有元素的长度等于或大于 5。\u003c/p\u003e\n\u003cp\u003e运行代码后，尝试更改 \u003ccode\u003eany()\u003c/code\u003e 的谓词，使其返回 false:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eZ\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAt least one element contains \u0026#34;Z\u0026#34;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eNo element contains \u0026#34;Z\u0026#34;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你也可以使用 \u003ccode\u003eany()\u003c/code\u003e 来验证一个 \u003ccode\u003eIterable\u003c/code\u003e 中没有元素满足某个条件。\u003c/p\u003e\n\u003ch3 id=\"练习-验证一个-iterable-是否满足一个条件\"\u003e练习： 验证一个 Iterable 是否满足一个条件\u003c/h3\u003e\n\u003cp\u003e下面的练习提供了使用前面例子中描述的 \u003ccode\u003eany()\u003c/code\u003e 和 \u003ccode\u003eevery()\u003c/code\u003e 方法的练习。在本例中，你的工作对象是一组用户，由具有成员字段 \u003ccode\u003eage\u003c/code\u003e 的 \u003ccode\u003eUser\u003c/code\u003e 对象表示。\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003eany()\u003c/code\u003e 和 \u003ccode\u003eevery()\u003c/code\u003e 实现两个函数。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第1部分：实现 \u003ccode\u003eanyUserUnder18()\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e如果至少有一个用户是17岁或更小，则返回 true。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e第2部分：实现 \u003ccode\u003eeveryUserOver13()\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e如果所有用户都是14岁或以上，则返回 true。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eanyUserUnder18\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"m\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eeveryUserOver13\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eUser\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e快速回顾:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e虽然你可以使用 \u003ccode\u003efor-in\u003c/code\u003e 循环来检查条件，但还有更好的方法。\u003c/li\u003e\n\u003cli\u003e方法 \u003ccode\u003eany()\u003c/code\u003e 可以让你检查任何元素是否满足条件。\u003c/li\u003e\n\u003cli\u003e方法 \u003ccode\u003eevery()\u003c/code\u003e 可以让你验证所有元素是否满足条件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"过滤\"\u003e过滤\u003c/h2\u003e\n\u003cp\u003e前面的章节介绍了 \u003ccode\u003efirstWhere()\u003c/code\u003e 或 \u003ccode\u003esingleWhere()\u003c/code\u003e 等方法，这些方法可以帮助你找到满足某个谓词的元素。\u003c/p\u003e\n\u003cp\u003e但是如果你想找到满足某个条件的所有元素呢？你可以使用 \u003ccode\u003ewhere()\u003c/code\u003e 方法来实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEven\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003enumbers\u003c/code\u003e 包含一个有多个 \u003ccode\u003eint\u003c/code\u003e 值的 \u003ccode\u003eIterable\u003c/code\u003e，\u003ccode\u003ewhere()\u003c/code\u003e 可以找到所有偶数的数字。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ewhere()\u003c/code\u003e 的输出是另一个 \u003ccode\u003eIterable\u003c/code\u003e，你可以用它来迭代它或应用其他 \u003ccode\u003eIterable\u003c/code\u003e 方法。在下一个例子中，\u003ccode\u003ewhere()\u003c/code\u003e 的输出直接在 \u003ccode\u003efor-in\u003c/code\u003e 循环中使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEven\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"s1\"\u003e is even\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"例子-使用-where\"\u003e例子: 使用 where()\u003c/h3\u003e\n\u003cp\u003e运行这个例子，看看如何将 \u003ccode\u003ewhere()\u003c/code\u003e 与其他方法如 \u003ccode\u003eany()\u003c/code\u003e 一起使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEven\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"s1\"\u003e is even.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisNegative\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eevenNumbers contains negative numbers.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// If no element satisfies the predicate, the output is empty.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003elargeNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eevenNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elargeNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003elargeNumbers is empty!\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003ewhere()\u003c/code\u003e 用于查找所有偶数，然后用 \u003ccode\u003eany()\u003c/code\u003e 检查结果是否包含负数。\u003c/p\u003e\n\u003cp\u003e在本例的后面，再次使用 \u003ccode\u003ewhere()\u003c/code\u003e 来查找所有大于1000的数字，由于没有，结果是一个空的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e注意：如果没有元素满足 \u003ccode\u003ewhere()\u003c/code\u003e 中的谓词，那么该方法返回一个空的 \u003ccode\u003eIterable\u003c/code\u003e。与 \u003ccode\u003esingleWhere()\u003c/code\u003e 或 \u003ccode\u003efirstWhere()\u003c/code\u003e 不同，\u003ccode\u003ewhere()\u003c/code\u003e 不会抛出 \u003ca href=\"https://api.dart.dev/stable/dart-core/StateError-class.html\"\u003eStateError\u003c/a\u003e 异常。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-takewhile\"\u003e例子: 使用 takeWhile\u003c/h3\u003e\n\u003cp\u003e方法 \u003ccode\u003etakeWhile()\u003c/code\u003e 和 \u003ccode\u003eskipWhile()\u003c/code\u003e 也可以帮助你从一个 \u003ccode\u003eIterable\u003c/code\u003e 中过滤元素。\u003c/p\u003e\n\u003cp\u003e运行这个例子，看看 \u003ccode\u003etakeWhile()\u003c/code\u003e 和 \u003ccode\u003eskipWhile()\u003c/code\u003e 如何分割一个包含数字的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbersUntilZero\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etakeWhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eNumbers until 0: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumbersUntilZero\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbersAfterZero\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eskipWhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eNumbers after 0: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumbersAfterZero\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003eNumbers until 0: (1, 3, -2)\nNumbers after 0: (0, 4, 5)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003etakeWhile()\u003c/code\u003e 返回一个 \u003ccode\u003eIterable\u003c/code\u003e，它包含了通往满足谓词的元素的所有元素。另一方面， \u003ccode\u003eskipWhile()\u003c/code\u003e 返回一个 \u003ccode\u003eIterable\u003c/code\u003e，同时跳过满足谓词的元素之前的所有元素。请注意，满足谓词的元素也会被包含在内。\u003c/p\u003e\n\u003cp\u003e运行该示例后，将 \u003ccode\u003etakeWhile()\u003c/code\u003e 改为取元素，直到到达第一个负数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbersUntilNegative\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etakeWhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisNegative\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，条件 \u003ccode\u003enumber.isNegative\u003c/code\u003e 是用 \u003ccode\u003e!\u003c/code\u003e 否定的。\u003c/p\u003e\n\u003ch3 id=\"练习-从列表中过滤元素\"\u003e练习: 从列表中过滤元素\u003c/h3\u003e\n\u003cp\u003e下面的练习提供了使用上一练习中的 \u003ccode\u003eUser\u003c/code\u003e 类的 \u003ccode\u003ewhere()\u003c/code\u003e 方法的练习。\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003ewhere()\u003c/code\u003e 实现两个函数。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第1部分：实现 \u003ccode\u003efilterUnder21()\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e返回一个包含所有21岁以上用户的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e第2部分：实现 \u003ccode\u003efindShortNamed()\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e返回一个包含所有名字长度为 3 或更少的用户的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efilterUnder21\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efindShortNamed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eUser\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e快速回顾:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用 \u003ccode\u003ewhere()\u003c/code\u003e 过滤一个 \u003ccode\u003eIterable\u003c/code\u003e 的元素。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewhere()\u003c/code\u003e 的输出是另一个 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003etakeWhile()\u003c/code\u003e 和 \u003ccode\u003eskipWhile()\u003c/code\u003e 来获取元素，直到满足一个条件或之后。\u003c/li\u003e\n\u003cli\u003e这些方法的输出可以是一个空的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"map\"\u003eMap\u003c/h2\u003e\n\u003cp\u003e通过 \u003ccode\u003emap()\u003c/code\u003e 方法映射 \u003ccode\u003eIterables\u003c/code\u003e，你可以在每个元素上应用一个函数，用一个新的元素替换每个元素。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"m\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，\u003ccode\u003eIterable\u003c/code\u003e 数字的每个元素都被乘以 10。\u003c/p\u003e\n\u003cp\u003e你也可以使用 \u003ccode\u003emap()\u003c/code\u003e 将一个元素转换为不同的对象-例如，将所有 \u003ccode\u003eint\u003c/code\u003e 转换为 \u003ccode\u003eString\u003c/code\u003e，在下面的例子中可以看到。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意：\u003ccode\u003emap()\u003c/code\u003e 返回一个懒惰的 \u003ccode\u003eIterable\u003c/code\u003e，这意味着只有在元素被迭代时才会调用所提供的函数。\u003c/p\u003e\n\u003ch3 id=\"例子-使用-map-改变元素\"\u003e例子: 使用 map 改变元素\u003c/h3\u003e\n\u003cp\u003e运行这个例子，看看如何使用 \u003ccode\u003emap()\u003c/code\u003e 将一个 \u003ccode\u003eIterable\u003c/code\u003e 中的所有元素乘以2，你认为输出会是什么？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003enumbersByTwo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eNumbers: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003enumbersByTwo\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"练习-映射到不同类型\"\u003e练习: 映射到不同类型\u003c/h3\u003e\n\u003cp\u003e在前面的例子中，你把一个 \u003ccode\u003eIterable\u003c/code\u003e 的元素乘以2，输入和输出都是 \u003ccode\u003eint\u003c/code\u003e 的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在这个练习中，你的代码接收一个 \u003ccode\u003eUser\u003c/code\u003e的 \u003ccode\u003eIterable\u003c/code\u003e，你需要返回一个包含用户名和年龄的字符串的 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eIterable\u003c/code\u003e 中的每个字符串必须遵循这样的格式。\u003ccode\u003e'{name} is {age}'\u003c/code\u003e-例如 \u003ccode\u003e'Alice is 21'\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egetNameAndAges\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e is \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eUser\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e快速回顾:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emap()\u003c/code\u003e 将一个函数应用于一个 \u003ccode\u003eIterable\u003c/code\u003e 的所有元素。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emap()\u003c/code\u003e 的输出是另一个 \u003ccode\u003eIterable\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e在 \u003ccode\u003eIterable\u003c/code\u003e 被迭代之前，函数不会被计算。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"练习-把所有的东西放在一起\"\u003e练习: 把所有的东西放在一起\u003c/h2\u003e\n\u003cp\u003e现在是练习所学知识的时候了，在最后一个练习中。\u003c/p\u003e\n\u003cp\u003e这个练习提供了类 \u003ccode\u003eEmailAddress\u003c/code\u003e，它有一个构造函数，接收一个字符串。另一个提供的函数是 \u003ccode\u003eisValidEmailAddress()\u003c/code\u003e，它测试一个电子邮件地址是否有效。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e构造函数/函数\u003c/th\u003e\n\u003cth\u003e类型签名\u003c/th\u003e\n\u003cth align=\"left\"\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eEmailAddress()\u003c/td\u003e\n\u003ctd\u003eEmailAddress(String address)\u003c/td\u003e\n\u003ctd align=\"left\"\u003e为指定的地址创建一个 EmailAddress。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eisValidEmailAddress()\u003c/td\u003e\n\u003ctd\u003ebool isValidEmailAddress(EmailAddress)\u003c/td\u003e\n\u003ctd align=\"left\"\u003e如果提供的 EmailAddress 有效，返回 true。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e编写以下代码。\u003c/p\u003e\n\u003cp\u003e第1部分：实现 \u003ccode\u003eparseEmailAddresses()\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写函数 \u003ccode\u003eparseEmailAddresses()\u003c/code\u003e，它接收一个包含电子邮件地址的 \u003ccode\u003eIterable\u0026lt;String\u0026gt;\u003c/code\u003e，并返回一个 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用方法 \u003ccode\u003emap()\u003c/code\u003e 从 \u003ccode\u003eString\u003c/code\u003e 映射到 \u003ccode\u003eEmailAddress\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用构造函数 \u003ccode\u003eEmailAddress(String)\u003c/code\u003e 创建 \u003ccode\u003eEmailAddress\u003c/code\u003e 对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第二部分：实现 \u003ccode\u003eanyInvalidEmailAddress()\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写函数 \u003ccode\u003eanyInvalidEmailAddress()\u003c/code\u003e，它接收一个 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e，并在 \u003ccode\u003eIterable\u003c/code\u003e 中的任何 \u003ccode\u003eEmailAddress\u003c/code\u003e 无效时返回 true。\u003c/li\u003e\n\u003cli\u003e使用方法 \u003ccode\u003eany()\u003c/code\u003e 和提供的函 \u003ccode\u003eisValidEmailAddress()\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第3部分：实现 \u003ccode\u003evalidEmailAddresses()\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e编写函数 \u003ccode\u003evalidEmailAddresses()\u003c/code\u003e，它接收一个 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e 并返回另一个只包含有效地址的 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用方法 \u003ccode\u003ewhere()\u003c/code\u003e 来过滤 \u003ccode\u003eIterable\u0026lt;EmailAddress\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e使用提供的函数 \u003ccode\u003eisValidEmailAddress()\u003c/code\u003e 来评估一个 \u003ccode\u003eEmailAddress\u003c/code\u003e 是否有效。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eparseEmailAddresses\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eanyInvalidEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eemails\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eemails\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eisValidEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evalidEmailAddresses\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eemails\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eemails\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eisValidEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eEmailAddress\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"kd\"\u003eoperator\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eidentical\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eother\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003eEmailAddress\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\n              \u003cspan class=\"n\"\u003eruntimeType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eruntimeType\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\n              \u003cspan class=\"n\"\u003eaddress\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003ehashCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashCode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eoverride\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eEmailAddress{address: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eaddress\u003c/span\u003e\u003cspan class=\"s1\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"下一步是什么\"\u003e下一步是什么?\u003c/h2\u003e\n\u003cp\u003e恭喜你，你完成了 codelab 的学习! 如果你想了解更多，这里有一些下一步的建议。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e玩玩 \u003ca href=\"https://dartpad.dev/\"\u003eDartPad\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e试试另一个\u003ca href=\"https://dart.dev/codelabs\"\u003e代码实验\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e阅读 \u003ca href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\"\u003eIterable API\u003c/a\u003e 参考资料，了解本 codelab 未涉及的方法。\u003c/li\u003e\n\u003c/ul\u003e\n","text":"这个代码实验室教你如何使用实现 Iterable类的集合-例如 List和 Set。迭代类是各种 Dart 应用程序的基本构建模块，你可能已经在使用它们，甚至没有注意到。这个代码实验室将帮助你充分利用它们。\n使用嵌入式 DartPad 编辑器，你可以通过运行示例代码和完成练习来测试你的知识。\n要想从这个 codelab 中获得最大的收获，你应该具备基本的 Dart 语法知识。\n本课程包括以下内容。\n 如何读取一个 Iterable 的元素。 如何检查一个 Iterable 的元素是否满足一个条件。 如何过滤一个 Iterable 的内容。 如何将一个 Iterable 的内容映射到不同的值。  估计完成这个代码实验所需的时间: 60分钟。\n什么是集合? 集合是代表一组对象的对象，这些对象称为元素。迭代元素是集合的一种。\n集合可以是空的，也可以包含许多元素。根据不同的目的，集合可以有不同的结构和实现。这些是一些最常见的集合类型:\n List: 用来通过索引读取元素。 Set: 用于包含只能出现一次的元素。 Map：用于通过键来读取元素。  什么是Iterable? Iterable 是一个元素的集合，它可以被依次访问。\n在 Dart 中，Iterable 是一个抽象类，这意味着你不能直接实例化它。然而，你可以通过创建一个新的 List 或 Set 来创建一个新的 Iterable。\nList 和 Set 都是 Iterable，所以它们和 Iterable 类有相同的方法和属性。\nMap 在内部使用不同的数据结构，这取决于它的实现。例如，HashMap 使用了一个哈希表，其中的元素(也称为值)是通过一个键获得的。通过使用 Map 的 entries 或 values 属性，Map 的元素也可以作为 Iterable 对象读取。\n这个例子显示了一个 int 的 List，它也是一个 int 的 Iterable:\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; 与 List 的区别在于，使用 Iterable，你无法保证按索引读取元素的效率。Iterable 与 List 相比，没有 [] 操作符。\n例如，考虑以下代码，这是无效的:\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; int value = iterable[1]; 如果你用 [] 读取元素，编译器会告诉你 '[]' 这个运算符没有为 Iterable 类定义，这意味着在这种情况下你不能使用 [index]。\n你可以用 elementAt() 来读取元素，它可以遍历迭代的元素，直到它到达那个位置。\nIterable\u0026lt;int\u0026gt; iterable = [1, 2, 3]; int value = iterable.elementAt(1); 继续下一节，了解更多关于如何访问 Iterable 的元素。\n读取元素 你可以使用 for-in 循环，依次读取一个迭代元素。\n例子: 使用 for-in 循环 下面的例子展示了如何使用 for-in 循环读取元素。\nvoid main() { var iterable = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; for (var element in iterable) { print(element); } } 在幕后，for-in 循环使用了一个迭代器。然而，你很少看到直接使用迭代器 API，因为 for-in 更容易阅读和理解，而且不容易出错。\n关键术语:\n Iterable: Dart Iterable 类。 Iterator: for-in 用来从一个 Iterable 对象中读取元素的对象。 for-in 循环: 从一个 Iterable 对象中依次读取元素的简单方法。  例子：使用第一个和最后一个元素 在某些情况下，你只想访问一个 Iterable 的第一个或最后一个元素。\n在 Iterable 类中，你不能直接访问元素，所以你不能调用 iterable[0] 来访问第一个元素。相反，你可以使用 first，它可以获取第一个元素。\n另外，使用 Iterable 类，你不能使用操作符 [] 来访问最后一个元素，但是你可以使用 last 属性。\n因为访问一个 Iterable 的最后一个元素需要踏过所有其他元素，所以 last 可能会很慢。在一个空的 Iterable 上使用 first 或 last 会导致一个 StateError。\nvoid main() { Iterable iterable = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; print(\u0026#39;The first element is ${iterable.first}\u0026#39;); print(\u0026#39;The last element is ${iterable.last}\u0026#39;); } 在这个例子中，你看到了如何使用 first 和 last 来获得一个 Iterable 的第一个和最后一个元素。也可以找到满足条件的第一个元素。下一节将展示如何使用名为 firstWhere() 的方法来实现这一目标。\n例子: 使用 firstWhere() 你已经看到，你可以依次访问一个 Iterable 的元素，你可以很容易地得到第一个或最后一个元素。\n现在，你要学习如何使用 firstWhere() 来寻找满足某些条件的第一个元素。这个方法需要你传递一个谓词，它是一个函数，如果输入满足一定的条件就返回 true。\nString element = iterable.firstWhere((element) =\u0026gt; element.length \u0026gt; 5); 例如，如果你想找到第一个超过 5 个字符的 String，你必须传递一个当元素大小大于 5 时返回 true 的谓词。\n运行下面的例子，看看 firstWhere() 是如何工作的。你认为所有的函数都会给出相同的结果吗？\nbool predicate(String element) { return element.length \u0026gt; 5; } main() { var items = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;, \u0026#39;Lasagne\u0026#39;]; // You can find with a simple expression:  var element1 = items.firstWhere((element) =\u0026gt; element.length \u0026gt; 5); print(element1); // Or try using a function block:  var element2 = items.firstWhere((element) { return element.length \u0026gt; 5; }); print(element2); // Or even pass in a function reference:  var element3 = items.firstWhere(predicate); print(element3); // You can also use an `orElse` function in case no value is found!  var element4 = items.firstWhere( (element) =\u0026gt; element.length \u0026gt; 10, orElse: () =\u0026gt; \u0026#39;None!\u0026#39;, ); print(element4); } 在这个例子中，你可以看到三种不同的方式来写一个谓词。\n 作为一个表达式: 测试代码中有一行使用了箭头语法(=\u0026gt;)。 作为一个块: 测试代码在括号和返回语句之间有多行。 作为一个函数: 测试代码在一个外部函数中，作为参数传递给 firstWhere() 方法。  没有正确或错误的方式。使用最适合你的方式，并且让你的代码更容易阅读和理解。\n在这个例子中，firstWhereWithOrElse() 调用 firstWhere() 时，使用了可选的命名参数 orElse，它在没有找到元素时提供了一个替代方案。在这种情况下，返回文本 \u0026ldquo;None!\u0026quot;，因为没有元素满足提供的条件。\n注意：如果没有元素满足测试谓词，并且没有提供 orElse 参数，那么 firstWhere() 会抛出一个 StateError。\n快速回顾。\n Iterable 的元素必须按顺序访问。 迭代所有元素的最简单方法是使用 for-in 循环。 你可以使用 first 和 last getters 来获取第一个和最后一个元素。 你也可以用 firstWhere() 找到满足条件的第一个元素。 你可以把测试谓词写成表达式、块或函数。  关键术语。\n谓词: 当某个条件被满足时，返回 true 的函数。\n练习: 练习写一个测试谓词 下面的练习是一个失败的单元测试，其中包含一个部分完整的代码片段。你的任务是通过编写代码使测试通过来完成练习。你不需要实现 main()。\n这个练习介绍了 singleWhere() 这个方法的工作原理类似于 firstWhere()，但在这种情况下，它只期望 Iterable 中的一个元素满足谓词。如果 Iterable 中超过一个或没有元素满足谓词条件，那么该方法会抛出一个 StateError 异常。\nsingleWhere() 对整个 Iterable 进行步进，直到最后一个元素，如果 Iterable 是无限的或包含一个大的元素集合，这可能会引起问题。\n你的目标是实现满足以下条件的 singleWhere() 谓词。\n 元素包含字符 \u0026lsquo;a\u0026rsquo;。 该元素以字符 \u0026lsquo;M\u0026rsquo; 开头。  测试数据中的所有元素都是字符串，你可以查看类文档以获得帮助。\nString singleWhere(Iterable\u0026lt;String\u0026gt; items) { return items.singleWhere((element) =\u0026gt; element.startsWith(\u0026#39;M\u0026#39;) \u0026amp;\u0026amp; element.contains(\u0026#39;a\u0026#39;)); } 检查条件 在使用 Iterable 时，有时你需要验证一个集合的所有元素是否满足某些条件。\n你可能会想用 for-in 循环来写一个解决方案，比如这个:\nfor (var item in items) { if (item.length \u0026lt; 5) { return false; } } return true; 然而，你可以使用 every() 方法实现同样的目的:\nreturn items.every((element) =\u0026gt; element.length \u0026gt;= 5); 使用 every() 方法可以使代码更易读、更紧凑、更不容易出错。\n例子: 使用 any() 和 every() Iterable 类提供了两个可以用来验证条件的方法。\n any(): 如果至少有一个元素满足条件，则返回 true。 every(): 如果所有元素都满足条件，则返回 true。  运行这个练习来看看它们的作用。\nvoid main() { var items = [\u0026#39;Salad\u0026#39;, \u0026#39;Popcorn\u0026#39;, \u0026#39;Toast\u0026#39;]; if (items.any((element) =\u0026gt; element.contains(\u0026#39;a\u0026#39;))) { print(\u0026#39;At least one element contains \u0026#34;a\u0026#34;\u0026#39;); } if (items.every((element) =\u0026gt; element.length \u0026gt;= 5)) { print(\u0026#39;All elements have length \u0026gt;= 5\u0026#39;); } } 在这个例子中，any() 验证了至少一个元素包含字符 a，every() 验证了所有元素的长度等于或大于 5。\n运行代码后，尝试更改 any() 的谓词，使其返回 false:\nif (items.any((element) =\u0026gt; element.contains(\u0026#39;Z\u0026#39;))) { print(\u0026#39;At least one element contains \u0026#34;Z\u0026#34;\u0026#39;); } else { print(\u0026#39;No element contains \u0026#34;Z\u0026#34;\u0026#39;); } 你也可以使用 any() 来验证一个 Iterable 中没有元素满足某个条件。\n练习： 验证一个 Iterable 是否满足一个条件 下面的练习提供了使用前面例子中描述的 any() 和 every() 方法的练习。在本例中，你的工作对象是一组用户，由具有成员字段 age 的 User 对象表示。\n使用 any() 和 every() 实现两个函数。\n 第1部分：实现 anyUserUnder18()。  如果至少有一个用户是17岁或更小，则返回 true。   第2部分：实现 everyUserOver13()。  如果所有用户都是14岁或以上，则返回 true。    bool anyUserUnder18(Iterable\u0026lt;User\u0026gt; users) { return users.any((user) =\u0026gt; user.age \u0026lt; 18); } bool everyUserOver13(Iterable\u0026lt;User\u0026gt; users) { return users.every((user) =\u0026gt; user.age \u0026gt; 13); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n 虽然你可以使用 for-in 循环来检查条件，但还有更好的方法。 方法 any() 可以让你检查任何元素是否满足条件。 方法 every() 可以让你验证所有元素是否满足条件。  过滤 前面的章节介绍了 firstWhere() 或 singleWhere() 等方法，这些方法可以帮助你找到满足某个谓词的元素。\n但是如果你想找到满足某个条件的所有元素呢？你可以使用 where() 方法来实现。\nvar evenNumbers = numbers.where((number) =\u0026gt; number.isEven); 在这个例子中，numbers 包含一个有多个 int 值的 Iterable，where() 可以找到所有偶数的数字。\nwhere() 的输出是另一个 Iterable，你可以用它来迭代它或应用其他 Iterable 方法。在下一个例子中，where() 的输出直接在 for-in 循环中使用。\nvar evenNumbers = numbers.where((number) =\u0026gt; number.isEven); for (var number in evenNumbers) { print(\u0026#39;$numberis even\u0026#39;); } 例子: 使用 where() 运行这个例子，看看如何将 where() 与其他方法如 any() 一起使用。\nmain() { var evenNumbers = [1, -2, 3, 42].where((number) =\u0026gt; number.isEven); for (var number in evenNumbers) { print(\u0026#39;$numberis even.\u0026#39;); } if (evenNumbers.any((number) =\u0026gt; number.isNegative)) { print(\u0026#39;evenNumbers contains negative numbers.\u0026#39;); } // If no element satisfies the predicate, the output is empty.  var largeNumbers = evenNumbers.where((number) =\u0026gt; number \u0026gt; 1000); if (largeNumbers.isEmpty) { print(\u0026#39;largeNumbers is empty!\u0026#39;); } } 在这个例子中，where() 用于查找所有偶数，然后用 any() 检查结果是否包含负数。\n在本例的后面，再次使用 where() 来查找所有大于1000的数字，由于没有，结果是一个空的 Iterable。\n注意：如果没有元素满足 where() 中的谓词，那么该方法返回一个空的 Iterable。与 singleWhere() 或 firstWhere() 不同，where() 不会抛出 StateError 异常。\n例子: 使用 takeWhile 方法 takeWhile() 和 skipWhile() 也可以帮助你从一个 Iterable 中过滤元素。\n运行这个例子，看看 takeWhile() 和 skipWhile() 如何分割一个包含数字的 Iterable。\nmain() { var numbers = [1, 3, -2, 0, 4, 5]; var numbersUntilZero = numbers.takeWhile((number) =\u0026gt; number != 0); print(\u0026#39;Numbers until 0: $numbersUntilZero\u0026#39;); var numbersAfterZero = numbers.skipWhile((number) =\u0026gt; number != 0); print(\u0026#39;Numbers after 0: $numbersAfterZero\u0026#39;); } 输出如下:\nNumbers until 0: (1, 3, -2) Numbers after 0: (0, 4, 5) 在这个例子中，takeWhile() 返回一个 Iterable，它包含了通往满足谓词的元素的所有元素。另一方面， skipWhile() 返回一个 Iterable，同时跳过满足谓词的元素之前的所有元素。请注意，满足谓词的元素也会被包含在内。\n运行该示例后，将 takeWhile() 改为取元素，直到到达第一个负数。\nvar numbersUntilNegative = numbers.takeWhile((number) =\u0026gt; !number.isNegative); 注意，条件 number.isNegative 是用 ! 否定的。\n练习: 从列表中过滤元素 下面的练习提供了使用上一练习中的 User 类的 where() 方法的练习。\n使用 where() 实现两个函数。\n 第1部分：实现 filterUnder21()。  返回一个包含所有21岁以上用户的 Iterable。   第2部分：实现 findShortNamed()。  返回一个包含所有名字长度为 3 或更少的用户的 Iterable。    Iterable\u0026lt;User\u0026gt; filterUnder21(Iterable\u0026lt;User\u0026gt; users) { return users.where((user) =\u0026gt; user.age \u0026gt;= 21); } Iterable\u0026lt;User\u0026gt; findShortNamed(Iterable\u0026lt;User\u0026gt; users) { return users.where((user) =\u0026gt; user.name.length \u0026lt;= 3); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n 用 where() 过滤一个 Iterable 的元素。 where() 的输出是另一个 Iterable。 使用 takeWhile() 和 skipWhile() 来获取元素，直到满足一个条件或之后。 这些方法的输出可以是一个空的 Iterable。  Map 通过 map() 方法映射 Iterables，你可以在每个元素上应用一个函数，用一个新的元素替换每个元素。\nIterable\u0026lt;int\u0026gt; output = numbers.map((number) =\u0026gt; number * 10); 在这个例子中，Iterable 数字的每个元素都被乘以 10。\n你也可以使用 map() 将一个元素转换为不同的对象-例如，将所有 int 转换为 String，在下面的例子中可以看到。\nIterable\u0026lt;String\u0026gt; output = numbers.map((number) =\u0026gt; number.toString()); 注意：map() 返回一个懒惰的 Iterable，这意味着只有在元素被迭代时才会调用所提供的函数。\n例子: 使用 map 改变元素 运行这个例子，看看如何使用 map() 将一个 Iterable 中的所有元素乘以2，你认为输出会是什么？\nmain() { var numbersByTwo = [1, -2, 3, 42].map((number) =\u0026gt; number * 2); print(\u0026#39;Numbers: $numbersByTwo.\u0026#39;); } 练习: 映射到不同类型 在前面的例子中，你把一个 Iterable 的元素乘以2，输入和输出都是 int 的 Iterable。\n在这个练习中，你的代码接收一个 User的 Iterable，你需要返回一个包含用户名和年龄的字符串的 Iterable。\nIterable 中的每个字符串必须遵循这样的格式。'{name} is {age}'-例如 'Alice is 21'。\nIterable\u0026lt;String\u0026gt; getNameAndAges(Iterable\u0026lt;User\u0026gt; users) { return users.map((user) =\u0026gt; \u0026#39;${user.name}is ${user.age}\u0026#39;); } class User { String name; int age; User( this.name, this.age, ); } 快速回顾:\n map() 将一个函数应用于一个 Iterable 的所有元素。 map() 的输出是另一个 Iterable。 在 Iterable 被迭代之前，函数不会被计算。  练习: 把所有的东西放在一起 现在是练习所学知识的时候了，在最后一个练习中。\n这个练习提供了类 EmailAddress，它有一个构造函数，接收一个字符串。另一个提供的函数是 isValidEmailAddress()，它测试一个电子邮件地址是否有效。\n   构造函数/函数 类型签名 描述     EmailAddress() EmailAddress(String address) 为指定的地址创建一个 EmailAddress。   isValidEmailAddress() bool isValidEmailAddress(EmailAddress) 如果提供的 EmailAddress 有效，返回 true。    编写以下代码。\n第1部分：实现 parseEmailAddresses()。\n 编写函数 parseEmailAddresses()，它接收一个包含电子邮件地址的 Iterable\u0026lt;String\u0026gt;，并返回一个 Iterable\u0026lt;EmailAddress\u0026gt;。 使用方法 map() 从 String 映射到 EmailAddress。 使用构造函数 EmailAddress(String) 创建 EmailAddress 对象。  第二部分：实现 anyInvalidEmailAddress()。\n 编写函数 anyInvalidEmailAddress()，它接收一个 Iterable\u0026lt;EmailAddress\u0026gt;，并在 Iterable 中的任何 EmailAddress 无效时返回 true。 使用方法 any() 和提供的函 isValidEmailAddress()。  第3部分：实现 validEmailAddresses()。\n 编写函数 validEmailAddresses()，它接收一个 Iterable\u0026lt;EmailAddress\u0026gt; 并返回另一个只包含有效地址的 Iterable\u0026lt;EmailAddress\u0026gt;。 使用方法 where() 来过滤 Iterable\u0026lt;EmailAddress\u0026gt;。 使用提供的函数 isValidEmailAddress() 来评估一个 EmailAddress 是否有效。  Iterable\u0026lt;EmailAddress\u0026gt; parseEmailAddresses(Iterable\u0026lt;String\u0026gt; strings) { return strings.map((s) =\u0026gt; EmailAddress(s)); } bool anyInvalidEmailAddress(Iterable\u0026lt;EmailAddress\u0026gt; emails) { return emails.any((email) =\u0026gt; !isValidEmailAddress(email)); } Iterable\u0026lt;EmailAddress\u0026gt; validEmailAddresses(Iterable\u0026lt;EmailAddress\u0026gt; emails) { return emails.where((email) =\u0026gt; isValidEmailAddress(email)); } class EmailAddress { String address; EmailAddress(this.address); @override bool operator ==(Object other) =\u0026gt; identical(this, other) || other is EmailAddress \u0026amp;\u0026amp; runtimeType == other.runtimeType \u0026amp;\u0026amp; address == other.address; @override int get hashCode =\u0026gt; address.hashCode; @override String toString() { return \u0026#39;EmailAddress{address: $address}\u0026#39;; } } 下一步是什么? 恭喜你，你完成了 codelab 的学习! 如果你想了解更多，这里有一些下一步的建议。\n 玩玩 DartPad。 试试另一个代码实验。 阅读 Iterable API 参考资料，了解本 codelab 未涉及的方法。  "},"name":"Dart 可迭代集合","published":"2020-06-25T00:00:00+08:00","summary":"Dart可迭代集合。","type":"entry","url":"https://ohmyweekly.github.io/notes/dart-iterable-collections/"},{"content":{"html":"\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch2 id=\"字符串插值\"\u003e字符串插值\u003c/h2\u003e\n\u003cp\u003e使用 \u003ccode\u003e${expression}\u003c/code\u003e 将表达式的值放到字符串里面。如果表达式是一个标识符, 就可以省略 \u003ccode\u003e{}\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e下面是字符串插值的例子:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e字符串\u003c/th\u003e\n\u003cth align=\"left\"\u003e结果\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u0026lsquo;${3 + 2}\u0026rsquo;\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u0026lsquo;5\u0026rsquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u0026lsquo;${\u0026ldquo;word\u0026rdquo;.toUpperCase()}\u0026rsquo;\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u0026lsquo;WORD\u0026rsquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u0026lsquo;$myObject\u0026rsquo;\u003c/td\u003e\n\u003ctd align=\"left\"\u003eThe value of myObject.toString()\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"代码示例\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e下面的函数接收两个整数作为参数。使其返回一个包含两个整数的字符串，并以空格分隔。例如 \u003ccode\u003estringify(2, 3)\u003c/code\u003e 应该返回 \u0026lsquo;2 3\u0026rsquo;。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003estringify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"null-无感知操作符\"\u003eNull 无感知操作符\u003c/h2\u003e\n\u003cp\u003eDart 提供了一些方便的操作符来处理可能为空的值。其中一个是 \u003ccode\u003e??=\u003c/code\u003e 赋值运算符，只有当一个变量当前为空时，它才会给这个变量赋值:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// a 的初始值为 null\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 打印 3\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 仍然打印 3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e另一个 null-aware 操作符是 \u003ccode\u003e??\u003c/code\u003e，它返回其左边的表达式，除非该表达式的值为 null，在这种情况下，它计算并返回其右边的表达式:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 打印 1\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"m\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 打印 12 \n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-1\"\u003e代码示例\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea string\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Unassigned objects are null by default.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// makes \u0026#39;a string\u0026#39; be assigned to baz.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ebaz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eupdateSomeVars\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// makes \u0026#39;a string\u0026#39; be assigned to bar.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003ebar\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea string\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"有条件的属性访问\"\u003e有条件的属性访问\u003c/h2\u003e\n\u003cp\u003e要保护对对象的一个可能为空的属性或方法的访问，请在点(.)前加上一个问号(?):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emyObject\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esomeProperty\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上述代码等同于以下代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emyObject\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003emyObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esomeProperty\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以在一个表达式中把 \u003ccode\u003e?.\u003c/code\u003e 的多个使用链接在一起:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emyObject\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esomeProperty\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esomeMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果 \u003ccode\u003emyObject\u003c/code\u003e 或 \u003ccode\u003emyObject.someProperty\u003c/code\u003e 为 null，前面的代码将返回 null(并且从不调用 \u003ccode\u003esomeMethod()\u003c/code\u003e)。\u003c/p\u003e\n\u003ch3 id=\"代码示例-2\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e尝试使用条件属性访问来完成下面的代码片段。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// This method should return the uppercase version of `str`\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// or null if `str` is null.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eupperCaseIt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Try conditionally accessing the `toUpperCase` method here.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoUpperCase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"集合字面量\"\u003e集合字面量\u003c/h2\u003e\n\u003cp\u003eDart 内置了对列表、映射和集合的支持。你可以使用字面量创建它们:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaListOfStrings\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eone\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003etwo\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ethree\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaSetOfStrings\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eone\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003etwo\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ethree\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaMapOfStringsToInts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eone\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003etwo\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ethree\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e  \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDart 的类型推理可以为你分配类型给这些变量。在本例中，推断的类型是 \u003ccode\u003eList\u0026lt;String\u0026gt;\u003c/code\u003e、\u003ccode\u003eSet\u0026lt;String\u0026gt;\u003c/code\u003e 和 \u003ccode\u003eMap\u0026lt;String, int\u0026gt;\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e或者你可以自己指定类型:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaListOfInts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaSetOfInts\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaMapOfIntToDouble\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当你用子类型的内容初始化一个列表，但仍然希望列表是 \u003ccode\u003eList\u0026lt;BaseType\u0026gt;\u003c/code\u003e 时，指定类型是很方便的:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaListOfBaseType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eBaseType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSubType\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-3\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e尝试将以下变量设置为指定的值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"c1\"\u003e// Assign this a list containing \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, and \u0026#39;c\u0026#39; in that order:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaListOfStrings\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eb\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ec\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Assign this a set containing 3, 4, and 5:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaSetOfInts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Assign this a map of String to int so that aMapOfStringsToInts[\u0026#39;myKey\u0026#39;] returns 12:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eaMapOfStringsToInts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003emyKey\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Assign this an empty List\u0026lt;double\u0026gt;:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eanEmptyListOfDouble\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Assign this an empty Set\u0026lt;String\u0026gt;:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eanEmptySetOfString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Assign this an empty Map of double to int:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eanEmptyMapOfDoublesToInts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"箭头语法\"\u003e箭头语法\u003c/h2\u003e\n\u003cp\u003e你可能在 Dart 代码中看到过 \u003ccode\u003e=\u0026gt;\u003c/code\u003e 符号。这种箭头语法是一种定义函数的方式，该函数执行其右边的表达式并返回其值。\u003c/p\u003e\n\u003cp\u003e例如，考虑这个对 \u003ccode\u003eList\u003c/code\u003e 类的 \u003ccode\u003eany()\u003c/code\u003e 方法的调用:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003ehasEmpty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eaListOfStrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里有一个更简单的方法来写这个代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003ehasEmpty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eaListOfStrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-4\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e试着完成以下使用箭头语法的语句:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyClass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_value1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_value2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_value3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Returns the product of the above values:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003eproduct\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_value1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003e_value2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003e_value3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \n  \u003cspan class=\"c1\"\u003e// Adds one to _value1:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eincrementValue1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_value1\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n  \n  \u003cspan class=\"c1\"\u003e// Returns a string containing each item in the\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// list, separated by commas (e.g. \u0026#39;a,b,c\u0026#39;): \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ejoinWithCommas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e,\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"级联\"\u003e级联\u003c/h2\u003e\n\u003cp\u003e要对同一对象进行一系列操作，可以使用级联(\u003ccode\u003e...\u003c/code\u003e)。我们都见过这样的表达式:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emyObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esomeMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e它在 \u003ccode\u003emyObject\u003c/code\u003e 上调用 \u003ccode\u003esomeMethod()\u003c/code\u003e，表达式的结果是 \u003ccode\u003esomeMethod()\u003c/code\u003e 的返回值。\u003c/p\u003e\n\u003cp\u003e下面是同样的表达式，有一个级联:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emyObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esomeMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e虽然它仍然在 \u003ccode\u003emyObject\u003c/code\u003e 上调用 \u003ccode\u003esomeMethod()\u003c/code\u003e，但表达式的结果并不是返回值-它是对 \u003ccode\u003emyObject\u003c/code\u003e 的引用! 使用级联，你可以将原本需要单独语句的操作串联起来。例如，请看以下代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ebutton\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e#confirm\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eConfirm\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclasses\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eimportant\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eonClick\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elisten\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ewindow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ealert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eConfirmed!\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e有了级联，代码就会变得短得多，而且你也不需要 \u003ccode\u003ebutton\u003c/code\u003e 变量:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e#confirm\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eConfirm\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eimportant\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eonClick\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elisten\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ewindow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ealert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eConfirmed!\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-5\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e使用级联来创建一个单一的语句，将一个 \u003ccode\u003eBigObject\u003c/code\u003e 的 \u003ccode\u003eanInt\u003c/code\u003e、\u003ccode\u003eaString\u003c/code\u003e 和 \u003ccode\u003eaList\u003c/code\u003e 属性设置为 1、\u0026lsquo;String!\u0026rsquo; 和 \u003ccode\u003e[3.0]\u003c/code\u003e(分别地)，然后调用 \u003ccode\u003eallDone()\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBigObject\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eanInt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eaString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eaList\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003e_done\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eallDone\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003e_done\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e    \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eBigObject\u003c/span\u003e \u003cspan class=\"n\"\u003efillBigObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBigObject\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eanInt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eString!\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eallDone\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"getters-和-setters\"\u003egetters 和 setters\u003c/h2\u003e\n\u003cp\u003e当你需要对一个属性进行更多的控制时，你可以定义 getter 和 setter，而不是简单的字段。\u003c/p\u003e\n\u003cp\u003e例如，你可以确保一个属性的值是有效的:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyClass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_aProperty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003eaProperty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_aProperty\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003eset\u003c/span\u003e \u003cspan class=\"n\"\u003eaProperty\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003e_aProperty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e    \n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你也可以使用 getter 来定义计算属性:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyClass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_values\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eaddValue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e_values\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// 一个计算属性\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003e_values\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-6\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e想象一下，你有一个购物车类，它保存了一个私有的 \u003ccode\u003eList\u0026lt;double\u0026gt;\u003c/code\u003e 的价格。添加以下内容:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个叫做 \u003ccode\u003etotal\u003c/code\u003e 的 getter，返回价格的总和。\u003c/li\u003e\n\u003cli\u003e用一个新的列表替换列表的 setter，只要新的列表不包含任何负价格(在这种情况下，setter 应该抛出一个 \u003ccode\u003eInvalidPriceException\u003c/code\u003e)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eInvalidPriceException\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eShoppingCart\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_prices\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \n  \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"kd\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_prices\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efold\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \n  \u003cspan class=\"kd\"\u003eset\u003c/span\u003e \u003cspan class=\"n\"\u003eprices\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eInvalidPriceException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \n    \u003cspan class=\"n\"\u003e_prices\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"可选位置参数\"\u003e可选位置参数\u003c/h2\u003e\n\u003cp\u003eDart 有两种函数参数：位置参数和命名参数。位置参数是你可能熟悉的那种:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esumUp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e  \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esumUp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Dart 中，你可以将这些位置参数用括号包裹起来，使其成为可选的参数:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esumUpToFive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esumUpToFive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eotherTotal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esumUpToFive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可选的位置参数在函数的参数列表中总是最后一个。它们的默认值是空的，除非你提供了另一个默认值:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esumUpToFive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003enewTotal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esumUpToFive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enewTotal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026lt;-- prints 15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-7\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e实现一个名为 \u003ccode\u003ejoinWithCommas()\u003c/code\u003e 的函数，接受 1 到 5 个整数，然后返回一个用逗号分隔的数字字符串。下面是一些函数调用和返回值的例子:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e函数调用\u003c/th\u003e\n\u003cth align=\"left\"\u003e返回值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003ejoinWithCommas(1)\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u0026lsquo;1\u0026rsquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003ejoinWithCommas(1, 2, 3)\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u0026lsquo;1,2,3\u0026rsquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003ejoinWithCommas(1, 1, 1, 1, 1)\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u0026lsquo;1,1,1,1,1\u0026rsquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejoinWithCommas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003ejoinWithCommas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e,\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"可选命名参数\"\u003e可选命名参数\u003c/h2\u003e\n\u003cp\u003e使用大括号语法，你可以定义有名称的可选参数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eprintName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003esuffix\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003efirstName\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003elastName\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"n\"\u003esuffix\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ···\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eprintName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eAvinash\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eGupta\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprintName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ePoshmeister\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eMoneybuckets\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nl\"\u003esuffix:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eIV\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e正如你所期望的，这些参数的值默认为空，但你可以提供默认值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eprintName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003esuffix\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003efirstName\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003elastName\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003esuffix\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e一个函数不能同时拥有可选的位置参数和可选的命名参数。\u003c/p\u003e\n\u003ch3 id=\"代码示例-8\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e为 \u003ccode\u003eMyDataObject\u003c/code\u003e 类添加一个 \u003ccode\u003ecopyWith()\u003c/code\u003e 实例方法。它应该接受三个命名参数:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eint newInt\u003c/li\u003e\n\u003cli\u003eString newString\u003c/li\u003e\n\u003cli\u003edouble newDouble\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当调用时，\u003ccode\u003ecopyWith()\u003c/code\u003e 应该基于当前实例返回一个新的 \u003ccode\u003eMyDataObject\u003c/code\u003e，并将前面参数（如果有的话）的数据复制到对象的属性中。例如，如果 \u003ccode\u003enewInt\u003c/code\u003e 是非空的，那么将其值复制到 \u003ccode\u003eanInt\u003c/code\u003e 中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyDataObject\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eanInt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eaString\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eaDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eMyDataObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n     \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eanInt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n     \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eOld!\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n     \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaDouble\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e2.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eMyDataObject\u003c/span\u003e \u003cspan class=\"n\"\u003ecopyWith\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003enewInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003enewString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003enewDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eMyDataObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003eanInt:\u003c/span\u003e      \u003cspan class=\"n\"\u003enewInt\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eanInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003eaString:\u003c/span\u003e \u003cspan class=\"n\"\u003enewString\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nl\"\u003eaDouble:\u003c/span\u003e \u003cspan class=\"n\"\u003enewDouble\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"异常\"\u003e异常\u003c/h2\u003e\n\u003cp\u003eDart 代码可以抛出和捕获异常。与 Java 相比，Dart 的所有异常都是未检查的异常。方法不声明它们可能会抛出哪些异常，你也不需要捕捉任何异常。\u003c/p\u003e\n\u003cp\u003eDart 提供了 \u003ccode\u003eException\u003c/code\u003e 和 \u003ccode\u003eError\u003c/code\u003e 类型，但你可以抛出任何非空对象:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eSomething bad happened.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eWaaaaaaah!\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在处理异常时使用 \u003ccode\u003etry\u003c/code\u003e、\u003ccode\u003eon\u003c/code\u003e 和 \u003ccode\u003ecatch\u003c/code\u003e 关键字:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ebreedMoreLlamas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003eOutOfLlamasException\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// A specific exception\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003ebuyMoreLlamas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Anything else that is an exception\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eUnknown exception: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// No specified type, handles all\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eSomething really unknown: \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003etry\u003c/code\u003e 关键字的工作原理和其他大多数语言一样。使用 \u003ccode\u003eon\u003c/code\u003e 关键字按类型过滤特定的异常，使用 \u003ccode\u003ecatch\u003c/code\u003e 关键字获取异常对象的引用。\u003c/p\u003e\n\u003cp\u003e如果不能完全处理异常，可以使用 \u003ccode\u003erethrow\u003c/code\u003e 关键字来传播异常:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ebreedMoreLlamas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eI was just trying to breed llamas!.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erethrow\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e无论是否抛出异常，都要执行代码，使用 \u003ccode\u003efinal\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ebreedMoreLlamas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// ... handle exception ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003efinally\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Always clean up, even if an exception is thrown.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003ecleanLlamaStalls\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-9\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e实现下面的 \u003ccode\u003etryFunction()\u003c/code\u003e。它应该执行一个不可信的方法，然后做如下操作:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果 \u003ccode\u003euntrustworthy()\u003c/code\u003e 抛出一个 \u003ccode\u003eExceptionWithMessage\u003c/code\u003e，调用 \u003ccode\u003elogger.logException\u003c/code\u003e，并提供异常类型和消息(尝试使用 \u003ccode\u003eon\u003c/code\u003e 和 \u003ccode\u003ecatch\u003c/code\u003e)。\u003c/li\u003e\n\u003cli\u003e如果 \u003ccode\u003euntrustworthy()\u003c/code\u003e 抛出一个 \u003ccode\u003eExceptio\u003c/code\u003en，调用 \u003ccode\u003elogger.logException\u003c/code\u003e，并注明异常类型(尝试使用 \u003ccode\u003eon\u003c/code\u003e)。\u003c/li\u003e\n\u003cli\u003e如果 \u003ccode\u003euntrustworthy()\u003c/code\u003e 抛出任何其他对象，不要捕获异常。\u003c/li\u003e\n\u003cli\u003e当所有的东西都被捕获和处理后，调用 \u003ccode\u003elogger.doneLogging\u003c/code\u003e(尝试使用 \u003ccode\u003efinally\u003c/code\u003e)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003eVoidFunction\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eFunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eExceptionWithMessage\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eExceptionWithMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eLogger\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003elogException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eType\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003edoneLogging\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003etryFunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVoidFunction\u003c/span\u003e \u003cspan class=\"n\"\u003euntrustworthy\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLogger\u003c/span\u003e \u003cspan class=\"n\"\u003elogger\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003euntrustworthy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003eExceptionWithMessage\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elogger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elogException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eruntimeType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003eException\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elogger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elogException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003efinally\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elogger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edoneLogging\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"在构造函数中使用-this\"\u003e在构造函数中使用 \u003ccode\u003ethis\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eDart 提供了一个方便的快捷方式来为构造函数中的属性赋值：在声明构造函数时使用 \u003ccode\u003ethis.propertyName\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyColor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eMyColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e    \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ecolor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMyColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e128\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种技术也适用于命名参数。属性名成为参数的名称:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyColor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eMyColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ecolor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMyColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nl\"\u003ered:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nl\"\u003egreen:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nl\"\u003eblue:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对于可选参数，默认值按预期工作:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eMyColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// or\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eMyColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-10\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e为 \u003ccode\u003eMyClass\u003c/code\u003e 添加一个单行构造函数，使用 \u003ccode\u003ethis.\u003c/code\u003e 语法来接收和分配类的三个属性的值:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyClass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eanInt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eaString\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eaDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \n  \u003cspan class=\"n\"\u003eMyClass\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eanInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"初始化器列表\"\u003e初始化器列表\u003c/h2\u003e\n\u003cp\u003e有时候，当你实现一个构造函数时，你需要在构造函数体执行之前做一些设置。例如，在构造函数体执行之前，\u003ccode\u003efinal\u003c/code\u003e 字段必须有值。在一个初始化器列表中做这些工作，它位于构造函数的签名和它的主体之间。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efromJson\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003enum\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ex\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ey\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eIn Point.fromJson(): (\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"s1\"\u003e, \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"s1\"\u003e)\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e初始化器列表也是一个方便放置断言的地方，它只在开发过程中运行:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"n\"\u003eNonNegativePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eI just made a NonNegativePoint: (\u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"s1\"\u003e, \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"s1\"\u003e)\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e        \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-11\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e完成下面的 \u003ccode\u003eFirstTwoLetters\u003c/code\u003e 构造函数。使用初始化器列表将 \u003ccode\u003eword\u003c/code\u003e 中的前两个字符分配给 \u003ccode\u003eletterOne\u003c/code\u003e 和 \u003ccode\u003eLetterTwo\u003c/code\u003e 属性。为了获得额外的积分，可以添加一个断言来捕获少于两个字符的单词。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFirstTwoLetters\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eletterOne\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eletterTwo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Create a constructor with an initializer list here:\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eFirstTwoLetters\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eletterOne\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eletterTwo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"命名构造器\"\u003e命名构造器\u003c/h2\u003e\n\u003cp\u003e为了允许类有多个构造函数，Dart 支持命名构造函数:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePoint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eorigin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e    \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e要使用命名构造函数，请使用它的全名来调用它:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003emyPoint\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eorigin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-12\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e给 \u003ccode\u003eColor\u003c/code\u003e 类一个名为 \u003ccode\u003eColor.black\u003c/code\u003e 的构造函数，将三个属性都设置为 0。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eColor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \n  \u003cspan class=\"n\"\u003eColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eColor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ered\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003egreen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eblue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"工厂构造函数\"\u003e工厂构造函数\u003c/h2\u003e\n\u003cp\u003eDart 支持工厂构造函数，它可以返回子类型甚至 null。要创建一个工厂构造函数，请使用 \u003ccode\u003efactory\u003c/code\u003e 关键字:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSquare\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eShape\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCircle\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eShape\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eShape\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eShape\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003efactory\u003c/span\u003e \u003cspan class=\"n\"\u003eShape\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efromTypeName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003etypeName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etypeName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esquare\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eSquare\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etypeName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ecircle\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eI don\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003et recognize \u003c/span\u003e\u003cspan class=\"si\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003etypeName\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e    \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-13\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e填入名为 \u003ccode\u003eIntegerHolder.fromList\u003c/code\u003e 的工厂构造函数，使其做以下工作:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果列表有一个值，就用这个值创建一个 \u003ccode\u003eIntegerSingle\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e如果列表有两个值，则用该值依次创建一个 \u003ccode\u003eIntegerDouble\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e如果列表有三个值，则按顺序创建一个 \u003ccode\u003eIntegerTriple\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e否则，返回 null。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eIntegerHolder\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIntegerHolder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \n  \u003cspan class=\"kd\"\u003efactory\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerHolder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efromList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerSingle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerTriple\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eIntegerSingle\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerHolder\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIntegerSingle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eIntegerDouble\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerHolder\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIntegerDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eIntegerTriple\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"n\"\u003eIntegerHolder\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eIntegerTriple\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"重定向构造函数\"\u003e重定向构造函数\u003c/h2\u003e\n\u003cp\u003e有时，一个构造函数的唯一目的是重定向到同一类中的另一个构造函数。重定向构造函数的主体是空的，构造函数调用出现在冒号(:)之后。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eAutomobile\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emodel\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003empg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// 这个类的主构造函数\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eAutomobile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emodel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003empg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// 代理到主构造函数\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eAutomobile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehybrid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003emodel\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emodel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e60\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// 代理到命名构造函数\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eAutomobile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efancyHybrid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehybrid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eFuturecar\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eMark 2\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-14\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e还记得上面的 \u003ccode\u003eColor\u003c/code\u003e 类吗？创建一个名为 \u003ccode\u003eblack\u003c/code\u003e 的命名构造函数，但不是手动分配属性，而是将其重定向到默认构造函数，参数为 0。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eColor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \n  \u003cspan class=\"n\"\u003eColor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eColor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"常量构造函数\"\u003e常量构造函数\u003c/h2\u003e\n\u003cp\u003e如果你的类产生的对象永远不会改变，你可以让这些对象成为编译时常量。要做到这一点，请定义一个 \u003ccode\u003econst\u003c/code\u003e 构造函数，并确保所有的实例变量都是最终变量。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eImmutablePoint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eImmutablePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eImmutablePoint\u003c/span\u003e \u003cspan class=\"n\"\u003eorigin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eImmutablePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代码示例-15\"\u003e代码示例\u003c/h3\u003e\n\u003cp\u003e修改 \u003ccode\u003eRecipe\u003c/code\u003e 类，使它的实例可以是常量，并创建一个常量构造函数，执行以下操作。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e有三个参数： \u003ccode\u003eingredients\u003c/code\u003e, \u003ccode\u003ecalories\u003c/code\u003e 和 \u003ccode\u003emilligramsOfSodium\u003c/code\u003e(按顺序)。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003ethis.\u003c/code\u003e 语法，自动将参数值分配给同名的对象属性。\u003c/li\u003e\n\u003cli\u003e是常量，在构造函数声明中，\u003ccode\u003econst\u003c/code\u003e 关键字就在 \u003ccode\u003eRecipe\u003c/code\u003e 前面。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRecipe\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eingredients\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecalories\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003emilligramsOfSodium\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eRecipe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eingredients\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecalories\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emilligramsOfSodium\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"下一步是什么\"\u003e下一步是什么？\u003c/h2\u003e\n\u003cp\u003e我们希望你喜欢使用这个 codelab 来学习或测试你对 Dart 语言一些最有趣的功能的知识。这里有一些关于现在要做什么的建议。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e试试\u003ca href=\"https://dart.dev/codelabs\"\u003e其他的 Dart 代码实验室\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e阅读 \u003ca href=\"https://dart.dev/guides/language/language-tour\"\u003eDart 语言之旅\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e玩 \u003ca href=\"https://dartpad.dev/\"\u003eDartPad\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e获取 \u003ca href=\"https://dart.dev/get-dart\"\u003eDart SDK\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n","text":"字符串插值 使用 ${expression} 将表达式的值放到字符串里面。如果表达式是一个标识符, 就可以省略 {}。\n下面是字符串插值的例子:\n   字符串 结果     \u0026lsquo;${3 + 2}\u0026rsquo; \u0026lsquo;5\u0026rsquo;   \u0026lsquo;${\u0026ldquo;word\u0026rdquo;.toUpperCase()}\u0026rsquo; \u0026lsquo;WORD\u0026rsquo;   \u0026lsquo;$myObject\u0026rsquo; The value of myObject.toString()    代码示例 下面的函数接收两个整数作为参数。使其返回一个包含两个整数的字符串，并以空格分隔。例如 stringify(2, 3) 应该返回 \u0026lsquo;2 3\u0026rsquo;。\nString stringify(int x, int y) { return \u0026#39;$x$y\u0026#39;; } Null 无感知操作符 Dart 提供了一些方便的操作符来处理可能为空的值。其中一个是 ??= 赋值运算符，只有当一个变量当前为空时，它才会给这个变量赋值:\nint a; // a 的初始值为 null a ??= 3; print(a); // 打印 3  a ??= 5; print(a); // 仍然打印 3 另一个 null-aware 操作符是 ??，它返回其左边的表达式，除非该表达式的值为 null，在这种情况下，它计算并返回其右边的表达式:\nprint(1 ?? 3); // 打印 1 print(null ?? 12); // 打印 12 代码示例 String foo = \u0026#39;a string\u0026#39;; String bar; // Unassigned objects are null by default.  // makes \u0026#39;a string\u0026#39; be assigned to baz. String baz = foo ?? bar; void updateSomeVars() { // makes \u0026#39;a string\u0026#39; be assigned to bar.  bar ??= \u0026#39;a string\u0026#39;; } 有条件的属性访问 要保护对对象的一个可能为空的属性或方法的访问，请在点(.)前加上一个问号(?):\nmyObject?.someProperty 上述代码等同于以下代码:\n(myObject != null) ? myObject.someProperty : null 你可以在一个表达式中把 ?. 的多个使用链接在一起:\nmyObject?.someProperty?.someMethod() 如果 myObject 或 myObject.someProperty 为 null，前面的代码将返回 null(并且从不调用 someMethod())。\n代码示例 尝试使用条件属性访问来完成下面的代码片段。\n// This method should return the uppercase version of `str` // or null if `str` is null. String upperCaseIt(String str) { // Try conditionally accessing the `toUpperCase` method here.  return str?.toUpperCase(); } 集合字面量 Dart 内置了对列表、映射和集合的支持。你可以使用字面量创建它们:\nfinal aListOfStrings = [\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;]; final aSetOfStrings = {\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;}; final aMapOfStringsToInts = { \u0026#39;one\u0026#39;: 1, \u0026#39;two\u0026#39;: 2, \u0026#39;three\u0026#39;: 3, } Dart 的类型推理可以为你分配类型给这些变量。在本例中，推断的类型是 List\u0026lt;String\u0026gt;、Set\u0026lt;String\u0026gt; 和 Map\u0026lt;String, int\u0026gt;。\n或者你可以自己指定类型:\nfinal aListOfInts = \u0026lt;int\u0026gt;[]; final aSetOfInts = \u0026lt;int\u0026gt;{}; final aMapOfIntToDouble = \u0026lt;int, double\u0026gt;{}; 当你用子类型的内容初始化一个列表，但仍然希望列表是 List\u0026lt;BaseType\u0026gt; 时，指定类型是很方便的:\nfinal aListOfBaseType = \u0026lt;BaseType\u0026gt;[SubType(), SubType()]; 代码示例 尝试将以下变量设置为指定的值。\n// Assign this a list containing \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, and \u0026#39;c\u0026#39; in that order: final aListOfStrings = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]; // Assign this a set containing 3, 4, and 5: final aSetOfInts = {3, 4, 5}; // Assign this a map of String to int so that aMapOfStringsToInts[\u0026#39;myKey\u0026#39;] returns 12: final aMapOfStringsToInts = {\u0026#39;myKey\u0026#39;: 12}; // Assign this an empty List\u0026lt;double\u0026gt;: final anEmptyListOfDouble = \u0026lt;double\u0026gt;[]; // Assign this an empty Set\u0026lt;String\u0026gt;: final anEmptySetOfString = \u0026lt;String\u0026gt;{}; // Assign this an empty Map of double to int: final anEmptyMapOfDoublesToInts = \u0026lt;double, int\u0026gt;{}; 箭头语法 你可能在 Dart 代码中看到过 =\u0026gt; 符号。这种箭头语法是一种定义函数的方式，该函数执行其右边的表达式并返回其值。\n例如，考虑这个对 List 类的 any() 方法的调用:\nbool hasEmpty = aListOfStrings.any((s) { return s.isEmpty; }); 这里有一个更简单的方法来写这个代码:\nbool hasEmpty = aListOfStrings.any((s) =\u0026gt; s.isEmpty); 代码示例 试着完成以下使用箭头语法的语句:\nclass MyClass { int _value1 = 2; int _value2 = 3; int _value3 = 5; // Returns the product of the above values:  int get product =\u0026gt; _value1 * _value2 * _value3; // Adds one to _value1:  void incrementValue1() =\u0026gt; _value1++; // Returns a string containing each item in the  // list, separated by commas (e.g. \u0026#39;a,b,c\u0026#39;):  String joinWithCommas(List\u0026lt;String\u0026gt; strings) =\u0026gt; strings.join(\u0026#39;,\u0026#39;); } 级联 要对同一对象进行一系列操作，可以使用级联(...)。我们都见过这样的表达式:\nmyObject.someMethod() 它在 myObject 上调用 someMethod()，表达式的结果是 someMethod() 的返回值。\n下面是同样的表达式，有一个级联:\nmyObject..someMethod() 虽然它仍然在 myObject 上调用 someMethod()，但表达式的结果并不是返回值-它是对 myObject 的引用! 使用级联，你可以将原本需要单独语句的操作串联起来。例如，请看以下代码:\nvar button = querySelector(\u0026#39;#confirm\u0026#39;); button.text = \u0026#39;Confirm\u0026#39;; button.classes.add(\u0026#39;important\u0026#39;); button.onClick.listen((e) =\u0026gt; window.alert(\u0026#39;Confirmed!\u0026#39;)); 有了级联，代码就会变得短得多，而且你也不需要 button 变量:\nquerySelector(\u0026#39;#confirm\u0026#39;) ..text = \u0026#39;Confirm\u0026#39; ..class.add(\u0026#39;important\u0026#39;) ..onClick.listen((e) =\u0026gt; window.alert(\u0026#39;Confirmed!\u0026#39;)); 代码示例 使用级联来创建一个单一的语句，将一个 BigObject 的 anInt、aString 和 aList 属性设置为 1、\u0026lsquo;String!\u0026rsquo; 和 [3.0](分别地)，然后调用 allDone()。\nclass BigObject{ int anInt = 0; String aString = \u0026#39;\u0026#39;; List\u0026lt;double\u0026gt; aList = []; bool _done = false; void allDone() { _done = true; } } BigObject fillBigObject(BigObject obj) { return obj ..anInt = 1 ..aString = \u0026#39;String!\u0026#39; ..aList.add(3) ..allDone(); } getters 和 setters 当你需要对一个属性进行更多的控制时，你可以定义 getter 和 setter，而不是简单的字段。\n例如，你可以确保一个属性的值是有效的:\nclass MyClass { int _aProperty = 0; int get aProperty =\u0026gt; _aProperty; set aProperty(int value) { if (value \u0026gt;= 0) { _aProperty = value; } } } 你也可以使用 getter 来定义计算属性:\nclass MyClass { List\u0026lt;int\u0026gt; _values = []; void addValue(int value) { _values.add(value); } // 一个计算属性  int get count { return _values.length; } } 代码示例 想象一下，你有一个购物车类，它保存了一个私有的 List\u0026lt;double\u0026gt; 的价格。添加以下内容:\n 一个叫做 total 的 getter，返回价格的总和。 用一个新的列表替换列表的 setter，只要新的列表不包含任何负价格(在这种情况下，setter 应该抛出一个 InvalidPriceException)。  class InvalidPriceException {} class ShoppingCart { List\u0026lt;double\u0026gt; _prices = []; double get total =\u0026gt; _prices.fold(0, (e, t) =\u0026gt; e + t); set prices(List\u0026lt;double\u0026gt; value) { if (value.any((p) =\u0026gt; p \u0026lt; 0)) { throw InvalidPriceException(); } _prices = value; } } 可选位置参数 Dart 有两种函数参数：位置参数和命名参数。位置参数是你可能熟悉的那种:\nint sumUp(int a, int b, int c) { return a + b + c; } // ... int total = sumUp(1, 2, 3); 在 Dart 中，你可以将这些位置参数用括号包裹起来，使其成为可选的参数:\nint sumUpToFive(int a, [int b, int c, int d, int e]) { int sum = a; if (b != null) sum += b; if (c != null) sum += c; if (d != null) sum += d; if (e != null) sum += e; return sum; } // ... int total = sumUpToFive(1,2); int otherTotal = sumUpToFive(1, 2, 3, 4, 5); 可选的位置参数在函数的参数列表中总是最后一个。它们的默认值是空的，除非你提供了另一个默认值:\nint sumUpToFive(int a, [int b = 2, int c = 3, int d = 4, int e = 5]) { // ··· } // ··· int newTotal = sumUpToFive(1); print(newTotal); // \u0026lt;-- prints 15 代码示例 实现一个名为 joinWithCommas() 的函数，接受 1 到 5 个整数，然后返回一个用逗号分隔的数字字符串。下面是一些函数调用和返回值的例子:\n   函数调用 返回值     joinWithCommas(1) \u0026lsquo;1\u0026rsquo;   joinWithCommas(1, 2, 3) \u0026lsquo;1,2,3\u0026rsquo;   joinWithCommas(1, 1, 1, 1, 1) \u0026lsquo;1,1,1,1,1\u0026rsquo;    main() { var res = joinWithCommas(1,2,3,4); print(res); } String joinWithCommas(int a, [int b, int c, int d, int e]) { List\u0026lt;int\u0026gt; sum = []; sum.add(a); if (b != null) sum.add(b); if (c != null) sum.add(c); if (d != null) sum.add(d); if (e != null) sum.add(e); return sum.join(\u0026#39;,\u0026#39;); } 可选命名参数 使用大括号语法，你可以定义有名称的可选参数。\nvoid printName(String firstName, String lastName, {String suffix}) { print(\u0026#39;$firstName$lastName${suffix ?? \u0026#39;\u0026#39;}\u0026#39;); } // ··· printName(\u0026#39;Avinash\u0026#39;, \u0026#39;Gupta\u0026#39;); printName(\u0026#39;Poshmeister\u0026#39;, \u0026#39;Moneybuckets\u0026#39;, suffix: \u0026#39;IV\u0026#39;); 正如你所期望的，这些参数的值默认为空，但你可以提供默认值。\nvoid printName(String firstName, String lastName, {String suffix = \u0026#39;\u0026#39;}) { print(\u0026#39;$firstName$lastName$suffix\u0026#39;); } 一个函数不能同时拥有可选的位置参数和可选的命名参数。\n代码示例 为 MyDataObject 类添加一个 copyWith() 实例方法。它应该接受三个命名参数:\n int newInt String newString double newDouble  当调用时，copyWith() 应该基于当前实例返回一个新的 MyDataObject，并将前面参数（如果有的话）的数据复制到对象的属性中。例如，如果 newInt 是非空的，那么将其值复制到 anInt 中。\nclass MyDataObject { final int anInt; final String aString; final double aDouble; MyDataObject({ this.anInt = 1, this.aString = \u0026#39;Old!\u0026#39;, this.aDouble = 2.0, }); MyDataObject copyWith({int newInt, String newString, double newDouble}) { return MyDataObject( anInt: newInt ?? this.anInt, aString: newString ?? this.aString, aDouble: newDouble ?? this.aDouble, ); } } 异常 Dart 代码可以抛出和捕获异常。与 Java 相比，Dart 的所有异常都是未检查的异常。方法不声明它们可能会抛出哪些异常，你也不需要捕捉任何异常。\nDart 提供了 Exception 和 Error 类型，但你可以抛出任何非空对象:\nthrow Exception(\u0026#39;Something bad happened.\u0026#39;); throw \u0026#39;Waaaaaaah!\u0026#39;; 在处理异常时使用 try、on 和 catch 关键字:\ntry { breedMoreLlamas(); } on OutOfLlamasException { // A specific exception  buyMoreLlamas(); } on Exception catch (e) { // Anything else that is an exception  print(\u0026#39;Unknown exception: $e\u0026#39;); } catch (e) { // No specified type, handles all  print(\u0026#39;Something really unknown: $e\u0026#39;); } try 关键字的工作原理和其他大多数语言一样。使用 on 关键字按类型过滤特定的异常，使用 catch 关键字获取异常对象的引用。\n如果不能完全处理异常，可以使用 rethrow 关键字来传播异常:\ntry { breedMoreLlamas(); } catch (e) { print(\u0026#39;I was just trying to breed llamas!.\u0026#39;); rethrow; } 无论是否抛出异常，都要执行代码，使用 final:\ntry { breedMoreLlamas(); } catch (e) { // ... handle exception ... } finally { // Always clean up, even if an exception is thrown.  cleanLlamaStalls(); } 代码示例 实现下面的 tryFunction()。它应该执行一个不可信的方法，然后做如下操作:\n 如果 untrustworthy() 抛出一个 ExceptionWithMessage，调用 logger.logException，并提供异常类型和消息(尝试使用 on 和 catch)。 如果 untrustworthy() 抛出一个 Exception，调用 logger.logException，并注明异常类型(尝试使用 on)。 如果 untrustworthy() 抛出任何其他对象，不要捕获异常。 当所有的东西都被捕获和处理后，调用 logger.doneLogging(尝试使用 finally)。  typedef VoidFunction = void Function(); class ExceptionWithMessage { final String message; const ExceptionWithMessage(this.message); } abstract class Logger { void logException(Type t, [String msg]); void doneLogging(); } void tryFunction(VoidFunction untrustworthy, Logger logger) { try { untrustworthy(); } on ExceptionWithMessage catch (e) { logger.logException(e.runtimeType, e.message); } on Exception { logger.logException(Exception); } finally { logger.doneLogging(); } } 在构造函数中使用 this Dart 提供了一个方便的快捷方式来为构造函数中的属性赋值：在声明构造函数时使用 this.propertyName:\nclass MyColor { int red; int green; int blue; MyColor(this.red, this.green, this.blue) } final color = MyColor(80, 80, 128); 这种技术也适用于命名参数。属性名成为参数的名称:\nclass MyColor { ... MyColor({this.red, this.green, this.blue}); } final color = MyColor(red: 80, green: 80, blue: 80); 对于可选参数，默认值按预期工作:\nMyColor([this.red = 0, this.green = 0, this.blue = 0]); // or MyColor({this.red = 0, this.green = 0, this.blue = 0}); 代码示例 为 MyClass 添加一个单行构造函数，使用 this. 语法来接收和分配类的三个属性的值:\nclass MyClass { final int anInt; final String aString; final double aDouble; MyClass(this.anInt, this.aString, this.aDouble); } 初始化器列表 有时候，当你实现一个构造函数时，你需要在构造函数体执行之前做一些设置。例如，在构造函数体执行之前，final 字段必须有值。在一个初始化器列表中做这些工作，它位于构造函数的签名和它的主体之间。\nPoint.fromJson(Map\u0026lt;String, num\u0026gt; json) : x = json[\u0026#39;x\u0026#39;], y = json[\u0026#39;y\u0026#39;] { print(\u0026#39;In Point.fromJson(): ($x, $y)\u0026#39;); } 初始化器列表也是一个方便放置断言的地方，它只在开发过程中运行:\nNonNegativePoint(this.x, this.y) : assert(x \u0026gt;= 0), assert(y \u0026gt;= 0) { print(\u0026#39;I just made a NonNegativePoint: ($x, $y)\u0026#39;); } 代码示例 完成下面的 FirstTwoLetters 构造函数。使用初始化器列表将 word 中的前两个字符分配给 letterOne 和 LetterTwo 属性。为了获得额外的积分，可以添加一个断言来捕获少于两个字符的单词。\nclass FirstTwoLetters { final String letterOne; final String letterTwo; // Create a constructor with an initializer list here:  FirstTwoLetters(String word) : assert(word.length \u0026gt;=2), letterOne = word[0], letterTwo = word[1]; } 命名构造器 为了允许类有多个构造函数，Dart 支持命名构造函数:\nclass Point { double x, y; Point(this.x, this.y); Point.origin() { x = 0; y = 0; } } 要使用命名构造函数，请使用它的全名来调用它:\nfinal myPoint = Point.origin(); 代码示例 给 Color 类一个名为 Color.black 的构造函数，将三个属性都设置为 0。\nclass Color { int red; int green; int blue; Color(this.red, this.green, this.blue); Color.black() { red = 0; green = 0; blue = 0; } } 工厂构造函数 Dart 支持工厂构造函数，它可以返回子类型甚至 null。要创建一个工厂构造函数，请使用 factory 关键字:\nclass Square extends Shape {} class Circle extends Shape {} class Shape { Shape(); factory Shape.fromTypeName(String typeName) { if (typeName == \u0026#39;square\u0026#39;) return Square(); if (typeName == \u0026#39;circle\u0026#39;) return Circle(); print(\u0026#39;I don\\\u0026#39;t recognize $typeName\u0026#39;); return null } } 代码示例 填入名为 IntegerHolder.fromList 的工厂构造函数，使其做以下工作:\n 如果列表有一个值，就用这个值创建一个 IntegerSingle。 如果列表有两个值，则用该值依次创建一个 IntegerDouble。 如果列表有三个值，则按顺序创建一个 IntegerTriple。 否则，返回 null。  class IntegerHolder { IntegerHolder(); factory IntegerHolder.fromList(List\u0026lt;int\u0026gt; list) { if (list?.length == 1) { return IntegerSingle(list[0]); } else if (list?.length == 2) { return IntegerDouble(list[0], list[1]); } else if (list?.length == 3) { return IntegerTriple(list[0], list[1], list[2]); } else { return null; } } } class IntegerSingle extends IntegerHolder { final int a; IntegerSingle(this.a); } class IntegerDouble extends IntegerHolder { final int a; final int b; IntegerDouble(this.a, this.b); } class IntegerTriple extends IntegerHolder { final int a; final int b; final int c; IntegerTriple(this.a, this.b, this.c); } 重定向构造函数 有时，一个构造函数的唯一目的是重定向到同一类中的另一个构造函数。重定向构造函数的主体是空的，构造函数调用出现在冒号(:)之后。\nclass Automobile { String make; String model; int mpg; // 这个类的主构造函数  Automobile(this.make, this.model, this.mpg); // 代理到主构造函数  Automobile.hybrid(String make, String model) : this(make, model, 60); // 代理到命名构造函数  Automobile.fancyHybrid() : this.hybrid(\u0026#39;Futurecar\u0026#39;, \u0026#39;Mark 2\u0026#39;); } 代码示例 还记得上面的 Color 类吗？创建一个名为 black 的命名构造函数，但不是手动分配属性，而是将其重定向到默认构造函数，参数为 0。\nclass Color { int red; int green; int blue; Color(this.red, this.green, this.blue); Color.black() : this(0, 0, 0); } 常量构造函数 如果你的类产生的对象永远不会改变，你可以让这些对象成为编译时常量。要做到这一点，请定义一个 const 构造函数，并确保所有的实例变量都是最终变量。\nclass ImmutablePoint { const ImmutablePoint(this.x, this.y); final int x; final int y; static const ImmutablePoint origin = ImmutablePoint(0, 0); } 代码示例 修改 Recipe 类，使它的实例可以是常量，并创建一个常量构造函数，执行以下操作。\n 有三个参数： ingredients, calories 和 milligramsOfSodium(按顺序)。 使用 this. 语法，自动将参数值分配给同名的对象属性。 是常量，在构造函数声明中，const 关键字就在 Recipe 前面。  class Recipe { final List\u0026lt;String\u0026gt; ingredients; final int calories; final double milligramsOfSodium; const Recipe(this.ingredients, this.calories, this.milligramsOfSodium); } 下一步是什么？ 我们希望你喜欢使用这个 codelab 来学习或测试你对 Dart 语言一些最有趣的功能的知识。这里有一些关于现在要做什么的建议。\n 试试其他的 Dart 代码实验室. 阅读 Dart 语言之旅。 玩 DartPad。 获取 Dart SDK。  "},"name":"Dart 语言速查表","published":"2020-06-25T00:00:00+08:00","summary":"Dart速查表。","type":"entry","url":"https://ohmyweekly.github.io/notes/dart-cheatsheet-codelab/"},{"content":{"html":"\u003cp\u003e端午节快乐, 一起爬山吗？\u003c/p\u003e\n","text":"端午节快乐, 一起爬山吗？\n"},"name":"一起爬山吗?","published":"2020-06-25T00:00:00+08:00","summary":"端午佳节, 登高望远。","type":"entry","url":"https://ohmyweekly.github.io/notes/go-hiking/"}],"name":"programming","type":"feed","url":"https://ohmyweekly.github.io/categories/programming/"}