<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[Raku on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/categories/raku/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/categories/raku/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/categories/raku/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/categories/raku/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-06T20:48:33+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/categories/raku/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Learn Raku From Roast]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-06-05-learn-raku-from-roast/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-04-15-raku-multiple-dispatch-with-the-new-moarvm-dispatcher/?utm_source=atom_feed" rel="related" type="text/html" title="Raku Multiple Dispatch With the New MoarVM Dispatcher" />
                <link href="https://ohmyweekly.github.io/notes/2021-05-19-a-tour-of-rust-standard-library-traits/?utm_source=atom_feed" rel="related" type="text/html" title="Rust 的标准库 Trait 之旅" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-psql/?utm_source=atom_feed" rel="related" type="text/html" title="Psql" />
                <link href="https://ohmyweekly.github.io/notes/2021-03-15-towards-a-new-general-dispatch-mechanism-in-moarvm/?utm_source=atom_feed" rel="related" type="text/html" title="争取在 MoarVM 中建立一个新的总调度机制" />
                <link href="https://ohmyweekly.github.io/notes/2021-03-07-difference-between-build-and-tweak-in-raku/?utm_source=atom_feed" rel="related" type="text/html" title="BUILD 和 TWEAK 的区别" />
            
                <id>https://ohmyweekly.github.io/notes/2021-06-05-learn-raku-from-roast/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-06-05T00:00:00+08:00</published>
            <updated>2021-06-05T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Learn Raku From Roast</blockquote><p>Raku 的 <a href="https://github.com/Raku/roast">Roast</a> 仓库是一个测试套件, 我们可以从这个仓库中学习到很多 Raku 的知识。</p>
<h2 id="元运算符">元运算符</h2>
<ul>
<li>cross</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span> <span class="ow">X</span> <span class="p">&lt;</span><span class="s">c d</span><span class="p">&gt;</span>
<span class="c1"># Output: ((&#34;a&#34;, &#34;c&#34;), (&#34;a&#34;, &#34;d&#34;), (&#34;b&#34;, &#34;c&#34;), (&#34;b&#34;, &#34;d&#34;)).Seq</span>


<span class="n">dd</span> <span class="mi">1</span> <span class="ow">X</span> <span class="mi">1</span> <span class="ow">X</span> <span class="mi">1</span> <span class="ow">X</span> <span class="mi">1</span>
<span class="c1"># Output: ((1, 1, 1, 1),).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span> <span class="ow">X</span><span class="o">**</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span>
<span class="c1"># Output: 1, 1, 4, 16, 9, 81).Seq</span>


<span class="k">my</span> <span class="nv">@result</span> <span class="o">=</span> <span class="k">gather</span> <span class="p">{</span>
    <span class="k">for</span> <span class="mi">1</span><span class="o">..</span><span class="mi">3</span> <span class="ow">X</span> <span class="p">&#39;</span><span class="s1">a</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">b</span><span class="p">&#39;</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nv">$n</span><span class="o">,</span> <span class="nv">$a</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">take</span> <span class="p">&#34;</span><span class="nv">$n</span><span class="s2">|</span><span class="nv">$a</span><span class="p">&#34;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">dd</span> <span class="nv">@result</span><span class="p">;</span>
<span class="c1"># Output: Array @result = [&#34;1|a&#34;, &#34;1|b&#34;, &#34;2|a&#34;, &#34;2|b&#34;, &#34;3|a&#34;, &#34;3|b&#34;]</span>


<span class="k">my</span> <span class="nv">@result</span> <span class="o">=</span> <span class="k">gather</span> <span class="k">for</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">3</span> <span class="ow">X</span> <span class="p">&#39;</span><span class="s1">A</span><span class="p">&#39;</span><span class="o">..</span><span class="p">&#39;</span><span class="s1">B</span><span class="p">&#39;)</span> <span class="k">-&gt;</span> <span class="nv">$na</span> <span class="p">{</span>
    <span class="nb">take</span> <span class="nv">$na</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#39;</span><span class="s1">:</span><span class="p">&#39;);</span>
<span class="p">}</span>

<span class="n">dd</span> <span class="nv">@result</span><span class="p">;</span>
<span class="c1"># Output: Array @result = [&#34;1:A&#34;, &#34;1:B&#34;, &#34;2:A&#34;, &#34;2:B&#34;, &#34;3:A&#34;, &#34;3:B&#34;]</span>


<span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span> <span class="ow">X</span><span class="o">,</span> <span class="p">&lt;</span><span class="s">c d</span><span class="p">&gt;;</span>
<span class="c1"># Output: ((&#34;a&#34;, &#34;c&#34;), (&#34;a&#34;, &#34;d&#34;), (&#34;b&#34;, &#34;c&#34;), (&#34;b&#34;, &#34;d&#34;)).Seq</span>


<span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span> <span class="ow">X</span><span class="o">~</span> <span class="p">&lt;</span><span class="s">1 2</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;a1&#34;, &#34;a2&#34;, &#34;b1&#34;, &#34;b2&#34;).Seq</span>


<span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span> <span class="ow">X</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span><span class="mi">2</span> <span class="ow">X</span><span class="o">,</span> <span class="p">&lt;</span><span class="s">x y</span><span class="p">&gt;;</span>
<span class="c1"># Output: ((&#34;a&#34;, 1, &#34;x&#34;), (&#34;a&#34;, 1, &#34;y&#34;), (&#34;a&#34;, 2, &#34;x&#34;), (&#34;a&#34;, 2, &#34;y&#34;), (&#34;b&#34;, 1, &#34;x&#34;), (&#34;b&#34;, 1, &#34;y&#34;), (&#34;b&#34;, 2, &#34;x&#34;), (&#34;b&#34;, 2, &#34;y&#34;)).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span><span class="mi">2</span> <span class="ow">X</span><span class="o">*</span> <span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">;</span>
<span class="c1"># Output: (3, 4, 6, 8).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span><span class="mi">2</span> <span class="n">Xcmp</span> <span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">0</span><span class="p">;</span>
<span class="c1"># Output: (Order::Less, Order::Less, Order::More, Order::Less, Order::Same, Order::More).Seq</span>


<span class="n">dd</span> <span class="mi">1</span> <span class="ow">X</span><span class="o">*</span> <span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">;</span>
<span class="c1"># Output: (3, 4).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span> <span class="ow">X</span><span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
<span class="c1"># Output: (3, 6).Seq</span>


<span class="n">dd</span> <span class="mi">1</span> <span class="ow">X</span><span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
<span class="c1"># Output: (3,).Seq</span>


<span class="c1"># $[] does not flatten</span>
<span class="n">dd</span> <span class="nv">$</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">]</span> <span class="ow">X</span><span class="o">~</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span>
<span class="c1"># Output: (&#34;1 2a&#34;, &#34;1 2b&#34;).Seq</span>
</code></pre></div><ul>
<li>zip</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span> <span class="ow">Z</span> <span class="p">&lt;</span><span class="s">c d</span><span class="p">&gt;;</span>
<span class="c1"># Output: ((&#34;a&#34;, &#34;c&#34;), (&#34;b&#34;, &#34;d&#34;)).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span> <span class="ow">Z</span><span class="o">**</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="p">;</span>
<span class="c1"># Output: (1, 16).Seq</span>


<span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b</span><span class="p">&gt;</span> <span class="ow">Z</span><span class="o">~</span> <span class="p">&lt;</span><span class="s">1 2</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;a1&#34;, &#34;b2&#34;).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span><span class="mi">2</span> <span class="ow">Z</span><span class="o">*</span> <span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">;</span>
<span class="c1"># Output: (3, 8).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span><span class="mi">2</span> <span class="n">Zcmp</span> <span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">0</span><span class="p">;</span>
<span class="c1"># Output: (Order::Less, Order::Same).Seq</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">..*</span> <span class="ow">Z</span><span class="o">**</span> <span class="mi">1</span><span class="o">..*</span><span class="p">)</span><span class="o">.[^</span><span class="mi">5</span><span class="o">]</span><span class="p">;</span>
<span class="c1"># Output: (1, 4, 27, 256, 3125)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">..*</span> <span class="ow">Z</span><span class="o">+</span> <span class="p">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span> <span class="o">...</span> <span class="o">*</span><span class="p">))</span><span class="o">.[^</span><span class="mi">5</span><span class="o">]</span><span class="p">;</span>
<span class="c1"># Output: (4, 4, 4, 4, 4)</span>


<span class="n">dd</span> <span class="mi">1</span> <span class="ow">Z</span><span class="o">*</span> <span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">;</span>
<span class="c1"># Output: (3,).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span> <span class="ow">Z</span><span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
<span class="c1"># Output: (3,).Seq</span>


<span class="n">dd</span> <span class="mi">1</span> <span class="ow">Z</span><span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
<span class="c1"># Output: (3,).Seq</span>


<span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b c d</span><span class="p">&gt;</span> <span class="ow">Z</span> <span class="p">&#39;</span><span class="s1">x</span><span class="p">&#39;</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">z</span><span class="p">&#39;</span><span class="o">,</span> <span class="o">*</span><span class="p">;</span>
<span class="c1"># Output: ((&#34;a&#34;, &#34;x&#34;), (&#34;b&#34;, &#34;z&#34;), (&#34;c&#34;, &#34;z&#34;), (&#34;d&#34;, &#34;z&#34;)).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="o">*</span> <span class="ow">Z</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">50</span><span class="p">;</span>
<span class="c1"># Output: ((1, 10), (2, 20), (3, 30), (3, 40), (3, 50)).Seq</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="o">*</span> <span class="ow">Z</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="o">*</span><span class="p">)</span><span class="o">.[^</span><span class="mi">5</span><span class="o">]</span><span class="p">;</span>
<span class="c1"># Output: ((2, 3), (10, 4), (10, 5), (10, 5), (10, 5))</span>


<span class="n">dd</span> <span class="p">&lt;</span><span class="s">a b c d</span><span class="p">&gt;</span> <span class="ow">Z</span><span class="o">~</span> <span class="p">&#39;</span><span class="s1">x</span><span class="p">&#39;</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">z</span><span class="p">&#39;</span><span class="o">,</span> <span class="o">*</span><span class="p">;</span>
<span class="c1"># Output: (&#34;ax&#34;, &#34;bz&#34;, &#34;cz&#34;, &#34;dz&#34;).Seq</span>


<span class="n">dd</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="o">*</span> <span class="ow">Z</span><span class="o">+</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">50</span><span class="p">;</span>
<span class="c1"># Output: (11, 22, 33, 43, 53).Seq</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="o">*</span> <span class="ow">Z</span><span class="o">*</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="o">*</span><span class="p">)</span><span class="o">.[^</span><span class="mi">5</span><span class="o">]</span><span class="p">;</span>
<span class="c1"># Output: (6, 40, 50, 50, 50)</span>


<span class="n">dd</span> <span class="o">[</span><span class="ow">Z</span><span class="o">]</span><span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="p">;</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="p">;</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="p">);</span>
<span class="c1"># Output: ((1, 4, 7), (2, 5, 8), (3, 6, 9)).Seq</span>


<span class="n">dd</span> <span class="o">[</span><span class="ow">Z</span><span class="o">&lt;]</span><span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="p">;</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="p">;</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="p">);</span>
<span class="p">(</span><span class="nb">Bool</span><span class="o">:</span><span class="p">:</span><span class="s">True</span><span class="o">,</span> <span class="nb">Bool</span><span class="o">:</span><span class="p">:</span><span class="s">True</span><span class="o">,</span> <span class="nb">Bool</span><span class="o">:</span><span class="p">:</span><span class="s">True</span><span class="p">)</span><span class="o">.</span><span class="nb">Seq</span>
</code></pre></div><ul>
<li>hyper</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$a</span>      <span class="o">:=</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">$b</span>      <span class="o">:=</span> <span class="p">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">6</span><span class="p">);</span>


<span class="c1"># 以下表达式都输出  (3, 6, 9)</span>

<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&gt;&gt;+&lt;&lt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">»+«</span>  <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&gt;&gt;+&gt;&gt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">»+»</span>  <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&lt;</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">&gt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">«+»</span>  <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&lt;&lt;+&lt;&lt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">«+«</span>  <span class="nv">$b</span><span class="p">;</span>

<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&gt;&gt;[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]&lt;&lt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">»[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]«</span>  <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&gt;&gt;[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]&gt;&gt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">»[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]»</span>  <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&lt;&lt;[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]&gt;&gt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">«[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]»</span>  <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span> <span class="o">&lt;&lt;[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]&lt;&lt;</span> <span class="nv">$b</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">$a</span>  <span class="o">«[</span><span class="nv">&amp;infix:</span><span class="p">&lt;</span><span class="s">+</span><span class="p">&gt;</span><span class="o">]«</span>  <span class="nv">$b</span><span class="p">;</span>
</code></pre></div><p><code>»*«</code> 运算符的优先级比 <code>»+«</code> 运算符的优先级高:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">»+«</span> <span class="p">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">30</span><span class="p">)</span> <span class="o">»*«</span> <span class="p">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="p">);</span>
<span class="c1"># Output: (21, 62, 123)</span>
</code></pre></div><p>unary postfix(一元后缀运算符)</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">@r</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="nv">@r</span><span class="o">»++</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">@r</span><span class="p">;</span>
<span class="c1"># Output: Array @r = [2, 3, 4]</span>
</code></pre></div><p>unary prefix(一元前缀运算符)</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">@r</span><span class="p">;</span>
<span class="nv">@r</span> <span class="o">=</span> <span class="o">-«</span> <span class="p">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="n">dd</span> <span class="nv">@r</span><span class="p">;</span>
<span class="c1"># Output: Array @r = [-3, -2, -1]</span>
</code></pre></div><p>dimension upgrade(升维), auto dimension upgrade on rhs/lhs ASCII notation</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">@r</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&gt;&gt;+&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">@r</span><span class="p">;</span>
<span class="c1"># Output: Array @r = [2, 3, 4]</span>


<span class="k">my</span> <span class="nv">@r</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">&lt;&lt;*&lt;&lt;</span> <span class="p">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">30</span><span class="p">);</span>
<span class="n">dd</span> <span class="nv">@r</span><span class="p">;</span>
<span class="c1"># Output: Array @r = [20, 40, 60]</span>
</code></pre></div><p>both-dwim and non-dwim sanity:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">&lt;&lt;~&gt;&gt;</span> <span class="p">&lt;</span><span class="s">A B C D E</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;3C&#34;, &#34;1D&#34;, &#34;2E&#34;)</span>
</code></pre></div><p>extension(扩展)</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;~&gt;&gt;</span> <span class="p">&lt;</span><span class="s">A B C D E</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;3C&#34;, &#34;4D&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="p">)</span> <span class="o">&lt;&lt;~&lt;&lt;</span> <span class="p">&lt;</span><span class="s">A B C D</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;3C&#34;, &#34;4D&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;~&gt;&gt;</span> <span class="p">&lt;</span><span class="s">A B C</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;3C&#34;, &#34;4A&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">&lt;&lt;~&lt;&lt;</span> <span class="p">&lt;</span><span class="s">A B C D</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;3C&#34;, &#34;1D&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;~&gt;&gt;</span> <span class="p">&lt;</span><span class="s">A B</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;3A&#34;, &#34;4B&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;~&lt;&lt;</span> <span class="p">&lt;</span><span class="s">A B C D</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2B&#34;, &#34;1C&#34;, &#34;2D&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;~&gt;&gt;</span> <span class="p">&lt;</span><span class="s">A</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2A&#34;, &#34;3A&#34;, &#34;4A&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="p">)</span> <span class="o">&lt;&lt;~&lt;&lt;</span> <span class="p">&lt;</span><span class="s">A B C D</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;1B&#34;, &#34;1C&#34;, &#34;1D&#34;)</span>


<span class="n">dd</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;~&gt;&gt;</span> <span class="p">&#39;</span><span class="s1">A</span><span class="p">&#39;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;2A&#34;, &#34;3A&#34;, &#34;4A&#34;)</span>


<span class="n">dd</span> <span class="mi">1</span> <span class="o">&lt;&lt;~&lt;&lt;</span> <span class="p">&lt;</span><span class="s">A B C D</span><span class="p">&gt;;</span>
<span class="c1"># Output: (&#34;1A&#34;, &#34;1B&#34;, &#34;1C&#34;, &#34;1D&#34;)</span>
</code></pre></div><h2 id="枚举">枚举</h2>
<ul>
<li>匿名枚举</li>
</ul>
<p>匿名枚举返回一个 Map:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">$e</span> <span class="o">=</span> <span class="k">enum</span> <span class="p">&lt;</span><span class="s"> ook! ook. ook? </span><span class="p">&gt;;</span> <span class="c1"># Map.new((ook! =&gt; 0, ook. =&gt; 1, ook? =&gt; 2))</span>
<span class="nb">say</span> <span class="nv">$e</span><span class="o">.</span><span class="nb">keys</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span> <span class="c1">#  3</span>
<span class="nb">say</span> <span class="nv">$e</span><span class="p">&lt;</span><span class="s">ook!</span><span class="p">&gt;;</span>      <span class="c1">#  0</span>
<span class="nb">say</span> <span class="nv">$e</span><span class="p">&lt;</span><span class="s">ook.</span><span class="p">&gt;;</span>      <span class="c1">#  1</span>
<span class="nb">say</span> <span class="nv">$e</span><span class="p">&lt;</span><span class="s">ook?</span><span class="p">&gt;;</span>      <span class="c1">#  2 </span>
<span class="nb">say</span> <span class="nb">so</span> <span class="nv">$e</span> <span class="o">~~</span> <span class="nb">Map</span><span class="p">;</span>  <span class="c1">#  True</span>
<span class="nb">say</span> <span class="nv">$e</span><span class="o">.</span><span class="nb">keys</span><span class="p">;</span>       <span class="c1">#  (ook? ook! ook.)</span>
</code></pre></div><p><code>anon enum &lt;un&gt;</code> 等价于 <code>enum :: &lt;un&gt;</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">anon</span> <span class="k">enum</span> <span class="p">&lt;</span><span class="s">un</span><span class="p">&gt;;</span> <span class="c1">#  Map.new((un =&gt; 0))</span>
<span class="nb">say</span> <span class="o">+</span><span class="n">un</span><span class="p">;</span>        <span class="c1">#  0</span>

<span class="k">my</span> <span class="nv">%e</span> <span class="o">=</span> <span class="k">enum</span> <span class="o">::</span> <span class="p">&lt;</span><span class="s"> foo bar baz </span><span class="p">&gt;;</span> <span class="c1">#  {bar =&gt; 1, baz =&gt; 2, foo =&gt; 0}</span>
<span class="nb">say</span> <span class="nv">%e</span><span class="p">&lt;</span><span class="s">bar</span><span class="p">&gt;;</span> <span class="c1">#  1</span>
<span class="nb">say</span> <span class="n">baz</span><span class="p">;</span>     <span class="c1">#  baz</span>
<span class="nb">say</span> <span class="o">+</span><span class="n">baz</span><span class="p">;</span>    <span class="c1">#  2</span>
</code></pre></div><ul>
<li>枚举作为角色</li>
</ul>
<p>枚举可以用在 <code>but</code> 或 <code>does</code> 中, 用以命令一个想要的属性:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">enum</span> <span class="n">Maybe</span> <span class="p">&lt;</span><span class="s">No Yes Dunno</span><span class="p">&gt;;</span>
<span class="k">class</span> <span class="nc">Bar</span> <span class="p">{</span> <span class="p">}</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="k">does</span> <span class="nc">Maybe</span> <span class="p">{}</span>
<span class="k">my</span> <span class="nv">$x</span> <span class="o">=</span> <span class="n">Foo</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="s">Maybe</span> <span class="o">=&gt;</span> <span class="n">No</span><span class="p">);</span>

<span class="nb">say</span> <span class="nv">$x</span><span class="o">.</span><span class="nf">No</span><span class="p">;</span>    <span class="c1"># True</span>
<span class="nb">say</span> <span class="nv">$x</span><span class="o">.</span><span class="nf">Yes</span><span class="p">;</span>   <span class="c1"># False</span>
<span class="nb">say</span> <span class="nv">$x</span><span class="o">.</span><span class="nf">Dunno</span><span class="p">;</span> <span class="c1"># False</span>

<span class="k">my</span> <span class="nv">$y</span> <span class="o">=</span> <span class="n">Bar</span><span class="o">.</span><span class="nb">new</span><span class="p">()</span> <span class="k">does</span> <span class="nc">Maybe</span><span class="p">(</span><span class="n">Yes</span><span class="p">);</span>
<span class="nb">say</span> <span class="nv">$y</span><span class="o">.</span><span class="nf">Yes</span><span class="p">;</span>   <span class="c1"># True</span>
<span class="nb">say</span> <span class="nv">$y</span><span class="o">.</span><span class="nf">No</span><span class="p">;</span>    <span class="c1"># False</span>
<span class="nb">say</span> <span class="nv">$y</span><span class="o">.</span><span class="nf">Dunno</span><span class="p">;</span> <span class="c1"># False</span>


<span class="k">my</span> <span class="nv">$z</span> <span class="o">=</span> <span class="n">Bar</span><span class="o">.</span><span class="nb">new</span><span class="p">()</span> <span class="k">but</span> <span class="nc">Maybe</span><span class="p">(</span><span class="n">Dunno</span><span class="p">);</span>
<span class="nb">say</span> <span class="nv">$z</span><span class="o">.</span><span class="nf">No</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$z</span><span class="o">.</span><span class="nf">Yes</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$z</span><span class="o">.</span><span class="nf">Dunno</span><span class="p">;</span>
</code></pre></div><h2 id="属性">属性</h2>
<ul>
<li>代理</li>
</ul>
<p>官方文档关于 <a href="https://docs.raku.org/routine/handles">handles</a> 的介绍很粗糙, 看完依然不知道怎么使用。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku-roast" term="raku-roast" label="Raku roast" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[BUILD 和 TWEAK 的区别]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-03-07-difference-between-build-and-tweak-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-03-01-how-to-type-unicode-in-raku/?utm_source=atom_feed" rel="related" type="text/html" title="如何在 Raku 中输入 Unicode" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-17-method-isd/?utm_source=atom_feed" rel="related" type="text/html" title="Method-ish" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/?utm_source=atom_feed" rel="related" type="text/html" title="模式分派" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-custom-when/?utm_source=atom_feed" rel="related" type="text/html" title="自定义 when" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/?utm_source=atom_feed" rel="related" type="text/html" title="为最年轻的 Raku 贡献力量" />
            
                <id>https://ohmyweekly.github.io/notes/2021-03-07-difference-between-build-and-tweak-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-03-07T00:00:00+08:00</published>
            <updated>2021-03-07T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Difference Between Build and Tweak in Raku</blockquote><div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Student</span> <span class="p">{</span>
    <span class="k">has</span> <span class="nv">$.name</span><span class="p">;</span>
    <span class="k">has</span> <span class="nv">$.sex</span><span class="p">;</span>
    <span class="k">has</span> <span class="nv">$!age</span><span class="p">;</span>

    <span class="k">method</span> <span class="nb">BUILD</span><span class="p">(</span><span class="o">:</span><span class="nv">$!name</span><span class="p">)</span> <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$stu</span> <span class="o">=</span> <span class="n">Student</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">赵今麦</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">sex</span><span class="p">(&#39;</span><span class="s1">女</span><span class="p">&#39;));</span>
<span class="n">dd</span> <span class="nv">$stu</span><span class="p">;</span>
<span class="c1"># Student $stu = Student.new(name =&gt; &#34;赵今麦&#34;, sex =&gt; Any)</span>
</code></pre></div><p>如果你加上 <code>BUILD</code> 方法, 你必须自己全权负责设置所有的东西。也就是既包括公共属性, 也包括私有属性。</p>
<p>但你可以通过巧妙地命名参数来让你的生活更轻松。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">method</span> <span class="nb">BUILD</span> <span class="p">(</span><span class="o">:</span><span class="nv">$!name</span><span class="o">,</span> <span class="o">:</span><span class="nv">$!sex</span><span class="o">,</span> <span class="o">:</span><span class="nv">$!age</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div><p><code>BUILD</code> 方法可以初始化私有属性:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Student</span> <span class="p">{</span>
    <span class="k">has</span> <span class="nv">$.name</span><span class="p">;</span>
    <span class="k">has</span> <span class="nv">$.sex</span><span class="p">;</span>
    <span class="k">has</span> <span class="nv">$!age</span><span class="p">;</span>

    <span class="k">method</span> <span class="nb">BUILD</span><span class="p">(</span><span class="o">:</span><span class="nv">$name</span><span class="o">,</span> <span class="o">:</span><span class="nv">$sex</span><span class="o">,</span> <span class="o">:</span><span class="nv">$age</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$!name</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
        <span class="nv">$!sex</span> <span class="o">=</span> <span class="nv">$sex</span><span class="p">;</span>
        <span class="nv">$!age</span> <span class="o">=</span> <span class="nv">$age</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">heart</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&#39;</span><span class="s1">♥ </span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$!age</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$stu</span> <span class="o">=</span> <span class="n">Student</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">赵今麦</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">sex</span><span class="p">(&#39;</span><span class="s1">女</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">age</span><span class="p">(</span><span class="mi">18</span><span class="p">));</span>
<span class="n">dd</span> <span class="nv">$stu</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$stu</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$stu</span><span class="o">.</span><span class="nf">heart</span><span class="p">();</span> 
</code></pre></div><p>也可以在 TWEAK 方法中初始化私有属性:</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Student</span> <span class="p">{</span>
    <span class="k">has</span> <span class="nv">$.name</span><span class="p">;</span>
    <span class="k">has</span> <span class="nv">$.sex</span><span class="p">;</span>
    <span class="k">has</span> <span class="nv">$!age</span><span class="p">;</span>

    <span class="k">method</span> <span class="nb">TWEAK</span><span class="p">(</span><span class="o">:</span><span class="nv">$name</span><span class="o">,</span> <span class="o">:</span><span class="nv">$sex</span><span class="o">,</span> <span class="o">:</span><span class="nv">$age</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$!age</span> <span class="o">=</span> <span class="nv">$age</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">method</span> <span class="nf">heart</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&#39;</span><span class="s1">♥</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$!age</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$stu</span> <span class="o">=</span> <span class="n">Student</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">(&#39;</span><span class="s1">赵今麦</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">sex</span><span class="p">(&#39;</span><span class="s1">女</span><span class="p">&#39;)</span><span class="o">,</span> <span class="p">:</span><span class="s">age</span><span class="p">(</span><span class="mi">18</span><span class="p">));</span>
<span class="n">dd</span> <span class="nv">$stu</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$stu</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$stu</span><span class="o">.</span><span class="nf">heart</span><span class="p">();</span> 
</code></pre></div><p>使用 <code>TWEAK</code>，你会得到与 <code>BUILD</code> 相同的参数，但所有的初始设置都已经完成了（<code>BUILD</code> 或公共属性的自动绑定，以及所有的默认值，再加上保证所需值的存在）。你只是有机会做一些最后的调整。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/build" term="build" label="BUILD" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/tweak" term="tweak" label="TWEAK" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/object" term="object" label="Object" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[如何在 Raku 中输入 Unicode]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-03-01-how-to-type-unicode-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-02-17-method-isd/?utm_source=atom_feed" rel="related" type="text/html" title="Method-ish" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/?utm_source=atom_feed" rel="related" type="text/html" title="模式分派" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-custom-when/?utm_source=atom_feed" rel="related" type="text/html" title="自定义 when" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/?utm_source=atom_feed" rel="related" type="text/html" title="为最年轻的 Raku 贡献力量" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/?utm_source=atom_feed" rel="related" type="text/html" title="Caesarean Substrings With Raku and Perl" />
            
                <id>https://ohmyweekly.github.io/notes/2021-03-01-how-to-type-unicode-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-03-01T00:00:00+08:00</published>
            <updated>2021-03-01T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>How to Type Unicode in Raku</blockquote><p>Raku 有非常好的 Unicode 支持, 但是输入 Unicode 一直是一个很大的问题。在 REPL 中, 输入 Unicode 都不太方便。下面介绍几种方法来方便地输入 Unicode。</p>
<h1 id="comma">Comma</h1>
<p>最方便的是使用 Raku 自己的 IDE, <a href="http://commaide.com">Comma</a>。但是需要做两个设置:</p>
<p>首先, 切换到 Comma IDE, 点击左上角菜单栏的 <strong>Comma</strong> 选项, 在弹出的 <strong>Preference</strong> 窗口中, 找到左侧菜单栏中的 <strong>Editor</strong> 选项, 点击 <strong>Code Style</strong> 中的 <strong>Raku</strong>, 在右侧的窗口的最上面, 找到 <strong>Schema</strong> 一行, 点击倒三角图标, 在下拉菜单中选择 <strong>Project</strong>。然后在第二行文字中找到 <strong>Editor Behavior</strong>, 勾选 <strong>Convert operators to Unicode</strong>。完成后点击右下角的 <strong>Apply</strong>, 然后点击 <strong>OK</strong>。</p>
<p>这样当你在 Comma 中键入 <code>&gt;&gt;</code> 这样的运算符后, Comma 会自动把它转为 Unicode 形式的 <code>»</code>。目前已支持大部分 Unicode 运算符了。Comma 是跨平台的 Raku 编辑器, 支持 Windows、Linux 和 MacOS, 所以你想跨平台开发的话, Comma 值得一试。</p>
<h1 id="kitty">Kitty</h1>
<p>如果你想在 Vim 中开发 Raku, 又不想失去输入 Unicode 的乐趣, 请使用 <a href="https://github.com/kovidgoyal/kitty">Kitty</a> 终端。点开 Kitty 终端, 使用快捷键 Ctrl + Shift + U 即可触发输入 Unnicode 的界面(也可以键入命令 kitty +kitten unicode_input 来触发)。再通过快捷键  F1、F2、F3 和 F4 (或通过 Ctrl+[ 和 Ctrl+] 切换标签)可以分别按代码搜索 Unicode、按名字搜索 Unicode、按表情搜索和收藏。</p>
<p>例如在 REPL 中键入 Unicode 字符:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ raku
Welcome to 𝐑𝐚𝐤𝐮𝐝𝐨™ v2021.02.
Implementing the 𝐑𝐚𝐤𝐮™ programming language v6.d.
Built on MoarVM version 2021.02.

To <span class="nb">exit</span> <span class="nb">type</span> <span class="s1">&#39;exit&#39;</span> or <span class="s1">&#39;^D&#39;</span>
&gt; my @a <span class="o">=</span> 1..5<span class="p">;</span>
&gt; @a».sin
</code></pre></div><p>借助 Kitty, 数组 <code>@a</code> 后面的 <code>»</code> 可以这样输入, 先输入 <code>@a</code>, 然后使用快捷键 Shift + Ctrl + U 调出 Kitty 的 <strong>Unicode input</strong> 界面, 一般有两种方法, 第一种是通过快捷键 F1, 然后输入对应的 Unicode 编码, 再回车。第二种是通过快捷键 F2, 通过名字搜索, 例如输入单词 quota, 会出现一堆引号符号供你选择, 按上下方向键选中 <code>»</code>, 再回车即可。Vim 中同理。</p>
<h1 id="julia-repl">Julia REPL</h1>
<p>在 REPL 中输入 <code>\′ + 单词 + Tab, 例如输入 </code>\heartsuit` 再按 Tab, 就会自动变成 ♡</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">julia&gt; <span class="se">\h</span>eartsuit
</code></pre></div><h1 id="ipython">IPython</h1>
<p><code>\^</code> 输入上标, <code>\_p</code> 输入下标。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ ipython
<span class="se">\^</span>a
<span class="se">\_</span>p
</code></pre></div><h1 id="vscode">VScode</h1>
<p><code>\\′ + 完整的单词 + Tab, VsCode 会自动转换为 Unicode。 例如 </code>^a<code>和</code>_p`</p>
<h1 id="dmenu">dmenu</h1>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="ch">#!/usr/bin/perl</span>

<span class="c1">#use strict;</span>
<span class="c1">#use warnings;</span>
<span class="c1">#use autodie;</span>
<span class="c1">#use utf8;</span>


<span class="nb">open</span> <span class="nv">$FH</span><span class="p">,</span> <span class="s">&#34; | dmenu -i -l 30 -fn &#39;-xos4-terminus-medium-r-*-*-10-*&#39; | sed &#39;s/^\\(.\\).*/\\1/&#39; | tr -d &#39;\n&#39; | { pbcopy; pbpaste; } &#34;</span><span class="p">;</span>

<span class="c1"># if you do not have the xos4-terminus font that makes characters a little bigger :</span>
<span class="c1"># uncoment this line and use the second here document</span>
<span class="c1">#open $FH, &#34; | dmenu -i -l 30 | sed &#39;s/^\\(.\\).*/\\1/&#39; | tr -d &#39;\n&#39; | { xsel -ib; xsel -ip; } &#34;;</span>

<span class="c1"># also you can compile dmenu from source and change the font size directly in the C done</span>
<span class="c1"># in the file config.h / config.def.h</span>

<span class="c1"># this heredoc is well aligned with the -xos4-terminus-medium-r-*-*-10-* font</span>

<span class="k">print</span> <span class="nv">$FH</span> <span class="s">&lt;&lt;&#39;</span><span class="dl">EOF</span><span class="s">&#39;
</span><span class="s">«         hyper operator
</span><span class="s">»         hyper operator
</span><span class="s">∈        membership
</span><span class="s">∉        non-membership
</span><span class="s">∪         set union
</span><span class="s">∩         set intersection
</span><span class="s">∖         set difference
</span><span class="s">≡         set equality
</span><span class="s">≢        set inequality
</span><span class="s">⊖        symmetric set difference
</span><span class="s">⊍         baggy multiplication
</span><span class="s">⊎         baggy addition
</span><span class="s">∅        empty set
</span><span class="s">⊆        subset
</span><span class="s">⊈         not a subset
</span><span class="s">⊂        strict subset
</span><span class="s">⊄        not a strict subset
</span><span class="s">∋        reverse membership
</span><span class="s">∌          reverse non-membership
</span><span class="s">⊇        superset
</span><span class="s">⊉         not a superset
</span><span class="s">⊃        strict superset
</span><span class="s">⊅        not a strict superset
</span><span class="s">∞         infinity
</span><span class="s">⚛        atomic operator
</span><span class="s">π        pi
</span><span class="s">τ         tau
</span><span class="s">𝑒         Euler&#39;s number
</span><span class="s">∘         function composition
</span><span class="s">×        multiplication 
</span><span class="s">÷        division
</span><span class="s">≤         inferior or equal
</span><span class="s">≥         greater or equal
</span><span class="s">≠   	     inequality
</span><span class="s">−        substraction
</span><span class="s">≅       approximatively equal
</span><span class="s">…      sequence operator
</span><span class="s">‘         left single quotation mark
</span><span class="s">’         right single quotation mark
</span><span class="s">‚         single low-9 quotation mark 
</span><span class="s">”         right double quotation mark
</span><span class="s">“         left double quotation mark
</span><span class="s">„         double low-9 quotation mark
</span><span class="s">｢         halfwidth left corner bracket
</span><span class="s">｣         halfwidth right corner bracket
</span><span class="s">⁺         plus superscript
</span><span class="s">⁻         minus superscript
</span><span class="s">⁰         0 superscript
</span><span class="s">¹         1 superscript 
</span><span class="s">²         2 superscript 
</span><span class="s">³         3 superscript 
</span><span class="s">⁴         4 superscript 
</span><span class="s">⁵         5 superscript 
</span><span class="s">⁶         6 superscript 
</span><span class="s">⁷         7 superscript 
</span><span class="s">⁸         8 superscript 
</span><span class="s">⁹         9 superscript 
</span><span class="s"></span><span class="dl">EOF</span>
<span class="p">;</span>

<span class="c1"># use this without -xos4-terminus-medium-r-*-*-10-* font</span>
<span class="c1"># the default font may change given which font packages are installed and given the font configurations</span>

<span class="c1">#print $FH &lt;&lt;&#39;EOF&#39;</span>
<span class="c1">#«         hyper operator</span>
<span class="c1">#»         hyper operator</span>
<span class="c1">#∈         membership</span>
<span class="c1">#∉         non-membership</span>
<span class="c1">#∪         set union</span>
<span class="c1">#∩         set intersection</span>
<span class="c1">#∖         set difference</span>
<span class="c1">#≡         set equality</span>
<span class="c1">#≢         set inequality</span>
<span class="c1">#⊖         symmetric set difference</span>
<span class="c1">#⊍         baggy multiplication</span>
<span class="c1">#⊎         baggy addition</span>
<span class="c1">#∅         empty set</span>
<span class="c1">#⊆         subset</span>
<span class="c1">#⊈         not a subset</span>
<span class="c1">#⊂         strict subset</span>
<span class="c1">#⊄         not a strict subset</span>
<span class="c1">#∋         reverse membership</span>
<span class="c1">#∌         reverse non-membership</span>
<span class="c1">#⊇         superset</span>
<span class="c1">#⊉         not a superset</span>
<span class="c1">#⊃         strict superset</span>
<span class="c1">#⊅         not a strict superset</span>
<span class="c1">#∞         infinity</span>
<span class="c1">#⚛         atomic operator</span>
<span class="c1">#π         pi</span>
<span class="c1">#τ         tau</span>
<span class="c1">#𝑒         Euler&#39;s number</span>
<span class="c1">#∘         function composition</span>
<span class="c1">#×         multiplication </span>
<span class="c1">#÷         division</span>
<span class="c1">#≤         inferior or equal</span>
<span class="c1">#≥         greater or equal</span>
<span class="c1">#≠         inequality</span>
<span class="c1">#−         substraction</span>
<span class="c1">#≅         approximatively equal</span>
<span class="c1">#…         sequence operator</span>
<span class="c1">#‘         left single quotation mark</span>
<span class="c1">#’         right single quotation mark</span>
<span class="c1">#‚         single low-9 quotation mark </span>
<span class="c1">#”         right double quotation mark</span>
<span class="c1">#“         left double quotation mark</span>
<span class="c1">#„         double low-9 quotation mark</span>
<span class="c1">#｢         halfwidth left corner bracket</span>
<span class="c1">#｣         halfwidth right corner bracket</span>
<span class="c1">#⁺         plus superscript</span>
<span class="c1">#⁻         minus superscript</span>
<span class="c1">#⁰         0 superscript</span>
<span class="c1">#¹         1 superscript </span>
<span class="c1">#²         2 superscript </span>
<span class="c1">#³         3 superscript </span>
<span class="c1">#⁴         4 superscript </span>
<span class="c1">#⁵         5 superscript </span>
<span class="c1">#⁶         6 superscript </span>
<span class="c1">#⁷         7 superscript </span>
<span class="c1">#⁸         8 superscript </span>
<span class="c1">#⁹         9 superscript </span>
<span class="c1">#EOF</span>
<span class="c1">#;</span>



<span class="nb">close</span> <span class="nv">$FH</span><span class="p">;</span>



<span class="cp">__END__
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">=pod 
</span><span class="cp">
</span><span class="cp">=head1 NAME
</span><span class="cp">
</span><span class="cp">lazy_raku_unicode.pl
</span><span class="cp">
</span><span class="cp">=head1 SYNOPSIS
</span><span class="cp">
</span><span class="cp">This script allows you to select a Unicode symbol from a drop-down menu that you can simply paste into your text editor, terminal or IDE.
</span><span class="cp">
</span><span class="cp">All it does is send a heredoc through a pipe to dmenu, and copy to the clipboard the character that you selected.
</span><span class="cp">
</span><span class="cp">Dmenu is a program that reads lines from stdin, display them in a menu, and write to stdout the lines selected.
</span><span class="cp">
</span><span class="cp">It is not practical to execute this script from a terminal each time you want a character though. This is why it should be executed by sxhkd.
</span><span class="cp">
</span><span class="cp">Sxhkd is the program that will call this script each time you press the right key combination.
</span><span class="cp">
</span><span class="cp">Only the most useful Unicode characters are present to not make dmenu get too slow. (It is usually very fast when there is only ascii text.)
</span><span class="cp">
</span><span class="cp">This include most of the Raku operators that have a Unicode version, plus some quoting characters, superscripts, and mathematical constants.
</span><span class="cp">
</span><span class="cp">=head1 MANUAL INSTALLATION STEPS
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">=head2 INSTALLING DMENU
</span><span class="cp">
</span><span class="cp">B&lt;On Debian or Ubuntu :&gt;
</span><span class="cp">
</span><span class="cp">	sudo apt install suckless-tools
</span><span class="cp">
</span><span class="cp">B&lt;On Archlinux :&gt;
</span><span class="cp">
</span><span class="cp">	sudo pacman -Sy dmenu
</span><span class="cp">
</span><span class="cp">B&lt;Compile it from source :&gt;
</span><span class="cp">
</span><span class="cp">	https://tools.suckless.org/dmenu/
</span><span class="cp">
</span><span class="cp">=head2 CHANGING DMENU FONT SIZE (OPTIIONAL)
</span><span class="cp">
</span><span class="cp">You have only two ways of changing the font size :
</span><span class="cp">
</span><span class="cp">Change the default font with the B&lt;-fn&gt; flag (See dmenu(1) for the specifics).
</span><span class="cp">	
</span><span class="cp">	dmenu -l 30 -fn &#39;-xos4-terminus-medium-r-*-*-10-*&#39;
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">Modify directly the C source code of dmenu. Only the files B&lt;config.h / config.def.h&gt;.
</span><span class="cp">
</span><span class="cp">Simply edit this line and change 10 by 14 for example.
</span><span class="cp">
</span><span class="cp">	static const char *fonts[] = {
</span><span class="cp">		&#34;monospace:size=10&#34;
</span><span class="cp">	};
</span><span class="cp">
</span><span class="cp">Then execute sudo make install and you&#39;re ready to go.
</span><span class="cp">
</span><span class="cp">=head2 INSTALLING SXHKD
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">B&lt;On Debian or Ubuntu :&gt;
</span><span class="cp">
</span><span class="cp">	sudo apt install sxhkd
</span><span class="cp">
</span><span class="cp">B&lt;On Archlinux :&gt;
</span><span class="cp">
</span><span class="cp">	sudo pacman -Sy sxhkd
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">=head2 CONFIGURING SXHKD
</span><span class="cp">
</span><span class="cp">B&lt;Autostarting sxhkd at startup :&gt;
</span><span class="cp">
</span><span class="cp">simply put this line in B&lt;~/.xprofile&gt; :
</span><span class="cp">
</span><span class="cp">	sxhkd &amp;
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">B&lt;Setting the keybinding :&gt;
</span><span class="cp">	
</span><span class="cp">
</span><span class="cp">Add these two lines in B&lt;~/.config/sxhkd/sxhkdrc&gt;
</span><span class="cp">
</span><span class="cp">	ctrl + apostrophe
</span><span class="cp">		/path/to/lazy_raku_unicode.pl
</span><span class="cp">
</span><span class="cp">The keybinding have to start at the beginning of a line, and the command has to follow on the next line and be preceded by a tabulation.
</span><span class="cp">
</span><span class="cp">To make sxhkd reload the config file, either kill it and relaunch it, or send a SIGUSR1 signal. This command can do it :
</span><span class="cp">
</span><span class="cp">	pidof sxhkd | kill -SIGUSR1 $(cat /dev/stdin)
</span><span class="cp">
</span><span class="cp">If you want to use a different keybinding, please see sxhkd(1) and use xev(1) to find the name of keys.
</span><span class="cp">
</span><span class="cp">Here the name of some of the keys : ctrl, super, alt, Return .
</span><span class="cp">
</span><span class="cp">=head1 SEE ALSO
</span><span class="cp">
</span><span class="cp">dmenu(1), sxhkd(1), xev(1)
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">=cut
</span></code></pre></div><p>参考链接: <a href="https://docs.raku.org/language/unicode_entry">https://docs.raku.org/language/unicode_entry</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/unicode" term="unicode" label="Unicode" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Method-ish]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-02-17-method-isd/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/?utm_source=atom_feed" rel="related" type="text/html" title="模式分派" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-custom-when/?utm_source=atom_feed" rel="related" type="text/html" title="自定义 when" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/?utm_source=atom_feed" rel="related" type="text/html" title="为最年轻的 Raku 贡献力量" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/?utm_source=atom_feed" rel="related" type="text/html" title="Caesarean Substrings With Raku and Perl" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/?utm_source=atom_feed" rel="related" type="text/html" title="如果集合如我所想" />
            
                <id>https://ohmyweekly.github.io/notes/2021-02-17-method-isd/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-02-28T00:00:00+08:00</published>
            <updated>2021-02-28T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Method-ish</blockquote><p>在我的上一篇文章中，我又一次为从 CORE 中增强类的方法而苦恼。这种挣扎完全没有必要，因为我并没有用增加的方法改变对象的状态。对于做更高级的东西，我可能不得不这样做。把手伸进 Raku 的内部这么深，我可能会把自己烫伤。既然我想做的是把我的代码绑在编译器的变化上，反正我可能会全身心地投入到 nqp-land 中去。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">\j</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">|</span> <span class="mi">2</span> <span class="o">|</span> <span class="mi">3</span><span class="p">;</span>
<span class="n">dd</span> <span class="n">j</span><span class="p">;</span>
<span class="k">use</span> <span class="nb">nqp</span><span class="p">;</span>
<span class="o">.</span><span class="nb">say</span> <span class="k">for</span> <span class="nf">nqp::getattr</span><span class="p">(</span><span class="n">j</span><span class="o">,</span> <span class="nb">Junction</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">$!eigenstates</span><span class="p">&#39;);</span>
<span class="c1"># OUTPUT: any(1, 2, 3)</span>
          <span class="mi">1</span>
          <span class="mi">2</span>
          <span class="mi">3</span>
</code></pre></div><p>我们可以使用 nqp 来获取私有属性，而不需要添加任何方法。这就有点儿不伦不类了。所以，让我们用一个伪方法来做一些 deboilerplating。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">pry</span><span class="p">(</span><span class="nb">Mu</span> <span class="nv">$the-object</span> <span class="k">is</span> <span class="k">raw</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">use</span> <span class="nn">InterceptAllMethods</span><span class="p">;</span>

    <span class="k">class</span> <span class="nc">Interceptor</span> <span class="p">{</span>
        <span class="k">has</span> <span class="nb">Mu</span> <span class="nv">$!the-object</span><span class="p">;</span>
        <span class="k">method</span> <span class="o">^</span><span class="nb">find_method</span><span class="p">(</span><span class="nb">Mu</span> \<span class="nb">type</span><span class="o">,</span> <span class="nb">Str</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">my</span> <span class="k">method</span> <span class="p">(</span><span class="nb">Mu</span> \<span class="n">SELF:</span><span class="p">)</span> <span class="k">is</span> <span class="k">raw</span> <span class="p">{</span>
                <span class="k">use</span> <span class="nb">nqp</span><span class="p">;</span>
                <span class="k">my</span> <span class="nv">$the-object</span> <span class="o">:=</span> <span class="nf">nqp::getattr</span><span class="p">(</span><span class="n">SELF</span><span class="o">,</span> <span class="n">Interceptor</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">$!the-object</span><span class="p">&#39;);</span>
                <span class="nf">nqp::getattr</span><span class="p">(</span><span class="nv">$the-object</span><span class="o">,</span> <span class="nv">$the-object</span><span class="o">.</span><span class="nb">WHAT</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">$!</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$name</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">use</span> <span class="nb">nqp</span><span class="p">;</span>
    <span class="nf">nqp::p6bindattrinvres</span><span class="p">(</span><span class="nf">nqp::create</span><span class="p">(</span><span class="n">Interceptor</span><span class="p">)</span><span class="o">,</span> <span class="n">Interceptor</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">$!the-object</span><span class="p">&#39;</span><span class="o">,</span> <span class="nv">$the-object</span><span class="p">);</span>
<span class="p">}</span>

<span class="o">.</span><span class="nb">say</span> <span class="k">for</span> <span class="n">j</span><span class="o">.&amp;</span><span class="nf">pry</span><span class="o">.</span><span class="nf">eigenstates</span><span class="p">;</span>
<span class="c1"># OUTPUT: 1</span>
          <span class="mi">2</span>
          <span class="mi">3</span>
</code></pre></div><p>通过 InterceptAllMethods，lizmat 改变了类关键字的行为，允许我们提供一个 FALLBACK-method 来捕获任何方法，包括从 Mu 继承的方法。这反过来又允许 pry 返回的对象将任何方法调用转移到一个自定义的方法。在这个方法中，我们可以对 <code>.&amp;pry</code> 被调用的对象做任何我们想做的事情。</p>
<p>由于我们的特殊对象会拦截任何调用，甚至是 Mu 的调用，我们需要找到另一种方法来调用 <code>.new</code>。由于 <code>.^</code> 不是 <code>.</code> 的特殊形式，我们可以用它来获得对类方法的访问。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">interceptor</span><span class="p">(</span><span class="nb">Method</span> <span class="nv">$the-method</span><span class="p">){</span>
    <span class="k">use</span> <span class="nn">InterceptAllMethods</span><span class="p">;</span>
    <span class="k">use</span> <span class="nb">nqp</span><span class="p">;</span>

    <span class="k">sub</span> <span class="p">(</span><span class="nb">Mu</span> <span class="nv">$the-object</span> <span class="k">is</span> <span class="k">raw</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">my</span> <span class="k">class</span> <span class="nc">Interceptor</span> <span class="p">{</span>
            <span class="k">has</span> <span class="nb">Mu</span> <span class="nv">$!the-object</span><span class="p">;</span>
            <span class="k">has</span> <span class="nb">Code</span> <span class="nv">$!the-method</span><span class="p">;</span>

            <span class="k">method</span> <span class="o">^</span><span class="nb">find_method</span><span class="p">(</span><span class="nb">Mu</span> \<span class="nb">type</span><span class="o">,</span> <span class="nb">Mu:D</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">my</span> <span class="k">method</span> <span class="p">(</span><span class="nb">Mu</span> \<span class="n">SELF:</span> <span class="o">|</span><span class="n">c</span><span class="p">)</span> <span class="k">is</span> <span class="k">raw</span> <span class="p">{</span>
                    <span class="nv">$!the-method</span><span class="o">.</span><span class="p">(</span><span class="nv">$!the-object</span><span class="o">,</span> <span class="nv">$name</span><span class="o">,</span> <span class="o">|</span><span class="n">c</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">method</span> <span class="o">^</span><span class="nf">introspect</span><span class="p">(</span><span class="nb">Mu</span> \<span class="nb">type</span><span class="o">,</span> <span class="nb">Mu</span> \<span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">my</span> <span class="k">method</span> <span class="nf">call-it</span><span class="p">()</span> <span class="k">is</span> <span class="k">raw</span> <span class="p">{</span>
                    <span class="nv">$!the-object</span>
                <span class="p">}</span>
                <span class="n">obj</span><span class="o">.&amp;</span><span class="nf">call-it</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">method</span> <span class="o">^</span><span class="nb">new</span><span class="p">(</span><span class="nb">Mu</span> \<span class="nb">type</span><span class="o">,</span> <span class="nv">$the-object</span><span class="o">!,</span> <span class="nv">$the-method</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">nqp::p6bindattrinvres</span><span class="p">(</span>
                        <span class="nf">nqp::p6bindattrinvres</span><span class="p">(</span><span class="nf">nqp::create</span><span class="p">(</span><span class="n">Interceptor</span><span class="p">)</span><span class="o">,</span> <span class="n">Interceptor</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">$!the-object</span><span class="p">&#39;</span><span class="o">,</span> <span class="nv">$the-object</span><span class="p">)</span><span class="o">,</span>
                        <span class="n">Interceptor</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">$!the-method</span><span class="p">&#39;</span><span class="o">,</span> <span class="nv">$the-method</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

            <span class="c1"># nqp::p6bindattrinvres(</span>
                <span class="c1">#     nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, &#39;$!the-object&#39;, $the-object),</span>
                <span class="c1">#   Interceptor, &#39;$!the-method&#39;, $the-method);</span>
        <span class="n">Interceptor</span><span class="o">.^</span><span class="nb">new</span><span class="p">(</span><span class="nv">$the-object</span><span class="o">,</span> <span class="nv">$the-method</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">&amp;first-defined</span> <span class="o">=</span> <span class="nf">interceptor</span><span class="p">(</span>
    <span class="k">my</span> <span class="k">method</span> <span class="p">(</span><span class="nb">Positional</span> \<span class="n">SELF:</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">SELF</span><span class="o">.</span><span class="nb">flat</span> <span class="k">-&gt;</span> <span class="nv">$e</span> <span class="p">{</span>
            <span class="k">with</span> <span class="nv">$e</span><span class="o">.</span><span class="p">&#34;</span><span class="nv">$name</span><span class="p">&#34;(</span><span class="o">|</span><span class="nv">%_</span><span class="p">)</span> <span class="p">{</span>
                <span class="o">.</span><span class="k">return</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nb">Nil</span>
    <span class="p">}</span>
<span class="p">);</span>

<span class="k">my</span> <span class="nv">$file</span> <span class="o">=</span> <span class="p">&lt;</span><span class="s">file1.txt file2.txt file3.txt nohup.out</span><span class="p">&gt;</span><span class="o">».</span><span class="nb">IO</span><span class="o">.&amp;</span><span class="nf">first-defined</span><span class="o">.</span><span class="nb">open</span><span class="p">(:</span><span class="s">r</span><span class="p">);</span>
<span class="n">dd</span> <span class="nv">$file</span><span class="p">;</span>
<span class="c1"># OUTPUT: Handle $file = IO::Handle.new(path =&gt; IO::Path.new(&#34;nohup.out&#34;, :SPEC(IO::Spec::Unix), :CWD(&#34;/home/dex/projects/raku/tmp&#34;)), chomp =&gt; Bool::True, nl-in =&gt; $[&#34;\n&#34;, &#34;\r\n&#34;], nl-out =&gt; &#34;\n&#34;, encoding =&gt; &#34;utf8&#34;)</span>
</code></pre></div><p>sub <code>interceptor</code> 接受一个方法并返回一个 sub。如果这个 sub 像方法一样被调用，它将把要被调用的方法的名称和调用者转发给一个自定义方法。当 <code>.&amp;first-defined</code> 被调用时，会返回一个特殊的对象。让我们来看看它是什么。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">\uhhh-special</span> <span class="o">=</span> <span class="p">&lt;</span><span class="s">a b c</span><span class="p">&gt;</span><span class="o">.&amp;</span><span class="nf">first-defined</span><span class="p">;</span>
<span class="n">dd</span> <span class="n">uhhh-special</span><span class="o">.^</span><span class="nf">introspect</span><span class="p">(</span><span class="n">uhhh-special</span><span class="p">);</span>
<span class="c1"># OUTPUT: ($(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;), method &lt;anon&gt; (Positional \SELF: $name, *%_) { #`(Method|93927752146784) ... })</span>
</code></pre></div><p>我们必须给 <code>.^introspect</code> 一个我们想看的对象，因为它的调用者是类 Interceptor 的类型对象。</p>
<p>目前，我还不知道有什么办法（毕竟，我知道的只是足够多的东西，真的很危险。这是不幸的，因为 lizmat 决定重载关键字 <code>class</code>，而不是用不同的名字导出特殊的 <code>Metamodel::ClassHOW</code>。如果我们不想或不能有外部依赖，我们可以使用 MOP 来创建我们的类型对象。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">InterceptHOW</span> <span class="k">is</span> <span class="nb">Metamodel::ClassHOW</span> <span class="p">{</span>
    <span class="k">method</span> <span class="nb">publish_method_cache</span><span class="ow">(|)</span> <span class="p">{</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">ipry</span><span class="p">(</span><span class="nb">Mu</span> <span class="nv">$the-object</span> <span class="k">is</span> <span class="k">raw</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">\Interceptor</span> <span class="o">=</span> <span class="n">InterceptHOW</span><span class="o">.</span><span class="nb">new_type</span><span class="p">(:</span><span class="s">name</span><span class="p">&lt;</span><span class="s">Interceptor</span><span class="p">&gt;);</span>
    <span class="n">Interceptor</span><span class="o">.^</span><span class="nb">add_attribute</span><span class="p">(</span><span class="nb">Attribute</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">name</span><span class="p">&lt;</span><span class="s">$!the-object</span><span class="p">&gt;</span><span class="o">,</span> <span class="p">:</span><span class="s">type</span><span class="p">(</span><span class="nb">Mu</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">package</span><span class="p">(</span><span class="n">Interceptor</span><span class="p">)));</span>
    <span class="n">Interceptor</span><span class="o">.^</span><span class="nf">add_meta_method</span><span class="p">(&#39;</span><span class="s1">find_method</span><span class="p">&#39;</span><span class="o">,</span>
        <span class="k">my</span> <span class="k">method</span> <span class="nb">find_method</span><span class="p">(</span><span class="nb">Mu</span> \<span class="nb">type</span><span class="o">,</span> <span class="nb">Str</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1"># say „looking for $name“;</span>
            <span class="k">my</span> <span class="k">method</span> <span class="p">(</span><span class="nb">Mu</span> \<span class="n">SELF:</span><span class="p">)</span> <span class="k">is</span> <span class="k">raw</span> <span class="p">{</span>
                <span class="k">use</span> <span class="nb">nqp</span><span class="p">;</span>
                <span class="k">my</span> <span class="nv">$the-object</span> <span class="o">:=</span> <span class="nf">nqp::getattr</span><span class="p">(</span><span class="n">SELF</span><span class="o">,</span> <span class="n">Interceptor</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">$!the-object</span><span class="p">&#39;);</span>
                <span class="nf">nqp::getattr</span><span class="p">(</span><span class="nv">$the-object</span><span class="o">,</span> <span class="nv">$the-object</span><span class="o">.</span><span class="nb">WHAT</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">$!</span><span class="p">&#39;</span> <span class="o">~</span> <span class="nv">$name</span><span class="p">)</span>
            <span class="p">}</span>
    <span class="p">});</span>
    <span class="n">Interceptor</span><span class="o">.^</span><span class="nb">compose</span><span class="p">;</span>

    <span class="k">use</span> <span class="nb">nqp</span><span class="p">;</span>
    <span class="nf">nqp::p6bindattrinvres</span><span class="p">(</span><span class="nf">nqp::create</span><span class="p">(</span><span class="n">Interceptor</span><span class="p">)</span><span class="o">,</span> <span class="n">Interceptor</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">$!the-object</span><span class="p">&#39;</span><span class="o">,</span> <span class="nv">$the-object</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>当我写这篇文章的时候，我发现 <code>.^add_meta_method</code> 只有在提供给它的方法的第一个参数的名字和 <code>Str</code> 相同的时候才会工作。起初，我尝试了一个匿名方法，它最终出现在 <code>.^meta_method_table</code> 中，但从未被调用。我想这个 bug 其实并不重要，因为这个元方法根本没有被记录下来。如果我玩火，我没有权利抱怨烧伤。你会在野外的 <code>Actions.nqp</code> 中发现这个方法。Class 关键字并没有什么神奇的作用。Rakudo 只是使用 MOP 来构造类型对象。</p>
<p>我们不能在 Raku 中重载赋值操作符。这其实并不需要，因为赋值是通过调用一个名为 STORE 的方法来实现的。由于我们得到了对 dispatch 的完全控制，我们可以拦截任何方法调用，包括一连串的方法调用。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">multi</span> <span class="k">sub</span> <span class="nf">methodify</span><span class="p">(</span><span class="nv">%h</span><span class="o">,</span> <span class="o">:</span><span class="nv">$deeply</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">sub</span> <span class="nf">interceptor</span><span class="p">(</span><span class="nv">%h</span><span class="o">,</span> <span class="nv">$parent</span> <span class="o">=</span> <span class="nb">Nil</span><span class="p">){</span>
        <span class="k">use</span> <span class="nn">InterceptAllMethods</span><span class="p">;</span>
        <span class="k">use</span> <span class="nb">nqp</span><span class="p">;</span>

        <span class="k">class</span> <span class="nc">Interceptor</span> <span class="k">is</span> <span class="nb">Callable</span> <span class="p">{</span>
            <span class="k">has</span> <span class="nb">Mu</span> <span class="nv">$!the-object</span><span class="p">;</span>
            <span class="k">has</span> <span class="nb">Mu</span> <span class="nv">@!stack</span><span class="p">;</span>

            <span class="k">method</span> <span class="o">^</span><span class="nb">find_method</span><span class="p">(</span><span class="nb">Mu</span> \<span class="nb">type</span><span class="o">,</span> <span class="nb">Mu:D</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">my</span> <span class="k">method</span> <span class="p">(</span><span class="nb">Mu</span> \<span class="n">SELF:</span> <span class="o">|</span><span class="n">c</span><span class="p">)</span> <span class="k">is</span> <span class="k">raw</span> <span class="p">{</span>
                    <span class="k">my</span> <span class="nv">@new-stack</span> <span class="o">=</span> <span class="nv">@!stack</span><span class="p">;</span>
                    <span class="k">my</span> <span class="nv">$the-object</span> <span class="o">=</span> <span class="nv">$!the-object</span><span class="p">;</span>

                    <span class="k">if</span> <span class="nv">$name</span> <span class="ow">eq</span> <span class="p">&#39;</span><span class="s1">STORE</span><span class="p">&#39;</span> <span class="p">{</span>
                        <span class="c1"># workaround for rakudobug#4203</span>
                        <span class="nv">$the-object</span><span class="p">{</span><span class="o">||</span><span class="nv">@new-stack</span><span class="o">.</span><span class="nb">head</span><span class="p">(</span><span class="o">*-</span><span class="mi">1</span><span class="p">)}:</span><span class="s">delete</span> <span class="k">if</span> <span class="nv">$the-object</span><span class="p">{</span><span class="o">||</span><span class="nv">@new-stack</span><span class="o">.</span><span class="nb">head</span><span class="p">(</span><span class="o">*-</span><span class="mi">1</span><span class="p">)}:</span><span class="s">exists</span><span class="p">;</span>

                        <span class="nv">$the-object</span><span class="p">{</span><span class="o">||</span><span class="nv">@new-stack</span><span class="p">}</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
                        <span class="k">return-rw</span> <span class="n">c</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="nv">@new-stack</span><span class="o">.</span><span class="nb">push</span><span class="o">:</span> <span class="nv">$name</span><span class="p">;</span>
                        <span class="k">my</span> <span class="nv">\nextlevel</span> <span class="o">=</span> <span class="n">SELF</span><span class="o">.^</span><span class="nb">new</span><span class="p">(</span><span class="nv">$!the-object</span><span class="o">,</span> <span class="nv">@new-stack</span><span class="o">,</span> <span class="nv">$name</span><span class="p">);</span>
                        <span class="n">nextlevel</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">method</span> <span class="o">^</span><span class="nf">introspect</span><span class="p">(</span><span class="nb">Mu</span> \<span class="nb">type</span><span class="o">,</span> <span class="nb">Mu</span> \<span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">my</span> <span class="k">method</span> <span class="nf">call-it</span><span class="p">()</span> <span class="k">is</span> <span class="k">raw</span> <span class="p">{</span>
                    <span class="nv">$!the-object</span><span class="o">,</span> <span class="nv">@!stack</span>
                <span class="p">}</span>
                <span class="n">obj</span><span class="o">.&amp;</span><span class="nf">call-it</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">method</span> <span class="o">^</span><span class="nb">new</span><span class="p">(</span><span class="nb">Mu</span> \<span class="nb">type</span><span class="o">,</span> <span class="nv">$the-object</span><span class="o">!,</span> <span class="nv">@new-stack</span><span class="o">?,</span> <span class="nv">$name</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$name</span>
                    <span class="o">??</span> <span class="nf">nqp::p6bindattrinvres</span><span class="p">(</span>
                        <span class="nf">nqp::p6bindattrinvres</span><span class="p">(</span><span class="nf">nqp::create</span><span class="p">(</span><span class="n">Interceptor</span><span class="p">)</span><span class="o">,</span> <span class="n">Interceptor</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">$!the-object</span><span class="p">&#39;</span><span class="o">,</span> <span class="nv">$the-object</span><span class="p">)</span><span class="o">,</span>
                        <span class="n">Interceptor</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">@!stack</span><span class="p">&#39;</span><span class="o">,</span> <span class="nv">@new-stack</span><span class="p">)</span>
                    <span class="o">!!</span> <span class="nf">nqp::p6bindattrinvres</span><span class="p">(</span><span class="nf">nqp::create</span><span class="p">(</span><span class="n">Interceptor</span><span class="p">)</span><span class="o">,</span> <span class="n">Interceptor</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">$!the-object</span><span class="p">&#39;</span><span class="o">,</span> <span class="nv">$the-object</span><span class="p">)</span>
                <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">Interceptor</span><span class="o">.^</span><span class="nb">new</span><span class="p">(</span><span class="nv">%h</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nf">interceptor</span><span class="p">(</span><span class="nv">%h</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">%h2</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$o2</span> <span class="o">=</span> <span class="nf">methodify</span><span class="p">(</span><span class="nv">%h2</span><span class="o">,</span> <span class="p">:</span><span class="s">deeply</span><span class="p">);</span>
<span class="nv">$o2</span><span class="o">.</span><span class="nf">a</span><span class="o">.</span><span class="nf">b</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="n">dd</span> <span class="nv">%h2</span><span class="p">;</span>
<span class="nv">$o2</span><span class="o">.</span><span class="nf">a</span><span class="o">.</span><span class="nf">b</span><span class="o">.</span><span class="nf">c</span> <span class="o">=</span> <span class="p">&lt;</span><span class="s">answer</span><span class="p">&gt;;</span>
<span class="n">dd</span> <span class="nv">%h2</span><span class="p">;</span>
<span class="nb">say</span> <span class="nv">$o2</span><span class="o">.</span><span class="nf">a</span><span class="o">.</span><span class="nf">b</span><span class="o">.</span><span class="nf">c</span><span class="p">;</span>
<span class="c1"># OUTPUT: Hash %h2 = {:a(${:b(\(42))})}</span>
          <span class="nb">Hash</span> <span class="nv">%h2</span> <span class="o">=</span> <span class="p">{:</span><span class="s">a</span><span class="p">(</span><span class="nv">$</span><span class="p">{:</span><span class="s">b</span><span class="p">(</span><span class="nv">$</span><span class="p">{:</span><span class="s">c</span><span class="p">(</span>\<span class="p">(&#34;</span><span class="s2">answer</span><span class="p">&#34;))})})}</span>
          <span class="n">This</span> <span class="nb">type</span> <span class="n">cannot</span> <span class="n">unbox</span> <span class="nb">to</span> <span class="n">a</span> <span class="k">native</span> <span class="n">string:</span> <span class="n">P6opaque</span><span class="o">,</span> <span class="n">Interceptor</span>
            <span class="nb">in</span> <span class="nb">block</span> <span class="o">&lt;</span><span class="k">unit</span><span class="o">&gt;</span> <span class="nb">at</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">dex</span><span class="o">/</span><span class="n">projects</span><span class="o">/</span><span class="nb">raku</span><span class="o">/</span><span class="n">any-chain</span><span class="o">.</span><span class="nb">raku</span> <span class="nb">line</span> <span class="mi">310</span>
</code></pre></div><p>每当我们调用一个方法时，都会创建一个新的 Interceptor 实例，它存储了前一个方法的名称。这样我们就可以沿着方法调用链移动。由于赋值调用 STORE，我们可以将赋值转移到我们用作实际数据结构的 Hash 中。唉，检索值就不一样了，因为 Raku 不区分方法调用和 FETCH。在这里，龙比我强。我还是包含了这个一半失败的尝试，因为我对 slippy 半列表有很好的利用。这需要使用 <code>v6.e.preview</code>，让我踩到了一个 bug。可能还有更多这样的情况。所以请使用同样的，这样我们就可以在 <code>.e</code> 发布到野外之前，把所有的野兽都杀掉。</p>
<p>能够完全控制方法调用链将是一件好事。也许我们可以用 RakuAST 来做到这一点。</p>
<p>有了这些已经可以工作的东西，我们可以做一些有趣的事情。那些烦人的异常总是在拖我们的后腿。我们可以用 <code>try</code> 来化解它们，但那会破坏一个方法调用链。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">constant</span> <span class="no">no-argument-given</span> <span class="o">=</span> <span class="nb">Mu</span><span class="o">.</span><span class="nb">new</span><span class="p">;</span>
<span class="k">sub</span> <span class="k">try</span><span class="p">(</span><span class="nb">Mu</span> <span class="nv">$obj</span> <span class="k">is</span> <span class="k">raw</span><span class="o">,</span> <span class="nb">Mu</span> <span class="nv">$alternate-value</span> <span class="o">=</span> <span class="n">no-argument-given</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">interceptor</span><span class="p">(</span><span class="k">my</span> <span class="k">method</span> <span class="p">(</span><span class="nb">Mu</span> \<span class="n">SELF:</span> <span class="nv">$name</span><span class="o">,</span> <span class="o">|</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$o</span> <span class="o">=</span> <span class="n">SELF</span><span class="p">;</span>
        <span class="k">my</span> <span class="nv">\m</span> <span class="o">=</span> <span class="nv">$o</span><span class="o">.^</span><span class="nb">lookup</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="ow">orelse</span> <span class="p">{</span>
            <span class="k">my</span> <span class="nv">$bt</span> <span class="o">=</span> <span class="nb">Backtrace</span><span class="o">.</span><span class="nb">new</span><span class="p">;</span>
            <span class="k">my</span> <span class="nv">$idx</span> <span class="o">=</span> <span class="nv">$bt</span><span class="o">.</span><span class="nb">next-interesting-index</span><span class="p">(</span><span class="nv">$bt</span><span class="o">.</span><span class="nb">next-interesting-index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
            <span class="p">(</span><span class="ne">X::Method::NotFound</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">method</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span><span class="o">,</span> <span class="p">:</span><span class="s">typename</span><span class="p">(</span><span class="nv">$o</span><span class="o">.^</span><span class="nb">name</span><span class="p">))</span> <span class="k">but</span> <span class="k">role</span> <span class="nc">::</span> <span class="p">{</span> <span class="k">method</span> <span class="nf">vault-backtrace</span> <span class="p">{</span> <span class="nb">False</span> <span class="p">}})</span><span class="o">.</span><span class="nb">throw</span><span class="p">(</span><span class="nb">Backtrace</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">try</span> <span class="p">{</span>
            <span class="nv">$o</span> <span class="o">=</span> <span class="nv">$o</span><span class="o">.</span><span class="p">&#34;</span><span class="nv">$name</span><span class="p">&#34;(</span><span class="o">|</span><span class="n">c</span><span class="p">);</span>
        <span class="p">}</span>
 
        <span class="nv">$!</span> <span class="o">~~</span> <span class="nb">Exception</span>
            <span class="o">??</span> <span class="nv">$alternate-value</span><span class="o">.</span><span class="nb">WHICH</span> <span class="ow">eqv</span> <span class="n">no-argument-given</span><span class="o">.</span><span class="nb">WHICH</span>
                <span class="o">??</span> <span class="nv">$o</span>
                <span class="o">!!</span> <span class="nv">$alternate-value</span>
            <span class="o">!!</span> <span class="nv">$o</span>
    <span class="p">})</span><span class="o">.</span><span class="p">(</span><span class="nv">$obj</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">C</span> <span class="p">{</span>
    <span class="k">has</span> <span class="nv">$.greeting</span><span class="p">;</span>
    <span class="k">method</span> <span class="nf">might-throw</span> <span class="p">{</span> <span class="nb">die</span> <span class="p">&#34;</span><span class="s2">Not today love!</span><span class="p">&#34;</span> <span class="p">}</span>
    <span class="k">method</span> <span class="nf">greet</span> <span class="p">{</span> <span class="nb">say</span> <span class="nv">$.greeting</span> <span class="p">}</span>
<span class="p">}</span>

<span class="n">C</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="s">greeting</span> <span class="o">=&gt;</span> ‚<span class="n">Let&#39;s</span> <span class="k">make</span> <span class="n">love</span><span class="o">!</span>‘<span class="p">)</span><span class="o">.&amp;</span><span class="k">try</span><span class="o">.</span><span class="nf">might-throw</span><span class="o">.</span><span class="nf">greet</span><span class="p">;</span>
<span class="c1"># OUTPUT: Let&#39;s make love!</span>
</code></pre></div><p>伪方法 try 将会化解任何异常，并允许继续调用 C 语言的方法。我必须用一个特殊的值来标记没有可选的参数 <code>$alternate-value</code>，因为它实际上可能会把异常对象变成 <code>Nil</code>。</p>
<p>我很肯定还有很多这样的小帮手在等着我们去发现。未来可能会有一个模块，希望能帮助 Raku 成为一个好的<a href="https://ftp.fau.de/fosdem/2021/D.perl/programming_lang_for_free_software.webm">编程语言</a>。</p>
<p>原文链接: <a href="https://gfldex.wordpress.com/2021/02/17/method-ish/">https://gfldex.wordpress.com/2021/02/17/method-ish/</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku-%E5%8D%9A%E5%AE%A2" term="raku-%E5%8D%9A%E5%AE%A2" label="Raku 博客" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[模式分派]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-02-17-method-isd/?utm_source=atom_feed" rel="related" type="text/html" title="Method-ish" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-custom-when/?utm_source=atom_feed" rel="related" type="text/html" title="自定义 when" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/?utm_source=atom_feed" rel="related" type="text/html" title="为最年轻的 Raku 贡献力量" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/?utm_source=atom_feed" rel="related" type="text/html" title="Caesarean Substrings With Raku and Perl" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/?utm_source=atom_feed" rel="related" type="text/html" title="如果集合如我所想" />
            
                <id>https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-02-28T00:00:00+08:00</published>
            <updated>2021-02-28T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Pattern Dispatch</blockquote><p>一直以来乐于助人的 <a href="https://stackoverflow.com/users/1077672/raiph">raiph</a> 在回答一个关于模式匹配的<a href="https://stackoverflow.com/questions/66233465/haskell-like-pattern-matching-in-raku">问题</a>时希望得到 RakuAST，就像在 Haskell 中一样。有人提出用 MMD 来解决这个问题。这样做，得到一个贯穿的默认路径是无解的。由于 dispatch 简单来说就是模式匹配，我们只需要做一些额外的工作。简而言之，dispatcher 得到一个函数列表和一个带参数的列表。第一个接受所有参数的函数获胜。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">class</span> <span class="nc">Hold</span> <span class="p">{</span> <span class="k">has</span> <span class="nv">$.key</span><span class="p">;</span> <span class="p">}</span>
<span class="k">class</span> <span class="nc">Press</span> <span class="p">{</span> <span class="k">has</span> <span class="nv">$.key</span><span class="p">;</span> <span class="p">}</span>
<span class="k">class</span> <span class="nc">Err</span> <span class="p">{</span> <span class="k">has</span> <span class="nv">$.msg</span><span class="p">;</span> <span class="p">}</span>

<span class="k">sub</span> <span class="k">else</span><span class="p">(</span><span class="nv">&amp;code</span><span class="p">)</span> <span class="p">{</span> <span class="nv">&amp;code</span> <span class="p">}</span>

<span class="k">sub</span> <span class="nb">match</span><span class="p">(</span><span class="nv">$needle</span><span class="o">,</span> <span class="o">*</span><span class="nv">@tests</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nv">@tests</span><span class="o">.</span><span class="nb">head</span><span class="p">(</span><span class="o">*-</span><span class="mi">1</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">&amp;f</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nv">&amp;f</span><span class="o">.</span><span class="nb">cando</span><span class="p">(</span>\<span class="p">(</span><span class="nv">$needle</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">f</span><span class="p">(</span><span class="nv">$needle</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nv">@tests</span><span class="o">.</span><span class="nb">tail</span><span class="o">.</span><span class="p">();</span>
<span class="p">}</span>

<span class="nb">match</span> <span class="n">Hold</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">key</span><span class="p">&lt;</span><span class="s">a</span><span class="p">&gt;)</span><span class="o">,</span>
    <span class="k">-&gt;</span> <span class="n">Hold</span> <span class="p">(</span><span class="o">:</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span> <span class="nb">put</span> „<span class="n">holding</span> <span class="nv">$key</span>“<span class="p">;</span> <span class="p">}</span><span class="o">,</span>
    <span class="k">-&gt;</span> <span class="n">Press</span> <span class="p">(</span><span class="o">:</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span> <span class="nb">put</span> „<span class="n">pressing</span> <span class="nv">$key</span>“<span class="p">;</span> <span class="p">}</span><span class="o">,</span>
    <span class="k">-&gt;</span> <span class="n">Err</span> <span class="p">(</span><span class="o">:</span><span class="nv">$msg</span><span class="p">)</span> <span class="p">{</span> <span class="nb">warn</span> „<span class="n">ERR:</span> <span class="nv">$msg</span>“ <span class="p">}</span><span class="o">,</span>
    <span class="k">else</span> <span class="p">{</span> <span class="nb">fail</span> ‚<span class="n">unsopported</span>‘ <span class="p">};</span>
</code></pre></div><p>方法 <code>.cando</code> 需要一个 <a href="https://docs.raku.org/type/Capture">Capture</a> 来告诉我们一个 Routine 是否可以用一个给定的参数列表来调用。为了创建这样一个捕获，我们使用字面的 <code>\($arguments, $go, $here)</code>。我们不在最后测试默认值。相反，当没有其他函数匹配时，我们会调用该函数。声明 sub <code>else</code> 只是为了美化。</p>
<p>由于我们是在函数式的土地上，我们可以使用 Raku 提供给我们的所有方便的功能。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">my</span> <span class="nv">&amp;key-matcher</span> <span class="o">=</span> <span class="nv">&amp;match</span><span class="o">.</span><span class="nb">assuming</span><span class="p">(</span><span class="o">*,[</span>
        <span class="k">-&gt;</span> <span class="n">Hold</span> <span class="p">(</span><span class="o">:</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span> <span class="nb">put</span> „<span class="n">holding</span> <span class="nv">$key</span>“<span class="p">;</span> <span class="p">}</span><span class="o">,</span>
        <span class="k">-&gt;</span> <span class="n">Press</span> <span class="p">(</span><span class="o">:</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span> <span class="nb">put</span> „<span class="n">pressing</span> <span class="nv">$key</span>“<span class="p">;</span> <span class="p">}</span><span class="o">,</span>
        <span class="k">-&gt;</span> <span class="n">Err</span> <span class="p">(</span><span class="o">:</span><span class="nv">$msg</span><span class="p">)</span> <span class="p">{</span> <span class="nb">warn</span> „<span class="n">ERR:</span> <span class="nv">$msg</span>“ <span class="p">}</span><span class="o">,</span>
        <span class="k">else</span> <span class="p">{</span> <span class="nb">fail</span> ‚<span class="n">unsopported</span>‘ <span class="p">};</span>
<span class="o">]</span><span class="p">);</span>

<span class="k">sub</span> <span class="nf">key-source</span> <span class="p">{</span>
    <span class="k">gather</span> <span class="k">loop</span> <span class="p">{</span>
        <span class="nb">sleep</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nb">take</span> <span class="p">(</span><span class="n">Hold</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">key</span><span class="p">&lt;</span><span class="s">a</span><span class="p">&gt;)</span><span class="o">,</span> <span class="n">Press</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">key</span><span class="p">&lt;</span><span class="s">b</span><span class="p">&gt;)</span><span class="o">,</span> <span class="n">Err</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">msg</span><span class="p">&lt;</span><span class="s">WELP!</span><span class="p">&gt;)</span><span class="o">,</span> <span class="p">&#39;</span><span class="s1">unsupported</span><span class="p">&#39;)</span><span class="o">.</span><span class="nb">pick</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="o">.&amp;</span><span class="nf">key-matcher</span> <span class="k">for</span> <span class="n">key-source</span><span class="p">;</span>
</code></pre></div><p>我们要帮助 <code>.assuming</code> 有点理解 slurpies，把函数列表放在一个显式 Array 中。</p>
<p>总有一种函数式的方法来解决一个问题。有时我们甚至可以从中得到一个整齐的语法。</p>
<p>原文链接: <a href="https://gfldex.wordpress.com/2021/02/24/pattern-dispatch/">https://gfldex.wordpress.com/2021/02/24/pattern-dispatch/</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku-%E5%8D%9A%E5%AE%A2" term="raku-%E5%8D%9A%E5%AE%A2" label="Raku 博客" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[自定义 when]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-02-28-custom-when/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/?utm_source=atom_feed" rel="related" type="text/html" title="为最年轻的 Raku 贡献力量" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/?utm_source=atom_feed" rel="related" type="text/html" title="Caesarean Substrings With Raku and Perl" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/?utm_source=atom_feed" rel="related" type="text/html" title="如果集合如我所想" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-17-method-isd/?utm_source=atom_feed" rel="related" type="text/html" title="Method-ish" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/?utm_source=atom_feed" rel="related" type="text/html" title="模式分派" />
            
                <id>https://ohmyweekly.github.io/notes/2021-02-28-custom-when/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-02-28T00:00:00+08:00</published>
            <updated>2021-02-28T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Custom When</blockquote><p>我不太喜欢上一篇文章中使用匹配的语法。它的参数列表中的逗号看起来很奇怪，不合适。也许是因为我的眼睛习惯了给定的块。睡一觉就好了。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">sub</span> <span class="nf">accord</span><span class="p">(</span><span class="nv">&amp;c</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="n">CALLER::</span><span class="p">&lt;</span><span class="s">$_</span><span class="p">&gt;);</span> <span class="k">succeed</span><span class="p">)</span> <span class="k">if</span> <span class="nv">&amp;c</span><span class="o">.</span><span class="nb">cando</span><span class="p">(</span>\<span class="p">(</span><span class="n">CALLER::</span><span class="p">&lt;</span><span class="s">$_</span><span class="p">&gt;))</span> <span class="p">}</span>

<span class="k">given</span> <span class="n">Err</span><span class="o">.</span><span class="nb">new</span><span class="p">(:</span><span class="s">msg</span><span class="p">&lt;</span><span class="s">a</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="n">accord</span> <span class="k">-&gt;</span> <span class="n">Hold</span> <span class="p">(</span><span class="o">:</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span> <span class="nb">put</span> „<span class="n">holding</span> <span class="nv">$key</span>“<span class="p">;</span> <span class="p">}</span>
    <span class="n">accord</span> <span class="k">-&gt;</span> <span class="n">Err</span> <span class="p">(</span><span class="o">:</span><span class="nv">$msg</span><span class="p">)</span> <span class="p">{</span> <span class="nb">warn</span> „<span class="n">ERR:</span> <span class="nv">$msg</span>“ <span class="p">}</span>
    <span class="k">default</span> <span class="p">{</span> <span class="nb">fail</span> ‚<span class="n">unsupported</span>‘ <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>这是因为 <code>accord</code> 模仿了 <code>when</code> 的工作。它做了一些匹配，当 True 时调用一个块，并在每个块的结尾添加一个 success（通过抛出一个控制异常）。given 所做的只是设置主题。它还充当了 caller 的角色，所以我们可以通过一个伪包来访问它的 <code>$_</code>。利用 pointy 的签名来做<a href="https://docs.raku.org/type/Signature#Destructuring_arguments">解构</a>是相当强大的。把这个添加到 CORE 中可能是个好主意。</p>
<p>我们可能要把 Raku 的定义改成: &ldquo;Raku 是一种高度可组合的编程语言&rdquo;, 在这里，所有的东西都会落到实处。&quot;</p>
<p>更新一下。</p>
<p>有些情况下，<code>$_</code> 不是动态的。另外，success 正在抛出一个控制异常，而这些的处理程序是由 when 或默认添加的。这种情况是在编译时发生的，目前不能用宏来解决。第一个问题可以用黑魔法解决。后一个问题需要用默认块。我没有找到一种方法来提供一个合理的错误信息，如果缺少这个块。</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="k">multi</span> <span class="k">sub</span> <span class="nf">accord</span><span class="p">(</span><span class="nv">&amp;c</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">use</span> <span class="nb">nqp</span><span class="p">;</span>
    <span class="nv">$_</span> <span class="o">:=</span> <span class="nf">nqp::getlexcaller</span><span class="p">(&#39;</span><span class="s1">$_</span><span class="p">&#39;);</span>
    <span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="nv">$_</span><span class="p">);</span> <span class="k">succeed</span><span class="p">)</span> <span class="k">if</span> <span class="nv">&amp;c</span><span class="o">.</span><span class="nb">cando</span><span class="p">(</span>\<span class="p">(</span><span class="nv">$_</span><span class="p">))</span>
<span class="p">}</span>

<span class="k">for</span> <span class="nv">@possibilities</span><span class="o">.</span><span class="nb">roll</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$needle</span> <span class="p">{</span>
    <span class="k">given</span> <span class="nv">$needle</span> <span class="p">{</span>
        <span class="n">accord</span> <span class="k">-&gt;</span> <span class="n">Hold</span> <span class="p">(</span><span class="o">:</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span> <span class="nb">put</span> „<span class="n">holding</span> <span class="nv">$key</span>“<span class="p">;</span> <span class="p">}</span>
        <span class="n">accord</span> <span class="k">-&gt;</span> <span class="n">Err</span> <span class="p">(</span><span class="o">:</span><span class="nv">$msg</span><span class="p">)</span> <span class="p">{</span> <span class="nb">warn</span> „<span class="n">ERR:</span> <span class="nv">$msg</span>“ <span class="p">}</span>
        <span class="k">default</span> <span class="p">{</span> <span class="nb">warn</span> ‚<span class="n">unsopported</span>‘ <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>原文链接: <a href="https://gfldex.wordpress.com/2021/02/25/custom-when/">https://gfldex.wordpress.com/2021/02/25/custom-when/</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rakulang" term="rakulang" label="Rakulang" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Caesarean Substrings With Raku and Perl]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/?utm_source=atom_feed" rel="related" type="text/html" title="如果集合如我所想" />
                <link href="https://ohmyweekly.github.io/notes/2020-10-04-the-strange-case-of-the-greedy-junction/?utm_source=atom_feed" rel="related" type="text/html" title="贪婪 Junction 的奇闻异事" />
                <link href="https://ohmyweekly.github.io/notes/2020-10-04-reconstructing-raku-junctions/?utm_source=atom_feed" rel="related" type="text/html" title="重构 Raku 的 Junction" />
            
                <id>https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-02-07T00:00:00+08:00</published>
            <updated>2021-02-07T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Caesarean Substrings With Raku and Perl</blockquote><p>[113] 发表于2021年1月30日。
这是我对 <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-097/">Perl 每周挑战#097</a> 的回应。</p>
<h2 id="挑战-0971-凯撒密码">挑战 #097.1: 凯撒密码</h2>
<p>给你一个只包含字母 <code>A..Z</code> 的字符串 <code>$S</code> 和一个数字 <code>$N</code>。
写一个脚本，用<a href="https://en.wikipedia.org/wiki/Caesar_cipher">凯撒密码</a>对给定的字符串 <code>$S</code> 进行加密，左移大小为 <code>$N</code>。</p>
<p>例子:
输入: $S = &ldquo;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&rdquo;, $N = 3
输出: &ldquo;QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD&rdquo;</p>
<p>Plain:    ABCDEFGHIJKLMNOPQRSTUVWXYZ
Cipher:   XYZABCDEFGHIJKLMNOPQRSTUVW</p>
<p>Plaintext:  THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG
Ciphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD</p>
<p>&ldquo;只用字母 <code>A...Z</code>&rdquo; 的表述是错误的，因为例子中也有几个空格。因此，应该允许这些空格。</p>
<p>文件: caesar-cipher</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">subset</span> <span class="nc">AZ-space</span> <span class="k">of</span> <span class="nb">Str</span> <span class="k">where</span> <span class="o">/^</span> <span class="p">&lt;</span><span class="s">[ A .. Z \s ]</span><span class="p">&gt;</span><span class="o">+</span> <span class="nv">$/</span><span class="p">;</span>   <span class="c1"># [1]</span>
<span class="k">subset</span> <span class="nc">PosInt</span> <span class="k">of</span> <span class="nb">Int</span> <span class="k">where</span> <span class="o">-</span><span class="mi">25</span> <span class="o">&lt;=</span> <span class="nv">$_</span> <span class="o">&lt;=</span> <span class="mi">25</span><span class="p">;</span>            <span class="c1"># [2]</span>

<span class="k">unit</span> <span class="k">sub</span> <span class="nb">MAIN</span> <span class="p">(</span><span class="n">AZ-space</span> <span class="nv">$S</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</span><span class="p">&#39;</span><span class="o">,</span>
               <span class="n">PosInt</span> <span class="nv">$N</span> <span class="o">=</span> <span class="mi">3</span><span class="p">);</span>                         <span class="c1"># [3]</span>

<span class="nb">say</span> <span class="nv">$S</span><span class="o">.</span><span class="nb">comb</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="nf">caesar</span><span class="p">(</span><span class="nv">$_</span><span class="o">,</span> <span class="nv">$N</span><span class="p">)</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>              <span class="c1"># [4]</span>

<span class="k">sub</span> <span class="nf">caesar</span> <span class="p">(</span><span class="nv">$char</span><span class="o">,</span> <span class="nv">$shift</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="nv">$char</span> <span class="k">if</span> <span class="nv">$char</span> <span class="ow">eq</span> <span class="p">&#34;</span><span class="s2"> </span><span class="p">&#34;;</span>                        <span class="c1"># [5]</span>

  <span class="k">my</span> <span class="nv">$code</span> <span class="o">=</span> <span class="nv">$char</span><span class="o">.</span><span class="nb">ord</span><span class="p">;</span>                                <span class="c1"># [6]</span>

  <span class="nv">$code</span> <span class="o">-=</span> <span class="nv">$shift</span><span class="p">;</span>                                     <span class="c1"># [7]</span>

  <span class="nv">$code</span> <span class="o">+=</span> <span class="mi">26</span> <span class="k">if</span> <span class="nv">$code</span> <span class="o">&lt;</span> <span class="mi">65</span><span class="p">;</span>  <span class="c1"># &#39;A&#39;                    # [8]</span>
  <span class="nv">$code</span> <span class="o">-=</span> <span class="mi">26</span> <span class="k">if</span> <span class="nv">$code</span> <span class="o">&gt;</span> <span class="mi">90</span><span class="p">;</span>  <span class="c1"># &#39;Z&#39;                    # [8a]</span>

  <span class="k">return</span> <span class="nv">$code</span><span class="o">.</span><span class="nb">chr</span><span class="p">;</span>                                    <span class="c1"># [9]</span>
<span class="p">}</span>
</code></pre></div><p>[1] 所允许的字符 (或 «特定领域字母»).</p>
<p>[2] 挑战说左移值是一个数字。允许除整数以外的任何东西是没有意义的，所以我把值限制在这个类型。负值应该是可以的，它们意味着右移值（而不是左移）。</p>
<p>[3] 参数，默认值为挑战中给出的值。</p>
<p>[4] 将字符串分割成单个字符（用梳子(comb)，在每个字符上应用 &ldquo;caesar&rdquo; 函数（用map），再次将字符连接成一个字符串（用join），然后打印出来。</p>
<p>[5] 不移动空格。</p>
<p>[6] 获取字符的代码点。</p>
<p>[7] 减去移位值（当我们向左移位时，或在字母表中降低移位值）。</p>
<p>[8] 绕回, 如果我们移出A-Z范围，这里为更低 - 或更高的 [8b]。</p>
<p>[9] 获取指定代码点的字符。</p>
<p>查看 docs.raku.org/routine/ord 获取更多关于 ord 的信息。</p>
<p>查看 docs.raku.org/routine/chr 获取更多关于 chr 的信息。</p>
<p>运行它:</p>
<pre><code>$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD

$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3
WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ

$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT

$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT
</code></pre><p>Raku 有一个 ords 变体，它接收一整个字符串，而不是一个字符作为 ord。还有 chrs，它接收一个代码点数组，并将它们变成一个字符串，而不是像 chr 那样接收一个字符的代码点。让我们用它们来写一个更短的程序。</p>
<p>文件: caesar-cipher-map</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">subset</span> <span class="nc">AZ-space</span> <span class="k">of</span> <span class="nb">Str</span> <span class="k">where</span> <span class="o">/^</span> <span class="p">&lt;</span><span class="s">[ A .. Z \s ]</span><span class="p">&gt;</span><span class="o">+</span> <span class="nv">$/</span><span class="p">;</span>
<span class="k">subset</span> <span class="nc">PosInt</span> <span class="k">of</span> <span class="nb">Int</span> <span class="k">where</span> <span class="o">-</span><span class="mi">25</span> <span class="o">&lt;=</span> <span class="nv">$_</span> <span class="o">&lt;=</span> <span class="mi">25</span><span class="p">;</span>

<span class="k">unit</span> <span class="k">sub</span> <span class="nb">MAIN</span> <span class="p">(</span><span class="n">AZ-space</span> <span class="nv">$S</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</span><span class="p">&#39;</span><span class="o">,</span>
               <span class="n">PosInt</span> <span class="nv">$N</span> <span class="o">=</span> <span class="mi">3</span><span class="p">);</span>

<span class="nb">say</span> <span class="nf">caesar</span><span class="p">(</span><span class="nv">$S</span><span class="o">,</span> <span class="nv">$N</span><span class="p">);</span>

<span class="k">sub</span> <span class="nf">caesar</span> <span class="p">(</span><span class="nv">$string</span><span class="o">,</span> <span class="nv">$shift</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="nv">$string</span><span class="o">.</span><span class="nb">ords</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span><span class="nv">$_</span> <span class="o">==</span> <span class="mi">32</span> <span class="o">??</span> <span class="mi">32</span> <span class="o">!!</span> <span class="p">((</span><span class="nv">$_</span> <span class="o">-</span> <span class="nv">$shift</span> <span class="o">-</span> <span class="mi">65</span><span class="p">)</span> <span class="nv">%</span> <span class="mi">26</span> <span class="p">)</span> <span class="o">+</span> <span class="mi">65</span><span class="p">})</span><span class="o">.</span><span class="nb">chrs</span><span class="p">;</span>
    <span class="c1"># #################### # 1a ############# ############ # 1b  # 1c ## 1d</span>
<span class="p">}</span>
</code></pre></div><p>[1] 我们使用map来改变各个代码点。我们让代码点为32的空间单独存在[1a]。每一个其他的值我们都还原成0到25之间的数字（通过减去第一个字母的代码点（A：65）和移位值[1b]）。模数运算符 (%) 为我们处理负值，做正确的事情。例如：-2 % 26 -&gt; 24 [1c]。然后我们添加调整值到它们应该在的位置(从A到Z)[1d]，然后我们将整个数组的代码点变成一个字符串。</p>
<p>查看 docs.raku.org/routine/ords 获取更多关于 ords 的信息。</p>
<p>查看 docs.raku.org/routine/chrs 获取更多关于 chrs 的信息。</p>
<p>运行它的结果和之前一样。</p>
<pre><code>$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD

$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3
WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ

$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT

$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT
</code></pre><h2 id="perl-版本">Perl 版本</h2>
<p>这是对第一个 Raku 版的直接翻译。</p>
<p>File: caesar-cipher-perl</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="ch">#! /usr/bin/env perl</span>

<span class="k">use</span> <span class="nn">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">feature</span> <span class="s">&#39;say&#39;</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">feature</span> <span class="s">&#39;signatures&#39;</span><span class="p">;</span>

<span class="k">no</span> <span class="nn">warnings</span> <span class="s">&#34;experimental::signatures&#34;</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$S</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">(</span><span class="nv">@ARGV</span><span class="p">)</span> <span class="sr">//</span> <span class="s">&#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39;</span><span class="p">;</span>

<span class="nb">die</span> <span class="s">&#34;Illegal characters&#34;</span> <span class="k">unless</span> <span class="nv">$S</span> <span class="o">=~</span><span class="sr"> /^[A-Z\s]+$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$N</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">(</span><span class="nv">@ARGV</span><span class="p">)</span> <span class="sr">//</span> <span class="mi">3</span><span class="p">;</span>

<span class="nb">die</span> <span class="s">&#34;Illegal shift $N&#34;</span> <span class="k">if</span> <span class="nv">$N</span> <span class="o">!~</span> <span class="sr">/^\-?\d+$/</span> <span class="o">||</span> <span class="nv">$N</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">25</span> <span class="o">||</span> <span class="nv">$N</span> <span class="o">&gt;</span> <span class="mi">25</span><span class="p">;</span>

<span class="n">say</span> <span class="nb">join</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nb">map</span> <span class="p">{</span> <span class="n">caesar</span><span class="p">(</span><span class="nv">$_</span><span class="p">,</span> <span class="nv">$N</span><span class="p">)</span> <span class="p">}</span> <span class="nb">split</span><span class="p">(</span><span class="sr">//</span><span class="p">,</span> <span class="nv">$S</span><span class="p">));</span>

<span class="k">sub</span> <span class="nf">caesar</span> <span class="p">($char, $shift)
</span><span class="p">{</span>
  <span class="k">return</span> <span class="nv">$char</span> <span class="k">if</span> <span class="nv">$char</span> <span class="ow">eq</span> <span class="s">&#34; &#34;</span><span class="p">;</span>

  <span class="k">my</span> <span class="nv">$code</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="nv">$char</span><span class="p">);</span>

  <span class="nv">$code</span> <span class="o">-=</span> <span class="nv">$shift</span><span class="p">;</span>

  <span class="nv">$code</span> <span class="o">+=</span> <span class="mi">26</span> <span class="k">if</span> <span class="nv">$code</span> <span class="o">&lt;</span> <span class="mi">65</span><span class="p">;</span>  <span class="c1"># &#39;A&#39;</span>
  <span class="nv">$code</span> <span class="o">-=</span> <span class="mi">26</span> <span class="k">if</span> <span class="nv">$code</span> <span class="o">&gt;</span> <span class="mi">90</span><span class="p">;</span>  <span class="c1"># &#39;Z&#39;</span>

  <span class="k">return</span> <span class="nb">chr</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>运行它的结果和 Raku 版一样。</p>
<pre><code>$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD

$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3
WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ

$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT

$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT
</code></pre><h2 id="挑战-0972二进制子字符串binary-substrings">挑战 #097.2：二进制子字符串(Binary Substrings)</h2>
<p>给你一个二进制字符串 <code>$B</code> 和一个整数 <code>$S</code>。</p>
<p>写一个脚本来拆分大小为 <code>$S</code> 的二进制字符串 <code>$B</code>，然后找出使其相同的最小翻转次数。</p>
<p>例 1:
输入: $B = “101100101”, $S = 3
输出: 1</p>
<p>二进制子字符串:
&ldquo;101&rdquo;: 0 flip
&ldquo;100&rdquo;: 1 flip to make it &ldquo;101&rdquo;
&ldquo;101&rdquo;: 0 flip</p>
<p>例 2:
输入 $B = “10110111”, $S = 4
输出: 2</p>
<p>二进制子字符串:
&ldquo;1011&rdquo;: 0 flip
&ldquo;0111&rdquo;: 2 flips to make it &ldquo;1011&rdquo;</p>
<p>我们先从第一个例子中的二进制子字符串中砍掉3个字符块。</p>
<pre><code>&gt; say &quot;101100101&quot;.comb(3);   # -&gt; (101 100 101)
&gt; say &quot;1011001010&quot;.comb(3);  # -&gt; (101 100 101 0)
</code></pre><p>第二行显示了如果长度不匹配会发生什么。这就给了我们一个非法的值，因为我们不能将一位数翻转为三位数的值。所以我们必须添加一个检查。</p>
<p>然后我们将第一个子串与其余的子串进行比较，一次一个。在这里使用bitwise XOR（Exclusive OR）运算符是一个合理的选择。这给了我们一个二进制值，其中1的数量就是该子串的翻转次数。Raku确实有一个XOR运算符。+^. 但是它 &ldquo;将两个参数都强制为Int，并进行位智XOR操作&rdquo;(根据文档&quot;；参见docs.raku.org/language/operators#infix_+^)。</p>
<p>我们可以在进行XOR操作之前，将二进制值转换为十进制值。让我们试试。</p>
<p>获取翻转的次数。</p>
<pre><code>&gt; say (&quot;10101&quot;.parse-base(2) +^ &quot;10111&quot;.parse-base(2)).base(2).comb.sum;  # -&gt; 1
&gt; say (&quot;11101&quot;.parse-base(2) +^ &quot;10111&quot;.parse-base(2)).base(2).comb.sum;  # -&gt; 2
</code></pre><p>这当然可行，但需要大量的代码。所以我将使用一个更简单的方法 - 逐个比较每个数字。</p>
<p>File: binary-substring</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env raku</span>

<span class="k">subset</span> <span class="nc">BinaryString</span> <span class="k">where</span> <span class="o">/^</span> <span class="p">&lt;</span><span class="s">[01]</span><span class="p">&gt;</span><span class="o">+</span> <span class="nv">$/</span><span class="p">;</span>                    <span class="c1"># [1]</span>
<span class="k">subset</span> <span class="nc">PosInt</span> <span class="k">of</span> <span class="nb">Int</span> <span class="k">where</span> <span class="o">*</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>                           <span class="c1"># [2]</span>

<span class="k">unit</span> <span class="k">sub</span> <span class="nb">MAIN</span> <span class="p">(</span><span class="n">BinaryString</span> <span class="nv">$B</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">101100101</span><span class="p">&#39;</span><span class="o">,</span>               <span class="c1"># [1]</span>
               <span class="n">PosInt</span> <span class="nv">$S</span> <span class="k">where</span> <span class="nv">$B</span><span class="o">.</span><span class="nb">chars</span> <span class="nv">%%</span> <span class="nv">$S</span> <span class="o">=</span> <span class="mi">3</span><span class="o">,</span>          <span class="c1"># [2]</span>
	       <span class="p">:</span><span class="s">v</span><span class="p">(</span><span class="o">:</span><span class="nv">$verbose</span><span class="p">));</span>

<span class="k">my</span> <span class="nv">@B</span>     <span class="o">=</span> <span class="nv">$B</span><span class="o">.</span><span class="nb">comb</span><span class="p">(</span><span class="nv">$S</span><span class="o">.</span><span class="nb">Int</span><span class="p">);</span>                                <span class="c1"># [3]</span>
<span class="k">my</span> <span class="nv">$first</span> <span class="o">=</span> <span class="nv">@B</span><span class="o">.</span><span class="nb">shift</span><span class="p">;</span>                                       <span class="c1"># [4]</span>
<span class="k">my</span> <span class="nv">$total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                                              <span class="c1"># [5]</span>

<span class="k">for</span> <span class="nv">@B</span> <span class="k">-&gt;</span> <span class="nv">$current</span>                                          <span class="c1"># [6]</span>
<span class="p">{</span>
  <span class="k">my</span> <span class="nv">$flip</span> <span class="o">=</span> <span class="nf">bit-diff</span><span class="p">(</span><span class="nv">$first</span><span class="o">,</span> <span class="nv">$current</span><span class="p">);</span>                    <span class="c1"># [7]</span>
  <span class="nv">$total</span> <span class="o">+=</span> <span class="nv">$flip</span><span class="p">;</span>                                          <span class="c1"># [8]</span>
  <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">: </span><span class="nv">$first</span><span class="s2"> -&gt; </span><span class="nv">$current</span><span class="s2"> -&gt; Flip: </span><span class="nv">$flip</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$verbose</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">say</span> <span class="nv">$total</span><span class="p">;</span>                                                 <span class="c1"># [9]</span>

<span class="k">sub</span> <span class="nf">bit-diff</span> <span class="p">(</span><span class="nv">$a</span><span class="o">,</span> <span class="nv">$b</span><span class="p">)</span>                                       <span class="c1"># [7]</span>
<span class="p">{</span>
  <span class="k">my</span> <span class="nv">$flip</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                                             <span class="c1"># [10]</span>

  <span class="k">for</span> <span class="o">^</span><span class="nv">$a</span><span class="o">.</span><span class="nb">chars</span> <span class="k">-&gt;</span> <span class="nv">$index</span>                                   <span class="c1"># [11]</span>
  <span class="p">{</span>
    <span class="nv">$flip</span><span class="o">++</span> <span class="k">if</span> <span class="nv">$a</span><span class="o">.</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$index</span><span class="o">,</span><span class="mi">1</span><span class="p">)</span> <span class="ow">ne</span> <span class="nv">$b</span><span class="o">.</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$index</span><span class="o">,</span><span class="mi">1</span><span class="p">);</span>  <span class="c1"># [12]</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nv">$flip</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>[1] 确保二进制字符串是合法的（只包含 &ldquo;0 &ldquo;和 &ldquo;1&rdquo;）。</p>
<p>[2] 确保是一个正整数，同时确保字符串是被它偶数分割的。(例如，&ldquo;4 &ldquo;给我们提供了长度为4的子串，如果最后一个较短，程序将中止。)</p>
<p>[3] 梳子通常用于将一个字符串分割成单个字符，但我们可以通过指定长度来获得每个子字符串中的多个字符，比如这样。</p>
<p>[4] 例子首先将第一个子串与自己进行比较，给出零翻转。这是愚蠢的(ish)，所以我跳过这一点，把第一个子串移出。</p>
<p>[5] 结果会到这里。</p>
<p>[6] 对于每一个子串（除了第一个，见[4]）。</p>
<p>[7] 获取每个子串的翻转次数。</p>
<p>[8] 并将其添加到总数中。</p>
<p>[9] 打印它。</p>
<p>[10] 翻转的数量会在这里。</p>
<p>[11] 对于两个子串中的每个索引（具有相同的长度）。</p>
<p>[12] - 如果给定位置上的字符不同，则在总数的基础上加1，意味着移动。</p>
<p>See docs.raku.org/routine/comb for more information about comb.</p>
<p>运行它。</p>
<pre><code>$ ./binary-substring &quot;101100101&quot; 3
 1

$ ./binary-substring -v &quot;101100101&quot; 3
: 101 -&gt; 100 -&gt; Flip: 1
: 101 -&gt; 101 -&gt; Flip: 0
1

$ ./binary-substring &quot;10110111&quot; 4
2

$ ./binary-substring -v &quot;10110111&quot; 4
: 1011 -&gt; 0111 -&gt; Flip: 2
2
</code></pre><p>看起来不错。</p>
<h2 id="perl">Perl</h2>
<p>这是对 Raku 版本的直接翻译，只是我必须实现 &ldquo;comb&rdquo;。</p>
<p>文件： binary-substring-perl</p>
<div class="highlight"><pre class="chroma"><code class="language-raku" data-lang="raku"><span class="ch">#! /usr/bin/env perl</span>

<span class="k">use</span> <span class="nb">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nb">feature</span> <span class="p">&#39;</span><span class="s1">say</span><span class="p">&#39;;</span>
<span class="k">use</span> <span class="nb">feature</span> <span class="p">&#39;</span><span class="s1">signatures</span><span class="p">&#39;;</span>
<span class="k">use</span> <span class="nn">Getopt::Long</span><span class="p">;</span>

<span class="k">no</span> <span class="nf">warnings</span> <span class="p">&#34;</span><span class="s2">experimental::signatures</span><span class="p">&#34;;</span>

<span class="k">my</span> <span class="nv">$verbose</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="nf">GetOptions</span><span class="p">(&#34;</span><span class="s2">verbose</span><span class="p">&#34;</span>  <span class="o">=&gt;</span> \<span class="nv">$verbose</span><span class="p">);</span>

<span class="k">my</span> <span class="nv">$B</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">(</span><span class="nv">@ARGV</span><span class="p">)</span> <span class="o">//</span> <span class="p">&#39;</span><span class="s1">101100101</span><span class="p">&#39;;</span>

<span class="nb">die</span> <span class="p">&#34;</span><span class="s2">Not a binary number</span><span class="p">&#34;</span> <span class="k">unless</span> <span class="nv">$B</span> <span class="o">=~</span> <span class="o">/^[</span><span class="mo">01</span><span class="o">]+</span><span class="nv">$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$S</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">(</span><span class="nv">@ARGV</span><span class="p">)</span> <span class="o">//</span> <span class="mi">3</span><span class="p">;</span>

<span class="nb">die</span> <span class="p">&#34;</span><span class="s2">Not an integer</span><span class="p">&#34;</span> <span class="k">unless</span> <span class="nv">$S</span> <span class="o">=~</span> <span class="o">/^[</span><span class="mi">1</span><span class="o">-</span><span class="mi">9</span><span class="o">][</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="o">]*</span><span class="nv">$/</span><span class="p">;</span>
<span class="nb">die</span> <span class="p">&#34;</span><span class="s2">Not a legal length</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nf">length</span><span class="p">(</span><span class="nv">$B</span><span class="p">)</span> <span class="nv">%</span> <span class="nv">$S</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@B</span>     <span class="o">=</span>  <span class="nb">comb</span><span class="p">(</span><span class="nv">$B</span><span class="o">,</span> <span class="nv">$S</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">$first</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">(</span><span class="nv">@B</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">$total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">for</span> <span class="k">my</span> <span class="nv">$current</span> <span class="p">(</span><span class="nv">@B</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">my</span> <span class="nv">$flip</span> <span class="o">=</span> <span class="nf">bit_diff</span><span class="p">(</span><span class="nv">$first</span><span class="o">,</span> <span class="nv">$current</span><span class="p">);</span>
  <span class="nv">$total</span> <span class="o">+=</span> <span class="nv">$flip</span><span class="p">;</span>
  <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">: </span><span class="nv">$first</span><span class="s2"> -&gt; </span><span class="nv">$current</span><span class="s2"> -&gt; Flip: </span><span class="nv">$flip</span><span class="p">&#34;</span> <span class="k">if</span> <span class="nv">$verbose</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">say</span> <span class="nv">$total</span><span class="p">;</span>

<span class="k">sub</span> <span class="nf">bit_diff</span> <span class="p">(</span><span class="nv">$a</span><span class="o">,</span> <span class="nv">$b</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">my</span> <span class="nv">$flip</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">for</span> <span class="k">my</span> <span class="nv">$index</span> <span class="p">(</span><span class="mi">0</span> <span class="o">..</span> <span class="nf">length</span><span class="p">(</span><span class="nv">$a</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="nv">$flip</span><span class="o">++</span> <span class="k">if</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$a</span><span class="o">,</span> <span class="nv">$index</span><span class="o">,</span><span class="mi">1</span><span class="p">)</span> <span class="ow">ne</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$b</span><span class="o">,</span> <span class="nv">$index</span><span class="o">,</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nv">$flip</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nb">comb</span> <span class="p">(</span><span class="nv">$string</span><span class="o">,</span> <span class="nv">$length</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>  <span class="c1"># [1]</span>
<span class="p">{</span>
  <span class="k">my</span> <span class="nv">@result</span><span class="p">;</span>

  <span class="k">while</span> <span class="p">(</span><span class="nv">$string</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="nb">push</span><span class="p">(</span><span class="nv">@result</span><span class="o">,</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$string</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="nv">$length</span><span class="p">));</span>
    <span class="nv">$string</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$string</span><span class="o">,</span> <span class="nv">$length</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nv">@result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>[1] 缺失的 Raku 例程 &ldquo;comb&rdquo;。可选的第二个参数指定了它所返回的每个子串中所包含的（第一个参数的）子串长度。</p>
<p>运行它的结果与 Raku 版本相同。</p>
<pre><code>$ ./binary-substring-perl &quot;101100101&quot; 3
1

$ ./binary-substring-perl -v &quot;101100101&quot; 3
: 101 -&gt; 100 -&gt; Flip: 1
: 101 -&gt; 101 -&gt; Flip: 0
1

$ ./binary-substring-perl &quot;101100111&quot; 3
2

$ ./binary-substring-perl -v &quot;101100111&quot; 3
: 101 -&gt; 100 -&gt; Flip: 1
: 101 -&gt; 111 -&gt; Flip: 1
2
</code></pre><p>就是这样。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rakulang" term="rakulang" label="Rakulang" />
                            
                        
                    
                
            
        </entry>
    
</feed>
