<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.79.0">Hugo</generator><title type="html"><![CDATA[Raku on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/categories/raku/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/categories/raku/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/categories/raku/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/categories/raku/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-04-13T22:37:30+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/categories/raku/</id>
    
        
        <entry>
            <title type="html"><![CDATA[BUILD 和 TWEAK 的区别]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-03-07-difference-between-build-and-tweak-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-03-01-how-to-type-unicode-in-raku/?utm_source=atom_feed" rel="related" type="text/html" title="如何在 Raku 中输入 Unicode" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-17-method-isd/?utm_source=atom_feed" rel="related" type="text/html" title="Method-ish" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/?utm_source=atom_feed" rel="related" type="text/html" title="模式分派" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-custom-when/?utm_source=atom_feed" rel="related" type="text/html" title="自定义 when" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/?utm_source=atom_feed" rel="related" type="text/html" title="为最年轻的 Raku 贡献力量" />
            
                <id>https://ohmyweekly.github.io/notes/2021-03-07-difference-between-build-and-tweak-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-03-07T00:00:00+08:00</published>
            <updated>2021-03-07T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Difference Between Build and Tweak in Raku</blockquote><pre><code class="language-raku" data-lang="raku">class Student {
    has $.name;
    has $.sex;
    has $!age;

    method BUILD(:$!name) {

    }
}

my $stu = Student.new(:name('赵今麦'), :sex('女'));
dd $stu;
# Student $stu = Student.new(name =&gt; &quot;赵今麦&quot;, sex =&gt; Any)
</code></pre><p>如果你加上 <code>BUILD</code> 方法, 你必须自己全权负责设置所有的东西。也就是既包括公共属性, 也包括私有属性。</p>
<p>但你可以通过巧妙地命名参数来让你的生活更轻松。</p>
<pre><code class="language-raku" data-lang="raku">method BUILD (:$!name, :$!sex, :$!age) { }
</code></pre><p><code>BUILD</code> 方法可以初始化私有属性:</p>
<pre><code class="language-raku" data-lang="raku">class Student {
    has $.name;
    has $.sex;
    has $!age;

    method BUILD(:$name, :$sex, :$age) {
        $!name = $name;
        $!sex = $sex;
        $!age = $age;
    }

    method heart() { return '♥ ' ~ $!age }
}

my $stu = Student.new(:name('赵今麦'), :sex('女'), :age(18));
dd $stu;
say $stu;
say $stu.heart(); 
</code></pre><p>也可以在 TWEAK 方法中初始化私有属性:</p>
<pre><code class="language-raku" data-lang="raku">class Student {
    has $.name;
    has $.sex;
    has $!age;

    method TWEAK(:$name, :$sex, :$age) {
        $!age = $age + 1;
    }

    method heart() { return '♥' ~ $!age }
}

my $stu = Student.new(:name('赵今麦'), :sex('女'), :age(18));
dd $stu;
say $stu;
say $stu.heart(); 
</code></pre><p>使用 <code>TWEAK</code>，你会得到与 <code>BUILD</code> 相同的参数，但所有的初始设置都已经完成了（<code>BUILD</code> 或公共属性的自动绑定，以及所有的默认值，再加上保证所需值的存在）。你只是有机会做一些最后的调整。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/build" term="build" label="BUILD" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/tweak" term="tweak" label="TWEAK" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/object" term="object" label="Object" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[如何在 Raku 中输入 Unicode]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-03-01-how-to-type-unicode-in-raku/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-02-17-method-isd/?utm_source=atom_feed" rel="related" type="text/html" title="Method-ish" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/?utm_source=atom_feed" rel="related" type="text/html" title="模式分派" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-custom-when/?utm_source=atom_feed" rel="related" type="text/html" title="自定义 when" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/?utm_source=atom_feed" rel="related" type="text/html" title="为最年轻的 Raku 贡献力量" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/?utm_source=atom_feed" rel="related" type="text/html" title="Caesarean Substrings With Raku and Perl" />
            
                <id>https://ohmyweekly.github.io/notes/2021-03-01-how-to-type-unicode-in-raku/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-03-01T00:00:00+08:00</published>
            <updated>2021-03-01T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>How to Type Unicode in Raku</blockquote><p>Raku 有非常好的 Unicode 支持, 但是输入 Unicode 一直是一个很大的问题。在 REPL 中, 输入 Unicode 都不太方便。下面介绍几种方法来方便地输入 Unicode。</p>
<h1 id="comma">Comma</h1>
<p>最方便的是使用 Raku 自己的 IDE, <a href="http://commaide.com">Comma</a>。但是需要做两个设置:</p>
<p>首先, 切换到 Comma IDE, 点击左上角菜单栏的 <strong>Comma</strong> 选项, 在弹出的 <strong>Preference</strong> 窗口中, 找到左侧菜单栏中的 <strong>Editor</strong> 选项, 点击 <strong>Code Style</strong> 中的 <strong>Raku</strong>, 在右侧的窗口的最上面, 找到 <strong>Schema</strong> 一行, 点击倒三角图标, 在下拉菜单中选择 <strong>Project</strong>。然后在第二行文字中找到 <strong>Editor Behavior</strong>, 勾选 <strong>Convert operators to Unicode</strong>。完成后点击右下角的 <strong>Apply</strong>, 然后点击 <strong>OK</strong>。</p>
<p>这样当你在 Comma 中键入 <code>&gt;&gt;</code> 这样的运算符后, Comma 会自动把它转为 Unicode 形式的 <code>»</code>。目前已支持大部分 Unicode 运算符了。Comma 是跨平台的 Raku 编辑器, 支持 Windows、Linux 和 MacOS, 所以你想跨平台开发的话, Comma 值得一试。</p>
<h1 id="kitty">Kitty</h1>
<p>如果你想在 Vim 中开发 Raku, 又不想失去输入 Unicode 的乐趣, 请使用 <a href="https://github.com/kovidgoyal/kitty">Kitty</a> 终端。点开 Kitty 终端, 使用快捷键 Ctrl + Shift + U 即可触发输入 Unnicode 的界面(也可以键入命令 kitty +kitten unicode_input 来触发)。再通过快捷键  F1、F2、F3 和 F4 (或通过 Ctrl+[ 和 Ctrl+] 切换标签)可以分别按代码搜索 Unicode、按名字搜索 Unicode、按表情搜索和收藏。</p>
<p>例如在 REPL 中键入 Unicode 字符:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ raku
Welcome to 𝐑𝐚𝐤𝐮𝐝𝐨™ v2021.02.
Implementing the 𝐑𝐚𝐤𝐮™ programming language v6.d.
Built on MoarVM version 2021.02.

To <span class="nb">exit</span> <span class="nb">type</span> <span class="s1">&#39;exit&#39;</span> or <span class="s1">&#39;^D&#39;</span>
&gt; my @a <span class="o">=</span> 1..5<span class="p">;</span>
&gt; @a».sin
</code></pre></div><p>借助 Kitty, 数组 <code>@a</code> 后面的 <code>»</code> 可以这样输入, 先输入 <code>@a</code>, 然后使用快捷键 Shift + Ctrl + U 调出 Kitty 的 <strong>Unicode input</strong> 界面, 一般有两种方法, 第一种是通过快捷键 F1, 然后输入对应的 Unicode 编码, 再回车。第二种是通过快捷键 F2, 通过名字搜索, 例如输入单词 quota, 会出现一堆引号符号供你选择, 按上下方向键选中 <code>»</code>, 再回车即可。Vim 中同理。</p>
<h1 id="julia-repl">Julia REPL</h1>
<p>在 REPL 中输入 <code>\′ + 单词 + Tab, 例如输入 </code>\heartsuit` 再按 Tab, 就会自动变成 ♡</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">julia&gt; <span class="se">\h</span>eartsuit
</code></pre></div><h1 id="ipython">IPython</h1>
<p><code>\^</code> 输入上标, <code>\_p</code> 输入下标。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ ipython
<span class="se">\^</span>a
<span class="se">\_</span>p
</code></pre></div><h1 id="vscode">VScode</h1>
<p><code>\\′ + 完整的单词 + Tab, VsCode 会自动转换为 Unicode。 例如 </code>^a<code>和</code>_p`</p>
<h1 id="dmenu">dmenu</h1>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="ch">#!/usr/bin/perl</span>

<span class="c1">#use strict;</span>
<span class="c1">#use warnings;</span>
<span class="c1">#use autodie;</span>
<span class="c1">#use utf8;</span>


<span class="nb">open</span> <span class="nv">$FH</span><span class="p">,</span> <span class="s">&#34; | dmenu -i -l 30 -fn &#39;-xos4-terminus-medium-r-*-*-10-*&#39; | sed &#39;s/^\\(.\\).*/\\1/&#39; | tr -d &#39;\n&#39; | { pbcopy; pbpaste; } &#34;</span><span class="p">;</span>

<span class="c1"># if you do not have the xos4-terminus font that makes characters a little bigger :</span>
<span class="c1"># uncoment this line and use the second here document</span>
<span class="c1">#open $FH, &#34; | dmenu -i -l 30 | sed &#39;s/^\\(.\\).*/\\1/&#39; | tr -d &#39;\n&#39; | { xsel -ib; xsel -ip; } &#34;;</span>

<span class="c1"># also you can compile dmenu from source and change the font size directly in the C done</span>
<span class="c1"># in the file config.h / config.def.h</span>

<span class="c1"># this heredoc is well aligned with the -xos4-terminus-medium-r-*-*-10-* font</span>

<span class="k">print</span> <span class="nv">$FH</span> <span class="s">&lt;&lt;&#39;</span><span class="dl">EOF</span><span class="s">&#39;
</span><span class="s">«         hyper operator
</span><span class="s">»         hyper operator
</span><span class="s">∈        membership
</span><span class="s">∉        non-membership
</span><span class="s">∪         set union
</span><span class="s">∩         set intersection
</span><span class="s">∖         set difference
</span><span class="s">≡         set equality
</span><span class="s">≢        set inequality
</span><span class="s">⊖        symmetric set difference
</span><span class="s">⊍         baggy multiplication
</span><span class="s">⊎         baggy addition
</span><span class="s">∅        empty set
</span><span class="s">⊆        subset
</span><span class="s">⊈         not a subset
</span><span class="s">⊂        strict subset
</span><span class="s">⊄        not a strict subset
</span><span class="s">∋        reverse membership
</span><span class="s">∌          reverse non-membership
</span><span class="s">⊇        superset
</span><span class="s">⊉         not a superset
</span><span class="s">⊃        strict superset
</span><span class="s">⊅        not a strict superset
</span><span class="s">∞         infinity
</span><span class="s">⚛        atomic operator
</span><span class="s">π        pi
</span><span class="s">τ         tau
</span><span class="s">𝑒         Euler&#39;s number
</span><span class="s">∘         function composition
</span><span class="s">×        multiplication 
</span><span class="s">÷        division
</span><span class="s">≤         inferior or equal
</span><span class="s">≥         greater or equal
</span><span class="s">≠   	     inequality
</span><span class="s">−        substraction
</span><span class="s">≅       approximatively equal
</span><span class="s">…      sequence operator
</span><span class="s">‘         left single quotation mark
</span><span class="s">’         right single quotation mark
</span><span class="s">‚         single low-9 quotation mark 
</span><span class="s">”         right double quotation mark
</span><span class="s">“         left double quotation mark
</span><span class="s">„         double low-9 quotation mark
</span><span class="s">｢         halfwidth left corner bracket
</span><span class="s">｣         halfwidth right corner bracket
</span><span class="s">⁺         plus superscript
</span><span class="s">⁻         minus superscript
</span><span class="s">⁰         0 superscript
</span><span class="s">¹         1 superscript 
</span><span class="s">²         2 superscript 
</span><span class="s">³         3 superscript 
</span><span class="s">⁴         4 superscript 
</span><span class="s">⁵         5 superscript 
</span><span class="s">⁶         6 superscript 
</span><span class="s">⁷         7 superscript 
</span><span class="s">⁸         8 superscript 
</span><span class="s">⁹         9 superscript 
</span><span class="s"></span><span class="dl">EOF</span>
<span class="p">;</span>

<span class="c1"># use this without -xos4-terminus-medium-r-*-*-10-* font</span>
<span class="c1"># the default font may change given which font packages are installed and given the font configurations</span>

<span class="c1">#print $FH &lt;&lt;&#39;EOF&#39;</span>
<span class="c1">#«         hyper operator</span>
<span class="c1">#»         hyper operator</span>
<span class="c1">#∈         membership</span>
<span class="c1">#∉         non-membership</span>
<span class="c1">#∪         set union</span>
<span class="c1">#∩         set intersection</span>
<span class="c1">#∖         set difference</span>
<span class="c1">#≡         set equality</span>
<span class="c1">#≢         set inequality</span>
<span class="c1">#⊖         symmetric set difference</span>
<span class="c1">#⊍         baggy multiplication</span>
<span class="c1">#⊎         baggy addition</span>
<span class="c1">#∅         empty set</span>
<span class="c1">#⊆         subset</span>
<span class="c1">#⊈         not a subset</span>
<span class="c1">#⊂         strict subset</span>
<span class="c1">#⊄         not a strict subset</span>
<span class="c1">#∋         reverse membership</span>
<span class="c1">#∌         reverse non-membership</span>
<span class="c1">#⊇         superset</span>
<span class="c1">#⊉         not a superset</span>
<span class="c1">#⊃         strict superset</span>
<span class="c1">#⊅         not a strict superset</span>
<span class="c1">#∞         infinity</span>
<span class="c1">#⚛         atomic operator</span>
<span class="c1">#π         pi</span>
<span class="c1">#τ         tau</span>
<span class="c1">#𝑒         Euler&#39;s number</span>
<span class="c1">#∘         function composition</span>
<span class="c1">#×         multiplication </span>
<span class="c1">#÷         division</span>
<span class="c1">#≤         inferior or equal</span>
<span class="c1">#≥         greater or equal</span>
<span class="c1">#≠         inequality</span>
<span class="c1">#−         substraction</span>
<span class="c1">#≅         approximatively equal</span>
<span class="c1">#…         sequence operator</span>
<span class="c1">#‘         left single quotation mark</span>
<span class="c1">#’         right single quotation mark</span>
<span class="c1">#‚         single low-9 quotation mark </span>
<span class="c1">#”         right double quotation mark</span>
<span class="c1">#“         left double quotation mark</span>
<span class="c1">#„         double low-9 quotation mark</span>
<span class="c1">#｢         halfwidth left corner bracket</span>
<span class="c1">#｣         halfwidth right corner bracket</span>
<span class="c1">#⁺         plus superscript</span>
<span class="c1">#⁻         minus superscript</span>
<span class="c1">#⁰         0 superscript</span>
<span class="c1">#¹         1 superscript </span>
<span class="c1">#²         2 superscript </span>
<span class="c1">#³         3 superscript </span>
<span class="c1">#⁴         4 superscript </span>
<span class="c1">#⁵         5 superscript </span>
<span class="c1">#⁶         6 superscript </span>
<span class="c1">#⁷         7 superscript </span>
<span class="c1">#⁸         8 superscript </span>
<span class="c1">#⁹         9 superscript </span>
<span class="c1">#EOF</span>
<span class="c1">#;</span>



<span class="nb">close</span> <span class="nv">$FH</span><span class="p">;</span>



<span class="cp">__END__
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">=pod 
</span><span class="cp">
</span><span class="cp">=head1 NAME
</span><span class="cp">
</span><span class="cp">lazy_raku_unicode.pl
</span><span class="cp">
</span><span class="cp">=head1 SYNOPSIS
</span><span class="cp">
</span><span class="cp">This script allows you to select a Unicode symbol from a drop-down menu that you can simply paste into your text editor, terminal or IDE.
</span><span class="cp">
</span><span class="cp">All it does is send a heredoc through a pipe to dmenu, and copy to the clipboard the character that you selected.
</span><span class="cp">
</span><span class="cp">Dmenu is a program that reads lines from stdin, display them in a menu, and write to stdout the lines selected.
</span><span class="cp">
</span><span class="cp">It is not practical to execute this script from a terminal each time you want a character though. This is why it should be executed by sxhkd.
</span><span class="cp">
</span><span class="cp">Sxhkd is the program that will call this script each time you press the right key combination.
</span><span class="cp">
</span><span class="cp">Only the most useful Unicode characters are present to not make dmenu get too slow. (It is usually very fast when there is only ascii text.)
</span><span class="cp">
</span><span class="cp">This include most of the Raku operators that have a Unicode version, plus some quoting characters, superscripts, and mathematical constants.
</span><span class="cp">
</span><span class="cp">=head1 MANUAL INSTALLATION STEPS
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">=head2 INSTALLING DMENU
</span><span class="cp">
</span><span class="cp">B&lt;On Debian or Ubuntu :&gt;
</span><span class="cp">
</span><span class="cp">	sudo apt install suckless-tools
</span><span class="cp">
</span><span class="cp">B&lt;On Archlinux :&gt;
</span><span class="cp">
</span><span class="cp">	sudo pacman -Sy dmenu
</span><span class="cp">
</span><span class="cp">B&lt;Compile it from source :&gt;
</span><span class="cp">
</span><span class="cp">	https://tools.suckless.org/dmenu/
</span><span class="cp">
</span><span class="cp">=head2 CHANGING DMENU FONT SIZE (OPTIIONAL)
</span><span class="cp">
</span><span class="cp">You have only two ways of changing the font size :
</span><span class="cp">
</span><span class="cp">Change the default font with the B&lt;-fn&gt; flag (See dmenu(1) for the specifics).
</span><span class="cp">	
</span><span class="cp">	dmenu -l 30 -fn &#39;-xos4-terminus-medium-r-*-*-10-*&#39;
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">Modify directly the C source code of dmenu. Only the files B&lt;config.h / config.def.h&gt;.
</span><span class="cp">
</span><span class="cp">Simply edit this line and change 10 by 14 for example.
</span><span class="cp">
</span><span class="cp">	static const char *fonts[] = {
</span><span class="cp">		&#34;monospace:size=10&#34;
</span><span class="cp">	};
</span><span class="cp">
</span><span class="cp">Then execute sudo make install and you&#39;re ready to go.
</span><span class="cp">
</span><span class="cp">=head2 INSTALLING SXHKD
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">B&lt;On Debian or Ubuntu :&gt;
</span><span class="cp">
</span><span class="cp">	sudo apt install sxhkd
</span><span class="cp">
</span><span class="cp">B&lt;On Archlinux :&gt;
</span><span class="cp">
</span><span class="cp">	sudo pacman -Sy sxhkd
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">=head2 CONFIGURING SXHKD
</span><span class="cp">
</span><span class="cp">B&lt;Autostarting sxhkd at startup :&gt;
</span><span class="cp">
</span><span class="cp">simply put this line in B&lt;~/.xprofile&gt; :
</span><span class="cp">
</span><span class="cp">	sxhkd &amp;
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">B&lt;Setting the keybinding :&gt;
</span><span class="cp">	
</span><span class="cp">
</span><span class="cp">Add these two lines in B&lt;~/.config/sxhkd/sxhkdrc&gt;
</span><span class="cp">
</span><span class="cp">	ctrl + apostrophe
</span><span class="cp">		/path/to/lazy_raku_unicode.pl
</span><span class="cp">
</span><span class="cp">The keybinding have to start at the beginning of a line, and the command has to follow on the next line and be preceded by a tabulation.
</span><span class="cp">
</span><span class="cp">To make sxhkd reload the config file, either kill it and relaunch it, or send a SIGUSR1 signal. This command can do it :
</span><span class="cp">
</span><span class="cp">	pidof sxhkd | kill -SIGUSR1 $(cat /dev/stdin)
</span><span class="cp">
</span><span class="cp">If you want to use a different keybinding, please see sxhkd(1) and use xev(1) to find the name of keys.
</span><span class="cp">
</span><span class="cp">Here the name of some of the keys : ctrl, super, alt, Return .
</span><span class="cp">
</span><span class="cp">=head1 SEE ALSO
</span><span class="cp">
</span><span class="cp">dmenu(1), sxhkd(1), xev(1)
</span><span class="cp">
</span><span class="cp">
</span><span class="cp">=cut
</span></code></pre></div><p>参考链接: <a href="https://docs.raku.org/language/unicode_entry">https://docs.raku.org/language/unicode_entry</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/unicode" term="unicode" label="Unicode" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Method-ish]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-02-17-method-isd/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/?utm_source=atom_feed" rel="related" type="text/html" title="模式分派" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-custom-when/?utm_source=atom_feed" rel="related" type="text/html" title="自定义 when" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/?utm_source=atom_feed" rel="related" type="text/html" title="为最年轻的 Raku 贡献力量" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/?utm_source=atom_feed" rel="related" type="text/html" title="Caesarean Substrings With Raku and Perl" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/?utm_source=atom_feed" rel="related" type="text/html" title="如果集合如我所想" />
            
                <id>https://ohmyweekly.github.io/notes/2021-02-17-method-isd/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-02-28T00:00:00+08:00</published>
            <updated>2021-02-28T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Method-ish</blockquote><p>在我的上一篇文章中，我又一次为从 CORE 中增强类的方法而苦恼。这种挣扎完全没有必要，因为我并没有用增加的方法改变对象的状态。对于做更高级的东西，我可能不得不这样做。把手伸进 Raku 的内部这么深，我可能会把自己烫伤。既然我想做的是把我的代码绑在编译器的变化上，反正我可能会全身心地投入到 nqp-land 中去。</p>
<pre><code class="language-raku" data-lang="raku">my \j = 1 | 2 | 3;
dd j;
use nqp;
.say for nqp::getattr(j, Junction, '$!eigenstates');
# OUTPUT: any(1, 2, 3)
          1
          2
          3
</code></pre><p>我们可以使用 nqp 来获取私有属性，而不需要添加任何方法。这就有点儿不伦不类了。所以，让我们用一个伪方法来做一些 deboilerplating。</p>
<pre><code class="language-raku" data-lang="raku">sub pry(Mu $the-object is raw) {
    use InterceptAllMethods;

    class Interceptor {
        has Mu $!the-object;
        method ^find_method(Mu \type, Str $name) {
            my method (Mu \SELF:) is raw {
                use nqp;
                my $the-object := nqp::getattr(SELF, Interceptor, '$!the-object');
                nqp::getattr($the-object, $the-object.WHAT, '$!' ~ $name)
            }
        }
    }

    use nqp;
    nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, '$!the-object', $the-object);
}

.say for j.&amp;pry.eigenstates;
# OUTPUT: 1
          2
          3
</code></pre><p>通过 InterceptAllMethods，lizmat 改变了类关键字的行为，允许我们提供一个 FALLBACK-method 来捕获任何方法，包括从 Mu 继承的方法。这反过来又允许 pry 返回的对象将任何方法调用转移到一个自定义的方法。在这个方法中，我们可以对 <code>.&amp;pry</code> 被调用的对象做任何我们想做的事情。</p>
<p>由于我们的特殊对象会拦截任何调用，甚至是 Mu 的调用，我们需要找到另一种方法来调用 <code>.new</code>。由于 <code>.^</code> 不是 <code>.</code> 的特殊形式，我们可以用它来获得对类方法的访问。</p>
<pre><code class="language-raku" data-lang="raku">sub interceptor(Method $the-method){
    use InterceptAllMethods;
    use nqp;

    sub (Mu $the-object is raw) {
        my class Interceptor {
            has Mu $!the-object;
            has Code $!the-method;

            method ^find_method(Mu \type, Mu:D $name) {
                my method (Mu \SELF: |c) is raw {
                    $!the-method.($!the-object, $name, |c)
                }
            }
            method ^introspect(Mu \type, Mu \obj) {
                my method call-it() is raw {
                    $!the-object
                }
                obj.&amp;call-it;
            }
            method ^new(Mu \type, $the-object!, $the-method) {
                nqp::p6bindattrinvres(
                        nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, '$!the-object', $the-object),
                        Interceptor, '$!the-method', $the-method)
            }
        }

            # nqp::p6bindattrinvres(
                #     nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, '$!the-object', $the-object),
                #   Interceptor, '$!the-method', $the-method);
        Interceptor.^new($the-object, $the-method)
    }
}

my &amp;first-defined = interceptor(
    my method (Positional \SELF: $name) {
        for SELF.flat -&gt; $e {
            with $e.&quot;$name&quot;(|%_) {
                .return
            }
        }
        Nil
    }
);

my $file = &lt;file1.txt file2.txt file3.txt nohup.out&gt;».IO.&amp;first-defined.open(:r);
dd $file;
# OUTPUT: Handle $file = IO::Handle.new(path =&gt; IO::Path.new(&quot;nohup.out&quot;, :SPEC(IO::Spec::Unix), :CWD(&quot;/home/dex/projects/raku/tmp&quot;)), chomp =&gt; Bool::True, nl-in =&gt; $[&quot;\n&quot;, &quot;\r\n&quot;], nl-out =&gt; &quot;\n&quot;, encoding =&gt; &quot;utf8&quot;)
</code></pre><p>sub <code>interceptor</code> 接受一个方法并返回一个 sub。如果这个 sub 像方法一样被调用，它将把要被调用的方法的名称和调用者转发给一个自定义方法。当 <code>.&amp;first-defined</code> 被调用时，会返回一个特殊的对象。让我们来看看它是什么。</p>
<pre><code class="language-raku" data-lang="raku">my \uhhh-special = &lt;a b c&gt;.&amp;first-defined;
dd uhhh-special.^introspect(uhhh-special);
# OUTPUT: ($(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), method &lt;anon&gt; (Positional \SELF: $name, *%_) { #`(Method|93927752146784) ... })
</code></pre><p>我们必须给 <code>.^introspect</code> 一个我们想看的对象，因为它的调用者是类 Interceptor 的类型对象。</p>
<p>目前，我还不知道有什么办法（毕竟，我知道的只是足够多的东西，真的很危险。这是不幸的，因为 lizmat 决定重载关键字 <code>class</code>，而不是用不同的名字导出特殊的 <code>Metamodel::ClassHOW</code>。如果我们不想或不能有外部依赖，我们可以使用 MOP 来创建我们的类型对象。</p>
<pre><code class="language-raku" data-lang="raku">class InterceptHOW is Metamodel::ClassHOW {
    method publish_method_cache(|) { }
}

sub ipry(Mu $the-object is raw) {
    my \Interceptor = InterceptHOW.new_type(:name&lt;Interceptor&gt;);
    Interceptor.^add_attribute(Attribute.new(:name&lt;$!the-object&gt;, :type(Mu), :package(Interceptor)));
    Interceptor.^add_meta_method('find_method',
        my method find_method(Mu \type, Str $name) {
            # say „looking for $name“;
            my method (Mu \SELF:) is raw {
                use nqp;
                my $the-object := nqp::getattr(SELF, Interceptor, '$!the-object');
                nqp::getattr($the-object, $the-object.WHAT, '$!' ~ $name)
            }
    });
    Interceptor.^compose;

    use nqp;
    nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, '$!the-object', $the-object);
}
</code></pre><p>当我写这篇文章的时候，我发现 <code>.^add_meta_method</code> 只有在提供给它的方法的第一个参数的名字和 <code>Str</code> 相同的时候才会工作。起初，我尝试了一个匿名方法，它最终出现在 <code>.^meta_method_table</code> 中，但从未被调用。我想这个 bug 其实并不重要，因为这个元方法根本没有被记录下来。如果我玩火，我没有权利抱怨烧伤。你会在野外的 <code>Actions.nqp</code> 中发现这个方法。Class 关键字并没有什么神奇的作用。Rakudo 只是使用 MOP 来构造类型对象。</p>
<p>我们不能在 Raku 中重载赋值操作符。这其实并不需要，因为赋值是通过调用一个名为 STORE 的方法来实现的。由于我们得到了对 dispatch 的完全控制，我们可以拦截任何方法调用，包括一连串的方法调用。</p>
<pre><code class="language-raku" data-lang="raku">multi sub methodify(%h, :$deeply!) {
    sub interceptor(%h, $parent = Nil){
        use InterceptAllMethods;
        use nqp;

        class Interceptor is Callable {
            has Mu $!the-object;
            has Mu @!stack;

            method ^find_method(Mu \type, Mu:D $name) {
                my method (Mu \SELF: |c) is raw {
                    my @new-stack = @!stack;
                    my $the-object = $!the-object;

                    if $name eq 'STORE' {
                        # workaround for rakudobug#4203
                        $the-object{||@new-stack.head(*-1)}:delete if $the-object{||@new-stack.head(*-1)}:exists;

                        $the-object{||@new-stack} = c;
                        return-rw c
                    } else {
                        @new-stack.push: $name;
                        my \nextlevel = SELF.^new($!the-object, @new-stack, $name);
                        nextlevel
                    }
                }
            }
            method ^introspect(Mu \type, Mu \obj) {
                my method call-it() is raw {
                    $!the-object, @!stack
                }
                obj.&amp;call-it;
            }
            method ^new(Mu \type, $the-object!, @new-stack?, $name?) {
                $name
                    ?? nqp::p6bindattrinvres(
                        nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, '$!the-object', $the-object),
                        Interceptor, '@!stack', @new-stack)
                    !! nqp::p6bindattrinvres(nqp::create(Interceptor), Interceptor, '$!the-object', $the-object)
                }
        }

        Interceptor.^new(%h)
    }

    interceptor(%h)
}

my %h2;
my $o2 = methodify(%h2, :deeply);
$o2.a.b = 42;
dd %h2;
$o2.a.b.c = &lt;answer&gt;;
dd %h2;
say $o2.a.b.c;
# OUTPUT: Hash %h2 = {:a(${:b(\(42))})}
          Hash %h2 = {:a(${:b(${:c(\(&quot;answer&quot;))})})}
          This type cannot unbox to a native string: P6opaque, Interceptor
            in block &lt;unit&gt; at /home/dex/projects/raku/any-chain.raku line 310
</code></pre><p>每当我们调用一个方法时，都会创建一个新的 Interceptor 实例，它存储了前一个方法的名称。这样我们就可以沿着方法调用链移动。由于赋值调用 STORE，我们可以将赋值转移到我们用作实际数据结构的 Hash 中。唉，检索值就不一样了，因为 Raku 不区分方法调用和 FETCH。在这里，龙比我强。我还是包含了这个一半失败的尝试，因为我对 slippy 半列表有很好的利用。这需要使用 <code>v6.e.preview</code>，让我踩到了一个 bug。可能还有更多这样的情况。所以请使用同样的，这样我们就可以在 <code>.e</code> 发布到野外之前，把所有的野兽都杀掉。</p>
<p>能够完全控制方法调用链将是一件好事。也许我们可以用 RakuAST 来做到这一点。</p>
<p>有了这些已经可以工作的东西，我们可以做一些有趣的事情。那些烦人的异常总是在拖我们的后腿。我们可以用 <code>try</code> 来化解它们，但那会破坏一个方法调用链。</p>
<pre><code class="language-raku" data-lang="raku">constant no-argument-given = Mu.new;
sub try(Mu $obj is raw, Mu $alternate-value = no-argument-given) {
    interceptor(my method (Mu \SELF: $name, |c) {
        my $o = SELF;
        my \m = $o.^lookup($name) orelse {
            my $bt = Backtrace.new;
            my $idx = $bt.next-interesting-index($bt.next-interesting-index + 1);
            (X::Method::NotFound.new(:method($name), :typename($o.^name)) but role :: { method vault-backtrace { False }}).throw(Backtrace.new($idx + 1));
        }

        try {
            $o = $o.&quot;$name&quot;(|c);
        }
 
        $! ~~ Exception
            ?? $alternate-value.WHICH eqv no-argument-given.WHICH
                ?? $o
                !! $alternate-value
            !! $o
    }).($obj)
}

class C {
    has $.greeting;
    method might-throw { die &quot;Not today love!&quot; }
    method greet { say $.greeting }
}

C.new(greeting =&gt; ‚Let's make love!‘).&amp;try.might-throw.greet;
# OUTPUT: Let's make love!
</code></pre><p>伪方法 try 将会化解任何异常，并允许继续调用 C 语言的方法。我必须用一个特殊的值来标记没有可选的参数 <code>$alternate-value</code>，因为它实际上可能会把异常对象变成 <code>Nil</code>。</p>
<p>我很肯定还有很多这样的小帮手在等着我们去发现。未来可能会有一个模块，希望能帮助 Raku 成为一个好的<a href="https://ftp.fau.de/fosdem/2021/D.perl/programming_lang_for_free_software.webm">编程语言</a>。</p>
<p>原文链接: <a href="https://gfldex.wordpress.com/2021/02/17/method-ish/">https://gfldex.wordpress.com/2021/02/17/method-ish/</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku-%E5%8D%9A%E5%AE%A2" term="raku-%E5%8D%9A%E5%AE%A2" label="Raku 博客" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[模式分派]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-02-17-method-isd/?utm_source=atom_feed" rel="related" type="text/html" title="Method-ish" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-custom-when/?utm_source=atom_feed" rel="related" type="text/html" title="自定义 when" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/?utm_source=atom_feed" rel="related" type="text/html" title="为最年轻的 Raku 贡献力量" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/?utm_source=atom_feed" rel="related" type="text/html" title="Caesarean Substrings With Raku and Perl" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/?utm_source=atom_feed" rel="related" type="text/html" title="如果集合如我所想" />
            
                <id>https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-02-28T00:00:00+08:00</published>
            <updated>2021-02-28T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Pattern Dispatch</blockquote><p>一直以来乐于助人的 <a href="https://stackoverflow.com/users/1077672/raiph">raiph</a> 在回答一个关于模式匹配的<a href="https://stackoverflow.com/questions/66233465/haskell-like-pattern-matching-in-raku">问题</a>时希望得到 RakuAST，就像在 Haskell 中一样。有人提出用 MMD 来解决这个问题。这样做，得到一个贯穿的默认路径是无解的。由于 dispatch 简单来说就是模式匹配，我们只需要做一些额外的工作。简而言之，dispatcher 得到一个函数列表和一个带参数的列表。第一个接受所有参数的函数获胜。</p>
<pre><code class="language-raku" data-lang="raku">class Hold { has $.key; }
class Press { has $.key; }
class Err { has $.msg; }

sub else(&amp;code) { &amp;code }

sub match($needle, *@tests) {
    for @tests.head(*-1) -&gt; &amp;f {
        if &amp;f.cando(\($needle)) {
            return f($needle);
        }
    }
    @tests.tail.();
}

match Hold.new(:key&lt;a&gt;),
    -&gt; Hold (:$key) { put „holding $key“; },
    -&gt; Press (:$key) { put „pressing $key“; },
    -&gt; Err (:$msg) { warn „ERR: $msg“ },
    else { fail ‚unsopported‘ };
</code></pre><p>方法 <code>.cando</code> 需要一个 <a href="https://docs.raku.org/type/Capture">Capture</a> 来告诉我们一个 Routine 是否可以用一个给定的参数列表来调用。为了创建这样一个捕获，我们使用字面的 <code>\($arguments, $go, $here)</code>。我们不在最后测试默认值。相反，当没有其他函数匹配时，我们会调用该函数。声明 sub <code>else</code> 只是为了美化。</p>
<p>由于我们是在函数式的土地上，我们可以使用 Raku 提供给我们的所有方便的功能。</p>
<pre><code class="language-raku" data-lang="raku">my &amp;key-matcher = &amp;match.assuming(*,[
        -&gt; Hold (:$key) { put „holding $key“; },
        -&gt; Press (:$key) { put „pressing $key“; },
        -&gt; Err (:$msg) { warn „ERR: $msg“ },
        else { fail ‚unsopported‘ };
]);

sub key-source {
    gather loop {
        sleep 1;
        take (Hold.new(:key&lt;a&gt;), Press.new(:key&lt;b&gt;), Err.new(:msg&lt;WELP!&gt;), 'unsupported').pick;
    }
}

.&amp;key-matcher for key-source;
</code></pre><p>我们要帮助 <code>.assuming</code> 有点理解 slurpies，把函数列表放在一个显式 Array 中。</p>
<p>总有一种函数式的方法来解决一个问题。有时我们甚至可以从中得到一个整齐的语法。</p>
<p>原文链接: <a href="https://gfldex.wordpress.com/2021/02/24/pattern-dispatch/">https://gfldex.wordpress.com/2021/02/24/pattern-dispatch/</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku-%E5%8D%9A%E5%AE%A2" term="raku-%E5%8D%9A%E5%AE%A2" label="Raku 博客" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[自定义 when]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-02-28-custom-when/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-02-16-contributing-to-raku/?utm_source=atom_feed" rel="related" type="text/html" title="为最年轻的 Raku 贡献力量" />
                <link href="https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/?utm_source=atom_feed" rel="related" type="text/html" title="Caesarean Substrings With Raku and Perl" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/?utm_source=atom_feed" rel="related" type="text/html" title="如果集合如我所想" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-17-method-isd/?utm_source=atom_feed" rel="related" type="text/html" title="Method-ish" />
                <link href="https://ohmyweekly.github.io/notes/2021-02-28-pattern-dispatch/?utm_source=atom_feed" rel="related" type="text/html" title="模式分派" />
            
                <id>https://ohmyweekly.github.io/notes/2021-02-28-custom-when/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-02-28T00:00:00+08:00</published>
            <updated>2021-02-28T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Custom When</blockquote><p>我不太喜欢上一篇文章中使用匹配的语法。它的参数列表中的逗号看起来很奇怪，不合适。也许是因为我的眼睛习惯了给定的块。睡一觉就好了。</p>
<pre><code class="language-raku" data-lang="raku">sub accord(&amp;c) { (c(CALLER::&lt;$_&gt;); succeed) if &amp;c.cando(\(CALLER::&lt;$_&gt;)) }

given Err.new(:msg&lt;a&gt;) {
    accord -&gt; Hold (:$key) { put „holding $key“; }
    accord -&gt; Err (:$msg) { warn „ERR: $msg“ }
    default { fail ‚unsupported‘ }
}
</code></pre><p>这是因为 <code>accord</code> 模仿了 <code>when</code> 的工作。它做了一些匹配，当 True 时调用一个块，并在每个块的结尾添加一个 success（通过抛出一个控制异常）。given 所做的只是设置主题。它还充当了 caller 的角色，所以我们可以通过一个伪包来访问它的 <code>$_</code>。利用 pointy 的签名来做<a href="https://docs.raku.org/type/Signature#Destructuring_arguments">解构</a>是相当强大的。把这个添加到 CORE 中可能是个好主意。</p>
<p>我们可能要把 Raku 的定义改成: &ldquo;Raku 是一种高度可组合的编程语言&rdquo;, 在这里，所有的东西都会落到实处。&quot;</p>
<p>更新一下。</p>
<p>有些情况下，<code>$_</code> 不是动态的。另外，success 正在抛出一个控制异常，而这些的处理程序是由 when 或默认添加的。这种情况是在编译时发生的，目前不能用宏来解决。第一个问题可以用黑魔法解决。后一个问题需要用默认块。我没有找到一种方法来提供一个合理的错误信息，如果缺少这个块。</p>
<pre><code class="language-raku" data-lang="raku">multi sub accord(&amp;c) {
    use nqp;
    $_ := nqp::getlexcaller('$_');
    (c($_); succeed) if &amp;c.cando(\($_))
}

for @possibilities.roll(1) -&gt; $needle {
    given $needle {
        accord -&gt; Hold (:$key) { put „holding $key“; }
        accord -&gt; Err (:$msg) { warn „ERR: $msg“ }
        default { warn ‚unsopported‘ }
    }
}
</code></pre><p>原文链接: <a href="https://gfldex.wordpress.com/2021/02/25/custom-when/">https://gfldex.wordpress.com/2021/02/25/custom-when/</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rakulang" term="rakulang" label="Rakulang" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Caesarean Substrings With Raku and Perl]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-02-07-if-sets-would-dwim/?utm_source=atom_feed" rel="related" type="text/html" title="如果集合如我所想" />
                <link href="https://ohmyweekly.github.io/notes/2020-10-04-the-strange-case-of-the-greedy-junction/?utm_source=atom_feed" rel="related" type="text/html" title="贪婪 Junction 的奇闻异事" />
                <link href="https://ohmyweekly.github.io/notes/2020-10-04-reconstructing-raku-junctions/?utm_source=atom_feed" rel="related" type="text/html" title="重构 Raku 的 Junction" />
            
                <id>https://ohmyweekly.github.io/notes/2021-01-30-caesarean-substrings-with-raku-and-perl/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-02-07T00:00:00+08:00</published>
            <updated>2021-02-07T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Caesarean Substrings With Raku and Perl</blockquote><p>[113] 发表于2021年1月30日。
这是我对 <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-097/">Perl 每周挑战#097</a> 的回应。</p>
<h2 id="挑战-0971-凯撒密码">挑战 #097.1: 凯撒密码</h2>
<p>给你一个只包含字母 <code>A..Z</code> 的字符串 <code>$S</code> 和一个数字 <code>$N</code>。
写一个脚本，用<a href="https://en.wikipedia.org/wiki/Caesar_cipher">凯撒密码</a>对给定的字符串 <code>$S</code> 进行加密，左移大小为 <code>$N</code>。</p>
<p>例子:
输入: $S = &ldquo;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&rdquo;, $N = 3
输出: &ldquo;QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD&rdquo;</p>
<p>Plain:    ABCDEFGHIJKLMNOPQRSTUVWXYZ
Cipher:   XYZABCDEFGHIJKLMNOPQRSTUVW</p>
<p>Plaintext:  THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG
Ciphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD</p>
<p>&ldquo;只用字母 <code>A...Z</code>&rdquo; 的表述是错误的，因为例子中也有几个空格。因此，应该允许这些空格。</p>
<p>文件: caesar-cipher</p>
<pre><code class="language-raku" data-lang="raku">#! /usr/bin/env raku

subset AZ-space of Str where /^ &lt;[ A .. Z \s ]&gt;+ $/;   # [1]
subset PosInt of Int where -25 &lt;= $_ &lt;= 25;            # [2]

unit sub MAIN (AZ-space $S = 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG',
               PosInt $N = 3);                         # [3]

say $S.comb.map({ caesar($_, $N) }).join;              # [4]

sub caesar ($char, $shift)
{
  return $char if $char eq &quot; &quot;;                        # [5]

  my $code = $char.ord;                                # [6]

  $code -= $shift;                                     # [7]

  $code += 26 if $code &lt; 65;  # 'A'                    # [8]
  $code -= 26 if $code &gt; 90;  # 'Z'                    # [8a]

  return $code.chr;                                    # [9]
}
</code></pre><p>[1] 所允许的字符 (或 «特定领域字母»).</p>
<p>[2] 挑战说左移值是一个数字。允许除整数以外的任何东西是没有意义的，所以我把值限制在这个类型。负值应该是可以的，它们意味着右移值（而不是左移）。</p>
<p>[3] 参数，默认值为挑战中给出的值。</p>
<p>[4] 将字符串分割成单个字符（用梳子(comb)，在每个字符上应用 &ldquo;caesar&rdquo; 函数（用map），再次将字符连接成一个字符串（用join），然后打印出来。</p>
<p>[5] 不移动空格。</p>
<p>[6] 获取字符的代码点。</p>
<p>[7] 减去移位值（当我们向左移位时，或在字母表中降低移位值）。</p>
<p>[8] 绕回, 如果我们移出A-Z范围，这里为更低 - 或更高的 [8b]。</p>
<p>[9] 获取指定代码点的字符。</p>
<p>查看 docs.raku.org/routine/ord 获取更多关于 ord 的信息。</p>
<p>查看 docs.raku.org/routine/chr 获取更多关于 chr 的信息。</p>
<p>运行它:</p>
<pre><code>$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD

$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3
WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ

$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT

$ ./caesar-cipher 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT
</code></pre><p>Raku 有一个 ords 变体，它接收一整个字符串，而不是一个字符作为 ord。还有 chrs，它接收一个代码点数组，并将它们变成一个字符串，而不是像 chr 那样接收一个字符的代码点。让我们用它们来写一个更短的程序。</p>
<p>文件: caesar-cipher-map</p>
<pre><code class="language-raku" data-lang="raku">#! /usr/bin/env raku

subset AZ-space of Str where /^ &lt;[ A .. Z \s ]&gt;+ $/;
subset PosInt of Int where -25 &lt;= $_ &lt;= 25;

unit sub MAIN (AZ-space $S = 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG',
               PosInt $N = 3);

say caesar($S, $N);

sub caesar ($string, $shift)
{
  return $string.ords.map({$_ == 32 ?? 32 !! (($_ - $shift - 65) % 26 ) + 65}).chrs;
    # #################### # 1a ############# ############ # 1b  # 1c ## 1d
}
</code></pre><p>[1] 我们使用map来改变各个代码点。我们让代码点为32的空间单独存在[1a]。每一个其他的值我们都还原成0到25之间的数字（通过减去第一个字母的代码点（A：65）和移位值[1b]）。模数运算符 (%) 为我们处理负值，做正确的事情。例如：-2 % 26 -&gt; 24 [1c]。然后我们添加调整值到它们应该在的位置(从A到Z)[1d]，然后我们将整个数组的代码点变成一个字符串。</p>
<p>查看 docs.raku.org/routine/ords 获取更多关于 ords 的信息。</p>
<p>查看 docs.raku.org/routine/chrs 获取更多关于 chrs 的信息。</p>
<p>运行它的结果和之前一样。</p>
<pre><code>$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD

$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3
WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ

$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT

$ ./caesar-cipher-map 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT
</code></pre><h2 id="perl-版本">Perl 版本</h2>
<p>这是对第一个 Raku 版的直接翻译。</p>
<p>File: caesar-cipher-perl</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="ch">#! /usr/bin/env perl</span>

<span class="k">use</span> <span class="nn">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">feature</span> <span class="s">&#39;say&#39;</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">feature</span> <span class="s">&#39;signatures&#39;</span><span class="p">;</span>

<span class="k">no</span> <span class="nn">warnings</span> <span class="s">&#34;experimental::signatures&#34;</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$S</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">(</span><span class="nv">@ARGV</span><span class="p">)</span> <span class="sr">//</span> <span class="s">&#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39;</span><span class="p">;</span>

<span class="nb">die</span> <span class="s">&#34;Illegal characters&#34;</span> <span class="k">unless</span> <span class="nv">$S</span> <span class="o">=~</span><span class="sr"> /^[A-Z\s]+$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$N</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">(</span><span class="nv">@ARGV</span><span class="p">)</span> <span class="sr">//</span> <span class="mi">3</span><span class="p">;</span>

<span class="nb">die</span> <span class="s">&#34;Illegal shift $N&#34;</span> <span class="k">if</span> <span class="nv">$N</span> <span class="o">!~</span> <span class="sr">/^\-?\d+$/</span> <span class="o">||</span> <span class="nv">$N</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">25</span> <span class="o">||</span> <span class="nv">$N</span> <span class="o">&gt;</span> <span class="mi">25</span><span class="p">;</span>

<span class="n">say</span> <span class="nb">join</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nb">map</span> <span class="p">{</span> <span class="n">caesar</span><span class="p">(</span><span class="nv">$_</span><span class="p">,</span> <span class="nv">$N</span><span class="p">)</span> <span class="p">}</span> <span class="nb">split</span><span class="p">(</span><span class="sr">//</span><span class="p">,</span> <span class="nv">$S</span><span class="p">));</span>

<span class="k">sub</span> <span class="nf">caesar</span> <span class="p">($char, $shift)
</span><span class="p">{</span>
  <span class="k">return</span> <span class="nv">$char</span> <span class="k">if</span> <span class="nv">$char</span> <span class="ow">eq</span> <span class="s">&#34; &#34;</span><span class="p">;</span>

  <span class="k">my</span> <span class="nv">$code</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="nv">$char</span><span class="p">);</span>

  <span class="nv">$code</span> <span class="o">-=</span> <span class="nv">$shift</span><span class="p">;</span>

  <span class="nv">$code</span> <span class="o">+=</span> <span class="mi">26</span> <span class="k">if</span> <span class="nv">$code</span> <span class="o">&lt;</span> <span class="mi">65</span><span class="p">;</span>  <span class="c1"># &#39;A&#39;</span>
  <span class="nv">$code</span> <span class="o">-=</span> <span class="mi">26</span> <span class="k">if</span> <span class="nv">$code</span> <span class="o">&gt;</span> <span class="mi">90</span><span class="p">;</span>  <span class="c1"># &#39;Z&#39;</span>

  <span class="k">return</span> <span class="nb">chr</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>运行它的结果和 Raku 版一样。</p>
<pre><code>$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 3
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD

$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -3
WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ

$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' 13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT

$ ./caesar-cipher-perl 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' -13
GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT
</code></pre><h2 id="挑战-0972二进制子字符串binary-substrings">挑战 #097.2：二进制子字符串(Binary Substrings)</h2>
<p>给你一个二进制字符串 <code>$B</code> 和一个整数 <code>$S</code>。</p>
<p>写一个脚本来拆分大小为 <code>$S</code> 的二进制字符串 <code>$B</code>，然后找出使其相同的最小翻转次数。</p>
<p>例 1:
输入: $B = “101100101”, $S = 3
输出: 1</p>
<p>二进制子字符串:
&ldquo;101&rdquo;: 0 flip
&ldquo;100&rdquo;: 1 flip to make it &ldquo;101&rdquo;
&ldquo;101&rdquo;: 0 flip</p>
<p>例 2:
输入 $B = “10110111”, $S = 4
输出: 2</p>
<p>二进制子字符串:
&ldquo;1011&rdquo;: 0 flip
&ldquo;0111&rdquo;: 2 flips to make it &ldquo;1011&rdquo;</p>
<p>我们先从第一个例子中的二进制子字符串中砍掉3个字符块。</p>
<pre><code>&gt; say &quot;101100101&quot;.comb(3);   # -&gt; (101 100 101)
&gt; say &quot;1011001010&quot;.comb(3);  # -&gt; (101 100 101 0)
</code></pre><p>第二行显示了如果长度不匹配会发生什么。这就给了我们一个非法的值，因为我们不能将一位数翻转为三位数的值。所以我们必须添加一个检查。</p>
<p>然后我们将第一个子串与其余的子串进行比较，一次一个。在这里使用bitwise XOR（Exclusive OR）运算符是一个合理的选择。这给了我们一个二进制值，其中1的数量就是该子串的翻转次数。Raku确实有一个XOR运算符。+^. 但是它 &ldquo;将两个参数都强制为Int，并进行位智XOR操作&rdquo;(根据文档&quot;；参见docs.raku.org/language/operators#infix_+^)。</p>
<p>我们可以在进行XOR操作之前，将二进制值转换为十进制值。让我们试试。</p>
<p>获取翻转的次数。</p>
<pre><code>&gt; say (&quot;10101&quot;.parse-base(2) +^ &quot;10111&quot;.parse-base(2)).base(2).comb.sum;  # -&gt; 1
&gt; say (&quot;11101&quot;.parse-base(2) +^ &quot;10111&quot;.parse-base(2)).base(2).comb.sum;  # -&gt; 2
</code></pre><p>这当然可行，但需要大量的代码。所以我将使用一个更简单的方法 - 逐个比较每个数字。</p>
<p>File: binary-substring</p>
<pre><code class="language-raku" data-lang="raku">#! /usr/bin/env raku

subset BinaryString where /^ &lt;[01]&gt;+ $/;                    # [1]
subset PosInt of Int where * &gt; 0;                           # [2]

unit sub MAIN (BinaryString $B = '101100101',               # [1]
               PosInt $S where $B.chars %% $S = 3,          # [2]
	       :v(:$verbose));

my @B     = $B.comb($S.Int);                                # [3]
my $first = @B.shift;                                       # [4]
my $total = 0;                                              # [5]

for @B -&gt; $current                                          # [6]
{
  my $flip = bit-diff($first, $current);                    # [7]
  $total += $flip;                                          # [8]
  say &quot;: $first -&gt; $current -&gt; Flip: $flip&quot; if $verbose;
}

say $total;                                                 # [9]

sub bit-diff ($a, $b)                                       # [7]
{
  my $flip = 0;                                             # [10]

  for ^$a.chars -&gt; $index                                   # [11]
  {
    $flip++ if $a.substr($index,1) ne $b.substr($index,1);  # [12]
  }

  return $flip;
}
</code></pre><p>[1] 确保二进制字符串是合法的（只包含 &ldquo;0 &ldquo;和 &ldquo;1&rdquo;）。</p>
<p>[2] 确保是一个正整数，同时确保字符串是被它偶数分割的。(例如，&ldquo;4 &ldquo;给我们提供了长度为4的子串，如果最后一个较短，程序将中止。)</p>
<p>[3] 梳子通常用于将一个字符串分割成单个字符，但我们可以通过指定长度来获得每个子字符串中的多个字符，比如这样。</p>
<p>[4] 例子首先将第一个子串与自己进行比较，给出零翻转。这是愚蠢的(ish)，所以我跳过这一点，把第一个子串移出。</p>
<p>[5] 结果会到这里。</p>
<p>[6] 对于每一个子串（除了第一个，见[4]）。</p>
<p>[7] 获取每个子串的翻转次数。</p>
<p>[8] 并将其添加到总数中。</p>
<p>[9] 打印它。</p>
<p>[10] 翻转的数量会在这里。</p>
<p>[11] 对于两个子串中的每个索引（具有相同的长度）。</p>
<p>[12] - 如果给定位置上的字符不同，则在总数的基础上加1，意味着移动。</p>
<p>See docs.raku.org/routine/comb for more information about comb.</p>
<p>运行它。</p>
<pre><code>$ ./binary-substring &quot;101100101&quot; 3
 1

$ ./binary-substring -v &quot;101100101&quot; 3
: 101 -&gt; 100 -&gt; Flip: 1
: 101 -&gt; 101 -&gt; Flip: 0
1

$ ./binary-substring &quot;10110111&quot; 4
2

$ ./binary-substring -v &quot;10110111&quot; 4
: 1011 -&gt; 0111 -&gt; Flip: 2
2
</code></pre><p>看起来不错。</p>
<h2 id="perl">Perl</h2>
<p>这是对 Raku 版本的直接翻译，只是我必须实现 &ldquo;comb&rdquo;。</p>
<p>文件： binary-substring-perl</p>
<pre><code class="language-raku" data-lang="raku">#! /usr/bin/env perl

use strict;
use warnings;
use feature 'say';
use feature 'signatures';
use Getopt::Long;

no warnings &quot;experimental::signatures&quot;;

my $verbose = 0;

GetOptions(&quot;verbose&quot;  =&gt; \$verbose);

my $B = shift(@ARGV) // '101100101';

die &quot;Not a binary number&quot; unless $B =~ /^[01]+$/;

my $S = shift(@ARGV) // 3;

die &quot;Not an integer&quot; unless $S =~ /^[1-9][0-9]*$/;
die &quot;Not a legal length&quot; if length($B) % $S;

my @B     =  comb($B, $S);
my $first = shift(@B);
my $total = 0;

for my $current (@B)
{
  my $flip = bit_diff($first, $current);
  $total += $flip;
  say &quot;: $first -&gt; $current -&gt; Flip: $flip&quot; if $verbose;
}

say $total;

sub bit_diff ($a, $b)
{
  my $flip = 0;

  for my $index (0 .. length($a))
  {
    $flip++ if substr($a, $index,1) ne substr($b, $index,1);
  }

  return $flip;
}

sub comb ($string, $length = 1)  # [1]
{
  my @result;

  while ($string)
  {
    push(@result, substr($string, 0, $length));
    $string = substr($string, $length);
  }
  return @result;
}
</code></pre><p>[1] 缺失的 Raku 例程 &ldquo;comb&rdquo;。可选的第二个参数指定了它所返回的每个子串中所包含的（第一个参数的）子串长度。</p>
<p>运行它的结果与 Raku 版本相同。</p>
<pre><code>$ ./binary-substring-perl &quot;101100101&quot; 3
1

$ ./binary-substring-perl -v &quot;101100101&quot; 3
: 101 -&gt; 100 -&gt; Flip: 1
: 101 -&gt; 101 -&gt; Flip: 0
1

$ ./binary-substring-perl &quot;101100111&quot; 3
2

$ ./binary-substring-perl -v &quot;101100111&quot; 3
: 101 -&gt; 100 -&gt; Flip: 1
: 101 -&gt; 111 -&gt; Flip: 1
2
</code></pre><p>就是这样。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/raku" term="raku" label="Raku" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/raku" term="raku" label="Raku" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rakulang" term="rakulang" label="Rakulang" />
                            
                        
                    
                
            
        </entry>
    
</feed>
