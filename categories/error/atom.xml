<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[error on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/categories/error/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/categories/error/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/categories/error/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/categories/error/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-06T20:48:33+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/categories/error/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Rust 中处理错误的初级指南]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-04-14-a-beginner-guide-to-handling-errors-in-rust/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-04-14-getting-started-with-kafka-and-rust-part1/?utm_source=atom_feed" rel="related" type="text/html" title="Kafka 和 Rust入门 - 第一部分" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-11-sizedness-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Sizedness in Rust" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-call-site-dependency-injection/?utm_source=atom_feed" rel="related" type="text/html" title="Call Site Dependency Injection" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-for-the-love-of-macros/?utm_source=atom_feed" rel="related" type="text/html" title="For the Love of Macros" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-std-error-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Std Error in Rust" />
            
                <id>https://ohmyweekly.github.io/notes/2021-04-14-a-beginner-guide-to-handling-errors-in-rust/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-04-14T00:00:00+08:00</published>
            <updated>2021-04-14T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>A Beginner&rsquo;s Guide to Handling Errors in Rust</blockquote><p>《Rust 编程语言》中的示例项目对于向新的潜在 Rustaceans 介绍 Rust 的不同方面和特性是非常好的。在这篇文章中，我们将通过扩展《Rust 编程语言》中的 <code>minigrep</code> 项目，看看实现更强大的错误处理基础架构的一些不同方法。</p>
<p><code>minigrep</code> 项目在<a href="https://doc.rust-lang.org/book/ch12-00-an-io-project.html">第12章</a>中介绍，它引导读者构建一个简单版本的 <code>grep</code> 命令行工具，这是一个用于搜索文本的工具。例如，你会传入一个查询，你要搜索的文本，以及文本所在的文件名，然后得到包含查询文本的所有行。</p>
<p>这篇文章的目标是用更强大的错误处理模式来扩展本书的 <code>minigrep</code> 实现，这样你就能更好地了解 Rust 项目中处理错误的不同方法。</p>
<p>作为参考，你可以在<a href="https://github.com/seanchen1991/error-handling-examples/tree/minigrep-control/examples/minigrep">这里</a>找到本书的 <code>minigrep</code> 版本的最终代码。</p>
<h2 id="错误处理用例">错误处理用例</h2>
<p>当涉及到 Rust 项目的结构时，一个常见的模式是有一个 &ldquo;库&rdquo; 的部分和一个 &ldquo;应用&rdquo; 的部分，前者是主要的数据结构、函数和逻辑，后者是将库函数联系在一起。</p>
<p>你可以在原始 <code>minigrep</code> 代码的文件结构中看到这一点：应用逻辑存在于 <code>src/bin/main.rs</code> 文件中，它只是一个薄薄的包裹，包裹着在 <code>src/lib.rs</code> 文件中定义的数据结构和函数；主函数所做的就是调用 <code>minigrep::run</code>。</p>
<p>这一点很重要，因为取决于我们是在构建一个应用程序还是一个库，会改变我们处理错误的方式。</p>
<p>当涉及到一个应用程序时，最终用户很可能不想知道是什么原因导致了一个错误的琐碎细节。事实上，应用程序的最终用户可能只应该在错误无法恢复的情况下被通知错误。在这种情况下，提供关于为什么发生不可恢复的错误的细节也是有用的，特别是当它与用户输入有关时。如果某种可恢复的错误发生在后台，应用程序的消费者可能不需要知道它。</p>
<p>相反，当涉及到一个库时，最终用户是其他开发人员，他们正在使用该库并在其之上构建一些东西。在这种情况下，我们希望尽可能多地提供关于我们的库中发生的任何错误的相关细节。然后，库的消费者将决定他们想要如何处理这些错误。</p>
<p>那么，当我们的项目中既有库部分又有应用部分时，这两种方法是如何一起发挥作用的呢？<code>main</code> 函数执行 <code>minigrep::run</code> 函数，并输出结果中出现的任何错误。所以我们大部分的错误处理工作将集中在库部分。</p>
<h2 id="浮现库错误">浮现库错误</h2>
<p>在 <code>src/lib.rs</code> 中，我们有两个函数，<code>Config::new</code> 和 <code>run</code>，它们可能会返回错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">Config</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="k">mut</span><span class="w"> </span><span class="n">args</span>: <span class="nc">env</span>::<span class="n">Args</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Config</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="nb">&#39;static</span><span class="w"> </span><span class="kt">str</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">arg</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a query string&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">filename</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">arg</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a file name&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">case_sensitive</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">env</span>::<span class="n">var</span><span class="p">(</span><span class="s">&#34;CASE_INSENSITIVE&#34;</span><span class="p">).</span><span class="n">is_err</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">Config</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">query</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">filename</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">case_sensitive</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">})</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="n">config</span>: <span class="nc">Config</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">contents</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span>::<span class="n">read_to_string</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">filename</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">results</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">config</span><span class="p">.</span><span class="n">case_sensitive</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">search</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">.</span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">contents</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">search_case_insensitive</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">.</span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">contents</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">line</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">results</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">line</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="nb">Ok</span><span class="p">(())</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>确切有三个地方在返回错误：两个错误发生在 <code>Config::new</code> 函数中，该函数返回一个 <code>Result&lt;Config，&amp;'static str&gt;</code>。在这种情况下，<code>Result</code> 的错误变体是一个静态字符串切片。</p>
<p>在这里，当用户没有提供查询时，我们会返回一个错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">Some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">arg</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a query string&#34;</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="p">};</span><span class="w">
</span></code></pre></div><p>这里，当用户没有提供文件名时，我们会返回一个错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">filename</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">Some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">arg</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a file name&#34;</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="p">};</span><span class="w">
</span></code></pre></div><p>以这种方式将错误结构化为静态字符串的主要问题是，错误信息并没有被放置在一个中心位置，如果需要的话，我们可以轻松地重构它们。这也使得我们更难在相同类型的错误之间保持错误信息的一致性。</p>
<p>第三种错误发生在 <code>run</code> 函数的顶部，它返回一个 <code>Result&lt;(), Box&lt;dyn Error&gt;&gt;</code>。在这种情况下，错误变体是一个实现  <code>Error</code> <a href="https://doc.rust-lang.org/std/error/trait.Error.html">trait</a> 的 trait 对象。换句话说，这个函数的错误变体是实现 <code>Error</code> trait 的类型的任何实例。</p>
<p>在这里，我们将调用 <code>fs::read_to_string</code> 时可能发生的任何错误冒出来。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">contents</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span>::<span class="n">read_to_string</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">filename</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>这适用于调用 <code>fs::read_to_string</code> 时可能出现的错误，因为这个函数能够返回多种类型的错误。因此，我们需要一种方法来表示这些不同的可能的错误类型；它们之间的共同点是它们都实现了 <code>Error</code> trait！最终，我们要做的是定义所有这些错误类型。</p>
<p>最终，我们要做的是在一个中心位置定义所有这些不同类型的错误，并让它们都成为单一类型的变体。</p>
<h2 id="在一个中心类型中定义错误变种">在一个中心类型中定义错误变种</h2>
<p>我们将创建一个新的 <code>src/error.rs</code> 文件，并定义一个枚举 <code>AppError</code>，并在此过程中派生出 <code>Debug</code> trait，以便我们在需要时可以得到一个调试表示。我们将为这个枚举的每一个变体命名，使它们恰当地代表三种类型的错误。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#[derive(Debug)]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">AppError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">MissingQuery</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">MissingFilename</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">ConfigLoad</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>第三个变体，<code>ConfigLoad</code>，映射到 <code>Config::run</code> 函数中调用 <code>fs::read_to_string</code> 时可能出现的错误。乍一看，这似乎有点不妥，因为如果该函数出现错误，那就是在读取提供的配置文件时出现了某种I/O问题。那么我们为什么不把它命名为 <code>IOError</code> 或者类似的东西呢？</p>
<p>在这种情况下，由于我们是将一个标准库函数的错误浮出水面，所以描述浮出水面的错误是如何影响它的，而不是简单地重申它，这与我们的应用更相关。当 <code>fs::read_to_string</code> 发生错误时，会阻止我们的 <code>Config</code> 加载，所以这就是为什么我们把它命名为 <code>ConfigLoad</code>。</p>
<p>现在我们有了这个类型，我们需要更新代码中所有返回错误的地方以利用这个 <code>AppError</code> 枚举。</p>
<h2 id="返回-apperror-的变体">返回 <code>AppError</code> 的变体</h2>
<p>在我们的 <code>src/lib.rs</code> 文件的顶部，我们需要声明我们的错误模块，并将 <code>error::AppError</code> 带入作用域。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">mod</span> <span class="nn">error</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">error</span>::<span class="n">AppError</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>在我们的 <code>Config::new</code> 函数中，我们需要更新我们作为错误返回静态字符串切片的地方，以及函数本身的返回类型。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="o">-</span><span class="w"> </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="k">mut</span><span class="w"> </span><span class="n">args</span>: <span class="nc">env</span>::<span class="n">Args</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Config</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="nb">&#39;static</span><span class="w"> </span><span class="kt">str</span><span class="o">&gt;</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w"> </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="k">mut</span><span class="w"> </span><span class="n">args</span>: <span class="nc">env</span>::<span class="n">Args</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Config</span><span class="p">,</span><span class="w"> </span><span class="n">AppError</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="c1">// --snip--
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">arg</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w">       </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a query string&#34;</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">       </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="n">AppError</span>::<span class="n">MissingQuery</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">filename</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">arg</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w">       </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a file name&#34;</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">       </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="n">AppError</span>::<span class="n">MissingFilename</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// --snip--
</span></code></pre></div><p>运行函数中的第三个错误，只需要我们更新它的返回类型，因为 <code>?</code> 操作符已经负责将错误冒出来，并在发生时返回。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="o">-</span><span class="w"> </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="n">config</span>: <span class="nc">Config</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w"> </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="n">config</span>: <span class="nc">Config</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="n">AppError</span><span class="o">&gt;</span><span class="w">
</span></code></pre></div><p>好了，现在我们正在使用我们的错误变体，一旦发生，这些错误变体将被浮现到我们的 <code>main</code> 函数中并打印出来。但是我们不再有之前定义的实际错误信息了！我们可以用 <code>thiserror</code> 注释错误变体。</p>
<h2 id="用-thiserror-注释错误变体">用 <code>thiserror</code> 注释错误变体</h2>
<p><code>thiserror</code> <a href="https://docs.rs/thiserror/1.0.24/thiserror/">crate</a> 是一个常用的工具，它提供了一种符合人体工程学的方式来格式化 Rust 库中的错误信息。</p>
<p>它允许我们在 <code>AppError</code> 枚举中用我们希望显示给最终用户的实际错误信息来注解每个变体。</p>
<p>让我们在 Cargo.toml 中添加它作为依赖。</p>
<div class="highlight"><pre class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">dependencies</span><span class="p">]</span>
<span class="nx">thiserror</span> <span class="p">=</span> <span class="s2">&#34;1&#34;</span>
</code></pre></div><p>在 <code>src/error.rs</code> 中，我们将把 <code>thiserror::Error</code> trait 带入作用域，并让我们的 <code>AppError</code> 类型派生它。我们需要派生这个 trait，以便用 <code>#[error]</code> 块来注解每个枚举变量。现在我们指定我们希望为每个特定变量显示的错误信息。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="o">+</span><span class="w"> </span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">io</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w"> </span><span class="k">use</span><span class="w"> </span><span class="n">thiserror</span>::<span class="n">Error</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w"> </span><span class="cp">#[derive(Debug)]</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w"> </span><span class="cp">#[derive(Debug, Error)]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">AppError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">   </span><span class="cp">#[error(</span><span class="s">&#34;Didn&#39;t get a query string&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w">    </span><span class="n">MissingQuery</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">   </span><span class="cp">#[error(</span><span class="s">&#34;Didn&#39;t get a file name&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w">    </span><span class="n">MissingFilename</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">   </span><span class="cp">#[error(</span><span class="s">&#34;Could not load config&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w">    </span><span class="n">ConfigLoad</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">       </span><span class="cp">#[from]</span><span class="w"> 
</span><span class="w"></span><span class="o">+</span><span class="w">       </span><span class="n">source</span>: <span class="nc">io</span>::<span class="n">Error</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w">   </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><code>ConfigLoad</code> 变体中增加了什么额外的东西？由于 <code>ConfigLoad</code> 错误只有在调用 <code>fs::read_to_string</code> 出现底层错误时才会发生，所以 <code>ConfigLoad</code> 变体实际上做的是围绕底层I/O错误提供额外的上下文。</p>
<p><code>thiserror</code> 允许我们通过用 <code>#[from]</code> 来注解一个低级错误，以将源码转换为我们自制的错误类型，从而将其包裹在额外的上下文中。这样一来，当一个I/O错误发生时（比如我们指定了一个要搜索的文件，但实际上并不存在），我们就会得到这样一个错误。</p>
<pre><code>Could not load config: Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; }
</code></pre><p>如果没有它，产生的错误信息看起来像这样。</p>
<pre><code>Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; }
</code></pre><p>对于我们库的消费者来说，要想找出这个错误的来源是比较困难的，额外的上下文帮助很大。</p>
<p>你可以在<a href="https://github.com/seanchen1991/error-handling-examples/tree/minigrep-thiserror/examples/minigrep">这里</a>找到使用这个错误的 <code>minigrep</code> 版本。</p>
<h2 id="更加手动的方法">更加手动的方法</h2>
<p>现在，我们将换个角度，看看如何在不将其作为依赖的情况下，实现与 <code>thiserror</code> 相同的结果。</p>
<p>在引擎盖下，<code>thiserror</code> 用程序宏执行了一些魔法，这对编译速度有明显的影响。在 <code>minigrep</code> 的情况下，我们的错误变体很少，而且项目也很小，所以依赖 <code>thiserror</code> 并不会增加多少编译时间，但是在一个更大更复杂的项目中，这可能是一个考虑因素。</p>
<p>所以在这一点上，我们将把这篇文章撕掉，换成我们自己的手动实现来结束这篇文章。走这条路的好处是，我们只需要修改 <code>src/error.rs</code> 文件就可以实现所有必要的改变（当然，除了从我们的 Cargo.toml 中删除 thiserror 之外）。</p>
<div class="highlight"><pre class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">dependencies</span><span class="p">]</span>
<span class="nx">-</span> <span class="nx">thiserror</span> <span class="p">=</span> <span class="s2">&#34;1&#34;</span>
</code></pre></div><p>让我们删除所有 <code>thiserror</code> 提供给我们的注释。我们还将用 <code>std::error::Error</code> trait 替换 <code>thiserror::Error</code> trait。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="o">-</span><span class="w"> </span><span class="k">use</span><span class="w"> </span><span class="n">thiserror</span>::<span class="n">Error</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w"> </span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">error</span>::<span class="n">Error</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w"> </span><span class="cp">#[derive(Debug, Error)]</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="w"> </span><span class="cp">#[derive(Error)]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">AppError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w">   </span><span class="cp">#[error(</span><span class="s">&#34;Didn&#39;t get a query string&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w">    </span><span class="n">MissingQuery</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w">   </span><span class="cp">#[error(</span><span class="s">&#34;Didn&#39;t get a file name&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w">    </span><span class="n">MissingFilename</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w">   </span><span class="cp">#[error(</span><span class="s">&#34;Could not load config&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w">    </span><span class="n">ConfigLoad</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="o">-</span><span class="w">      </span><span class="cp">#[from]</span><span class="w">
</span><span class="w">       </span><span class="n">source</span>: <span class="nc">io</span>::<span class="n">Error</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>为了恢复我们刚刚擦除的所有功能，我们需要做三件事。</p>
<ol>
<li>为 <code>AppError</code> 实现 <code>Display</code> trait，这样我们的错误变体就可以显示给用户了。</li>
<li>为 <code>AppError</code> 实现 <code>Error</code> trait。这个 trait 代表了对错误类型的基本期望，即它们实现了 <code>Display</code> 和 <code>Debug</code>，再加上获取错误底层源或原因的能力。</li>
<li>为 <code>AppError</code> 实现 <code>From&lt;io::Error&gt;</code>。这是必要的，这样我们就可以将从 <code>fs::read_to_string</code> 返回的I/O错误转换为 <code>AppError</code> 的实例。</li>
</ol>
<p>这里是我们对 <code>AppError</code> 的 <code>Display</code> trait 的实现。它将每个错误变量映射为一个字符串，并将其写入到 <code>Display</code>  formatter 中。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fmt</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Display</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">AppError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">fmt</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">f</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Formatter</span><span class="o">&lt;</span><span class="na">&#39;_</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">fmt</span>::<span class="nb">Result</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="bp">self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">Self</span>::<span class="n">MissingQuery</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">write_str</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a query string&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">Self</span>::<span class="n">MissingFilename</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">write_str</span><span class="p">(</span><span class="s">&#34;Didn&#39;t get a file name&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">Self</span>::<span class="n">ConfigLoad</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">source</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">write</span><span class="o">!</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Could not load config: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">source</span><span class="p">),</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>而这就是我们对 <code>Error</code> trait 的实现。要实现的主要方法是 <code>Error::source</code> 方法，它的目的是提供错误源的信息。对于我们的 <code>AppError</code> 类型，只有 <code>ConfigLoad</code> 会暴露任何底层源信息，即调用 <code>fs::read_to_string</code> 可能发生的I/O错误。在其他错误变体的情况下，没有底层的源信息需要暴露。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">error</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">error</span>::<span class="n">Error</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">AppError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">source</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;&amp;</span><span class="p">(</span><span class="n">dyn</span><span class="w"> </span><span class="n">Error</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">&#39;static</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="bp">self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">Self</span>::<span class="n">ConfigLoad</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">source</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">source</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">None</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>返回类型的 <code>&amp;(dyn Error + 'static')</code> 部分类似于我们之前看到的 <code>Box&lt;dyn Error&gt;</code> trait 对象。这里的主要区别是，trait 对象是在一个不可变的引用后面，而不是 <code>Box</code> 指针。这里的 <code>'static</code> lifetime 意味着 trait 对象本身只包含拥有的值，也就是说，它内部不存储任何引用。这是必要的，以便让编译器确信这里没有悬空指针的机会。</p>
<p>最后，我们需要一种将 <code>io::Error</code> 转换为 <code>AppError</code> 的方法。我们将通过为 <code>AppError for From&lt;io::error&gt;</code> 来实现。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="nb">From</span><span class="o">&lt;</span><span class="n">io</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">AppError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">from</span><span class="p">(</span><span class="n">source</span>: <span class="nc">io</span>::<span class="n">Error</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Self</span>::<span class="n">ConfigLoad</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">source</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这个没什么好说的。如果我们得到一个 <code>io::Error</code>，我们要做的就是将其转换为 <code>AppError</code>，并将其封装在 <code>ConfigLoad</code> 变体中。</p>
<p>这就是全部了，伙计们 你可以在<a href="https://github.com/seanchen1991/error-handling-examples/tree/main/examples/minigrep">这里</a>找到这个版本的 <code>minigrep</code> 实现。</p>
<h2 id="总结">总结</h2>
<p>最后，我们讨论了《Rust编程语言》一书中介绍的原始 <code>minigrep</code> 实现在错误处理方面是如何有点欠缺的，以及如何考虑不同的错误处理用例。</p>
<p>从那里，我们展示了如何使用 <code>thiserror</code> crate 将所有可能的错误变体集中到一个类型中。</p>
<p>最后，我们剥开了 <code>thiserror</code> 提供的外衣，展示了如何手动复制同样的功能。</p>
<p>希望大家能从这篇文章中学到一些东西!</p>
<p>原文链接: <a href="https://dev.to/seanchen1991/a-beginner-s-guide-to-handling-errors-in-rust-40k2">https://dev.to/seanchen1991/a-beginner-s-guide-to-handling-errors-in-rust-40k2</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rustlang" term="rustlang" label="rustlang" />
                             
                                <category scheme="https://ohmyweekly.github.io/categories/error" term="error" label="error" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust" term="rust" label="Rust" />
                            
                        
                    
                
            
        </entry>
    
</feed>
