<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><title type="html"><![CDATA[kafka on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/categories/kafka/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/categories/kafka/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/categories/kafka/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/categories/kafka/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2021-07-13T22:14:20+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/categories/kafka/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Kafka 和 Rust入门 - 第一部分]]></title>
            <link href="https://ohmyweekly.github.io/notes/2021-04-14-getting-started-with-kafka-and-rust-part1/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://ohmyweekly.github.io/notes/2021-04-14-a-beginner-guide-to-handling-errors-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Rust 中处理错误的初级指南" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-11-sizedness-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Sizedness in Rust" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-call-site-dependency-injection/?utm_source=atom_feed" rel="related" type="text/html" title="Call Site Dependency Injection" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-for-the-love-of-macros/?utm_source=atom_feed" rel="related" type="text/html" title="For the Love of Macros" />
                <link href="https://ohmyweekly.github.io/notes/2021-04-05-std-error-in-rust/?utm_source=atom_feed" rel="related" type="text/html" title="Std Error in Rust" />
            
                <id>https://ohmyweekly.github.io/notes/2021-04-14-getting-started-with-kafka-and-rust-part1/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2021-04-14T00:00:00+08:00</published>
            <updated>2021-04-14T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Getting Started With Kafka and Rust</blockquote><p>这是一个两部分的系列，帮助你开始使用 Rust 和 Kafka。我们将使用 <a href="https://github.com/fede1024/rust-rdkafka/">rust-rdkafka</a> crate，它本身就是基于 <a href="https://github.com/edenhill/librdkafka">librdkafka</a>（C库）的。</p>
<p>在这篇文章中，我们将介绍 Kafka Producer API。</p>
<h2 id="初始设置">初始设置</h2>
<p>确保你<a href="https://kafka.apache.org/downloads">安装了一个 Kafka broker</a> - 本地设置应该足够了。当然，你也需要<a href="https://www.rust-lang.org/tools/install">安装Rust</a> - 你需要<a href="https://github.com/fede1024/rust-rdkafka#minimum-supported-rust-version-msrv">1.45或以上版本</a>。</p>
<p>在你开始之前，先克隆 GitHub repo。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/abhirockzz/rust-kafka-101
<span class="nb">cd</span> part1
</code></pre></div><p>检查 Cargo.toml 文件:</p>
<pre><code>...
[dependencies]
rdkafka = { version = &quot;0.25&quot;, features = [&quot;cmake-build&quot;,&quot;ssl&quot;] }
...
</code></pre><h2 id="关于-cmake-build-功能的说明">关于 cmake-build 功能的说明</h2>
<p><code>rust-rdkafka</code> 提供了几种解决 <code>librdkafka</code> 依赖关系的方法。我选择了 <code>static</code> 链接，其中 <code>librdkafka</code> 被编译。不过你也可以选择 <code>dynamic</code> 链接来引用本地安装的版本。</p>
<blockquote>
<p>更多内容，请<a href="https://github.com/fede1024/rust-rdkafka/blob/master/rdkafka-sys/README.md#features">参考以下链接</a></p>
</blockquote>
<p>好吧，我们先从基本的开始说起。</p>
<h2 id="简单的生产者">简单的生产者</h2>
<p>这里是一个基于 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/struct.BaseProducer.html">BaseProducer</a> 的简单生产者。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">producer</span>: <span class="nc">BaseProducer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ClientConfig</span>::<span class="n">new</span><span class="p">()</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#34;bootstrap.servers&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;localhost:9092&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#34;security.protocol&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;SASL_SSL&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#34;sasl.mechanisms&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;PLAIN&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#34;sasl.username&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;&lt;update&gt;&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#34;sasl.password&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;&lt;update&gt;&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">create</span><span class="p">()</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;invalid producer config&#34;</span><span class="p">);</span><span class="w">
</span></code></pre></div><p><code>send</code> 方法开始产生消息 - 它是在紧缩 <code>loop</code> 中完成的，中间有一个 <code>thread::sleep</code>(不是在生产中会做的事情)，以使其更容易追踪/跟踪结果。键、值（有效载荷）和目标 Kafka 主题以 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/struct.BaseRecord.html">BaseRecord</a> 的形式表示。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">1</span><span class="p">..</span><span class="mi">100</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;sending message&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">producer</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="w">
</span><span class="w">                </span><span class="n">BaseRecord</span>::<span class="n">to</span><span class="p">(</span><span class="s">&#34;rust&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;key-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">))</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">payload</span><span class="p">(</span><span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;value-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">)),</span><span class="w">
</span><span class="w">            </span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;failed to send message&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">thread</span>::<span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">from_secs</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><blockquote>
<p>你可以在文件 <code>src/1_producer_simple.rs</code> 中查看整个代码。</p>
</blockquote>
<h2 id="要测试生产者是否在工作-">要测试生产者是否在工作 &hellip;</h2>
<p>运行这段代码:</p>
<ul>
<li>只需将文件 <code>src/1_producer_simple.rs</code> 重命名为 <code>main.rs</code>。</li>
<li>执行 <code>cargo run</code></li>
</ul>
<p>你应该看到这个输出:</p>
<pre><code>sending message
sending message
sending message
...
</code></pre><p>到底发生了什么？要弄清楚 - 使用 Kafka CLI 消费者（或其他消费者客户端，如 kafkacat）连接到你的 Kafka 主题（我在上面的例子中使用 rust 作为 Kafka 主题的名称）。你应该看到消息流进来了。</p>
<p>例如</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="p">&amp;</span>KAFKA_HOME/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic rust --from-beginning
</code></pre></div><h2 id="生产者回调">生产者回调</h2>
<p>我们现在是在瞎飞! 除非我们明确地创建一个消费者来查看我们的消息，否则我们不知道它们是否被发送到 Kafka。让我们通过实现 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/trait.ProducerContext.html">ProducerContext</a>(trait)来解决这个问题，以挂接到 produce 事件 - 它就像一个回调。</p>
<p>首先为 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/client/trait.ClientContext.html">ClientContext</a> trait 创建一个结构体和一个空的实现（这是必须的）。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">ProducerCallbackLogger</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">ClientContext</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">ProducerCallbackLogger</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>现在到了主要部分，我们在 <code>ProducerContext</code> trait 中实现 <code>delivery</code> 函数。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">ProducerContext</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">ProduceCallbackLogger</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">DeliveryOpaque</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">delivery</span><span class="p">(</span><span class="w">
</span><span class="w">        </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">delivery_result</span>: <span class="kp">&amp;</span><span class="nc">rdkafka</span>::<span class="n">producer</span>::<span class="n">DeliveryResult</span><span class="o">&lt;</span><span class="na">&#39;_</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">_delivery_opaque</span>: <span class="nc">Self</span>::<span class="n">DeliveryOpaque</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">dr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">delivery_result</span><span class="p">.</span><span class="n">as_ref</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">dr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="nb">Ok</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">key</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="n">msg</span><span class="p">.</span><span class="n">key_view</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">                </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="w">
</span><span class="w">                    </span><span class="s">&#34;produced message with key {} in offset {} of partition {}&#34;</span><span class="p">,</span><span class="w">
</span><span class="w">                    </span><span class="n">key</span><span class="p">,</span><span class="w">
</span><span class="w">                    </span><span class="n">msg</span><span class="p">.</span><span class="n">offset</span><span class="p">(),</span><span class="w">
</span><span class="w">                    </span><span class="n">msg</span><span class="p">.</span><span class="n">partition</span><span class="p">()</span><span class="w">
</span><span class="w">                </span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="nb">Err</span><span class="p">(</span><span class="n">producer_err</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">key</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="n">producer_err</span><span class="p">.</span><span class="mf">1.</span><span class="n">key_view</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">                </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="w">
</span><span class="w">                    </span><span class="s">&#34;failed to produce message with key {} - {}&#34;</span><span class="p">,</span><span class="w">
</span><span class="w">                    </span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="n">producer_err</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">                </span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>我们根据 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/type.DeliveryResult.html">DeliveryResult</a>(毕竟它是一个 <code>Result</code>)来匹配成功(<code>Ok</code>)和失败(<code>Err</code>)的情况。我们所做的只是简单地记录这两种情况下的消息，因为这只是一个例子。你可以在这里做任何你想做的事情（虽然不要太疯狂！）。</p>
<blockquote>
<p>我们忽略了 <code>ProducerContext</code> trait 的关联类型 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/trait.ProducerContext.html#associatedtype.DeliveryOpaque">DeliveryOpaque</a>。</p>
</blockquote>
<p>我们需要确保我们插入了 <code>ProducerContext</code> 的实现。我们通过使用 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/config/struct.ClientConfig.html#method.create_with_context">create_with_context</a> 方法（而不是 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/config/struct.ClientConfig.html#method.create">create</a>）来实现，并确保为 <code>BaseProducer</code> 提供正确的类型。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">producer</span>: <span class="nc">BaseProducer</span><span class="o">&lt;</span><span class="n">ProduceCallbackLogger</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ClientConfig</span>::<span class="n">new</span><span class="p">().</span><span class="n">set</span><span class="p">(....)</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="p">.</span><span class="n">create_with_context</span><span class="p">(</span><span class="n">ProduceCallbackLogger</span><span class="w"> </span><span class="p">{})</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span></code></pre></div><h2 id="如何调用-回调">如何调用 &ldquo;回调&rdquo;？</h2>
<p>好了，我们有了实现，但我们需要一种方法来触发它! 其中一个方法就是在生产者上调用 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/struct.BaseProducer.html#method.flush">flush</a>。所以，我们可以把我们的 producer 写成这样。</p>
<ul>
<li>添加 <code>producer.flush(Duration::from_secs(3));</code>, 并</li>
<li>注释掉 <code>sleep</code> (just for now)</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">        </span><span class="n">producer</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="w">
</span><span class="w">                </span><span class="n">BaseRecord</span>::<span class="n">to</span><span class="p">(</span><span class="s">&#34;rust&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;key-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">))</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">payload</span><span class="p">(</span><span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;value-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">)),</span><span class="w">
</span><span class="w">            </span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;failed to send message&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">producer</span><span class="p">.</span><span class="n">flush</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">from_secs</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;flushed message&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="c1">//thread::sleep(Duration::from_secs(3));
</span></code></pre></div><h2 id="等等我们可以做得更好">等等，我们可以做得更好</h2>
<p><code>send</code> 方法是非阻塞的（默认），但通过在每次 <code>send</code> 后调用 <code>flush</code>，我们现在已经将其转换为同步调用 - 从性能角度来看，不推荐使用。</p>
<p>我们可以通过使用 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/struct.ThreadedProducer.html">ThreadedProducer</a> 来改善这种情况。它负责在后台线程中调用 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/producer/base_producer/struct.BaseProducer.html#method.poll">poll</a> 方法，以确保发送回调通知的传递。这样做非常简单 - 只需将类型从 <code>BaseProducer</code> 改为 <code>ThreadedProducer</code> 即可!</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="err">#</span><span class="w"> </span><span class="n">before</span>: <span class="nc">BaseProducer</span><span class="o">&lt;</span><span class="n">ProduceCallbackLogger</span><span class="o">&gt;</span><span class="w">
</span><span class="w"></span><span class="err">#</span><span class="w"> </span><span class="n">after</span>: <span class="nc">ThreadedProducer</span><span class="o">&lt;</span><span class="n">ProduceCallbackLogger</span><span class="o">&gt;</span><span class="w">
</span></code></pre></div><p>而且，我们也不需要再调用 <code>flush</code> 了。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="c1">//producer.flush(Duration::from_secs(3));
</span><span class="c1">//println!(&#34;flushed message&#34;);
</span><span class="c1"></span><span class="n">thread</span>::<span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">from_secs</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span></code></pre></div><blockquote>
<p>代码在 <code>src/2_threaded_producer.rs</code> 中可以找到。</p>
</blockquote>
<h2 id="再次运行该程序">再次运行该程序</h2>
<ul>
<li>将文件 <code>src/2_threaded_producer.rs</code> 重命名为 <code>main.rs</code>，并且</li>
<li>执行 <code>cargo run</code></li>
</ul>
<p>输出:</p>
<pre><code>sending message
sending message
produced message with key key-1 in offset 6 of partition 2
produced message with key key-2 in offset 3 of partition 0
sending message
produced message with key key-3 in offset 7 of partition 2
</code></pre><p>正如预期的那样，你应该能够看到生产者事件回调，表示消息确实被发送到了 Kafka 主题。当然，你可以直接连接到主题，并再次检查，就像之前一样。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="p">&amp;</span>KAFKA_HOME/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic rust --from-beginning
</code></pre></div><blockquote>
<p>要尝试失败的情况，请尝试使用一个不正确的主题名称，并注意 <code>delivery</code> 实现的 <code>Err</code> 变体是如何被调用的。</p>
</blockquote>
<h2 id="发送-json-消息">发送 JSON 消息</h2>
<p>到目前为止，我们只是发送 <code>String</code> 作为 key 和 value。JSON 是一种常用的消息格式，让我们看看如何使用它。</p>
<p>假设我们要发送 <code>User</code> 信息，将使用这个结构体来表示。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">User</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">id</span>: <span class="kt">i32</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">email</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>然后我们可以使用 <a href="https://docs.serde.rs/serde_json/">serde_json</a> 库将其序列化为 JSON。我们所需要的就是使用 <a href="https://serde.rs/derive.html">serde 中的自定义派生函数</a> - <code>Deserialize</code> 和 <code>Serialize</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">serde</span>::<span class="p">{</span><span class="n">Deserialize</span><span class="p">,</span><span class="w"> </span><span class="n">Serialize</span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(Serialize, Deserialize, Debug)]</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">User</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">id</span>: <span class="kt">i32</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">email</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><h2 id="修改生产者循环">修改生产者循环。</h2>
<ul>
<li>创建一个 <code>User</code> 实例</li>
<li>使用 <a href="https://docs.serde.rs/serde_json/fn.to_string_pretty.html">to_string_pretty</a> 将其序列化为 JSON 字符串。</li>
<li>在有效载荷中加入这一点</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="p">...</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">user_json</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">serde_json</span>::<span class="n">to_string_pretty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">user</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;json serialization failed&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">producer</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="w">
</span><span class="w">                </span><span class="n">BaseRecord</span>::<span class="n">to</span><span class="p">(</span><span class="s">&#34;rust&#34;</span><span class="p">)</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;user-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">))</span><span class="w">
</span><span class="w">                    </span><span class="p">.</span><span class="n">payload</span><span class="p">(</span><span class="o">&amp;</span><span class="n">user_json</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;failed to send message&#34;</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span></code></pre></div><blockquote>
<p>你也可以使用 <a href="https://docs.serde.rs/serde_json/fn.to_vec.html">to_vec</a>(而不是 <code>to_string()</code>)将其转换为一个字节的<code>Vec</code>(<code>Vec&lt;u8&gt;</code>)。</p>
</blockquote>
<h2 id="要运行该程序">要运行该程序&hellip;</h2>
<ul>
<li>将文件 <code>src/3_JSON_payload.rs</code> 重命名为 <code>main.rs</code>，然后</li>
<li>执行 <code>cargo run</code></li>
</ul>
<p>从主题中消费:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="p">&amp;</span>KAFKA_HOME/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic rust --from-beginning
</code></pre></div><p>你应该看到带有 <code>String</code> 的键（如 <code>user-34</code>）和 JSON 值的消息。</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">34</span><span class="p">,</span>
  <span class="nt">&#34;email&#34;</span><span class="p">:</span> <span class="s2">&#34;user-34@foobar.com&#34;</span>
<span class="p">}</span>
</code></pre></div><h2 id="有更好的方法吗">有更好的方法吗？</h2>
<p>是的！如果你习惯了 Kafka Java 客户端中的声明式序列化/去序列化方法（可能其他客户端也一样），你可能不喜欢这种 &ldquo;显式&rdquo; 方法。只是为了让大家明白，这是你在 Java 中的做法。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ProducerConfig</span><span class="o">.</span><span class="na">BOOTSTRAP_SERVERS_CONFIG</span><span class="o">,</span> <span class="s">&#34;localhost:9092&#34;</span><span class="o">);</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ProducerConfig</span><span class="o">.</span><span class="na">KEY_SERIALIZER_CLASS_CONFIG</span><span class="o">,</span>
  <span class="s">&#34;org.apache.kafka.common.serialization.StringSerializer&#34;</span><span class="o">);</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ProducerConfig</span><span class="o">.</span><span class="na">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="o">,</span>
  <span class="s">&#34;io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer&#34;</span><span class="o">);</span>

<span class="o">....</span>

<span class="n">ProducerRecord</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">User</span><span class="o">&gt;</span> <span class="n">record</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProducerRecord</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">User</span><span class="o">&gt;(</span><span class="n">topic</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
<span class="n">producer</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">record</span><span class="o">);</span>
</code></pre></div><blockquote>
<p>请注意，您只需将 <code>Producer</code> 配置为使用 <code>KafkaJsonSchemaSerializer</code>，<code>User</code> 类就会被序列化为 JSON。</p>
</blockquote>
<p><code>rust-rdkafka</code> 用 <a href="https://docs.rs/rdkafka/0.26.0/rdkafka/message/trait.ToBytes.html">ToBytes</a> trait 提供了类似的东西。下面是它的样子。</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">ToBytes</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="sd">/// Converts the provided data to bytes.
</span><span class="sd"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">to_bytes</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">];</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>不言而喻吧？<code>String</code>、<code>Vec&lt;u8&gt;</code> 等都有现有的实现。所以你可以使用这些类型作为键或值，而不需要任何额外的工作 - 这正是我们刚刚做的。但问题是我们的方法是 &ldquo;显式&rdquo; 的，即我们将 <code>User</code> 结构转换为 JSON 字符串，并将其传递出去。</p>
<h2 id="如果我们可以为-user-实现-tobytes-呢">如果我们可以为 <code>User</code> 实现 <code>ToBytes</code> 呢？</h2>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">ToBytes</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">User</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">to_bytes</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">]</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">serde_json</span>::<span class="n">to_vec_pretty</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;json serialization failed&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">b</span><span class="p">.</span><span class="n">as_slice</span><span class="p">()</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>你会看到一个编译器错误。</p>
<pre><code>cannot return value referencing local variable `b`
returns a value referencing data owned by the current function
</code></pre><blockquote>
<p>更多的背景资料，请参考 <a href="https://github.com/fede1024/rust-rdkafka/issues/128">GitHub</a> 的问题。我很乐意看到其他可以与 <code>ToBytes</code> 一起工作的例子 - 如果你有这方面的意见，请在留言中留下。</p>
</blockquote>
<p>TL;DR是，最好坚持用 &ldquo;显式&rdquo; 的方式做事，除非你有一个 <code>ToBytes</code> 的实现，&ldquo;不涉及分配，不能失败&rdquo;。</p>
<h2 id="总结">总结</h2>
<p>第一部分就到这里。第二部分将涉及围绕 Kafka 消费者的话题。</p>
<p>原文链接: <a href="https://dev.to/abhirockzz/getting-started-with-kafka-and-rust-part-1-4hkb">https://dev.to/abhirockzz/getting-started-with-kafka-and-rust-part-1-4hkb</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/rustlang" term="rustlang" label="rustlang" />
                             
                                <category scheme="https://ohmyweekly.github.io/categories/kafka" term="kafka" label="kafka" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/rust" term="rust" label="Rust" />
                            
                        
                    
                
            
        </entry>
    
</feed>
