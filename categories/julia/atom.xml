<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.79.0">Hugo</generator><title type="html"><![CDATA[Julia on 焉知非鱼]]></title>
    
        <subtitle type="html"><![CDATA[rakulang, dartlang, nimlang, golang, rustlang, lang lang no see]]></subtitle>
    
    
    
            <link href="https://ohmyweekly.github.io/categories/julia/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmyweekly.github.io/categories/julia/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://ohmyweekly.github.io/categories/julia/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://ohmyweekly.github.io/categories/julia/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2020-12-23T23:05:46+08:00</updated>
    
    
    
    
        <id>https://ohmyweekly.github.io/categories/julia/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Julia 中的 REPL]]></title>
            <link href="https://ohmyweekly.github.io/notes/2020-08-21-repl-in-julia/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://ohmyweekly.github.io/notes/2020-08-21-repl-in-julia/</id>
            
            
                    <author>
                        <name>焉知非鱼</name>
                    </author>
            <published>2020-08-21T00:00:00+08:00</published>
            <updated>2020-08-21T00:00:00+08:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>REPL in Julia</blockquote><h2 id="julia-repl">Julia REPL</h2>
<p>Julia 在 <code>julia</code> 可执行文件中内置了一个功能齐全的交互式命令行 REPL（read-eval-print loop）。除了允许快速、简单地评估 Julia 语句外，它还具有可搜索的历史记录、tab-补全、许多有用的键绑定以及专门的帮助和 <code>shell</code> 模式。REPL 可以通过简单地调用 <code>julia</code> 而不使用参数或双击可执行文件来启动。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ julia

               _
   _       _ _<span class="o">(</span>_<span class="o">)</span>_     <span class="p">|</span>  Documentation: https://docs.julialang.org
  <span class="o">(</span>_<span class="o">)</span>     <span class="p">|</span> <span class="o">(</span>_<span class="o">)</span> <span class="o">(</span>_<span class="o">)</span>    <span class="p">|</span>
   _ _   _<span class="p">|</span> <span class="p">|</span>_  __ _   <span class="p">|</span>  Type <span class="s2">&#34;?&#34;</span> <span class="k">for</span> help, <span class="s2">&#34;]?&#34;</span> <span class="k">for</span> Pkg help.
  <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span>/ _<span class="sb">`</span> <span class="p">|</span>  <span class="p">|</span>
  <span class="p">|</span> <span class="p">|</span> <span class="p">|</span>_<span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="p">|</span> <span class="p">|</span>  <span class="p">|</span>  Version 1.5.0 <span class="o">(</span>2020-08-01<span class="o">)</span>
 _/ <span class="p">|</span><span class="se">\_</span>_<span class="s1">&#39;_|_|_|\__&#39;</span>_<span class="p">|</span>  <span class="p">|</span>  Official https://julialang.org/ release
<span class="p">|</span>__/                   <span class="p">|</span>


julia&gt;
</code></pre></div><p>要退出交互式会话，请键入 <code>^D</code> - 控制键与 <code>d</code> 键一起在空行上键入，或键入 <code>exit()</code> 后跟回车或回车键。REPL 会用一个横幅和 <code>julia&gt;</code> 提示来欢迎您。</p>
<h3 id="不同的提示模式">不同的提示模式</h3>
<h4 id="朱利安模式">朱利安模式</h4>
<p>REPL 有四种主要的操作模式。第一种也是最常见的是 Julian 提示。这是默认的操作模式；每个新行都以 <code>julia&gt;</code> 开始。在这里您可以输入 Julia 表达式。在输入完整的表达式后点击回车或回车将评估该条目并显示最后一个表达式的结果。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; string<span class="o">(</span><span class="m">1</span> + 2<span class="o">)</span>
<span class="s2">&#34;3&#34;</span>
</code></pre></div><p>在交互式工作中，有许多独特的有用功能。除了显示结果之外，REPL 还将结果绑定到变量 <code>ans</code> 上。行上的分号可以作为一个标志来抑制显示结果。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; string<span class="o">(</span><span class="m">3</span> * 4<span class="o">)</span><span class="p">;</span>

julia&gt; ans
<span class="s2">&#34;12&#34;</span>
</code></pre></div><p>在 Julia 模式下，REPL 支持称为提示粘贴(<em>prompt pasting</em>)的东西。当把以 <code>julia&gt;</code> 开头的文本粘贴到 REPL 中时，这个功能会被激活。在这种情况下，只有以 <code>julia&gt;</code> 开头的表达式会被解析，其他表达式会被删除。这使得您可以粘贴从 REPL 会话中复制的代码块，而无需清除提示和输出。这个功能默认是启用的，但可以通过 <code>REPL.enable_promptpaste(::Bool)</code> 来禁用或启用。如果启用了，您可以直接将本段上面的代码块粘贴到 REPL 中试试。这个功能在标准的 Windows 命令提示符上不起作用，因为它在检测粘贴发生时的局限性。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">using REPL
REPL.enable_promptpaste<span class="o">(</span><span class="nb">false</span><span class="o">)</span> <span class="c1"># 禁用 prompt pasting</span>
REPL.enable_promptpaste<span class="o">(</span><span class="nb">true</span><span class="o">)</span>  <span class="c1"># 启用 prompt pasting</span>
</code></pre></div><p>对象在 REPL 中使用带有特定 <a href="https://docs.julialang.org/en/v1/base/io-network/#Base.IOContext">IOContext</a> 的 <a href="https://docs.julialang.org/en/v1/base/io-network/#Base.show-Tuple%7BIO,Any%7D">show</a> 函数进行打印。特别是，<code>:limit</code> 属性被设置为 true。其他属性可以在某些 <code>show</code> 方法中接收一个默认值，如果它还没有被设置，比如 <code>:compact</code>。作为实验性功能，可以通过 <code>Base.active_repl.options.iocontext</code> 字典来指定 REPL 使用的属性（将值关联到属性）。例如:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; rand<span class="o">(</span>2, 2<span class="o">)</span>
2×2 Array<span class="o">{</span>Float64,2<span class="o">}</span>:
 0.8833    0.329197
 0.719708  0.59114

julia&gt; show<span class="o">(</span>IOContext<span class="o">(</span>stdout, :compact <span class="o">=</span>&gt; <span class="nb">false</span><span class="o">)</span>, <span class="s2">&#34;text/plain&#34;</span>, rand<span class="o">(</span>2, 2<span class="o">))</span>
 0.43540323669187075  0.15759787870609387
 0.2540832269192739   0.4597637838786053
julia&gt; Base.active_repl.options.iocontext<span class="o">[</span>:compact<span class="o">]</span> <span class="o">=</span> false<span class="p">;</span>

julia&gt; rand<span class="o">(</span>2, 2<span class="o">)</span>
2×2 Array<span class="o">{</span>Float64,2<span class="o">}</span>:
 0.2083967319174056  0.13330606013126012
 0.6244375177790158  0.9777957560761545
</code></pre></div><p>为了在启动时自动定义这个字典的值，可以使用 <code>~/.julia/config/startup.jl</code> 文件中的 <a href="https://docs.julialang.org/en/v1/stdlib/REPL/#Base.atreplinit"><code>atreplinit</code></a> 函数，例如:</p>
<div class="highlight"><pre class="chroma"><code class="language-julia" data-lang="julia"><span class="n">atreplinit</span><span class="p">()</span> <span class="k">do</span> <span class="n">repl</span>
    <span class="n">repl</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">iocontext</span><span class="p">[</span><span class="o">:</span><span class="n">compact</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span>
<span class="k">end</span>
</code></pre></div><h4 id="帮助模式">帮助模式</h4>
<p>当光标在行首时，可以通过键入 <code>?</code> 来将提示变为帮助模式。Julia 将尝试打印帮助模式下输入的任何内容的帮助或文档。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; ? <span class="c1"># upon typing ?, the prompt changes (in place) to: help?&gt;</span>

help?&gt; string
search: string String Cstring Cwstring RevString randstring bytestring SubString

  string<span class="o">(</span>xs...<span class="o">)</span>

  Create a string from any values using the print <span class="k">function</span>.
</code></pre></div><p>也可以查询宏、类型和变量:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">help?&gt; @time
  @time

  A macro to execute an expression, printing the <span class="nb">time</span> it took to execute, the number of allocations,
  and the total number of bytes its execution caused to be allocated, before returning the value of the
  expression.

  See also @timev, @timed, @elapsed, and @allocated.

help?&gt; Int32
search: Int32 UInt32

  Int32 &lt;: Signed

  32-bit signed integer type.
</code></pre></div><p>按行首的退格键可以退出帮助模式。</p>
<h4 id="shell-模式">Shell 模式</h4>
<p>就像帮助模式对于快速访问文档很有用一样，另一个常见的任务是使用系统 shell 来执行系统命令。就像 <code>?</code> 进入帮助模式时一样, 在行首按下分号(<code>;</code>)会进入 shell 模式。而且可以在行首按退格键退出。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="p">;</span> <span class="c1"># upon typing ;, the prompt changes (in place) to: shell&gt;</span>

shell&gt; <span class="nb">echo</span> hello
hello
</code></pre></div><p>注意:</p>
<p>对于 Windows 用户来说，Julia 的 shell 模式不暴露 windows shell 命令。因此，这将会失败:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="p">;</span> <span class="c1"># upon typing ;, the prompt changes (in place) to: shell&gt;</span>

shell&gt; dir
ERROR: IOError: could not spawn <span class="sb">`</span>dir<span class="sb">`</span>: no such file or directory <span class="o">(</span>ENOENT<span class="o">)</span>
Stacktrace!
.......
</code></pre></div><p>不过，你可以像这样访问 PowerShell:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="p">;</span> <span class="c1"># upon typing ;, the prompt changes (in place) to: shell&gt;</span>

shell&gt; powershell
Windows PowerShell
Copyright <span class="o">(</span>C<span class="o">)</span> Microsoft Corporation. All rights reserved.
PS C:<span class="se">\U</span>sers<span class="se">\e</span>lm&gt;
</code></pre></div><p>&hellip;而且对 <code>cmd.exe</code> 的访问是这样的（见 <code>dir</code> 命令）:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="p">;</span> <span class="c1"># upon typing ;, the prompt changes (in place) to: shell&gt;</span>

shell&gt; cmd
Microsoft Windows <span class="o">[</span>version 10.0.17763.973<span class="o">]</span>
<span class="o">(</span>c<span class="o">)</span> <span class="m">2018</span> Microsoft Corporation. All rights reserved.
C:<span class="se">\U</span>sers<span class="se">\e</span>lm&gt;dir
 Volume in drive C has no label
 Volume Serial Number is 1643-0CD7
  Directory of C:<span class="se">\U</span>sers<span class="se">\e</span>lm

29/01/2020  22:15    &lt;DIR&gt;          .
29/01/2020  22:15    &lt;DIR&gt;          ..
02/02/2020  08:06    &lt;DIR&gt;          .atom
</code></pre></div><h4 id="搜索模式">搜索模式</h4>
<p>在上述所有模式中，执行的行数都会被保存到历史文件中，可以进行搜索。要在以前的历史记录中进行增量搜索，输入 <code>^R</code>&ndash;控制键和 <code>r</code> 键。提示符将变为(<code>reverse-i-search</code>):，当你输入搜索查询时，搜索查询将出现在引号中。当你输入更多的内容时，与查询相匹配的最新结果会动态地更新到冒号的右边。如果要使用相同的查询找到一个较早的结果，只需再次输入 <code>^R</code>。</p>
<p>就像 <code>^R</code> 是反向搜索一样，<code>^S</code> 是正向搜索，并提示(<code>i-search</code>):。两者可以相互结合使用，分别在上一个或下一个匹配结果中移动。</p>
<h3 id="键绑定">键绑定</h3>
<p>Julia REPL 大量使用了键绑定。上面已经介绍了几个控制键绑定（<code>^D</code> 用于退出，<code>^R</code> 和 <code>^S</code> 用于搜索），但还有更多。除了控制键，还有元键绑定。这些因平台不同而变化较大，但大多数终端默认使用 <code>alt-</code> 或 <code>option-</code> 按住键发送元键（也可以配置成这样），或者按 <code>Esc</code> 键，然后按键。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Keybinding</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Program control</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">^D</td>
<td style="text-align:left">退出(当缓存为空时)</td>
</tr>
<tr>
<td style="text-align:left">^C</td>
<td style="text-align:left">中断或取消</td>
</tr>
<tr>
<td style="text-align:left">^L</td>
<td style="text-align:left">清理控制台屏幕</td>
</tr>
<tr>
<td style="text-align:left">Return/Enter, <code>^J</code></td>
<td style="text-align:left">新行，如果完成了就执行</td>
</tr>
<tr>
<td style="text-align:left">meta-Return/Enter</td>
<td style="text-align:left">插入新行而不执行</td>
</tr>
<tr>
<td style="text-align:left"><code>?</code> 或 <code>;</code></td>
<td style="text-align:left">进入帮助或shell模式(当在行的开头时)</td>
</tr>
<tr>
<td style="text-align:left"><code>^R</code>, <code>^S</code></td>
<td style="text-align:left">递增式历史检索，如上所述</td>
</tr>
</tbody>
</table>
<h3 id="自定义键绑定">自定义键绑定</h3>
<p>Julia 的 REPL 键绑定可以通过向 <code>REPL.setup_interface</code> 传递一个字典来完全定制用户的偏好。这个字典的键可以是字符或字符串。键 &lsquo;*&rsquo; 指的是默认操作。控制加字符x的绑定用&quot;^x&quot;表示。Meta 加x可以写成 &ldquo;\M-x&rdquo; 或 &ldquo;\ex&rdquo;，Control 加 x 可以写成 &ldquo;\C-x&rdquo; 或 &ldquo;^x&rdquo;。自定义 keymap 的值必须是 nothing(表示输入应该被忽略)或接受签名的函数(<code>PromptState</code>, <code>AbstractREPL</code>, <code>Char</code>)。<code>REPL.setup_interface</code> 函数必须在 REPL 初始化之前被调用，通过在 atreplinit 注册操作。例如，要绑定上下方向键来移动历史记录而不需要前缀搜索，可以在 <code>~/.julia/config/startup.jl</code> 中放入以下代码。</p>
<div class="highlight"><pre class="chroma"><code class="language-julia" data-lang="julia"><span class="k">import</span> <span class="n">REPL</span>
<span class="k">import</span> <span class="n">REPL</span><span class="o">.</span><span class="n">LineEdit</span>

<span class="kd">const</span> <span class="n">mykeys</span> <span class="o">=</span> <span class="kt">Dict</span><span class="p">{</span><span class="kt">Any</span><span class="p">,</span><span class="kt">Any</span><span class="p">}(</span>
    <span class="c"># Up Arrow</span>
    <span class="s">&#34;\e[A&#34;</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">o</span><span class="o">...</span><span class="p">)</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">LineEdit</span><span class="o">.</span><span class="n">edit_move_up</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">||</span> <span class="n">LineEdit</span><span class="o">.</span><span class="n">history_prev</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">LineEdit</span><span class="o">.</span><span class="n">mode</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">.</span><span class="n">hist</span><span class="p">)),</span>
    <span class="c"># Down Arrow</span>
    <span class="s">&#34;\e[B&#34;</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">o</span><span class="o">...</span><span class="p">)</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">LineEdit</span><span class="o">.</span><span class="n">edit_move_down</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">||</span> <span class="n">LineEdit</span><span class="o">.</span><span class="n">history_next</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">LineEdit</span><span class="o">.</span><span class="n">mode</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">.</span><span class="n">hist</span><span class="p">))</span>
<span class="p">)</span>

<span class="k">function</span> <span class="n">customize_keys</span><span class="p">(</span><span class="n">repl</span><span class="p">)</span>
    <span class="n">repl</span><span class="o">.</span><span class="n">interface</span> <span class="o">=</span> <span class="n">REPL</span><span class="o">.</span><span class="n">setup_interface</span><span class="p">(</span><span class="n">repl</span><span class="p">;</span> <span class="n">extra_repl_keymap</span> <span class="o">=</span> <span class="n">mykeys</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">atreplinit</span><span class="p">(</span><span class="n">customize_keys</span><span class="p">)</span>
</code></pre></div><p>用户应该参考 <code>LineEdit.jl</code> 来发现键输入的可用操作。</p>
<h3 id="tab-补全">Tab 补全</h3>
<p>在 REPL 的 Julian 和帮助模式下，可以输入函数或类型的前几个字符，然后按tab键，得到一个所有匹配的列表:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; stri<span class="o">[</span>TAB<span class="o">]</span>
stride     strides     string      strip

julia&gt; Stri<span class="o">[</span>TAB<span class="o">]</span>
StridedArray    StridedMatrix    StridedVecOrMat  StridedVector    String
</code></pre></div><p>tab 键也可以用来用它们的 Unicode 等价物替代 LaTeX 数学符号，并获得 LaTeX 匹配列表。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="se">\p</span>i<span class="o">[</span>TAB<span class="o">]</span>
julia&gt; π
<span class="nv">π</span> <span class="o">=</span> 3.1415926535897...

julia&gt; e<span class="se">\_</span>1<span class="o">[</span>TAB<span class="o">]</span> <span class="o">=</span> <span class="o">[</span>1,0<span class="o">]</span>
julia&gt; e₁ <span class="o">=</span> <span class="o">[</span>1,0<span class="o">]</span>
2-element Array<span class="o">{</span>Int64,1<span class="o">}</span>:
 <span class="m">1</span>
 <span class="m">0</span>

julia&gt; e<span class="se">\^</span>1<span class="o">[</span>TAB<span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="m">1</span> 0<span class="o">]</span>
julia&gt; e¹ <span class="o">=</span> <span class="o">[</span><span class="m">1</span> 0<span class="o">]</span>
1×2 Array<span class="o">{</span>Int64,2<span class="o">}</span>:
 <span class="m">1</span>  <span class="m">0</span>

julia&gt; <span class="se">\s</span>qrt<span class="o">[</span>TAB<span class="o">]</span><span class="m">2</span>     <span class="c1"># √ is equivalent to the sqrt function</span>
julia&gt; √2
1.4142135623730951

julia&gt; <span class="se">\h</span>bar<span class="o">[</span>TAB<span class="o">](</span>h<span class="o">)</span> <span class="o">=</span> h / 2<span class="se">\p</span>i<span class="o">[</span>TAB<span class="o">]</span>
julia&gt; ħ<span class="o">(</span>h<span class="o">)</span> <span class="o">=</span> h / 2π
ħ <span class="o">(</span>generic <span class="k">function</span> with <span class="m">1</span> method<span class="o">)</span>

julia&gt; <span class="se">\h</span><span class="o">[</span>TAB<span class="o">]</span>
<span class="se">\h</span>at              <span class="se">\h</span>ermitconjmatrix  <span class="se">\h</span>kswarow          <span class="se">\h</span>rectangle
<span class="se">\h</span>atapprox        <span class="se">\h</span>exagon           <span class="se">\h</span>ookleftarrow     <span class="se">\h</span>rectangleblack
<span class="se">\h</span>bar             <span class="se">\h</span>exagonblack      <span class="se">\h</span>ookrightarrow    <span class="se">\h</span>slash
<span class="se">\h</span>eartsuit        <span class="se">\h</span>ksearow          <span class="se">\h</span>ouse             <span class="se">\h</span>space

julia&gt; <span class="nv">α</span><span class="o">=</span><span class="s2">&#34;\alpha[TAB]&#34;</span>   <span class="c1"># LaTeX completion also works in strings</span>
julia&gt; <span class="nv">α</span><span class="o">=</span><span class="s2">&#34;α&#34;</span>
</code></pre></div><p>完整的tab-补全列表可以在手册的 <a href="https://docs.julialang.org/en/v1/manual/unicode-input/#Unicode-Input-1">Unicode 输入</a>部分找到。</p>
<p>路径补全适用于字符串和 julia 的 shell 模式:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="nv">path</span><span class="o">=</span><span class="s2">&#34;/[TAB]&#34;</span>
.dockerenv  .juliabox/   boot/        etc/         lib/         media/       opt/         root/        sbin/        sys/         usr/
.dockerinit bin/         dev/         home/        lib64/       mnt/         proc/        run/         srv/         tmp/         var/
shell&gt; /<span class="o">[</span>TAB<span class="o">]</span>
.dockerenv  .juliabox/   boot/        etc/         lib/         media/       opt/         root/        sbin/        sys/         usr/
.dockerinit bin/         dev/         home/        lib64/       mnt/         proc/        run/         srv/         tmp/         var/
</code></pre></div><p>Tab 补全可以帮助调查匹配输入参数的可用方法。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; max<span class="o">([</span>TAB<span class="o">]</span> <span class="c1"># All methods are displayed, not shown here due to size of the list</span>

julia&gt; max<span class="o">([</span>1, 2<span class="o">]</span>, <span class="o">[</span>TAB<span class="o">]</span> <span class="c1"># All methods where `Vector{Int}` matches as first argument</span>
max<span class="o">(</span>x, y<span class="o">)</span> in Base at operators.jl:215
max<span class="o">(</span>a, b, c, xs...<span class="o">)</span> in Base at operators.jl:281

julia&gt; max<span class="o">([</span>1, 2<span class="o">]</span>, max<span class="o">(</span>1, 2<span class="o">)</span>, <span class="o">[</span>TAB<span class="o">]</span> <span class="c1"># All methods matching the arguments.</span>
max<span class="o">(</span>x, y<span class="o">)</span> in Base at operators.jl:215
max<span class="o">(</span>a, b, c, xs...<span class="o">)</span> in Base at operators.jl:281
</code></pre></div><p>关键词也显示在 <code>;</code> 后面的建议方法中，见下面一行，其中 <code>limit</code> 和 <code>keepempty</code> 是关键词参数:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; split<span class="o">(</span><span class="s2">&#34;1 1 1&#34;</span>, <span class="o">[</span>TAB<span class="o">]</span>
split<span class="o">(</span>str::AbstractString<span class="p">;</span> limit, keepempty<span class="o">)</span> in Base at strings/util.jl:302
split<span class="o">(</span>str::T, splitter<span class="p">;</span> limit, keepempty<span class="o">)</span> where T&lt;:AbstractString in Base at strings/util.jl:277
</code></pre></div><p>方法的补全使用类型推断，因此即使参数是函数输出的，也能看到参数是否匹配。函数需要类型稳定，完成才能够删除不匹配的方法。</p>
<p>Tab 补全也可以帮助补全字段:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; import UUIDs

julia&gt; UUIDs.uuid<span class="o">[</span>TAB<span class="o">]</span>
uuid1        uuid4         uuid_version
</code></pre></div><p>也可以补全函数输出的字段:</p>
<pre><code class="language-sshell" data-lang="sshell">julia&gt; split(&quot;&quot;,&quot;&quot;)[1].[TAB]
lastindex  offset  string
</code></pre><p>函数输出的字段完成采用类型推断，只有在函数类型稳定的情况下，它才能建议字段。</p>
<p>字典键也可以用 tab 补全:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="nv">foo</span> <span class="o">=</span> Dict<span class="o">(</span><span class="s2">&#34;qwer1&#34;</span><span class="o">=</span>&gt;1, <span class="s2">&#34;qwer2&#34;</span><span class="o">=</span>&gt;2, <span class="s2">&#34;asdf&#34;</span><span class="o">=</span>&gt;3<span class="o">)</span>
Dict<span class="o">{</span>String,Int64<span class="o">}</span> with <span class="m">3</span> entries:
  <span class="s2">&#34;qwer2&#34;</span> <span class="o">=</span>&gt; <span class="m">2</span>
  <span class="s2">&#34;asdf&#34;</span>  <span class="o">=</span>&gt; <span class="m">3</span>
  <span class="s2">&#34;qwer1&#34;</span> <span class="o">=</span>&gt; <span class="m">1</span>

julia&gt; foo<span class="o">[</span><span class="s2">&#34;q[TAB]
</span><span class="s2">
</span><span class="s2">&#34;</span>qwer1<span class="s2">&#34; &#34;</span>qwer2<span class="s2">&#34;
</span><span class="s2">julia&gt; foo[&#34;</span>qwer
</code></pre></div><h3 id="自定义颜色">自定义颜色</h3>
<p>Julia 和 REPL 所使用的颜色也是可以自定义的。要改变 Julia 提示符的颜色，您可以在您的 <code>~/.julia/config/startup.jl</code> 文件中添加以下内容，该文件应放在您的主目录中。</p>
<div class="highlight"><pre class="chroma"><code class="language-julia" data-lang="julia"><span class="k">function</span> <span class="n">customize_colors</span><span class="p">(</span><span class="n">repl</span><span class="p">)</span>
    <span class="n">repl</span><span class="o">.</span><span class="n">prompt_color</span> <span class="o">=</span> <span class="n">Base</span><span class="o">.</span><span class="n">text_colors</span><span class="p">[</span><span class="o">:</span><span class="n">cyan</span><span class="p">]</span>
<span class="k">end</span>

<span class="n">atreplinit</span><span class="p">(</span><span class="n">customize_colors</span><span class="p">)</span>
</code></pre></div><p>可用的颜色键可以通过在 REPL 的帮助模式下输入 <code>Base.text_colors</code> 来查看。此外，对于支持 256 色的终端来说，整数 0 到 255 可以用作颜色键。</p>
<p>也可以通过在上面的 <code>customize_colors</code> 函数中设置 <code>repl</code> 的相应字段（分别为 <code>help_color</code>、<code>shell_color</code>、<code>input_color</code> 和 <code>answer_color</code>）来改变帮助和 shell 提示符以及输入和回答文字的颜色。对于后两者，要确保 <code>envcolors</code> 字段也设置为 false。</p>
<p>也可以通过使用 <code>Base.text_colors[:bold]</code> 作为颜色来应用粗体格式。例如，要用粗体字打印答案，可以使用下面的 <code>~/.julia/config/startup.jl</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-julia" data-lang="julia"><span class="k">function</span> <span class="n">customize_colors</span><span class="p">(</span><span class="n">repl</span><span class="p">)</span>
    <span class="n">repl</span><span class="o">.</span><span class="n">envcolors</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">repl</span><span class="o">.</span><span class="n">answer_color</span> <span class="o">=</span> <span class="n">Base</span><span class="o">.</span><span class="n">text_colors</span><span class="p">[</span><span class="o">:</span><span class="n">bold</span><span class="p">]</span>
<span class="k">end</span>

<span class="n">atreplinit</span><span class="p">(</span><span class="n">customize_colors</span><span class="p">)</span>
</code></pre></div><p>你也可以通过设置适当的环境变量来定制用于渲染警告和信息消息的颜色。例如，要分别用洋红色、黄色和青色来渲染错误、警告和信息消息，你可以在 <code>~/.julia/config/startup.jl</code> 文件中添加以下内容:</p>
<div class="highlight"><pre class="chroma"><code class="language-julia" data-lang="julia"><span class="nb">ENV</span><span class="p">[</span><span class="s">&#34;JULIA_ERROR_COLOR&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="o">:</span><span class="n">magenta</span>
<span class="nb">ENV</span><span class="p">[</span><span class="s">&#34;JULIA_WARN_COLOR&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="o">:</span><span class="n">yellow</span>
<span class="nb">ENV</span><span class="p">[</span><span class="s">&#34;JULIA_INFO_COLOR&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="o">:</span><span class="n">cyan</span>
</code></pre></div><h3 id="terminalmenus">TerminalMenus</h3>
<p>TerminalMenus 是 Julia REPL 的一个子模块，可以在终端中实现小型、低配的交互式菜单。</p>
<h4 id="例子">例子</h4>
<div class="highlight"><pre class="chroma"><code class="language-julia" data-lang="julia"><span class="k">import</span> <span class="n">REPL</span>
<span class="k">using</span> <span class="n">REPL</span><span class="o">.</span><span class="n">TerminalMenus</span>

<span class="n">options</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#34;apple&#34;</span><span class="p">,</span> <span class="s">&#34;orange&#34;</span><span class="p">,</span> <span class="s">&#34;grape&#34;</span><span class="p">,</span> <span class="s">&#34;strawberry&#34;</span><span class="p">,</span>
            <span class="s">&#34;blueberry&#34;</span><span class="p">,</span> <span class="s">&#34;peach&#34;</span><span class="p">,</span> <span class="s">&#34;lemon&#34;</span><span class="p">,</span> <span class="s">&#34;lime&#34;</span><span class="p">]</span>
</code></pre></div><h4 id="radiomenu">RadioMenu</h4>
<p>RadioMenu 允许用户从列表中选择一个选项。<code>request</code> 函数显示交互式菜单并返回所选选项的索引。如果用户按 &lsquo;q&rsquo; 或 <code>ctrl-c</code>，<code>request</code> 将返回 <code>-1</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-julia" data-lang="julia"><span class="c"># `pagesize` is the number of items to be displayed at a time.</span>
<span class="c">#  The UI will scroll if the number of options is greater</span>
<span class="c">#   than the `pagesize`</span>
<span class="n">menu</span> <span class="o">=</span> <span class="n">RadioMenu</span><span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">pagesize</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>

<span class="c"># `request` displays the menu and returns the index after the</span>
<span class="c">#   user has selected a choice</span>
<span class="n">choice</span> <span class="o">=</span> <span class="n">request</span><span class="p">(</span><span class="s">&#34;Choose your favorite fruit:&#34;</span><span class="p">,</span> <span class="n">menu</span><span class="p">)</span>

<span class="k">if</span> <span class="n">choice</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="n">println</span><span class="p">(</span><span class="s">&#34;Your favorite fruit is &#34;</span><span class="p">,</span> <span class="n">options</span><span class="p">[</span><span class="n">choice</span><span class="p">],</span> <span class="s">&#34;!&#34;</span><span class="p">)</span>
<span class="k">else</span>
    <span class="n">println</span><span class="p">(</span><span class="s">&#34;Menu canceled.&#34;</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div><p>输出:</p>
<pre><code>Choose your favorite fruit:
^  grape
   strawberry
 &gt; blueberry
v  peach
Your favorite fruit is blueberry!
</code></pre><h4 id="multiselectmenu">MultiSelectMenu</h4>
<p>多重选择菜单（MultiSelectMenu）允许用户从一个列表中选择许多选择。</p>
<div class="highlight"><pre class="chroma"><code class="language-julia" data-lang="julia"><span class="c"># here we use the default `pagesize` 10</span>
<span class="n">menu</span> <span class="o">=</span> <span class="n">MultiSelectMenu</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>

<span class="c"># `request` returns a `Set` of selected indices</span>
<span class="c"># if the menu us canceled (ctrl-c or q), return an empty set</span>
<span class="n">choices</span> <span class="o">=</span> <span class="n">request</span><span class="p">(</span><span class="s">&#34;Select the fruits you like:&#34;</span><span class="p">,</span> <span class="n">menu</span><span class="p">)</span>

<span class="k">if</span> <span class="n">length</span><span class="p">(</span><span class="n">choices</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="n">println</span><span class="p">(</span><span class="s">&#34;You like the following fruits:&#34;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="kp">in</span> <span class="n">choices</span>
        <span class="n">println</span><span class="p">(</span><span class="s">&#34;  - &#34;</span><span class="p">,</span> <span class="n">options</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="k">end</span>
<span class="k">else</span>
    <span class="n">println</span><span class="p">(</span><span class="s">&#34;Menu canceled.&#34;</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div><p>输出:</p>
<pre><code>Select the fruits you like:
[press: d=done, a=all, n=none]
   [ ] apple
 &gt; [X] orange
   [X] grape
   [ ] strawberry
   [ ] blueberry
   [X] peach
   [ ] lemon
   [ ] lime
You like the following fruits:
  - orange
  - grape
  - peach
</code></pre><h4 id="customization--configuration">Customization / Configuration</h4>
<p>所有的界面定制都是通过关键字 <code>TerminalMenus.config()</code> 函数完成的。</p>
<h5 id="参数">参数</h5>
<ul>
<li><code>charset::Symbol=:na</code>: 要使用的ui字符(<code>:ascii</code> 或 <code>:unicode</code>); 被其他参数覆盖。</li>
<li><code>cursor::Char='&gt;'|'→'</code>: 光标使用的字符。</li>
<li><code>up_arrow::Char='^'|'↑'</code>: 用于向上箭头的字符。</li>
<li><code>down_arrow::Char='v'|'↓'</code>: 用于向下箭头的字符。</li>
<li><code>checked::String=&quot;[X]&quot;|&quot;✓&quot;</code>：用于检查的字符串。</li>
<li><code>unchecked::String=&quot;[]&quot;|&quot;⬚&quot;)</code>：用于未选中的字符串。</li>
<li><code>scroll::Symbol=:na</code>: 如果 <code>:wrap</code>，则将光标环绕在顶部和底部，如果 <code>:nowrap</code> 则不环绕光标。</li>
<li><code>supress_output::Bool=false</code>。用于测试。如果为真，菜单不会被打印到控制台。</li>
<li><code>ctrl_c_interrupt::Bool=true</code>: 如果为假，在 <code>^C</code> 时返回空，如果为真，在 <code>^C</code> 时抛出 InterruptException()。</li>
</ul>
<h4 id="例子-1">例子</h4>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">julia&gt; <span class="nv">menu</span> <span class="o">=</span> MultiSelectMenu<span class="o">(</span>options, <span class="nv">pagesize</span><span class="o">=</span>5<span class="o">)</span><span class="p">;</span>

julia&gt; request<span class="o">(</span>menu<span class="o">)</span> <span class="c1"># ASCII is used by default</span>
<span class="o">[</span>press: <span class="nv">d</span><span class="o">=</span><span class="k">done</span>, <span class="nv">a</span><span class="o">=</span>all, <span class="nv">n</span><span class="o">=</span>none<span class="o">]</span>
   <span class="o">[</span> <span class="o">]</span> apple
   <span class="o">[</span>X<span class="o">]</span> orange
   <span class="o">[</span> <span class="o">]</span> grape
 &gt; <span class="o">[</span>X<span class="o">]</span> strawberry
v  <span class="o">[</span> <span class="o">]</span> blueberry
Set<span class="o">([</span>4, 2<span class="o">])</span>

julia&gt; TerminalMenus.config<span class="o">(</span><span class="nv">charset</span><span class="o">=</span>:unicode<span class="o">)</span>

julia&gt; request<span class="o">(</span>menu<span class="o">)</span>
<span class="o">[</span>press: <span class="nv">d</span><span class="o">=</span><span class="k">done</span>, <span class="nv">a</span><span class="o">=</span>all, <span class="nv">n</span><span class="o">=</span>none<span class="o">]</span>
   ⬚ apple
   ✓ orange
   ⬚ grape
 → ✓ strawberry
↓  ⬚ blueberry
Set<span class="o">([</span>4, 2<span class="o">])</span>

julia&gt; TerminalMenus.config<span class="o">(</span><span class="nv">checked</span><span class="o">=</span><span class="s2">&#34;YEP!&#34;</span>, <span class="nv">unchecked</span><span class="o">=</span><span class="s2">&#34;NOPE&#34;</span>, <span class="nv">cursor</span><span class="o">=</span><span class="s1">&#39;⧐&#39;</span><span class="o">)</span>

julia&gt; request<span class="o">(</span>menu<span class="o">)</span>
<span class="o">[</span>press: <span class="nv">d</span><span class="o">=</span><span class="k">done</span>, <span class="nv">a</span><span class="o">=</span>all, <span class="nv">n</span><span class="o">=</span>none<span class="o">]</span>
   NOPE apple
   YEP! orange
   NOPE grape
 ⧐ YEP! strawberry
↓  NOPE blueberry
Set<span class="o">([</span>4, 2<span class="o">])</span>
</code></pre></div><h3 id="参考">参考</h3>
<p><a href="https://docs.julialang.org/en/v1/stdlib/REPL/#Base.atreplinit">Base.atreplinit</a></p>
<blockquote>
<p>atreplinit(f)</p>
</blockquote>
<p>注册一个单参数函数，在交互式会话中，在 REPL 接口初始化之前被调用；这对自定义接口很有用。f 的参数是 REPL 对象。这个函数应该在 <code>~/.julia/config/startup.jl</code> 初始化文件中调用。</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/categories/julia" term="julia" label="Julia" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmyweekly.github.io/tags/julia" term="julia" label="Julia" />
                             
                                <category scheme="https://ohmyweekly.github.io/tags/julia-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" term="julia-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3" label="Julia 官方文档" />
                            
                        
                    
                
            
        </entry>
    
</feed>
