{"author":{"name":null,"type":"card","url":"https://ohmyweekly.github.io"},"children":[{"content":{"html":"\u003ch1 id=\"grammar\"\u003eGrammar\u003c/h1\u003e\n\u003cp\u003e与许多解析工具一样，\u003ccode\u003epest\u003c/code\u003e 使用与 Rust 代码不同的正式 grammar 进行操作。\u003ccode\u003epest\u003c/code\u003e 使用的格式称为解析表达式 grammar，或 PEG。当构建一个项目时，\u003ccode\u003epest\u003c/code\u003e 会自动将位于单独文件中的 PEG 编译成您可以调用的普通 Rust 函数。\u003c/p\u003e\n\u003ch2 id=\"如何激活-pest\"\u003e如何激活 \u003ccode\u003epest\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003e大多数项目至少会有两个使用 \u003ccode\u003epest\u003c/code\u003e 的文件：解析器 (比如 \u003ccode\u003esrc/parser/mod.rs\u003c/code\u003e) 和 grammar (\u003ccode\u003esrc/parser/grammar.pest\u003c/code\u003e)。假设它们在同一个目录下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epest\u003c/span\u003e::\u003cspan class=\"n\"\u003eParser\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#[derive(Parser)]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#[grammar = \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;parser/grammar.pest\u0026#34;\u003c/span\u003e\u003cspan class=\"cp\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// relative to project `src`\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyParser\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e每当你编译这个文件时，\u003ccode\u003epest\u003c/code\u003e 会自动使用 grammar 文件生成这样的项。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003epub\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"nc\"\u003eRules\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* ... */\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eimpl\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eParser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMyParser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003epub\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eRules\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e-\u0026gt; \u003cspan class=\"nc\"\u003epest\u003c/span\u003e::\u003cspan class=\"n\"\u003ePairs\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* ... */\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你永远不会看到 \u003ccode\u003eenum Rules\u003c/code\u003e 或 \u003ccode\u003eimpl Parser\u003c/code\u003e 的纯文本。这些代码只存在于编译过程中。然而，您可以像使用其他枚举一样使用 \u003ccode\u003eRules\u003c/code\u003e，并且您可以通过 \u003ca href=\"https://pest.rs/book/parser_api.html\"\u003eParser API 章节\u003c/a\u003e中描述的 \u003ccode\u003ePairs\u003c/code\u003e 接口使用 \u003ccode\u003eparse(...)\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"关于-pegs-的警告\"\u003e关于 PEGs 的警告!\u003c/h2\u003e\n\u003cp\u003e解析表达式 grammar 看起来和你可能习惯的其他解析工具很相似，比如正则表达式、BNF grammar 和其他工具（Yacc/Bison、LALR、CFG）。然而，PEGs 的行为却有微妙的不同。PEGs 是\u003ca href=\"https://pest.rs/book/grammars/peg.html#eagerness\"\u003e急切的\u003c/a\u003e、\u003ca href=\"https://pest.rs/book/grammars/peg.html#non-backtracking\"\u003e非回溯的\u003c/a\u003e、\u003ca href=\"https://pest.rs/book/grammars/peg.html#ordered-choice\"\u003e有序的\u003c/a\u003e、\u003ca href=\"https://pest.rs/book/grammars/peg.html#unambiguous\"\u003e不含糊的\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e如果你不认识以上任何一个名字，不要害怕! 你已经比认识的人快了一步 - 当你使用 \u003ccode\u003epest\u003c/code\u003e 的 PEGs 时，你不会被与其他工具的比较所绊倒。\u003c/p\u003e\n\u003cp\u003e如果你之前使用过其他解析工具，一定要仔细阅读下一节。我们会提到一些关于 PEGs 的常见错误。\u003c/p\u003e\n\u003ch2 id=\"解析表达式语法\"\u003e解析表达式语法\u003c/h2\u003e\n\u003cp\u003e解析表达式语法(PEG)只是严格地表示了如果你用手写一个解析器会写的简单的命令式代码。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enumber = {            // To recognize a number...\n    ASCII_DIGIT+      //   take as many ASCII digits as possible (at least one).\n}\nexpression = {        // To recognize an expression...\n    number            //   first try to take a number...\n    | \u0026quot;true\u0026quot;          //   or, if that fails, the string \u0026quot;true\u0026quot;.\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e事实上，pest 产生的代码与上面注释中的伪代码十分相似。\u003c/p\u003e\n\u003ch3 id=\"eagerness\"\u003eEagerness\u003c/h3\u003e\n\u003cp\u003e当在输入字符串上运行\u003ca href=\"https://pest.rs/book/grammars/syntax.html#repetition\"\u003e重复的\u003c/a\u003e PEG 表达式时。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eASCII_DIGIT+      // one or more characters from '0' to '9'\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e它尽可能多地运行该表达式（\u0026ldquo;急切地\u0026quot;或 \u0026ldquo;贪婪地\u0026quot;匹配）。它要么成功，消耗它所匹配的任何内容，并将剩余的输入传递到解析器的下一步。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026quot;42 boxes\u0026quot;\n ^ Running ASCII_DIGIT+\n\n\u0026quot;42 boxes\u0026quot;\n   ^ Successfully took one or more digits!\n\n\u0026quot; boxes\u0026quot;\n ^ Remaining unparsed input.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e或失败，什么也不消耗。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026quot;galumphing\u0026quot;\n ^ Running ASCII_DIGIT+\n   Failed to take one or more digits!\n\n\u0026quot;galumphing\u0026quot;\n ^ Remaining unparsed input (everything).\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果一个表达式未能匹配，那么这个失败就会向上传播，最终导致解析失败，除非这个失败在 grammar 中的某个地方被\u0026quot;抓住\u0026rdquo;。选择操作符是\u0026quot;捕获\u0026quot;这种失败的一种方法。\u003c/p\u003e\n\u003ch3 id=\"有序选择\"\u003e有序选择\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://pest.rs/book/grammars/syntax.html#ordered-choice\"\u003e选择操作符\u003c/a\u003e，写成一条竖线 \u003ccode\u003e|\u003c/code\u003e，是有序的。PEG 表达式 \u003ccode\u003efirst | second\u003c/code\u003e 的意思是 \u0026ldquo;先试 \u003ccode\u003efirst\u003c/code\u003e，但如果失败了，再试 \u003ccode\u003esecond\u003c/code\u003e\u0026quot;。\u003c/p\u003e\n\u003cp\u003e在许多情况下，顺序并不重要。例如，\u003ccode\u003e\u0026quot;true\u0026quot; | \u0026quot;false\u0026quot;\u003c/code\u003e 将匹配字符串 \u003ccode\u003e\u0026quot;true\u0026quot;\u003c/code\u003e 或字符串 \u003ccode\u003e\u0026quot;false\u0026quot;\u003c/code\u003e（如果两者都不出现，则失败）。\u003c/p\u003e\n\u003cp\u003e然而，有时顺序确实很重要。考虑一下 PEG 表达式 \u003ccode\u003e\u0026quot;a\u0026quot; | \u0026quot;ab\u0026quot;\u003c/code\u003e。你可能期望它能匹配字符串 \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e 或字符串 \u003ccode\u003e\u0026quot;ab\u0026quot;\u003c/code\u003e。但事实并非如此 - 该表达式的意思是 \u0026ldquo;尝试 \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e；但如果失败，则尝试 \u003ccode\u003e\u0026quot;ab\u0026quot;\u003c/code\u003e。如果你正在匹配字符串 \u0026ldquo;abc\u0026rdquo;，尝试 \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e 不会失败；相反，它将成功匹配 \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e，留下 \u003ccode\u003e\u0026quot;bc\u0026quot;\u003c/code\u003e 未被解析。\u003c/p\u003e\n\u003cp\u003e一般来说，当编写一个有选择的解析器时，把最长或最具体的选择放在前面，而把最短或最一般的选择放在最后。\u003c/p\u003e\n\u003ch3 id=\"非回溯\"\u003e非回溯\u003c/h3\u003e\n\u003cp\u003e在解析过程中，一个 PEG 表达式要么成功，要么失败。如果成功了，下一步就照常进行。但如果它失败了，整个表达式就会失败。引擎不会后退再试。\u003c/p\u003e\n\u003cp\u003e请看下面这个 grammar，在字符串 \u003ccode\u003e\u0026quot;frumious\u0026quot;\u003c/code\u003e 上进行匹配。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eword = {     // to recognize a word...\n    ANY*     //   take any character, zero or more times...\n    ~ ANY    //   followed by any character\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e你可能期望这条规则能够解析任何至少包含一个字符（相当于 \u003ccode\u003eANY+\u003c/code\u003e）的输入字符串。但它不会。相反，第一个 \u003ccode\u003eANY*\u003c/code\u003e 会急切地吃掉整个字符串 - 它会得偿所愿的。然后，下一个 \u003ccode\u003eANY\u003c/code\u003e 将一无所有，所以它会失败。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026quot;frumious\u0026quot;\n ^ (word)\n\n\u0026quot;frumious\u0026quot;\n         ^ (ANY*) Success! Continue to `ANY` with remaining input \u0026quot;\u0026quot;.\n\n\u0026quot;\u0026quot;\n ^ (ANY) Failure! Expected one character, but found end of string.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在有回溯功能的系统中（比如正则表达式），你会往后退一步，\u0026ldquo;吐出\u0026quot;一个字符，然后再试。但 PEG 不会这样做。在规则 \u003ccode\u003efirst~second\u003c/code\u003e 中，一旦 \u003ccode\u003efirst\u003c/code\u003e 解析成功，就已经消耗了一些字符，永远不会再回来，\u003ccode\u003esecond\u003c/code\u003e 只能在 \u003ccode\u003efirst\u003c/code\u003e 没有消耗的输入上运行。\u003c/p\u003e\n\u003ch3 id=\"毫不含糊\"\u003e毫不含糊\u003c/h3\u003e\n\u003cp\u003e这些规则构成了一个优雅而简单的系统。每个 PEG 规则都会在输入字符串的剩余部分上运行，消耗尽可能多的输入。一旦一个规则完成，剩下的输入就会被传递给解析器的其他部分。\u003c/p\u003e\n\u003cp\u003e例如，表达式 \u003ccode\u003eASCII_DIGIT+\u003c/code\u003e，\u0026ldquo;一个或多个数字\u0026rdquo;，将始终匹配可能的最大的连续数字序列。不存在意外地让后面的规则回溯并以一种不直观和非局部的方式窃取一些数字的危险。\u003c/p\u003e\n\u003cp\u003e这与其他解析工具形成了鲜明的对比，比如正则表达式和 CFG，在这些工具中，规则的结果往往取决于一些距离的代码。事实上，LR解析器中著名的\u0026quot;移位/还原冲突\u0026quot;在 PEG 中并不存在问题。\u003c/p\u003e\n\u003ch3 id=\"不要惊慌\"\u003e不要惊慌\u003c/h3\u003e\n\u003cp\u003e这一切在一开始可能有点反常。但正如你所看到的，基本的逻辑是非常简单和直接的。你可以琐碎地逐步完成任何 PEG 表达式的执行。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e试试这个。\u003c/li\u003e\n\u003cli\u003e如果它成功了，就尝试下一件事。\u003c/li\u003e\n\u003cli\u003e否则，尝试另一件事。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e(this ~ next_thing) | (other_thing)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这些规则结合在一起，使得 PEG 成为编写解析器的非常愉快的工具。\u003c/p\u003e\n\u003ch2 id=\"pet-解析器的语法\"\u003epet 解析器的语法\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003epet\u003c/code\u003e grammar 是规则的列表。规则是这样定义的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy_rule = { ... }\n\nanother_rule = {        // comments are preceded by two slashes\n    ...                 // whitespace goes anywhere\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e由于规则名被翻译成 Rust enum 变体，所以不允许成为 Rust 关键字。\u003c/p\u003e\n\u003cp\u003e定义规则的左大括号 \u003ccode\u003e{\u003c/code\u003e 前面可以有\u003ca href=\"https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules\"\u003e影响其操作\u003c/a\u003e的符号。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esilent_rule = _{ ... }\natomic_rule = @{ ... }\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"表达式\"\u003e表达式\u003c/h3\u003e\n\u003cp\u003eGrammar 规则是由表达式建立起来的（因此称为\u0026quot;解析表达式文法\u0026rdquo;）。这些表达式是对如何解析输入字符串的简明、正式的描述。\u003c/p\u003e\n\u003cp\u003e表达式是可以组合的：它们可以从其他表达式中构建出来，也可以互相嵌套，以产生任意复杂的规则（尽管你应该将非常复杂的表达式分解成多个规则，以使它们更容易管理）。\u003c/p\u003e\n\u003cp\u003ePEG 表达式既适用于高级意义，如\u0026quot;一个函数签名，后面是一个函数体\u0026rdquo;，也适用于低级意义，如\u0026quot;一个分号，后面是换行\u0026rdquo;。组合形式\u0026quot;后面是\u0026rdquo;，即\u003ca href=\"https://pest.rs/book/grammars/syntax.html#sequence\"\u003e序列操作符\u003c/a\u003e，在这两种情况下都是一样的。\u003c/p\u003e\n\u003ch3 id=\"终端\"\u003e终端\u003c/h3\u003e\n\u003cp\u003e最基本的规则是双引号的文字字符串。\u003ccode\u003e\u0026quot;text\u0026quot;\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e如果一个字符串前面有一个逗号，那么它可以不区分大小写（仅适用于 ASCII 字符）: \u003ccode\u003e^\u0026quot;text\u0026quot;\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在一个范围内的单个字符被写成两个单引号字符，用两个点分开：\u003ccode\u003e'0'...'9'\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e你可以用特殊规则 \u003ccode\u003eANY\u003c/code\u003e 来匹配任何单个字符。这相当于 \u003ccode\u003e'\\u{00}'...'\\u{10FFFF}'\u003c/code\u003e，任何一个 Unicode 字符。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026quot;a literal string\u0026quot;\n^\u0026quot;ASCII case-insensitive string\u0026quot;\n'a'..'z'\nANY\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最后，你可以直接写出其他规则的名称来引用它们，甚至可以递归使用规则。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy_rule = { \u0026quot;slithy \u0026quot; ~ other_rule }\nother_rule = { \u0026quot;toves\u0026quot; }\nrecursive_rule = { \u0026quot;mimsy \u0026quot; ~ recursive_rule }\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"序列\"\u003e序列\u003c/h3\u003e\n\u003cp\u003e序列运算符写成一个波浪号 \u003ccode\u003e~\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efirst ~ and_then\n\n(\u0026quot;abc\u0026quot;) ~ (^\u0026quot;def\u0026quot;) ~ ('g'..'z')        // matches \u0026quot;abcDEFr\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当匹配一个序列表达式时，尝试匹配 \u003ccode\u003efirst\u003c/code\u003e。如果 \u003ccode\u003efirst\u003c/code\u003e 匹配成功，则接下来尝试 \u003ccode\u003eand_then\u003c/code\u003e。但是，如果 \u003ccode\u003efirst\u003c/code\u003e 失败，则整个表达式失败。\u003c/p\u003e\n\u003cp\u003e表达式的列表可以与序列链在一起，这表明所有的组件必须出现，按照指定的顺序。\u003c/p\u003e\n\u003ch3 id=\"有序选择-1\"\u003e有序选择\u003c/h3\u003e\n\u003cp\u003e选择运算符写成一条竖线 \u003ccode\u003e|\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efirst | or_else\n\n(\u0026quot;abc\u0026quot;) | (^\u0026quot;def\u0026quot;) | ('g'..'z')        // matches \u0026quot;DEF\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当匹配一个选择表达式时，尝试匹配 \u003ccode\u003efirst\u003c/code\u003e。如果 \u003ccode\u003efirst\u003c/code\u003e 匹配成功，则整个表达式立即成功。但是，如果 \u003ccode\u003efirst\u003c/code\u003e 失败，接下来会尝试 \u003ccode\u003eor_else\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e注意，\u003ccode\u003efirst\u003c/code\u003e 和 \u003ccode\u003eor_else\u003c/code\u003e 总是在同一个位置尝试，即使 \u003ccode\u003efirst\u003c/code\u003e 在失败之前匹配了一些输入。当遇到解析失败时，引擎会尝试下一个有序的选择，就像没有匹配到输入一样。失败的解析永远不会消耗任何输入。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estart = { \u0026quot;Beware \u0026quot; ~ creature }\ncreature = {\n    (\u0026quot;the \u0026quot; ~ \u0026quot;Jabberwock\u0026quot;)\n    | (\u0026quot;the \u0026quot; ~ \u0026quot;Jubjub bird\u0026quot;)\n}\n\n\u0026quot;Beware the Jubjub bird\u0026quot;\n ^ (start) Parses via the second choice of `creature`,\n           even though the first choice matched \u0026quot;the \u0026quot; successfully.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e借用术语，把这种操作看成是\u0026quot;交替\u0026quot;或简单的 \u0026ldquo;OR\u0026rdquo;，有点诱人，但这是误导。之所以特别使用 \u0026ldquo;选择\u0026rdquo; 这个词，是因为这个操作不仅仅是逻辑上的 \u0026ldquo;OR\u0026rdquo;。\u003c/p\u003e\n\u003ch3 id=\"重复\"\u003e重复\u003c/h3\u003e\n\u003cp\u003e有两个重复运算符：星号 \u003ccode\u003e*\u003c/code\u003e 和加号 \u003ccode\u003e+\u003c/code\u003e。它们被放在一个表达式之后。星号 \u003ccode\u003e*\u003c/code\u003e 表示前面的表达式可以出现零次或多次。加号 \u003ccode\u003e+\u003c/code\u003e 表示前面的表达式可以出现一次或多次（必须至少出现一次）。\u003c/p\u003e\n\u003cp\u003e问号运算符 \u003ccode\u003e?\u003c/code\u003e 类似，但它表示表达式是可选的 - 它可以出现0次或1次。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e(\u0026quot;zero\u0026quot; ~ \u0026quot;or\u0026quot; ~ \u0026quot;more\u0026quot;)*\n (\u0026quot;one\u0026quot; | \u0026quot;or\u0026quot; | \u0026quot;more\u0026quot;)+\n           (^\u0026quot;optional\u0026quot;)?\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e请注意，\u003ccode\u003eexpr*\u003c/code\u003e 和 \u003ccode\u003eexpr?\u003c/code\u003e 总是会成功，因为它们被允许匹配零次。例如，\u003ccode\u003e\u0026quot;a\u0026quot;* ~ \u0026quot;b\u0026quot;?\u003c/code\u003e 即使在空的输入字符串上也会成功。\u003c/p\u003e\n\u003cp\u003e其他重复次数可以用大括号来表示。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpr{n}           // exactly n repetitions\nexpr{m, n}        // between m and n repetitions, inclusive\n\nexpr{, n}         // at most n repetitions\nexpr{m, }         // at least m repetitions\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e因此，\u003ccode\u003eexpr*\u003c/code\u003e 等同于 \u003ccode\u003eexpr{0，}\u003c/code\u003e；\u003ccode\u003eexpr+\u003c/code\u003e 等同于 \u003ccode\u003eexpr{1，}\u003c/code\u003e；\u003ccode\u003eexpr?\u003c/code\u003e 等同于 \u003ccode\u003eexpr{0，1}\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"谓词\"\u003e谓词\u003c/h3\u003e\n\u003cp\u003e在表达式前面加上安括号 \u003ccode\u003e\u0026amp;\u003c/code\u003e 或感叹号 \u003ccode\u003e!\u003c/code\u003e，就会变成一个不消耗任何输入的谓词。你可能知道这些运算符为 \u0026ldquo;向前查看\u0026rdquo; 或 \u0026ldquo;不进位\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e写成安培符 \u003ccode\u003e\u0026amp;\u003c/code\u003e 的正式谓词试图匹配其内部表达式。如果内部表达式成功，解析就会继续，但位置与谓词相同 - \u003ccode\u003e\u0026amp;foo ~ bar\u003c/code\u003e 因此是一种 \u0026ldquo;AND\u0026rdquo; 语句。\u0026ldquo;输入字符串必须匹配 \u003ccode\u003efoo\u003c/code\u003e AND \u003ccode\u003ebar\u003c/code\u003e\u0026quot;。如果内部表达式失败，整个表达式也会失败。\u003c/p\u003e\n\u003cp\u003e写成感叹号的否定谓词 \u003ccode\u003e!\u003c/code\u003e，试图匹配其内部表达式。如果内部表达式失败，则谓词成功，并在与谓词相同的位置继续解析。如果内部表达式成功，则谓词失败 - \u003ccode\u003e!foo ~ bar\u003c/code\u003e 因此是一种 \u0026ldquo;NOT\u0026rdquo; 语句。\u0026ldquo;输入的字符串必须与 \u003ccode\u003ebar\u003c/code\u003e 匹配，但不能是 \u003ccode\u003efoo\u003c/code\u003e\u0026quot;。\u003c/p\u003e\n\u003cp\u003e这就引出了一个常见的惯用法，意思是\u0026quot;任何字符但是\u0026rdquo;：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enot_space_or_tab = {\n    !(                // if the following text is not\n        \u0026quot; \u0026quot;           //     a space\n        | \u0026quot;\\t\u0026quot;        //     or a tab\n    )\n    ~ ANY             // then consume one character\n}\n\ntriple_quoted_string = {\n    \u0026quot;'''\u0026quot;\n    ~ triple_quoted_character*\n    ~ \u0026quot;'''\u0026quot;\n}\ntriple_quoted_character = {\n    !\u0026quot;'''\u0026quot;        // if the following text is not three apostrophes\n    ~ ANY         // then consume one character\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"操作符优先级和分组-wip\"\u003e操作符优先级和分组 (WIP)\u003c/h3\u003e\n\u003cp\u003e重复运算符星号 \u003ccode\u003e*\u003c/code\u003e、加号 \u003ccode\u003e+\u003c/code\u003e 和问号 \u003ccode\u003e?\u003c/code\u003e 适用于紧接前面的表达式。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026quot;One \u0026quot; ~ \u0026quot;or \u0026quot; ~ \u0026quot;more. \u0026quot;+\n\u0026quot;One \u0026quot; ~ \u0026quot;or \u0026quot; ~ (\u0026quot;more. \u0026quot;+)\n    are equivalent and match\n\u0026quot;One or more. more. more. more. \u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e较大的表达式可以通过用括号包围来重复。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e(\u0026quot;One \u0026quot; ~ \u0026quot;or \u0026quot; ~ \u0026quot;more. \u0026quot;)+\n    matches\n\u0026quot;One or more. One or more. \u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e重复运算符的优先性最高，其次是谓词运算符、序列运算符，最后是有序选择。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy_rule = {\n    \u0026quot;a\u0026quot;* ~ \u0026quot;b\u0026quot;?\n    | \u0026amp;\u0026quot;b\u0026quot;+ ~ \u0026quot;a\u0026quot;\n}\n\n// equivalent to\n\nmy_rule = {\n      ( (\u0026quot;a\u0026quot;*) ~ (\u0026quot;b\u0026quot;?) )\n    | ( (\u0026amp;(\u0026quot;b\u0026quot;+)) ~ \u0026quot;a\u0026quot; )\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"输入的开始和结束\"\u003e输入的开始和结束\u003c/h3\u003e\n\u003cp\u003e规则 \u003ccode\u003eSOI\u003c/code\u003e 和 \u003ccode\u003eEOI\u003c/code\u003e 分别匹配输入字符串的开始和结束。两者都不消耗任何文本。它们只表明解析器当前是否在输入的一个边缘。\u003c/p\u003e\n\u003cp\u003e例如，为了确保一条规则匹配整个输入，其中任何语法错误都会导致解析失败（而不是成功但不完整的解析）。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emain = {\n    SOI\n    ~ (...)\n    ~ EOI\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"隐含的空白\"\u003e隐含的空白\u003c/h3\u003e\n\u003cp\u003e许多语言和文本格式允许在逻辑标记之间任意留白和注释。例如，Rust 认为 \u003ccode\u003e4+5\u003c/code\u003e 相当于 \u003ccode\u003e4 + 5\u003c/code\u003e 和 \u003ccode\u003e4 /* comment */ + 5\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e可选规则 \u003ccode\u003eWHITESPACE\u003c/code\u003e 和 \u003ccode\u003eCOMMENT\u003c/code\u003e 实现了这种行为。如果定义了这两个规则中的任何一个(或两个)，它们将被隐式地插入到每个\u003ca href=\"https://pest.rs/book/grammars/syntax.html#sequence\"\u003e序列\u003c/a\u003e和每个\u003ca href=\"https://pest.rs/book/grammars/syntax.html#repetition\"\u003e重复\u003c/a\u003e之间(\u003ca href=\"https://pest.rs/book/grammars/syntax.html#atomic\"\u003e原子规则\u003c/a\u003e除外)。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpression = { \u0026quot;4\u0026quot; ~ \u0026quot;+\u0026quot; ~ \u0026quot;5\u0026quot; }\nWHITESPACE = _{ \u0026quot; \u0026quot; }\nCOMMENT = _{ \u0026quot;/*\u0026quot; ~ (!\u0026quot;*/\u0026quot; ~ ANY)* ~ \u0026quot;*/\u0026quot; }\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003e\u0026quot;4+5\u0026quot;\n\u0026quot;4 + 5\u0026quot;\n\u0026quot;4  +     5\u0026quot;\n\u0026quot;4 /* comment */ + 5\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e正如你所看到的，\u003ccode\u003eWHITESPACE\u003c/code\u003e 和 \u003ccode\u003eCOMMENT\u003c/code\u003e 是重复运行的，所以它们只需要匹配一个空白字符或一个注释。上面的 grammar 相当于。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpression = {\n    \u0026quot;4\u0026quot;   ~ (ws | com)*\n    ~ \u0026quot;+\u0026quot; ~ (ws | com)*\n    ~ \u0026quot;5\u0026quot;\n}\nws = _{ \u0026quot; \u0026quot; }\ncom = _{ \u0026quot;/*\u0026quot; ~ (!\u0026quot;*/\u0026quot; ~ ANY)* ~ \u0026quot;*/\u0026quot; }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e请注意，隐式空格不会插入规则的开头或结尾 - 例如，表达式不匹配 \u003ccode\u003e\u0026quot; 4+5 \u0026quot;\u003c/code\u003e。如果你想在规则的开头和结尾加入隐式空格，你需要把它夹在两个空规则之间（通常是 \u003ccode\u003eSOI\u003c/code\u003e 和 \u003ccode\u003eEOI\u003c/code\u003e，\u003ca href=\"https://pest.rs/book/grammars/syntax.html#start-and-end-of-input\"\u003e如上所述\u003c/a\u003e）。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWHITESPACE = _{ \u0026quot; \u0026quot; }\nexpression = { \u0026quot;4\u0026quot; ~ \u0026quot;+\u0026quot; ~ \u0026quot;5\u0026quot; }\nmain = { SOI ~ expression ~ EOI }\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003e\u0026quot;4+5\u0026quot;\n\u0026quot;  4 + 5   \u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e(请务必将 \u003ccode\u003eWHITESPACE\u003c/code\u003e 和 \u003ccode\u003eCOMMENT\u003c/code\u003e 规则标记为\u003ca href=\"https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules\"\u003e静默\u003c/a\u003e规则，除非你想在其他规则中看到它们！)\u003c/p\u003e\n\u003ch3 id=\"静默规则和原子规则\"\u003e静默规则和原子规则\u003c/h3\u003e\n\u003cp\u003e静默规则就像普通规则一样 - 当运行时，它们的功能是一样的 - 除了它们不产生 \u003ca href=\"https://pest.rs/book/parser_api.html#pairs\"\u003epairs\u003c/a\u003e或 \u003ca href=\"https://pest.rs/book/parser_api.html#tokens\"\u003etokens\u003c/a\u003e。如果一条规则是静默的，那么它永远不会出现在解析结果中。\u003c/p\u003e\n\u003cp\u003e要创建一个静默规则，请在左边的大括号 \u003ccode\u003e{\u003c/code\u003e 前加上一个下划线 \u003ccode\u003e_\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esilent = _{ ... }\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"原子\"\u003e原子\u003c/h3\u003e\n\u003cp\u003epest 有两种原子规则：原子和复合原子。要做一个，在左大括号 \u003ccode\u003e{\u003c/code\u003e 前写上一个符号。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eatomic = @{ ... }\ncompound_atomic = ${ ... }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这两种原子规则都可以防止\u003ca href=\"https://pest.rs/book/grammars/syntax.html#implicit-whitespace\"\u003e隐式空格\u003c/a\u003e：在原子规则中，波浪号 \u003ccode\u003e~\u003c/code\u003e 表示 \u0026ldquo;紧接着\u0026rdquo;，\u003ca href=\"https://pest.rs/book/grammars/syntax.html#repetition\"\u003e重复操作符\u003c/a\u003e（星号 \u003ccode\u003e*\u003c/code\u003e 和加号 \u003ccode\u003e+\u003c/code\u003e）没有隐式分隔。此外，所有从原子规则中调用的其他规则也被视为原子规则。\u003c/p\u003e\n\u003cp\u003e两者的区别在于它们如何产生内部规则的标记。在一个原子规则中，内部匹配规则是\u003ca href=\"https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules\"\u003e静默的\u003c/a\u003e。相比之下，复合原子规则会像普通规则一样产生内部 token。\u003c/p\u003e\n\u003cp\u003e当您要解析的文本忽略空白时，原子规则是很有用的，除了少数情况，例如文字字符串。在这种情况下，您可以编写 \u003ccode\u003eWHITESPACE\u003c/code\u003e 或 \u003ccode\u003eCOMMENT\u003c/code\u003e 规则，然后使您的字符串匹配规则成为原子规则。\u003c/p\u003e\n\u003ch3 id=\"非原子的\"\u003e非原子的\u003c/h3\u003e\n\u003cp\u003e有时候，你会想要取消原子解析的效果。例如，你可能想在表达式内部进行字符串插值，里面的表达式仍然可以像正常的一样有空格。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"ch\"\u003e#!/bin/env python3\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;The answer is {2 + 4}.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这是你使用非原子规则的地方。在定义的大括号前面写一个感叹号 \u003ccode\u003e!\u003c/code\u003e 无论是否从原子规则中调用，该规则都将作为非原子规则运行。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efstring = @{ \u0026quot;\\\u0026quot;\u0026quot; ~ ... }\nexpr = !{ ... }\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"堆栈wip\"\u003e堆栈(WIP)\u003c/h3\u003e\n\u003cp\u003epest 维护了一个可以直接从 grammar 中操作的栈。一个表达式可以用关键字 \u003ccode\u003ePUSH\u003c/code\u003e 进行匹配并推到栈上，然后再用关键字 \u003ccode\u003ePEEK\u003c/code\u003e 和 \u003ccode\u003ePOP\u003c/code\u003e 进行精确匹配。\u003c/p\u003e\n\u003cp\u003e使用栈可以对完全相同的文本进行多次匹配，而不是相同的模式。\u003c/p\u003e\n\u003cp\u003e例如:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esame_text = {\n    PUSH( \u0026quot;a\u0026quot; | \u0026quot;b\u0026quot; | \u0026quot;c\u0026quot; )\n    ~ POP\n}\nsame_pattern = {\n    (\u0026quot;a\u0026quot; | \u0026quot;b\u0026quot; | \u0026quot;c\u0026quot;)\n    ~ (\u0026quot;a\u0026quot; | \u0026quot;b\u0026quot; | \u0026quot;c\u0026quot;)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在这种情况下，\u003ccode\u003esame_pattern\u003c/code\u003e 会匹配 \u003ccode\u003e\u0026quot;ab\u0026quot;\u003c/code\u003e，而 \u003ccode\u003esame_text\u003c/code\u003e 不会。\u003c/p\u003e\n\u003cp\u003e一个实际的用途是解析 Rust 的 \u0026ldquo;\u003ca href=\"https://doc.rust-lang.org/book/second-edition/appendix-02-operators.html#non-operator-symbols\"\u003e原始字符串字面值\u003c/a\u003e\u0026quot;，它看起来像这样。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eraw_str\u003c/span\u003e: \u003cspan class=\"kp\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003er###\u0026#34;\n\u003c/span\u003e\u003cspan class=\"s\"\u003e    Some number of number signs # followed by a quotation mark \u0026#34;.\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003cspan class=\"s\"\u003e    Quotation marks can be used anywhere inside: \u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;,\n\u003c/span\u003e\u003cspan class=\"s\"\u003e    as long as one is not followed by a matching number of number signs,\n\u003c/span\u003e\u003cspan class=\"s\"\u003e    which ends the string: \u0026#34;###\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当解析一个原始字符串时，我们必须跟踪引号前出现了多少个数字符号 \u003ccode\u003e#\u003c/code\u003e。我们可以使用栈来完成这个任务。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eraw_string = {\n    \u0026quot;r\u0026quot; ~ PUSH(\u0026quot;#\u0026quot;*) ~ \u0026quot;\\\u0026quot;\u0026quot;    // push the number signs onto the stack\n    ~ raw_string_interior\n    ~ \u0026quot;\\\u0026quot;\u0026quot; ~ POP               // match a quotation mark and the number signs\n}\nraw_string_interior = {\n    (\n        !(\u0026quot;\\\u0026quot;\u0026quot; ~ PEEK)    // unless the next character is a quotation mark\n                          // followed by the correct amount of number signs,\n        ~ ANY             // consume one character\n    )*\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"小抄\"\u003e小抄\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e语法\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e含义\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e语法\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e含义\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003efoo = { ... }\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eregular rule\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ebaz = @{ ... }\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eatomic\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ebar = _{ ... }\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003esilent\u003ccode\u003e\t                  | \u003c/code\u003equx = ${ \u0026hellip; }`   | compound-atomic    |\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eplugh = !{ ... }\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003enon-atomic\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e\u0026quot;abc\u0026quot;\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eexact string\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e^\u0026quot;abc\u0026quot;\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ecase insensitive\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e'a'..'z'\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003echaracter range\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eANY\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eany character\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003efoo ~ bar\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003esequence\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ebaz | qux\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eordered choice\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003efoo*\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ezero or more\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ebar+\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eone or more\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ebaz?\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eoptional\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003equx{n}\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eexactly n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003equx{m, n}\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ebetween m and n  (inclusive)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e\u0026amp;foo\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003epositive predicate\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e!bar\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003enegative predicate\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ePUSH(baz)\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ematch and push\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ePOP\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ematch and pop\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003ePEEK\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ematch without pop\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"内置规则\"\u003e内置规则\u003c/h2\u003e\n\u003cp\u003e除了 \u003ccode\u003eANY\u003c/code\u003e，匹配任何单一的 Unicode 字符外，\u003ccode\u003epest\u003c/code\u003e 还提供了几条规则，让解析文本更加方便。\u003c/p\u003e\n\u003ch3 id=\"ascii-规则\"\u003eASCII 规则\u003c/h3\u003e\n\u003cp\u003e在可打印的 ASCII 字符中，它通常对匹配字母字符和数字很有用。对于数字，pest 提供了常见的（基数）的数字。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eBuilt-in rule\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eEquivalent\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eASCII_DIGIT\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e'0'..'9'\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eASCII_NONZERO_DIGIT\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e'1'..'9'\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eASCII_BIN_DIGIT\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e'0'..'1'\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eASCII_OCT_DIGIT\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e'0'..'7'\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003eASCII_HEX_DIGIT\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e'0'..'9' | 'a'..'f' | 'A'..'F'\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e对于字母字符，要区分大写和小写。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eBuilt-in rule\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eEquivalent\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eASCII_ALPHA_LOWER\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e'a'..'z'\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eASCII_ALPHA_UPPER\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e'A'..'Z'\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eASCII_ALPHA\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003e'a'..'z' | 'A'..'Z'\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eAnd for miscellaneous use:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eBuilt-in rule\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eMeaning\u003c/th\u003e\n\u003cth\u003eEquivalent\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eASCII_ALPHANUMERIC\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eany digit or letter\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eASCII_DIGIT | ASCII_ALPHA\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eNEWLINE\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eany line feed format\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026quot;\\n\u0026quot; | \u0026quot;\\r\\n\u0026quot; | \u0026quot;\\r\u0026quot;\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"统一码规则\"\u003e统一码规则\u003c/h3\u003e\n\u003cp\u003e为了更容易正确解析任意 Unicode 文本，pest 包含了大量对应 Unicode 字符属性的规则。这些规则分为一般类别和二进制属性规则。\u003c/p\u003e\n\u003cp\u003eUnicode 字符根据其一般用途被划分为不同的类别。每一个字符都属于一个类别，就像每一个 ASCII 字符都是一个控制字符、一个数字、一个字母、一个符号或一个空格一样。\u003c/p\u003e\n\u003cp\u003e此外，每个 Unicode 字符都有一个二进制属性列表（真或假），它满足或不满足这些属性。字符可以属于任何数量的这些属性，这取决于它们的含义。\u003c/p\u003e\n\u003cp\u003e例如，字符 \u0026ldquo;A\u0026rdquo;，\u0026ldquo;拉丁文大写字母A\u0026rdquo;，属于一般的 \u0026ldquo;大写字母\u0026rdquo; 类别，因为它的一般用途是字母。它具有 \u0026ldquo;大写字母\u0026rdquo; 的二元属性，但不具有 \u0026ldquo;表情符号\u0026rdquo; 的属性。相比之下，\u0026ldquo;负数平方的拉丁文大写字母A\u0026rdquo; 这个字符，因为在文本中一般不作为字母出现，所以属于一般类别 \u0026ldquo;其他符号\u0026rdquo;。它同时具有 \u0026ldquo;大写字母\u0026rdquo; 和 \u0026ldquo;表情符号\u0026rdquo; 的二元属性。\u003c/p\u003e\n\u003cp\u003e详情请参考《Unicode 标准》第四章。\u003c/p\u003e\n\u003ch3 id=\"一般类别\"\u003e一般类别\u003c/h3\u003e\n\u003cp\u003e从形式上看，类别是不重叠的：每个 Unicode 字符正好属于一个类别，没有一个类别包含另一个类别。然而，由于某些类别组经常一起使用，pest 在下面暴露了类别的层次结构。例如，规则 \u003ccode\u003eCASED_LETTER\u003c/code\u003e 在技术上不是 Unicode 通用类别，而是匹配属于 UPPERCASE_LETTER  或LOWERCASE_LETTER 的字符，这些都是通用类别。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLETTER\u003c/li\u003e\n\u003cli\u003eCASED_LETTER\u003c/li\u003e\n\u003cli\u003eUPPERCASE_LETTER\u003c/li\u003e\n\u003cli\u003eLOWERCASE_LETTER\u003c/li\u003e\n\u003cli\u003eTITLECASE_LETTER\u003c/li\u003e\n\u003cli\u003eMODIFIER_LETTER\u003c/li\u003e\n\u003cli\u003eOTHER_LETTER\u003c/li\u003e\n\u003cli\u003eMARK\u003c/li\u003e\n\u003cli\u003eNONSPACING_MARK\u003c/li\u003e\n\u003cli\u003eSPACING_MARK\u003c/li\u003e\n\u003cli\u003eENCLOSING_MARK\u003c/li\u003e\n\u003cli\u003eNUMBER\u003c/li\u003e\n\u003cli\u003eDECIMAL_NUMBER\u003c/li\u003e\n\u003cli\u003eLETTER_NUMBER\u003c/li\u003e\n\u003cli\u003eOTHER_NUMBER\u003c/li\u003e\n\u003cli\u003ePUNCTUATION\u003c/li\u003e\n\u003cli\u003eCONNECTOR_PUNCTUATION\u003c/li\u003e\n\u003cli\u003eDASH_PUNCTUATION\u003c/li\u003e\n\u003cli\u003eOPEN_PUNCTUATION\u003c/li\u003e\n\u003cli\u003eCLOSE_PUNCTUATION\u003c/li\u003e\n\u003cli\u003eINITIAL_PUNCTUATION\u003c/li\u003e\n\u003cli\u003eFINAL_PUNCTUATION\u003c/li\u003e\n\u003cli\u003eOTHER_PUNCTUATION\u003c/li\u003e\n\u003cli\u003eSYMBOL\u003c/li\u003e\n\u003cli\u003eMATH_SYMBOL\u003c/li\u003e\n\u003cli\u003eCURRENCY_SYMBOL\u003c/li\u003e\n\u003cli\u003eMODIFIER_SYMBOL\u003c/li\u003e\n\u003cli\u003eOTHER_SYMBOL\u003c/li\u003e\n\u003cli\u003eSEPARATOR\u003c/li\u003e\n\u003cli\u003eSPACE_SEPARATOR\u003c/li\u003e\n\u003cli\u003eLINE_SEPARATOR\u003c/li\u003e\n\u003cli\u003ePARAGRAPH_SEPARATOR\u003c/li\u003e\n\u003cli\u003eOTHER\u003c/li\u003e\n\u003cli\u003eCONTROL\u003c/li\u003e\n\u003cli\u003eFORMAT\u003c/li\u003e\n\u003cli\u003eSURROGATE\u003c/li\u003e\n\u003cli\u003ePRIVATE_USE\u003c/li\u003e\n\u003cli\u003eUNASSIGNED\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"binary-properties\"\u003eBinary properties\u003c/h3\u003e\n\u003cp\u003e这些属性中有许多是用来定义 Unicode 文本算法的，如双向算法和文本分割算法。这类属性对于大多数解析器来说可能并不有用。\u003c/p\u003e\n\u003cp\u003e但是，XID_START 和 XID_CONTINUE 这两个属性特别值得注意，因为它们被定义为 \u0026ldquo;协助标识符的标准处理\u0026rdquo;，\u0026ldquo;如编程语言变量\u0026rdquo;。详见技术报告31。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eALPHABETIC\u003c/li\u003e\n\u003cli\u003eBIDI_CONTROL\u003c/li\u003e\n\u003cli\u003eCASE_IGNORABLE\u003c/li\u003e\n\u003cli\u003eCASED\u003c/li\u003e\n\u003cli\u003eCHANGES_WHEN_CASEFOLDED\u003c/li\u003e\n\u003cli\u003eCHANGES_WHEN_CASEMAPPED\u003c/li\u003e\n\u003cli\u003eCHANGES_WHEN_LOWERCASED\u003c/li\u003e\n\u003cli\u003eCHANGES_WHEN_TITLECASED\u003c/li\u003e\n\u003cli\u003eCHANGES_WHEN_UPPERCASED\u003c/li\u003e\n\u003cli\u003eDASH\u003c/li\u003e\n\u003cli\u003eDEFAULT_IGNORABLE_CODE_POINT\u003c/li\u003e\n\u003cli\u003eDEPRECATED\u003c/li\u003e\n\u003cli\u003eDIACRITIC\u003c/li\u003e\n\u003cli\u003eEXTENDER\u003c/li\u003e\n\u003cli\u003eGRAPHEME_BASE\u003c/li\u003e\n\u003cli\u003eGRAPHEME_EXTEND\u003c/li\u003e\n\u003cli\u003eGRAPHEME_LINK\u003c/li\u003e\n\u003cli\u003eHEX_DIGIT\u003c/li\u003e\n\u003cli\u003eHYPHEN\u003c/li\u003e\n\u003cli\u003eIDS_BINARY_OPERATOR\u003c/li\u003e\n\u003cli\u003eIDS_TRINARY_OPERATOR\u003c/li\u003e\n\u003cli\u003eID_CONTINUE\u003c/li\u003e\n\u003cli\u003eID_START\u003c/li\u003e\n\u003cli\u003eIDEOGRAPHIC\u003c/li\u003e\n\u003cli\u003eJOIN_CONTROL\u003c/li\u003e\n\u003cli\u003eLOGICAL_ORDER_EXCEPTION\u003c/li\u003e\n\u003cli\u003eLOWERCASE\u003c/li\u003e\n\u003cli\u003eMATH\u003c/li\u003e\n\u003cli\u003eNONCHARACTER_CODE_POINT\u003c/li\u003e\n\u003cli\u003eOTHER_ALPHABETIC\u003c/li\u003e\n\u003cli\u003eOTHER_DEFAULT_IGNORABLE_CODE_POINT\u003c/li\u003e\n\u003cli\u003eOTHER_GRAPHEME_EXTEND\u003c/li\u003e\n\u003cli\u003eOTHER_ID_CONTINUE\u003c/li\u003e\n\u003cli\u003eOTHER_ID_START\u003c/li\u003e\n\u003cli\u003eOTHER_LOWERCASE\u003c/li\u003e\n\u003cli\u003eOTHER_MATH\u003c/li\u003e\n\u003cli\u003eOTHER_UPPERCASE\u003c/li\u003e\n\u003cli\u003ePATTERN_SYNTAX\u003c/li\u003e\n\u003cli\u003ePATTERN_WHITE_SPACE\u003c/li\u003e\n\u003cli\u003ePREPENDED_CONCATENATION_MARK\u003c/li\u003e\n\u003cli\u003eQUOTATION_MARK\u003c/li\u003e\n\u003cli\u003eRADICAL\u003c/li\u003e\n\u003cli\u003eREGIONAL_INDICATOR\u003c/li\u003e\n\u003cli\u003eSENTENCE_TERMINAL\u003c/li\u003e\n\u003cli\u003eSOFT_DOTTED\u003c/li\u003e\n\u003cli\u003eTERMINAL_PUNCTUATION\u003c/li\u003e\n\u003cli\u003eUNIFIED_IDEOGRAPH\u003c/li\u003e\n\u003cli\u003eUPPERCASE\u003c/li\u003e\n\u003cli\u003eVARIATION_SELECTOR\u003c/li\u003e\n\u003cli\u003eWHITE_SPACE\u003c/li\u003e\n\u003cli\u003eXID_CONTINUE\u003c/li\u003e\n\u003cli\u003eXID_START\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"例子-json\"\u003e例子: JSON\u003c/h2\u003e\n\u003cp\u003eJSON 是一种流行的数据序列化格式，它源于 JavaScript 的语法。JSON 文档是树状的，并且可能是递归的\u0026ndash;对象和数组这两种数据类型可以包含其他值，包括其他对象和数组。\u003c/p\u003e\n\u003cp\u003e下面是一个 JSON 文档的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;nesting\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nt\"\u003e\u0026#34;inner object\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;an array\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1e-6\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;string with escaped double quotes\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\\\u0026#34;quick brown foxes\\\u0026#34;\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e让我们写一个程序，将 JSON 解析成一个 Rust 对象，也就是抽象语法树，然后将 AST 序列化回 JSON。\u003c/p\u003e\n\u003ch3 id=\"设置\"\u003e设置\u003c/h3\u003e\n\u003cp\u003e我们将从定义 Rust 中的 AST 开始。每个 JSON 数据类型都由一个枚举变体来表示。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"nc\"\u003eJSONValue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"na\"\u003e\u0026#39;a\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eVec\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"na\"\u003e\u0026#39;a\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eJSONValue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"na\"\u003e\u0026#39;a\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eVec\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eJSONValue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"na\"\u003e\u0026#39;a\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"na\"\u003e\u0026#39;a\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ef64\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eNull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e为了避免反序列化字符串时的复制，JSONValue 从原始未解析的 JSON 中借用字符串。为了使其工作，我们不能解释字符串转义序列：输入字符串 \u0026ldquo;\\n\u0026rdquo; 将由 JSONValue::String(\u0026quot;\\n\u0026rdquo;) 表示，这是一个有两个字符的 Rust 字符串，尽管它表示的是一个只有一个字符的 JSON 字符串。\u003c/p\u003e\n\u003cp\u003e让我们继续看序列化器。为了清晰起见，它使用分配的 Strings，而不是提供 std::fmt::Display 的实现，后者会更习惯。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003eserialize_jsonvalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e: \u003cspan class=\"kp\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nc\"\u003eJSONValue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e-\u0026gt; \u003cspan class=\"nb\"\u003eString\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eJSONValue\u003c/span\u003e::\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econtents\u003c/span\u003e: \u003cspan class=\"nb\"\u003eVec\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eo\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiter\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                     \u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\\\u0026#34;{}\\\u0026#34;:{}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eserialize_jsonvalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecollect\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{{}}}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econtents\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econtents\u003c/span\u003e: \u003cspan class=\"nb\"\u003eVec\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiter\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eserialize_jsonvalue\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003ecollect\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;[{}]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econtents\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\\\u0026#34;{}\\\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eNull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;null\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，在对象和数组的情况下，函数会递归地调用自己。这种模式出现在整个解析器中。AST创建函数在解析结果中递归迭代，而语法的规则也包括了自己。\u003c/p\u003e\n\u003ch3 id=\"grammar-的编写\"\u003egrammar 的编写\u003c/h3\u003e\n\u003cp\u003e让我们从 whitespace 开始。JSON 空格可以出现在任何地方，除了字符串内部（必须单独解析）和数字中的数字之间（不允许）。这使得它很适合 pest 的隐式空白。在 \u003ccode\u003esrc/json.pest\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWHITESPACE = _{ \u0026quot; \u0026quot; | \u0026quot;\\t\u0026quot; | \u0026quot;\\r\u0026quot; | \u0026quot;\\n\u0026quot; }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eJSON 规范包括解析 JSON 字符串的图。我们可以直接从该页面写出语法。让我们把 object 写成一个用逗号分隔的对的序列。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eobject = {\n    \u0026quot;{\u0026quot; ~ \u0026quot;}\u0026quot; |\n    \u0026quot;{\u0026quot; ~ pair ~ (\u0026quot;,\u0026quot; ~ pair)* ~ \u0026quot;}\u0026quot;\n}\npair = { string ~ \u0026quot;:\u0026quot; ~ value }\n\narray = {\n    \u0026quot;[\u0026quot; ~ \u0026quot;]\u0026quot; |\n    \u0026quot;[\u0026quot; ~ value ~ (\u0026quot;,\u0026quot; ~ value)* ~ \u0026quot;]\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e对象和数组规则展示了如何用分隔符解析一个潜在的空列表。有两种情况：一种是空列表，另一种是至少有一个元素的列表。这是必要的，因为数组中的逗号，如 \u003ccode\u003e[0，1，]\u003c/code\u003e，在 JSON 中是非法的。\u003c/p\u003e\n\u003cp\u003e现在我们可以写 value，它代表任何单一的数据类型。我们将模仿我们的 AST，将 boolean 和 null 写成单独的规则。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evalue = _{ object | array | string | number | boolean | null }\n\nboolean = { \u0026quot;true\u0026quot; | \u0026quot;false\u0026quot; }\n\nnull = { \u0026quot;null\u0026quot; }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e让我们把字符串的逻辑分成三个部分。\u003ccode\u003echar\u003c/code\u003e 是一个匹配字符串中任何逻辑字符的规则，包括任何反斜杠转义序列。\u003ccode\u003einner\u003c/code\u003e 代表字符串的内容，不包括周围的双引号。\u003ccode\u003estring\u003c/code\u003e 匹配字符串的内部内容，包括周围的双引号。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003echar\u003c/code\u003e 规则使用成语 \u003ccode\u003e!(...) ~ ANY\u003c/code\u003e，它匹配除了括号中给出的字符之外的任何字符。在这种情况下，除了双引号 \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e 和反斜杠 \u003ccode\u003e\\\u003c/code\u003e 之外，任何字符在字符串内部都是合法的，这需要单独的解析逻辑。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estring = ${ \u0026quot;\\\u0026quot;\u0026quot; ~ inner ~ \u0026quot;\\\u0026quot;\u0026quot; }\ninner = @{ char* }\nchar = {\n    !(\u0026quot;\\\u0026quot;\u0026quot; | \u0026quot;\\\\\u0026quot;) ~ ANY\n    | \u0026quot;\\\\\u0026quot; ~ (\u0026quot;\\\u0026quot;\u0026quot; | \u0026quot;\\\\\u0026quot; | \u0026quot;/\u0026quot; | \u0026quot;b\u0026quot; | \u0026quot;f\u0026quot; | \u0026quot;n\u0026quot; | \u0026quot;r\u0026quot; | \u0026quot;t\u0026quot;)\n    | \u0026quot;\\\\\u0026quot; ~ (\u0026quot;u\u0026quot; ~ ASCII_HEX_DIGIT{4})\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e因为 \u003ccode\u003estring\u003c/code\u003e 被标记为复原子，所以 \u003ccode\u003estring\u003c/code\u003e token 对也会包含一个 \u003ccode\u003einner\u003c/code\u003e 对。因为 \u003ccode\u003einner\u003c/code\u003e 被标记为原子，所以在 \u003ccode\u003einner\u003c/code\u003e 中不会出现 \u003ccode\u003echar\u003c/code\u003e 对。由于这些规则是原子性的，所以在不同的标记之间不允许有空格。\u003c/p\u003e\n\u003cp\u003e数字有四个逻辑部分：一个可选的符号、一个整数部分、一个可选的分数部分和一个可选的指数。我们将把数字标记为原子，这样它的部分之间就不能出现空白。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enumber = @{\n    \u0026quot;-\u0026quot;?\n    ~ (\u0026quot;0\u0026quot; | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)\n    ~ (\u0026quot;.\u0026quot; ~ ASCII_DIGIT*)?\n    ~ (^\u0026quot;e\u0026quot; ~ (\u0026quot;+\u0026quot; | \u0026quot;-\u0026quot;)? ~ ASCII_DIGIT+)?\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们需要一个最终规则来表示整个 JSON 文件。JSON 文件的唯一合法内容是一个对象或数组。我们将把这个规则标记为沉默，这样一个解析后的 JSON 文件只包含两个标记对：解析后的值本身，以及 EOI 规则。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejson = _{ SOI ~ (object | array) ~ EOI }\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"ast-生成\"\u003eAST 生成\u003c/h3\u003e\n\u003cp\u003e让我们把 grammar 编译成 Rust。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003eextern\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ecrate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#[macro_use]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eextern\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ecrate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epest_derive\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epest\u003c/span\u003e::\u003cspan class=\"n\"\u003eParser\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#[derive(Parser)]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#[grammar = \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;json.pest\u0026#34;\u003c/span\u003e\u003cspan class=\"cp\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eJSONParser\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们将写一个同时处理解析和 AST 生成的函数。该函数的用户可以在输入字符串上调用它，然后将返回的结果作为 JSONValue 或解析错误。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epest\u003c/span\u003e::\u003cspan class=\"n\"\u003eerror\u003c/span\u003e::\u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003eparse_json_file\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e: \u003cspan class=\"kp\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e-\u0026gt; \u003cspan class=\"nb\"\u003eResult\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eJSONValue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eJSONParser\u003c/span\u003e::\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在我们需要根据规则，递归处理 \u003ccode\u003ePair\u003c/code\u003e。我们知道 json 是一个对象或者数组，但是这些值本身可能包含一个对象或者数组！这时，我们就需要写一个辅助递归函数，直接将 \u003ccode\u003ePair\u003c/code\u003e 解析成 \u003ccode\u003eJSONValue\u003c/code\u003e。最合理的处理方式是写一个辅助递归函数，直接将 \u003ccode\u003ePair\u003c/code\u003e 解析成 JSONValue。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003eparse_json_file\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e: \u003cspan class=\"kp\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e-\u0026gt; \u003cspan class=\"nb\"\u003eResult\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eJSONValue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epest\u003c/span\u003e::\u003cspan class=\"n\"\u003eiterators\u003c/span\u003e::\u003cspan class=\"n\"\u003ePair\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003eparse_value\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e: \u003cspan class=\"nc\"\u003ePair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e-\u0026gt; \u003cspan class=\"nc\"\u003eJSONValue\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_rule\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eJSONValue\u003c/span\u003e::\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einto_inner\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einner_rules\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einto_inner\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einner_rules\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einto_inner\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparse_value\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einner_rules\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecollect\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eJSONValue\u003c/span\u003e::\u003cspan class=\"n\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einto_inner\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparse_value\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003ecollect\u003c/span\u003e\u003cspan class=\"p\"\u003e()),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eJSONValue\u003c/span\u003e::\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einto_inner\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e()),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003enumber\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eJSONValue\u003c/span\u003e::\u003cspan class=\"n\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e()),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eJSONValue\u003c/span\u003e::\u003cspan class=\"n\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e()),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eJSONValue\u003c/span\u003e::\u003cspan class=\"n\"\u003eNull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003eEOI\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003einner\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003echar\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003eWHITESPACE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eunreachable\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对象和数组的情况值得特别注意。数组令牌对的内容只是一个值的序列。由于我们使用的是 Rust 迭代器，我们可以简单地将每个值递归地映射到它的解析 AST 节点，然后将它们收集到一个 Vec 中。对于对象，过程是类似的，除了迭代器是在对上，我们需要分别从对上提取名称和值。\u003c/p\u003e\n\u003cp\u003e数字和布尔的情况下，使用 Rust 的 str::parse 方法将解析后的字符串转换为相应的 Rust 类型。每一个合法的 JSON 数字都可以直接解析成一个 Rust 浮点数！我们在 Rust 的 str::parse 方法上运行 parse_value。\u003c/p\u003e\n\u003cp\u003e我们对解析结果运行 parse_value 来完成转换。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003eparse_json_file\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e: \u003cspan class=\"kp\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e-\u0026gt; \u003cspan class=\"nb\"\u003eResult\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eJSONValue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nb\"\u003eOk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparse_value\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"精加工\"\u003e精加工\u003c/h3\u003e\n\u003cp\u003e我们的主要功能现在非常简单。首先，我们从一个名为 data.json 的文件中读取 JSON 数据。接下来，我们将文件内容解析成一个 JSON AST。最后，我们将 AST 序列化回一个字符串并打印出来。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e::\u003cspan class=\"n\"\u003efs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eunparsed_file\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efs\u003c/span\u003e::\u003cspan class=\"n\"\u003eread_to_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;data.json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;cannot read file\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e: \u003cspan class=\"nc\"\u003eJSONValue\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparse_json_file\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eunparsed_file\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;unsuccessful parse\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eserialize_jsonvalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e试试吧! 将本章顶部的示例文档复制到 data.json 中，然后运行程序! 你应该看到这样的东西。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ cargo run\n  [ ... ]\n{\u0026quot;nesting\u0026quot;:{\u0026quot;inner object\u0026quot;:{}},\u0026quot;an array\u0026quot;:[1.5,true,null,0.000001],\u0026quot;string with escaped double quotes\u0026quot;:\u0026quot;\\\u0026quot;quick brown foxes\\\u0026quot;\u0026quot;}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"例子-j-语言\"\u003e例子: J 语言\u003c/h2\u003e\n\u003cp\u003eJ 语言是一种受 APL 影响的数组编程语言。在 J 语言中，对单个数字(\u003ccode\u003e2*3\u003c/code\u003e)的操作可以很容易地应用于整个数字列表(\u003ccode\u003e2*3 4 5\u003c/code\u003e，返回 \u003ccode\u003e6 8 10\u003c/code\u003e)。\u003c/p\u003e\n\u003cp\u003eJ 中的操作符被称为动词。动词要么是一元的（取一个参数，如 \u003ccode\u003e*: 3\u003c/code\u003e，\u0026ldquo;3 的平方\u0026rdquo;），要么是二元的（取两个参数，两边各一个，如 \u003ccode\u003e5 - 4\u003c/code\u003e，\u0026ldquo;5减4\u0026rdquo;）。\u003c/p\u003e\n\u003cp\u003e下面是一个 J 程序的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-J\" data-lang=\"J\"\u003e\u003cspan class=\"s\"\u003e\u0026#39;A string\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e*:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003ematrix\u003c/span\u003e \u003cspan class=\"o\"\u003e=:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nv\"\u003ematrix\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003eresidues\u003c/span\u003e \u003cspan class=\"o\"\u003e=:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\n\u003cspan class=\"nv\"\u003eresidues\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用 J 的\u003ca href=\"https://jsoftware.com/\"\u003e解释器\u003c/a\u003e运行上述程序，在标准输出上得到如下结果。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eA string\n\n1 4 9 16\n\n 70  80  90\n100 110 120\n\n11 21 31\n11 12 13\n\n0 1 0 1 0 1 0 1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在这一节中，我们将为 J 的一个子集写一个 grammar，然后我们将通过一个解析器，通过迭代 \u003ccode\u003epest\u003c/code\u003e 给我们的规则来建立一个 AST。你可以在\u003ca href=\"https://github.com/pest-parser/book/tree/master/examples/jlang-parser\"\u003e本书的资源库\u003c/a\u003e中找到完整的源代码。\u003c/p\u003e\n\u003ch3 id=\"grammar-1\"\u003eGrammar\u003c/h3\u003e\n\u003cp\u003e我们将从程序规则开始，逐节建立 grammar。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprogram = _{ SOI ~ \u0026quot;\\n\u0026quot;* ~ (stmt ~ \u0026quot;\\n\u0026quot;+) * ~ stmt? ~ EOI }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e每个 J 程序都包含由一个或多个换行符分隔的语句。请注意前面的下划线，它告诉 \u003ccode\u003epest\u003c/code\u003e \u003ca href=\"https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules\"\u003e屏蔽\u003c/a\u003e \u003ccode\u003eprogram\u003c/code\u003e 规则 - 我们不想让 \u003ccode\u003eprogram\u003c/code\u003e 作为一个 token 出现在解析流中，我们想要的是底层语句。\u003c/p\u003e\n\u003cp\u003e语句就是一个简单的表达式，由于只有一种这样的可能性，所以我们也将这个 \u003ccode\u003estmt\u003c/code\u003e 规则\u003ca href=\"https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules\"\u003e屏蔽\u003c/a\u003e，这样我们的解析器就会收到一个底层 \u003ccode\u003eexpr\u003c/code\u003e 的迭代器。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estmt = _{ expr }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e表达式可以是对变量标识符的赋值，也可以是单项表达式、对偶表达式、单个字符串或术语数组。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpr = {\n      assgmtExpr\n    | monadicExpr\n    | dyadicExpr\n    | string\n    | terms\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e一元表达式由一个动词组成，其唯一的操作数在右边；三元表达式的操作数在动词的两边。赋值表达式将标识符与表达式相关联。\u003c/p\u003e\n\u003cp\u003e在 J 中，没有操作符的优先性 - 求值是右联的（从右到左），括号内的表达式先被求值。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emonadicExpr = { verb ~ expr }\n\ndyadicExpr = { (monadicExpr | terms) ~ verb ~ expr }\n\nassgmtExpr = { ident ~ \u0026quot;=:\u0026quot; ~ expr }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e项的列表应该至少包含一个十进制、整数、标识符或小括号表达式；我们只关心这些基础值，所以我们用前导下划线\u003ca href=\"https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules\"\u003e屏蔽\u003c/a\u003e \u003ccode\u003eterm\u003c/code\u003e 规则。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eterms = { term+ }\n\nterm = _{ decimal | integer | ident | \u0026quot;(\u0026quot; ~ expr ~ \u0026quot;)\u0026quot; }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eJ 的几个动词在这个 grammar 中是有定义的，J 的\u003ca href=\"https://code.jsoftware.com/wiki/NuVoc\"\u003e全部词汇\u003c/a\u003e要广泛得多。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003everb = {\n    \u0026quot;\u0026gt;:\u0026quot; | \u0026quot;*:\u0026quot; | \u0026quot;-\u0026quot;  | \u0026quot;%\u0026quot; | \u0026quot;#\u0026quot; | \u0026quot;\u0026gt;.\u0026quot;\n  | \u0026quot;+\u0026quot;  | \u0026quot;*\u0026quot;  | \u0026quot;\u0026lt;\u0026quot;  | \u0026quot;=\u0026quot; | \u0026quot;^\u0026quot; | \u0026quot;|\u0026quot;\n  | \u0026quot;\u0026gt;\u0026quot;  | \u0026quot;$\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e现在我们可以进入词法规则了。J 中的数字和平常一样，除了负数用前导的 \u003ccode\u003e_\u003c/code\u003e 下划线表示外（因为 \u003ccode\u003e-\u003c/code\u003e 是一个动词，它作为单项式执行否定，作为对偶式执行减法）。J 中的标识符必须以字母开头，但之后可以包含数字。字符串由单引号包围；引号本身可以通过用附加引号转义来嵌入。\u003c/p\u003e\n\u003cp\u003e请注意我们如何使用 \u003ccode\u003epest\u003c/code\u003e 的 \u003ccode\u003e@\u003c/code\u003e 修饰符使这些规则中的每一条都是\u003ca href=\"https://pest.rs/book/grammars/syntax.html#atomic\"\u003e原子的\u003c/a\u003e，这意味着\u003ca href=\"https://pest.rs/book/grammars/syntax.html#implicit-whitespace\"\u003e隐式空白\u003c/a\u003e是被禁止的，而且内部规则（即 \u003ccode\u003eident\u003c/code\u003e 中的 \u003ccode\u003eASCII_ALPHA\u003c/code\u003e）变为 \u003ca href=\"https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules\"\u003esilent\u003c/a\u003e - 当我们的解析器接收到这些 token 时，它们将是终端的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einteger = @{ \u0026quot;_\u0026quot;? ~ ASCII_DIGIT+ }\n\ndecimal = @{ \u0026quot;_\u0026quot;? ~ ASCII_DIGIT+ ~ \u0026quot;.\u0026quot; ~ ASCII_DIGIT* }\n\nident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | \u0026quot;_\u0026quot;)* }\n\nstring = @{ \u0026quot;'\u0026quot; ~ ( \u0026quot;''\u0026quot; | (!\u0026quot;'\u0026quot; ~ ANY) )* ~ \u0026quot;'\u0026quot; }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eJ 中的空白只由空格和制表符组成。换行的意义在于它们是对语句的定界，因此它们不在本规则之内。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWHITESPACE = _{ \u0026quot; \u0026quot; | \u0026quot;\\t\u0026quot; }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最后，我们必须处理注释。J 中的注释以 \u003ccode\u003eNB.\u003c/code\u003e 开始，一直到它们所在行的末尾。关键的是，我们决不能消耗注释行末的换行；这是为了将注释之前的任何语句与后续行的语句分开。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCOMMENT = _{ \u0026quot;NB.\u0026quot; ~ (!\u0026quot;\\n\u0026quot; ~ ANY)* }\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"解析和-ast-生成\"\u003e解析和 AST 生成\u003c/h3\u003e\n\u003cp\u003e本节将介绍一个使用上述 grammar 的解析器。这里省略了库中的内容和自明的代码，你可以在\u003ca href=\"https://github.com/pest-parser/book/tree/master/examples/jlang-parser\"\u003e本书的资源库\u003c/a\u003e中找到解析器的全部内容。\u003c/p\u003e\n\u003cp\u003e首先我们将枚举我们 grammar 中定义的动词，区分一元动词和二元动词。这些枚举将在我们的 AST 中作为标签使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003epub\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"nc\"\u003eMonadicVerb\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eIncrement\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSquare\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eNegate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eReciprocal\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eTally\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eCeiling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eShapeOf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003epub\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"nc\"\u003eDyadicVerb\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003ePlus\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eTimes\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eLessThan\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eLargerThan\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eMinus\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eDivide\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003ePower\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eResidue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nb\"\u003eCopy\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eLargerOf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eLargerOrEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eShape\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e那么我们就来列举一下 AST 的各类节点。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003epub\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"nc\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eBox\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ei32\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eDoublePrecisionFloat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ef64\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eMonadicOp\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003everb\u003c/span\u003e: \u003cspan class=\"nc\"\u003eMonadicVerb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e: \u003cspan class=\"nb\"\u003eBox\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicOp\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003everb\u003c/span\u003e: \u003cspan class=\"nc\"\u003eDyadicVerb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003elhs\u003c/span\u003e: \u003cspan class=\"nb\"\u003eBox\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003erhs\u003c/span\u003e: \u003cspan class=\"nb\"\u003eBox\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eTerms\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eVec\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eIsGlobal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eident\u003c/span\u003e: \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e: \u003cspan class=\"nb\"\u003eBox\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eIdent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eStr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCString\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e为了解析 J 程序中的顶层语句，我们有下面的 \u003ccode\u003eparse\u003c/code\u003e 函数，它接受一个字符串形式的 J 程序，并将其传递给 \u003ccode\u003epest\u003c/code\u003e 进行解析。我们得到一个 \u003ccode\u003ePair\u003c/code\u003e 的序列。正如 grammar 中所规定的那样，一个语句只能由一个表达式组成，所以下面的匹配会解析这些顶层表达式中的每一个，并将它们包装在一个 \u003ccode\u003ePrint\u003c/code\u003e AST 节点中，以符合 J 解释器的 REPL 行为。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003epub\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esource\u003c/span\u003e: \u003cspan class=\"kp\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e-\u0026gt; \u003cspan class=\"nb\"\u003eResult\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eVec\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003east\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evec\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e[];\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epairs\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eJParser\u003c/span\u003e::\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003eprogram\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ein\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epairs\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_rule\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003east\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eBox\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuild_ast_from_expr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e))));\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nb\"\u003eOk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003east\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAST 节点是通过遍历 \u003ccode\u003ePair\u003c/code\u003e 迭代器，按照我们 grammar 文件中设定的期望值，从表达式中构建出来的。常见的行为被抽象出单独的函数，如 \u003ccode\u003eparse_monadic_verb\u003c/code\u003e 和 \u003ccode\u003eparse_dyadic_verb\u003c/code\u003e，代表表达式本身的 \u003ccode\u003ePair\u003c/code\u003e 则在递归调用 \u003ccode\u003ebuild_ast_from_expr\u003c/code\u003e 中传递。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003ebuild_ast_from_expr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e: \u003cspan class=\"nc\"\u003epest\u003c/span\u003e::\u003cspan class=\"n\"\u003eiterators\u003c/span\u003e::\u003cspan class=\"n\"\u003ePair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e-\u0026gt; \u003cspan class=\"nc\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_rule\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ebuild_ast_from_expr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einto_inner\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e()),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003emonadicExpr\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einto_inner\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003everb\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ebuild_ast_from_expr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eparse_monadic_verb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003everb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// ... other cases elided here ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e二元动词从它们的字符串表示方式直接映射到 AST 节点。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003eparse_dyadic_verb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e: \u003cspan class=\"nc\"\u003epest\u003c/span\u003e::\u003cspan class=\"n\"\u003eiterators\u003c/span\u003e::\u003cspan class=\"n\"\u003ePair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elhs\u003c/span\u003e: \u003cspan class=\"nc\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003erhs\u003c/span\u003e: \u003cspan class=\"nc\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e-\u0026gt; \u003cspan class=\"nc\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eAstNode\u003c/span\u003e::\u003cspan class=\"n\"\u003eDyadicOp\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003elhs\u003c/span\u003e: \u003cspan class=\"nb\"\u003eBox\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elhs\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003erhs\u003c/span\u003e: \u003cspan class=\"nb\"\u003eBox\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erhs\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003everb\u003c/span\u003e: \u003cspan class=\"nc\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;+\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003ePlus\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eTimes\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eMinus\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026lt;\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eLessThan\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;=\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eLargerThan\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eDivide\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;^\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003ePower\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;|\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eResidue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;#\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"nb\"\u003eCopy\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026gt;.\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eLargerOf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026gt;:\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eLargerOrEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;$\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDyadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eShape\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epanic\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Unexpected dyadic verb: {}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e()),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如同一元动词一样。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003eparse_monadic_verb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e: \u003cspan class=\"nc\"\u003epest\u003c/span\u003e::\u003cspan class=\"n\"\u003eiterators\u003c/span\u003e::\u003cspan class=\"n\"\u003ePair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e: \u003cspan class=\"nc\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e-\u0026gt; \u003cspan class=\"nc\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eAstNode\u003c/span\u003e::\u003cspan class=\"n\"\u003eMonadicOp\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003everb\u003c/span\u003e: \u003cspan class=\"nc\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026gt;:\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMonadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eIncrement\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;*:\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMonadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eSquare\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMonadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eNegate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMonadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eReciprocal\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;#\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMonadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eTally\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026gt;.\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMonadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eCeiling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;$\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMonadicVerb\u003c/span\u003e::\u003cspan class=\"n\"\u003eShapeOf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epanic\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Unsupported monadic verb: {}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e()),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e: \u003cspan class=\"nb\"\u003eBox\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后，我们定义了一个函数来处理数字和字符串等项。数字需要一些操作来处理 J 的前导下划线，表示否定，但除此之外，处理过程是典型的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003ebuild_ast_from_term\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e: \u003cspan class=\"nc\"\u003epest\u003c/span\u003e::\u003cspan class=\"n\"\u003eiterators\u003c/span\u003e::\u003cspan class=\"n\"\u003ePair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e-\u0026gt; \u003cspan class=\"nc\"\u003eAstNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_rule\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003einteger\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eistr\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esign\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eistr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eistr\u003c/span\u003e\u003cspan class=\"p\"\u003e[..\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;_\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eistr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e..]),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eistr\u003c/span\u003e\u003cspan class=\"p\"\u003e[..]),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einteger\u003c/span\u003e: \u003cspan class=\"kt\"\u003ei32\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eistr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eAstNode\u003c/span\u003e::\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esign\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einteger\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003edecimal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edstr\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esign\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edstr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edstr\u003c/span\u003e\u003cspan class=\"p\"\u003e[..\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;_\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edstr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e..]),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edstr\u003c/span\u003e\u003cspan class=\"p\"\u003e[..]),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eflt\u003c/span\u003e: \u003cspan class=\"kt\"\u003ef64\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edstr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eflt\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mf\"\u003e0.0\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"c1\"\u003e// Avoid negative zeroes; only multiply sign by nonzeroes.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003eflt\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esign\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eAstNode\u003c/span\u003e::\u003cspan class=\"n\"\u003eDoublePrecisionFloat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eflt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ebuild_ast_from_expr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003eident\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eAstNode\u003c/span\u003e::\u003cspan class=\"n\"\u003eIdent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e::\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e())),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eunknown_term\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epanic\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Unexpected term: {:?}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eunknown_term\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"运行解析器\"\u003e运行解析器\u003c/h3\u003e\n\u003cp\u003e现在我们可以定义一个 \u003ccode\u003emain\u003c/code\u003e 函数，将 J 程序传递给我们的 \u003ccode\u003epest\u003c/code\u003e-enabled 解析器。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eunparsed_file\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e::\u003cspan class=\"n\"\u003efs\u003c/span\u003e::\u003cspan class=\"n\"\u003eread_to_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;example.ijs\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;cannot read ijs file\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eastnode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eunparsed_file\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;unsuccessful parse\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{:?}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eastnode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 example.ijs 中使用这段代码。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e_2.5 ^ 3\n*: 4.8\ntitle =: 'Spinning at the Boundary'\n*: _1 2 _3 4\n1 2 3 + 10 20 30\n1 + 10 20 30\n1 2 3 + 10\n2 | 0 1 2 3 4 5 6 7\nanother =: 'It''s Escaped'\n3 | 0 1 2 3 4 5 6 7\n(2+1)*(2+2)\n3 * 2 + 1\n1 + 3 % 4\nx =: 100\nx - 1\ny =: x - 1\ny\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当我们运行解析器时，我们会在标准输出上得到以下抽象语法树。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ cargo run\n  [ ... ]\n[Print(DyadicOp { verb: Power, lhs: DoublePrecisionFloat(-2.5),\n    rhs: Integer(3) }),\nPrint(MonadicOp { verb: Square, expr: DoublePrecisionFloat(4.8) }),\nPrint(IsGlobal { ident: \u0026quot;title\u0026quot;, expr: Str(\u0026quot;Spinning at the Boundary\u0026quot;) }),\nPrint(MonadicOp { verb: Square, expr: Terms([Integer(-1), Integer(2),\n    Integer(-3), Integer(4)]) }),\nPrint(DyadicOp { verb: Plus, lhs: Terms([Integer(1), Integer(2), Integer(3)]),\n    rhs: Terms([Integer(10), Integer(20), Integer(30)]) }),\nPrint(DyadicOp { verb: Plus, lhs: Integer(1), rhs: Terms([Integer(10),\n    Integer(20), Integer(30)]) }),\nPrint(DyadicOp { verb: Plus, lhs: Terms([Integer(1), Integer(2), Integer(3)]),\n    rhs: Integer(10) }),\nPrint(DyadicOp { verb: Residue, lhs: Integer(2),\n    rhs: Terms([Integer(0), Integer(1), Integer(2), Integer(3), Integer(4),\n    Integer(5), Integer(6), Integer(7)]) }),\nPrint(IsGlobal { ident: \u0026quot;another\u0026quot;, expr: Str(\u0026quot;It\\'s Escaped\u0026quot;) }),\nPrint(DyadicOp { verb: Residue, lhs: Integer(3), rhs: Terms([Integer(0),\n    Integer(1), Integer(2), Integer(3), Integer(4), Integer(5),\n    Integer(6), Integer(7)]) }),\nPrint(DyadicOp { verb: Times, lhs: DyadicOp { verb: Plus, lhs: Integer(2),\n    rhs: Integer(1) }, rhs: DyadicOp { verb: Plus, lhs: Integer(2),\n        rhs: Integer(2) } }),\nPrint(DyadicOp { verb: Times, lhs: Integer(3), rhs: DyadicOp { verb: Plus,\n    lhs: Integer(2), rhs: Integer(1) } }),\nPrint(DyadicOp { verb: Plus, lhs: Integer(1), rhs: DyadicOp { verb: Divide,\n    lhs: Integer(3), rhs: Integer(4) } }),\nPrint(IsGlobal { ident: \u0026quot;x\u0026quot;, expr: Integer(100) }),\nPrint(DyadicOp { verb: Minus, lhs: Ident(\u0026quot;x\u0026quot;), rhs: Integer(1) }),\nPrint(IsGlobal { ident: \u0026quot;y\u0026quot;, expr: DyadicOp { verb: Minus, lhs: Ident(\u0026quot;x\u0026quot;),\n    rhs: Integer(1) } }),\nPrint(Ident(\u0026quot;y\u0026quot;))]\n\u003c/code\u003e\u003c/pre\u003e","text":"Grammar 与许多解析工具一样，pest 使用与 Rust 代码不同的正式 grammar 进行操作。pest 使用的格式称为解析表达式 grammar，或 PEG。当构建一个项目时，pest 会自动将位于单独文件中的 PEG 编译成您可以调用的普通 Rust 函数。\n如何激活 pest 大多数项目至少会有两个使用 pest 的文件：解析器 (比如 src/parser/mod.rs) 和 grammar (src/parser/grammar.pest)。假设它们在同一个目录下。\nusepest::Parser;#[derive(Parser)]#[grammar = \u0026#34;parser/grammar.pest\u0026#34;]// relative to project `src` struct MyParser;每当你编译这个文件时，pest 会自动使用 grammar 文件生成这样的项。\npubenum Rules{/* ... */}implParserforMyParser{pubfn parse(Rules,\u0026amp;str)-\u0026gt; pest::Pairs{/* ... */}}你永远不会看到 enum Rules 或 impl Parser 的纯文本。这些代码只存在于编译过程中。然而，您可以像使用其他枚举一样使用 Rules，并且您可以通过 Parser API 章节中描述的 Pairs 接口使用 parse(...)。\n关于 PEGs 的警告! 解析表达式 grammar 看起来和你可能习惯的其他解析工具很相似，比如正则表达式、BNF grammar 和其他工具（Yacc/Bison、LALR、CFG）。然而，PEGs 的行为却有微妙的不同。PEGs 是急切的、非回溯的、有序的、不含糊的。\n如果你不认识以上任何一个名字，不要害怕! 你已经比认识的人快了一步 - 当你使用 pest 的 PEGs 时，你不会被与其他工具的比较所绊倒。\n如果你之前使用过其他解析工具，一定要仔细阅读下一节。我们会提到一些关于 PEGs 的常见错误。\n解析表达式语法 解析表达式语法(PEG)只是严格地表示了如果你用手写一个解析器会写的简单的命令式代码。\nnumber = { // To recognize a number... ASCII_DIGIT+ // take as many ASCII digits as possible (at least one). } expression = { // To recognize an expression... number // first try to take a number... | \u0026quot;true\u0026quot; // or, if that fails, the string \u0026quot;true\u0026quot;. } 事实上，pest 产生的代码与上面注释中的伪代码十分相似。\nEagerness 当在输入字符串上运行重复的 PEG 表达式时。\nASCII_DIGIT+ // one or more characters from '0' to '9' 它尽可能多地运行该表达式（\u0026ldquo;急切地\u0026quot;或 \u0026ldquo;贪婪地\u0026quot;匹配）。它要么成功，消耗它所匹配的任何内容，并将剩余的输入传递到解析器的下一步。\n\u0026quot;42 boxes\u0026quot; ^ Running ASCII_DIGIT+ \u0026quot;42 boxes\u0026quot; ^ Successfully took one or more digits! \u0026quot; boxes\u0026quot; ^ Remaining unparsed input. 或失败，什么也不消耗。\n\u0026quot;galumphing\u0026quot; ^ Running ASCII_DIGIT+ Failed to take one or more digits! \u0026quot;galumphing\u0026quot; ^ Remaining unparsed input (everything). 如果一个表达式未能匹配，那么这个失败就会向上传播，最终导致解析失败，除非这个失败在 grammar 中的某个地方被\u0026quot;抓住\u0026rdquo;。选择操作符是\u0026quot;捕获\u0026quot;这种失败的一种方法。\n有序选择 选择操作符，写成一条竖线 |，是有序的。PEG 表达式 first | second 的意思是 \u0026ldquo;先试 first，但如果失败了，再试 second\u0026quot;。\n在许多情况下，顺序并不重要。例如，\u0026quot;true\u0026quot; | \u0026quot;false\u0026quot; 将匹配字符串 \u0026quot;true\u0026quot; 或字符串 \u0026quot;false\u0026quot;（如果两者都不出现，则失败）。\n然而，有时顺序确实很重要。考虑一下 PEG 表达式 \u0026quot;a\u0026quot; | \u0026quot;ab\u0026quot;。你可能期望它能匹配字符串 \u0026quot;a\u0026quot; 或字符串 \u0026quot;ab\u0026quot;。但事实并非如此 - 该表达式的意思是 \u0026ldquo;尝试 \u0026quot;a\u0026quot;；但如果失败，则尝试 \u0026quot;ab\u0026quot;。如果你正在匹配字符串 \u0026ldquo;abc\u0026rdquo;，尝试 \u0026quot;a\u0026quot; 不会失败；相反，它将成功匹配 \u0026quot;a\u0026quot;，留下 \u0026quot;bc\u0026quot; 未被解析。\n一般来说，当编写一个有选择的解析器时，把最长或最具体的选择放在前面，而把最短或最一般的选择放在最后。\n非回溯 在解析过程中，一个 PEG 表达式要么成功，要么失败。如果成功了，下一步就照常进行。但如果它失败了，整个表达式就会失败。引擎不会后退再试。\n请看下面这个 grammar，在字符串 \u0026quot;frumious\u0026quot; 上进行匹配。\nword = { // to recognize a word... ANY* // take any character, zero or more times... ~ ANY // followed by any character } 你可能期望这条规则能够解析任何至少包含一个字符（相当于 ANY+）的输入字符串。但它不会。相反，第一个 ANY* 会急切地吃掉整个字符串 - 它会得偿所愿的。然后，下一个 ANY 将一无所有，所以它会失败。\n\u0026quot;frumious\u0026quot; ^ (word) \u0026quot;frumious\u0026quot; ^ (ANY*) Success! Continue to `ANY` with remaining input \u0026quot;\u0026quot;. \u0026quot;\u0026quot; ^ (ANY) Failure! Expected one character, but found end of string. 在有回溯功能的系统中（比如正则表达式），你会往后退一步，\u0026ldquo;吐出\u0026quot;一个字符，然后再试。但 PEG 不会这样做。在规则 first~second 中，一旦 first 解析成功，就已经消耗了一些字符，永远不会再回来，second 只能在 first 没有消耗的输入上运行。\n毫不含糊 这些规则构成了一个优雅而简单的系统。每个 PEG 规则都会在输入字符串的剩余部分上运行，消耗尽可能多的输入。一旦一个规则完成，剩下的输入就会被传递给解析器的其他部分。\n例如，表达式 ASCII_DIGIT+，\u0026ldquo;一个或多个数字\u0026rdquo;，将始终匹配可能的最大的连续数字序列。不存在意外地让后面的规则回溯并以一种不直观和非局部的方式窃取一些数字的危险。\n这与其他解析工具形成了鲜明的对比，比如正则表达式和 CFG，在这些工具中，规则的结果往往取决于一些距离的代码。事实上，LR解析器中著名的\u0026quot;移位/还原冲突\u0026quot;在 PEG 中并不存在问题。\n不要惊慌 这一切在一开始可能有点反常。但正如你所看到的，基本的逻辑是非常简单和直接的。你可以琐碎地逐步完成任何 PEG 表达式的执行。\n 试试这个。 如果它成功了，就尝试下一件事。 否则，尝试另一件事。  (this ~ next_thing) | (other_thing) 这些规则结合在一起，使得 PEG 成为编写解析器的非常愉快的工具。\npet 解析器的语法 pet grammar 是规则的列表。规则是这样定义的。\nmy_rule = { ... } another_rule = { // comments are preceded by two slashes ... // whitespace goes anywhere } 由于规则名被翻译成 Rust enum 变体，所以不允许成为 Rust 关键字。\n定义规则的左大括号 { 前面可以有影响其操作的符号。\nsilent_rule = _{ ... } atomic_rule = @{ ... } 表达式 Grammar 规则是由表达式建立起来的（因此称为\u0026quot;解析表达式文法\u0026rdquo;）。这些表达式是对如何解析输入字符串的简明、正式的描述。\n表达式是可以组合的：它们可以从其他表达式中构建出来，也可以互相嵌套，以产生任意复杂的规则（尽管你应该将非常复杂的表达式分解成多个规则，以使它们更容易管理）。\nPEG 表达式既适用于高级意义，如\u0026quot;一个函数签名，后面是一个函数体\u0026rdquo;，也适用于低级意义，如\u0026quot;一个分号，后面是换行\u0026rdquo;。组合形式\u0026quot;后面是\u0026rdquo;，即序列操作符，在这两种情况下都是一样的。\n终端 最基本的规则是双引号的文字字符串。\u0026quot;text\u0026quot;。\n如果一个字符串前面有一个逗号，那么它可以不区分大小写（仅适用于 ASCII 字符）: ^\u0026quot;text\u0026quot;。\n在一个范围内的单个字符被写成两个单引号字符，用两个点分开：'0'...'9'。\n你可以用特殊规则 ANY 来匹配任何单个字符。这相当于 '\\u{00}'...'\\u{10FFFF}'，任何一个 Unicode 字符。\n\u0026quot;a literal string\u0026quot; ^\u0026quot;ASCII case-insensitive string\u0026quot; 'a'..'z' ANY 最后，你可以直接写出其他规则的名称来引用它们，甚至可以递归使用规则。\nmy_rule = { \u0026quot;slithy \u0026quot; ~ other_rule } other_rule = { \u0026quot;toves\u0026quot; } recursive_rule = { \u0026quot;mimsy \u0026quot; ~ recursive_rule } 序列 序列运算符写成一个波浪号 ~。\nfirst ~ and_then (\u0026quot;abc\u0026quot;) ~ (^\u0026quot;def\u0026quot;) ~ ('g'..'z') // matches \u0026quot;abcDEFr\u0026quot; 当匹配一个序列表达式时，尝试匹配 first。如果 first 匹配成功，则接下来尝试 and_then。但是，如果 first 失败，则整个表达式失败。\n表达式的列表可以与序列链在一起，这表明所有的组件必须出现，按照指定的顺序。\n有序选择 选择运算符写成一条竖线 |。\nfirst | or_else (\u0026quot;abc\u0026quot;) | (^\u0026quot;def\u0026quot;) | ('g'..'z') // matches \u0026quot;DEF\u0026quot; 当匹配一个选择表达式时，尝试匹配 first。如果 first 匹配成功，则整个表达式立即成功。但是，如果 first 失败，接下来会尝试 or_else。\n注意，first 和 or_else 总是在同一个位置尝试，即使 first 在失败之前匹配了一些输入。当遇到解析失败时，引擎会尝试下一个有序的选择，就像没有匹配到输入一样。失败的解析永远不会消耗任何输入。\nstart = { \u0026quot;Beware \u0026quot; ~ creature } creature = { (\u0026quot;the \u0026quot; ~ \u0026quot;Jabberwock\u0026quot;) | (\u0026quot;the \u0026quot; ~ \u0026quot;Jubjub bird\u0026quot;) } \u0026quot;Beware the Jubjub bird\u0026quot; ^ (start) Parses via the second choice of `creature`, even though the first choice matched \u0026quot;the \u0026quot; successfully. 借用术语，把这种操作看成是\u0026quot;交替\u0026quot;或简单的 \u0026ldquo;OR\u0026rdquo;，有点诱人，但这是误导。之所以特别使用 \u0026ldquo;选择\u0026rdquo; 这个词，是因为这个操作不仅仅是逻辑上的 \u0026ldquo;OR\u0026rdquo;。\n重复 有两个重复运算符：星号 * 和加号 +。它们被放在一个表达式之后。星号 * 表示前面的表达式可以出现零次或多次。加号 + 表示前面的表达式可以出现一次或多次（必须至少出现一次）。\n问号运算符 ? 类似，但它表示表达式是可选的 - 它可以出现0次或1次。\n(\u0026quot;zero\u0026quot; ~ \u0026quot;or\u0026quot; ~ \u0026quot;more\u0026quot;)* (\u0026quot;one\u0026quot; | \u0026quot;or\u0026quot; | \u0026quot;more\u0026quot;)+ (^\u0026quot;optional\u0026quot;)? 请注意，expr* 和 expr? 总是会成功，因为它们被允许匹配零次。例如，\u0026quot;a\u0026quot;* ~ \u0026quot;b\u0026quot;? 即使在空的输入字符串上也会成功。\n其他重复次数可以用大括号来表示。\nexpr{n} // exactly n repetitions expr{m, n} // between m and n repetitions, inclusive expr{, n} // at most n repetitions expr{m, } // at least m repetitions 因此，expr* 等同于 expr{0，}；expr+ 等同于 expr{1，}；expr? 等同于 expr{0，1}。\n谓词 在表达式前面加上安括号 \u0026amp; 或感叹号 !，就会变成一个不消耗任何输入的谓词。你可能知道这些运算符为 \u0026ldquo;向前查看\u0026rdquo; 或 \u0026ldquo;不进位\u0026rdquo;。\n写成安培符 \u0026amp; 的正式谓词试图匹配其内部表达式。如果内部表达式成功，解析就会继续，但位置与谓词相同 - \u0026amp;foo ~ bar 因此是一种 \u0026ldquo;AND\u0026rdquo; 语句。\u0026ldquo;输入字符串必须匹配 foo AND bar\u0026quot;。如果内部表达式失败，整个表达式也会失败。\n写成感叹号的否定谓词 !，试图匹配其内部表达式。如果内部表达式失败，则谓词成功，并在与谓词相同的位置继续解析。如果内部表达式成功，则谓词失败 - !foo ~ bar 因此是一种 \u0026ldquo;NOT\u0026rdquo; 语句。\u0026ldquo;输入的字符串必须与 bar 匹配，但不能是 foo\u0026quot;。\n这就引出了一个常见的惯用法，意思是\u0026quot;任何字符但是\u0026rdquo;：\nnot_space_or_tab = { !( // if the following text is not \u0026quot; \u0026quot; // a space | \u0026quot;\\t\u0026quot; // or a tab ) ~ ANY // then consume one character } triple_quoted_string = { \u0026quot;'''\u0026quot; ~ triple_quoted_character* ~ \u0026quot;'''\u0026quot; } triple_quoted_character = { !\u0026quot;'''\u0026quot; // if the following text is not three apostrophes ~ ANY // then consume one character } 操作符优先级和分组 (WIP) 重复运算符星号 *、加号 + 和问号 ? 适用于紧接前面的表达式。\n\u0026quot;One \u0026quot; ~ \u0026quot;or \u0026quot; ~ \u0026quot;more. \u0026quot;+ \u0026quot;One \u0026quot; ~ \u0026quot;or \u0026quot; ~ (\u0026quot;more. \u0026quot;+) are equivalent and match \u0026quot;One or more. more. more. more. \u0026quot; 较大的表达式可以通过用括号包围来重复。\n(\u0026quot;One \u0026quot; ~ \u0026quot;or \u0026quot; ~ \u0026quot;more. \u0026quot;)+ matches \u0026quot;One or more. One or more. \u0026quot; 重复运算符的优先性最高，其次是谓词运算符、序列运算符，最后是有序选择。\nmy_rule = { \u0026quot;a\u0026quot;* ~ \u0026quot;b\u0026quot;? | \u0026amp;\u0026quot;b\u0026quot;+ ~ \u0026quot;a\u0026quot; } // equivalent to my_rule = { ( (\u0026quot;a\u0026quot;*) ~ (\u0026quot;b\u0026quot;?) ) | ( (\u0026amp;(\u0026quot;b\u0026quot;+)) ~ \u0026quot;a\u0026quot; ) } 输入的开始和结束 规则 SOI 和 EOI 分别匹配输入字符串的开始和结束。两者都不消耗任何文本。它们只表明解析器当前是否在输入的一个边缘。\n例如，为了确保一条规则匹配整个输入，其中任何语法错误都会导致解析失败（而不是成功但不完整的解析）。\nmain = { SOI ~ (...) ~ EOI } 隐含的空白 许多语言和文本格式允许在逻辑标记之间任意留白和注释。例如，Rust 认为 4+5 相当于 4 + 5 和 4 /* comment */ + 5。\n可选规则 WHITESPACE 和 COMMENT 实现了这种行为。如果定义了这两个规则中的任何一个(或两个)，它们将被隐式地插入到每个序列和每个重复之间(原子规则除外)。\nexpression = { \u0026quot;4\u0026quot; ~ \u0026quot;+\u0026quot; ~ \u0026quot;5\u0026quot; } WHITESPACE = _{ \u0026quot; \u0026quot; } COMMENT = _{ \u0026quot;/*\u0026quot; ~ (!\u0026quot;*/\u0026quot; ~ ANY)* ~ \u0026quot;*/\u0026quot; } \u0026quot;4+5\u0026quot; \u0026quot;4 + 5\u0026quot; \u0026quot;4 + 5\u0026quot; \u0026quot;4 /* comment */ + 5\u0026quot; 正如你所看到的，WHITESPACE 和 COMMENT 是重复运行的，所以它们只需要匹配一个空白字符或一个注释。上面的 grammar 相当于。\nexpression = { \u0026quot;4\u0026quot; ~ (ws | com)* ~ \u0026quot;+\u0026quot; ~ (ws | com)* ~ \u0026quot;5\u0026quot; } ws = _{ \u0026quot; \u0026quot; } com = _{ \u0026quot;/*\u0026quot; ~ (!\u0026quot;*/\u0026quot; ~ ANY)* ~ \u0026quot;*/\u0026quot; } 请注意，隐式空格不会插入规则的开头或结尾 - 例如，表达式不匹配 \u0026quot; 4+5 \u0026quot;。如果你想在规则的开头和结尾加入隐式空格，你需要把它夹在两个空规则之间（通常是 SOI 和 EOI，如上所述）。\nWHITESPACE = _{ \u0026quot; \u0026quot; } expression = { \u0026quot;4\u0026quot; ~ \u0026quot;+\u0026quot; ~ \u0026quot;5\u0026quot; } main = { SOI ~ expression ~ EOI } \u0026quot;4+5\u0026quot; \u0026quot; 4 + 5 \u0026quot; (请务必将 WHITESPACE 和 COMMENT 规则标记为静默规则，除非你想在其他规则中看到它们！)\n静默规则和原子规则 静默规则就像普通规则一样 - 当运行时，它们的功能是一样的 - 除了它们不产生 pairs或 tokens。如果一条规则是静默的，那么它永远不会出现在解析结果中。\n要创建一个静默规则，请在左边的大括号 { 前加上一个下划线 _。\nsilent = _{ ... } 原子 pest 有两种原子规则：原子和复合原子。要做一个，在左大括号 { 前写上一个符号。\natomic = @{ ... } compound_atomic = ${ ... } 这两种原子规则都可以防止隐式空格：在原子规则中，波浪号 ~ 表示 \u0026ldquo;紧接着\u0026rdquo;，重复操作符（星号 * 和加号 +）没有隐式分隔。此外，所有从原子规则中调用的其他规则也被视为原子规则。\n两者的区别在于它们如何产生内部规则的标记。在一个原子规则中，内部匹配规则是静默的。相比之下，复合原子规则会像普通规则一样产生内部 token。\n当您要解析的文本忽略空白时，原子规则是很有用的，除了少数情况，例如文字字符串。在这种情况下，您可以编写 WHITESPACE 或 COMMENT 规则，然后使您的字符串匹配规则成为原子规则。\n非原子的 有时候，你会想要取消原子解析的效果。例如，你可能想在表达式内部进行字符串插值，里面的表达式仍然可以像正常的一样有空格。\n#!/bin/env python3 print(f\u0026#34;The answer is {2 + 4}.\u0026#34;) 这是你使用非原子规则的地方。在定义的大括号前面写一个感叹号 ! 无论是否从原子规则中调用，该规则都将作为非原子规则运行。\nfstring = @{ \u0026quot;\\\u0026quot;\u0026quot; ~ ... } expr = !{ ... } 堆栈(WIP) pest 维护了一个可以直接从 grammar 中操作的栈。一个表达式可以用关键字 PUSH 进行匹配并推到栈上，然后再用关键字 PEEK 和 POP 进行精确匹配。\n使用栈可以对完全相同的文本进行多次匹配，而不是相同的模式。\n例如:\nsame_text = { PUSH( \u0026quot;a\u0026quot; | \u0026quot;b\u0026quot; | \u0026quot;c\u0026quot; ) ~ POP } same_pattern = { (\u0026quot;a\u0026quot; | \u0026quot;b\u0026quot; | \u0026quot;c\u0026quot;) ~ (\u0026quot;a\u0026quot; | \u0026quot;b\u0026quot; | \u0026quot;c\u0026quot;) } 在这种情况下，same_pattern 会匹配 \u0026quot;ab\u0026quot;，而 same_text 不会。\n一个实际的用途是解析 Rust 的 \u0026ldquo;原始字符串字面值\u0026quot;，它看起来像这样。\nconstraw_str: \u0026amp;str =r###\u0026#34; Some number of number signs # followed by a quotation mark \u0026#34;. Quotation marks can be used anywhere inside: \u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;, as long as one is not followed by a matching number of number signs, which ends the string: \u0026#34;###;当解析一个原始字符串时，我们必须跟踪引号前出现了多少个数字符号 #。我们可以使用栈来完成这个任务。\nraw_string = { \u0026quot;r\u0026quot; ~ PUSH(\u0026quot;#\u0026quot;*) ~ \u0026quot;\\\u0026quot;\u0026quot; // push the number signs onto the stack ~ raw_string_interior ~ \u0026quot;\\\u0026quot;\u0026quot; ~ POP // match a quotation mark and the number signs } raw_string_interior = { ( !(\u0026quot;\\\u0026quot;\u0026quot; ~ PEEK) // unless the next character is a quotation mark // followed by the correct amount of number signs, ~ ANY // consume one character )* } 小抄    语法 含义 语法 含义     foo = { ... } regular rule baz = @{ ... } atomic   bar = _{ ... } silent\t| qux = ${ \u0026hellip; }` | compound-atomic |       plugh = !{ ... } non-atomic   \u0026quot;abc\u0026quot; exact string ^\u0026quot;abc\u0026quot; case insensitive   'a'..'z' character range ANY any character   foo ~ bar sequence baz | qux ordered choice   foo* zero or more bar+ one or more   baz? optional qux{n} exactly n   qux{m, n} between m and n (inclusive)     \u0026amp;foo positive predicate !bar negative predicate   PUSH(baz) match and push     POP match and pop PEEK match without pop    内置规则 除了 ANY，匹配任何单一的 Unicode 字符外，pest 还提供了几条规则，让解析文本更加方便。\nASCII 规则 在可打印的 ASCII 字符中，它通常对匹配字母字符和数字很有用。对于数字，pest 提供了常见的（基数）的数字。\n   Built-in rule Equivalent     ASCII_DIGIT '0'..'9'   ASCII_NONZERO_DIGIT '1'..'9'   ASCII_BIN_DIGIT '0'..'1'   ASCII_OCT_DIGIT '0'..'7'   ASCII_HEX_DIGIT '0'..'9' | 'a'..'f' | 'A'..'F'    对于字母字符，要区分大写和小写。\n   Built-in rule Equivalent     ASCII_ALPHA_LOWER 'a'..'z'   ASCII_ALPHA_UPPER 'A'..'Z'   ASCII_ALPHA 'a'..'z' | 'A'..'Z'    And for miscellaneous use:\n   Built-in rule Meaning Equivalent     ASCII_ALPHANUMERIC any digit or letter ASCII_DIGIT | ASCII_ALPHA   NEWLINE any line feed format \u0026quot;\\n\u0026quot; | \u0026quot;\\r\\n\u0026quot; | \u0026quot;\\r\u0026quot;    统一码规则 为了更容易正确解析任意 Unicode 文本，pest 包含了大量对应 Unicode 字符属性的规则。这些规则分为一般类别和二进制属性规则。\nUnicode 字符根据其一般用途被划分为不同的类别。每一个字符都属于一个类别，就像每一个 ASCII 字符都是一个控制字符、一个数字、一个字母、一个符号或一个空格一样。\n此外，每个 Unicode 字符都有一个二进制属性列表（真或假），它满足或不满足这些属性。字符可以属于任何数量的这些属性，这取决于它们的含义。\n例如，字符 \u0026ldquo;A\u0026rdquo;，\u0026ldquo;拉丁文大写字母A\u0026rdquo;，属于一般的 \u0026ldquo;大写字母\u0026rdquo; 类别，因为它的一般用途是字母。它具有 \u0026ldquo;大写字母\u0026rdquo; 的二元属性，但不具有 \u0026ldquo;表情符号\u0026rdquo; 的属性。相比之下，\u0026ldquo;负数平方的拉丁文大写字母A\u0026rdquo; 这个字符，因为在文本中一般不作为字母出现，所以属于一般类别 \u0026ldquo;其他符号\u0026rdquo;。它同时具有 \u0026ldquo;大写字母\u0026rdquo; 和 \u0026ldquo;表情符号\u0026rdquo; 的二元属性。\n详情请参考《Unicode 标准》第四章。\n一般类别 从形式上看，类别是不重叠的：每个 Unicode 字符正好属于一个类别，没有一个类别包含另一个类别。然而，由于某些类别组经常一起使用，pest 在下面暴露了类别的层次结构。例如，规则 CASED_LETTER 在技术上不是 Unicode 通用类别，而是匹配属于 UPPERCASE_LETTER 或LOWERCASE_LETTER 的字符，这些都是通用类别。\n LETTER CASED_LETTER UPPERCASE_LETTER LOWERCASE_LETTER TITLECASE_LETTER MODIFIER_LETTER OTHER_LETTER MARK NONSPACING_MARK SPACING_MARK ENCLOSING_MARK NUMBER DECIMAL_NUMBER LETTER_NUMBER OTHER_NUMBER PUNCTUATION CONNECTOR_PUNCTUATION DASH_PUNCTUATION OPEN_PUNCTUATION CLOSE_PUNCTUATION INITIAL_PUNCTUATION FINAL_PUNCTUATION OTHER_PUNCTUATION SYMBOL MATH_SYMBOL CURRENCY_SYMBOL MODIFIER_SYMBOL OTHER_SYMBOL SEPARATOR SPACE_SEPARATOR LINE_SEPARATOR PARAGRAPH_SEPARATOR OTHER CONTROL FORMAT SURROGATE PRIVATE_USE UNASSIGNED  Binary properties 这些属性中有许多是用来定义 Unicode 文本算法的，如双向算法和文本分割算法。这类属性对于大多数解析器来说可能并不有用。\n但是，XID_START 和 XID_CONTINUE 这两个属性特别值得注意，因为它们被定义为 \u0026ldquo;协助标识符的标准处理\u0026rdquo;，\u0026ldquo;如编程语言变量\u0026rdquo;。详见技术报告31。\n ALPHABETIC BIDI_CONTROL CASE_IGNORABLE CASED CHANGES_WHEN_CASEFOLDED CHANGES_WHEN_CASEMAPPED CHANGES_WHEN_LOWERCASED CHANGES_WHEN_TITLECASED CHANGES_WHEN_UPPERCASED DASH DEFAULT_IGNORABLE_CODE_POINT DEPRECATED DIACRITIC EXTENDER GRAPHEME_BASE GRAPHEME_EXTEND GRAPHEME_LINK HEX_DIGIT HYPHEN IDS_BINARY_OPERATOR IDS_TRINARY_OPERATOR ID_CONTINUE ID_START IDEOGRAPHIC JOIN_CONTROL LOGICAL_ORDER_EXCEPTION LOWERCASE MATH NONCHARACTER_CODE_POINT OTHER_ALPHABETIC OTHER_DEFAULT_IGNORABLE_CODE_POINT OTHER_GRAPHEME_EXTEND OTHER_ID_CONTINUE OTHER_ID_START OTHER_LOWERCASE OTHER_MATH OTHER_UPPERCASE PATTERN_SYNTAX PATTERN_WHITE_SPACE PREPENDED_CONCATENATION_MARK QUOTATION_MARK RADICAL REGIONAL_INDICATOR SENTENCE_TERMINAL SOFT_DOTTED TERMINAL_PUNCTUATION UNIFIED_IDEOGRAPH UPPERCASE VARIATION_SELECTOR WHITE_SPACE XID_CONTINUE XID_START  例子: JSON JSON 是一种流行的数据序列化格式，它源于 JavaScript 的语法。JSON 文档是树状的，并且可能是递归的\u0026ndash;对象和数组这两种数据类型可以包含其他值，包括其他对象和数组。\n下面是一个 JSON 文档的例子。\n{ \u0026#34;nesting\u0026#34;: { \u0026#34;inner object\u0026#34;: {} }, \u0026#34;an array\u0026#34;: [1.5, true, null, 1e-6], \u0026#34;string with escaped double quotes\u0026#34; : \u0026#34;\\\u0026#34;quick brown foxes\\\u0026#34;\u0026#34; } 让我们写一个程序，将 JSON 解析成一个 Rust 对象，也就是抽象语法树，然后将 AST 序列化回 JSON。\n设置 我们将从定义 Rust 中的 AST 开始。每个 JSON 数据类型都由一个枚举变体来表示。\nenum JSONValue\u0026lt;\u0026#39;a\u0026gt;{Object(Vec\u0026lt;(\u0026amp;\u0026#39;astr,JSONValue\u0026lt;\u0026#39;a\u0026gt;)\u0026gt;),Array(Vec\u0026lt;JSONValue\u0026lt;\u0026#39;a\u0026gt;\u0026gt;),String(\u0026amp;\u0026#39;astr),Number(f64),Boolean(bool),Null,}为了避免反序列化字符串时的复制，JSONValue 从原始未解析的 JSON 中借用字符串。为了使其工作，我们不能解释字符串转义序列：输入字符串 \u0026ldquo;\\n\u0026rdquo; 将由 JSONValue::String(\u0026quot;\\n\u0026rdquo;) 表示，这是一个有两个字符的 Rust 字符串，尽管它表示的是一个只有一个字符的 JSON 字符串。\n让我们继续看序列化器。为了清晰起见，它使用分配的 Strings，而不是提供 std::fmt::Display 的实现，后者会更习惯。\nfn serialize_jsonvalue(val: \u0026amp;JSONValue)-\u0026gt; String {useJSONValue::*;matchval{Object(o)=\u0026gt;{letcontents: Vec\u0026lt;_\u0026gt;=o.iter().map(|(name,value)|format!(\u0026#34;\\\u0026#34;{}\\\u0026#34;:{}\u0026#34;,name,serialize_jsonvalue(value))).collect();format!(\u0026#34;{{{}}}\u0026#34;,contents.join(\u0026#34;,\u0026#34;))}Array(a)=\u0026gt;{letcontents: Vec\u0026lt;_\u0026gt;=a.iter().map(serialize_jsonvalue).collect();format!(\u0026#34;[{}]\u0026#34;,contents.join(\u0026#34;,\u0026#34;))}String(s)=\u0026gt;format!(\u0026#34;\\\u0026#34;{}\\\u0026#34;\u0026#34;,s),Number(n)=\u0026gt;format!(\u0026#34;{}\u0026#34;,n),Boolean(b)=\u0026gt;format!(\u0026#34;{}\u0026#34;,b),Null=\u0026gt;format!(\u0026#34;null\u0026#34;),}}请注意，在对象和数组的情况下，函数会递归地调用自己。这种模式出现在整个解析器中。AST创建函数在解析结果中递归迭代，而语法的规则也包括了自己。\ngrammar 的编写 让我们从 whitespace 开始。JSON 空格可以出现在任何地方，除了字符串内部（必须单独解析）和数字中的数字之间（不允许）。这使得它很适合 pest 的隐式空白。在 src/json.pest:\nWHITESPACE = _{ \u0026quot; \u0026quot; | \u0026quot;\\t\u0026quot; | \u0026quot;\\r\u0026quot; | \u0026quot;\\n\u0026quot; } JSON 规范包括解析 JSON 字符串的图。我们可以直接从该页面写出语法。让我们把 object 写成一个用逗号分隔的对的序列。\nobject = { \u0026quot;{\u0026quot; ~ \u0026quot;}\u0026quot; | \u0026quot;{\u0026quot; ~ pair ~ (\u0026quot;,\u0026quot; ~ pair)* ~ \u0026quot;}\u0026quot; } pair = { string ~ \u0026quot;:\u0026quot; ~ value } array = { \u0026quot;[\u0026quot; ~ \u0026quot;]\u0026quot; | \u0026quot;[\u0026quot; ~ value ~ (\u0026quot;,\u0026quot; ~ value)* ~ \u0026quot;]\u0026quot; } 对象和数组规则展示了如何用分隔符解析一个潜在的空列表。有两种情况：一种是空列表，另一种是至少有一个元素的列表。这是必要的，因为数组中的逗号，如 [0，1，]，在 JSON 中是非法的。\n现在我们可以写 value，它代表任何单一的数据类型。我们将模仿我们的 AST，将 boolean 和 null 写成单独的规则。\nvalue = _{ object | array | string | number | boolean | null } boolean = { \u0026quot;true\u0026quot; | \u0026quot;false\u0026quot; } null = { \u0026quot;null\u0026quot; } 让我们把字符串的逻辑分成三个部分。char 是一个匹配字符串中任何逻辑字符的规则，包括任何反斜杠转义序列。inner 代表字符串的内容，不包括周围的双引号。string 匹配字符串的内部内容，包括周围的双引号。\nchar 规则使用成语 !(...) ~ ANY，它匹配除了括号中给出的字符之外的任何字符。在这种情况下，除了双引号 \u0026quot;\u0026quot; 和反斜杠 \\ 之外，任何字符在字符串内部都是合法的，这需要单独的解析逻辑。\nstring = ${ \u0026quot;\\\u0026quot;\u0026quot; ~ inner ~ \u0026quot;\\\u0026quot;\u0026quot; } inner = @{ char* } char = { !(\u0026quot;\\\u0026quot;\u0026quot; | \u0026quot;\\\\\u0026quot;) ~ ANY | \u0026quot;\\\\\u0026quot; ~ (\u0026quot;\\\u0026quot;\u0026quot; | \u0026quot;\\\\\u0026quot; | \u0026quot;/\u0026quot; | \u0026quot;b\u0026quot; | \u0026quot;f\u0026quot; | \u0026quot;n\u0026quot; | \u0026quot;r\u0026quot; | \u0026quot;t\u0026quot;) | \u0026quot;\\\\\u0026quot; ~ (\u0026quot;u\u0026quot; ~ ASCII_HEX_DIGIT{4}) } 因为 string 被标记为复原子，所以 string token 对也会包含一个 inner 对。因为 inner 被标记为原子，所以在 inner 中不会出现 char 对。由于这些规则是原子性的，所以在不同的标记之间不允许有空格。\n数字有四个逻辑部分：一个可选的符号、一个整数部分、一个可选的分数部分和一个可选的指数。我们将把数字标记为原子，这样它的部分之间就不能出现空白。\nnumber = @{ \u0026quot;-\u0026quot;? ~ (\u0026quot;0\u0026quot; | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ (\u0026quot;.\u0026quot; ~ ASCII_DIGIT*)? ~ (^\u0026quot;e\u0026quot; ~ (\u0026quot;+\u0026quot; | \u0026quot;-\u0026quot;)? ~ ASCII_DIGIT+)? } 我们需要一个最终规则来表示整个 JSON 文件。JSON 文件的唯一合法内容是一个对象或数组。我们将把这个规则标记为沉默，这样一个解析后的 JSON 文件只包含两个标记对：解析后的值本身，以及 EOI 规则。\njson = _{ SOI ~ (object | array) ~ EOI } AST 生成 让我们把 grammar 编译成 Rust。\nexterncratepest;#[macro_use]externcratepest_derive;usepest::Parser;#[derive(Parser)]#[grammar = \u0026#34;json.pest\u0026#34;]struct JSONParser;我们将写一个同时处理解析和 AST 生成的函数。该函数的用户可以在输入字符串上调用它，然后将返回的结果作为 JSONValue 或解析错误。\nusepest::error::Error;fn parse_json_file(file: \u0026amp;str)-\u0026gt; Result\u0026lt;JSONValue,Error\u0026lt;Rule\u0026gt;\u0026gt;{letjson=JSONParser::parse(Rule::json,file)?.next().unwrap();// ... }现在我们需要根据规则，递归处理 Pair。我们知道 json 是一个对象或者数组，但是这些值本身可能包含一个对象或者数组！这时，我们就需要写一个辅助递归函数，直接将 Pair 解析成 JSONValue。最合理的处理方式是写一个辅助递归函数，直接将 Pair 解析成 JSONValue。\nfn parse_json_file(file: \u0026amp;str)-\u0026gt; Result\u0026lt;JSONValue,Error\u0026lt;Rule\u0026gt;\u0026gt;{// ... usepest::iterators::Pair;fn parse_value(pair: Pair\u0026lt;Rule\u0026gt;)-\u0026gt; JSONValue{matchpair.as_rule(){Rule::object=\u0026gt;JSONValue::Object(pair.into_inner().map(|pair|{letmutinner_rules=pair.into_inner();letname=inner_rules.next().unwrap().into_inner().next().unwrap().as_str();letvalue=parse_value(inner_rules.next().unwrap());(name,value)}).collect(),),Rule::array=\u0026gt;JSONValue::Array(pair.into_inner().map(parse_value).collect()),Rule::string=\u0026gt;JSONValue::String(pair.into_inner().next().unwrap().as_str()),Rule::number=\u0026gt;JSONValue::Number(pair.as_str().parse().unwrap()),Rule::boolean=\u0026gt;JSONValue::Boolean(pair.as_str().parse().unwrap()),Rule::null=\u0026gt;JSONValue::Null,Rule::json|Rule::EOI|Rule::pair|Rule::value|Rule::inner|Rule::char|Rule::WHITESPACE=\u0026gt;unreachable!(),}}// ... }对象和数组的情况值得特别注意。数组令牌对的内容只是一个值的序列。由于我们使用的是 Rust 迭代器，我们可以简单地将每个值递归地映射到它的解析 AST 节点，然后将它们收集到一个 Vec 中。对于对象，过程是类似的，除了迭代器是在对上，我们需要分别从对上提取名称和值。\n数字和布尔的情况下，使用 Rust 的 str::parse 方法将解析后的字符串转换为相应的 Rust 类型。每一个合法的 JSON 数字都可以直接解析成一个 Rust 浮点数！我们在 Rust 的 str::parse 方法上运行 parse_value。\n我们对解析结果运行 parse_value 来完成转换。\nfn parse_json_file(file: \u0026amp;str)-\u0026gt; Result\u0026lt;JSONValue,Error\u0026lt;Rule\u0026gt;\u0026gt;{// ... Ok(parse_value(json))}精加工 我们的主要功能现在非常简单。首先，我们从一个名为 data.json 的文件中读取 JSON 数据。接下来，我们将文件内容解析成一个 JSON AST。最后，我们将 AST 序列化回一个字符串并打印出来。\nusestd::fs;fn main(){letunparsed_file=fs::read_to_string(\u0026#34;data.json\u0026#34;).expect(\u0026#34;cannot read file\u0026#34;);letjson: JSONValue=parse_json_file(\u0026amp;unparsed_file).expect(\u0026#34;unsuccessful parse\u0026#34;);println!(\u0026#34;{}\u0026#34;,serialize_jsonvalue(\u0026amp;json));}试试吧! 将本章顶部的示例文档复制到 data.json 中，然后运行程序! 你应该看到这样的东西。\n$ cargo run [ ... ] {\u0026quot;nesting\u0026quot;:{\u0026quot;inner object\u0026quot;:{}},\u0026quot;an array\u0026quot;:[1.5,true,null,0.000001],\u0026quot;string with escaped double quotes\u0026quot;:\u0026quot;\\\u0026quot;quick brown foxes\\\u0026quot;\u0026quot;} 例子: J 语言 J 语言是一种受 APL 影响的数组编程语言。在 J 语言中，对单个数字(2*3)的操作可以很容易地应用于整个数字列表(2*3 4 5，返回 6 8 10)。\nJ 中的操作符被称为动词。动词要么是一元的（取一个参数，如 *: 3，\u0026ldquo;3 的平方\u0026rdquo;），要么是二元的（取两个参数，两边各一个，如 5 - 4，\u0026ldquo;5减4\u0026rdquo;）。\n下面是一个 J 程序的例子。\n\u0026#39;A string\u0026#39; *: 1 2 3 4 matrix =: 2 3 $ 5 + 2 3 4 5 6 7 10 * matrix 1 + 10 20 30 1 2 3 + 10 residues =: 2 | 0 1 2 3 4 5 6 7 residues 使用 J 的解释器运行上述程序，在标准输出上得到如下结果。\nA string 1 4 9 16 70 80 90 100 110 120 11 21 31 11 12 13 0 1 0 1 0 1 0 1 在这一节中，我们将为 J 的一个子集写一个 grammar，然后我们将通过一个解析器，通过迭代 pest 给我们的规则来建立一个 AST。你可以在本书的资源库中找到完整的源代码。\nGrammar 我们将从程序规则开始，逐节建立 grammar。\nprogram = _{ SOI ~ \u0026quot;\\n\u0026quot;* ~ (stmt ~ \u0026quot;\\n\u0026quot;+) * ~ stmt? ~ EOI } 每个 J 程序都包含由一个或多个换行符分隔的语句。请注意前面的下划线，它告诉 pest 屏蔽 program 规则 - 我们不想让 program 作为一个 token 出现在解析流中，我们想要的是底层语句。\n语句就是一个简单的表达式，由于只有一种这样的可能性，所以我们也将这个 stmt 规则屏蔽，这样我们的解析器就会收到一个底层 expr 的迭代器。\nstmt = _{ expr } 表达式可以是对变量标识符的赋值，也可以是单项表达式、对偶表达式、单个字符串或术语数组。\nexpr = { assgmtExpr | monadicExpr | dyadicExpr | string | terms } 一元表达式由一个动词组成，其唯一的操作数在右边；三元表达式的操作数在动词的两边。赋值表达式将标识符与表达式相关联。\n在 J 中，没有操作符的优先性 - 求值是右联的（从右到左），括号内的表达式先被求值。\nmonadicExpr = { verb ~ expr } dyadicExpr = { (monadicExpr | terms) ~ verb ~ expr } assgmtExpr = { ident ~ \u0026quot;=:\u0026quot; ~ expr } 项的列表应该至少包含一个十进制、整数、标识符或小括号表达式；我们只关心这些基础值，所以我们用前导下划线屏蔽 term 规则。\nterms = { term+ } term = _{ decimal | integer | ident | \u0026quot;(\u0026quot; ~ expr ~ \u0026quot;)\u0026quot; } J 的几个动词在这个 grammar 中是有定义的，J 的全部词汇要广泛得多。\nverb = { \u0026quot;\u0026gt;:\u0026quot; | \u0026quot;*:\u0026quot; | \u0026quot;-\u0026quot; | \u0026quot;%\u0026quot; | \u0026quot;#\u0026quot; | \u0026quot;\u0026gt;.\u0026quot; | \u0026quot;+\u0026quot; | \u0026quot;*\u0026quot; | \u0026quot;\u0026lt;\u0026quot; | \u0026quot;=\u0026quot; | \u0026quot;^\u0026quot; | \u0026quot;|\u0026quot; | \u0026quot;\u0026gt;\u0026quot; | \u0026quot;$\u0026quot; } 现在我们可以进入词法规则了。J 中的数字和平常一样，除了负数用前导的 _ 下划线表示外（因为 - 是一个动词，它作为单项式执行否定，作为对偶式执行减法）。J 中的标识符必须以字母开头，但之后可以包含数字。字符串由单引号包围；引号本身可以通过用附加引号转义来嵌入。\n请注意我们如何使用 pest 的 @ 修饰符使这些规则中的每一条都是原子的，这意味着隐式空白是被禁止的，而且内部规则（即 ident 中的 ASCII_ALPHA）变为 silent - 当我们的解析器接收到这些 token 时，它们将是终端的。\ninteger = @{ \u0026quot;_\u0026quot;? ~ ASCII_DIGIT+ } decimal = @{ \u0026quot;_\u0026quot;? ~ ASCII_DIGIT+ ~ \u0026quot;.\u0026quot; ~ ASCII_DIGIT* } ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | \u0026quot;_\u0026quot;)* } string = @{ \u0026quot;'\u0026quot; ~ ( \u0026quot;''\u0026quot; | (!\u0026quot;'\u0026quot; ~ ANY) )* ~ \u0026quot;'\u0026quot; } J 中的空白只由空格和制表符组成。换行的意义在于它们是对语句的定界，因此它们不在本规则之内。\nWHITESPACE = _{ \u0026quot; \u0026quot; | \u0026quot;\\t\u0026quot; } 最后，我们必须处理注释。J 中的注释以 NB. 开始，一直到它们所在行的末尾。关键的是，我们决不能消耗注释行末的换行；这是为了将注释之前的任何语句与后续行的语句分开。\nCOMMENT = _{ \u0026quot;NB.\u0026quot; ~ (!\u0026quot;\\n\u0026quot; ~ ANY)* } 解析和 AST 生成 本节将介绍一个使用上述 grammar 的解析器。这里省略了库中的内容和自明的代码，你可以在本书的资源库中找到解析器的全部内容。\n首先我们将枚举我们 grammar 中定义的动词，区分一元动词和二元动词。这些枚举将在我们的 AST 中作为标签使用。\npubenum MonadicVerb{Increment,Square,Negate,Reciprocal,Tally,Ceiling,ShapeOf,}pubenum DyadicVerb{Plus,Times,LessThan,LargerThan,Equal,Minus,Divide,Power,Residue,Copy,LargerOf,LargerOrEqual,Shape,}那么我们就来列举一下 AST 的各类节点。\npubenum AstNode{Print(Box\u0026lt;AstNode\u0026gt;),Integer(i32),DoublePrecisionFloat(f64),MonadicOp{verb: MonadicVerb,expr: Box\u0026lt;AstNode\u0026gt;,},DyadicOp{verb: DyadicVerb,lhs: Box\u0026lt;AstNode\u0026gt;,rhs: Box\u0026lt;AstNode\u0026gt;,},Terms(Vec\u0026lt;AstNode\u0026gt;),IsGlobal{ident: String,expr: Box\u0026lt;AstNode\u0026gt;,},Ident(String),Str(CString),}为了解析 J 程序中的顶层语句，我们有下面的 parse 函数，它接受一个字符串形式的 J 程序，并将其传递给 pest 进行解析。我们得到一个 Pair 的序列。正如 grammar 中所规定的那样，一个语句只能由一个表达式组成，所以下面的匹配会解析这些顶层表达式中的每一个，并将它们包装在一个 Print AST 节点中，以符合 J 解释器的 REPL 行为。\npubfn parse(source: \u0026amp;str)-\u0026gt; Result\u0026lt;Vec\u0026lt;AstNode\u0026gt;,Error\u0026lt;Rule\u0026gt;\u0026gt;{letmutast=vec![];letpairs=JParser::parse(Rule::program,source)?;forpairinpairs{matchpair.as_rule(){Rule::expr=\u0026gt;{ast.push(Print(Box::new(build_ast_from_expr(pair))));}_=\u0026gt;{}}}Ok(ast)}AST 节点是通过遍历 Pair 迭代器，按照我们 grammar 文件中设定的期望值，从表达式中构建出来的。常见的行为被抽象出单独的函数，如 parse_monadic_verb 和 parse_dyadic_verb，代表表达式本身的 Pair 则在递归调用 build_ast_from_expr 中传递。\nfn build_ast_from_expr(pair: pest::iterators::Pair\u0026lt;Rule\u0026gt;)-\u0026gt; AstNode{matchpair.as_rule(){Rule::expr=\u0026gt;build_ast_from_expr(pair.into_inner().next().unwrap()),Rule::monadicExpr=\u0026gt;{letmutpair=pair.into_inner();letverb=pair.next().unwrap();letexpr=pair.next().unwrap();letexpr=build_ast_from_expr(expr);parse_monadic_verb(verb,expr)}// ... other cases elided here ... }}二元动词从它们的字符串表示方式直接映射到 AST 节点。\nfn parse_dyadic_verb(pair: pest::iterators::Pair\u0026lt;Rule\u0026gt;,lhs: AstNode,rhs: AstNode)-\u0026gt; AstNode{AstNode::DyadicOp{lhs: Box::new(lhs),rhs: Box::new(rhs),verb: matchpair.as_str(){\u0026#34;+\u0026#34;=\u0026gt;DyadicVerb::Plus,\u0026#34;*\u0026#34;=\u0026gt;DyadicVerb::Times,\u0026#34;-\u0026#34;=\u0026gt;DyadicVerb::Minus,\u0026#34;\u0026lt;\u0026#34;=\u0026gt;DyadicVerb::LessThan,\u0026#34;=\u0026#34;=\u0026gt;DyadicVerb::Equal,\u0026#34;\u0026gt;\u0026#34;=\u0026gt;DyadicVerb::LargerThan,\u0026#34;%\u0026#34;=\u0026gt;DyadicVerb::Divide,\u0026#34;^\u0026#34;=\u0026gt;DyadicVerb::Power,\u0026#34;|\u0026#34;=\u0026gt;DyadicVerb::Residue,\u0026#34;#\u0026#34;=\u0026gt;DyadicVerb::Copy,\u0026#34;\u0026gt;.\u0026#34;=\u0026gt;DyadicVerb::LargerOf,\u0026#34;\u0026gt;:\u0026#34;=\u0026gt;DyadicVerb::LargerOrEqual,\u0026#34;$\u0026#34;=\u0026gt;DyadicVerb::Shape,_=\u0026gt;panic!(\u0026#34;Unexpected dyadic verb: {}\u0026#34;,pair.as_str()),},}}如同一元动词一样。\nfn parse_monadic_verb(pair: pest::iterators::Pair\u0026lt;Rule\u0026gt;,expr: AstNode)-\u0026gt; AstNode{AstNode::MonadicOp{verb: matchpair.as_str(){\u0026#34;\u0026gt;:\u0026#34;=\u0026gt;MonadicVerb::Increment,\u0026#34;*:\u0026#34;=\u0026gt;MonadicVerb::Square,\u0026#34;-\u0026#34;=\u0026gt;MonadicVerb::Negate,\u0026#34;%\u0026#34;=\u0026gt;MonadicVerb::Reciprocal,\u0026#34;#\u0026#34;=\u0026gt;MonadicVerb::Tally,\u0026#34;\u0026gt;.\u0026#34;=\u0026gt;MonadicVerb::Ceiling,\u0026#34;$\u0026#34;=\u0026gt;MonadicVerb::ShapeOf,_=\u0026gt;panic!(\u0026#34;Unsupported monadic verb: {}\u0026#34;,pair.as_str()),},expr: Box::new(expr),}}最后，我们定义了一个函数来处理数字和字符串等项。数字需要一些操作来处理 J 的前导下划线，表示否定，但除此之外，处理过程是典型的。\nfn build_ast_from_term(pair: pest::iterators::Pair\u0026lt;Rule\u0026gt;)-\u0026gt; AstNode{matchpair.as_rule(){Rule::integer=\u0026gt;{letistr=pair.as_str();let(sign,istr)=match\u0026amp;istr[..1]{\u0026#34;_\u0026#34;=\u0026gt;(-1,\u0026amp;istr[1..]),_=\u0026gt;(1,\u0026amp;istr[..]),};letinteger: i32 =istr.parse().unwrap();AstNode::Integer(sign*integer)}Rule::decimal=\u0026gt;{letdstr=pair.as_str();let(sign,dstr)=match\u0026amp;dstr[..1]{\u0026#34;_\u0026#34;=\u0026gt;(-1.0,\u0026amp;dstr[1..]),_=\u0026gt;(1.0,\u0026amp;dstr[..]),};letmutflt: f64 =dstr.parse().unwrap();ifflt!=0.0{// Avoid negative zeroes; only multiply sign by nonzeroes. flt*=sign;}AstNode::DoublePrecisionFloat(flt)}Rule::expr=\u0026gt;build_ast_from_expr(pair),Rule::ident=\u0026gt;AstNode::Ident(String::from(pair.as_str())),unknown_term=\u0026gt;panic!(\u0026#34;Unexpected term: {:?}\u0026#34;,unknown_term),}}运行解析器 现在我们可以定义一个 main 函数，将 J 程序传递给我们的 pest-enabled 解析器。\nfn main(){letunparsed_file=std::fs::read_to_string(\u0026#34;example.ijs\u0026#34;).expect(\u0026#34;cannot read ijs file\u0026#34;);letastnode=parse(\u0026amp;unparsed_file).expect(\u0026#34;unsuccessful parse\u0026#34;);println!(\u0026#34;{:?}\u0026#34;,\u0026amp;astnode);}在 example.ijs 中使用这段代码。\n_2.5 ^ 3 *: 4.8 title =: 'Spinning at the Boundary' *: _1 2 _3 4 1 2 3 + 10 20 30 1 + 10 20 30 1 2 3 + 10 2 | 0 1 2 3 4 5 6 7 another =: 'It''s Escaped' 3 | 0 1 2 3 4 5 6 7 (2+1)*(2+2) 3 * 2 + 1 1 + 3 % 4 x =: 100 x - 1 y =: x - 1 y 当我们运行解析器时，我们会在标准输出上得到以下抽象语法树。\n$ cargo run [ ... ] [Print(DyadicOp { verb: Power, lhs: DoublePrecisionFloat(-2.5), rhs: Integer(3) }), Print(MonadicOp { verb: Square, expr: DoublePrecisionFloat(4.8) }), Print(IsGlobal { ident: \u0026quot;title\u0026quot;, expr: Str(\u0026quot;Spinning at the Boundary\u0026quot;) }), Print(MonadicOp { verb: Square, expr: Terms([Integer(-1), Integer(2), Integer(-3), Integer(4)]) }), Print(DyadicOp { verb: Plus, lhs: Terms([Integer(1), Integer(2), Integer(3)]), rhs: Terms([Integer(10), Integer(20), Integer(30)]) }), Print(DyadicOp { verb: Plus, lhs: Integer(1), rhs: Terms([Integer(10), Integer(20), Integer(30)]) }), Print(DyadicOp { verb: Plus, lhs: Terms([Integer(1), Integer(2), Integer(3)]), rhs: Integer(10) }), Print(DyadicOp { verb: Residue, lhs: Integer(2), rhs: Terms([Integer(0), Integer(1), Integer(2), Integer(3), Integer(4), Integer(5), Integer(6), Integer(7)]) }), Print(IsGlobal { ident: \u0026quot;another\u0026quot;, expr: Str(\u0026quot;It\\'s Escaped\u0026quot;) }), Print(DyadicOp { verb: Residue, lhs: Integer(3), rhs: Terms([Integer(0), Integer(1), Integer(2), Integer(3), Integer(4), Integer(5), Integer(6), Integer(7)]) }), Print(DyadicOp { verb: Times, lhs: DyadicOp { verb: Plus, lhs: Integer(2), rhs: Integer(1) }, rhs: DyadicOp { verb: Plus, lhs: Integer(2), rhs: Integer(2) } }), Print(DyadicOp { verb: Times, lhs: Integer(3), rhs: DyadicOp { verb: Plus, lhs: Integer(2), rhs: Integer(1) } }), Print(DyadicOp { verb: Plus, lhs: Integer(1), rhs: DyadicOp { verb: Divide, lhs: Integer(3), rhs: Integer(4) } }), Print(IsGlobal { ident: \u0026quot;x\u0026quot;, expr: Integer(100) }), Print(DyadicOp { verb: Minus, lhs: Ident(\u0026quot;x\u0026quot;), rhs: Integer(1) }), Print(IsGlobal { ident: \u0026quot;y\u0026quot;, expr: DyadicOp { verb: Minus, lhs: Ident(\u0026quot;x\u0026quot;), rhs: Integer(1) } }), Print(Ident(\u0026quot;y\u0026quot;))] "},"name":"Pest Grammars","published":"2021-01-20T00:00:00+08:00","summary":"Pest Grammars","type":"entry","url":"https://ohmyweekly.github.io/notes/2021-01-20-pest-grammars/"},{"content":{"html":"\u003ch2 id=\"例子-ini\"\u003e例子: INI\u003c/h2\u003e\n\u003cp\u003eINI(initialization 的简称)文件是简单的配置文件。由于没有标准的格式，我们将编写一个能够解析这个例子文件的程序。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ini\" data-lang=\"ini\"\u003e\u003cspan class=\"na\"\u003eusername\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003enoha\u003c/span\u003e\n\u003cspan class=\"na\"\u003epassword\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003eplain_text\u003c/span\u003e\n\u003cspan class=\"na\"\u003esalt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003eNaCl\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003e[server_1]\u003c/span\u003e\n\u003cspan class=\"na\"\u003einterface\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003eeth0\u003c/span\u003e\n\u003cspan class=\"na\"\u003eip\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e127.0.0.1\u003c/span\u003e\n\u003cspan class=\"na\"\u003edocument_root\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e/var/www/example.org\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003e[empty_section]\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003e[second_server]\u003c/span\u003e\n\u003cspan class=\"na\"\u003edocument_root\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e/var/www/example.com\u003c/span\u003e\n\u003cspan class=\"na\"\u003eip\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\n\u003cspan class=\"na\"\u003einterface\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003eeth1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e每一行都包含一个键和值，中间用等号隔开；或者包含一个用方括号括起来的章节名；或者是空白，没有任何意义。\u003c/p\u003e\n\u003cp\u003e每当出现一个节名，下面的键和值就属于该节，直到下一个节名。文件开头的键值对属于一个隐式的 \u0026ldquo;空\u0026quot;节。\u003c/p\u003e\n\u003ch2 id=\"编写-grammar\"\u003e编写 grammar\u003c/h2\u003e\n\u003cp\u003e首先使用 Cargo \u003ca href=\"https://pest.rs/book/examples/csv.html#setup\"\u003e初始化一个新项目\u003c/a\u003e，添加依赖关系 \u003ccode\u003epest = \u0026quot;2.0\u0026quot;\u003c/code\u003e 和  \u003ccode\u003epest_derive = \u0026quot;2.0\u0026quot;\u003c/code\u003e。创建一个新文件 \u003ccode\u003esrc/ini.pest\u003c/code\u003e 来保存 grammar。\u003c/p\u003e\n\u003cp\u003e我们文件中感兴趣的文本 - \u003ccode\u003eusername\u003c/code\u003e、\u003ccode\u003e/var/www/example.org\u003c/code\u003e 等 - 只由几个字符组成。让我们制定一个规则来识别该集合中的单个字符。内置的规则 \u003ccode\u003eASCII_ALPHANUMERIC\u003c/code\u003e 是表示任何大写或小写 ASCII 字母或任何数字的快捷方式。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003echar = { ASCII_ALPHANUMERIC | \u0026quot;.\u0026quot; | \u0026quot;_\u0026quot; | \u0026quot;/\u0026quot; }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e节名和属性键不能为空，但属性值可以为空（如上文中的 \u003ccode\u003eip=\u003c/code\u003e 行）。也就是说，前者由一个或多个字符组成，\u003ccode\u003echar+\u003c/code\u003e; 后者由零或多个字符组成，\u003ccode\u003echar*\u003c/code\u003e。我们将其含义分为两条规则。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename = { char+ }\nvalue = { char* }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e现在很容易表达这两种输入行。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esection = { \u0026quot;[\u0026quot; ~ name ~ \u0026quot;]\u0026quot; }\nproperty = { name ~ \u0026quot;=\u0026quot; ~ value }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最后，我们需要一个规则来表示整个输入文件。表达式 \u003ccode\u003e(section | property)?\u003c/code\u003e 匹配 \u003ccode\u003esection\u003c/code\u003e、\u003ccode\u003eproperty\u003c/code\u003e，否则什么也不匹配。使用内置规则 \u003ccode\u003eNEWLINE\u003c/code\u003e 来匹配行尾。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efile = {\n    SOI ~\n    ((section | property)? ~ NEWLINE)* ~\n    EOI\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e要将解析器编译成 Rust，我们需要在 \u003ccode\u003esrc/main.rs\u003c/code\u003e 中添加以下内容。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003eextern\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ecrate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#[macro_use]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eextern\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ecrate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epest_derive\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epest\u003c/span\u003e::\u003cspan class=\"n\"\u003eParser\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#[derive(Parser)]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#[grammar = \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;ini.pest\u0026#34;\u003c/span\u003e\u003cspan class=\"cp\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003epub\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eINIParser\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"程序初始化\"\u003e程序初始化\u003c/h2\u003e\n\u003cp\u003e现在我们可以读取文件，并用 \u003ccode\u003epest\u003c/code\u003e 进行解析。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e::\u003cspan class=\"n\"\u003ecollections\u003c/span\u003e::\u003cspan class=\"n\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e::\u003cspan class=\"n\"\u003efs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eunparsed_file\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efs\u003c/span\u003e::\u003cspan class=\"n\"\u003eread_to_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;config.ini\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;cannot read file\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eINIParser\u003c/span\u003e::\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eunparsed_file\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;unsuccessful parse\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// unwrap the parse result\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// get and unwrap the `file` rule; never fails\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们将使用嵌套的 \u003ccode\u003eHashMap\u003c/code\u003e 来表达属性列表。外层哈希 map 将以章节名称作为键，以章节内容（内部哈希 map）作为值。每个内部哈希 map 将有属性键和属性值。例如，要访问 \u003ccode\u003eserver_1\u003c/code\u003e 的 \u003ccode\u003edocument_root\u003c/code\u003e，我们可以写 \u003ccode\u003eproperties[\u0026quot;server_1\u0026quot;][\u0026quot;document_root\u0026quot;]\u003c/code\u003e。隐含的 \u0026ldquo;空\u0026quot;节将由常规部分表示，名称为空字符串 \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e，这样 \u003ccode\u003eproperties[\u0026quot;\u0026quot;][\u0026quot;salt\u0026quot;]\u003c/code\u003e 就是有效的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eproperties\u003c/span\u003e: \u003cspan class=\"nc\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026amp;\u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026amp;\u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eHashMap\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，哈希 map 的键和值都是 \u003ccode\u003e\u0026amp;str\u003c/code\u003e，即借用的字符串。\u003ccode\u003epest\u003c/code\u003e 解析器不会复制他们解析的输入，而是借用。所有用于检查解析结果的方法都会返回从原始解析字符串中借用字符串。\u003c/p\u003e\n\u003ch2 id=\"主循环\"\u003e主循环\u003c/h2\u003e\n\u003cp\u003e现在我们解释解析结果。我们循环浏览文件的每一行，这一行要么是节名，要么是键值属性对。如果遇到一个节名，我们更新一个变量。如果遇到一个属性对，我们就获取一个对当前章节的哈希 map 的引用，然后把这个属性对插入到这个哈希 map 中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent_section_name\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ein\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einto_inner\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eas_rule\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003esection\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einner_rules\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einto_inner\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// { name }\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent_section_name\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einner_rules\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003eproperty\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einner_rules\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einto_inner\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// { name ~ \u0026#34;=\u0026#34; ~ value }\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e: \u003cspan class=\"kp\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einner_rules\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e: \u003cspan class=\"kp\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"kt\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einner_rules\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eunwrap\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003eas_str\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"c1\"\u003e// Insert an empty inner hash map if the outer hash map hasn\u0026#39;t\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"c1\"\u003e// seen this section name before.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esection\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eproperties\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eentry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent_section_name\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eor_default\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003esection\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einsert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eRule\u003c/span\u003e::\u003cspan class=\"n\"\u003eEOI\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eunreachable\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在输出方面，我们用\u003ca href=\"https://doc.rust-lang.org/std/fmt/index.html#sign0\"\u003e漂亮的打印\u003c/a\u003e \u003ccode\u003eDebug\u003c/code\u003e 格式简单地转储哈希 map。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"k\"\u003efn\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{:#?}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eproperties\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"空白\"\u003e空白\u003c/h2\u003e\n\u003cp\u003e如果你把本章顶部的例子 INI 文件复制到 \u003ccode\u003econfig.ini\u003c/code\u003e 文件中并运行程序，它将无法解析。我们已经忘记了等号周围的可选空格!\u003c/p\u003e\n\u003cp\u003e对于大型 grammar 来说，处理空白会很不方便。显示地编写 \u003ccode\u003ewhitespace\u003c/code\u003e 规则并手动插入空白会让 grammar 变得难以阅读和修改。\u003ccode\u003epest\u003c/code\u003e 提供了一个\u003ca href=\"https://pest.rs/book/grammars/syntax.html#implicit-whitespace\"\u003e特殊规则 \u003ccode\u003eWHITESPACE\u003c/code\u003e\u003c/a\u003e 的解决方案。如果定义了 \u003ccode\u003eWHITESPACE\u003c/code\u003e，它将被隐式地运行，尽可能多次地在每个波浪号 \u003ccode\u003e~\u003c/code\u003e 和每个重复之间运行（例如，\u003ccode\u003e*\u003c/code\u003e 和 \u003ccode\u003e+\u003c/code\u003e）。对于我们的 INI 解析器，只有空格才是合法的 whitespace。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWHITESPACE = _{ \u0026quot; \u0026quot; }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们用一个前导的下划线 \u003ccode\u003e_{ ... }\u003c/code\u003e 来标记 \u003ccode\u003eWHITESPACE\u003c/code\u003e 规则的\u003ca href=\"https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules\"\u003e静默\u003c/a\u003e。}. 这样，即使它匹配，也不会出现在其他规则中。如果它不是静默的，解析就会复杂得多，因为对  \u003ccode\u003ePairs::next(...)\u003c/code\u003e 的每次调用都有可能返回 \u003ccode\u003eRule::WHITESPACE\u003c/code\u003e 而不是想要的下一条规则。\u003c/p\u003e\n\u003cp\u003e但是等等! 节名、键或值中不应该有空格！目前，空格是自动插入的。目前，在 \u003ccode\u003ename = { char+ }\u003c/code\u003e 中，空格会自动插入字符之间。对空格敏感的规则需要用前导符号 \u003ccode\u003e@{ ... }\u003c/code\u003e 来标记\u003ca href=\"https://pest.rs/book/grammars/syntax.html#atomic\"\u003e原子\u003c/a\u003e。}. 在原子规则中，自动的空白处理是被禁用的，而内部规则是静默的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename = @{ char+ }\nvalue = @{ char* }\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"完工\"\u003e完工\u003c/h2\u003e\n\u003cp\u003e试试吧！确保文件 \u003ccode\u003econfig.ini\u003c/code\u003e 存在，然后运行程序! 你应该看到这样的东西。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ cargo run\n  [ ... ]\n{\n    \u0026quot;\u0026quot;: {\n        \u0026quot;password\u0026quot;: \u0026quot;plain_text\u0026quot;,\n        \u0026quot;username\u0026quot;: \u0026quot;noha\u0026quot;,\n        \u0026quot;salt\u0026quot;: \u0026quot;NaCl\u0026quot;\n    },\n    \u0026quot;second_server\u0026quot;: {\n        \u0026quot;ip\u0026quot;: \u0026quot;\u0026quot;,\n        \u0026quot;document_root\u0026quot;: \u0026quot;/var/www/example.com\u0026quot;,\n        \u0026quot;interface\u0026quot;: \u0026quot;eth1\u0026quot;\n    },\n    \u0026quot;server_1\u0026quot;: {\n        \u0026quot;interface\u0026quot;: \u0026quot;eth0\u0026quot;,\n        \u0026quot;document_root\u0026quot;: \u0026quot;/var/www/example.org\u0026quot;,\n        \u0026quot;ip\u0026quot;: \u0026quot;127.0.0.1\u0026quot;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e","text":"例子: INI INI(initialization 的简称)文件是简单的配置文件。由于没有标准的格式，我们将编写一个能够解析这个例子文件的程序。\nusername = noha password = plain_text salt = NaCl [server_1] interface=eth0 ip=127.0.0.1 document_root=/var/www/example.org [empty_section] [second_server] document_root=/var/www/example.com ip= interface=eth1 每一行都包含一个键和值，中间用等号隔开；或者包含一个用方括号括起来的章节名；或者是空白，没有任何意义。\n每当出现一个节名，下面的键和值就属于该节，直到下一个节名。文件开头的键值对属于一个隐式的 \u0026ldquo;空\u0026quot;节。\n编写 grammar 首先使用 Cargo 初始化一个新项目，添加依赖关系 pest = \u0026quot;2.0\u0026quot; 和 pest_derive = \u0026quot;2.0\u0026quot;。创建一个新文件 src/ini.pest 来保存 grammar。\n我们文件中感兴趣的文本 - username、/var/www/example.org 等 - 只由几个字符组成。让我们制定一个规则来识别该集合中的单个字符。内置的规则 ASCII_ALPHANUMERIC 是表示任何大写或小写 ASCII 字母或任何数字的快捷方式。\nchar = { ASCII_ALPHANUMERIC | \u0026quot;.\u0026quot; | \u0026quot;_\u0026quot; | \u0026quot;/\u0026quot; } 节名和属性键不能为空，但属性值可以为空（如上文中的 ip= 行）。也就是说，前者由一个或多个字符组成，char+; 后者由零或多个字符组成，char*。我们将其含义分为两条规则。\nname = { char+ } value = { char* } 现在很容易表达这两种输入行。\nsection = { \u0026quot;[\u0026quot; ~ name ~ \u0026quot;]\u0026quot; } property = { name ~ \u0026quot;=\u0026quot; ~ value } 最后，我们需要一个规则来表示整个输入文件。表达式 (section | property)? 匹配 section、property，否则什么也不匹配。使用内置规则 NEWLINE 来匹配行尾。\nfile = { SOI ~ ((section | property)? ~ NEWLINE)* ~ EOI } 要将解析器编译成 Rust，我们需要在 src/main.rs 中添加以下内容。\nexterncratepest;#[macro_use]externcratepest_derive;usepest::Parser;#[derive(Parser)]#[grammar = \u0026#34;ini.pest\u0026#34;]pubstruct INIParser;程序初始化 现在我们可以读取文件，并用 pest 进行解析。\nusestd::collections::HashMap;usestd::fs;fn main(){letunparsed_file=fs::read_to_string(\u0026#34;config.ini\u0026#34;).expect(\u0026#34;cannot read file\u0026#34;);letfile=INIParser::parse(Rule::file,\u0026amp;unparsed_file).expect(\u0026#34;unsuccessful parse\u0026#34;)// unwrap the parse result .next().unwrap();// get and unwrap the `file` rule; never fails // ... }我们将使用嵌套的 HashMap 来表达属性列表。外层哈希 map 将以章节名称作为键，以章节内容（内部哈希 map）作为值。每个内部哈希 map 将有属性键和属性值。例如，要访问 server_1 的 document_root，我们可以写 properties[\u0026quot;server_1\u0026quot;][\u0026quot;document_root\u0026quot;]。隐含的 \u0026ldquo;空\u0026quot;节将由常规部分表示，名称为空字符串 \u0026quot;\u0026quot;，这样 properties[\u0026quot;\u0026quot;][\u0026quot;salt\u0026quot;] 就是有效的。\nfn main(){// ... letmutproperties: HashMap\u0026lt;\u0026amp;str,HashMap\u0026lt;\u0026amp;str,\u0026amp;str\u0026gt;\u0026gt;=HashMap::new();// ... }请注意，哈希 map 的键和值都是 \u0026amp;str，即借用的字符串。pest 解析器不会复制他们解析的输入，而是借用。所有用于检查解析结果的方法都会返回从原始解析字符串中借用字符串。\n主循环 现在我们解释解析结果。我们循环浏览文件的每一行，这一行要么是节名，要么是键值属性对。如果遇到一个节名，我们更新一个变量。如果遇到一个属性对，我们就获取一个对当前章节的哈希 map 的引用，然后把这个属性对插入到这个哈希 map 中。\n// ... letmutcurrent_section_name=\u0026#34;\u0026#34;;forlineinfile.into_inner(){matchline.as_rule(){Rule::section=\u0026gt;{letmutinner_rules=line.into_inner();// { name } current_section_name=inner_rules.next().unwrap().as_str();}Rule::property=\u0026gt;{letmutinner_rules=line.into_inner();// { name ~ \u0026#34;=\u0026#34; ~ value } letname: \u0026amp;str =inner_rules.next().unwrap().as_str();letvalue: \u0026amp;str =inner_rules.next().unwrap().as_str();// Insert an empty inner hash map if the outer hash map hasn\u0026#39;t // seen this section name before. letsection=properties.entry(current_section_name).or_default();section.insert(name,value);}Rule::EOI=\u0026gt;(),_=\u0026gt;unreachable!(),}}// ... 在输出方面，我们用漂亮的打印 Debug 格式简单地转储哈希 map。\nfn main(){// ... println!(\u0026#34;{:#?}\u0026#34;,properties);}空白 如果你把本章顶部的例子 INI 文件复制到 config.ini 文件中并运行程序，它将无法解析。我们已经忘记了等号周围的可选空格!\n对于大型 grammar 来说，处理空白会很不方便。显示地编写 whitespace 规则并手动插入空白会让 grammar 变得难以阅读和修改。pest 提供了一个特殊规则 WHITESPACE 的解决方案。如果定义了 WHITESPACE，它将被隐式地运行，尽可能多次地在每个波浪号 ~ 和每个重复之间运行（例如，* 和 +）。对于我们的 INI 解析器，只有空格才是合法的 whitespace。\nWHITESPACE = _{ \u0026quot; \u0026quot; } 我们用一个前导的下划线 _{ ... } 来标记 WHITESPACE 规则的静默。}. 这样，即使它匹配，也不会出现在其他规则中。如果它不是静默的，解析就会复杂得多，因为对 Pairs::next(...) 的每次调用都有可能返回 Rule::WHITESPACE 而不是想要的下一条规则。\n但是等等! 节名、键或值中不应该有空格！目前，空格是自动插入的。目前，在 name = { char+ } 中，空格会自动插入字符之间。对空格敏感的规则需要用前导符号 @{ ... } 来标记原子。}. 在原子规则中，自动的空白处理是被禁用的，而内部规则是静默的。\nname = @{ char+ } value = @{ char* } 完工 试试吧！确保文件 config.ini 存在，然后运行程序! 你应该看到这样的东西。\n$ cargo run [ ... ] { \u0026quot;\u0026quot;: { \u0026quot;password\u0026quot;: \u0026quot;plain_text\u0026quot;, \u0026quot;username\u0026quot;: \u0026quot;noha\u0026quot;, \u0026quot;salt\u0026quot;: \u0026quot;NaCl\u0026quot; }, \u0026quot;second_server\u0026quot;: { \u0026quot;ip\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;document_root\u0026quot;: \u0026quot;/var/www/example.com\u0026quot;, \u0026quot;interface\u0026quot;: \u0026quot;eth1\u0026quot; }, \u0026quot;server_1\u0026quot;: { \u0026quot;interface\u0026quot;: \u0026quot;eth0\u0026quot;, \u0026quot;document_root\u0026quot;: \u0026quot;/var/www/example.org\u0026quot;, \u0026quot;ip\u0026quot;: \u0026quot;127.0.0.1\u0026quot; } } "},"name":"Parser API - 解析 INI","published":"2021-01-19T00:00:00+08:00","summary":"Parser API - Example: INI","type":"entry","url":"https://ohmyweekly.github.io/notes/2021-01-19-parser-api-example-ini/"}],"name":"Rust","type":"feed","url":"https://ohmyweekly.github.io/categories/rust/"}