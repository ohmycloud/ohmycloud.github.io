{"author":{"name":null,"type":"card","url":"http://localhost:1313/"},"content":{"html":"\u003cp\u003e在本系列的\u003ca href=\"https://opensource.com/article/18/7/migrating-perl-5-perl-6\"\u003e第一篇\u003c/a\u003e文章中，将 Perl 5 与 Raku 进行了比较，我们研究了将代码迁移到 Raku 时可能遇到的一些问题。在\u003ca href=\"https://opensource.com/article/18/7/garbage-collection-perl-6\"\u003e第二篇\u003c/a\u003e文章中，我们研究了垃圾收集在 Raku 中的工作原理。第三篇文章，我们将重点介绍 Perl 5 的引用以及如何在 Raku 中处理它们，并介绍绑定和容器的概念。\u003c/p\u003e\n\u003ch2 id=\"引用\"\u003e引用\u003c/h2\u003e\n\u003cp\u003eRaku 中没有引用，这对许多习惯于 Perl 5 语义的人来说都是令人惊讶的。但不要担心：因为没有引用，所以您不必担心是否应该解引用某些内容。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-perl5\" data-lang=\"perl5\"\u003e# Perl 5\nmy $foo = \\@bar;   # must add reference \\ to make $foo a reference to @bar\nsay @bar[1];       # no dereference needed\nsay $foo-\u0026gt;[1];     # must add dereference -\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Raku\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e@bar\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# $foo now contains @bar\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@bar\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# no dereference needed, note: sigil does not change\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# no dereference needed either\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e有人可能会说 Raku 中的所有东西都是引用。来自 Perl 5（其中一个对象是一个受祝福的引用），这将是关于 Raku 的逻辑结论，其中所有的东西都是对象（或者可以被认为是一个对象）。但这并不能完全符合 Raku 中的情况，并且会妨碍你理解 Raku 的工作原理。谨防\u003ca href=\"https://en.wikipedia.org/wiki/False_friend\"\u003e虚假的朋友\u003c/a\u003e！\u003c/p\u003e\n\u003ch2 id=\"绑定\"\u003e绑定\u003c/h2\u003e\n\u003cp\u003e在我们完成赋值之前，了解 Raku 中绑定的概念很重要。您可以使用 \u003ccode\u003e:=\u003c/code\u003e 运算符将某些东西显式绑定到其他东西上。定义词法变量时，可以将值绑定到它：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# note: := instead of =\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e简单地说，这会在词法填充（lexpad）中创建一个名为 \u0026ldquo;\u003cstrong\u003e$foo\u003c/strong\u003e\u0026rdquo; 的键（您可以将其视为编译时哈希，其中包含有关该词法范围内可见事物的信息）并使其 42 为字面值。因为这是一个文字常量，所以你无法改变它。试图这样做会导致异常。所以不要那样做！\u003c/p\u003e\n\u003cp\u003e在许多情况下，这种绑定操作在引擎盖下使用，例如在迭代时：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# can also be written as ^10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# [0 1 2 3 4 5 6 7 8 9]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# $_ is bound to each array element and incremented\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# [1 2 3 4 5 6 7 8 9 10]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果您尝试迭代常量列表，则 \u003ccode\u003e**$_**\u003c/code\u003e 绑定到字面值，您无法递增：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# error: requires mutable arguments\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"赋值\"\u003e赋值\u003c/h2\u003e\n\u003cp\u003e如果你在 Perl 5 和 Raku 中比较“创建一个词法变量并赋值给它”，它在外面看起来是一样的：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$bar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e56\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# both Perl 5 and Raku\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Raku 中，这也会在 lexpad 中创建一个名为 “\u003cstrong\u003e$bar\u003c/strong\u003e” 的键。但是不是直接将值绑定到该 lexpad 条目，而是为您创建一个容器（\u003cstrong\u003eScalar\u003c/strong\u003e对象），并将其绑定到“\u003cstrong\u003e$bar\u003c/strong\u003e”的 lexpad 条目。然后，56 被存储为该容器中的值。在伪代码中，您可以将其视为：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$bar\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"kt\"\u003eScalar\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e56\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，\u003cstrong\u003eScalar\u003c/strong\u003e 对象已绑定，未分配。 Perl 5 中最接近它的是绑定标量。但当然“= \u003cstrong\u003e56\u003c/strong\u003e”的类型要少得多！\u003c/p\u003e\n\u003cp\u003e诸如 \u003cstrong\u003eArray\u003c/strong\u003e 和 \u003cstrong\u003eHash\u003c/strong\u003e 之类的数据结构也会自动将值放在绑定到结构的容器中。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# empty Array\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e@a\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# bind a Scalar container to 6th element and put 42 in it\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"容器\"\u003e容器\u003c/h2\u003e\n\u003cp\u003e对于 Raku 中的大多数操作，\u003cstrong\u003eScalar\u003c/strong\u003e 容器对象是不可见的，因此大多数情况下您不必考虑它。例如，每当您使用变量作为参数调用子例程（或方法）时，它将绑定到容器中的值。而且因为您无法分配值，您会得到：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003efrobnicate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$this\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$this\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e666\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nf\"\u003efrobnicate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# Cannot assign to a readonly variable or a value\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果要允许分配外部值，可以将 \u003cstrong\u003eis rw\u003c/strong\u003e trait 添加到签名中的变量。这会将签名中的变量绑定到指定变量的容器，从而允许赋值：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003esub\u003c/span\u003e \u003cspan class=\"nf\"\u003eoknicate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$this\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"k\"\u003erw\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$this\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e666\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nf\"\u003eoknicate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e# no problem\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$foo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# 42\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"proxy\"\u003eProxy\u003c/h2\u003e\n\u003cp\u003e从概念上讲，Raku 中的 \u003cstrong\u003eScalar\u003c/strong\u003e 对象有一个 \u003cstrong\u003eFETCH\u003c/strong\u003e 方法（用于生成对象中的值）和一个 \u003cstrong\u003eSTORE\u003c/strong\u003e 方法（用于更改对象中的值），就像 Perl 5 中的绑定标量一样。\u003c/p\u003e\n\u003cp\u003e假设您稍后将值 \u003cstrong\u003e768\u003c/strong\u003e 分配给 \u003cstrong\u003e$bar\u003c/strong\u003e 变量：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$bar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e768\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e发生的事情在概念上相当于：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$bar\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eSTORE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e768\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e假设您要在 \u003cstrong\u003e$bar\u003c/strong\u003e 中的值中添加 \u003cstrong\u003e20\u003c/strong\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$bar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$bar\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e概念上发生的是：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$bar\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003eSTORE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nv\"\u003e$bar\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eFETCH\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果要在容器上指定自己的 \u003cstrong\u003eFETCH\u003c/strong\u003e 和 \u003cstrong\u003eSTORE\u003c/strong\u003e 方法，可以通过绑定到 \u003ca href=\"https://docs.raku.org/type/Proxy\"\u003eProxy\u003c/a\u003e 对象来实现。例如，要创建一个始终报告分配给它的值的两倍的变量：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$double\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# $double now a Proxy, rather than a Scalar container\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"nv\"\u003e$value\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eProxy\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"s\"\u003eFETCH\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e     \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$value\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nv\"\u003e$value\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"s\"\u003eSTORE\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003emethod\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$new\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$new\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意，您需要一个额外的变量来保存存储在这样一个容器中的值。\u003c/p\u003e\n\u003ch2 id=\"约束和默认值\"\u003e约束和默认值\u003c/h2\u003e\n\u003cp\u003e除了值之外，\u003ca href=\"https://docs.raku.org/type/Scalar\"\u003eScalar\u003c/a\u003e 还包含额外信息，例如类型约束和默认值。采用这个定义：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003emy\u003c/span\u003e \u003cspan class=\"kt\"\u003eInt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$baz\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e666\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e它创建一个名为 “\u003cstrong\u003e$baz\u003c/strong\u003e” 的标量绑定到 lexpad，将该容器中的值约束为使用 \u003cstrong\u003eInt\u003c/strong\u003e 成功智能匹配的类型，将容器的默认值设置为 \u003cstrong\u003e42\u003c/strong\u003e，并将值 \u003cstrong\u003e666\u003c/strong\u003e 放入容器中。\u003c/p\u003e\n\u003cp\u003e由于类型约束，为该变量分配字符串将失败：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$baz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026#34;;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Type check failed in assignment to $baz; expected Int but got Str (\u0026#34;foo\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果在定义变量时未给出类型约束，则将假定为 \u003cstrong\u003eAny\u003c/strong\u003e 类型。如果未指定默认值，则将假定类型约束。\u003c/p\u003e\n\u003cp\u003e将 \u003cstrong\u003eNil\u003c/strong\u003e（相当于 Perl 5 的 \u003cstrong\u003eundef\u003c/strong\u003e 的 Raku）分配给该变量会将其重置为默认值：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-raku\" data-lang=\"raku\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$baz\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# 666\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$baz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eNil\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esay\u003c/span\u003e \u003cspan class=\"nv\"\u003e$baz\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# 42\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\n\u003cp\u003ePerl 5 具有值和值的引用。 Raku 没有引用，但它有值和容器。 Raku 中有两种类型的容器：\u003ca href=\"https://docs.raku.org/type/Proxy\"\u003eProxy\u003c/a\u003e（很像 Perl 5 中的绑定标量）和 \u003ca href=\"https://docs.raku.org/type/Scalar\"\u003eScalar\u003c/a\u003e。简单地说，变量以及 \u003ca href=\"https://docs.raku.org/type/List\"\u003eList\u003c/a\u003e，\u003ca href=\"https://docs.raku.org/type/Array\"\u003eArray\u003c/a\u003e 或 \u003ca href=\"https://docs.raku.org/type/Hash\"\u003eHash\u003c/a\u003e 的元素是值（如果它已绑定）或容器（如果已分配）。无论何时调用子例程（或方法），给定的参数都被解除容器化并绑定到子例程的参数（除非另有说明）。容器还保留类型约束和默认值等信息。将Nil分配给变量会将其返回到其默认值，如果未指定类型约束，则为Any。\u003c/p\u003e\n\u003ch2 id=\"原文连接\"\u003e原文连接\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://opensource.com/article/18/8/containers-perl-6\"\u003ehttps://opensource.com/article/18/8/containers-perl-6\u003c/a\u003e\u003c/p\u003e\n","text":"在本系列的第一篇文章中，将 Perl 5 与 Raku 进行了比较，我们研究了将代码迁移到 Raku 时可能遇到的一些问题。在第二篇文章中，我们研究了垃圾收集在 Raku 中的工作原理。第三篇文章，我们将重点介绍 Perl 5 的引用以及如何在 Raku 中处理它们，并介绍绑定和容器的概念。\n引用 Raku 中没有引用，这对许多习惯于 Perl 5 语义的人来说都是令人惊讶的。但不要担心：因为没有引用，所以您不必担心是否应该解引用某些内容。\n# Perl 5 my $foo = \\@bar; # must add reference \\ to make $foo a reference to @bar say @bar[1]; # no dereference needed say $foo-\u0026gt;[1]; # must add dereference -\u0026gt; # Raku my $foo = @bar; # $foo now contains @bar say @bar[1]; # no dereference needed, note: sigil does not change say $foo[1]; # no dereference needed either 有人可能会说 Raku 中的所有东西都是引用。来自 Perl 5（其中一个对象是一个受祝福的引用），这将是关于 Raku 的逻辑结论，其中所有的东西都是对象（或者可以被认为是一个对象）。但这并不能完全符合 Raku 中的情况，并且会妨碍你理解 Raku 的工作原理。谨防虚假的朋友！\n绑定 在我们完成赋值之前，了解 Raku 中绑定的概念很重要。您可以使用 := 运算符将某些东西显式绑定到其他东西上。定义词法变量时，可以将值绑定到它：\nmy $foo := 42; # note: := instead of = 简单地说，这会在词法填充（lexpad）中创建一个名为 \u0026ldquo;$foo\u0026rdquo; 的键（您可以将其视为编译时哈希，其中包含有关该词法范围内可见事物的信息）并使其 42 为字面值。因为这是一个文字常量，所以你无法改变它。试图这样做会导致异常。所以不要那样做！\n在许多情况下，这种绑定操作在引擎盖下使用，例如在迭代时：\nmy @a = 0..9; # can also be written as ^10 say @a; # [0 1 2 3 4 5 6 7 8 9] for @a { $_++ } # $_ is bound to each array element and incremented say @a; # [1 2 3 4 5 6 7 8 9 10] 如果您尝试迭代常量列表，则 **$_** 绑定到字面值，您无法递增：\nfor 0..9 { $_++ } # error: requires mutable arguments 赋值 如果你在 Perl 5 和 Raku 中比较“创建一个词法变量并赋值给它”，它在外面看起来是一样的：\nmy $bar = 56; # both Perl 5 and Raku 在 Raku 中，这也会在 lexpad 中创建一个名为 “$bar” 的键。但是不是直接将值绑定到该 lexpad 条目，而是为您创建一个容器（Scalar对象），并将其绑定到“$bar”的 lexpad 条目。然后，56 被存储为该容器中的值。在伪代码中，您可以将其视为：\nmy $bar := Scalar.new( value =\u0026gt; 56 ); 请注意，Scalar 对象已绑定，未分配。 Perl 5 中最接近它的是绑定标量。但当然“= 56”的类型要少得多！\n诸如 Array 和 Hash 之类的数据结构也会自动将值放在绑定到结构的容器中。\nmy @a; # empty Array @a[5] = 42; # bind a Scalar container to 6th element and put 42 in it 容器 对于 Raku 中的大多数操作，Scalar 容器对象是不可见的，因此大多数情况下您不必考虑它。例如，每当您使用变量作为参数调用子例程（或方法）时，它将绑定到容器中的值。而且因为您无法分配值，您会得到：\nsub frobnicate($this) { $this = 42; } my $foo = 666; frobnicate($foo); # Cannot assign to a readonly variable or a value 如果要允许分配外部值，可以将 is rw trait 添加到签名中的变量。这会将签名中的变量绑定到指定变量的容器，从而允许赋值：\nsub oknicate($this is rw) { $this = 42; } my $foo = 666; oknicate($foo); # no problem say $foo; # 42 Proxy 从概念上讲，Raku 中的 Scalar 对象有一个 FETCH 方法（用于生成对象中的值）和一个 STORE 方法（用于更改对象中的值），就像 Perl 5 中的绑定标量一样。\n假设您稍后将值 768 分配给 $bar 变量：\n$bar = 768; 发生的事情在概念上相当于：\n$bar.STORE(768); 假设您要在 $bar 中的值中添加 20：\n$bar = $bar + 20; 概念上发生的是：\n$bar.STORE( $bar.FETCH + 20 ); 如果要在容器上指定自己的 FETCH 和 STORE 方法，可以通过绑定到 Proxy 对象来实现。例如，要创建一个始终报告分配给它的值的两倍的变量：\nmy $double := do { # $double now a Proxy, rather than a Scalar container my $value; Proxy.new( FETCH =\u0026gt; method () { $value + $value }, STORE =\u0026gt; method ($new) { $value = $new } ) } 请注意，您需要一个额外的变量来保存存储在这样一个容器中的值。\n约束和默认值 除了值之外，Scalar 还包含额外信息，例如类型约束和默认值。采用这个定义：\nmy Int $baz is default(42) = 666; 它创建一个名为 “$baz” 的标量绑定到 lexpad，将该容器中的值约束为使用 Int 成功智能匹配的类型，将容器的默认值设置为 42，并将值 666 放入容器中。\n由于类型约束，为该变量分配字符串将失败：\n$baz = \u0026#34;foo\u0026#34;; # Type check failed in assignment to $baz; expected Int but got Str (\u0026#34;foo\u0026#34;) 如果在定义变量时未给出类型约束，则将假定为 Any 类型。如果未指定默认值，则将假定类型约束。\n将 Nil（相当于 Perl 5 的 undef 的 Raku）分配给该变量会将其重置为默认值：\nsay $baz; # 666 $baz = Nil; say $baz; # 42 总结 Perl 5 具有值和值的引用。 Raku 没有引用，但它有值和容器。 Raku 中有两种类型的容器：Proxy（很像 Perl 5 中的绑定标量）和 Scalar。简单地说，变量以及 List，Array 或 Hash 的元素是值（如果它已绑定）或容器（如果已分配）。无论何时调用子例程（或方法），给定的参数都被解除容器化并绑定到子例程的参数（除非另有说明）。容器还保留类型约束和默认值等信息。将Nil分配给变量会将其返回到其默认值，如果未指定类型约束，则为Any。\n原文连接 https://opensource.com/article/18/8/containers-perl-6\n"},"name":"Raku 中的容器","published":"2018-08-29T19:55:09+08:00","summary":"在本系列的第一篇文章中，将 Perl 5 与 Raku 进行了比较，我们研究了将代码迁移到 Raku 时可能遇到的一些问题。在第二篇文章中，我们研究了垃圾收集在 Raku 中的工作原理。第三篇文章，我们将重点介绍 Perl 5 的引用以及如何在 Raku 中处理它们，并介绍绑定和容器的概念。\n引用 Raku 中没有引用，这对许多习惯于 Perl 5 语义的人来说都是令人惊讶的。但不要担心：因为没有引用，所以您不必担心是否应该解引用某些内容。\n# Perl 5 my $foo = \\@bar; # must add reference \\ to make $foo a reference to @bar say @bar[1]; # no dereference needed say $foo-\u0026gt;[1]; # must add dereference -\u0026gt; # Raku my $foo = @bar; # $foo now contains @bar say @bar[1]; # no dereference needed, note: sigil does not change say $foo[1]; # no dereference needed either 有人可能会说 Raku 中的所有东西都是引用。来自 Perl 5（其中一个对象是一个受祝福的引用），这将是关于 Raku 的逻辑结论，其中所有的东西都是对象（或者可以被认为是一个对象）。但这并不能完全符合 Raku 中的情况，并且会妨碍你理解 Raku 的工作原理。谨防虚假的朋友！","type":"entry","url":"http://localhost:1313/raku/2018-08-29-raku%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8/"}